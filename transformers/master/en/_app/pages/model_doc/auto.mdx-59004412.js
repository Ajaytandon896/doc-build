import{S as gCt,i as hCt,s as uCt,e as a,k as l,w as m,t as o,M as pCt,c as s,d as t,m as i,a as n,x as f,h as r,b as c,F as e,g as b,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as V9r}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function _Ct($i){let J,Pe,de,ge,io,me,Te,Vo,Ii,Pm,ca,ji,Di,z5,$m,Le,co,Ni,qs,W5,Os,Gs,Q5,qi,Xs,H5,Oi,Im,Na;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),me=a("code"),Te=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),Pm=o("model_type"),ca=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),z5=o(")."),$m=l(),Le=a("p"),co=o("Likewise, if your "),Ni=a("code"),qs=o("NewModel"),W5=o(" is a subclass of "),Os=a("a"),Gs=o("PreTrainedModel"),Q5=o(`, make sure its
`),qi=a("code"),Xs=o("config_class"),H5=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Im=o("NewModelConfig"),Na=o(")."),this.h()},l(mo){J=s(mo,"P",{});var he=n(J);Pe=r(he,"If your "),de=s(he,"CODE",{});var D7=n(de);ge=r(D7,"NewModelConfig"),D7.forEach(t),io=r(he," is a subclass of "),me=s(he,"CODE",{});var Gi=n(me);Te=r(Gi,"PretrainedConfig"),Gi.forEach(t),Vo=r(he,`, make sure its
`),Ii=s(he,"CODE",{});var N7=n(Ii);Pm=r(N7,"model_type"),N7.forEach(t),ca=r(he," attribute is set to the same key you use when registering the config (here "),ji=s(he,"CODE",{});var q7=n(ji);Di=r(q7,'"new-model"'),q7.forEach(t),z5=r(he,")."),he.forEach(t),$m=i(mo),Le=s(mo,"P",{});var zo=n(Le);co=r(zo,"Likewise, if your "),Ni=s(zo,"CODE",{});var qa=n(Ni);qs=r(qa,"NewModel"),qa.forEach(t),W5=r(zo," is a subclass of "),Os=s(zo,"A",{href:!0});var O7=n(Os);Gs=r(O7,"PreTrainedModel"),O7.forEach(t),Q5=r(zo,`, make sure its
`),qi=s(zo,"CODE",{});var jm=n(qi);Xs=r(jm,"config_class"),jm.forEach(t),H5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=s(zo,"CODE",{});var G7=n(Oi);Im=r(G7,"NewModelConfig"),G7.forEach(t),Na=r(zo,")."),zo.forEach(t),this.h()},h(){c(Os,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel")},m(mo,he){b(mo,J,he),e(J,Pe),e(J,de),e(de,ge),e(J,io),e(J,me),e(me,Te),e(J,Vo),e(J,Ii),e(Ii,Pm),e(J,ca),e(J,ji),e(ji,Di),e(J,z5),b(mo,$m,he),b(mo,Le,he),e(Le,co),e(Le,Ni),e(Ni,qs),e(Le,W5),e(Le,Os),e(Os,Gs),e(Le,Q5),e(Le,qi),e(qi,Xs),e(Le,H5),e(Le,Oi),e(Oi,Im),e(Le,Na)},d(mo){mo&&t(J),mo&&t($m),mo&&t(Le)}}}function bCt($i){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Te=n(J);Pe=r(Te,"Passing "),de=s(Te,"CODE",{});var Vo=n(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(me,Te){b(me,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(me){me&&t(J)}}}function vCt($i){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Te=n(J);Pe=r(Te,"Passing "),de=s(Te,"CODE",{});var Vo=n(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(me,Te){b(me,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(me){me&&t(J)}}}function TCt($i){let J,Pe,de,ge,io,me,Te,Vo,Ii,Pm,ca,ji,Di,z5,$m,Le,co,Ni,qs,W5,Os,Gs,Q5,qi,Xs,H5,Oi,Im,Na,mo,he,D7,Gi,N7,q7,zo,qa,O7,jm,G7,fPe,KBe,Xi,Dm,cQ,U5,gPe,mQ,hPe,ZBe,Vs,uPe,fQ,pPe,_Pe,gQ,bPe,vPe,exe,J5,oxe,X7,TPe,rxe,Nm,txe,Vi,qm,hQ,Y5,FPe,uQ,CPe,axe,Wo,K5,MPe,Z5,EPe,V7,yPe,wPe,APe,ey,LPe,pQ,BPe,xPe,kPe,fo,oy,RPe,_Q,SPe,PPe,zi,$Pe,bQ,IPe,jPe,vQ,DPe,NPe,qPe,v,Om,TQ,OPe,GPe,z7,XPe,VPe,zPe,Gm,FQ,WPe,QPe,W7,HPe,UPe,JPe,Xm,CQ,YPe,KPe,Q7,ZPe,e$e,o$e,Vm,MQ,r$e,t$e,H7,a$e,s$e,n$e,zm,EQ,l$e,i$e,U7,d$e,c$e,m$e,Wm,yQ,f$e,g$e,J7,h$e,u$e,p$e,Qm,wQ,_$e,b$e,Y7,v$e,T$e,F$e,Hm,AQ,C$e,M$e,K7,E$e,y$e,w$e,Um,LQ,A$e,L$e,Z7,B$e,x$e,k$e,Jm,BQ,R$e,S$e,e9,P$e,$$e,I$e,Ym,xQ,j$e,D$e,o9,N$e,q$e,O$e,Km,kQ,G$e,X$e,r9,V$e,z$e,W$e,Zm,RQ,Q$e,H$e,t9,U$e,J$e,Y$e,ef,SQ,K$e,Z$e,a9,eIe,oIe,rIe,of,PQ,tIe,aIe,s9,sIe,nIe,lIe,rf,$Q,iIe,dIe,n9,cIe,mIe,fIe,tf,IQ,gIe,hIe,l9,uIe,pIe,_Ie,af,jQ,bIe,vIe,i9,TIe,FIe,CIe,sf,DQ,MIe,EIe,d9,yIe,wIe,AIe,nf,NQ,LIe,BIe,c9,xIe,kIe,RIe,lf,qQ,SIe,PIe,m9,$Ie,IIe,jIe,df,OQ,DIe,NIe,f9,qIe,OIe,GIe,cf,GQ,XIe,VIe,g9,zIe,WIe,QIe,mf,XQ,HIe,UIe,h9,JIe,YIe,KIe,ff,VQ,ZIe,eje,u9,oje,rje,tje,gf,zQ,aje,sje,p9,nje,lje,ije,hf,WQ,dje,cje,_9,mje,fje,gje,uf,QQ,hje,uje,b9,pje,_je,bje,pf,HQ,vje,Tje,v9,Fje,Cje,Mje,_f,UQ,Eje,yje,T9,wje,Aje,Lje,bf,JQ,Bje,xje,F9,kje,Rje,Sje,vf,YQ,Pje,$je,C9,Ije,jje,Dje,Tf,KQ,Nje,qje,M9,Oje,Gje,Xje,Ff,ZQ,Vje,zje,E9,Wje,Qje,Hje,Cf,eH,Uje,Jje,y9,Yje,Kje,Zje,Mf,oH,eDe,oDe,w9,rDe,tDe,aDe,Ef,rH,sDe,nDe,A9,lDe,iDe,dDe,yf,tH,cDe,mDe,L9,fDe,gDe,hDe,wf,aH,uDe,pDe,B9,_De,bDe,vDe,Af,sH,TDe,FDe,x9,CDe,MDe,EDe,Lf,nH,yDe,wDe,k9,ADe,LDe,BDe,Bf,lH,xDe,kDe,R9,RDe,SDe,PDe,xf,iH,$De,IDe,S9,jDe,DDe,NDe,kf,dH,qDe,ODe,P9,GDe,XDe,VDe,Rf,cH,zDe,WDe,$9,QDe,HDe,UDe,Sf,mH,JDe,YDe,I9,KDe,ZDe,eNe,Pf,fH,oNe,rNe,j9,tNe,aNe,sNe,$f,gH,nNe,lNe,D9,iNe,dNe,cNe,If,hH,mNe,fNe,N9,gNe,hNe,uNe,jf,uH,pNe,_Ne,q9,bNe,vNe,TNe,Df,pH,FNe,CNe,O9,MNe,ENe,yNe,Nf,_H,wNe,ANe,G9,LNe,BNe,xNe,qf,bH,kNe,RNe,X9,SNe,PNe,$Ne,Of,vH,INe,jNe,V9,DNe,NNe,qNe,Gf,TH,ONe,GNe,z9,XNe,VNe,zNe,Xf,FH,WNe,QNe,W9,HNe,UNe,JNe,Vf,CH,YNe,KNe,Q9,ZNe,eqe,oqe,zf,MH,rqe,tqe,H9,aqe,sqe,nqe,Wf,EH,lqe,iqe,U9,dqe,cqe,mqe,Qf,yH,fqe,gqe,J9,hqe,uqe,pqe,Hf,wH,_qe,bqe,Y9,vqe,Tqe,Fqe,Uf,AH,Cqe,Mqe,K9,Eqe,yqe,wqe,Jf,LH,Aqe,Lqe,Z9,Bqe,xqe,kqe,Yf,BH,Rqe,Sqe,eB,Pqe,$qe,Iqe,Kf,xH,jqe,Dqe,oB,Nqe,qqe,Oqe,Zf,kH,Gqe,Xqe,rB,Vqe,zqe,Wqe,eg,RH,Qqe,Hqe,tB,Uqe,Jqe,Yqe,og,SH,Kqe,Zqe,aB,eOe,oOe,rOe,rg,PH,tOe,aOe,sB,sOe,nOe,lOe,tg,$H,iOe,dOe,nB,cOe,mOe,fOe,ag,IH,gOe,hOe,lB,uOe,pOe,_Oe,sg,jH,bOe,vOe,iB,TOe,FOe,COe,ng,DH,MOe,EOe,dB,yOe,wOe,AOe,lg,NH,LOe,BOe,cB,xOe,kOe,ROe,ig,qH,SOe,POe,mB,$Oe,IOe,jOe,dg,OH,DOe,NOe,fB,qOe,OOe,GOe,cg,GH,XOe,VOe,gB,zOe,WOe,QOe,mg,XH,HOe,UOe,hB,JOe,YOe,KOe,fg,VH,ZOe,eGe,uB,oGe,rGe,tGe,gg,zH,aGe,sGe,pB,nGe,lGe,iGe,hg,WH,dGe,cGe,_B,mGe,fGe,gGe,ug,QH,hGe,uGe,bB,pGe,_Ge,bGe,pg,HH,vGe,TGe,vB,FGe,CGe,MGe,_g,UH,EGe,yGe,TB,wGe,AGe,LGe,bg,JH,BGe,xGe,FB,kGe,RGe,SGe,vg,YH,PGe,$Ge,CB,IGe,jGe,DGe,Tg,KH,NGe,qGe,MB,OGe,GGe,XGe,Fg,ZH,VGe,zGe,EB,WGe,QGe,HGe,Cg,eU,UGe,JGe,yB,YGe,KGe,ZGe,Mg,oU,eXe,oXe,wB,rXe,tXe,aXe,Eg,rU,sXe,nXe,AB,lXe,iXe,dXe,yg,tU,cXe,mXe,LB,fXe,gXe,hXe,wg,aU,uXe,pXe,BB,_Xe,bXe,vXe,Ag,sU,TXe,FXe,xB,CXe,MXe,EXe,nU,yXe,wXe,ry,AXe,Lg,ty,LXe,lU,BXe,sxe,Wi,Bg,iU,ay,xXe,dU,kXe,nxe,Qo,sy,RXe,ny,SXe,kB,PXe,$Xe,IXe,ly,jXe,cU,DXe,NXe,qXe,go,iy,OXe,mU,GXe,XXe,Oa,VXe,fU,zXe,WXe,gU,QXe,HXe,hU,UXe,JXe,YXe,E,zs,uU,KXe,ZXe,RB,eVe,oVe,SB,rVe,tVe,aVe,Ws,pU,sVe,nVe,PB,lVe,iVe,$B,dVe,cVe,mVe,Qs,_U,fVe,gVe,IB,hVe,uVe,jB,pVe,_Ve,bVe,xg,bU,vVe,TVe,DB,FVe,CVe,MVe,Hs,vU,EVe,yVe,NB,wVe,AVe,qB,LVe,BVe,xVe,kg,TU,kVe,RVe,OB,SVe,PVe,$Ve,Rg,FU,IVe,jVe,GB,DVe,NVe,qVe,Sg,CU,OVe,GVe,XB,XVe,VVe,zVe,Us,MU,WVe,QVe,VB,HVe,UVe,zB,JVe,YVe,KVe,Js,EU,ZVe,eze,WB,oze,rze,QB,tze,aze,sze,Ys,yU,nze,lze,HB,ize,dze,UB,cze,mze,fze,Pg,wU,gze,hze,JB,uze,pze,_ze,$g,AU,bze,vze,YB,Tze,Fze,Cze,Ks,LU,Mze,Eze,KB,yze,wze,ZB,Aze,Lze,Bze,Ig,BU,xze,kze,ex,Rze,Sze,Pze,Zs,xU,$ze,Ize,ox,jze,Dze,rx,Nze,qze,Oze,en,kU,Gze,Xze,tx,Vze,zze,ax,Wze,Qze,Hze,on,RU,Uze,Jze,sx,Yze,Kze,SU,Zze,eWe,oWe,jg,PU,rWe,tWe,nx,aWe,sWe,nWe,rn,$U,lWe,iWe,lx,dWe,cWe,ix,mWe,fWe,gWe,Dg,IU,hWe,uWe,dx,pWe,_We,bWe,tn,jU,vWe,TWe,cx,FWe,CWe,mx,MWe,EWe,yWe,an,DU,wWe,AWe,fx,LWe,BWe,gx,xWe,kWe,RWe,sn,NU,SWe,PWe,hx,$We,IWe,ux,jWe,DWe,NWe,Ng,qU,qWe,OWe,px,GWe,XWe,VWe,nn,OU,zWe,WWe,_x,QWe,HWe,bx,UWe,JWe,YWe,qg,GU,KWe,ZWe,vx,eQe,oQe,rQe,ln,XU,tQe,aQe,Tx,sQe,nQe,Fx,lQe,iQe,dQe,dn,VU,cQe,mQe,Cx,fQe,gQe,Mx,hQe,uQe,pQe,cn,zU,_Qe,bQe,Ex,vQe,TQe,yx,FQe,CQe,MQe,mn,WU,EQe,yQe,wx,wQe,AQe,Ax,LQe,BQe,xQe,Og,QU,kQe,RQe,Lx,SQe,PQe,$Qe,fn,HU,IQe,jQe,Bx,DQe,NQe,xx,qQe,OQe,GQe,gn,UU,XQe,VQe,kx,zQe,WQe,Rx,QQe,HQe,UQe,hn,JU,JQe,YQe,Sx,KQe,ZQe,Px,eHe,oHe,rHe,un,YU,tHe,aHe,$x,sHe,nHe,Ix,lHe,iHe,dHe,pn,KU,cHe,mHe,jx,fHe,gHe,Dx,hHe,uHe,pHe,_n,ZU,_He,bHe,Nx,vHe,THe,qx,FHe,CHe,MHe,Gg,eJ,EHe,yHe,Ox,wHe,AHe,LHe,bn,oJ,BHe,xHe,Gx,kHe,RHe,Xx,SHe,PHe,$He,Xg,rJ,IHe,jHe,Vx,DHe,NHe,qHe,Vg,tJ,OHe,GHe,zx,XHe,VHe,zHe,vn,aJ,WHe,QHe,Wx,HHe,UHe,Qx,JHe,YHe,KHe,Tn,sJ,ZHe,eUe,Hx,oUe,rUe,Ux,tUe,aUe,sUe,zg,nJ,nUe,lUe,Jx,iUe,dUe,cUe,Fn,lJ,mUe,fUe,Yx,gUe,hUe,Kx,uUe,pUe,_Ue,Cn,iJ,bUe,vUe,Zx,TUe,FUe,ek,CUe,MUe,EUe,Mn,dJ,yUe,wUe,ok,AUe,LUe,rk,BUe,xUe,kUe,En,cJ,RUe,SUe,tk,PUe,$Ue,ak,IUe,jUe,DUe,yn,mJ,NUe,qUe,sk,OUe,GUe,nk,XUe,VUe,zUe,Wg,fJ,WUe,QUe,lk,HUe,UUe,JUe,Qg,gJ,YUe,KUe,ik,ZUe,eJe,oJe,Hg,hJ,rJe,tJe,dk,aJe,sJe,nJe,Ug,uJ,lJe,iJe,ck,dJe,cJe,mJe,wn,pJ,fJe,gJe,mk,hJe,uJe,fk,pJe,_Je,bJe,Jg,_J,vJe,TJe,gk,FJe,CJe,MJe,An,bJ,EJe,yJe,hk,wJe,AJe,uk,LJe,BJe,xJe,Ln,vJ,kJe,RJe,pk,SJe,PJe,_k,$Je,IJe,jJe,Bn,TJ,DJe,NJe,bk,qJe,OJe,vk,GJe,XJe,VJe,xn,FJ,zJe,WJe,Tk,QJe,HJe,Fk,UJe,JJe,YJe,kn,CJ,KJe,ZJe,Ck,eYe,oYe,Mk,rYe,tYe,aYe,Rn,MJ,sYe,nYe,Ek,lYe,iYe,yk,dYe,cYe,mYe,Yg,EJ,fYe,gYe,wk,hYe,uYe,pYe,Kg,yJ,_Ye,bYe,Ak,vYe,TYe,FYe,Sn,wJ,CYe,MYe,Lk,EYe,yYe,Bk,wYe,AYe,LYe,Pn,AJ,BYe,xYe,xk,kYe,RYe,kk,SYe,PYe,$Ye,$n,LJ,IYe,jYe,Rk,DYe,NYe,Sk,qYe,OYe,GYe,Zg,BJ,XYe,VYe,Pk,zYe,WYe,QYe,eh,xJ,HYe,UYe,$k,JYe,YYe,KYe,oh,kJ,ZYe,eKe,Ik,oKe,rKe,tKe,rh,RJ,aKe,sKe,jk,nKe,lKe,iKe,In,SJ,dKe,cKe,Dk,mKe,fKe,Nk,gKe,hKe,uKe,th,PJ,pKe,_Ke,qk,bKe,vKe,TKe,ah,$J,FKe,CKe,Ok,MKe,EKe,yKe,jn,IJ,wKe,AKe,Gk,LKe,BKe,Xk,xKe,kKe,RKe,Dn,jJ,SKe,PKe,Vk,$Ke,IKe,zk,jKe,DKe,NKe,DJ,qKe,OKe,dy,GKe,sh,cy,XKe,NJ,VKe,lxe,Qi,nh,qJ,my,zKe,OJ,WKe,ixe,Ho,fy,QKe,gy,HKe,Wk,UKe,JKe,YKe,hy,KKe,GJ,ZKe,eZe,oZe,$e,uy,rZe,XJ,tZe,aZe,Ga,sZe,VJ,nZe,lZe,zJ,iZe,dZe,WJ,cZe,mZe,fZe,ae,lh,QJ,gZe,hZe,Qk,uZe,pZe,_Ze,ih,HJ,bZe,vZe,Hk,TZe,FZe,CZe,dh,UJ,MZe,EZe,Uk,yZe,wZe,AZe,ch,JJ,LZe,BZe,Jk,xZe,kZe,RZe,mh,YJ,SZe,PZe,Yk,$Ze,IZe,jZe,fh,KJ,DZe,NZe,Kk,qZe,OZe,GZe,gh,ZJ,XZe,VZe,Zk,zZe,WZe,QZe,hh,eY,HZe,UZe,eR,JZe,YZe,KZe,uh,oY,ZZe,eeo,oR,oeo,reo,teo,ph,rY,aeo,seo,rR,neo,leo,ieo,_h,tY,deo,ceo,tR,meo,feo,geo,bh,aY,heo,ueo,aR,peo,_eo,beo,vh,sY,veo,Teo,sR,Feo,Ceo,Meo,Th,nY,Eeo,yeo,nR,weo,Aeo,Leo,Fh,lY,Beo,xeo,lR,keo,Reo,Seo,Ch,iY,Peo,$eo,iR,Ieo,jeo,Deo,Mh,Neo,dY,qeo,Oeo,py,Geo,Eh,_y,Xeo,cY,Veo,dxe,Hi,yh,mY,by,zeo,fY,Weo,cxe,Uo,vy,Qeo,Ty,Heo,dR,Ueo,Jeo,Yeo,Fy,Keo,gY,Zeo,eoo,ooo,Ie,Cy,roo,hY,too,aoo,Ui,soo,uY,noo,loo,pY,ioo,doo,coo,Be,wh,_Y,moo,foo,cR,goo,hoo,uoo,Ah,bY,poo,_oo,mR,boo,voo,Too,Lh,vY,Foo,Coo,fR,Moo,Eoo,yoo,Bh,TY,woo,Aoo,gR,Loo,Boo,xoo,xh,FY,koo,Roo,hR,Soo,Poo,$oo,kh,CY,Ioo,joo,uR,Doo,Noo,qoo,Rh,MY,Ooo,Goo,pR,Xoo,Voo,zoo,Sh,EY,Woo,Qoo,_R,Hoo,Uoo,Joo,Ph,Yoo,yY,Koo,Zoo,My,ero,$h,Ey,oro,wY,rro,mxe,Ji,Ih,AY,yy,tro,LY,aro,fxe,Jo,wy,sro,Yi,nro,BY,lro,iro,xY,dro,cro,mro,Ay,fro,kY,gro,hro,uro,Vr,Ly,pro,RY,_ro,bro,Ki,vro,SY,Tro,Fro,PY,Cro,Mro,Ero,$Y,yro,wro,By,Aro,je,xy,Lro,IY,Bro,xro,Xa,kro,jY,Rro,Sro,DY,Pro,$ro,NY,Iro,jro,Dro,F,jh,qY,Nro,qro,bR,Oro,Gro,Xro,Dh,OY,Vro,zro,vR,Wro,Qro,Hro,Nh,GY,Uro,Jro,TR,Yro,Kro,Zro,qh,XY,eto,oto,FR,rto,tto,ato,Oh,VY,sto,nto,CR,lto,ito,dto,Gh,zY,cto,mto,MR,fto,gto,hto,Xh,WY,uto,pto,ER,_to,bto,vto,Vh,QY,Tto,Fto,yR,Cto,Mto,Eto,zh,HY,yto,wto,wR,Ato,Lto,Bto,Wh,UY,xto,kto,AR,Rto,Sto,Pto,Qh,JY,$to,Ito,LR,jto,Dto,Nto,Hh,YY,qto,Oto,BR,Gto,Xto,Vto,Uh,KY,zto,Wto,xR,Qto,Hto,Uto,Jh,ZY,Jto,Yto,kR,Kto,Zto,eao,Yh,eK,oao,rao,RR,tao,aao,sao,Kh,oK,nao,lao,SR,iao,dao,cao,Zh,rK,mao,fao,PR,gao,hao,uao,eu,tK,pao,_ao,$R,bao,vao,Tao,ou,aK,Fao,Cao,IR,Mao,Eao,yao,ru,sK,wao,Aao,jR,Lao,Bao,xao,tu,nK,kao,Rao,DR,Sao,Pao,$ao,au,lK,Iao,jao,NR,Dao,Nao,qao,su,iK,Oao,Gao,qR,Xao,Vao,zao,nu,dK,Wao,Qao,OR,Hao,Uao,Jao,lu,cK,Yao,Kao,GR,Zao,eso,oso,iu,mK,rso,tso,XR,aso,sso,nso,du,fK,lso,iso,VR,dso,cso,mso,Nn,gK,fso,gso,zR,hso,uso,WR,pso,_so,bso,cu,hK,vso,Tso,QR,Fso,Cso,Mso,mu,uK,Eso,yso,HR,wso,Aso,Lso,fu,pK,Bso,xso,UR,kso,Rso,Sso,gu,_K,Pso,$so,JR,Iso,jso,Dso,hu,bK,Nso,qso,YR,Oso,Gso,Xso,uu,vK,Vso,zso,KR,Wso,Qso,Hso,pu,TK,Uso,Jso,ZR,Yso,Kso,Zso,_u,FK,eno,ono,eS,rno,tno,ano,bu,CK,sno,nno,oS,lno,ino,dno,vu,MK,cno,mno,rS,fno,gno,hno,Tu,EK,uno,pno,tS,_no,bno,vno,Fu,yK,Tno,Fno,aS,Cno,Mno,Eno,Cu,wK,yno,wno,sS,Ano,Lno,Bno,Mu,AK,xno,kno,nS,Rno,Sno,Pno,Eu,LK,$no,Ino,lS,jno,Dno,Nno,yu,BK,qno,Ono,iS,Gno,Xno,Vno,wu,xK,zno,Wno,dS,Qno,Hno,Uno,Au,kK,Jno,Yno,cS,Kno,Zno,elo,Lu,RK,olo,rlo,mS,tlo,alo,slo,Bu,SK,nlo,llo,fS,ilo,dlo,clo,xu,PK,mlo,flo,gS,glo,hlo,ulo,ku,$K,plo,_lo,hS,blo,vlo,Tlo,Ru,IK,Flo,Clo,uS,Mlo,Elo,ylo,Su,jK,wlo,Alo,pS,Llo,Blo,xlo,Pu,DK,klo,Rlo,_S,Slo,Plo,$lo,$u,NK,Ilo,jlo,bS,Dlo,Nlo,qlo,Iu,qK,Olo,Glo,vS,Xlo,Vlo,zlo,ju,OK,Wlo,Qlo,TS,Hlo,Ulo,Jlo,Du,GK,Ylo,Klo,FS,Zlo,eio,oio,Nu,XK,rio,tio,CS,aio,sio,nio,qu,VK,lio,iio,MS,dio,cio,mio,Ou,zK,fio,gio,ES,hio,uio,pio,Gu,WK,_io,bio,yS,vio,Tio,Fio,Xu,QK,Cio,Mio,wS,Eio,yio,wio,Vu,HK,Aio,Lio,AS,Bio,xio,kio,zu,UK,Rio,Sio,LS,Pio,$io,Iio,Wu,JK,jio,Dio,BS,Nio,qio,Oio,Qu,YK,Gio,Xio,xS,Vio,zio,Wio,Hu,KK,Qio,Hio,kS,Uio,Jio,Yio,Uu,ZK,Kio,Zio,RS,edo,odo,rdo,Ju,eZ,tdo,ado,SS,sdo,ndo,ldo,Yu,oZ,ido,ddo,PS,cdo,mdo,fdo,Ku,rZ,gdo,hdo,$S,udo,pdo,_do,Zu,tZ,bdo,vdo,IS,Tdo,Fdo,Cdo,ep,aZ,Mdo,Edo,jS,ydo,wdo,Ado,op,sZ,Ldo,Bdo,DS,xdo,kdo,Rdo,rp,nZ,Sdo,Pdo,NS,$do,Ido,jdo,tp,lZ,Ddo,Ndo,qS,qdo,Odo,Gdo,ap,iZ,Xdo,Vdo,OS,zdo,Wdo,Qdo,sp,dZ,Hdo,Udo,GS,Jdo,Ydo,Kdo,np,cZ,Zdo,eco,XS,oco,rco,tco,lp,mZ,aco,sco,VS,nco,lco,ico,ip,fZ,dco,cco,zS,mco,fco,gco,dp,gZ,hco,uco,WS,pco,_co,bco,cp,hZ,vco,Tco,QS,Fco,Cco,Mco,mp,uZ,Eco,yco,HS,wco,Aco,Lco,fp,pZ,Bco,xco,US,kco,Rco,Sco,gp,_Z,Pco,$co,JS,Ico,jco,Dco,hp,bZ,Nco,qco,YS,Oco,Gco,Xco,up,Vco,vZ,zco,Wco,TZ,Qco,Hco,FZ,Uco,Jco,ky,gxe,Zi,pp,CZ,Ry,Yco,MZ,Kco,hxe,Yo,Sy,Zco,ed,emo,EZ,omo,rmo,yZ,tmo,amo,smo,Py,nmo,wZ,lmo,imo,dmo,zr,$y,cmo,AZ,mmo,fmo,od,gmo,LZ,hmo,umo,BZ,pmo,_mo,bmo,xZ,vmo,Tmo,Iy,Fmo,De,jy,Cmo,kZ,Mmo,Emo,Va,ymo,RZ,wmo,Amo,SZ,Lmo,Bmo,PZ,xmo,kmo,Rmo,k,_p,$Z,Smo,Pmo,KS,$mo,Imo,jmo,bp,IZ,Dmo,Nmo,ZS,qmo,Omo,Gmo,vp,jZ,Xmo,Vmo,eP,zmo,Wmo,Qmo,Tp,DZ,Hmo,Umo,oP,Jmo,Ymo,Kmo,Fp,NZ,Zmo,efo,rP,ofo,rfo,tfo,Cp,qZ,afo,sfo,tP,nfo,lfo,ifo,Mp,OZ,dfo,cfo,aP,mfo,ffo,gfo,Ep,GZ,hfo,ufo,sP,pfo,_fo,bfo,yp,XZ,vfo,Tfo,nP,Ffo,Cfo,Mfo,wp,VZ,Efo,yfo,lP,wfo,Afo,Lfo,Ap,zZ,Bfo,xfo,iP,kfo,Rfo,Sfo,Lp,WZ,Pfo,$fo,dP,Ifo,jfo,Dfo,Bp,QZ,Nfo,qfo,cP,Ofo,Gfo,Xfo,xp,HZ,Vfo,zfo,mP,Wfo,Qfo,Hfo,kp,UZ,Ufo,Jfo,fP,Yfo,Kfo,Zfo,Rp,JZ,ego,ogo,gP,rgo,tgo,ago,Sp,YZ,sgo,ngo,hP,lgo,igo,dgo,Pp,KZ,cgo,mgo,uP,fgo,ggo,hgo,$p,ZZ,ugo,pgo,pP,_go,bgo,vgo,Ip,eee,Tgo,Fgo,_P,Cgo,Mgo,Ego,jp,oee,ygo,wgo,bP,Ago,Lgo,Bgo,Dp,ree,xgo,kgo,vP,Rgo,Sgo,Pgo,Np,tee,$go,Igo,TP,jgo,Dgo,Ngo,qp,aee,qgo,Ogo,FP,Ggo,Xgo,Vgo,Op,see,zgo,Wgo,CP,Qgo,Hgo,Ugo,Gp,nee,Jgo,Ygo,MP,Kgo,Zgo,eho,Xp,lee,oho,rho,EP,tho,aho,sho,Vp,iee,nho,lho,yP,iho,dho,cho,zp,dee,mho,fho,wP,gho,hho,uho,Wp,cee,pho,_ho,AP,bho,vho,Tho,Qp,mee,Fho,Cho,LP,Mho,Eho,yho,Hp,fee,who,Aho,BP,Lho,Bho,xho,Up,gee,kho,Rho,xP,Sho,Pho,$ho,Jp,hee,Iho,jho,kP,Dho,Nho,qho,Yp,uee,Oho,Gho,RP,Xho,Vho,zho,Kp,pee,Who,Qho,SP,Hho,Uho,Jho,Zp,_ee,Yho,Kho,PP,Zho,euo,ouo,e_,bee,ruo,tuo,$P,auo,suo,nuo,o_,vee,luo,iuo,IP,duo,cuo,muo,r_,fuo,Tee,guo,huo,Fee,uuo,puo,Cee,_uo,buo,Dy,uxe,rd,t_,Mee,Ny,vuo,Eee,Tuo,pxe,Ko,qy,Fuo,td,Cuo,yee,Muo,Euo,wee,yuo,wuo,Auo,Oy,Luo,Aee,Buo,xuo,kuo,Wr,Gy,Ruo,Lee,Suo,Puo,ad,$uo,Bee,Iuo,juo,xee,Duo,Nuo,quo,kee,Ouo,Guo,Xy,Xuo,Ne,Vy,Vuo,Ree,zuo,Wuo,za,Quo,See,Huo,Uuo,Pee,Juo,Yuo,$ee,Kuo,Zuo,epo,$,a_,Iee,opo,rpo,jP,tpo,apo,spo,s_,jee,npo,lpo,DP,ipo,dpo,cpo,n_,Dee,mpo,fpo,NP,gpo,hpo,upo,l_,Nee,ppo,_po,qP,bpo,vpo,Tpo,i_,qee,Fpo,Cpo,OP,Mpo,Epo,ypo,d_,Oee,wpo,Apo,GP,Lpo,Bpo,xpo,c_,Gee,kpo,Rpo,XP,Spo,Ppo,$po,m_,Xee,Ipo,jpo,VP,Dpo,Npo,qpo,f_,Vee,Opo,Gpo,zP,Xpo,Vpo,zpo,g_,zee,Wpo,Qpo,WP,Hpo,Upo,Jpo,h_,Wee,Ypo,Kpo,QP,Zpo,e_o,o_o,u_,Qee,r_o,t_o,HP,a_o,s_o,n_o,p_,Hee,l_o,i_o,UP,d_o,c_o,m_o,__,Uee,f_o,g_o,JP,h_o,u_o,p_o,b_,Jee,__o,b_o,YP,v_o,T_o,F_o,v_,Yee,C_o,M_o,KP,E_o,y_o,w_o,T_,Kee,A_o,L_o,ZP,B_o,x_o,k_o,F_,Zee,R_o,S_o,e$,P_o,$_o,I_o,C_,eoe,j_o,D_o,o$,N_o,q_o,O_o,M_,ooe,G_o,X_o,r$,V_o,z_o,W_o,E_,roe,Q_o,H_o,t$,U_o,J_o,Y_o,y_,toe,K_o,Z_o,a$,ebo,obo,rbo,w_,aoe,tbo,abo,s$,sbo,nbo,lbo,A_,soe,ibo,dbo,n$,cbo,mbo,fbo,L_,noe,gbo,hbo,l$,ubo,pbo,_bo,B_,loe,bbo,vbo,i$,Tbo,Fbo,Cbo,x_,ioe,Mbo,Ebo,d$,ybo,wbo,Abo,k_,doe,Lbo,Bbo,c$,xbo,kbo,Rbo,R_,coe,Sbo,Pbo,m$,$bo,Ibo,jbo,S_,moe,Dbo,Nbo,f$,qbo,Obo,Gbo,P_,foe,Xbo,Vbo,g$,zbo,Wbo,Qbo,$_,goe,Hbo,Ubo,h$,Jbo,Ybo,Kbo,I_,hoe,Zbo,e2o,u$,o2o,r2o,t2o,j_,uoe,a2o,s2o,p$,n2o,l2o,i2o,D_,poe,d2o,c2o,_$,m2o,f2o,g2o,N_,h2o,_oe,u2o,p2o,boe,_2o,b2o,voe,v2o,T2o,zy,_xe,sd,q_,Toe,Wy,F2o,Foe,C2o,bxe,Zo,Qy,M2o,nd,E2o,Coe,y2o,w2o,Moe,A2o,L2o,B2o,Hy,x2o,Eoe,k2o,R2o,S2o,Qr,Uy,P2o,yoe,$2o,I2o,ld,j2o,woe,D2o,N2o,Aoe,q2o,O2o,G2o,Loe,X2o,V2o,Jy,z2o,qe,Yy,W2o,Boe,Q2o,H2o,Wa,U2o,xoe,J2o,Y2o,koe,K2o,Z2o,Roe,evo,ovo,rvo,I,O_,Soe,tvo,avo,b$,svo,nvo,lvo,G_,Poe,ivo,dvo,v$,cvo,mvo,fvo,X_,$oe,gvo,hvo,T$,uvo,pvo,_vo,V_,Ioe,bvo,vvo,F$,Tvo,Fvo,Cvo,z_,joe,Mvo,Evo,C$,yvo,wvo,Avo,W_,Doe,Lvo,Bvo,M$,xvo,kvo,Rvo,Q_,Noe,Svo,Pvo,E$,$vo,Ivo,jvo,H_,qoe,Dvo,Nvo,y$,qvo,Ovo,Gvo,U_,Ooe,Xvo,Vvo,w$,zvo,Wvo,Qvo,J_,Goe,Hvo,Uvo,A$,Jvo,Yvo,Kvo,Y_,Xoe,Zvo,eTo,L$,oTo,rTo,tTo,K_,Voe,aTo,sTo,B$,nTo,lTo,iTo,Z_,zoe,dTo,cTo,x$,mTo,fTo,gTo,eb,Woe,hTo,uTo,k$,pTo,_To,bTo,ob,Qoe,vTo,TTo,R$,FTo,CTo,MTo,rb,Hoe,ETo,yTo,S$,wTo,ATo,LTo,tb,Uoe,BTo,xTo,P$,kTo,RTo,STo,ab,Joe,PTo,$To,$$,ITo,jTo,DTo,sb,Yoe,NTo,qTo,I$,OTo,GTo,XTo,nb,Koe,VTo,zTo,j$,WTo,QTo,HTo,lb,Zoe,UTo,JTo,D$,YTo,KTo,ZTo,ib,ere,e1o,o1o,N$,r1o,t1o,a1o,db,ore,s1o,n1o,q$,l1o,i1o,d1o,cb,rre,c1o,m1o,O$,f1o,g1o,h1o,mb,tre,u1o,p1o,G$,_1o,b1o,v1o,fb,are,T1o,F1o,X$,C1o,M1o,E1o,gb,sre,y1o,w1o,V$,A1o,L1o,B1o,hb,nre,x1o,k1o,z$,R1o,S1o,P1o,ub,lre,$1o,I1o,W$,j1o,D1o,N1o,pb,ire,q1o,O1o,Q$,G1o,X1o,V1o,_b,dre,z1o,W1o,cre,Q1o,H1o,U1o,bb,mre,J1o,Y1o,H$,K1o,Z1o,eFo,vb,fre,oFo,rFo,U$,tFo,aFo,sFo,Tb,gre,nFo,lFo,J$,iFo,dFo,cFo,Fb,hre,mFo,fFo,Y$,gFo,hFo,uFo,Cb,pFo,ure,_Fo,bFo,pre,vFo,TFo,_re,FFo,CFo,Ky,vxe,id,Mb,bre,Zy,MFo,vre,EFo,Txe,er,ew,yFo,dd,wFo,Tre,AFo,LFo,Fre,BFo,xFo,kFo,ow,RFo,Cre,SFo,PFo,$Fo,Hr,rw,IFo,Mre,jFo,DFo,cd,NFo,Ere,qFo,OFo,yre,GFo,XFo,VFo,wre,zFo,WFo,tw,QFo,Oe,aw,HFo,Are,UFo,JFo,Qa,YFo,Lre,KFo,ZFo,Bre,eCo,oCo,xre,rCo,tCo,aCo,se,Eb,kre,sCo,nCo,K$,lCo,iCo,dCo,yb,Rre,cCo,mCo,Z$,fCo,gCo,hCo,wb,Sre,uCo,pCo,eI,_Co,bCo,vCo,Ab,Pre,TCo,FCo,oI,CCo,MCo,ECo,Lb,$re,yCo,wCo,rI,ACo,LCo,BCo,Bb,Ire,xCo,kCo,tI,RCo,SCo,PCo,xb,jre,$Co,ICo,aI,jCo,DCo,NCo,kb,Dre,qCo,OCo,sI,GCo,XCo,VCo,Rb,Nre,zCo,WCo,nI,QCo,HCo,UCo,Sb,qre,JCo,YCo,lI,KCo,ZCo,eMo,Pb,Ore,oMo,rMo,iI,tMo,aMo,sMo,$b,Gre,nMo,lMo,dI,iMo,dMo,cMo,Ib,Xre,mMo,fMo,cI,gMo,hMo,uMo,jb,Vre,pMo,_Mo,mI,bMo,vMo,TMo,Db,zre,FMo,CMo,fI,MMo,EMo,yMo,Nb,Wre,wMo,AMo,gI,LMo,BMo,xMo,qb,kMo,Qre,RMo,SMo,Hre,PMo,$Mo,Ure,IMo,jMo,sw,Fxe,md,Ob,Jre,nw,DMo,Yre,NMo,Cxe,or,lw,qMo,fd,OMo,Kre,GMo,XMo,Zre,VMo,zMo,WMo,iw,QMo,ete,HMo,UMo,JMo,Ur,dw,YMo,ote,KMo,ZMo,gd,e4o,rte,o4o,r4o,tte,t4o,a4o,s4o,ate,n4o,l4o,cw,i4o,Ge,mw,d4o,ste,c4o,m4o,Ha,f4o,nte,g4o,h4o,lte,u4o,p4o,ite,_4o,b4o,v4o,A,Gb,dte,T4o,F4o,hI,C4o,M4o,E4o,Xb,cte,y4o,w4o,uI,A4o,L4o,B4o,Vb,mte,x4o,k4o,pI,R4o,S4o,P4o,zb,fte,$4o,I4o,_I,j4o,D4o,N4o,Wb,gte,q4o,O4o,bI,G4o,X4o,V4o,Qb,hte,z4o,W4o,vI,Q4o,H4o,U4o,Hb,ute,J4o,Y4o,TI,K4o,Z4o,eEo,Ub,pte,oEo,rEo,FI,tEo,aEo,sEo,Jb,_te,nEo,lEo,CI,iEo,dEo,cEo,Yb,bte,mEo,fEo,MI,gEo,hEo,uEo,Kb,vte,pEo,_Eo,EI,bEo,vEo,TEo,Zb,Tte,FEo,CEo,yI,MEo,EEo,yEo,e2,Fte,wEo,AEo,wI,LEo,BEo,xEo,o2,Cte,kEo,REo,AI,SEo,PEo,$Eo,r2,Mte,IEo,jEo,LI,DEo,NEo,qEo,t2,Ete,OEo,GEo,BI,XEo,VEo,zEo,a2,yte,WEo,QEo,xI,HEo,UEo,JEo,s2,wte,YEo,KEo,kI,ZEo,e3o,o3o,n2,Ate,r3o,t3o,RI,a3o,s3o,n3o,l2,Lte,l3o,i3o,SI,d3o,c3o,m3o,i2,Bte,f3o,g3o,PI,h3o,u3o,p3o,d2,xte,_3o,b3o,$I,v3o,T3o,F3o,c2,kte,C3o,M3o,II,E3o,y3o,w3o,m2,Rte,A3o,L3o,jI,B3o,x3o,k3o,f2,Ste,R3o,S3o,DI,P3o,$3o,I3o,g2,Pte,j3o,D3o,NI,N3o,q3o,O3o,h2,$te,G3o,X3o,qI,V3o,z3o,W3o,u2,Ite,Q3o,H3o,OI,U3o,J3o,Y3o,p2,jte,K3o,Z3o,GI,e5o,o5o,r5o,_2,Dte,t5o,a5o,XI,s5o,n5o,l5o,b2,Nte,i5o,d5o,VI,c5o,m5o,f5o,v2,qte,g5o,h5o,zI,u5o,p5o,_5o,T2,Ote,b5o,v5o,WI,T5o,F5o,C5o,F2,Gte,M5o,E5o,QI,y5o,w5o,A5o,C2,Xte,L5o,B5o,HI,x5o,k5o,R5o,M2,Vte,S5o,P5o,UI,$5o,I5o,j5o,E2,zte,D5o,N5o,JI,q5o,O5o,G5o,y2,Wte,X5o,V5o,YI,z5o,W5o,Q5o,w2,Qte,H5o,U5o,KI,J5o,Y5o,K5o,A2,Hte,Z5o,eyo,ZI,oyo,ryo,tyo,L2,Ute,ayo,syo,ej,nyo,lyo,iyo,B2,Jte,dyo,cyo,oj,myo,fyo,gyo,x2,Yte,hyo,uyo,rj,pyo,_yo,byo,k2,Kte,vyo,Tyo,tj,Fyo,Cyo,Myo,R2,Zte,Eyo,yyo,aj,wyo,Ayo,Lyo,S2,eae,Byo,xyo,sj,kyo,Ryo,Syo,P2,Pyo,oae,$yo,Iyo,rae,jyo,Dyo,tae,Nyo,qyo,fw,Mxe,hd,$2,aae,gw,Oyo,sae,Gyo,Exe,rr,hw,Xyo,ud,Vyo,nae,zyo,Wyo,lae,Qyo,Hyo,Uyo,uw,Jyo,iae,Yyo,Kyo,Zyo,Jr,pw,ewo,dae,owo,rwo,pd,two,cae,awo,swo,mae,nwo,lwo,iwo,fae,dwo,cwo,_w,mwo,Xe,bw,fwo,gae,gwo,hwo,Ua,uwo,hae,pwo,_wo,uae,bwo,vwo,pae,Two,Fwo,Cwo,O,I2,_ae,Mwo,Ewo,nj,ywo,wwo,Awo,j2,bae,Lwo,Bwo,lj,xwo,kwo,Rwo,D2,vae,Swo,Pwo,ij,$wo,Iwo,jwo,N2,Tae,Dwo,Nwo,dj,qwo,Owo,Gwo,q2,Fae,Xwo,Vwo,cj,zwo,Wwo,Qwo,O2,Cae,Hwo,Uwo,mj,Jwo,Ywo,Kwo,G2,Mae,Zwo,e6o,fj,o6o,r6o,t6o,X2,Eae,a6o,s6o,gj,n6o,l6o,i6o,V2,yae,d6o,c6o,hj,m6o,f6o,g6o,z2,wae,h6o,u6o,uj,p6o,_6o,b6o,W2,Aae,v6o,T6o,pj,F6o,C6o,M6o,Q2,Lae,E6o,y6o,_j,w6o,A6o,L6o,H2,Bae,B6o,x6o,bj,k6o,R6o,S6o,U2,xae,P6o,$6o,vj,I6o,j6o,D6o,J2,kae,N6o,q6o,Tj,O6o,G6o,X6o,Y2,Rae,V6o,z6o,Fj,W6o,Q6o,H6o,K2,Sae,U6o,J6o,Cj,Y6o,K6o,Z6o,Z2,Pae,eAo,oAo,Mj,rAo,tAo,aAo,ev,$ae,sAo,nAo,Ej,lAo,iAo,dAo,ov,Iae,cAo,mAo,yj,fAo,gAo,hAo,rv,jae,uAo,pAo,wj,_Ao,bAo,vAo,tv,Dae,TAo,FAo,Aj,CAo,MAo,EAo,av,Nae,yAo,wAo,Lj,AAo,LAo,BAo,sv,qae,xAo,kAo,Bj,RAo,SAo,PAo,nv,Oae,$Ao,IAo,xj,jAo,DAo,NAo,lv,Gae,qAo,OAo,kj,GAo,XAo,VAo,iv,Xae,zAo,WAo,Rj,QAo,HAo,UAo,dv,Vae,JAo,YAo,Sj,KAo,ZAo,e0o,cv,o0o,zae,r0o,t0o,Wae,a0o,s0o,Qae,n0o,l0o,vw,yxe,_d,mv,Hae,Tw,i0o,Uae,d0o,wxe,tr,Fw,c0o,bd,m0o,Jae,f0o,g0o,Yae,h0o,u0o,p0o,Cw,_0o,Kae,b0o,v0o,T0o,Yr,Mw,F0o,Zae,C0o,M0o,vd,E0o,ese,y0o,w0o,ose,A0o,L0o,B0o,rse,x0o,k0o,Ew,R0o,Ve,yw,S0o,tse,P0o,$0o,Ja,I0o,ase,j0o,D0o,sse,N0o,q0o,nse,O0o,G0o,X0o,da,fv,lse,V0o,z0o,Pj,W0o,Q0o,H0o,gv,ise,U0o,J0o,$j,Y0o,K0o,Z0o,hv,dse,eLo,oLo,Ij,rLo,tLo,aLo,uv,cse,sLo,nLo,jj,lLo,iLo,dLo,pv,mse,cLo,mLo,Dj,fLo,gLo,hLo,_v,uLo,fse,pLo,_Lo,gse,bLo,vLo,hse,TLo,FLo,ww,Axe,Td,bv,use,Aw,CLo,pse,MLo,Lxe,ar,Lw,ELo,Fd,yLo,_se,wLo,ALo,bse,LLo,BLo,xLo,Bw,kLo,vse,RLo,SLo,PLo,Kr,xw,$Lo,Tse,ILo,jLo,Cd,DLo,Fse,NLo,qLo,Cse,OLo,GLo,XLo,Mse,VLo,zLo,kw,WLo,ze,Rw,QLo,Ese,HLo,ULo,Ya,JLo,yse,YLo,KLo,wse,ZLo,e8o,Ase,o8o,r8o,t8o,N,vv,Lse,a8o,s8o,Nj,n8o,l8o,i8o,Tv,Bse,d8o,c8o,qj,m8o,f8o,g8o,Fv,xse,h8o,u8o,Oj,p8o,_8o,b8o,Cv,kse,v8o,T8o,Gj,F8o,C8o,M8o,Mv,Rse,E8o,y8o,Xj,w8o,A8o,L8o,Ev,Sse,B8o,x8o,Vj,k8o,R8o,S8o,yv,Pse,P8o,$8o,zj,I8o,j8o,D8o,wv,$se,N8o,q8o,Wj,O8o,G8o,X8o,Av,Ise,V8o,z8o,Qj,W8o,Q8o,H8o,Lv,jse,U8o,J8o,Hj,Y8o,K8o,Z8o,Bv,Dse,e7o,o7o,Uj,r7o,t7o,a7o,xv,Nse,s7o,n7o,Jj,l7o,i7o,d7o,kv,qse,c7o,m7o,Yj,f7o,g7o,h7o,Rv,Ose,u7o,p7o,Kj,_7o,b7o,v7o,Sv,Gse,T7o,F7o,Zj,C7o,M7o,E7o,Pv,Xse,y7o,w7o,eD,A7o,L7o,B7o,$v,Vse,x7o,k7o,oD,R7o,S7o,P7o,Iv,zse,$7o,I7o,rD,j7o,D7o,N7o,jv,Wse,q7o,O7o,tD,G7o,X7o,V7o,Dv,Qse,z7o,W7o,aD,Q7o,H7o,U7o,Nv,Hse,J7o,Y7o,sD,K7o,Z7o,e9o,qv,Use,o9o,r9o,nD,t9o,a9o,s9o,Ov,Jse,n9o,l9o,lD,i9o,d9o,c9o,Gv,Yse,m9o,f9o,iD,g9o,h9o,u9o,Xv,Kse,p9o,_9o,dD,b9o,v9o,T9o,Vv,Zse,F9o,C9o,cD,M9o,E9o,y9o,zv,ene,w9o,A9o,mD,L9o,B9o,x9o,Wv,one,k9o,R9o,fD,S9o,P9o,$9o,Qv,rne,I9o,j9o,gD,D9o,N9o,q9o,Hv,tne,O9o,G9o,hD,X9o,V9o,z9o,Uv,ane,W9o,Q9o,uD,H9o,U9o,J9o,Jv,sne,Y9o,K9o,pD,Z9o,eBo,oBo,Yv,nne,rBo,tBo,_D,aBo,sBo,nBo,Kv,lBo,lne,iBo,dBo,ine,cBo,mBo,dne,fBo,gBo,Sw,Bxe,Md,Zv,cne,Pw,hBo,mne,uBo,xxe,sr,$w,pBo,Ed,_Bo,fne,bBo,vBo,gne,TBo,FBo,CBo,Iw,MBo,hne,EBo,yBo,wBo,Zr,jw,ABo,une,LBo,BBo,yd,xBo,pne,kBo,RBo,_ne,SBo,PBo,$Bo,bne,IBo,jBo,Dw,DBo,We,Nw,NBo,vne,qBo,OBo,Ka,GBo,Tne,XBo,VBo,Fne,zBo,WBo,Cne,QBo,HBo,UBo,R,eT,Mne,JBo,YBo,bD,KBo,ZBo,exo,oT,Ene,oxo,rxo,vD,txo,axo,sxo,rT,yne,nxo,lxo,TD,ixo,dxo,cxo,tT,wne,mxo,fxo,FD,gxo,hxo,uxo,aT,Ane,pxo,_xo,CD,bxo,vxo,Txo,sT,Lne,Fxo,Cxo,MD,Mxo,Exo,yxo,nT,Bne,wxo,Axo,ED,Lxo,Bxo,xxo,lT,xne,kxo,Rxo,yD,Sxo,Pxo,$xo,iT,kne,Ixo,jxo,wD,Dxo,Nxo,qxo,dT,Rne,Oxo,Gxo,AD,Xxo,Vxo,zxo,cT,Sne,Wxo,Qxo,LD,Hxo,Uxo,Jxo,mT,Pne,Yxo,Kxo,BD,Zxo,eko,oko,fT,$ne,rko,tko,xD,ako,sko,nko,gT,Ine,lko,iko,kD,dko,cko,mko,hT,jne,fko,gko,RD,hko,uko,pko,uT,Dne,_ko,bko,SD,vko,Tko,Fko,pT,Nne,Cko,Mko,PD,Eko,yko,wko,_T,qne,Ako,Lko,$D,Bko,xko,kko,bT,One,Rko,Sko,ID,Pko,$ko,Iko,vT,Gne,jko,Dko,jD,Nko,qko,Oko,TT,Xne,Gko,Xko,DD,Vko,zko,Wko,FT,Vne,Qko,Hko,ND,Uko,Jko,Yko,CT,zne,Kko,Zko,qD,eRo,oRo,rRo,MT,Wne,tRo,aRo,OD,sRo,nRo,lRo,ET,Qne,iRo,dRo,GD,cRo,mRo,fRo,yT,Hne,gRo,hRo,XD,uRo,pRo,_Ro,wT,Une,bRo,vRo,VD,TRo,FRo,CRo,AT,Jne,MRo,ERo,zD,yRo,wRo,ARo,LT,Yne,LRo,BRo,WD,xRo,kRo,RRo,BT,Kne,SRo,PRo,QD,$Ro,IRo,jRo,xT,Zne,DRo,NRo,HD,qRo,ORo,GRo,kT,ele,XRo,VRo,UD,zRo,WRo,QRo,RT,ole,HRo,URo,JD,JRo,YRo,KRo,ST,rle,ZRo,eSo,YD,oSo,rSo,tSo,PT,tle,aSo,sSo,KD,nSo,lSo,iSo,$T,ale,dSo,cSo,ZD,mSo,fSo,gSo,IT,sle,hSo,uSo,eN,pSo,_So,bSo,jT,nle,vSo,TSo,oN,FSo,CSo,MSo,DT,lle,ESo,ySo,rN,wSo,ASo,LSo,NT,BSo,ile,xSo,kSo,dle,RSo,SSo,cle,PSo,$So,qw,kxe,wd,qT,mle,Ow,ISo,fle,jSo,Rxe,nr,Gw,DSo,Ad,NSo,gle,qSo,OSo,hle,GSo,XSo,VSo,Xw,zSo,ule,WSo,QSo,HSo,et,Vw,USo,ple,JSo,YSo,Ld,KSo,_le,ZSo,ePo,ble,oPo,rPo,tPo,vle,aPo,sPo,zw,nPo,Qe,Ww,lPo,Tle,iPo,dPo,Za,cPo,Fle,mPo,fPo,Cle,gPo,hPo,Mle,uPo,pPo,_Po,Ele,OT,yle,bPo,vPo,tN,TPo,FPo,CPo,GT,MPo,wle,EPo,yPo,Ale,wPo,APo,Lle,LPo,BPo,Qw,Sxe,Bd,XT,Ble,Hw,xPo,xle,kPo,Pxe,lr,Uw,RPo,xd,SPo,kle,PPo,$Po,Rle,IPo,jPo,DPo,Jw,NPo,Sle,qPo,OPo,GPo,ot,Yw,XPo,Ple,VPo,zPo,kd,WPo,$le,QPo,HPo,Ile,UPo,JPo,YPo,jle,KPo,ZPo,Kw,e$o,He,Zw,o$o,Dle,r$o,t$o,es,a$o,Nle,s$o,n$o,qle,l$o,i$o,Ole,d$o,c$o,m$o,Fe,VT,Gle,f$o,g$o,aN,h$o,u$o,p$o,zT,Xle,_$o,b$o,sN,v$o,T$o,F$o,qn,Vle,C$o,M$o,nN,E$o,y$o,lN,w$o,A$o,L$o,WT,zle,B$o,x$o,iN,k$o,R$o,S$o,ma,Wle,P$o,$$o,dN,I$o,j$o,cN,D$o,N$o,mN,q$o,O$o,G$o,QT,Qle,X$o,V$o,fN,z$o,W$o,Q$o,HT,Hle,H$o,U$o,gN,J$o,Y$o,K$o,UT,Ule,Z$o,eIo,hN,oIo,rIo,tIo,JT,Jle,aIo,sIo,uN,nIo,lIo,iIo,YT,dIo,Yle,cIo,mIo,Kle,fIo,gIo,Zle,hIo,uIo,e6,$xe,Rd,KT,eie,o6,pIo,oie,_Io,Ixe,ir,r6,bIo,Sd,vIo,rie,TIo,FIo,tie,CIo,MIo,EIo,t6,yIo,aie,wIo,AIo,LIo,rt,a6,BIo,sie,xIo,kIo,Pd,RIo,nie,SIo,PIo,lie,$Io,IIo,jIo,iie,DIo,NIo,s6,qIo,Ue,n6,OIo,die,GIo,XIo,os,VIo,cie,zIo,WIo,mie,QIo,HIo,fie,UIo,JIo,YIo,gie,ZT,hie,KIo,ZIo,pN,ejo,ojo,rjo,e1,tjo,uie,ajo,sjo,pie,njo,ljo,_ie,ijo,djo,l6,jxe,$d,o1,bie,i6,cjo,vie,mjo,Dxe,dr,d6,fjo,Id,gjo,Tie,hjo,ujo,Fie,pjo,_jo,bjo,c6,vjo,Cie,Tjo,Fjo,Cjo,tt,m6,Mjo,Mie,Ejo,yjo,jd,wjo,Eie,Ajo,Ljo,yie,Bjo,xjo,kjo,wie,Rjo,Sjo,f6,Pjo,Je,g6,$jo,Aie,Ijo,jjo,rs,Djo,Lie,Njo,qjo,Bie,Ojo,Gjo,xie,Xjo,Vjo,zjo,xe,r1,kie,Wjo,Qjo,_N,Hjo,Ujo,Jjo,t1,Rie,Yjo,Kjo,bN,Zjo,eDo,oDo,a1,Sie,rDo,tDo,vN,aDo,sDo,nDo,s1,Pie,lDo,iDo,TN,dDo,cDo,mDo,n1,$ie,fDo,gDo,FN,hDo,uDo,pDo,l1,Iie,_Do,bDo,CN,vDo,TDo,FDo,i1,jie,CDo,MDo,MN,EDo,yDo,wDo,d1,Die,ADo,LDo,EN,BDo,xDo,kDo,c1,RDo,Nie,SDo,PDo,qie,$Do,IDo,Oie,jDo,DDo,h6,Nxe,Dd,m1,Gie,u6,NDo,Xie,qDo,qxe,cr,p6,ODo,Nd,GDo,Vie,XDo,VDo,zie,zDo,WDo,QDo,_6,HDo,Wie,UDo,JDo,YDo,at,b6,KDo,Qie,ZDo,eNo,qd,oNo,Hie,rNo,tNo,Uie,aNo,sNo,nNo,Jie,lNo,iNo,v6,dNo,Ye,T6,cNo,Yie,mNo,fNo,ts,gNo,Kie,hNo,uNo,Zie,pNo,_No,ede,bNo,vNo,TNo,as,f1,ode,FNo,CNo,yN,MNo,ENo,yNo,g1,rde,wNo,ANo,wN,LNo,BNo,xNo,h1,tde,kNo,RNo,AN,SNo,PNo,$No,u1,ade,INo,jNo,LN,DNo,NNo,qNo,p1,ONo,sde,GNo,XNo,nde,VNo,zNo,lde,WNo,QNo,F6,Oxe,Od,_1,ide,C6,HNo,dde,UNo,Gxe,mr,M6,JNo,Gd,YNo,cde,KNo,ZNo,mde,eqo,oqo,rqo,E6,tqo,fde,aqo,sqo,nqo,st,y6,lqo,gde,iqo,dqo,Xd,cqo,hde,mqo,fqo,ude,gqo,hqo,uqo,pde,pqo,_qo,w6,bqo,Ke,A6,vqo,_de,Tqo,Fqo,ss,Cqo,bde,Mqo,Eqo,vde,yqo,wqo,Tde,Aqo,Lqo,Bqo,ke,b1,Fde,xqo,kqo,BN,Rqo,Sqo,Pqo,v1,Cde,$qo,Iqo,xN,jqo,Dqo,Nqo,T1,Mde,qqo,Oqo,kN,Gqo,Xqo,Vqo,F1,Ede,zqo,Wqo,RN,Qqo,Hqo,Uqo,C1,yde,Jqo,Yqo,SN,Kqo,Zqo,eOo,M1,wde,oOo,rOo,PN,tOo,aOo,sOo,E1,Ade,nOo,lOo,$N,iOo,dOo,cOo,y1,Lde,mOo,fOo,IN,gOo,hOo,uOo,w1,pOo,Bde,_Oo,bOo,xde,vOo,TOo,kde,FOo,COo,L6,Xxe,Vd,A1,Rde,B6,MOo,Sde,EOo,Vxe,fr,x6,yOo,zd,wOo,Pde,AOo,LOo,$de,BOo,xOo,kOo,k6,ROo,Ide,SOo,POo,$Oo,nt,R6,IOo,jde,jOo,DOo,Wd,NOo,Dde,qOo,OOo,Nde,GOo,XOo,VOo,qde,zOo,WOo,S6,QOo,Ze,P6,HOo,Ode,UOo,JOo,ns,YOo,Gde,KOo,ZOo,Xde,eGo,oGo,Vde,rGo,tGo,aGo,$6,L1,zde,sGo,nGo,jN,lGo,iGo,dGo,B1,Wde,cGo,mGo,DN,fGo,gGo,hGo,x1,uGo,Qde,pGo,_Go,Hde,bGo,vGo,Ude,TGo,FGo,I6,zxe,Qd,k1,Jde,j6,CGo,Yde,MGo,Wxe,gr,D6,EGo,Hd,yGo,Kde,wGo,AGo,Zde,LGo,BGo,xGo,N6,kGo,ece,RGo,SGo,PGo,lt,q6,$Go,oce,IGo,jGo,Ud,DGo,rce,NGo,qGo,tce,OGo,GGo,XGo,ace,VGo,zGo,O6,WGo,eo,G6,QGo,sce,HGo,UGo,ls,JGo,nce,YGo,KGo,lce,ZGo,eXo,ice,oXo,rXo,tXo,is,R1,dce,aXo,sXo,NN,nXo,lXo,iXo,S1,cce,dXo,cXo,qN,mXo,fXo,gXo,P1,mce,hXo,uXo,ON,pXo,_Xo,bXo,$1,fce,vXo,TXo,GN,FXo,CXo,MXo,I1,EXo,gce,yXo,wXo,hce,AXo,LXo,uce,BXo,xXo,X6,Qxe,Jd,j1,pce,V6,kXo,_ce,RXo,Hxe,hr,z6,SXo,Yd,PXo,bce,$Xo,IXo,vce,jXo,DXo,NXo,W6,qXo,Tce,OXo,GXo,XXo,it,Q6,VXo,Fce,zXo,WXo,Kd,QXo,Cce,HXo,UXo,Mce,JXo,YXo,KXo,Ece,ZXo,eVo,H6,oVo,oo,U6,rVo,yce,tVo,aVo,ds,sVo,wce,nVo,lVo,Ace,iVo,dVo,Lce,cVo,mVo,fVo,Zd,D1,Bce,gVo,hVo,XN,uVo,pVo,_Vo,N1,xce,bVo,vVo,VN,TVo,FVo,CVo,q1,kce,MVo,EVo,zN,yVo,wVo,AVo,O1,LVo,Rce,BVo,xVo,Sce,kVo,RVo,Pce,SVo,PVo,J6,Uxe,ec,G1,$ce,Y6,$Vo,Ice,IVo,Jxe,ur,K6,jVo,oc,DVo,jce,NVo,qVo,Dce,OVo,GVo,XVo,Z6,VVo,Nce,zVo,WVo,QVo,dt,eA,HVo,qce,UVo,JVo,rc,YVo,Oce,KVo,ZVo,Gce,ezo,ozo,rzo,Xce,tzo,azo,oA,szo,ro,rA,nzo,Vce,lzo,izo,cs,dzo,zce,czo,mzo,Wce,fzo,gzo,Qce,hzo,uzo,pzo,Hce,X1,Uce,_zo,bzo,WN,vzo,Tzo,Fzo,V1,Czo,Jce,Mzo,Ezo,Yce,yzo,wzo,Kce,Azo,Lzo,tA,Yxe,tc,z1,Zce,aA,Bzo,eme,xzo,Kxe,pr,sA,kzo,ac,Rzo,ome,Szo,Pzo,rme,$zo,Izo,jzo,nA,Dzo,tme,Nzo,qzo,Ozo,ct,lA,Gzo,ame,Xzo,Vzo,sc,zzo,sme,Wzo,Qzo,nme,Hzo,Uzo,Jzo,lme,Yzo,Kzo,iA,Zzo,to,dA,eWo,ime,oWo,rWo,ms,tWo,dme,aWo,sWo,cme,nWo,lWo,mme,iWo,dWo,cWo,fme,W1,gme,mWo,fWo,QN,gWo,hWo,uWo,Q1,pWo,hme,_Wo,bWo,ume,vWo,TWo,pme,FWo,CWo,cA,Zxe,nc,H1,_me,mA,MWo,bme,EWo,eke,_r,fA,yWo,lc,wWo,vme,AWo,LWo,Tme,BWo,xWo,kWo,gA,RWo,Fme,SWo,PWo,$Wo,mt,hA,IWo,Cme,jWo,DWo,ic,NWo,Mme,qWo,OWo,Eme,GWo,XWo,VWo,yme,zWo,WWo,uA,QWo,ao,pA,HWo,wme,UWo,JWo,fs,YWo,Ame,KWo,ZWo,Lme,eQo,oQo,Bme,rQo,tQo,aQo,_A,U1,xme,sQo,nQo,HN,lQo,iQo,dQo,J1,kme,cQo,mQo,UN,fQo,gQo,hQo,Y1,uQo,Rme,pQo,_Qo,Sme,bQo,vQo,Pme,TQo,FQo,bA,oke,dc,K1,$me,vA,CQo,Ime,MQo,rke,br,TA,EQo,cc,yQo,jme,wQo,AQo,Dme,LQo,BQo,xQo,FA,kQo,Nme,RQo,SQo,PQo,ft,CA,$Qo,qme,IQo,jQo,mc,DQo,Ome,NQo,qQo,Gme,OQo,GQo,XQo,Xme,VQo,zQo,MA,WQo,so,EA,QQo,Vme,HQo,UQo,gs,JQo,zme,YQo,KQo,Wme,ZQo,eHo,Qme,oHo,rHo,tHo,Hme,Z1,Ume,aHo,sHo,JN,nHo,lHo,iHo,eF,dHo,Jme,cHo,mHo,Yme,fHo,gHo,Kme,hHo,uHo,yA,tke,fc,oF,Zme,wA,pHo,efe,_Ho,ake,vr,AA,bHo,gc,vHo,ofe,THo,FHo,rfe,CHo,MHo,EHo,LA,yHo,tfe,wHo,AHo,LHo,gt,BA,BHo,afe,xHo,kHo,hc,RHo,sfe,SHo,PHo,nfe,$Ho,IHo,jHo,lfe,DHo,NHo,xA,qHo,ho,kA,OHo,ife,GHo,XHo,hs,VHo,dfe,zHo,WHo,cfe,QHo,HHo,mfe,UHo,JHo,YHo,B,rF,ffe,KHo,ZHo,YN,eUo,oUo,rUo,tF,gfe,tUo,aUo,KN,sUo,nUo,lUo,aF,hfe,iUo,dUo,ZN,cUo,mUo,fUo,sF,ufe,gUo,hUo,eq,uUo,pUo,_Uo,nF,pfe,bUo,vUo,oq,TUo,FUo,CUo,lF,_fe,MUo,EUo,rq,yUo,wUo,AUo,iF,bfe,LUo,BUo,tq,xUo,kUo,RUo,dF,vfe,SUo,PUo,aq,$Uo,IUo,jUo,cF,Tfe,DUo,NUo,sq,qUo,OUo,GUo,mF,Ffe,XUo,VUo,nq,zUo,WUo,QUo,fF,Cfe,HUo,UUo,lq,JUo,YUo,KUo,gF,Mfe,ZUo,eJo,iq,oJo,rJo,tJo,hF,Efe,aJo,sJo,dq,nJo,lJo,iJo,uF,yfe,dJo,cJo,cq,mJo,fJo,gJo,pF,wfe,hJo,uJo,mq,pJo,_Jo,bJo,_F,Afe,vJo,TJo,fq,FJo,CJo,MJo,On,Lfe,EJo,yJo,gq,wJo,AJo,hq,LJo,BJo,xJo,bF,Bfe,kJo,RJo,uq,SJo,PJo,$Jo,vF,xfe,IJo,jJo,pq,DJo,NJo,qJo,TF,kfe,OJo,GJo,_q,XJo,VJo,zJo,FF,Rfe,WJo,QJo,bq,HJo,UJo,JJo,CF,Sfe,YJo,KJo,vq,ZJo,eYo,oYo,MF,Pfe,rYo,tYo,Tq,aYo,sYo,nYo,EF,$fe,lYo,iYo,Fq,dYo,cYo,mYo,yF,Ife,fYo,gYo,Cq,hYo,uYo,pYo,wF,jfe,_Yo,bYo,Mq,vYo,TYo,FYo,AF,Dfe,CYo,MYo,Eq,EYo,yYo,wYo,LF,Nfe,AYo,LYo,yq,BYo,xYo,kYo,BF,qfe,RYo,SYo,wq,PYo,$Yo,IYo,xF,Ofe,jYo,DYo,Aq,NYo,qYo,OYo,kF,Gfe,GYo,XYo,Lq,VYo,zYo,WYo,RF,Xfe,QYo,HYo,Bq,UYo,JYo,YYo,SF,Vfe,KYo,ZYo,xq,eKo,oKo,rKo,PF,zfe,tKo,aKo,kq,sKo,nKo,lKo,$F,Wfe,iKo,dKo,Rq,cKo,mKo,fKo,IF,Qfe,gKo,hKo,Sq,uKo,pKo,_Ko,jF,Hfe,bKo,vKo,Pq,TKo,FKo,CKo,DF,Ufe,MKo,EKo,$q,yKo,wKo,AKo,NF,Jfe,LKo,BKo,Iq,xKo,kKo,RKo,qF,Yfe,SKo,PKo,jq,$Ko,IKo,jKo,OF,Kfe,DKo,NKo,Dq,qKo,OKo,GKo,GF,Zfe,XKo,VKo,Nq,zKo,WKo,QKo,ege,HKo,UKo,RA,ske,uc,XF,oge,SA,JKo,rge,YKo,nke,Tr,PA,KKo,pc,ZKo,tge,eZo,oZo,age,rZo,tZo,aZo,$A,sZo,sge,nZo,lZo,iZo,ht,IA,dZo,nge,cZo,mZo,_c,fZo,lge,gZo,hZo,ige,uZo,pZo,_Zo,dge,bZo,vZo,jA,TZo,uo,DA,FZo,cge,CZo,MZo,us,EZo,mge,yZo,wZo,fge,AZo,LZo,gge,BZo,xZo,kZo,H,VF,hge,RZo,SZo,qq,PZo,$Zo,IZo,zF,uge,jZo,DZo,Oq,NZo,qZo,OZo,WF,pge,GZo,XZo,Gq,VZo,zZo,WZo,QF,_ge,QZo,HZo,Xq,UZo,JZo,YZo,HF,bge,KZo,ZZo,Vq,eer,oer,rer,UF,vge,ter,aer,zq,ser,ner,ler,JF,Tge,ier,der,Wq,cer,mer,fer,YF,Fge,ger,her,Qq,uer,per,_er,KF,Cge,ber,ver,Hq,Ter,Fer,Cer,ZF,Mge,Mer,Eer,Uq,yer,wer,Aer,eC,Ege,Ler,Ber,Jq,xer,ker,Rer,oC,yge,Ser,Per,Yq,$er,Ier,jer,rC,wge,Der,Ner,Kq,qer,Oer,Ger,tC,Age,Xer,Ver,Zq,zer,Wer,Qer,aC,Lge,Her,Uer,eO,Jer,Yer,Ker,sC,Bge,Zer,eor,oO,oor,ror,tor,nC,xge,aor,sor,rO,nor,lor,ior,lC,kge,dor,cor,tO,mor,gor,hor,iC,Rge,uor,por,aO,_or,bor,vor,dC,Sge,Tor,For,sO,Cor,Mor,Eor,cC,Pge,yor,wor,nO,Aor,Lor,Bor,mC,$ge,xor,kor,lO,Ror,Sor,Por,Ige,$or,Ior,NA,lke,bc,fC,jge,qA,jor,Dge,Dor,ike,Fr,OA,Nor,vc,qor,Nge,Oor,Gor,qge,Xor,Vor,zor,GA,Wor,Oge,Qor,Hor,Uor,ut,XA,Jor,Gge,Yor,Kor,Tc,Zor,Xge,err,orr,Vge,rrr,trr,arr,zge,srr,nrr,VA,lrr,po,zA,irr,Wge,drr,crr,ps,mrr,Qge,frr,grr,Hge,hrr,urr,Uge,prr,_rr,brr,ue,gC,Jge,vrr,Trr,iO,Frr,Crr,Mrr,hC,Yge,Err,yrr,dO,wrr,Arr,Lrr,uC,Kge,Brr,xrr,cO,krr,Rrr,Srr,pC,Zge,Prr,$rr,mO,Irr,jrr,Drr,_C,ehe,Nrr,qrr,fO,Orr,Grr,Xrr,bC,ohe,Vrr,zrr,gO,Wrr,Qrr,Hrr,vC,rhe,Urr,Jrr,hO,Yrr,Krr,Zrr,TC,the,etr,otr,uO,rtr,ttr,atr,FC,ahe,str,ntr,pO,ltr,itr,dtr,CC,she,ctr,mtr,_O,ftr,gtr,htr,nhe,utr,ptr,WA,dke,Fc,MC,lhe,QA,_tr,ihe,btr,cke,Cr,HA,vtr,Cc,Ttr,dhe,Ftr,Ctr,che,Mtr,Etr,ytr,UA,wtr,mhe,Atr,Ltr,Btr,pt,JA,xtr,fhe,ktr,Rtr,Mc,Str,ghe,Ptr,$tr,hhe,Itr,jtr,Dtr,uhe,Ntr,qtr,YA,Otr,_o,KA,Gtr,phe,Xtr,Vtr,_s,ztr,_he,Wtr,Qtr,bhe,Htr,Utr,vhe,Jtr,Ytr,Ktr,ZA,EC,The,Ztr,ear,bO,oar,rar,tar,yC,Fhe,aar,sar,vO,nar,lar,iar,Che,dar,car,e0,mke,Ec,wC,Mhe,o0,mar,Ehe,far,fke,Mr,r0,gar,yc,har,yhe,uar,par,whe,_ar,bar,Tar,t0,Far,Ahe,Car,Mar,Ear,_t,a0,yar,Lhe,war,Aar,wc,Lar,Bhe,Bar,xar,xhe,kar,Rar,Sar,khe,Par,$ar,s0,Iar,bo,n0,jar,Rhe,Dar,Nar,bs,qar,She,Oar,Gar,Phe,Xar,Var,$he,zar,War,Qar,Y,AC,Ihe,Har,Uar,TO,Jar,Yar,Kar,LC,jhe,Zar,esr,FO,osr,rsr,tsr,BC,Dhe,asr,ssr,CO,nsr,lsr,isr,xC,Nhe,dsr,csr,MO,msr,fsr,gsr,kC,qhe,hsr,usr,EO,psr,_sr,bsr,RC,Ohe,vsr,Tsr,yO,Fsr,Csr,Msr,SC,Ghe,Esr,ysr,wO,wsr,Asr,Lsr,PC,Xhe,Bsr,xsr,AO,ksr,Rsr,Ssr,$C,Vhe,Psr,$sr,LO,Isr,jsr,Dsr,IC,zhe,Nsr,qsr,BO,Osr,Gsr,Xsr,jC,Whe,Vsr,zsr,xO,Wsr,Qsr,Hsr,DC,Qhe,Usr,Jsr,kO,Ysr,Ksr,Zsr,NC,Hhe,enr,onr,RO,rnr,tnr,anr,qC,Uhe,snr,nnr,SO,lnr,inr,dnr,OC,Jhe,cnr,mnr,PO,fnr,gnr,hnr,GC,Yhe,unr,pnr,$O,_nr,bnr,vnr,XC,Khe,Tnr,Fnr,IO,Cnr,Mnr,Enr,VC,Zhe,ynr,wnr,jO,Anr,Lnr,Bnr,zC,eue,xnr,knr,DO,Rnr,Snr,Pnr,WC,oue,$nr,Inr,NO,jnr,Dnr,Nnr,rue,qnr,Onr,l0,gke,Ac,QC,tue,i0,Gnr,aue,Xnr,hke,Er,d0,Vnr,Lc,znr,sue,Wnr,Qnr,nue,Hnr,Unr,Jnr,c0,Ynr,lue,Knr,Znr,elr,bt,m0,olr,iue,rlr,tlr,Bc,alr,due,slr,nlr,cue,llr,ilr,dlr,mue,clr,mlr,f0,flr,vo,g0,glr,fue,hlr,ulr,vs,plr,gue,_lr,blr,hue,vlr,Tlr,uue,Flr,Clr,Mlr,pe,HC,pue,Elr,ylr,qO,wlr,Alr,Llr,UC,_ue,Blr,xlr,OO,klr,Rlr,Slr,JC,bue,Plr,$lr,GO,Ilr,jlr,Dlr,YC,vue,Nlr,qlr,XO,Olr,Glr,Xlr,KC,Tue,Vlr,zlr,VO,Wlr,Qlr,Hlr,ZC,Fue,Ulr,Jlr,zO,Ylr,Klr,Zlr,eM,Cue,eir,oir,WO,rir,tir,air,oM,Mue,sir,nir,QO,lir,iir,dir,rM,Eue,cir,mir,HO,fir,gir,hir,tM,yue,uir,pir,UO,_ir,bir,vir,wue,Tir,Fir,h0,uke,xc,aM,Aue,u0,Cir,Lue,Mir,pke,yr,p0,Eir,kc,yir,Bue,wir,Air,xue,Lir,Bir,xir,_0,kir,kue,Rir,Sir,Pir,vt,b0,$ir,Rue,Iir,jir,Rc,Dir,Sue,Nir,qir,Pue,Oir,Gir,Xir,$ue,Vir,zir,v0,Wir,To,T0,Qir,Iue,Hir,Uir,Ts,Jir,jue,Yir,Kir,Due,Zir,edr,Nue,odr,rdr,tdr,V,sM,que,adr,sdr,JO,ndr,ldr,idr,nM,Oue,ddr,cdr,YO,mdr,fdr,gdr,lM,Gue,hdr,udr,KO,pdr,_dr,bdr,iM,Xue,vdr,Tdr,ZO,Fdr,Cdr,Mdr,dM,Vue,Edr,ydr,eG,wdr,Adr,Ldr,cM,zue,Bdr,xdr,oG,kdr,Rdr,Sdr,mM,Wue,Pdr,$dr,rG,Idr,jdr,Ddr,fM,Que,Ndr,qdr,tG,Odr,Gdr,Xdr,gM,Hue,Vdr,zdr,aG,Wdr,Qdr,Hdr,hM,Uue,Udr,Jdr,sG,Ydr,Kdr,Zdr,uM,Jue,ecr,ocr,nG,rcr,tcr,acr,pM,Yue,scr,ncr,lG,lcr,icr,dcr,_M,Kue,ccr,mcr,iG,fcr,gcr,hcr,bM,Zue,ucr,pcr,dG,_cr,bcr,vcr,vM,epe,Tcr,Fcr,cG,Ccr,Mcr,Ecr,TM,ope,ycr,wcr,mG,Acr,Lcr,Bcr,FM,rpe,xcr,kcr,fG,Rcr,Scr,Pcr,CM,tpe,$cr,Icr,gG,jcr,Dcr,Ncr,MM,ape,qcr,Ocr,hG,Gcr,Xcr,Vcr,EM,spe,zcr,Wcr,uG,Qcr,Hcr,Ucr,yM,npe,Jcr,Ycr,pG,Kcr,Zcr,emr,wM,lpe,omr,rmr,_G,tmr,amr,smr,AM,ipe,nmr,lmr,bG,imr,dmr,cmr,LM,dpe,mmr,fmr,vG,gmr,hmr,umr,BM,cpe,pmr,_mr,TG,bmr,vmr,Tmr,mpe,Fmr,Cmr,F0,_ke,Sc,xM,fpe,C0,Mmr,gpe,Emr,bke,wr,M0,ymr,Pc,wmr,hpe,Amr,Lmr,upe,Bmr,xmr,kmr,E0,Rmr,ppe,Smr,Pmr,$mr,Tt,y0,Imr,_pe,jmr,Dmr,$c,Nmr,bpe,qmr,Omr,vpe,Gmr,Xmr,Vmr,Tpe,zmr,Wmr,w0,Qmr,Fo,A0,Hmr,Fpe,Umr,Jmr,Fs,Ymr,Cpe,Kmr,Zmr,Mpe,efr,ofr,Epe,rfr,tfr,afr,te,kM,ype,sfr,nfr,FG,lfr,ifr,dfr,RM,wpe,cfr,mfr,CG,ffr,gfr,hfr,SM,Ape,ufr,pfr,MG,_fr,bfr,vfr,PM,Lpe,Tfr,Ffr,EG,Cfr,Mfr,Efr,$M,Bpe,yfr,wfr,yG,Afr,Lfr,Bfr,IM,xpe,xfr,kfr,wG,Rfr,Sfr,Pfr,jM,kpe,$fr,Ifr,AG,jfr,Dfr,Nfr,DM,Rpe,qfr,Ofr,LG,Gfr,Xfr,Vfr,NM,Spe,zfr,Wfr,BG,Qfr,Hfr,Ufr,qM,Ppe,Jfr,Yfr,xG,Kfr,Zfr,egr,OM,$pe,ogr,rgr,kG,tgr,agr,sgr,GM,Ipe,ngr,lgr,RG,igr,dgr,cgr,XM,jpe,mgr,fgr,SG,ggr,hgr,ugr,VM,Dpe,pgr,_gr,PG,bgr,vgr,Tgr,zM,Npe,Fgr,Cgr,$G,Mgr,Egr,ygr,WM,qpe,wgr,Agr,IG,Lgr,Bgr,xgr,QM,Ope,kgr,Rgr,jG,Sgr,Pgr,$gr,Gpe,Igr,jgr,L0,vke,Ic,HM,Xpe,B0,Dgr,Vpe,Ngr,Tke,Ar,x0,qgr,jc,Ogr,zpe,Ggr,Xgr,Wpe,Vgr,zgr,Wgr,k0,Qgr,Qpe,Hgr,Ugr,Jgr,Ft,R0,Ygr,Hpe,Kgr,Zgr,Dc,ehr,Upe,ohr,rhr,Jpe,thr,ahr,shr,Ype,nhr,lhr,S0,ihr,Co,P0,dhr,Kpe,chr,mhr,Cs,fhr,Zpe,ghr,hhr,e_e,uhr,phr,o_e,_hr,bhr,vhr,r_e,UM,t_e,Thr,Fhr,DG,Chr,Mhr,Ehr,a_e,yhr,whr,$0,Fke,Nc,JM,s_e,I0,Ahr,n_e,Lhr,Cke,Lr,j0,Bhr,qc,xhr,l_e,khr,Rhr,i_e,Shr,Phr,$hr,D0,Ihr,d_e,jhr,Dhr,Nhr,Ct,N0,qhr,c_e,Ohr,Ghr,Oc,Xhr,m_e,Vhr,zhr,f_e,Whr,Qhr,Hhr,g_e,Uhr,Jhr,q0,Yhr,Mo,O0,Khr,h_e,Zhr,eur,Ms,our,u_e,rur,tur,p_e,aur,sur,__e,nur,lur,iur,K,YM,b_e,dur,cur,NG,mur,fur,gur,KM,v_e,hur,uur,qG,pur,_ur,bur,ZM,T_e,vur,Tur,OG,Fur,Cur,Mur,e4,F_e,Eur,yur,GG,wur,Aur,Lur,o4,C_e,Bur,xur,XG,kur,Rur,Sur,r4,M_e,Pur,$ur,VG,Iur,jur,Dur,t4,E_e,Nur,qur,zG,Our,Gur,Xur,a4,y_e,Vur,zur,WG,Wur,Qur,Hur,s4,w_e,Uur,Jur,QG,Yur,Kur,Zur,n4,A_e,epr,opr,HG,rpr,tpr,apr,l4,L_e,spr,npr,UG,lpr,ipr,dpr,i4,B_e,cpr,mpr,JG,fpr,gpr,hpr,d4,x_e,upr,ppr,YG,_pr,bpr,vpr,c4,k_e,Tpr,Fpr,KG,Cpr,Mpr,Epr,m4,R_e,ypr,wpr,ZG,Apr,Lpr,Bpr,f4,S_e,xpr,kpr,eX,Rpr,Spr,Ppr,g4,P_e,$pr,Ipr,oX,jpr,Dpr,Npr,h4,$_e,qpr,Opr,rX,Gpr,Xpr,Vpr,u4,I_e,zpr,Wpr,tX,Qpr,Hpr,Upr,p4,j_e,Jpr,Ypr,aX,Kpr,Zpr,e_r,D_e,o_r,r_r,G0,Mke,Gc,_4,N_e,X0,t_r,q_e,a_r,Eke,Br,V0,s_r,Xc,n_r,O_e,l_r,i_r,G_e,d_r,c_r,m_r,z0,f_r,X_e,g_r,h_r,u_r,Mt,W0,p_r,V_e,__r,b_r,Vc,v_r,z_e,T_r,F_r,W_e,C_r,M_r,E_r,Q_e,y_r,w_r,Q0,A_r,Eo,H0,L_r,H_e,B_r,x_r,Es,k_r,U_e,R_r,S_r,J_e,P_r,$_r,Y_e,I_r,j_r,D_r,Z,b4,K_e,N_r,q_r,sX,O_r,G_r,X_r,v4,Z_e,V_r,z_r,nX,W_r,Q_r,H_r,T4,ebe,U_r,J_r,lX,Y_r,K_r,Z_r,F4,obe,ebr,obr,iX,rbr,tbr,abr,C4,rbe,sbr,nbr,dX,lbr,ibr,dbr,M4,tbe,cbr,mbr,cX,fbr,gbr,hbr,E4,abe,ubr,pbr,mX,_br,bbr,vbr,y4,sbe,Tbr,Fbr,fX,Cbr,Mbr,Ebr,w4,nbe,ybr,wbr,gX,Abr,Lbr,Bbr,A4,lbe,xbr,kbr,hX,Rbr,Sbr,Pbr,L4,ibe,$br,Ibr,uX,jbr,Dbr,Nbr,B4,dbe,qbr,Obr,pX,Gbr,Xbr,Vbr,x4,cbe,zbr,Wbr,_X,Qbr,Hbr,Ubr,k4,mbe,Jbr,Ybr,bX,Kbr,Zbr,e2r,R4,fbe,o2r,r2r,vX,t2r,a2r,s2r,S4,gbe,n2r,l2r,TX,i2r,d2r,c2r,P4,hbe,m2r,f2r,FX,g2r,h2r,u2r,$4,ube,p2r,_2r,CX,b2r,v2r,T2r,I4,pbe,F2r,C2r,MX,M2r,E2r,y2r,_be,w2r,A2r,U0,yke,zc,j4,bbe,J0,L2r,vbe,B2r,wke,xr,Y0,x2r,Wc,k2r,Tbe,R2r,S2r,Fbe,P2r,$2r,I2r,K0,j2r,Cbe,D2r,N2r,q2r,Et,Z0,O2r,Mbe,G2r,X2r,Qc,V2r,Ebe,z2r,W2r,ybe,Q2r,H2r,U2r,wbe,J2r,Y2r,eL,K2r,yo,oL,Z2r,Abe,evr,ovr,ys,rvr,Lbe,tvr,avr,Bbe,svr,nvr,xbe,lvr,ivr,dvr,kbe,D4,Rbe,cvr,mvr,EX,fvr,gvr,hvr,Sbe,uvr,pvr,rL,Ake,Hc,N4,Pbe,tL,_vr,$be,bvr,Lke,kr,aL,vvr,Uc,Tvr,Ibe,Fvr,Cvr,jbe,Mvr,Evr,yvr,sL,wvr,Dbe,Avr,Lvr,Bvr,yt,nL,xvr,Nbe,kvr,Rvr,Jc,Svr,qbe,Pvr,$vr,Obe,Ivr,jvr,Dvr,Gbe,Nvr,qvr,lL,Ovr,wo,iL,Gvr,Xbe,Xvr,Vvr,ws,zvr,Vbe,Wvr,Qvr,zbe,Hvr,Uvr,Wbe,Jvr,Yvr,Kvr,Qbe,q4,Hbe,Zvr,eTr,yX,oTr,rTr,tTr,Ube,aTr,sTr,dL,Bke,Yc,O4,Jbe,cL,nTr,Ybe,lTr,xke,Rr,mL,iTr,Kc,dTr,Kbe,cTr,mTr,Zbe,fTr,gTr,hTr,fL,uTr,e2e,pTr,_Tr,bTr,wt,gL,vTr,o2e,TTr,FTr,Zc,CTr,r2e,MTr,ETr,t2e,yTr,wTr,ATr,a2e,LTr,BTr,hL,xTr,Ao,uL,kTr,s2e,RTr,STr,As,PTr,n2e,$Tr,ITr,l2e,jTr,DTr,i2e,NTr,qTr,OTr,z,G4,d2e,GTr,XTr,wX,VTr,zTr,WTr,X4,c2e,QTr,HTr,AX,UTr,JTr,YTr,V4,m2e,KTr,ZTr,LX,e1r,o1r,r1r,z4,f2e,t1r,a1r,BX,s1r,n1r,l1r,W4,g2e,i1r,d1r,xX,c1r,m1r,f1r,Q4,h2e,g1r,h1r,kX,u1r,p1r,_1r,H4,u2e,b1r,v1r,RX,T1r,F1r,C1r,U4,p2e,M1r,E1r,SX,y1r,w1r,A1r,J4,_2e,L1r,B1r,PX,x1r,k1r,R1r,Y4,b2e,S1r,P1r,$X,$1r,I1r,j1r,K4,v2e,D1r,N1r,IX,q1r,O1r,G1r,Z4,T2e,X1r,V1r,jX,z1r,W1r,Q1r,eE,F2e,H1r,U1r,DX,J1r,Y1r,K1r,oE,C2e,Z1r,eFr,NX,oFr,rFr,tFr,rE,M2e,aFr,sFr,qX,nFr,lFr,iFr,tE,E2e,dFr,cFr,OX,mFr,fFr,gFr,aE,y2e,hFr,uFr,GX,pFr,_Fr,bFr,sE,w2e,vFr,TFr,XX,FFr,CFr,MFr,nE,A2e,EFr,yFr,VX,wFr,AFr,LFr,lE,L2e,BFr,xFr,zX,kFr,RFr,SFr,iE,B2e,PFr,$Fr,WX,IFr,jFr,DFr,dE,x2e,NFr,qFr,QX,OFr,GFr,XFr,cE,k2e,VFr,zFr,HX,WFr,QFr,HFr,mE,R2e,UFr,JFr,UX,YFr,KFr,ZFr,fE,S2e,eCr,oCr,JX,rCr,tCr,aCr,P2e,sCr,nCr,pL,kke,em,gE,$2e,_L,lCr,I2e,iCr,Rke,Sr,bL,dCr,om,cCr,j2e,mCr,fCr,D2e,gCr,hCr,uCr,vL,pCr,N2e,_Cr,bCr,vCr,At,TL,TCr,q2e,FCr,CCr,rm,MCr,O2e,ECr,yCr,G2e,wCr,ACr,LCr,X2e,BCr,xCr,FL,kCr,Lo,CL,RCr,V2e,SCr,PCr,Ls,$Cr,z2e,ICr,jCr,W2e,DCr,NCr,Q2e,qCr,OCr,GCr,Bs,hE,H2e,XCr,VCr,YX,zCr,WCr,QCr,uE,U2e,HCr,UCr,KX,JCr,YCr,KCr,pE,J2e,ZCr,eMr,ZX,oMr,rMr,tMr,_E,Y2e,aMr,sMr,eV,nMr,lMr,iMr,K2e,dMr,cMr,ML,Ske,tm,bE,Z2e,EL,mMr,eve,fMr,Pke,Pr,yL,gMr,am,hMr,ove,uMr,pMr,rve,_Mr,bMr,vMr,wL,TMr,tve,FMr,CMr,MMr,Lt,AL,EMr,ave,yMr,wMr,sm,AMr,sve,LMr,BMr,nve,xMr,kMr,RMr,lve,SMr,PMr,LL,$Mr,Bo,BL,IMr,ive,jMr,DMr,xs,NMr,dve,qMr,OMr,cve,GMr,XMr,mve,VMr,zMr,WMr,ce,vE,fve,QMr,HMr,oV,UMr,JMr,YMr,TE,gve,KMr,ZMr,rV,e4r,o4r,r4r,FE,hve,t4r,a4r,tV,s4r,n4r,l4r,CE,uve,i4r,d4r,aV,c4r,m4r,f4r,ME,pve,g4r,h4r,sV,u4r,p4r,_4r,EE,_ve,b4r,v4r,nV,T4r,F4r,C4r,yE,bve,M4r,E4r,lV,y4r,w4r,A4r,wE,vve,L4r,B4r,iV,x4r,k4r,R4r,AE,Tve,S4r,P4r,dV,$4r,I4r,j4r,LE,Fve,D4r,N4r,cV,q4r,O4r,G4r,BE,Cve,X4r,V4r,mV,z4r,W4r,Q4r,xE,Mve,H4r,U4r,fV,J4r,Y4r,K4r,Eve,Z4r,eEr,xL,$ke,nm,kE,yve,kL,oEr,wve,rEr,Ike,$r,RL,tEr,lm,aEr,Ave,sEr,nEr,Lve,lEr,iEr,dEr,SL,cEr,Bve,mEr,fEr,gEr,Bt,PL,hEr,xve,uEr,pEr,im,_Er,kve,bEr,vEr,Rve,TEr,FEr,CEr,Sve,MEr,EEr,$L,yEr,xo,IL,wEr,Pve,AEr,LEr,ks,BEr,$ve,xEr,kEr,Ive,REr,SEr,jve,PEr,$Er,IEr,_e,RE,Dve,jEr,DEr,gV,NEr,qEr,OEr,SE,Nve,GEr,XEr,hV,VEr,zEr,WEr,PE,qve,QEr,HEr,uV,UEr,JEr,YEr,$E,Ove,KEr,ZEr,pV,e3r,o3r,r3r,IE,Gve,t3r,a3r,_V,s3r,n3r,l3r,jE,Xve,i3r,d3r,bV,c3r,m3r,f3r,DE,Vve,g3r,h3r,vV,u3r,p3r,_3r,NE,zve,b3r,v3r,TV,T3r,F3r,C3r,qE,Wve,M3r,E3r,FV,y3r,w3r,A3r,OE,Qve,L3r,B3r,CV,x3r,k3r,R3r,Hve,S3r,P3r,jL,jke,dm,GE,Uve,DL,$3r,Jve,I3r,Dke,Ir,NL,j3r,cm,D3r,Yve,N3r,q3r,Kve,O3r,G3r,X3r,qL,V3r,Zve,z3r,W3r,Q3r,xt,OL,H3r,eTe,U3r,J3r,mm,Y3r,oTe,K3r,Z3r,rTe,e5r,o5r,r5r,tTe,t5r,a5r,GL,s5r,ko,XL,n5r,aTe,l5r,i5r,Rs,d5r,sTe,c5r,m5r,nTe,f5r,g5r,lTe,h5r,u5r,p5r,Ce,XE,iTe,_5r,b5r,MV,v5r,T5r,F5r,VE,dTe,C5r,M5r,EV,E5r,y5r,w5r,zE,cTe,A5r,L5r,yV,B5r,x5r,k5r,WE,mTe,R5r,S5r,wV,P5r,$5r,I5r,QE,fTe,j5r,D5r,AV,N5r,q5r,O5r,HE,gTe,G5r,X5r,LV,V5r,z5r,W5r,UE,hTe,Q5r,H5r,BV,U5r,J5r,Y5r,JE,uTe,K5r,Z5r,xV,eyr,oyr,ryr,YE,pTe,tyr,ayr,kV,syr,nyr,lyr,_Te,iyr,dyr,VL,Nke,fm,KE,bTe,zL,cyr,vTe,myr,qke,jr,WL,fyr,gm,gyr,TTe,hyr,uyr,FTe,pyr,_yr,byr,QL,vyr,CTe,Tyr,Fyr,Cyr,kt,HL,Myr,MTe,Eyr,yyr,hm,wyr,ETe,Ayr,Lyr,yTe,Byr,xyr,kyr,wTe,Ryr,Syr,UL,Pyr,Ro,JL,$yr,ATe,Iyr,jyr,Ss,Dyr,LTe,Nyr,qyr,BTe,Oyr,Gyr,xTe,Xyr,Vyr,zyr,be,ZE,kTe,Wyr,Qyr,RV,Hyr,Uyr,Jyr,e3,RTe,Yyr,Kyr,SV,Zyr,ewr,owr,o3,STe,rwr,twr,PV,awr,swr,nwr,r3,PTe,lwr,iwr,$V,dwr,cwr,mwr,t3,$Te,fwr,gwr,IV,hwr,uwr,pwr,a3,ITe,_wr,bwr,jV,vwr,Twr,Fwr,s3,jTe,Cwr,Mwr,DV,Ewr,ywr,wwr,n3,DTe,Awr,Lwr,NV,Bwr,xwr,kwr,l3,NTe,Rwr,Swr,qV,Pwr,$wr,Iwr,i3,qTe,jwr,Dwr,OV,Nwr,qwr,Owr,OTe,Gwr,Xwr,YL,Oke,um,d3,GTe,KL,Vwr,XTe,zwr,Gke,Dr,ZL,Wwr,pm,Qwr,VTe,Hwr,Uwr,zTe,Jwr,Ywr,Kwr,e8,Zwr,WTe,e6r,o6r,r6r,Rt,o8,t6r,QTe,a6r,s6r,_m,n6r,HTe,l6r,i6r,UTe,d6r,c6r,m6r,JTe,f6r,g6r,r8,h6r,So,t8,u6r,YTe,p6r,_6r,Ps,b6r,KTe,v6r,T6r,ZTe,F6r,C6r,e1e,M6r,E6r,y6r,ve,c3,o1e,w6r,A6r,GV,L6r,B6r,x6r,m3,r1e,k6r,R6r,XV,S6r,P6r,$6r,f3,t1e,I6r,j6r,VV,D6r,N6r,q6r,g3,a1e,O6r,G6r,zV,X6r,V6r,z6r,h3,s1e,W6r,Q6r,WV,H6r,U6r,J6r,u3,n1e,Y6r,K6r,QV,Z6r,eAr,oAr,p3,l1e,rAr,tAr,HV,aAr,sAr,nAr,_3,i1e,lAr,iAr,UV,dAr,cAr,mAr,b3,d1e,fAr,gAr,JV,hAr,uAr,pAr,v3,c1e,_Ar,bAr,YV,vAr,TAr,FAr,m1e,CAr,MAr,a8,Xke,bm,T3,f1e,s8,EAr,g1e,yAr,Vke,Nr,n8,wAr,vm,AAr,h1e,LAr,BAr,u1e,xAr,kAr,RAr,l8,SAr,p1e,PAr,$Ar,IAr,St,i8,jAr,_1e,DAr,NAr,Tm,qAr,b1e,OAr,GAr,v1e,XAr,VAr,zAr,T1e,WAr,QAr,d8,HAr,Po,c8,UAr,F1e,JAr,YAr,$s,KAr,C1e,ZAr,e0r,M1e,o0r,r0r,E1e,t0r,a0r,s0r,Re,F3,y1e,n0r,l0r,KV,i0r,d0r,c0r,C3,w1e,m0r,f0r,ZV,g0r,h0r,u0r,M3,A1e,p0r,_0r,ez,b0r,v0r,T0r,E3,L1e,F0r,C0r,oz,M0r,E0r,y0r,y3,B1e,w0r,A0r,rz,L0r,B0r,x0r,w3,x1e,k0r,R0r,tz,S0r,P0r,$0r,A3,k1e,I0r,j0r,az,D0r,N0r,q0r,L3,R1e,O0r,G0r,sz,X0r,V0r,z0r,S1e,W0r,Q0r,m8,zke,Fm,B3,P1e,f8,H0r,$1e,U0r,Wke,qr,g8,J0r,Cm,Y0r,I1e,K0r,Z0r,j1e,eLr,oLr,rLr,h8,tLr,D1e,aLr,sLr,nLr,Pt,u8,lLr,N1e,iLr,dLr,Mm,cLr,q1e,mLr,fLr,O1e,gLr,hLr,uLr,G1e,pLr,_Lr,p8,bLr,$o,_8,vLr,X1e,TLr,FLr,Is,CLr,V1e,MLr,ELr,z1e,yLr,wLr,W1e,ALr,LLr,BLr,Se,x3,Q1e,xLr,kLr,nz,RLr,SLr,PLr,k3,H1e,$Lr,ILr,lz,jLr,DLr,NLr,R3,U1e,qLr,OLr,iz,GLr,XLr,VLr,S3,J1e,zLr,WLr,dz,QLr,HLr,ULr,P3,Y1e,JLr,YLr,cz,KLr,ZLr,e8r,$3,K1e,o8r,r8r,mz,t8r,a8r,s8r,I3,Z1e,n8r,l8r,fz,i8r,d8r,c8r,j3,eFe,m8r,f8r,gz,g8r,h8r,u8r,oFe,p8r,_8r,b8,Qke,Em,D3,rFe,v8,b8r,tFe,v8r,Hke,Or,T8,T8r,ym,F8r,aFe,C8r,M8r,sFe,E8r,y8r,w8r,F8,A8r,nFe,L8r,B8r,x8r,$t,C8,k8r,lFe,R8r,S8r,wm,P8r,iFe,$8r,I8r,dFe,j8r,D8r,N8r,cFe,q8r,O8r,M8,G8r,Io,E8,X8r,mFe,V8r,z8r,js,W8r,fFe,Q8r,H8r,gFe,U8r,J8r,hFe,Y8r,K8r,Z8r,uFe,N3,pFe,e7r,o7r,hz,r7r,t7r,a7r,_Fe,s7r,n7r,y8,Uke,Am,q3,bFe,w8,l7r,vFe,i7r,Jke,Gr,A8,d7r,Lm,c7r,TFe,m7r,f7r,FFe,g7r,h7r,u7r,L8,p7r,CFe,_7r,b7r,v7r,It,B8,T7r,MFe,F7r,C7r,Bm,M7r,EFe,E7r,y7r,yFe,w7r,A7r,L7r,wFe,B7r,x7r,x8,k7r,jo,k8,R7r,AFe,S7r,P7r,Ds,$7r,LFe,I7r,j7r,BFe,D7r,N7r,xFe,q7r,O7r,G7r,R8,O3,kFe,X7r,V7r,uz,z7r,W7r,Q7r,G3,RFe,H7r,U7r,pz,J7r,Y7r,K7r,SFe,Z7r,e9r,S8,Yke,xm,X3,PFe,P8,o9r,$Fe,r9r,Kke,Xr,$8,t9r,km,a9r,IFe,s9r,n9r,jFe,l9r,i9r,d9r,I8,c9r,DFe,m9r,f9r,g9r,jt,j8,h9r,NFe,u9r,p9r,Rm,_9r,qFe,b9r,v9r,OFe,T9r,F9r,C9r,GFe,M9r,E9r,D8,y9r,Do,N8,w9r,XFe,A9r,L9r,Ns,B9r,VFe,x9r,k9r,zFe,R9r,S9r,WFe,P9r,$9r,I9r,QFe,V3,HFe,j9r,D9r,_z,N9r,q9r,O9r,UFe,G9r,X9r,q8,Zke;return me=new X({}),Na=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),U5=new X({}),J5=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Nm=new V9r({props:{warning:"&lcub;true}",$$slots:{default:[_Ct]},$$scope:{ctx:$i}}}),Y5=new X({}),K5=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L526"}}),oy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),ry=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),ty=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),ay=new X({}),sy=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L352"}}),iy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),cy=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),my=new X({}),fy=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),uy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Mh=new V9r({props:{$$slots:{default:[bCt]},$$scope:{ctx:$i}}}),py=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),_y=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),by=new X({}),vy=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L71"}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new V9r({props:{$$slots:{default:[vCt]},$$scope:{ctx:$i}}}),My=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Ey=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),yy=new X({}),wy=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L697"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),Sy=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L704"}}),$y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),qy=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L719"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Vy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Qy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L726"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),ew=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L733"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),lw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L742"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L776"}}),pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Fw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L783"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),Lw=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L769"}}),xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L751"}}),jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new X({}),Gw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L758"}}),Vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L792"}}),Yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new X({}),r6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L831"}}),a6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),n6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new X({}),d6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L838"}}),m6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),g6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new X({}),p6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L861"}}),b6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),T6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new X({}),M6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L845"}}),y6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),A6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new X({}),x6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L852"}}),R6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),P6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j6=new X({}),D6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L870"}}),q6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),G6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V6=new X({}),z6=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L877"}}),Q6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),H6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),U6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y6=new X({}),K6=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L824"}}),eA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),rA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),sA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L799"}}),lA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),dA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),fA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L806"}}),hA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),pA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),TA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L815"}}),CA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),EA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),BA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),kA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),PA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),IA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),DA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),OA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),XA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),zA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),HA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),JA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),KA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new X({}),r0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),a0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),n0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new X({}),d0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),m0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),g0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),p0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),b0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),T0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),M0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),A0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new X({}),x0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),R0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),P0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),j0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),N0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),O0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),V0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),W0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),H0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),Z0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),oL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),nL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),iL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),mL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),gL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new X({}),bL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),TL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),CL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),yL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),AL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),BL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),RL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),PL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),IL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DL=new X({}),NL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),OL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),GL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),XL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),WL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),HL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),JL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),o8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),r8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),t8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s8=new X({}),n8=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),i8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),d8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),c8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f8=new X({}),g8=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),u8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),p8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),_8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v8=new X({}),T8=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),C8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),M8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),E8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L314"}}),B8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),x8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),k8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P8=new X({}),$8=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L323"}}),j8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),D8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),N8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),ge=a("a"),io=a("span"),m(me.$$.fragment),Te=l(),Vo=a("span"),Ii=o("Auto Classes"),Pm=l(),ca=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),z5=o("from_pretrained()"),$m=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),Ni=o("Instantiating one of "),qs=a("a"),W5=o("AutoConfig"),Os=o(", "),Gs=a("a"),Q5=o("AutoModel"),qi=o(`, and
`),Xs=a("a"),H5=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Im=l(),m(Na.$$.fragment),mo=l(),he=a("p"),D7=o("will create a model that is an instance of "),Gi=a("a"),N7=o("BertModel"),q7=o("."),zo=l(),qa=a("p"),O7=o("There is one class of "),jm=a("code"),G7=o("AutoModel"),fPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KBe=l(),Xi=a("h2"),Dm=a("a"),cQ=a("span"),m(U5.$$.fragment),gPe=l(),mQ=a("span"),hPe=o("Extending the Auto Classes"),ZBe=l(),Vs=a("p"),uPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fQ=a("code"),pPe=o("NewModel"),_Pe=o(", make sure you have a "),gQ=a("code"),bPe=o("NewModelConfig"),vPe=o(` then you can add those to the auto
classes like this:`),exe=l(),m(J5.$$.fragment),oxe=l(),X7=a("p"),TPe=o("You will then be able to use the auto classes like you would usually do!"),rxe=l(),m(Nm.$$.fragment),txe=l(),Vi=a("h2"),qm=a("a"),hQ=a("span"),m(Y5.$$.fragment),FPe=l(),uQ=a("span"),CPe=o("AutoConfig"),axe=l(),Wo=a("div"),m(K5.$$.fragment),MPe=l(),Z5=a("p"),EPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V7=a("a"),yPe=o("from_pretrained()"),wPe=o(" class method."),APe=l(),ey=a("p"),LPe=o("This class cannot be instantiated directly using "),pQ=a("code"),BPe=o("__init__()"),xPe=o(" (throws an error)."),kPe=l(),fo=a("div"),m(oy.$$.fragment),RPe=l(),_Q=a("p"),SPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PPe=l(),zi=a("p"),$Pe=o("The configuration class to instantiate is selected based on the "),bQ=a("code"),IPe=o("model_type"),jPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vQ=a("code"),DPe=o("pretrained_model_name_or_path"),NPe=o(":"),qPe=l(),v=a("ul"),Om=a("li"),TQ=a("strong"),OPe=o("albert"),GPe=o(" \u2014 "),z7=a("a"),XPe=o("AlbertConfig"),VPe=o(" (ALBERT model)"),zPe=l(),Gm=a("li"),FQ=a("strong"),WPe=o("bart"),QPe=o(" \u2014 "),W7=a("a"),HPe=o("BartConfig"),UPe=o(" (BART model)"),JPe=l(),Xm=a("li"),CQ=a("strong"),YPe=o("beit"),KPe=o(" \u2014 "),Q7=a("a"),ZPe=o("BeitConfig"),e$e=o(" (BEiT model)"),o$e=l(),Vm=a("li"),MQ=a("strong"),r$e=o("bert"),t$e=o(" \u2014 "),H7=a("a"),a$e=o("BertConfig"),s$e=o(" (BERT model)"),n$e=l(),zm=a("li"),EQ=a("strong"),l$e=o("bert-generation"),i$e=o(" \u2014 "),U7=a("a"),d$e=o("BertGenerationConfig"),c$e=o(" (Bert Generation model)"),m$e=l(),Wm=a("li"),yQ=a("strong"),f$e=o("big_bird"),g$e=o(" \u2014 "),J7=a("a"),h$e=o("BigBirdConfig"),u$e=o(" (BigBird model)"),p$e=l(),Qm=a("li"),wQ=a("strong"),_$e=o("bigbird_pegasus"),b$e=o(" \u2014 "),Y7=a("a"),v$e=o("BigBirdPegasusConfig"),T$e=o(" (BigBirdPegasus model)"),F$e=l(),Hm=a("li"),AQ=a("strong"),C$e=o("blenderbot"),M$e=o(" \u2014 "),K7=a("a"),E$e=o("BlenderbotConfig"),y$e=o(" (Blenderbot model)"),w$e=l(),Um=a("li"),LQ=a("strong"),A$e=o("blenderbot-small"),L$e=o(" \u2014 "),Z7=a("a"),B$e=o("BlenderbotSmallConfig"),x$e=o(" (BlenderbotSmall model)"),k$e=l(),Jm=a("li"),BQ=a("strong"),R$e=o("camembert"),S$e=o(" \u2014 "),e9=a("a"),P$e=o("CamembertConfig"),$$e=o(" (CamemBERT model)"),I$e=l(),Ym=a("li"),xQ=a("strong"),j$e=o("canine"),D$e=o(" \u2014 "),o9=a("a"),N$e=o("CanineConfig"),q$e=o(" (Canine model)"),O$e=l(),Km=a("li"),kQ=a("strong"),G$e=o("clip"),X$e=o(" \u2014 "),r9=a("a"),V$e=o("CLIPConfig"),z$e=o(" (CLIP model)"),W$e=l(),Zm=a("li"),RQ=a("strong"),Q$e=o("convbert"),H$e=o(" \u2014 "),t9=a("a"),U$e=o("ConvBertConfig"),J$e=o(" (ConvBERT model)"),Y$e=l(),ef=a("li"),SQ=a("strong"),K$e=o("convnext"),Z$e=o(" \u2014 "),a9=a("a"),eIe=o("ConvNextConfig"),oIe=o(" (ConvNext model)"),rIe=l(),of=a("li"),PQ=a("strong"),tIe=o("ctrl"),aIe=o(" \u2014 "),s9=a("a"),sIe=o("CTRLConfig"),nIe=o(" (CTRL model)"),lIe=l(),rf=a("li"),$Q=a("strong"),iIe=o("data2vec-audio"),dIe=o(" \u2014 "),n9=a("a"),cIe=o("Data2VecAudioConfig"),mIe=o(" (Data2VecAudio model)"),fIe=l(),tf=a("li"),IQ=a("strong"),gIe=o("data2vec-text"),hIe=o(" \u2014 "),l9=a("a"),uIe=o("Data2VecTextConfig"),pIe=o(" (Data2VecText model)"),_Ie=l(),af=a("li"),jQ=a("strong"),bIe=o("deberta"),vIe=o(" \u2014 "),i9=a("a"),TIe=o("DebertaConfig"),FIe=o(" (DeBERTa model)"),CIe=l(),sf=a("li"),DQ=a("strong"),MIe=o("deberta-v2"),EIe=o(" \u2014 "),d9=a("a"),yIe=o("DebertaV2Config"),wIe=o(" (DeBERTa-v2 model)"),AIe=l(),nf=a("li"),NQ=a("strong"),LIe=o("deit"),BIe=o(" \u2014 "),c9=a("a"),xIe=o("DeiTConfig"),kIe=o(" (DeiT model)"),RIe=l(),lf=a("li"),qQ=a("strong"),SIe=o("detr"),PIe=o(" \u2014 "),m9=a("a"),$Ie=o("DetrConfig"),IIe=o(" (DETR model)"),jIe=l(),df=a("li"),OQ=a("strong"),DIe=o("distilbert"),NIe=o(" \u2014 "),f9=a("a"),qIe=o("DistilBertConfig"),OIe=o(" (DistilBERT model)"),GIe=l(),cf=a("li"),GQ=a("strong"),XIe=o("dpr"),VIe=o(" \u2014 "),g9=a("a"),zIe=o("DPRConfig"),WIe=o(" (DPR model)"),QIe=l(),mf=a("li"),XQ=a("strong"),HIe=o("electra"),UIe=o(" \u2014 "),h9=a("a"),JIe=o("ElectraConfig"),YIe=o(" (ELECTRA model)"),KIe=l(),ff=a("li"),VQ=a("strong"),ZIe=o("encoder-decoder"),eje=o(" \u2014 "),u9=a("a"),oje=o("EncoderDecoderConfig"),rje=o(" (Encoder decoder model)"),tje=l(),gf=a("li"),zQ=a("strong"),aje=o("flaubert"),sje=o(" \u2014 "),p9=a("a"),nje=o("FlaubertConfig"),lje=o(" (FlauBERT model)"),ije=l(),hf=a("li"),WQ=a("strong"),dje=o("fnet"),cje=o(" \u2014 "),_9=a("a"),mje=o("FNetConfig"),fje=o(" (FNet model)"),gje=l(),uf=a("li"),QQ=a("strong"),hje=o("fsmt"),uje=o(" \u2014 "),b9=a("a"),pje=o("FSMTConfig"),_je=o(" (FairSeq Machine-Translation model)"),bje=l(),pf=a("li"),HQ=a("strong"),vje=o("funnel"),Tje=o(" \u2014 "),v9=a("a"),Fje=o("FunnelConfig"),Cje=o(" (Funnel Transformer model)"),Mje=l(),_f=a("li"),UQ=a("strong"),Eje=o("gpt2"),yje=o(" \u2014 "),T9=a("a"),wje=o("GPT2Config"),Aje=o(" (OpenAI GPT-2 model)"),Lje=l(),bf=a("li"),JQ=a("strong"),Bje=o("gpt_neo"),xje=o(" \u2014 "),F9=a("a"),kje=o("GPTNeoConfig"),Rje=o(" (GPT Neo model)"),Sje=l(),vf=a("li"),YQ=a("strong"),Pje=o("gptj"),$je=o(" \u2014 "),C9=a("a"),Ije=o("GPTJConfig"),jje=o(" (GPT-J model)"),Dje=l(),Tf=a("li"),KQ=a("strong"),Nje=o("hubert"),qje=o(" \u2014 "),M9=a("a"),Oje=o("HubertConfig"),Gje=o(" (Hubert model)"),Xje=l(),Ff=a("li"),ZQ=a("strong"),Vje=o("ibert"),zje=o(" \u2014 "),E9=a("a"),Wje=o("IBertConfig"),Qje=o(" (I-BERT model)"),Hje=l(),Cf=a("li"),eH=a("strong"),Uje=o("imagegpt"),Jje=o(" \u2014 "),y9=a("a"),Yje=o("ImageGPTConfig"),Kje=o(" (ImageGPT model)"),Zje=l(),Mf=a("li"),oH=a("strong"),eDe=o("layoutlm"),oDe=o(" \u2014 "),w9=a("a"),rDe=o("LayoutLMConfig"),tDe=o(" (LayoutLM model)"),aDe=l(),Ef=a("li"),rH=a("strong"),sDe=o("layoutlmv2"),nDe=o(" \u2014 "),A9=a("a"),lDe=o("LayoutLMv2Config"),iDe=o(" (LayoutLMv2 model)"),dDe=l(),yf=a("li"),tH=a("strong"),cDe=o("led"),mDe=o(" \u2014 "),L9=a("a"),fDe=o("LEDConfig"),gDe=o(" (LED model)"),hDe=l(),wf=a("li"),aH=a("strong"),uDe=o("longformer"),pDe=o(" \u2014 "),B9=a("a"),_De=o("LongformerConfig"),bDe=o(" (Longformer model)"),vDe=l(),Af=a("li"),sH=a("strong"),TDe=o("luke"),FDe=o(" \u2014 "),x9=a("a"),CDe=o("LukeConfig"),MDe=o(" (LUKE model)"),EDe=l(),Lf=a("li"),nH=a("strong"),yDe=o("lxmert"),wDe=o(" \u2014 "),k9=a("a"),ADe=o("LxmertConfig"),LDe=o(" (LXMERT model)"),BDe=l(),Bf=a("li"),lH=a("strong"),xDe=o("m2m_100"),kDe=o(" \u2014 "),R9=a("a"),RDe=o("M2M100Config"),SDe=o(" (M2M100 model)"),PDe=l(),xf=a("li"),iH=a("strong"),$De=o("marian"),IDe=o(" \u2014 "),S9=a("a"),jDe=o("MarianConfig"),DDe=o(" (Marian model)"),NDe=l(),kf=a("li"),dH=a("strong"),qDe=o("maskformer"),ODe=o(" \u2014 "),P9=a("a"),GDe=o("MaskFormerConfig"),XDe=o(" (MaskFormer model)"),VDe=l(),Rf=a("li"),cH=a("strong"),zDe=o("mbart"),WDe=o(" \u2014 "),$9=a("a"),QDe=o("MBartConfig"),HDe=o(" (mBART model)"),UDe=l(),Sf=a("li"),mH=a("strong"),JDe=o("megatron-bert"),YDe=o(" \u2014 "),I9=a("a"),KDe=o("MegatronBertConfig"),ZDe=o(" (MegatronBert model)"),eNe=l(),Pf=a("li"),fH=a("strong"),oNe=o("mobilebert"),rNe=o(" \u2014 "),j9=a("a"),tNe=o("MobileBertConfig"),aNe=o(" (MobileBERT model)"),sNe=l(),$f=a("li"),gH=a("strong"),nNe=o("mpnet"),lNe=o(" \u2014 "),D9=a("a"),iNe=o("MPNetConfig"),dNe=o(" (MPNet model)"),cNe=l(),If=a("li"),hH=a("strong"),mNe=o("mt5"),fNe=o(" \u2014 "),N9=a("a"),gNe=o("MT5Config"),hNe=o(" (mT5 model)"),uNe=l(),jf=a("li"),uH=a("strong"),pNe=o("nystromformer"),_Ne=o(" \u2014 "),q9=a("a"),bNe=o("NystromformerConfig"),vNe=o(" (Nystromformer model)"),TNe=l(),Df=a("li"),pH=a("strong"),FNe=o("openai-gpt"),CNe=o(" \u2014 "),O9=a("a"),MNe=o("OpenAIGPTConfig"),ENe=o(" (OpenAI GPT model)"),yNe=l(),Nf=a("li"),_H=a("strong"),wNe=o("pegasus"),ANe=o(" \u2014 "),G9=a("a"),LNe=o("PegasusConfig"),BNe=o(" (Pegasus model)"),xNe=l(),qf=a("li"),bH=a("strong"),kNe=o("perceiver"),RNe=o(" \u2014 "),X9=a("a"),SNe=o("PerceiverConfig"),PNe=o(" (Perceiver model)"),$Ne=l(),Of=a("li"),vH=a("strong"),INe=o("plbart"),jNe=o(" \u2014 "),V9=a("a"),DNe=o("PLBartConfig"),NNe=o(" (PLBart model)"),qNe=l(),Gf=a("li"),TH=a("strong"),ONe=o("poolformer"),GNe=o(" \u2014 "),z9=a("a"),XNe=o("PoolFormerConfig"),VNe=o(" (PoolFormer model)"),zNe=l(),Xf=a("li"),FH=a("strong"),WNe=o("prophetnet"),QNe=o(" \u2014 "),W9=a("a"),HNe=o("ProphetNetConfig"),UNe=o(" (ProphetNet model)"),JNe=l(),Vf=a("li"),CH=a("strong"),YNe=o("qdqbert"),KNe=o(" \u2014 "),Q9=a("a"),ZNe=o("QDQBertConfig"),eqe=o(" (QDQBert model)"),oqe=l(),zf=a("li"),MH=a("strong"),rqe=o("rag"),tqe=o(" \u2014 "),H9=a("a"),aqe=o("RagConfig"),sqe=o(" (RAG model)"),nqe=l(),Wf=a("li"),EH=a("strong"),lqe=o("realm"),iqe=o(" \u2014 "),U9=a("a"),dqe=o("RealmConfig"),cqe=o(" (Realm model)"),mqe=l(),Qf=a("li"),yH=a("strong"),fqe=o("reformer"),gqe=o(" \u2014 "),J9=a("a"),hqe=o("ReformerConfig"),uqe=o(" (Reformer model)"),pqe=l(),Hf=a("li"),wH=a("strong"),_qe=o("rembert"),bqe=o(" \u2014 "),Y9=a("a"),vqe=o("RemBertConfig"),Tqe=o(" (RemBERT model)"),Fqe=l(),Uf=a("li"),AH=a("strong"),Cqe=o("retribert"),Mqe=o(" \u2014 "),K9=a("a"),Eqe=o("RetriBertConfig"),yqe=o(" (RetriBERT model)"),wqe=l(),Jf=a("li"),LH=a("strong"),Aqe=o("roberta"),Lqe=o(" \u2014 "),Z9=a("a"),Bqe=o("RobertaConfig"),xqe=o(" (RoBERTa model)"),kqe=l(),Yf=a("li"),BH=a("strong"),Rqe=o("roformer"),Sqe=o(" \u2014 "),eB=a("a"),Pqe=o("RoFormerConfig"),$qe=o(" (RoFormer model)"),Iqe=l(),Kf=a("li"),xH=a("strong"),jqe=o("segformer"),Dqe=o(" \u2014 "),oB=a("a"),Nqe=o("SegformerConfig"),qqe=o(" (SegFormer model)"),Oqe=l(),Zf=a("li"),kH=a("strong"),Gqe=o("sew"),Xqe=o(" \u2014 "),rB=a("a"),Vqe=o("SEWConfig"),zqe=o(" (SEW model)"),Wqe=l(),eg=a("li"),RH=a("strong"),Qqe=o("sew-d"),Hqe=o(" \u2014 "),tB=a("a"),Uqe=o("SEWDConfig"),Jqe=o(" (SEW-D model)"),Yqe=l(),og=a("li"),SH=a("strong"),Kqe=o("speech-encoder-decoder"),Zqe=o(" \u2014 "),aB=a("a"),eOe=o("SpeechEncoderDecoderConfig"),oOe=o(" (Speech Encoder decoder model)"),rOe=l(),rg=a("li"),PH=a("strong"),tOe=o("speech_to_text"),aOe=o(" \u2014 "),sB=a("a"),sOe=o("Speech2TextConfig"),nOe=o(" (Speech2Text model)"),lOe=l(),tg=a("li"),$H=a("strong"),iOe=o("speech_to_text_2"),dOe=o(" \u2014 "),nB=a("a"),cOe=o("Speech2Text2Config"),mOe=o(" (Speech2Text2 model)"),fOe=l(),ag=a("li"),IH=a("strong"),gOe=o("splinter"),hOe=o(" \u2014 "),lB=a("a"),uOe=o("SplinterConfig"),pOe=o(" (Splinter model)"),_Oe=l(),sg=a("li"),jH=a("strong"),bOe=o("squeezebert"),vOe=o(" \u2014 "),iB=a("a"),TOe=o("SqueezeBertConfig"),FOe=o(" (SqueezeBERT model)"),COe=l(),ng=a("li"),DH=a("strong"),MOe=o("swin"),EOe=o(" \u2014 "),dB=a("a"),yOe=o("SwinConfig"),wOe=o(" (Swin model)"),AOe=l(),lg=a("li"),NH=a("strong"),LOe=o("t5"),BOe=o(" \u2014 "),cB=a("a"),xOe=o("T5Config"),kOe=o(" (T5 model)"),ROe=l(),ig=a("li"),qH=a("strong"),SOe=o("tapas"),POe=o(" \u2014 "),mB=a("a"),$Oe=o("TapasConfig"),IOe=o(" (TAPAS model)"),jOe=l(),dg=a("li"),OH=a("strong"),DOe=o("transfo-xl"),NOe=o(" \u2014 "),fB=a("a"),qOe=o("TransfoXLConfig"),OOe=o(" (Transformer-XL model)"),GOe=l(),cg=a("li"),GH=a("strong"),XOe=o("trocr"),VOe=o(" \u2014 "),gB=a("a"),zOe=o("TrOCRConfig"),WOe=o(" (TrOCR model)"),QOe=l(),mg=a("li"),XH=a("strong"),HOe=o("unispeech"),UOe=o(" \u2014 "),hB=a("a"),JOe=o("UniSpeechConfig"),YOe=o(" (UniSpeech model)"),KOe=l(),fg=a("li"),VH=a("strong"),ZOe=o("unispeech-sat"),eGe=o(" \u2014 "),uB=a("a"),oGe=o("UniSpeechSatConfig"),rGe=o(" (UniSpeechSat model)"),tGe=l(),gg=a("li"),zH=a("strong"),aGe=o("vilt"),sGe=o(" \u2014 "),pB=a("a"),nGe=o("ViltConfig"),lGe=o(" (ViLT model)"),iGe=l(),hg=a("li"),WH=a("strong"),dGe=o("vision-encoder-decoder"),cGe=o(" \u2014 "),_B=a("a"),mGe=o("VisionEncoderDecoderConfig"),fGe=o(" (Vision Encoder decoder model)"),gGe=l(),ug=a("li"),QH=a("strong"),hGe=o("vision-text-dual-encoder"),uGe=o(" \u2014 "),bB=a("a"),pGe=o("VisionTextDualEncoderConfig"),_Ge=o(" (VisionTextDualEncoder model)"),bGe=l(),pg=a("li"),HH=a("strong"),vGe=o("visual_bert"),TGe=o(" \u2014 "),vB=a("a"),FGe=o("VisualBertConfig"),CGe=o(" (VisualBert model)"),MGe=l(),_g=a("li"),UH=a("strong"),EGe=o("vit"),yGe=o(" \u2014 "),TB=a("a"),wGe=o("ViTConfig"),AGe=o(" (ViT model)"),LGe=l(),bg=a("li"),JH=a("strong"),BGe=o("vit_mae"),xGe=o(" \u2014 "),FB=a("a"),kGe=o("ViTMAEConfig"),RGe=o(" (ViTMAE model)"),SGe=l(),vg=a("li"),YH=a("strong"),PGe=o("wav2vec2"),$Ge=o(" \u2014 "),CB=a("a"),IGe=o("Wav2Vec2Config"),jGe=o(" (Wav2Vec2 model)"),DGe=l(),Tg=a("li"),KH=a("strong"),NGe=o("wavlm"),qGe=o(" \u2014 "),MB=a("a"),OGe=o("WavLMConfig"),GGe=o(" (WavLM model)"),XGe=l(),Fg=a("li"),ZH=a("strong"),VGe=o("xglm"),zGe=o(" \u2014 "),EB=a("a"),WGe=o("XGLMConfig"),QGe=o(" (XGLM model)"),HGe=l(),Cg=a("li"),eU=a("strong"),UGe=o("xlm"),JGe=o(" \u2014 "),yB=a("a"),YGe=o("XLMConfig"),KGe=o(" (XLM model)"),ZGe=l(),Mg=a("li"),oU=a("strong"),eXe=o("xlm-prophetnet"),oXe=o(" \u2014 "),wB=a("a"),rXe=o("XLMProphetNetConfig"),tXe=o(" (XLMProphetNet model)"),aXe=l(),Eg=a("li"),rU=a("strong"),sXe=o("xlm-roberta"),nXe=o(" \u2014 "),AB=a("a"),lXe=o("XLMRobertaConfig"),iXe=o(" (XLM-RoBERTa model)"),dXe=l(),yg=a("li"),tU=a("strong"),cXe=o("xlm-roberta-xl"),mXe=o(" \u2014 "),LB=a("a"),fXe=o("XLMRobertaXLConfig"),gXe=o(" (XLM-RoBERTa-XL model)"),hXe=l(),wg=a("li"),aU=a("strong"),uXe=o("xlnet"),pXe=o(" \u2014 "),BB=a("a"),_Xe=o("XLNetConfig"),bXe=o(" (XLNet model)"),vXe=l(),Ag=a("li"),sU=a("strong"),TXe=o("yoso"),FXe=o(" \u2014 "),xB=a("a"),CXe=o("YosoConfig"),MXe=o(" (YOSO model)"),EXe=l(),nU=a("p"),yXe=o("Examples:"),wXe=l(),m(ry.$$.fragment),AXe=l(),Lg=a("div"),m(ty.$$.fragment),LXe=l(),lU=a("p"),BXe=o("Register a new configuration for this class."),sxe=l(),Wi=a("h2"),Bg=a("a"),iU=a("span"),m(ay.$$.fragment),xXe=l(),dU=a("span"),kXe=o("AutoTokenizer"),nxe=l(),Qo=a("div"),m(sy.$$.fragment),RXe=l(),ny=a("p"),SXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kB=a("a"),PXe=o("AutoTokenizer.from_pretrained()"),$Xe=o(" class method."),IXe=l(),ly=a("p"),jXe=o("This class cannot be instantiated directly using "),cU=a("code"),DXe=o("__init__()"),NXe=o(" (throws an error)."),qXe=l(),go=a("div"),m(iy.$$.fragment),OXe=l(),mU=a("p"),GXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),XXe=l(),Oa=a("p"),VXe=o("The tokenizer class to instantiate is selected based on the "),fU=a("code"),zXe=o("model_type"),WXe=o(` property of the config object (either
passed as an argument or loaded from `),gU=a("code"),QXe=o("pretrained_model_name_or_path"),HXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hU=a("code"),UXe=o("pretrained_model_name_or_path"),JXe=o(":"),YXe=l(),E=a("ul"),zs=a("li"),uU=a("strong"),KXe=o("albert"),ZXe=o(" \u2014 "),RB=a("a"),eVe=o("AlbertTokenizer"),oVe=o(" or "),SB=a("a"),rVe=o("AlbertTokenizerFast"),tVe=o(" (ALBERT model)"),aVe=l(),Ws=a("li"),pU=a("strong"),sVe=o("bart"),nVe=o(" \u2014 "),PB=a("a"),lVe=o("BartTokenizer"),iVe=o(" or "),$B=a("a"),dVe=o("BartTokenizerFast"),cVe=o(" (BART model)"),mVe=l(),Qs=a("li"),_U=a("strong"),fVe=o("barthez"),gVe=o(" \u2014 "),IB=a("a"),hVe=o("BarthezTokenizer"),uVe=o(" or "),jB=a("a"),pVe=o("BarthezTokenizerFast"),_Ve=o(" (BARThez model)"),bVe=l(),xg=a("li"),bU=a("strong"),vVe=o("bartpho"),TVe=o(" \u2014 "),DB=a("a"),FVe=o("BartphoTokenizer"),CVe=o(" (BARTpho model)"),MVe=l(),Hs=a("li"),vU=a("strong"),EVe=o("bert"),yVe=o(" \u2014 "),NB=a("a"),wVe=o("BertTokenizer"),AVe=o(" or "),qB=a("a"),LVe=o("BertTokenizerFast"),BVe=o(" (BERT model)"),xVe=l(),kg=a("li"),TU=a("strong"),kVe=o("bert-generation"),RVe=o(" \u2014 "),OB=a("a"),SVe=o("BertGenerationTokenizer"),PVe=o(" (Bert Generation model)"),$Ve=l(),Rg=a("li"),FU=a("strong"),IVe=o("bert-japanese"),jVe=o(" \u2014 "),GB=a("a"),DVe=o("BertJapaneseTokenizer"),NVe=o(" (BertJapanese model)"),qVe=l(),Sg=a("li"),CU=a("strong"),OVe=o("bertweet"),GVe=o(" \u2014 "),XB=a("a"),XVe=o("BertweetTokenizer"),VVe=o(" (Bertweet model)"),zVe=l(),Us=a("li"),MU=a("strong"),WVe=o("big_bird"),QVe=o(" \u2014 "),VB=a("a"),HVe=o("BigBirdTokenizer"),UVe=o(" or "),zB=a("a"),JVe=o("BigBirdTokenizerFast"),YVe=o(" (BigBird model)"),KVe=l(),Js=a("li"),EU=a("strong"),ZVe=o("bigbird_pegasus"),eze=o(" \u2014 "),WB=a("a"),oze=o("PegasusTokenizer"),rze=o(" or "),QB=a("a"),tze=o("PegasusTokenizerFast"),aze=o(" (BigBirdPegasus model)"),sze=l(),Ys=a("li"),yU=a("strong"),nze=o("blenderbot"),lze=o(" \u2014 "),HB=a("a"),ize=o("BlenderbotTokenizer"),dze=o(" or "),UB=a("a"),cze=o("BlenderbotTokenizerFast"),mze=o(" (Blenderbot model)"),fze=l(),Pg=a("li"),wU=a("strong"),gze=o("blenderbot-small"),hze=o(" \u2014 "),JB=a("a"),uze=o("BlenderbotSmallTokenizer"),pze=o(" (BlenderbotSmall model)"),_ze=l(),$g=a("li"),AU=a("strong"),bze=o("byt5"),vze=o(" \u2014 "),YB=a("a"),Tze=o("ByT5Tokenizer"),Fze=o(" (ByT5 model)"),Cze=l(),Ks=a("li"),LU=a("strong"),Mze=o("camembert"),Eze=o(" \u2014 "),KB=a("a"),yze=o("CamembertTokenizer"),wze=o(" or "),ZB=a("a"),Aze=o("CamembertTokenizerFast"),Lze=o(" (CamemBERT model)"),Bze=l(),Ig=a("li"),BU=a("strong"),xze=o("canine"),kze=o(" \u2014 "),ex=a("a"),Rze=o("CanineTokenizer"),Sze=o(" (Canine model)"),Pze=l(),Zs=a("li"),xU=a("strong"),$ze=o("clip"),Ize=o(" \u2014 "),ox=a("a"),jze=o("CLIPTokenizer"),Dze=o(" or "),rx=a("a"),Nze=o("CLIPTokenizerFast"),qze=o(" (CLIP model)"),Oze=l(),en=a("li"),kU=a("strong"),Gze=o("convbert"),Xze=o(" \u2014 "),tx=a("a"),Vze=o("ConvBertTokenizer"),zze=o(" or "),ax=a("a"),Wze=o("ConvBertTokenizerFast"),Qze=o(" (ConvBERT model)"),Hze=l(),on=a("li"),RU=a("strong"),Uze=o("cpm"),Jze=o(" \u2014 "),sx=a("a"),Yze=o("CpmTokenizer"),Kze=o(" or "),SU=a("code"),Zze=o("CpmTokenizerFast"),eWe=o(" (CPM model)"),oWe=l(),jg=a("li"),PU=a("strong"),rWe=o("ctrl"),tWe=o(" \u2014 "),nx=a("a"),aWe=o("CTRLTokenizer"),sWe=o(" (CTRL model)"),nWe=l(),rn=a("li"),$U=a("strong"),lWe=o("deberta"),iWe=o(" \u2014 "),lx=a("a"),dWe=o("DebertaTokenizer"),cWe=o(" or "),ix=a("a"),mWe=o("DebertaTokenizerFast"),fWe=o(" (DeBERTa model)"),gWe=l(),Dg=a("li"),IU=a("strong"),hWe=o("deberta-v2"),uWe=o(" \u2014 "),dx=a("a"),pWe=o("DebertaV2Tokenizer"),_We=o(" (DeBERTa-v2 model)"),bWe=l(),tn=a("li"),jU=a("strong"),vWe=o("distilbert"),TWe=o(" \u2014 "),cx=a("a"),FWe=o("DistilBertTokenizer"),CWe=o(" or "),mx=a("a"),MWe=o("DistilBertTokenizerFast"),EWe=o(" (DistilBERT model)"),yWe=l(),an=a("li"),DU=a("strong"),wWe=o("dpr"),AWe=o(" \u2014 "),fx=a("a"),LWe=o("DPRQuestionEncoderTokenizer"),BWe=o(" or "),gx=a("a"),xWe=o("DPRQuestionEncoderTokenizerFast"),kWe=o(" (DPR model)"),RWe=l(),sn=a("li"),NU=a("strong"),SWe=o("electra"),PWe=o(" \u2014 "),hx=a("a"),$We=o("ElectraTokenizer"),IWe=o(" or "),ux=a("a"),jWe=o("ElectraTokenizerFast"),DWe=o(" (ELECTRA model)"),NWe=l(),Ng=a("li"),qU=a("strong"),qWe=o("flaubert"),OWe=o(" \u2014 "),px=a("a"),GWe=o("FlaubertTokenizer"),XWe=o(" (FlauBERT model)"),VWe=l(),nn=a("li"),OU=a("strong"),zWe=o("fnet"),WWe=o(" \u2014 "),_x=a("a"),QWe=o("FNetTokenizer"),HWe=o(" or "),bx=a("a"),UWe=o("FNetTokenizerFast"),JWe=o(" (FNet model)"),YWe=l(),qg=a("li"),GU=a("strong"),KWe=o("fsmt"),ZWe=o(" \u2014 "),vx=a("a"),eQe=o("FSMTTokenizer"),oQe=o(" (FairSeq Machine-Translation model)"),rQe=l(),ln=a("li"),XU=a("strong"),tQe=o("funnel"),aQe=o(" \u2014 "),Tx=a("a"),sQe=o("FunnelTokenizer"),nQe=o(" or "),Fx=a("a"),lQe=o("FunnelTokenizerFast"),iQe=o(" (Funnel Transformer model)"),dQe=l(),dn=a("li"),VU=a("strong"),cQe=o("gpt2"),mQe=o(" \u2014 "),Cx=a("a"),fQe=o("GPT2Tokenizer"),gQe=o(" or "),Mx=a("a"),hQe=o("GPT2TokenizerFast"),uQe=o(" (OpenAI GPT-2 model)"),pQe=l(),cn=a("li"),zU=a("strong"),_Qe=o("gpt_neo"),bQe=o(" \u2014 "),Ex=a("a"),vQe=o("GPT2Tokenizer"),TQe=o(" or "),yx=a("a"),FQe=o("GPT2TokenizerFast"),CQe=o(" (GPT Neo model)"),MQe=l(),mn=a("li"),WU=a("strong"),EQe=o("herbert"),yQe=o(" \u2014 "),wx=a("a"),wQe=o("HerbertTokenizer"),AQe=o(" or "),Ax=a("a"),LQe=o("HerbertTokenizerFast"),BQe=o(" (HerBERT model)"),xQe=l(),Og=a("li"),QU=a("strong"),kQe=o("hubert"),RQe=o(" \u2014 "),Lx=a("a"),SQe=o("Wav2Vec2CTCTokenizer"),PQe=o(" (Hubert model)"),$Qe=l(),fn=a("li"),HU=a("strong"),IQe=o("ibert"),jQe=o(" \u2014 "),Bx=a("a"),DQe=o("RobertaTokenizer"),NQe=o(" or "),xx=a("a"),qQe=o("RobertaTokenizerFast"),OQe=o(" (I-BERT model)"),GQe=l(),gn=a("li"),UU=a("strong"),XQe=o("layoutlm"),VQe=o(" \u2014 "),kx=a("a"),zQe=o("LayoutLMTokenizer"),WQe=o(" or "),Rx=a("a"),QQe=o("LayoutLMTokenizerFast"),HQe=o(" (LayoutLM model)"),UQe=l(),hn=a("li"),JU=a("strong"),JQe=o("layoutlmv2"),YQe=o(" \u2014 "),Sx=a("a"),KQe=o("LayoutLMv2Tokenizer"),ZQe=o(" or "),Px=a("a"),eHe=o("LayoutLMv2TokenizerFast"),oHe=o(" (LayoutLMv2 model)"),rHe=l(),un=a("li"),YU=a("strong"),tHe=o("layoutxlm"),aHe=o(" \u2014 "),$x=a("a"),sHe=o("LayoutXLMTokenizer"),nHe=o(" or "),Ix=a("a"),lHe=o("LayoutXLMTokenizerFast"),iHe=o(" (LayoutXLM model)"),dHe=l(),pn=a("li"),KU=a("strong"),cHe=o("led"),mHe=o(" \u2014 "),jx=a("a"),fHe=o("LEDTokenizer"),gHe=o(" or "),Dx=a("a"),hHe=o("LEDTokenizerFast"),uHe=o(" (LED model)"),pHe=l(),_n=a("li"),ZU=a("strong"),_He=o("longformer"),bHe=o(" \u2014 "),Nx=a("a"),vHe=o("LongformerTokenizer"),THe=o(" or "),qx=a("a"),FHe=o("LongformerTokenizerFast"),CHe=o(" (Longformer model)"),MHe=l(),Gg=a("li"),eJ=a("strong"),EHe=o("luke"),yHe=o(" \u2014 "),Ox=a("a"),wHe=o("LukeTokenizer"),AHe=o(" (LUKE model)"),LHe=l(),bn=a("li"),oJ=a("strong"),BHe=o("lxmert"),xHe=o(" \u2014 "),Gx=a("a"),kHe=o("LxmertTokenizer"),RHe=o(" or "),Xx=a("a"),SHe=o("LxmertTokenizerFast"),PHe=o(" (LXMERT model)"),$He=l(),Xg=a("li"),rJ=a("strong"),IHe=o("m2m_100"),jHe=o(" \u2014 "),Vx=a("a"),DHe=o("M2M100Tokenizer"),NHe=o(" (M2M100 model)"),qHe=l(),Vg=a("li"),tJ=a("strong"),OHe=o("marian"),GHe=o(" \u2014 "),zx=a("a"),XHe=o("MarianTokenizer"),VHe=o(" (Marian model)"),zHe=l(),vn=a("li"),aJ=a("strong"),WHe=o("mbart"),QHe=o(" \u2014 "),Wx=a("a"),HHe=o("MBartTokenizer"),UHe=o(" or "),Qx=a("a"),JHe=o("MBartTokenizerFast"),YHe=o(" (mBART model)"),KHe=l(),Tn=a("li"),sJ=a("strong"),ZHe=o("mbart50"),eUe=o(" \u2014 "),Hx=a("a"),oUe=o("MBart50Tokenizer"),rUe=o(" or "),Ux=a("a"),tUe=o("MBart50TokenizerFast"),aUe=o(" (mBART-50 model)"),sUe=l(),zg=a("li"),nJ=a("strong"),nUe=o("mluke"),lUe=o(" \u2014 "),Jx=a("a"),iUe=o("MLukeTokenizer"),dUe=o(" (mLUKE model)"),cUe=l(),Fn=a("li"),lJ=a("strong"),mUe=o("mobilebert"),fUe=o(" \u2014 "),Yx=a("a"),gUe=o("MobileBertTokenizer"),hUe=o(" or "),Kx=a("a"),uUe=o("MobileBertTokenizerFast"),pUe=o(" (MobileBERT model)"),_Ue=l(),Cn=a("li"),iJ=a("strong"),bUe=o("mpnet"),vUe=o(" \u2014 "),Zx=a("a"),TUe=o("MPNetTokenizer"),FUe=o(" or "),ek=a("a"),CUe=o("MPNetTokenizerFast"),MUe=o(" (MPNet model)"),EUe=l(),Mn=a("li"),dJ=a("strong"),yUe=o("mt5"),wUe=o(" \u2014 "),ok=a("a"),AUe=o("MT5Tokenizer"),LUe=o(" or "),rk=a("a"),BUe=o("MT5TokenizerFast"),xUe=o(" (mT5 model)"),kUe=l(),En=a("li"),cJ=a("strong"),RUe=o("openai-gpt"),SUe=o(" \u2014 "),tk=a("a"),PUe=o("OpenAIGPTTokenizer"),$Ue=o(" or "),ak=a("a"),IUe=o("OpenAIGPTTokenizerFast"),jUe=o(" (OpenAI GPT model)"),DUe=l(),yn=a("li"),mJ=a("strong"),NUe=o("pegasus"),qUe=o(" \u2014 "),sk=a("a"),OUe=o("PegasusTokenizer"),GUe=o(" or "),nk=a("a"),XUe=o("PegasusTokenizerFast"),VUe=o(" (Pegasus model)"),zUe=l(),Wg=a("li"),fJ=a("strong"),WUe=o("perceiver"),QUe=o(" \u2014 "),lk=a("a"),HUe=o("PerceiverTokenizer"),UUe=o(" (Perceiver model)"),JUe=l(),Qg=a("li"),gJ=a("strong"),YUe=o("phobert"),KUe=o(" \u2014 "),ik=a("a"),ZUe=o("PhobertTokenizer"),eJe=o(" (PhoBERT model)"),oJe=l(),Hg=a("li"),hJ=a("strong"),rJe=o("plbart"),tJe=o(" \u2014 "),dk=a("a"),aJe=o("PLBartTokenizer"),sJe=o(" (PLBart model)"),nJe=l(),Ug=a("li"),uJ=a("strong"),lJe=o("prophetnet"),iJe=o(" \u2014 "),ck=a("a"),dJe=o("ProphetNetTokenizer"),cJe=o(" (ProphetNet model)"),mJe=l(),wn=a("li"),pJ=a("strong"),fJe=o("qdqbert"),gJe=o(" \u2014 "),mk=a("a"),hJe=o("BertTokenizer"),uJe=o(" or "),fk=a("a"),pJe=o("BertTokenizerFast"),_Je=o(" (QDQBert model)"),bJe=l(),Jg=a("li"),_J=a("strong"),vJe=o("rag"),TJe=o(" \u2014 "),gk=a("a"),FJe=o("RagTokenizer"),CJe=o(" (RAG model)"),MJe=l(),An=a("li"),bJ=a("strong"),EJe=o("realm"),yJe=o(" \u2014 "),hk=a("a"),wJe=o("RealmTokenizer"),AJe=o(" or "),uk=a("a"),LJe=o("RealmTokenizerFast"),BJe=o(" (Realm model)"),xJe=l(),Ln=a("li"),vJ=a("strong"),kJe=o("reformer"),RJe=o(" \u2014 "),pk=a("a"),SJe=o("ReformerTokenizer"),PJe=o(" or "),_k=a("a"),$Je=o("ReformerTokenizerFast"),IJe=o(" (Reformer model)"),jJe=l(),Bn=a("li"),TJ=a("strong"),DJe=o("rembert"),NJe=o(" \u2014 "),bk=a("a"),qJe=o("RemBertTokenizer"),OJe=o(" or "),vk=a("a"),GJe=o("RemBertTokenizerFast"),XJe=o(" (RemBERT model)"),VJe=l(),xn=a("li"),FJ=a("strong"),zJe=o("retribert"),WJe=o(" \u2014 "),Tk=a("a"),QJe=o("RetriBertTokenizer"),HJe=o(" or "),Fk=a("a"),UJe=o("RetriBertTokenizerFast"),JJe=o(" (RetriBERT model)"),YJe=l(),kn=a("li"),CJ=a("strong"),KJe=o("roberta"),ZJe=o(" \u2014 "),Ck=a("a"),eYe=o("RobertaTokenizer"),oYe=o(" or "),Mk=a("a"),rYe=o("RobertaTokenizerFast"),tYe=o(" (RoBERTa model)"),aYe=l(),Rn=a("li"),MJ=a("strong"),sYe=o("roformer"),nYe=o(" \u2014 "),Ek=a("a"),lYe=o("RoFormerTokenizer"),iYe=o(" or "),yk=a("a"),dYe=o("RoFormerTokenizerFast"),cYe=o(" (RoFormer model)"),mYe=l(),Yg=a("li"),EJ=a("strong"),fYe=o("speech_to_text"),gYe=o(" \u2014 "),wk=a("a"),hYe=o("Speech2TextTokenizer"),uYe=o(" (Speech2Text model)"),pYe=l(),Kg=a("li"),yJ=a("strong"),_Ye=o("speech_to_text_2"),bYe=o(" \u2014 "),Ak=a("a"),vYe=o("Speech2Text2Tokenizer"),TYe=o(" (Speech2Text2 model)"),FYe=l(),Sn=a("li"),wJ=a("strong"),CYe=o("splinter"),MYe=o(" \u2014 "),Lk=a("a"),EYe=o("SplinterTokenizer"),yYe=o(" or "),Bk=a("a"),wYe=o("SplinterTokenizerFast"),AYe=o(" (Splinter model)"),LYe=l(),Pn=a("li"),AJ=a("strong"),BYe=o("squeezebert"),xYe=o(" \u2014 "),xk=a("a"),kYe=o("SqueezeBertTokenizer"),RYe=o(" or "),kk=a("a"),SYe=o("SqueezeBertTokenizerFast"),PYe=o(" (SqueezeBERT model)"),$Ye=l(),$n=a("li"),LJ=a("strong"),IYe=o("t5"),jYe=o(" \u2014 "),Rk=a("a"),DYe=o("T5Tokenizer"),NYe=o(" or "),Sk=a("a"),qYe=o("T5TokenizerFast"),OYe=o(" (T5 model)"),GYe=l(),Zg=a("li"),BJ=a("strong"),XYe=o("tapas"),VYe=o(" \u2014 "),Pk=a("a"),zYe=o("TapasTokenizer"),WYe=o(" (TAPAS model)"),QYe=l(),eh=a("li"),xJ=a("strong"),HYe=o("transfo-xl"),UYe=o(" \u2014 "),$k=a("a"),JYe=o("TransfoXLTokenizer"),YYe=o(" (Transformer-XL model)"),KYe=l(),oh=a("li"),kJ=a("strong"),ZYe=o("wav2vec2"),eKe=o(" \u2014 "),Ik=a("a"),oKe=o("Wav2Vec2CTCTokenizer"),rKe=o(" (Wav2Vec2 model)"),tKe=l(),rh=a("li"),RJ=a("strong"),aKe=o("wav2vec2_phoneme"),sKe=o(" \u2014 "),jk=a("a"),nKe=o("Wav2Vec2PhonemeCTCTokenizer"),lKe=o(" (Wav2Vec2Phoneme model)"),iKe=l(),In=a("li"),SJ=a("strong"),dKe=o("xglm"),cKe=o(" \u2014 "),Dk=a("a"),mKe=o("XGLMTokenizer"),fKe=o(" or "),Nk=a("a"),gKe=o("XGLMTokenizerFast"),hKe=o(" (XGLM model)"),uKe=l(),th=a("li"),PJ=a("strong"),pKe=o("xlm"),_Ke=o(" \u2014 "),qk=a("a"),bKe=o("XLMTokenizer"),vKe=o(" (XLM model)"),TKe=l(),ah=a("li"),$J=a("strong"),FKe=o("xlm-prophetnet"),CKe=o(" \u2014 "),Ok=a("a"),MKe=o("XLMProphetNetTokenizer"),EKe=o(" (XLMProphetNet model)"),yKe=l(),jn=a("li"),IJ=a("strong"),wKe=o("xlm-roberta"),AKe=o(" \u2014 "),Gk=a("a"),LKe=o("XLMRobertaTokenizer"),BKe=o(" or "),Xk=a("a"),xKe=o("XLMRobertaTokenizerFast"),kKe=o(" (XLM-RoBERTa model)"),RKe=l(),Dn=a("li"),jJ=a("strong"),SKe=o("xlnet"),PKe=o(" \u2014 "),Vk=a("a"),$Ke=o("XLNetTokenizer"),IKe=o(" or "),zk=a("a"),jKe=o("XLNetTokenizerFast"),DKe=o(" (XLNet model)"),NKe=l(),DJ=a("p"),qKe=o("Examples:"),OKe=l(),m(dy.$$.fragment),GKe=l(),sh=a("div"),m(cy.$$.fragment),XKe=l(),NJ=a("p"),VKe=o("Register a new tokenizer in this mapping."),lxe=l(),Qi=a("h2"),nh=a("a"),qJ=a("span"),m(my.$$.fragment),zKe=l(),OJ=a("span"),WKe=o("AutoFeatureExtractor"),ixe=l(),Ho=a("div"),m(fy.$$.fragment),QKe=l(),gy=a("p"),HKe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Wk=a("a"),UKe=o("AutoFeatureExtractor.from_pretrained()"),JKe=o(" class method."),YKe=l(),hy=a("p"),KKe=o("This class cannot be instantiated directly using "),GJ=a("code"),ZKe=o("__init__()"),eZe=o(" (throws an error)."),oZe=l(),$e=a("div"),m(uy.$$.fragment),rZe=l(),XJ=a("p"),tZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aZe=l(),Ga=a("p"),sZe=o("The feature extractor class to instantiate is selected based on the "),VJ=a("code"),nZe=o("model_type"),lZe=o(` property of the config object
(either passed as an argument or loaded from `),zJ=a("code"),iZe=o("pretrained_model_name_or_path"),dZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),WJ=a("code"),cZe=o("pretrained_model_name_or_path"),mZe=o(":"),fZe=l(),ae=a("ul"),lh=a("li"),QJ=a("strong"),gZe=o("beit"),hZe=o(" \u2014 "),Qk=a("a"),uZe=o("BeitFeatureExtractor"),pZe=o(" (BEiT model)"),_Ze=l(),ih=a("li"),HJ=a("strong"),bZe=o("clip"),vZe=o(" \u2014 "),Hk=a("a"),TZe=o("CLIPFeatureExtractor"),FZe=o(" (CLIP model)"),CZe=l(),dh=a("li"),UJ=a("strong"),MZe=o("convnext"),EZe=o(" \u2014 "),Uk=a("a"),yZe=o("ConvNextFeatureExtractor"),wZe=o(" (ConvNext model)"),AZe=l(),ch=a("li"),JJ=a("strong"),LZe=o("deit"),BZe=o(" \u2014 "),Jk=a("a"),xZe=o("DeiTFeatureExtractor"),kZe=o(" (DeiT model)"),RZe=l(),mh=a("li"),YJ=a("strong"),SZe=o("detr"),PZe=o(" \u2014 "),Yk=a("a"),$Ze=o("DetrFeatureExtractor"),IZe=o(" (DETR model)"),jZe=l(),fh=a("li"),KJ=a("strong"),DZe=o("hubert"),NZe=o(" \u2014 "),Kk=a("a"),qZe=o("Wav2Vec2FeatureExtractor"),OZe=o(" (Hubert model)"),GZe=l(),gh=a("li"),ZJ=a("strong"),XZe=o("layoutlmv2"),VZe=o(" \u2014 "),Zk=a("a"),zZe=o("LayoutLMv2FeatureExtractor"),WZe=o(" (LayoutLMv2 model)"),QZe=l(),hh=a("li"),eY=a("strong"),HZe=o("maskformer"),UZe=o(" \u2014 "),eR=a("a"),JZe=o("MaskFormerFeatureExtractor"),YZe=o(" (MaskFormer model)"),KZe=l(),uh=a("li"),oY=a("strong"),ZZe=o("perceiver"),eeo=o(" \u2014 "),oR=a("a"),oeo=o("PerceiverFeatureExtractor"),reo=o(" (Perceiver model)"),teo=l(),ph=a("li"),rY=a("strong"),aeo=o("poolformer"),seo=o(" \u2014 "),rR=a("a"),neo=o("PoolFormerFeatureExtractor"),leo=o(" (PoolFormer model)"),ieo=l(),_h=a("li"),tY=a("strong"),deo=o("segformer"),ceo=o(" \u2014 "),tR=a("a"),meo=o("SegformerFeatureExtractor"),feo=o(" (SegFormer model)"),geo=l(),bh=a("li"),aY=a("strong"),heo=o("speech_to_text"),ueo=o(" \u2014 "),aR=a("a"),peo=o("Speech2TextFeatureExtractor"),_eo=o(" (Speech2Text model)"),beo=l(),vh=a("li"),sY=a("strong"),veo=o("swin"),Teo=o(" \u2014 "),sR=a("a"),Feo=o("ViTFeatureExtractor"),Ceo=o(" (Swin model)"),Meo=l(),Th=a("li"),nY=a("strong"),Eeo=o("vit"),yeo=o(" \u2014 "),nR=a("a"),weo=o("ViTFeatureExtractor"),Aeo=o(" (ViT model)"),Leo=l(),Fh=a("li"),lY=a("strong"),Beo=o("vit_mae"),xeo=o(" \u2014 "),lR=a("a"),keo=o("ViTFeatureExtractor"),Reo=o(" (ViTMAE model)"),Seo=l(),Ch=a("li"),iY=a("strong"),Peo=o("wav2vec2"),$eo=o(" \u2014 "),iR=a("a"),Ieo=o("Wav2Vec2FeatureExtractor"),jeo=o(" (Wav2Vec2 model)"),Deo=l(),m(Mh.$$.fragment),Neo=l(),dY=a("p"),qeo=o("Examples:"),Oeo=l(),m(py.$$.fragment),Geo=l(),Eh=a("div"),m(_y.$$.fragment),Xeo=l(),cY=a("p"),Veo=o("Register a new feature extractor for this class."),dxe=l(),Hi=a("h2"),yh=a("a"),mY=a("span"),m(by.$$.fragment),zeo=l(),fY=a("span"),Weo=o("AutoProcessor"),cxe=l(),Uo=a("div"),m(vy.$$.fragment),Qeo=l(),Ty=a("p"),Heo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dR=a("a"),Ueo=o("AutoProcessor.from_pretrained()"),Jeo=o(" class method."),Yeo=l(),Fy=a("p"),Keo=o("This class cannot be instantiated directly using "),gY=a("code"),Zeo=o("__init__()"),eoo=o(" (throws an error)."),ooo=l(),Ie=a("div"),m(Cy.$$.fragment),roo=l(),hY=a("p"),too=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aoo=l(),Ui=a("p"),soo=o("The processor class to instantiate is selected based on the "),uY=a("code"),noo=o("model_type"),loo=o(` property of the config object (either
passed as an argument or loaded from `),pY=a("code"),ioo=o("pretrained_model_name_or_path"),doo=o(" if possible):"),coo=l(),Be=a("ul"),wh=a("li"),_Y=a("strong"),moo=o("clip"),foo=o(" \u2014 "),cR=a("a"),goo=o("CLIPProcessor"),hoo=o(" (CLIP model)"),uoo=l(),Ah=a("li"),bY=a("strong"),poo=o("layoutlmv2"),_oo=o(" \u2014 "),mR=a("a"),boo=o("LayoutLMv2Processor"),voo=o(" (LayoutLMv2 model)"),Too=l(),Lh=a("li"),vY=a("strong"),Foo=o("layoutxlm"),Coo=o(" \u2014 "),fR=a("a"),Moo=o("LayoutXLMProcessor"),Eoo=o(" (LayoutXLM model)"),yoo=l(),Bh=a("li"),TY=a("strong"),woo=o("speech_to_text"),Aoo=o(" \u2014 "),gR=a("a"),Loo=o("Speech2TextProcessor"),Boo=o(" (Speech2Text model)"),xoo=l(),xh=a("li"),FY=a("strong"),koo=o("speech_to_text_2"),Roo=o(" \u2014 "),hR=a("a"),Soo=o("Speech2Text2Processor"),Poo=o(" (Speech2Text2 model)"),$oo=l(),kh=a("li"),CY=a("strong"),Ioo=o("trocr"),joo=o(" \u2014 "),uR=a("a"),Doo=o("TrOCRProcessor"),Noo=o(" (TrOCR model)"),qoo=l(),Rh=a("li"),MY=a("strong"),Ooo=o("vision-text-dual-encoder"),Goo=o(" \u2014 "),pR=a("a"),Xoo=o("VisionTextDualEncoderProcessor"),Voo=o(" (VisionTextDualEncoder model)"),zoo=l(),Sh=a("li"),EY=a("strong"),Woo=o("wav2vec2"),Qoo=o(" \u2014 "),_R=a("a"),Hoo=o("Wav2Vec2Processor"),Uoo=o(" (Wav2Vec2 model)"),Joo=l(),m(Ph.$$.fragment),Yoo=l(),yY=a("p"),Koo=o("Examples:"),Zoo=l(),m(My.$$.fragment),ero=l(),$h=a("div"),m(Ey.$$.fragment),oro=l(),wY=a("p"),rro=o("Register a new processor for this class."),mxe=l(),Ji=a("h2"),Ih=a("a"),AY=a("span"),m(yy.$$.fragment),tro=l(),LY=a("span"),aro=o("AutoModel"),fxe=l(),Jo=a("div"),m(wy.$$.fragment),sro=l(),Yi=a("p"),nro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BY=a("code"),lro=o("from_pretrained()"),iro=o("class method or the "),xY=a("code"),dro=o("from_config()"),cro=o(`class
method.`),mro=l(),Ay=a("p"),fro=o("This class cannot be instantiated directly using "),kY=a("code"),gro=o("__init__()"),hro=o(" (throws an error)."),uro=l(),Vr=a("div"),m(Ly.$$.fragment),pro=l(),RY=a("p"),_ro=o("Instantiates one of the base model classes of the library from a configuration."),bro=l(),Ki=a("p"),vro=o(`Note:
Loading a model from its configuration file does `),SY=a("strong"),Tro=o("not"),Fro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("code"),Cro=o("from_pretrained()"),Mro=o("to load the model weights."),Ero=l(),$Y=a("p"),yro=o("Examples:"),wro=l(),m(By.$$.fragment),Aro=l(),je=a("div"),m(xy.$$.fragment),Lro=l(),IY=a("p"),Bro=o("Instantiate one of the base model classes of the library from a pretrained model."),xro=l(),Xa=a("p"),kro=o("The model class to instantiate is selected based on the "),jY=a("code"),Rro=o("model_type"),Sro=o(` property of the config object (either
passed as an argument or loaded from `),DY=a("code"),Pro=o("pretrained_model_name_or_path"),$ro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NY=a("code"),Iro=o("pretrained_model_name_or_path"),jro=o(":"),Dro=l(),F=a("ul"),jh=a("li"),qY=a("strong"),Nro=o("albert"),qro=o(" \u2014 "),bR=a("a"),Oro=o("AlbertModel"),Gro=o(" (ALBERT model)"),Xro=l(),Dh=a("li"),OY=a("strong"),Vro=o("bart"),zro=o(" \u2014 "),vR=a("a"),Wro=o("BartModel"),Qro=o(" (BART model)"),Hro=l(),Nh=a("li"),GY=a("strong"),Uro=o("beit"),Jro=o(" \u2014 "),TR=a("a"),Yro=o("BeitModel"),Kro=o(" (BEiT model)"),Zro=l(),qh=a("li"),XY=a("strong"),eto=o("bert"),oto=o(" \u2014 "),FR=a("a"),rto=o("BertModel"),tto=o(" (BERT model)"),ato=l(),Oh=a("li"),VY=a("strong"),sto=o("bert-generation"),nto=o(" \u2014 "),CR=a("a"),lto=o("BertGenerationEncoder"),ito=o(" (Bert Generation model)"),dto=l(),Gh=a("li"),zY=a("strong"),cto=o("big_bird"),mto=o(" \u2014 "),MR=a("a"),fto=o("BigBirdModel"),gto=o(" (BigBird model)"),hto=l(),Xh=a("li"),WY=a("strong"),uto=o("bigbird_pegasus"),pto=o(" \u2014 "),ER=a("a"),_to=o("BigBirdPegasusModel"),bto=o(" (BigBirdPegasus model)"),vto=l(),Vh=a("li"),QY=a("strong"),Tto=o("blenderbot"),Fto=o(" \u2014 "),yR=a("a"),Cto=o("BlenderbotModel"),Mto=o(" (Blenderbot model)"),Eto=l(),zh=a("li"),HY=a("strong"),yto=o("blenderbot-small"),wto=o(" \u2014 "),wR=a("a"),Ato=o("BlenderbotSmallModel"),Lto=o(" (BlenderbotSmall model)"),Bto=l(),Wh=a("li"),UY=a("strong"),xto=o("camembert"),kto=o(" \u2014 "),AR=a("a"),Rto=o("CamembertModel"),Sto=o(" (CamemBERT model)"),Pto=l(),Qh=a("li"),JY=a("strong"),$to=o("canine"),Ito=o(" \u2014 "),LR=a("a"),jto=o("CanineModel"),Dto=o(" (Canine model)"),Nto=l(),Hh=a("li"),YY=a("strong"),qto=o("clip"),Oto=o(" \u2014 "),BR=a("a"),Gto=o("CLIPModel"),Xto=o(" (CLIP model)"),Vto=l(),Uh=a("li"),KY=a("strong"),zto=o("convbert"),Wto=o(" \u2014 "),xR=a("a"),Qto=o("ConvBertModel"),Hto=o(" (ConvBERT model)"),Uto=l(),Jh=a("li"),ZY=a("strong"),Jto=o("convnext"),Yto=o(" \u2014 "),kR=a("a"),Kto=o("ConvNextModel"),Zto=o(" (ConvNext model)"),eao=l(),Yh=a("li"),eK=a("strong"),oao=o("ctrl"),rao=o(" \u2014 "),RR=a("a"),tao=o("CTRLModel"),aao=o(" (CTRL model)"),sao=l(),Kh=a("li"),oK=a("strong"),nao=o("data2vec-audio"),lao=o(" \u2014 "),SR=a("a"),iao=o("Data2VecAudioModel"),dao=o(" (Data2VecAudio model)"),cao=l(),Zh=a("li"),rK=a("strong"),mao=o("data2vec-text"),fao=o(" \u2014 "),PR=a("a"),gao=o("Data2VecTextModel"),hao=o(" (Data2VecText model)"),uao=l(),eu=a("li"),tK=a("strong"),pao=o("deberta"),_ao=o(" \u2014 "),$R=a("a"),bao=o("DebertaModel"),vao=o(" (DeBERTa model)"),Tao=l(),ou=a("li"),aK=a("strong"),Fao=o("deberta-v2"),Cao=o(" \u2014 "),IR=a("a"),Mao=o("DebertaV2Model"),Eao=o(" (DeBERTa-v2 model)"),yao=l(),ru=a("li"),sK=a("strong"),wao=o("deit"),Aao=o(" \u2014 "),jR=a("a"),Lao=o("DeiTModel"),Bao=o(" (DeiT model)"),xao=l(),tu=a("li"),nK=a("strong"),kao=o("detr"),Rao=o(" \u2014 "),DR=a("a"),Sao=o("DetrModel"),Pao=o(" (DETR model)"),$ao=l(),au=a("li"),lK=a("strong"),Iao=o("distilbert"),jao=o(" \u2014 "),NR=a("a"),Dao=o("DistilBertModel"),Nao=o(" (DistilBERT model)"),qao=l(),su=a("li"),iK=a("strong"),Oao=o("dpr"),Gao=o(" \u2014 "),qR=a("a"),Xao=o("DPRQuestionEncoder"),Vao=o(" (DPR model)"),zao=l(),nu=a("li"),dK=a("strong"),Wao=o("electra"),Qao=o(" \u2014 "),OR=a("a"),Hao=o("ElectraModel"),Uao=o(" (ELECTRA model)"),Jao=l(),lu=a("li"),cK=a("strong"),Yao=o("flaubert"),Kao=o(" \u2014 "),GR=a("a"),Zao=o("FlaubertModel"),eso=o(" (FlauBERT model)"),oso=l(),iu=a("li"),mK=a("strong"),rso=o("fnet"),tso=o(" \u2014 "),XR=a("a"),aso=o("FNetModel"),sso=o(" (FNet model)"),nso=l(),du=a("li"),fK=a("strong"),lso=o("fsmt"),iso=o(" \u2014 "),VR=a("a"),dso=o("FSMTModel"),cso=o(" (FairSeq Machine-Translation model)"),mso=l(),Nn=a("li"),gK=a("strong"),fso=o("funnel"),gso=o(" \u2014 "),zR=a("a"),hso=o("FunnelModel"),uso=o(" or "),WR=a("a"),pso=o("FunnelBaseModel"),_so=o(" (Funnel Transformer model)"),bso=l(),cu=a("li"),hK=a("strong"),vso=o("gpt2"),Tso=o(" \u2014 "),QR=a("a"),Fso=o("GPT2Model"),Cso=o(" (OpenAI GPT-2 model)"),Mso=l(),mu=a("li"),uK=a("strong"),Eso=o("gpt_neo"),yso=o(" \u2014 "),HR=a("a"),wso=o("GPTNeoModel"),Aso=o(" (GPT Neo model)"),Lso=l(),fu=a("li"),pK=a("strong"),Bso=o("gptj"),xso=o(" \u2014 "),UR=a("a"),kso=o("GPTJModel"),Rso=o(" (GPT-J model)"),Sso=l(),gu=a("li"),_K=a("strong"),Pso=o("hubert"),$so=o(" \u2014 "),JR=a("a"),Iso=o("HubertModel"),jso=o(" (Hubert model)"),Dso=l(),hu=a("li"),bK=a("strong"),Nso=o("ibert"),qso=o(" \u2014 "),YR=a("a"),Oso=o("IBertModel"),Gso=o(" (I-BERT model)"),Xso=l(),uu=a("li"),vK=a("strong"),Vso=o("imagegpt"),zso=o(" \u2014 "),KR=a("a"),Wso=o("ImageGPTModel"),Qso=o(" (ImageGPT model)"),Hso=l(),pu=a("li"),TK=a("strong"),Uso=o("layoutlm"),Jso=o(" \u2014 "),ZR=a("a"),Yso=o("LayoutLMModel"),Kso=o(" (LayoutLM model)"),Zso=l(),_u=a("li"),FK=a("strong"),eno=o("layoutlmv2"),ono=o(" \u2014 "),eS=a("a"),rno=o("LayoutLMv2Model"),tno=o(" (LayoutLMv2 model)"),ano=l(),bu=a("li"),CK=a("strong"),sno=o("led"),nno=o(" \u2014 "),oS=a("a"),lno=o("LEDModel"),ino=o(" (LED model)"),dno=l(),vu=a("li"),MK=a("strong"),cno=o("longformer"),mno=o(" \u2014 "),rS=a("a"),fno=o("LongformerModel"),gno=o(" (Longformer model)"),hno=l(),Tu=a("li"),EK=a("strong"),uno=o("luke"),pno=o(" \u2014 "),tS=a("a"),_no=o("LukeModel"),bno=o(" (LUKE model)"),vno=l(),Fu=a("li"),yK=a("strong"),Tno=o("lxmert"),Fno=o(" \u2014 "),aS=a("a"),Cno=o("LxmertModel"),Mno=o(" (LXMERT model)"),Eno=l(),Cu=a("li"),wK=a("strong"),yno=o("m2m_100"),wno=o(" \u2014 "),sS=a("a"),Ano=o("M2M100Model"),Lno=o(" (M2M100 model)"),Bno=l(),Mu=a("li"),AK=a("strong"),xno=o("marian"),kno=o(" \u2014 "),nS=a("a"),Rno=o("MarianModel"),Sno=o(" (Marian model)"),Pno=l(),Eu=a("li"),LK=a("strong"),$no=o("maskformer"),Ino=o(" \u2014 "),lS=a("a"),jno=o("MaskFormerModel"),Dno=o(" (MaskFormer model)"),Nno=l(),yu=a("li"),BK=a("strong"),qno=o("mbart"),Ono=o(" \u2014 "),iS=a("a"),Gno=o("MBartModel"),Xno=o(" (mBART model)"),Vno=l(),wu=a("li"),xK=a("strong"),zno=o("megatron-bert"),Wno=o(" \u2014 "),dS=a("a"),Qno=o("MegatronBertModel"),Hno=o(" (MegatronBert model)"),Uno=l(),Au=a("li"),kK=a("strong"),Jno=o("mobilebert"),Yno=o(" \u2014 "),cS=a("a"),Kno=o("MobileBertModel"),Zno=o(" (MobileBERT model)"),elo=l(),Lu=a("li"),RK=a("strong"),olo=o("mpnet"),rlo=o(" \u2014 "),mS=a("a"),tlo=o("MPNetModel"),alo=o(" (MPNet model)"),slo=l(),Bu=a("li"),SK=a("strong"),nlo=o("mt5"),llo=o(" \u2014 "),fS=a("a"),ilo=o("MT5Model"),dlo=o(" (mT5 model)"),clo=l(),xu=a("li"),PK=a("strong"),mlo=o("nystromformer"),flo=o(" \u2014 "),gS=a("a"),glo=o("NystromformerModel"),hlo=o(" (Nystromformer model)"),ulo=l(),ku=a("li"),$K=a("strong"),plo=o("openai-gpt"),_lo=o(" \u2014 "),hS=a("a"),blo=o("OpenAIGPTModel"),vlo=o(" (OpenAI GPT model)"),Tlo=l(),Ru=a("li"),IK=a("strong"),Flo=o("pegasus"),Clo=o(" \u2014 "),uS=a("a"),Mlo=o("PegasusModel"),Elo=o(" (Pegasus model)"),ylo=l(),Su=a("li"),jK=a("strong"),wlo=o("perceiver"),Alo=o(" \u2014 "),pS=a("a"),Llo=o("PerceiverModel"),Blo=o(" (Perceiver model)"),xlo=l(),Pu=a("li"),DK=a("strong"),klo=o("plbart"),Rlo=o(" \u2014 "),_S=a("a"),Slo=o("PLBartModel"),Plo=o(" (PLBart model)"),$lo=l(),$u=a("li"),NK=a("strong"),Ilo=o("poolformer"),jlo=o(" \u2014 "),bS=a("a"),Dlo=o("PoolFormerModel"),Nlo=o(" (PoolFormer model)"),qlo=l(),Iu=a("li"),qK=a("strong"),Olo=o("prophetnet"),Glo=o(" \u2014 "),vS=a("a"),Xlo=o("ProphetNetModel"),Vlo=o(" (ProphetNet model)"),zlo=l(),ju=a("li"),OK=a("strong"),Wlo=o("qdqbert"),Qlo=o(" \u2014 "),TS=a("a"),Hlo=o("QDQBertModel"),Ulo=o(" (QDQBert model)"),Jlo=l(),Du=a("li"),GK=a("strong"),Ylo=o("reformer"),Klo=o(" \u2014 "),FS=a("a"),Zlo=o("ReformerModel"),eio=o(" (Reformer model)"),oio=l(),Nu=a("li"),XK=a("strong"),rio=o("rembert"),tio=o(" \u2014 "),CS=a("a"),aio=o("RemBertModel"),sio=o(" (RemBERT model)"),nio=l(),qu=a("li"),VK=a("strong"),lio=o("retribert"),iio=o(" \u2014 "),MS=a("a"),dio=o("RetriBertModel"),cio=o(" (RetriBERT model)"),mio=l(),Ou=a("li"),zK=a("strong"),fio=o("roberta"),gio=o(" \u2014 "),ES=a("a"),hio=o("RobertaModel"),uio=o(" (RoBERTa model)"),pio=l(),Gu=a("li"),WK=a("strong"),_io=o("roformer"),bio=o(" \u2014 "),yS=a("a"),vio=o("RoFormerModel"),Tio=o(" (RoFormer model)"),Fio=l(),Xu=a("li"),QK=a("strong"),Cio=o("segformer"),Mio=o(" \u2014 "),wS=a("a"),Eio=o("SegformerModel"),yio=o(" (SegFormer model)"),wio=l(),Vu=a("li"),HK=a("strong"),Aio=o("sew"),Lio=o(" \u2014 "),AS=a("a"),Bio=o("SEWModel"),xio=o(" (SEW model)"),kio=l(),zu=a("li"),UK=a("strong"),Rio=o("sew-d"),Sio=o(" \u2014 "),LS=a("a"),Pio=o("SEWDModel"),$io=o(" (SEW-D model)"),Iio=l(),Wu=a("li"),JK=a("strong"),jio=o("speech_to_text"),Dio=o(" \u2014 "),BS=a("a"),Nio=o("Speech2TextModel"),qio=o(" (Speech2Text model)"),Oio=l(),Qu=a("li"),YK=a("strong"),Gio=o("splinter"),Xio=o(" \u2014 "),xS=a("a"),Vio=o("SplinterModel"),zio=o(" (Splinter model)"),Wio=l(),Hu=a("li"),KK=a("strong"),Qio=o("squeezebert"),Hio=o(" \u2014 "),kS=a("a"),Uio=o("SqueezeBertModel"),Jio=o(" (SqueezeBERT model)"),Yio=l(),Uu=a("li"),ZK=a("strong"),Kio=o("swin"),Zio=o(" \u2014 "),RS=a("a"),edo=o("SwinModel"),odo=o(" (Swin model)"),rdo=l(),Ju=a("li"),eZ=a("strong"),tdo=o("t5"),ado=o(" \u2014 "),SS=a("a"),sdo=o("T5Model"),ndo=o(" (T5 model)"),ldo=l(),Yu=a("li"),oZ=a("strong"),ido=o("tapas"),ddo=o(" \u2014 "),PS=a("a"),cdo=o("TapasModel"),mdo=o(" (TAPAS model)"),fdo=l(),Ku=a("li"),rZ=a("strong"),gdo=o("transfo-xl"),hdo=o(" \u2014 "),$S=a("a"),udo=o("TransfoXLModel"),pdo=o(" (Transformer-XL model)"),_do=l(),Zu=a("li"),tZ=a("strong"),bdo=o("unispeech"),vdo=o(" \u2014 "),IS=a("a"),Tdo=o("UniSpeechModel"),Fdo=o(" (UniSpeech model)"),Cdo=l(),ep=a("li"),aZ=a("strong"),Mdo=o("unispeech-sat"),Edo=o(" \u2014 "),jS=a("a"),ydo=o("UniSpeechSatModel"),wdo=o(" (UniSpeechSat model)"),Ado=l(),op=a("li"),sZ=a("strong"),Ldo=o("vilt"),Bdo=o(" \u2014 "),DS=a("a"),xdo=o("ViltModel"),kdo=o(" (ViLT model)"),Rdo=l(),rp=a("li"),nZ=a("strong"),Sdo=o("vision-text-dual-encoder"),Pdo=o(" \u2014 "),NS=a("a"),$do=o("VisionTextDualEncoderModel"),Ido=o(" (VisionTextDualEncoder model)"),jdo=l(),tp=a("li"),lZ=a("strong"),Ddo=o("visual_bert"),Ndo=o(" \u2014 "),qS=a("a"),qdo=o("VisualBertModel"),Odo=o(" (VisualBert model)"),Gdo=l(),ap=a("li"),iZ=a("strong"),Xdo=o("vit"),Vdo=o(" \u2014 "),OS=a("a"),zdo=o("ViTModel"),Wdo=o(" (ViT model)"),Qdo=l(),sp=a("li"),dZ=a("strong"),Hdo=o("vit_mae"),Udo=o(" \u2014 "),GS=a("a"),Jdo=o("ViTMAEModel"),Ydo=o(" (ViTMAE model)"),Kdo=l(),np=a("li"),cZ=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),XS=a("a"),oco=o("Wav2Vec2Model"),rco=o(" (Wav2Vec2 model)"),tco=l(),lp=a("li"),mZ=a("strong"),aco=o("wavlm"),sco=o(" \u2014 "),VS=a("a"),nco=o("WavLMModel"),lco=o(" (WavLM model)"),ico=l(),ip=a("li"),fZ=a("strong"),dco=o("xglm"),cco=o(" \u2014 "),zS=a("a"),mco=o("XGLMModel"),fco=o(" (XGLM model)"),gco=l(),dp=a("li"),gZ=a("strong"),hco=o("xlm"),uco=o(" \u2014 "),WS=a("a"),pco=o("XLMModel"),_co=o(" (XLM model)"),bco=l(),cp=a("li"),hZ=a("strong"),vco=o("xlm-prophetnet"),Tco=o(" \u2014 "),QS=a("a"),Fco=o("XLMProphetNetModel"),Cco=o(" (XLMProphetNet model)"),Mco=l(),mp=a("li"),uZ=a("strong"),Eco=o("xlm-roberta"),yco=o(" \u2014 "),HS=a("a"),wco=o("XLMRobertaModel"),Aco=o(" (XLM-RoBERTa model)"),Lco=l(),fp=a("li"),pZ=a("strong"),Bco=o("xlm-roberta-xl"),xco=o(" \u2014 "),US=a("a"),kco=o("XLMRobertaXLModel"),Rco=o(" (XLM-RoBERTa-XL model)"),Sco=l(),gp=a("li"),_Z=a("strong"),Pco=o("xlnet"),$co=o(" \u2014 "),JS=a("a"),Ico=o("XLNetModel"),jco=o(" (XLNet model)"),Dco=l(),hp=a("li"),bZ=a("strong"),Nco=o("yoso"),qco=o(" \u2014 "),YS=a("a"),Oco=o("YosoModel"),Gco=o(" (YOSO model)"),Xco=l(),up=a("p"),Vco=o("The model is set in evaluation mode by default using "),vZ=a("code"),zco=o("model.eval()"),Wco=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TZ=a("code"),Qco=o("model.train()"),Hco=l(),FZ=a("p"),Uco=o("Examples:"),Jco=l(),m(ky.$$.fragment),gxe=l(),Zi=a("h2"),pp=a("a"),CZ=a("span"),m(Ry.$$.fragment),Yco=l(),MZ=a("span"),Kco=o("AutoModelForPreTraining"),hxe=l(),Yo=a("div"),m(Sy.$$.fragment),Zco=l(),ed=a("p"),emo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EZ=a("code"),omo=o("from_pretrained()"),rmo=o("class method or the "),yZ=a("code"),tmo=o("from_config()"),amo=o(`class
method.`),smo=l(),Py=a("p"),nmo=o("This class cannot be instantiated directly using "),wZ=a("code"),lmo=o("__init__()"),imo=o(" (throws an error)."),dmo=l(),zr=a("div"),m($y.$$.fragment),cmo=l(),AZ=a("p"),mmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fmo=l(),od=a("p"),gmo=o(`Note:
Loading a model from its configuration file does `),LZ=a("strong"),hmo=o("not"),umo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("code"),pmo=o("from_pretrained()"),_mo=o("to load the model weights."),bmo=l(),xZ=a("p"),vmo=o("Examples:"),Tmo=l(),m(Iy.$$.fragment),Fmo=l(),De=a("div"),m(jy.$$.fragment),Cmo=l(),kZ=a("p"),Mmo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Emo=l(),Va=a("p"),ymo=o("The model class to instantiate is selected based on the "),RZ=a("code"),wmo=o("model_type"),Amo=o(` property of the config object (either
passed as an argument or loaded from `),SZ=a("code"),Lmo=o("pretrained_model_name_or_path"),Bmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PZ=a("code"),xmo=o("pretrained_model_name_or_path"),kmo=o(":"),Rmo=l(),k=a("ul"),_p=a("li"),$Z=a("strong"),Smo=o("albert"),Pmo=o(" \u2014 "),KS=a("a"),$mo=o("AlbertForPreTraining"),Imo=o(" (ALBERT model)"),jmo=l(),bp=a("li"),IZ=a("strong"),Dmo=o("bart"),Nmo=o(" \u2014 "),ZS=a("a"),qmo=o("BartForConditionalGeneration"),Omo=o(" (BART model)"),Gmo=l(),vp=a("li"),jZ=a("strong"),Xmo=o("bert"),Vmo=o(" \u2014 "),eP=a("a"),zmo=o("BertForPreTraining"),Wmo=o(" (BERT model)"),Qmo=l(),Tp=a("li"),DZ=a("strong"),Hmo=o("big_bird"),Umo=o(" \u2014 "),oP=a("a"),Jmo=o("BigBirdForPreTraining"),Ymo=o(" (BigBird model)"),Kmo=l(),Fp=a("li"),NZ=a("strong"),Zmo=o("camembert"),efo=o(" \u2014 "),rP=a("a"),ofo=o("CamembertForMaskedLM"),rfo=o(" (CamemBERT model)"),tfo=l(),Cp=a("li"),qZ=a("strong"),afo=o("ctrl"),sfo=o(" \u2014 "),tP=a("a"),nfo=o("CTRLLMHeadModel"),lfo=o(" (CTRL model)"),ifo=l(),Mp=a("li"),OZ=a("strong"),dfo=o("data2vec-text"),cfo=o(" \u2014 "),aP=a("a"),mfo=o("Data2VecTextForMaskedLM"),ffo=o(" (Data2VecText model)"),gfo=l(),Ep=a("li"),GZ=a("strong"),hfo=o("deberta"),ufo=o(" \u2014 "),sP=a("a"),pfo=o("DebertaForMaskedLM"),_fo=o(" (DeBERTa model)"),bfo=l(),yp=a("li"),XZ=a("strong"),vfo=o("deberta-v2"),Tfo=o(" \u2014 "),nP=a("a"),Ffo=o("DebertaV2ForMaskedLM"),Cfo=o(" (DeBERTa-v2 model)"),Mfo=l(),wp=a("li"),VZ=a("strong"),Efo=o("distilbert"),yfo=o(" \u2014 "),lP=a("a"),wfo=o("DistilBertForMaskedLM"),Afo=o(" (DistilBERT model)"),Lfo=l(),Ap=a("li"),zZ=a("strong"),Bfo=o("electra"),xfo=o(" \u2014 "),iP=a("a"),kfo=o("ElectraForPreTraining"),Rfo=o(" (ELECTRA model)"),Sfo=l(),Lp=a("li"),WZ=a("strong"),Pfo=o("flaubert"),$fo=o(" \u2014 "),dP=a("a"),Ifo=o("FlaubertWithLMHeadModel"),jfo=o(" (FlauBERT model)"),Dfo=l(),Bp=a("li"),QZ=a("strong"),Nfo=o("fnet"),qfo=o(" \u2014 "),cP=a("a"),Ofo=o("FNetForPreTraining"),Gfo=o(" (FNet model)"),Xfo=l(),xp=a("li"),HZ=a("strong"),Vfo=o("fsmt"),zfo=o(" \u2014 "),mP=a("a"),Wfo=o("FSMTForConditionalGeneration"),Qfo=o(" (FairSeq Machine-Translation model)"),Hfo=l(),kp=a("li"),UZ=a("strong"),Ufo=o("funnel"),Jfo=o(" \u2014 "),fP=a("a"),Yfo=o("FunnelForPreTraining"),Kfo=o(" (Funnel Transformer model)"),Zfo=l(),Rp=a("li"),JZ=a("strong"),ego=o("gpt2"),ogo=o(" \u2014 "),gP=a("a"),rgo=o("GPT2LMHeadModel"),tgo=o(" (OpenAI GPT-2 model)"),ago=l(),Sp=a("li"),YZ=a("strong"),sgo=o("ibert"),ngo=o(" \u2014 "),hP=a("a"),lgo=o("IBertForMaskedLM"),igo=o(" (I-BERT model)"),dgo=l(),Pp=a("li"),KZ=a("strong"),cgo=o("layoutlm"),mgo=o(" \u2014 "),uP=a("a"),fgo=o("LayoutLMForMaskedLM"),ggo=o(" (LayoutLM model)"),hgo=l(),$p=a("li"),ZZ=a("strong"),ugo=o("longformer"),pgo=o(" \u2014 "),pP=a("a"),_go=o("LongformerForMaskedLM"),bgo=o(" (Longformer model)"),vgo=l(),Ip=a("li"),eee=a("strong"),Tgo=o("lxmert"),Fgo=o(" \u2014 "),_P=a("a"),Cgo=o("LxmertForPreTraining"),Mgo=o(" (LXMERT model)"),Ego=l(),jp=a("li"),oee=a("strong"),ygo=o("megatron-bert"),wgo=o(" \u2014 "),bP=a("a"),Ago=o("MegatronBertForPreTraining"),Lgo=o(" (MegatronBert model)"),Bgo=l(),Dp=a("li"),ree=a("strong"),xgo=o("mobilebert"),kgo=o(" \u2014 "),vP=a("a"),Rgo=o("MobileBertForPreTraining"),Sgo=o(" (MobileBERT model)"),Pgo=l(),Np=a("li"),tee=a("strong"),$go=o("mpnet"),Igo=o(" \u2014 "),TP=a("a"),jgo=o("MPNetForMaskedLM"),Dgo=o(" (MPNet model)"),Ngo=l(),qp=a("li"),aee=a("strong"),qgo=o("openai-gpt"),Ogo=o(" \u2014 "),FP=a("a"),Ggo=o("OpenAIGPTLMHeadModel"),Xgo=o(" (OpenAI GPT model)"),Vgo=l(),Op=a("li"),see=a("strong"),zgo=o("retribert"),Wgo=o(" \u2014 "),CP=a("a"),Qgo=o("RetriBertModel"),Hgo=o(" (RetriBERT model)"),Ugo=l(),Gp=a("li"),nee=a("strong"),Jgo=o("roberta"),Ygo=o(" \u2014 "),MP=a("a"),Kgo=o("RobertaForMaskedLM"),Zgo=o(" (RoBERTa model)"),eho=l(),Xp=a("li"),lee=a("strong"),oho=o("squeezebert"),rho=o(" \u2014 "),EP=a("a"),tho=o("SqueezeBertForMaskedLM"),aho=o(" (SqueezeBERT model)"),sho=l(),Vp=a("li"),iee=a("strong"),nho=o("t5"),lho=o(" \u2014 "),yP=a("a"),iho=o("T5ForConditionalGeneration"),dho=o(" (T5 model)"),cho=l(),zp=a("li"),dee=a("strong"),mho=o("tapas"),fho=o(" \u2014 "),wP=a("a"),gho=o("TapasForMaskedLM"),hho=o(" (TAPAS model)"),uho=l(),Wp=a("li"),cee=a("strong"),pho=o("transfo-xl"),_ho=o(" \u2014 "),AP=a("a"),bho=o("TransfoXLLMHeadModel"),vho=o(" (Transformer-XL model)"),Tho=l(),Qp=a("li"),mee=a("strong"),Fho=o("unispeech"),Cho=o(" \u2014 "),LP=a("a"),Mho=o("UniSpeechForPreTraining"),Eho=o(" (UniSpeech model)"),yho=l(),Hp=a("li"),fee=a("strong"),who=o("unispeech-sat"),Aho=o(" \u2014 "),BP=a("a"),Lho=o("UniSpeechSatForPreTraining"),Bho=o(" (UniSpeechSat model)"),xho=l(),Up=a("li"),gee=a("strong"),kho=o("visual_bert"),Rho=o(" \u2014 "),xP=a("a"),Sho=o("VisualBertForPreTraining"),Pho=o(" (VisualBert model)"),$ho=l(),Jp=a("li"),hee=a("strong"),Iho=o("vit_mae"),jho=o(" \u2014 "),kP=a("a"),Dho=o("ViTMAEForPreTraining"),Nho=o(" (ViTMAE model)"),qho=l(),Yp=a("li"),uee=a("strong"),Oho=o("wav2vec2"),Gho=o(" \u2014 "),RP=a("a"),Xho=o("Wav2Vec2ForPreTraining"),Vho=o(" (Wav2Vec2 model)"),zho=l(),Kp=a("li"),pee=a("strong"),Who=o("xlm"),Qho=o(" \u2014 "),SP=a("a"),Hho=o("XLMWithLMHeadModel"),Uho=o(" (XLM model)"),Jho=l(),Zp=a("li"),_ee=a("strong"),Yho=o("xlm-roberta"),Kho=o(" \u2014 "),PP=a("a"),Zho=o("XLMRobertaForMaskedLM"),euo=o(" (XLM-RoBERTa model)"),ouo=l(),e_=a("li"),bee=a("strong"),ruo=o("xlm-roberta-xl"),tuo=o(" \u2014 "),$P=a("a"),auo=o("XLMRobertaXLForMaskedLM"),suo=o(" (XLM-RoBERTa-XL model)"),nuo=l(),o_=a("li"),vee=a("strong"),luo=o("xlnet"),iuo=o(" \u2014 "),IP=a("a"),duo=o("XLNetLMHeadModel"),cuo=o(" (XLNet model)"),muo=l(),r_=a("p"),fuo=o("The model is set in evaluation mode by default using "),Tee=a("code"),guo=o("model.eval()"),huo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=a("code"),uuo=o("model.train()"),puo=l(),Cee=a("p"),_uo=o("Examples:"),buo=l(),m(Dy.$$.fragment),uxe=l(),rd=a("h2"),t_=a("a"),Mee=a("span"),m(Ny.$$.fragment),vuo=l(),Eee=a("span"),Tuo=o("AutoModelForCausalLM"),pxe=l(),Ko=a("div"),m(qy.$$.fragment),Fuo=l(),td=a("p"),Cuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yee=a("code"),Muo=o("from_pretrained()"),Euo=o("class method or the "),wee=a("code"),yuo=o("from_config()"),wuo=o(`class
method.`),Auo=l(),Oy=a("p"),Luo=o("This class cannot be instantiated directly using "),Aee=a("code"),Buo=o("__init__()"),xuo=o(" (throws an error)."),kuo=l(),Wr=a("div"),m(Gy.$$.fragment),Ruo=l(),Lee=a("p"),Suo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Puo=l(),ad=a("p"),$uo=o(`Note:
Loading a model from its configuration file does `),Bee=a("strong"),Iuo=o("not"),juo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("code"),Duo=o("from_pretrained()"),Nuo=o("to load the model weights."),quo=l(),kee=a("p"),Ouo=o("Examples:"),Guo=l(),m(Xy.$$.fragment),Xuo=l(),Ne=a("div"),m(Vy.$$.fragment),Vuo=l(),Ree=a("p"),zuo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wuo=l(),za=a("p"),Quo=o("The model class to instantiate is selected based on the "),See=a("code"),Huo=o("model_type"),Uuo=o(` property of the config object (either
passed as an argument or loaded from `),Pee=a("code"),Juo=o("pretrained_model_name_or_path"),Yuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=a("code"),Kuo=o("pretrained_model_name_or_path"),Zuo=o(":"),epo=l(),$=a("ul"),a_=a("li"),Iee=a("strong"),opo=o("bart"),rpo=o(" \u2014 "),jP=a("a"),tpo=o("BartForCausalLM"),apo=o(" (BART model)"),spo=l(),s_=a("li"),jee=a("strong"),npo=o("bert"),lpo=o(" \u2014 "),DP=a("a"),ipo=o("BertLMHeadModel"),dpo=o(" (BERT model)"),cpo=l(),n_=a("li"),Dee=a("strong"),mpo=o("bert-generation"),fpo=o(" \u2014 "),NP=a("a"),gpo=o("BertGenerationDecoder"),hpo=o(" (Bert Generation model)"),upo=l(),l_=a("li"),Nee=a("strong"),ppo=o("big_bird"),_po=o(" \u2014 "),qP=a("a"),bpo=o("BigBirdForCausalLM"),vpo=o(" (BigBird model)"),Tpo=l(),i_=a("li"),qee=a("strong"),Fpo=o("bigbird_pegasus"),Cpo=o(" \u2014 "),OP=a("a"),Mpo=o("BigBirdPegasusForCausalLM"),Epo=o(" (BigBirdPegasus model)"),ypo=l(),d_=a("li"),Oee=a("strong"),wpo=o("blenderbot"),Apo=o(" \u2014 "),GP=a("a"),Lpo=o("BlenderbotForCausalLM"),Bpo=o(" (Blenderbot model)"),xpo=l(),c_=a("li"),Gee=a("strong"),kpo=o("blenderbot-small"),Rpo=o(" \u2014 "),XP=a("a"),Spo=o("BlenderbotSmallForCausalLM"),Ppo=o(" (BlenderbotSmall model)"),$po=l(),m_=a("li"),Xee=a("strong"),Ipo=o("camembert"),jpo=o(" \u2014 "),VP=a("a"),Dpo=o("CamembertForCausalLM"),Npo=o(" (CamemBERT model)"),qpo=l(),f_=a("li"),Vee=a("strong"),Opo=o("ctrl"),Gpo=o(" \u2014 "),zP=a("a"),Xpo=o("CTRLLMHeadModel"),Vpo=o(" (CTRL model)"),zpo=l(),g_=a("li"),zee=a("strong"),Wpo=o("data2vec-text"),Qpo=o(" \u2014 "),WP=a("a"),Hpo=o("Data2VecTextForCausalLM"),Upo=o(" (Data2VecText model)"),Jpo=l(),h_=a("li"),Wee=a("strong"),Ypo=o("electra"),Kpo=o(" \u2014 "),QP=a("a"),Zpo=o("ElectraForCausalLM"),e_o=o(" (ELECTRA model)"),o_o=l(),u_=a("li"),Qee=a("strong"),r_o=o("gpt2"),t_o=o(" \u2014 "),HP=a("a"),a_o=o("GPT2LMHeadModel"),s_o=o(" (OpenAI GPT-2 model)"),n_o=l(),p_=a("li"),Hee=a("strong"),l_o=o("gpt_neo"),i_o=o(" \u2014 "),UP=a("a"),d_o=o("GPTNeoForCausalLM"),c_o=o(" (GPT Neo model)"),m_o=l(),__=a("li"),Uee=a("strong"),f_o=o("gptj"),g_o=o(" \u2014 "),JP=a("a"),h_o=o("GPTJForCausalLM"),u_o=o(" (GPT-J model)"),p_o=l(),b_=a("li"),Jee=a("strong"),__o=o("marian"),b_o=o(" \u2014 "),YP=a("a"),v_o=o("MarianForCausalLM"),T_o=o(" (Marian model)"),F_o=l(),v_=a("li"),Yee=a("strong"),C_o=o("mbart"),M_o=o(" \u2014 "),KP=a("a"),E_o=o("MBartForCausalLM"),y_o=o(" (mBART model)"),w_o=l(),T_=a("li"),Kee=a("strong"),A_o=o("megatron-bert"),L_o=o(" \u2014 "),ZP=a("a"),B_o=o("MegatronBertForCausalLM"),x_o=o(" (MegatronBert model)"),k_o=l(),F_=a("li"),Zee=a("strong"),R_o=o("openai-gpt"),S_o=o(" \u2014 "),e$=a("a"),P_o=o("OpenAIGPTLMHeadModel"),$_o=o(" (OpenAI GPT model)"),I_o=l(),C_=a("li"),eoe=a("strong"),j_o=o("pegasus"),D_o=o(" \u2014 "),o$=a("a"),N_o=o("PegasusForCausalLM"),q_o=o(" (Pegasus model)"),O_o=l(),M_=a("li"),ooe=a("strong"),G_o=o("plbart"),X_o=o(" \u2014 "),r$=a("a"),V_o=o("PLBartForCausalLM"),z_o=o(" (PLBart model)"),W_o=l(),E_=a("li"),roe=a("strong"),Q_o=o("prophetnet"),H_o=o(" \u2014 "),t$=a("a"),U_o=o("ProphetNetForCausalLM"),J_o=o(" (ProphetNet model)"),Y_o=l(),y_=a("li"),toe=a("strong"),K_o=o("qdqbert"),Z_o=o(" \u2014 "),a$=a("a"),ebo=o("QDQBertLMHeadModel"),obo=o(" (QDQBert model)"),rbo=l(),w_=a("li"),aoe=a("strong"),tbo=o("reformer"),abo=o(" \u2014 "),s$=a("a"),sbo=o("ReformerModelWithLMHead"),nbo=o(" (Reformer model)"),lbo=l(),A_=a("li"),soe=a("strong"),ibo=o("rembert"),dbo=o(" \u2014 "),n$=a("a"),cbo=o("RemBertForCausalLM"),mbo=o(" (RemBERT model)"),fbo=l(),L_=a("li"),noe=a("strong"),gbo=o("roberta"),hbo=o(" \u2014 "),l$=a("a"),ubo=o("RobertaForCausalLM"),pbo=o(" (RoBERTa model)"),_bo=l(),B_=a("li"),loe=a("strong"),bbo=o("roformer"),vbo=o(" \u2014 "),i$=a("a"),Tbo=o("RoFormerForCausalLM"),Fbo=o(" (RoFormer model)"),Cbo=l(),x_=a("li"),ioe=a("strong"),Mbo=o("speech_to_text_2"),Ebo=o(" \u2014 "),d$=a("a"),ybo=o("Speech2Text2ForCausalLM"),wbo=o(" (Speech2Text2 model)"),Abo=l(),k_=a("li"),doe=a("strong"),Lbo=o("transfo-xl"),Bbo=o(" \u2014 "),c$=a("a"),xbo=o("TransfoXLLMHeadModel"),kbo=o(" (Transformer-XL model)"),Rbo=l(),R_=a("li"),coe=a("strong"),Sbo=o("trocr"),Pbo=o(" \u2014 "),m$=a("a"),$bo=o("TrOCRForCausalLM"),Ibo=o(" (TrOCR model)"),jbo=l(),S_=a("li"),moe=a("strong"),Dbo=o("xglm"),Nbo=o(" \u2014 "),f$=a("a"),qbo=o("XGLMForCausalLM"),Obo=o(" (XGLM model)"),Gbo=l(),P_=a("li"),foe=a("strong"),Xbo=o("xlm"),Vbo=o(" \u2014 "),g$=a("a"),zbo=o("XLMWithLMHeadModel"),Wbo=o(" (XLM model)"),Qbo=l(),$_=a("li"),goe=a("strong"),Hbo=o("xlm-prophetnet"),Ubo=o(" \u2014 "),h$=a("a"),Jbo=o("XLMProphetNetForCausalLM"),Ybo=o(" (XLMProphetNet model)"),Kbo=l(),I_=a("li"),hoe=a("strong"),Zbo=o("xlm-roberta"),e2o=o(" \u2014 "),u$=a("a"),o2o=o("XLMRobertaForCausalLM"),r2o=o(" (XLM-RoBERTa model)"),t2o=l(),j_=a("li"),uoe=a("strong"),a2o=o("xlm-roberta-xl"),s2o=o(" \u2014 "),p$=a("a"),n2o=o("XLMRobertaXLForCausalLM"),l2o=o(" (XLM-RoBERTa-XL model)"),i2o=l(),D_=a("li"),poe=a("strong"),d2o=o("xlnet"),c2o=o(" \u2014 "),_$=a("a"),m2o=o("XLNetLMHeadModel"),f2o=o(" (XLNet model)"),g2o=l(),N_=a("p"),h2o=o("The model is set in evaluation mode by default using "),_oe=a("code"),u2o=o("model.eval()"),p2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),boe=a("code"),_2o=o("model.train()"),b2o=l(),voe=a("p"),v2o=o("Examples:"),T2o=l(),m(zy.$$.fragment),_xe=l(),sd=a("h2"),q_=a("a"),Toe=a("span"),m(Wy.$$.fragment),F2o=l(),Foe=a("span"),C2o=o("AutoModelForMaskedLM"),bxe=l(),Zo=a("div"),m(Qy.$$.fragment),M2o=l(),nd=a("p"),E2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=a("code"),y2o=o("from_pretrained()"),w2o=o("class method or the "),Moe=a("code"),A2o=o("from_config()"),L2o=o(`class
method.`),B2o=l(),Hy=a("p"),x2o=o("This class cannot be instantiated directly using "),Eoe=a("code"),k2o=o("__init__()"),R2o=o(" (throws an error)."),S2o=l(),Qr=a("div"),m(Uy.$$.fragment),P2o=l(),yoe=a("p"),$2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I2o=l(),ld=a("p"),j2o=o(`Note:
Loading a model from its configuration file does `),woe=a("strong"),D2o=o("not"),N2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("code"),q2o=o("from_pretrained()"),O2o=o("to load the model weights."),G2o=l(),Loe=a("p"),X2o=o("Examples:"),V2o=l(),m(Jy.$$.fragment),z2o=l(),qe=a("div"),m(Yy.$$.fragment),W2o=l(),Boe=a("p"),Q2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H2o=l(),Wa=a("p"),U2o=o("The model class to instantiate is selected based on the "),xoe=a("code"),J2o=o("model_type"),Y2o=o(` property of the config object (either
passed as an argument or loaded from `),koe=a("code"),K2o=o("pretrained_model_name_or_path"),Z2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Roe=a("code"),evo=o("pretrained_model_name_or_path"),ovo=o(":"),rvo=l(),I=a("ul"),O_=a("li"),Soe=a("strong"),tvo=o("albert"),avo=o(" \u2014 "),b$=a("a"),svo=o("AlbertForMaskedLM"),nvo=o(" (ALBERT model)"),lvo=l(),G_=a("li"),Poe=a("strong"),ivo=o("bart"),dvo=o(" \u2014 "),v$=a("a"),cvo=o("BartForConditionalGeneration"),mvo=o(" (BART model)"),fvo=l(),X_=a("li"),$oe=a("strong"),gvo=o("bert"),hvo=o(" \u2014 "),T$=a("a"),uvo=o("BertForMaskedLM"),pvo=o(" (BERT model)"),_vo=l(),V_=a("li"),Ioe=a("strong"),bvo=o("big_bird"),vvo=o(" \u2014 "),F$=a("a"),Tvo=o("BigBirdForMaskedLM"),Fvo=o(" (BigBird model)"),Cvo=l(),z_=a("li"),joe=a("strong"),Mvo=o("camembert"),Evo=o(" \u2014 "),C$=a("a"),yvo=o("CamembertForMaskedLM"),wvo=o(" (CamemBERT model)"),Avo=l(),W_=a("li"),Doe=a("strong"),Lvo=o("convbert"),Bvo=o(" \u2014 "),M$=a("a"),xvo=o("ConvBertForMaskedLM"),kvo=o(" (ConvBERT model)"),Rvo=l(),Q_=a("li"),Noe=a("strong"),Svo=o("data2vec-text"),Pvo=o(" \u2014 "),E$=a("a"),$vo=o("Data2VecTextForMaskedLM"),Ivo=o(" (Data2VecText model)"),jvo=l(),H_=a("li"),qoe=a("strong"),Dvo=o("deberta"),Nvo=o(" \u2014 "),y$=a("a"),qvo=o("DebertaForMaskedLM"),Ovo=o(" (DeBERTa model)"),Gvo=l(),U_=a("li"),Ooe=a("strong"),Xvo=o("deberta-v2"),Vvo=o(" \u2014 "),w$=a("a"),zvo=o("DebertaV2ForMaskedLM"),Wvo=o(" (DeBERTa-v2 model)"),Qvo=l(),J_=a("li"),Goe=a("strong"),Hvo=o("distilbert"),Uvo=o(" \u2014 "),A$=a("a"),Jvo=o("DistilBertForMaskedLM"),Yvo=o(" (DistilBERT model)"),Kvo=l(),Y_=a("li"),Xoe=a("strong"),Zvo=o("electra"),eTo=o(" \u2014 "),L$=a("a"),oTo=o("ElectraForMaskedLM"),rTo=o(" (ELECTRA model)"),tTo=l(),K_=a("li"),Voe=a("strong"),aTo=o("flaubert"),sTo=o(" \u2014 "),B$=a("a"),nTo=o("FlaubertWithLMHeadModel"),lTo=o(" (FlauBERT model)"),iTo=l(),Z_=a("li"),zoe=a("strong"),dTo=o("fnet"),cTo=o(" \u2014 "),x$=a("a"),mTo=o("FNetForMaskedLM"),fTo=o(" (FNet model)"),gTo=l(),eb=a("li"),Woe=a("strong"),hTo=o("funnel"),uTo=o(" \u2014 "),k$=a("a"),pTo=o("FunnelForMaskedLM"),_To=o(" (Funnel Transformer model)"),bTo=l(),ob=a("li"),Qoe=a("strong"),vTo=o("ibert"),TTo=o(" \u2014 "),R$=a("a"),FTo=o("IBertForMaskedLM"),CTo=o(" (I-BERT model)"),MTo=l(),rb=a("li"),Hoe=a("strong"),ETo=o("layoutlm"),yTo=o(" \u2014 "),S$=a("a"),wTo=o("LayoutLMForMaskedLM"),ATo=o(" (LayoutLM model)"),LTo=l(),tb=a("li"),Uoe=a("strong"),BTo=o("longformer"),xTo=o(" \u2014 "),P$=a("a"),kTo=o("LongformerForMaskedLM"),RTo=o(" (Longformer model)"),STo=l(),ab=a("li"),Joe=a("strong"),PTo=o("mbart"),$To=o(" \u2014 "),$$=a("a"),ITo=o("MBartForConditionalGeneration"),jTo=o(" (mBART model)"),DTo=l(),sb=a("li"),Yoe=a("strong"),NTo=o("megatron-bert"),qTo=o(" \u2014 "),I$=a("a"),OTo=o("MegatronBertForMaskedLM"),GTo=o(" (MegatronBert model)"),XTo=l(),nb=a("li"),Koe=a("strong"),VTo=o("mobilebert"),zTo=o(" \u2014 "),j$=a("a"),WTo=o("MobileBertForMaskedLM"),QTo=o(" (MobileBERT model)"),HTo=l(),lb=a("li"),Zoe=a("strong"),UTo=o("mpnet"),JTo=o(" \u2014 "),D$=a("a"),YTo=o("MPNetForMaskedLM"),KTo=o(" (MPNet model)"),ZTo=l(),ib=a("li"),ere=a("strong"),e1o=o("nystromformer"),o1o=o(" \u2014 "),N$=a("a"),r1o=o("NystromformerForMaskedLM"),t1o=o(" (Nystromformer model)"),a1o=l(),db=a("li"),ore=a("strong"),s1o=o("perceiver"),n1o=o(" \u2014 "),q$=a("a"),l1o=o("PerceiverForMaskedLM"),i1o=o(" (Perceiver model)"),d1o=l(),cb=a("li"),rre=a("strong"),c1o=o("qdqbert"),m1o=o(" \u2014 "),O$=a("a"),f1o=o("QDQBertForMaskedLM"),g1o=o(" (QDQBert model)"),h1o=l(),mb=a("li"),tre=a("strong"),u1o=o("reformer"),p1o=o(" \u2014 "),G$=a("a"),_1o=o("ReformerForMaskedLM"),b1o=o(" (Reformer model)"),v1o=l(),fb=a("li"),are=a("strong"),T1o=o("rembert"),F1o=o(" \u2014 "),X$=a("a"),C1o=o("RemBertForMaskedLM"),M1o=o(" (RemBERT model)"),E1o=l(),gb=a("li"),sre=a("strong"),y1o=o("roberta"),w1o=o(" \u2014 "),V$=a("a"),A1o=o("RobertaForMaskedLM"),L1o=o(" (RoBERTa model)"),B1o=l(),hb=a("li"),nre=a("strong"),x1o=o("roformer"),k1o=o(" \u2014 "),z$=a("a"),R1o=o("RoFormerForMaskedLM"),S1o=o(" (RoFormer model)"),P1o=l(),ub=a("li"),lre=a("strong"),$1o=o("squeezebert"),I1o=o(" \u2014 "),W$=a("a"),j1o=o("SqueezeBertForMaskedLM"),D1o=o(" (SqueezeBERT model)"),N1o=l(),pb=a("li"),ire=a("strong"),q1o=o("tapas"),O1o=o(" \u2014 "),Q$=a("a"),G1o=o("TapasForMaskedLM"),X1o=o(" (TAPAS model)"),V1o=l(),_b=a("li"),dre=a("strong"),z1o=o("wav2vec2"),W1o=o(" \u2014 "),cre=a("code"),Q1o=o("Wav2Vec2ForMaskedLM"),H1o=o("(Wav2Vec2 model)"),U1o=l(),bb=a("li"),mre=a("strong"),J1o=o("xlm"),Y1o=o(" \u2014 "),H$=a("a"),K1o=o("XLMWithLMHeadModel"),Z1o=o(" (XLM model)"),eFo=l(),vb=a("li"),fre=a("strong"),oFo=o("xlm-roberta"),rFo=o(" \u2014 "),U$=a("a"),tFo=o("XLMRobertaForMaskedLM"),aFo=o(" (XLM-RoBERTa model)"),sFo=l(),Tb=a("li"),gre=a("strong"),nFo=o("xlm-roberta-xl"),lFo=o(" \u2014 "),J$=a("a"),iFo=o("XLMRobertaXLForMaskedLM"),dFo=o(" (XLM-RoBERTa-XL model)"),cFo=l(),Fb=a("li"),hre=a("strong"),mFo=o("yoso"),fFo=o(" \u2014 "),Y$=a("a"),gFo=o("YosoForMaskedLM"),hFo=o(" (YOSO model)"),uFo=l(),Cb=a("p"),pFo=o("The model is set in evaluation mode by default using "),ure=a("code"),_Fo=o("model.eval()"),bFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pre=a("code"),vFo=o("model.train()"),TFo=l(),_re=a("p"),FFo=o("Examples:"),CFo=l(),m(Ky.$$.fragment),vxe=l(),id=a("h2"),Mb=a("a"),bre=a("span"),m(Zy.$$.fragment),MFo=l(),vre=a("span"),EFo=o("AutoModelForSeq2SeqLM"),Txe=l(),er=a("div"),m(ew.$$.fragment),yFo=l(),dd=a("p"),wFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tre=a("code"),AFo=o("from_pretrained()"),LFo=o("class method or the "),Fre=a("code"),BFo=o("from_config()"),xFo=o(`class
method.`),kFo=l(),ow=a("p"),RFo=o("This class cannot be instantiated directly using "),Cre=a("code"),SFo=o("__init__()"),PFo=o(" (throws an error)."),$Fo=l(),Hr=a("div"),m(rw.$$.fragment),IFo=l(),Mre=a("p"),jFo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DFo=l(),cd=a("p"),NFo=o(`Note:
Loading a model from its configuration file does `),Ere=a("strong"),qFo=o("not"),OFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("code"),GFo=o("from_pretrained()"),XFo=o("to load the model weights."),VFo=l(),wre=a("p"),zFo=o("Examples:"),WFo=l(),m(tw.$$.fragment),QFo=l(),Oe=a("div"),m(aw.$$.fragment),HFo=l(),Are=a("p"),UFo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JFo=l(),Qa=a("p"),YFo=o("The model class to instantiate is selected based on the "),Lre=a("code"),KFo=o("model_type"),ZFo=o(` property of the config object (either
passed as an argument or loaded from `),Bre=a("code"),eCo=o("pretrained_model_name_or_path"),oCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xre=a("code"),rCo=o("pretrained_model_name_or_path"),tCo=o(":"),aCo=l(),se=a("ul"),Eb=a("li"),kre=a("strong"),sCo=o("bart"),nCo=o(" \u2014 "),K$=a("a"),lCo=o("BartForConditionalGeneration"),iCo=o(" (BART model)"),dCo=l(),yb=a("li"),Rre=a("strong"),cCo=o("bigbird_pegasus"),mCo=o(" \u2014 "),Z$=a("a"),fCo=o("BigBirdPegasusForConditionalGeneration"),gCo=o(" (BigBirdPegasus model)"),hCo=l(),wb=a("li"),Sre=a("strong"),uCo=o("blenderbot"),pCo=o(" \u2014 "),eI=a("a"),_Co=o("BlenderbotForConditionalGeneration"),bCo=o(" (Blenderbot model)"),vCo=l(),Ab=a("li"),Pre=a("strong"),TCo=o("blenderbot-small"),FCo=o(" \u2014 "),oI=a("a"),CCo=o("BlenderbotSmallForConditionalGeneration"),MCo=o(" (BlenderbotSmall model)"),ECo=l(),Lb=a("li"),$re=a("strong"),yCo=o("encoder-decoder"),wCo=o(" \u2014 "),rI=a("a"),ACo=o("EncoderDecoderModel"),LCo=o(" (Encoder decoder model)"),BCo=l(),Bb=a("li"),Ire=a("strong"),xCo=o("fsmt"),kCo=o(" \u2014 "),tI=a("a"),RCo=o("FSMTForConditionalGeneration"),SCo=o(" (FairSeq Machine-Translation model)"),PCo=l(),xb=a("li"),jre=a("strong"),$Co=o("led"),ICo=o(" \u2014 "),aI=a("a"),jCo=o("LEDForConditionalGeneration"),DCo=o(" (LED model)"),NCo=l(),kb=a("li"),Dre=a("strong"),qCo=o("m2m_100"),OCo=o(" \u2014 "),sI=a("a"),GCo=o("M2M100ForConditionalGeneration"),XCo=o(" (M2M100 model)"),VCo=l(),Rb=a("li"),Nre=a("strong"),zCo=o("marian"),WCo=o(" \u2014 "),nI=a("a"),QCo=o("MarianMTModel"),HCo=o(" (Marian model)"),UCo=l(),Sb=a("li"),qre=a("strong"),JCo=o("mbart"),YCo=o(" \u2014 "),lI=a("a"),KCo=o("MBartForConditionalGeneration"),ZCo=o(" (mBART model)"),eMo=l(),Pb=a("li"),Ore=a("strong"),oMo=o("mt5"),rMo=o(" \u2014 "),iI=a("a"),tMo=o("MT5ForConditionalGeneration"),aMo=o(" (mT5 model)"),sMo=l(),$b=a("li"),Gre=a("strong"),nMo=o("pegasus"),lMo=o(" \u2014 "),dI=a("a"),iMo=o("PegasusForConditionalGeneration"),dMo=o(" (Pegasus model)"),cMo=l(),Ib=a("li"),Xre=a("strong"),mMo=o("plbart"),fMo=o(" \u2014 "),cI=a("a"),gMo=o("PLBartForConditionalGeneration"),hMo=o(" (PLBart model)"),uMo=l(),jb=a("li"),Vre=a("strong"),pMo=o("prophetnet"),_Mo=o(" \u2014 "),mI=a("a"),bMo=o("ProphetNetForConditionalGeneration"),vMo=o(" (ProphetNet model)"),TMo=l(),Db=a("li"),zre=a("strong"),FMo=o("t5"),CMo=o(" \u2014 "),fI=a("a"),MMo=o("T5ForConditionalGeneration"),EMo=o(" (T5 model)"),yMo=l(),Nb=a("li"),Wre=a("strong"),wMo=o("xlm-prophetnet"),AMo=o(" \u2014 "),gI=a("a"),LMo=o("XLMProphetNetForConditionalGeneration"),BMo=o(" (XLMProphetNet model)"),xMo=l(),qb=a("p"),kMo=o("The model is set in evaluation mode by default using "),Qre=a("code"),RMo=o("model.eval()"),SMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=a("code"),PMo=o("model.train()"),$Mo=l(),Ure=a("p"),IMo=o("Examples:"),jMo=l(),m(sw.$$.fragment),Fxe=l(),md=a("h2"),Ob=a("a"),Jre=a("span"),m(nw.$$.fragment),DMo=l(),Yre=a("span"),NMo=o("AutoModelForSequenceClassification"),Cxe=l(),or=a("div"),m(lw.$$.fragment),qMo=l(),fd=a("p"),OMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kre=a("code"),GMo=o("from_pretrained()"),XMo=o("class method or the "),Zre=a("code"),VMo=o("from_config()"),zMo=o(`class
method.`),WMo=l(),iw=a("p"),QMo=o("This class cannot be instantiated directly using "),ete=a("code"),HMo=o("__init__()"),UMo=o(" (throws an error)."),JMo=l(),Ur=a("div"),m(dw.$$.fragment),YMo=l(),ote=a("p"),KMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZMo=l(),gd=a("p"),e4o=o(`Note:
Loading a model from its configuration file does `),rte=a("strong"),o4o=o("not"),r4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("code"),t4o=o("from_pretrained()"),a4o=o("to load the model weights."),s4o=l(),ate=a("p"),n4o=o("Examples:"),l4o=l(),m(cw.$$.fragment),i4o=l(),Ge=a("div"),m(mw.$$.fragment),d4o=l(),ste=a("p"),c4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),m4o=l(),Ha=a("p"),f4o=o("The model class to instantiate is selected based on the "),nte=a("code"),g4o=o("model_type"),h4o=o(` property of the config object (either
passed as an argument or loaded from `),lte=a("code"),u4o=o("pretrained_model_name_or_path"),p4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=a("code"),_4o=o("pretrained_model_name_or_path"),b4o=o(":"),v4o=l(),A=a("ul"),Gb=a("li"),dte=a("strong"),T4o=o("albert"),F4o=o(" \u2014 "),hI=a("a"),C4o=o("AlbertForSequenceClassification"),M4o=o(" (ALBERT model)"),E4o=l(),Xb=a("li"),cte=a("strong"),y4o=o("bart"),w4o=o(" \u2014 "),uI=a("a"),A4o=o("BartForSequenceClassification"),L4o=o(" (BART model)"),B4o=l(),Vb=a("li"),mte=a("strong"),x4o=o("bert"),k4o=o(" \u2014 "),pI=a("a"),R4o=o("BertForSequenceClassification"),S4o=o(" (BERT model)"),P4o=l(),zb=a("li"),fte=a("strong"),$4o=o("big_bird"),I4o=o(" \u2014 "),_I=a("a"),j4o=o("BigBirdForSequenceClassification"),D4o=o(" (BigBird model)"),N4o=l(),Wb=a("li"),gte=a("strong"),q4o=o("bigbird_pegasus"),O4o=o(" \u2014 "),bI=a("a"),G4o=o("BigBirdPegasusForSequenceClassification"),X4o=o(" (BigBirdPegasus model)"),V4o=l(),Qb=a("li"),hte=a("strong"),z4o=o("camembert"),W4o=o(" \u2014 "),vI=a("a"),Q4o=o("CamembertForSequenceClassification"),H4o=o(" (CamemBERT model)"),U4o=l(),Hb=a("li"),ute=a("strong"),J4o=o("canine"),Y4o=o(" \u2014 "),TI=a("a"),K4o=o("CanineForSequenceClassification"),Z4o=o(" (Canine model)"),eEo=l(),Ub=a("li"),pte=a("strong"),oEo=o("convbert"),rEo=o(" \u2014 "),FI=a("a"),tEo=o("ConvBertForSequenceClassification"),aEo=o(" (ConvBERT model)"),sEo=l(),Jb=a("li"),_te=a("strong"),nEo=o("ctrl"),lEo=o(" \u2014 "),CI=a("a"),iEo=o("CTRLForSequenceClassification"),dEo=o(" (CTRL model)"),cEo=l(),Yb=a("li"),bte=a("strong"),mEo=o("data2vec-text"),fEo=o(" \u2014 "),MI=a("a"),gEo=o("Data2VecTextForSequenceClassification"),hEo=o(" (Data2VecText model)"),uEo=l(),Kb=a("li"),vte=a("strong"),pEo=o("deberta"),_Eo=o(" \u2014 "),EI=a("a"),bEo=o("DebertaForSequenceClassification"),vEo=o(" (DeBERTa model)"),TEo=l(),Zb=a("li"),Tte=a("strong"),FEo=o("deberta-v2"),CEo=o(" \u2014 "),yI=a("a"),MEo=o("DebertaV2ForSequenceClassification"),EEo=o(" (DeBERTa-v2 model)"),yEo=l(),e2=a("li"),Fte=a("strong"),wEo=o("distilbert"),AEo=o(" \u2014 "),wI=a("a"),LEo=o("DistilBertForSequenceClassification"),BEo=o(" (DistilBERT model)"),xEo=l(),o2=a("li"),Cte=a("strong"),kEo=o("electra"),REo=o(" \u2014 "),AI=a("a"),SEo=o("ElectraForSequenceClassification"),PEo=o(" (ELECTRA model)"),$Eo=l(),r2=a("li"),Mte=a("strong"),IEo=o("flaubert"),jEo=o(" \u2014 "),LI=a("a"),DEo=o("FlaubertForSequenceClassification"),NEo=o(" (FlauBERT model)"),qEo=l(),t2=a("li"),Ete=a("strong"),OEo=o("fnet"),GEo=o(" \u2014 "),BI=a("a"),XEo=o("FNetForSequenceClassification"),VEo=o(" (FNet model)"),zEo=l(),a2=a("li"),yte=a("strong"),WEo=o("funnel"),QEo=o(" \u2014 "),xI=a("a"),HEo=o("FunnelForSequenceClassification"),UEo=o(" (Funnel Transformer model)"),JEo=l(),s2=a("li"),wte=a("strong"),YEo=o("gpt2"),KEo=o(" \u2014 "),kI=a("a"),ZEo=o("GPT2ForSequenceClassification"),e3o=o(" (OpenAI GPT-2 model)"),o3o=l(),n2=a("li"),Ate=a("strong"),r3o=o("gpt_neo"),t3o=o(" \u2014 "),RI=a("a"),a3o=o("GPTNeoForSequenceClassification"),s3o=o(" (GPT Neo model)"),n3o=l(),l2=a("li"),Lte=a("strong"),l3o=o("gptj"),i3o=o(" \u2014 "),SI=a("a"),d3o=o("GPTJForSequenceClassification"),c3o=o(" (GPT-J model)"),m3o=l(),i2=a("li"),Bte=a("strong"),f3o=o("ibert"),g3o=o(" \u2014 "),PI=a("a"),h3o=o("IBertForSequenceClassification"),u3o=o(" (I-BERT model)"),p3o=l(),d2=a("li"),xte=a("strong"),_3o=o("layoutlm"),b3o=o(" \u2014 "),$I=a("a"),v3o=o("LayoutLMForSequenceClassification"),T3o=o(" (LayoutLM model)"),F3o=l(),c2=a("li"),kte=a("strong"),C3o=o("layoutlmv2"),M3o=o(" \u2014 "),II=a("a"),E3o=o("LayoutLMv2ForSequenceClassification"),y3o=o(" (LayoutLMv2 model)"),w3o=l(),m2=a("li"),Rte=a("strong"),A3o=o("led"),L3o=o(" \u2014 "),jI=a("a"),B3o=o("LEDForSequenceClassification"),x3o=o(" (LED model)"),k3o=l(),f2=a("li"),Ste=a("strong"),R3o=o("longformer"),S3o=o(" \u2014 "),DI=a("a"),P3o=o("LongformerForSequenceClassification"),$3o=o(" (Longformer model)"),I3o=l(),g2=a("li"),Pte=a("strong"),j3o=o("mbart"),D3o=o(" \u2014 "),NI=a("a"),N3o=o("MBartForSequenceClassification"),q3o=o(" (mBART model)"),O3o=l(),h2=a("li"),$te=a("strong"),G3o=o("megatron-bert"),X3o=o(" \u2014 "),qI=a("a"),V3o=o("MegatronBertForSequenceClassification"),z3o=o(" (MegatronBert model)"),W3o=l(),u2=a("li"),Ite=a("strong"),Q3o=o("mobilebert"),H3o=o(" \u2014 "),OI=a("a"),U3o=o("MobileBertForSequenceClassification"),J3o=o(" (MobileBERT model)"),Y3o=l(),p2=a("li"),jte=a("strong"),K3o=o("mpnet"),Z3o=o(" \u2014 "),GI=a("a"),e5o=o("MPNetForSequenceClassification"),o5o=o(" (MPNet model)"),r5o=l(),_2=a("li"),Dte=a("strong"),t5o=o("nystromformer"),a5o=o(" \u2014 "),XI=a("a"),s5o=o("NystromformerForSequenceClassification"),n5o=o(" (Nystromformer model)"),l5o=l(),b2=a("li"),Nte=a("strong"),i5o=o("openai-gpt"),d5o=o(" \u2014 "),VI=a("a"),c5o=o("OpenAIGPTForSequenceClassification"),m5o=o(" (OpenAI GPT model)"),f5o=l(),v2=a("li"),qte=a("strong"),g5o=o("perceiver"),h5o=o(" \u2014 "),zI=a("a"),u5o=o("PerceiverForSequenceClassification"),p5o=o(" (Perceiver model)"),_5o=l(),T2=a("li"),Ote=a("strong"),b5o=o("plbart"),v5o=o(" \u2014 "),WI=a("a"),T5o=o("PLBartForSequenceClassification"),F5o=o(" (PLBart model)"),C5o=l(),F2=a("li"),Gte=a("strong"),M5o=o("qdqbert"),E5o=o(" \u2014 "),QI=a("a"),y5o=o("QDQBertForSequenceClassification"),w5o=o(" (QDQBert model)"),A5o=l(),C2=a("li"),Xte=a("strong"),L5o=o("reformer"),B5o=o(" \u2014 "),HI=a("a"),x5o=o("ReformerForSequenceClassification"),k5o=o(" (Reformer model)"),R5o=l(),M2=a("li"),Vte=a("strong"),S5o=o("rembert"),P5o=o(" \u2014 "),UI=a("a"),$5o=o("RemBertForSequenceClassification"),I5o=o(" (RemBERT model)"),j5o=l(),E2=a("li"),zte=a("strong"),D5o=o("roberta"),N5o=o(" \u2014 "),JI=a("a"),q5o=o("RobertaForSequenceClassification"),O5o=o(" (RoBERTa model)"),G5o=l(),y2=a("li"),Wte=a("strong"),X5o=o("roformer"),V5o=o(" \u2014 "),YI=a("a"),z5o=o("RoFormerForSequenceClassification"),W5o=o(" (RoFormer model)"),Q5o=l(),w2=a("li"),Qte=a("strong"),H5o=o("squeezebert"),U5o=o(" \u2014 "),KI=a("a"),J5o=o("SqueezeBertForSequenceClassification"),Y5o=o(" (SqueezeBERT model)"),K5o=l(),A2=a("li"),Hte=a("strong"),Z5o=o("tapas"),eyo=o(" \u2014 "),ZI=a("a"),oyo=o("TapasForSequenceClassification"),ryo=o(" (TAPAS model)"),tyo=l(),L2=a("li"),Ute=a("strong"),ayo=o("transfo-xl"),syo=o(" \u2014 "),ej=a("a"),nyo=o("TransfoXLForSequenceClassification"),lyo=o(" (Transformer-XL model)"),iyo=l(),B2=a("li"),Jte=a("strong"),dyo=o("xlm"),cyo=o(" \u2014 "),oj=a("a"),myo=o("XLMForSequenceClassification"),fyo=o(" (XLM model)"),gyo=l(),x2=a("li"),Yte=a("strong"),hyo=o("xlm-roberta"),uyo=o(" \u2014 "),rj=a("a"),pyo=o("XLMRobertaForSequenceClassification"),_yo=o(" (XLM-RoBERTa model)"),byo=l(),k2=a("li"),Kte=a("strong"),vyo=o("xlm-roberta-xl"),Tyo=o(" \u2014 "),tj=a("a"),Fyo=o("XLMRobertaXLForSequenceClassification"),Cyo=o(" (XLM-RoBERTa-XL model)"),Myo=l(),R2=a("li"),Zte=a("strong"),Eyo=o("xlnet"),yyo=o(" \u2014 "),aj=a("a"),wyo=o("XLNetForSequenceClassification"),Ayo=o(" (XLNet model)"),Lyo=l(),S2=a("li"),eae=a("strong"),Byo=o("yoso"),xyo=o(" \u2014 "),sj=a("a"),kyo=o("YosoForSequenceClassification"),Ryo=o(" (YOSO model)"),Syo=l(),P2=a("p"),Pyo=o("The model is set in evaluation mode by default using "),oae=a("code"),$yo=o("model.eval()"),Iyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=a("code"),jyo=o("model.train()"),Dyo=l(),tae=a("p"),Nyo=o("Examples:"),qyo=l(),m(fw.$$.fragment),Mxe=l(),hd=a("h2"),$2=a("a"),aae=a("span"),m(gw.$$.fragment),Oyo=l(),sae=a("span"),Gyo=o("AutoModelForMultipleChoice"),Exe=l(),rr=a("div"),m(hw.$$.fragment),Xyo=l(),ud=a("p"),Vyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nae=a("code"),zyo=o("from_pretrained()"),Wyo=o("class method or the "),lae=a("code"),Qyo=o("from_config()"),Hyo=o(`class
method.`),Uyo=l(),uw=a("p"),Jyo=o("This class cannot be instantiated directly using "),iae=a("code"),Yyo=o("__init__()"),Kyo=o(" (throws an error)."),Zyo=l(),Jr=a("div"),m(pw.$$.fragment),ewo=l(),dae=a("p"),owo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rwo=l(),pd=a("p"),two=o(`Note:
Loading a model from its configuration file does `),cae=a("strong"),awo=o("not"),swo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("code"),nwo=o("from_pretrained()"),lwo=o("to load the model weights."),iwo=l(),fae=a("p"),dwo=o("Examples:"),cwo=l(),m(_w.$$.fragment),mwo=l(),Xe=a("div"),m(bw.$$.fragment),fwo=l(),gae=a("p"),gwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hwo=l(),Ua=a("p"),uwo=o("The model class to instantiate is selected based on the "),hae=a("code"),pwo=o("model_type"),_wo=o(` property of the config object (either
passed as an argument or loaded from `),uae=a("code"),bwo=o("pretrained_model_name_or_path"),vwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),Two=o("pretrained_model_name_or_path"),Fwo=o(":"),Cwo=l(),O=a("ul"),I2=a("li"),_ae=a("strong"),Mwo=o("albert"),Ewo=o(" \u2014 "),nj=a("a"),ywo=o("AlbertForMultipleChoice"),wwo=o(" (ALBERT model)"),Awo=l(),j2=a("li"),bae=a("strong"),Lwo=o("bert"),Bwo=o(" \u2014 "),lj=a("a"),xwo=o("BertForMultipleChoice"),kwo=o(" (BERT model)"),Rwo=l(),D2=a("li"),vae=a("strong"),Swo=o("big_bird"),Pwo=o(" \u2014 "),ij=a("a"),$wo=o("BigBirdForMultipleChoice"),Iwo=o(" (BigBird model)"),jwo=l(),N2=a("li"),Tae=a("strong"),Dwo=o("camembert"),Nwo=o(" \u2014 "),dj=a("a"),qwo=o("CamembertForMultipleChoice"),Owo=o(" (CamemBERT model)"),Gwo=l(),q2=a("li"),Fae=a("strong"),Xwo=o("canine"),Vwo=o(" \u2014 "),cj=a("a"),zwo=o("CanineForMultipleChoice"),Wwo=o(" (Canine model)"),Qwo=l(),O2=a("li"),Cae=a("strong"),Hwo=o("convbert"),Uwo=o(" \u2014 "),mj=a("a"),Jwo=o("ConvBertForMultipleChoice"),Ywo=o(" (ConvBERT model)"),Kwo=l(),G2=a("li"),Mae=a("strong"),Zwo=o("data2vec-text"),e6o=o(" \u2014 "),fj=a("a"),o6o=o("Data2VecTextForMultipleChoice"),r6o=o(" (Data2VecText model)"),t6o=l(),X2=a("li"),Eae=a("strong"),a6o=o("distilbert"),s6o=o(" \u2014 "),gj=a("a"),n6o=o("DistilBertForMultipleChoice"),l6o=o(" (DistilBERT model)"),i6o=l(),V2=a("li"),yae=a("strong"),d6o=o("electra"),c6o=o(" \u2014 "),hj=a("a"),m6o=o("ElectraForMultipleChoice"),f6o=o(" (ELECTRA model)"),g6o=l(),z2=a("li"),wae=a("strong"),h6o=o("flaubert"),u6o=o(" \u2014 "),uj=a("a"),p6o=o("FlaubertForMultipleChoice"),_6o=o(" (FlauBERT model)"),b6o=l(),W2=a("li"),Aae=a("strong"),v6o=o("fnet"),T6o=o(" \u2014 "),pj=a("a"),F6o=o("FNetForMultipleChoice"),C6o=o(" (FNet model)"),M6o=l(),Q2=a("li"),Lae=a("strong"),E6o=o("funnel"),y6o=o(" \u2014 "),_j=a("a"),w6o=o("FunnelForMultipleChoice"),A6o=o(" (Funnel Transformer model)"),L6o=l(),H2=a("li"),Bae=a("strong"),B6o=o("ibert"),x6o=o(" \u2014 "),bj=a("a"),k6o=o("IBertForMultipleChoice"),R6o=o(" (I-BERT model)"),S6o=l(),U2=a("li"),xae=a("strong"),P6o=o("longformer"),$6o=o(" \u2014 "),vj=a("a"),I6o=o("LongformerForMultipleChoice"),j6o=o(" (Longformer model)"),D6o=l(),J2=a("li"),kae=a("strong"),N6o=o("megatron-bert"),q6o=o(" \u2014 "),Tj=a("a"),O6o=o("MegatronBertForMultipleChoice"),G6o=o(" (MegatronBert model)"),X6o=l(),Y2=a("li"),Rae=a("strong"),V6o=o("mobilebert"),z6o=o(" \u2014 "),Fj=a("a"),W6o=o("MobileBertForMultipleChoice"),Q6o=o(" (MobileBERT model)"),H6o=l(),K2=a("li"),Sae=a("strong"),U6o=o("mpnet"),J6o=o(" \u2014 "),Cj=a("a"),Y6o=o("MPNetForMultipleChoice"),K6o=o(" (MPNet model)"),Z6o=l(),Z2=a("li"),Pae=a("strong"),eAo=o("nystromformer"),oAo=o(" \u2014 "),Mj=a("a"),rAo=o("NystromformerForMultipleChoice"),tAo=o(" (Nystromformer model)"),aAo=l(),ev=a("li"),$ae=a("strong"),sAo=o("qdqbert"),nAo=o(" \u2014 "),Ej=a("a"),lAo=o("QDQBertForMultipleChoice"),iAo=o(" (QDQBert model)"),dAo=l(),ov=a("li"),Iae=a("strong"),cAo=o("rembert"),mAo=o(" \u2014 "),yj=a("a"),fAo=o("RemBertForMultipleChoice"),gAo=o(" (RemBERT model)"),hAo=l(),rv=a("li"),jae=a("strong"),uAo=o("roberta"),pAo=o(" \u2014 "),wj=a("a"),_Ao=o("RobertaForMultipleChoice"),bAo=o(" (RoBERTa model)"),vAo=l(),tv=a("li"),Dae=a("strong"),TAo=o("roformer"),FAo=o(" \u2014 "),Aj=a("a"),CAo=o("RoFormerForMultipleChoice"),MAo=o(" (RoFormer model)"),EAo=l(),av=a("li"),Nae=a("strong"),yAo=o("squeezebert"),wAo=o(" \u2014 "),Lj=a("a"),AAo=o("SqueezeBertForMultipleChoice"),LAo=o(" (SqueezeBERT model)"),BAo=l(),sv=a("li"),qae=a("strong"),xAo=o("xlm"),kAo=o(" \u2014 "),Bj=a("a"),RAo=o("XLMForMultipleChoice"),SAo=o(" (XLM model)"),PAo=l(),nv=a("li"),Oae=a("strong"),$Ao=o("xlm-roberta"),IAo=o(" \u2014 "),xj=a("a"),jAo=o("XLMRobertaForMultipleChoice"),DAo=o(" (XLM-RoBERTa model)"),NAo=l(),lv=a("li"),Gae=a("strong"),qAo=o("xlm-roberta-xl"),OAo=o(" \u2014 "),kj=a("a"),GAo=o("XLMRobertaXLForMultipleChoice"),XAo=o(" (XLM-RoBERTa-XL model)"),VAo=l(),iv=a("li"),Xae=a("strong"),zAo=o("xlnet"),WAo=o(" \u2014 "),Rj=a("a"),QAo=o("XLNetForMultipleChoice"),HAo=o(" (XLNet model)"),UAo=l(),dv=a("li"),Vae=a("strong"),JAo=o("yoso"),YAo=o(" \u2014 "),Sj=a("a"),KAo=o("YosoForMultipleChoice"),ZAo=o(" (YOSO model)"),e0o=l(),cv=a("p"),o0o=o("The model is set in evaluation mode by default using "),zae=a("code"),r0o=o("model.eval()"),t0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wae=a("code"),a0o=o("model.train()"),s0o=l(),Qae=a("p"),n0o=o("Examples:"),l0o=l(),m(vw.$$.fragment),yxe=l(),_d=a("h2"),mv=a("a"),Hae=a("span"),m(Tw.$$.fragment),i0o=l(),Uae=a("span"),d0o=o("AutoModelForNextSentencePrediction"),wxe=l(),tr=a("div"),m(Fw.$$.fragment),c0o=l(),bd=a("p"),m0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jae=a("code"),f0o=o("from_pretrained()"),g0o=o("class method or the "),Yae=a("code"),h0o=o("from_config()"),u0o=o(`class
method.`),p0o=l(),Cw=a("p"),_0o=o("This class cannot be instantiated directly using "),Kae=a("code"),b0o=o("__init__()"),v0o=o(" (throws an error)."),T0o=l(),Yr=a("div"),m(Mw.$$.fragment),F0o=l(),Zae=a("p"),C0o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M0o=l(),vd=a("p"),E0o=o(`Note:
Loading a model from its configuration file does `),ese=a("strong"),y0o=o("not"),w0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ose=a("code"),A0o=o("from_pretrained()"),L0o=o("to load the model weights."),B0o=l(),rse=a("p"),x0o=o("Examples:"),k0o=l(),m(Ew.$$.fragment),R0o=l(),Ve=a("div"),m(yw.$$.fragment),S0o=l(),tse=a("p"),P0o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$0o=l(),Ja=a("p"),I0o=o("The model class to instantiate is selected based on the "),ase=a("code"),j0o=o("model_type"),D0o=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),N0o=o("pretrained_model_name_or_path"),q0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),O0o=o("pretrained_model_name_or_path"),G0o=o(":"),X0o=l(),da=a("ul"),fv=a("li"),lse=a("strong"),V0o=o("bert"),z0o=o(" \u2014 "),Pj=a("a"),W0o=o("BertForNextSentencePrediction"),Q0o=o(" (BERT model)"),H0o=l(),gv=a("li"),ise=a("strong"),U0o=o("fnet"),J0o=o(" \u2014 "),$j=a("a"),Y0o=o("FNetForNextSentencePrediction"),K0o=o(" (FNet model)"),Z0o=l(),hv=a("li"),dse=a("strong"),eLo=o("megatron-bert"),oLo=o(" \u2014 "),Ij=a("a"),rLo=o("MegatronBertForNextSentencePrediction"),tLo=o(" (MegatronBert model)"),aLo=l(),uv=a("li"),cse=a("strong"),sLo=o("mobilebert"),nLo=o(" \u2014 "),jj=a("a"),lLo=o("MobileBertForNextSentencePrediction"),iLo=o(" (MobileBERT model)"),dLo=l(),pv=a("li"),mse=a("strong"),cLo=o("qdqbert"),mLo=o(" \u2014 "),Dj=a("a"),fLo=o("QDQBertForNextSentencePrediction"),gLo=o(" (QDQBert model)"),hLo=l(),_v=a("p"),uLo=o("The model is set in evaluation mode by default using "),fse=a("code"),pLo=o("model.eval()"),_Lo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gse=a("code"),bLo=o("model.train()"),vLo=l(),hse=a("p"),TLo=o("Examples:"),FLo=l(),m(ww.$$.fragment),Axe=l(),Td=a("h2"),bv=a("a"),use=a("span"),m(Aw.$$.fragment),CLo=l(),pse=a("span"),MLo=o("AutoModelForTokenClassification"),Lxe=l(),ar=a("div"),m(Lw.$$.fragment),ELo=l(),Fd=a("p"),yLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_se=a("code"),wLo=o("from_pretrained()"),ALo=o("class method or the "),bse=a("code"),LLo=o("from_config()"),BLo=o(`class
method.`),xLo=l(),Bw=a("p"),kLo=o("This class cannot be instantiated directly using "),vse=a("code"),RLo=o("__init__()"),SLo=o(" (throws an error)."),PLo=l(),Kr=a("div"),m(xw.$$.fragment),$Lo=l(),Tse=a("p"),ILo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jLo=l(),Cd=a("p"),DLo=o(`Note:
Loading a model from its configuration file does `),Fse=a("strong"),NLo=o("not"),qLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cse=a("code"),OLo=o("from_pretrained()"),GLo=o("to load the model weights."),XLo=l(),Mse=a("p"),VLo=o("Examples:"),zLo=l(),m(kw.$$.fragment),WLo=l(),ze=a("div"),m(Rw.$$.fragment),QLo=l(),Ese=a("p"),HLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ULo=l(),Ya=a("p"),JLo=o("The model class to instantiate is selected based on the "),yse=a("code"),YLo=o("model_type"),KLo=o(` property of the config object (either
passed as an argument or loaded from `),wse=a("code"),ZLo=o("pretrained_model_name_or_path"),e8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=a("code"),o8o=o("pretrained_model_name_or_path"),r8o=o(":"),t8o=l(),N=a("ul"),vv=a("li"),Lse=a("strong"),a8o=o("albert"),s8o=o(" \u2014 "),Nj=a("a"),n8o=o("AlbertForTokenClassification"),l8o=o(" (ALBERT model)"),i8o=l(),Tv=a("li"),Bse=a("strong"),d8o=o("bert"),c8o=o(" \u2014 "),qj=a("a"),m8o=o("BertForTokenClassification"),f8o=o(" (BERT model)"),g8o=l(),Fv=a("li"),xse=a("strong"),h8o=o("big_bird"),u8o=o(" \u2014 "),Oj=a("a"),p8o=o("BigBirdForTokenClassification"),_8o=o(" (BigBird model)"),b8o=l(),Cv=a("li"),kse=a("strong"),v8o=o("camembert"),T8o=o(" \u2014 "),Gj=a("a"),F8o=o("CamembertForTokenClassification"),C8o=o(" (CamemBERT model)"),M8o=l(),Mv=a("li"),Rse=a("strong"),E8o=o("canine"),y8o=o(" \u2014 "),Xj=a("a"),w8o=o("CanineForTokenClassification"),A8o=o(" (Canine model)"),L8o=l(),Ev=a("li"),Sse=a("strong"),B8o=o("convbert"),x8o=o(" \u2014 "),Vj=a("a"),k8o=o("ConvBertForTokenClassification"),R8o=o(" (ConvBERT model)"),S8o=l(),yv=a("li"),Pse=a("strong"),P8o=o("data2vec-text"),$8o=o(" \u2014 "),zj=a("a"),I8o=o("Data2VecTextForTokenClassification"),j8o=o(" (Data2VecText model)"),D8o=l(),wv=a("li"),$se=a("strong"),N8o=o("deberta"),q8o=o(" \u2014 "),Wj=a("a"),O8o=o("DebertaForTokenClassification"),G8o=o(" (DeBERTa model)"),X8o=l(),Av=a("li"),Ise=a("strong"),V8o=o("deberta-v2"),z8o=o(" \u2014 "),Qj=a("a"),W8o=o("DebertaV2ForTokenClassification"),Q8o=o(" (DeBERTa-v2 model)"),H8o=l(),Lv=a("li"),jse=a("strong"),U8o=o("distilbert"),J8o=o(" \u2014 "),Hj=a("a"),Y8o=o("DistilBertForTokenClassification"),K8o=o(" (DistilBERT model)"),Z8o=l(),Bv=a("li"),Dse=a("strong"),e7o=o("electra"),o7o=o(" \u2014 "),Uj=a("a"),r7o=o("ElectraForTokenClassification"),t7o=o(" (ELECTRA model)"),a7o=l(),xv=a("li"),Nse=a("strong"),s7o=o("flaubert"),n7o=o(" \u2014 "),Jj=a("a"),l7o=o("FlaubertForTokenClassification"),i7o=o(" (FlauBERT model)"),d7o=l(),kv=a("li"),qse=a("strong"),c7o=o("fnet"),m7o=o(" \u2014 "),Yj=a("a"),f7o=o("FNetForTokenClassification"),g7o=o(" (FNet model)"),h7o=l(),Rv=a("li"),Ose=a("strong"),u7o=o("funnel"),p7o=o(" \u2014 "),Kj=a("a"),_7o=o("FunnelForTokenClassification"),b7o=o(" (Funnel Transformer model)"),v7o=l(),Sv=a("li"),Gse=a("strong"),T7o=o("gpt2"),F7o=o(" \u2014 "),Zj=a("a"),C7o=o("GPT2ForTokenClassification"),M7o=o(" (OpenAI GPT-2 model)"),E7o=l(),Pv=a("li"),Xse=a("strong"),y7o=o("ibert"),w7o=o(" \u2014 "),eD=a("a"),A7o=o("IBertForTokenClassification"),L7o=o(" (I-BERT model)"),B7o=l(),$v=a("li"),Vse=a("strong"),x7o=o("layoutlm"),k7o=o(" \u2014 "),oD=a("a"),R7o=o("LayoutLMForTokenClassification"),S7o=o(" (LayoutLM model)"),P7o=l(),Iv=a("li"),zse=a("strong"),$7o=o("layoutlmv2"),I7o=o(" \u2014 "),rD=a("a"),j7o=o("LayoutLMv2ForTokenClassification"),D7o=o(" (LayoutLMv2 model)"),N7o=l(),jv=a("li"),Wse=a("strong"),q7o=o("longformer"),O7o=o(" \u2014 "),tD=a("a"),G7o=o("LongformerForTokenClassification"),X7o=o(" (Longformer model)"),V7o=l(),Dv=a("li"),Qse=a("strong"),z7o=o("megatron-bert"),W7o=o(" \u2014 "),aD=a("a"),Q7o=o("MegatronBertForTokenClassification"),H7o=o(" (MegatronBert model)"),U7o=l(),Nv=a("li"),Hse=a("strong"),J7o=o("mobilebert"),Y7o=o(" \u2014 "),sD=a("a"),K7o=o("MobileBertForTokenClassification"),Z7o=o(" (MobileBERT model)"),e9o=l(),qv=a("li"),Use=a("strong"),o9o=o("mpnet"),r9o=o(" \u2014 "),nD=a("a"),t9o=o("MPNetForTokenClassification"),a9o=o(" (MPNet model)"),s9o=l(),Ov=a("li"),Jse=a("strong"),n9o=o("nystromformer"),l9o=o(" \u2014 "),lD=a("a"),i9o=o("NystromformerForTokenClassification"),d9o=o(" (Nystromformer model)"),c9o=l(),Gv=a("li"),Yse=a("strong"),m9o=o("qdqbert"),f9o=o(" \u2014 "),iD=a("a"),g9o=o("QDQBertForTokenClassification"),h9o=o(" (QDQBert model)"),u9o=l(),Xv=a("li"),Kse=a("strong"),p9o=o("rembert"),_9o=o(" \u2014 "),dD=a("a"),b9o=o("RemBertForTokenClassification"),v9o=o(" (RemBERT model)"),T9o=l(),Vv=a("li"),Zse=a("strong"),F9o=o("roberta"),C9o=o(" \u2014 "),cD=a("a"),M9o=o("RobertaForTokenClassification"),E9o=o(" (RoBERTa model)"),y9o=l(),zv=a("li"),ene=a("strong"),w9o=o("roformer"),A9o=o(" \u2014 "),mD=a("a"),L9o=o("RoFormerForTokenClassification"),B9o=o(" (RoFormer model)"),x9o=l(),Wv=a("li"),one=a("strong"),k9o=o("squeezebert"),R9o=o(" \u2014 "),fD=a("a"),S9o=o("SqueezeBertForTokenClassification"),P9o=o(" (SqueezeBERT model)"),$9o=l(),Qv=a("li"),rne=a("strong"),I9o=o("xlm"),j9o=o(" \u2014 "),gD=a("a"),D9o=o("XLMForTokenClassification"),N9o=o(" (XLM model)"),q9o=l(),Hv=a("li"),tne=a("strong"),O9o=o("xlm-roberta"),G9o=o(" \u2014 "),hD=a("a"),X9o=o("XLMRobertaForTokenClassification"),V9o=o(" (XLM-RoBERTa model)"),z9o=l(),Uv=a("li"),ane=a("strong"),W9o=o("xlm-roberta-xl"),Q9o=o(" \u2014 "),uD=a("a"),H9o=o("XLMRobertaXLForTokenClassification"),U9o=o(" (XLM-RoBERTa-XL model)"),J9o=l(),Jv=a("li"),sne=a("strong"),Y9o=o("xlnet"),K9o=o(" \u2014 "),pD=a("a"),Z9o=o("XLNetForTokenClassification"),eBo=o(" (XLNet model)"),oBo=l(),Yv=a("li"),nne=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),_D=a("a"),aBo=o("YosoForTokenClassification"),sBo=o(" (YOSO model)"),nBo=l(),Kv=a("p"),lBo=o("The model is set in evaluation mode by default using "),lne=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ine=a("code"),cBo=o("model.train()"),mBo=l(),dne=a("p"),fBo=o("Examples:"),gBo=l(),m(Sw.$$.fragment),Bxe=l(),Md=a("h2"),Zv=a("a"),cne=a("span"),m(Pw.$$.fragment),hBo=l(),mne=a("span"),uBo=o("AutoModelForQuestionAnswering"),xxe=l(),sr=a("div"),m($w.$$.fragment),pBo=l(),Ed=a("p"),_Bo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fne=a("code"),bBo=o("from_pretrained()"),vBo=o("class method or the "),gne=a("code"),TBo=o("from_config()"),FBo=o(`class
method.`),CBo=l(),Iw=a("p"),MBo=o("This class cannot be instantiated directly using "),hne=a("code"),EBo=o("__init__()"),yBo=o(" (throws an error)."),wBo=l(),Zr=a("div"),m(jw.$$.fragment),ABo=l(),une=a("p"),LBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BBo=l(),yd=a("p"),xBo=o(`Note:
Loading a model from its configuration file does `),pne=a("strong"),kBo=o("not"),RBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=a("code"),SBo=o("from_pretrained()"),PBo=o("to load the model weights."),$Bo=l(),bne=a("p"),IBo=o("Examples:"),jBo=l(),m(Dw.$$.fragment),DBo=l(),We=a("div"),m(Nw.$$.fragment),NBo=l(),vne=a("p"),qBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OBo=l(),Ka=a("p"),GBo=o("The model class to instantiate is selected based on the "),Tne=a("code"),XBo=o("model_type"),VBo=o(` property of the config object (either
passed as an argument or loaded from `),Fne=a("code"),zBo=o("pretrained_model_name_or_path"),WBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=a("code"),QBo=o("pretrained_model_name_or_path"),HBo=o(":"),UBo=l(),R=a("ul"),eT=a("li"),Mne=a("strong"),JBo=o("albert"),YBo=o(" \u2014 "),bD=a("a"),KBo=o("AlbertForQuestionAnswering"),ZBo=o(" (ALBERT model)"),exo=l(),oT=a("li"),Ene=a("strong"),oxo=o("bart"),rxo=o(" \u2014 "),vD=a("a"),txo=o("BartForQuestionAnswering"),axo=o(" (BART model)"),sxo=l(),rT=a("li"),yne=a("strong"),nxo=o("bert"),lxo=o(" \u2014 "),TD=a("a"),ixo=o("BertForQuestionAnswering"),dxo=o(" (BERT model)"),cxo=l(),tT=a("li"),wne=a("strong"),mxo=o("big_bird"),fxo=o(" \u2014 "),FD=a("a"),gxo=o("BigBirdForQuestionAnswering"),hxo=o(" (BigBird model)"),uxo=l(),aT=a("li"),Ane=a("strong"),pxo=o("bigbird_pegasus"),_xo=o(" \u2014 "),CD=a("a"),bxo=o("BigBirdPegasusForQuestionAnswering"),vxo=o(" (BigBirdPegasus model)"),Txo=l(),sT=a("li"),Lne=a("strong"),Fxo=o("camembert"),Cxo=o(" \u2014 "),MD=a("a"),Mxo=o("CamembertForQuestionAnswering"),Exo=o(" (CamemBERT model)"),yxo=l(),nT=a("li"),Bne=a("strong"),wxo=o("canine"),Axo=o(" \u2014 "),ED=a("a"),Lxo=o("CanineForQuestionAnswering"),Bxo=o(" (Canine model)"),xxo=l(),lT=a("li"),xne=a("strong"),kxo=o("convbert"),Rxo=o(" \u2014 "),yD=a("a"),Sxo=o("ConvBertForQuestionAnswering"),Pxo=o(" (ConvBERT model)"),$xo=l(),iT=a("li"),kne=a("strong"),Ixo=o("data2vec-text"),jxo=o(" \u2014 "),wD=a("a"),Dxo=o("Data2VecTextForQuestionAnswering"),Nxo=o(" (Data2VecText model)"),qxo=l(),dT=a("li"),Rne=a("strong"),Oxo=o("deberta"),Gxo=o(" \u2014 "),AD=a("a"),Xxo=o("DebertaForQuestionAnswering"),Vxo=o(" (DeBERTa model)"),zxo=l(),cT=a("li"),Sne=a("strong"),Wxo=o("deberta-v2"),Qxo=o(" \u2014 "),LD=a("a"),Hxo=o("DebertaV2ForQuestionAnswering"),Uxo=o(" (DeBERTa-v2 model)"),Jxo=l(),mT=a("li"),Pne=a("strong"),Yxo=o("distilbert"),Kxo=o(" \u2014 "),BD=a("a"),Zxo=o("DistilBertForQuestionAnswering"),eko=o(" (DistilBERT model)"),oko=l(),fT=a("li"),$ne=a("strong"),rko=o("electra"),tko=o(" \u2014 "),xD=a("a"),ako=o("ElectraForQuestionAnswering"),sko=o(" (ELECTRA model)"),nko=l(),gT=a("li"),Ine=a("strong"),lko=o("flaubert"),iko=o(" \u2014 "),kD=a("a"),dko=o("FlaubertForQuestionAnsweringSimple"),cko=o(" (FlauBERT model)"),mko=l(),hT=a("li"),jne=a("strong"),fko=o("fnet"),gko=o(" \u2014 "),RD=a("a"),hko=o("FNetForQuestionAnswering"),uko=o(" (FNet model)"),pko=l(),uT=a("li"),Dne=a("strong"),_ko=o("funnel"),bko=o(" \u2014 "),SD=a("a"),vko=o("FunnelForQuestionAnswering"),Tko=o(" (Funnel Transformer model)"),Fko=l(),pT=a("li"),Nne=a("strong"),Cko=o("gptj"),Mko=o(" \u2014 "),PD=a("a"),Eko=o("GPTJForQuestionAnswering"),yko=o(" (GPT-J model)"),wko=l(),_T=a("li"),qne=a("strong"),Ako=o("ibert"),Lko=o(" \u2014 "),$D=a("a"),Bko=o("IBertForQuestionAnswering"),xko=o(" (I-BERT model)"),kko=l(),bT=a("li"),One=a("strong"),Rko=o("layoutlmv2"),Sko=o(" \u2014 "),ID=a("a"),Pko=o("LayoutLMv2ForQuestionAnswering"),$ko=o(" (LayoutLMv2 model)"),Iko=l(),vT=a("li"),Gne=a("strong"),jko=o("led"),Dko=o(" \u2014 "),jD=a("a"),Nko=o("LEDForQuestionAnswering"),qko=o(" (LED model)"),Oko=l(),TT=a("li"),Xne=a("strong"),Gko=o("longformer"),Xko=o(" \u2014 "),DD=a("a"),Vko=o("LongformerForQuestionAnswering"),zko=o(" (Longformer model)"),Wko=l(),FT=a("li"),Vne=a("strong"),Qko=o("lxmert"),Hko=o(" \u2014 "),ND=a("a"),Uko=o("LxmertForQuestionAnswering"),Jko=o(" (LXMERT model)"),Yko=l(),CT=a("li"),zne=a("strong"),Kko=o("mbart"),Zko=o(" \u2014 "),qD=a("a"),eRo=o("MBartForQuestionAnswering"),oRo=o(" (mBART model)"),rRo=l(),MT=a("li"),Wne=a("strong"),tRo=o("megatron-bert"),aRo=o(" \u2014 "),OD=a("a"),sRo=o("MegatronBertForQuestionAnswering"),nRo=o(" (MegatronBert model)"),lRo=l(),ET=a("li"),Qne=a("strong"),iRo=o("mobilebert"),dRo=o(" \u2014 "),GD=a("a"),cRo=o("MobileBertForQuestionAnswering"),mRo=o(" (MobileBERT model)"),fRo=l(),yT=a("li"),Hne=a("strong"),gRo=o("mpnet"),hRo=o(" \u2014 "),XD=a("a"),uRo=o("MPNetForQuestionAnswering"),pRo=o(" (MPNet model)"),_Ro=l(),wT=a("li"),Une=a("strong"),bRo=o("nystromformer"),vRo=o(" \u2014 "),VD=a("a"),TRo=o("NystromformerForQuestionAnswering"),FRo=o(" (Nystromformer model)"),CRo=l(),AT=a("li"),Jne=a("strong"),MRo=o("qdqbert"),ERo=o(" \u2014 "),zD=a("a"),yRo=o("QDQBertForQuestionAnswering"),wRo=o(" (QDQBert model)"),ARo=l(),LT=a("li"),Yne=a("strong"),LRo=o("reformer"),BRo=o(" \u2014 "),WD=a("a"),xRo=o("ReformerForQuestionAnswering"),kRo=o(" (Reformer model)"),RRo=l(),BT=a("li"),Kne=a("strong"),SRo=o("rembert"),PRo=o(" \u2014 "),QD=a("a"),$Ro=o("RemBertForQuestionAnswering"),IRo=o(" (RemBERT model)"),jRo=l(),xT=a("li"),Zne=a("strong"),DRo=o("roberta"),NRo=o(" \u2014 "),HD=a("a"),qRo=o("RobertaForQuestionAnswering"),ORo=o(" (RoBERTa model)"),GRo=l(),kT=a("li"),ele=a("strong"),XRo=o("roformer"),VRo=o(" \u2014 "),UD=a("a"),zRo=o("RoFormerForQuestionAnswering"),WRo=o(" (RoFormer model)"),QRo=l(),RT=a("li"),ole=a("strong"),HRo=o("splinter"),URo=o(" \u2014 "),JD=a("a"),JRo=o("SplinterForQuestionAnswering"),YRo=o(" (Splinter model)"),KRo=l(),ST=a("li"),rle=a("strong"),ZRo=o("squeezebert"),eSo=o(" \u2014 "),YD=a("a"),oSo=o("SqueezeBertForQuestionAnswering"),rSo=o(" (SqueezeBERT model)"),tSo=l(),PT=a("li"),tle=a("strong"),aSo=o("xlm"),sSo=o(" \u2014 "),KD=a("a"),nSo=o("XLMForQuestionAnsweringSimple"),lSo=o(" (XLM model)"),iSo=l(),$T=a("li"),ale=a("strong"),dSo=o("xlm-roberta"),cSo=o(" \u2014 "),ZD=a("a"),mSo=o("XLMRobertaForQuestionAnswering"),fSo=o(" (XLM-RoBERTa model)"),gSo=l(),IT=a("li"),sle=a("strong"),hSo=o("xlm-roberta-xl"),uSo=o(" \u2014 "),eN=a("a"),pSo=o("XLMRobertaXLForQuestionAnswering"),_So=o(" (XLM-RoBERTa-XL model)"),bSo=l(),jT=a("li"),nle=a("strong"),vSo=o("xlnet"),TSo=o(" \u2014 "),oN=a("a"),FSo=o("XLNetForQuestionAnsweringSimple"),CSo=o(" (XLNet model)"),MSo=l(),DT=a("li"),lle=a("strong"),ESo=o("yoso"),ySo=o(" \u2014 "),rN=a("a"),wSo=o("YosoForQuestionAnswering"),ASo=o(" (YOSO model)"),LSo=l(),NT=a("p"),BSo=o("The model is set in evaluation mode by default using "),ile=a("code"),xSo=o("model.eval()"),kSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),RSo=o("model.train()"),SSo=l(),cle=a("p"),PSo=o("Examples:"),$So=l(),m(qw.$$.fragment),kxe=l(),wd=a("h2"),qT=a("a"),mle=a("span"),m(Ow.$$.fragment),ISo=l(),fle=a("span"),jSo=o("AutoModelForTableQuestionAnswering"),Rxe=l(),nr=a("div"),m(Gw.$$.fragment),DSo=l(),Ad=a("p"),NSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gle=a("code"),qSo=o("from_pretrained()"),OSo=o("class method or the "),hle=a("code"),GSo=o("from_config()"),XSo=o(`class
method.`),VSo=l(),Xw=a("p"),zSo=o("This class cannot be instantiated directly using "),ule=a("code"),WSo=o("__init__()"),QSo=o(" (throws an error)."),HSo=l(),et=a("div"),m(Vw.$$.fragment),USo=l(),ple=a("p"),JSo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YSo=l(),Ld=a("p"),KSo=o(`Note:
Loading a model from its configuration file does `),_le=a("strong"),ZSo=o("not"),ePo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=a("code"),oPo=o("from_pretrained()"),rPo=o("to load the model weights."),tPo=l(),vle=a("p"),aPo=o("Examples:"),sPo=l(),m(zw.$$.fragment),nPo=l(),Qe=a("div"),m(Ww.$$.fragment),lPo=l(),Tle=a("p"),iPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dPo=l(),Za=a("p"),cPo=o("The model class to instantiate is selected based on the "),Fle=a("code"),mPo=o("model_type"),fPo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),gPo=o("pretrained_model_name_or_path"),hPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=a("code"),uPo=o("pretrained_model_name_or_path"),pPo=o(":"),_Po=l(),Ele=a("ul"),OT=a("li"),yle=a("strong"),bPo=o("tapas"),vPo=o(" \u2014 "),tN=a("a"),TPo=o("TapasForQuestionAnswering"),FPo=o(" (TAPAS model)"),CPo=l(),GT=a("p"),MPo=o("The model is set in evaluation mode by default using "),wle=a("code"),EPo=o("model.eval()"),yPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ale=a("code"),wPo=o("model.train()"),APo=l(),Lle=a("p"),LPo=o("Examples:"),BPo=l(),m(Qw.$$.fragment),Sxe=l(),Bd=a("h2"),XT=a("a"),Ble=a("span"),m(Hw.$$.fragment),xPo=l(),xle=a("span"),kPo=o("AutoModelForImageClassification"),Pxe=l(),lr=a("div"),m(Uw.$$.fragment),RPo=l(),xd=a("p"),SPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kle=a("code"),PPo=o("from_pretrained()"),$Po=o("class method or the "),Rle=a("code"),IPo=o("from_config()"),jPo=o(`class
method.`),DPo=l(),Jw=a("p"),NPo=o("This class cannot be instantiated directly using "),Sle=a("code"),qPo=o("__init__()"),OPo=o(" (throws an error)."),GPo=l(),ot=a("div"),m(Yw.$$.fragment),XPo=l(),Ple=a("p"),VPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zPo=l(),kd=a("p"),WPo=o(`Note:
Loading a model from its configuration file does `),$le=a("strong"),QPo=o("not"),HPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ile=a("code"),UPo=o("from_pretrained()"),JPo=o("to load the model weights."),YPo=l(),jle=a("p"),KPo=o("Examples:"),ZPo=l(),m(Kw.$$.fragment),e$o=l(),He=a("div"),m(Zw.$$.fragment),o$o=l(),Dle=a("p"),r$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t$o=l(),es=a("p"),a$o=o("The model class to instantiate is selected based on the "),Nle=a("code"),s$o=o("model_type"),n$o=o(` property of the config object (either
passed as an argument or loaded from `),qle=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ole=a("code"),d$o=o("pretrained_model_name_or_path"),c$o=o(":"),m$o=l(),Fe=a("ul"),VT=a("li"),Gle=a("strong"),f$o=o("beit"),g$o=o(" \u2014 "),aN=a("a"),h$o=o("BeitForImageClassification"),u$o=o(" (BEiT model)"),p$o=l(),zT=a("li"),Xle=a("strong"),_$o=o("convnext"),b$o=o(" \u2014 "),sN=a("a"),v$o=o("ConvNextForImageClassification"),T$o=o(" (ConvNext model)"),F$o=l(),qn=a("li"),Vle=a("strong"),C$o=o("deit"),M$o=o(" \u2014 "),nN=a("a"),E$o=o("DeiTForImageClassification"),y$o=o(" or "),lN=a("a"),w$o=o("DeiTForImageClassificationWithTeacher"),A$o=o(" (DeiT model)"),L$o=l(),WT=a("li"),zle=a("strong"),B$o=o("imagegpt"),x$o=o(" \u2014 "),iN=a("a"),k$o=o("ImageGPTForImageClassification"),R$o=o(" (ImageGPT model)"),S$o=l(),ma=a("li"),Wle=a("strong"),P$o=o("perceiver"),$$o=o(" \u2014 "),dN=a("a"),I$o=o("PerceiverForImageClassificationLearned"),j$o=o(" or "),cN=a("a"),D$o=o("PerceiverForImageClassificationFourier"),N$o=o(" or "),mN=a("a"),q$o=o("PerceiverForImageClassificationConvProcessing"),O$o=o(" (Perceiver model)"),G$o=l(),QT=a("li"),Qle=a("strong"),X$o=o("poolformer"),V$o=o(" \u2014 "),fN=a("a"),z$o=o("PoolFormerForImageClassification"),W$o=o(" (PoolFormer model)"),Q$o=l(),HT=a("li"),Hle=a("strong"),H$o=o("segformer"),U$o=o(" \u2014 "),gN=a("a"),J$o=o("SegformerForImageClassification"),Y$o=o(" (SegFormer model)"),K$o=l(),UT=a("li"),Ule=a("strong"),Z$o=o("swin"),eIo=o(" \u2014 "),hN=a("a"),oIo=o("SwinForImageClassification"),rIo=o(" (Swin model)"),tIo=l(),JT=a("li"),Jle=a("strong"),aIo=o("vit"),sIo=o(" \u2014 "),uN=a("a"),nIo=o("ViTForImageClassification"),lIo=o(" (ViT model)"),iIo=l(),YT=a("p"),dIo=o("The model is set in evaluation mode by default using "),Yle=a("code"),cIo=o("model.eval()"),mIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),fIo=o("model.train()"),gIo=l(),Zle=a("p"),hIo=o("Examples:"),uIo=l(),m(e6.$$.fragment),$xe=l(),Rd=a("h2"),KT=a("a"),eie=a("span"),m(o6.$$.fragment),pIo=l(),oie=a("span"),_Io=o("AutoModelForVision2Seq"),Ixe=l(),ir=a("div"),m(r6.$$.fragment),bIo=l(),Sd=a("p"),vIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rie=a("code"),TIo=o("from_pretrained()"),FIo=o("class method or the "),tie=a("code"),CIo=o("from_config()"),MIo=o(`class
method.`),EIo=l(),t6=a("p"),yIo=o("This class cannot be instantiated directly using "),aie=a("code"),wIo=o("__init__()"),AIo=o(" (throws an error)."),LIo=l(),rt=a("div"),m(a6.$$.fragment),BIo=l(),sie=a("p"),xIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kIo=l(),Pd=a("p"),RIo=o(`Note:
Loading a model from its configuration file does `),nie=a("strong"),SIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lie=a("code"),$Io=o("from_pretrained()"),IIo=o("to load the model weights."),jIo=l(),iie=a("p"),DIo=o("Examples:"),NIo=l(),m(s6.$$.fragment),qIo=l(),Ue=a("div"),m(n6.$$.fragment),OIo=l(),die=a("p"),GIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XIo=l(),os=a("p"),VIo=o("The model class to instantiate is selected based on the "),cie=a("code"),zIo=o("model_type"),WIo=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),QIo=o("pretrained_model_name_or_path"),HIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(":"),YIo=l(),gie=a("ul"),ZT=a("li"),hie=a("strong"),KIo=o("vision-encoder-decoder"),ZIo=o(" \u2014 "),pN=a("a"),ejo=o("VisionEncoderDecoderModel"),ojo=o(" (Vision Encoder decoder model)"),rjo=l(),e1=a("p"),tjo=o("The model is set in evaluation mode by default using "),uie=a("code"),ajo=o("model.eval()"),sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pie=a("code"),njo=o("model.train()"),ljo=l(),_ie=a("p"),ijo=o("Examples:"),djo=l(),m(l6.$$.fragment),jxe=l(),$d=a("h2"),o1=a("a"),bie=a("span"),m(i6.$$.fragment),cjo=l(),vie=a("span"),mjo=o("AutoModelForAudioClassification"),Dxe=l(),dr=a("div"),m(d6.$$.fragment),fjo=l(),Id=a("p"),gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tie=a("code"),hjo=o("from_pretrained()"),ujo=o("class method or the "),Fie=a("code"),pjo=o("from_config()"),_jo=o(`class
method.`),bjo=l(),c6=a("p"),vjo=o("This class cannot be instantiated directly using "),Cie=a("code"),Tjo=o("__init__()"),Fjo=o(" (throws an error)."),Cjo=l(),tt=a("div"),m(m6.$$.fragment),Mjo=l(),Mie=a("p"),Ejo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yjo=l(),jd=a("p"),wjo=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),Ajo=o("not"),Ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yie=a("code"),Bjo=o("from_pretrained()"),xjo=o("to load the model weights."),kjo=l(),wie=a("p"),Rjo=o("Examples:"),Sjo=l(),m(f6.$$.fragment),Pjo=l(),Je=a("div"),m(g6.$$.fragment),$jo=l(),Aie=a("p"),Ijo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jjo=l(),rs=a("p"),Djo=o("The model class to instantiate is selected based on the "),Lie=a("code"),Njo=o("model_type"),qjo=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),Ojo=o("pretrained_model_name_or_path"),Gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=a("code"),Xjo=o("pretrained_model_name_or_path"),Vjo=o(":"),zjo=l(),xe=a("ul"),r1=a("li"),kie=a("strong"),Wjo=o("data2vec-audio"),Qjo=o(" \u2014 "),_N=a("a"),Hjo=o("Data2VecAudioForSequenceClassification"),Ujo=o(" (Data2VecAudio model)"),Jjo=l(),t1=a("li"),Rie=a("strong"),Yjo=o("hubert"),Kjo=o(" \u2014 "),bN=a("a"),Zjo=o("HubertForSequenceClassification"),eDo=o(" (Hubert model)"),oDo=l(),a1=a("li"),Sie=a("strong"),rDo=o("sew"),tDo=o(" \u2014 "),vN=a("a"),aDo=o("SEWForSequenceClassification"),sDo=o(" (SEW model)"),nDo=l(),s1=a("li"),Pie=a("strong"),lDo=o("sew-d"),iDo=o(" \u2014 "),TN=a("a"),dDo=o("SEWDForSequenceClassification"),cDo=o(" (SEW-D model)"),mDo=l(),n1=a("li"),$ie=a("strong"),fDo=o("unispeech"),gDo=o(" \u2014 "),FN=a("a"),hDo=o("UniSpeechForSequenceClassification"),uDo=o(" (UniSpeech model)"),pDo=l(),l1=a("li"),Iie=a("strong"),_Do=o("unispeech-sat"),bDo=o(" \u2014 "),CN=a("a"),vDo=o("UniSpeechSatForSequenceClassification"),TDo=o(" (UniSpeechSat model)"),FDo=l(),i1=a("li"),jie=a("strong"),CDo=o("wav2vec2"),MDo=o(" \u2014 "),MN=a("a"),EDo=o("Wav2Vec2ForSequenceClassification"),yDo=o(" (Wav2Vec2 model)"),wDo=l(),d1=a("li"),Die=a("strong"),ADo=o("wavlm"),LDo=o(" \u2014 "),EN=a("a"),BDo=o("WavLMForSequenceClassification"),xDo=o(" (WavLM model)"),kDo=l(),c1=a("p"),RDo=o("The model is set in evaluation mode by default using "),Nie=a("code"),SDo=o("model.eval()"),PDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),$Do=o("model.train()"),IDo=l(),Oie=a("p"),jDo=o("Examples:"),DDo=l(),m(h6.$$.fragment),Nxe=l(),Dd=a("h2"),m1=a("a"),Gie=a("span"),m(u6.$$.fragment),NDo=l(),Xie=a("span"),qDo=o("AutoModelForAudioFrameClassification"),qxe=l(),cr=a("div"),m(p6.$$.fragment),ODo=l(),Nd=a("p"),GDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Vie=a("code"),XDo=o("from_pretrained()"),VDo=o("class method or the "),zie=a("code"),zDo=o("from_config()"),WDo=o(`class
method.`),QDo=l(),_6=a("p"),HDo=o("This class cannot be instantiated directly using "),Wie=a("code"),UDo=o("__init__()"),JDo=o(" (throws an error)."),YDo=l(),at=a("div"),m(b6.$$.fragment),KDo=l(),Qie=a("p"),ZDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eNo=l(),qd=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),Hie=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uie=a("code"),aNo=o("from_pretrained()"),sNo=o("to load the model weights."),nNo=l(),Jie=a("p"),lNo=o("Examples:"),iNo=l(),m(v6.$$.fragment),dNo=l(),Ye=a("div"),m(T6.$$.fragment),cNo=l(),Yie=a("p"),mNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fNo=l(),ts=a("p"),gNo=o("The model class to instantiate is selected based on the "),Kie=a("code"),hNo=o("model_type"),uNo=o(` property of the config object (either
passed as an argument or loaded from `),Zie=a("code"),pNo=o("pretrained_model_name_or_path"),_No=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=a("code"),bNo=o("pretrained_model_name_or_path"),vNo=o(":"),TNo=l(),as=a("ul"),f1=a("li"),ode=a("strong"),FNo=o("data2vec-audio"),CNo=o(" \u2014 "),yN=a("a"),MNo=o("Data2VecAudioForAudioFrameClassification"),ENo=o(" (Data2VecAudio model)"),yNo=l(),g1=a("li"),rde=a("strong"),wNo=o("unispeech-sat"),ANo=o(" \u2014 "),wN=a("a"),LNo=o("UniSpeechSatForAudioFrameClassification"),BNo=o(" (UniSpeechSat model)"),xNo=l(),h1=a("li"),tde=a("strong"),kNo=o("wav2vec2"),RNo=o(" \u2014 "),AN=a("a"),SNo=o("Wav2Vec2ForAudioFrameClassification"),PNo=o(" (Wav2Vec2 model)"),$No=l(),u1=a("li"),ade=a("strong"),INo=o("wavlm"),jNo=o(" \u2014 "),LN=a("a"),DNo=o("WavLMForAudioFrameClassification"),NNo=o(" (WavLM model)"),qNo=l(),p1=a("p"),ONo=o("The model is set in evaluation mode by default using "),sde=a("code"),GNo=o("model.eval()"),XNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nde=a("code"),VNo=o("model.train()"),zNo=l(),lde=a("p"),WNo=o("Examples:"),QNo=l(),m(F6.$$.fragment),Oxe=l(),Od=a("h2"),_1=a("a"),ide=a("span"),m(C6.$$.fragment),HNo=l(),dde=a("span"),UNo=o("AutoModelForCTC"),Gxe=l(),mr=a("div"),m(M6.$$.fragment),JNo=l(),Gd=a("p"),YNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cde=a("code"),KNo=o("from_pretrained()"),ZNo=o("class method or the "),mde=a("code"),eqo=o("from_config()"),oqo=o(`class
method.`),rqo=l(),E6=a("p"),tqo=o("This class cannot be instantiated directly using "),fde=a("code"),aqo=o("__init__()"),sqo=o(" (throws an error)."),nqo=l(),st=a("div"),m(y6.$$.fragment),lqo=l(),gde=a("p"),iqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dqo=l(),Xd=a("p"),cqo=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),mqo=o("not"),fqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=a("code"),gqo=o("from_pretrained()"),hqo=o("to load the model weights."),uqo=l(),pde=a("p"),pqo=o("Examples:"),_qo=l(),m(w6.$$.fragment),bqo=l(),Ke=a("div"),m(A6.$$.fragment),vqo=l(),_de=a("p"),Tqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fqo=l(),ss=a("p"),Cqo=o("The model class to instantiate is selected based on the "),bde=a("code"),Mqo=o("model_type"),Eqo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),yqo=o("pretrained_model_name_or_path"),wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tde=a("code"),Aqo=o("pretrained_model_name_or_path"),Lqo=o(":"),Bqo=l(),ke=a("ul"),b1=a("li"),Fde=a("strong"),xqo=o("data2vec-audio"),kqo=o(" \u2014 "),BN=a("a"),Rqo=o("Data2VecAudioForCTC"),Sqo=o(" (Data2VecAudio model)"),Pqo=l(),v1=a("li"),Cde=a("strong"),$qo=o("hubert"),Iqo=o(" \u2014 "),xN=a("a"),jqo=o("HubertForCTC"),Dqo=o(" (Hubert model)"),Nqo=l(),T1=a("li"),Mde=a("strong"),qqo=o("sew"),Oqo=o(" \u2014 "),kN=a("a"),Gqo=o("SEWForCTC"),Xqo=o(" (SEW model)"),Vqo=l(),F1=a("li"),Ede=a("strong"),zqo=o("sew-d"),Wqo=o(" \u2014 "),RN=a("a"),Qqo=o("SEWDForCTC"),Hqo=o(" (SEW-D model)"),Uqo=l(),C1=a("li"),yde=a("strong"),Jqo=o("unispeech"),Yqo=o(" \u2014 "),SN=a("a"),Kqo=o("UniSpeechForCTC"),Zqo=o(" (UniSpeech model)"),eOo=l(),M1=a("li"),wde=a("strong"),oOo=o("unispeech-sat"),rOo=o(" \u2014 "),PN=a("a"),tOo=o("UniSpeechSatForCTC"),aOo=o(" (UniSpeechSat model)"),sOo=l(),E1=a("li"),Ade=a("strong"),nOo=o("wav2vec2"),lOo=o(" \u2014 "),$N=a("a"),iOo=o("Wav2Vec2ForCTC"),dOo=o(" (Wav2Vec2 model)"),cOo=l(),y1=a("li"),Lde=a("strong"),mOo=o("wavlm"),fOo=o(" \u2014 "),IN=a("a"),gOo=o("WavLMForCTC"),hOo=o(" (WavLM model)"),uOo=l(),w1=a("p"),pOo=o("The model is set in evaluation mode by default using "),Bde=a("code"),_Oo=o("model.eval()"),bOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=a("code"),vOo=o("model.train()"),TOo=l(),kde=a("p"),FOo=o("Examples:"),COo=l(),m(L6.$$.fragment),Xxe=l(),Vd=a("h2"),A1=a("a"),Rde=a("span"),m(B6.$$.fragment),MOo=l(),Sde=a("span"),EOo=o("AutoModelForSpeechSeq2Seq"),Vxe=l(),fr=a("div"),m(x6.$$.fragment),yOo=l(),zd=a("p"),wOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pde=a("code"),AOo=o("from_pretrained()"),LOo=o("class method or the "),$de=a("code"),BOo=o("from_config()"),xOo=o(`class
method.`),kOo=l(),k6=a("p"),ROo=o("This class cannot be instantiated directly using "),Ide=a("code"),SOo=o("__init__()"),POo=o(" (throws an error)."),$Oo=l(),nt=a("div"),m(R6.$$.fragment),IOo=l(),jde=a("p"),jOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DOo=l(),Wd=a("p"),NOo=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),qOo=o("not"),OOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=a("code"),GOo=o("from_pretrained()"),XOo=o("to load the model weights."),VOo=l(),qde=a("p"),zOo=o("Examples:"),WOo=l(),m(S6.$$.fragment),QOo=l(),Ze=a("div"),m(P6.$$.fragment),HOo=l(),Ode=a("p"),UOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JOo=l(),ns=a("p"),YOo=o("The model class to instantiate is selected based on the "),Gde=a("code"),KOo=o("model_type"),ZOo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),eGo=o("pretrained_model_name_or_path"),oGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),rGo=o("pretrained_model_name_or_path"),tGo=o(":"),aGo=l(),$6=a("ul"),L1=a("li"),zde=a("strong"),sGo=o("speech-encoder-decoder"),nGo=o(" \u2014 "),jN=a("a"),lGo=o("SpeechEncoderDecoderModel"),iGo=o(" (Speech Encoder decoder model)"),dGo=l(),B1=a("li"),Wde=a("strong"),cGo=o("speech_to_text"),mGo=o(" \u2014 "),DN=a("a"),fGo=o("Speech2TextForConditionalGeneration"),gGo=o(" (Speech2Text model)"),hGo=l(),x1=a("p"),uGo=o("The model is set in evaluation mode by default using "),Qde=a("code"),pGo=o("model.eval()"),_Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=a("code"),bGo=o("model.train()"),vGo=l(),Ude=a("p"),TGo=o("Examples:"),FGo=l(),m(I6.$$.fragment),zxe=l(),Qd=a("h2"),k1=a("a"),Jde=a("span"),m(j6.$$.fragment),CGo=l(),Yde=a("span"),MGo=o("AutoModelForAudioXVector"),Wxe=l(),gr=a("div"),m(D6.$$.fragment),EGo=l(),Hd=a("p"),yGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Kde=a("code"),wGo=o("from_pretrained()"),AGo=o("class method or the "),Zde=a("code"),LGo=o("from_config()"),BGo=o(`class
method.`),xGo=l(),N6=a("p"),kGo=o("This class cannot be instantiated directly using "),ece=a("code"),RGo=o("__init__()"),SGo=o(" (throws an error)."),PGo=l(),lt=a("div"),m(q6.$$.fragment),$Go=l(),oce=a("p"),IGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jGo=l(),Ud=a("p"),DGo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),NGo=o("not"),qGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=a("code"),OGo=o("from_pretrained()"),GGo=o("to load the model weights."),XGo=l(),ace=a("p"),VGo=o("Examples:"),zGo=l(),m(O6.$$.fragment),WGo=l(),eo=a("div"),m(G6.$$.fragment),QGo=l(),sce=a("p"),HGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UGo=l(),ls=a("p"),JGo=o("The model class to instantiate is selected based on the "),nce=a("code"),YGo=o("model_type"),KGo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),ZGo=o("pretrained_model_name_or_path"),eXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),oXo=o("pretrained_model_name_or_path"),rXo=o(":"),tXo=l(),is=a("ul"),R1=a("li"),dce=a("strong"),aXo=o("data2vec-audio"),sXo=o(" \u2014 "),NN=a("a"),nXo=o("Data2VecAudioForXVector"),lXo=o(" (Data2VecAudio model)"),iXo=l(),S1=a("li"),cce=a("strong"),dXo=o("unispeech-sat"),cXo=o(" \u2014 "),qN=a("a"),mXo=o("UniSpeechSatForXVector"),fXo=o(" (UniSpeechSat model)"),gXo=l(),P1=a("li"),mce=a("strong"),hXo=o("wav2vec2"),uXo=o(" \u2014 "),ON=a("a"),pXo=o("Wav2Vec2ForXVector"),_Xo=o(" (Wav2Vec2 model)"),bXo=l(),$1=a("li"),fce=a("strong"),vXo=o("wavlm"),TXo=o(" \u2014 "),GN=a("a"),FXo=o("WavLMForXVector"),CXo=o(" (WavLM model)"),MXo=l(),I1=a("p"),EXo=o("The model is set in evaluation mode by default using "),gce=a("code"),yXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=a("code"),AXo=o("model.train()"),LXo=l(),uce=a("p"),BXo=o("Examples:"),xXo=l(),m(X6.$$.fragment),Qxe=l(),Jd=a("h2"),j1=a("a"),pce=a("span"),m(V6.$$.fragment),kXo=l(),_ce=a("span"),RXo=o("AutoModelForMaskedImageModeling"),Hxe=l(),hr=a("div"),m(z6.$$.fragment),SXo=l(),Yd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bce=a("code"),$Xo=o("from_pretrained()"),IXo=o("class method or the "),vce=a("code"),jXo=o("from_config()"),DXo=o(`class
method.`),NXo=l(),W6=a("p"),qXo=o("This class cannot be instantiated directly using "),Tce=a("code"),OXo=o("__init__()"),GXo=o(" (throws an error)."),XXo=l(),it=a("div"),m(Q6.$$.fragment),VXo=l(),Fce=a("p"),zXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WXo=l(),Kd=a("p"),QXo=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mce=a("code"),JXo=o("from_pretrained()"),YXo=o("to load the model weights."),KXo=l(),Ece=a("p"),ZXo=o("Examples:"),eVo=l(),m(H6.$$.fragment),oVo=l(),oo=a("div"),m(U6.$$.fragment),rVo=l(),yce=a("p"),tVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aVo=l(),ds=a("p"),sVo=o("The model class to instantiate is selected based on the "),wce=a("code"),nVo=o("model_type"),lVo=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),cVo=o("pretrained_model_name_or_path"),mVo=o(":"),fVo=l(),Zd=a("ul"),D1=a("li"),Bce=a("strong"),gVo=o("deit"),hVo=o(" \u2014 "),XN=a("a"),uVo=o("DeiTForMaskedImageModeling"),pVo=o(" (DeiT model)"),_Vo=l(),N1=a("li"),xce=a("strong"),bVo=o("swin"),vVo=o(" \u2014 "),VN=a("a"),TVo=o("SwinForMaskedImageModeling"),FVo=o(" (Swin model)"),CVo=l(),q1=a("li"),kce=a("strong"),MVo=o("vit"),EVo=o(" \u2014 "),zN=a("a"),yVo=o("ViTForMaskedImageModeling"),wVo=o(" (ViT model)"),AVo=l(),O1=a("p"),LVo=o("The model is set in evaluation mode by default using "),Rce=a("code"),BVo=o("model.eval()"),xVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),kVo=o("model.train()"),RVo=l(),Pce=a("p"),SVo=o("Examples:"),PVo=l(),m(J6.$$.fragment),Uxe=l(),ec=a("h2"),G1=a("a"),$ce=a("span"),m(Y6.$$.fragment),$Vo=l(),Ice=a("span"),IVo=o("AutoModelForObjectDetection"),Jxe=l(),ur=a("div"),m(K6.$$.fragment),jVo=l(),oc=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jce=a("code"),NVo=o("from_pretrained()"),qVo=o("class method or the "),Dce=a("code"),OVo=o("from_config()"),GVo=o(`class
method.`),XVo=l(),Z6=a("p"),VVo=o("This class cannot be instantiated directly using "),Nce=a("code"),zVo=o("__init__()"),WVo=o(" (throws an error)."),QVo=l(),dt=a("div"),m(eA.$$.fragment),HVo=l(),qce=a("p"),UVo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JVo=l(),rc=a("p"),YVo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),KVo=o("not"),ZVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gce=a("code"),ezo=o("from_pretrained()"),ozo=o("to load the model weights."),rzo=l(),Xce=a("p"),tzo=o("Examples:"),azo=l(),m(oA.$$.fragment),szo=l(),ro=a("div"),m(rA.$$.fragment),nzo=l(),Vce=a("p"),lzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),izo=l(),cs=a("p"),dzo=o("The model class to instantiate is selected based on the "),zce=a("code"),czo=o("model_type"),mzo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),fzo=o("pretrained_model_name_or_path"),gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),hzo=o("pretrained_model_name_or_path"),uzo=o(":"),pzo=l(),Hce=a("ul"),X1=a("li"),Uce=a("strong"),_zo=o("detr"),bzo=o(" \u2014 "),WN=a("a"),vzo=o("DetrForObjectDetection"),Tzo=o(" (DETR model)"),Fzo=l(),V1=a("p"),Czo=o("The model is set in evaluation mode by default using "),Jce=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),yzo=o("model.train()"),wzo=l(),Kce=a("p"),Azo=o("Examples:"),Lzo=l(),m(tA.$$.fragment),Yxe=l(),tc=a("h2"),z1=a("a"),Zce=a("span"),m(aA.$$.fragment),Bzo=l(),eme=a("span"),xzo=o("AutoModelForImageSegmentation"),Kxe=l(),pr=a("div"),m(sA.$$.fragment),kzo=l(),ac=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ome=a("code"),Szo=o("from_pretrained()"),Pzo=o("class method or the "),rme=a("code"),$zo=o("from_config()"),Izo=o(`class
method.`),jzo=l(),nA=a("p"),Dzo=o("This class cannot be instantiated directly using "),tme=a("code"),Nzo=o("__init__()"),qzo=o(" (throws an error)."),Ozo=l(),ct=a("div"),m(lA.$$.fragment),Gzo=l(),ame=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vzo=l(),sc=a("p"),zzo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),Wzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nme=a("code"),Hzo=o("from_pretrained()"),Uzo=o("to load the model weights."),Jzo=l(),lme=a("p"),Yzo=o("Examples:"),Kzo=l(),m(iA.$$.fragment),Zzo=l(),to=a("div"),m(dA.$$.fragment),eWo=l(),ime=a("p"),oWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rWo=l(),ms=a("p"),tWo=o("The model class to instantiate is selected based on the "),dme=a("code"),aWo=o("model_type"),sWo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),nWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),fme=a("ul"),W1=a("li"),gme=a("strong"),mWo=o("detr"),fWo=o(" \u2014 "),QN=a("a"),gWo=o("DetrForSegmentation"),hWo=o(" (DETR model)"),uWo=l(),Q1=a("p"),pWo=o("The model is set in evaluation mode by default using "),hme=a("code"),_Wo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),vWo=o("model.train()"),TWo=l(),pme=a("p"),FWo=o("Examples:"),CWo=l(),m(cA.$$.fragment),Zxe=l(),nc=a("h2"),H1=a("a"),_me=a("span"),m(mA.$$.fragment),MWo=l(),bme=a("span"),EWo=o("AutoModelForSemanticSegmentation"),eke=l(),_r=a("div"),m(fA.$$.fragment),yWo=l(),lc=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vme=a("code"),AWo=o("from_pretrained()"),LWo=o("class method or the "),Tme=a("code"),BWo=o("from_config()"),xWo=o(`class
method.`),kWo=l(),gA=a("p"),RWo=o("This class cannot be instantiated directly using "),Fme=a("code"),SWo=o("__init__()"),PWo=o(" (throws an error)."),$Wo=l(),mt=a("div"),m(hA.$$.fragment),IWo=l(),Cme=a("p"),jWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),DWo=l(),ic=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),qWo=o("not"),OWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eme=a("code"),GWo=o("from_pretrained()"),XWo=o("to load the model weights."),VWo=l(),yme=a("p"),zWo=o("Examples:"),WWo=l(),m(uA.$$.fragment),QWo=l(),ao=a("div"),m(pA.$$.fragment),HWo=l(),wme=a("p"),UWo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JWo=l(),fs=a("p"),YWo=o("The model class to instantiate is selected based on the "),Ame=a("code"),KWo=o("model_type"),ZWo=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),_A=a("ul"),U1=a("li"),xme=a("strong"),sQo=o("beit"),nQo=o(" \u2014 "),HN=a("a"),lQo=o("BeitForSemanticSegmentation"),iQo=o(" (BEiT model)"),dQo=l(),J1=a("li"),kme=a("strong"),cQo=o("segformer"),mQo=o(" \u2014 "),UN=a("a"),fQo=o("SegformerForSemanticSegmentation"),gQo=o(" (SegFormer model)"),hQo=l(),Y1=a("p"),uQo=o("The model is set in evaluation mode by default using "),Rme=a("code"),pQo=o("model.eval()"),_Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),bQo=o("model.train()"),vQo=l(),Pme=a("p"),TQo=o("Examples:"),FQo=l(),m(bA.$$.fragment),oke=l(),dc=a("h2"),K1=a("a"),$me=a("span"),m(vA.$$.fragment),CQo=l(),Ime=a("span"),MQo=o("AutoModelForInstanceSegmentation"),rke=l(),br=a("div"),m(TA.$$.fragment),EQo=l(),cc=a("p"),yQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jme=a("code"),wQo=o("from_pretrained()"),AQo=o("class method or the "),Dme=a("code"),LQo=o("from_config()"),BQo=o(`class
method.`),xQo=l(),FA=a("p"),kQo=o("This class cannot be instantiated directly using "),Nme=a("code"),RQo=o("__init__()"),SQo=o(" (throws an error)."),PQo=l(),ft=a("div"),m(CA.$$.fragment),$Qo=l(),qme=a("p"),IQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jQo=l(),mc=a("p"),DQo=o(`Note:
Loading a model from its configuration file does `),Ome=a("strong"),NQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gme=a("code"),OQo=o("from_pretrained()"),GQo=o("to load the model weights."),XQo=l(),Xme=a("p"),VQo=o("Examples:"),zQo=l(),m(MA.$$.fragment),WQo=l(),so=a("div"),m(EA.$$.fragment),QQo=l(),Vme=a("p"),HQo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),UQo=l(),gs=a("p"),JQo=o("The model class to instantiate is selected based on the "),zme=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),ZQo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),Hme=a("ul"),Z1=a("li"),Ume=a("strong"),aHo=o("maskformer"),sHo=o(" \u2014 "),JN=a("a"),nHo=o("MaskFormerForInstanceSegmentation"),lHo=o(" (MaskFormer model)"),iHo=l(),eF=a("p"),dHo=o("The model is set in evaluation mode by default using "),Jme=a("code"),cHo=o("model.eval()"),mHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=a("code"),fHo=o("model.train()"),gHo=l(),Kme=a("p"),hHo=o("Examples:"),uHo=l(),m(yA.$$.fragment),tke=l(),fc=a("h2"),oF=a("a"),Zme=a("span"),m(wA.$$.fragment),pHo=l(),efe=a("span"),_Ho=o("TFAutoModel"),ake=l(),vr=a("div"),m(AA.$$.fragment),bHo=l(),gc=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ofe=a("code"),THo=o("from_pretrained()"),FHo=o("class method or the "),rfe=a("code"),CHo=o("from_config()"),MHo=o(`class
method.`),EHo=l(),LA=a("p"),yHo=o("This class cannot be instantiated directly using "),tfe=a("code"),wHo=o("__init__()"),AHo=o(" (throws an error)."),LHo=l(),gt=a("div"),m(BA.$$.fragment),BHo=l(),afe=a("p"),xHo=o("Instantiates one of the base model classes of the library from a configuration."),kHo=l(),hc=a("p"),RHo=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),SHo=o("not"),PHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nfe=a("code"),$Ho=o("from_pretrained()"),IHo=o("to load the model weights."),jHo=l(),lfe=a("p"),DHo=o("Examples:"),NHo=l(),m(xA.$$.fragment),qHo=l(),ho=a("div"),m(kA.$$.fragment),OHo=l(),ife=a("p"),GHo=o("Instantiate one of the base model classes of the library from a pretrained model."),XHo=l(),hs=a("p"),VHo=o("The model class to instantiate is selected based on the "),dfe=a("code"),zHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),QHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),B=a("ul"),rF=a("li"),ffe=a("strong"),KHo=o("albert"),ZHo=o(" \u2014 "),YN=a("a"),eUo=o("TFAlbertModel"),oUo=o(" (ALBERT model)"),rUo=l(),tF=a("li"),gfe=a("strong"),tUo=o("bart"),aUo=o(" \u2014 "),KN=a("a"),sUo=o("TFBartModel"),nUo=o(" (BART model)"),lUo=l(),aF=a("li"),hfe=a("strong"),iUo=o("bert"),dUo=o(" \u2014 "),ZN=a("a"),cUo=o("TFBertModel"),mUo=o(" (BERT model)"),fUo=l(),sF=a("li"),ufe=a("strong"),gUo=o("blenderbot"),hUo=o(" \u2014 "),eq=a("a"),uUo=o("TFBlenderbotModel"),pUo=o(" (Blenderbot model)"),_Uo=l(),nF=a("li"),pfe=a("strong"),bUo=o("blenderbot-small"),vUo=o(" \u2014 "),oq=a("a"),TUo=o("TFBlenderbotSmallModel"),FUo=o(" (BlenderbotSmall model)"),CUo=l(),lF=a("li"),_fe=a("strong"),MUo=o("camembert"),EUo=o(" \u2014 "),rq=a("a"),yUo=o("TFCamembertModel"),wUo=o(" (CamemBERT model)"),AUo=l(),iF=a("li"),bfe=a("strong"),LUo=o("clip"),BUo=o(" \u2014 "),tq=a("a"),xUo=o("TFCLIPModel"),kUo=o(" (CLIP model)"),RUo=l(),dF=a("li"),vfe=a("strong"),SUo=o("convbert"),PUo=o(" \u2014 "),aq=a("a"),$Uo=o("TFConvBertModel"),IUo=o(" (ConvBERT model)"),jUo=l(),cF=a("li"),Tfe=a("strong"),DUo=o("convnext"),NUo=o(" \u2014 "),sq=a("a"),qUo=o("TFConvNextModel"),OUo=o(" (ConvNext model)"),GUo=l(),mF=a("li"),Ffe=a("strong"),XUo=o("ctrl"),VUo=o(" \u2014 "),nq=a("a"),zUo=o("TFCTRLModel"),WUo=o(" (CTRL model)"),QUo=l(),fF=a("li"),Cfe=a("strong"),HUo=o("deberta"),UUo=o(" \u2014 "),lq=a("a"),JUo=o("TFDebertaModel"),YUo=o(" (DeBERTa model)"),KUo=l(),gF=a("li"),Mfe=a("strong"),ZUo=o("deberta-v2"),eJo=o(" \u2014 "),iq=a("a"),oJo=o("TFDebertaV2Model"),rJo=o(" (DeBERTa-v2 model)"),tJo=l(),hF=a("li"),Efe=a("strong"),aJo=o("distilbert"),sJo=o(" \u2014 "),dq=a("a"),nJo=o("TFDistilBertModel"),lJo=o(" (DistilBERT model)"),iJo=l(),uF=a("li"),yfe=a("strong"),dJo=o("dpr"),cJo=o(" \u2014 "),cq=a("a"),mJo=o("TFDPRQuestionEncoder"),fJo=o(" (DPR model)"),gJo=l(),pF=a("li"),wfe=a("strong"),hJo=o("electra"),uJo=o(" \u2014 "),mq=a("a"),pJo=o("TFElectraModel"),_Jo=o(" (ELECTRA model)"),bJo=l(),_F=a("li"),Afe=a("strong"),vJo=o("flaubert"),TJo=o(" \u2014 "),fq=a("a"),FJo=o("TFFlaubertModel"),CJo=o(" (FlauBERT model)"),MJo=l(),On=a("li"),Lfe=a("strong"),EJo=o("funnel"),yJo=o(" \u2014 "),gq=a("a"),wJo=o("TFFunnelModel"),AJo=o(" or "),hq=a("a"),LJo=o("TFFunnelBaseModel"),BJo=o(" (Funnel Transformer model)"),xJo=l(),bF=a("li"),Bfe=a("strong"),kJo=o("gpt2"),RJo=o(" \u2014 "),uq=a("a"),SJo=o("TFGPT2Model"),PJo=o(" (OpenAI GPT-2 model)"),$Jo=l(),vF=a("li"),xfe=a("strong"),IJo=o("hubert"),jJo=o(" \u2014 "),pq=a("a"),DJo=o("TFHubertModel"),NJo=o(" (Hubert model)"),qJo=l(),TF=a("li"),kfe=a("strong"),OJo=o("layoutlm"),GJo=o(" \u2014 "),_q=a("a"),XJo=o("TFLayoutLMModel"),VJo=o(" (LayoutLM model)"),zJo=l(),FF=a("li"),Rfe=a("strong"),WJo=o("led"),QJo=o(" \u2014 "),bq=a("a"),HJo=o("TFLEDModel"),UJo=o(" (LED model)"),JJo=l(),CF=a("li"),Sfe=a("strong"),YJo=o("longformer"),KJo=o(" \u2014 "),vq=a("a"),ZJo=o("TFLongformerModel"),eYo=o(" (Longformer model)"),oYo=l(),MF=a("li"),Pfe=a("strong"),rYo=o("lxmert"),tYo=o(" \u2014 "),Tq=a("a"),aYo=o("TFLxmertModel"),sYo=o(" (LXMERT model)"),nYo=l(),EF=a("li"),$fe=a("strong"),lYo=o("marian"),iYo=o(" \u2014 "),Fq=a("a"),dYo=o("TFMarianModel"),cYo=o(" (Marian model)"),mYo=l(),yF=a("li"),Ife=a("strong"),fYo=o("mbart"),gYo=o(" \u2014 "),Cq=a("a"),hYo=o("TFMBartModel"),uYo=o(" (mBART model)"),pYo=l(),wF=a("li"),jfe=a("strong"),_Yo=o("mobilebert"),bYo=o(" \u2014 "),Mq=a("a"),vYo=o("TFMobileBertModel"),TYo=o(" (MobileBERT model)"),FYo=l(),AF=a("li"),Dfe=a("strong"),CYo=o("mpnet"),MYo=o(" \u2014 "),Eq=a("a"),EYo=o("TFMPNetModel"),yYo=o(" (MPNet model)"),wYo=l(),LF=a("li"),Nfe=a("strong"),AYo=o("mt5"),LYo=o(" \u2014 "),yq=a("a"),BYo=o("TFMT5Model"),xYo=o(" (mT5 model)"),kYo=l(),BF=a("li"),qfe=a("strong"),RYo=o("openai-gpt"),SYo=o(" \u2014 "),wq=a("a"),PYo=o("TFOpenAIGPTModel"),$Yo=o(" (OpenAI GPT model)"),IYo=l(),xF=a("li"),Ofe=a("strong"),jYo=o("pegasus"),DYo=o(" \u2014 "),Aq=a("a"),NYo=o("TFPegasusModel"),qYo=o(" (Pegasus model)"),OYo=l(),kF=a("li"),Gfe=a("strong"),GYo=o("rembert"),XYo=o(" \u2014 "),Lq=a("a"),VYo=o("TFRemBertModel"),zYo=o(" (RemBERT model)"),WYo=l(),RF=a("li"),Xfe=a("strong"),QYo=o("roberta"),HYo=o(" \u2014 "),Bq=a("a"),UYo=o("TFRobertaModel"),JYo=o(" (RoBERTa model)"),YYo=l(),SF=a("li"),Vfe=a("strong"),KYo=o("roformer"),ZYo=o(" \u2014 "),xq=a("a"),eKo=o("TFRoFormerModel"),oKo=o(" (RoFormer model)"),rKo=l(),PF=a("li"),zfe=a("strong"),tKo=o("speech_to_text"),aKo=o(" \u2014 "),kq=a("a"),sKo=o("TFSpeech2TextModel"),nKo=o(" (Speech2Text model)"),lKo=l(),$F=a("li"),Wfe=a("strong"),iKo=o("t5"),dKo=o(" \u2014 "),Rq=a("a"),cKo=o("TFT5Model"),mKo=o(" (T5 model)"),fKo=l(),IF=a("li"),Qfe=a("strong"),gKo=o("tapas"),hKo=o(" \u2014 "),Sq=a("a"),uKo=o("TFTapasModel"),pKo=o(" (TAPAS model)"),_Ko=l(),jF=a("li"),Hfe=a("strong"),bKo=o("transfo-xl"),vKo=o(" \u2014 "),Pq=a("a"),TKo=o("TFTransfoXLModel"),FKo=o(" (Transformer-XL model)"),CKo=l(),DF=a("li"),Ufe=a("strong"),MKo=o("vit"),EKo=o(" \u2014 "),$q=a("a"),yKo=o("TFViTModel"),wKo=o(" (ViT model)"),AKo=l(),NF=a("li"),Jfe=a("strong"),LKo=o("wav2vec2"),BKo=o(" \u2014 "),Iq=a("a"),xKo=o("TFWav2Vec2Model"),kKo=o(" (Wav2Vec2 model)"),RKo=l(),qF=a("li"),Yfe=a("strong"),SKo=o("xlm"),PKo=o(" \u2014 "),jq=a("a"),$Ko=o("TFXLMModel"),IKo=o(" (XLM model)"),jKo=l(),OF=a("li"),Kfe=a("strong"),DKo=o("xlm-roberta"),NKo=o(" \u2014 "),Dq=a("a"),qKo=o("TFXLMRobertaModel"),OKo=o(" (XLM-RoBERTa model)"),GKo=l(),GF=a("li"),Zfe=a("strong"),XKo=o("xlnet"),VKo=o(" \u2014 "),Nq=a("a"),zKo=o("TFXLNetModel"),WKo=o(" (XLNet model)"),QKo=l(),ege=a("p"),HKo=o("Examples:"),UKo=l(),m(RA.$$.fragment),ske=l(),uc=a("h2"),XF=a("a"),oge=a("span"),m(SA.$$.fragment),JKo=l(),rge=a("span"),YKo=o("TFAutoModelForPreTraining"),nke=l(),Tr=a("div"),m(PA.$$.fragment),KKo=l(),pc=a("p"),ZKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tge=a("code"),eZo=o("from_pretrained()"),oZo=o("class method or the "),age=a("code"),rZo=o("from_config()"),tZo=o(`class
method.`),aZo=l(),$A=a("p"),sZo=o("This class cannot be instantiated directly using "),sge=a("code"),nZo=o("__init__()"),lZo=o(" (throws an error)."),iZo=l(),ht=a("div"),m(IA.$$.fragment),dZo=l(),nge=a("p"),cZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mZo=l(),_c=a("p"),fZo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),gZo=o("not"),hZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=a("code"),uZo=o("from_pretrained()"),pZo=o("to load the model weights."),_Zo=l(),dge=a("p"),bZo=o("Examples:"),vZo=l(),m(jA.$$.fragment),TZo=l(),uo=a("div"),m(DA.$$.fragment),FZo=l(),cge=a("p"),CZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MZo=l(),us=a("p"),EZo=o("The model class to instantiate is selected based on the "),mge=a("code"),yZo=o("model_type"),wZo=o(` property of the config object (either
passed as an argument or loaded from `),fge=a("code"),AZo=o("pretrained_model_name_or_path"),LZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),BZo=o("pretrained_model_name_or_path"),xZo=o(":"),kZo=l(),H=a("ul"),VF=a("li"),hge=a("strong"),RZo=o("albert"),SZo=o(" \u2014 "),qq=a("a"),PZo=o("TFAlbertForPreTraining"),$Zo=o(" (ALBERT model)"),IZo=l(),zF=a("li"),uge=a("strong"),jZo=o("bart"),DZo=o(" \u2014 "),Oq=a("a"),NZo=o("TFBartForConditionalGeneration"),qZo=o(" (BART model)"),OZo=l(),WF=a("li"),pge=a("strong"),GZo=o("bert"),XZo=o(" \u2014 "),Gq=a("a"),VZo=o("TFBertForPreTraining"),zZo=o(" (BERT model)"),WZo=l(),QF=a("li"),_ge=a("strong"),QZo=o("camembert"),HZo=o(" \u2014 "),Xq=a("a"),UZo=o("TFCamembertForMaskedLM"),JZo=o(" (CamemBERT model)"),YZo=l(),HF=a("li"),bge=a("strong"),KZo=o("ctrl"),ZZo=o(" \u2014 "),Vq=a("a"),eer=o("TFCTRLLMHeadModel"),oer=o(" (CTRL model)"),rer=l(),UF=a("li"),vge=a("strong"),ter=o("distilbert"),aer=o(" \u2014 "),zq=a("a"),ser=o("TFDistilBertForMaskedLM"),ner=o(" (DistilBERT model)"),ler=l(),JF=a("li"),Tge=a("strong"),ier=o("electra"),der=o(" \u2014 "),Wq=a("a"),cer=o("TFElectraForPreTraining"),mer=o(" (ELECTRA model)"),fer=l(),YF=a("li"),Fge=a("strong"),ger=o("flaubert"),her=o(" \u2014 "),Qq=a("a"),uer=o("TFFlaubertWithLMHeadModel"),per=o(" (FlauBERT model)"),_er=l(),KF=a("li"),Cge=a("strong"),ber=o("funnel"),ver=o(" \u2014 "),Hq=a("a"),Ter=o("TFFunnelForPreTraining"),Fer=o(" (Funnel Transformer model)"),Cer=l(),ZF=a("li"),Mge=a("strong"),Mer=o("gpt2"),Eer=o(" \u2014 "),Uq=a("a"),yer=o("TFGPT2LMHeadModel"),wer=o(" (OpenAI GPT-2 model)"),Aer=l(),eC=a("li"),Ege=a("strong"),Ler=o("layoutlm"),Ber=o(" \u2014 "),Jq=a("a"),xer=o("TFLayoutLMForMaskedLM"),ker=o(" (LayoutLM model)"),Rer=l(),oC=a("li"),yge=a("strong"),Ser=o("lxmert"),Per=o(" \u2014 "),Yq=a("a"),$er=o("TFLxmertForPreTraining"),Ier=o(" (LXMERT model)"),jer=l(),rC=a("li"),wge=a("strong"),Der=o("mobilebert"),Ner=o(" \u2014 "),Kq=a("a"),qer=o("TFMobileBertForPreTraining"),Oer=o(" (MobileBERT model)"),Ger=l(),tC=a("li"),Age=a("strong"),Xer=o("mpnet"),Ver=o(" \u2014 "),Zq=a("a"),zer=o("TFMPNetForMaskedLM"),Wer=o(" (MPNet model)"),Qer=l(),aC=a("li"),Lge=a("strong"),Her=o("openai-gpt"),Uer=o(" \u2014 "),eO=a("a"),Jer=o("TFOpenAIGPTLMHeadModel"),Yer=o(" (OpenAI GPT model)"),Ker=l(),sC=a("li"),Bge=a("strong"),Zer=o("roberta"),eor=o(" \u2014 "),oO=a("a"),oor=o("TFRobertaForMaskedLM"),ror=o(" (RoBERTa model)"),tor=l(),nC=a("li"),xge=a("strong"),aor=o("t5"),sor=o(" \u2014 "),rO=a("a"),nor=o("TFT5ForConditionalGeneration"),lor=o(" (T5 model)"),ior=l(),lC=a("li"),kge=a("strong"),dor=o("tapas"),cor=o(" \u2014 "),tO=a("a"),mor=o("TFTapasForMaskedLM"),gor=o(" (TAPAS model)"),hor=l(),iC=a("li"),Rge=a("strong"),uor=o("transfo-xl"),por=o(" \u2014 "),aO=a("a"),_or=o("TFTransfoXLLMHeadModel"),bor=o(" (Transformer-XL model)"),vor=l(),dC=a("li"),Sge=a("strong"),Tor=o("xlm"),For=o(" \u2014 "),sO=a("a"),Cor=o("TFXLMWithLMHeadModel"),Mor=o(" (XLM model)"),Eor=l(),cC=a("li"),Pge=a("strong"),yor=o("xlm-roberta"),wor=o(" \u2014 "),nO=a("a"),Aor=o("TFXLMRobertaForMaskedLM"),Lor=o(" (XLM-RoBERTa model)"),Bor=l(),mC=a("li"),$ge=a("strong"),xor=o("xlnet"),kor=o(" \u2014 "),lO=a("a"),Ror=o("TFXLNetLMHeadModel"),Sor=o(" (XLNet model)"),Por=l(),Ige=a("p"),$or=o("Examples:"),Ior=l(),m(NA.$$.fragment),lke=l(),bc=a("h2"),fC=a("a"),jge=a("span"),m(qA.$$.fragment),jor=l(),Dge=a("span"),Dor=o("TFAutoModelForCausalLM"),ike=l(),Fr=a("div"),m(OA.$$.fragment),Nor=l(),vc=a("p"),qor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nge=a("code"),Oor=o("from_pretrained()"),Gor=o("class method or the "),qge=a("code"),Xor=o("from_config()"),Vor=o(`class
method.`),zor=l(),GA=a("p"),Wor=o("This class cannot be instantiated directly using "),Oge=a("code"),Qor=o("__init__()"),Hor=o(" (throws an error)."),Uor=l(),ut=a("div"),m(XA.$$.fragment),Jor=l(),Gge=a("p"),Yor=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kor=l(),Tc=a("p"),Zor=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),err=o("not"),orr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vge=a("code"),rrr=o("from_pretrained()"),trr=o("to load the model weights."),arr=l(),zge=a("p"),srr=o("Examples:"),nrr=l(),m(VA.$$.fragment),lrr=l(),po=a("div"),m(zA.$$.fragment),irr=l(),Wge=a("p"),drr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),crr=l(),ps=a("p"),mrr=o("The model class to instantiate is selected based on the "),Qge=a("code"),frr=o("model_type"),grr=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),hrr=o("pretrained_model_name_or_path"),urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),prr=o("pretrained_model_name_or_path"),_rr=o(":"),brr=l(),ue=a("ul"),gC=a("li"),Jge=a("strong"),vrr=o("bert"),Trr=o(" \u2014 "),iO=a("a"),Frr=o("TFBertLMHeadModel"),Crr=o(" (BERT model)"),Mrr=l(),hC=a("li"),Yge=a("strong"),Err=o("ctrl"),yrr=o(" \u2014 "),dO=a("a"),wrr=o("TFCTRLLMHeadModel"),Arr=o(" (CTRL model)"),Lrr=l(),uC=a("li"),Kge=a("strong"),Brr=o("gpt2"),xrr=o(" \u2014 "),cO=a("a"),krr=o("TFGPT2LMHeadModel"),Rrr=o(" (OpenAI GPT-2 model)"),Srr=l(),pC=a("li"),Zge=a("strong"),Prr=o("openai-gpt"),$rr=o(" \u2014 "),mO=a("a"),Irr=o("TFOpenAIGPTLMHeadModel"),jrr=o(" (OpenAI GPT model)"),Drr=l(),_C=a("li"),ehe=a("strong"),Nrr=o("rembert"),qrr=o(" \u2014 "),fO=a("a"),Orr=o("TFRemBertForCausalLM"),Grr=o(" (RemBERT model)"),Xrr=l(),bC=a("li"),ohe=a("strong"),Vrr=o("roberta"),zrr=o(" \u2014 "),gO=a("a"),Wrr=o("TFRobertaForCausalLM"),Qrr=o(" (RoBERTa model)"),Hrr=l(),vC=a("li"),rhe=a("strong"),Urr=o("roformer"),Jrr=o(" \u2014 "),hO=a("a"),Yrr=o("TFRoFormerForCausalLM"),Krr=o(" (RoFormer model)"),Zrr=l(),TC=a("li"),the=a("strong"),etr=o("transfo-xl"),otr=o(" \u2014 "),uO=a("a"),rtr=o("TFTransfoXLLMHeadModel"),ttr=o(" (Transformer-XL model)"),atr=l(),FC=a("li"),ahe=a("strong"),str=o("xlm"),ntr=o(" \u2014 "),pO=a("a"),ltr=o("TFXLMWithLMHeadModel"),itr=o(" (XLM model)"),dtr=l(),CC=a("li"),she=a("strong"),ctr=o("xlnet"),mtr=o(" \u2014 "),_O=a("a"),ftr=o("TFXLNetLMHeadModel"),gtr=o(" (XLNet model)"),htr=l(),nhe=a("p"),utr=o("Examples:"),ptr=l(),m(WA.$$.fragment),dke=l(),Fc=a("h2"),MC=a("a"),lhe=a("span"),m(QA.$$.fragment),_tr=l(),ihe=a("span"),btr=o("TFAutoModelForImageClassification"),cke=l(),Cr=a("div"),m(HA.$$.fragment),vtr=l(),Cc=a("p"),Ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dhe=a("code"),Ftr=o("from_pretrained()"),Ctr=o("class method or the "),che=a("code"),Mtr=o("from_config()"),Etr=o(`class
method.`),ytr=l(),UA=a("p"),wtr=o("This class cannot be instantiated directly using "),mhe=a("code"),Atr=o("__init__()"),Ltr=o(" (throws an error)."),Btr=l(),pt=a("div"),m(JA.$$.fragment),xtr=l(),fhe=a("p"),ktr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rtr=l(),Mc=a("p"),Str=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),Ptr=o("not"),$tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hhe=a("code"),Itr=o("from_pretrained()"),jtr=o("to load the model weights."),Dtr=l(),uhe=a("p"),Ntr=o("Examples:"),qtr=l(),m(YA.$$.fragment),Otr=l(),_o=a("div"),m(KA.$$.fragment),Gtr=l(),phe=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vtr=l(),_s=a("p"),ztr=o("The model class to instantiate is selected based on the "),_he=a("code"),Wtr=o("model_type"),Qtr=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(":"),Ktr=l(),ZA=a("ul"),EC=a("li"),The=a("strong"),Ztr=o("convnext"),ear=o(" \u2014 "),bO=a("a"),oar=o("TFConvNextForImageClassification"),rar=o(" (ConvNext model)"),tar=l(),yC=a("li"),Fhe=a("strong"),aar=o("vit"),sar=o(" \u2014 "),vO=a("a"),nar=o("TFViTForImageClassification"),lar=o(" (ViT model)"),iar=l(),Che=a("p"),dar=o("Examples:"),car=l(),m(e0.$$.fragment),mke=l(),Ec=a("h2"),wC=a("a"),Mhe=a("span"),m(o0.$$.fragment),mar=l(),Ehe=a("span"),far=o("TFAutoModelForMaskedLM"),fke=l(),Mr=a("div"),m(r0.$$.fragment),gar=l(),yc=a("p"),har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yhe=a("code"),uar=o("from_pretrained()"),par=o("class method or the "),whe=a("code"),_ar=o("from_config()"),bar=o(`class
method.`),Tar=l(),t0=a("p"),Far=o("This class cannot be instantiated directly using "),Ahe=a("code"),Car=o("__init__()"),Mar=o(" (throws an error)."),Ear=l(),_t=a("div"),m(a0.$$.fragment),yar=l(),Lhe=a("p"),war=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Aar=l(),wc=a("p"),Lar=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),Bar=o("not"),xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=a("code"),kar=o("from_pretrained()"),Rar=o("to load the model weights."),Sar=l(),khe=a("p"),Par=o("Examples:"),$ar=l(),m(s0.$$.fragment),Iar=l(),bo=a("div"),m(n0.$$.fragment),jar=l(),Rhe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nar=l(),bs=a("p"),qar=o("The model class to instantiate is selected based on the "),She=a("code"),Oar=o("model_type"),Gar=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Xar=o("pretrained_model_name_or_path"),Var=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),zar=o("pretrained_model_name_or_path"),War=o(":"),Qar=l(),Y=a("ul"),AC=a("li"),Ihe=a("strong"),Har=o("albert"),Uar=o(" \u2014 "),TO=a("a"),Jar=o("TFAlbertForMaskedLM"),Yar=o(" (ALBERT model)"),Kar=l(),LC=a("li"),jhe=a("strong"),Zar=o("bert"),esr=o(" \u2014 "),FO=a("a"),osr=o("TFBertForMaskedLM"),rsr=o(" (BERT model)"),tsr=l(),BC=a("li"),Dhe=a("strong"),asr=o("camembert"),ssr=o(" \u2014 "),CO=a("a"),nsr=o("TFCamembertForMaskedLM"),lsr=o(" (CamemBERT model)"),isr=l(),xC=a("li"),Nhe=a("strong"),dsr=o("convbert"),csr=o(" \u2014 "),MO=a("a"),msr=o("TFConvBertForMaskedLM"),fsr=o(" (ConvBERT model)"),gsr=l(),kC=a("li"),qhe=a("strong"),hsr=o("deberta"),usr=o(" \u2014 "),EO=a("a"),psr=o("TFDebertaForMaskedLM"),_sr=o(" (DeBERTa model)"),bsr=l(),RC=a("li"),Ohe=a("strong"),vsr=o("deberta-v2"),Tsr=o(" \u2014 "),yO=a("a"),Fsr=o("TFDebertaV2ForMaskedLM"),Csr=o(" (DeBERTa-v2 model)"),Msr=l(),SC=a("li"),Ghe=a("strong"),Esr=o("distilbert"),ysr=o(" \u2014 "),wO=a("a"),wsr=o("TFDistilBertForMaskedLM"),Asr=o(" (DistilBERT model)"),Lsr=l(),PC=a("li"),Xhe=a("strong"),Bsr=o("electra"),xsr=o(" \u2014 "),AO=a("a"),ksr=o("TFElectraForMaskedLM"),Rsr=o(" (ELECTRA model)"),Ssr=l(),$C=a("li"),Vhe=a("strong"),Psr=o("flaubert"),$sr=o(" \u2014 "),LO=a("a"),Isr=o("TFFlaubertWithLMHeadModel"),jsr=o(" (FlauBERT model)"),Dsr=l(),IC=a("li"),zhe=a("strong"),Nsr=o("funnel"),qsr=o(" \u2014 "),BO=a("a"),Osr=o("TFFunnelForMaskedLM"),Gsr=o(" (Funnel Transformer model)"),Xsr=l(),jC=a("li"),Whe=a("strong"),Vsr=o("layoutlm"),zsr=o(" \u2014 "),xO=a("a"),Wsr=o("TFLayoutLMForMaskedLM"),Qsr=o(" (LayoutLM model)"),Hsr=l(),DC=a("li"),Qhe=a("strong"),Usr=o("longformer"),Jsr=o(" \u2014 "),kO=a("a"),Ysr=o("TFLongformerForMaskedLM"),Ksr=o(" (Longformer model)"),Zsr=l(),NC=a("li"),Hhe=a("strong"),enr=o("mobilebert"),onr=o(" \u2014 "),RO=a("a"),rnr=o("TFMobileBertForMaskedLM"),tnr=o(" (MobileBERT model)"),anr=l(),qC=a("li"),Uhe=a("strong"),snr=o("mpnet"),nnr=o(" \u2014 "),SO=a("a"),lnr=o("TFMPNetForMaskedLM"),inr=o(" (MPNet model)"),dnr=l(),OC=a("li"),Jhe=a("strong"),cnr=o("rembert"),mnr=o(" \u2014 "),PO=a("a"),fnr=o("TFRemBertForMaskedLM"),gnr=o(" (RemBERT model)"),hnr=l(),GC=a("li"),Yhe=a("strong"),unr=o("roberta"),pnr=o(" \u2014 "),$O=a("a"),_nr=o("TFRobertaForMaskedLM"),bnr=o(" (RoBERTa model)"),vnr=l(),XC=a("li"),Khe=a("strong"),Tnr=o("roformer"),Fnr=o(" \u2014 "),IO=a("a"),Cnr=o("TFRoFormerForMaskedLM"),Mnr=o(" (RoFormer model)"),Enr=l(),VC=a("li"),Zhe=a("strong"),ynr=o("tapas"),wnr=o(" \u2014 "),jO=a("a"),Anr=o("TFTapasForMaskedLM"),Lnr=o(" (TAPAS model)"),Bnr=l(),zC=a("li"),eue=a("strong"),xnr=o("xlm"),knr=o(" \u2014 "),DO=a("a"),Rnr=o("TFXLMWithLMHeadModel"),Snr=o(" (XLM model)"),Pnr=l(),WC=a("li"),oue=a("strong"),$nr=o("xlm-roberta"),Inr=o(" \u2014 "),NO=a("a"),jnr=o("TFXLMRobertaForMaskedLM"),Dnr=o(" (XLM-RoBERTa model)"),Nnr=l(),rue=a("p"),qnr=o("Examples:"),Onr=l(),m(l0.$$.fragment),gke=l(),Ac=a("h2"),QC=a("a"),tue=a("span"),m(i0.$$.fragment),Gnr=l(),aue=a("span"),Xnr=o("TFAutoModelForSeq2SeqLM"),hke=l(),Er=a("div"),m(d0.$$.fragment),Vnr=l(),Lc=a("p"),znr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sue=a("code"),Wnr=o("from_pretrained()"),Qnr=o("class method or the "),nue=a("code"),Hnr=o("from_config()"),Unr=o(`class
method.`),Jnr=l(),c0=a("p"),Ynr=o("This class cannot be instantiated directly using "),lue=a("code"),Knr=o("__init__()"),Znr=o(" (throws an error)."),elr=l(),bt=a("div"),m(m0.$$.fragment),olr=l(),iue=a("p"),rlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tlr=l(),Bc=a("p"),alr=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),slr=o("not"),nlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=a("code"),llr=o("from_pretrained()"),ilr=o("to load the model weights."),dlr=l(),mue=a("p"),clr=o("Examples:"),mlr=l(),m(f0.$$.fragment),flr=l(),vo=a("div"),m(g0.$$.fragment),glr=l(),fue=a("p"),hlr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ulr=l(),vs=a("p"),plr=o("The model class to instantiate is selected based on the "),gue=a("code"),_lr=o("model_type"),blr=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),vlr=o("pretrained_model_name_or_path"),Tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),Flr=o("pretrained_model_name_or_path"),Clr=o(":"),Mlr=l(),pe=a("ul"),HC=a("li"),pue=a("strong"),Elr=o("bart"),ylr=o(" \u2014 "),qO=a("a"),wlr=o("TFBartForConditionalGeneration"),Alr=o(" (BART model)"),Llr=l(),UC=a("li"),_ue=a("strong"),Blr=o("blenderbot"),xlr=o(" \u2014 "),OO=a("a"),klr=o("TFBlenderbotForConditionalGeneration"),Rlr=o(" (Blenderbot model)"),Slr=l(),JC=a("li"),bue=a("strong"),Plr=o("blenderbot-small"),$lr=o(" \u2014 "),GO=a("a"),Ilr=o("TFBlenderbotSmallForConditionalGeneration"),jlr=o(" (BlenderbotSmall model)"),Dlr=l(),YC=a("li"),vue=a("strong"),Nlr=o("encoder-decoder"),qlr=o(" \u2014 "),XO=a("a"),Olr=o("TFEncoderDecoderModel"),Glr=o(" (Encoder decoder model)"),Xlr=l(),KC=a("li"),Tue=a("strong"),Vlr=o("led"),zlr=o(" \u2014 "),VO=a("a"),Wlr=o("TFLEDForConditionalGeneration"),Qlr=o(" (LED model)"),Hlr=l(),ZC=a("li"),Fue=a("strong"),Ulr=o("marian"),Jlr=o(" \u2014 "),zO=a("a"),Ylr=o("TFMarianMTModel"),Klr=o(" (Marian model)"),Zlr=l(),eM=a("li"),Cue=a("strong"),eir=o("mbart"),oir=o(" \u2014 "),WO=a("a"),rir=o("TFMBartForConditionalGeneration"),tir=o(" (mBART model)"),air=l(),oM=a("li"),Mue=a("strong"),sir=o("mt5"),nir=o(" \u2014 "),QO=a("a"),lir=o("TFMT5ForConditionalGeneration"),iir=o(" (mT5 model)"),dir=l(),rM=a("li"),Eue=a("strong"),cir=o("pegasus"),mir=o(" \u2014 "),HO=a("a"),fir=o("TFPegasusForConditionalGeneration"),gir=o(" (Pegasus model)"),hir=l(),tM=a("li"),yue=a("strong"),uir=o("t5"),pir=o(" \u2014 "),UO=a("a"),_ir=o("TFT5ForConditionalGeneration"),bir=o(" (T5 model)"),vir=l(),wue=a("p"),Tir=o("Examples:"),Fir=l(),m(h0.$$.fragment),uke=l(),xc=a("h2"),aM=a("a"),Aue=a("span"),m(u0.$$.fragment),Cir=l(),Lue=a("span"),Mir=o("TFAutoModelForSequenceClassification"),pke=l(),yr=a("div"),m(p0.$$.fragment),Eir=l(),kc=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bue=a("code"),wir=o("from_pretrained()"),Air=o("class method or the "),xue=a("code"),Lir=o("from_config()"),Bir=o(`class
method.`),xir=l(),_0=a("p"),kir=o("This class cannot be instantiated directly using "),kue=a("code"),Rir=o("__init__()"),Sir=o(" (throws an error)."),Pir=l(),vt=a("div"),m(b0.$$.fragment),$ir=l(),Rue=a("p"),Iir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jir=l(),Rc=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),Nir=o("not"),qir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pue=a("code"),Oir=o("from_pretrained()"),Gir=o("to load the model weights."),Xir=l(),$ue=a("p"),Vir=o("Examples:"),zir=l(),m(v0.$$.fragment),Wir=l(),To=a("div"),m(T0.$$.fragment),Qir=l(),Iue=a("p"),Hir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uir=l(),Ts=a("p"),Jir=o("The model class to instantiate is selected based on the "),jue=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),V=a("ul"),sM=a("li"),que=a("strong"),adr=o("albert"),sdr=o(" \u2014 "),JO=a("a"),ndr=o("TFAlbertForSequenceClassification"),ldr=o(" (ALBERT model)"),idr=l(),nM=a("li"),Oue=a("strong"),ddr=o("bert"),cdr=o(" \u2014 "),YO=a("a"),mdr=o("TFBertForSequenceClassification"),fdr=o(" (BERT model)"),gdr=l(),lM=a("li"),Gue=a("strong"),hdr=o("camembert"),udr=o(" \u2014 "),KO=a("a"),pdr=o("TFCamembertForSequenceClassification"),_dr=o(" (CamemBERT model)"),bdr=l(),iM=a("li"),Xue=a("strong"),vdr=o("convbert"),Tdr=o(" \u2014 "),ZO=a("a"),Fdr=o("TFConvBertForSequenceClassification"),Cdr=o(" (ConvBERT model)"),Mdr=l(),dM=a("li"),Vue=a("strong"),Edr=o("ctrl"),ydr=o(" \u2014 "),eG=a("a"),wdr=o("TFCTRLForSequenceClassification"),Adr=o(" (CTRL model)"),Ldr=l(),cM=a("li"),zue=a("strong"),Bdr=o("deberta"),xdr=o(" \u2014 "),oG=a("a"),kdr=o("TFDebertaForSequenceClassification"),Rdr=o(" (DeBERTa model)"),Sdr=l(),mM=a("li"),Wue=a("strong"),Pdr=o("deberta-v2"),$dr=o(" \u2014 "),rG=a("a"),Idr=o("TFDebertaV2ForSequenceClassification"),jdr=o(" (DeBERTa-v2 model)"),Ddr=l(),fM=a("li"),Que=a("strong"),Ndr=o("distilbert"),qdr=o(" \u2014 "),tG=a("a"),Odr=o("TFDistilBertForSequenceClassification"),Gdr=o(" (DistilBERT model)"),Xdr=l(),gM=a("li"),Hue=a("strong"),Vdr=o("electra"),zdr=o(" \u2014 "),aG=a("a"),Wdr=o("TFElectraForSequenceClassification"),Qdr=o(" (ELECTRA model)"),Hdr=l(),hM=a("li"),Uue=a("strong"),Udr=o("flaubert"),Jdr=o(" \u2014 "),sG=a("a"),Ydr=o("TFFlaubertForSequenceClassification"),Kdr=o(" (FlauBERT model)"),Zdr=l(),uM=a("li"),Jue=a("strong"),ecr=o("funnel"),ocr=o(" \u2014 "),nG=a("a"),rcr=o("TFFunnelForSequenceClassification"),tcr=o(" (Funnel Transformer model)"),acr=l(),pM=a("li"),Yue=a("strong"),scr=o("gpt2"),ncr=o(" \u2014 "),lG=a("a"),lcr=o("TFGPT2ForSequenceClassification"),icr=o(" (OpenAI GPT-2 model)"),dcr=l(),_M=a("li"),Kue=a("strong"),ccr=o("layoutlm"),mcr=o(" \u2014 "),iG=a("a"),fcr=o("TFLayoutLMForSequenceClassification"),gcr=o(" (LayoutLM model)"),hcr=l(),bM=a("li"),Zue=a("strong"),ucr=o("longformer"),pcr=o(" \u2014 "),dG=a("a"),_cr=o("TFLongformerForSequenceClassification"),bcr=o(" (Longformer model)"),vcr=l(),vM=a("li"),epe=a("strong"),Tcr=o("mobilebert"),Fcr=o(" \u2014 "),cG=a("a"),Ccr=o("TFMobileBertForSequenceClassification"),Mcr=o(" (MobileBERT model)"),Ecr=l(),TM=a("li"),ope=a("strong"),ycr=o("mpnet"),wcr=o(" \u2014 "),mG=a("a"),Acr=o("TFMPNetForSequenceClassification"),Lcr=o(" (MPNet model)"),Bcr=l(),FM=a("li"),rpe=a("strong"),xcr=o("openai-gpt"),kcr=o(" \u2014 "),fG=a("a"),Rcr=o("TFOpenAIGPTForSequenceClassification"),Scr=o(" (OpenAI GPT model)"),Pcr=l(),CM=a("li"),tpe=a("strong"),$cr=o("rembert"),Icr=o(" \u2014 "),gG=a("a"),jcr=o("TFRemBertForSequenceClassification"),Dcr=o(" (RemBERT model)"),Ncr=l(),MM=a("li"),ape=a("strong"),qcr=o("roberta"),Ocr=o(" \u2014 "),hG=a("a"),Gcr=o("TFRobertaForSequenceClassification"),Xcr=o(" (RoBERTa model)"),Vcr=l(),EM=a("li"),spe=a("strong"),zcr=o("roformer"),Wcr=o(" \u2014 "),uG=a("a"),Qcr=o("TFRoFormerForSequenceClassification"),Hcr=o(" (RoFormer model)"),Ucr=l(),yM=a("li"),npe=a("strong"),Jcr=o("tapas"),Ycr=o(" \u2014 "),pG=a("a"),Kcr=o("TFTapasForSequenceClassification"),Zcr=o(" (TAPAS model)"),emr=l(),wM=a("li"),lpe=a("strong"),omr=o("transfo-xl"),rmr=o(" \u2014 "),_G=a("a"),tmr=o("TFTransfoXLForSequenceClassification"),amr=o(" (Transformer-XL model)"),smr=l(),AM=a("li"),ipe=a("strong"),nmr=o("xlm"),lmr=o(" \u2014 "),bG=a("a"),imr=o("TFXLMForSequenceClassification"),dmr=o(" (XLM model)"),cmr=l(),LM=a("li"),dpe=a("strong"),mmr=o("xlm-roberta"),fmr=o(" \u2014 "),vG=a("a"),gmr=o("TFXLMRobertaForSequenceClassification"),hmr=o(" (XLM-RoBERTa model)"),umr=l(),BM=a("li"),cpe=a("strong"),pmr=o("xlnet"),_mr=o(" \u2014 "),TG=a("a"),bmr=o("TFXLNetForSequenceClassification"),vmr=o(" (XLNet model)"),Tmr=l(),mpe=a("p"),Fmr=o("Examples:"),Cmr=l(),m(F0.$$.fragment),_ke=l(),Sc=a("h2"),xM=a("a"),fpe=a("span"),m(C0.$$.fragment),Mmr=l(),gpe=a("span"),Emr=o("TFAutoModelForMultipleChoice"),bke=l(),wr=a("div"),m(M0.$$.fragment),ymr=l(),Pc=a("p"),wmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hpe=a("code"),Amr=o("from_pretrained()"),Lmr=o("class method or the "),upe=a("code"),Bmr=o("from_config()"),xmr=o(`class
method.`),kmr=l(),E0=a("p"),Rmr=o("This class cannot be instantiated directly using "),ppe=a("code"),Smr=o("__init__()"),Pmr=o(" (throws an error)."),$mr=l(),Tt=a("div"),m(y0.$$.fragment),Imr=l(),_pe=a("p"),jmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dmr=l(),$c=a("p"),Nmr=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),qmr=o("not"),Omr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vpe=a("code"),Gmr=o("from_pretrained()"),Xmr=o("to load the model weights."),Vmr=l(),Tpe=a("p"),zmr=o("Examples:"),Wmr=l(),m(w0.$$.fragment),Qmr=l(),Fo=a("div"),m(A0.$$.fragment),Hmr=l(),Fpe=a("p"),Umr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jmr=l(),Fs=a("p"),Ymr=o("The model class to instantiate is selected based on the "),Cpe=a("code"),Kmr=o("model_type"),Zmr=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(":"),afr=l(),te=a("ul"),kM=a("li"),ype=a("strong"),sfr=o("albert"),nfr=o(" \u2014 "),FG=a("a"),lfr=o("TFAlbertForMultipleChoice"),ifr=o(" (ALBERT model)"),dfr=l(),RM=a("li"),wpe=a("strong"),cfr=o("bert"),mfr=o(" \u2014 "),CG=a("a"),ffr=o("TFBertForMultipleChoice"),gfr=o(" (BERT model)"),hfr=l(),SM=a("li"),Ape=a("strong"),ufr=o("camembert"),pfr=o(" \u2014 "),MG=a("a"),_fr=o("TFCamembertForMultipleChoice"),bfr=o(" (CamemBERT model)"),vfr=l(),PM=a("li"),Lpe=a("strong"),Tfr=o("convbert"),Ffr=o(" \u2014 "),EG=a("a"),Cfr=o("TFConvBertForMultipleChoice"),Mfr=o(" (ConvBERT model)"),Efr=l(),$M=a("li"),Bpe=a("strong"),yfr=o("distilbert"),wfr=o(" \u2014 "),yG=a("a"),Afr=o("TFDistilBertForMultipleChoice"),Lfr=o(" (DistilBERT model)"),Bfr=l(),IM=a("li"),xpe=a("strong"),xfr=o("electra"),kfr=o(" \u2014 "),wG=a("a"),Rfr=o("TFElectraForMultipleChoice"),Sfr=o(" (ELECTRA model)"),Pfr=l(),jM=a("li"),kpe=a("strong"),$fr=o("flaubert"),Ifr=o(" \u2014 "),AG=a("a"),jfr=o("TFFlaubertForMultipleChoice"),Dfr=o(" (FlauBERT model)"),Nfr=l(),DM=a("li"),Rpe=a("strong"),qfr=o("funnel"),Ofr=o(" \u2014 "),LG=a("a"),Gfr=o("TFFunnelForMultipleChoice"),Xfr=o(" (Funnel Transformer model)"),Vfr=l(),NM=a("li"),Spe=a("strong"),zfr=o("longformer"),Wfr=o(" \u2014 "),BG=a("a"),Qfr=o("TFLongformerForMultipleChoice"),Hfr=o(" (Longformer model)"),Ufr=l(),qM=a("li"),Ppe=a("strong"),Jfr=o("mobilebert"),Yfr=o(" \u2014 "),xG=a("a"),Kfr=o("TFMobileBertForMultipleChoice"),Zfr=o(" (MobileBERT model)"),egr=l(),OM=a("li"),$pe=a("strong"),ogr=o("mpnet"),rgr=o(" \u2014 "),kG=a("a"),tgr=o("TFMPNetForMultipleChoice"),agr=o(" (MPNet model)"),sgr=l(),GM=a("li"),Ipe=a("strong"),ngr=o("rembert"),lgr=o(" \u2014 "),RG=a("a"),igr=o("TFRemBertForMultipleChoice"),dgr=o(" (RemBERT model)"),cgr=l(),XM=a("li"),jpe=a("strong"),mgr=o("roberta"),fgr=o(" \u2014 "),SG=a("a"),ggr=o("TFRobertaForMultipleChoice"),hgr=o(" (RoBERTa model)"),ugr=l(),VM=a("li"),Dpe=a("strong"),pgr=o("roformer"),_gr=o(" \u2014 "),PG=a("a"),bgr=o("TFRoFormerForMultipleChoice"),vgr=o(" (RoFormer model)"),Tgr=l(),zM=a("li"),Npe=a("strong"),Fgr=o("xlm"),Cgr=o(" \u2014 "),$G=a("a"),Mgr=o("TFXLMForMultipleChoice"),Egr=o(" (XLM model)"),ygr=l(),WM=a("li"),qpe=a("strong"),wgr=o("xlm-roberta"),Agr=o(" \u2014 "),IG=a("a"),Lgr=o("TFXLMRobertaForMultipleChoice"),Bgr=o(" (XLM-RoBERTa model)"),xgr=l(),QM=a("li"),Ope=a("strong"),kgr=o("xlnet"),Rgr=o(" \u2014 "),jG=a("a"),Sgr=o("TFXLNetForMultipleChoice"),Pgr=o(" (XLNet model)"),$gr=l(),Gpe=a("p"),Igr=o("Examples:"),jgr=l(),m(L0.$$.fragment),vke=l(),Ic=a("h2"),HM=a("a"),Xpe=a("span"),m(B0.$$.fragment),Dgr=l(),Vpe=a("span"),Ngr=o("TFAutoModelForTableQuestionAnswering"),Tke=l(),Ar=a("div"),m(x0.$$.fragment),qgr=l(),jc=a("p"),Ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zpe=a("code"),Ggr=o("from_pretrained()"),Xgr=o("class method or the "),Wpe=a("code"),Vgr=o("from_config()"),zgr=o(`class
method.`),Wgr=l(),k0=a("p"),Qgr=o("This class cannot be instantiated directly using "),Qpe=a("code"),Hgr=o("__init__()"),Ugr=o(" (throws an error)."),Jgr=l(),Ft=a("div"),m(R0.$$.fragment),Ygr=l(),Hpe=a("p"),Kgr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zgr=l(),Dc=a("p"),ehr=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),ohr=o("not"),rhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jpe=a("code"),thr=o("from_pretrained()"),ahr=o("to load the model weights."),shr=l(),Ype=a("p"),nhr=o("Examples:"),lhr=l(),m(S0.$$.fragment),ihr=l(),Co=a("div"),m(P0.$$.fragment),dhr=l(),Kpe=a("p"),chr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mhr=l(),Cs=a("p"),fhr=o("The model class to instantiate is selected based on the "),Zpe=a("code"),ghr=o("model_type"),hhr=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),uhr=o("pretrained_model_name_or_path"),phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),_hr=o("pretrained_model_name_or_path"),bhr=o(":"),vhr=l(),r_e=a("ul"),UM=a("li"),t_e=a("strong"),Thr=o("tapas"),Fhr=o(" \u2014 "),DG=a("a"),Chr=o("TFTapasForQuestionAnswering"),Mhr=o(" (TAPAS model)"),Ehr=l(),a_e=a("p"),yhr=o("Examples:"),whr=l(),m($0.$$.fragment),Fke=l(),Nc=a("h2"),JM=a("a"),s_e=a("span"),m(I0.$$.fragment),Ahr=l(),n_e=a("span"),Lhr=o("TFAutoModelForTokenClassification"),Cke=l(),Lr=a("div"),m(j0.$$.fragment),Bhr=l(),qc=a("p"),xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),l_e=a("code"),khr=o("from_pretrained()"),Rhr=o("class method or the "),i_e=a("code"),Shr=o("from_config()"),Phr=o(`class
method.`),$hr=l(),D0=a("p"),Ihr=o("This class cannot be instantiated directly using "),d_e=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Nhr=l(),Ct=a("div"),m(N0.$$.fragment),qhr=l(),c_e=a("p"),Ohr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ghr=l(),Oc=a("p"),Xhr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),Vhr=o("not"),zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f_e=a("code"),Whr=o("from_pretrained()"),Qhr=o("to load the model weights."),Hhr=l(),g_e=a("p"),Uhr=o("Examples:"),Jhr=l(),m(q0.$$.fragment),Yhr=l(),Mo=a("div"),m(O0.$$.fragment),Khr=l(),h_e=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eur=l(),Ms=a("p"),our=o("The model class to instantiate is selected based on the "),u_e=a("code"),rur=o("model_type"),tur=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),aur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),nur=o("pretrained_model_name_or_path"),lur=o(":"),iur=l(),K=a("ul"),YM=a("li"),b_e=a("strong"),dur=o("albert"),cur=o(" \u2014 "),NG=a("a"),mur=o("TFAlbertForTokenClassification"),fur=o(" (ALBERT model)"),gur=l(),KM=a("li"),v_e=a("strong"),hur=o("bert"),uur=o(" \u2014 "),qG=a("a"),pur=o("TFBertForTokenClassification"),_ur=o(" (BERT model)"),bur=l(),ZM=a("li"),T_e=a("strong"),vur=o("camembert"),Tur=o(" \u2014 "),OG=a("a"),Fur=o("TFCamembertForTokenClassification"),Cur=o(" (CamemBERT model)"),Mur=l(),e4=a("li"),F_e=a("strong"),Eur=o("convbert"),yur=o(" \u2014 "),GG=a("a"),wur=o("TFConvBertForTokenClassification"),Aur=o(" (ConvBERT model)"),Lur=l(),o4=a("li"),C_e=a("strong"),Bur=o("deberta"),xur=o(" \u2014 "),XG=a("a"),kur=o("TFDebertaForTokenClassification"),Rur=o(" (DeBERTa model)"),Sur=l(),r4=a("li"),M_e=a("strong"),Pur=o("deberta-v2"),$ur=o(" \u2014 "),VG=a("a"),Iur=o("TFDebertaV2ForTokenClassification"),jur=o(" (DeBERTa-v2 model)"),Dur=l(),t4=a("li"),E_e=a("strong"),Nur=o("distilbert"),qur=o(" \u2014 "),zG=a("a"),Our=o("TFDistilBertForTokenClassification"),Gur=o(" (DistilBERT model)"),Xur=l(),a4=a("li"),y_e=a("strong"),Vur=o("electra"),zur=o(" \u2014 "),WG=a("a"),Wur=o("TFElectraForTokenClassification"),Qur=o(" (ELECTRA model)"),Hur=l(),s4=a("li"),w_e=a("strong"),Uur=o("flaubert"),Jur=o(" \u2014 "),QG=a("a"),Yur=o("TFFlaubertForTokenClassification"),Kur=o(" (FlauBERT model)"),Zur=l(),n4=a("li"),A_e=a("strong"),epr=o("funnel"),opr=o(" \u2014 "),HG=a("a"),rpr=o("TFFunnelForTokenClassification"),tpr=o(" (Funnel Transformer model)"),apr=l(),l4=a("li"),L_e=a("strong"),spr=o("layoutlm"),npr=o(" \u2014 "),UG=a("a"),lpr=o("TFLayoutLMForTokenClassification"),ipr=o(" (LayoutLM model)"),dpr=l(),i4=a("li"),B_e=a("strong"),cpr=o("longformer"),mpr=o(" \u2014 "),JG=a("a"),fpr=o("TFLongformerForTokenClassification"),gpr=o(" (Longformer model)"),hpr=l(),d4=a("li"),x_e=a("strong"),upr=o("mobilebert"),ppr=o(" \u2014 "),YG=a("a"),_pr=o("TFMobileBertForTokenClassification"),bpr=o(" (MobileBERT model)"),vpr=l(),c4=a("li"),k_e=a("strong"),Tpr=o("mpnet"),Fpr=o(" \u2014 "),KG=a("a"),Cpr=o("TFMPNetForTokenClassification"),Mpr=o(" (MPNet model)"),Epr=l(),m4=a("li"),R_e=a("strong"),ypr=o("rembert"),wpr=o(" \u2014 "),ZG=a("a"),Apr=o("TFRemBertForTokenClassification"),Lpr=o(" (RemBERT model)"),Bpr=l(),f4=a("li"),S_e=a("strong"),xpr=o("roberta"),kpr=o(" \u2014 "),eX=a("a"),Rpr=o("TFRobertaForTokenClassification"),Spr=o(" (RoBERTa model)"),Ppr=l(),g4=a("li"),P_e=a("strong"),$pr=o("roformer"),Ipr=o(" \u2014 "),oX=a("a"),jpr=o("TFRoFormerForTokenClassification"),Dpr=o(" (RoFormer model)"),Npr=l(),h4=a("li"),$_e=a("strong"),qpr=o("xlm"),Opr=o(" \u2014 "),rX=a("a"),Gpr=o("TFXLMForTokenClassification"),Xpr=o(" (XLM model)"),Vpr=l(),u4=a("li"),I_e=a("strong"),zpr=o("xlm-roberta"),Wpr=o(" \u2014 "),tX=a("a"),Qpr=o("TFXLMRobertaForTokenClassification"),Hpr=o(" (XLM-RoBERTa model)"),Upr=l(),p4=a("li"),j_e=a("strong"),Jpr=o("xlnet"),Ypr=o(" \u2014 "),aX=a("a"),Kpr=o("TFXLNetForTokenClassification"),Zpr=o(" (XLNet model)"),e_r=l(),D_e=a("p"),o_r=o("Examples:"),r_r=l(),m(G0.$$.fragment),Mke=l(),Gc=a("h2"),_4=a("a"),N_e=a("span"),m(X0.$$.fragment),t_r=l(),q_e=a("span"),a_r=o("TFAutoModelForQuestionAnswering"),Eke=l(),Br=a("div"),m(V0.$$.fragment),s_r=l(),Xc=a("p"),n_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),O_e=a("code"),l_r=o("from_pretrained()"),i_r=o("class method or the "),G_e=a("code"),d_r=o("from_config()"),c_r=o(`class
method.`),m_r=l(),z0=a("p"),f_r=o("This class cannot be instantiated directly using "),X_e=a("code"),g_r=o("__init__()"),h_r=o(" (throws an error)."),u_r=l(),Mt=a("div"),m(W0.$$.fragment),p_r=l(),V_e=a("p"),__r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),b_r=l(),Vc=a("p"),v_r=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),T_r=o("not"),F_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W_e=a("code"),C_r=o("from_pretrained()"),M_r=o("to load the model weights."),E_r=l(),Q_e=a("p"),y_r=o("Examples:"),w_r=l(),m(Q0.$$.fragment),A_r=l(),Eo=a("div"),m(H0.$$.fragment),L_r=l(),H_e=a("p"),B_r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x_r=l(),Es=a("p"),k_r=o("The model class to instantiate is selected based on the "),U_e=a("code"),R_r=o("model_type"),S_r=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),P_r=o("pretrained_model_name_or_path"),$_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),I_r=o("pretrained_model_name_or_path"),j_r=o(":"),D_r=l(),Z=a("ul"),b4=a("li"),K_e=a("strong"),N_r=o("albert"),q_r=o(" \u2014 "),sX=a("a"),O_r=o("TFAlbertForQuestionAnswering"),G_r=o(" (ALBERT model)"),X_r=l(),v4=a("li"),Z_e=a("strong"),V_r=o("bert"),z_r=o(" \u2014 "),nX=a("a"),W_r=o("TFBertForQuestionAnswering"),Q_r=o(" (BERT model)"),H_r=l(),T4=a("li"),ebe=a("strong"),U_r=o("camembert"),J_r=o(" \u2014 "),lX=a("a"),Y_r=o("TFCamembertForQuestionAnswering"),K_r=o(" (CamemBERT model)"),Z_r=l(),F4=a("li"),obe=a("strong"),ebr=o("convbert"),obr=o(" \u2014 "),iX=a("a"),rbr=o("TFConvBertForQuestionAnswering"),tbr=o(" (ConvBERT model)"),abr=l(),C4=a("li"),rbe=a("strong"),sbr=o("deberta"),nbr=o(" \u2014 "),dX=a("a"),lbr=o("TFDebertaForQuestionAnswering"),ibr=o(" (DeBERTa model)"),dbr=l(),M4=a("li"),tbe=a("strong"),cbr=o("deberta-v2"),mbr=o(" \u2014 "),cX=a("a"),fbr=o("TFDebertaV2ForQuestionAnswering"),gbr=o(" (DeBERTa-v2 model)"),hbr=l(),E4=a("li"),abe=a("strong"),ubr=o("distilbert"),pbr=o(" \u2014 "),mX=a("a"),_br=o("TFDistilBertForQuestionAnswering"),bbr=o(" (DistilBERT model)"),vbr=l(),y4=a("li"),sbe=a("strong"),Tbr=o("electra"),Fbr=o(" \u2014 "),fX=a("a"),Cbr=o("TFElectraForQuestionAnswering"),Mbr=o(" (ELECTRA model)"),Ebr=l(),w4=a("li"),nbe=a("strong"),ybr=o("flaubert"),wbr=o(" \u2014 "),gX=a("a"),Abr=o("TFFlaubertForQuestionAnsweringSimple"),Lbr=o(" (FlauBERT model)"),Bbr=l(),A4=a("li"),lbe=a("strong"),xbr=o("funnel"),kbr=o(" \u2014 "),hX=a("a"),Rbr=o("TFFunnelForQuestionAnswering"),Sbr=o(" (Funnel Transformer model)"),Pbr=l(),L4=a("li"),ibe=a("strong"),$br=o("longformer"),Ibr=o(" \u2014 "),uX=a("a"),jbr=o("TFLongformerForQuestionAnswering"),Dbr=o(" (Longformer model)"),Nbr=l(),B4=a("li"),dbe=a("strong"),qbr=o("mobilebert"),Obr=o(" \u2014 "),pX=a("a"),Gbr=o("TFMobileBertForQuestionAnswering"),Xbr=o(" (MobileBERT model)"),Vbr=l(),x4=a("li"),cbe=a("strong"),zbr=o("mpnet"),Wbr=o(" \u2014 "),_X=a("a"),Qbr=o("TFMPNetForQuestionAnswering"),Hbr=o(" (MPNet model)"),Ubr=l(),k4=a("li"),mbe=a("strong"),Jbr=o("rembert"),Ybr=o(" \u2014 "),bX=a("a"),Kbr=o("TFRemBertForQuestionAnswering"),Zbr=o(" (RemBERT model)"),e2r=l(),R4=a("li"),fbe=a("strong"),o2r=o("roberta"),r2r=o(" \u2014 "),vX=a("a"),t2r=o("TFRobertaForQuestionAnswering"),a2r=o(" (RoBERTa model)"),s2r=l(),S4=a("li"),gbe=a("strong"),n2r=o("roformer"),l2r=o(" \u2014 "),TX=a("a"),i2r=o("TFRoFormerForQuestionAnswering"),d2r=o(" (RoFormer model)"),c2r=l(),P4=a("li"),hbe=a("strong"),m2r=o("xlm"),f2r=o(" \u2014 "),FX=a("a"),g2r=o("TFXLMForQuestionAnsweringSimple"),h2r=o(" (XLM model)"),u2r=l(),$4=a("li"),ube=a("strong"),p2r=o("xlm-roberta"),_2r=o(" \u2014 "),CX=a("a"),b2r=o("TFXLMRobertaForQuestionAnswering"),v2r=o(" (XLM-RoBERTa model)"),T2r=l(),I4=a("li"),pbe=a("strong"),F2r=o("xlnet"),C2r=o(" \u2014 "),MX=a("a"),M2r=o("TFXLNetForQuestionAnsweringSimple"),E2r=o(" (XLNet model)"),y2r=l(),_be=a("p"),w2r=o("Examples:"),A2r=l(),m(U0.$$.fragment),yke=l(),zc=a("h2"),j4=a("a"),bbe=a("span"),m(J0.$$.fragment),L2r=l(),vbe=a("span"),B2r=o("TFAutoModelForVision2Seq"),wke=l(),xr=a("div"),m(Y0.$$.fragment),x2r=l(),Wc=a("p"),k2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Tbe=a("code"),R2r=o("from_pretrained()"),S2r=o("class method or the "),Fbe=a("code"),P2r=o("from_config()"),$2r=o(`class
method.`),I2r=l(),K0=a("p"),j2r=o("This class cannot be instantiated directly using "),Cbe=a("code"),D2r=o("__init__()"),N2r=o(" (throws an error)."),q2r=l(),Et=a("div"),m(Z0.$$.fragment),O2r=l(),Mbe=a("p"),G2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X2r=l(),Qc=a("p"),V2r=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),z2r=o("not"),W2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ybe=a("code"),Q2r=o("from_pretrained()"),H2r=o("to load the model weights."),U2r=l(),wbe=a("p"),J2r=o("Examples:"),Y2r=l(),m(eL.$$.fragment),K2r=l(),yo=a("div"),m(oL.$$.fragment),Z2r=l(),Abe=a("p"),evr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ovr=l(),ys=a("p"),rvr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),tvr=o("model_type"),avr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),svr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(":"),dvr=l(),kbe=a("ul"),D4=a("li"),Rbe=a("strong"),cvr=o("vision-encoder-decoder"),mvr=o(" \u2014 "),EX=a("a"),fvr=o("TFVisionEncoderDecoderModel"),gvr=o(" (Vision Encoder decoder model)"),hvr=l(),Sbe=a("p"),uvr=o("Examples:"),pvr=l(),m(rL.$$.fragment),Ake=l(),Hc=a("h2"),N4=a("a"),Pbe=a("span"),m(tL.$$.fragment),_vr=l(),$be=a("span"),bvr=o("TFAutoModelForSpeechSeq2Seq"),Lke=l(),kr=a("div"),m(aL.$$.fragment),vvr=l(),Uc=a("p"),Tvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ibe=a("code"),Fvr=o("from_pretrained()"),Cvr=o("class method or the "),jbe=a("code"),Mvr=o("from_config()"),Evr=o(`class
method.`),yvr=l(),sL=a("p"),wvr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Avr=o("__init__()"),Lvr=o(" (throws an error)."),Bvr=l(),yt=a("div"),m(nL.$$.fragment),xvr=l(),Nbe=a("p"),kvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rvr=l(),Jc=a("p"),Svr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),Pvr=o("not"),$vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Obe=a("code"),Ivr=o("from_pretrained()"),jvr=o("to load the model weights."),Dvr=l(),Gbe=a("p"),Nvr=o("Examples:"),qvr=l(),m(lL.$$.fragment),Ovr=l(),wo=a("div"),m(iL.$$.fragment),Gvr=l(),Xbe=a("p"),Xvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vvr=l(),ws=a("p"),zvr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),Wvr=o("model_type"),Qvr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),Hvr=o("pretrained_model_name_or_path"),Uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(":"),Kvr=l(),Qbe=a("ul"),q4=a("li"),Hbe=a("strong"),Zvr=o("speech_to_text"),eTr=o(" \u2014 "),yX=a("a"),oTr=o("TFSpeech2TextForConditionalGeneration"),rTr=o(" (Speech2Text model)"),tTr=l(),Ube=a("p"),aTr=o("Examples:"),sTr=l(),m(dL.$$.fragment),Bke=l(),Yc=a("h2"),O4=a("a"),Jbe=a("span"),m(cL.$$.fragment),nTr=l(),Ybe=a("span"),lTr=o("FlaxAutoModel"),xke=l(),Rr=a("div"),m(mL.$$.fragment),iTr=l(),Kc=a("p"),dTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kbe=a("code"),cTr=o("from_pretrained()"),mTr=o("class method or the "),Zbe=a("code"),fTr=o("from_config()"),gTr=o(`class
method.`),hTr=l(),fL=a("p"),uTr=o("This class cannot be instantiated directly using "),e2e=a("code"),pTr=o("__init__()"),_Tr=o(" (throws an error)."),bTr=l(),wt=a("div"),m(gL.$$.fragment),vTr=l(),o2e=a("p"),TTr=o("Instantiates one of the base model classes of the library from a configuration."),FTr=l(),Zc=a("p"),CTr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),MTr=o("not"),ETr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t2e=a("code"),yTr=o("from_pretrained()"),wTr=o("to load the model weights."),ATr=l(),a2e=a("p"),LTr=o("Examples:"),BTr=l(),m(hL.$$.fragment),xTr=l(),Ao=a("div"),m(uL.$$.fragment),kTr=l(),s2e=a("p"),RTr=o("Instantiate one of the base model classes of the library from a pretrained model."),STr=l(),As=a("p"),PTr=o("The model class to instantiate is selected based on the "),n2e=a("code"),$Tr=o("model_type"),ITr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),jTr=o("pretrained_model_name_or_path"),DTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),NTr=o("pretrained_model_name_or_path"),qTr=o(":"),OTr=l(),z=a("ul"),G4=a("li"),d2e=a("strong"),GTr=o("albert"),XTr=o(" \u2014 "),wX=a("a"),VTr=o("FlaxAlbertModel"),zTr=o(" (ALBERT model)"),WTr=l(),X4=a("li"),c2e=a("strong"),QTr=o("bart"),HTr=o(" \u2014 "),AX=a("a"),UTr=o("FlaxBartModel"),JTr=o(" (BART model)"),YTr=l(),V4=a("li"),m2e=a("strong"),KTr=o("beit"),ZTr=o(" \u2014 "),LX=a("a"),e1r=o("FlaxBeitModel"),o1r=o(" (BEiT model)"),r1r=l(),z4=a("li"),f2e=a("strong"),t1r=o("bert"),a1r=o(" \u2014 "),BX=a("a"),s1r=o("FlaxBertModel"),n1r=o(" (BERT model)"),l1r=l(),W4=a("li"),g2e=a("strong"),i1r=o("big_bird"),d1r=o(" \u2014 "),xX=a("a"),c1r=o("FlaxBigBirdModel"),m1r=o(" (BigBird model)"),f1r=l(),Q4=a("li"),h2e=a("strong"),g1r=o("blenderbot"),h1r=o(" \u2014 "),kX=a("a"),u1r=o("FlaxBlenderbotModel"),p1r=o(" (Blenderbot model)"),_1r=l(),H4=a("li"),u2e=a("strong"),b1r=o("blenderbot-small"),v1r=o(" \u2014 "),RX=a("a"),T1r=o("FlaxBlenderbotSmallModel"),F1r=o(" (BlenderbotSmall model)"),C1r=l(),U4=a("li"),p2e=a("strong"),M1r=o("clip"),E1r=o(" \u2014 "),SX=a("a"),y1r=o("FlaxCLIPModel"),w1r=o(" (CLIP model)"),A1r=l(),J4=a("li"),_2e=a("strong"),L1r=o("distilbert"),B1r=o(" \u2014 "),PX=a("a"),x1r=o("FlaxDistilBertModel"),k1r=o(" (DistilBERT model)"),R1r=l(),Y4=a("li"),b2e=a("strong"),S1r=o("electra"),P1r=o(" \u2014 "),$X=a("a"),$1r=o("FlaxElectraModel"),I1r=o(" (ELECTRA model)"),j1r=l(),K4=a("li"),v2e=a("strong"),D1r=o("gpt2"),N1r=o(" \u2014 "),IX=a("a"),q1r=o("FlaxGPT2Model"),O1r=o(" (OpenAI GPT-2 model)"),G1r=l(),Z4=a("li"),T2e=a("strong"),X1r=o("gpt_neo"),V1r=o(" \u2014 "),jX=a("a"),z1r=o("FlaxGPTNeoModel"),W1r=o(" (GPT Neo model)"),Q1r=l(),eE=a("li"),F2e=a("strong"),H1r=o("gptj"),U1r=o(" \u2014 "),DX=a("a"),J1r=o("FlaxGPTJModel"),Y1r=o(" (GPT-J model)"),K1r=l(),oE=a("li"),C2e=a("strong"),Z1r=o("marian"),eFr=o(" \u2014 "),NX=a("a"),oFr=o("FlaxMarianModel"),rFr=o(" (Marian model)"),tFr=l(),rE=a("li"),M2e=a("strong"),aFr=o("mbart"),sFr=o(" \u2014 "),qX=a("a"),nFr=o("FlaxMBartModel"),lFr=o(" (mBART model)"),iFr=l(),tE=a("li"),E2e=a("strong"),dFr=o("mt5"),cFr=o(" \u2014 "),OX=a("a"),mFr=o("FlaxMT5Model"),fFr=o(" (mT5 model)"),gFr=l(),aE=a("li"),y2e=a("strong"),hFr=o("pegasus"),uFr=o(" \u2014 "),GX=a("a"),pFr=o("FlaxPegasusModel"),_Fr=o(" (Pegasus model)"),bFr=l(),sE=a("li"),w2e=a("strong"),vFr=o("roberta"),TFr=o(" \u2014 "),XX=a("a"),FFr=o("FlaxRobertaModel"),CFr=o(" (RoBERTa model)"),MFr=l(),nE=a("li"),A2e=a("strong"),EFr=o("roformer"),yFr=o(" \u2014 "),VX=a("a"),wFr=o("FlaxRoFormerModel"),AFr=o(" (RoFormer model)"),LFr=l(),lE=a("li"),L2e=a("strong"),BFr=o("t5"),xFr=o(" \u2014 "),zX=a("a"),kFr=o("FlaxT5Model"),RFr=o(" (T5 model)"),SFr=l(),iE=a("li"),B2e=a("strong"),PFr=o("vision-text-dual-encoder"),$Fr=o(" \u2014 "),WX=a("a"),IFr=o("FlaxVisionTextDualEncoderModel"),jFr=o(" (VisionTextDualEncoder model)"),DFr=l(),dE=a("li"),x2e=a("strong"),NFr=o("vit"),qFr=o(" \u2014 "),QX=a("a"),OFr=o("FlaxViTModel"),GFr=o(" (ViT model)"),XFr=l(),cE=a("li"),k2e=a("strong"),VFr=o("wav2vec2"),zFr=o(" \u2014 "),HX=a("a"),WFr=o("FlaxWav2Vec2Model"),QFr=o(" (Wav2Vec2 model)"),HFr=l(),mE=a("li"),R2e=a("strong"),UFr=o("xglm"),JFr=o(" \u2014 "),UX=a("a"),YFr=o("FlaxXGLMModel"),KFr=o(" (XGLM model)"),ZFr=l(),fE=a("li"),S2e=a("strong"),eCr=o("xlm-roberta"),oCr=o(" \u2014 "),JX=a("a"),rCr=o("FlaxXLMRobertaModel"),tCr=o(" (XLM-RoBERTa model)"),aCr=l(),P2e=a("p"),sCr=o("Examples:"),nCr=l(),m(pL.$$.fragment),kke=l(),em=a("h2"),gE=a("a"),$2e=a("span"),m(_L.$$.fragment),lCr=l(),I2e=a("span"),iCr=o("FlaxAutoModelForCausalLM"),Rke=l(),Sr=a("div"),m(bL.$$.fragment),dCr=l(),om=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j2e=a("code"),mCr=o("from_pretrained()"),fCr=o("class method or the "),D2e=a("code"),gCr=o("from_config()"),hCr=o(`class
method.`),uCr=l(),vL=a("p"),pCr=o("This class cannot be instantiated directly using "),N2e=a("code"),_Cr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),At=a("div"),m(TL.$$.fragment),TCr=l(),q2e=a("p"),FCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CCr=l(),rm=a("p"),MCr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),ECr=o("not"),yCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G2e=a("code"),wCr=o("from_pretrained()"),ACr=o("to load the model weights."),LCr=l(),X2e=a("p"),BCr=o("Examples:"),xCr=l(),m(FL.$$.fragment),kCr=l(),Lo=a("div"),m(CL.$$.fragment),RCr=l(),V2e=a("p"),SCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PCr=l(),Ls=a("p"),$Cr=o("The model class to instantiate is selected based on the "),z2e=a("code"),ICr=o("model_type"),jCr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),DCr=o("pretrained_model_name_or_path"),NCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),qCr=o("pretrained_model_name_or_path"),OCr=o(":"),GCr=l(),Bs=a("ul"),hE=a("li"),H2e=a("strong"),XCr=o("gpt2"),VCr=o(" \u2014 "),YX=a("a"),zCr=o("FlaxGPT2LMHeadModel"),WCr=o(" (OpenAI GPT-2 model)"),QCr=l(),uE=a("li"),U2e=a("strong"),HCr=o("gpt_neo"),UCr=o(" \u2014 "),KX=a("a"),JCr=o("FlaxGPTNeoForCausalLM"),YCr=o(" (GPT Neo model)"),KCr=l(),pE=a("li"),J2e=a("strong"),ZCr=o("gptj"),eMr=o(" \u2014 "),ZX=a("a"),oMr=o("FlaxGPTJForCausalLM"),rMr=o(" (GPT-J model)"),tMr=l(),_E=a("li"),Y2e=a("strong"),aMr=o("xglm"),sMr=o(" \u2014 "),eV=a("a"),nMr=o("FlaxXGLMForCausalLM"),lMr=o(" (XGLM model)"),iMr=l(),K2e=a("p"),dMr=o("Examples:"),cMr=l(),m(ML.$$.fragment),Ske=l(),tm=a("h2"),bE=a("a"),Z2e=a("span"),m(EL.$$.fragment),mMr=l(),eve=a("span"),fMr=o("FlaxAutoModelForPreTraining"),Pke=l(),Pr=a("div"),m(yL.$$.fragment),gMr=l(),am=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ove=a("code"),uMr=o("from_pretrained()"),pMr=o("class method or the "),rve=a("code"),_Mr=o("from_config()"),bMr=o(`class
method.`),vMr=l(),wL=a("p"),TMr=o("This class cannot be instantiated directly using "),tve=a("code"),FMr=o("__init__()"),CMr=o(" (throws an error)."),MMr=l(),Lt=a("div"),m(AL.$$.fragment),EMr=l(),ave=a("p"),yMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wMr=l(),sm=a("p"),AMr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),LMr=o("not"),BMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nve=a("code"),xMr=o("from_pretrained()"),kMr=o("to load the model weights."),RMr=l(),lve=a("p"),SMr=o("Examples:"),PMr=l(),m(LL.$$.fragment),$Mr=l(),Bo=a("div"),m(BL.$$.fragment),IMr=l(),ive=a("p"),jMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DMr=l(),xs=a("p"),NMr=o("The model class to instantiate is selected based on the "),dve=a("code"),qMr=o("model_type"),OMr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),GMr=o("pretrained_model_name_or_path"),XMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),VMr=o("pretrained_model_name_or_path"),zMr=o(":"),WMr=l(),ce=a("ul"),vE=a("li"),fve=a("strong"),QMr=o("albert"),HMr=o(" \u2014 "),oV=a("a"),UMr=o("FlaxAlbertForPreTraining"),JMr=o(" (ALBERT model)"),YMr=l(),TE=a("li"),gve=a("strong"),KMr=o("bart"),ZMr=o(" \u2014 "),rV=a("a"),e4r=o("FlaxBartForConditionalGeneration"),o4r=o(" (BART model)"),r4r=l(),FE=a("li"),hve=a("strong"),t4r=o("bert"),a4r=o(" \u2014 "),tV=a("a"),s4r=o("FlaxBertForPreTraining"),n4r=o(" (BERT model)"),l4r=l(),CE=a("li"),uve=a("strong"),i4r=o("big_bird"),d4r=o(" \u2014 "),aV=a("a"),c4r=o("FlaxBigBirdForPreTraining"),m4r=o(" (BigBird model)"),f4r=l(),ME=a("li"),pve=a("strong"),g4r=o("electra"),h4r=o(" \u2014 "),sV=a("a"),u4r=o("FlaxElectraForPreTraining"),p4r=o(" (ELECTRA model)"),_4r=l(),EE=a("li"),_ve=a("strong"),b4r=o("mbart"),v4r=o(" \u2014 "),nV=a("a"),T4r=o("FlaxMBartForConditionalGeneration"),F4r=o(" (mBART model)"),C4r=l(),yE=a("li"),bve=a("strong"),M4r=o("mt5"),E4r=o(" \u2014 "),lV=a("a"),y4r=o("FlaxMT5ForConditionalGeneration"),w4r=o(" (mT5 model)"),A4r=l(),wE=a("li"),vve=a("strong"),L4r=o("roberta"),B4r=o(" \u2014 "),iV=a("a"),x4r=o("FlaxRobertaForMaskedLM"),k4r=o(" (RoBERTa model)"),R4r=l(),AE=a("li"),Tve=a("strong"),S4r=o("roformer"),P4r=o(" \u2014 "),dV=a("a"),$4r=o("FlaxRoFormerForMaskedLM"),I4r=o(" (RoFormer model)"),j4r=l(),LE=a("li"),Fve=a("strong"),D4r=o("t5"),N4r=o(" \u2014 "),cV=a("a"),q4r=o("FlaxT5ForConditionalGeneration"),O4r=o(" (T5 model)"),G4r=l(),BE=a("li"),Cve=a("strong"),X4r=o("wav2vec2"),V4r=o(" \u2014 "),mV=a("a"),z4r=o("FlaxWav2Vec2ForPreTraining"),W4r=o(" (Wav2Vec2 model)"),Q4r=l(),xE=a("li"),Mve=a("strong"),H4r=o("xlm-roberta"),U4r=o(" \u2014 "),fV=a("a"),J4r=o("FlaxXLMRobertaForMaskedLM"),Y4r=o(" (XLM-RoBERTa model)"),K4r=l(),Eve=a("p"),Z4r=o("Examples:"),eEr=l(),m(xL.$$.fragment),$ke=l(),nm=a("h2"),kE=a("a"),yve=a("span"),m(kL.$$.fragment),oEr=l(),wve=a("span"),rEr=o("FlaxAutoModelForMaskedLM"),Ike=l(),$r=a("div"),m(RL.$$.fragment),tEr=l(),lm=a("p"),aEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ave=a("code"),sEr=o("from_pretrained()"),nEr=o("class method or the "),Lve=a("code"),lEr=o("from_config()"),iEr=o(`class
method.`),dEr=l(),SL=a("p"),cEr=o("This class cannot be instantiated directly using "),Bve=a("code"),mEr=o("__init__()"),fEr=o(" (throws an error)."),gEr=l(),Bt=a("div"),m(PL.$$.fragment),hEr=l(),xve=a("p"),uEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pEr=l(),im=a("p"),_Er=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),bEr=o("not"),vEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rve=a("code"),TEr=o("from_pretrained()"),FEr=o("to load the model weights."),CEr=l(),Sve=a("p"),MEr=o("Examples:"),EEr=l(),m($L.$$.fragment),yEr=l(),xo=a("div"),m(IL.$$.fragment),wEr=l(),Pve=a("p"),AEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LEr=l(),ks=a("p"),BEr=o("The model class to instantiate is selected based on the "),$ve=a("code"),xEr=o("model_type"),kEr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),REr=o("pretrained_model_name_or_path"),SEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),PEr=o("pretrained_model_name_or_path"),$Er=o(":"),IEr=l(),_e=a("ul"),RE=a("li"),Dve=a("strong"),jEr=o("albert"),DEr=o(" \u2014 "),gV=a("a"),NEr=o("FlaxAlbertForMaskedLM"),qEr=o(" (ALBERT model)"),OEr=l(),SE=a("li"),Nve=a("strong"),GEr=o("bart"),XEr=o(" \u2014 "),hV=a("a"),VEr=o("FlaxBartForConditionalGeneration"),zEr=o(" (BART model)"),WEr=l(),PE=a("li"),qve=a("strong"),QEr=o("bert"),HEr=o(" \u2014 "),uV=a("a"),UEr=o("FlaxBertForMaskedLM"),JEr=o(" (BERT model)"),YEr=l(),$E=a("li"),Ove=a("strong"),KEr=o("big_bird"),ZEr=o(" \u2014 "),pV=a("a"),e3r=o("FlaxBigBirdForMaskedLM"),o3r=o(" (BigBird model)"),r3r=l(),IE=a("li"),Gve=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),_V=a("a"),s3r=o("FlaxDistilBertForMaskedLM"),n3r=o(" (DistilBERT model)"),l3r=l(),jE=a("li"),Xve=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),bV=a("a"),c3r=o("FlaxElectraForMaskedLM"),m3r=o(" (ELECTRA model)"),f3r=l(),DE=a("li"),Vve=a("strong"),g3r=o("mbart"),h3r=o(" \u2014 "),vV=a("a"),u3r=o("FlaxMBartForConditionalGeneration"),p3r=o(" (mBART model)"),_3r=l(),NE=a("li"),zve=a("strong"),b3r=o("roberta"),v3r=o(" \u2014 "),TV=a("a"),T3r=o("FlaxRobertaForMaskedLM"),F3r=o(" (RoBERTa model)"),C3r=l(),qE=a("li"),Wve=a("strong"),M3r=o("roformer"),E3r=o(" \u2014 "),FV=a("a"),y3r=o("FlaxRoFormerForMaskedLM"),w3r=o(" (RoFormer model)"),A3r=l(),OE=a("li"),Qve=a("strong"),L3r=o("xlm-roberta"),B3r=o(" \u2014 "),CV=a("a"),x3r=o("FlaxXLMRobertaForMaskedLM"),k3r=o(" (XLM-RoBERTa model)"),R3r=l(),Hve=a("p"),S3r=o("Examples:"),P3r=l(),m(jL.$$.fragment),jke=l(),dm=a("h2"),GE=a("a"),Uve=a("span"),m(DL.$$.fragment),$3r=l(),Jve=a("span"),I3r=o("FlaxAutoModelForSeq2SeqLM"),Dke=l(),Ir=a("div"),m(NL.$$.fragment),j3r=l(),cm=a("p"),D3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Yve=a("code"),N3r=o("from_pretrained()"),q3r=o("class method or the "),Kve=a("code"),O3r=o("from_config()"),G3r=o(`class
method.`),X3r=l(),qL=a("p"),V3r=o("This class cannot be instantiated directly using "),Zve=a("code"),z3r=o("__init__()"),W3r=o(" (throws an error)."),Q3r=l(),xt=a("div"),m(OL.$$.fragment),H3r=l(),eTe=a("p"),U3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J3r=l(),mm=a("p"),Y3r=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),K3r=o("not"),Z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rTe=a("code"),e5r=o("from_pretrained()"),o5r=o("to load the model weights."),r5r=l(),tTe=a("p"),t5r=o("Examples:"),a5r=l(),m(GL.$$.fragment),s5r=l(),ko=a("div"),m(XL.$$.fragment),n5r=l(),aTe=a("p"),l5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),i5r=l(),Rs=a("p"),d5r=o("The model class to instantiate is selected based on the "),sTe=a("code"),c5r=o("model_type"),m5r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),f5r=o("pretrained_model_name_or_path"),g5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),h5r=o("pretrained_model_name_or_path"),u5r=o(":"),p5r=l(),Ce=a("ul"),XE=a("li"),iTe=a("strong"),_5r=o("bart"),b5r=o(" \u2014 "),MV=a("a"),v5r=o("FlaxBartForConditionalGeneration"),T5r=o(" (BART model)"),F5r=l(),VE=a("li"),dTe=a("strong"),C5r=o("blenderbot"),M5r=o(" \u2014 "),EV=a("a"),E5r=o("FlaxBlenderbotForConditionalGeneration"),y5r=o(" (Blenderbot model)"),w5r=l(),zE=a("li"),cTe=a("strong"),A5r=o("blenderbot-small"),L5r=o(" \u2014 "),yV=a("a"),B5r=o("FlaxBlenderbotSmallForConditionalGeneration"),x5r=o(" (BlenderbotSmall model)"),k5r=l(),WE=a("li"),mTe=a("strong"),R5r=o("encoder-decoder"),S5r=o(" \u2014 "),wV=a("a"),P5r=o("FlaxEncoderDecoderModel"),$5r=o(" (Encoder decoder model)"),I5r=l(),QE=a("li"),fTe=a("strong"),j5r=o("marian"),D5r=o(" \u2014 "),AV=a("a"),N5r=o("FlaxMarianMTModel"),q5r=o(" (Marian model)"),O5r=l(),HE=a("li"),gTe=a("strong"),G5r=o("mbart"),X5r=o(" \u2014 "),LV=a("a"),V5r=o("FlaxMBartForConditionalGeneration"),z5r=o(" (mBART model)"),W5r=l(),UE=a("li"),hTe=a("strong"),Q5r=o("mt5"),H5r=o(" \u2014 "),BV=a("a"),U5r=o("FlaxMT5ForConditionalGeneration"),J5r=o(" (mT5 model)"),Y5r=l(),JE=a("li"),uTe=a("strong"),K5r=o("pegasus"),Z5r=o(" \u2014 "),xV=a("a"),eyr=o("FlaxPegasusForConditionalGeneration"),oyr=o(" (Pegasus model)"),ryr=l(),YE=a("li"),pTe=a("strong"),tyr=o("t5"),ayr=o(" \u2014 "),kV=a("a"),syr=o("FlaxT5ForConditionalGeneration"),nyr=o(" (T5 model)"),lyr=l(),_Te=a("p"),iyr=o("Examples:"),dyr=l(),m(VL.$$.fragment),Nke=l(),fm=a("h2"),KE=a("a"),bTe=a("span"),m(zL.$$.fragment),cyr=l(),vTe=a("span"),myr=o("FlaxAutoModelForSequenceClassification"),qke=l(),jr=a("div"),m(WL.$$.fragment),fyr=l(),gm=a("p"),gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TTe=a("code"),hyr=o("from_pretrained()"),uyr=o("class method or the "),FTe=a("code"),pyr=o("from_config()"),_yr=o(`class
method.`),byr=l(),QL=a("p"),vyr=o("This class cannot be instantiated directly using "),CTe=a("code"),Tyr=o("__init__()"),Fyr=o(" (throws an error)."),Cyr=l(),kt=a("div"),m(HL.$$.fragment),Myr=l(),MTe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yyr=l(),hm=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),Ayr=o("not"),Lyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yTe=a("code"),Byr=o("from_pretrained()"),xyr=o("to load the model weights."),kyr=l(),wTe=a("p"),Ryr=o("Examples:"),Syr=l(),m(UL.$$.fragment),Pyr=l(),Ro=a("div"),m(JL.$$.fragment),$yr=l(),ATe=a("p"),Iyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jyr=l(),Ss=a("p"),Dyr=o("The model class to instantiate is selected based on the "),LTe=a("code"),Nyr=o("model_type"),qyr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),Oyr=o("pretrained_model_name_or_path"),Gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),Xyr=o("pretrained_model_name_or_path"),Vyr=o(":"),zyr=l(),be=a("ul"),ZE=a("li"),kTe=a("strong"),Wyr=o("albert"),Qyr=o(" \u2014 "),RV=a("a"),Hyr=o("FlaxAlbertForSequenceClassification"),Uyr=o(" (ALBERT model)"),Jyr=l(),e3=a("li"),RTe=a("strong"),Yyr=o("bart"),Kyr=o(" \u2014 "),SV=a("a"),Zyr=o("FlaxBartForSequenceClassification"),ewr=o(" (BART model)"),owr=l(),o3=a("li"),STe=a("strong"),rwr=o("bert"),twr=o(" \u2014 "),PV=a("a"),awr=o("FlaxBertForSequenceClassification"),swr=o(" (BERT model)"),nwr=l(),r3=a("li"),PTe=a("strong"),lwr=o("big_bird"),iwr=o(" \u2014 "),$V=a("a"),dwr=o("FlaxBigBirdForSequenceClassification"),cwr=o(" (BigBird model)"),mwr=l(),t3=a("li"),$Te=a("strong"),fwr=o("distilbert"),gwr=o(" \u2014 "),IV=a("a"),hwr=o("FlaxDistilBertForSequenceClassification"),uwr=o(" (DistilBERT model)"),pwr=l(),a3=a("li"),ITe=a("strong"),_wr=o("electra"),bwr=o(" \u2014 "),jV=a("a"),vwr=o("FlaxElectraForSequenceClassification"),Twr=o(" (ELECTRA model)"),Fwr=l(),s3=a("li"),jTe=a("strong"),Cwr=o("mbart"),Mwr=o(" \u2014 "),DV=a("a"),Ewr=o("FlaxMBartForSequenceClassification"),ywr=o(" (mBART model)"),wwr=l(),n3=a("li"),DTe=a("strong"),Awr=o("roberta"),Lwr=o(" \u2014 "),NV=a("a"),Bwr=o("FlaxRobertaForSequenceClassification"),xwr=o(" (RoBERTa model)"),kwr=l(),l3=a("li"),NTe=a("strong"),Rwr=o("roformer"),Swr=o(" \u2014 "),qV=a("a"),Pwr=o("FlaxRoFormerForSequenceClassification"),$wr=o(" (RoFormer model)"),Iwr=l(),i3=a("li"),qTe=a("strong"),jwr=o("xlm-roberta"),Dwr=o(" \u2014 "),OV=a("a"),Nwr=o("FlaxXLMRobertaForSequenceClassification"),qwr=o(" (XLM-RoBERTa model)"),Owr=l(),OTe=a("p"),Gwr=o("Examples:"),Xwr=l(),m(YL.$$.fragment),Oke=l(),um=a("h2"),d3=a("a"),GTe=a("span"),m(KL.$$.fragment),Vwr=l(),XTe=a("span"),zwr=o("FlaxAutoModelForQuestionAnswering"),Gke=l(),Dr=a("div"),m(ZL.$$.fragment),Wwr=l(),pm=a("p"),Qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VTe=a("code"),Hwr=o("from_pretrained()"),Uwr=o("class method or the "),zTe=a("code"),Jwr=o("from_config()"),Ywr=o(`class
method.`),Kwr=l(),e8=a("p"),Zwr=o("This class cannot be instantiated directly using "),WTe=a("code"),e6r=o("__init__()"),o6r=o(" (throws an error)."),r6r=l(),Rt=a("div"),m(o8.$$.fragment),t6r=l(),QTe=a("p"),a6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),s6r=l(),_m=a("p"),n6r=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),l6r=o("not"),i6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UTe=a("code"),d6r=o("from_pretrained()"),c6r=o("to load the model weights."),m6r=l(),JTe=a("p"),f6r=o("Examples:"),g6r=l(),m(r8.$$.fragment),h6r=l(),So=a("div"),m(t8.$$.fragment),u6r=l(),YTe=a("p"),p6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_6r=l(),Ps=a("p"),b6r=o("The model class to instantiate is selected based on the "),KTe=a("code"),v6r=o("model_type"),T6r=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),F6r=o("pretrained_model_name_or_path"),C6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(":"),y6r=l(),ve=a("ul"),c3=a("li"),o1e=a("strong"),w6r=o("albert"),A6r=o(" \u2014 "),GV=a("a"),L6r=o("FlaxAlbertForQuestionAnswering"),B6r=o(" (ALBERT model)"),x6r=l(),m3=a("li"),r1e=a("strong"),k6r=o("bart"),R6r=o(" \u2014 "),XV=a("a"),S6r=o("FlaxBartForQuestionAnswering"),P6r=o(" (BART model)"),$6r=l(),f3=a("li"),t1e=a("strong"),I6r=o("bert"),j6r=o(" \u2014 "),VV=a("a"),D6r=o("FlaxBertForQuestionAnswering"),N6r=o(" (BERT model)"),q6r=l(),g3=a("li"),a1e=a("strong"),O6r=o("big_bird"),G6r=o(" \u2014 "),zV=a("a"),X6r=o("FlaxBigBirdForQuestionAnswering"),V6r=o(" (BigBird model)"),z6r=l(),h3=a("li"),s1e=a("strong"),W6r=o("distilbert"),Q6r=o(" \u2014 "),WV=a("a"),H6r=o("FlaxDistilBertForQuestionAnswering"),U6r=o(" (DistilBERT model)"),J6r=l(),u3=a("li"),n1e=a("strong"),Y6r=o("electra"),K6r=o(" \u2014 "),QV=a("a"),Z6r=o("FlaxElectraForQuestionAnswering"),eAr=o(" (ELECTRA model)"),oAr=l(),p3=a("li"),l1e=a("strong"),rAr=o("mbart"),tAr=o(" \u2014 "),HV=a("a"),aAr=o("FlaxMBartForQuestionAnswering"),sAr=o(" (mBART model)"),nAr=l(),_3=a("li"),i1e=a("strong"),lAr=o("roberta"),iAr=o(" \u2014 "),UV=a("a"),dAr=o("FlaxRobertaForQuestionAnswering"),cAr=o(" (RoBERTa model)"),mAr=l(),b3=a("li"),d1e=a("strong"),fAr=o("roformer"),gAr=o(" \u2014 "),JV=a("a"),hAr=o("FlaxRoFormerForQuestionAnswering"),uAr=o(" (RoFormer model)"),pAr=l(),v3=a("li"),c1e=a("strong"),_Ar=o("xlm-roberta"),bAr=o(" \u2014 "),YV=a("a"),vAr=o("FlaxXLMRobertaForQuestionAnswering"),TAr=o(" (XLM-RoBERTa model)"),FAr=l(),m1e=a("p"),CAr=o("Examples:"),MAr=l(),m(a8.$$.fragment),Xke=l(),bm=a("h2"),T3=a("a"),f1e=a("span"),m(s8.$$.fragment),EAr=l(),g1e=a("span"),yAr=o("FlaxAutoModelForTokenClassification"),Vke=l(),Nr=a("div"),m(n8.$$.fragment),wAr=l(),vm=a("p"),AAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),h1e=a("code"),LAr=o("from_pretrained()"),BAr=o("class method or the "),u1e=a("code"),xAr=o("from_config()"),kAr=o(`class
method.`),RAr=l(),l8=a("p"),SAr=o("This class cannot be instantiated directly using "),p1e=a("code"),PAr=o("__init__()"),$Ar=o(" (throws an error)."),IAr=l(),St=a("div"),m(i8.$$.fragment),jAr=l(),_1e=a("p"),DAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NAr=l(),Tm=a("p"),qAr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),OAr=o("not"),GAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v1e=a("code"),XAr=o("from_pretrained()"),VAr=o("to load the model weights."),zAr=l(),T1e=a("p"),WAr=o("Examples:"),QAr=l(),m(d8.$$.fragment),HAr=l(),Po=a("div"),m(c8.$$.fragment),UAr=l(),F1e=a("p"),JAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YAr=l(),$s=a("p"),KAr=o("The model class to instantiate is selected based on the "),C1e=a("code"),ZAr=o("model_type"),e0r=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),o0r=o("pretrained_model_name_or_path"),r0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(":"),s0r=l(),Re=a("ul"),F3=a("li"),y1e=a("strong"),n0r=o("albert"),l0r=o(" \u2014 "),KV=a("a"),i0r=o("FlaxAlbertForTokenClassification"),d0r=o(" (ALBERT model)"),c0r=l(),C3=a("li"),w1e=a("strong"),m0r=o("bert"),f0r=o(" \u2014 "),ZV=a("a"),g0r=o("FlaxBertForTokenClassification"),h0r=o(" (BERT model)"),u0r=l(),M3=a("li"),A1e=a("strong"),p0r=o("big_bird"),_0r=o(" \u2014 "),ez=a("a"),b0r=o("FlaxBigBirdForTokenClassification"),v0r=o(" (BigBird model)"),T0r=l(),E3=a("li"),L1e=a("strong"),F0r=o("distilbert"),C0r=o(" \u2014 "),oz=a("a"),M0r=o("FlaxDistilBertForTokenClassification"),E0r=o(" (DistilBERT model)"),y0r=l(),y3=a("li"),B1e=a("strong"),w0r=o("electra"),A0r=o(" \u2014 "),rz=a("a"),L0r=o("FlaxElectraForTokenClassification"),B0r=o(" (ELECTRA model)"),x0r=l(),w3=a("li"),x1e=a("strong"),k0r=o("roberta"),R0r=o(" \u2014 "),tz=a("a"),S0r=o("FlaxRobertaForTokenClassification"),P0r=o(" (RoBERTa model)"),$0r=l(),A3=a("li"),k1e=a("strong"),I0r=o("roformer"),j0r=o(" \u2014 "),az=a("a"),D0r=o("FlaxRoFormerForTokenClassification"),N0r=o(" (RoFormer model)"),q0r=l(),L3=a("li"),R1e=a("strong"),O0r=o("xlm-roberta"),G0r=o(" \u2014 "),sz=a("a"),X0r=o("FlaxXLMRobertaForTokenClassification"),V0r=o(" (XLM-RoBERTa model)"),z0r=l(),S1e=a("p"),W0r=o("Examples:"),Q0r=l(),m(m8.$$.fragment),zke=l(),Fm=a("h2"),B3=a("a"),P1e=a("span"),m(f8.$$.fragment),H0r=l(),$1e=a("span"),U0r=o("FlaxAutoModelForMultipleChoice"),Wke=l(),qr=a("div"),m(g8.$$.fragment),J0r=l(),Cm=a("p"),Y0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),I1e=a("code"),K0r=o("from_pretrained()"),Z0r=o("class method or the "),j1e=a("code"),eLr=o("from_config()"),oLr=o(`class
method.`),rLr=l(),h8=a("p"),tLr=o("This class cannot be instantiated directly using "),D1e=a("code"),aLr=o("__init__()"),sLr=o(" (throws an error)."),nLr=l(),Pt=a("div"),m(u8.$$.fragment),lLr=l(),N1e=a("p"),iLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dLr=l(),Mm=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),mLr=o("not"),fLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O1e=a("code"),gLr=o("from_pretrained()"),hLr=o("to load the model weights."),uLr=l(),G1e=a("p"),pLr=o("Examples:"),_Lr=l(),m(p8.$$.fragment),bLr=l(),$o=a("div"),m(_8.$$.fragment),vLr=l(),X1e=a("p"),TLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FLr=l(),Is=a("p"),CLr=o("The model class to instantiate is selected based on the "),V1e=a("code"),MLr=o("model_type"),ELr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),yLr=o("pretrained_model_name_or_path"),wLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),ALr=o("pretrained_model_name_or_path"),LLr=o(":"),BLr=l(),Se=a("ul"),x3=a("li"),Q1e=a("strong"),xLr=o("albert"),kLr=o(" \u2014 "),nz=a("a"),RLr=o("FlaxAlbertForMultipleChoice"),SLr=o(" (ALBERT model)"),PLr=l(),k3=a("li"),H1e=a("strong"),$Lr=o("bert"),ILr=o(" \u2014 "),lz=a("a"),jLr=o("FlaxBertForMultipleChoice"),DLr=o(" (BERT model)"),NLr=l(),R3=a("li"),U1e=a("strong"),qLr=o("big_bird"),OLr=o(" \u2014 "),iz=a("a"),GLr=o("FlaxBigBirdForMultipleChoice"),XLr=o(" (BigBird model)"),VLr=l(),S3=a("li"),J1e=a("strong"),zLr=o("distilbert"),WLr=o(" \u2014 "),dz=a("a"),QLr=o("FlaxDistilBertForMultipleChoice"),HLr=o(" (DistilBERT model)"),ULr=l(),P3=a("li"),Y1e=a("strong"),JLr=o("electra"),YLr=o(" \u2014 "),cz=a("a"),KLr=o("FlaxElectraForMultipleChoice"),ZLr=o(" (ELECTRA model)"),e8r=l(),$3=a("li"),K1e=a("strong"),o8r=o("roberta"),r8r=o(" \u2014 "),mz=a("a"),t8r=o("FlaxRobertaForMultipleChoice"),a8r=o(" (RoBERTa model)"),s8r=l(),I3=a("li"),Z1e=a("strong"),n8r=o("roformer"),l8r=o(" \u2014 "),fz=a("a"),i8r=o("FlaxRoFormerForMultipleChoice"),d8r=o(" (RoFormer model)"),c8r=l(),j3=a("li"),eFe=a("strong"),m8r=o("xlm-roberta"),f8r=o(" \u2014 "),gz=a("a"),g8r=o("FlaxXLMRobertaForMultipleChoice"),h8r=o(" (XLM-RoBERTa model)"),u8r=l(),oFe=a("p"),p8r=o("Examples:"),_8r=l(),m(b8.$$.fragment),Qke=l(),Em=a("h2"),D3=a("a"),rFe=a("span"),m(v8.$$.fragment),b8r=l(),tFe=a("span"),v8r=o("FlaxAutoModelForNextSentencePrediction"),Hke=l(),Or=a("div"),m(T8.$$.fragment),T8r=l(),ym=a("p"),F8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aFe=a("code"),C8r=o("from_pretrained()"),M8r=o("class method or the "),sFe=a("code"),E8r=o("from_config()"),y8r=o(`class
method.`),w8r=l(),F8=a("p"),A8r=o("This class cannot be instantiated directly using "),nFe=a("code"),L8r=o("__init__()"),B8r=o(" (throws an error)."),x8r=l(),$t=a("div"),m(C8.$$.fragment),k8r=l(),lFe=a("p"),R8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S8r=l(),wm=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),$8r=o("not"),I8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dFe=a("code"),j8r=o("from_pretrained()"),D8r=o("to load the model weights."),N8r=l(),cFe=a("p"),q8r=o("Examples:"),O8r=l(),m(M8.$$.fragment),G8r=l(),Io=a("div"),m(E8.$$.fragment),X8r=l(),mFe=a("p"),V8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z8r=l(),js=a("p"),W8r=o("The model class to instantiate is selected based on the "),fFe=a("code"),Q8r=o("model_type"),H8r=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(":"),Z8r=l(),uFe=a("ul"),N3=a("li"),pFe=a("strong"),e7r=o("bert"),o7r=o(" \u2014 "),hz=a("a"),r7r=o("FlaxBertForNextSentencePrediction"),t7r=o(" (BERT model)"),a7r=l(),_Fe=a("p"),s7r=o("Examples:"),n7r=l(),m(y8.$$.fragment),Uke=l(),Am=a("h2"),q3=a("a"),bFe=a("span"),m(w8.$$.fragment),l7r=l(),vFe=a("span"),i7r=o("FlaxAutoModelForImageClassification"),Jke=l(),Gr=a("div"),m(A8.$$.fragment),d7r=l(),Lm=a("p"),c7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TFe=a("code"),m7r=o("from_pretrained()"),f7r=o("class method or the "),FFe=a("code"),g7r=o("from_config()"),h7r=o(`class
method.`),u7r=l(),L8=a("p"),p7r=o("This class cannot be instantiated directly using "),CFe=a("code"),_7r=o("__init__()"),b7r=o(" (throws an error)."),v7r=l(),It=a("div"),m(B8.$$.fragment),T7r=l(),MFe=a("p"),F7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C7r=l(),Bm=a("p"),M7r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),E7r=o("not"),y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yFe=a("code"),w7r=o("from_pretrained()"),A7r=o("to load the model weights."),L7r=l(),wFe=a("p"),B7r=o("Examples:"),x7r=l(),m(x8.$$.fragment),k7r=l(),jo=a("div"),m(k8.$$.fragment),R7r=l(),AFe=a("p"),S7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P7r=l(),Ds=a("p"),$7r=o("The model class to instantiate is selected based on the "),LFe=a("code"),I7r=o("model_type"),j7r=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),D7r=o("pretrained_model_name_or_path"),N7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),q7r=o("pretrained_model_name_or_path"),O7r=o(":"),G7r=l(),R8=a("ul"),O3=a("li"),kFe=a("strong"),X7r=o("beit"),V7r=o(" \u2014 "),uz=a("a"),z7r=o("FlaxBeitForImageClassification"),W7r=o(" (BEiT model)"),Q7r=l(),G3=a("li"),RFe=a("strong"),H7r=o("vit"),U7r=o(" \u2014 "),pz=a("a"),J7r=o("FlaxViTForImageClassification"),Y7r=o(" (ViT model)"),K7r=l(),SFe=a("p"),Z7r=o("Examples:"),e9r=l(),m(S8.$$.fragment),Yke=l(),xm=a("h2"),X3=a("a"),PFe=a("span"),m(P8.$$.fragment),o9r=l(),$Fe=a("span"),r9r=o("FlaxAutoModelForVision2Seq"),Kke=l(),Xr=a("div"),m($8.$$.fragment),t9r=l(),km=a("p"),a9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IFe=a("code"),s9r=o("from_pretrained()"),n9r=o("class method or the "),jFe=a("code"),l9r=o("from_config()"),i9r=o(`class
method.`),d9r=l(),I8=a("p"),c9r=o("This class cannot be instantiated directly using "),DFe=a("code"),m9r=o("__init__()"),f9r=o(" (throws an error)."),g9r=l(),jt=a("div"),m(j8.$$.fragment),h9r=l(),NFe=a("p"),u9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p9r=l(),Rm=a("p"),_9r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),b9r=o("not"),v9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OFe=a("code"),T9r=o("from_pretrained()"),F9r=o("to load the model weights."),C9r=l(),GFe=a("p"),M9r=o("Examples:"),E9r=l(),m(D8.$$.fragment),y9r=l(),Do=a("div"),m(N8.$$.fragment),w9r=l(),XFe=a("p"),A9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L9r=l(),Ns=a("p"),B9r=o("The model class to instantiate is selected based on the "),VFe=a("code"),x9r=o("model_type"),k9r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),R9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),P9r=o("pretrained_model_name_or_path"),$9r=o(":"),I9r=l(),QFe=a("ul"),V3=a("li"),HFe=a("strong"),j9r=o("vision-encoder-decoder"),D9r=o(" \u2014 "),_z=a("a"),N9r=o("FlaxVisionEncoderDecoderModel"),q9r=o(" (Vision Encoder decoder model)"),O9r=l(),UFe=a("p"),G9r=o("Examples:"),X9r=l(),m(q8.$$.fragment),this.h()},l(d){const _=pCt('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(t),Pe=i(d),de=s(d,"H1",{class:!0});var O8=n(de);ge=s(O8,"A",{id:!0,class:!0,href:!0});var JFe=n(ge);io=s(JFe,"SPAN",{});var YFe=n(io);f(me.$$.fragment,YFe),YFe.forEach(t),JFe.forEach(t),Te=i(O8),Vo=s(O8,"SPAN",{});var z9r=n(Vo);Ii=r(z9r,"Auto Classes"),z9r.forEach(t),O8.forEach(t),Pm=i(d),ca=s(d,"P",{});var eRe=n(ca);ji=r(eRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=s(eRe,"CODE",{});var W9r=n(Di);z5=r(W9r,"from_pretrained()"),W9r.forEach(t),$m=r(eRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),eRe.forEach(t),Le=i(d),co=s(d,"P",{});var z3=n(co);Ni=r(z3,"Instantiating one of "),qs=s(z3,"A",{href:!0});var Q9r=n(qs);W5=r(Q9r,"AutoConfig"),Q9r.forEach(t),Os=r(z3,", "),Gs=s(z3,"A",{href:!0});var H9r=n(Gs);Q5=r(H9r,"AutoModel"),H9r.forEach(t),qi=r(z3,`, and
`),Xs=s(z3,"A",{href:!0});var U9r=n(Xs);H5=r(U9r,"AutoTokenizer"),U9r.forEach(t),Oi=r(z3," will directly create a class of the relevant architecture. For instance"),z3.forEach(t),Im=i(d),f(Na.$$.fragment,d),mo=i(d),he=s(d,"P",{});var oRe=n(he);D7=r(oRe,"will create a model that is an instance of "),Gi=s(oRe,"A",{href:!0});var J9r=n(Gi);N7=r(J9r,"BertModel"),J9r.forEach(t),q7=r(oRe,"."),oRe.forEach(t),zo=i(d),qa=s(d,"P",{});var rRe=n(qa);O7=r(rRe,"There is one class of "),jm=s(rRe,"CODE",{});var Y9r=n(jm);G7=r(Y9r,"AutoModel"),Y9r.forEach(t),fPe=r(rRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rRe.forEach(t),KBe=i(d),Xi=s(d,"H2",{class:!0});var tRe=n(Xi);Dm=s(tRe,"A",{id:!0,class:!0,href:!0});var K9r=n(Dm);cQ=s(K9r,"SPAN",{});var Z9r=n(cQ);f(U5.$$.fragment,Z9r),Z9r.forEach(t),K9r.forEach(t),gPe=i(tRe),mQ=s(tRe,"SPAN",{});var eBr=n(mQ);hPe=r(eBr,"Extending the Auto Classes"),eBr.forEach(t),tRe.forEach(t),ZBe=i(d),Vs=s(d,"P",{});var bz=n(Vs);uPe=r(bz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fQ=s(bz,"CODE",{});var oBr=n(fQ);pPe=r(oBr,"NewModel"),oBr.forEach(t),_Pe=r(bz,", make sure you have a "),gQ=s(bz,"CODE",{});var rBr=n(gQ);bPe=r(rBr,"NewModelConfig"),rBr.forEach(t),vPe=r(bz,` then you can add those to the auto
classes like this:`),bz.forEach(t),exe=i(d),f(J5.$$.fragment,d),oxe=i(d),X7=s(d,"P",{});var tBr=n(X7);TPe=r(tBr,"You will then be able to use the auto classes like you would usually do!"),tBr.forEach(t),rxe=i(d),f(Nm.$$.fragment,d),txe=i(d),Vi=s(d,"H2",{class:!0});var aRe=n(Vi);qm=s(aRe,"A",{id:!0,class:!0,href:!0});var aBr=n(qm);hQ=s(aBr,"SPAN",{});var sBr=n(hQ);f(Y5.$$.fragment,sBr),sBr.forEach(t),aBr.forEach(t),FPe=i(aRe),uQ=s(aRe,"SPAN",{});var nBr=n(uQ);CPe=r(nBr,"AutoConfig"),nBr.forEach(t),aRe.forEach(t),axe=i(d),Wo=s(d,"DIV",{class:!0});var Gn=n(Wo);f(K5.$$.fragment,Gn),MPe=i(Gn),Z5=s(Gn,"P",{});var sRe=n(Z5);EPe=r(sRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),V7=s(sRe,"A",{href:!0});var lBr=n(V7);yPe=r(lBr,"from_pretrained()"),lBr.forEach(t),wPe=r(sRe," class method."),sRe.forEach(t),APe=i(Gn),ey=s(Gn,"P",{});var nRe=n(ey);LPe=r(nRe,"This class cannot be instantiated directly using "),pQ=s(nRe,"CODE",{});var iBr=n(pQ);BPe=r(iBr,"__init__()"),iBr.forEach(t),xPe=r(nRe," (throws an error)."),nRe.forEach(t),kPe=i(Gn),fo=s(Gn,"DIV",{class:!0});var fa=n(fo);f(oy.$$.fragment,fa),RPe=i(fa),_Q=s(fa,"P",{});var dBr=n(_Q);SPe=r(dBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dBr.forEach(t),PPe=i(fa),zi=s(fa,"P",{});var vz=n(zi);$Pe=r(vz,"The configuration class to instantiate is selected based on the "),bQ=s(vz,"CODE",{});var cBr=n(bQ);IPe=r(cBr,"model_type"),cBr.forEach(t),jPe=r(vz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vQ=s(vz,"CODE",{});var mBr=n(vQ);DPe=r(mBr,"pretrained_model_name_or_path"),mBr.forEach(t),NPe=r(vz,":"),vz.forEach(t),qPe=i(fa),v=s(fa,"UL",{});var T=n(v);Om=s(T,"LI",{});var KFe=n(Om);TQ=s(KFe,"STRONG",{});var fBr=n(TQ);OPe=r(fBr,"albert"),fBr.forEach(t),GPe=r(KFe," \u2014 "),z7=s(KFe,"A",{href:!0});var gBr=n(z7);XPe=r(gBr,"AlbertConfig"),gBr.forEach(t),VPe=r(KFe," (ALBERT model)"),KFe.forEach(t),zPe=i(T),Gm=s(T,"LI",{});var ZFe=n(Gm);FQ=s(ZFe,"STRONG",{});var hBr=n(FQ);WPe=r(hBr,"bart"),hBr.forEach(t),QPe=r(ZFe," \u2014 "),W7=s(ZFe,"A",{href:!0});var uBr=n(W7);HPe=r(uBr,"BartConfig"),uBr.forEach(t),UPe=r(ZFe," (BART model)"),ZFe.forEach(t),JPe=i(T),Xm=s(T,"LI",{});var eCe=n(Xm);CQ=s(eCe,"STRONG",{});var pBr=n(CQ);YPe=r(pBr,"beit"),pBr.forEach(t),KPe=r(eCe," \u2014 "),Q7=s(eCe,"A",{href:!0});var _Br=n(Q7);ZPe=r(_Br,"BeitConfig"),_Br.forEach(t),e$e=r(eCe," (BEiT model)"),eCe.forEach(t),o$e=i(T),Vm=s(T,"LI",{});var oCe=n(Vm);MQ=s(oCe,"STRONG",{});var bBr=n(MQ);r$e=r(bBr,"bert"),bBr.forEach(t),t$e=r(oCe," \u2014 "),H7=s(oCe,"A",{href:!0});var vBr=n(H7);a$e=r(vBr,"BertConfig"),vBr.forEach(t),s$e=r(oCe," (BERT model)"),oCe.forEach(t),n$e=i(T),zm=s(T,"LI",{});var rCe=n(zm);EQ=s(rCe,"STRONG",{});var TBr=n(EQ);l$e=r(TBr,"bert-generation"),TBr.forEach(t),i$e=r(rCe," \u2014 "),U7=s(rCe,"A",{href:!0});var FBr=n(U7);d$e=r(FBr,"BertGenerationConfig"),FBr.forEach(t),c$e=r(rCe," (Bert Generation model)"),rCe.forEach(t),m$e=i(T),Wm=s(T,"LI",{});var tCe=n(Wm);yQ=s(tCe,"STRONG",{});var CBr=n(yQ);f$e=r(CBr,"big_bird"),CBr.forEach(t),g$e=r(tCe," \u2014 "),J7=s(tCe,"A",{href:!0});var MBr=n(J7);h$e=r(MBr,"BigBirdConfig"),MBr.forEach(t),u$e=r(tCe," (BigBird model)"),tCe.forEach(t),p$e=i(T),Qm=s(T,"LI",{});var aCe=n(Qm);wQ=s(aCe,"STRONG",{});var EBr=n(wQ);_$e=r(EBr,"bigbird_pegasus"),EBr.forEach(t),b$e=r(aCe," \u2014 "),Y7=s(aCe,"A",{href:!0});var yBr=n(Y7);v$e=r(yBr,"BigBirdPegasusConfig"),yBr.forEach(t),T$e=r(aCe," (BigBirdPegasus model)"),aCe.forEach(t),F$e=i(T),Hm=s(T,"LI",{});var sCe=n(Hm);AQ=s(sCe,"STRONG",{});var wBr=n(AQ);C$e=r(wBr,"blenderbot"),wBr.forEach(t),M$e=r(sCe," \u2014 "),K7=s(sCe,"A",{href:!0});var ABr=n(K7);E$e=r(ABr,"BlenderbotConfig"),ABr.forEach(t),y$e=r(sCe," (Blenderbot model)"),sCe.forEach(t),w$e=i(T),Um=s(T,"LI",{});var nCe=n(Um);LQ=s(nCe,"STRONG",{});var LBr=n(LQ);A$e=r(LBr,"blenderbot-small"),LBr.forEach(t),L$e=r(nCe," \u2014 "),Z7=s(nCe,"A",{href:!0});var BBr=n(Z7);B$e=r(BBr,"BlenderbotSmallConfig"),BBr.forEach(t),x$e=r(nCe," (BlenderbotSmall model)"),nCe.forEach(t),k$e=i(T),Jm=s(T,"LI",{});var lCe=n(Jm);BQ=s(lCe,"STRONG",{});var xBr=n(BQ);R$e=r(xBr,"camembert"),xBr.forEach(t),S$e=r(lCe," \u2014 "),e9=s(lCe,"A",{href:!0});var kBr=n(e9);P$e=r(kBr,"CamembertConfig"),kBr.forEach(t),$$e=r(lCe," (CamemBERT model)"),lCe.forEach(t),I$e=i(T),Ym=s(T,"LI",{});var iCe=n(Ym);xQ=s(iCe,"STRONG",{});var RBr=n(xQ);j$e=r(RBr,"canine"),RBr.forEach(t),D$e=r(iCe," \u2014 "),o9=s(iCe,"A",{href:!0});var SBr=n(o9);N$e=r(SBr,"CanineConfig"),SBr.forEach(t),q$e=r(iCe," (Canine model)"),iCe.forEach(t),O$e=i(T),Km=s(T,"LI",{});var dCe=n(Km);kQ=s(dCe,"STRONG",{});var PBr=n(kQ);G$e=r(PBr,"clip"),PBr.forEach(t),X$e=r(dCe," \u2014 "),r9=s(dCe,"A",{href:!0});var $Br=n(r9);V$e=r($Br,"CLIPConfig"),$Br.forEach(t),z$e=r(dCe," (CLIP model)"),dCe.forEach(t),W$e=i(T),Zm=s(T,"LI",{});var cCe=n(Zm);RQ=s(cCe,"STRONG",{});var IBr=n(RQ);Q$e=r(IBr,"convbert"),IBr.forEach(t),H$e=r(cCe," \u2014 "),t9=s(cCe,"A",{href:!0});var jBr=n(t9);U$e=r(jBr,"ConvBertConfig"),jBr.forEach(t),J$e=r(cCe," (ConvBERT model)"),cCe.forEach(t),Y$e=i(T),ef=s(T,"LI",{});var mCe=n(ef);SQ=s(mCe,"STRONG",{});var DBr=n(SQ);K$e=r(DBr,"convnext"),DBr.forEach(t),Z$e=r(mCe," \u2014 "),a9=s(mCe,"A",{href:!0});var NBr=n(a9);eIe=r(NBr,"ConvNextConfig"),NBr.forEach(t),oIe=r(mCe," (ConvNext model)"),mCe.forEach(t),rIe=i(T),of=s(T,"LI",{});var fCe=n(of);PQ=s(fCe,"STRONG",{});var qBr=n(PQ);tIe=r(qBr,"ctrl"),qBr.forEach(t),aIe=r(fCe," \u2014 "),s9=s(fCe,"A",{href:!0});var OBr=n(s9);sIe=r(OBr,"CTRLConfig"),OBr.forEach(t),nIe=r(fCe," (CTRL model)"),fCe.forEach(t),lIe=i(T),rf=s(T,"LI",{});var gCe=n(rf);$Q=s(gCe,"STRONG",{});var GBr=n($Q);iIe=r(GBr,"data2vec-audio"),GBr.forEach(t),dIe=r(gCe," \u2014 "),n9=s(gCe,"A",{href:!0});var XBr=n(n9);cIe=r(XBr,"Data2VecAudioConfig"),XBr.forEach(t),mIe=r(gCe," (Data2VecAudio model)"),gCe.forEach(t),fIe=i(T),tf=s(T,"LI",{});var hCe=n(tf);IQ=s(hCe,"STRONG",{});var VBr=n(IQ);gIe=r(VBr,"data2vec-text"),VBr.forEach(t),hIe=r(hCe," \u2014 "),l9=s(hCe,"A",{href:!0});var zBr=n(l9);uIe=r(zBr,"Data2VecTextConfig"),zBr.forEach(t),pIe=r(hCe," (Data2VecText model)"),hCe.forEach(t),_Ie=i(T),af=s(T,"LI",{});var uCe=n(af);jQ=s(uCe,"STRONG",{});var WBr=n(jQ);bIe=r(WBr,"deberta"),WBr.forEach(t),vIe=r(uCe," \u2014 "),i9=s(uCe,"A",{href:!0});var QBr=n(i9);TIe=r(QBr,"DebertaConfig"),QBr.forEach(t),FIe=r(uCe," (DeBERTa model)"),uCe.forEach(t),CIe=i(T),sf=s(T,"LI",{});var pCe=n(sf);DQ=s(pCe,"STRONG",{});var HBr=n(DQ);MIe=r(HBr,"deberta-v2"),HBr.forEach(t),EIe=r(pCe," \u2014 "),d9=s(pCe,"A",{href:!0});var UBr=n(d9);yIe=r(UBr,"DebertaV2Config"),UBr.forEach(t),wIe=r(pCe," (DeBERTa-v2 model)"),pCe.forEach(t),AIe=i(T),nf=s(T,"LI",{});var _Ce=n(nf);NQ=s(_Ce,"STRONG",{});var JBr=n(NQ);LIe=r(JBr,"deit"),JBr.forEach(t),BIe=r(_Ce," \u2014 "),c9=s(_Ce,"A",{href:!0});var YBr=n(c9);xIe=r(YBr,"DeiTConfig"),YBr.forEach(t),kIe=r(_Ce," (DeiT model)"),_Ce.forEach(t),RIe=i(T),lf=s(T,"LI",{});var bCe=n(lf);qQ=s(bCe,"STRONG",{});var KBr=n(qQ);SIe=r(KBr,"detr"),KBr.forEach(t),PIe=r(bCe," \u2014 "),m9=s(bCe,"A",{href:!0});var ZBr=n(m9);$Ie=r(ZBr,"DetrConfig"),ZBr.forEach(t),IIe=r(bCe," (DETR model)"),bCe.forEach(t),jIe=i(T),df=s(T,"LI",{});var vCe=n(df);OQ=s(vCe,"STRONG",{});var exr=n(OQ);DIe=r(exr,"distilbert"),exr.forEach(t),NIe=r(vCe," \u2014 "),f9=s(vCe,"A",{href:!0});var oxr=n(f9);qIe=r(oxr,"DistilBertConfig"),oxr.forEach(t),OIe=r(vCe," (DistilBERT model)"),vCe.forEach(t),GIe=i(T),cf=s(T,"LI",{});var TCe=n(cf);GQ=s(TCe,"STRONG",{});var rxr=n(GQ);XIe=r(rxr,"dpr"),rxr.forEach(t),VIe=r(TCe," \u2014 "),g9=s(TCe,"A",{href:!0});var txr=n(g9);zIe=r(txr,"DPRConfig"),txr.forEach(t),WIe=r(TCe," (DPR model)"),TCe.forEach(t),QIe=i(T),mf=s(T,"LI",{});var FCe=n(mf);XQ=s(FCe,"STRONG",{});var axr=n(XQ);HIe=r(axr,"electra"),axr.forEach(t),UIe=r(FCe," \u2014 "),h9=s(FCe,"A",{href:!0});var sxr=n(h9);JIe=r(sxr,"ElectraConfig"),sxr.forEach(t),YIe=r(FCe," (ELECTRA model)"),FCe.forEach(t),KIe=i(T),ff=s(T,"LI",{});var CCe=n(ff);VQ=s(CCe,"STRONG",{});var nxr=n(VQ);ZIe=r(nxr,"encoder-decoder"),nxr.forEach(t),eje=r(CCe," \u2014 "),u9=s(CCe,"A",{href:!0});var lxr=n(u9);oje=r(lxr,"EncoderDecoderConfig"),lxr.forEach(t),rje=r(CCe," (Encoder decoder model)"),CCe.forEach(t),tje=i(T),gf=s(T,"LI",{});var MCe=n(gf);zQ=s(MCe,"STRONG",{});var ixr=n(zQ);aje=r(ixr,"flaubert"),ixr.forEach(t),sje=r(MCe," \u2014 "),p9=s(MCe,"A",{href:!0});var dxr=n(p9);nje=r(dxr,"FlaubertConfig"),dxr.forEach(t),lje=r(MCe," (FlauBERT model)"),MCe.forEach(t),ije=i(T),hf=s(T,"LI",{});var ECe=n(hf);WQ=s(ECe,"STRONG",{});var cxr=n(WQ);dje=r(cxr,"fnet"),cxr.forEach(t),cje=r(ECe," \u2014 "),_9=s(ECe,"A",{href:!0});var mxr=n(_9);mje=r(mxr,"FNetConfig"),mxr.forEach(t),fje=r(ECe," (FNet model)"),ECe.forEach(t),gje=i(T),uf=s(T,"LI",{});var yCe=n(uf);QQ=s(yCe,"STRONG",{});var fxr=n(QQ);hje=r(fxr,"fsmt"),fxr.forEach(t),uje=r(yCe," \u2014 "),b9=s(yCe,"A",{href:!0});var gxr=n(b9);pje=r(gxr,"FSMTConfig"),gxr.forEach(t),_je=r(yCe," (FairSeq Machine-Translation model)"),yCe.forEach(t),bje=i(T),pf=s(T,"LI",{});var wCe=n(pf);HQ=s(wCe,"STRONG",{});var hxr=n(HQ);vje=r(hxr,"funnel"),hxr.forEach(t),Tje=r(wCe," \u2014 "),v9=s(wCe,"A",{href:!0});var uxr=n(v9);Fje=r(uxr,"FunnelConfig"),uxr.forEach(t),Cje=r(wCe," (Funnel Transformer model)"),wCe.forEach(t),Mje=i(T),_f=s(T,"LI",{});var ACe=n(_f);UQ=s(ACe,"STRONG",{});var pxr=n(UQ);Eje=r(pxr,"gpt2"),pxr.forEach(t),yje=r(ACe," \u2014 "),T9=s(ACe,"A",{href:!0});var _xr=n(T9);wje=r(_xr,"GPT2Config"),_xr.forEach(t),Aje=r(ACe," (OpenAI GPT-2 model)"),ACe.forEach(t),Lje=i(T),bf=s(T,"LI",{});var LCe=n(bf);JQ=s(LCe,"STRONG",{});var bxr=n(JQ);Bje=r(bxr,"gpt_neo"),bxr.forEach(t),xje=r(LCe," \u2014 "),F9=s(LCe,"A",{href:!0});var vxr=n(F9);kje=r(vxr,"GPTNeoConfig"),vxr.forEach(t),Rje=r(LCe," (GPT Neo model)"),LCe.forEach(t),Sje=i(T),vf=s(T,"LI",{});var BCe=n(vf);YQ=s(BCe,"STRONG",{});var Txr=n(YQ);Pje=r(Txr,"gptj"),Txr.forEach(t),$je=r(BCe," \u2014 "),C9=s(BCe,"A",{href:!0});var Fxr=n(C9);Ije=r(Fxr,"GPTJConfig"),Fxr.forEach(t),jje=r(BCe," (GPT-J model)"),BCe.forEach(t),Dje=i(T),Tf=s(T,"LI",{});var xCe=n(Tf);KQ=s(xCe,"STRONG",{});var Cxr=n(KQ);Nje=r(Cxr,"hubert"),Cxr.forEach(t),qje=r(xCe," \u2014 "),M9=s(xCe,"A",{href:!0});var Mxr=n(M9);Oje=r(Mxr,"HubertConfig"),Mxr.forEach(t),Gje=r(xCe," (Hubert model)"),xCe.forEach(t),Xje=i(T),Ff=s(T,"LI",{});var kCe=n(Ff);ZQ=s(kCe,"STRONG",{});var Exr=n(ZQ);Vje=r(Exr,"ibert"),Exr.forEach(t),zje=r(kCe," \u2014 "),E9=s(kCe,"A",{href:!0});var yxr=n(E9);Wje=r(yxr,"IBertConfig"),yxr.forEach(t),Qje=r(kCe," (I-BERT model)"),kCe.forEach(t),Hje=i(T),Cf=s(T,"LI",{});var RCe=n(Cf);eH=s(RCe,"STRONG",{});var wxr=n(eH);Uje=r(wxr,"imagegpt"),wxr.forEach(t),Jje=r(RCe," \u2014 "),y9=s(RCe,"A",{href:!0});var Axr=n(y9);Yje=r(Axr,"ImageGPTConfig"),Axr.forEach(t),Kje=r(RCe," (ImageGPT model)"),RCe.forEach(t),Zje=i(T),Mf=s(T,"LI",{});var SCe=n(Mf);oH=s(SCe,"STRONG",{});var Lxr=n(oH);eDe=r(Lxr,"layoutlm"),Lxr.forEach(t),oDe=r(SCe," \u2014 "),w9=s(SCe,"A",{href:!0});var Bxr=n(w9);rDe=r(Bxr,"LayoutLMConfig"),Bxr.forEach(t),tDe=r(SCe," (LayoutLM model)"),SCe.forEach(t),aDe=i(T),Ef=s(T,"LI",{});var PCe=n(Ef);rH=s(PCe,"STRONG",{});var xxr=n(rH);sDe=r(xxr,"layoutlmv2"),xxr.forEach(t),nDe=r(PCe," \u2014 "),A9=s(PCe,"A",{href:!0});var kxr=n(A9);lDe=r(kxr,"LayoutLMv2Config"),kxr.forEach(t),iDe=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),dDe=i(T),yf=s(T,"LI",{});var $Ce=n(yf);tH=s($Ce,"STRONG",{});var Rxr=n(tH);cDe=r(Rxr,"led"),Rxr.forEach(t),mDe=r($Ce," \u2014 "),L9=s($Ce,"A",{href:!0});var Sxr=n(L9);fDe=r(Sxr,"LEDConfig"),Sxr.forEach(t),gDe=r($Ce," (LED model)"),$Ce.forEach(t),hDe=i(T),wf=s(T,"LI",{});var ICe=n(wf);aH=s(ICe,"STRONG",{});var Pxr=n(aH);uDe=r(Pxr,"longformer"),Pxr.forEach(t),pDe=r(ICe," \u2014 "),B9=s(ICe,"A",{href:!0});var $xr=n(B9);_De=r($xr,"LongformerConfig"),$xr.forEach(t),bDe=r(ICe," (Longformer model)"),ICe.forEach(t),vDe=i(T),Af=s(T,"LI",{});var jCe=n(Af);sH=s(jCe,"STRONG",{});var Ixr=n(sH);TDe=r(Ixr,"luke"),Ixr.forEach(t),FDe=r(jCe," \u2014 "),x9=s(jCe,"A",{href:!0});var jxr=n(x9);CDe=r(jxr,"LukeConfig"),jxr.forEach(t),MDe=r(jCe," (LUKE model)"),jCe.forEach(t),EDe=i(T),Lf=s(T,"LI",{});var DCe=n(Lf);nH=s(DCe,"STRONG",{});var Dxr=n(nH);yDe=r(Dxr,"lxmert"),Dxr.forEach(t),wDe=r(DCe," \u2014 "),k9=s(DCe,"A",{href:!0});var Nxr=n(k9);ADe=r(Nxr,"LxmertConfig"),Nxr.forEach(t),LDe=r(DCe," (LXMERT model)"),DCe.forEach(t),BDe=i(T),Bf=s(T,"LI",{});var NCe=n(Bf);lH=s(NCe,"STRONG",{});var qxr=n(lH);xDe=r(qxr,"m2m_100"),qxr.forEach(t),kDe=r(NCe," \u2014 "),R9=s(NCe,"A",{href:!0});var Oxr=n(R9);RDe=r(Oxr,"M2M100Config"),Oxr.forEach(t),SDe=r(NCe," (M2M100 model)"),NCe.forEach(t),PDe=i(T),xf=s(T,"LI",{});var qCe=n(xf);iH=s(qCe,"STRONG",{});var Gxr=n(iH);$De=r(Gxr,"marian"),Gxr.forEach(t),IDe=r(qCe," \u2014 "),S9=s(qCe,"A",{href:!0});var Xxr=n(S9);jDe=r(Xxr,"MarianConfig"),Xxr.forEach(t),DDe=r(qCe," (Marian model)"),qCe.forEach(t),NDe=i(T),kf=s(T,"LI",{});var OCe=n(kf);dH=s(OCe,"STRONG",{});var Vxr=n(dH);qDe=r(Vxr,"maskformer"),Vxr.forEach(t),ODe=r(OCe," \u2014 "),P9=s(OCe,"A",{href:!0});var zxr=n(P9);GDe=r(zxr,"MaskFormerConfig"),zxr.forEach(t),XDe=r(OCe," (MaskFormer model)"),OCe.forEach(t),VDe=i(T),Rf=s(T,"LI",{});var GCe=n(Rf);cH=s(GCe,"STRONG",{});var Wxr=n(cH);zDe=r(Wxr,"mbart"),Wxr.forEach(t),WDe=r(GCe," \u2014 "),$9=s(GCe,"A",{href:!0});var Qxr=n($9);QDe=r(Qxr,"MBartConfig"),Qxr.forEach(t),HDe=r(GCe," (mBART model)"),GCe.forEach(t),UDe=i(T),Sf=s(T,"LI",{});var XCe=n(Sf);mH=s(XCe,"STRONG",{});var Hxr=n(mH);JDe=r(Hxr,"megatron-bert"),Hxr.forEach(t),YDe=r(XCe," \u2014 "),I9=s(XCe,"A",{href:!0});var Uxr=n(I9);KDe=r(Uxr,"MegatronBertConfig"),Uxr.forEach(t),ZDe=r(XCe," (MegatronBert model)"),XCe.forEach(t),eNe=i(T),Pf=s(T,"LI",{});var VCe=n(Pf);fH=s(VCe,"STRONG",{});var Jxr=n(fH);oNe=r(Jxr,"mobilebert"),Jxr.forEach(t),rNe=r(VCe," \u2014 "),j9=s(VCe,"A",{href:!0});var Yxr=n(j9);tNe=r(Yxr,"MobileBertConfig"),Yxr.forEach(t),aNe=r(VCe," (MobileBERT model)"),VCe.forEach(t),sNe=i(T),$f=s(T,"LI",{});var zCe=n($f);gH=s(zCe,"STRONG",{});var Kxr=n(gH);nNe=r(Kxr,"mpnet"),Kxr.forEach(t),lNe=r(zCe," \u2014 "),D9=s(zCe,"A",{href:!0});var Zxr=n(D9);iNe=r(Zxr,"MPNetConfig"),Zxr.forEach(t),dNe=r(zCe," (MPNet model)"),zCe.forEach(t),cNe=i(T),If=s(T,"LI",{});var WCe=n(If);hH=s(WCe,"STRONG",{});var ekr=n(hH);mNe=r(ekr,"mt5"),ekr.forEach(t),fNe=r(WCe," \u2014 "),N9=s(WCe,"A",{href:!0});var okr=n(N9);gNe=r(okr,"MT5Config"),okr.forEach(t),hNe=r(WCe," (mT5 model)"),WCe.forEach(t),uNe=i(T),jf=s(T,"LI",{});var QCe=n(jf);uH=s(QCe,"STRONG",{});var rkr=n(uH);pNe=r(rkr,"nystromformer"),rkr.forEach(t),_Ne=r(QCe," \u2014 "),q9=s(QCe,"A",{href:!0});var tkr=n(q9);bNe=r(tkr,"NystromformerConfig"),tkr.forEach(t),vNe=r(QCe," (Nystromformer model)"),QCe.forEach(t),TNe=i(T),Df=s(T,"LI",{});var HCe=n(Df);pH=s(HCe,"STRONG",{});var akr=n(pH);FNe=r(akr,"openai-gpt"),akr.forEach(t),CNe=r(HCe," \u2014 "),O9=s(HCe,"A",{href:!0});var skr=n(O9);MNe=r(skr,"OpenAIGPTConfig"),skr.forEach(t),ENe=r(HCe," (OpenAI GPT model)"),HCe.forEach(t),yNe=i(T),Nf=s(T,"LI",{});var UCe=n(Nf);_H=s(UCe,"STRONG",{});var nkr=n(_H);wNe=r(nkr,"pegasus"),nkr.forEach(t),ANe=r(UCe," \u2014 "),G9=s(UCe,"A",{href:!0});var lkr=n(G9);LNe=r(lkr,"PegasusConfig"),lkr.forEach(t),BNe=r(UCe," (Pegasus model)"),UCe.forEach(t),xNe=i(T),qf=s(T,"LI",{});var JCe=n(qf);bH=s(JCe,"STRONG",{});var ikr=n(bH);kNe=r(ikr,"perceiver"),ikr.forEach(t),RNe=r(JCe," \u2014 "),X9=s(JCe,"A",{href:!0});var dkr=n(X9);SNe=r(dkr,"PerceiverConfig"),dkr.forEach(t),PNe=r(JCe," (Perceiver model)"),JCe.forEach(t),$Ne=i(T),Of=s(T,"LI",{});var YCe=n(Of);vH=s(YCe,"STRONG",{});var ckr=n(vH);INe=r(ckr,"plbart"),ckr.forEach(t),jNe=r(YCe," \u2014 "),V9=s(YCe,"A",{href:!0});var mkr=n(V9);DNe=r(mkr,"PLBartConfig"),mkr.forEach(t),NNe=r(YCe," (PLBart model)"),YCe.forEach(t),qNe=i(T),Gf=s(T,"LI",{});var KCe=n(Gf);TH=s(KCe,"STRONG",{});var fkr=n(TH);ONe=r(fkr,"poolformer"),fkr.forEach(t),GNe=r(KCe," \u2014 "),z9=s(KCe,"A",{href:!0});var gkr=n(z9);XNe=r(gkr,"PoolFormerConfig"),gkr.forEach(t),VNe=r(KCe," (PoolFormer model)"),KCe.forEach(t),zNe=i(T),Xf=s(T,"LI",{});var ZCe=n(Xf);FH=s(ZCe,"STRONG",{});var hkr=n(FH);WNe=r(hkr,"prophetnet"),hkr.forEach(t),QNe=r(ZCe," \u2014 "),W9=s(ZCe,"A",{href:!0});var ukr=n(W9);HNe=r(ukr,"ProphetNetConfig"),ukr.forEach(t),UNe=r(ZCe," (ProphetNet model)"),ZCe.forEach(t),JNe=i(T),Vf=s(T,"LI",{});var eMe=n(Vf);CH=s(eMe,"STRONG",{});var pkr=n(CH);YNe=r(pkr,"qdqbert"),pkr.forEach(t),KNe=r(eMe," \u2014 "),Q9=s(eMe,"A",{href:!0});var _kr=n(Q9);ZNe=r(_kr,"QDQBertConfig"),_kr.forEach(t),eqe=r(eMe," (QDQBert model)"),eMe.forEach(t),oqe=i(T),zf=s(T,"LI",{});var oMe=n(zf);MH=s(oMe,"STRONG",{});var bkr=n(MH);rqe=r(bkr,"rag"),bkr.forEach(t),tqe=r(oMe," \u2014 "),H9=s(oMe,"A",{href:!0});var vkr=n(H9);aqe=r(vkr,"RagConfig"),vkr.forEach(t),sqe=r(oMe," (RAG model)"),oMe.forEach(t),nqe=i(T),Wf=s(T,"LI",{});var rMe=n(Wf);EH=s(rMe,"STRONG",{});var Tkr=n(EH);lqe=r(Tkr,"realm"),Tkr.forEach(t),iqe=r(rMe," \u2014 "),U9=s(rMe,"A",{href:!0});var Fkr=n(U9);dqe=r(Fkr,"RealmConfig"),Fkr.forEach(t),cqe=r(rMe," (Realm model)"),rMe.forEach(t),mqe=i(T),Qf=s(T,"LI",{});var tMe=n(Qf);yH=s(tMe,"STRONG",{});var Ckr=n(yH);fqe=r(Ckr,"reformer"),Ckr.forEach(t),gqe=r(tMe," \u2014 "),J9=s(tMe,"A",{href:!0});var Mkr=n(J9);hqe=r(Mkr,"ReformerConfig"),Mkr.forEach(t),uqe=r(tMe," (Reformer model)"),tMe.forEach(t),pqe=i(T),Hf=s(T,"LI",{});var aMe=n(Hf);wH=s(aMe,"STRONG",{});var Ekr=n(wH);_qe=r(Ekr,"rembert"),Ekr.forEach(t),bqe=r(aMe," \u2014 "),Y9=s(aMe,"A",{href:!0});var ykr=n(Y9);vqe=r(ykr,"RemBertConfig"),ykr.forEach(t),Tqe=r(aMe," (RemBERT model)"),aMe.forEach(t),Fqe=i(T),Uf=s(T,"LI",{});var sMe=n(Uf);AH=s(sMe,"STRONG",{});var wkr=n(AH);Cqe=r(wkr,"retribert"),wkr.forEach(t),Mqe=r(sMe," \u2014 "),K9=s(sMe,"A",{href:!0});var Akr=n(K9);Eqe=r(Akr,"RetriBertConfig"),Akr.forEach(t),yqe=r(sMe," (RetriBERT model)"),sMe.forEach(t),wqe=i(T),Jf=s(T,"LI",{});var nMe=n(Jf);LH=s(nMe,"STRONG",{});var Lkr=n(LH);Aqe=r(Lkr,"roberta"),Lkr.forEach(t),Lqe=r(nMe," \u2014 "),Z9=s(nMe,"A",{href:!0});var Bkr=n(Z9);Bqe=r(Bkr,"RobertaConfig"),Bkr.forEach(t),xqe=r(nMe," (RoBERTa model)"),nMe.forEach(t),kqe=i(T),Yf=s(T,"LI",{});var lMe=n(Yf);BH=s(lMe,"STRONG",{});var xkr=n(BH);Rqe=r(xkr,"roformer"),xkr.forEach(t),Sqe=r(lMe," \u2014 "),eB=s(lMe,"A",{href:!0});var kkr=n(eB);Pqe=r(kkr,"RoFormerConfig"),kkr.forEach(t),$qe=r(lMe," (RoFormer model)"),lMe.forEach(t),Iqe=i(T),Kf=s(T,"LI",{});var iMe=n(Kf);xH=s(iMe,"STRONG",{});var Rkr=n(xH);jqe=r(Rkr,"segformer"),Rkr.forEach(t),Dqe=r(iMe," \u2014 "),oB=s(iMe,"A",{href:!0});var Skr=n(oB);Nqe=r(Skr,"SegformerConfig"),Skr.forEach(t),qqe=r(iMe," (SegFormer model)"),iMe.forEach(t),Oqe=i(T),Zf=s(T,"LI",{});var dMe=n(Zf);kH=s(dMe,"STRONG",{});var Pkr=n(kH);Gqe=r(Pkr,"sew"),Pkr.forEach(t),Xqe=r(dMe," \u2014 "),rB=s(dMe,"A",{href:!0});var $kr=n(rB);Vqe=r($kr,"SEWConfig"),$kr.forEach(t),zqe=r(dMe," (SEW model)"),dMe.forEach(t),Wqe=i(T),eg=s(T,"LI",{});var cMe=n(eg);RH=s(cMe,"STRONG",{});var Ikr=n(RH);Qqe=r(Ikr,"sew-d"),Ikr.forEach(t),Hqe=r(cMe," \u2014 "),tB=s(cMe,"A",{href:!0});var jkr=n(tB);Uqe=r(jkr,"SEWDConfig"),jkr.forEach(t),Jqe=r(cMe," (SEW-D model)"),cMe.forEach(t),Yqe=i(T),og=s(T,"LI",{});var mMe=n(og);SH=s(mMe,"STRONG",{});var Dkr=n(SH);Kqe=r(Dkr,"speech-encoder-decoder"),Dkr.forEach(t),Zqe=r(mMe," \u2014 "),aB=s(mMe,"A",{href:!0});var Nkr=n(aB);eOe=r(Nkr,"SpeechEncoderDecoderConfig"),Nkr.forEach(t),oOe=r(mMe," (Speech Encoder decoder model)"),mMe.forEach(t),rOe=i(T),rg=s(T,"LI",{});var fMe=n(rg);PH=s(fMe,"STRONG",{});var qkr=n(PH);tOe=r(qkr,"speech_to_text"),qkr.forEach(t),aOe=r(fMe," \u2014 "),sB=s(fMe,"A",{href:!0});var Okr=n(sB);sOe=r(Okr,"Speech2TextConfig"),Okr.forEach(t),nOe=r(fMe," (Speech2Text model)"),fMe.forEach(t),lOe=i(T),tg=s(T,"LI",{});var gMe=n(tg);$H=s(gMe,"STRONG",{});var Gkr=n($H);iOe=r(Gkr,"speech_to_text_2"),Gkr.forEach(t),dOe=r(gMe," \u2014 "),nB=s(gMe,"A",{href:!0});var Xkr=n(nB);cOe=r(Xkr,"Speech2Text2Config"),Xkr.forEach(t),mOe=r(gMe," (Speech2Text2 model)"),gMe.forEach(t),fOe=i(T),ag=s(T,"LI",{});var hMe=n(ag);IH=s(hMe,"STRONG",{});var Vkr=n(IH);gOe=r(Vkr,"splinter"),Vkr.forEach(t),hOe=r(hMe," \u2014 "),lB=s(hMe,"A",{href:!0});var zkr=n(lB);uOe=r(zkr,"SplinterConfig"),zkr.forEach(t),pOe=r(hMe," (Splinter model)"),hMe.forEach(t),_Oe=i(T),sg=s(T,"LI",{});var uMe=n(sg);jH=s(uMe,"STRONG",{});var Wkr=n(jH);bOe=r(Wkr,"squeezebert"),Wkr.forEach(t),vOe=r(uMe," \u2014 "),iB=s(uMe,"A",{href:!0});var Qkr=n(iB);TOe=r(Qkr,"SqueezeBertConfig"),Qkr.forEach(t),FOe=r(uMe," (SqueezeBERT model)"),uMe.forEach(t),COe=i(T),ng=s(T,"LI",{});var pMe=n(ng);DH=s(pMe,"STRONG",{});var Hkr=n(DH);MOe=r(Hkr,"swin"),Hkr.forEach(t),EOe=r(pMe," \u2014 "),dB=s(pMe,"A",{href:!0});var Ukr=n(dB);yOe=r(Ukr,"SwinConfig"),Ukr.forEach(t),wOe=r(pMe," (Swin model)"),pMe.forEach(t),AOe=i(T),lg=s(T,"LI",{});var _Me=n(lg);NH=s(_Me,"STRONG",{});var Jkr=n(NH);LOe=r(Jkr,"t5"),Jkr.forEach(t),BOe=r(_Me," \u2014 "),cB=s(_Me,"A",{href:!0});var Ykr=n(cB);xOe=r(Ykr,"T5Config"),Ykr.forEach(t),kOe=r(_Me," (T5 model)"),_Me.forEach(t),ROe=i(T),ig=s(T,"LI",{});var bMe=n(ig);qH=s(bMe,"STRONG",{});var Kkr=n(qH);SOe=r(Kkr,"tapas"),Kkr.forEach(t),POe=r(bMe," \u2014 "),mB=s(bMe,"A",{href:!0});var Zkr=n(mB);$Oe=r(Zkr,"TapasConfig"),Zkr.forEach(t),IOe=r(bMe," (TAPAS model)"),bMe.forEach(t),jOe=i(T),dg=s(T,"LI",{});var vMe=n(dg);OH=s(vMe,"STRONG",{});var eRr=n(OH);DOe=r(eRr,"transfo-xl"),eRr.forEach(t),NOe=r(vMe," \u2014 "),fB=s(vMe,"A",{href:!0});var oRr=n(fB);qOe=r(oRr,"TransfoXLConfig"),oRr.forEach(t),OOe=r(vMe," (Transformer-XL model)"),vMe.forEach(t),GOe=i(T),cg=s(T,"LI",{});var TMe=n(cg);GH=s(TMe,"STRONG",{});var rRr=n(GH);XOe=r(rRr,"trocr"),rRr.forEach(t),VOe=r(TMe," \u2014 "),gB=s(TMe,"A",{href:!0});var tRr=n(gB);zOe=r(tRr,"TrOCRConfig"),tRr.forEach(t),WOe=r(TMe," (TrOCR model)"),TMe.forEach(t),QOe=i(T),mg=s(T,"LI",{});var FMe=n(mg);XH=s(FMe,"STRONG",{});var aRr=n(XH);HOe=r(aRr,"unispeech"),aRr.forEach(t),UOe=r(FMe," \u2014 "),hB=s(FMe,"A",{href:!0});var sRr=n(hB);JOe=r(sRr,"UniSpeechConfig"),sRr.forEach(t),YOe=r(FMe," (UniSpeech model)"),FMe.forEach(t),KOe=i(T),fg=s(T,"LI",{});var CMe=n(fg);VH=s(CMe,"STRONG",{});var nRr=n(VH);ZOe=r(nRr,"unispeech-sat"),nRr.forEach(t),eGe=r(CMe," \u2014 "),uB=s(CMe,"A",{href:!0});var lRr=n(uB);oGe=r(lRr,"UniSpeechSatConfig"),lRr.forEach(t),rGe=r(CMe," (UniSpeechSat model)"),CMe.forEach(t),tGe=i(T),gg=s(T,"LI",{});var MMe=n(gg);zH=s(MMe,"STRONG",{});var iRr=n(zH);aGe=r(iRr,"vilt"),iRr.forEach(t),sGe=r(MMe," \u2014 "),pB=s(MMe,"A",{href:!0});var dRr=n(pB);nGe=r(dRr,"ViltConfig"),dRr.forEach(t),lGe=r(MMe," (ViLT model)"),MMe.forEach(t),iGe=i(T),hg=s(T,"LI",{});var EMe=n(hg);WH=s(EMe,"STRONG",{});var cRr=n(WH);dGe=r(cRr,"vision-encoder-decoder"),cRr.forEach(t),cGe=r(EMe," \u2014 "),_B=s(EMe,"A",{href:!0});var mRr=n(_B);mGe=r(mRr,"VisionEncoderDecoderConfig"),mRr.forEach(t),fGe=r(EMe," (Vision Encoder decoder model)"),EMe.forEach(t),gGe=i(T),ug=s(T,"LI",{});var yMe=n(ug);QH=s(yMe,"STRONG",{});var fRr=n(QH);hGe=r(fRr,"vision-text-dual-encoder"),fRr.forEach(t),uGe=r(yMe," \u2014 "),bB=s(yMe,"A",{href:!0});var gRr=n(bB);pGe=r(gRr,"VisionTextDualEncoderConfig"),gRr.forEach(t),_Ge=r(yMe," (VisionTextDualEncoder model)"),yMe.forEach(t),bGe=i(T),pg=s(T,"LI",{});var wMe=n(pg);HH=s(wMe,"STRONG",{});var hRr=n(HH);vGe=r(hRr,"visual_bert"),hRr.forEach(t),TGe=r(wMe," \u2014 "),vB=s(wMe,"A",{href:!0});var uRr=n(vB);FGe=r(uRr,"VisualBertConfig"),uRr.forEach(t),CGe=r(wMe," (VisualBert model)"),wMe.forEach(t),MGe=i(T),_g=s(T,"LI",{});var AMe=n(_g);UH=s(AMe,"STRONG",{});var pRr=n(UH);EGe=r(pRr,"vit"),pRr.forEach(t),yGe=r(AMe," \u2014 "),TB=s(AMe,"A",{href:!0});var _Rr=n(TB);wGe=r(_Rr,"ViTConfig"),_Rr.forEach(t),AGe=r(AMe," (ViT model)"),AMe.forEach(t),LGe=i(T),bg=s(T,"LI",{});var LMe=n(bg);JH=s(LMe,"STRONG",{});var bRr=n(JH);BGe=r(bRr,"vit_mae"),bRr.forEach(t),xGe=r(LMe," \u2014 "),FB=s(LMe,"A",{href:!0});var vRr=n(FB);kGe=r(vRr,"ViTMAEConfig"),vRr.forEach(t),RGe=r(LMe," (ViTMAE model)"),LMe.forEach(t),SGe=i(T),vg=s(T,"LI",{});var BMe=n(vg);YH=s(BMe,"STRONG",{});var TRr=n(YH);PGe=r(TRr,"wav2vec2"),TRr.forEach(t),$Ge=r(BMe," \u2014 "),CB=s(BMe,"A",{href:!0});var FRr=n(CB);IGe=r(FRr,"Wav2Vec2Config"),FRr.forEach(t),jGe=r(BMe," (Wav2Vec2 model)"),BMe.forEach(t),DGe=i(T),Tg=s(T,"LI",{});var xMe=n(Tg);KH=s(xMe,"STRONG",{});var CRr=n(KH);NGe=r(CRr,"wavlm"),CRr.forEach(t),qGe=r(xMe," \u2014 "),MB=s(xMe,"A",{href:!0});var MRr=n(MB);OGe=r(MRr,"WavLMConfig"),MRr.forEach(t),GGe=r(xMe," (WavLM model)"),xMe.forEach(t),XGe=i(T),Fg=s(T,"LI",{});var kMe=n(Fg);ZH=s(kMe,"STRONG",{});var ERr=n(ZH);VGe=r(ERr,"xglm"),ERr.forEach(t),zGe=r(kMe," \u2014 "),EB=s(kMe,"A",{href:!0});var yRr=n(EB);WGe=r(yRr,"XGLMConfig"),yRr.forEach(t),QGe=r(kMe," (XGLM model)"),kMe.forEach(t),HGe=i(T),Cg=s(T,"LI",{});var RMe=n(Cg);eU=s(RMe,"STRONG",{});var wRr=n(eU);UGe=r(wRr,"xlm"),wRr.forEach(t),JGe=r(RMe," \u2014 "),yB=s(RMe,"A",{href:!0});var ARr=n(yB);YGe=r(ARr,"XLMConfig"),ARr.forEach(t),KGe=r(RMe," (XLM model)"),RMe.forEach(t),ZGe=i(T),Mg=s(T,"LI",{});var SMe=n(Mg);oU=s(SMe,"STRONG",{});var LRr=n(oU);eXe=r(LRr,"xlm-prophetnet"),LRr.forEach(t),oXe=r(SMe," \u2014 "),wB=s(SMe,"A",{href:!0});var BRr=n(wB);rXe=r(BRr,"XLMProphetNetConfig"),BRr.forEach(t),tXe=r(SMe," (XLMProphetNet model)"),SMe.forEach(t),aXe=i(T),Eg=s(T,"LI",{});var PMe=n(Eg);rU=s(PMe,"STRONG",{});var xRr=n(rU);sXe=r(xRr,"xlm-roberta"),xRr.forEach(t),nXe=r(PMe," \u2014 "),AB=s(PMe,"A",{href:!0});var kRr=n(AB);lXe=r(kRr,"XLMRobertaConfig"),kRr.forEach(t),iXe=r(PMe," (XLM-RoBERTa model)"),PMe.forEach(t),dXe=i(T),yg=s(T,"LI",{});var $Me=n(yg);tU=s($Me,"STRONG",{});var RRr=n(tU);cXe=r(RRr,"xlm-roberta-xl"),RRr.forEach(t),mXe=r($Me," \u2014 "),LB=s($Me,"A",{href:!0});var SRr=n(LB);fXe=r(SRr,"XLMRobertaXLConfig"),SRr.forEach(t),gXe=r($Me," (XLM-RoBERTa-XL model)"),$Me.forEach(t),hXe=i(T),wg=s(T,"LI",{});var IMe=n(wg);aU=s(IMe,"STRONG",{});var PRr=n(aU);uXe=r(PRr,"xlnet"),PRr.forEach(t),pXe=r(IMe," \u2014 "),BB=s(IMe,"A",{href:!0});var $Rr=n(BB);_Xe=r($Rr,"XLNetConfig"),$Rr.forEach(t),bXe=r(IMe," (XLNet model)"),IMe.forEach(t),vXe=i(T),Ag=s(T,"LI",{});var jMe=n(Ag);sU=s(jMe,"STRONG",{});var IRr=n(sU);TXe=r(IRr,"yoso"),IRr.forEach(t),FXe=r(jMe," \u2014 "),xB=s(jMe,"A",{href:!0});var jRr=n(xB);CXe=r(jRr,"YosoConfig"),jRr.forEach(t),MXe=r(jMe," (YOSO model)"),jMe.forEach(t),T.forEach(t),EXe=i(fa),nU=s(fa,"P",{});var DRr=n(nU);yXe=r(DRr,"Examples:"),DRr.forEach(t),wXe=i(fa),f(ry.$$.fragment,fa),fa.forEach(t),AXe=i(Gn),Lg=s(Gn,"DIV",{class:!0});var lRe=n(Lg);f(ty.$$.fragment,lRe),LXe=i(lRe),lU=s(lRe,"P",{});var NRr=n(lU);BXe=r(NRr,"Register a new configuration for this class."),NRr.forEach(t),lRe.forEach(t),Gn.forEach(t),sxe=i(d),Wi=s(d,"H2",{class:!0});var iRe=n(Wi);Bg=s(iRe,"A",{id:!0,class:!0,href:!0});var qRr=n(Bg);iU=s(qRr,"SPAN",{});var ORr=n(iU);f(ay.$$.fragment,ORr),ORr.forEach(t),qRr.forEach(t),xXe=i(iRe),dU=s(iRe,"SPAN",{});var GRr=n(dU);kXe=r(GRr,"AutoTokenizer"),GRr.forEach(t),iRe.forEach(t),nxe=i(d),Qo=s(d,"DIV",{class:!0});var Xn=n(Qo);f(sy.$$.fragment,Xn),RXe=i(Xn),ny=s(Xn,"P",{});var dRe=n(ny);SXe=r(dRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kB=s(dRe,"A",{href:!0});var XRr=n(kB);PXe=r(XRr,"AutoTokenizer.from_pretrained()"),XRr.forEach(t),$Xe=r(dRe," class method."),dRe.forEach(t),IXe=i(Xn),ly=s(Xn,"P",{});var cRe=n(ly);jXe=r(cRe,"This class cannot be instantiated directly using "),cU=s(cRe,"CODE",{});var VRr=n(cU);DXe=r(VRr,"__init__()"),VRr.forEach(t),NXe=r(cRe," (throws an error)."),cRe.forEach(t),qXe=i(Xn),go=s(Xn,"DIV",{class:!0});var ga=n(go);f(iy.$$.fragment,ga),OXe=i(ga),mU=s(ga,"P",{});var zRr=n(mU);GXe=r(zRr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zRr.forEach(t),XXe=i(ga),Oa=s(ga,"P",{});var W3=n(Oa);VXe=r(W3,"The tokenizer class to instantiate is selected based on the "),fU=s(W3,"CODE",{});var WRr=n(fU);zXe=r(WRr,"model_type"),WRr.forEach(t),WXe=r(W3,` property of the config object (either
passed as an argument or loaded from `),gU=s(W3,"CODE",{});var QRr=n(gU);QXe=r(QRr,"pretrained_model_name_or_path"),QRr.forEach(t),HXe=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hU=s(W3,"CODE",{});var HRr=n(hU);UXe=r(HRr,"pretrained_model_name_or_path"),HRr.forEach(t),JXe=r(W3,":"),W3.forEach(t),YXe=i(ga),E=s(ga,"UL",{});var y=n(E);zs=s(y,"LI",{});var G8=n(zs);uU=s(G8,"STRONG",{});var URr=n(uU);KXe=r(URr,"albert"),URr.forEach(t),ZXe=r(G8," \u2014 "),RB=s(G8,"A",{href:!0});var JRr=n(RB);eVe=r(JRr,"AlbertTokenizer"),JRr.forEach(t),oVe=r(G8," or "),SB=s(G8,"A",{href:!0});var YRr=n(SB);rVe=r(YRr,"AlbertTokenizerFast"),YRr.forEach(t),tVe=r(G8," (ALBERT model)"),G8.forEach(t),aVe=i(y),Ws=s(y,"LI",{});var X8=n(Ws);pU=s(X8,"STRONG",{});var KRr=n(pU);sVe=r(KRr,"bart"),KRr.forEach(t),nVe=r(X8," \u2014 "),PB=s(X8,"A",{href:!0});var ZRr=n(PB);lVe=r(ZRr,"BartTokenizer"),ZRr.forEach(t),iVe=r(X8," or "),$B=s(X8,"A",{href:!0});var eSr=n($B);dVe=r(eSr,"BartTokenizerFast"),eSr.forEach(t),cVe=r(X8," (BART model)"),X8.forEach(t),mVe=i(y),Qs=s(y,"LI",{});var V8=n(Qs);_U=s(V8,"STRONG",{});var oSr=n(_U);fVe=r(oSr,"barthez"),oSr.forEach(t),gVe=r(V8," \u2014 "),IB=s(V8,"A",{href:!0});var rSr=n(IB);hVe=r(rSr,"BarthezTokenizer"),rSr.forEach(t),uVe=r(V8," or "),jB=s(V8,"A",{href:!0});var tSr=n(jB);pVe=r(tSr,"BarthezTokenizerFast"),tSr.forEach(t),_Ve=r(V8," (BARThez model)"),V8.forEach(t),bVe=i(y),xg=s(y,"LI",{});var DMe=n(xg);bU=s(DMe,"STRONG",{});var aSr=n(bU);vVe=r(aSr,"bartpho"),aSr.forEach(t),TVe=r(DMe," \u2014 "),DB=s(DMe,"A",{href:!0});var sSr=n(DB);FVe=r(sSr,"BartphoTokenizer"),sSr.forEach(t),CVe=r(DMe," (BARTpho model)"),DMe.forEach(t),MVe=i(y),Hs=s(y,"LI",{});var z8=n(Hs);vU=s(z8,"STRONG",{});var nSr=n(vU);EVe=r(nSr,"bert"),nSr.forEach(t),yVe=r(z8," \u2014 "),NB=s(z8,"A",{href:!0});var lSr=n(NB);wVe=r(lSr,"BertTokenizer"),lSr.forEach(t),AVe=r(z8," or "),qB=s(z8,"A",{href:!0});var iSr=n(qB);LVe=r(iSr,"BertTokenizerFast"),iSr.forEach(t),BVe=r(z8," (BERT model)"),z8.forEach(t),xVe=i(y),kg=s(y,"LI",{});var NMe=n(kg);TU=s(NMe,"STRONG",{});var dSr=n(TU);kVe=r(dSr,"bert-generation"),dSr.forEach(t),RVe=r(NMe," \u2014 "),OB=s(NMe,"A",{href:!0});var cSr=n(OB);SVe=r(cSr,"BertGenerationTokenizer"),cSr.forEach(t),PVe=r(NMe," (Bert Generation model)"),NMe.forEach(t),$Ve=i(y),Rg=s(y,"LI",{});var qMe=n(Rg);FU=s(qMe,"STRONG",{});var mSr=n(FU);IVe=r(mSr,"bert-japanese"),mSr.forEach(t),jVe=r(qMe," \u2014 "),GB=s(qMe,"A",{href:!0});var fSr=n(GB);DVe=r(fSr,"BertJapaneseTokenizer"),fSr.forEach(t),NVe=r(qMe," (BertJapanese model)"),qMe.forEach(t),qVe=i(y),Sg=s(y,"LI",{});var OMe=n(Sg);CU=s(OMe,"STRONG",{});var gSr=n(CU);OVe=r(gSr,"bertweet"),gSr.forEach(t),GVe=r(OMe," \u2014 "),XB=s(OMe,"A",{href:!0});var hSr=n(XB);XVe=r(hSr,"BertweetTokenizer"),hSr.forEach(t),VVe=r(OMe," (Bertweet model)"),OMe.forEach(t),zVe=i(y),Us=s(y,"LI",{});var W8=n(Us);MU=s(W8,"STRONG",{});var uSr=n(MU);WVe=r(uSr,"big_bird"),uSr.forEach(t),QVe=r(W8," \u2014 "),VB=s(W8,"A",{href:!0});var pSr=n(VB);HVe=r(pSr,"BigBirdTokenizer"),pSr.forEach(t),UVe=r(W8," or "),zB=s(W8,"A",{href:!0});var _Sr=n(zB);JVe=r(_Sr,"BigBirdTokenizerFast"),_Sr.forEach(t),YVe=r(W8," (BigBird model)"),W8.forEach(t),KVe=i(y),Js=s(y,"LI",{});var Q8=n(Js);EU=s(Q8,"STRONG",{});var bSr=n(EU);ZVe=r(bSr,"bigbird_pegasus"),bSr.forEach(t),eze=r(Q8," \u2014 "),WB=s(Q8,"A",{href:!0});var vSr=n(WB);oze=r(vSr,"PegasusTokenizer"),vSr.forEach(t),rze=r(Q8," or "),QB=s(Q8,"A",{href:!0});var TSr=n(QB);tze=r(TSr,"PegasusTokenizerFast"),TSr.forEach(t),aze=r(Q8," (BigBirdPegasus model)"),Q8.forEach(t),sze=i(y),Ys=s(y,"LI",{});var H8=n(Ys);yU=s(H8,"STRONG",{});var FSr=n(yU);nze=r(FSr,"blenderbot"),FSr.forEach(t),lze=r(H8," \u2014 "),HB=s(H8,"A",{href:!0});var CSr=n(HB);ize=r(CSr,"BlenderbotTokenizer"),CSr.forEach(t),dze=r(H8," or "),UB=s(H8,"A",{href:!0});var MSr=n(UB);cze=r(MSr,"BlenderbotTokenizerFast"),MSr.forEach(t),mze=r(H8," (Blenderbot model)"),H8.forEach(t),fze=i(y),Pg=s(y,"LI",{});var GMe=n(Pg);wU=s(GMe,"STRONG",{});var ESr=n(wU);gze=r(ESr,"blenderbot-small"),ESr.forEach(t),hze=r(GMe," \u2014 "),JB=s(GMe,"A",{href:!0});var ySr=n(JB);uze=r(ySr,"BlenderbotSmallTokenizer"),ySr.forEach(t),pze=r(GMe," (BlenderbotSmall model)"),GMe.forEach(t),_ze=i(y),$g=s(y,"LI",{});var XMe=n($g);AU=s(XMe,"STRONG",{});var wSr=n(AU);bze=r(wSr,"byt5"),wSr.forEach(t),vze=r(XMe," \u2014 "),YB=s(XMe,"A",{href:!0});var ASr=n(YB);Tze=r(ASr,"ByT5Tokenizer"),ASr.forEach(t),Fze=r(XMe," (ByT5 model)"),XMe.forEach(t),Cze=i(y),Ks=s(y,"LI",{});var U8=n(Ks);LU=s(U8,"STRONG",{});var LSr=n(LU);Mze=r(LSr,"camembert"),LSr.forEach(t),Eze=r(U8," \u2014 "),KB=s(U8,"A",{href:!0});var BSr=n(KB);yze=r(BSr,"CamembertTokenizer"),BSr.forEach(t),wze=r(U8," or "),ZB=s(U8,"A",{href:!0});var xSr=n(ZB);Aze=r(xSr,"CamembertTokenizerFast"),xSr.forEach(t),Lze=r(U8," (CamemBERT model)"),U8.forEach(t),Bze=i(y),Ig=s(y,"LI",{});var VMe=n(Ig);BU=s(VMe,"STRONG",{});var kSr=n(BU);xze=r(kSr,"canine"),kSr.forEach(t),kze=r(VMe," \u2014 "),ex=s(VMe,"A",{href:!0});var RSr=n(ex);Rze=r(RSr,"CanineTokenizer"),RSr.forEach(t),Sze=r(VMe," (Canine model)"),VMe.forEach(t),Pze=i(y),Zs=s(y,"LI",{});var J8=n(Zs);xU=s(J8,"STRONG",{});var SSr=n(xU);$ze=r(SSr,"clip"),SSr.forEach(t),Ize=r(J8," \u2014 "),ox=s(J8,"A",{href:!0});var PSr=n(ox);jze=r(PSr,"CLIPTokenizer"),PSr.forEach(t),Dze=r(J8," or "),rx=s(J8,"A",{href:!0});var $Sr=n(rx);Nze=r($Sr,"CLIPTokenizerFast"),$Sr.forEach(t),qze=r(J8," (CLIP model)"),J8.forEach(t),Oze=i(y),en=s(y,"LI",{});var Y8=n(en);kU=s(Y8,"STRONG",{});var ISr=n(kU);Gze=r(ISr,"convbert"),ISr.forEach(t),Xze=r(Y8," \u2014 "),tx=s(Y8,"A",{href:!0});var jSr=n(tx);Vze=r(jSr,"ConvBertTokenizer"),jSr.forEach(t),zze=r(Y8," or "),ax=s(Y8,"A",{href:!0});var DSr=n(ax);Wze=r(DSr,"ConvBertTokenizerFast"),DSr.forEach(t),Qze=r(Y8," (ConvBERT model)"),Y8.forEach(t),Hze=i(y),on=s(y,"LI",{});var K8=n(on);RU=s(K8,"STRONG",{});var NSr=n(RU);Uze=r(NSr,"cpm"),NSr.forEach(t),Jze=r(K8," \u2014 "),sx=s(K8,"A",{href:!0});var qSr=n(sx);Yze=r(qSr,"CpmTokenizer"),qSr.forEach(t),Kze=r(K8," or "),SU=s(K8,"CODE",{});var OSr=n(SU);Zze=r(OSr,"CpmTokenizerFast"),OSr.forEach(t),eWe=r(K8," (CPM model)"),K8.forEach(t),oWe=i(y),jg=s(y,"LI",{});var zMe=n(jg);PU=s(zMe,"STRONG",{});var GSr=n(PU);rWe=r(GSr,"ctrl"),GSr.forEach(t),tWe=r(zMe," \u2014 "),nx=s(zMe,"A",{href:!0});var XSr=n(nx);aWe=r(XSr,"CTRLTokenizer"),XSr.forEach(t),sWe=r(zMe," (CTRL model)"),zMe.forEach(t),nWe=i(y),rn=s(y,"LI",{});var Z8=n(rn);$U=s(Z8,"STRONG",{});var VSr=n($U);lWe=r(VSr,"deberta"),VSr.forEach(t),iWe=r(Z8," \u2014 "),lx=s(Z8,"A",{href:!0});var zSr=n(lx);dWe=r(zSr,"DebertaTokenizer"),zSr.forEach(t),cWe=r(Z8," or "),ix=s(Z8,"A",{href:!0});var WSr=n(ix);mWe=r(WSr,"DebertaTokenizerFast"),WSr.forEach(t),fWe=r(Z8," (DeBERTa model)"),Z8.forEach(t),gWe=i(y),Dg=s(y,"LI",{});var WMe=n(Dg);IU=s(WMe,"STRONG",{});var QSr=n(IU);hWe=r(QSr,"deberta-v2"),QSr.forEach(t),uWe=r(WMe," \u2014 "),dx=s(WMe,"A",{href:!0});var HSr=n(dx);pWe=r(HSr,"DebertaV2Tokenizer"),HSr.forEach(t),_We=r(WMe," (DeBERTa-v2 model)"),WMe.forEach(t),bWe=i(y),tn=s(y,"LI",{});var e7=n(tn);jU=s(e7,"STRONG",{});var USr=n(jU);vWe=r(USr,"distilbert"),USr.forEach(t),TWe=r(e7," \u2014 "),cx=s(e7,"A",{href:!0});var JSr=n(cx);FWe=r(JSr,"DistilBertTokenizer"),JSr.forEach(t),CWe=r(e7," or "),mx=s(e7,"A",{href:!0});var YSr=n(mx);MWe=r(YSr,"DistilBertTokenizerFast"),YSr.forEach(t),EWe=r(e7," (DistilBERT model)"),e7.forEach(t),yWe=i(y),an=s(y,"LI",{});var o7=n(an);DU=s(o7,"STRONG",{});var KSr=n(DU);wWe=r(KSr,"dpr"),KSr.forEach(t),AWe=r(o7," \u2014 "),fx=s(o7,"A",{href:!0});var ZSr=n(fx);LWe=r(ZSr,"DPRQuestionEncoderTokenizer"),ZSr.forEach(t),BWe=r(o7," or "),gx=s(o7,"A",{href:!0});var ePr=n(gx);xWe=r(ePr,"DPRQuestionEncoderTokenizerFast"),ePr.forEach(t),kWe=r(o7," (DPR model)"),o7.forEach(t),RWe=i(y),sn=s(y,"LI",{});var r7=n(sn);NU=s(r7,"STRONG",{});var oPr=n(NU);SWe=r(oPr,"electra"),oPr.forEach(t),PWe=r(r7," \u2014 "),hx=s(r7,"A",{href:!0});var rPr=n(hx);$We=r(rPr,"ElectraTokenizer"),rPr.forEach(t),IWe=r(r7," or "),ux=s(r7,"A",{href:!0});var tPr=n(ux);jWe=r(tPr,"ElectraTokenizerFast"),tPr.forEach(t),DWe=r(r7," (ELECTRA model)"),r7.forEach(t),NWe=i(y),Ng=s(y,"LI",{});var QMe=n(Ng);qU=s(QMe,"STRONG",{});var aPr=n(qU);qWe=r(aPr,"flaubert"),aPr.forEach(t),OWe=r(QMe," \u2014 "),px=s(QMe,"A",{href:!0});var sPr=n(px);GWe=r(sPr,"FlaubertTokenizer"),sPr.forEach(t),XWe=r(QMe," (FlauBERT model)"),QMe.forEach(t),VWe=i(y),nn=s(y,"LI",{});var t7=n(nn);OU=s(t7,"STRONG",{});var nPr=n(OU);zWe=r(nPr,"fnet"),nPr.forEach(t),WWe=r(t7," \u2014 "),_x=s(t7,"A",{href:!0});var lPr=n(_x);QWe=r(lPr,"FNetTokenizer"),lPr.forEach(t),HWe=r(t7," or "),bx=s(t7,"A",{href:!0});var iPr=n(bx);UWe=r(iPr,"FNetTokenizerFast"),iPr.forEach(t),JWe=r(t7," (FNet model)"),t7.forEach(t),YWe=i(y),qg=s(y,"LI",{});var HMe=n(qg);GU=s(HMe,"STRONG",{});var dPr=n(GU);KWe=r(dPr,"fsmt"),dPr.forEach(t),ZWe=r(HMe," \u2014 "),vx=s(HMe,"A",{href:!0});var cPr=n(vx);eQe=r(cPr,"FSMTTokenizer"),cPr.forEach(t),oQe=r(HMe," (FairSeq Machine-Translation model)"),HMe.forEach(t),rQe=i(y),ln=s(y,"LI",{});var a7=n(ln);XU=s(a7,"STRONG",{});var mPr=n(XU);tQe=r(mPr,"funnel"),mPr.forEach(t),aQe=r(a7," \u2014 "),Tx=s(a7,"A",{href:!0});var fPr=n(Tx);sQe=r(fPr,"FunnelTokenizer"),fPr.forEach(t),nQe=r(a7," or "),Fx=s(a7,"A",{href:!0});var gPr=n(Fx);lQe=r(gPr,"FunnelTokenizerFast"),gPr.forEach(t),iQe=r(a7," (Funnel Transformer model)"),a7.forEach(t),dQe=i(y),dn=s(y,"LI",{});var s7=n(dn);VU=s(s7,"STRONG",{});var hPr=n(VU);cQe=r(hPr,"gpt2"),hPr.forEach(t),mQe=r(s7," \u2014 "),Cx=s(s7,"A",{href:!0});var uPr=n(Cx);fQe=r(uPr,"GPT2Tokenizer"),uPr.forEach(t),gQe=r(s7," or "),Mx=s(s7,"A",{href:!0});var pPr=n(Mx);hQe=r(pPr,"GPT2TokenizerFast"),pPr.forEach(t),uQe=r(s7," (OpenAI GPT-2 model)"),s7.forEach(t),pQe=i(y),cn=s(y,"LI",{});var n7=n(cn);zU=s(n7,"STRONG",{});var _Pr=n(zU);_Qe=r(_Pr,"gpt_neo"),_Pr.forEach(t),bQe=r(n7," \u2014 "),Ex=s(n7,"A",{href:!0});var bPr=n(Ex);vQe=r(bPr,"GPT2Tokenizer"),bPr.forEach(t),TQe=r(n7," or "),yx=s(n7,"A",{href:!0});var vPr=n(yx);FQe=r(vPr,"GPT2TokenizerFast"),vPr.forEach(t),CQe=r(n7," (GPT Neo model)"),n7.forEach(t),MQe=i(y),mn=s(y,"LI",{});var l7=n(mn);WU=s(l7,"STRONG",{});var TPr=n(WU);EQe=r(TPr,"herbert"),TPr.forEach(t),yQe=r(l7," \u2014 "),wx=s(l7,"A",{href:!0});var FPr=n(wx);wQe=r(FPr,"HerbertTokenizer"),FPr.forEach(t),AQe=r(l7," or "),Ax=s(l7,"A",{href:!0});var CPr=n(Ax);LQe=r(CPr,"HerbertTokenizerFast"),CPr.forEach(t),BQe=r(l7," (HerBERT model)"),l7.forEach(t),xQe=i(y),Og=s(y,"LI",{});var UMe=n(Og);QU=s(UMe,"STRONG",{});var MPr=n(QU);kQe=r(MPr,"hubert"),MPr.forEach(t),RQe=r(UMe," \u2014 "),Lx=s(UMe,"A",{href:!0});var EPr=n(Lx);SQe=r(EPr,"Wav2Vec2CTCTokenizer"),EPr.forEach(t),PQe=r(UMe," (Hubert model)"),UMe.forEach(t),$Qe=i(y),fn=s(y,"LI",{});var i7=n(fn);HU=s(i7,"STRONG",{});var yPr=n(HU);IQe=r(yPr,"ibert"),yPr.forEach(t),jQe=r(i7," \u2014 "),Bx=s(i7,"A",{href:!0});var wPr=n(Bx);DQe=r(wPr,"RobertaTokenizer"),wPr.forEach(t),NQe=r(i7," or "),xx=s(i7,"A",{href:!0});var APr=n(xx);qQe=r(APr,"RobertaTokenizerFast"),APr.forEach(t),OQe=r(i7," (I-BERT model)"),i7.forEach(t),GQe=i(y),gn=s(y,"LI",{});var d7=n(gn);UU=s(d7,"STRONG",{});var LPr=n(UU);XQe=r(LPr,"layoutlm"),LPr.forEach(t),VQe=r(d7," \u2014 "),kx=s(d7,"A",{href:!0});var BPr=n(kx);zQe=r(BPr,"LayoutLMTokenizer"),BPr.forEach(t),WQe=r(d7," or "),Rx=s(d7,"A",{href:!0});var xPr=n(Rx);QQe=r(xPr,"LayoutLMTokenizerFast"),xPr.forEach(t),HQe=r(d7," (LayoutLM model)"),d7.forEach(t),UQe=i(y),hn=s(y,"LI",{});var c7=n(hn);JU=s(c7,"STRONG",{});var kPr=n(JU);JQe=r(kPr,"layoutlmv2"),kPr.forEach(t),YQe=r(c7," \u2014 "),Sx=s(c7,"A",{href:!0});var RPr=n(Sx);KQe=r(RPr,"LayoutLMv2Tokenizer"),RPr.forEach(t),ZQe=r(c7," or "),Px=s(c7,"A",{href:!0});var SPr=n(Px);eHe=r(SPr,"LayoutLMv2TokenizerFast"),SPr.forEach(t),oHe=r(c7," (LayoutLMv2 model)"),c7.forEach(t),rHe=i(y),un=s(y,"LI",{});var m7=n(un);YU=s(m7,"STRONG",{});var PPr=n(YU);tHe=r(PPr,"layoutxlm"),PPr.forEach(t),aHe=r(m7," \u2014 "),$x=s(m7,"A",{href:!0});var $Pr=n($x);sHe=r($Pr,"LayoutXLMTokenizer"),$Pr.forEach(t),nHe=r(m7," or "),Ix=s(m7,"A",{href:!0});var IPr=n(Ix);lHe=r(IPr,"LayoutXLMTokenizerFast"),IPr.forEach(t),iHe=r(m7," (LayoutXLM model)"),m7.forEach(t),dHe=i(y),pn=s(y,"LI",{});var f7=n(pn);KU=s(f7,"STRONG",{});var jPr=n(KU);cHe=r(jPr,"led"),jPr.forEach(t),mHe=r(f7," \u2014 "),jx=s(f7,"A",{href:!0});var DPr=n(jx);fHe=r(DPr,"LEDTokenizer"),DPr.forEach(t),gHe=r(f7," or "),Dx=s(f7,"A",{href:!0});var NPr=n(Dx);hHe=r(NPr,"LEDTokenizerFast"),NPr.forEach(t),uHe=r(f7," (LED model)"),f7.forEach(t),pHe=i(y),_n=s(y,"LI",{});var g7=n(_n);ZU=s(g7,"STRONG",{});var qPr=n(ZU);_He=r(qPr,"longformer"),qPr.forEach(t),bHe=r(g7," \u2014 "),Nx=s(g7,"A",{href:!0});var OPr=n(Nx);vHe=r(OPr,"LongformerTokenizer"),OPr.forEach(t),THe=r(g7," or "),qx=s(g7,"A",{href:!0});var GPr=n(qx);FHe=r(GPr,"LongformerTokenizerFast"),GPr.forEach(t),CHe=r(g7," (Longformer model)"),g7.forEach(t),MHe=i(y),Gg=s(y,"LI",{});var JMe=n(Gg);eJ=s(JMe,"STRONG",{});var XPr=n(eJ);EHe=r(XPr,"luke"),XPr.forEach(t),yHe=r(JMe," \u2014 "),Ox=s(JMe,"A",{href:!0});var VPr=n(Ox);wHe=r(VPr,"LukeTokenizer"),VPr.forEach(t),AHe=r(JMe," (LUKE model)"),JMe.forEach(t),LHe=i(y),bn=s(y,"LI",{});var h7=n(bn);oJ=s(h7,"STRONG",{});var zPr=n(oJ);BHe=r(zPr,"lxmert"),zPr.forEach(t),xHe=r(h7," \u2014 "),Gx=s(h7,"A",{href:!0});var WPr=n(Gx);kHe=r(WPr,"LxmertTokenizer"),WPr.forEach(t),RHe=r(h7," or "),Xx=s(h7,"A",{href:!0});var QPr=n(Xx);SHe=r(QPr,"LxmertTokenizerFast"),QPr.forEach(t),PHe=r(h7," (LXMERT model)"),h7.forEach(t),$He=i(y),Xg=s(y,"LI",{});var YMe=n(Xg);rJ=s(YMe,"STRONG",{});var HPr=n(rJ);IHe=r(HPr,"m2m_100"),HPr.forEach(t),jHe=r(YMe," \u2014 "),Vx=s(YMe,"A",{href:!0});var UPr=n(Vx);DHe=r(UPr,"M2M100Tokenizer"),UPr.forEach(t),NHe=r(YMe," (M2M100 model)"),YMe.forEach(t),qHe=i(y),Vg=s(y,"LI",{});var KMe=n(Vg);tJ=s(KMe,"STRONG",{});var JPr=n(tJ);OHe=r(JPr,"marian"),JPr.forEach(t),GHe=r(KMe," \u2014 "),zx=s(KMe,"A",{href:!0});var YPr=n(zx);XHe=r(YPr,"MarianTokenizer"),YPr.forEach(t),VHe=r(KMe," (Marian model)"),KMe.forEach(t),zHe=i(y),vn=s(y,"LI",{});var u7=n(vn);aJ=s(u7,"STRONG",{});var KPr=n(aJ);WHe=r(KPr,"mbart"),KPr.forEach(t),QHe=r(u7," \u2014 "),Wx=s(u7,"A",{href:!0});var ZPr=n(Wx);HHe=r(ZPr,"MBartTokenizer"),ZPr.forEach(t),UHe=r(u7," or "),Qx=s(u7,"A",{href:!0});var e$r=n(Qx);JHe=r(e$r,"MBartTokenizerFast"),e$r.forEach(t),YHe=r(u7," (mBART model)"),u7.forEach(t),KHe=i(y),Tn=s(y,"LI",{});var p7=n(Tn);sJ=s(p7,"STRONG",{});var o$r=n(sJ);ZHe=r(o$r,"mbart50"),o$r.forEach(t),eUe=r(p7," \u2014 "),Hx=s(p7,"A",{href:!0});var r$r=n(Hx);oUe=r(r$r,"MBart50Tokenizer"),r$r.forEach(t),rUe=r(p7," or "),Ux=s(p7,"A",{href:!0});var t$r=n(Ux);tUe=r(t$r,"MBart50TokenizerFast"),t$r.forEach(t),aUe=r(p7," (mBART-50 model)"),p7.forEach(t),sUe=i(y),zg=s(y,"LI",{});var ZMe=n(zg);nJ=s(ZMe,"STRONG",{});var a$r=n(nJ);nUe=r(a$r,"mluke"),a$r.forEach(t),lUe=r(ZMe," \u2014 "),Jx=s(ZMe,"A",{href:!0});var s$r=n(Jx);iUe=r(s$r,"MLukeTokenizer"),s$r.forEach(t),dUe=r(ZMe," (mLUKE model)"),ZMe.forEach(t),cUe=i(y),Fn=s(y,"LI",{});var _7=n(Fn);lJ=s(_7,"STRONG",{});var n$r=n(lJ);mUe=r(n$r,"mobilebert"),n$r.forEach(t),fUe=r(_7," \u2014 "),Yx=s(_7,"A",{href:!0});var l$r=n(Yx);gUe=r(l$r,"MobileBertTokenizer"),l$r.forEach(t),hUe=r(_7," or "),Kx=s(_7,"A",{href:!0});var i$r=n(Kx);uUe=r(i$r,"MobileBertTokenizerFast"),i$r.forEach(t),pUe=r(_7," (MobileBERT model)"),_7.forEach(t),_Ue=i(y),Cn=s(y,"LI",{});var b7=n(Cn);iJ=s(b7,"STRONG",{});var d$r=n(iJ);bUe=r(d$r,"mpnet"),d$r.forEach(t),vUe=r(b7," \u2014 "),Zx=s(b7,"A",{href:!0});var c$r=n(Zx);TUe=r(c$r,"MPNetTokenizer"),c$r.forEach(t),FUe=r(b7," or "),ek=s(b7,"A",{href:!0});var m$r=n(ek);CUe=r(m$r,"MPNetTokenizerFast"),m$r.forEach(t),MUe=r(b7," (MPNet model)"),b7.forEach(t),EUe=i(y),Mn=s(y,"LI",{});var v7=n(Mn);dJ=s(v7,"STRONG",{});var f$r=n(dJ);yUe=r(f$r,"mt5"),f$r.forEach(t),wUe=r(v7," \u2014 "),ok=s(v7,"A",{href:!0});var g$r=n(ok);AUe=r(g$r,"MT5Tokenizer"),g$r.forEach(t),LUe=r(v7," or "),rk=s(v7,"A",{href:!0});var h$r=n(rk);BUe=r(h$r,"MT5TokenizerFast"),h$r.forEach(t),xUe=r(v7," (mT5 model)"),v7.forEach(t),kUe=i(y),En=s(y,"LI",{});var T7=n(En);cJ=s(T7,"STRONG",{});var u$r=n(cJ);RUe=r(u$r,"openai-gpt"),u$r.forEach(t),SUe=r(T7," \u2014 "),tk=s(T7,"A",{href:!0});var p$r=n(tk);PUe=r(p$r,"OpenAIGPTTokenizer"),p$r.forEach(t),$Ue=r(T7," or "),ak=s(T7,"A",{href:!0});var _$r=n(ak);IUe=r(_$r,"OpenAIGPTTokenizerFast"),_$r.forEach(t),jUe=r(T7," (OpenAI GPT model)"),T7.forEach(t),DUe=i(y),yn=s(y,"LI",{});var F7=n(yn);mJ=s(F7,"STRONG",{});var b$r=n(mJ);NUe=r(b$r,"pegasus"),b$r.forEach(t),qUe=r(F7," \u2014 "),sk=s(F7,"A",{href:!0});var v$r=n(sk);OUe=r(v$r,"PegasusTokenizer"),v$r.forEach(t),GUe=r(F7," or "),nk=s(F7,"A",{href:!0});var T$r=n(nk);XUe=r(T$r,"PegasusTokenizerFast"),T$r.forEach(t),VUe=r(F7," (Pegasus model)"),F7.forEach(t),zUe=i(y),Wg=s(y,"LI",{});var e4e=n(Wg);fJ=s(e4e,"STRONG",{});var F$r=n(fJ);WUe=r(F$r,"perceiver"),F$r.forEach(t),QUe=r(e4e," \u2014 "),lk=s(e4e,"A",{href:!0});var C$r=n(lk);HUe=r(C$r,"PerceiverTokenizer"),C$r.forEach(t),UUe=r(e4e," (Perceiver model)"),e4e.forEach(t),JUe=i(y),Qg=s(y,"LI",{});var o4e=n(Qg);gJ=s(o4e,"STRONG",{});var M$r=n(gJ);YUe=r(M$r,"phobert"),M$r.forEach(t),KUe=r(o4e," \u2014 "),ik=s(o4e,"A",{href:!0});var E$r=n(ik);ZUe=r(E$r,"PhobertTokenizer"),E$r.forEach(t),eJe=r(o4e," (PhoBERT model)"),o4e.forEach(t),oJe=i(y),Hg=s(y,"LI",{});var r4e=n(Hg);hJ=s(r4e,"STRONG",{});var y$r=n(hJ);rJe=r(y$r,"plbart"),y$r.forEach(t),tJe=r(r4e," \u2014 "),dk=s(r4e,"A",{href:!0});var w$r=n(dk);aJe=r(w$r,"PLBartTokenizer"),w$r.forEach(t),sJe=r(r4e," (PLBart model)"),r4e.forEach(t),nJe=i(y),Ug=s(y,"LI",{});var t4e=n(Ug);uJ=s(t4e,"STRONG",{});var A$r=n(uJ);lJe=r(A$r,"prophetnet"),A$r.forEach(t),iJe=r(t4e," \u2014 "),ck=s(t4e,"A",{href:!0});var L$r=n(ck);dJe=r(L$r,"ProphetNetTokenizer"),L$r.forEach(t),cJe=r(t4e," (ProphetNet model)"),t4e.forEach(t),mJe=i(y),wn=s(y,"LI",{});var C7=n(wn);pJ=s(C7,"STRONG",{});var B$r=n(pJ);fJe=r(B$r,"qdqbert"),B$r.forEach(t),gJe=r(C7," \u2014 "),mk=s(C7,"A",{href:!0});var x$r=n(mk);hJe=r(x$r,"BertTokenizer"),x$r.forEach(t),uJe=r(C7," or "),fk=s(C7,"A",{href:!0});var k$r=n(fk);pJe=r(k$r,"BertTokenizerFast"),k$r.forEach(t),_Je=r(C7," (QDQBert model)"),C7.forEach(t),bJe=i(y),Jg=s(y,"LI",{});var a4e=n(Jg);_J=s(a4e,"STRONG",{});var R$r=n(_J);vJe=r(R$r,"rag"),R$r.forEach(t),TJe=r(a4e," \u2014 "),gk=s(a4e,"A",{href:!0});var S$r=n(gk);FJe=r(S$r,"RagTokenizer"),S$r.forEach(t),CJe=r(a4e," (RAG model)"),a4e.forEach(t),MJe=i(y),An=s(y,"LI",{});var M7=n(An);bJ=s(M7,"STRONG",{});var P$r=n(bJ);EJe=r(P$r,"realm"),P$r.forEach(t),yJe=r(M7," \u2014 "),hk=s(M7,"A",{href:!0});var $$r=n(hk);wJe=r($$r,"RealmTokenizer"),$$r.forEach(t),AJe=r(M7," or "),uk=s(M7,"A",{href:!0});var I$r=n(uk);LJe=r(I$r,"RealmTokenizerFast"),I$r.forEach(t),BJe=r(M7," (Realm model)"),M7.forEach(t),xJe=i(y),Ln=s(y,"LI",{});var E7=n(Ln);vJ=s(E7,"STRONG",{});var j$r=n(vJ);kJe=r(j$r,"reformer"),j$r.forEach(t),RJe=r(E7," \u2014 "),pk=s(E7,"A",{href:!0});var D$r=n(pk);SJe=r(D$r,"ReformerTokenizer"),D$r.forEach(t),PJe=r(E7," or "),_k=s(E7,"A",{href:!0});var N$r=n(_k);$Je=r(N$r,"ReformerTokenizerFast"),N$r.forEach(t),IJe=r(E7," (Reformer model)"),E7.forEach(t),jJe=i(y),Bn=s(y,"LI",{});var y7=n(Bn);TJ=s(y7,"STRONG",{});var q$r=n(TJ);DJe=r(q$r,"rembert"),q$r.forEach(t),NJe=r(y7," \u2014 "),bk=s(y7,"A",{href:!0});var O$r=n(bk);qJe=r(O$r,"RemBertTokenizer"),O$r.forEach(t),OJe=r(y7," or "),vk=s(y7,"A",{href:!0});var G$r=n(vk);GJe=r(G$r,"RemBertTokenizerFast"),G$r.forEach(t),XJe=r(y7," (RemBERT model)"),y7.forEach(t),VJe=i(y),xn=s(y,"LI",{});var w7=n(xn);FJ=s(w7,"STRONG",{});var X$r=n(FJ);zJe=r(X$r,"retribert"),X$r.forEach(t),WJe=r(w7," \u2014 "),Tk=s(w7,"A",{href:!0});var V$r=n(Tk);QJe=r(V$r,"RetriBertTokenizer"),V$r.forEach(t),HJe=r(w7," or "),Fk=s(w7,"A",{href:!0});var z$r=n(Fk);UJe=r(z$r,"RetriBertTokenizerFast"),z$r.forEach(t),JJe=r(w7," (RetriBERT model)"),w7.forEach(t),YJe=i(y),kn=s(y,"LI",{});var A7=n(kn);CJ=s(A7,"STRONG",{});var W$r=n(CJ);KJe=r(W$r,"roberta"),W$r.forEach(t),ZJe=r(A7," \u2014 "),Ck=s(A7,"A",{href:!0});var Q$r=n(Ck);eYe=r(Q$r,"RobertaTokenizer"),Q$r.forEach(t),oYe=r(A7," or "),Mk=s(A7,"A",{href:!0});var H$r=n(Mk);rYe=r(H$r,"RobertaTokenizerFast"),H$r.forEach(t),tYe=r(A7," (RoBERTa model)"),A7.forEach(t),aYe=i(y),Rn=s(y,"LI",{});var L7=n(Rn);MJ=s(L7,"STRONG",{});var U$r=n(MJ);sYe=r(U$r,"roformer"),U$r.forEach(t),nYe=r(L7," \u2014 "),Ek=s(L7,"A",{href:!0});var J$r=n(Ek);lYe=r(J$r,"RoFormerTokenizer"),J$r.forEach(t),iYe=r(L7," or "),yk=s(L7,"A",{href:!0});var Y$r=n(yk);dYe=r(Y$r,"RoFormerTokenizerFast"),Y$r.forEach(t),cYe=r(L7," (RoFormer model)"),L7.forEach(t),mYe=i(y),Yg=s(y,"LI",{});var s4e=n(Yg);EJ=s(s4e,"STRONG",{});var K$r=n(EJ);fYe=r(K$r,"speech_to_text"),K$r.forEach(t),gYe=r(s4e," \u2014 "),wk=s(s4e,"A",{href:!0});var Z$r=n(wk);hYe=r(Z$r,"Speech2TextTokenizer"),Z$r.forEach(t),uYe=r(s4e," (Speech2Text model)"),s4e.forEach(t),pYe=i(y),Kg=s(y,"LI",{});var n4e=n(Kg);yJ=s(n4e,"STRONG",{});var eIr=n(yJ);_Ye=r(eIr,"speech_to_text_2"),eIr.forEach(t),bYe=r(n4e," \u2014 "),Ak=s(n4e,"A",{href:!0});var oIr=n(Ak);vYe=r(oIr,"Speech2Text2Tokenizer"),oIr.forEach(t),TYe=r(n4e," (Speech2Text2 model)"),n4e.forEach(t),FYe=i(y),Sn=s(y,"LI",{});var B7=n(Sn);wJ=s(B7,"STRONG",{});var rIr=n(wJ);CYe=r(rIr,"splinter"),rIr.forEach(t),MYe=r(B7," \u2014 "),Lk=s(B7,"A",{href:!0});var tIr=n(Lk);EYe=r(tIr,"SplinterTokenizer"),tIr.forEach(t),yYe=r(B7," or "),Bk=s(B7,"A",{href:!0});var aIr=n(Bk);wYe=r(aIr,"SplinterTokenizerFast"),aIr.forEach(t),AYe=r(B7," (Splinter model)"),B7.forEach(t),LYe=i(y),Pn=s(y,"LI",{});var x7=n(Pn);AJ=s(x7,"STRONG",{});var sIr=n(AJ);BYe=r(sIr,"squeezebert"),sIr.forEach(t),xYe=r(x7," \u2014 "),xk=s(x7,"A",{href:!0});var nIr=n(xk);kYe=r(nIr,"SqueezeBertTokenizer"),nIr.forEach(t),RYe=r(x7," or "),kk=s(x7,"A",{href:!0});var lIr=n(kk);SYe=r(lIr,"SqueezeBertTokenizerFast"),lIr.forEach(t),PYe=r(x7," (SqueezeBERT model)"),x7.forEach(t),$Ye=i(y),$n=s(y,"LI",{});var k7=n($n);LJ=s(k7,"STRONG",{});var iIr=n(LJ);IYe=r(iIr,"t5"),iIr.forEach(t),jYe=r(k7," \u2014 "),Rk=s(k7,"A",{href:!0});var dIr=n(Rk);DYe=r(dIr,"T5Tokenizer"),dIr.forEach(t),NYe=r(k7," or "),Sk=s(k7,"A",{href:!0});var cIr=n(Sk);qYe=r(cIr,"T5TokenizerFast"),cIr.forEach(t),OYe=r(k7," (T5 model)"),k7.forEach(t),GYe=i(y),Zg=s(y,"LI",{});var l4e=n(Zg);BJ=s(l4e,"STRONG",{});var mIr=n(BJ);XYe=r(mIr,"tapas"),mIr.forEach(t),VYe=r(l4e," \u2014 "),Pk=s(l4e,"A",{href:!0});var fIr=n(Pk);zYe=r(fIr,"TapasTokenizer"),fIr.forEach(t),WYe=r(l4e," (TAPAS model)"),l4e.forEach(t),QYe=i(y),eh=s(y,"LI",{});var i4e=n(eh);xJ=s(i4e,"STRONG",{});var gIr=n(xJ);HYe=r(gIr,"transfo-xl"),gIr.forEach(t),UYe=r(i4e," \u2014 "),$k=s(i4e,"A",{href:!0});var hIr=n($k);JYe=r(hIr,"TransfoXLTokenizer"),hIr.forEach(t),YYe=r(i4e," (Transformer-XL model)"),i4e.forEach(t),KYe=i(y),oh=s(y,"LI",{});var d4e=n(oh);kJ=s(d4e,"STRONG",{});var uIr=n(kJ);ZYe=r(uIr,"wav2vec2"),uIr.forEach(t),eKe=r(d4e," \u2014 "),Ik=s(d4e,"A",{href:!0});var pIr=n(Ik);oKe=r(pIr,"Wav2Vec2CTCTokenizer"),pIr.forEach(t),rKe=r(d4e," (Wav2Vec2 model)"),d4e.forEach(t),tKe=i(y),rh=s(y,"LI",{});var c4e=n(rh);RJ=s(c4e,"STRONG",{});var _Ir=n(RJ);aKe=r(_Ir,"wav2vec2_phoneme"),_Ir.forEach(t),sKe=r(c4e," \u2014 "),jk=s(c4e,"A",{href:!0});var bIr=n(jk);nKe=r(bIr,"Wav2Vec2PhonemeCTCTokenizer"),bIr.forEach(t),lKe=r(c4e," (Wav2Vec2Phoneme model)"),c4e.forEach(t),iKe=i(y),In=s(y,"LI",{});var R7=n(In);SJ=s(R7,"STRONG",{});var vIr=n(SJ);dKe=r(vIr,"xglm"),vIr.forEach(t),cKe=r(R7," \u2014 "),Dk=s(R7,"A",{href:!0});var TIr=n(Dk);mKe=r(TIr,"XGLMTokenizer"),TIr.forEach(t),fKe=r(R7," or "),Nk=s(R7,"A",{href:!0});var FIr=n(Nk);gKe=r(FIr,"XGLMTokenizerFast"),FIr.forEach(t),hKe=r(R7," (XGLM model)"),R7.forEach(t),uKe=i(y),th=s(y,"LI",{});var m4e=n(th);PJ=s(m4e,"STRONG",{});var CIr=n(PJ);pKe=r(CIr,"xlm"),CIr.forEach(t),_Ke=r(m4e," \u2014 "),qk=s(m4e,"A",{href:!0});var MIr=n(qk);bKe=r(MIr,"XLMTokenizer"),MIr.forEach(t),vKe=r(m4e," (XLM model)"),m4e.forEach(t),TKe=i(y),ah=s(y,"LI",{});var f4e=n(ah);$J=s(f4e,"STRONG",{});var EIr=n($J);FKe=r(EIr,"xlm-prophetnet"),EIr.forEach(t),CKe=r(f4e," \u2014 "),Ok=s(f4e,"A",{href:!0});var yIr=n(Ok);MKe=r(yIr,"XLMProphetNetTokenizer"),yIr.forEach(t),EKe=r(f4e," (XLMProphetNet model)"),f4e.forEach(t),yKe=i(y),jn=s(y,"LI",{});var S7=n(jn);IJ=s(S7,"STRONG",{});var wIr=n(IJ);wKe=r(wIr,"xlm-roberta"),wIr.forEach(t),AKe=r(S7," \u2014 "),Gk=s(S7,"A",{href:!0});var AIr=n(Gk);LKe=r(AIr,"XLMRobertaTokenizer"),AIr.forEach(t),BKe=r(S7," or "),Xk=s(S7,"A",{href:!0});var LIr=n(Xk);xKe=r(LIr,"XLMRobertaTokenizerFast"),LIr.forEach(t),kKe=r(S7," (XLM-RoBERTa model)"),S7.forEach(t),RKe=i(y),Dn=s(y,"LI",{});var P7=n(Dn);jJ=s(P7,"STRONG",{});var BIr=n(jJ);SKe=r(BIr,"xlnet"),BIr.forEach(t),PKe=r(P7," \u2014 "),Vk=s(P7,"A",{href:!0});var xIr=n(Vk);$Ke=r(xIr,"XLNetTokenizer"),xIr.forEach(t),IKe=r(P7," or "),zk=s(P7,"A",{href:!0});var kIr=n(zk);jKe=r(kIr,"XLNetTokenizerFast"),kIr.forEach(t),DKe=r(P7," (XLNet model)"),P7.forEach(t),y.forEach(t),NKe=i(ga),DJ=s(ga,"P",{});var RIr=n(DJ);qKe=r(RIr,"Examples:"),RIr.forEach(t),OKe=i(ga),f(dy.$$.fragment,ga),ga.forEach(t),GKe=i(Xn),sh=s(Xn,"DIV",{class:!0});var mRe=n(sh);f(cy.$$.fragment,mRe),XKe=i(mRe),NJ=s(mRe,"P",{});var SIr=n(NJ);VKe=r(SIr,"Register a new tokenizer in this mapping."),SIr.forEach(t),mRe.forEach(t),Xn.forEach(t),lxe=i(d),Qi=s(d,"H2",{class:!0});var fRe=n(Qi);nh=s(fRe,"A",{id:!0,class:!0,href:!0});var PIr=n(nh);qJ=s(PIr,"SPAN",{});var $Ir=n(qJ);f(my.$$.fragment,$Ir),$Ir.forEach(t),PIr.forEach(t),zKe=i(fRe),OJ=s(fRe,"SPAN",{});var IIr=n(OJ);WKe=r(IIr,"AutoFeatureExtractor"),IIr.forEach(t),fRe.forEach(t),ixe=i(d),Ho=s(d,"DIV",{class:!0});var Vn=n(Ho);f(fy.$$.fragment,Vn),QKe=i(Vn),gy=s(Vn,"P",{});var gRe=n(gy);HKe=r(gRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Wk=s(gRe,"A",{href:!0});var jIr=n(Wk);UKe=r(jIr,"AutoFeatureExtractor.from_pretrained()"),jIr.forEach(t),JKe=r(gRe," class method."),gRe.forEach(t),YKe=i(Vn),hy=s(Vn,"P",{});var hRe=n(hy);KKe=r(hRe,"This class cannot be instantiated directly using "),GJ=s(hRe,"CODE",{});var DIr=n(GJ);ZKe=r(DIr,"__init__()"),DIr.forEach(t),eZe=r(hRe," (throws an error)."),hRe.forEach(t),oZe=i(Vn),$e=s(Vn,"DIV",{class:!0});var Dt=n($e);f(uy.$$.fragment,Dt),rZe=i(Dt),XJ=s(Dt,"P",{});var NIr=n(XJ);tZe=r(NIr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),NIr.forEach(t),aZe=i(Dt),Ga=s(Dt,"P",{});var Q3=n(Ga);sZe=r(Q3,"The feature extractor class to instantiate is selected based on the "),VJ=s(Q3,"CODE",{});var qIr=n(VJ);nZe=r(qIr,"model_type"),qIr.forEach(t),lZe=r(Q3,` property of the config object
(either passed as an argument or loaded from `),zJ=s(Q3,"CODE",{});var OIr=n(zJ);iZe=r(OIr,"pretrained_model_name_or_path"),OIr.forEach(t),dZe=r(Q3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),WJ=s(Q3,"CODE",{});var GIr=n(WJ);cZe=r(GIr,"pretrained_model_name_or_path"),GIr.forEach(t),mZe=r(Q3,":"),Q3.forEach(t),fZe=i(Dt),ae=s(Dt,"UL",{});var le=n(ae);lh=s(le,"LI",{});var g4e=n(lh);QJ=s(g4e,"STRONG",{});var XIr=n(QJ);gZe=r(XIr,"beit"),XIr.forEach(t),hZe=r(g4e," \u2014 "),Qk=s(g4e,"A",{href:!0});var VIr=n(Qk);uZe=r(VIr,"BeitFeatureExtractor"),VIr.forEach(t),pZe=r(g4e," (BEiT model)"),g4e.forEach(t),_Ze=i(le),ih=s(le,"LI",{});var h4e=n(ih);HJ=s(h4e,"STRONG",{});var zIr=n(HJ);bZe=r(zIr,"clip"),zIr.forEach(t),vZe=r(h4e," \u2014 "),Hk=s(h4e,"A",{href:!0});var WIr=n(Hk);TZe=r(WIr,"CLIPFeatureExtractor"),WIr.forEach(t),FZe=r(h4e," (CLIP model)"),h4e.forEach(t),CZe=i(le),dh=s(le,"LI",{});var u4e=n(dh);UJ=s(u4e,"STRONG",{});var QIr=n(UJ);MZe=r(QIr,"convnext"),QIr.forEach(t),EZe=r(u4e," \u2014 "),Uk=s(u4e,"A",{href:!0});var HIr=n(Uk);yZe=r(HIr,"ConvNextFeatureExtractor"),HIr.forEach(t),wZe=r(u4e," (ConvNext model)"),u4e.forEach(t),AZe=i(le),ch=s(le,"LI",{});var p4e=n(ch);JJ=s(p4e,"STRONG",{});var UIr=n(JJ);LZe=r(UIr,"deit"),UIr.forEach(t),BZe=r(p4e," \u2014 "),Jk=s(p4e,"A",{href:!0});var JIr=n(Jk);xZe=r(JIr,"DeiTFeatureExtractor"),JIr.forEach(t),kZe=r(p4e," (DeiT model)"),p4e.forEach(t),RZe=i(le),mh=s(le,"LI",{});var _4e=n(mh);YJ=s(_4e,"STRONG",{});var YIr=n(YJ);SZe=r(YIr,"detr"),YIr.forEach(t),PZe=r(_4e," \u2014 "),Yk=s(_4e,"A",{href:!0});var KIr=n(Yk);$Ze=r(KIr,"DetrFeatureExtractor"),KIr.forEach(t),IZe=r(_4e," (DETR model)"),_4e.forEach(t),jZe=i(le),fh=s(le,"LI",{});var b4e=n(fh);KJ=s(b4e,"STRONG",{});var ZIr=n(KJ);DZe=r(ZIr,"hubert"),ZIr.forEach(t),NZe=r(b4e," \u2014 "),Kk=s(b4e,"A",{href:!0});var ejr=n(Kk);qZe=r(ejr,"Wav2Vec2FeatureExtractor"),ejr.forEach(t),OZe=r(b4e," (Hubert model)"),b4e.forEach(t),GZe=i(le),gh=s(le,"LI",{});var v4e=n(gh);ZJ=s(v4e,"STRONG",{});var ojr=n(ZJ);XZe=r(ojr,"layoutlmv2"),ojr.forEach(t),VZe=r(v4e," \u2014 "),Zk=s(v4e,"A",{href:!0});var rjr=n(Zk);zZe=r(rjr,"LayoutLMv2FeatureExtractor"),rjr.forEach(t),WZe=r(v4e," (LayoutLMv2 model)"),v4e.forEach(t),QZe=i(le),hh=s(le,"LI",{});var T4e=n(hh);eY=s(T4e,"STRONG",{});var tjr=n(eY);HZe=r(tjr,"maskformer"),tjr.forEach(t),UZe=r(T4e," \u2014 "),eR=s(T4e,"A",{href:!0});var ajr=n(eR);JZe=r(ajr,"MaskFormerFeatureExtractor"),ajr.forEach(t),YZe=r(T4e," (MaskFormer model)"),T4e.forEach(t),KZe=i(le),uh=s(le,"LI",{});var F4e=n(uh);oY=s(F4e,"STRONG",{});var sjr=n(oY);ZZe=r(sjr,"perceiver"),sjr.forEach(t),eeo=r(F4e," \u2014 "),oR=s(F4e,"A",{href:!0});var njr=n(oR);oeo=r(njr,"PerceiverFeatureExtractor"),njr.forEach(t),reo=r(F4e," (Perceiver model)"),F4e.forEach(t),teo=i(le),ph=s(le,"LI",{});var C4e=n(ph);rY=s(C4e,"STRONG",{});var ljr=n(rY);aeo=r(ljr,"poolformer"),ljr.forEach(t),seo=r(C4e," \u2014 "),rR=s(C4e,"A",{href:!0});var ijr=n(rR);neo=r(ijr,"PoolFormerFeatureExtractor"),ijr.forEach(t),leo=r(C4e," (PoolFormer model)"),C4e.forEach(t),ieo=i(le),_h=s(le,"LI",{});var M4e=n(_h);tY=s(M4e,"STRONG",{});var djr=n(tY);deo=r(djr,"segformer"),djr.forEach(t),ceo=r(M4e," \u2014 "),tR=s(M4e,"A",{href:!0});var cjr=n(tR);meo=r(cjr,"SegformerFeatureExtractor"),cjr.forEach(t),feo=r(M4e," (SegFormer model)"),M4e.forEach(t),geo=i(le),bh=s(le,"LI",{});var E4e=n(bh);aY=s(E4e,"STRONG",{});var mjr=n(aY);heo=r(mjr,"speech_to_text"),mjr.forEach(t),ueo=r(E4e," \u2014 "),aR=s(E4e,"A",{href:!0});var fjr=n(aR);peo=r(fjr,"Speech2TextFeatureExtractor"),fjr.forEach(t),_eo=r(E4e," (Speech2Text model)"),E4e.forEach(t),beo=i(le),vh=s(le,"LI",{});var y4e=n(vh);sY=s(y4e,"STRONG",{});var gjr=n(sY);veo=r(gjr,"swin"),gjr.forEach(t),Teo=r(y4e," \u2014 "),sR=s(y4e,"A",{href:!0});var hjr=n(sR);Feo=r(hjr,"ViTFeatureExtractor"),hjr.forEach(t),Ceo=r(y4e," (Swin model)"),y4e.forEach(t),Meo=i(le),Th=s(le,"LI",{});var w4e=n(Th);nY=s(w4e,"STRONG",{});var ujr=n(nY);Eeo=r(ujr,"vit"),ujr.forEach(t),yeo=r(w4e," \u2014 "),nR=s(w4e,"A",{href:!0});var pjr=n(nR);weo=r(pjr,"ViTFeatureExtractor"),pjr.forEach(t),Aeo=r(w4e," (ViT model)"),w4e.forEach(t),Leo=i(le),Fh=s(le,"LI",{});var A4e=n(Fh);lY=s(A4e,"STRONG",{});var _jr=n(lY);Beo=r(_jr,"vit_mae"),_jr.forEach(t),xeo=r(A4e," \u2014 "),lR=s(A4e,"A",{href:!0});var bjr=n(lR);keo=r(bjr,"ViTFeatureExtractor"),bjr.forEach(t),Reo=r(A4e," (ViTMAE model)"),A4e.forEach(t),Seo=i(le),Ch=s(le,"LI",{});var L4e=n(Ch);iY=s(L4e,"STRONG",{});var vjr=n(iY);Peo=r(vjr,"wav2vec2"),vjr.forEach(t),$eo=r(L4e," \u2014 "),iR=s(L4e,"A",{href:!0});var Tjr=n(iR);Ieo=r(Tjr,"Wav2Vec2FeatureExtractor"),Tjr.forEach(t),jeo=r(L4e," (Wav2Vec2 model)"),L4e.forEach(t),le.forEach(t),Deo=i(Dt),f(Mh.$$.fragment,Dt),Neo=i(Dt),dY=s(Dt,"P",{});var Fjr=n(dY);qeo=r(Fjr,"Examples:"),Fjr.forEach(t),Oeo=i(Dt),f(py.$$.fragment,Dt),Dt.forEach(t),Geo=i(Vn),Eh=s(Vn,"DIV",{class:!0});var uRe=n(Eh);f(_y.$$.fragment,uRe),Xeo=i(uRe),cY=s(uRe,"P",{});var Cjr=n(cY);Veo=r(Cjr,"Register a new feature extractor for this class."),Cjr.forEach(t),uRe.forEach(t),Vn.forEach(t),dxe=i(d),Hi=s(d,"H2",{class:!0});var pRe=n(Hi);yh=s(pRe,"A",{id:!0,class:!0,href:!0});var Mjr=n(yh);mY=s(Mjr,"SPAN",{});var Ejr=n(mY);f(by.$$.fragment,Ejr),Ejr.forEach(t),Mjr.forEach(t),zeo=i(pRe),fY=s(pRe,"SPAN",{});var yjr=n(fY);Weo=r(yjr,"AutoProcessor"),yjr.forEach(t),pRe.forEach(t),cxe=i(d),Uo=s(d,"DIV",{class:!0});var zn=n(Uo);f(vy.$$.fragment,zn),Qeo=i(zn),Ty=s(zn,"P",{});var _Re=n(Ty);Heo=r(_Re,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dR=s(_Re,"A",{href:!0});var wjr=n(dR);Ueo=r(wjr,"AutoProcessor.from_pretrained()"),wjr.forEach(t),Jeo=r(_Re," class method."),_Re.forEach(t),Yeo=i(zn),Fy=s(zn,"P",{});var bRe=n(Fy);Keo=r(bRe,"This class cannot be instantiated directly using "),gY=s(bRe,"CODE",{});var Ajr=n(gY);Zeo=r(Ajr,"__init__()"),Ajr.forEach(t),eoo=r(bRe," (throws an error)."),bRe.forEach(t),ooo=i(zn),Ie=s(zn,"DIV",{class:!0});var Nt=n(Ie);f(Cy.$$.fragment,Nt),roo=i(Nt),hY=s(Nt,"P",{});var Ljr=n(hY);too=r(Ljr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ljr.forEach(t),aoo=i(Nt),Ui=s(Nt,"P",{});var Tz=n(Ui);soo=r(Tz,"The processor class to instantiate is selected based on the "),uY=s(Tz,"CODE",{});var Bjr=n(uY);noo=r(Bjr,"model_type"),Bjr.forEach(t),loo=r(Tz,` property of the config object (either
passed as an argument or loaded from `),pY=s(Tz,"CODE",{});var xjr=n(pY);ioo=r(xjr,"pretrained_model_name_or_path"),xjr.forEach(t),doo=r(Tz," if possible):"),Tz.forEach(t),coo=i(Nt),Be=s(Nt,"UL",{});var No=n(Be);wh=s(No,"LI",{});var B4e=n(wh);_Y=s(B4e,"STRONG",{});var kjr=n(_Y);moo=r(kjr,"clip"),kjr.forEach(t),foo=r(B4e," \u2014 "),cR=s(B4e,"A",{href:!0});var Rjr=n(cR);goo=r(Rjr,"CLIPProcessor"),Rjr.forEach(t),hoo=r(B4e," (CLIP model)"),B4e.forEach(t),uoo=i(No),Ah=s(No,"LI",{});var x4e=n(Ah);bY=s(x4e,"STRONG",{});var Sjr=n(bY);poo=r(Sjr,"layoutlmv2"),Sjr.forEach(t),_oo=r(x4e," \u2014 "),mR=s(x4e,"A",{href:!0});var Pjr=n(mR);boo=r(Pjr,"LayoutLMv2Processor"),Pjr.forEach(t),voo=r(x4e," (LayoutLMv2 model)"),x4e.forEach(t),Too=i(No),Lh=s(No,"LI",{});var k4e=n(Lh);vY=s(k4e,"STRONG",{});var $jr=n(vY);Foo=r($jr,"layoutxlm"),$jr.forEach(t),Coo=r(k4e," \u2014 "),fR=s(k4e,"A",{href:!0});var Ijr=n(fR);Moo=r(Ijr,"LayoutXLMProcessor"),Ijr.forEach(t),Eoo=r(k4e," (LayoutXLM model)"),k4e.forEach(t),yoo=i(No),Bh=s(No,"LI",{});var R4e=n(Bh);TY=s(R4e,"STRONG",{});var jjr=n(TY);woo=r(jjr,"speech_to_text"),jjr.forEach(t),Aoo=r(R4e," \u2014 "),gR=s(R4e,"A",{href:!0});var Djr=n(gR);Loo=r(Djr,"Speech2TextProcessor"),Djr.forEach(t),Boo=r(R4e," (Speech2Text model)"),R4e.forEach(t),xoo=i(No),xh=s(No,"LI",{});var S4e=n(xh);FY=s(S4e,"STRONG",{});var Njr=n(FY);koo=r(Njr,"speech_to_text_2"),Njr.forEach(t),Roo=r(S4e," \u2014 "),hR=s(S4e,"A",{href:!0});var qjr=n(hR);Soo=r(qjr,"Speech2Text2Processor"),qjr.forEach(t),Poo=r(S4e," (Speech2Text2 model)"),S4e.forEach(t),$oo=i(No),kh=s(No,"LI",{});var P4e=n(kh);CY=s(P4e,"STRONG",{});var Ojr=n(CY);Ioo=r(Ojr,"trocr"),Ojr.forEach(t),joo=r(P4e," \u2014 "),uR=s(P4e,"A",{href:!0});var Gjr=n(uR);Doo=r(Gjr,"TrOCRProcessor"),Gjr.forEach(t),Noo=r(P4e," (TrOCR model)"),P4e.forEach(t),qoo=i(No),Rh=s(No,"LI",{});var $4e=n(Rh);MY=s($4e,"STRONG",{});var Xjr=n(MY);Ooo=r(Xjr,"vision-text-dual-encoder"),Xjr.forEach(t),Goo=r($4e," \u2014 "),pR=s($4e,"A",{href:!0});var Vjr=n(pR);Xoo=r(Vjr,"VisionTextDualEncoderProcessor"),Vjr.forEach(t),Voo=r($4e," (VisionTextDualEncoder model)"),$4e.forEach(t),zoo=i(No),Sh=s(No,"LI",{});var I4e=n(Sh);EY=s(I4e,"STRONG",{});var zjr=n(EY);Woo=r(zjr,"wav2vec2"),zjr.forEach(t),Qoo=r(I4e," \u2014 "),_R=s(I4e,"A",{href:!0});var Wjr=n(_R);Hoo=r(Wjr,"Wav2Vec2Processor"),Wjr.forEach(t),Uoo=r(I4e," (Wav2Vec2 model)"),I4e.forEach(t),No.forEach(t),Joo=i(Nt),f(Ph.$$.fragment,Nt),Yoo=i(Nt),yY=s(Nt,"P",{});var Qjr=n(yY);Koo=r(Qjr,"Examples:"),Qjr.forEach(t),Zoo=i(Nt),f(My.$$.fragment,Nt),Nt.forEach(t),ero=i(zn),$h=s(zn,"DIV",{class:!0});var vRe=n($h);f(Ey.$$.fragment,vRe),oro=i(vRe),wY=s(vRe,"P",{});var Hjr=n(wY);rro=r(Hjr,"Register a new processor for this class."),Hjr.forEach(t),vRe.forEach(t),zn.forEach(t),mxe=i(d),Ji=s(d,"H2",{class:!0});var TRe=n(Ji);Ih=s(TRe,"A",{id:!0,class:!0,href:!0});var Ujr=n(Ih);AY=s(Ujr,"SPAN",{});var Jjr=n(AY);f(yy.$$.fragment,Jjr),Jjr.forEach(t),Ujr.forEach(t),tro=i(TRe),LY=s(TRe,"SPAN",{});var Yjr=n(LY);aro=r(Yjr,"AutoModel"),Yjr.forEach(t),TRe.forEach(t),fxe=i(d),Jo=s(d,"DIV",{class:!0});var Wn=n(Jo);f(wy.$$.fragment,Wn),sro=i(Wn),Yi=s(Wn,"P",{});var Fz=n(Yi);nro=r(Fz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BY=s(Fz,"CODE",{});var Kjr=n(BY);lro=r(Kjr,"from_pretrained()"),Kjr.forEach(t),iro=r(Fz,"class method or the "),xY=s(Fz,"CODE",{});var Zjr=n(xY);dro=r(Zjr,"from_config()"),Zjr.forEach(t),cro=r(Fz,`class
method.`),Fz.forEach(t),mro=i(Wn),Ay=s(Wn,"P",{});var FRe=n(Ay);fro=r(FRe,"This class cannot be instantiated directly using "),kY=s(FRe,"CODE",{});var eDr=n(kY);gro=r(eDr,"__init__()"),eDr.forEach(t),hro=r(FRe," (throws an error)."),FRe.forEach(t),uro=i(Wn),Vr=s(Wn,"DIV",{class:!0});var Qn=n(Vr);f(Ly.$$.fragment,Qn),pro=i(Qn),RY=s(Qn,"P",{});var oDr=n(RY);_ro=r(oDr,"Instantiates one of the base model classes of the library from a configuration."),oDr.forEach(t),bro=i(Qn),Ki=s(Qn,"P",{});var Cz=n(Ki);vro=r(Cz,`Note:
Loading a model from its configuration file does `),SY=s(Cz,"STRONG",{});var rDr=n(SY);Tro=r(rDr,"not"),rDr.forEach(t),Fro=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=s(Cz,"CODE",{});var tDr=n(PY);Cro=r(tDr,"from_pretrained()"),tDr.forEach(t),Mro=r(Cz,"to load the model weights."),Cz.forEach(t),Ero=i(Qn),$Y=s(Qn,"P",{});var aDr=n($Y);yro=r(aDr,"Examples:"),aDr.forEach(t),wro=i(Qn),f(By.$$.fragment,Qn),Qn.forEach(t),Aro=i(Wn),je=s(Wn,"DIV",{class:!0});var qt=n(je);f(xy.$$.fragment,qt),Lro=i(qt),IY=s(qt,"P",{});var sDr=n(IY);Bro=r(sDr,"Instantiate one of the base model classes of the library from a pretrained model."),sDr.forEach(t),xro=i(qt),Xa=s(qt,"P",{});var H3=n(Xa);kro=r(H3,"The model class to instantiate is selected based on the "),jY=s(H3,"CODE",{});var nDr=n(jY);Rro=r(nDr,"model_type"),nDr.forEach(t),Sro=r(H3,` property of the config object (either
passed as an argument or loaded from `),DY=s(H3,"CODE",{});var lDr=n(DY);Pro=r(lDr,"pretrained_model_name_or_path"),lDr.forEach(t),$ro=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NY=s(H3,"CODE",{});var iDr=n(NY);Iro=r(iDr,"pretrained_model_name_or_path"),iDr.forEach(t),jro=r(H3,":"),H3.forEach(t),Dro=i(qt),F=s(qt,"UL",{});var C=n(F);jh=s(C,"LI",{});var j4e=n(jh);qY=s(j4e,"STRONG",{});var dDr=n(qY);Nro=r(dDr,"albert"),dDr.forEach(t),qro=r(j4e," \u2014 "),bR=s(j4e,"A",{href:!0});var cDr=n(bR);Oro=r(cDr,"AlbertModel"),cDr.forEach(t),Gro=r(j4e," (ALBERT model)"),j4e.forEach(t),Xro=i(C),Dh=s(C,"LI",{});var D4e=n(Dh);OY=s(D4e,"STRONG",{});var mDr=n(OY);Vro=r(mDr,"bart"),mDr.forEach(t),zro=r(D4e," \u2014 "),vR=s(D4e,"A",{href:!0});var fDr=n(vR);Wro=r(fDr,"BartModel"),fDr.forEach(t),Qro=r(D4e," (BART model)"),D4e.forEach(t),Hro=i(C),Nh=s(C,"LI",{});var N4e=n(Nh);GY=s(N4e,"STRONG",{});var gDr=n(GY);Uro=r(gDr,"beit"),gDr.forEach(t),Jro=r(N4e," \u2014 "),TR=s(N4e,"A",{href:!0});var hDr=n(TR);Yro=r(hDr,"BeitModel"),hDr.forEach(t),Kro=r(N4e," (BEiT model)"),N4e.forEach(t),Zro=i(C),qh=s(C,"LI",{});var q4e=n(qh);XY=s(q4e,"STRONG",{});var uDr=n(XY);eto=r(uDr,"bert"),uDr.forEach(t),oto=r(q4e," \u2014 "),FR=s(q4e,"A",{href:!0});var pDr=n(FR);rto=r(pDr,"BertModel"),pDr.forEach(t),tto=r(q4e," (BERT model)"),q4e.forEach(t),ato=i(C),Oh=s(C,"LI",{});var O4e=n(Oh);VY=s(O4e,"STRONG",{});var _Dr=n(VY);sto=r(_Dr,"bert-generation"),_Dr.forEach(t),nto=r(O4e," \u2014 "),CR=s(O4e,"A",{href:!0});var bDr=n(CR);lto=r(bDr,"BertGenerationEncoder"),bDr.forEach(t),ito=r(O4e," (Bert Generation model)"),O4e.forEach(t),dto=i(C),Gh=s(C,"LI",{});var G4e=n(Gh);zY=s(G4e,"STRONG",{});var vDr=n(zY);cto=r(vDr,"big_bird"),vDr.forEach(t),mto=r(G4e," \u2014 "),MR=s(G4e,"A",{href:!0});var TDr=n(MR);fto=r(TDr,"BigBirdModel"),TDr.forEach(t),gto=r(G4e," (BigBird model)"),G4e.forEach(t),hto=i(C),Xh=s(C,"LI",{});var X4e=n(Xh);WY=s(X4e,"STRONG",{});var FDr=n(WY);uto=r(FDr,"bigbird_pegasus"),FDr.forEach(t),pto=r(X4e," \u2014 "),ER=s(X4e,"A",{href:!0});var CDr=n(ER);_to=r(CDr,"BigBirdPegasusModel"),CDr.forEach(t),bto=r(X4e," (BigBirdPegasus model)"),X4e.forEach(t),vto=i(C),Vh=s(C,"LI",{});var V4e=n(Vh);QY=s(V4e,"STRONG",{});var MDr=n(QY);Tto=r(MDr,"blenderbot"),MDr.forEach(t),Fto=r(V4e," \u2014 "),yR=s(V4e,"A",{href:!0});var EDr=n(yR);Cto=r(EDr,"BlenderbotModel"),EDr.forEach(t),Mto=r(V4e," (Blenderbot model)"),V4e.forEach(t),Eto=i(C),zh=s(C,"LI",{});var z4e=n(zh);HY=s(z4e,"STRONG",{});var yDr=n(HY);yto=r(yDr,"blenderbot-small"),yDr.forEach(t),wto=r(z4e," \u2014 "),wR=s(z4e,"A",{href:!0});var wDr=n(wR);Ato=r(wDr,"BlenderbotSmallModel"),wDr.forEach(t),Lto=r(z4e," (BlenderbotSmall model)"),z4e.forEach(t),Bto=i(C),Wh=s(C,"LI",{});var W4e=n(Wh);UY=s(W4e,"STRONG",{});var ADr=n(UY);xto=r(ADr,"camembert"),ADr.forEach(t),kto=r(W4e," \u2014 "),AR=s(W4e,"A",{href:!0});var LDr=n(AR);Rto=r(LDr,"CamembertModel"),LDr.forEach(t),Sto=r(W4e," (CamemBERT model)"),W4e.forEach(t),Pto=i(C),Qh=s(C,"LI",{});var Q4e=n(Qh);JY=s(Q4e,"STRONG",{});var BDr=n(JY);$to=r(BDr,"canine"),BDr.forEach(t),Ito=r(Q4e," \u2014 "),LR=s(Q4e,"A",{href:!0});var xDr=n(LR);jto=r(xDr,"CanineModel"),xDr.forEach(t),Dto=r(Q4e," (Canine model)"),Q4e.forEach(t),Nto=i(C),Hh=s(C,"LI",{});var H4e=n(Hh);YY=s(H4e,"STRONG",{});var kDr=n(YY);qto=r(kDr,"clip"),kDr.forEach(t),Oto=r(H4e," \u2014 "),BR=s(H4e,"A",{href:!0});var RDr=n(BR);Gto=r(RDr,"CLIPModel"),RDr.forEach(t),Xto=r(H4e," (CLIP model)"),H4e.forEach(t),Vto=i(C),Uh=s(C,"LI",{});var U4e=n(Uh);KY=s(U4e,"STRONG",{});var SDr=n(KY);zto=r(SDr,"convbert"),SDr.forEach(t),Wto=r(U4e," \u2014 "),xR=s(U4e,"A",{href:!0});var PDr=n(xR);Qto=r(PDr,"ConvBertModel"),PDr.forEach(t),Hto=r(U4e," (ConvBERT model)"),U4e.forEach(t),Uto=i(C),Jh=s(C,"LI",{});var J4e=n(Jh);ZY=s(J4e,"STRONG",{});var $Dr=n(ZY);Jto=r($Dr,"convnext"),$Dr.forEach(t),Yto=r(J4e," \u2014 "),kR=s(J4e,"A",{href:!0});var IDr=n(kR);Kto=r(IDr,"ConvNextModel"),IDr.forEach(t),Zto=r(J4e," (ConvNext model)"),J4e.forEach(t),eao=i(C),Yh=s(C,"LI",{});var Y4e=n(Yh);eK=s(Y4e,"STRONG",{});var jDr=n(eK);oao=r(jDr,"ctrl"),jDr.forEach(t),rao=r(Y4e," \u2014 "),RR=s(Y4e,"A",{href:!0});var DDr=n(RR);tao=r(DDr,"CTRLModel"),DDr.forEach(t),aao=r(Y4e," (CTRL model)"),Y4e.forEach(t),sao=i(C),Kh=s(C,"LI",{});var K4e=n(Kh);oK=s(K4e,"STRONG",{});var NDr=n(oK);nao=r(NDr,"data2vec-audio"),NDr.forEach(t),lao=r(K4e," \u2014 "),SR=s(K4e,"A",{href:!0});var qDr=n(SR);iao=r(qDr,"Data2VecAudioModel"),qDr.forEach(t),dao=r(K4e," (Data2VecAudio model)"),K4e.forEach(t),cao=i(C),Zh=s(C,"LI",{});var Z4e=n(Zh);rK=s(Z4e,"STRONG",{});var ODr=n(rK);mao=r(ODr,"data2vec-text"),ODr.forEach(t),fao=r(Z4e," \u2014 "),PR=s(Z4e,"A",{href:!0});var GDr=n(PR);gao=r(GDr,"Data2VecTextModel"),GDr.forEach(t),hao=r(Z4e," (Data2VecText model)"),Z4e.forEach(t),uao=i(C),eu=s(C,"LI",{});var eEe=n(eu);tK=s(eEe,"STRONG",{});var XDr=n(tK);pao=r(XDr,"deberta"),XDr.forEach(t),_ao=r(eEe," \u2014 "),$R=s(eEe,"A",{href:!0});var VDr=n($R);bao=r(VDr,"DebertaModel"),VDr.forEach(t),vao=r(eEe," (DeBERTa model)"),eEe.forEach(t),Tao=i(C),ou=s(C,"LI",{});var oEe=n(ou);aK=s(oEe,"STRONG",{});var zDr=n(aK);Fao=r(zDr,"deberta-v2"),zDr.forEach(t),Cao=r(oEe," \u2014 "),IR=s(oEe,"A",{href:!0});var WDr=n(IR);Mao=r(WDr,"DebertaV2Model"),WDr.forEach(t),Eao=r(oEe," (DeBERTa-v2 model)"),oEe.forEach(t),yao=i(C),ru=s(C,"LI",{});var rEe=n(ru);sK=s(rEe,"STRONG",{});var QDr=n(sK);wao=r(QDr,"deit"),QDr.forEach(t),Aao=r(rEe," \u2014 "),jR=s(rEe,"A",{href:!0});var HDr=n(jR);Lao=r(HDr,"DeiTModel"),HDr.forEach(t),Bao=r(rEe," (DeiT model)"),rEe.forEach(t),xao=i(C),tu=s(C,"LI",{});var tEe=n(tu);nK=s(tEe,"STRONG",{});var UDr=n(nK);kao=r(UDr,"detr"),UDr.forEach(t),Rao=r(tEe," \u2014 "),DR=s(tEe,"A",{href:!0});var JDr=n(DR);Sao=r(JDr,"DetrModel"),JDr.forEach(t),Pao=r(tEe," (DETR model)"),tEe.forEach(t),$ao=i(C),au=s(C,"LI",{});var aEe=n(au);lK=s(aEe,"STRONG",{});var YDr=n(lK);Iao=r(YDr,"distilbert"),YDr.forEach(t),jao=r(aEe," \u2014 "),NR=s(aEe,"A",{href:!0});var KDr=n(NR);Dao=r(KDr,"DistilBertModel"),KDr.forEach(t),Nao=r(aEe," (DistilBERT model)"),aEe.forEach(t),qao=i(C),su=s(C,"LI",{});var sEe=n(su);iK=s(sEe,"STRONG",{});var ZDr=n(iK);Oao=r(ZDr,"dpr"),ZDr.forEach(t),Gao=r(sEe," \u2014 "),qR=s(sEe,"A",{href:!0});var eNr=n(qR);Xao=r(eNr,"DPRQuestionEncoder"),eNr.forEach(t),Vao=r(sEe," (DPR model)"),sEe.forEach(t),zao=i(C),nu=s(C,"LI",{});var nEe=n(nu);dK=s(nEe,"STRONG",{});var oNr=n(dK);Wao=r(oNr,"electra"),oNr.forEach(t),Qao=r(nEe," \u2014 "),OR=s(nEe,"A",{href:!0});var rNr=n(OR);Hao=r(rNr,"ElectraModel"),rNr.forEach(t),Uao=r(nEe," (ELECTRA model)"),nEe.forEach(t),Jao=i(C),lu=s(C,"LI",{});var lEe=n(lu);cK=s(lEe,"STRONG",{});var tNr=n(cK);Yao=r(tNr,"flaubert"),tNr.forEach(t),Kao=r(lEe," \u2014 "),GR=s(lEe,"A",{href:!0});var aNr=n(GR);Zao=r(aNr,"FlaubertModel"),aNr.forEach(t),eso=r(lEe," (FlauBERT model)"),lEe.forEach(t),oso=i(C),iu=s(C,"LI",{});var iEe=n(iu);mK=s(iEe,"STRONG",{});var sNr=n(mK);rso=r(sNr,"fnet"),sNr.forEach(t),tso=r(iEe," \u2014 "),XR=s(iEe,"A",{href:!0});var nNr=n(XR);aso=r(nNr,"FNetModel"),nNr.forEach(t),sso=r(iEe," (FNet model)"),iEe.forEach(t),nso=i(C),du=s(C,"LI",{});var dEe=n(du);fK=s(dEe,"STRONG",{});var lNr=n(fK);lso=r(lNr,"fsmt"),lNr.forEach(t),iso=r(dEe," \u2014 "),VR=s(dEe,"A",{href:!0});var iNr=n(VR);dso=r(iNr,"FSMTModel"),iNr.forEach(t),cso=r(dEe," (FairSeq Machine-Translation model)"),dEe.forEach(t),mso=i(C),Nn=s(C,"LI",{});var $7=n(Nn);gK=s($7,"STRONG",{});var dNr=n(gK);fso=r(dNr,"funnel"),dNr.forEach(t),gso=r($7," \u2014 "),zR=s($7,"A",{href:!0});var cNr=n(zR);hso=r(cNr,"FunnelModel"),cNr.forEach(t),uso=r($7," or "),WR=s($7,"A",{href:!0});var mNr=n(WR);pso=r(mNr,"FunnelBaseModel"),mNr.forEach(t),_so=r($7," (Funnel Transformer model)"),$7.forEach(t),bso=i(C),cu=s(C,"LI",{});var cEe=n(cu);hK=s(cEe,"STRONG",{});var fNr=n(hK);vso=r(fNr,"gpt2"),fNr.forEach(t),Tso=r(cEe," \u2014 "),QR=s(cEe,"A",{href:!0});var gNr=n(QR);Fso=r(gNr,"GPT2Model"),gNr.forEach(t),Cso=r(cEe," (OpenAI GPT-2 model)"),cEe.forEach(t),Mso=i(C),mu=s(C,"LI",{});var mEe=n(mu);uK=s(mEe,"STRONG",{});var hNr=n(uK);Eso=r(hNr,"gpt_neo"),hNr.forEach(t),yso=r(mEe," \u2014 "),HR=s(mEe,"A",{href:!0});var uNr=n(HR);wso=r(uNr,"GPTNeoModel"),uNr.forEach(t),Aso=r(mEe," (GPT Neo model)"),mEe.forEach(t),Lso=i(C),fu=s(C,"LI",{});var fEe=n(fu);pK=s(fEe,"STRONG",{});var pNr=n(pK);Bso=r(pNr,"gptj"),pNr.forEach(t),xso=r(fEe," \u2014 "),UR=s(fEe,"A",{href:!0});var _Nr=n(UR);kso=r(_Nr,"GPTJModel"),_Nr.forEach(t),Rso=r(fEe," (GPT-J model)"),fEe.forEach(t),Sso=i(C),gu=s(C,"LI",{});var gEe=n(gu);_K=s(gEe,"STRONG",{});var bNr=n(_K);Pso=r(bNr,"hubert"),bNr.forEach(t),$so=r(gEe," \u2014 "),JR=s(gEe,"A",{href:!0});var vNr=n(JR);Iso=r(vNr,"HubertModel"),vNr.forEach(t),jso=r(gEe," (Hubert model)"),gEe.forEach(t),Dso=i(C),hu=s(C,"LI",{});var hEe=n(hu);bK=s(hEe,"STRONG",{});var TNr=n(bK);Nso=r(TNr,"ibert"),TNr.forEach(t),qso=r(hEe," \u2014 "),YR=s(hEe,"A",{href:!0});var FNr=n(YR);Oso=r(FNr,"IBertModel"),FNr.forEach(t),Gso=r(hEe," (I-BERT model)"),hEe.forEach(t),Xso=i(C),uu=s(C,"LI",{});var uEe=n(uu);vK=s(uEe,"STRONG",{});var CNr=n(vK);Vso=r(CNr,"imagegpt"),CNr.forEach(t),zso=r(uEe," \u2014 "),KR=s(uEe,"A",{href:!0});var MNr=n(KR);Wso=r(MNr,"ImageGPTModel"),MNr.forEach(t),Qso=r(uEe," (ImageGPT model)"),uEe.forEach(t),Hso=i(C),pu=s(C,"LI",{});var pEe=n(pu);TK=s(pEe,"STRONG",{});var ENr=n(TK);Uso=r(ENr,"layoutlm"),ENr.forEach(t),Jso=r(pEe," \u2014 "),ZR=s(pEe,"A",{href:!0});var yNr=n(ZR);Yso=r(yNr,"LayoutLMModel"),yNr.forEach(t),Kso=r(pEe," (LayoutLM model)"),pEe.forEach(t),Zso=i(C),_u=s(C,"LI",{});var _Ee=n(_u);FK=s(_Ee,"STRONG",{});var wNr=n(FK);eno=r(wNr,"layoutlmv2"),wNr.forEach(t),ono=r(_Ee," \u2014 "),eS=s(_Ee,"A",{href:!0});var ANr=n(eS);rno=r(ANr,"LayoutLMv2Model"),ANr.forEach(t),tno=r(_Ee," (LayoutLMv2 model)"),_Ee.forEach(t),ano=i(C),bu=s(C,"LI",{});var bEe=n(bu);CK=s(bEe,"STRONG",{});var LNr=n(CK);sno=r(LNr,"led"),LNr.forEach(t),nno=r(bEe," \u2014 "),oS=s(bEe,"A",{href:!0});var BNr=n(oS);lno=r(BNr,"LEDModel"),BNr.forEach(t),ino=r(bEe," (LED model)"),bEe.forEach(t),dno=i(C),vu=s(C,"LI",{});var vEe=n(vu);MK=s(vEe,"STRONG",{});var xNr=n(MK);cno=r(xNr,"longformer"),xNr.forEach(t),mno=r(vEe," \u2014 "),rS=s(vEe,"A",{href:!0});var kNr=n(rS);fno=r(kNr,"LongformerModel"),kNr.forEach(t),gno=r(vEe," (Longformer model)"),vEe.forEach(t),hno=i(C),Tu=s(C,"LI",{});var TEe=n(Tu);EK=s(TEe,"STRONG",{});var RNr=n(EK);uno=r(RNr,"luke"),RNr.forEach(t),pno=r(TEe," \u2014 "),tS=s(TEe,"A",{href:!0});var SNr=n(tS);_no=r(SNr,"LukeModel"),SNr.forEach(t),bno=r(TEe," (LUKE model)"),TEe.forEach(t),vno=i(C),Fu=s(C,"LI",{});var FEe=n(Fu);yK=s(FEe,"STRONG",{});var PNr=n(yK);Tno=r(PNr,"lxmert"),PNr.forEach(t),Fno=r(FEe," \u2014 "),aS=s(FEe,"A",{href:!0});var $Nr=n(aS);Cno=r($Nr,"LxmertModel"),$Nr.forEach(t),Mno=r(FEe," (LXMERT model)"),FEe.forEach(t),Eno=i(C),Cu=s(C,"LI",{});var CEe=n(Cu);wK=s(CEe,"STRONG",{});var INr=n(wK);yno=r(INr,"m2m_100"),INr.forEach(t),wno=r(CEe," \u2014 "),sS=s(CEe,"A",{href:!0});var jNr=n(sS);Ano=r(jNr,"M2M100Model"),jNr.forEach(t),Lno=r(CEe," (M2M100 model)"),CEe.forEach(t),Bno=i(C),Mu=s(C,"LI",{});var MEe=n(Mu);AK=s(MEe,"STRONG",{});var DNr=n(AK);xno=r(DNr,"marian"),DNr.forEach(t),kno=r(MEe," \u2014 "),nS=s(MEe,"A",{href:!0});var NNr=n(nS);Rno=r(NNr,"MarianModel"),NNr.forEach(t),Sno=r(MEe," (Marian model)"),MEe.forEach(t),Pno=i(C),Eu=s(C,"LI",{});var EEe=n(Eu);LK=s(EEe,"STRONG",{});var qNr=n(LK);$no=r(qNr,"maskformer"),qNr.forEach(t),Ino=r(EEe," \u2014 "),lS=s(EEe,"A",{href:!0});var ONr=n(lS);jno=r(ONr,"MaskFormerModel"),ONr.forEach(t),Dno=r(EEe," (MaskFormer model)"),EEe.forEach(t),Nno=i(C),yu=s(C,"LI",{});var yEe=n(yu);BK=s(yEe,"STRONG",{});var GNr=n(BK);qno=r(GNr,"mbart"),GNr.forEach(t),Ono=r(yEe," \u2014 "),iS=s(yEe,"A",{href:!0});var XNr=n(iS);Gno=r(XNr,"MBartModel"),XNr.forEach(t),Xno=r(yEe," (mBART model)"),yEe.forEach(t),Vno=i(C),wu=s(C,"LI",{});var wEe=n(wu);xK=s(wEe,"STRONG",{});var VNr=n(xK);zno=r(VNr,"megatron-bert"),VNr.forEach(t),Wno=r(wEe," \u2014 "),dS=s(wEe,"A",{href:!0});var zNr=n(dS);Qno=r(zNr,"MegatronBertModel"),zNr.forEach(t),Hno=r(wEe," (MegatronBert model)"),wEe.forEach(t),Uno=i(C),Au=s(C,"LI",{});var AEe=n(Au);kK=s(AEe,"STRONG",{});var WNr=n(kK);Jno=r(WNr,"mobilebert"),WNr.forEach(t),Yno=r(AEe," \u2014 "),cS=s(AEe,"A",{href:!0});var QNr=n(cS);Kno=r(QNr,"MobileBertModel"),QNr.forEach(t),Zno=r(AEe," (MobileBERT model)"),AEe.forEach(t),elo=i(C),Lu=s(C,"LI",{});var LEe=n(Lu);RK=s(LEe,"STRONG",{});var HNr=n(RK);olo=r(HNr,"mpnet"),HNr.forEach(t),rlo=r(LEe," \u2014 "),mS=s(LEe,"A",{href:!0});var UNr=n(mS);tlo=r(UNr,"MPNetModel"),UNr.forEach(t),alo=r(LEe," (MPNet model)"),LEe.forEach(t),slo=i(C),Bu=s(C,"LI",{});var BEe=n(Bu);SK=s(BEe,"STRONG",{});var JNr=n(SK);nlo=r(JNr,"mt5"),JNr.forEach(t),llo=r(BEe," \u2014 "),fS=s(BEe,"A",{href:!0});var YNr=n(fS);ilo=r(YNr,"MT5Model"),YNr.forEach(t),dlo=r(BEe," (mT5 model)"),BEe.forEach(t),clo=i(C),xu=s(C,"LI",{});var xEe=n(xu);PK=s(xEe,"STRONG",{});var KNr=n(PK);mlo=r(KNr,"nystromformer"),KNr.forEach(t),flo=r(xEe," \u2014 "),gS=s(xEe,"A",{href:!0});var ZNr=n(gS);glo=r(ZNr,"NystromformerModel"),ZNr.forEach(t),hlo=r(xEe," (Nystromformer model)"),xEe.forEach(t),ulo=i(C),ku=s(C,"LI",{});var kEe=n(ku);$K=s(kEe,"STRONG",{});var eqr=n($K);plo=r(eqr,"openai-gpt"),eqr.forEach(t),_lo=r(kEe," \u2014 "),hS=s(kEe,"A",{href:!0});var oqr=n(hS);blo=r(oqr,"OpenAIGPTModel"),oqr.forEach(t),vlo=r(kEe," (OpenAI GPT model)"),kEe.forEach(t),Tlo=i(C),Ru=s(C,"LI",{});var REe=n(Ru);IK=s(REe,"STRONG",{});var rqr=n(IK);Flo=r(rqr,"pegasus"),rqr.forEach(t),Clo=r(REe," \u2014 "),uS=s(REe,"A",{href:!0});var tqr=n(uS);Mlo=r(tqr,"PegasusModel"),tqr.forEach(t),Elo=r(REe," (Pegasus model)"),REe.forEach(t),ylo=i(C),Su=s(C,"LI",{});var SEe=n(Su);jK=s(SEe,"STRONG",{});var aqr=n(jK);wlo=r(aqr,"perceiver"),aqr.forEach(t),Alo=r(SEe," \u2014 "),pS=s(SEe,"A",{href:!0});var sqr=n(pS);Llo=r(sqr,"PerceiverModel"),sqr.forEach(t),Blo=r(SEe," (Perceiver model)"),SEe.forEach(t),xlo=i(C),Pu=s(C,"LI",{});var PEe=n(Pu);DK=s(PEe,"STRONG",{});var nqr=n(DK);klo=r(nqr,"plbart"),nqr.forEach(t),Rlo=r(PEe," \u2014 "),_S=s(PEe,"A",{href:!0});var lqr=n(_S);Slo=r(lqr,"PLBartModel"),lqr.forEach(t),Plo=r(PEe," (PLBart model)"),PEe.forEach(t),$lo=i(C),$u=s(C,"LI",{});var $Ee=n($u);NK=s($Ee,"STRONG",{});var iqr=n(NK);Ilo=r(iqr,"poolformer"),iqr.forEach(t),jlo=r($Ee," \u2014 "),bS=s($Ee,"A",{href:!0});var dqr=n(bS);Dlo=r(dqr,"PoolFormerModel"),dqr.forEach(t),Nlo=r($Ee," (PoolFormer model)"),$Ee.forEach(t),qlo=i(C),Iu=s(C,"LI",{});var IEe=n(Iu);qK=s(IEe,"STRONG",{});var cqr=n(qK);Olo=r(cqr,"prophetnet"),cqr.forEach(t),Glo=r(IEe," \u2014 "),vS=s(IEe,"A",{href:!0});var mqr=n(vS);Xlo=r(mqr,"ProphetNetModel"),mqr.forEach(t),Vlo=r(IEe," (ProphetNet model)"),IEe.forEach(t),zlo=i(C),ju=s(C,"LI",{});var jEe=n(ju);OK=s(jEe,"STRONG",{});var fqr=n(OK);Wlo=r(fqr,"qdqbert"),fqr.forEach(t),Qlo=r(jEe," \u2014 "),TS=s(jEe,"A",{href:!0});var gqr=n(TS);Hlo=r(gqr,"QDQBertModel"),gqr.forEach(t),Ulo=r(jEe," (QDQBert model)"),jEe.forEach(t),Jlo=i(C),Du=s(C,"LI",{});var DEe=n(Du);GK=s(DEe,"STRONG",{});var hqr=n(GK);Ylo=r(hqr,"reformer"),hqr.forEach(t),Klo=r(DEe," \u2014 "),FS=s(DEe,"A",{href:!0});var uqr=n(FS);Zlo=r(uqr,"ReformerModel"),uqr.forEach(t),eio=r(DEe," (Reformer model)"),DEe.forEach(t),oio=i(C),Nu=s(C,"LI",{});var NEe=n(Nu);XK=s(NEe,"STRONG",{});var pqr=n(XK);rio=r(pqr,"rembert"),pqr.forEach(t),tio=r(NEe," \u2014 "),CS=s(NEe,"A",{href:!0});var _qr=n(CS);aio=r(_qr,"RemBertModel"),_qr.forEach(t),sio=r(NEe," (RemBERT model)"),NEe.forEach(t),nio=i(C),qu=s(C,"LI",{});var qEe=n(qu);VK=s(qEe,"STRONG",{});var bqr=n(VK);lio=r(bqr,"retribert"),bqr.forEach(t),iio=r(qEe," \u2014 "),MS=s(qEe,"A",{href:!0});var vqr=n(MS);dio=r(vqr,"RetriBertModel"),vqr.forEach(t),cio=r(qEe," (RetriBERT model)"),qEe.forEach(t),mio=i(C),Ou=s(C,"LI",{});var OEe=n(Ou);zK=s(OEe,"STRONG",{});var Tqr=n(zK);fio=r(Tqr,"roberta"),Tqr.forEach(t),gio=r(OEe," \u2014 "),ES=s(OEe,"A",{href:!0});var Fqr=n(ES);hio=r(Fqr,"RobertaModel"),Fqr.forEach(t),uio=r(OEe," (RoBERTa model)"),OEe.forEach(t),pio=i(C),Gu=s(C,"LI",{});var GEe=n(Gu);WK=s(GEe,"STRONG",{});var Cqr=n(WK);_io=r(Cqr,"roformer"),Cqr.forEach(t),bio=r(GEe," \u2014 "),yS=s(GEe,"A",{href:!0});var Mqr=n(yS);vio=r(Mqr,"RoFormerModel"),Mqr.forEach(t),Tio=r(GEe," (RoFormer model)"),GEe.forEach(t),Fio=i(C),Xu=s(C,"LI",{});var XEe=n(Xu);QK=s(XEe,"STRONG",{});var Eqr=n(QK);Cio=r(Eqr,"segformer"),Eqr.forEach(t),Mio=r(XEe," \u2014 "),wS=s(XEe,"A",{href:!0});var yqr=n(wS);Eio=r(yqr,"SegformerModel"),yqr.forEach(t),yio=r(XEe," (SegFormer model)"),XEe.forEach(t),wio=i(C),Vu=s(C,"LI",{});var VEe=n(Vu);HK=s(VEe,"STRONG",{});var wqr=n(HK);Aio=r(wqr,"sew"),wqr.forEach(t),Lio=r(VEe," \u2014 "),AS=s(VEe,"A",{href:!0});var Aqr=n(AS);Bio=r(Aqr,"SEWModel"),Aqr.forEach(t),xio=r(VEe," (SEW model)"),VEe.forEach(t),kio=i(C),zu=s(C,"LI",{});var zEe=n(zu);UK=s(zEe,"STRONG",{});var Lqr=n(UK);Rio=r(Lqr,"sew-d"),Lqr.forEach(t),Sio=r(zEe," \u2014 "),LS=s(zEe,"A",{href:!0});var Bqr=n(LS);Pio=r(Bqr,"SEWDModel"),Bqr.forEach(t),$io=r(zEe," (SEW-D model)"),zEe.forEach(t),Iio=i(C),Wu=s(C,"LI",{});var WEe=n(Wu);JK=s(WEe,"STRONG",{});var xqr=n(JK);jio=r(xqr,"speech_to_text"),xqr.forEach(t),Dio=r(WEe," \u2014 "),BS=s(WEe,"A",{href:!0});var kqr=n(BS);Nio=r(kqr,"Speech2TextModel"),kqr.forEach(t),qio=r(WEe," (Speech2Text model)"),WEe.forEach(t),Oio=i(C),Qu=s(C,"LI",{});var QEe=n(Qu);YK=s(QEe,"STRONG",{});var Rqr=n(YK);Gio=r(Rqr,"splinter"),Rqr.forEach(t),Xio=r(QEe," \u2014 "),xS=s(QEe,"A",{href:!0});var Sqr=n(xS);Vio=r(Sqr,"SplinterModel"),Sqr.forEach(t),zio=r(QEe," (Splinter model)"),QEe.forEach(t),Wio=i(C),Hu=s(C,"LI",{});var HEe=n(Hu);KK=s(HEe,"STRONG",{});var Pqr=n(KK);Qio=r(Pqr,"squeezebert"),Pqr.forEach(t),Hio=r(HEe," \u2014 "),kS=s(HEe,"A",{href:!0});var $qr=n(kS);Uio=r($qr,"SqueezeBertModel"),$qr.forEach(t),Jio=r(HEe," (SqueezeBERT model)"),HEe.forEach(t),Yio=i(C),Uu=s(C,"LI",{});var UEe=n(Uu);ZK=s(UEe,"STRONG",{});var Iqr=n(ZK);Kio=r(Iqr,"swin"),Iqr.forEach(t),Zio=r(UEe," \u2014 "),RS=s(UEe,"A",{href:!0});var jqr=n(RS);edo=r(jqr,"SwinModel"),jqr.forEach(t),odo=r(UEe," (Swin model)"),UEe.forEach(t),rdo=i(C),Ju=s(C,"LI",{});var JEe=n(Ju);eZ=s(JEe,"STRONG",{});var Dqr=n(eZ);tdo=r(Dqr,"t5"),Dqr.forEach(t),ado=r(JEe," \u2014 "),SS=s(JEe,"A",{href:!0});var Nqr=n(SS);sdo=r(Nqr,"T5Model"),Nqr.forEach(t),ndo=r(JEe," (T5 model)"),JEe.forEach(t),ldo=i(C),Yu=s(C,"LI",{});var YEe=n(Yu);oZ=s(YEe,"STRONG",{});var qqr=n(oZ);ido=r(qqr,"tapas"),qqr.forEach(t),ddo=r(YEe," \u2014 "),PS=s(YEe,"A",{href:!0});var Oqr=n(PS);cdo=r(Oqr,"TapasModel"),Oqr.forEach(t),mdo=r(YEe," (TAPAS model)"),YEe.forEach(t),fdo=i(C),Ku=s(C,"LI",{});var KEe=n(Ku);rZ=s(KEe,"STRONG",{});var Gqr=n(rZ);gdo=r(Gqr,"transfo-xl"),Gqr.forEach(t),hdo=r(KEe," \u2014 "),$S=s(KEe,"A",{href:!0});var Xqr=n($S);udo=r(Xqr,"TransfoXLModel"),Xqr.forEach(t),pdo=r(KEe," (Transformer-XL model)"),KEe.forEach(t),_do=i(C),Zu=s(C,"LI",{});var ZEe=n(Zu);tZ=s(ZEe,"STRONG",{});var Vqr=n(tZ);bdo=r(Vqr,"unispeech"),Vqr.forEach(t),vdo=r(ZEe," \u2014 "),IS=s(ZEe,"A",{href:!0});var zqr=n(IS);Tdo=r(zqr,"UniSpeechModel"),zqr.forEach(t),Fdo=r(ZEe," (UniSpeech model)"),ZEe.forEach(t),Cdo=i(C),ep=s(C,"LI",{});var e3e=n(ep);aZ=s(e3e,"STRONG",{});var Wqr=n(aZ);Mdo=r(Wqr,"unispeech-sat"),Wqr.forEach(t),Edo=r(e3e," \u2014 "),jS=s(e3e,"A",{href:!0});var Qqr=n(jS);ydo=r(Qqr,"UniSpeechSatModel"),Qqr.forEach(t),wdo=r(e3e," (UniSpeechSat model)"),e3e.forEach(t),Ado=i(C),op=s(C,"LI",{});var o3e=n(op);sZ=s(o3e,"STRONG",{});var Hqr=n(sZ);Ldo=r(Hqr,"vilt"),Hqr.forEach(t),Bdo=r(o3e," \u2014 "),DS=s(o3e,"A",{href:!0});var Uqr=n(DS);xdo=r(Uqr,"ViltModel"),Uqr.forEach(t),kdo=r(o3e," (ViLT model)"),o3e.forEach(t),Rdo=i(C),rp=s(C,"LI",{});var r3e=n(rp);nZ=s(r3e,"STRONG",{});var Jqr=n(nZ);Sdo=r(Jqr,"vision-text-dual-encoder"),Jqr.forEach(t),Pdo=r(r3e," \u2014 "),NS=s(r3e,"A",{href:!0});var Yqr=n(NS);$do=r(Yqr,"VisionTextDualEncoderModel"),Yqr.forEach(t),Ido=r(r3e," (VisionTextDualEncoder model)"),r3e.forEach(t),jdo=i(C),tp=s(C,"LI",{});var t3e=n(tp);lZ=s(t3e,"STRONG",{});var Kqr=n(lZ);Ddo=r(Kqr,"visual_bert"),Kqr.forEach(t),Ndo=r(t3e," \u2014 "),qS=s(t3e,"A",{href:!0});var Zqr=n(qS);qdo=r(Zqr,"VisualBertModel"),Zqr.forEach(t),Odo=r(t3e," (VisualBert model)"),t3e.forEach(t),Gdo=i(C),ap=s(C,"LI",{});var a3e=n(ap);iZ=s(a3e,"STRONG",{});var eOr=n(iZ);Xdo=r(eOr,"vit"),eOr.forEach(t),Vdo=r(a3e," \u2014 "),OS=s(a3e,"A",{href:!0});var oOr=n(OS);zdo=r(oOr,"ViTModel"),oOr.forEach(t),Wdo=r(a3e," (ViT model)"),a3e.forEach(t),Qdo=i(C),sp=s(C,"LI",{});var s3e=n(sp);dZ=s(s3e,"STRONG",{});var rOr=n(dZ);Hdo=r(rOr,"vit_mae"),rOr.forEach(t),Udo=r(s3e," \u2014 "),GS=s(s3e,"A",{href:!0});var tOr=n(GS);Jdo=r(tOr,"ViTMAEModel"),tOr.forEach(t),Ydo=r(s3e," (ViTMAE model)"),s3e.forEach(t),Kdo=i(C),np=s(C,"LI",{});var n3e=n(np);cZ=s(n3e,"STRONG",{});var aOr=n(cZ);Zdo=r(aOr,"wav2vec2"),aOr.forEach(t),eco=r(n3e," \u2014 "),XS=s(n3e,"A",{href:!0});var sOr=n(XS);oco=r(sOr,"Wav2Vec2Model"),sOr.forEach(t),rco=r(n3e," (Wav2Vec2 model)"),n3e.forEach(t),tco=i(C),lp=s(C,"LI",{});var l3e=n(lp);mZ=s(l3e,"STRONG",{});var nOr=n(mZ);aco=r(nOr,"wavlm"),nOr.forEach(t),sco=r(l3e," \u2014 "),VS=s(l3e,"A",{href:!0});var lOr=n(VS);nco=r(lOr,"WavLMModel"),lOr.forEach(t),lco=r(l3e," (WavLM model)"),l3e.forEach(t),ico=i(C),ip=s(C,"LI",{});var i3e=n(ip);fZ=s(i3e,"STRONG",{});var iOr=n(fZ);dco=r(iOr,"xglm"),iOr.forEach(t),cco=r(i3e," \u2014 "),zS=s(i3e,"A",{href:!0});var dOr=n(zS);mco=r(dOr,"XGLMModel"),dOr.forEach(t),fco=r(i3e," (XGLM model)"),i3e.forEach(t),gco=i(C),dp=s(C,"LI",{});var d3e=n(dp);gZ=s(d3e,"STRONG",{});var cOr=n(gZ);hco=r(cOr,"xlm"),cOr.forEach(t),uco=r(d3e," \u2014 "),WS=s(d3e,"A",{href:!0});var mOr=n(WS);pco=r(mOr,"XLMModel"),mOr.forEach(t),_co=r(d3e," (XLM model)"),d3e.forEach(t),bco=i(C),cp=s(C,"LI",{});var c3e=n(cp);hZ=s(c3e,"STRONG",{});var fOr=n(hZ);vco=r(fOr,"xlm-prophetnet"),fOr.forEach(t),Tco=r(c3e," \u2014 "),QS=s(c3e,"A",{href:!0});var gOr=n(QS);Fco=r(gOr,"XLMProphetNetModel"),gOr.forEach(t),Cco=r(c3e," (XLMProphetNet model)"),c3e.forEach(t),Mco=i(C),mp=s(C,"LI",{});var m3e=n(mp);uZ=s(m3e,"STRONG",{});var hOr=n(uZ);Eco=r(hOr,"xlm-roberta"),hOr.forEach(t),yco=r(m3e," \u2014 "),HS=s(m3e,"A",{href:!0});var uOr=n(HS);wco=r(uOr,"XLMRobertaModel"),uOr.forEach(t),Aco=r(m3e," (XLM-RoBERTa model)"),m3e.forEach(t),Lco=i(C),fp=s(C,"LI",{});var f3e=n(fp);pZ=s(f3e,"STRONG",{});var pOr=n(pZ);Bco=r(pOr,"xlm-roberta-xl"),pOr.forEach(t),xco=r(f3e," \u2014 "),US=s(f3e,"A",{href:!0});var _Or=n(US);kco=r(_Or,"XLMRobertaXLModel"),_Or.forEach(t),Rco=r(f3e," (XLM-RoBERTa-XL model)"),f3e.forEach(t),Sco=i(C),gp=s(C,"LI",{});var g3e=n(gp);_Z=s(g3e,"STRONG",{});var bOr=n(_Z);Pco=r(bOr,"xlnet"),bOr.forEach(t),$co=r(g3e," \u2014 "),JS=s(g3e,"A",{href:!0});var vOr=n(JS);Ico=r(vOr,"XLNetModel"),vOr.forEach(t),jco=r(g3e," (XLNet model)"),g3e.forEach(t),Dco=i(C),hp=s(C,"LI",{});var h3e=n(hp);bZ=s(h3e,"STRONG",{});var TOr=n(bZ);Nco=r(TOr,"yoso"),TOr.forEach(t),qco=r(h3e," \u2014 "),YS=s(h3e,"A",{href:!0});var FOr=n(YS);Oco=r(FOr,"YosoModel"),FOr.forEach(t),Gco=r(h3e," (YOSO model)"),h3e.forEach(t),C.forEach(t),Xco=i(qt),up=s(qt,"P",{});var u3e=n(up);Vco=r(u3e,"The model is set in evaluation mode by default using "),vZ=s(u3e,"CODE",{});var COr=n(vZ);zco=r(COr,"model.eval()"),COr.forEach(t),Wco=r(u3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TZ=s(u3e,"CODE",{});var MOr=n(TZ);Qco=r(MOr,"model.train()"),MOr.forEach(t),u3e.forEach(t),Hco=i(qt),FZ=s(qt,"P",{});var EOr=n(FZ);Uco=r(EOr,"Examples:"),EOr.forEach(t),Jco=i(qt),f(ky.$$.fragment,qt),qt.forEach(t),Wn.forEach(t),gxe=i(d),Zi=s(d,"H2",{class:!0});var CRe=n(Zi);pp=s(CRe,"A",{id:!0,class:!0,href:!0});var yOr=n(pp);CZ=s(yOr,"SPAN",{});var wOr=n(CZ);f(Ry.$$.fragment,wOr),wOr.forEach(t),yOr.forEach(t),Yco=i(CRe),MZ=s(CRe,"SPAN",{});var AOr=n(MZ);Kco=r(AOr,"AutoModelForPreTraining"),AOr.forEach(t),CRe.forEach(t),hxe=i(d),Yo=s(d,"DIV",{class:!0});var Hn=n(Yo);f(Sy.$$.fragment,Hn),Zco=i(Hn),ed=s(Hn,"P",{});var Mz=n(ed);emo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EZ=s(Mz,"CODE",{});var LOr=n(EZ);omo=r(LOr,"from_pretrained()"),LOr.forEach(t),rmo=r(Mz,"class method or the "),yZ=s(Mz,"CODE",{});var BOr=n(yZ);tmo=r(BOr,"from_config()"),BOr.forEach(t),amo=r(Mz,`class
method.`),Mz.forEach(t),smo=i(Hn),Py=s(Hn,"P",{});var MRe=n(Py);nmo=r(MRe,"This class cannot be instantiated directly using "),wZ=s(MRe,"CODE",{});var xOr=n(wZ);lmo=r(xOr,"__init__()"),xOr.forEach(t),imo=r(MRe," (throws an error)."),MRe.forEach(t),dmo=i(Hn),zr=s(Hn,"DIV",{class:!0});var Un=n(zr);f($y.$$.fragment,Un),cmo=i(Un),AZ=s(Un,"P",{});var kOr=n(AZ);mmo=r(kOr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kOr.forEach(t),fmo=i(Un),od=s(Un,"P",{});var Ez=n(od);gmo=r(Ez,`Note:
Loading a model from its configuration file does `),LZ=s(Ez,"STRONG",{});var ROr=n(LZ);hmo=r(ROr,"not"),ROr.forEach(t),umo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=s(Ez,"CODE",{});var SOr=n(BZ);pmo=r(SOr,"from_pretrained()"),SOr.forEach(t),_mo=r(Ez,"to load the model weights."),Ez.forEach(t),bmo=i(Un),xZ=s(Un,"P",{});var POr=n(xZ);vmo=r(POr,"Examples:"),POr.forEach(t),Tmo=i(Un),f(Iy.$$.fragment,Un),Un.forEach(t),Fmo=i(Hn),De=s(Hn,"DIV",{class:!0});var Ot=n(De);f(jy.$$.fragment,Ot),Cmo=i(Ot),kZ=s(Ot,"P",{});var $Or=n(kZ);Mmo=r($Or,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Or.forEach(t),Emo=i(Ot),Va=s(Ot,"P",{});var U3=n(Va);ymo=r(U3,"The model class to instantiate is selected based on the "),RZ=s(U3,"CODE",{});var IOr=n(RZ);wmo=r(IOr,"model_type"),IOr.forEach(t),Amo=r(U3,` property of the config object (either
passed as an argument or loaded from `),SZ=s(U3,"CODE",{});var jOr=n(SZ);Lmo=r(jOr,"pretrained_model_name_or_path"),jOr.forEach(t),Bmo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PZ=s(U3,"CODE",{});var DOr=n(PZ);xmo=r(DOr,"pretrained_model_name_or_path"),DOr.forEach(t),kmo=r(U3,":"),U3.forEach(t),Rmo=i(Ot),k=s(Ot,"UL",{});var S=n(k);_p=s(S,"LI",{});var p3e=n(_p);$Z=s(p3e,"STRONG",{});var NOr=n($Z);Smo=r(NOr,"albert"),NOr.forEach(t),Pmo=r(p3e," \u2014 "),KS=s(p3e,"A",{href:!0});var qOr=n(KS);$mo=r(qOr,"AlbertForPreTraining"),qOr.forEach(t),Imo=r(p3e," (ALBERT model)"),p3e.forEach(t),jmo=i(S),bp=s(S,"LI",{});var _3e=n(bp);IZ=s(_3e,"STRONG",{});var OOr=n(IZ);Dmo=r(OOr,"bart"),OOr.forEach(t),Nmo=r(_3e," \u2014 "),ZS=s(_3e,"A",{href:!0});var GOr=n(ZS);qmo=r(GOr,"BartForConditionalGeneration"),GOr.forEach(t),Omo=r(_3e," (BART model)"),_3e.forEach(t),Gmo=i(S),vp=s(S,"LI",{});var b3e=n(vp);jZ=s(b3e,"STRONG",{});var XOr=n(jZ);Xmo=r(XOr,"bert"),XOr.forEach(t),Vmo=r(b3e," \u2014 "),eP=s(b3e,"A",{href:!0});var VOr=n(eP);zmo=r(VOr,"BertForPreTraining"),VOr.forEach(t),Wmo=r(b3e," (BERT model)"),b3e.forEach(t),Qmo=i(S),Tp=s(S,"LI",{});var v3e=n(Tp);DZ=s(v3e,"STRONG",{});var zOr=n(DZ);Hmo=r(zOr,"big_bird"),zOr.forEach(t),Umo=r(v3e," \u2014 "),oP=s(v3e,"A",{href:!0});var WOr=n(oP);Jmo=r(WOr,"BigBirdForPreTraining"),WOr.forEach(t),Ymo=r(v3e," (BigBird model)"),v3e.forEach(t),Kmo=i(S),Fp=s(S,"LI",{});var T3e=n(Fp);NZ=s(T3e,"STRONG",{});var QOr=n(NZ);Zmo=r(QOr,"camembert"),QOr.forEach(t),efo=r(T3e," \u2014 "),rP=s(T3e,"A",{href:!0});var HOr=n(rP);ofo=r(HOr,"CamembertForMaskedLM"),HOr.forEach(t),rfo=r(T3e," (CamemBERT model)"),T3e.forEach(t),tfo=i(S),Cp=s(S,"LI",{});var F3e=n(Cp);qZ=s(F3e,"STRONG",{});var UOr=n(qZ);afo=r(UOr,"ctrl"),UOr.forEach(t),sfo=r(F3e," \u2014 "),tP=s(F3e,"A",{href:!0});var JOr=n(tP);nfo=r(JOr,"CTRLLMHeadModel"),JOr.forEach(t),lfo=r(F3e," (CTRL model)"),F3e.forEach(t),ifo=i(S),Mp=s(S,"LI",{});var C3e=n(Mp);OZ=s(C3e,"STRONG",{});var YOr=n(OZ);dfo=r(YOr,"data2vec-text"),YOr.forEach(t),cfo=r(C3e," \u2014 "),aP=s(C3e,"A",{href:!0});var KOr=n(aP);mfo=r(KOr,"Data2VecTextForMaskedLM"),KOr.forEach(t),ffo=r(C3e," (Data2VecText model)"),C3e.forEach(t),gfo=i(S),Ep=s(S,"LI",{});var M3e=n(Ep);GZ=s(M3e,"STRONG",{});var ZOr=n(GZ);hfo=r(ZOr,"deberta"),ZOr.forEach(t),ufo=r(M3e," \u2014 "),sP=s(M3e,"A",{href:!0});var eGr=n(sP);pfo=r(eGr,"DebertaForMaskedLM"),eGr.forEach(t),_fo=r(M3e," (DeBERTa model)"),M3e.forEach(t),bfo=i(S),yp=s(S,"LI",{});var E3e=n(yp);XZ=s(E3e,"STRONG",{});var oGr=n(XZ);vfo=r(oGr,"deberta-v2"),oGr.forEach(t),Tfo=r(E3e," \u2014 "),nP=s(E3e,"A",{href:!0});var rGr=n(nP);Ffo=r(rGr,"DebertaV2ForMaskedLM"),rGr.forEach(t),Cfo=r(E3e," (DeBERTa-v2 model)"),E3e.forEach(t),Mfo=i(S),wp=s(S,"LI",{});var y3e=n(wp);VZ=s(y3e,"STRONG",{});var tGr=n(VZ);Efo=r(tGr,"distilbert"),tGr.forEach(t),yfo=r(y3e," \u2014 "),lP=s(y3e,"A",{href:!0});var aGr=n(lP);wfo=r(aGr,"DistilBertForMaskedLM"),aGr.forEach(t),Afo=r(y3e," (DistilBERT model)"),y3e.forEach(t),Lfo=i(S),Ap=s(S,"LI",{});var w3e=n(Ap);zZ=s(w3e,"STRONG",{});var sGr=n(zZ);Bfo=r(sGr,"electra"),sGr.forEach(t),xfo=r(w3e," \u2014 "),iP=s(w3e,"A",{href:!0});var nGr=n(iP);kfo=r(nGr,"ElectraForPreTraining"),nGr.forEach(t),Rfo=r(w3e," (ELECTRA model)"),w3e.forEach(t),Sfo=i(S),Lp=s(S,"LI",{});var A3e=n(Lp);WZ=s(A3e,"STRONG",{});var lGr=n(WZ);Pfo=r(lGr,"flaubert"),lGr.forEach(t),$fo=r(A3e," \u2014 "),dP=s(A3e,"A",{href:!0});var iGr=n(dP);Ifo=r(iGr,"FlaubertWithLMHeadModel"),iGr.forEach(t),jfo=r(A3e," (FlauBERT model)"),A3e.forEach(t),Dfo=i(S),Bp=s(S,"LI",{});var L3e=n(Bp);QZ=s(L3e,"STRONG",{});var dGr=n(QZ);Nfo=r(dGr,"fnet"),dGr.forEach(t),qfo=r(L3e," \u2014 "),cP=s(L3e,"A",{href:!0});var cGr=n(cP);Ofo=r(cGr,"FNetForPreTraining"),cGr.forEach(t),Gfo=r(L3e," (FNet model)"),L3e.forEach(t),Xfo=i(S),xp=s(S,"LI",{});var B3e=n(xp);HZ=s(B3e,"STRONG",{});var mGr=n(HZ);Vfo=r(mGr,"fsmt"),mGr.forEach(t),zfo=r(B3e," \u2014 "),mP=s(B3e,"A",{href:!0});var fGr=n(mP);Wfo=r(fGr,"FSMTForConditionalGeneration"),fGr.forEach(t),Qfo=r(B3e," (FairSeq Machine-Translation model)"),B3e.forEach(t),Hfo=i(S),kp=s(S,"LI",{});var x3e=n(kp);UZ=s(x3e,"STRONG",{});var gGr=n(UZ);Ufo=r(gGr,"funnel"),gGr.forEach(t),Jfo=r(x3e," \u2014 "),fP=s(x3e,"A",{href:!0});var hGr=n(fP);Yfo=r(hGr,"FunnelForPreTraining"),hGr.forEach(t),Kfo=r(x3e," (Funnel Transformer model)"),x3e.forEach(t),Zfo=i(S),Rp=s(S,"LI",{});var k3e=n(Rp);JZ=s(k3e,"STRONG",{});var uGr=n(JZ);ego=r(uGr,"gpt2"),uGr.forEach(t),ogo=r(k3e," \u2014 "),gP=s(k3e,"A",{href:!0});var pGr=n(gP);rgo=r(pGr,"GPT2LMHeadModel"),pGr.forEach(t),tgo=r(k3e," (OpenAI GPT-2 model)"),k3e.forEach(t),ago=i(S),Sp=s(S,"LI",{});var R3e=n(Sp);YZ=s(R3e,"STRONG",{});var _Gr=n(YZ);sgo=r(_Gr,"ibert"),_Gr.forEach(t),ngo=r(R3e," \u2014 "),hP=s(R3e,"A",{href:!0});var bGr=n(hP);lgo=r(bGr,"IBertForMaskedLM"),bGr.forEach(t),igo=r(R3e," (I-BERT model)"),R3e.forEach(t),dgo=i(S),Pp=s(S,"LI",{});var S3e=n(Pp);KZ=s(S3e,"STRONG",{});var vGr=n(KZ);cgo=r(vGr,"layoutlm"),vGr.forEach(t),mgo=r(S3e," \u2014 "),uP=s(S3e,"A",{href:!0});var TGr=n(uP);fgo=r(TGr,"LayoutLMForMaskedLM"),TGr.forEach(t),ggo=r(S3e," (LayoutLM model)"),S3e.forEach(t),hgo=i(S),$p=s(S,"LI",{});var P3e=n($p);ZZ=s(P3e,"STRONG",{});var FGr=n(ZZ);ugo=r(FGr,"longformer"),FGr.forEach(t),pgo=r(P3e," \u2014 "),pP=s(P3e,"A",{href:!0});var CGr=n(pP);_go=r(CGr,"LongformerForMaskedLM"),CGr.forEach(t),bgo=r(P3e," (Longformer model)"),P3e.forEach(t),vgo=i(S),Ip=s(S,"LI",{});var $3e=n(Ip);eee=s($3e,"STRONG",{});var MGr=n(eee);Tgo=r(MGr,"lxmert"),MGr.forEach(t),Fgo=r($3e," \u2014 "),_P=s($3e,"A",{href:!0});var EGr=n(_P);Cgo=r(EGr,"LxmertForPreTraining"),EGr.forEach(t),Mgo=r($3e," (LXMERT model)"),$3e.forEach(t),Ego=i(S),jp=s(S,"LI",{});var I3e=n(jp);oee=s(I3e,"STRONG",{});var yGr=n(oee);ygo=r(yGr,"megatron-bert"),yGr.forEach(t),wgo=r(I3e," \u2014 "),bP=s(I3e,"A",{href:!0});var wGr=n(bP);Ago=r(wGr,"MegatronBertForPreTraining"),wGr.forEach(t),Lgo=r(I3e," (MegatronBert model)"),I3e.forEach(t),Bgo=i(S),Dp=s(S,"LI",{});var j3e=n(Dp);ree=s(j3e,"STRONG",{});var AGr=n(ree);xgo=r(AGr,"mobilebert"),AGr.forEach(t),kgo=r(j3e," \u2014 "),vP=s(j3e,"A",{href:!0});var LGr=n(vP);Rgo=r(LGr,"MobileBertForPreTraining"),LGr.forEach(t),Sgo=r(j3e," (MobileBERT model)"),j3e.forEach(t),Pgo=i(S),Np=s(S,"LI",{});var D3e=n(Np);tee=s(D3e,"STRONG",{});var BGr=n(tee);$go=r(BGr,"mpnet"),BGr.forEach(t),Igo=r(D3e," \u2014 "),TP=s(D3e,"A",{href:!0});var xGr=n(TP);jgo=r(xGr,"MPNetForMaskedLM"),xGr.forEach(t),Dgo=r(D3e," (MPNet model)"),D3e.forEach(t),Ngo=i(S),qp=s(S,"LI",{});var N3e=n(qp);aee=s(N3e,"STRONG",{});var kGr=n(aee);qgo=r(kGr,"openai-gpt"),kGr.forEach(t),Ogo=r(N3e," \u2014 "),FP=s(N3e,"A",{href:!0});var RGr=n(FP);Ggo=r(RGr,"OpenAIGPTLMHeadModel"),RGr.forEach(t),Xgo=r(N3e," (OpenAI GPT model)"),N3e.forEach(t),Vgo=i(S),Op=s(S,"LI",{});var q3e=n(Op);see=s(q3e,"STRONG",{});var SGr=n(see);zgo=r(SGr,"retribert"),SGr.forEach(t),Wgo=r(q3e," \u2014 "),CP=s(q3e,"A",{href:!0});var PGr=n(CP);Qgo=r(PGr,"RetriBertModel"),PGr.forEach(t),Hgo=r(q3e," (RetriBERT model)"),q3e.forEach(t),Ugo=i(S),Gp=s(S,"LI",{});var O3e=n(Gp);nee=s(O3e,"STRONG",{});var $Gr=n(nee);Jgo=r($Gr,"roberta"),$Gr.forEach(t),Ygo=r(O3e," \u2014 "),MP=s(O3e,"A",{href:!0});var IGr=n(MP);Kgo=r(IGr,"RobertaForMaskedLM"),IGr.forEach(t),Zgo=r(O3e," (RoBERTa model)"),O3e.forEach(t),eho=i(S),Xp=s(S,"LI",{});var G3e=n(Xp);lee=s(G3e,"STRONG",{});var jGr=n(lee);oho=r(jGr,"squeezebert"),jGr.forEach(t),rho=r(G3e," \u2014 "),EP=s(G3e,"A",{href:!0});var DGr=n(EP);tho=r(DGr,"SqueezeBertForMaskedLM"),DGr.forEach(t),aho=r(G3e," (SqueezeBERT model)"),G3e.forEach(t),sho=i(S),Vp=s(S,"LI",{});var X3e=n(Vp);iee=s(X3e,"STRONG",{});var NGr=n(iee);nho=r(NGr,"t5"),NGr.forEach(t),lho=r(X3e," \u2014 "),yP=s(X3e,"A",{href:!0});var qGr=n(yP);iho=r(qGr,"T5ForConditionalGeneration"),qGr.forEach(t),dho=r(X3e," (T5 model)"),X3e.forEach(t),cho=i(S),zp=s(S,"LI",{});var V3e=n(zp);dee=s(V3e,"STRONG",{});var OGr=n(dee);mho=r(OGr,"tapas"),OGr.forEach(t),fho=r(V3e," \u2014 "),wP=s(V3e,"A",{href:!0});var GGr=n(wP);gho=r(GGr,"TapasForMaskedLM"),GGr.forEach(t),hho=r(V3e," (TAPAS model)"),V3e.forEach(t),uho=i(S),Wp=s(S,"LI",{});var z3e=n(Wp);cee=s(z3e,"STRONG",{});var XGr=n(cee);pho=r(XGr,"transfo-xl"),XGr.forEach(t),_ho=r(z3e," \u2014 "),AP=s(z3e,"A",{href:!0});var VGr=n(AP);bho=r(VGr,"TransfoXLLMHeadModel"),VGr.forEach(t),vho=r(z3e," (Transformer-XL model)"),z3e.forEach(t),Tho=i(S),Qp=s(S,"LI",{});var W3e=n(Qp);mee=s(W3e,"STRONG",{});var zGr=n(mee);Fho=r(zGr,"unispeech"),zGr.forEach(t),Cho=r(W3e," \u2014 "),LP=s(W3e,"A",{href:!0});var WGr=n(LP);Mho=r(WGr,"UniSpeechForPreTraining"),WGr.forEach(t),Eho=r(W3e," (UniSpeech model)"),W3e.forEach(t),yho=i(S),Hp=s(S,"LI",{});var Q3e=n(Hp);fee=s(Q3e,"STRONG",{});var QGr=n(fee);who=r(QGr,"unispeech-sat"),QGr.forEach(t),Aho=r(Q3e," \u2014 "),BP=s(Q3e,"A",{href:!0});var HGr=n(BP);Lho=r(HGr,"UniSpeechSatForPreTraining"),HGr.forEach(t),Bho=r(Q3e," (UniSpeechSat model)"),Q3e.forEach(t),xho=i(S),Up=s(S,"LI",{});var H3e=n(Up);gee=s(H3e,"STRONG",{});var UGr=n(gee);kho=r(UGr,"visual_bert"),UGr.forEach(t),Rho=r(H3e," \u2014 "),xP=s(H3e,"A",{href:!0});var JGr=n(xP);Sho=r(JGr,"VisualBertForPreTraining"),JGr.forEach(t),Pho=r(H3e," (VisualBert model)"),H3e.forEach(t),$ho=i(S),Jp=s(S,"LI",{});var U3e=n(Jp);hee=s(U3e,"STRONG",{});var YGr=n(hee);Iho=r(YGr,"vit_mae"),YGr.forEach(t),jho=r(U3e," \u2014 "),kP=s(U3e,"A",{href:!0});var KGr=n(kP);Dho=r(KGr,"ViTMAEForPreTraining"),KGr.forEach(t),Nho=r(U3e," (ViTMAE model)"),U3e.forEach(t),qho=i(S),Yp=s(S,"LI",{});var J3e=n(Yp);uee=s(J3e,"STRONG",{});var ZGr=n(uee);Oho=r(ZGr,"wav2vec2"),ZGr.forEach(t),Gho=r(J3e," \u2014 "),RP=s(J3e,"A",{href:!0});var eXr=n(RP);Xho=r(eXr,"Wav2Vec2ForPreTraining"),eXr.forEach(t),Vho=r(J3e," (Wav2Vec2 model)"),J3e.forEach(t),zho=i(S),Kp=s(S,"LI",{});var Y3e=n(Kp);pee=s(Y3e,"STRONG",{});var oXr=n(pee);Who=r(oXr,"xlm"),oXr.forEach(t),Qho=r(Y3e," \u2014 "),SP=s(Y3e,"A",{href:!0});var rXr=n(SP);Hho=r(rXr,"XLMWithLMHeadModel"),rXr.forEach(t),Uho=r(Y3e," (XLM model)"),Y3e.forEach(t),Jho=i(S),Zp=s(S,"LI",{});var K3e=n(Zp);_ee=s(K3e,"STRONG",{});var tXr=n(_ee);Yho=r(tXr,"xlm-roberta"),tXr.forEach(t),Kho=r(K3e," \u2014 "),PP=s(K3e,"A",{href:!0});var aXr=n(PP);Zho=r(aXr,"XLMRobertaForMaskedLM"),aXr.forEach(t),euo=r(K3e," (XLM-RoBERTa model)"),K3e.forEach(t),ouo=i(S),e_=s(S,"LI",{});var Z3e=n(e_);bee=s(Z3e,"STRONG",{});var sXr=n(bee);ruo=r(sXr,"xlm-roberta-xl"),sXr.forEach(t),tuo=r(Z3e," \u2014 "),$P=s(Z3e,"A",{href:!0});var nXr=n($P);auo=r(nXr,"XLMRobertaXLForMaskedLM"),nXr.forEach(t),suo=r(Z3e," (XLM-RoBERTa-XL model)"),Z3e.forEach(t),nuo=i(S),o_=s(S,"LI",{});var e5e=n(o_);vee=s(e5e,"STRONG",{});var lXr=n(vee);luo=r(lXr,"xlnet"),lXr.forEach(t),iuo=r(e5e," \u2014 "),IP=s(e5e,"A",{href:!0});var iXr=n(IP);duo=r(iXr,"XLNetLMHeadModel"),iXr.forEach(t),cuo=r(e5e," (XLNet model)"),e5e.forEach(t),S.forEach(t),muo=i(Ot),r_=s(Ot,"P",{});var o5e=n(r_);fuo=r(o5e,"The model is set in evaluation mode by default using "),Tee=s(o5e,"CODE",{});var dXr=n(Tee);guo=r(dXr,"model.eval()"),dXr.forEach(t),huo=r(o5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=s(o5e,"CODE",{});var cXr=n(Fee);uuo=r(cXr,"model.train()"),cXr.forEach(t),o5e.forEach(t),puo=i(Ot),Cee=s(Ot,"P",{});var mXr=n(Cee);_uo=r(mXr,"Examples:"),mXr.forEach(t),buo=i(Ot),f(Dy.$$.fragment,Ot),Ot.forEach(t),Hn.forEach(t),uxe=i(d),rd=s(d,"H2",{class:!0});var ERe=n(rd);t_=s(ERe,"A",{id:!0,class:!0,href:!0});var fXr=n(t_);Mee=s(fXr,"SPAN",{});var gXr=n(Mee);f(Ny.$$.fragment,gXr),gXr.forEach(t),fXr.forEach(t),vuo=i(ERe),Eee=s(ERe,"SPAN",{});var hXr=n(Eee);Tuo=r(hXr,"AutoModelForCausalLM"),hXr.forEach(t),ERe.forEach(t),pxe=i(d),Ko=s(d,"DIV",{class:!0});var Jn=n(Ko);f(qy.$$.fragment,Jn),Fuo=i(Jn),td=s(Jn,"P",{});var yz=n(td);Cuo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yee=s(yz,"CODE",{});var uXr=n(yee);Muo=r(uXr,"from_pretrained()"),uXr.forEach(t),Euo=r(yz,"class method or the "),wee=s(yz,"CODE",{});var pXr=n(wee);yuo=r(pXr,"from_config()"),pXr.forEach(t),wuo=r(yz,`class
method.`),yz.forEach(t),Auo=i(Jn),Oy=s(Jn,"P",{});var yRe=n(Oy);Luo=r(yRe,"This class cannot be instantiated directly using "),Aee=s(yRe,"CODE",{});var _Xr=n(Aee);Buo=r(_Xr,"__init__()"),_Xr.forEach(t),xuo=r(yRe," (throws an error)."),yRe.forEach(t),kuo=i(Jn),Wr=s(Jn,"DIV",{class:!0});var Yn=n(Wr);f(Gy.$$.fragment,Yn),Ruo=i(Yn),Lee=s(Yn,"P",{});var bXr=n(Lee);Suo=r(bXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bXr.forEach(t),Puo=i(Yn),ad=s(Yn,"P",{});var wz=n(ad);$uo=r(wz,`Note:
Loading a model from its configuration file does `),Bee=s(wz,"STRONG",{});var vXr=n(Bee);Iuo=r(vXr,"not"),vXr.forEach(t),juo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=s(wz,"CODE",{});var TXr=n(xee);Duo=r(TXr,"from_pretrained()"),TXr.forEach(t),Nuo=r(wz,"to load the model weights."),wz.forEach(t),quo=i(Yn),kee=s(Yn,"P",{});var FXr=n(kee);Ouo=r(FXr,"Examples:"),FXr.forEach(t),Guo=i(Yn),f(Xy.$$.fragment,Yn),Yn.forEach(t),Xuo=i(Jn),Ne=s(Jn,"DIV",{class:!0});var Gt=n(Ne);f(Vy.$$.fragment,Gt),Vuo=i(Gt),Ree=s(Gt,"P",{});var CXr=n(Ree);zuo=r(CXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CXr.forEach(t),Wuo=i(Gt),za=s(Gt,"P",{});var J3=n(za);Quo=r(J3,"The model class to instantiate is selected based on the "),See=s(J3,"CODE",{});var MXr=n(See);Huo=r(MXr,"model_type"),MXr.forEach(t),Uuo=r(J3,` property of the config object (either
passed as an argument or loaded from `),Pee=s(J3,"CODE",{});var EXr=n(Pee);Juo=r(EXr,"pretrained_model_name_or_path"),EXr.forEach(t),Yuo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=s(J3,"CODE",{});var yXr=n($ee);Kuo=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),Zuo=r(J3,":"),J3.forEach(t),epo=i(Gt),$=s(Gt,"UL",{});var j=n($);a_=s(j,"LI",{});var r5e=n(a_);Iee=s(r5e,"STRONG",{});var wXr=n(Iee);opo=r(wXr,"bart"),wXr.forEach(t),rpo=r(r5e," \u2014 "),jP=s(r5e,"A",{href:!0});var AXr=n(jP);tpo=r(AXr,"BartForCausalLM"),AXr.forEach(t),apo=r(r5e," (BART model)"),r5e.forEach(t),spo=i(j),s_=s(j,"LI",{});var t5e=n(s_);jee=s(t5e,"STRONG",{});var LXr=n(jee);npo=r(LXr,"bert"),LXr.forEach(t),lpo=r(t5e," \u2014 "),DP=s(t5e,"A",{href:!0});var BXr=n(DP);ipo=r(BXr,"BertLMHeadModel"),BXr.forEach(t),dpo=r(t5e," (BERT model)"),t5e.forEach(t),cpo=i(j),n_=s(j,"LI",{});var a5e=n(n_);Dee=s(a5e,"STRONG",{});var xXr=n(Dee);mpo=r(xXr,"bert-generation"),xXr.forEach(t),fpo=r(a5e," \u2014 "),NP=s(a5e,"A",{href:!0});var kXr=n(NP);gpo=r(kXr,"BertGenerationDecoder"),kXr.forEach(t),hpo=r(a5e," (Bert Generation model)"),a5e.forEach(t),upo=i(j),l_=s(j,"LI",{});var s5e=n(l_);Nee=s(s5e,"STRONG",{});var RXr=n(Nee);ppo=r(RXr,"big_bird"),RXr.forEach(t),_po=r(s5e," \u2014 "),qP=s(s5e,"A",{href:!0});var SXr=n(qP);bpo=r(SXr,"BigBirdForCausalLM"),SXr.forEach(t),vpo=r(s5e," (BigBird model)"),s5e.forEach(t),Tpo=i(j),i_=s(j,"LI",{});var n5e=n(i_);qee=s(n5e,"STRONG",{});var PXr=n(qee);Fpo=r(PXr,"bigbird_pegasus"),PXr.forEach(t),Cpo=r(n5e," \u2014 "),OP=s(n5e,"A",{href:!0});var $Xr=n(OP);Mpo=r($Xr,"BigBirdPegasusForCausalLM"),$Xr.forEach(t),Epo=r(n5e," (BigBirdPegasus model)"),n5e.forEach(t),ypo=i(j),d_=s(j,"LI",{});var l5e=n(d_);Oee=s(l5e,"STRONG",{});var IXr=n(Oee);wpo=r(IXr,"blenderbot"),IXr.forEach(t),Apo=r(l5e," \u2014 "),GP=s(l5e,"A",{href:!0});var jXr=n(GP);Lpo=r(jXr,"BlenderbotForCausalLM"),jXr.forEach(t),Bpo=r(l5e," (Blenderbot model)"),l5e.forEach(t),xpo=i(j),c_=s(j,"LI",{});var i5e=n(c_);Gee=s(i5e,"STRONG",{});var DXr=n(Gee);kpo=r(DXr,"blenderbot-small"),DXr.forEach(t),Rpo=r(i5e," \u2014 "),XP=s(i5e,"A",{href:!0});var NXr=n(XP);Spo=r(NXr,"BlenderbotSmallForCausalLM"),NXr.forEach(t),Ppo=r(i5e," (BlenderbotSmall model)"),i5e.forEach(t),$po=i(j),m_=s(j,"LI",{});var d5e=n(m_);Xee=s(d5e,"STRONG",{});var qXr=n(Xee);Ipo=r(qXr,"camembert"),qXr.forEach(t),jpo=r(d5e," \u2014 "),VP=s(d5e,"A",{href:!0});var OXr=n(VP);Dpo=r(OXr,"CamembertForCausalLM"),OXr.forEach(t),Npo=r(d5e," (CamemBERT model)"),d5e.forEach(t),qpo=i(j),f_=s(j,"LI",{});var c5e=n(f_);Vee=s(c5e,"STRONG",{});var GXr=n(Vee);Opo=r(GXr,"ctrl"),GXr.forEach(t),Gpo=r(c5e," \u2014 "),zP=s(c5e,"A",{href:!0});var XXr=n(zP);Xpo=r(XXr,"CTRLLMHeadModel"),XXr.forEach(t),Vpo=r(c5e," (CTRL model)"),c5e.forEach(t),zpo=i(j),g_=s(j,"LI",{});var m5e=n(g_);zee=s(m5e,"STRONG",{});var VXr=n(zee);Wpo=r(VXr,"data2vec-text"),VXr.forEach(t),Qpo=r(m5e," \u2014 "),WP=s(m5e,"A",{href:!0});var zXr=n(WP);Hpo=r(zXr,"Data2VecTextForCausalLM"),zXr.forEach(t),Upo=r(m5e," (Data2VecText model)"),m5e.forEach(t),Jpo=i(j),h_=s(j,"LI",{});var f5e=n(h_);Wee=s(f5e,"STRONG",{});var WXr=n(Wee);Ypo=r(WXr,"electra"),WXr.forEach(t),Kpo=r(f5e," \u2014 "),QP=s(f5e,"A",{href:!0});var QXr=n(QP);Zpo=r(QXr,"ElectraForCausalLM"),QXr.forEach(t),e_o=r(f5e," (ELECTRA model)"),f5e.forEach(t),o_o=i(j),u_=s(j,"LI",{});var g5e=n(u_);Qee=s(g5e,"STRONG",{});var HXr=n(Qee);r_o=r(HXr,"gpt2"),HXr.forEach(t),t_o=r(g5e," \u2014 "),HP=s(g5e,"A",{href:!0});var UXr=n(HP);a_o=r(UXr,"GPT2LMHeadModel"),UXr.forEach(t),s_o=r(g5e," (OpenAI GPT-2 model)"),g5e.forEach(t),n_o=i(j),p_=s(j,"LI",{});var h5e=n(p_);Hee=s(h5e,"STRONG",{});var JXr=n(Hee);l_o=r(JXr,"gpt_neo"),JXr.forEach(t),i_o=r(h5e," \u2014 "),UP=s(h5e,"A",{href:!0});var YXr=n(UP);d_o=r(YXr,"GPTNeoForCausalLM"),YXr.forEach(t),c_o=r(h5e," (GPT Neo model)"),h5e.forEach(t),m_o=i(j),__=s(j,"LI",{});var u5e=n(__);Uee=s(u5e,"STRONG",{});var KXr=n(Uee);f_o=r(KXr,"gptj"),KXr.forEach(t),g_o=r(u5e," \u2014 "),JP=s(u5e,"A",{href:!0});var ZXr=n(JP);h_o=r(ZXr,"GPTJForCausalLM"),ZXr.forEach(t),u_o=r(u5e," (GPT-J model)"),u5e.forEach(t),p_o=i(j),b_=s(j,"LI",{});var p5e=n(b_);Jee=s(p5e,"STRONG",{});var eVr=n(Jee);__o=r(eVr,"marian"),eVr.forEach(t),b_o=r(p5e," \u2014 "),YP=s(p5e,"A",{href:!0});var oVr=n(YP);v_o=r(oVr,"MarianForCausalLM"),oVr.forEach(t),T_o=r(p5e," (Marian model)"),p5e.forEach(t),F_o=i(j),v_=s(j,"LI",{});var _5e=n(v_);Yee=s(_5e,"STRONG",{});var rVr=n(Yee);C_o=r(rVr,"mbart"),rVr.forEach(t),M_o=r(_5e," \u2014 "),KP=s(_5e,"A",{href:!0});var tVr=n(KP);E_o=r(tVr,"MBartForCausalLM"),tVr.forEach(t),y_o=r(_5e," (mBART model)"),_5e.forEach(t),w_o=i(j),T_=s(j,"LI",{});var b5e=n(T_);Kee=s(b5e,"STRONG",{});var aVr=n(Kee);A_o=r(aVr,"megatron-bert"),aVr.forEach(t),L_o=r(b5e," \u2014 "),ZP=s(b5e,"A",{href:!0});var sVr=n(ZP);B_o=r(sVr,"MegatronBertForCausalLM"),sVr.forEach(t),x_o=r(b5e," (MegatronBert model)"),b5e.forEach(t),k_o=i(j),F_=s(j,"LI",{});var v5e=n(F_);Zee=s(v5e,"STRONG",{});var nVr=n(Zee);R_o=r(nVr,"openai-gpt"),nVr.forEach(t),S_o=r(v5e," \u2014 "),e$=s(v5e,"A",{href:!0});var lVr=n(e$);P_o=r(lVr,"OpenAIGPTLMHeadModel"),lVr.forEach(t),$_o=r(v5e," (OpenAI GPT model)"),v5e.forEach(t),I_o=i(j),C_=s(j,"LI",{});var T5e=n(C_);eoe=s(T5e,"STRONG",{});var iVr=n(eoe);j_o=r(iVr,"pegasus"),iVr.forEach(t),D_o=r(T5e," \u2014 "),o$=s(T5e,"A",{href:!0});var dVr=n(o$);N_o=r(dVr,"PegasusForCausalLM"),dVr.forEach(t),q_o=r(T5e," (Pegasus model)"),T5e.forEach(t),O_o=i(j),M_=s(j,"LI",{});var F5e=n(M_);ooe=s(F5e,"STRONG",{});var cVr=n(ooe);G_o=r(cVr,"plbart"),cVr.forEach(t),X_o=r(F5e," \u2014 "),r$=s(F5e,"A",{href:!0});var mVr=n(r$);V_o=r(mVr,"PLBartForCausalLM"),mVr.forEach(t),z_o=r(F5e," (PLBart model)"),F5e.forEach(t),W_o=i(j),E_=s(j,"LI",{});var C5e=n(E_);roe=s(C5e,"STRONG",{});var fVr=n(roe);Q_o=r(fVr,"prophetnet"),fVr.forEach(t),H_o=r(C5e," \u2014 "),t$=s(C5e,"A",{href:!0});var gVr=n(t$);U_o=r(gVr,"ProphetNetForCausalLM"),gVr.forEach(t),J_o=r(C5e," (ProphetNet model)"),C5e.forEach(t),Y_o=i(j),y_=s(j,"LI",{});var M5e=n(y_);toe=s(M5e,"STRONG",{});var hVr=n(toe);K_o=r(hVr,"qdqbert"),hVr.forEach(t),Z_o=r(M5e," \u2014 "),a$=s(M5e,"A",{href:!0});var uVr=n(a$);ebo=r(uVr,"QDQBertLMHeadModel"),uVr.forEach(t),obo=r(M5e," (QDQBert model)"),M5e.forEach(t),rbo=i(j),w_=s(j,"LI",{});var E5e=n(w_);aoe=s(E5e,"STRONG",{});var pVr=n(aoe);tbo=r(pVr,"reformer"),pVr.forEach(t),abo=r(E5e," \u2014 "),s$=s(E5e,"A",{href:!0});var _Vr=n(s$);sbo=r(_Vr,"ReformerModelWithLMHead"),_Vr.forEach(t),nbo=r(E5e," (Reformer model)"),E5e.forEach(t),lbo=i(j),A_=s(j,"LI",{});var y5e=n(A_);soe=s(y5e,"STRONG",{});var bVr=n(soe);ibo=r(bVr,"rembert"),bVr.forEach(t),dbo=r(y5e," \u2014 "),n$=s(y5e,"A",{href:!0});var vVr=n(n$);cbo=r(vVr,"RemBertForCausalLM"),vVr.forEach(t),mbo=r(y5e," (RemBERT model)"),y5e.forEach(t),fbo=i(j),L_=s(j,"LI",{});var w5e=n(L_);noe=s(w5e,"STRONG",{});var TVr=n(noe);gbo=r(TVr,"roberta"),TVr.forEach(t),hbo=r(w5e," \u2014 "),l$=s(w5e,"A",{href:!0});var FVr=n(l$);ubo=r(FVr,"RobertaForCausalLM"),FVr.forEach(t),pbo=r(w5e," (RoBERTa model)"),w5e.forEach(t),_bo=i(j),B_=s(j,"LI",{});var A5e=n(B_);loe=s(A5e,"STRONG",{});var CVr=n(loe);bbo=r(CVr,"roformer"),CVr.forEach(t),vbo=r(A5e," \u2014 "),i$=s(A5e,"A",{href:!0});var MVr=n(i$);Tbo=r(MVr,"RoFormerForCausalLM"),MVr.forEach(t),Fbo=r(A5e," (RoFormer model)"),A5e.forEach(t),Cbo=i(j),x_=s(j,"LI",{});var L5e=n(x_);ioe=s(L5e,"STRONG",{});var EVr=n(ioe);Mbo=r(EVr,"speech_to_text_2"),EVr.forEach(t),Ebo=r(L5e," \u2014 "),d$=s(L5e,"A",{href:!0});var yVr=n(d$);ybo=r(yVr,"Speech2Text2ForCausalLM"),yVr.forEach(t),wbo=r(L5e," (Speech2Text2 model)"),L5e.forEach(t),Abo=i(j),k_=s(j,"LI",{});var B5e=n(k_);doe=s(B5e,"STRONG",{});var wVr=n(doe);Lbo=r(wVr,"transfo-xl"),wVr.forEach(t),Bbo=r(B5e," \u2014 "),c$=s(B5e,"A",{href:!0});var AVr=n(c$);xbo=r(AVr,"TransfoXLLMHeadModel"),AVr.forEach(t),kbo=r(B5e," (Transformer-XL model)"),B5e.forEach(t),Rbo=i(j),R_=s(j,"LI",{});var x5e=n(R_);coe=s(x5e,"STRONG",{});var LVr=n(coe);Sbo=r(LVr,"trocr"),LVr.forEach(t),Pbo=r(x5e," \u2014 "),m$=s(x5e,"A",{href:!0});var BVr=n(m$);$bo=r(BVr,"TrOCRForCausalLM"),BVr.forEach(t),Ibo=r(x5e," (TrOCR model)"),x5e.forEach(t),jbo=i(j),S_=s(j,"LI",{});var k5e=n(S_);moe=s(k5e,"STRONG",{});var xVr=n(moe);Dbo=r(xVr,"xglm"),xVr.forEach(t),Nbo=r(k5e," \u2014 "),f$=s(k5e,"A",{href:!0});var kVr=n(f$);qbo=r(kVr,"XGLMForCausalLM"),kVr.forEach(t),Obo=r(k5e," (XGLM model)"),k5e.forEach(t),Gbo=i(j),P_=s(j,"LI",{});var R5e=n(P_);foe=s(R5e,"STRONG",{});var RVr=n(foe);Xbo=r(RVr,"xlm"),RVr.forEach(t),Vbo=r(R5e," \u2014 "),g$=s(R5e,"A",{href:!0});var SVr=n(g$);zbo=r(SVr,"XLMWithLMHeadModel"),SVr.forEach(t),Wbo=r(R5e," (XLM model)"),R5e.forEach(t),Qbo=i(j),$_=s(j,"LI",{});var S5e=n($_);goe=s(S5e,"STRONG",{});var PVr=n(goe);Hbo=r(PVr,"xlm-prophetnet"),PVr.forEach(t),Ubo=r(S5e," \u2014 "),h$=s(S5e,"A",{href:!0});var $Vr=n(h$);Jbo=r($Vr,"XLMProphetNetForCausalLM"),$Vr.forEach(t),Ybo=r(S5e," (XLMProphetNet model)"),S5e.forEach(t),Kbo=i(j),I_=s(j,"LI",{});var P5e=n(I_);hoe=s(P5e,"STRONG",{});var IVr=n(hoe);Zbo=r(IVr,"xlm-roberta"),IVr.forEach(t),e2o=r(P5e," \u2014 "),u$=s(P5e,"A",{href:!0});var jVr=n(u$);o2o=r(jVr,"XLMRobertaForCausalLM"),jVr.forEach(t),r2o=r(P5e," (XLM-RoBERTa model)"),P5e.forEach(t),t2o=i(j),j_=s(j,"LI",{});var $5e=n(j_);uoe=s($5e,"STRONG",{});var DVr=n(uoe);a2o=r(DVr,"xlm-roberta-xl"),DVr.forEach(t),s2o=r($5e," \u2014 "),p$=s($5e,"A",{href:!0});var NVr=n(p$);n2o=r(NVr,"XLMRobertaXLForCausalLM"),NVr.forEach(t),l2o=r($5e," (XLM-RoBERTa-XL model)"),$5e.forEach(t),i2o=i(j),D_=s(j,"LI",{});var I5e=n(D_);poe=s(I5e,"STRONG",{});var qVr=n(poe);d2o=r(qVr,"xlnet"),qVr.forEach(t),c2o=r(I5e," \u2014 "),_$=s(I5e,"A",{href:!0});var OVr=n(_$);m2o=r(OVr,"XLNetLMHeadModel"),OVr.forEach(t),f2o=r(I5e," (XLNet model)"),I5e.forEach(t),j.forEach(t),g2o=i(Gt),N_=s(Gt,"P",{});var j5e=n(N_);h2o=r(j5e,"The model is set in evaluation mode by default using "),_oe=s(j5e,"CODE",{});var GVr=n(_oe);u2o=r(GVr,"model.eval()"),GVr.forEach(t),p2o=r(j5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),boe=s(j5e,"CODE",{});var XVr=n(boe);_2o=r(XVr,"model.train()"),XVr.forEach(t),j5e.forEach(t),b2o=i(Gt),voe=s(Gt,"P",{});var VVr=n(voe);v2o=r(VVr,"Examples:"),VVr.forEach(t),T2o=i(Gt),f(zy.$$.fragment,Gt),Gt.forEach(t),Jn.forEach(t),_xe=i(d),sd=s(d,"H2",{class:!0});var wRe=n(sd);q_=s(wRe,"A",{id:!0,class:!0,href:!0});var zVr=n(q_);Toe=s(zVr,"SPAN",{});var WVr=n(Toe);f(Wy.$$.fragment,WVr),WVr.forEach(t),zVr.forEach(t),F2o=i(wRe),Foe=s(wRe,"SPAN",{});var QVr=n(Foe);C2o=r(QVr,"AutoModelForMaskedLM"),QVr.forEach(t),wRe.forEach(t),bxe=i(d),Zo=s(d,"DIV",{class:!0});var Kn=n(Zo);f(Qy.$$.fragment,Kn),M2o=i(Kn),nd=s(Kn,"P",{});var Az=n(nd);E2o=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=s(Az,"CODE",{});var HVr=n(Coe);y2o=r(HVr,"from_pretrained()"),HVr.forEach(t),w2o=r(Az,"class method or the "),Moe=s(Az,"CODE",{});var UVr=n(Moe);A2o=r(UVr,"from_config()"),UVr.forEach(t),L2o=r(Az,`class
method.`),Az.forEach(t),B2o=i(Kn),Hy=s(Kn,"P",{});var ARe=n(Hy);x2o=r(ARe,"This class cannot be instantiated directly using "),Eoe=s(ARe,"CODE",{});var JVr=n(Eoe);k2o=r(JVr,"__init__()"),JVr.forEach(t),R2o=r(ARe," (throws an error)."),ARe.forEach(t),S2o=i(Kn),Qr=s(Kn,"DIV",{class:!0});var Zn=n(Qr);f(Uy.$$.fragment,Zn),P2o=i(Zn),yoe=s(Zn,"P",{});var YVr=n(yoe);$2o=r(YVr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YVr.forEach(t),I2o=i(Zn),ld=s(Zn,"P",{});var Lz=n(ld);j2o=r(Lz,`Note:
Loading a model from its configuration file does `),woe=s(Lz,"STRONG",{});var KVr=n(woe);D2o=r(KVr,"not"),KVr.forEach(t),N2o=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=s(Lz,"CODE",{});var ZVr=n(Aoe);q2o=r(ZVr,"from_pretrained()"),ZVr.forEach(t),O2o=r(Lz,"to load the model weights."),Lz.forEach(t),G2o=i(Zn),Loe=s(Zn,"P",{});var ezr=n(Loe);X2o=r(ezr,"Examples:"),ezr.forEach(t),V2o=i(Zn),f(Jy.$$.fragment,Zn),Zn.forEach(t),z2o=i(Kn),qe=s(Kn,"DIV",{class:!0});var Xt=n(qe);f(Yy.$$.fragment,Xt),W2o=i(Xt),Boe=s(Xt,"P",{});var ozr=n(Boe);Q2o=r(ozr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ozr.forEach(t),H2o=i(Xt),Wa=s(Xt,"P",{});var Y3=n(Wa);U2o=r(Y3,"The model class to instantiate is selected based on the "),xoe=s(Y3,"CODE",{});var rzr=n(xoe);J2o=r(rzr,"model_type"),rzr.forEach(t),Y2o=r(Y3,` property of the config object (either
passed as an argument or loaded from `),koe=s(Y3,"CODE",{});var tzr=n(koe);K2o=r(tzr,"pretrained_model_name_or_path"),tzr.forEach(t),Z2o=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Roe=s(Y3,"CODE",{});var azr=n(Roe);evo=r(azr,"pretrained_model_name_or_path"),azr.forEach(t),ovo=r(Y3,":"),Y3.forEach(t),rvo=i(Xt),I=s(Xt,"UL",{});var D=n(I);O_=s(D,"LI",{});var D5e=n(O_);Soe=s(D5e,"STRONG",{});var szr=n(Soe);tvo=r(szr,"albert"),szr.forEach(t),avo=r(D5e," \u2014 "),b$=s(D5e,"A",{href:!0});var nzr=n(b$);svo=r(nzr,"AlbertForMaskedLM"),nzr.forEach(t),nvo=r(D5e," (ALBERT model)"),D5e.forEach(t),lvo=i(D),G_=s(D,"LI",{});var N5e=n(G_);Poe=s(N5e,"STRONG",{});var lzr=n(Poe);ivo=r(lzr,"bart"),lzr.forEach(t),dvo=r(N5e," \u2014 "),v$=s(N5e,"A",{href:!0});var izr=n(v$);cvo=r(izr,"BartForConditionalGeneration"),izr.forEach(t),mvo=r(N5e," (BART model)"),N5e.forEach(t),fvo=i(D),X_=s(D,"LI",{});var q5e=n(X_);$oe=s(q5e,"STRONG",{});var dzr=n($oe);gvo=r(dzr,"bert"),dzr.forEach(t),hvo=r(q5e," \u2014 "),T$=s(q5e,"A",{href:!0});var czr=n(T$);uvo=r(czr,"BertForMaskedLM"),czr.forEach(t),pvo=r(q5e," (BERT model)"),q5e.forEach(t),_vo=i(D),V_=s(D,"LI",{});var O5e=n(V_);Ioe=s(O5e,"STRONG",{});var mzr=n(Ioe);bvo=r(mzr,"big_bird"),mzr.forEach(t),vvo=r(O5e," \u2014 "),F$=s(O5e,"A",{href:!0});var fzr=n(F$);Tvo=r(fzr,"BigBirdForMaskedLM"),fzr.forEach(t),Fvo=r(O5e," (BigBird model)"),O5e.forEach(t),Cvo=i(D),z_=s(D,"LI",{});var G5e=n(z_);joe=s(G5e,"STRONG",{});var gzr=n(joe);Mvo=r(gzr,"camembert"),gzr.forEach(t),Evo=r(G5e," \u2014 "),C$=s(G5e,"A",{href:!0});var hzr=n(C$);yvo=r(hzr,"CamembertForMaskedLM"),hzr.forEach(t),wvo=r(G5e," (CamemBERT model)"),G5e.forEach(t),Avo=i(D),W_=s(D,"LI",{});var X5e=n(W_);Doe=s(X5e,"STRONG",{});var uzr=n(Doe);Lvo=r(uzr,"convbert"),uzr.forEach(t),Bvo=r(X5e," \u2014 "),M$=s(X5e,"A",{href:!0});var pzr=n(M$);xvo=r(pzr,"ConvBertForMaskedLM"),pzr.forEach(t),kvo=r(X5e," (ConvBERT model)"),X5e.forEach(t),Rvo=i(D),Q_=s(D,"LI",{});var V5e=n(Q_);Noe=s(V5e,"STRONG",{});var _zr=n(Noe);Svo=r(_zr,"data2vec-text"),_zr.forEach(t),Pvo=r(V5e," \u2014 "),E$=s(V5e,"A",{href:!0});var bzr=n(E$);$vo=r(bzr,"Data2VecTextForMaskedLM"),bzr.forEach(t),Ivo=r(V5e," (Data2VecText model)"),V5e.forEach(t),jvo=i(D),H_=s(D,"LI",{});var z5e=n(H_);qoe=s(z5e,"STRONG",{});var vzr=n(qoe);Dvo=r(vzr,"deberta"),vzr.forEach(t),Nvo=r(z5e," \u2014 "),y$=s(z5e,"A",{href:!0});var Tzr=n(y$);qvo=r(Tzr,"DebertaForMaskedLM"),Tzr.forEach(t),Ovo=r(z5e," (DeBERTa model)"),z5e.forEach(t),Gvo=i(D),U_=s(D,"LI",{});var W5e=n(U_);Ooe=s(W5e,"STRONG",{});var Fzr=n(Ooe);Xvo=r(Fzr,"deberta-v2"),Fzr.forEach(t),Vvo=r(W5e," \u2014 "),w$=s(W5e,"A",{href:!0});var Czr=n(w$);zvo=r(Czr,"DebertaV2ForMaskedLM"),Czr.forEach(t),Wvo=r(W5e," (DeBERTa-v2 model)"),W5e.forEach(t),Qvo=i(D),J_=s(D,"LI",{});var Q5e=n(J_);Goe=s(Q5e,"STRONG",{});var Mzr=n(Goe);Hvo=r(Mzr,"distilbert"),Mzr.forEach(t),Uvo=r(Q5e," \u2014 "),A$=s(Q5e,"A",{href:!0});var Ezr=n(A$);Jvo=r(Ezr,"DistilBertForMaskedLM"),Ezr.forEach(t),Yvo=r(Q5e," (DistilBERT model)"),Q5e.forEach(t),Kvo=i(D),Y_=s(D,"LI",{});var H5e=n(Y_);Xoe=s(H5e,"STRONG",{});var yzr=n(Xoe);Zvo=r(yzr,"electra"),yzr.forEach(t),eTo=r(H5e," \u2014 "),L$=s(H5e,"A",{href:!0});var wzr=n(L$);oTo=r(wzr,"ElectraForMaskedLM"),wzr.forEach(t),rTo=r(H5e," (ELECTRA model)"),H5e.forEach(t),tTo=i(D),K_=s(D,"LI",{});var U5e=n(K_);Voe=s(U5e,"STRONG",{});var Azr=n(Voe);aTo=r(Azr,"flaubert"),Azr.forEach(t),sTo=r(U5e," \u2014 "),B$=s(U5e,"A",{href:!0});var Lzr=n(B$);nTo=r(Lzr,"FlaubertWithLMHeadModel"),Lzr.forEach(t),lTo=r(U5e," (FlauBERT model)"),U5e.forEach(t),iTo=i(D),Z_=s(D,"LI",{});var J5e=n(Z_);zoe=s(J5e,"STRONG",{});var Bzr=n(zoe);dTo=r(Bzr,"fnet"),Bzr.forEach(t),cTo=r(J5e," \u2014 "),x$=s(J5e,"A",{href:!0});var xzr=n(x$);mTo=r(xzr,"FNetForMaskedLM"),xzr.forEach(t),fTo=r(J5e," (FNet model)"),J5e.forEach(t),gTo=i(D),eb=s(D,"LI",{});var Y5e=n(eb);Woe=s(Y5e,"STRONG",{});var kzr=n(Woe);hTo=r(kzr,"funnel"),kzr.forEach(t),uTo=r(Y5e," \u2014 "),k$=s(Y5e,"A",{href:!0});var Rzr=n(k$);pTo=r(Rzr,"FunnelForMaskedLM"),Rzr.forEach(t),_To=r(Y5e," (Funnel Transformer model)"),Y5e.forEach(t),bTo=i(D),ob=s(D,"LI",{});var K5e=n(ob);Qoe=s(K5e,"STRONG",{});var Szr=n(Qoe);vTo=r(Szr,"ibert"),Szr.forEach(t),TTo=r(K5e," \u2014 "),R$=s(K5e,"A",{href:!0});var Pzr=n(R$);FTo=r(Pzr,"IBertForMaskedLM"),Pzr.forEach(t),CTo=r(K5e," (I-BERT model)"),K5e.forEach(t),MTo=i(D),rb=s(D,"LI",{});var Z5e=n(rb);Hoe=s(Z5e,"STRONG",{});var $zr=n(Hoe);ETo=r($zr,"layoutlm"),$zr.forEach(t),yTo=r(Z5e," \u2014 "),S$=s(Z5e,"A",{href:!0});var Izr=n(S$);wTo=r(Izr,"LayoutLMForMaskedLM"),Izr.forEach(t),ATo=r(Z5e," (LayoutLM model)"),Z5e.forEach(t),LTo=i(D),tb=s(D,"LI",{});var eye=n(tb);Uoe=s(eye,"STRONG",{});var jzr=n(Uoe);BTo=r(jzr,"longformer"),jzr.forEach(t),xTo=r(eye," \u2014 "),P$=s(eye,"A",{href:!0});var Dzr=n(P$);kTo=r(Dzr,"LongformerForMaskedLM"),Dzr.forEach(t),RTo=r(eye," (Longformer model)"),eye.forEach(t),STo=i(D),ab=s(D,"LI",{});var oye=n(ab);Joe=s(oye,"STRONG",{});var Nzr=n(Joe);PTo=r(Nzr,"mbart"),Nzr.forEach(t),$To=r(oye," \u2014 "),$$=s(oye,"A",{href:!0});var qzr=n($$);ITo=r(qzr,"MBartForConditionalGeneration"),qzr.forEach(t),jTo=r(oye," (mBART model)"),oye.forEach(t),DTo=i(D),sb=s(D,"LI",{});var rye=n(sb);Yoe=s(rye,"STRONG",{});var Ozr=n(Yoe);NTo=r(Ozr,"megatron-bert"),Ozr.forEach(t),qTo=r(rye," \u2014 "),I$=s(rye,"A",{href:!0});var Gzr=n(I$);OTo=r(Gzr,"MegatronBertForMaskedLM"),Gzr.forEach(t),GTo=r(rye," (MegatronBert model)"),rye.forEach(t),XTo=i(D),nb=s(D,"LI",{});var tye=n(nb);Koe=s(tye,"STRONG",{});var Xzr=n(Koe);VTo=r(Xzr,"mobilebert"),Xzr.forEach(t),zTo=r(tye," \u2014 "),j$=s(tye,"A",{href:!0});var Vzr=n(j$);WTo=r(Vzr,"MobileBertForMaskedLM"),Vzr.forEach(t),QTo=r(tye," (MobileBERT model)"),tye.forEach(t),HTo=i(D),lb=s(D,"LI",{});var aye=n(lb);Zoe=s(aye,"STRONG",{});var zzr=n(Zoe);UTo=r(zzr,"mpnet"),zzr.forEach(t),JTo=r(aye," \u2014 "),D$=s(aye,"A",{href:!0});var Wzr=n(D$);YTo=r(Wzr,"MPNetForMaskedLM"),Wzr.forEach(t),KTo=r(aye," (MPNet model)"),aye.forEach(t),ZTo=i(D),ib=s(D,"LI",{});var sye=n(ib);ere=s(sye,"STRONG",{});var Qzr=n(ere);e1o=r(Qzr,"nystromformer"),Qzr.forEach(t),o1o=r(sye," \u2014 "),N$=s(sye,"A",{href:!0});var Hzr=n(N$);r1o=r(Hzr,"NystromformerForMaskedLM"),Hzr.forEach(t),t1o=r(sye," (Nystromformer model)"),sye.forEach(t),a1o=i(D),db=s(D,"LI",{});var nye=n(db);ore=s(nye,"STRONG",{});var Uzr=n(ore);s1o=r(Uzr,"perceiver"),Uzr.forEach(t),n1o=r(nye," \u2014 "),q$=s(nye,"A",{href:!0});var Jzr=n(q$);l1o=r(Jzr,"PerceiverForMaskedLM"),Jzr.forEach(t),i1o=r(nye," (Perceiver model)"),nye.forEach(t),d1o=i(D),cb=s(D,"LI",{});var lye=n(cb);rre=s(lye,"STRONG",{});var Yzr=n(rre);c1o=r(Yzr,"qdqbert"),Yzr.forEach(t),m1o=r(lye," \u2014 "),O$=s(lye,"A",{href:!0});var Kzr=n(O$);f1o=r(Kzr,"QDQBertForMaskedLM"),Kzr.forEach(t),g1o=r(lye," (QDQBert model)"),lye.forEach(t),h1o=i(D),mb=s(D,"LI",{});var iye=n(mb);tre=s(iye,"STRONG",{});var Zzr=n(tre);u1o=r(Zzr,"reformer"),Zzr.forEach(t),p1o=r(iye," \u2014 "),G$=s(iye,"A",{href:!0});var eWr=n(G$);_1o=r(eWr,"ReformerForMaskedLM"),eWr.forEach(t),b1o=r(iye," (Reformer model)"),iye.forEach(t),v1o=i(D),fb=s(D,"LI",{});var dye=n(fb);are=s(dye,"STRONG",{});var oWr=n(are);T1o=r(oWr,"rembert"),oWr.forEach(t),F1o=r(dye," \u2014 "),X$=s(dye,"A",{href:!0});var rWr=n(X$);C1o=r(rWr,"RemBertForMaskedLM"),rWr.forEach(t),M1o=r(dye," (RemBERT model)"),dye.forEach(t),E1o=i(D),gb=s(D,"LI",{});var cye=n(gb);sre=s(cye,"STRONG",{});var tWr=n(sre);y1o=r(tWr,"roberta"),tWr.forEach(t),w1o=r(cye," \u2014 "),V$=s(cye,"A",{href:!0});var aWr=n(V$);A1o=r(aWr,"RobertaForMaskedLM"),aWr.forEach(t),L1o=r(cye," (RoBERTa model)"),cye.forEach(t),B1o=i(D),hb=s(D,"LI",{});var mye=n(hb);nre=s(mye,"STRONG",{});var sWr=n(nre);x1o=r(sWr,"roformer"),sWr.forEach(t),k1o=r(mye," \u2014 "),z$=s(mye,"A",{href:!0});var nWr=n(z$);R1o=r(nWr,"RoFormerForMaskedLM"),nWr.forEach(t),S1o=r(mye," (RoFormer model)"),mye.forEach(t),P1o=i(D),ub=s(D,"LI",{});var fye=n(ub);lre=s(fye,"STRONG",{});var lWr=n(lre);$1o=r(lWr,"squeezebert"),lWr.forEach(t),I1o=r(fye," \u2014 "),W$=s(fye,"A",{href:!0});var iWr=n(W$);j1o=r(iWr,"SqueezeBertForMaskedLM"),iWr.forEach(t),D1o=r(fye," (SqueezeBERT model)"),fye.forEach(t),N1o=i(D),pb=s(D,"LI",{});var gye=n(pb);ire=s(gye,"STRONG",{});var dWr=n(ire);q1o=r(dWr,"tapas"),dWr.forEach(t),O1o=r(gye," \u2014 "),Q$=s(gye,"A",{href:!0});var cWr=n(Q$);G1o=r(cWr,"TapasForMaskedLM"),cWr.forEach(t),X1o=r(gye," (TAPAS model)"),gye.forEach(t),V1o=i(D),_b=s(D,"LI",{});var hye=n(_b);dre=s(hye,"STRONG",{});var mWr=n(dre);z1o=r(mWr,"wav2vec2"),mWr.forEach(t),W1o=r(hye," \u2014 "),cre=s(hye,"CODE",{});var fWr=n(cre);Q1o=r(fWr,"Wav2Vec2ForMaskedLM"),fWr.forEach(t),H1o=r(hye,"(Wav2Vec2 model)"),hye.forEach(t),U1o=i(D),bb=s(D,"LI",{});var uye=n(bb);mre=s(uye,"STRONG",{});var gWr=n(mre);J1o=r(gWr,"xlm"),gWr.forEach(t),Y1o=r(uye," \u2014 "),H$=s(uye,"A",{href:!0});var hWr=n(H$);K1o=r(hWr,"XLMWithLMHeadModel"),hWr.forEach(t),Z1o=r(uye," (XLM model)"),uye.forEach(t),eFo=i(D),vb=s(D,"LI",{});var pye=n(vb);fre=s(pye,"STRONG",{});var uWr=n(fre);oFo=r(uWr,"xlm-roberta"),uWr.forEach(t),rFo=r(pye," \u2014 "),U$=s(pye,"A",{href:!0});var pWr=n(U$);tFo=r(pWr,"XLMRobertaForMaskedLM"),pWr.forEach(t),aFo=r(pye," (XLM-RoBERTa model)"),pye.forEach(t),sFo=i(D),Tb=s(D,"LI",{});var _ye=n(Tb);gre=s(_ye,"STRONG",{});var _Wr=n(gre);nFo=r(_Wr,"xlm-roberta-xl"),_Wr.forEach(t),lFo=r(_ye," \u2014 "),J$=s(_ye,"A",{href:!0});var bWr=n(J$);iFo=r(bWr,"XLMRobertaXLForMaskedLM"),bWr.forEach(t),dFo=r(_ye," (XLM-RoBERTa-XL model)"),_ye.forEach(t),cFo=i(D),Fb=s(D,"LI",{});var bye=n(Fb);hre=s(bye,"STRONG",{});var vWr=n(hre);mFo=r(vWr,"yoso"),vWr.forEach(t),fFo=r(bye," \u2014 "),Y$=s(bye,"A",{href:!0});var TWr=n(Y$);gFo=r(TWr,"YosoForMaskedLM"),TWr.forEach(t),hFo=r(bye," (YOSO model)"),bye.forEach(t),D.forEach(t),uFo=i(Xt),Cb=s(Xt,"P",{});var vye=n(Cb);pFo=r(vye,"The model is set in evaluation mode by default using "),ure=s(vye,"CODE",{});var FWr=n(ure);_Fo=r(FWr,"model.eval()"),FWr.forEach(t),bFo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pre=s(vye,"CODE",{});var CWr=n(pre);vFo=r(CWr,"model.train()"),CWr.forEach(t),vye.forEach(t),TFo=i(Xt),_re=s(Xt,"P",{});var MWr=n(_re);FFo=r(MWr,"Examples:"),MWr.forEach(t),CFo=i(Xt),f(Ky.$$.fragment,Xt),Xt.forEach(t),Kn.forEach(t),vxe=i(d),id=s(d,"H2",{class:!0});var LRe=n(id);Mb=s(LRe,"A",{id:!0,class:!0,href:!0});var EWr=n(Mb);bre=s(EWr,"SPAN",{});var yWr=n(bre);f(Zy.$$.fragment,yWr),yWr.forEach(t),EWr.forEach(t),MFo=i(LRe),vre=s(LRe,"SPAN",{});var wWr=n(vre);EFo=r(wWr,"AutoModelForSeq2SeqLM"),wWr.forEach(t),LRe.forEach(t),Txe=i(d),er=s(d,"DIV",{class:!0});var el=n(er);f(ew.$$.fragment,el),yFo=i(el),dd=s(el,"P",{});var Bz=n(dd);wFo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tre=s(Bz,"CODE",{});var AWr=n(Tre);AFo=r(AWr,"from_pretrained()"),AWr.forEach(t),LFo=r(Bz,"class method or the "),Fre=s(Bz,"CODE",{});var LWr=n(Fre);BFo=r(LWr,"from_config()"),LWr.forEach(t),xFo=r(Bz,`class
method.`),Bz.forEach(t),kFo=i(el),ow=s(el,"P",{});var BRe=n(ow);RFo=r(BRe,"This class cannot be instantiated directly using "),Cre=s(BRe,"CODE",{});var BWr=n(Cre);SFo=r(BWr,"__init__()"),BWr.forEach(t),PFo=r(BRe," (throws an error)."),BRe.forEach(t),$Fo=i(el),Hr=s(el,"DIV",{class:!0});var ol=n(Hr);f(rw.$$.fragment,ol),IFo=i(ol),Mre=s(ol,"P",{});var xWr=n(Mre);jFo=r(xWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xWr.forEach(t),DFo=i(ol),cd=s(ol,"P",{});var xz=n(cd);NFo=r(xz,`Note:
Loading a model from its configuration file does `),Ere=s(xz,"STRONG",{});var kWr=n(Ere);qFo=r(kWr,"not"),kWr.forEach(t),OFo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=s(xz,"CODE",{});var RWr=n(yre);GFo=r(RWr,"from_pretrained()"),RWr.forEach(t),XFo=r(xz,"to load the model weights."),xz.forEach(t),VFo=i(ol),wre=s(ol,"P",{});var SWr=n(wre);zFo=r(SWr,"Examples:"),SWr.forEach(t),WFo=i(ol),f(tw.$$.fragment,ol),ol.forEach(t),QFo=i(el),Oe=s(el,"DIV",{class:!0});var Vt=n(Oe);f(aw.$$.fragment,Vt),HFo=i(Vt),Are=s(Vt,"P",{});var PWr=n(Are);UFo=r(PWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PWr.forEach(t),JFo=i(Vt),Qa=s(Vt,"P",{});var K3=n(Qa);YFo=r(K3,"The model class to instantiate is selected based on the "),Lre=s(K3,"CODE",{});var $Wr=n(Lre);KFo=r($Wr,"model_type"),$Wr.forEach(t),ZFo=r(K3,` property of the config object (either
passed as an argument or loaded from `),Bre=s(K3,"CODE",{});var IWr=n(Bre);eCo=r(IWr,"pretrained_model_name_or_path"),IWr.forEach(t),oCo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xre=s(K3,"CODE",{});var jWr=n(xre);rCo=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),tCo=r(K3,":"),K3.forEach(t),aCo=i(Vt),se=s(Vt,"UL",{});var ie=n(se);Eb=s(ie,"LI",{});var Tye=n(Eb);kre=s(Tye,"STRONG",{});var DWr=n(kre);sCo=r(DWr,"bart"),DWr.forEach(t),nCo=r(Tye," \u2014 "),K$=s(Tye,"A",{href:!0});var NWr=n(K$);lCo=r(NWr,"BartForConditionalGeneration"),NWr.forEach(t),iCo=r(Tye," (BART model)"),Tye.forEach(t),dCo=i(ie),yb=s(ie,"LI",{});var Fye=n(yb);Rre=s(Fye,"STRONG",{});var qWr=n(Rre);cCo=r(qWr,"bigbird_pegasus"),qWr.forEach(t),mCo=r(Fye," \u2014 "),Z$=s(Fye,"A",{href:!0});var OWr=n(Z$);fCo=r(OWr,"BigBirdPegasusForConditionalGeneration"),OWr.forEach(t),gCo=r(Fye," (BigBirdPegasus model)"),Fye.forEach(t),hCo=i(ie),wb=s(ie,"LI",{});var Cye=n(wb);Sre=s(Cye,"STRONG",{});var GWr=n(Sre);uCo=r(GWr,"blenderbot"),GWr.forEach(t),pCo=r(Cye," \u2014 "),eI=s(Cye,"A",{href:!0});var XWr=n(eI);_Co=r(XWr,"BlenderbotForConditionalGeneration"),XWr.forEach(t),bCo=r(Cye," (Blenderbot model)"),Cye.forEach(t),vCo=i(ie),Ab=s(ie,"LI",{});var Mye=n(Ab);Pre=s(Mye,"STRONG",{});var VWr=n(Pre);TCo=r(VWr,"blenderbot-small"),VWr.forEach(t),FCo=r(Mye," \u2014 "),oI=s(Mye,"A",{href:!0});var zWr=n(oI);CCo=r(zWr,"BlenderbotSmallForConditionalGeneration"),zWr.forEach(t),MCo=r(Mye," (BlenderbotSmall model)"),Mye.forEach(t),ECo=i(ie),Lb=s(ie,"LI",{});var Eye=n(Lb);$re=s(Eye,"STRONG",{});var WWr=n($re);yCo=r(WWr,"encoder-decoder"),WWr.forEach(t),wCo=r(Eye," \u2014 "),rI=s(Eye,"A",{href:!0});var QWr=n(rI);ACo=r(QWr,"EncoderDecoderModel"),QWr.forEach(t),LCo=r(Eye," (Encoder decoder model)"),Eye.forEach(t),BCo=i(ie),Bb=s(ie,"LI",{});var yye=n(Bb);Ire=s(yye,"STRONG",{});var HWr=n(Ire);xCo=r(HWr,"fsmt"),HWr.forEach(t),kCo=r(yye," \u2014 "),tI=s(yye,"A",{href:!0});var UWr=n(tI);RCo=r(UWr,"FSMTForConditionalGeneration"),UWr.forEach(t),SCo=r(yye," (FairSeq Machine-Translation model)"),yye.forEach(t),PCo=i(ie),xb=s(ie,"LI",{});var wye=n(xb);jre=s(wye,"STRONG",{});var JWr=n(jre);$Co=r(JWr,"led"),JWr.forEach(t),ICo=r(wye," \u2014 "),aI=s(wye,"A",{href:!0});var YWr=n(aI);jCo=r(YWr,"LEDForConditionalGeneration"),YWr.forEach(t),DCo=r(wye," (LED model)"),wye.forEach(t),NCo=i(ie),kb=s(ie,"LI",{});var Aye=n(kb);Dre=s(Aye,"STRONG",{});var KWr=n(Dre);qCo=r(KWr,"m2m_100"),KWr.forEach(t),OCo=r(Aye," \u2014 "),sI=s(Aye,"A",{href:!0});var ZWr=n(sI);GCo=r(ZWr,"M2M100ForConditionalGeneration"),ZWr.forEach(t),XCo=r(Aye," (M2M100 model)"),Aye.forEach(t),VCo=i(ie),Rb=s(ie,"LI",{});var Lye=n(Rb);Nre=s(Lye,"STRONG",{});var eQr=n(Nre);zCo=r(eQr,"marian"),eQr.forEach(t),WCo=r(Lye," \u2014 "),nI=s(Lye,"A",{href:!0});var oQr=n(nI);QCo=r(oQr,"MarianMTModel"),oQr.forEach(t),HCo=r(Lye," (Marian model)"),Lye.forEach(t),UCo=i(ie),Sb=s(ie,"LI",{});var Bye=n(Sb);qre=s(Bye,"STRONG",{});var rQr=n(qre);JCo=r(rQr,"mbart"),rQr.forEach(t),YCo=r(Bye," \u2014 "),lI=s(Bye,"A",{href:!0});var tQr=n(lI);KCo=r(tQr,"MBartForConditionalGeneration"),tQr.forEach(t),ZCo=r(Bye," (mBART model)"),Bye.forEach(t),eMo=i(ie),Pb=s(ie,"LI",{});var xye=n(Pb);Ore=s(xye,"STRONG",{});var aQr=n(Ore);oMo=r(aQr,"mt5"),aQr.forEach(t),rMo=r(xye," \u2014 "),iI=s(xye,"A",{href:!0});var sQr=n(iI);tMo=r(sQr,"MT5ForConditionalGeneration"),sQr.forEach(t),aMo=r(xye," (mT5 model)"),xye.forEach(t),sMo=i(ie),$b=s(ie,"LI",{});var kye=n($b);Gre=s(kye,"STRONG",{});var nQr=n(Gre);nMo=r(nQr,"pegasus"),nQr.forEach(t),lMo=r(kye," \u2014 "),dI=s(kye,"A",{href:!0});var lQr=n(dI);iMo=r(lQr,"PegasusForConditionalGeneration"),lQr.forEach(t),dMo=r(kye," (Pegasus model)"),kye.forEach(t),cMo=i(ie),Ib=s(ie,"LI",{});var Rye=n(Ib);Xre=s(Rye,"STRONG",{});var iQr=n(Xre);mMo=r(iQr,"plbart"),iQr.forEach(t),fMo=r(Rye," \u2014 "),cI=s(Rye,"A",{href:!0});var dQr=n(cI);gMo=r(dQr,"PLBartForConditionalGeneration"),dQr.forEach(t),hMo=r(Rye," (PLBart model)"),Rye.forEach(t),uMo=i(ie),jb=s(ie,"LI",{});var Sye=n(jb);Vre=s(Sye,"STRONG",{});var cQr=n(Vre);pMo=r(cQr,"prophetnet"),cQr.forEach(t),_Mo=r(Sye," \u2014 "),mI=s(Sye,"A",{href:!0});var mQr=n(mI);bMo=r(mQr,"ProphetNetForConditionalGeneration"),mQr.forEach(t),vMo=r(Sye," (ProphetNet model)"),Sye.forEach(t),TMo=i(ie),Db=s(ie,"LI",{});var Pye=n(Db);zre=s(Pye,"STRONG",{});var fQr=n(zre);FMo=r(fQr,"t5"),fQr.forEach(t),CMo=r(Pye," \u2014 "),fI=s(Pye,"A",{href:!0});var gQr=n(fI);MMo=r(gQr,"T5ForConditionalGeneration"),gQr.forEach(t),EMo=r(Pye," (T5 model)"),Pye.forEach(t),yMo=i(ie),Nb=s(ie,"LI",{});var $ye=n(Nb);Wre=s($ye,"STRONG",{});var hQr=n(Wre);wMo=r(hQr,"xlm-prophetnet"),hQr.forEach(t),AMo=r($ye," \u2014 "),gI=s($ye,"A",{href:!0});var uQr=n(gI);LMo=r(uQr,"XLMProphetNetForConditionalGeneration"),uQr.forEach(t),BMo=r($ye," (XLMProphetNet model)"),$ye.forEach(t),ie.forEach(t),xMo=i(Vt),qb=s(Vt,"P",{});var Iye=n(qb);kMo=r(Iye,"The model is set in evaluation mode by default using "),Qre=s(Iye,"CODE",{});var pQr=n(Qre);RMo=r(pQr,"model.eval()"),pQr.forEach(t),SMo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=s(Iye,"CODE",{});var _Qr=n(Hre);PMo=r(_Qr,"model.train()"),_Qr.forEach(t),Iye.forEach(t),$Mo=i(Vt),Ure=s(Vt,"P",{});var bQr=n(Ure);IMo=r(bQr,"Examples:"),bQr.forEach(t),jMo=i(Vt),f(sw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Fxe=i(d),md=s(d,"H2",{class:!0});var xRe=n(md);Ob=s(xRe,"A",{id:!0,class:!0,href:!0});var vQr=n(Ob);Jre=s(vQr,"SPAN",{});var TQr=n(Jre);f(nw.$$.fragment,TQr),TQr.forEach(t),vQr.forEach(t),DMo=i(xRe),Yre=s(xRe,"SPAN",{});var FQr=n(Yre);NMo=r(FQr,"AutoModelForSequenceClassification"),FQr.forEach(t),xRe.forEach(t),Cxe=i(d),or=s(d,"DIV",{class:!0});var rl=n(or);f(lw.$$.fragment,rl),qMo=i(rl),fd=s(rl,"P",{});var kz=n(fd);OMo=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kre=s(kz,"CODE",{});var CQr=n(Kre);GMo=r(CQr,"from_pretrained()"),CQr.forEach(t),XMo=r(kz,"class method or the "),Zre=s(kz,"CODE",{});var MQr=n(Zre);VMo=r(MQr,"from_config()"),MQr.forEach(t),zMo=r(kz,`class
method.`),kz.forEach(t),WMo=i(rl),iw=s(rl,"P",{});var kRe=n(iw);QMo=r(kRe,"This class cannot be instantiated directly using "),ete=s(kRe,"CODE",{});var EQr=n(ete);HMo=r(EQr,"__init__()"),EQr.forEach(t),UMo=r(kRe," (throws an error)."),kRe.forEach(t),JMo=i(rl),Ur=s(rl,"DIV",{class:!0});var tl=n(Ur);f(dw.$$.fragment,tl),YMo=i(tl),ote=s(tl,"P",{});var yQr=n(ote);KMo=r(yQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yQr.forEach(t),ZMo=i(tl),gd=s(tl,"P",{});var Rz=n(gd);e4o=r(Rz,`Note:
Loading a model from its configuration file does `),rte=s(Rz,"STRONG",{});var wQr=n(rte);o4o=r(wQr,"not"),wQr.forEach(t),r4o=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=s(Rz,"CODE",{});var AQr=n(tte);t4o=r(AQr,"from_pretrained()"),AQr.forEach(t),a4o=r(Rz,"to load the model weights."),Rz.forEach(t),s4o=i(tl),ate=s(tl,"P",{});var LQr=n(ate);n4o=r(LQr,"Examples:"),LQr.forEach(t),l4o=i(tl),f(cw.$$.fragment,tl),tl.forEach(t),i4o=i(rl),Ge=s(rl,"DIV",{class:!0});var zt=n(Ge);f(mw.$$.fragment,zt),d4o=i(zt),ste=s(zt,"P",{});var BQr=n(ste);c4o=r(BQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BQr.forEach(t),m4o=i(zt),Ha=s(zt,"P",{});var Z3=n(Ha);f4o=r(Z3,"The model class to instantiate is selected based on the "),nte=s(Z3,"CODE",{});var xQr=n(nte);g4o=r(xQr,"model_type"),xQr.forEach(t),h4o=r(Z3,` property of the config object (either
passed as an argument or loaded from `),lte=s(Z3,"CODE",{});var kQr=n(lte);u4o=r(kQr,"pretrained_model_name_or_path"),kQr.forEach(t),p4o=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=s(Z3,"CODE",{});var RQr=n(ite);_4o=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),b4o=r(Z3,":"),Z3.forEach(t),v4o=i(zt),A=s(zt,"UL",{});var L=n(A);Gb=s(L,"LI",{});var jye=n(Gb);dte=s(jye,"STRONG",{});var SQr=n(dte);T4o=r(SQr,"albert"),SQr.forEach(t),F4o=r(jye," \u2014 "),hI=s(jye,"A",{href:!0});var PQr=n(hI);C4o=r(PQr,"AlbertForSequenceClassification"),PQr.forEach(t),M4o=r(jye," (ALBERT model)"),jye.forEach(t),E4o=i(L),Xb=s(L,"LI",{});var Dye=n(Xb);cte=s(Dye,"STRONG",{});var $Qr=n(cte);y4o=r($Qr,"bart"),$Qr.forEach(t),w4o=r(Dye," \u2014 "),uI=s(Dye,"A",{href:!0});var IQr=n(uI);A4o=r(IQr,"BartForSequenceClassification"),IQr.forEach(t),L4o=r(Dye," (BART model)"),Dye.forEach(t),B4o=i(L),Vb=s(L,"LI",{});var Nye=n(Vb);mte=s(Nye,"STRONG",{});var jQr=n(mte);x4o=r(jQr,"bert"),jQr.forEach(t),k4o=r(Nye," \u2014 "),pI=s(Nye,"A",{href:!0});var DQr=n(pI);R4o=r(DQr,"BertForSequenceClassification"),DQr.forEach(t),S4o=r(Nye," (BERT model)"),Nye.forEach(t),P4o=i(L),zb=s(L,"LI",{});var qye=n(zb);fte=s(qye,"STRONG",{});var NQr=n(fte);$4o=r(NQr,"big_bird"),NQr.forEach(t),I4o=r(qye," \u2014 "),_I=s(qye,"A",{href:!0});var qQr=n(_I);j4o=r(qQr,"BigBirdForSequenceClassification"),qQr.forEach(t),D4o=r(qye," (BigBird model)"),qye.forEach(t),N4o=i(L),Wb=s(L,"LI",{});var Oye=n(Wb);gte=s(Oye,"STRONG",{});var OQr=n(gte);q4o=r(OQr,"bigbird_pegasus"),OQr.forEach(t),O4o=r(Oye," \u2014 "),bI=s(Oye,"A",{href:!0});var GQr=n(bI);G4o=r(GQr,"BigBirdPegasusForSequenceClassification"),GQr.forEach(t),X4o=r(Oye," (BigBirdPegasus model)"),Oye.forEach(t),V4o=i(L),Qb=s(L,"LI",{});var Gye=n(Qb);hte=s(Gye,"STRONG",{});var XQr=n(hte);z4o=r(XQr,"camembert"),XQr.forEach(t),W4o=r(Gye," \u2014 "),vI=s(Gye,"A",{href:!0});var VQr=n(vI);Q4o=r(VQr,"CamembertForSequenceClassification"),VQr.forEach(t),H4o=r(Gye," (CamemBERT model)"),Gye.forEach(t),U4o=i(L),Hb=s(L,"LI",{});var Xye=n(Hb);ute=s(Xye,"STRONG",{});var zQr=n(ute);J4o=r(zQr,"canine"),zQr.forEach(t),Y4o=r(Xye," \u2014 "),TI=s(Xye,"A",{href:!0});var WQr=n(TI);K4o=r(WQr,"CanineForSequenceClassification"),WQr.forEach(t),Z4o=r(Xye," (Canine model)"),Xye.forEach(t),eEo=i(L),Ub=s(L,"LI",{});var Vye=n(Ub);pte=s(Vye,"STRONG",{});var QQr=n(pte);oEo=r(QQr,"convbert"),QQr.forEach(t),rEo=r(Vye," \u2014 "),FI=s(Vye,"A",{href:!0});var HQr=n(FI);tEo=r(HQr,"ConvBertForSequenceClassification"),HQr.forEach(t),aEo=r(Vye," (ConvBERT model)"),Vye.forEach(t),sEo=i(L),Jb=s(L,"LI",{});var zye=n(Jb);_te=s(zye,"STRONG",{});var UQr=n(_te);nEo=r(UQr,"ctrl"),UQr.forEach(t),lEo=r(zye," \u2014 "),CI=s(zye,"A",{href:!0});var JQr=n(CI);iEo=r(JQr,"CTRLForSequenceClassification"),JQr.forEach(t),dEo=r(zye," (CTRL model)"),zye.forEach(t),cEo=i(L),Yb=s(L,"LI",{});var Wye=n(Yb);bte=s(Wye,"STRONG",{});var YQr=n(bte);mEo=r(YQr,"data2vec-text"),YQr.forEach(t),fEo=r(Wye," \u2014 "),MI=s(Wye,"A",{href:!0});var KQr=n(MI);gEo=r(KQr,"Data2VecTextForSequenceClassification"),KQr.forEach(t),hEo=r(Wye," (Data2VecText model)"),Wye.forEach(t),uEo=i(L),Kb=s(L,"LI",{});var Qye=n(Kb);vte=s(Qye,"STRONG",{});var ZQr=n(vte);pEo=r(ZQr,"deberta"),ZQr.forEach(t),_Eo=r(Qye," \u2014 "),EI=s(Qye,"A",{href:!0});var eHr=n(EI);bEo=r(eHr,"DebertaForSequenceClassification"),eHr.forEach(t),vEo=r(Qye," (DeBERTa model)"),Qye.forEach(t),TEo=i(L),Zb=s(L,"LI",{});var Hye=n(Zb);Tte=s(Hye,"STRONG",{});var oHr=n(Tte);FEo=r(oHr,"deberta-v2"),oHr.forEach(t),CEo=r(Hye," \u2014 "),yI=s(Hye,"A",{href:!0});var rHr=n(yI);MEo=r(rHr,"DebertaV2ForSequenceClassification"),rHr.forEach(t),EEo=r(Hye," (DeBERTa-v2 model)"),Hye.forEach(t),yEo=i(L),e2=s(L,"LI",{});var Uye=n(e2);Fte=s(Uye,"STRONG",{});var tHr=n(Fte);wEo=r(tHr,"distilbert"),tHr.forEach(t),AEo=r(Uye," \u2014 "),wI=s(Uye,"A",{href:!0});var aHr=n(wI);LEo=r(aHr,"DistilBertForSequenceClassification"),aHr.forEach(t),BEo=r(Uye," (DistilBERT model)"),Uye.forEach(t),xEo=i(L),o2=s(L,"LI",{});var Jye=n(o2);Cte=s(Jye,"STRONG",{});var sHr=n(Cte);kEo=r(sHr,"electra"),sHr.forEach(t),REo=r(Jye," \u2014 "),AI=s(Jye,"A",{href:!0});var nHr=n(AI);SEo=r(nHr,"ElectraForSequenceClassification"),nHr.forEach(t),PEo=r(Jye," (ELECTRA model)"),Jye.forEach(t),$Eo=i(L),r2=s(L,"LI",{});var Yye=n(r2);Mte=s(Yye,"STRONG",{});var lHr=n(Mte);IEo=r(lHr,"flaubert"),lHr.forEach(t),jEo=r(Yye," \u2014 "),LI=s(Yye,"A",{href:!0});var iHr=n(LI);DEo=r(iHr,"FlaubertForSequenceClassification"),iHr.forEach(t),NEo=r(Yye," (FlauBERT model)"),Yye.forEach(t),qEo=i(L),t2=s(L,"LI",{});var Kye=n(t2);Ete=s(Kye,"STRONG",{});var dHr=n(Ete);OEo=r(dHr,"fnet"),dHr.forEach(t),GEo=r(Kye," \u2014 "),BI=s(Kye,"A",{href:!0});var cHr=n(BI);XEo=r(cHr,"FNetForSequenceClassification"),cHr.forEach(t),VEo=r(Kye," (FNet model)"),Kye.forEach(t),zEo=i(L),a2=s(L,"LI",{});var Zye=n(a2);yte=s(Zye,"STRONG",{});var mHr=n(yte);WEo=r(mHr,"funnel"),mHr.forEach(t),QEo=r(Zye," \u2014 "),xI=s(Zye,"A",{href:!0});var fHr=n(xI);HEo=r(fHr,"FunnelForSequenceClassification"),fHr.forEach(t),UEo=r(Zye," (Funnel Transformer model)"),Zye.forEach(t),JEo=i(L),s2=s(L,"LI",{});var ewe=n(s2);wte=s(ewe,"STRONG",{});var gHr=n(wte);YEo=r(gHr,"gpt2"),gHr.forEach(t),KEo=r(ewe," \u2014 "),kI=s(ewe,"A",{href:!0});var hHr=n(kI);ZEo=r(hHr,"GPT2ForSequenceClassification"),hHr.forEach(t),e3o=r(ewe," (OpenAI GPT-2 model)"),ewe.forEach(t),o3o=i(L),n2=s(L,"LI",{});var owe=n(n2);Ate=s(owe,"STRONG",{});var uHr=n(Ate);r3o=r(uHr,"gpt_neo"),uHr.forEach(t),t3o=r(owe," \u2014 "),RI=s(owe,"A",{href:!0});var pHr=n(RI);a3o=r(pHr,"GPTNeoForSequenceClassification"),pHr.forEach(t),s3o=r(owe," (GPT Neo model)"),owe.forEach(t),n3o=i(L),l2=s(L,"LI",{});var rwe=n(l2);Lte=s(rwe,"STRONG",{});var _Hr=n(Lte);l3o=r(_Hr,"gptj"),_Hr.forEach(t),i3o=r(rwe," \u2014 "),SI=s(rwe,"A",{href:!0});var bHr=n(SI);d3o=r(bHr,"GPTJForSequenceClassification"),bHr.forEach(t),c3o=r(rwe," (GPT-J model)"),rwe.forEach(t),m3o=i(L),i2=s(L,"LI",{});var twe=n(i2);Bte=s(twe,"STRONG",{});var vHr=n(Bte);f3o=r(vHr,"ibert"),vHr.forEach(t),g3o=r(twe," \u2014 "),PI=s(twe,"A",{href:!0});var THr=n(PI);h3o=r(THr,"IBertForSequenceClassification"),THr.forEach(t),u3o=r(twe," (I-BERT model)"),twe.forEach(t),p3o=i(L),d2=s(L,"LI",{});var awe=n(d2);xte=s(awe,"STRONG",{});var FHr=n(xte);_3o=r(FHr,"layoutlm"),FHr.forEach(t),b3o=r(awe," \u2014 "),$I=s(awe,"A",{href:!0});var CHr=n($I);v3o=r(CHr,"LayoutLMForSequenceClassification"),CHr.forEach(t),T3o=r(awe," (LayoutLM model)"),awe.forEach(t),F3o=i(L),c2=s(L,"LI",{});var swe=n(c2);kte=s(swe,"STRONG",{});var MHr=n(kte);C3o=r(MHr,"layoutlmv2"),MHr.forEach(t),M3o=r(swe," \u2014 "),II=s(swe,"A",{href:!0});var EHr=n(II);E3o=r(EHr,"LayoutLMv2ForSequenceClassification"),EHr.forEach(t),y3o=r(swe," (LayoutLMv2 model)"),swe.forEach(t),w3o=i(L),m2=s(L,"LI",{});var nwe=n(m2);Rte=s(nwe,"STRONG",{});var yHr=n(Rte);A3o=r(yHr,"led"),yHr.forEach(t),L3o=r(nwe," \u2014 "),jI=s(nwe,"A",{href:!0});var wHr=n(jI);B3o=r(wHr,"LEDForSequenceClassification"),wHr.forEach(t),x3o=r(nwe," (LED model)"),nwe.forEach(t),k3o=i(L),f2=s(L,"LI",{});var lwe=n(f2);Ste=s(lwe,"STRONG",{});var AHr=n(Ste);R3o=r(AHr,"longformer"),AHr.forEach(t),S3o=r(lwe," \u2014 "),DI=s(lwe,"A",{href:!0});var LHr=n(DI);P3o=r(LHr,"LongformerForSequenceClassification"),LHr.forEach(t),$3o=r(lwe," (Longformer model)"),lwe.forEach(t),I3o=i(L),g2=s(L,"LI",{});var iwe=n(g2);Pte=s(iwe,"STRONG",{});var BHr=n(Pte);j3o=r(BHr,"mbart"),BHr.forEach(t),D3o=r(iwe," \u2014 "),NI=s(iwe,"A",{href:!0});var xHr=n(NI);N3o=r(xHr,"MBartForSequenceClassification"),xHr.forEach(t),q3o=r(iwe," (mBART model)"),iwe.forEach(t),O3o=i(L),h2=s(L,"LI",{});var dwe=n(h2);$te=s(dwe,"STRONG",{});var kHr=n($te);G3o=r(kHr,"megatron-bert"),kHr.forEach(t),X3o=r(dwe," \u2014 "),qI=s(dwe,"A",{href:!0});var RHr=n(qI);V3o=r(RHr,"MegatronBertForSequenceClassification"),RHr.forEach(t),z3o=r(dwe," (MegatronBert model)"),dwe.forEach(t),W3o=i(L),u2=s(L,"LI",{});var cwe=n(u2);Ite=s(cwe,"STRONG",{});var SHr=n(Ite);Q3o=r(SHr,"mobilebert"),SHr.forEach(t),H3o=r(cwe," \u2014 "),OI=s(cwe,"A",{href:!0});var PHr=n(OI);U3o=r(PHr,"MobileBertForSequenceClassification"),PHr.forEach(t),J3o=r(cwe," (MobileBERT model)"),cwe.forEach(t),Y3o=i(L),p2=s(L,"LI",{});var mwe=n(p2);jte=s(mwe,"STRONG",{});var $Hr=n(jte);K3o=r($Hr,"mpnet"),$Hr.forEach(t),Z3o=r(mwe," \u2014 "),GI=s(mwe,"A",{href:!0});var IHr=n(GI);e5o=r(IHr,"MPNetForSequenceClassification"),IHr.forEach(t),o5o=r(mwe," (MPNet model)"),mwe.forEach(t),r5o=i(L),_2=s(L,"LI",{});var fwe=n(_2);Dte=s(fwe,"STRONG",{});var jHr=n(Dte);t5o=r(jHr,"nystromformer"),jHr.forEach(t),a5o=r(fwe," \u2014 "),XI=s(fwe,"A",{href:!0});var DHr=n(XI);s5o=r(DHr,"NystromformerForSequenceClassification"),DHr.forEach(t),n5o=r(fwe," (Nystromformer model)"),fwe.forEach(t),l5o=i(L),b2=s(L,"LI",{});var gwe=n(b2);Nte=s(gwe,"STRONG",{});var NHr=n(Nte);i5o=r(NHr,"openai-gpt"),NHr.forEach(t),d5o=r(gwe," \u2014 "),VI=s(gwe,"A",{href:!0});var qHr=n(VI);c5o=r(qHr,"OpenAIGPTForSequenceClassification"),qHr.forEach(t),m5o=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),f5o=i(L),v2=s(L,"LI",{});var hwe=n(v2);qte=s(hwe,"STRONG",{});var OHr=n(qte);g5o=r(OHr,"perceiver"),OHr.forEach(t),h5o=r(hwe," \u2014 "),zI=s(hwe,"A",{href:!0});var GHr=n(zI);u5o=r(GHr,"PerceiverForSequenceClassification"),GHr.forEach(t),p5o=r(hwe," (Perceiver model)"),hwe.forEach(t),_5o=i(L),T2=s(L,"LI",{});var uwe=n(T2);Ote=s(uwe,"STRONG",{});var XHr=n(Ote);b5o=r(XHr,"plbart"),XHr.forEach(t),v5o=r(uwe," \u2014 "),WI=s(uwe,"A",{href:!0});var VHr=n(WI);T5o=r(VHr,"PLBartForSequenceClassification"),VHr.forEach(t),F5o=r(uwe," (PLBart model)"),uwe.forEach(t),C5o=i(L),F2=s(L,"LI",{});var pwe=n(F2);Gte=s(pwe,"STRONG",{});var zHr=n(Gte);M5o=r(zHr,"qdqbert"),zHr.forEach(t),E5o=r(pwe," \u2014 "),QI=s(pwe,"A",{href:!0});var WHr=n(QI);y5o=r(WHr,"QDQBertForSequenceClassification"),WHr.forEach(t),w5o=r(pwe," (QDQBert model)"),pwe.forEach(t),A5o=i(L),C2=s(L,"LI",{});var _we=n(C2);Xte=s(_we,"STRONG",{});var QHr=n(Xte);L5o=r(QHr,"reformer"),QHr.forEach(t),B5o=r(_we," \u2014 "),HI=s(_we,"A",{href:!0});var HHr=n(HI);x5o=r(HHr,"ReformerForSequenceClassification"),HHr.forEach(t),k5o=r(_we," (Reformer model)"),_we.forEach(t),R5o=i(L),M2=s(L,"LI",{});var bwe=n(M2);Vte=s(bwe,"STRONG",{});var UHr=n(Vte);S5o=r(UHr,"rembert"),UHr.forEach(t),P5o=r(bwe," \u2014 "),UI=s(bwe,"A",{href:!0});var JHr=n(UI);$5o=r(JHr,"RemBertForSequenceClassification"),JHr.forEach(t),I5o=r(bwe," (RemBERT model)"),bwe.forEach(t),j5o=i(L),E2=s(L,"LI",{});var vwe=n(E2);zte=s(vwe,"STRONG",{});var YHr=n(zte);D5o=r(YHr,"roberta"),YHr.forEach(t),N5o=r(vwe," \u2014 "),JI=s(vwe,"A",{href:!0});var KHr=n(JI);q5o=r(KHr,"RobertaForSequenceClassification"),KHr.forEach(t),O5o=r(vwe," (RoBERTa model)"),vwe.forEach(t),G5o=i(L),y2=s(L,"LI",{});var Twe=n(y2);Wte=s(Twe,"STRONG",{});var ZHr=n(Wte);X5o=r(ZHr,"roformer"),ZHr.forEach(t),V5o=r(Twe," \u2014 "),YI=s(Twe,"A",{href:!0});var eUr=n(YI);z5o=r(eUr,"RoFormerForSequenceClassification"),eUr.forEach(t),W5o=r(Twe," (RoFormer model)"),Twe.forEach(t),Q5o=i(L),w2=s(L,"LI",{});var Fwe=n(w2);Qte=s(Fwe,"STRONG",{});var oUr=n(Qte);H5o=r(oUr,"squeezebert"),oUr.forEach(t),U5o=r(Fwe," \u2014 "),KI=s(Fwe,"A",{href:!0});var rUr=n(KI);J5o=r(rUr,"SqueezeBertForSequenceClassification"),rUr.forEach(t),Y5o=r(Fwe," (SqueezeBERT model)"),Fwe.forEach(t),K5o=i(L),A2=s(L,"LI",{});var Cwe=n(A2);Hte=s(Cwe,"STRONG",{});var tUr=n(Hte);Z5o=r(tUr,"tapas"),tUr.forEach(t),eyo=r(Cwe," \u2014 "),ZI=s(Cwe,"A",{href:!0});var aUr=n(ZI);oyo=r(aUr,"TapasForSequenceClassification"),aUr.forEach(t),ryo=r(Cwe," (TAPAS model)"),Cwe.forEach(t),tyo=i(L),L2=s(L,"LI",{});var Mwe=n(L2);Ute=s(Mwe,"STRONG",{});var sUr=n(Ute);ayo=r(sUr,"transfo-xl"),sUr.forEach(t),syo=r(Mwe," \u2014 "),ej=s(Mwe,"A",{href:!0});var nUr=n(ej);nyo=r(nUr,"TransfoXLForSequenceClassification"),nUr.forEach(t),lyo=r(Mwe," (Transformer-XL model)"),Mwe.forEach(t),iyo=i(L),B2=s(L,"LI",{});var Ewe=n(B2);Jte=s(Ewe,"STRONG",{});var lUr=n(Jte);dyo=r(lUr,"xlm"),lUr.forEach(t),cyo=r(Ewe," \u2014 "),oj=s(Ewe,"A",{href:!0});var iUr=n(oj);myo=r(iUr,"XLMForSequenceClassification"),iUr.forEach(t),fyo=r(Ewe," (XLM model)"),Ewe.forEach(t),gyo=i(L),x2=s(L,"LI",{});var ywe=n(x2);Yte=s(ywe,"STRONG",{});var dUr=n(Yte);hyo=r(dUr,"xlm-roberta"),dUr.forEach(t),uyo=r(ywe," \u2014 "),rj=s(ywe,"A",{href:!0});var cUr=n(rj);pyo=r(cUr,"XLMRobertaForSequenceClassification"),cUr.forEach(t),_yo=r(ywe," (XLM-RoBERTa model)"),ywe.forEach(t),byo=i(L),k2=s(L,"LI",{});var wwe=n(k2);Kte=s(wwe,"STRONG",{});var mUr=n(Kte);vyo=r(mUr,"xlm-roberta-xl"),mUr.forEach(t),Tyo=r(wwe," \u2014 "),tj=s(wwe,"A",{href:!0});var fUr=n(tj);Fyo=r(fUr,"XLMRobertaXLForSequenceClassification"),fUr.forEach(t),Cyo=r(wwe," (XLM-RoBERTa-XL model)"),wwe.forEach(t),Myo=i(L),R2=s(L,"LI",{});var Awe=n(R2);Zte=s(Awe,"STRONG",{});var gUr=n(Zte);Eyo=r(gUr,"xlnet"),gUr.forEach(t),yyo=r(Awe," \u2014 "),aj=s(Awe,"A",{href:!0});var hUr=n(aj);wyo=r(hUr,"XLNetForSequenceClassification"),hUr.forEach(t),Ayo=r(Awe," (XLNet model)"),Awe.forEach(t),Lyo=i(L),S2=s(L,"LI",{});var Lwe=n(S2);eae=s(Lwe,"STRONG",{});var uUr=n(eae);Byo=r(uUr,"yoso"),uUr.forEach(t),xyo=r(Lwe," \u2014 "),sj=s(Lwe,"A",{href:!0});var pUr=n(sj);kyo=r(pUr,"YosoForSequenceClassification"),pUr.forEach(t),Ryo=r(Lwe," (YOSO model)"),Lwe.forEach(t),L.forEach(t),Syo=i(zt),P2=s(zt,"P",{});var Bwe=n(P2);Pyo=r(Bwe,"The model is set in evaluation mode by default using "),oae=s(Bwe,"CODE",{});var _Ur=n(oae);$yo=r(_Ur,"model.eval()"),_Ur.forEach(t),Iyo=r(Bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=s(Bwe,"CODE",{});var bUr=n(rae);jyo=r(bUr,"model.train()"),bUr.forEach(t),Bwe.forEach(t),Dyo=i(zt),tae=s(zt,"P",{});var vUr=n(tae);Nyo=r(vUr,"Examples:"),vUr.forEach(t),qyo=i(zt),f(fw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Mxe=i(d),hd=s(d,"H2",{class:!0});var RRe=n(hd);$2=s(RRe,"A",{id:!0,class:!0,href:!0});var TUr=n($2);aae=s(TUr,"SPAN",{});var FUr=n(aae);f(gw.$$.fragment,FUr),FUr.forEach(t),TUr.forEach(t),Oyo=i(RRe),sae=s(RRe,"SPAN",{});var CUr=n(sae);Gyo=r(CUr,"AutoModelForMultipleChoice"),CUr.forEach(t),RRe.forEach(t),Exe=i(d),rr=s(d,"DIV",{class:!0});var al=n(rr);f(hw.$$.fragment,al),Xyo=i(al),ud=s(al,"P",{});var Sz=n(ud);Vyo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nae=s(Sz,"CODE",{});var MUr=n(nae);zyo=r(MUr,"from_pretrained()"),MUr.forEach(t),Wyo=r(Sz,"class method or the "),lae=s(Sz,"CODE",{});var EUr=n(lae);Qyo=r(EUr,"from_config()"),EUr.forEach(t),Hyo=r(Sz,`class
method.`),Sz.forEach(t),Uyo=i(al),uw=s(al,"P",{});var SRe=n(uw);Jyo=r(SRe,"This class cannot be instantiated directly using "),iae=s(SRe,"CODE",{});var yUr=n(iae);Yyo=r(yUr,"__init__()"),yUr.forEach(t),Kyo=r(SRe," (throws an error)."),SRe.forEach(t),Zyo=i(al),Jr=s(al,"DIV",{class:!0});var sl=n(Jr);f(pw.$$.fragment,sl),ewo=i(sl),dae=s(sl,"P",{});var wUr=n(dae);owo=r(wUr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wUr.forEach(t),rwo=i(sl),pd=s(sl,"P",{});var Pz=n(pd);two=r(Pz,`Note:
Loading a model from its configuration file does `),cae=s(Pz,"STRONG",{});var AUr=n(cae);awo=r(AUr,"not"),AUr.forEach(t),swo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=s(Pz,"CODE",{});var LUr=n(mae);nwo=r(LUr,"from_pretrained()"),LUr.forEach(t),lwo=r(Pz,"to load the model weights."),Pz.forEach(t),iwo=i(sl),fae=s(sl,"P",{});var BUr=n(fae);dwo=r(BUr,"Examples:"),BUr.forEach(t),cwo=i(sl),f(_w.$$.fragment,sl),sl.forEach(t),mwo=i(al),Xe=s(al,"DIV",{class:!0});var Wt=n(Xe);f(bw.$$.fragment,Wt),fwo=i(Wt),gae=s(Wt,"P",{});var xUr=n(gae);gwo=r(xUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xUr.forEach(t),hwo=i(Wt),Ua=s(Wt,"P",{});var e5=n(Ua);uwo=r(e5,"The model class to instantiate is selected based on the "),hae=s(e5,"CODE",{});var kUr=n(hae);pwo=r(kUr,"model_type"),kUr.forEach(t),_wo=r(e5,` property of the config object (either
passed as an argument or loaded from `),uae=s(e5,"CODE",{});var RUr=n(uae);bwo=r(RUr,"pretrained_model_name_or_path"),RUr.forEach(t),vwo=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=s(e5,"CODE",{});var SUr=n(pae);Two=r(SUr,"pretrained_model_name_or_path"),SUr.forEach(t),Fwo=r(e5,":"),e5.forEach(t),Cwo=i(Wt),O=s(Wt,"UL",{});var G=n(O);I2=s(G,"LI",{});var xwe=n(I2);_ae=s(xwe,"STRONG",{});var PUr=n(_ae);Mwo=r(PUr,"albert"),PUr.forEach(t),Ewo=r(xwe," \u2014 "),nj=s(xwe,"A",{href:!0});var $Ur=n(nj);ywo=r($Ur,"AlbertForMultipleChoice"),$Ur.forEach(t),wwo=r(xwe," (ALBERT model)"),xwe.forEach(t),Awo=i(G),j2=s(G,"LI",{});var kwe=n(j2);bae=s(kwe,"STRONG",{});var IUr=n(bae);Lwo=r(IUr,"bert"),IUr.forEach(t),Bwo=r(kwe," \u2014 "),lj=s(kwe,"A",{href:!0});var jUr=n(lj);xwo=r(jUr,"BertForMultipleChoice"),jUr.forEach(t),kwo=r(kwe," (BERT model)"),kwe.forEach(t),Rwo=i(G),D2=s(G,"LI",{});var Rwe=n(D2);vae=s(Rwe,"STRONG",{});var DUr=n(vae);Swo=r(DUr,"big_bird"),DUr.forEach(t),Pwo=r(Rwe," \u2014 "),ij=s(Rwe,"A",{href:!0});var NUr=n(ij);$wo=r(NUr,"BigBirdForMultipleChoice"),NUr.forEach(t),Iwo=r(Rwe," (BigBird model)"),Rwe.forEach(t),jwo=i(G),N2=s(G,"LI",{});var Swe=n(N2);Tae=s(Swe,"STRONG",{});var qUr=n(Tae);Dwo=r(qUr,"camembert"),qUr.forEach(t),Nwo=r(Swe," \u2014 "),dj=s(Swe,"A",{href:!0});var OUr=n(dj);qwo=r(OUr,"CamembertForMultipleChoice"),OUr.forEach(t),Owo=r(Swe," (CamemBERT model)"),Swe.forEach(t),Gwo=i(G),q2=s(G,"LI",{});var Pwe=n(q2);Fae=s(Pwe,"STRONG",{});var GUr=n(Fae);Xwo=r(GUr,"canine"),GUr.forEach(t),Vwo=r(Pwe," \u2014 "),cj=s(Pwe,"A",{href:!0});var XUr=n(cj);zwo=r(XUr,"CanineForMultipleChoice"),XUr.forEach(t),Wwo=r(Pwe," (Canine model)"),Pwe.forEach(t),Qwo=i(G),O2=s(G,"LI",{});var $we=n(O2);Cae=s($we,"STRONG",{});var VUr=n(Cae);Hwo=r(VUr,"convbert"),VUr.forEach(t),Uwo=r($we," \u2014 "),mj=s($we,"A",{href:!0});var zUr=n(mj);Jwo=r(zUr,"ConvBertForMultipleChoice"),zUr.forEach(t),Ywo=r($we," (ConvBERT model)"),$we.forEach(t),Kwo=i(G),G2=s(G,"LI",{});var Iwe=n(G2);Mae=s(Iwe,"STRONG",{});var WUr=n(Mae);Zwo=r(WUr,"data2vec-text"),WUr.forEach(t),e6o=r(Iwe," \u2014 "),fj=s(Iwe,"A",{href:!0});var QUr=n(fj);o6o=r(QUr,"Data2VecTextForMultipleChoice"),QUr.forEach(t),r6o=r(Iwe," (Data2VecText model)"),Iwe.forEach(t),t6o=i(G),X2=s(G,"LI",{});var jwe=n(X2);Eae=s(jwe,"STRONG",{});var HUr=n(Eae);a6o=r(HUr,"distilbert"),HUr.forEach(t),s6o=r(jwe," \u2014 "),gj=s(jwe,"A",{href:!0});var UUr=n(gj);n6o=r(UUr,"DistilBertForMultipleChoice"),UUr.forEach(t),l6o=r(jwe," (DistilBERT model)"),jwe.forEach(t),i6o=i(G),V2=s(G,"LI",{});var Dwe=n(V2);yae=s(Dwe,"STRONG",{});var JUr=n(yae);d6o=r(JUr,"electra"),JUr.forEach(t),c6o=r(Dwe," \u2014 "),hj=s(Dwe,"A",{href:!0});var YUr=n(hj);m6o=r(YUr,"ElectraForMultipleChoice"),YUr.forEach(t),f6o=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),g6o=i(G),z2=s(G,"LI",{});var Nwe=n(z2);wae=s(Nwe,"STRONG",{});var KUr=n(wae);h6o=r(KUr,"flaubert"),KUr.forEach(t),u6o=r(Nwe," \u2014 "),uj=s(Nwe,"A",{href:!0});var ZUr=n(uj);p6o=r(ZUr,"FlaubertForMultipleChoice"),ZUr.forEach(t),_6o=r(Nwe," (FlauBERT model)"),Nwe.forEach(t),b6o=i(G),W2=s(G,"LI",{});var qwe=n(W2);Aae=s(qwe,"STRONG",{});var eJr=n(Aae);v6o=r(eJr,"fnet"),eJr.forEach(t),T6o=r(qwe," \u2014 "),pj=s(qwe,"A",{href:!0});var oJr=n(pj);F6o=r(oJr,"FNetForMultipleChoice"),oJr.forEach(t),C6o=r(qwe," (FNet model)"),qwe.forEach(t),M6o=i(G),Q2=s(G,"LI",{});var Owe=n(Q2);Lae=s(Owe,"STRONG",{});var rJr=n(Lae);E6o=r(rJr,"funnel"),rJr.forEach(t),y6o=r(Owe," \u2014 "),_j=s(Owe,"A",{href:!0});var tJr=n(_j);w6o=r(tJr,"FunnelForMultipleChoice"),tJr.forEach(t),A6o=r(Owe," (Funnel Transformer model)"),Owe.forEach(t),L6o=i(G),H2=s(G,"LI",{});var Gwe=n(H2);Bae=s(Gwe,"STRONG",{});var aJr=n(Bae);B6o=r(aJr,"ibert"),aJr.forEach(t),x6o=r(Gwe," \u2014 "),bj=s(Gwe,"A",{href:!0});var sJr=n(bj);k6o=r(sJr,"IBertForMultipleChoice"),sJr.forEach(t),R6o=r(Gwe," (I-BERT model)"),Gwe.forEach(t),S6o=i(G),U2=s(G,"LI",{});var Xwe=n(U2);xae=s(Xwe,"STRONG",{});var nJr=n(xae);P6o=r(nJr,"longformer"),nJr.forEach(t),$6o=r(Xwe," \u2014 "),vj=s(Xwe,"A",{href:!0});var lJr=n(vj);I6o=r(lJr,"LongformerForMultipleChoice"),lJr.forEach(t),j6o=r(Xwe," (Longformer model)"),Xwe.forEach(t),D6o=i(G),J2=s(G,"LI",{});var Vwe=n(J2);kae=s(Vwe,"STRONG",{});var iJr=n(kae);N6o=r(iJr,"megatron-bert"),iJr.forEach(t),q6o=r(Vwe," \u2014 "),Tj=s(Vwe,"A",{href:!0});var dJr=n(Tj);O6o=r(dJr,"MegatronBertForMultipleChoice"),dJr.forEach(t),G6o=r(Vwe," (MegatronBert model)"),Vwe.forEach(t),X6o=i(G),Y2=s(G,"LI",{});var zwe=n(Y2);Rae=s(zwe,"STRONG",{});var cJr=n(Rae);V6o=r(cJr,"mobilebert"),cJr.forEach(t),z6o=r(zwe," \u2014 "),Fj=s(zwe,"A",{href:!0});var mJr=n(Fj);W6o=r(mJr,"MobileBertForMultipleChoice"),mJr.forEach(t),Q6o=r(zwe," (MobileBERT model)"),zwe.forEach(t),H6o=i(G),K2=s(G,"LI",{});var Wwe=n(K2);Sae=s(Wwe,"STRONG",{});var fJr=n(Sae);U6o=r(fJr,"mpnet"),fJr.forEach(t),J6o=r(Wwe," \u2014 "),Cj=s(Wwe,"A",{href:!0});var gJr=n(Cj);Y6o=r(gJr,"MPNetForMultipleChoice"),gJr.forEach(t),K6o=r(Wwe," (MPNet model)"),Wwe.forEach(t),Z6o=i(G),Z2=s(G,"LI",{});var Qwe=n(Z2);Pae=s(Qwe,"STRONG",{});var hJr=n(Pae);eAo=r(hJr,"nystromformer"),hJr.forEach(t),oAo=r(Qwe," \u2014 "),Mj=s(Qwe,"A",{href:!0});var uJr=n(Mj);rAo=r(uJr,"NystromformerForMultipleChoice"),uJr.forEach(t),tAo=r(Qwe," (Nystromformer model)"),Qwe.forEach(t),aAo=i(G),ev=s(G,"LI",{});var Hwe=n(ev);$ae=s(Hwe,"STRONG",{});var pJr=n($ae);sAo=r(pJr,"qdqbert"),pJr.forEach(t),nAo=r(Hwe," \u2014 "),Ej=s(Hwe,"A",{href:!0});var _Jr=n(Ej);lAo=r(_Jr,"QDQBertForMultipleChoice"),_Jr.forEach(t),iAo=r(Hwe," (QDQBert model)"),Hwe.forEach(t),dAo=i(G),ov=s(G,"LI",{});var Uwe=n(ov);Iae=s(Uwe,"STRONG",{});var bJr=n(Iae);cAo=r(bJr,"rembert"),bJr.forEach(t),mAo=r(Uwe," \u2014 "),yj=s(Uwe,"A",{href:!0});var vJr=n(yj);fAo=r(vJr,"RemBertForMultipleChoice"),vJr.forEach(t),gAo=r(Uwe," (RemBERT model)"),Uwe.forEach(t),hAo=i(G),rv=s(G,"LI",{});var Jwe=n(rv);jae=s(Jwe,"STRONG",{});var TJr=n(jae);uAo=r(TJr,"roberta"),TJr.forEach(t),pAo=r(Jwe," \u2014 "),wj=s(Jwe,"A",{href:!0});var FJr=n(wj);_Ao=r(FJr,"RobertaForMultipleChoice"),FJr.forEach(t),bAo=r(Jwe," (RoBERTa model)"),Jwe.forEach(t),vAo=i(G),tv=s(G,"LI",{});var Ywe=n(tv);Dae=s(Ywe,"STRONG",{});var CJr=n(Dae);TAo=r(CJr,"roformer"),CJr.forEach(t),FAo=r(Ywe," \u2014 "),Aj=s(Ywe,"A",{href:!0});var MJr=n(Aj);CAo=r(MJr,"RoFormerForMultipleChoice"),MJr.forEach(t),MAo=r(Ywe," (RoFormer model)"),Ywe.forEach(t),EAo=i(G),av=s(G,"LI",{});var Kwe=n(av);Nae=s(Kwe,"STRONG",{});var EJr=n(Nae);yAo=r(EJr,"squeezebert"),EJr.forEach(t),wAo=r(Kwe," \u2014 "),Lj=s(Kwe,"A",{href:!0});var yJr=n(Lj);AAo=r(yJr,"SqueezeBertForMultipleChoice"),yJr.forEach(t),LAo=r(Kwe," (SqueezeBERT model)"),Kwe.forEach(t),BAo=i(G),sv=s(G,"LI",{});var Zwe=n(sv);qae=s(Zwe,"STRONG",{});var wJr=n(qae);xAo=r(wJr,"xlm"),wJr.forEach(t),kAo=r(Zwe," \u2014 "),Bj=s(Zwe,"A",{href:!0});var AJr=n(Bj);RAo=r(AJr,"XLMForMultipleChoice"),AJr.forEach(t),SAo=r(Zwe," (XLM model)"),Zwe.forEach(t),PAo=i(G),nv=s(G,"LI",{});var e6e=n(nv);Oae=s(e6e,"STRONG",{});var LJr=n(Oae);$Ao=r(LJr,"xlm-roberta"),LJr.forEach(t),IAo=r(e6e," \u2014 "),xj=s(e6e,"A",{href:!0});var BJr=n(xj);jAo=r(BJr,"XLMRobertaForMultipleChoice"),BJr.forEach(t),DAo=r(e6e," (XLM-RoBERTa model)"),e6e.forEach(t),NAo=i(G),lv=s(G,"LI",{});var o6e=n(lv);Gae=s(o6e,"STRONG",{});var xJr=n(Gae);qAo=r(xJr,"xlm-roberta-xl"),xJr.forEach(t),OAo=r(o6e," \u2014 "),kj=s(o6e,"A",{href:!0});var kJr=n(kj);GAo=r(kJr,"XLMRobertaXLForMultipleChoice"),kJr.forEach(t),XAo=r(o6e," (XLM-RoBERTa-XL model)"),o6e.forEach(t),VAo=i(G),iv=s(G,"LI",{});var r6e=n(iv);Xae=s(r6e,"STRONG",{});var RJr=n(Xae);zAo=r(RJr,"xlnet"),RJr.forEach(t),WAo=r(r6e," \u2014 "),Rj=s(r6e,"A",{href:!0});var SJr=n(Rj);QAo=r(SJr,"XLNetForMultipleChoice"),SJr.forEach(t),HAo=r(r6e," (XLNet model)"),r6e.forEach(t),UAo=i(G),dv=s(G,"LI",{});var t6e=n(dv);Vae=s(t6e,"STRONG",{});var PJr=n(Vae);JAo=r(PJr,"yoso"),PJr.forEach(t),YAo=r(t6e," \u2014 "),Sj=s(t6e,"A",{href:!0});var $Jr=n(Sj);KAo=r($Jr,"YosoForMultipleChoice"),$Jr.forEach(t),ZAo=r(t6e," (YOSO model)"),t6e.forEach(t),G.forEach(t),e0o=i(Wt),cv=s(Wt,"P",{});var a6e=n(cv);o0o=r(a6e,"The model is set in evaluation mode by default using "),zae=s(a6e,"CODE",{});var IJr=n(zae);r0o=r(IJr,"model.eval()"),IJr.forEach(t),t0o=r(a6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wae=s(a6e,"CODE",{});var jJr=n(Wae);a0o=r(jJr,"model.train()"),jJr.forEach(t),a6e.forEach(t),s0o=i(Wt),Qae=s(Wt,"P",{});var DJr=n(Qae);n0o=r(DJr,"Examples:"),DJr.forEach(t),l0o=i(Wt),f(vw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),yxe=i(d),_d=s(d,"H2",{class:!0});var PRe=n(_d);mv=s(PRe,"A",{id:!0,class:!0,href:!0});var NJr=n(mv);Hae=s(NJr,"SPAN",{});var qJr=n(Hae);f(Tw.$$.fragment,qJr),qJr.forEach(t),NJr.forEach(t),i0o=i(PRe),Uae=s(PRe,"SPAN",{});var OJr=n(Uae);d0o=r(OJr,"AutoModelForNextSentencePrediction"),OJr.forEach(t),PRe.forEach(t),wxe=i(d),tr=s(d,"DIV",{class:!0});var nl=n(tr);f(Fw.$$.fragment,nl),c0o=i(nl),bd=s(nl,"P",{});var $z=n(bd);m0o=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jae=s($z,"CODE",{});var GJr=n(Jae);f0o=r(GJr,"from_pretrained()"),GJr.forEach(t),g0o=r($z,"class method or the "),Yae=s($z,"CODE",{});var XJr=n(Yae);h0o=r(XJr,"from_config()"),XJr.forEach(t),u0o=r($z,`class
method.`),$z.forEach(t),p0o=i(nl),Cw=s(nl,"P",{});var $Re=n(Cw);_0o=r($Re,"This class cannot be instantiated directly using "),Kae=s($Re,"CODE",{});var VJr=n(Kae);b0o=r(VJr,"__init__()"),VJr.forEach(t),v0o=r($Re," (throws an error)."),$Re.forEach(t),T0o=i(nl),Yr=s(nl,"DIV",{class:!0});var ll=n(Yr);f(Mw.$$.fragment,ll),F0o=i(ll),Zae=s(ll,"P",{});var zJr=n(Zae);C0o=r(zJr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zJr.forEach(t),M0o=i(ll),vd=s(ll,"P",{});var Iz=n(vd);E0o=r(Iz,`Note:
Loading a model from its configuration file does `),ese=s(Iz,"STRONG",{});var WJr=n(ese);y0o=r(WJr,"not"),WJr.forEach(t),w0o=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ose=s(Iz,"CODE",{});var QJr=n(ose);A0o=r(QJr,"from_pretrained()"),QJr.forEach(t),L0o=r(Iz,"to load the model weights."),Iz.forEach(t),B0o=i(ll),rse=s(ll,"P",{});var HJr=n(rse);x0o=r(HJr,"Examples:"),HJr.forEach(t),k0o=i(ll),f(Ew.$$.fragment,ll),ll.forEach(t),R0o=i(nl),Ve=s(nl,"DIV",{class:!0});var Qt=n(Ve);f(yw.$$.fragment,Qt),S0o=i(Qt),tse=s(Qt,"P",{});var UJr=n(tse);P0o=r(UJr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UJr.forEach(t),$0o=i(Qt),Ja=s(Qt,"P",{});var o5=n(Ja);I0o=r(o5,"The model class to instantiate is selected based on the "),ase=s(o5,"CODE",{});var JJr=n(ase);j0o=r(JJr,"model_type"),JJr.forEach(t),D0o=r(o5,` property of the config object (either
passed as an argument or loaded from `),sse=s(o5,"CODE",{});var YJr=n(sse);N0o=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),q0o=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=s(o5,"CODE",{});var KJr=n(nse);O0o=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),G0o=r(o5,":"),o5.forEach(t),X0o=i(Qt),da=s(Qt,"UL",{});var il=n(da);fv=s(il,"LI",{});var s6e=n(fv);lse=s(s6e,"STRONG",{});var ZJr=n(lse);V0o=r(ZJr,"bert"),ZJr.forEach(t),z0o=r(s6e," \u2014 "),Pj=s(s6e,"A",{href:!0});var eYr=n(Pj);W0o=r(eYr,"BertForNextSentencePrediction"),eYr.forEach(t),Q0o=r(s6e," (BERT model)"),s6e.forEach(t),H0o=i(il),gv=s(il,"LI",{});var n6e=n(gv);ise=s(n6e,"STRONG",{});var oYr=n(ise);U0o=r(oYr,"fnet"),oYr.forEach(t),J0o=r(n6e," \u2014 "),$j=s(n6e,"A",{href:!0});var rYr=n($j);Y0o=r(rYr,"FNetForNextSentencePrediction"),rYr.forEach(t),K0o=r(n6e," (FNet model)"),n6e.forEach(t),Z0o=i(il),hv=s(il,"LI",{});var l6e=n(hv);dse=s(l6e,"STRONG",{});var tYr=n(dse);eLo=r(tYr,"megatron-bert"),tYr.forEach(t),oLo=r(l6e," \u2014 "),Ij=s(l6e,"A",{href:!0});var aYr=n(Ij);rLo=r(aYr,"MegatronBertForNextSentencePrediction"),aYr.forEach(t),tLo=r(l6e," (MegatronBert model)"),l6e.forEach(t),aLo=i(il),uv=s(il,"LI",{});var i6e=n(uv);cse=s(i6e,"STRONG",{});var sYr=n(cse);sLo=r(sYr,"mobilebert"),sYr.forEach(t),nLo=r(i6e," \u2014 "),jj=s(i6e,"A",{href:!0});var nYr=n(jj);lLo=r(nYr,"MobileBertForNextSentencePrediction"),nYr.forEach(t),iLo=r(i6e," (MobileBERT model)"),i6e.forEach(t),dLo=i(il),pv=s(il,"LI",{});var d6e=n(pv);mse=s(d6e,"STRONG",{});var lYr=n(mse);cLo=r(lYr,"qdqbert"),lYr.forEach(t),mLo=r(d6e," \u2014 "),Dj=s(d6e,"A",{href:!0});var iYr=n(Dj);fLo=r(iYr,"QDQBertForNextSentencePrediction"),iYr.forEach(t),gLo=r(d6e," (QDQBert model)"),d6e.forEach(t),il.forEach(t),hLo=i(Qt),_v=s(Qt,"P",{});var c6e=n(_v);uLo=r(c6e,"The model is set in evaluation mode by default using "),fse=s(c6e,"CODE",{});var dYr=n(fse);pLo=r(dYr,"model.eval()"),dYr.forEach(t),_Lo=r(c6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gse=s(c6e,"CODE",{});var cYr=n(gse);bLo=r(cYr,"model.train()"),cYr.forEach(t),c6e.forEach(t),vLo=i(Qt),hse=s(Qt,"P",{});var mYr=n(hse);TLo=r(mYr,"Examples:"),mYr.forEach(t),FLo=i(Qt),f(ww.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),Axe=i(d),Td=s(d,"H2",{class:!0});var IRe=n(Td);bv=s(IRe,"A",{id:!0,class:!0,href:!0});var fYr=n(bv);use=s(fYr,"SPAN",{});var gYr=n(use);f(Aw.$$.fragment,gYr),gYr.forEach(t),fYr.forEach(t),CLo=i(IRe),pse=s(IRe,"SPAN",{});var hYr=n(pse);MLo=r(hYr,"AutoModelForTokenClassification"),hYr.forEach(t),IRe.forEach(t),Lxe=i(d),ar=s(d,"DIV",{class:!0});var dl=n(ar);f(Lw.$$.fragment,dl),ELo=i(dl),Fd=s(dl,"P",{});var jz=n(Fd);yLo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_se=s(jz,"CODE",{});var uYr=n(_se);wLo=r(uYr,"from_pretrained()"),uYr.forEach(t),ALo=r(jz,"class method or the "),bse=s(jz,"CODE",{});var pYr=n(bse);LLo=r(pYr,"from_config()"),pYr.forEach(t),BLo=r(jz,`class
method.`),jz.forEach(t),xLo=i(dl),Bw=s(dl,"P",{});var jRe=n(Bw);kLo=r(jRe,"This class cannot be instantiated directly using "),vse=s(jRe,"CODE",{});var _Yr=n(vse);RLo=r(_Yr,"__init__()"),_Yr.forEach(t),SLo=r(jRe," (throws an error)."),jRe.forEach(t),PLo=i(dl),Kr=s(dl,"DIV",{class:!0});var cl=n(Kr);f(xw.$$.fragment,cl),$Lo=i(cl),Tse=s(cl,"P",{});var bYr=n(Tse);ILo=r(bYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bYr.forEach(t),jLo=i(cl),Cd=s(cl,"P",{});var Dz=n(Cd);DLo=r(Dz,`Note:
Loading a model from its configuration file does `),Fse=s(Dz,"STRONG",{});var vYr=n(Fse);NLo=r(vYr,"not"),vYr.forEach(t),qLo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cse=s(Dz,"CODE",{});var TYr=n(Cse);OLo=r(TYr,"from_pretrained()"),TYr.forEach(t),GLo=r(Dz,"to load the model weights."),Dz.forEach(t),XLo=i(cl),Mse=s(cl,"P",{});var FYr=n(Mse);VLo=r(FYr,"Examples:"),FYr.forEach(t),zLo=i(cl),f(kw.$$.fragment,cl),cl.forEach(t),WLo=i(dl),ze=s(dl,"DIV",{class:!0});var Ht=n(ze);f(Rw.$$.fragment,Ht),QLo=i(Ht),Ese=s(Ht,"P",{});var CYr=n(Ese);HLo=r(CYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CYr.forEach(t),ULo=i(Ht),Ya=s(Ht,"P",{});var r5=n(Ya);JLo=r(r5,"The model class to instantiate is selected based on the "),yse=s(r5,"CODE",{});var MYr=n(yse);YLo=r(MYr,"model_type"),MYr.forEach(t),KLo=r(r5,` property of the config object (either
passed as an argument or loaded from `),wse=s(r5,"CODE",{});var EYr=n(wse);ZLo=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),e8o=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=s(r5,"CODE",{});var yYr=n(Ase);o8o=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),r8o=r(r5,":"),r5.forEach(t),t8o=i(Ht),N=s(Ht,"UL",{});var q=n(N);vv=s(q,"LI",{});var m6e=n(vv);Lse=s(m6e,"STRONG",{});var wYr=n(Lse);a8o=r(wYr,"albert"),wYr.forEach(t),s8o=r(m6e," \u2014 "),Nj=s(m6e,"A",{href:!0});var AYr=n(Nj);n8o=r(AYr,"AlbertForTokenClassification"),AYr.forEach(t),l8o=r(m6e," (ALBERT model)"),m6e.forEach(t),i8o=i(q),Tv=s(q,"LI",{});var f6e=n(Tv);Bse=s(f6e,"STRONG",{});var LYr=n(Bse);d8o=r(LYr,"bert"),LYr.forEach(t),c8o=r(f6e," \u2014 "),qj=s(f6e,"A",{href:!0});var BYr=n(qj);m8o=r(BYr,"BertForTokenClassification"),BYr.forEach(t),f8o=r(f6e," (BERT model)"),f6e.forEach(t),g8o=i(q),Fv=s(q,"LI",{});var g6e=n(Fv);xse=s(g6e,"STRONG",{});var xYr=n(xse);h8o=r(xYr,"big_bird"),xYr.forEach(t),u8o=r(g6e," \u2014 "),Oj=s(g6e,"A",{href:!0});var kYr=n(Oj);p8o=r(kYr,"BigBirdForTokenClassification"),kYr.forEach(t),_8o=r(g6e," (BigBird model)"),g6e.forEach(t),b8o=i(q),Cv=s(q,"LI",{});var h6e=n(Cv);kse=s(h6e,"STRONG",{});var RYr=n(kse);v8o=r(RYr,"camembert"),RYr.forEach(t),T8o=r(h6e," \u2014 "),Gj=s(h6e,"A",{href:!0});var SYr=n(Gj);F8o=r(SYr,"CamembertForTokenClassification"),SYr.forEach(t),C8o=r(h6e," (CamemBERT model)"),h6e.forEach(t),M8o=i(q),Mv=s(q,"LI",{});var u6e=n(Mv);Rse=s(u6e,"STRONG",{});var PYr=n(Rse);E8o=r(PYr,"canine"),PYr.forEach(t),y8o=r(u6e," \u2014 "),Xj=s(u6e,"A",{href:!0});var $Yr=n(Xj);w8o=r($Yr,"CanineForTokenClassification"),$Yr.forEach(t),A8o=r(u6e," (Canine model)"),u6e.forEach(t),L8o=i(q),Ev=s(q,"LI",{});var p6e=n(Ev);Sse=s(p6e,"STRONG",{});var IYr=n(Sse);B8o=r(IYr,"convbert"),IYr.forEach(t),x8o=r(p6e," \u2014 "),Vj=s(p6e,"A",{href:!0});var jYr=n(Vj);k8o=r(jYr,"ConvBertForTokenClassification"),jYr.forEach(t),R8o=r(p6e," (ConvBERT model)"),p6e.forEach(t),S8o=i(q),yv=s(q,"LI",{});var _6e=n(yv);Pse=s(_6e,"STRONG",{});var DYr=n(Pse);P8o=r(DYr,"data2vec-text"),DYr.forEach(t),$8o=r(_6e," \u2014 "),zj=s(_6e,"A",{href:!0});var NYr=n(zj);I8o=r(NYr,"Data2VecTextForTokenClassification"),NYr.forEach(t),j8o=r(_6e," (Data2VecText model)"),_6e.forEach(t),D8o=i(q),wv=s(q,"LI",{});var b6e=n(wv);$se=s(b6e,"STRONG",{});var qYr=n($se);N8o=r(qYr,"deberta"),qYr.forEach(t),q8o=r(b6e," \u2014 "),Wj=s(b6e,"A",{href:!0});var OYr=n(Wj);O8o=r(OYr,"DebertaForTokenClassification"),OYr.forEach(t),G8o=r(b6e," (DeBERTa model)"),b6e.forEach(t),X8o=i(q),Av=s(q,"LI",{});var v6e=n(Av);Ise=s(v6e,"STRONG",{});var GYr=n(Ise);V8o=r(GYr,"deberta-v2"),GYr.forEach(t),z8o=r(v6e," \u2014 "),Qj=s(v6e,"A",{href:!0});var XYr=n(Qj);W8o=r(XYr,"DebertaV2ForTokenClassification"),XYr.forEach(t),Q8o=r(v6e," (DeBERTa-v2 model)"),v6e.forEach(t),H8o=i(q),Lv=s(q,"LI",{});var T6e=n(Lv);jse=s(T6e,"STRONG",{});var VYr=n(jse);U8o=r(VYr,"distilbert"),VYr.forEach(t),J8o=r(T6e," \u2014 "),Hj=s(T6e,"A",{href:!0});var zYr=n(Hj);Y8o=r(zYr,"DistilBertForTokenClassification"),zYr.forEach(t),K8o=r(T6e," (DistilBERT model)"),T6e.forEach(t),Z8o=i(q),Bv=s(q,"LI",{});var F6e=n(Bv);Dse=s(F6e,"STRONG",{});var WYr=n(Dse);e7o=r(WYr,"electra"),WYr.forEach(t),o7o=r(F6e," \u2014 "),Uj=s(F6e,"A",{href:!0});var QYr=n(Uj);r7o=r(QYr,"ElectraForTokenClassification"),QYr.forEach(t),t7o=r(F6e," (ELECTRA model)"),F6e.forEach(t),a7o=i(q),xv=s(q,"LI",{});var C6e=n(xv);Nse=s(C6e,"STRONG",{});var HYr=n(Nse);s7o=r(HYr,"flaubert"),HYr.forEach(t),n7o=r(C6e," \u2014 "),Jj=s(C6e,"A",{href:!0});var UYr=n(Jj);l7o=r(UYr,"FlaubertForTokenClassification"),UYr.forEach(t),i7o=r(C6e," (FlauBERT model)"),C6e.forEach(t),d7o=i(q),kv=s(q,"LI",{});var M6e=n(kv);qse=s(M6e,"STRONG",{});var JYr=n(qse);c7o=r(JYr,"fnet"),JYr.forEach(t),m7o=r(M6e," \u2014 "),Yj=s(M6e,"A",{href:!0});var YYr=n(Yj);f7o=r(YYr,"FNetForTokenClassification"),YYr.forEach(t),g7o=r(M6e," (FNet model)"),M6e.forEach(t),h7o=i(q),Rv=s(q,"LI",{});var E6e=n(Rv);Ose=s(E6e,"STRONG",{});var KYr=n(Ose);u7o=r(KYr,"funnel"),KYr.forEach(t),p7o=r(E6e," \u2014 "),Kj=s(E6e,"A",{href:!0});var ZYr=n(Kj);_7o=r(ZYr,"FunnelForTokenClassification"),ZYr.forEach(t),b7o=r(E6e," (Funnel Transformer model)"),E6e.forEach(t),v7o=i(q),Sv=s(q,"LI",{});var y6e=n(Sv);Gse=s(y6e,"STRONG",{});var eKr=n(Gse);T7o=r(eKr,"gpt2"),eKr.forEach(t),F7o=r(y6e," \u2014 "),Zj=s(y6e,"A",{href:!0});var oKr=n(Zj);C7o=r(oKr,"GPT2ForTokenClassification"),oKr.forEach(t),M7o=r(y6e," (OpenAI GPT-2 model)"),y6e.forEach(t),E7o=i(q),Pv=s(q,"LI",{});var w6e=n(Pv);Xse=s(w6e,"STRONG",{});var rKr=n(Xse);y7o=r(rKr,"ibert"),rKr.forEach(t),w7o=r(w6e," \u2014 "),eD=s(w6e,"A",{href:!0});var tKr=n(eD);A7o=r(tKr,"IBertForTokenClassification"),tKr.forEach(t),L7o=r(w6e," (I-BERT model)"),w6e.forEach(t),B7o=i(q),$v=s(q,"LI",{});var A6e=n($v);Vse=s(A6e,"STRONG",{});var aKr=n(Vse);x7o=r(aKr,"layoutlm"),aKr.forEach(t),k7o=r(A6e," \u2014 "),oD=s(A6e,"A",{href:!0});var sKr=n(oD);R7o=r(sKr,"LayoutLMForTokenClassification"),sKr.forEach(t),S7o=r(A6e," (LayoutLM model)"),A6e.forEach(t),P7o=i(q),Iv=s(q,"LI",{});var L6e=n(Iv);zse=s(L6e,"STRONG",{});var nKr=n(zse);$7o=r(nKr,"layoutlmv2"),nKr.forEach(t),I7o=r(L6e," \u2014 "),rD=s(L6e,"A",{href:!0});var lKr=n(rD);j7o=r(lKr,"LayoutLMv2ForTokenClassification"),lKr.forEach(t),D7o=r(L6e," (LayoutLMv2 model)"),L6e.forEach(t),N7o=i(q),jv=s(q,"LI",{});var B6e=n(jv);Wse=s(B6e,"STRONG",{});var iKr=n(Wse);q7o=r(iKr,"longformer"),iKr.forEach(t),O7o=r(B6e," \u2014 "),tD=s(B6e,"A",{href:!0});var dKr=n(tD);G7o=r(dKr,"LongformerForTokenClassification"),dKr.forEach(t),X7o=r(B6e," (Longformer model)"),B6e.forEach(t),V7o=i(q),Dv=s(q,"LI",{});var x6e=n(Dv);Qse=s(x6e,"STRONG",{});var cKr=n(Qse);z7o=r(cKr,"megatron-bert"),cKr.forEach(t),W7o=r(x6e," \u2014 "),aD=s(x6e,"A",{href:!0});var mKr=n(aD);Q7o=r(mKr,"MegatronBertForTokenClassification"),mKr.forEach(t),H7o=r(x6e," (MegatronBert model)"),x6e.forEach(t),U7o=i(q),Nv=s(q,"LI",{});var k6e=n(Nv);Hse=s(k6e,"STRONG",{});var fKr=n(Hse);J7o=r(fKr,"mobilebert"),fKr.forEach(t),Y7o=r(k6e," \u2014 "),sD=s(k6e,"A",{href:!0});var gKr=n(sD);K7o=r(gKr,"MobileBertForTokenClassification"),gKr.forEach(t),Z7o=r(k6e," (MobileBERT model)"),k6e.forEach(t),e9o=i(q),qv=s(q,"LI",{});var R6e=n(qv);Use=s(R6e,"STRONG",{});var hKr=n(Use);o9o=r(hKr,"mpnet"),hKr.forEach(t),r9o=r(R6e," \u2014 "),nD=s(R6e,"A",{href:!0});var uKr=n(nD);t9o=r(uKr,"MPNetForTokenClassification"),uKr.forEach(t),a9o=r(R6e," (MPNet model)"),R6e.forEach(t),s9o=i(q),Ov=s(q,"LI",{});var S6e=n(Ov);Jse=s(S6e,"STRONG",{});var pKr=n(Jse);n9o=r(pKr,"nystromformer"),pKr.forEach(t),l9o=r(S6e," \u2014 "),lD=s(S6e,"A",{href:!0});var _Kr=n(lD);i9o=r(_Kr,"NystromformerForTokenClassification"),_Kr.forEach(t),d9o=r(S6e," (Nystromformer model)"),S6e.forEach(t),c9o=i(q),Gv=s(q,"LI",{});var P6e=n(Gv);Yse=s(P6e,"STRONG",{});var bKr=n(Yse);m9o=r(bKr,"qdqbert"),bKr.forEach(t),f9o=r(P6e," \u2014 "),iD=s(P6e,"A",{href:!0});var vKr=n(iD);g9o=r(vKr,"QDQBertForTokenClassification"),vKr.forEach(t),h9o=r(P6e," (QDQBert model)"),P6e.forEach(t),u9o=i(q),Xv=s(q,"LI",{});var $6e=n(Xv);Kse=s($6e,"STRONG",{});var TKr=n(Kse);p9o=r(TKr,"rembert"),TKr.forEach(t),_9o=r($6e," \u2014 "),dD=s($6e,"A",{href:!0});var FKr=n(dD);b9o=r(FKr,"RemBertForTokenClassification"),FKr.forEach(t),v9o=r($6e," (RemBERT model)"),$6e.forEach(t),T9o=i(q),Vv=s(q,"LI",{});var I6e=n(Vv);Zse=s(I6e,"STRONG",{});var CKr=n(Zse);F9o=r(CKr,"roberta"),CKr.forEach(t),C9o=r(I6e," \u2014 "),cD=s(I6e,"A",{href:!0});var MKr=n(cD);M9o=r(MKr,"RobertaForTokenClassification"),MKr.forEach(t),E9o=r(I6e," (RoBERTa model)"),I6e.forEach(t),y9o=i(q),zv=s(q,"LI",{});var j6e=n(zv);ene=s(j6e,"STRONG",{});var EKr=n(ene);w9o=r(EKr,"roformer"),EKr.forEach(t),A9o=r(j6e," \u2014 "),mD=s(j6e,"A",{href:!0});var yKr=n(mD);L9o=r(yKr,"RoFormerForTokenClassification"),yKr.forEach(t),B9o=r(j6e," (RoFormer model)"),j6e.forEach(t),x9o=i(q),Wv=s(q,"LI",{});var D6e=n(Wv);one=s(D6e,"STRONG",{});var wKr=n(one);k9o=r(wKr,"squeezebert"),wKr.forEach(t),R9o=r(D6e," \u2014 "),fD=s(D6e,"A",{href:!0});var AKr=n(fD);S9o=r(AKr,"SqueezeBertForTokenClassification"),AKr.forEach(t),P9o=r(D6e," (SqueezeBERT model)"),D6e.forEach(t),$9o=i(q),Qv=s(q,"LI",{});var N6e=n(Qv);rne=s(N6e,"STRONG",{});var LKr=n(rne);I9o=r(LKr,"xlm"),LKr.forEach(t),j9o=r(N6e," \u2014 "),gD=s(N6e,"A",{href:!0});var BKr=n(gD);D9o=r(BKr,"XLMForTokenClassification"),BKr.forEach(t),N9o=r(N6e," (XLM model)"),N6e.forEach(t),q9o=i(q),Hv=s(q,"LI",{});var q6e=n(Hv);tne=s(q6e,"STRONG",{});var xKr=n(tne);O9o=r(xKr,"xlm-roberta"),xKr.forEach(t),G9o=r(q6e," \u2014 "),hD=s(q6e,"A",{href:!0});var kKr=n(hD);X9o=r(kKr,"XLMRobertaForTokenClassification"),kKr.forEach(t),V9o=r(q6e," (XLM-RoBERTa model)"),q6e.forEach(t),z9o=i(q),Uv=s(q,"LI",{});var O6e=n(Uv);ane=s(O6e,"STRONG",{});var RKr=n(ane);W9o=r(RKr,"xlm-roberta-xl"),RKr.forEach(t),Q9o=r(O6e," \u2014 "),uD=s(O6e,"A",{href:!0});var SKr=n(uD);H9o=r(SKr,"XLMRobertaXLForTokenClassification"),SKr.forEach(t),U9o=r(O6e," (XLM-RoBERTa-XL model)"),O6e.forEach(t),J9o=i(q),Jv=s(q,"LI",{});var G6e=n(Jv);sne=s(G6e,"STRONG",{});var PKr=n(sne);Y9o=r(PKr,"xlnet"),PKr.forEach(t),K9o=r(G6e," \u2014 "),pD=s(G6e,"A",{href:!0});var $Kr=n(pD);Z9o=r($Kr,"XLNetForTokenClassification"),$Kr.forEach(t),eBo=r(G6e," (XLNet model)"),G6e.forEach(t),oBo=i(q),Yv=s(q,"LI",{});var X6e=n(Yv);nne=s(X6e,"STRONG",{});var IKr=n(nne);rBo=r(IKr,"yoso"),IKr.forEach(t),tBo=r(X6e," \u2014 "),_D=s(X6e,"A",{href:!0});var jKr=n(_D);aBo=r(jKr,"YosoForTokenClassification"),jKr.forEach(t),sBo=r(X6e," (YOSO model)"),X6e.forEach(t),q.forEach(t),nBo=i(Ht),Kv=s(Ht,"P",{});var V6e=n(Kv);lBo=r(V6e,"The model is set in evaluation mode by default using "),lne=s(V6e,"CODE",{});var DKr=n(lne);iBo=r(DKr,"model.eval()"),DKr.forEach(t),dBo=r(V6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ine=s(V6e,"CODE",{});var NKr=n(ine);cBo=r(NKr,"model.train()"),NKr.forEach(t),V6e.forEach(t),mBo=i(Ht),dne=s(Ht,"P",{});var qKr=n(dne);fBo=r(qKr,"Examples:"),qKr.forEach(t),gBo=i(Ht),f(Sw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Bxe=i(d),Md=s(d,"H2",{class:!0});var DRe=n(Md);Zv=s(DRe,"A",{id:!0,class:!0,href:!0});var OKr=n(Zv);cne=s(OKr,"SPAN",{});var GKr=n(cne);f(Pw.$$.fragment,GKr),GKr.forEach(t),OKr.forEach(t),hBo=i(DRe),mne=s(DRe,"SPAN",{});var XKr=n(mne);uBo=r(XKr,"AutoModelForQuestionAnswering"),XKr.forEach(t),DRe.forEach(t),xxe=i(d),sr=s(d,"DIV",{class:!0});var ml=n(sr);f($w.$$.fragment,ml),pBo=i(ml),Ed=s(ml,"P",{});var Nz=n(Ed);_Bo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fne=s(Nz,"CODE",{});var VKr=n(fne);bBo=r(VKr,"from_pretrained()"),VKr.forEach(t),vBo=r(Nz,"class method or the "),gne=s(Nz,"CODE",{});var zKr=n(gne);TBo=r(zKr,"from_config()"),zKr.forEach(t),FBo=r(Nz,`class
method.`),Nz.forEach(t),CBo=i(ml),Iw=s(ml,"P",{});var NRe=n(Iw);MBo=r(NRe,"This class cannot be instantiated directly using "),hne=s(NRe,"CODE",{});var WKr=n(hne);EBo=r(WKr,"__init__()"),WKr.forEach(t),yBo=r(NRe," (throws an error)."),NRe.forEach(t),wBo=i(ml),Zr=s(ml,"DIV",{class:!0});var fl=n(Zr);f(jw.$$.fragment,fl),ABo=i(fl),une=s(fl,"P",{});var QKr=n(une);LBo=r(QKr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QKr.forEach(t),BBo=i(fl),yd=s(fl,"P",{});var qz=n(yd);xBo=r(qz,`Note:
Loading a model from its configuration file does `),pne=s(qz,"STRONG",{});var HKr=n(pne);kBo=r(HKr,"not"),HKr.forEach(t),RBo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=s(qz,"CODE",{});var UKr=n(_ne);SBo=r(UKr,"from_pretrained()"),UKr.forEach(t),PBo=r(qz,"to load the model weights."),qz.forEach(t),$Bo=i(fl),bne=s(fl,"P",{});var JKr=n(bne);IBo=r(JKr,"Examples:"),JKr.forEach(t),jBo=i(fl),f(Dw.$$.fragment,fl),fl.forEach(t),DBo=i(ml),We=s(ml,"DIV",{class:!0});var Ut=n(We);f(Nw.$$.fragment,Ut),NBo=i(Ut),vne=s(Ut,"P",{});var YKr=n(vne);qBo=r(YKr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YKr.forEach(t),OBo=i(Ut),Ka=s(Ut,"P",{});var t5=n(Ka);GBo=r(t5,"The model class to instantiate is selected based on the "),Tne=s(t5,"CODE",{});var KKr=n(Tne);XBo=r(KKr,"model_type"),KKr.forEach(t),VBo=r(t5,` property of the config object (either
passed as an argument or loaded from `),Fne=s(t5,"CODE",{});var ZKr=n(Fne);zBo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),WBo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=s(t5,"CODE",{});var eZr=n(Cne);QBo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),HBo=r(t5,":"),t5.forEach(t),UBo=i(Ut),R=s(Ut,"UL",{});var P=n(R);eT=s(P,"LI",{});var z6e=n(eT);Mne=s(z6e,"STRONG",{});var oZr=n(Mne);JBo=r(oZr,"albert"),oZr.forEach(t),YBo=r(z6e," \u2014 "),bD=s(z6e,"A",{href:!0});var rZr=n(bD);KBo=r(rZr,"AlbertForQuestionAnswering"),rZr.forEach(t),ZBo=r(z6e," (ALBERT model)"),z6e.forEach(t),exo=i(P),oT=s(P,"LI",{});var W6e=n(oT);Ene=s(W6e,"STRONG",{});var tZr=n(Ene);oxo=r(tZr,"bart"),tZr.forEach(t),rxo=r(W6e," \u2014 "),vD=s(W6e,"A",{href:!0});var aZr=n(vD);txo=r(aZr,"BartForQuestionAnswering"),aZr.forEach(t),axo=r(W6e," (BART model)"),W6e.forEach(t),sxo=i(P),rT=s(P,"LI",{});var Q6e=n(rT);yne=s(Q6e,"STRONG",{});var sZr=n(yne);nxo=r(sZr,"bert"),sZr.forEach(t),lxo=r(Q6e," \u2014 "),TD=s(Q6e,"A",{href:!0});var nZr=n(TD);ixo=r(nZr,"BertForQuestionAnswering"),nZr.forEach(t),dxo=r(Q6e," (BERT model)"),Q6e.forEach(t),cxo=i(P),tT=s(P,"LI",{});var H6e=n(tT);wne=s(H6e,"STRONG",{});var lZr=n(wne);mxo=r(lZr,"big_bird"),lZr.forEach(t),fxo=r(H6e," \u2014 "),FD=s(H6e,"A",{href:!0});var iZr=n(FD);gxo=r(iZr,"BigBirdForQuestionAnswering"),iZr.forEach(t),hxo=r(H6e," (BigBird model)"),H6e.forEach(t),uxo=i(P),aT=s(P,"LI",{});var U6e=n(aT);Ane=s(U6e,"STRONG",{});var dZr=n(Ane);pxo=r(dZr,"bigbird_pegasus"),dZr.forEach(t),_xo=r(U6e," \u2014 "),CD=s(U6e,"A",{href:!0});var cZr=n(CD);bxo=r(cZr,"BigBirdPegasusForQuestionAnswering"),cZr.forEach(t),vxo=r(U6e," (BigBirdPegasus model)"),U6e.forEach(t),Txo=i(P),sT=s(P,"LI",{});var J6e=n(sT);Lne=s(J6e,"STRONG",{});var mZr=n(Lne);Fxo=r(mZr,"camembert"),mZr.forEach(t),Cxo=r(J6e," \u2014 "),MD=s(J6e,"A",{href:!0});var fZr=n(MD);Mxo=r(fZr,"CamembertForQuestionAnswering"),fZr.forEach(t),Exo=r(J6e," (CamemBERT model)"),J6e.forEach(t),yxo=i(P),nT=s(P,"LI",{});var Y6e=n(nT);Bne=s(Y6e,"STRONG",{});var gZr=n(Bne);wxo=r(gZr,"canine"),gZr.forEach(t),Axo=r(Y6e," \u2014 "),ED=s(Y6e,"A",{href:!0});var hZr=n(ED);Lxo=r(hZr,"CanineForQuestionAnswering"),hZr.forEach(t),Bxo=r(Y6e," (Canine model)"),Y6e.forEach(t),xxo=i(P),lT=s(P,"LI",{});var K6e=n(lT);xne=s(K6e,"STRONG",{});var uZr=n(xne);kxo=r(uZr,"convbert"),uZr.forEach(t),Rxo=r(K6e," \u2014 "),yD=s(K6e,"A",{href:!0});var pZr=n(yD);Sxo=r(pZr,"ConvBertForQuestionAnswering"),pZr.forEach(t),Pxo=r(K6e," (ConvBERT model)"),K6e.forEach(t),$xo=i(P),iT=s(P,"LI",{});var Z6e=n(iT);kne=s(Z6e,"STRONG",{});var _Zr=n(kne);Ixo=r(_Zr,"data2vec-text"),_Zr.forEach(t),jxo=r(Z6e," \u2014 "),wD=s(Z6e,"A",{href:!0});var bZr=n(wD);Dxo=r(bZr,"Data2VecTextForQuestionAnswering"),bZr.forEach(t),Nxo=r(Z6e," (Data2VecText model)"),Z6e.forEach(t),qxo=i(P),dT=s(P,"LI",{});var eAe=n(dT);Rne=s(eAe,"STRONG",{});var vZr=n(Rne);Oxo=r(vZr,"deberta"),vZr.forEach(t),Gxo=r(eAe," \u2014 "),AD=s(eAe,"A",{href:!0});var TZr=n(AD);Xxo=r(TZr,"DebertaForQuestionAnswering"),TZr.forEach(t),Vxo=r(eAe," (DeBERTa model)"),eAe.forEach(t),zxo=i(P),cT=s(P,"LI",{});var oAe=n(cT);Sne=s(oAe,"STRONG",{});var FZr=n(Sne);Wxo=r(FZr,"deberta-v2"),FZr.forEach(t),Qxo=r(oAe," \u2014 "),LD=s(oAe,"A",{href:!0});var CZr=n(LD);Hxo=r(CZr,"DebertaV2ForQuestionAnswering"),CZr.forEach(t),Uxo=r(oAe," (DeBERTa-v2 model)"),oAe.forEach(t),Jxo=i(P),mT=s(P,"LI",{});var rAe=n(mT);Pne=s(rAe,"STRONG",{});var MZr=n(Pne);Yxo=r(MZr,"distilbert"),MZr.forEach(t),Kxo=r(rAe," \u2014 "),BD=s(rAe,"A",{href:!0});var EZr=n(BD);Zxo=r(EZr,"DistilBertForQuestionAnswering"),EZr.forEach(t),eko=r(rAe," (DistilBERT model)"),rAe.forEach(t),oko=i(P),fT=s(P,"LI",{});var tAe=n(fT);$ne=s(tAe,"STRONG",{});var yZr=n($ne);rko=r(yZr,"electra"),yZr.forEach(t),tko=r(tAe," \u2014 "),xD=s(tAe,"A",{href:!0});var wZr=n(xD);ako=r(wZr,"ElectraForQuestionAnswering"),wZr.forEach(t),sko=r(tAe," (ELECTRA model)"),tAe.forEach(t),nko=i(P),gT=s(P,"LI",{});var aAe=n(gT);Ine=s(aAe,"STRONG",{});var AZr=n(Ine);lko=r(AZr,"flaubert"),AZr.forEach(t),iko=r(aAe," \u2014 "),kD=s(aAe,"A",{href:!0});var LZr=n(kD);dko=r(LZr,"FlaubertForQuestionAnsweringSimple"),LZr.forEach(t),cko=r(aAe," (FlauBERT model)"),aAe.forEach(t),mko=i(P),hT=s(P,"LI",{});var sAe=n(hT);jne=s(sAe,"STRONG",{});var BZr=n(jne);fko=r(BZr,"fnet"),BZr.forEach(t),gko=r(sAe," \u2014 "),RD=s(sAe,"A",{href:!0});var xZr=n(RD);hko=r(xZr,"FNetForQuestionAnswering"),xZr.forEach(t),uko=r(sAe," (FNet model)"),sAe.forEach(t),pko=i(P),uT=s(P,"LI",{});var nAe=n(uT);Dne=s(nAe,"STRONG",{});var kZr=n(Dne);_ko=r(kZr,"funnel"),kZr.forEach(t),bko=r(nAe," \u2014 "),SD=s(nAe,"A",{href:!0});var RZr=n(SD);vko=r(RZr,"FunnelForQuestionAnswering"),RZr.forEach(t),Tko=r(nAe," (Funnel Transformer model)"),nAe.forEach(t),Fko=i(P),pT=s(P,"LI",{});var lAe=n(pT);Nne=s(lAe,"STRONG",{});var SZr=n(Nne);Cko=r(SZr,"gptj"),SZr.forEach(t),Mko=r(lAe," \u2014 "),PD=s(lAe,"A",{href:!0});var PZr=n(PD);Eko=r(PZr,"GPTJForQuestionAnswering"),PZr.forEach(t),yko=r(lAe," (GPT-J model)"),lAe.forEach(t),wko=i(P),_T=s(P,"LI",{});var iAe=n(_T);qne=s(iAe,"STRONG",{});var $Zr=n(qne);Ako=r($Zr,"ibert"),$Zr.forEach(t),Lko=r(iAe," \u2014 "),$D=s(iAe,"A",{href:!0});var IZr=n($D);Bko=r(IZr,"IBertForQuestionAnswering"),IZr.forEach(t),xko=r(iAe," (I-BERT model)"),iAe.forEach(t),kko=i(P),bT=s(P,"LI",{});var dAe=n(bT);One=s(dAe,"STRONG",{});var jZr=n(One);Rko=r(jZr,"layoutlmv2"),jZr.forEach(t),Sko=r(dAe," \u2014 "),ID=s(dAe,"A",{href:!0});var DZr=n(ID);Pko=r(DZr,"LayoutLMv2ForQuestionAnswering"),DZr.forEach(t),$ko=r(dAe," (LayoutLMv2 model)"),dAe.forEach(t),Iko=i(P),vT=s(P,"LI",{});var cAe=n(vT);Gne=s(cAe,"STRONG",{});var NZr=n(Gne);jko=r(NZr,"led"),NZr.forEach(t),Dko=r(cAe," \u2014 "),jD=s(cAe,"A",{href:!0});var qZr=n(jD);Nko=r(qZr,"LEDForQuestionAnswering"),qZr.forEach(t),qko=r(cAe," (LED model)"),cAe.forEach(t),Oko=i(P),TT=s(P,"LI",{});var mAe=n(TT);Xne=s(mAe,"STRONG",{});var OZr=n(Xne);Gko=r(OZr,"longformer"),OZr.forEach(t),Xko=r(mAe," \u2014 "),DD=s(mAe,"A",{href:!0});var GZr=n(DD);Vko=r(GZr,"LongformerForQuestionAnswering"),GZr.forEach(t),zko=r(mAe," (Longformer model)"),mAe.forEach(t),Wko=i(P),FT=s(P,"LI",{});var fAe=n(FT);Vne=s(fAe,"STRONG",{});var XZr=n(Vne);Qko=r(XZr,"lxmert"),XZr.forEach(t),Hko=r(fAe," \u2014 "),ND=s(fAe,"A",{href:!0});var VZr=n(ND);Uko=r(VZr,"LxmertForQuestionAnswering"),VZr.forEach(t),Jko=r(fAe," (LXMERT model)"),fAe.forEach(t),Yko=i(P),CT=s(P,"LI",{});var gAe=n(CT);zne=s(gAe,"STRONG",{});var zZr=n(zne);Kko=r(zZr,"mbart"),zZr.forEach(t),Zko=r(gAe," \u2014 "),qD=s(gAe,"A",{href:!0});var WZr=n(qD);eRo=r(WZr,"MBartForQuestionAnswering"),WZr.forEach(t),oRo=r(gAe," (mBART model)"),gAe.forEach(t),rRo=i(P),MT=s(P,"LI",{});var hAe=n(MT);Wne=s(hAe,"STRONG",{});var QZr=n(Wne);tRo=r(QZr,"megatron-bert"),QZr.forEach(t),aRo=r(hAe," \u2014 "),OD=s(hAe,"A",{href:!0});var HZr=n(OD);sRo=r(HZr,"MegatronBertForQuestionAnswering"),HZr.forEach(t),nRo=r(hAe," (MegatronBert model)"),hAe.forEach(t),lRo=i(P),ET=s(P,"LI",{});var uAe=n(ET);Qne=s(uAe,"STRONG",{});var UZr=n(Qne);iRo=r(UZr,"mobilebert"),UZr.forEach(t),dRo=r(uAe," \u2014 "),GD=s(uAe,"A",{href:!0});var JZr=n(GD);cRo=r(JZr,"MobileBertForQuestionAnswering"),JZr.forEach(t),mRo=r(uAe," (MobileBERT model)"),uAe.forEach(t),fRo=i(P),yT=s(P,"LI",{});var pAe=n(yT);Hne=s(pAe,"STRONG",{});var YZr=n(Hne);gRo=r(YZr,"mpnet"),YZr.forEach(t),hRo=r(pAe," \u2014 "),XD=s(pAe,"A",{href:!0});var KZr=n(XD);uRo=r(KZr,"MPNetForQuestionAnswering"),KZr.forEach(t),pRo=r(pAe," (MPNet model)"),pAe.forEach(t),_Ro=i(P),wT=s(P,"LI",{});var _Ae=n(wT);Une=s(_Ae,"STRONG",{});var ZZr=n(Une);bRo=r(ZZr,"nystromformer"),ZZr.forEach(t),vRo=r(_Ae," \u2014 "),VD=s(_Ae,"A",{href:!0});var eet=n(VD);TRo=r(eet,"NystromformerForQuestionAnswering"),eet.forEach(t),FRo=r(_Ae," (Nystromformer model)"),_Ae.forEach(t),CRo=i(P),AT=s(P,"LI",{});var bAe=n(AT);Jne=s(bAe,"STRONG",{});var oet=n(Jne);MRo=r(oet,"qdqbert"),oet.forEach(t),ERo=r(bAe," \u2014 "),zD=s(bAe,"A",{href:!0});var ret=n(zD);yRo=r(ret,"QDQBertForQuestionAnswering"),ret.forEach(t),wRo=r(bAe," (QDQBert model)"),bAe.forEach(t),ARo=i(P),LT=s(P,"LI",{});var vAe=n(LT);Yne=s(vAe,"STRONG",{});var tet=n(Yne);LRo=r(tet,"reformer"),tet.forEach(t),BRo=r(vAe," \u2014 "),WD=s(vAe,"A",{href:!0});var aet=n(WD);xRo=r(aet,"ReformerForQuestionAnswering"),aet.forEach(t),kRo=r(vAe," (Reformer model)"),vAe.forEach(t),RRo=i(P),BT=s(P,"LI",{});var TAe=n(BT);Kne=s(TAe,"STRONG",{});var set=n(Kne);SRo=r(set,"rembert"),set.forEach(t),PRo=r(TAe," \u2014 "),QD=s(TAe,"A",{href:!0});var net=n(QD);$Ro=r(net,"RemBertForQuestionAnswering"),net.forEach(t),IRo=r(TAe," (RemBERT model)"),TAe.forEach(t),jRo=i(P),xT=s(P,"LI",{});var FAe=n(xT);Zne=s(FAe,"STRONG",{});var iet=n(Zne);DRo=r(iet,"roberta"),iet.forEach(t),NRo=r(FAe," \u2014 "),HD=s(FAe,"A",{href:!0});var det=n(HD);qRo=r(det,"RobertaForQuestionAnswering"),det.forEach(t),ORo=r(FAe," (RoBERTa model)"),FAe.forEach(t),GRo=i(P),kT=s(P,"LI",{});var CAe=n(kT);ele=s(CAe,"STRONG",{});var cet=n(ele);XRo=r(cet,"roformer"),cet.forEach(t),VRo=r(CAe," \u2014 "),UD=s(CAe,"A",{href:!0});var met=n(UD);zRo=r(met,"RoFormerForQuestionAnswering"),met.forEach(t),WRo=r(CAe," (RoFormer model)"),CAe.forEach(t),QRo=i(P),RT=s(P,"LI",{});var MAe=n(RT);ole=s(MAe,"STRONG",{});var fet=n(ole);HRo=r(fet,"splinter"),fet.forEach(t),URo=r(MAe," \u2014 "),JD=s(MAe,"A",{href:!0});var get=n(JD);JRo=r(get,"SplinterForQuestionAnswering"),get.forEach(t),YRo=r(MAe," (Splinter model)"),MAe.forEach(t),KRo=i(P),ST=s(P,"LI",{});var EAe=n(ST);rle=s(EAe,"STRONG",{});var het=n(rle);ZRo=r(het,"squeezebert"),het.forEach(t),eSo=r(EAe," \u2014 "),YD=s(EAe,"A",{href:!0});var uet=n(YD);oSo=r(uet,"SqueezeBertForQuestionAnswering"),uet.forEach(t),rSo=r(EAe," (SqueezeBERT model)"),EAe.forEach(t),tSo=i(P),PT=s(P,"LI",{});var yAe=n(PT);tle=s(yAe,"STRONG",{});var pet=n(tle);aSo=r(pet,"xlm"),pet.forEach(t),sSo=r(yAe," \u2014 "),KD=s(yAe,"A",{href:!0});var _et=n(KD);nSo=r(_et,"XLMForQuestionAnsweringSimple"),_et.forEach(t),lSo=r(yAe," (XLM model)"),yAe.forEach(t),iSo=i(P),$T=s(P,"LI",{});var wAe=n($T);ale=s(wAe,"STRONG",{});var bet=n(ale);dSo=r(bet,"xlm-roberta"),bet.forEach(t),cSo=r(wAe," \u2014 "),ZD=s(wAe,"A",{href:!0});var vet=n(ZD);mSo=r(vet,"XLMRobertaForQuestionAnswering"),vet.forEach(t),fSo=r(wAe," (XLM-RoBERTa model)"),wAe.forEach(t),gSo=i(P),IT=s(P,"LI",{});var AAe=n(IT);sle=s(AAe,"STRONG",{});var Tet=n(sle);hSo=r(Tet,"xlm-roberta-xl"),Tet.forEach(t),uSo=r(AAe," \u2014 "),eN=s(AAe,"A",{href:!0});var Fet=n(eN);pSo=r(Fet,"XLMRobertaXLForQuestionAnswering"),Fet.forEach(t),_So=r(AAe," (XLM-RoBERTa-XL model)"),AAe.forEach(t),bSo=i(P),jT=s(P,"LI",{});var LAe=n(jT);nle=s(LAe,"STRONG",{});var Cet=n(nle);vSo=r(Cet,"xlnet"),Cet.forEach(t),TSo=r(LAe," \u2014 "),oN=s(LAe,"A",{href:!0});var Met=n(oN);FSo=r(Met,"XLNetForQuestionAnsweringSimple"),Met.forEach(t),CSo=r(LAe," (XLNet model)"),LAe.forEach(t),MSo=i(P),DT=s(P,"LI",{});var BAe=n(DT);lle=s(BAe,"STRONG",{});var Eet=n(lle);ESo=r(Eet,"yoso"),Eet.forEach(t),ySo=r(BAe," \u2014 "),rN=s(BAe,"A",{href:!0});var yet=n(rN);wSo=r(yet,"YosoForQuestionAnswering"),yet.forEach(t),ASo=r(BAe," (YOSO model)"),BAe.forEach(t),P.forEach(t),LSo=i(Ut),NT=s(Ut,"P",{});var xAe=n(NT);BSo=r(xAe,"The model is set in evaluation mode by default using "),ile=s(xAe,"CODE",{});var wet=n(ile);xSo=r(wet,"model.eval()"),wet.forEach(t),kSo=r(xAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=s(xAe,"CODE",{});var Aet=n(dle);RSo=r(Aet,"model.train()"),Aet.forEach(t),xAe.forEach(t),SSo=i(Ut),cle=s(Ut,"P",{});var Let=n(cle);PSo=r(Let,"Examples:"),Let.forEach(t),$So=i(Ut),f(qw.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),kxe=i(d),wd=s(d,"H2",{class:!0});var qRe=n(wd);qT=s(qRe,"A",{id:!0,class:!0,href:!0});var Bet=n(qT);mle=s(Bet,"SPAN",{});var xet=n(mle);f(Ow.$$.fragment,xet),xet.forEach(t),Bet.forEach(t),ISo=i(qRe),fle=s(qRe,"SPAN",{});var ket=n(fle);jSo=r(ket,"AutoModelForTableQuestionAnswering"),ket.forEach(t),qRe.forEach(t),Rxe=i(d),nr=s(d,"DIV",{class:!0});var gl=n(nr);f(Gw.$$.fragment,gl),DSo=i(gl),Ad=s(gl,"P",{});var Oz=n(Ad);NSo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gle=s(Oz,"CODE",{});var Ret=n(gle);qSo=r(Ret,"from_pretrained()"),Ret.forEach(t),OSo=r(Oz,"class method or the "),hle=s(Oz,"CODE",{});var Set=n(hle);GSo=r(Set,"from_config()"),Set.forEach(t),XSo=r(Oz,`class
method.`),Oz.forEach(t),VSo=i(gl),Xw=s(gl,"P",{});var ORe=n(Xw);zSo=r(ORe,"This class cannot be instantiated directly using "),ule=s(ORe,"CODE",{});var Pet=n(ule);WSo=r(Pet,"__init__()"),Pet.forEach(t),QSo=r(ORe," (throws an error)."),ORe.forEach(t),HSo=i(gl),et=s(gl,"DIV",{class:!0});var hl=n(et);f(Vw.$$.fragment,hl),USo=i(hl),ple=s(hl,"P",{});var $et=n(ple);JSo=r($et,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$et.forEach(t),YSo=i(hl),Ld=s(hl,"P",{});var Gz=n(Ld);KSo=r(Gz,`Note:
Loading a model from its configuration file does `),_le=s(Gz,"STRONG",{});var Iet=n(_le);ZSo=r(Iet,"not"),Iet.forEach(t),ePo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=s(Gz,"CODE",{});var jet=n(ble);oPo=r(jet,"from_pretrained()"),jet.forEach(t),rPo=r(Gz,"to load the model weights."),Gz.forEach(t),tPo=i(hl),vle=s(hl,"P",{});var Det=n(vle);aPo=r(Det,"Examples:"),Det.forEach(t),sPo=i(hl),f(zw.$$.fragment,hl),hl.forEach(t),nPo=i(gl),Qe=s(gl,"DIV",{class:!0});var Jt=n(Qe);f(Ww.$$.fragment,Jt),lPo=i(Jt),Tle=s(Jt,"P",{});var Net=n(Tle);iPo=r(Net,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Net.forEach(t),dPo=i(Jt),Za=s(Jt,"P",{});var a5=n(Za);cPo=r(a5,"The model class to instantiate is selected based on the "),Fle=s(a5,"CODE",{});var qet=n(Fle);mPo=r(qet,"model_type"),qet.forEach(t),fPo=r(a5,` property of the config object (either
passed as an argument or loaded from `),Cle=s(a5,"CODE",{});var Oet=n(Cle);gPo=r(Oet,"pretrained_model_name_or_path"),Oet.forEach(t),hPo=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=s(a5,"CODE",{});var Get=n(Mle);uPo=r(Get,"pretrained_model_name_or_path"),Get.forEach(t),pPo=r(a5,":"),a5.forEach(t),_Po=i(Jt),Ele=s(Jt,"UL",{});var Xet=n(Ele);OT=s(Xet,"LI",{});var kAe=n(OT);yle=s(kAe,"STRONG",{});var Vet=n(yle);bPo=r(Vet,"tapas"),Vet.forEach(t),vPo=r(kAe," \u2014 "),tN=s(kAe,"A",{href:!0});var zet=n(tN);TPo=r(zet,"TapasForQuestionAnswering"),zet.forEach(t),FPo=r(kAe," (TAPAS model)"),kAe.forEach(t),Xet.forEach(t),CPo=i(Jt),GT=s(Jt,"P",{});var RAe=n(GT);MPo=r(RAe,"The model is set in evaluation mode by default using "),wle=s(RAe,"CODE",{});var Wet=n(wle);EPo=r(Wet,"model.eval()"),Wet.forEach(t),yPo=r(RAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ale=s(RAe,"CODE",{});var Qet=n(Ale);wPo=r(Qet,"model.train()"),Qet.forEach(t),RAe.forEach(t),APo=i(Jt),Lle=s(Jt,"P",{});var Het=n(Lle);LPo=r(Het,"Examples:"),Het.forEach(t),BPo=i(Jt),f(Qw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Sxe=i(d),Bd=s(d,"H2",{class:!0});var GRe=n(Bd);XT=s(GRe,"A",{id:!0,class:!0,href:!0});var Uet=n(XT);Ble=s(Uet,"SPAN",{});var Jet=n(Ble);f(Hw.$$.fragment,Jet),Jet.forEach(t),Uet.forEach(t),xPo=i(GRe),xle=s(GRe,"SPAN",{});var Yet=n(xle);kPo=r(Yet,"AutoModelForImageClassification"),Yet.forEach(t),GRe.forEach(t),Pxe=i(d),lr=s(d,"DIV",{class:!0});var ul=n(lr);f(Uw.$$.fragment,ul),RPo=i(ul),xd=s(ul,"P",{});var Xz=n(xd);SPo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kle=s(Xz,"CODE",{});var Ket=n(kle);PPo=r(Ket,"from_pretrained()"),Ket.forEach(t),$Po=r(Xz,"class method or the "),Rle=s(Xz,"CODE",{});var Zet=n(Rle);IPo=r(Zet,"from_config()"),Zet.forEach(t),jPo=r(Xz,`class
method.`),Xz.forEach(t),DPo=i(ul),Jw=s(ul,"P",{});var XRe=n(Jw);NPo=r(XRe,"This class cannot be instantiated directly using "),Sle=s(XRe,"CODE",{});var eot=n(Sle);qPo=r(eot,"__init__()"),eot.forEach(t),OPo=r(XRe," (throws an error)."),XRe.forEach(t),GPo=i(ul),ot=s(ul,"DIV",{class:!0});var pl=n(ot);f(Yw.$$.fragment,pl),XPo=i(pl),Ple=s(pl,"P",{});var oot=n(Ple);VPo=r(oot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oot.forEach(t),zPo=i(pl),kd=s(pl,"P",{});var Vz=n(kd);WPo=r(Vz,`Note:
Loading a model from its configuration file does `),$le=s(Vz,"STRONG",{});var rot=n($le);QPo=r(rot,"not"),rot.forEach(t),HPo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ile=s(Vz,"CODE",{});var tot=n(Ile);UPo=r(tot,"from_pretrained()"),tot.forEach(t),JPo=r(Vz,"to load the model weights."),Vz.forEach(t),YPo=i(pl),jle=s(pl,"P",{});var aot=n(jle);KPo=r(aot,"Examples:"),aot.forEach(t),ZPo=i(pl),f(Kw.$$.fragment,pl),pl.forEach(t),e$o=i(ul),He=s(ul,"DIV",{class:!0});var Yt=n(He);f(Zw.$$.fragment,Yt),o$o=i(Yt),Dle=s(Yt,"P",{});var sot=n(Dle);r$o=r(sot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sot.forEach(t),t$o=i(Yt),es=s(Yt,"P",{});var s5=n(es);a$o=r(s5,"The model class to instantiate is selected based on the "),Nle=s(s5,"CODE",{});var not=n(Nle);s$o=r(not,"model_type"),not.forEach(t),n$o=r(s5,` property of the config object (either
passed as an argument or loaded from `),qle=s(s5,"CODE",{});var lot=n(qle);l$o=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),i$o=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ole=s(s5,"CODE",{});var iot=n(Ole);d$o=r(iot,"pretrained_model_name_or_path"),iot.forEach(t),c$o=r(s5,":"),s5.forEach(t),m$o=i(Yt),Fe=s(Yt,"UL",{});var no=n(Fe);VT=s(no,"LI",{});var SAe=n(VT);Gle=s(SAe,"STRONG",{});var dot=n(Gle);f$o=r(dot,"beit"),dot.forEach(t),g$o=r(SAe," \u2014 "),aN=s(SAe,"A",{href:!0});var cot=n(aN);h$o=r(cot,"BeitForImageClassification"),cot.forEach(t),u$o=r(SAe," (BEiT model)"),SAe.forEach(t),p$o=i(no),zT=s(no,"LI",{});var PAe=n(zT);Xle=s(PAe,"STRONG",{});var mot=n(Xle);_$o=r(mot,"convnext"),mot.forEach(t),b$o=r(PAe," \u2014 "),sN=s(PAe,"A",{href:!0});var fot=n(sN);v$o=r(fot,"ConvNextForImageClassification"),fot.forEach(t),T$o=r(PAe," (ConvNext model)"),PAe.forEach(t),F$o=i(no),qn=s(no,"LI",{});var I7=n(qn);Vle=s(I7,"STRONG",{});var got=n(Vle);C$o=r(got,"deit"),got.forEach(t),M$o=r(I7," \u2014 "),nN=s(I7,"A",{href:!0});var hot=n(nN);E$o=r(hot,"DeiTForImageClassification"),hot.forEach(t),y$o=r(I7," or "),lN=s(I7,"A",{href:!0});var uot=n(lN);w$o=r(uot,"DeiTForImageClassificationWithTeacher"),uot.forEach(t),A$o=r(I7," (DeiT model)"),I7.forEach(t),L$o=i(no),WT=s(no,"LI",{});var $Ae=n(WT);zle=s($Ae,"STRONG",{});var pot=n(zle);B$o=r(pot,"imagegpt"),pot.forEach(t),x$o=r($Ae," \u2014 "),iN=s($Ae,"A",{href:!0});var _ot=n(iN);k$o=r(_ot,"ImageGPTForImageClassification"),_ot.forEach(t),R$o=r($Ae," (ImageGPT model)"),$Ae.forEach(t),S$o=i(no),ma=s(no,"LI",{});var Sm=n(ma);Wle=s(Sm,"STRONG",{});var bot=n(Wle);P$o=r(bot,"perceiver"),bot.forEach(t),$$o=r(Sm," \u2014 "),dN=s(Sm,"A",{href:!0});var vot=n(dN);I$o=r(vot,"PerceiverForImageClassificationLearned"),vot.forEach(t),j$o=r(Sm," or "),cN=s(Sm,"A",{href:!0});var Tot=n(cN);D$o=r(Tot,"PerceiverForImageClassificationFourier"),Tot.forEach(t),N$o=r(Sm," or "),mN=s(Sm,"A",{href:!0});var Fot=n(mN);q$o=r(Fot,"PerceiverForImageClassificationConvProcessing"),Fot.forEach(t),O$o=r(Sm," (Perceiver model)"),Sm.forEach(t),G$o=i(no),QT=s(no,"LI",{});var IAe=n(QT);Qle=s(IAe,"STRONG",{});var Cot=n(Qle);X$o=r(Cot,"poolformer"),Cot.forEach(t),V$o=r(IAe," \u2014 "),fN=s(IAe,"A",{href:!0});var Mot=n(fN);z$o=r(Mot,"PoolFormerForImageClassification"),Mot.forEach(t),W$o=r(IAe," (PoolFormer model)"),IAe.forEach(t),Q$o=i(no),HT=s(no,"LI",{});var jAe=n(HT);Hle=s(jAe,"STRONG",{});var Eot=n(Hle);H$o=r(Eot,"segformer"),Eot.forEach(t),U$o=r(jAe," \u2014 "),gN=s(jAe,"A",{href:!0});var yot=n(gN);J$o=r(yot,"SegformerForImageClassification"),yot.forEach(t),Y$o=r(jAe," (SegFormer model)"),jAe.forEach(t),K$o=i(no),UT=s(no,"LI",{});var DAe=n(UT);Ule=s(DAe,"STRONG",{});var wot=n(Ule);Z$o=r(wot,"swin"),wot.forEach(t),eIo=r(DAe," \u2014 "),hN=s(DAe,"A",{href:!0});var Aot=n(hN);oIo=r(Aot,"SwinForImageClassification"),Aot.forEach(t),rIo=r(DAe," (Swin model)"),DAe.forEach(t),tIo=i(no),JT=s(no,"LI",{});var NAe=n(JT);Jle=s(NAe,"STRONG",{});var Lot=n(Jle);aIo=r(Lot,"vit"),Lot.forEach(t),sIo=r(NAe," \u2014 "),uN=s(NAe,"A",{href:!0});var Bot=n(uN);nIo=r(Bot,"ViTForImageClassification"),Bot.forEach(t),lIo=r(NAe," (ViT model)"),NAe.forEach(t),no.forEach(t),iIo=i(Yt),YT=s(Yt,"P",{});var qAe=n(YT);dIo=r(qAe,"The model is set in evaluation mode by default using "),Yle=s(qAe,"CODE",{});var xot=n(Yle);cIo=r(xot,"model.eval()"),xot.forEach(t),mIo=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=s(qAe,"CODE",{});var kot=n(Kle);fIo=r(kot,"model.train()"),kot.forEach(t),qAe.forEach(t),gIo=i(Yt),Zle=s(Yt,"P",{});var Rot=n(Zle);hIo=r(Rot,"Examples:"),Rot.forEach(t),uIo=i(Yt),f(e6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),$xe=i(d),Rd=s(d,"H2",{class:!0});var VRe=n(Rd);KT=s(VRe,"A",{id:!0,class:!0,href:!0});var Sot=n(KT);eie=s(Sot,"SPAN",{});var Pot=n(eie);f(o6.$$.fragment,Pot),Pot.forEach(t),Sot.forEach(t),pIo=i(VRe),oie=s(VRe,"SPAN",{});var $ot=n(oie);_Io=r($ot,"AutoModelForVision2Seq"),$ot.forEach(t),VRe.forEach(t),Ixe=i(d),ir=s(d,"DIV",{class:!0});var _l=n(ir);f(r6.$$.fragment,_l),bIo=i(_l),Sd=s(_l,"P",{});var zz=n(Sd);vIo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rie=s(zz,"CODE",{});var Iot=n(rie);TIo=r(Iot,"from_pretrained()"),Iot.forEach(t),FIo=r(zz,"class method or the "),tie=s(zz,"CODE",{});var jot=n(tie);CIo=r(jot,"from_config()"),jot.forEach(t),MIo=r(zz,`class
method.`),zz.forEach(t),EIo=i(_l),t6=s(_l,"P",{});var zRe=n(t6);yIo=r(zRe,"This class cannot be instantiated directly using "),aie=s(zRe,"CODE",{});var Dot=n(aie);wIo=r(Dot,"__init__()"),Dot.forEach(t),AIo=r(zRe," (throws an error)."),zRe.forEach(t),LIo=i(_l),rt=s(_l,"DIV",{class:!0});var bl=n(rt);f(a6.$$.fragment,bl),BIo=i(bl),sie=s(bl,"P",{});var Not=n(sie);xIo=r(Not,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Not.forEach(t),kIo=i(bl),Pd=s(bl,"P",{});var Wz=n(Pd);RIo=r(Wz,`Note:
Loading a model from its configuration file does `),nie=s(Wz,"STRONG",{});var qot=n(nie);SIo=r(qot,"not"),qot.forEach(t),PIo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lie=s(Wz,"CODE",{});var Oot=n(lie);$Io=r(Oot,"from_pretrained()"),Oot.forEach(t),IIo=r(Wz,"to load the model weights."),Wz.forEach(t),jIo=i(bl),iie=s(bl,"P",{});var Got=n(iie);DIo=r(Got,"Examples:"),Got.forEach(t),NIo=i(bl),f(s6.$$.fragment,bl),bl.forEach(t),qIo=i(_l),Ue=s(_l,"DIV",{class:!0});var Kt=n(Ue);f(n6.$$.fragment,Kt),OIo=i(Kt),die=s(Kt,"P",{});var Xot=n(die);GIo=r(Xot,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xot.forEach(t),XIo=i(Kt),os=s(Kt,"P",{});var n5=n(os);VIo=r(n5,"The model class to instantiate is selected based on the "),cie=s(n5,"CODE",{});var Vot=n(cie);zIo=r(Vot,"model_type"),Vot.forEach(t),WIo=r(n5,` property of the config object (either
passed as an argument or loaded from `),mie=s(n5,"CODE",{});var zot=n(mie);QIo=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),HIo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=s(n5,"CODE",{});var Wot=n(fie);UIo=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),JIo=r(n5,":"),n5.forEach(t),YIo=i(Kt),gie=s(Kt,"UL",{});var Qot=n(gie);ZT=s(Qot,"LI",{});var OAe=n(ZT);hie=s(OAe,"STRONG",{});var Hot=n(hie);KIo=r(Hot,"vision-encoder-decoder"),Hot.forEach(t),ZIo=r(OAe," \u2014 "),pN=s(OAe,"A",{href:!0});var Uot=n(pN);ejo=r(Uot,"VisionEncoderDecoderModel"),Uot.forEach(t),ojo=r(OAe," (Vision Encoder decoder model)"),OAe.forEach(t),Qot.forEach(t),rjo=i(Kt),e1=s(Kt,"P",{});var GAe=n(e1);tjo=r(GAe,"The model is set in evaluation mode by default using "),uie=s(GAe,"CODE",{});var Jot=n(uie);ajo=r(Jot,"model.eval()"),Jot.forEach(t),sjo=r(GAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pie=s(GAe,"CODE",{});var Yot=n(pie);njo=r(Yot,"model.train()"),Yot.forEach(t),GAe.forEach(t),ljo=i(Kt),_ie=s(Kt,"P",{});var Kot=n(_ie);ijo=r(Kot,"Examples:"),Kot.forEach(t),djo=i(Kt),f(l6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),jxe=i(d),$d=s(d,"H2",{class:!0});var WRe=n($d);o1=s(WRe,"A",{id:!0,class:!0,href:!0});var Zot=n(o1);bie=s(Zot,"SPAN",{});var ert=n(bie);f(i6.$$.fragment,ert),ert.forEach(t),Zot.forEach(t),cjo=i(WRe),vie=s(WRe,"SPAN",{});var ort=n(vie);mjo=r(ort,"AutoModelForAudioClassification"),ort.forEach(t),WRe.forEach(t),Dxe=i(d),dr=s(d,"DIV",{class:!0});var vl=n(dr);f(d6.$$.fragment,vl),fjo=i(vl),Id=s(vl,"P",{});var Qz=n(Id);gjo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tie=s(Qz,"CODE",{});var rrt=n(Tie);hjo=r(rrt,"from_pretrained()"),rrt.forEach(t),ujo=r(Qz,"class method or the "),Fie=s(Qz,"CODE",{});var trt=n(Fie);pjo=r(trt,"from_config()"),trt.forEach(t),_jo=r(Qz,`class
method.`),Qz.forEach(t),bjo=i(vl),c6=s(vl,"P",{});var QRe=n(c6);vjo=r(QRe,"This class cannot be instantiated directly using "),Cie=s(QRe,"CODE",{});var art=n(Cie);Tjo=r(art,"__init__()"),art.forEach(t),Fjo=r(QRe," (throws an error)."),QRe.forEach(t),Cjo=i(vl),tt=s(vl,"DIV",{class:!0});var Tl=n(tt);f(m6.$$.fragment,Tl),Mjo=i(Tl),Mie=s(Tl,"P",{});var srt=n(Mie);Ejo=r(srt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),srt.forEach(t),yjo=i(Tl),jd=s(Tl,"P",{});var Hz=n(jd);wjo=r(Hz,`Note:
Loading a model from its configuration file does `),Eie=s(Hz,"STRONG",{});var nrt=n(Eie);Ajo=r(nrt,"not"),nrt.forEach(t),Ljo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yie=s(Hz,"CODE",{});var lrt=n(yie);Bjo=r(lrt,"from_pretrained()"),lrt.forEach(t),xjo=r(Hz,"to load the model weights."),Hz.forEach(t),kjo=i(Tl),wie=s(Tl,"P",{});var irt=n(wie);Rjo=r(irt,"Examples:"),irt.forEach(t),Sjo=i(Tl),f(f6.$$.fragment,Tl),Tl.forEach(t),Pjo=i(vl),Je=s(vl,"DIV",{class:!0});var Zt=n(Je);f(g6.$$.fragment,Zt),$jo=i(Zt),Aie=s(Zt,"P",{});var drt=n(Aie);Ijo=r(drt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),drt.forEach(t),jjo=i(Zt),rs=s(Zt,"P",{});var l5=n(rs);Djo=r(l5,"The model class to instantiate is selected based on the "),Lie=s(l5,"CODE",{});var crt=n(Lie);Njo=r(crt,"model_type"),crt.forEach(t),qjo=r(l5,` property of the config object (either
passed as an argument or loaded from `),Bie=s(l5,"CODE",{});var mrt=n(Bie);Ojo=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),Gjo=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=s(l5,"CODE",{});var frt=n(xie);Xjo=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),Vjo=r(l5,":"),l5.forEach(t),zjo=i(Zt),xe=s(Zt,"UL",{});var qo=n(xe);r1=s(qo,"LI",{});var XAe=n(r1);kie=s(XAe,"STRONG",{});var grt=n(kie);Wjo=r(grt,"data2vec-audio"),grt.forEach(t),Qjo=r(XAe," \u2014 "),_N=s(XAe,"A",{href:!0});var hrt=n(_N);Hjo=r(hrt,"Data2VecAudioForSequenceClassification"),hrt.forEach(t),Ujo=r(XAe," (Data2VecAudio model)"),XAe.forEach(t),Jjo=i(qo),t1=s(qo,"LI",{});var VAe=n(t1);Rie=s(VAe,"STRONG",{});var urt=n(Rie);Yjo=r(urt,"hubert"),urt.forEach(t),Kjo=r(VAe," \u2014 "),bN=s(VAe,"A",{href:!0});var prt=n(bN);Zjo=r(prt,"HubertForSequenceClassification"),prt.forEach(t),eDo=r(VAe," (Hubert model)"),VAe.forEach(t),oDo=i(qo),a1=s(qo,"LI",{});var zAe=n(a1);Sie=s(zAe,"STRONG",{});var _rt=n(Sie);rDo=r(_rt,"sew"),_rt.forEach(t),tDo=r(zAe," \u2014 "),vN=s(zAe,"A",{href:!0});var brt=n(vN);aDo=r(brt,"SEWForSequenceClassification"),brt.forEach(t),sDo=r(zAe," (SEW model)"),zAe.forEach(t),nDo=i(qo),s1=s(qo,"LI",{});var WAe=n(s1);Pie=s(WAe,"STRONG",{});var vrt=n(Pie);lDo=r(vrt,"sew-d"),vrt.forEach(t),iDo=r(WAe," \u2014 "),TN=s(WAe,"A",{href:!0});var Trt=n(TN);dDo=r(Trt,"SEWDForSequenceClassification"),Trt.forEach(t),cDo=r(WAe," (SEW-D model)"),WAe.forEach(t),mDo=i(qo),n1=s(qo,"LI",{});var QAe=n(n1);$ie=s(QAe,"STRONG",{});var Frt=n($ie);fDo=r(Frt,"unispeech"),Frt.forEach(t),gDo=r(QAe," \u2014 "),FN=s(QAe,"A",{href:!0});var Crt=n(FN);hDo=r(Crt,"UniSpeechForSequenceClassification"),Crt.forEach(t),uDo=r(QAe," (UniSpeech model)"),QAe.forEach(t),pDo=i(qo),l1=s(qo,"LI",{});var HAe=n(l1);Iie=s(HAe,"STRONG",{});var Mrt=n(Iie);_Do=r(Mrt,"unispeech-sat"),Mrt.forEach(t),bDo=r(HAe," \u2014 "),CN=s(HAe,"A",{href:!0});var Ert=n(CN);vDo=r(Ert,"UniSpeechSatForSequenceClassification"),Ert.forEach(t),TDo=r(HAe," (UniSpeechSat model)"),HAe.forEach(t),FDo=i(qo),i1=s(qo,"LI",{});var UAe=n(i1);jie=s(UAe,"STRONG",{});var yrt=n(jie);CDo=r(yrt,"wav2vec2"),yrt.forEach(t),MDo=r(UAe," \u2014 "),MN=s(UAe,"A",{href:!0});var wrt=n(MN);EDo=r(wrt,"Wav2Vec2ForSequenceClassification"),wrt.forEach(t),yDo=r(UAe," (Wav2Vec2 model)"),UAe.forEach(t),wDo=i(qo),d1=s(qo,"LI",{});var JAe=n(d1);Die=s(JAe,"STRONG",{});var Art=n(Die);ADo=r(Art,"wavlm"),Art.forEach(t),LDo=r(JAe," \u2014 "),EN=s(JAe,"A",{href:!0});var Lrt=n(EN);BDo=r(Lrt,"WavLMForSequenceClassification"),Lrt.forEach(t),xDo=r(JAe," (WavLM model)"),JAe.forEach(t),qo.forEach(t),kDo=i(Zt),c1=s(Zt,"P",{});var YAe=n(c1);RDo=r(YAe,"The model is set in evaluation mode by default using "),Nie=s(YAe,"CODE",{});var Brt=n(Nie);SDo=r(Brt,"model.eval()"),Brt.forEach(t),PDo=r(YAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=s(YAe,"CODE",{});var xrt=n(qie);$Do=r(xrt,"model.train()"),xrt.forEach(t),YAe.forEach(t),IDo=i(Zt),Oie=s(Zt,"P",{});var krt=n(Oie);jDo=r(krt,"Examples:"),krt.forEach(t),DDo=i(Zt),f(h6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Nxe=i(d),Dd=s(d,"H2",{class:!0});var HRe=n(Dd);m1=s(HRe,"A",{id:!0,class:!0,href:!0});var Rrt=n(m1);Gie=s(Rrt,"SPAN",{});var Srt=n(Gie);f(u6.$$.fragment,Srt),Srt.forEach(t),Rrt.forEach(t),NDo=i(HRe),Xie=s(HRe,"SPAN",{});var Prt=n(Xie);qDo=r(Prt,"AutoModelForAudioFrameClassification"),Prt.forEach(t),HRe.forEach(t),qxe=i(d),cr=s(d,"DIV",{class:!0});var Fl=n(cr);f(p6.$$.fragment,Fl),ODo=i(Fl),Nd=s(Fl,"P",{});var Uz=n(Nd);GDo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Vie=s(Uz,"CODE",{});var $rt=n(Vie);XDo=r($rt,"from_pretrained()"),$rt.forEach(t),VDo=r(Uz,"class method or the "),zie=s(Uz,"CODE",{});var Irt=n(zie);zDo=r(Irt,"from_config()"),Irt.forEach(t),WDo=r(Uz,`class
method.`),Uz.forEach(t),QDo=i(Fl),_6=s(Fl,"P",{});var URe=n(_6);HDo=r(URe,"This class cannot be instantiated directly using "),Wie=s(URe,"CODE",{});var jrt=n(Wie);UDo=r(jrt,"__init__()"),jrt.forEach(t),JDo=r(URe," (throws an error)."),URe.forEach(t),YDo=i(Fl),at=s(Fl,"DIV",{class:!0});var Cl=n(at);f(b6.$$.fragment,Cl),KDo=i(Cl),Qie=s(Cl,"P",{});var Drt=n(Qie);ZDo=r(Drt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Drt.forEach(t),eNo=i(Cl),qd=s(Cl,"P",{});var Jz=n(qd);oNo=r(Jz,`Note:
Loading a model from its configuration file does `),Hie=s(Jz,"STRONG",{});var Nrt=n(Hie);rNo=r(Nrt,"not"),Nrt.forEach(t),tNo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uie=s(Jz,"CODE",{});var qrt=n(Uie);aNo=r(qrt,"from_pretrained()"),qrt.forEach(t),sNo=r(Jz,"to load the model weights."),Jz.forEach(t),nNo=i(Cl),Jie=s(Cl,"P",{});var Ort=n(Jie);lNo=r(Ort,"Examples:"),Ort.forEach(t),iNo=i(Cl),f(v6.$$.fragment,Cl),Cl.forEach(t),dNo=i(Fl),Ye=s(Fl,"DIV",{class:!0});var ea=n(Ye);f(T6.$$.fragment,ea),cNo=i(ea),Yie=s(ea,"P",{});var Grt=n(Yie);mNo=r(Grt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Grt.forEach(t),fNo=i(ea),ts=s(ea,"P",{});var i5=n(ts);gNo=r(i5,"The model class to instantiate is selected based on the "),Kie=s(i5,"CODE",{});var Xrt=n(Kie);hNo=r(Xrt,"model_type"),Xrt.forEach(t),uNo=r(i5,` property of the config object (either
passed as an argument or loaded from `),Zie=s(i5,"CODE",{});var Vrt=n(Zie);pNo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),_No=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=s(i5,"CODE",{});var zrt=n(ede);bNo=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),vNo=r(i5,":"),i5.forEach(t),TNo=i(ea),as=s(ea,"UL",{});var d5=n(as);f1=s(d5,"LI",{});var KAe=n(f1);ode=s(KAe,"STRONG",{});var Wrt=n(ode);FNo=r(Wrt,"data2vec-audio"),Wrt.forEach(t),CNo=r(KAe," \u2014 "),yN=s(KAe,"A",{href:!0});var Qrt=n(yN);MNo=r(Qrt,"Data2VecAudioForAudioFrameClassification"),Qrt.forEach(t),ENo=r(KAe," (Data2VecAudio model)"),KAe.forEach(t),yNo=i(d5),g1=s(d5,"LI",{});var ZAe=n(g1);rde=s(ZAe,"STRONG",{});var Hrt=n(rde);wNo=r(Hrt,"unispeech-sat"),Hrt.forEach(t),ANo=r(ZAe," \u2014 "),wN=s(ZAe,"A",{href:!0});var Urt=n(wN);LNo=r(Urt,"UniSpeechSatForAudioFrameClassification"),Urt.forEach(t),BNo=r(ZAe," (UniSpeechSat model)"),ZAe.forEach(t),xNo=i(d5),h1=s(d5,"LI",{});var e0e=n(h1);tde=s(e0e,"STRONG",{});var Jrt=n(tde);kNo=r(Jrt,"wav2vec2"),Jrt.forEach(t),RNo=r(e0e," \u2014 "),AN=s(e0e,"A",{href:!0});var Yrt=n(AN);SNo=r(Yrt,"Wav2Vec2ForAudioFrameClassification"),Yrt.forEach(t),PNo=r(e0e," (Wav2Vec2 model)"),e0e.forEach(t),$No=i(d5),u1=s(d5,"LI",{});var o0e=n(u1);ade=s(o0e,"STRONG",{});var Krt=n(ade);INo=r(Krt,"wavlm"),Krt.forEach(t),jNo=r(o0e," \u2014 "),LN=s(o0e,"A",{href:!0});var Zrt=n(LN);DNo=r(Zrt,"WavLMForAudioFrameClassification"),Zrt.forEach(t),NNo=r(o0e," (WavLM model)"),o0e.forEach(t),d5.forEach(t),qNo=i(ea),p1=s(ea,"P",{});var r0e=n(p1);ONo=r(r0e,"The model is set in evaluation mode by default using "),sde=s(r0e,"CODE",{});var ett=n(sde);GNo=r(ett,"model.eval()"),ett.forEach(t),XNo=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nde=s(r0e,"CODE",{});var ott=n(nde);VNo=r(ott,"model.train()"),ott.forEach(t),r0e.forEach(t),zNo=i(ea),lde=s(ea,"P",{});var rtt=n(lde);WNo=r(rtt,"Examples:"),rtt.forEach(t),QNo=i(ea),f(F6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Oxe=i(d),Od=s(d,"H2",{class:!0});var JRe=n(Od);_1=s(JRe,"A",{id:!0,class:!0,href:!0});var ttt=n(_1);ide=s(ttt,"SPAN",{});var att=n(ide);f(C6.$$.fragment,att),att.forEach(t),ttt.forEach(t),HNo=i(JRe),dde=s(JRe,"SPAN",{});var stt=n(dde);UNo=r(stt,"AutoModelForCTC"),stt.forEach(t),JRe.forEach(t),Gxe=i(d),mr=s(d,"DIV",{class:!0});var Ml=n(mr);f(M6.$$.fragment,Ml),JNo=i(Ml),Gd=s(Ml,"P",{});var Yz=n(Gd);YNo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cde=s(Yz,"CODE",{});var ntt=n(cde);KNo=r(ntt,"from_pretrained()"),ntt.forEach(t),ZNo=r(Yz,"class method or the "),mde=s(Yz,"CODE",{});var ltt=n(mde);eqo=r(ltt,"from_config()"),ltt.forEach(t),oqo=r(Yz,`class
method.`),Yz.forEach(t),rqo=i(Ml),E6=s(Ml,"P",{});var YRe=n(E6);tqo=r(YRe,"This class cannot be instantiated directly using "),fde=s(YRe,"CODE",{});var itt=n(fde);aqo=r(itt,"__init__()"),itt.forEach(t),sqo=r(YRe," (throws an error)."),YRe.forEach(t),nqo=i(Ml),st=s(Ml,"DIV",{class:!0});var El=n(st);f(y6.$$.fragment,El),lqo=i(El),gde=s(El,"P",{});var dtt=n(gde);iqo=r(dtt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dtt.forEach(t),dqo=i(El),Xd=s(El,"P",{});var Kz=n(Xd);cqo=r(Kz,`Note:
Loading a model from its configuration file does `),hde=s(Kz,"STRONG",{});var ctt=n(hde);mqo=r(ctt,"not"),ctt.forEach(t),fqo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=s(Kz,"CODE",{});var mtt=n(ude);gqo=r(mtt,"from_pretrained()"),mtt.forEach(t),hqo=r(Kz,"to load the model weights."),Kz.forEach(t),uqo=i(El),pde=s(El,"P",{});var ftt=n(pde);pqo=r(ftt,"Examples:"),ftt.forEach(t),_qo=i(El),f(w6.$$.fragment,El),El.forEach(t),bqo=i(Ml),Ke=s(Ml,"DIV",{class:!0});var oa=n(Ke);f(A6.$$.fragment,oa),vqo=i(oa),_de=s(oa,"P",{});var gtt=n(_de);Tqo=r(gtt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gtt.forEach(t),Fqo=i(oa),ss=s(oa,"P",{});var c5=n(ss);Cqo=r(c5,"The model class to instantiate is selected based on the "),bde=s(c5,"CODE",{});var htt=n(bde);Mqo=r(htt,"model_type"),htt.forEach(t),Eqo=r(c5,` property of the config object (either
passed as an argument or loaded from `),vde=s(c5,"CODE",{});var utt=n(vde);yqo=r(utt,"pretrained_model_name_or_path"),utt.forEach(t),wqo=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tde=s(c5,"CODE",{});var ptt=n(Tde);Aqo=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),Lqo=r(c5,":"),c5.forEach(t),Bqo=i(oa),ke=s(oa,"UL",{});var Oo=n(ke);b1=s(Oo,"LI",{});var t0e=n(b1);Fde=s(t0e,"STRONG",{});var _tt=n(Fde);xqo=r(_tt,"data2vec-audio"),_tt.forEach(t),kqo=r(t0e," \u2014 "),BN=s(t0e,"A",{href:!0});var btt=n(BN);Rqo=r(btt,"Data2VecAudioForCTC"),btt.forEach(t),Sqo=r(t0e," (Data2VecAudio model)"),t0e.forEach(t),Pqo=i(Oo),v1=s(Oo,"LI",{});var a0e=n(v1);Cde=s(a0e,"STRONG",{});var vtt=n(Cde);$qo=r(vtt,"hubert"),vtt.forEach(t),Iqo=r(a0e," \u2014 "),xN=s(a0e,"A",{href:!0});var Ttt=n(xN);jqo=r(Ttt,"HubertForCTC"),Ttt.forEach(t),Dqo=r(a0e," (Hubert model)"),a0e.forEach(t),Nqo=i(Oo),T1=s(Oo,"LI",{});var s0e=n(T1);Mde=s(s0e,"STRONG",{});var Ftt=n(Mde);qqo=r(Ftt,"sew"),Ftt.forEach(t),Oqo=r(s0e," \u2014 "),kN=s(s0e,"A",{href:!0});var Ctt=n(kN);Gqo=r(Ctt,"SEWForCTC"),Ctt.forEach(t),Xqo=r(s0e," (SEW model)"),s0e.forEach(t),Vqo=i(Oo),F1=s(Oo,"LI",{});var n0e=n(F1);Ede=s(n0e,"STRONG",{});var Mtt=n(Ede);zqo=r(Mtt,"sew-d"),Mtt.forEach(t),Wqo=r(n0e," \u2014 "),RN=s(n0e,"A",{href:!0});var Ett=n(RN);Qqo=r(Ett,"SEWDForCTC"),Ett.forEach(t),Hqo=r(n0e," (SEW-D model)"),n0e.forEach(t),Uqo=i(Oo),C1=s(Oo,"LI",{});var l0e=n(C1);yde=s(l0e,"STRONG",{});var ytt=n(yde);Jqo=r(ytt,"unispeech"),ytt.forEach(t),Yqo=r(l0e," \u2014 "),SN=s(l0e,"A",{href:!0});var wtt=n(SN);Kqo=r(wtt,"UniSpeechForCTC"),wtt.forEach(t),Zqo=r(l0e," (UniSpeech model)"),l0e.forEach(t),eOo=i(Oo),M1=s(Oo,"LI",{});var i0e=n(M1);wde=s(i0e,"STRONG",{});var Att=n(wde);oOo=r(Att,"unispeech-sat"),Att.forEach(t),rOo=r(i0e," \u2014 "),PN=s(i0e,"A",{href:!0});var Ltt=n(PN);tOo=r(Ltt,"UniSpeechSatForCTC"),Ltt.forEach(t),aOo=r(i0e," (UniSpeechSat model)"),i0e.forEach(t),sOo=i(Oo),E1=s(Oo,"LI",{});var d0e=n(E1);Ade=s(d0e,"STRONG",{});var Btt=n(Ade);nOo=r(Btt,"wav2vec2"),Btt.forEach(t),lOo=r(d0e," \u2014 "),$N=s(d0e,"A",{href:!0});var xtt=n($N);iOo=r(xtt,"Wav2Vec2ForCTC"),xtt.forEach(t),dOo=r(d0e," (Wav2Vec2 model)"),d0e.forEach(t),cOo=i(Oo),y1=s(Oo,"LI",{});var c0e=n(y1);Lde=s(c0e,"STRONG",{});var ktt=n(Lde);mOo=r(ktt,"wavlm"),ktt.forEach(t),fOo=r(c0e," \u2014 "),IN=s(c0e,"A",{href:!0});var Rtt=n(IN);gOo=r(Rtt,"WavLMForCTC"),Rtt.forEach(t),hOo=r(c0e," (WavLM model)"),c0e.forEach(t),Oo.forEach(t),uOo=i(oa),w1=s(oa,"P",{});var m0e=n(w1);pOo=r(m0e,"The model is set in evaluation mode by default using "),Bde=s(m0e,"CODE",{});var Stt=n(Bde);_Oo=r(Stt,"model.eval()"),Stt.forEach(t),bOo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=s(m0e,"CODE",{});var Ptt=n(xde);vOo=r(Ptt,"model.train()"),Ptt.forEach(t),m0e.forEach(t),TOo=i(oa),kde=s(oa,"P",{});var $tt=n(kde);FOo=r($tt,"Examples:"),$tt.forEach(t),COo=i(oa),f(L6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Xxe=i(d),Vd=s(d,"H2",{class:!0});var KRe=n(Vd);A1=s(KRe,"A",{id:!0,class:!0,href:!0});var Itt=n(A1);Rde=s(Itt,"SPAN",{});var jtt=n(Rde);f(B6.$$.fragment,jtt),jtt.forEach(t),Itt.forEach(t),MOo=i(KRe),Sde=s(KRe,"SPAN",{});var Dtt=n(Sde);EOo=r(Dtt,"AutoModelForSpeechSeq2Seq"),Dtt.forEach(t),KRe.forEach(t),Vxe=i(d),fr=s(d,"DIV",{class:!0});var yl=n(fr);f(x6.$$.fragment,yl),yOo=i(yl),zd=s(yl,"P",{});var Zz=n(zd);wOo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pde=s(Zz,"CODE",{});var Ntt=n(Pde);AOo=r(Ntt,"from_pretrained()"),Ntt.forEach(t),LOo=r(Zz,"class method or the "),$de=s(Zz,"CODE",{});var qtt=n($de);BOo=r(qtt,"from_config()"),qtt.forEach(t),xOo=r(Zz,`class
method.`),Zz.forEach(t),kOo=i(yl),k6=s(yl,"P",{});var ZRe=n(k6);ROo=r(ZRe,"This class cannot be instantiated directly using "),Ide=s(ZRe,"CODE",{});var Ott=n(Ide);SOo=r(Ott,"__init__()"),Ott.forEach(t),POo=r(ZRe," (throws an error)."),ZRe.forEach(t),$Oo=i(yl),nt=s(yl,"DIV",{class:!0});var wl=n(nt);f(R6.$$.fragment,wl),IOo=i(wl),jde=s(wl,"P",{});var Gtt=n(jde);jOo=r(Gtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gtt.forEach(t),DOo=i(wl),Wd=s(wl,"P",{});var eW=n(Wd);NOo=r(eW,`Note:
Loading a model from its configuration file does `),Dde=s(eW,"STRONG",{});var Xtt=n(Dde);qOo=r(Xtt,"not"),Xtt.forEach(t),OOo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=s(eW,"CODE",{});var Vtt=n(Nde);GOo=r(Vtt,"from_pretrained()"),Vtt.forEach(t),XOo=r(eW,"to load the model weights."),eW.forEach(t),VOo=i(wl),qde=s(wl,"P",{});var ztt=n(qde);zOo=r(ztt,"Examples:"),ztt.forEach(t),WOo=i(wl),f(S6.$$.fragment,wl),wl.forEach(t),QOo=i(yl),Ze=s(yl,"DIV",{class:!0});var ra=n(Ze);f(P6.$$.fragment,ra),HOo=i(ra),Ode=s(ra,"P",{});var Wtt=n(Ode);UOo=r(Wtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wtt.forEach(t),JOo=i(ra),ns=s(ra,"P",{});var m5=n(ns);YOo=r(m5,"The model class to instantiate is selected based on the "),Gde=s(m5,"CODE",{});var Qtt=n(Gde);KOo=r(Qtt,"model_type"),Qtt.forEach(t),ZOo=r(m5,` property of the config object (either
passed as an argument or loaded from `),Xde=s(m5,"CODE",{});var Htt=n(Xde);eGo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),oGo=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=s(m5,"CODE",{});var Utt=n(Vde);rGo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),tGo=r(m5,":"),m5.forEach(t),aGo=i(ra),$6=s(ra,"UL",{});var eSe=n($6);L1=s(eSe,"LI",{});var f0e=n(L1);zde=s(f0e,"STRONG",{});var Jtt=n(zde);sGo=r(Jtt,"speech-encoder-decoder"),Jtt.forEach(t),nGo=r(f0e," \u2014 "),jN=s(f0e,"A",{href:!0});var Ytt=n(jN);lGo=r(Ytt,"SpeechEncoderDecoderModel"),Ytt.forEach(t),iGo=r(f0e," (Speech Encoder decoder model)"),f0e.forEach(t),dGo=i(eSe),B1=s(eSe,"LI",{});var g0e=n(B1);Wde=s(g0e,"STRONG",{});var Ktt=n(Wde);cGo=r(Ktt,"speech_to_text"),Ktt.forEach(t),mGo=r(g0e," \u2014 "),DN=s(g0e,"A",{href:!0});var Ztt=n(DN);fGo=r(Ztt,"Speech2TextForConditionalGeneration"),Ztt.forEach(t),gGo=r(g0e," (Speech2Text model)"),g0e.forEach(t),eSe.forEach(t),hGo=i(ra),x1=s(ra,"P",{});var h0e=n(x1);uGo=r(h0e,"The model is set in evaluation mode by default using "),Qde=s(h0e,"CODE",{});var eat=n(Qde);pGo=r(eat,"model.eval()"),eat.forEach(t),_Go=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=s(h0e,"CODE",{});var oat=n(Hde);bGo=r(oat,"model.train()"),oat.forEach(t),h0e.forEach(t),vGo=i(ra),Ude=s(ra,"P",{});var rat=n(Ude);TGo=r(rat,"Examples:"),rat.forEach(t),FGo=i(ra),f(I6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),zxe=i(d),Qd=s(d,"H2",{class:!0});var oSe=n(Qd);k1=s(oSe,"A",{id:!0,class:!0,href:!0});var tat=n(k1);Jde=s(tat,"SPAN",{});var aat=n(Jde);f(j6.$$.fragment,aat),aat.forEach(t),tat.forEach(t),CGo=i(oSe),Yde=s(oSe,"SPAN",{});var sat=n(Yde);MGo=r(sat,"AutoModelForAudioXVector"),sat.forEach(t),oSe.forEach(t),Wxe=i(d),gr=s(d,"DIV",{class:!0});var Al=n(gr);f(D6.$$.fragment,Al),EGo=i(Al),Hd=s(Al,"P",{});var oW=n(Hd);yGo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Kde=s(oW,"CODE",{});var nat=n(Kde);wGo=r(nat,"from_pretrained()"),nat.forEach(t),AGo=r(oW,"class method or the "),Zde=s(oW,"CODE",{});var lat=n(Zde);LGo=r(lat,"from_config()"),lat.forEach(t),BGo=r(oW,`class
method.`),oW.forEach(t),xGo=i(Al),N6=s(Al,"P",{});var rSe=n(N6);kGo=r(rSe,"This class cannot be instantiated directly using "),ece=s(rSe,"CODE",{});var iat=n(ece);RGo=r(iat,"__init__()"),iat.forEach(t),SGo=r(rSe," (throws an error)."),rSe.forEach(t),PGo=i(Al),lt=s(Al,"DIV",{class:!0});var Ll=n(lt);f(q6.$$.fragment,Ll),$Go=i(Ll),oce=s(Ll,"P",{});var dat=n(oce);IGo=r(dat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dat.forEach(t),jGo=i(Ll),Ud=s(Ll,"P",{});var rW=n(Ud);DGo=r(rW,`Note:
Loading a model from its configuration file does `),rce=s(rW,"STRONG",{});var cat=n(rce);NGo=r(cat,"not"),cat.forEach(t),qGo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=s(rW,"CODE",{});var mat=n(tce);OGo=r(mat,"from_pretrained()"),mat.forEach(t),GGo=r(rW,"to load the model weights."),rW.forEach(t),XGo=i(Ll),ace=s(Ll,"P",{});var fat=n(ace);VGo=r(fat,"Examples:"),fat.forEach(t),zGo=i(Ll),f(O6.$$.fragment,Ll),Ll.forEach(t),WGo=i(Al),eo=s(Al,"DIV",{class:!0});var ta=n(eo);f(G6.$$.fragment,ta),QGo=i(ta),sce=s(ta,"P",{});var gat=n(sce);HGo=r(gat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gat.forEach(t),UGo=i(ta),ls=s(ta,"P",{});var f5=n(ls);JGo=r(f5,"The model class to instantiate is selected based on the "),nce=s(f5,"CODE",{});var hat=n(nce);YGo=r(hat,"model_type"),hat.forEach(t),KGo=r(f5,` property of the config object (either
passed as an argument or loaded from `),lce=s(f5,"CODE",{});var uat=n(lce);ZGo=r(uat,"pretrained_model_name_or_path"),uat.forEach(t),eXo=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=s(f5,"CODE",{});var pat=n(ice);oXo=r(pat,"pretrained_model_name_or_path"),pat.forEach(t),rXo=r(f5,":"),f5.forEach(t),tXo=i(ta),is=s(ta,"UL",{});var g5=n(is);R1=s(g5,"LI",{});var u0e=n(R1);dce=s(u0e,"STRONG",{});var _at=n(dce);aXo=r(_at,"data2vec-audio"),_at.forEach(t),sXo=r(u0e," \u2014 "),NN=s(u0e,"A",{href:!0});var bat=n(NN);nXo=r(bat,"Data2VecAudioForXVector"),bat.forEach(t),lXo=r(u0e," (Data2VecAudio model)"),u0e.forEach(t),iXo=i(g5),S1=s(g5,"LI",{});var p0e=n(S1);cce=s(p0e,"STRONG",{});var vat=n(cce);dXo=r(vat,"unispeech-sat"),vat.forEach(t),cXo=r(p0e," \u2014 "),qN=s(p0e,"A",{href:!0});var Tat=n(qN);mXo=r(Tat,"UniSpeechSatForXVector"),Tat.forEach(t),fXo=r(p0e," (UniSpeechSat model)"),p0e.forEach(t),gXo=i(g5),P1=s(g5,"LI",{});var _0e=n(P1);mce=s(_0e,"STRONG",{});var Fat=n(mce);hXo=r(Fat,"wav2vec2"),Fat.forEach(t),uXo=r(_0e," \u2014 "),ON=s(_0e,"A",{href:!0});var Cat=n(ON);pXo=r(Cat,"Wav2Vec2ForXVector"),Cat.forEach(t),_Xo=r(_0e," (Wav2Vec2 model)"),_0e.forEach(t),bXo=i(g5),$1=s(g5,"LI",{});var b0e=n($1);fce=s(b0e,"STRONG",{});var Mat=n(fce);vXo=r(Mat,"wavlm"),Mat.forEach(t),TXo=r(b0e," \u2014 "),GN=s(b0e,"A",{href:!0});var Eat=n(GN);FXo=r(Eat,"WavLMForXVector"),Eat.forEach(t),CXo=r(b0e," (WavLM model)"),b0e.forEach(t),g5.forEach(t),MXo=i(ta),I1=s(ta,"P",{});var v0e=n(I1);EXo=r(v0e,"The model is set in evaluation mode by default using "),gce=s(v0e,"CODE",{});var yat=n(gce);yXo=r(yat,"model.eval()"),yat.forEach(t),wXo=r(v0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=s(v0e,"CODE",{});var wat=n(hce);AXo=r(wat,"model.train()"),wat.forEach(t),v0e.forEach(t),LXo=i(ta),uce=s(ta,"P",{});var Aat=n(uce);BXo=r(Aat,"Examples:"),Aat.forEach(t),xXo=i(ta),f(X6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Qxe=i(d),Jd=s(d,"H2",{class:!0});var tSe=n(Jd);j1=s(tSe,"A",{id:!0,class:!0,href:!0});var Lat=n(j1);pce=s(Lat,"SPAN",{});var Bat=n(pce);f(V6.$$.fragment,Bat),Bat.forEach(t),Lat.forEach(t),kXo=i(tSe),_ce=s(tSe,"SPAN",{});var xat=n(_ce);RXo=r(xat,"AutoModelForMaskedImageModeling"),xat.forEach(t),tSe.forEach(t),Hxe=i(d),hr=s(d,"DIV",{class:!0});var Bl=n(hr);f(z6.$$.fragment,Bl),SXo=i(Bl),Yd=s(Bl,"P",{});var tW=n(Yd);PXo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bce=s(tW,"CODE",{});var kat=n(bce);$Xo=r(kat,"from_pretrained()"),kat.forEach(t),IXo=r(tW,"class method or the "),vce=s(tW,"CODE",{});var Rat=n(vce);jXo=r(Rat,"from_config()"),Rat.forEach(t),DXo=r(tW,`class
method.`),tW.forEach(t),NXo=i(Bl),W6=s(Bl,"P",{});var aSe=n(W6);qXo=r(aSe,"This class cannot be instantiated directly using "),Tce=s(aSe,"CODE",{});var Sat=n(Tce);OXo=r(Sat,"__init__()"),Sat.forEach(t),GXo=r(aSe," (throws an error)."),aSe.forEach(t),XXo=i(Bl),it=s(Bl,"DIV",{class:!0});var xl=n(it);f(Q6.$$.fragment,xl),VXo=i(xl),Fce=s(xl,"P",{});var Pat=n(Fce);zXo=r(Pat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pat.forEach(t),WXo=i(xl),Kd=s(xl,"P",{});var aW=n(Kd);QXo=r(aW,`Note:
Loading a model from its configuration file does `),Cce=s(aW,"STRONG",{});var $at=n(Cce);HXo=r($at,"not"),$at.forEach(t),UXo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mce=s(aW,"CODE",{});var Iat=n(Mce);JXo=r(Iat,"from_pretrained()"),Iat.forEach(t),YXo=r(aW,"to load the model weights."),aW.forEach(t),KXo=i(xl),Ece=s(xl,"P",{});var jat=n(Ece);ZXo=r(jat,"Examples:"),jat.forEach(t),eVo=i(xl),f(H6.$$.fragment,xl),xl.forEach(t),oVo=i(Bl),oo=s(Bl,"DIV",{class:!0});var aa=n(oo);f(U6.$$.fragment,aa),rVo=i(aa),yce=s(aa,"P",{});var Dat=n(yce);tVo=r(Dat,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dat.forEach(t),aVo=i(aa),ds=s(aa,"P",{});var h5=n(ds);sVo=r(h5,"The model class to instantiate is selected based on the "),wce=s(h5,"CODE",{});var Nat=n(wce);nVo=r(Nat,"model_type"),Nat.forEach(t),lVo=r(h5,` property of the config object (either
passed as an argument or loaded from `),Ace=s(h5,"CODE",{});var qat=n(Ace);iVo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),dVo=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=s(h5,"CODE",{});var Oat=n(Lce);cVo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),mVo=r(h5,":"),h5.forEach(t),fVo=i(aa),Zd=s(aa,"UL",{});var sW=n(Zd);D1=s(sW,"LI",{});var T0e=n(D1);Bce=s(T0e,"STRONG",{});var Gat=n(Bce);gVo=r(Gat,"deit"),Gat.forEach(t),hVo=r(T0e," \u2014 "),XN=s(T0e,"A",{href:!0});var Xat=n(XN);uVo=r(Xat,"DeiTForMaskedImageModeling"),Xat.forEach(t),pVo=r(T0e," (DeiT model)"),T0e.forEach(t),_Vo=i(sW),N1=s(sW,"LI",{});var F0e=n(N1);xce=s(F0e,"STRONG",{});var Vat=n(xce);bVo=r(Vat,"swin"),Vat.forEach(t),vVo=r(F0e," \u2014 "),VN=s(F0e,"A",{href:!0});var zat=n(VN);TVo=r(zat,"SwinForMaskedImageModeling"),zat.forEach(t),FVo=r(F0e," (Swin model)"),F0e.forEach(t),CVo=i(sW),q1=s(sW,"LI",{});var C0e=n(q1);kce=s(C0e,"STRONG",{});var Wat=n(kce);MVo=r(Wat,"vit"),Wat.forEach(t),EVo=r(C0e," \u2014 "),zN=s(C0e,"A",{href:!0});var Qat=n(zN);yVo=r(Qat,"ViTForMaskedImageModeling"),Qat.forEach(t),wVo=r(C0e," (ViT model)"),C0e.forEach(t),sW.forEach(t),AVo=i(aa),O1=s(aa,"P",{});var M0e=n(O1);LVo=r(M0e,"The model is set in evaluation mode by default using "),Rce=s(M0e,"CODE",{});var Hat=n(Rce);BVo=r(Hat,"model.eval()"),Hat.forEach(t),xVo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=s(M0e,"CODE",{});var Uat=n(Sce);kVo=r(Uat,"model.train()"),Uat.forEach(t),M0e.forEach(t),RVo=i(aa),Pce=s(aa,"P",{});var Jat=n(Pce);SVo=r(Jat,"Examples:"),Jat.forEach(t),PVo=i(aa),f(J6.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Uxe=i(d),ec=s(d,"H2",{class:!0});var sSe=n(ec);G1=s(sSe,"A",{id:!0,class:!0,href:!0});var Yat=n(G1);$ce=s(Yat,"SPAN",{});var Kat=n($ce);f(Y6.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),$Vo=i(sSe),Ice=s(sSe,"SPAN",{});var Zat=n(Ice);IVo=r(Zat,"AutoModelForObjectDetection"),Zat.forEach(t),sSe.forEach(t),Jxe=i(d),ur=s(d,"DIV",{class:!0});var kl=n(ur);f(K6.$$.fragment,kl),jVo=i(kl),oc=s(kl,"P",{});var nW=n(oc);DVo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jce=s(nW,"CODE",{});var est=n(jce);NVo=r(est,"from_pretrained()"),est.forEach(t),qVo=r(nW,"class method or the "),Dce=s(nW,"CODE",{});var ost=n(Dce);OVo=r(ost,"from_config()"),ost.forEach(t),GVo=r(nW,`class
method.`),nW.forEach(t),XVo=i(kl),Z6=s(kl,"P",{});var nSe=n(Z6);VVo=r(nSe,"This class cannot be instantiated directly using "),Nce=s(nSe,"CODE",{});var rst=n(Nce);zVo=r(rst,"__init__()"),rst.forEach(t),WVo=r(nSe," (throws an error)."),nSe.forEach(t),QVo=i(kl),dt=s(kl,"DIV",{class:!0});var Rl=n(dt);f(eA.$$.fragment,Rl),HVo=i(Rl),qce=s(Rl,"P",{});var tst=n(qce);UVo=r(tst,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tst.forEach(t),JVo=i(Rl),rc=s(Rl,"P",{});var lW=n(rc);YVo=r(lW,`Note:
Loading a model from its configuration file does `),Oce=s(lW,"STRONG",{});var ast=n(Oce);KVo=r(ast,"not"),ast.forEach(t),ZVo=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gce=s(lW,"CODE",{});var sst=n(Gce);ezo=r(sst,"from_pretrained()"),sst.forEach(t),ozo=r(lW,"to load the model weights."),lW.forEach(t),rzo=i(Rl),Xce=s(Rl,"P",{});var nst=n(Xce);tzo=r(nst,"Examples:"),nst.forEach(t),azo=i(Rl),f(oA.$$.fragment,Rl),Rl.forEach(t),szo=i(kl),ro=s(kl,"DIV",{class:!0});var sa=n(ro);f(rA.$$.fragment,sa),nzo=i(sa),Vce=s(sa,"P",{});var lst=n(Vce);lzo=r(lst,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lst.forEach(t),izo=i(sa),cs=s(sa,"P",{});var u5=n(cs);dzo=r(u5,"The model class to instantiate is selected based on the "),zce=s(u5,"CODE",{});var ist=n(zce);czo=r(ist,"model_type"),ist.forEach(t),mzo=r(u5,` property of the config object (either
passed as an argument or loaded from `),Wce=s(u5,"CODE",{});var dst=n(Wce);fzo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),gzo=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=s(u5,"CODE",{});var cst=n(Qce);hzo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),uzo=r(u5,":"),u5.forEach(t),pzo=i(sa),Hce=s(sa,"UL",{});var mst=n(Hce);X1=s(mst,"LI",{});var E0e=n(X1);Uce=s(E0e,"STRONG",{});var fst=n(Uce);_zo=r(fst,"detr"),fst.forEach(t),bzo=r(E0e," \u2014 "),WN=s(E0e,"A",{href:!0});var gst=n(WN);vzo=r(gst,"DetrForObjectDetection"),gst.forEach(t),Tzo=r(E0e," (DETR model)"),E0e.forEach(t),mst.forEach(t),Fzo=i(sa),V1=s(sa,"P",{});var y0e=n(V1);Czo=r(y0e,"The model is set in evaluation mode by default using "),Jce=s(y0e,"CODE",{});var hst=n(Jce);Mzo=r(hst,"model.eval()"),hst.forEach(t),Ezo=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=s(y0e,"CODE",{});var ust=n(Yce);yzo=r(ust,"model.train()"),ust.forEach(t),y0e.forEach(t),wzo=i(sa),Kce=s(sa,"P",{});var pst=n(Kce);Azo=r(pst,"Examples:"),pst.forEach(t),Lzo=i(sa),f(tA.$$.fragment,sa),sa.forEach(t),kl.forEach(t),Yxe=i(d),tc=s(d,"H2",{class:!0});var lSe=n(tc);z1=s(lSe,"A",{id:!0,class:!0,href:!0});var _st=n(z1);Zce=s(_st,"SPAN",{});var bst=n(Zce);f(aA.$$.fragment,bst),bst.forEach(t),_st.forEach(t),Bzo=i(lSe),eme=s(lSe,"SPAN",{});var vst=n(eme);xzo=r(vst,"AutoModelForImageSegmentation"),vst.forEach(t),lSe.forEach(t),Kxe=i(d),pr=s(d,"DIV",{class:!0});var Sl=n(pr);f(sA.$$.fragment,Sl),kzo=i(Sl),ac=s(Sl,"P",{});var iW=n(ac);Rzo=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ome=s(iW,"CODE",{});var Tst=n(ome);Szo=r(Tst,"from_pretrained()"),Tst.forEach(t),Pzo=r(iW,"class method or the "),rme=s(iW,"CODE",{});var Fst=n(rme);$zo=r(Fst,"from_config()"),Fst.forEach(t),Izo=r(iW,`class
method.`),iW.forEach(t),jzo=i(Sl),nA=s(Sl,"P",{});var iSe=n(nA);Dzo=r(iSe,"This class cannot be instantiated directly using "),tme=s(iSe,"CODE",{});var Cst=n(tme);Nzo=r(Cst,"__init__()"),Cst.forEach(t),qzo=r(iSe," (throws an error)."),iSe.forEach(t),Ozo=i(Sl),ct=s(Sl,"DIV",{class:!0});var Pl=n(ct);f(lA.$$.fragment,Pl),Gzo=i(Pl),ame=s(Pl,"P",{});var Mst=n(ame);Xzo=r(Mst,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mst.forEach(t),Vzo=i(Pl),sc=s(Pl,"P",{});var dW=n(sc);zzo=r(dW,`Note:
Loading a model from its configuration file does `),sme=s(dW,"STRONG",{});var Est=n(sme);Wzo=r(Est,"not"),Est.forEach(t),Qzo=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nme=s(dW,"CODE",{});var yst=n(nme);Hzo=r(yst,"from_pretrained()"),yst.forEach(t),Uzo=r(dW,"to load the model weights."),dW.forEach(t),Jzo=i(Pl),lme=s(Pl,"P",{});var wst=n(lme);Yzo=r(wst,"Examples:"),wst.forEach(t),Kzo=i(Pl),f(iA.$$.fragment,Pl),Pl.forEach(t),Zzo=i(Sl),to=s(Sl,"DIV",{class:!0});var na=n(to);f(dA.$$.fragment,na),eWo=i(na),ime=s(na,"P",{});var Ast=n(ime);oWo=r(Ast,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ast.forEach(t),rWo=i(na),ms=s(na,"P",{});var p5=n(ms);tWo=r(p5,"The model class to instantiate is selected based on the "),dme=s(p5,"CODE",{});var Lst=n(dme);aWo=r(Lst,"model_type"),Lst.forEach(t),sWo=r(p5,` property of the config object (either
passed as an argument or loaded from `),cme=s(p5,"CODE",{});var Bst=n(cme);nWo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),lWo=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=s(p5,"CODE",{});var xst=n(mme);iWo=r(xst,"pretrained_model_name_or_path"),xst.forEach(t),dWo=r(p5,":"),p5.forEach(t),cWo=i(na),fme=s(na,"UL",{});var kst=n(fme);W1=s(kst,"LI",{});var w0e=n(W1);gme=s(w0e,"STRONG",{});var Rst=n(gme);mWo=r(Rst,"detr"),Rst.forEach(t),fWo=r(w0e," \u2014 "),QN=s(w0e,"A",{href:!0});var Sst=n(QN);gWo=r(Sst,"DetrForSegmentation"),Sst.forEach(t),hWo=r(w0e," (DETR model)"),w0e.forEach(t),kst.forEach(t),uWo=i(na),Q1=s(na,"P",{});var A0e=n(Q1);pWo=r(A0e,"The model is set in evaluation mode by default using "),hme=s(A0e,"CODE",{});var Pst=n(hme);_Wo=r(Pst,"model.eval()"),Pst.forEach(t),bWo=r(A0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=s(A0e,"CODE",{});var $st=n(ume);vWo=r($st,"model.train()"),$st.forEach(t),A0e.forEach(t),TWo=i(na),pme=s(na,"P",{});var Ist=n(pme);FWo=r(Ist,"Examples:"),Ist.forEach(t),CWo=i(na),f(cA.$$.fragment,na),na.forEach(t),Sl.forEach(t),Zxe=i(d),nc=s(d,"H2",{class:!0});var dSe=n(nc);H1=s(dSe,"A",{id:!0,class:!0,href:!0});var jst=n(H1);_me=s(jst,"SPAN",{});var Dst=n(_me);f(mA.$$.fragment,Dst),Dst.forEach(t),jst.forEach(t),MWo=i(dSe),bme=s(dSe,"SPAN",{});var Nst=n(bme);EWo=r(Nst,"AutoModelForSemanticSegmentation"),Nst.forEach(t),dSe.forEach(t),eke=i(d),_r=s(d,"DIV",{class:!0});var $l=n(_r);f(fA.$$.fragment,$l),yWo=i($l),lc=s($l,"P",{});var cW=n(lc);wWo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vme=s(cW,"CODE",{});var qst=n(vme);AWo=r(qst,"from_pretrained()"),qst.forEach(t),LWo=r(cW,"class method or the "),Tme=s(cW,"CODE",{});var Ost=n(Tme);BWo=r(Ost,"from_config()"),Ost.forEach(t),xWo=r(cW,`class
method.`),cW.forEach(t),kWo=i($l),gA=s($l,"P",{});var cSe=n(gA);RWo=r(cSe,"This class cannot be instantiated directly using "),Fme=s(cSe,"CODE",{});var Gst=n(Fme);SWo=r(Gst,"__init__()"),Gst.forEach(t),PWo=r(cSe," (throws an error)."),cSe.forEach(t),$Wo=i($l),mt=s($l,"DIV",{class:!0});var Il=n(mt);f(hA.$$.fragment,Il),IWo=i(Il),Cme=s(Il,"P",{});var Xst=n(Cme);jWo=r(Xst,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xst.forEach(t),DWo=i(Il),ic=s(Il,"P",{});var mW=n(ic);NWo=r(mW,`Note:
Loading a model from its configuration file does `),Mme=s(mW,"STRONG",{});var Vst=n(Mme);qWo=r(Vst,"not"),Vst.forEach(t),OWo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eme=s(mW,"CODE",{});var zst=n(Eme);GWo=r(zst,"from_pretrained()"),zst.forEach(t),XWo=r(mW,"to load the model weights."),mW.forEach(t),VWo=i(Il),yme=s(Il,"P",{});var Wst=n(yme);zWo=r(Wst,"Examples:"),Wst.forEach(t),WWo=i(Il),f(uA.$$.fragment,Il),Il.forEach(t),QWo=i($l),ao=s($l,"DIV",{class:!0});var la=n(ao);f(pA.$$.fragment,la),HWo=i(la),wme=s(la,"P",{});var Qst=n(wme);UWo=r(Qst,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qst.forEach(t),JWo=i(la),fs=s(la,"P",{});var _5=n(fs);YWo=r(_5,"The model class to instantiate is selected based on the "),Ame=s(_5,"CODE",{});var Hst=n(Ame);KWo=r(Hst,"model_type"),Hst.forEach(t),ZWo=r(_5,` property of the config object (either
passed as an argument or loaded from `),Lme=s(_5,"CODE",{});var Ust=n(Lme);eQo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),oQo=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=s(_5,"CODE",{});var Jst=n(Bme);rQo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),tQo=r(_5,":"),_5.forEach(t),aQo=i(la),_A=s(la,"UL",{});var mSe=n(_A);U1=s(mSe,"LI",{});var L0e=n(U1);xme=s(L0e,"STRONG",{});var Yst=n(xme);sQo=r(Yst,"beit"),Yst.forEach(t),nQo=r(L0e," \u2014 "),HN=s(L0e,"A",{href:!0});var Kst=n(HN);lQo=r(Kst,"BeitForSemanticSegmentation"),Kst.forEach(t),iQo=r(L0e," (BEiT model)"),L0e.forEach(t),dQo=i(mSe),J1=s(mSe,"LI",{});var B0e=n(J1);kme=s(B0e,"STRONG",{});var Zst=n(kme);cQo=r(Zst,"segformer"),Zst.forEach(t),mQo=r(B0e," \u2014 "),UN=s(B0e,"A",{href:!0});var ent=n(UN);fQo=r(ent,"SegformerForSemanticSegmentation"),ent.forEach(t),gQo=r(B0e," (SegFormer model)"),B0e.forEach(t),mSe.forEach(t),hQo=i(la),Y1=s(la,"P",{});var x0e=n(Y1);uQo=r(x0e,"The model is set in evaluation mode by default using "),Rme=s(x0e,"CODE",{});var ont=n(Rme);pQo=r(ont,"model.eval()"),ont.forEach(t),_Qo=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=s(x0e,"CODE",{});var rnt=n(Sme);bQo=r(rnt,"model.train()"),rnt.forEach(t),x0e.forEach(t),vQo=i(la),Pme=s(la,"P",{});var tnt=n(Pme);TQo=r(tnt,"Examples:"),tnt.forEach(t),FQo=i(la),f(bA.$$.fragment,la),la.forEach(t),$l.forEach(t),oke=i(d),dc=s(d,"H2",{class:!0});var fSe=n(dc);K1=s(fSe,"A",{id:!0,class:!0,href:!0});var ant=n(K1);$me=s(ant,"SPAN",{});var snt=n($me);f(vA.$$.fragment,snt),snt.forEach(t),ant.forEach(t),CQo=i(fSe),Ime=s(fSe,"SPAN",{});var nnt=n(Ime);MQo=r(nnt,"AutoModelForInstanceSegmentation"),nnt.forEach(t),fSe.forEach(t),rke=i(d),br=s(d,"DIV",{class:!0});var jl=n(br);f(TA.$$.fragment,jl),EQo=i(jl),cc=s(jl,"P",{});var fW=n(cc);yQo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jme=s(fW,"CODE",{});var lnt=n(jme);wQo=r(lnt,"from_pretrained()"),lnt.forEach(t),AQo=r(fW,"class method or the "),Dme=s(fW,"CODE",{});var int=n(Dme);LQo=r(int,"from_config()"),int.forEach(t),BQo=r(fW,`class
method.`),fW.forEach(t),xQo=i(jl),FA=s(jl,"P",{});var gSe=n(FA);kQo=r(gSe,"This class cannot be instantiated directly using "),Nme=s(gSe,"CODE",{});var dnt=n(Nme);RQo=r(dnt,"__init__()"),dnt.forEach(t),SQo=r(gSe," (throws an error)."),gSe.forEach(t),PQo=i(jl),ft=s(jl,"DIV",{class:!0});var Dl=n(ft);f(CA.$$.fragment,Dl),$Qo=i(Dl),qme=s(Dl,"P",{});var cnt=n(qme);IQo=r(cnt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cnt.forEach(t),jQo=i(Dl),mc=s(Dl,"P",{});var gW=n(mc);DQo=r(gW,`Note:
Loading a model from its configuration file does `),Ome=s(gW,"STRONG",{});var mnt=n(Ome);NQo=r(mnt,"not"),mnt.forEach(t),qQo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gme=s(gW,"CODE",{});var fnt=n(Gme);OQo=r(fnt,"from_pretrained()"),fnt.forEach(t),GQo=r(gW,"to load the model weights."),gW.forEach(t),XQo=i(Dl),Xme=s(Dl,"P",{});var gnt=n(Xme);VQo=r(gnt,"Examples:"),gnt.forEach(t),zQo=i(Dl),f(MA.$$.fragment,Dl),Dl.forEach(t),WQo=i(jl),so=s(jl,"DIV",{class:!0});var ia=n(so);f(EA.$$.fragment,ia),QQo=i(ia),Vme=s(ia,"P",{});var hnt=n(Vme);HQo=r(hnt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hnt.forEach(t),UQo=i(ia),gs=s(ia,"P",{});var b5=n(gs);JQo=r(b5,"The model class to instantiate is selected based on the "),zme=s(b5,"CODE",{});var unt=n(zme);YQo=r(unt,"model_type"),unt.forEach(t),KQo=r(b5,` property of the config object (either
passed as an argument or loaded from `),Wme=s(b5,"CODE",{});var pnt=n(Wme);ZQo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),eHo=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=s(b5,"CODE",{});var _nt=n(Qme);oHo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),rHo=r(b5,":"),b5.forEach(t),tHo=i(ia),Hme=s(ia,"UL",{});var bnt=n(Hme);Z1=s(bnt,"LI",{});var k0e=n(Z1);Ume=s(k0e,"STRONG",{});var vnt=n(Ume);aHo=r(vnt,"maskformer"),vnt.forEach(t),sHo=r(k0e," \u2014 "),JN=s(k0e,"A",{href:!0});var Tnt=n(JN);nHo=r(Tnt,"MaskFormerForInstanceSegmentation"),Tnt.forEach(t),lHo=r(k0e," (MaskFormer model)"),k0e.forEach(t),bnt.forEach(t),iHo=i(ia),eF=s(ia,"P",{});var R0e=n(eF);dHo=r(R0e,"The model is set in evaluation mode by default using "),Jme=s(R0e,"CODE",{});var Fnt=n(Jme);cHo=r(Fnt,"model.eval()"),Fnt.forEach(t),mHo=r(R0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=s(R0e,"CODE",{});var Cnt=n(Yme);fHo=r(Cnt,"model.train()"),Cnt.forEach(t),R0e.forEach(t),gHo=i(ia),Kme=s(ia,"P",{});var Mnt=n(Kme);hHo=r(Mnt,"Examples:"),Mnt.forEach(t),uHo=i(ia),f(yA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),tke=i(d),fc=s(d,"H2",{class:!0});var hSe=n(fc);oF=s(hSe,"A",{id:!0,class:!0,href:!0});var Ent=n(oF);Zme=s(Ent,"SPAN",{});var ynt=n(Zme);f(wA.$$.fragment,ynt),ynt.forEach(t),Ent.forEach(t),pHo=i(hSe),efe=s(hSe,"SPAN",{});var wnt=n(efe);_Ho=r(wnt,"TFAutoModel"),wnt.forEach(t),hSe.forEach(t),ake=i(d),vr=s(d,"DIV",{class:!0});var Nl=n(vr);f(AA.$$.fragment,Nl),bHo=i(Nl),gc=s(Nl,"P",{});var hW=n(gc);vHo=r(hW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ofe=s(hW,"CODE",{});var Ant=n(ofe);THo=r(Ant,"from_pretrained()"),Ant.forEach(t),FHo=r(hW,"class method or the "),rfe=s(hW,"CODE",{});var Lnt=n(rfe);CHo=r(Lnt,"from_config()"),Lnt.forEach(t),MHo=r(hW,`class
method.`),hW.forEach(t),EHo=i(Nl),LA=s(Nl,"P",{});var uSe=n(LA);yHo=r(uSe,"This class cannot be instantiated directly using "),tfe=s(uSe,"CODE",{});var Bnt=n(tfe);wHo=r(Bnt,"__init__()"),Bnt.forEach(t),AHo=r(uSe," (throws an error)."),uSe.forEach(t),LHo=i(Nl),gt=s(Nl,"DIV",{class:!0});var ql=n(gt);f(BA.$$.fragment,ql),BHo=i(ql),afe=s(ql,"P",{});var xnt=n(afe);xHo=r(xnt,"Instantiates one of the base model classes of the library from a configuration."),xnt.forEach(t),kHo=i(ql),hc=s(ql,"P",{});var uW=n(hc);RHo=r(uW,`Note:
Loading a model from its configuration file does `),sfe=s(uW,"STRONG",{});var knt=n(sfe);SHo=r(knt,"not"),knt.forEach(t),PHo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nfe=s(uW,"CODE",{});var Rnt=n(nfe);$Ho=r(Rnt,"from_pretrained()"),Rnt.forEach(t),IHo=r(uW,"to load the model weights."),uW.forEach(t),jHo=i(ql),lfe=s(ql,"P",{});var Snt=n(lfe);DHo=r(Snt,"Examples:"),Snt.forEach(t),NHo=i(ql),f(xA.$$.fragment,ql),ql.forEach(t),qHo=i(Nl),ho=s(Nl,"DIV",{class:!0});var ha=n(ho);f(kA.$$.fragment,ha),OHo=i(ha),ife=s(ha,"P",{});var Pnt=n(ife);GHo=r(Pnt,"Instantiate one of the base model classes of the library from a pretrained model."),Pnt.forEach(t),XHo=i(ha),hs=s(ha,"P",{});var v5=n(hs);VHo=r(v5,"The model class to instantiate is selected based on the "),dfe=s(v5,"CODE",{});var $nt=n(dfe);zHo=r($nt,"model_type"),$nt.forEach(t),WHo=r(v5,` property of the config object (either
passed as an argument or loaded from `),cfe=s(v5,"CODE",{});var Int=n(cfe);QHo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),HHo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=s(v5,"CODE",{});var jnt=n(mfe);UHo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),JHo=r(v5,":"),v5.forEach(t),YHo=i(ha),B=s(ha,"UL",{});var x=n(B);rF=s(x,"LI",{});var S0e=n(rF);ffe=s(S0e,"STRONG",{});var Dnt=n(ffe);KHo=r(Dnt,"albert"),Dnt.forEach(t),ZHo=r(S0e," \u2014 "),YN=s(S0e,"A",{href:!0});var Nnt=n(YN);eUo=r(Nnt,"TFAlbertModel"),Nnt.forEach(t),oUo=r(S0e," (ALBERT model)"),S0e.forEach(t),rUo=i(x),tF=s(x,"LI",{});var P0e=n(tF);gfe=s(P0e,"STRONG",{});var qnt=n(gfe);tUo=r(qnt,"bart"),qnt.forEach(t),aUo=r(P0e," \u2014 "),KN=s(P0e,"A",{href:!0});var Ont=n(KN);sUo=r(Ont,"TFBartModel"),Ont.forEach(t),nUo=r(P0e," (BART model)"),P0e.forEach(t),lUo=i(x),aF=s(x,"LI",{});var $0e=n(aF);hfe=s($0e,"STRONG",{});var Gnt=n(hfe);iUo=r(Gnt,"bert"),Gnt.forEach(t),dUo=r($0e," \u2014 "),ZN=s($0e,"A",{href:!0});var Xnt=n(ZN);cUo=r(Xnt,"TFBertModel"),Xnt.forEach(t),mUo=r($0e," (BERT model)"),$0e.forEach(t),fUo=i(x),sF=s(x,"LI",{});var I0e=n(sF);ufe=s(I0e,"STRONG",{});var Vnt=n(ufe);gUo=r(Vnt,"blenderbot"),Vnt.forEach(t),hUo=r(I0e," \u2014 "),eq=s(I0e,"A",{href:!0});var znt=n(eq);uUo=r(znt,"TFBlenderbotModel"),znt.forEach(t),pUo=r(I0e," (Blenderbot model)"),I0e.forEach(t),_Uo=i(x),nF=s(x,"LI",{});var j0e=n(nF);pfe=s(j0e,"STRONG",{});var Wnt=n(pfe);bUo=r(Wnt,"blenderbot-small"),Wnt.forEach(t),vUo=r(j0e," \u2014 "),oq=s(j0e,"A",{href:!0});var Qnt=n(oq);TUo=r(Qnt,"TFBlenderbotSmallModel"),Qnt.forEach(t),FUo=r(j0e," (BlenderbotSmall model)"),j0e.forEach(t),CUo=i(x),lF=s(x,"LI",{});var D0e=n(lF);_fe=s(D0e,"STRONG",{});var Hnt=n(_fe);MUo=r(Hnt,"camembert"),Hnt.forEach(t),EUo=r(D0e," \u2014 "),rq=s(D0e,"A",{href:!0});var Unt=n(rq);yUo=r(Unt,"TFCamembertModel"),Unt.forEach(t),wUo=r(D0e," (CamemBERT model)"),D0e.forEach(t),AUo=i(x),iF=s(x,"LI",{});var N0e=n(iF);bfe=s(N0e,"STRONG",{});var Jnt=n(bfe);LUo=r(Jnt,"clip"),Jnt.forEach(t),BUo=r(N0e," \u2014 "),tq=s(N0e,"A",{href:!0});var Ynt=n(tq);xUo=r(Ynt,"TFCLIPModel"),Ynt.forEach(t),kUo=r(N0e," (CLIP model)"),N0e.forEach(t),RUo=i(x),dF=s(x,"LI",{});var q0e=n(dF);vfe=s(q0e,"STRONG",{});var Knt=n(vfe);SUo=r(Knt,"convbert"),Knt.forEach(t),PUo=r(q0e," \u2014 "),aq=s(q0e,"A",{href:!0});var Znt=n(aq);$Uo=r(Znt,"TFConvBertModel"),Znt.forEach(t),IUo=r(q0e," (ConvBERT model)"),q0e.forEach(t),jUo=i(x),cF=s(x,"LI",{});var O0e=n(cF);Tfe=s(O0e,"STRONG",{});var elt=n(Tfe);DUo=r(elt,"convnext"),elt.forEach(t),NUo=r(O0e," \u2014 "),sq=s(O0e,"A",{href:!0});var olt=n(sq);qUo=r(olt,"TFConvNextModel"),olt.forEach(t),OUo=r(O0e," (ConvNext model)"),O0e.forEach(t),GUo=i(x),mF=s(x,"LI",{});var G0e=n(mF);Ffe=s(G0e,"STRONG",{});var rlt=n(Ffe);XUo=r(rlt,"ctrl"),rlt.forEach(t),VUo=r(G0e," \u2014 "),nq=s(G0e,"A",{href:!0});var tlt=n(nq);zUo=r(tlt,"TFCTRLModel"),tlt.forEach(t),WUo=r(G0e," (CTRL model)"),G0e.forEach(t),QUo=i(x),fF=s(x,"LI",{});var X0e=n(fF);Cfe=s(X0e,"STRONG",{});var alt=n(Cfe);HUo=r(alt,"deberta"),alt.forEach(t),UUo=r(X0e," \u2014 "),lq=s(X0e,"A",{href:!0});var slt=n(lq);JUo=r(slt,"TFDebertaModel"),slt.forEach(t),YUo=r(X0e," (DeBERTa model)"),X0e.forEach(t),KUo=i(x),gF=s(x,"LI",{});var V0e=n(gF);Mfe=s(V0e,"STRONG",{});var nlt=n(Mfe);ZUo=r(nlt,"deberta-v2"),nlt.forEach(t),eJo=r(V0e," \u2014 "),iq=s(V0e,"A",{href:!0});var llt=n(iq);oJo=r(llt,"TFDebertaV2Model"),llt.forEach(t),rJo=r(V0e," (DeBERTa-v2 model)"),V0e.forEach(t),tJo=i(x),hF=s(x,"LI",{});var z0e=n(hF);Efe=s(z0e,"STRONG",{});var ilt=n(Efe);aJo=r(ilt,"distilbert"),ilt.forEach(t),sJo=r(z0e," \u2014 "),dq=s(z0e,"A",{href:!0});var dlt=n(dq);nJo=r(dlt,"TFDistilBertModel"),dlt.forEach(t),lJo=r(z0e," (DistilBERT model)"),z0e.forEach(t),iJo=i(x),uF=s(x,"LI",{});var W0e=n(uF);yfe=s(W0e,"STRONG",{});var clt=n(yfe);dJo=r(clt,"dpr"),clt.forEach(t),cJo=r(W0e," \u2014 "),cq=s(W0e,"A",{href:!0});var mlt=n(cq);mJo=r(mlt,"TFDPRQuestionEncoder"),mlt.forEach(t),fJo=r(W0e," (DPR model)"),W0e.forEach(t),gJo=i(x),pF=s(x,"LI",{});var Q0e=n(pF);wfe=s(Q0e,"STRONG",{});var flt=n(wfe);hJo=r(flt,"electra"),flt.forEach(t),uJo=r(Q0e," \u2014 "),mq=s(Q0e,"A",{href:!0});var glt=n(mq);pJo=r(glt,"TFElectraModel"),glt.forEach(t),_Jo=r(Q0e," (ELECTRA model)"),Q0e.forEach(t),bJo=i(x),_F=s(x,"LI",{});var H0e=n(_F);Afe=s(H0e,"STRONG",{});var hlt=n(Afe);vJo=r(hlt,"flaubert"),hlt.forEach(t),TJo=r(H0e," \u2014 "),fq=s(H0e,"A",{href:!0});var ult=n(fq);FJo=r(ult,"TFFlaubertModel"),ult.forEach(t),CJo=r(H0e," (FlauBERT model)"),H0e.forEach(t),MJo=i(x),On=s(x,"LI",{});var j7=n(On);Lfe=s(j7,"STRONG",{});var plt=n(Lfe);EJo=r(plt,"funnel"),plt.forEach(t),yJo=r(j7," \u2014 "),gq=s(j7,"A",{href:!0});var _lt=n(gq);wJo=r(_lt,"TFFunnelModel"),_lt.forEach(t),AJo=r(j7," or "),hq=s(j7,"A",{href:!0});var blt=n(hq);LJo=r(blt,"TFFunnelBaseModel"),blt.forEach(t),BJo=r(j7," (Funnel Transformer model)"),j7.forEach(t),xJo=i(x),bF=s(x,"LI",{});var U0e=n(bF);Bfe=s(U0e,"STRONG",{});var vlt=n(Bfe);kJo=r(vlt,"gpt2"),vlt.forEach(t),RJo=r(U0e," \u2014 "),uq=s(U0e,"A",{href:!0});var Tlt=n(uq);SJo=r(Tlt,"TFGPT2Model"),Tlt.forEach(t),PJo=r(U0e," (OpenAI GPT-2 model)"),U0e.forEach(t),$Jo=i(x),vF=s(x,"LI",{});var J0e=n(vF);xfe=s(J0e,"STRONG",{});var Flt=n(xfe);IJo=r(Flt,"hubert"),Flt.forEach(t),jJo=r(J0e," \u2014 "),pq=s(J0e,"A",{href:!0});var Clt=n(pq);DJo=r(Clt,"TFHubertModel"),Clt.forEach(t),NJo=r(J0e," (Hubert model)"),J0e.forEach(t),qJo=i(x),TF=s(x,"LI",{});var Y0e=n(TF);kfe=s(Y0e,"STRONG",{});var Mlt=n(kfe);OJo=r(Mlt,"layoutlm"),Mlt.forEach(t),GJo=r(Y0e," \u2014 "),_q=s(Y0e,"A",{href:!0});var Elt=n(_q);XJo=r(Elt,"TFLayoutLMModel"),Elt.forEach(t),VJo=r(Y0e," (LayoutLM model)"),Y0e.forEach(t),zJo=i(x),FF=s(x,"LI",{});var K0e=n(FF);Rfe=s(K0e,"STRONG",{});var ylt=n(Rfe);WJo=r(ylt,"led"),ylt.forEach(t),QJo=r(K0e," \u2014 "),bq=s(K0e,"A",{href:!0});var wlt=n(bq);HJo=r(wlt,"TFLEDModel"),wlt.forEach(t),UJo=r(K0e," (LED model)"),K0e.forEach(t),JJo=i(x),CF=s(x,"LI",{});var Z0e=n(CF);Sfe=s(Z0e,"STRONG",{});var Alt=n(Sfe);YJo=r(Alt,"longformer"),Alt.forEach(t),KJo=r(Z0e," \u2014 "),vq=s(Z0e,"A",{href:!0});var Llt=n(vq);ZJo=r(Llt,"TFLongformerModel"),Llt.forEach(t),eYo=r(Z0e," (Longformer model)"),Z0e.forEach(t),oYo=i(x),MF=s(x,"LI",{});var eLe=n(MF);Pfe=s(eLe,"STRONG",{});var Blt=n(Pfe);rYo=r(Blt,"lxmert"),Blt.forEach(t),tYo=r(eLe," \u2014 "),Tq=s(eLe,"A",{href:!0});var xlt=n(Tq);aYo=r(xlt,"TFLxmertModel"),xlt.forEach(t),sYo=r(eLe," (LXMERT model)"),eLe.forEach(t),nYo=i(x),EF=s(x,"LI",{});var oLe=n(EF);$fe=s(oLe,"STRONG",{});var klt=n($fe);lYo=r(klt,"marian"),klt.forEach(t),iYo=r(oLe," \u2014 "),Fq=s(oLe,"A",{href:!0});var Rlt=n(Fq);dYo=r(Rlt,"TFMarianModel"),Rlt.forEach(t),cYo=r(oLe," (Marian model)"),oLe.forEach(t),mYo=i(x),yF=s(x,"LI",{});var rLe=n(yF);Ife=s(rLe,"STRONG",{});var Slt=n(Ife);fYo=r(Slt,"mbart"),Slt.forEach(t),gYo=r(rLe," \u2014 "),Cq=s(rLe,"A",{href:!0});var Plt=n(Cq);hYo=r(Plt,"TFMBartModel"),Plt.forEach(t),uYo=r(rLe," (mBART model)"),rLe.forEach(t),pYo=i(x),wF=s(x,"LI",{});var tLe=n(wF);jfe=s(tLe,"STRONG",{});var $lt=n(jfe);_Yo=r($lt,"mobilebert"),$lt.forEach(t),bYo=r(tLe," \u2014 "),Mq=s(tLe,"A",{href:!0});var Ilt=n(Mq);vYo=r(Ilt,"TFMobileBertModel"),Ilt.forEach(t),TYo=r(tLe," (MobileBERT model)"),tLe.forEach(t),FYo=i(x),AF=s(x,"LI",{});var aLe=n(AF);Dfe=s(aLe,"STRONG",{});var jlt=n(Dfe);CYo=r(jlt,"mpnet"),jlt.forEach(t),MYo=r(aLe," \u2014 "),Eq=s(aLe,"A",{href:!0});var Dlt=n(Eq);EYo=r(Dlt,"TFMPNetModel"),Dlt.forEach(t),yYo=r(aLe," (MPNet model)"),aLe.forEach(t),wYo=i(x),LF=s(x,"LI",{});var sLe=n(LF);Nfe=s(sLe,"STRONG",{});var Nlt=n(Nfe);AYo=r(Nlt,"mt5"),Nlt.forEach(t),LYo=r(sLe," \u2014 "),yq=s(sLe,"A",{href:!0});var qlt=n(yq);BYo=r(qlt,"TFMT5Model"),qlt.forEach(t),xYo=r(sLe," (mT5 model)"),sLe.forEach(t),kYo=i(x),BF=s(x,"LI",{});var nLe=n(BF);qfe=s(nLe,"STRONG",{});var Olt=n(qfe);RYo=r(Olt,"openai-gpt"),Olt.forEach(t),SYo=r(nLe," \u2014 "),wq=s(nLe,"A",{href:!0});var Glt=n(wq);PYo=r(Glt,"TFOpenAIGPTModel"),Glt.forEach(t),$Yo=r(nLe," (OpenAI GPT model)"),nLe.forEach(t),IYo=i(x),xF=s(x,"LI",{});var lLe=n(xF);Ofe=s(lLe,"STRONG",{});var Xlt=n(Ofe);jYo=r(Xlt,"pegasus"),Xlt.forEach(t),DYo=r(lLe," \u2014 "),Aq=s(lLe,"A",{href:!0});var Vlt=n(Aq);NYo=r(Vlt,"TFPegasusModel"),Vlt.forEach(t),qYo=r(lLe," (Pegasus model)"),lLe.forEach(t),OYo=i(x),kF=s(x,"LI",{});var iLe=n(kF);Gfe=s(iLe,"STRONG",{});var zlt=n(Gfe);GYo=r(zlt,"rembert"),zlt.forEach(t),XYo=r(iLe," \u2014 "),Lq=s(iLe,"A",{href:!0});var Wlt=n(Lq);VYo=r(Wlt,"TFRemBertModel"),Wlt.forEach(t),zYo=r(iLe," (RemBERT model)"),iLe.forEach(t),WYo=i(x),RF=s(x,"LI",{});var dLe=n(RF);Xfe=s(dLe,"STRONG",{});var Qlt=n(Xfe);QYo=r(Qlt,"roberta"),Qlt.forEach(t),HYo=r(dLe," \u2014 "),Bq=s(dLe,"A",{href:!0});var Hlt=n(Bq);UYo=r(Hlt,"TFRobertaModel"),Hlt.forEach(t),JYo=r(dLe," (RoBERTa model)"),dLe.forEach(t),YYo=i(x),SF=s(x,"LI",{});var cLe=n(SF);Vfe=s(cLe,"STRONG",{});var Ult=n(Vfe);KYo=r(Ult,"roformer"),Ult.forEach(t),ZYo=r(cLe," \u2014 "),xq=s(cLe,"A",{href:!0});var Jlt=n(xq);eKo=r(Jlt,"TFRoFormerModel"),Jlt.forEach(t),oKo=r(cLe," (RoFormer model)"),cLe.forEach(t),rKo=i(x),PF=s(x,"LI",{});var mLe=n(PF);zfe=s(mLe,"STRONG",{});var Ylt=n(zfe);tKo=r(Ylt,"speech_to_text"),Ylt.forEach(t),aKo=r(mLe," \u2014 "),kq=s(mLe,"A",{href:!0});var Klt=n(kq);sKo=r(Klt,"TFSpeech2TextModel"),Klt.forEach(t),nKo=r(mLe," (Speech2Text model)"),mLe.forEach(t),lKo=i(x),$F=s(x,"LI",{});var fLe=n($F);Wfe=s(fLe,"STRONG",{});var Zlt=n(Wfe);iKo=r(Zlt,"t5"),Zlt.forEach(t),dKo=r(fLe," \u2014 "),Rq=s(fLe,"A",{href:!0});var eit=n(Rq);cKo=r(eit,"TFT5Model"),eit.forEach(t),mKo=r(fLe," (T5 model)"),fLe.forEach(t),fKo=i(x),IF=s(x,"LI",{});var gLe=n(IF);Qfe=s(gLe,"STRONG",{});var oit=n(Qfe);gKo=r(oit,"tapas"),oit.forEach(t),hKo=r(gLe," \u2014 "),Sq=s(gLe,"A",{href:!0});var rit=n(Sq);uKo=r(rit,"TFTapasModel"),rit.forEach(t),pKo=r(gLe," (TAPAS model)"),gLe.forEach(t),_Ko=i(x),jF=s(x,"LI",{});var hLe=n(jF);Hfe=s(hLe,"STRONG",{});var tit=n(Hfe);bKo=r(tit,"transfo-xl"),tit.forEach(t),vKo=r(hLe," \u2014 "),Pq=s(hLe,"A",{href:!0});var ait=n(Pq);TKo=r(ait,"TFTransfoXLModel"),ait.forEach(t),FKo=r(hLe," (Transformer-XL model)"),hLe.forEach(t),CKo=i(x),DF=s(x,"LI",{});var uLe=n(DF);Ufe=s(uLe,"STRONG",{});var sit=n(Ufe);MKo=r(sit,"vit"),sit.forEach(t),EKo=r(uLe," \u2014 "),$q=s(uLe,"A",{href:!0});var nit=n($q);yKo=r(nit,"TFViTModel"),nit.forEach(t),wKo=r(uLe," (ViT model)"),uLe.forEach(t),AKo=i(x),NF=s(x,"LI",{});var pLe=n(NF);Jfe=s(pLe,"STRONG",{});var lit=n(Jfe);LKo=r(lit,"wav2vec2"),lit.forEach(t),BKo=r(pLe," \u2014 "),Iq=s(pLe,"A",{href:!0});var iit=n(Iq);xKo=r(iit,"TFWav2Vec2Model"),iit.forEach(t),kKo=r(pLe," (Wav2Vec2 model)"),pLe.forEach(t),RKo=i(x),qF=s(x,"LI",{});var _Le=n(qF);Yfe=s(_Le,"STRONG",{});var dit=n(Yfe);SKo=r(dit,"xlm"),dit.forEach(t),PKo=r(_Le," \u2014 "),jq=s(_Le,"A",{href:!0});var cit=n(jq);$Ko=r(cit,"TFXLMModel"),cit.forEach(t),IKo=r(_Le," (XLM model)"),_Le.forEach(t),jKo=i(x),OF=s(x,"LI",{});var bLe=n(OF);Kfe=s(bLe,"STRONG",{});var mit=n(Kfe);DKo=r(mit,"xlm-roberta"),mit.forEach(t),NKo=r(bLe," \u2014 "),Dq=s(bLe,"A",{href:!0});var fit=n(Dq);qKo=r(fit,"TFXLMRobertaModel"),fit.forEach(t),OKo=r(bLe," (XLM-RoBERTa model)"),bLe.forEach(t),GKo=i(x),GF=s(x,"LI",{});var vLe=n(GF);Zfe=s(vLe,"STRONG",{});var git=n(Zfe);XKo=r(git,"xlnet"),git.forEach(t),VKo=r(vLe," \u2014 "),Nq=s(vLe,"A",{href:!0});var hit=n(Nq);zKo=r(hit,"TFXLNetModel"),hit.forEach(t),WKo=r(vLe," (XLNet model)"),vLe.forEach(t),x.forEach(t),QKo=i(ha),ege=s(ha,"P",{});var uit=n(ege);HKo=r(uit,"Examples:"),uit.forEach(t),UKo=i(ha),f(RA.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),ske=i(d),uc=s(d,"H2",{class:!0});var pSe=n(uc);XF=s(pSe,"A",{id:!0,class:!0,href:!0});var pit=n(XF);oge=s(pit,"SPAN",{});var _it=n(oge);f(SA.$$.fragment,_it),_it.forEach(t),pit.forEach(t),JKo=i(pSe),rge=s(pSe,"SPAN",{});var bit=n(rge);YKo=r(bit,"TFAutoModelForPreTraining"),bit.forEach(t),pSe.forEach(t),nke=i(d),Tr=s(d,"DIV",{class:!0});var Ol=n(Tr);f(PA.$$.fragment,Ol),KKo=i(Ol),pc=s(Ol,"P",{});var pW=n(pc);ZKo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tge=s(pW,"CODE",{});var vit=n(tge);eZo=r(vit,"from_pretrained()"),vit.forEach(t),oZo=r(pW,"class method or the "),age=s(pW,"CODE",{});var Tit=n(age);rZo=r(Tit,"from_config()"),Tit.forEach(t),tZo=r(pW,`class
method.`),pW.forEach(t),aZo=i(Ol),$A=s(Ol,"P",{});var _Se=n($A);sZo=r(_Se,"This class cannot be instantiated directly using "),sge=s(_Se,"CODE",{});var Fit=n(sge);nZo=r(Fit,"__init__()"),Fit.forEach(t),lZo=r(_Se," (throws an error)."),_Se.forEach(t),iZo=i(Ol),ht=s(Ol,"DIV",{class:!0});var Gl=n(ht);f(IA.$$.fragment,Gl),dZo=i(Gl),nge=s(Gl,"P",{});var Cit=n(nge);cZo=r(Cit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cit.forEach(t),mZo=i(Gl),_c=s(Gl,"P",{});var _W=n(_c);fZo=r(_W,`Note:
Loading a model from its configuration file does `),lge=s(_W,"STRONG",{});var Mit=n(lge);gZo=r(Mit,"not"),Mit.forEach(t),hZo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=s(_W,"CODE",{});var Eit=n(ige);uZo=r(Eit,"from_pretrained()"),Eit.forEach(t),pZo=r(_W,"to load the model weights."),_W.forEach(t),_Zo=i(Gl),dge=s(Gl,"P",{});var yit=n(dge);bZo=r(yit,"Examples:"),yit.forEach(t),vZo=i(Gl),f(jA.$$.fragment,Gl),Gl.forEach(t),TZo=i(Ol),uo=s(Ol,"DIV",{class:!0});var ua=n(uo);f(DA.$$.fragment,ua),FZo=i(ua),cge=s(ua,"P",{});var wit=n(cge);CZo=r(wit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wit.forEach(t),MZo=i(ua),us=s(ua,"P",{});var T5=n(us);EZo=r(T5,"The model class to instantiate is selected based on the "),mge=s(T5,"CODE",{});var Ait=n(mge);yZo=r(Ait,"model_type"),Ait.forEach(t),wZo=r(T5,` property of the config object (either
passed as an argument or loaded from `),fge=s(T5,"CODE",{});var Lit=n(fge);AZo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),LZo=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=s(T5,"CODE",{});var Bit=n(gge);BZo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),xZo=r(T5,":"),T5.forEach(t),kZo=i(ua),H=s(ua,"UL",{});var U=n(H);VF=s(U,"LI",{});var TLe=n(VF);hge=s(TLe,"STRONG",{});var xit=n(hge);RZo=r(xit,"albert"),xit.forEach(t),SZo=r(TLe," \u2014 "),qq=s(TLe,"A",{href:!0});var kit=n(qq);PZo=r(kit,"TFAlbertForPreTraining"),kit.forEach(t),$Zo=r(TLe," (ALBERT model)"),TLe.forEach(t),IZo=i(U),zF=s(U,"LI",{});var FLe=n(zF);uge=s(FLe,"STRONG",{});var Rit=n(uge);jZo=r(Rit,"bart"),Rit.forEach(t),DZo=r(FLe," \u2014 "),Oq=s(FLe,"A",{href:!0});var Sit=n(Oq);NZo=r(Sit,"TFBartForConditionalGeneration"),Sit.forEach(t),qZo=r(FLe," (BART model)"),FLe.forEach(t),OZo=i(U),WF=s(U,"LI",{});var CLe=n(WF);pge=s(CLe,"STRONG",{});var Pit=n(pge);GZo=r(Pit,"bert"),Pit.forEach(t),XZo=r(CLe," \u2014 "),Gq=s(CLe,"A",{href:!0});var $it=n(Gq);VZo=r($it,"TFBertForPreTraining"),$it.forEach(t),zZo=r(CLe," (BERT model)"),CLe.forEach(t),WZo=i(U),QF=s(U,"LI",{});var MLe=n(QF);_ge=s(MLe,"STRONG",{});var Iit=n(_ge);QZo=r(Iit,"camembert"),Iit.forEach(t),HZo=r(MLe," \u2014 "),Xq=s(MLe,"A",{href:!0});var jit=n(Xq);UZo=r(jit,"TFCamembertForMaskedLM"),jit.forEach(t),JZo=r(MLe," (CamemBERT model)"),MLe.forEach(t),YZo=i(U),HF=s(U,"LI",{});var ELe=n(HF);bge=s(ELe,"STRONG",{});var Dit=n(bge);KZo=r(Dit,"ctrl"),Dit.forEach(t),ZZo=r(ELe," \u2014 "),Vq=s(ELe,"A",{href:!0});var Nit=n(Vq);eer=r(Nit,"TFCTRLLMHeadModel"),Nit.forEach(t),oer=r(ELe," (CTRL model)"),ELe.forEach(t),rer=i(U),UF=s(U,"LI",{});var yLe=n(UF);vge=s(yLe,"STRONG",{});var qit=n(vge);ter=r(qit,"distilbert"),qit.forEach(t),aer=r(yLe," \u2014 "),zq=s(yLe,"A",{href:!0});var Oit=n(zq);ser=r(Oit,"TFDistilBertForMaskedLM"),Oit.forEach(t),ner=r(yLe," (DistilBERT model)"),yLe.forEach(t),ler=i(U),JF=s(U,"LI",{});var wLe=n(JF);Tge=s(wLe,"STRONG",{});var Git=n(Tge);ier=r(Git,"electra"),Git.forEach(t),der=r(wLe," \u2014 "),Wq=s(wLe,"A",{href:!0});var Xit=n(Wq);cer=r(Xit,"TFElectraForPreTraining"),Xit.forEach(t),mer=r(wLe," (ELECTRA model)"),wLe.forEach(t),fer=i(U),YF=s(U,"LI",{});var ALe=n(YF);Fge=s(ALe,"STRONG",{});var Vit=n(Fge);ger=r(Vit,"flaubert"),Vit.forEach(t),her=r(ALe," \u2014 "),Qq=s(ALe,"A",{href:!0});var zit=n(Qq);uer=r(zit,"TFFlaubertWithLMHeadModel"),zit.forEach(t),per=r(ALe," (FlauBERT model)"),ALe.forEach(t),_er=i(U),KF=s(U,"LI",{});var LLe=n(KF);Cge=s(LLe,"STRONG",{});var Wit=n(Cge);ber=r(Wit,"funnel"),Wit.forEach(t),ver=r(LLe," \u2014 "),Hq=s(LLe,"A",{href:!0});var Qit=n(Hq);Ter=r(Qit,"TFFunnelForPreTraining"),Qit.forEach(t),Fer=r(LLe," (Funnel Transformer model)"),LLe.forEach(t),Cer=i(U),ZF=s(U,"LI",{});var BLe=n(ZF);Mge=s(BLe,"STRONG",{});var Hit=n(Mge);Mer=r(Hit,"gpt2"),Hit.forEach(t),Eer=r(BLe," \u2014 "),Uq=s(BLe,"A",{href:!0});var Uit=n(Uq);yer=r(Uit,"TFGPT2LMHeadModel"),Uit.forEach(t),wer=r(BLe," (OpenAI GPT-2 model)"),BLe.forEach(t),Aer=i(U),eC=s(U,"LI",{});var xLe=n(eC);Ege=s(xLe,"STRONG",{});var Jit=n(Ege);Ler=r(Jit,"layoutlm"),Jit.forEach(t),Ber=r(xLe," \u2014 "),Jq=s(xLe,"A",{href:!0});var Yit=n(Jq);xer=r(Yit,"TFLayoutLMForMaskedLM"),Yit.forEach(t),ker=r(xLe," (LayoutLM model)"),xLe.forEach(t),Rer=i(U),oC=s(U,"LI",{});var kLe=n(oC);yge=s(kLe,"STRONG",{});var Kit=n(yge);Ser=r(Kit,"lxmert"),Kit.forEach(t),Per=r(kLe," \u2014 "),Yq=s(kLe,"A",{href:!0});var Zit=n(Yq);$er=r(Zit,"TFLxmertForPreTraining"),Zit.forEach(t),Ier=r(kLe," (LXMERT model)"),kLe.forEach(t),jer=i(U),rC=s(U,"LI",{});var RLe=n(rC);wge=s(RLe,"STRONG",{});var edt=n(wge);Der=r(edt,"mobilebert"),edt.forEach(t),Ner=r(RLe," \u2014 "),Kq=s(RLe,"A",{href:!0});var odt=n(Kq);qer=r(odt,"TFMobileBertForPreTraining"),odt.forEach(t),Oer=r(RLe," (MobileBERT model)"),RLe.forEach(t),Ger=i(U),tC=s(U,"LI",{});var SLe=n(tC);Age=s(SLe,"STRONG",{});var rdt=n(Age);Xer=r(rdt,"mpnet"),rdt.forEach(t),Ver=r(SLe," \u2014 "),Zq=s(SLe,"A",{href:!0});var tdt=n(Zq);zer=r(tdt,"TFMPNetForMaskedLM"),tdt.forEach(t),Wer=r(SLe," (MPNet model)"),SLe.forEach(t),Qer=i(U),aC=s(U,"LI",{});var PLe=n(aC);Lge=s(PLe,"STRONG",{});var adt=n(Lge);Her=r(adt,"openai-gpt"),adt.forEach(t),Uer=r(PLe," \u2014 "),eO=s(PLe,"A",{href:!0});var sdt=n(eO);Jer=r(sdt,"TFOpenAIGPTLMHeadModel"),sdt.forEach(t),Yer=r(PLe," (OpenAI GPT model)"),PLe.forEach(t),Ker=i(U),sC=s(U,"LI",{});var $Le=n(sC);Bge=s($Le,"STRONG",{});var ndt=n(Bge);Zer=r(ndt,"roberta"),ndt.forEach(t),eor=r($Le," \u2014 "),oO=s($Le,"A",{href:!0});var ldt=n(oO);oor=r(ldt,"TFRobertaForMaskedLM"),ldt.forEach(t),ror=r($Le," (RoBERTa model)"),$Le.forEach(t),tor=i(U),nC=s(U,"LI",{});var ILe=n(nC);xge=s(ILe,"STRONG",{});var idt=n(xge);aor=r(idt,"t5"),idt.forEach(t),sor=r(ILe," \u2014 "),rO=s(ILe,"A",{href:!0});var ddt=n(rO);nor=r(ddt,"TFT5ForConditionalGeneration"),ddt.forEach(t),lor=r(ILe," (T5 model)"),ILe.forEach(t),ior=i(U),lC=s(U,"LI",{});var jLe=n(lC);kge=s(jLe,"STRONG",{});var cdt=n(kge);dor=r(cdt,"tapas"),cdt.forEach(t),cor=r(jLe," \u2014 "),tO=s(jLe,"A",{href:!0});var mdt=n(tO);mor=r(mdt,"TFTapasForMaskedLM"),mdt.forEach(t),gor=r(jLe," (TAPAS model)"),jLe.forEach(t),hor=i(U),iC=s(U,"LI",{});var DLe=n(iC);Rge=s(DLe,"STRONG",{});var fdt=n(Rge);uor=r(fdt,"transfo-xl"),fdt.forEach(t),por=r(DLe," \u2014 "),aO=s(DLe,"A",{href:!0});var gdt=n(aO);_or=r(gdt,"TFTransfoXLLMHeadModel"),gdt.forEach(t),bor=r(DLe," (Transformer-XL model)"),DLe.forEach(t),vor=i(U),dC=s(U,"LI",{});var NLe=n(dC);Sge=s(NLe,"STRONG",{});var hdt=n(Sge);Tor=r(hdt,"xlm"),hdt.forEach(t),For=r(NLe," \u2014 "),sO=s(NLe,"A",{href:!0});var udt=n(sO);Cor=r(udt,"TFXLMWithLMHeadModel"),udt.forEach(t),Mor=r(NLe," (XLM model)"),NLe.forEach(t),Eor=i(U),cC=s(U,"LI",{});var qLe=n(cC);Pge=s(qLe,"STRONG",{});var pdt=n(Pge);yor=r(pdt,"xlm-roberta"),pdt.forEach(t),wor=r(qLe," \u2014 "),nO=s(qLe,"A",{href:!0});var _dt=n(nO);Aor=r(_dt,"TFXLMRobertaForMaskedLM"),_dt.forEach(t),Lor=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),Bor=i(U),mC=s(U,"LI",{});var OLe=n(mC);$ge=s(OLe,"STRONG",{});var bdt=n($ge);xor=r(bdt,"xlnet"),bdt.forEach(t),kor=r(OLe," \u2014 "),lO=s(OLe,"A",{href:!0});var vdt=n(lO);Ror=r(vdt,"TFXLNetLMHeadModel"),vdt.forEach(t),Sor=r(OLe," (XLNet model)"),OLe.forEach(t),U.forEach(t),Por=i(ua),Ige=s(ua,"P",{});var Tdt=n(Ige);$or=r(Tdt,"Examples:"),Tdt.forEach(t),Ior=i(ua),f(NA.$$.fragment,ua),ua.forEach(t),Ol.forEach(t),lke=i(d),bc=s(d,"H2",{class:!0});var bSe=n(bc);fC=s(bSe,"A",{id:!0,class:!0,href:!0});var Fdt=n(fC);jge=s(Fdt,"SPAN",{});var Cdt=n(jge);f(qA.$$.fragment,Cdt),Cdt.forEach(t),Fdt.forEach(t),jor=i(bSe),Dge=s(bSe,"SPAN",{});var Mdt=n(Dge);Dor=r(Mdt,"TFAutoModelForCausalLM"),Mdt.forEach(t),bSe.forEach(t),ike=i(d),Fr=s(d,"DIV",{class:!0});var Xl=n(Fr);f(OA.$$.fragment,Xl),Nor=i(Xl),vc=s(Xl,"P",{});var bW=n(vc);qor=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nge=s(bW,"CODE",{});var Edt=n(Nge);Oor=r(Edt,"from_pretrained()"),Edt.forEach(t),Gor=r(bW,"class method or the "),qge=s(bW,"CODE",{});var ydt=n(qge);Xor=r(ydt,"from_config()"),ydt.forEach(t),Vor=r(bW,`class
method.`),bW.forEach(t),zor=i(Xl),GA=s(Xl,"P",{});var vSe=n(GA);Wor=r(vSe,"This class cannot be instantiated directly using "),Oge=s(vSe,"CODE",{});var wdt=n(Oge);Qor=r(wdt,"__init__()"),wdt.forEach(t),Hor=r(vSe," (throws an error)."),vSe.forEach(t),Uor=i(Xl),ut=s(Xl,"DIV",{class:!0});var Vl=n(ut);f(XA.$$.fragment,Vl),Jor=i(Vl),Gge=s(Vl,"P",{});var Adt=n(Gge);Yor=r(Adt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Adt.forEach(t),Kor=i(Vl),Tc=s(Vl,"P",{});var vW=n(Tc);Zor=r(vW,`Note:
Loading a model from its configuration file does `),Xge=s(vW,"STRONG",{});var Ldt=n(Xge);err=r(Ldt,"not"),Ldt.forEach(t),orr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vge=s(vW,"CODE",{});var Bdt=n(Vge);rrr=r(Bdt,"from_pretrained()"),Bdt.forEach(t),trr=r(vW,"to load the model weights."),vW.forEach(t),arr=i(Vl),zge=s(Vl,"P",{});var xdt=n(zge);srr=r(xdt,"Examples:"),xdt.forEach(t),nrr=i(Vl),f(VA.$$.fragment,Vl),Vl.forEach(t),lrr=i(Xl),po=s(Xl,"DIV",{class:!0});var pa=n(po);f(zA.$$.fragment,pa),irr=i(pa),Wge=s(pa,"P",{});var kdt=n(Wge);drr=r(kdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kdt.forEach(t),crr=i(pa),ps=s(pa,"P",{});var F5=n(ps);mrr=r(F5,"The model class to instantiate is selected based on the "),Qge=s(F5,"CODE",{});var Rdt=n(Qge);frr=r(Rdt,"model_type"),Rdt.forEach(t),grr=r(F5,` property of the config object (either
passed as an argument or loaded from `),Hge=s(F5,"CODE",{});var Sdt=n(Hge);hrr=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),urr=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=s(F5,"CODE",{});var Pdt=n(Uge);prr=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),_rr=r(F5,":"),F5.forEach(t),brr=i(pa),ue=s(pa,"UL",{});var Me=n(ue);gC=s(Me,"LI",{});var GLe=n(gC);Jge=s(GLe,"STRONG",{});var $dt=n(Jge);vrr=r($dt,"bert"),$dt.forEach(t),Trr=r(GLe," \u2014 "),iO=s(GLe,"A",{href:!0});var Idt=n(iO);Frr=r(Idt,"TFBertLMHeadModel"),Idt.forEach(t),Crr=r(GLe," (BERT model)"),GLe.forEach(t),Mrr=i(Me),hC=s(Me,"LI",{});var XLe=n(hC);Yge=s(XLe,"STRONG",{});var jdt=n(Yge);Err=r(jdt,"ctrl"),jdt.forEach(t),yrr=r(XLe," \u2014 "),dO=s(XLe,"A",{href:!0});var Ddt=n(dO);wrr=r(Ddt,"TFCTRLLMHeadModel"),Ddt.forEach(t),Arr=r(XLe," (CTRL model)"),XLe.forEach(t),Lrr=i(Me),uC=s(Me,"LI",{});var VLe=n(uC);Kge=s(VLe,"STRONG",{});var Ndt=n(Kge);Brr=r(Ndt,"gpt2"),Ndt.forEach(t),xrr=r(VLe," \u2014 "),cO=s(VLe,"A",{href:!0});var qdt=n(cO);krr=r(qdt,"TFGPT2LMHeadModel"),qdt.forEach(t),Rrr=r(VLe," (OpenAI GPT-2 model)"),VLe.forEach(t),Srr=i(Me),pC=s(Me,"LI",{});var zLe=n(pC);Zge=s(zLe,"STRONG",{});var Odt=n(Zge);Prr=r(Odt,"openai-gpt"),Odt.forEach(t),$rr=r(zLe," \u2014 "),mO=s(zLe,"A",{href:!0});var Gdt=n(mO);Irr=r(Gdt,"TFOpenAIGPTLMHeadModel"),Gdt.forEach(t),jrr=r(zLe," (OpenAI GPT model)"),zLe.forEach(t),Drr=i(Me),_C=s(Me,"LI",{});var WLe=n(_C);ehe=s(WLe,"STRONG",{});var Xdt=n(ehe);Nrr=r(Xdt,"rembert"),Xdt.forEach(t),qrr=r(WLe," \u2014 "),fO=s(WLe,"A",{href:!0});var Vdt=n(fO);Orr=r(Vdt,"TFRemBertForCausalLM"),Vdt.forEach(t),Grr=r(WLe," (RemBERT model)"),WLe.forEach(t),Xrr=i(Me),bC=s(Me,"LI",{});var QLe=n(bC);ohe=s(QLe,"STRONG",{});var zdt=n(ohe);Vrr=r(zdt,"roberta"),zdt.forEach(t),zrr=r(QLe," \u2014 "),gO=s(QLe,"A",{href:!0});var Wdt=n(gO);Wrr=r(Wdt,"TFRobertaForCausalLM"),Wdt.forEach(t),Qrr=r(QLe," (RoBERTa model)"),QLe.forEach(t),Hrr=i(Me),vC=s(Me,"LI",{});var HLe=n(vC);rhe=s(HLe,"STRONG",{});var Qdt=n(rhe);Urr=r(Qdt,"roformer"),Qdt.forEach(t),Jrr=r(HLe," \u2014 "),hO=s(HLe,"A",{href:!0});var Hdt=n(hO);Yrr=r(Hdt,"TFRoFormerForCausalLM"),Hdt.forEach(t),Krr=r(HLe," (RoFormer model)"),HLe.forEach(t),Zrr=i(Me),TC=s(Me,"LI",{});var ULe=n(TC);the=s(ULe,"STRONG",{});var Udt=n(the);etr=r(Udt,"transfo-xl"),Udt.forEach(t),otr=r(ULe," \u2014 "),uO=s(ULe,"A",{href:!0});var Jdt=n(uO);rtr=r(Jdt,"TFTransfoXLLMHeadModel"),Jdt.forEach(t),ttr=r(ULe," (Transformer-XL model)"),ULe.forEach(t),atr=i(Me),FC=s(Me,"LI",{});var JLe=n(FC);ahe=s(JLe,"STRONG",{});var Ydt=n(ahe);str=r(Ydt,"xlm"),Ydt.forEach(t),ntr=r(JLe," \u2014 "),pO=s(JLe,"A",{href:!0});var Kdt=n(pO);ltr=r(Kdt,"TFXLMWithLMHeadModel"),Kdt.forEach(t),itr=r(JLe," (XLM model)"),JLe.forEach(t),dtr=i(Me),CC=s(Me,"LI",{});var YLe=n(CC);she=s(YLe,"STRONG",{});var Zdt=n(she);ctr=r(Zdt,"xlnet"),Zdt.forEach(t),mtr=r(YLe," \u2014 "),_O=s(YLe,"A",{href:!0});var ect=n(_O);ftr=r(ect,"TFXLNetLMHeadModel"),ect.forEach(t),gtr=r(YLe," (XLNet model)"),YLe.forEach(t),Me.forEach(t),htr=i(pa),nhe=s(pa,"P",{});var oct=n(nhe);utr=r(oct,"Examples:"),oct.forEach(t),ptr=i(pa),f(WA.$$.fragment,pa),pa.forEach(t),Xl.forEach(t),dke=i(d),Fc=s(d,"H2",{class:!0});var TSe=n(Fc);MC=s(TSe,"A",{id:!0,class:!0,href:!0});var rct=n(MC);lhe=s(rct,"SPAN",{});var tct=n(lhe);f(QA.$$.fragment,tct),tct.forEach(t),rct.forEach(t),_tr=i(TSe),ihe=s(TSe,"SPAN",{});var act=n(ihe);btr=r(act,"TFAutoModelForImageClassification"),act.forEach(t),TSe.forEach(t),cke=i(d),Cr=s(d,"DIV",{class:!0});var zl=n(Cr);f(HA.$$.fragment,zl),vtr=i(zl),Cc=s(zl,"P",{});var TW=n(Cc);Ttr=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dhe=s(TW,"CODE",{});var sct=n(dhe);Ftr=r(sct,"from_pretrained()"),sct.forEach(t),Ctr=r(TW,"class method or the "),che=s(TW,"CODE",{});var nct=n(che);Mtr=r(nct,"from_config()"),nct.forEach(t),Etr=r(TW,`class
method.`),TW.forEach(t),ytr=i(zl),UA=s(zl,"P",{});var FSe=n(UA);wtr=r(FSe,"This class cannot be instantiated directly using "),mhe=s(FSe,"CODE",{});var lct=n(mhe);Atr=r(lct,"__init__()"),lct.forEach(t),Ltr=r(FSe," (throws an error)."),FSe.forEach(t),Btr=i(zl),pt=s(zl,"DIV",{class:!0});var Wl=n(pt);f(JA.$$.fragment,Wl),xtr=i(Wl),fhe=s(Wl,"P",{});var ict=n(fhe);ktr=r(ict,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ict.forEach(t),Rtr=i(Wl),Mc=s(Wl,"P",{});var FW=n(Mc);Str=r(FW,`Note:
Loading a model from its configuration file does `),ghe=s(FW,"STRONG",{});var dct=n(ghe);Ptr=r(dct,"not"),dct.forEach(t),$tr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hhe=s(FW,"CODE",{});var cct=n(hhe);Itr=r(cct,"from_pretrained()"),cct.forEach(t),jtr=r(FW,"to load the model weights."),FW.forEach(t),Dtr=i(Wl),uhe=s(Wl,"P",{});var mct=n(uhe);Ntr=r(mct,"Examples:"),mct.forEach(t),qtr=i(Wl),f(YA.$$.fragment,Wl),Wl.forEach(t),Otr=i(zl),_o=s(zl,"DIV",{class:!0});var _a=n(_o);f(KA.$$.fragment,_a),Gtr=i(_a),phe=s(_a,"P",{});var fct=n(phe);Xtr=r(fct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fct.forEach(t),Vtr=i(_a),_s=s(_a,"P",{});var C5=n(_s);ztr=r(C5,"The model class to instantiate is selected based on the "),_he=s(C5,"CODE",{});var gct=n(_he);Wtr=r(gct,"model_type"),gct.forEach(t),Qtr=r(C5,` property of the config object (either
passed as an argument or loaded from `),bhe=s(C5,"CODE",{});var hct=n(bhe);Htr=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),Utr=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=s(C5,"CODE",{});var uct=n(vhe);Jtr=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Ytr=r(C5,":"),C5.forEach(t),Ktr=i(_a),ZA=s(_a,"UL",{});var CSe=n(ZA);EC=s(CSe,"LI",{});var KLe=n(EC);The=s(KLe,"STRONG",{});var pct=n(The);Ztr=r(pct,"convnext"),pct.forEach(t),ear=r(KLe," \u2014 "),bO=s(KLe,"A",{href:!0});var _ct=n(bO);oar=r(_ct,"TFConvNextForImageClassification"),_ct.forEach(t),rar=r(KLe," (ConvNext model)"),KLe.forEach(t),tar=i(CSe),yC=s(CSe,"LI",{});var ZLe=n(yC);Fhe=s(ZLe,"STRONG",{});var bct=n(Fhe);aar=r(bct,"vit"),bct.forEach(t),sar=r(ZLe," \u2014 "),vO=s(ZLe,"A",{href:!0});var vct=n(vO);nar=r(vct,"TFViTForImageClassification"),vct.forEach(t),lar=r(ZLe," (ViT model)"),ZLe.forEach(t),CSe.forEach(t),iar=i(_a),Che=s(_a,"P",{});var Tct=n(Che);dar=r(Tct,"Examples:"),Tct.forEach(t),car=i(_a),f(e0.$$.fragment,_a),_a.forEach(t),zl.forEach(t),mke=i(d),Ec=s(d,"H2",{class:!0});var MSe=n(Ec);wC=s(MSe,"A",{id:!0,class:!0,href:!0});var Fct=n(wC);Mhe=s(Fct,"SPAN",{});var Cct=n(Mhe);f(o0.$$.fragment,Cct),Cct.forEach(t),Fct.forEach(t),mar=i(MSe),Ehe=s(MSe,"SPAN",{});var Mct=n(Ehe);far=r(Mct,"TFAutoModelForMaskedLM"),Mct.forEach(t),MSe.forEach(t),fke=i(d),Mr=s(d,"DIV",{class:!0});var Ql=n(Mr);f(r0.$$.fragment,Ql),gar=i(Ql),yc=s(Ql,"P",{});var CW=n(yc);har=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yhe=s(CW,"CODE",{});var Ect=n(yhe);uar=r(Ect,"from_pretrained()"),Ect.forEach(t),par=r(CW,"class method or the "),whe=s(CW,"CODE",{});var yct=n(whe);_ar=r(yct,"from_config()"),yct.forEach(t),bar=r(CW,`class
method.`),CW.forEach(t),Tar=i(Ql),t0=s(Ql,"P",{});var ESe=n(t0);Far=r(ESe,"This class cannot be instantiated directly using "),Ahe=s(ESe,"CODE",{});var wct=n(Ahe);Car=r(wct,"__init__()"),wct.forEach(t),Mar=r(ESe," (throws an error)."),ESe.forEach(t),Ear=i(Ql),_t=s(Ql,"DIV",{class:!0});var Hl=n(_t);f(a0.$$.fragment,Hl),yar=i(Hl),Lhe=s(Hl,"P",{});var Act=n(Lhe);war=r(Act,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Act.forEach(t),Aar=i(Hl),wc=s(Hl,"P",{});var MW=n(wc);Lar=r(MW,`Note:
Loading a model from its configuration file does `),Bhe=s(MW,"STRONG",{});var Lct=n(Bhe);Bar=r(Lct,"not"),Lct.forEach(t),xar=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=s(MW,"CODE",{});var Bct=n(xhe);kar=r(Bct,"from_pretrained()"),Bct.forEach(t),Rar=r(MW,"to load the model weights."),MW.forEach(t),Sar=i(Hl),khe=s(Hl,"P",{});var xct=n(khe);Par=r(xct,"Examples:"),xct.forEach(t),$ar=i(Hl),f(s0.$$.fragment,Hl),Hl.forEach(t),Iar=i(Ql),bo=s(Ql,"DIV",{class:!0});var ba=n(bo);f(n0.$$.fragment,ba),jar=i(ba),Rhe=s(ba,"P",{});var kct=n(Rhe);Dar=r(kct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kct.forEach(t),Nar=i(ba),bs=s(ba,"P",{});var M5=n(bs);qar=r(M5,"The model class to instantiate is selected based on the "),She=s(M5,"CODE",{});var Rct=n(She);Oar=r(Rct,"model_type"),Rct.forEach(t),Gar=r(M5,` property of the config object (either
passed as an argument or loaded from `),Phe=s(M5,"CODE",{});var Sct=n(Phe);Xar=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),Var=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=s(M5,"CODE",{});var Pct=n($he);zar=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),War=r(M5,":"),M5.forEach(t),Qar=i(ba),Y=s(ba,"UL",{});var ee=n(Y);AC=s(ee,"LI",{});var e8e=n(AC);Ihe=s(e8e,"STRONG",{});var $ct=n(Ihe);Har=r($ct,"albert"),$ct.forEach(t),Uar=r(e8e," \u2014 "),TO=s(e8e,"A",{href:!0});var Ict=n(TO);Jar=r(Ict,"TFAlbertForMaskedLM"),Ict.forEach(t),Yar=r(e8e," (ALBERT model)"),e8e.forEach(t),Kar=i(ee),LC=s(ee,"LI",{});var o8e=n(LC);jhe=s(o8e,"STRONG",{});var jct=n(jhe);Zar=r(jct,"bert"),jct.forEach(t),esr=r(o8e," \u2014 "),FO=s(o8e,"A",{href:!0});var Dct=n(FO);osr=r(Dct,"TFBertForMaskedLM"),Dct.forEach(t),rsr=r(o8e," (BERT model)"),o8e.forEach(t),tsr=i(ee),BC=s(ee,"LI",{});var r8e=n(BC);Dhe=s(r8e,"STRONG",{});var Nct=n(Dhe);asr=r(Nct,"camembert"),Nct.forEach(t),ssr=r(r8e," \u2014 "),CO=s(r8e,"A",{href:!0});var qct=n(CO);nsr=r(qct,"TFCamembertForMaskedLM"),qct.forEach(t),lsr=r(r8e," (CamemBERT model)"),r8e.forEach(t),isr=i(ee),xC=s(ee,"LI",{});var t8e=n(xC);Nhe=s(t8e,"STRONG",{});var Oct=n(Nhe);dsr=r(Oct,"convbert"),Oct.forEach(t),csr=r(t8e," \u2014 "),MO=s(t8e,"A",{href:!0});var Gct=n(MO);msr=r(Gct,"TFConvBertForMaskedLM"),Gct.forEach(t),fsr=r(t8e," (ConvBERT model)"),t8e.forEach(t),gsr=i(ee),kC=s(ee,"LI",{});var a8e=n(kC);qhe=s(a8e,"STRONG",{});var Xct=n(qhe);hsr=r(Xct,"deberta"),Xct.forEach(t),usr=r(a8e," \u2014 "),EO=s(a8e,"A",{href:!0});var Vct=n(EO);psr=r(Vct,"TFDebertaForMaskedLM"),Vct.forEach(t),_sr=r(a8e," (DeBERTa model)"),a8e.forEach(t),bsr=i(ee),RC=s(ee,"LI",{});var s8e=n(RC);Ohe=s(s8e,"STRONG",{});var zct=n(Ohe);vsr=r(zct,"deberta-v2"),zct.forEach(t),Tsr=r(s8e," \u2014 "),yO=s(s8e,"A",{href:!0});var Wct=n(yO);Fsr=r(Wct,"TFDebertaV2ForMaskedLM"),Wct.forEach(t),Csr=r(s8e," (DeBERTa-v2 model)"),s8e.forEach(t),Msr=i(ee),SC=s(ee,"LI",{});var n8e=n(SC);Ghe=s(n8e,"STRONG",{});var Qct=n(Ghe);Esr=r(Qct,"distilbert"),Qct.forEach(t),ysr=r(n8e," \u2014 "),wO=s(n8e,"A",{href:!0});var Hct=n(wO);wsr=r(Hct,"TFDistilBertForMaskedLM"),Hct.forEach(t),Asr=r(n8e," (DistilBERT model)"),n8e.forEach(t),Lsr=i(ee),PC=s(ee,"LI",{});var l8e=n(PC);Xhe=s(l8e,"STRONG",{});var Uct=n(Xhe);Bsr=r(Uct,"electra"),Uct.forEach(t),xsr=r(l8e," \u2014 "),AO=s(l8e,"A",{href:!0});var Jct=n(AO);ksr=r(Jct,"TFElectraForMaskedLM"),Jct.forEach(t),Rsr=r(l8e," (ELECTRA model)"),l8e.forEach(t),Ssr=i(ee),$C=s(ee,"LI",{});var i8e=n($C);Vhe=s(i8e,"STRONG",{});var Yct=n(Vhe);Psr=r(Yct,"flaubert"),Yct.forEach(t),$sr=r(i8e," \u2014 "),LO=s(i8e,"A",{href:!0});var Kct=n(LO);Isr=r(Kct,"TFFlaubertWithLMHeadModel"),Kct.forEach(t),jsr=r(i8e," (FlauBERT model)"),i8e.forEach(t),Dsr=i(ee),IC=s(ee,"LI",{});var d8e=n(IC);zhe=s(d8e,"STRONG",{});var Zct=n(zhe);Nsr=r(Zct,"funnel"),Zct.forEach(t),qsr=r(d8e," \u2014 "),BO=s(d8e,"A",{href:!0});var emt=n(BO);Osr=r(emt,"TFFunnelForMaskedLM"),emt.forEach(t),Gsr=r(d8e," (Funnel Transformer model)"),d8e.forEach(t),Xsr=i(ee),jC=s(ee,"LI",{});var c8e=n(jC);Whe=s(c8e,"STRONG",{});var omt=n(Whe);Vsr=r(omt,"layoutlm"),omt.forEach(t),zsr=r(c8e," \u2014 "),xO=s(c8e,"A",{href:!0});var rmt=n(xO);Wsr=r(rmt,"TFLayoutLMForMaskedLM"),rmt.forEach(t),Qsr=r(c8e," (LayoutLM model)"),c8e.forEach(t),Hsr=i(ee),DC=s(ee,"LI",{});var m8e=n(DC);Qhe=s(m8e,"STRONG",{});var tmt=n(Qhe);Usr=r(tmt,"longformer"),tmt.forEach(t),Jsr=r(m8e," \u2014 "),kO=s(m8e,"A",{href:!0});var amt=n(kO);Ysr=r(amt,"TFLongformerForMaskedLM"),amt.forEach(t),Ksr=r(m8e," (Longformer model)"),m8e.forEach(t),Zsr=i(ee),NC=s(ee,"LI",{});var f8e=n(NC);Hhe=s(f8e,"STRONG",{});var smt=n(Hhe);enr=r(smt,"mobilebert"),smt.forEach(t),onr=r(f8e," \u2014 "),RO=s(f8e,"A",{href:!0});var nmt=n(RO);rnr=r(nmt,"TFMobileBertForMaskedLM"),nmt.forEach(t),tnr=r(f8e," (MobileBERT model)"),f8e.forEach(t),anr=i(ee),qC=s(ee,"LI",{});var g8e=n(qC);Uhe=s(g8e,"STRONG",{});var lmt=n(Uhe);snr=r(lmt,"mpnet"),lmt.forEach(t),nnr=r(g8e," \u2014 "),SO=s(g8e,"A",{href:!0});var imt=n(SO);lnr=r(imt,"TFMPNetForMaskedLM"),imt.forEach(t),inr=r(g8e," (MPNet model)"),g8e.forEach(t),dnr=i(ee),OC=s(ee,"LI",{});var h8e=n(OC);Jhe=s(h8e,"STRONG",{});var dmt=n(Jhe);cnr=r(dmt,"rembert"),dmt.forEach(t),mnr=r(h8e," \u2014 "),PO=s(h8e,"A",{href:!0});var cmt=n(PO);fnr=r(cmt,"TFRemBertForMaskedLM"),cmt.forEach(t),gnr=r(h8e," (RemBERT model)"),h8e.forEach(t),hnr=i(ee),GC=s(ee,"LI",{});var u8e=n(GC);Yhe=s(u8e,"STRONG",{});var mmt=n(Yhe);unr=r(mmt,"roberta"),mmt.forEach(t),pnr=r(u8e," \u2014 "),$O=s(u8e,"A",{href:!0});var fmt=n($O);_nr=r(fmt,"TFRobertaForMaskedLM"),fmt.forEach(t),bnr=r(u8e," (RoBERTa model)"),u8e.forEach(t),vnr=i(ee),XC=s(ee,"LI",{});var p8e=n(XC);Khe=s(p8e,"STRONG",{});var gmt=n(Khe);Tnr=r(gmt,"roformer"),gmt.forEach(t),Fnr=r(p8e," \u2014 "),IO=s(p8e,"A",{href:!0});var hmt=n(IO);Cnr=r(hmt,"TFRoFormerForMaskedLM"),hmt.forEach(t),Mnr=r(p8e," (RoFormer model)"),p8e.forEach(t),Enr=i(ee),VC=s(ee,"LI",{});var _8e=n(VC);Zhe=s(_8e,"STRONG",{});var umt=n(Zhe);ynr=r(umt,"tapas"),umt.forEach(t),wnr=r(_8e," \u2014 "),jO=s(_8e,"A",{href:!0});var pmt=n(jO);Anr=r(pmt,"TFTapasForMaskedLM"),pmt.forEach(t),Lnr=r(_8e," (TAPAS model)"),_8e.forEach(t),Bnr=i(ee),zC=s(ee,"LI",{});var b8e=n(zC);eue=s(b8e,"STRONG",{});var _mt=n(eue);xnr=r(_mt,"xlm"),_mt.forEach(t),knr=r(b8e," \u2014 "),DO=s(b8e,"A",{href:!0});var bmt=n(DO);Rnr=r(bmt,"TFXLMWithLMHeadModel"),bmt.forEach(t),Snr=r(b8e," (XLM model)"),b8e.forEach(t),Pnr=i(ee),WC=s(ee,"LI",{});var v8e=n(WC);oue=s(v8e,"STRONG",{});var vmt=n(oue);$nr=r(vmt,"xlm-roberta"),vmt.forEach(t),Inr=r(v8e," \u2014 "),NO=s(v8e,"A",{href:!0});var Tmt=n(NO);jnr=r(Tmt,"TFXLMRobertaForMaskedLM"),Tmt.forEach(t),Dnr=r(v8e," (XLM-RoBERTa model)"),v8e.forEach(t),ee.forEach(t),Nnr=i(ba),rue=s(ba,"P",{});var Fmt=n(rue);qnr=r(Fmt,"Examples:"),Fmt.forEach(t),Onr=i(ba),f(l0.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),gke=i(d),Ac=s(d,"H2",{class:!0});var ySe=n(Ac);QC=s(ySe,"A",{id:!0,class:!0,href:!0});var Cmt=n(QC);tue=s(Cmt,"SPAN",{});var Mmt=n(tue);f(i0.$$.fragment,Mmt),Mmt.forEach(t),Cmt.forEach(t),Gnr=i(ySe),aue=s(ySe,"SPAN",{});var Emt=n(aue);Xnr=r(Emt,"TFAutoModelForSeq2SeqLM"),Emt.forEach(t),ySe.forEach(t),hke=i(d),Er=s(d,"DIV",{class:!0});var Ul=n(Er);f(d0.$$.fragment,Ul),Vnr=i(Ul),Lc=s(Ul,"P",{});var EW=n(Lc);znr=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sue=s(EW,"CODE",{});var ymt=n(sue);Wnr=r(ymt,"from_pretrained()"),ymt.forEach(t),Qnr=r(EW,"class method or the "),nue=s(EW,"CODE",{});var wmt=n(nue);Hnr=r(wmt,"from_config()"),wmt.forEach(t),Unr=r(EW,`class
method.`),EW.forEach(t),Jnr=i(Ul),c0=s(Ul,"P",{});var wSe=n(c0);Ynr=r(wSe,"This class cannot be instantiated directly using "),lue=s(wSe,"CODE",{});var Amt=n(lue);Knr=r(Amt,"__init__()"),Amt.forEach(t),Znr=r(wSe," (throws an error)."),wSe.forEach(t),elr=i(Ul),bt=s(Ul,"DIV",{class:!0});var Jl=n(bt);f(m0.$$.fragment,Jl),olr=i(Jl),iue=s(Jl,"P",{});var Lmt=n(iue);rlr=r(Lmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lmt.forEach(t),tlr=i(Jl),Bc=s(Jl,"P",{});var yW=n(Bc);alr=r(yW,`Note:
Loading a model from its configuration file does `),due=s(yW,"STRONG",{});var Bmt=n(due);slr=r(Bmt,"not"),Bmt.forEach(t),nlr=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=s(yW,"CODE",{});var xmt=n(cue);llr=r(xmt,"from_pretrained()"),xmt.forEach(t),ilr=r(yW,"to load the model weights."),yW.forEach(t),dlr=i(Jl),mue=s(Jl,"P",{});var kmt=n(mue);clr=r(kmt,"Examples:"),kmt.forEach(t),mlr=i(Jl),f(f0.$$.fragment,Jl),Jl.forEach(t),flr=i(Ul),vo=s(Ul,"DIV",{class:!0});var va=n(vo);f(g0.$$.fragment,va),glr=i(va),fue=s(va,"P",{});var Rmt=n(fue);hlr=r(Rmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rmt.forEach(t),ulr=i(va),vs=s(va,"P",{});var E5=n(vs);plr=r(E5,"The model class to instantiate is selected based on the "),gue=s(E5,"CODE",{});var Smt=n(gue);_lr=r(Smt,"model_type"),Smt.forEach(t),blr=r(E5,` property of the config object (either
passed as an argument or loaded from `),hue=s(E5,"CODE",{});var Pmt=n(hue);vlr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),Tlr=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=s(E5,"CODE",{});var $mt=n(uue);Flr=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),Clr=r(E5,":"),E5.forEach(t),Mlr=i(va),pe=s(va,"UL",{});var Ee=n(pe);HC=s(Ee,"LI",{});var T8e=n(HC);pue=s(T8e,"STRONG",{});var Imt=n(pue);Elr=r(Imt,"bart"),Imt.forEach(t),ylr=r(T8e," \u2014 "),qO=s(T8e,"A",{href:!0});var jmt=n(qO);wlr=r(jmt,"TFBartForConditionalGeneration"),jmt.forEach(t),Alr=r(T8e," (BART model)"),T8e.forEach(t),Llr=i(Ee),UC=s(Ee,"LI",{});var F8e=n(UC);_ue=s(F8e,"STRONG",{});var Dmt=n(_ue);Blr=r(Dmt,"blenderbot"),Dmt.forEach(t),xlr=r(F8e," \u2014 "),OO=s(F8e,"A",{href:!0});var Nmt=n(OO);klr=r(Nmt,"TFBlenderbotForConditionalGeneration"),Nmt.forEach(t),Rlr=r(F8e," (Blenderbot model)"),F8e.forEach(t),Slr=i(Ee),JC=s(Ee,"LI",{});var C8e=n(JC);bue=s(C8e,"STRONG",{});var qmt=n(bue);Plr=r(qmt,"blenderbot-small"),qmt.forEach(t),$lr=r(C8e," \u2014 "),GO=s(C8e,"A",{href:!0});var Omt=n(GO);Ilr=r(Omt,"TFBlenderbotSmallForConditionalGeneration"),Omt.forEach(t),jlr=r(C8e," (BlenderbotSmall model)"),C8e.forEach(t),Dlr=i(Ee),YC=s(Ee,"LI",{});var M8e=n(YC);vue=s(M8e,"STRONG",{});var Gmt=n(vue);Nlr=r(Gmt,"encoder-decoder"),Gmt.forEach(t),qlr=r(M8e," \u2014 "),XO=s(M8e,"A",{href:!0});var Xmt=n(XO);Olr=r(Xmt,"TFEncoderDecoderModel"),Xmt.forEach(t),Glr=r(M8e," (Encoder decoder model)"),M8e.forEach(t),Xlr=i(Ee),KC=s(Ee,"LI",{});var E8e=n(KC);Tue=s(E8e,"STRONG",{});var Vmt=n(Tue);Vlr=r(Vmt,"led"),Vmt.forEach(t),zlr=r(E8e," \u2014 "),VO=s(E8e,"A",{href:!0});var zmt=n(VO);Wlr=r(zmt,"TFLEDForConditionalGeneration"),zmt.forEach(t),Qlr=r(E8e," (LED model)"),E8e.forEach(t),Hlr=i(Ee),ZC=s(Ee,"LI",{});var y8e=n(ZC);Fue=s(y8e,"STRONG",{});var Wmt=n(Fue);Ulr=r(Wmt,"marian"),Wmt.forEach(t),Jlr=r(y8e," \u2014 "),zO=s(y8e,"A",{href:!0});var Qmt=n(zO);Ylr=r(Qmt,"TFMarianMTModel"),Qmt.forEach(t),Klr=r(y8e," (Marian model)"),y8e.forEach(t),Zlr=i(Ee),eM=s(Ee,"LI",{});var w8e=n(eM);Cue=s(w8e,"STRONG",{});var Hmt=n(Cue);eir=r(Hmt,"mbart"),Hmt.forEach(t),oir=r(w8e," \u2014 "),WO=s(w8e,"A",{href:!0});var Umt=n(WO);rir=r(Umt,"TFMBartForConditionalGeneration"),Umt.forEach(t),tir=r(w8e," (mBART model)"),w8e.forEach(t),air=i(Ee),oM=s(Ee,"LI",{});var A8e=n(oM);Mue=s(A8e,"STRONG",{});var Jmt=n(Mue);sir=r(Jmt,"mt5"),Jmt.forEach(t),nir=r(A8e," \u2014 "),QO=s(A8e,"A",{href:!0});var Ymt=n(QO);lir=r(Ymt,"TFMT5ForConditionalGeneration"),Ymt.forEach(t),iir=r(A8e," (mT5 model)"),A8e.forEach(t),dir=i(Ee),rM=s(Ee,"LI",{});var L8e=n(rM);Eue=s(L8e,"STRONG",{});var Kmt=n(Eue);cir=r(Kmt,"pegasus"),Kmt.forEach(t),mir=r(L8e," \u2014 "),HO=s(L8e,"A",{href:!0});var Zmt=n(HO);fir=r(Zmt,"TFPegasusForConditionalGeneration"),Zmt.forEach(t),gir=r(L8e," (Pegasus model)"),L8e.forEach(t),hir=i(Ee),tM=s(Ee,"LI",{});var B8e=n(tM);yue=s(B8e,"STRONG",{});var eft=n(yue);uir=r(eft,"t5"),eft.forEach(t),pir=r(B8e," \u2014 "),UO=s(B8e,"A",{href:!0});var oft=n(UO);_ir=r(oft,"TFT5ForConditionalGeneration"),oft.forEach(t),bir=r(B8e," (T5 model)"),B8e.forEach(t),Ee.forEach(t),vir=i(va),wue=s(va,"P",{});var rft=n(wue);Tir=r(rft,"Examples:"),rft.forEach(t),Fir=i(va),f(h0.$$.fragment,va),va.forEach(t),Ul.forEach(t),uke=i(d),xc=s(d,"H2",{class:!0});var ASe=n(xc);aM=s(ASe,"A",{id:!0,class:!0,href:!0});var tft=n(aM);Aue=s(tft,"SPAN",{});var aft=n(Aue);f(u0.$$.fragment,aft),aft.forEach(t),tft.forEach(t),Cir=i(ASe),Lue=s(ASe,"SPAN",{});var sft=n(Lue);Mir=r(sft,"TFAutoModelForSequenceClassification"),sft.forEach(t),ASe.forEach(t),pke=i(d),yr=s(d,"DIV",{class:!0});var Yl=n(yr);f(p0.$$.fragment,Yl),Eir=i(Yl),kc=s(Yl,"P",{});var wW=n(kc);yir=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bue=s(wW,"CODE",{});var nft=n(Bue);wir=r(nft,"from_pretrained()"),nft.forEach(t),Air=r(wW,"class method or the "),xue=s(wW,"CODE",{});var lft=n(xue);Lir=r(lft,"from_config()"),lft.forEach(t),Bir=r(wW,`class
method.`),wW.forEach(t),xir=i(Yl),_0=s(Yl,"P",{});var LSe=n(_0);kir=r(LSe,"This class cannot be instantiated directly using "),kue=s(LSe,"CODE",{});var ift=n(kue);Rir=r(ift,"__init__()"),ift.forEach(t),Sir=r(LSe," (throws an error)."),LSe.forEach(t),Pir=i(Yl),vt=s(Yl,"DIV",{class:!0});var Kl=n(vt);f(b0.$$.fragment,Kl),$ir=i(Kl),Rue=s(Kl,"P",{});var dft=n(Rue);Iir=r(dft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dft.forEach(t),jir=i(Kl),Rc=s(Kl,"P",{});var AW=n(Rc);Dir=r(AW,`Note:
Loading a model from its configuration file does `),Sue=s(AW,"STRONG",{});var cft=n(Sue);Nir=r(cft,"not"),cft.forEach(t),qir=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pue=s(AW,"CODE",{});var mft=n(Pue);Oir=r(mft,"from_pretrained()"),mft.forEach(t),Gir=r(AW,"to load the model weights."),AW.forEach(t),Xir=i(Kl),$ue=s(Kl,"P",{});var fft=n($ue);Vir=r(fft,"Examples:"),fft.forEach(t),zir=i(Kl),f(v0.$$.fragment,Kl),Kl.forEach(t),Wir=i(Yl),To=s(Yl,"DIV",{class:!0});var Ta=n(To);f(T0.$$.fragment,Ta),Qir=i(Ta),Iue=s(Ta,"P",{});var gft=n(Iue);Hir=r(gft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gft.forEach(t),Uir=i(Ta),Ts=s(Ta,"P",{});var y5=n(Ts);Jir=r(y5,"The model class to instantiate is selected based on the "),jue=s(y5,"CODE",{});var hft=n(jue);Yir=r(hft,"model_type"),hft.forEach(t),Kir=r(y5,` property of the config object (either
passed as an argument or loaded from `),Due=s(y5,"CODE",{});var uft=n(Due);Zir=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),edr=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=s(y5,"CODE",{});var pft=n(Nue);odr=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),rdr=r(y5,":"),y5.forEach(t),tdr=i(Ta),V=s(Ta,"UL",{});var W=n(V);sM=s(W,"LI",{});var x8e=n(sM);que=s(x8e,"STRONG",{});var _ft=n(que);adr=r(_ft,"albert"),_ft.forEach(t),sdr=r(x8e," \u2014 "),JO=s(x8e,"A",{href:!0});var bft=n(JO);ndr=r(bft,"TFAlbertForSequenceClassification"),bft.forEach(t),ldr=r(x8e," (ALBERT model)"),x8e.forEach(t),idr=i(W),nM=s(W,"LI",{});var k8e=n(nM);Oue=s(k8e,"STRONG",{});var vft=n(Oue);ddr=r(vft,"bert"),vft.forEach(t),cdr=r(k8e," \u2014 "),YO=s(k8e,"A",{href:!0});var Tft=n(YO);mdr=r(Tft,"TFBertForSequenceClassification"),Tft.forEach(t),fdr=r(k8e," (BERT model)"),k8e.forEach(t),gdr=i(W),lM=s(W,"LI",{});var R8e=n(lM);Gue=s(R8e,"STRONG",{});var Fft=n(Gue);hdr=r(Fft,"camembert"),Fft.forEach(t),udr=r(R8e," \u2014 "),KO=s(R8e,"A",{href:!0});var Cft=n(KO);pdr=r(Cft,"TFCamembertForSequenceClassification"),Cft.forEach(t),_dr=r(R8e," (CamemBERT model)"),R8e.forEach(t),bdr=i(W),iM=s(W,"LI",{});var S8e=n(iM);Xue=s(S8e,"STRONG",{});var Mft=n(Xue);vdr=r(Mft,"convbert"),Mft.forEach(t),Tdr=r(S8e," \u2014 "),ZO=s(S8e,"A",{href:!0});var Eft=n(ZO);Fdr=r(Eft,"TFConvBertForSequenceClassification"),Eft.forEach(t),Cdr=r(S8e," (ConvBERT model)"),S8e.forEach(t),Mdr=i(W),dM=s(W,"LI",{});var P8e=n(dM);Vue=s(P8e,"STRONG",{});var yft=n(Vue);Edr=r(yft,"ctrl"),yft.forEach(t),ydr=r(P8e," \u2014 "),eG=s(P8e,"A",{href:!0});var wft=n(eG);wdr=r(wft,"TFCTRLForSequenceClassification"),wft.forEach(t),Adr=r(P8e," (CTRL model)"),P8e.forEach(t),Ldr=i(W),cM=s(W,"LI",{});var $8e=n(cM);zue=s($8e,"STRONG",{});var Aft=n(zue);Bdr=r(Aft,"deberta"),Aft.forEach(t),xdr=r($8e," \u2014 "),oG=s($8e,"A",{href:!0});var Lft=n(oG);kdr=r(Lft,"TFDebertaForSequenceClassification"),Lft.forEach(t),Rdr=r($8e," (DeBERTa model)"),$8e.forEach(t),Sdr=i(W),mM=s(W,"LI",{});var I8e=n(mM);Wue=s(I8e,"STRONG",{});var Bft=n(Wue);Pdr=r(Bft,"deberta-v2"),Bft.forEach(t),$dr=r(I8e," \u2014 "),rG=s(I8e,"A",{href:!0});var xft=n(rG);Idr=r(xft,"TFDebertaV2ForSequenceClassification"),xft.forEach(t),jdr=r(I8e," (DeBERTa-v2 model)"),I8e.forEach(t),Ddr=i(W),fM=s(W,"LI",{});var j8e=n(fM);Que=s(j8e,"STRONG",{});var kft=n(Que);Ndr=r(kft,"distilbert"),kft.forEach(t),qdr=r(j8e," \u2014 "),tG=s(j8e,"A",{href:!0});var Rft=n(tG);Odr=r(Rft,"TFDistilBertForSequenceClassification"),Rft.forEach(t),Gdr=r(j8e," (DistilBERT model)"),j8e.forEach(t),Xdr=i(W),gM=s(W,"LI",{});var D8e=n(gM);Hue=s(D8e,"STRONG",{});var Sft=n(Hue);Vdr=r(Sft,"electra"),Sft.forEach(t),zdr=r(D8e," \u2014 "),aG=s(D8e,"A",{href:!0});var Pft=n(aG);Wdr=r(Pft,"TFElectraForSequenceClassification"),Pft.forEach(t),Qdr=r(D8e," (ELECTRA model)"),D8e.forEach(t),Hdr=i(W),hM=s(W,"LI",{});var N8e=n(hM);Uue=s(N8e,"STRONG",{});var $ft=n(Uue);Udr=r($ft,"flaubert"),$ft.forEach(t),Jdr=r(N8e," \u2014 "),sG=s(N8e,"A",{href:!0});var Ift=n(sG);Ydr=r(Ift,"TFFlaubertForSequenceClassification"),Ift.forEach(t),Kdr=r(N8e," (FlauBERT model)"),N8e.forEach(t),Zdr=i(W),uM=s(W,"LI",{});var q8e=n(uM);Jue=s(q8e,"STRONG",{});var jft=n(Jue);ecr=r(jft,"funnel"),jft.forEach(t),ocr=r(q8e," \u2014 "),nG=s(q8e,"A",{href:!0});var Dft=n(nG);rcr=r(Dft,"TFFunnelForSequenceClassification"),Dft.forEach(t),tcr=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),acr=i(W),pM=s(W,"LI",{});var O8e=n(pM);Yue=s(O8e,"STRONG",{});var Nft=n(Yue);scr=r(Nft,"gpt2"),Nft.forEach(t),ncr=r(O8e," \u2014 "),lG=s(O8e,"A",{href:!0});var qft=n(lG);lcr=r(qft,"TFGPT2ForSequenceClassification"),qft.forEach(t),icr=r(O8e," (OpenAI GPT-2 model)"),O8e.forEach(t),dcr=i(W),_M=s(W,"LI",{});var G8e=n(_M);Kue=s(G8e,"STRONG",{});var Oft=n(Kue);ccr=r(Oft,"layoutlm"),Oft.forEach(t),mcr=r(G8e," \u2014 "),iG=s(G8e,"A",{href:!0});var Gft=n(iG);fcr=r(Gft,"TFLayoutLMForSequenceClassification"),Gft.forEach(t),gcr=r(G8e," (LayoutLM model)"),G8e.forEach(t),hcr=i(W),bM=s(W,"LI",{});var X8e=n(bM);Zue=s(X8e,"STRONG",{});var Xft=n(Zue);ucr=r(Xft,"longformer"),Xft.forEach(t),pcr=r(X8e," \u2014 "),dG=s(X8e,"A",{href:!0});var Vft=n(dG);_cr=r(Vft,"TFLongformerForSequenceClassification"),Vft.forEach(t),bcr=r(X8e," (Longformer model)"),X8e.forEach(t),vcr=i(W),vM=s(W,"LI",{});var V8e=n(vM);epe=s(V8e,"STRONG",{});var zft=n(epe);Tcr=r(zft,"mobilebert"),zft.forEach(t),Fcr=r(V8e," \u2014 "),cG=s(V8e,"A",{href:!0});var Wft=n(cG);Ccr=r(Wft,"TFMobileBertForSequenceClassification"),Wft.forEach(t),Mcr=r(V8e," (MobileBERT model)"),V8e.forEach(t),Ecr=i(W),TM=s(W,"LI",{});var z8e=n(TM);ope=s(z8e,"STRONG",{});var Qft=n(ope);ycr=r(Qft,"mpnet"),Qft.forEach(t),wcr=r(z8e," \u2014 "),mG=s(z8e,"A",{href:!0});var Hft=n(mG);Acr=r(Hft,"TFMPNetForSequenceClassification"),Hft.forEach(t),Lcr=r(z8e," (MPNet model)"),z8e.forEach(t),Bcr=i(W),FM=s(W,"LI",{});var W8e=n(FM);rpe=s(W8e,"STRONG",{});var Uft=n(rpe);xcr=r(Uft,"openai-gpt"),Uft.forEach(t),kcr=r(W8e," \u2014 "),fG=s(W8e,"A",{href:!0});var Jft=n(fG);Rcr=r(Jft,"TFOpenAIGPTForSequenceClassification"),Jft.forEach(t),Scr=r(W8e," (OpenAI GPT model)"),W8e.forEach(t),Pcr=i(W),CM=s(W,"LI",{});var Q8e=n(CM);tpe=s(Q8e,"STRONG",{});var Yft=n(tpe);$cr=r(Yft,"rembert"),Yft.forEach(t),Icr=r(Q8e," \u2014 "),gG=s(Q8e,"A",{href:!0});var Kft=n(gG);jcr=r(Kft,"TFRemBertForSequenceClassification"),Kft.forEach(t),Dcr=r(Q8e," (RemBERT model)"),Q8e.forEach(t),Ncr=i(W),MM=s(W,"LI",{});var H8e=n(MM);ape=s(H8e,"STRONG",{});var Zft=n(ape);qcr=r(Zft,"roberta"),Zft.forEach(t),Ocr=r(H8e," \u2014 "),hG=s(H8e,"A",{href:!0});var egt=n(hG);Gcr=r(egt,"TFRobertaForSequenceClassification"),egt.forEach(t),Xcr=r(H8e," (RoBERTa model)"),H8e.forEach(t),Vcr=i(W),EM=s(W,"LI",{});var U8e=n(EM);spe=s(U8e,"STRONG",{});var ogt=n(spe);zcr=r(ogt,"roformer"),ogt.forEach(t),Wcr=r(U8e," \u2014 "),uG=s(U8e,"A",{href:!0});var rgt=n(uG);Qcr=r(rgt,"TFRoFormerForSequenceClassification"),rgt.forEach(t),Hcr=r(U8e," (RoFormer model)"),U8e.forEach(t),Ucr=i(W),yM=s(W,"LI",{});var J8e=n(yM);npe=s(J8e,"STRONG",{});var tgt=n(npe);Jcr=r(tgt,"tapas"),tgt.forEach(t),Ycr=r(J8e," \u2014 "),pG=s(J8e,"A",{href:!0});var agt=n(pG);Kcr=r(agt,"TFTapasForSequenceClassification"),agt.forEach(t),Zcr=r(J8e," (TAPAS model)"),J8e.forEach(t),emr=i(W),wM=s(W,"LI",{});var Y8e=n(wM);lpe=s(Y8e,"STRONG",{});var sgt=n(lpe);omr=r(sgt,"transfo-xl"),sgt.forEach(t),rmr=r(Y8e," \u2014 "),_G=s(Y8e,"A",{href:!0});var ngt=n(_G);tmr=r(ngt,"TFTransfoXLForSequenceClassification"),ngt.forEach(t),amr=r(Y8e," (Transformer-XL model)"),Y8e.forEach(t),smr=i(W),AM=s(W,"LI",{});var K8e=n(AM);ipe=s(K8e,"STRONG",{});var lgt=n(ipe);nmr=r(lgt,"xlm"),lgt.forEach(t),lmr=r(K8e," \u2014 "),bG=s(K8e,"A",{href:!0});var igt=n(bG);imr=r(igt,"TFXLMForSequenceClassification"),igt.forEach(t),dmr=r(K8e," (XLM model)"),K8e.forEach(t),cmr=i(W),LM=s(W,"LI",{});var Z8e=n(LM);dpe=s(Z8e,"STRONG",{});var dgt=n(dpe);mmr=r(dgt,"xlm-roberta"),dgt.forEach(t),fmr=r(Z8e," \u2014 "),vG=s(Z8e,"A",{href:!0});var cgt=n(vG);gmr=r(cgt,"TFXLMRobertaForSequenceClassification"),cgt.forEach(t),hmr=r(Z8e," (XLM-RoBERTa model)"),Z8e.forEach(t),umr=i(W),BM=s(W,"LI",{});var e7e=n(BM);cpe=s(e7e,"STRONG",{});var mgt=n(cpe);pmr=r(mgt,"xlnet"),mgt.forEach(t),_mr=r(e7e," \u2014 "),TG=s(e7e,"A",{href:!0});var fgt=n(TG);bmr=r(fgt,"TFXLNetForSequenceClassification"),fgt.forEach(t),vmr=r(e7e," (XLNet model)"),e7e.forEach(t),W.forEach(t),Tmr=i(Ta),mpe=s(Ta,"P",{});var ggt=n(mpe);Fmr=r(ggt,"Examples:"),ggt.forEach(t),Cmr=i(Ta),f(F0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),_ke=i(d),Sc=s(d,"H2",{class:!0});var BSe=n(Sc);xM=s(BSe,"A",{id:!0,class:!0,href:!0});var hgt=n(xM);fpe=s(hgt,"SPAN",{});var ugt=n(fpe);f(C0.$$.fragment,ugt),ugt.forEach(t),hgt.forEach(t),Mmr=i(BSe),gpe=s(BSe,"SPAN",{});var pgt=n(gpe);Emr=r(pgt,"TFAutoModelForMultipleChoice"),pgt.forEach(t),BSe.forEach(t),bke=i(d),wr=s(d,"DIV",{class:!0});var Zl=n(wr);f(M0.$$.fragment,Zl),ymr=i(Zl),Pc=s(Zl,"P",{});var LW=n(Pc);wmr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hpe=s(LW,"CODE",{});var _gt=n(hpe);Amr=r(_gt,"from_pretrained()"),_gt.forEach(t),Lmr=r(LW,"class method or the "),upe=s(LW,"CODE",{});var bgt=n(upe);Bmr=r(bgt,"from_config()"),bgt.forEach(t),xmr=r(LW,`class
method.`),LW.forEach(t),kmr=i(Zl),E0=s(Zl,"P",{});var xSe=n(E0);Rmr=r(xSe,"This class cannot be instantiated directly using "),ppe=s(xSe,"CODE",{});var vgt=n(ppe);Smr=r(vgt,"__init__()"),vgt.forEach(t),Pmr=r(xSe," (throws an error)."),xSe.forEach(t),$mr=i(Zl),Tt=s(Zl,"DIV",{class:!0});var ei=n(Tt);f(y0.$$.fragment,ei),Imr=i(ei),_pe=s(ei,"P",{});var Tgt=n(_pe);jmr=r(Tgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tgt.forEach(t),Dmr=i(ei),$c=s(ei,"P",{});var BW=n($c);Nmr=r(BW,`Note:
Loading a model from its configuration file does `),bpe=s(BW,"STRONG",{});var Fgt=n(bpe);qmr=r(Fgt,"not"),Fgt.forEach(t),Omr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vpe=s(BW,"CODE",{});var Cgt=n(vpe);Gmr=r(Cgt,"from_pretrained()"),Cgt.forEach(t),Xmr=r(BW,"to load the model weights."),BW.forEach(t),Vmr=i(ei),Tpe=s(ei,"P",{});var Mgt=n(Tpe);zmr=r(Mgt,"Examples:"),Mgt.forEach(t),Wmr=i(ei),f(w0.$$.fragment,ei),ei.forEach(t),Qmr=i(Zl),Fo=s(Zl,"DIV",{class:!0});var Fa=n(Fo);f(A0.$$.fragment,Fa),Hmr=i(Fa),Fpe=s(Fa,"P",{});var Egt=n(Fpe);Umr=r(Egt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Egt.forEach(t),Jmr=i(Fa),Fs=s(Fa,"P",{});var w5=n(Fs);Ymr=r(w5,"The model class to instantiate is selected based on the "),Cpe=s(w5,"CODE",{});var ygt=n(Cpe);Kmr=r(ygt,"model_type"),ygt.forEach(t),Zmr=r(w5,` property of the config object (either
passed as an argument or loaded from `),Mpe=s(w5,"CODE",{});var wgt=n(Mpe);efr=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),ofr=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=s(w5,"CODE",{});var Agt=n(Epe);rfr=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),tfr=r(w5,":"),w5.forEach(t),afr=i(Fa),te=s(Fa,"UL",{});var ne=n(te);kM=s(ne,"LI",{});var o7e=n(kM);ype=s(o7e,"STRONG",{});var Lgt=n(ype);sfr=r(Lgt,"albert"),Lgt.forEach(t),nfr=r(o7e," \u2014 "),FG=s(o7e,"A",{href:!0});var Bgt=n(FG);lfr=r(Bgt,"TFAlbertForMultipleChoice"),Bgt.forEach(t),ifr=r(o7e," (ALBERT model)"),o7e.forEach(t),dfr=i(ne),RM=s(ne,"LI",{});var r7e=n(RM);wpe=s(r7e,"STRONG",{});var xgt=n(wpe);cfr=r(xgt,"bert"),xgt.forEach(t),mfr=r(r7e," \u2014 "),CG=s(r7e,"A",{href:!0});var kgt=n(CG);ffr=r(kgt,"TFBertForMultipleChoice"),kgt.forEach(t),gfr=r(r7e," (BERT model)"),r7e.forEach(t),hfr=i(ne),SM=s(ne,"LI",{});var t7e=n(SM);Ape=s(t7e,"STRONG",{});var Rgt=n(Ape);ufr=r(Rgt,"camembert"),Rgt.forEach(t),pfr=r(t7e," \u2014 "),MG=s(t7e,"A",{href:!0});var Sgt=n(MG);_fr=r(Sgt,"TFCamembertForMultipleChoice"),Sgt.forEach(t),bfr=r(t7e," (CamemBERT model)"),t7e.forEach(t),vfr=i(ne),PM=s(ne,"LI",{});var a7e=n(PM);Lpe=s(a7e,"STRONG",{});var Pgt=n(Lpe);Tfr=r(Pgt,"convbert"),Pgt.forEach(t),Ffr=r(a7e," \u2014 "),EG=s(a7e,"A",{href:!0});var $gt=n(EG);Cfr=r($gt,"TFConvBertForMultipleChoice"),$gt.forEach(t),Mfr=r(a7e," (ConvBERT model)"),a7e.forEach(t),Efr=i(ne),$M=s(ne,"LI",{});var s7e=n($M);Bpe=s(s7e,"STRONG",{});var Igt=n(Bpe);yfr=r(Igt,"distilbert"),Igt.forEach(t),wfr=r(s7e," \u2014 "),yG=s(s7e,"A",{href:!0});var jgt=n(yG);Afr=r(jgt,"TFDistilBertForMultipleChoice"),jgt.forEach(t),Lfr=r(s7e," (DistilBERT model)"),s7e.forEach(t),Bfr=i(ne),IM=s(ne,"LI",{});var n7e=n(IM);xpe=s(n7e,"STRONG",{});var Dgt=n(xpe);xfr=r(Dgt,"electra"),Dgt.forEach(t),kfr=r(n7e," \u2014 "),wG=s(n7e,"A",{href:!0});var Ngt=n(wG);Rfr=r(Ngt,"TFElectraForMultipleChoice"),Ngt.forEach(t),Sfr=r(n7e," (ELECTRA model)"),n7e.forEach(t),Pfr=i(ne),jM=s(ne,"LI",{});var l7e=n(jM);kpe=s(l7e,"STRONG",{});var qgt=n(kpe);$fr=r(qgt,"flaubert"),qgt.forEach(t),Ifr=r(l7e," \u2014 "),AG=s(l7e,"A",{href:!0});var Ogt=n(AG);jfr=r(Ogt,"TFFlaubertForMultipleChoice"),Ogt.forEach(t),Dfr=r(l7e," (FlauBERT model)"),l7e.forEach(t),Nfr=i(ne),DM=s(ne,"LI",{});var i7e=n(DM);Rpe=s(i7e,"STRONG",{});var Ggt=n(Rpe);qfr=r(Ggt,"funnel"),Ggt.forEach(t),Ofr=r(i7e," \u2014 "),LG=s(i7e,"A",{href:!0});var Xgt=n(LG);Gfr=r(Xgt,"TFFunnelForMultipleChoice"),Xgt.forEach(t),Xfr=r(i7e," (Funnel Transformer model)"),i7e.forEach(t),Vfr=i(ne),NM=s(ne,"LI",{});var d7e=n(NM);Spe=s(d7e,"STRONG",{});var Vgt=n(Spe);zfr=r(Vgt,"longformer"),Vgt.forEach(t),Wfr=r(d7e," \u2014 "),BG=s(d7e,"A",{href:!0});var zgt=n(BG);Qfr=r(zgt,"TFLongformerForMultipleChoice"),zgt.forEach(t),Hfr=r(d7e," (Longformer model)"),d7e.forEach(t),Ufr=i(ne),qM=s(ne,"LI",{});var c7e=n(qM);Ppe=s(c7e,"STRONG",{});var Wgt=n(Ppe);Jfr=r(Wgt,"mobilebert"),Wgt.forEach(t),Yfr=r(c7e," \u2014 "),xG=s(c7e,"A",{href:!0});var Qgt=n(xG);Kfr=r(Qgt,"TFMobileBertForMultipleChoice"),Qgt.forEach(t),Zfr=r(c7e," (MobileBERT model)"),c7e.forEach(t),egr=i(ne),OM=s(ne,"LI",{});var m7e=n(OM);$pe=s(m7e,"STRONG",{});var Hgt=n($pe);ogr=r(Hgt,"mpnet"),Hgt.forEach(t),rgr=r(m7e," \u2014 "),kG=s(m7e,"A",{href:!0});var Ugt=n(kG);tgr=r(Ugt,"TFMPNetForMultipleChoice"),Ugt.forEach(t),agr=r(m7e," (MPNet model)"),m7e.forEach(t),sgr=i(ne),GM=s(ne,"LI",{});var f7e=n(GM);Ipe=s(f7e,"STRONG",{});var Jgt=n(Ipe);ngr=r(Jgt,"rembert"),Jgt.forEach(t),lgr=r(f7e," \u2014 "),RG=s(f7e,"A",{href:!0});var Ygt=n(RG);igr=r(Ygt,"TFRemBertForMultipleChoice"),Ygt.forEach(t),dgr=r(f7e," (RemBERT model)"),f7e.forEach(t),cgr=i(ne),XM=s(ne,"LI",{});var g7e=n(XM);jpe=s(g7e,"STRONG",{});var Kgt=n(jpe);mgr=r(Kgt,"roberta"),Kgt.forEach(t),fgr=r(g7e," \u2014 "),SG=s(g7e,"A",{href:!0});var Zgt=n(SG);ggr=r(Zgt,"TFRobertaForMultipleChoice"),Zgt.forEach(t),hgr=r(g7e," (RoBERTa model)"),g7e.forEach(t),ugr=i(ne),VM=s(ne,"LI",{});var h7e=n(VM);Dpe=s(h7e,"STRONG",{});var eht=n(Dpe);pgr=r(eht,"roformer"),eht.forEach(t),_gr=r(h7e," \u2014 "),PG=s(h7e,"A",{href:!0});var oht=n(PG);bgr=r(oht,"TFRoFormerForMultipleChoice"),oht.forEach(t),vgr=r(h7e," (RoFormer model)"),h7e.forEach(t),Tgr=i(ne),zM=s(ne,"LI",{});var u7e=n(zM);Npe=s(u7e,"STRONG",{});var rht=n(Npe);Fgr=r(rht,"xlm"),rht.forEach(t),Cgr=r(u7e," \u2014 "),$G=s(u7e,"A",{href:!0});var tht=n($G);Mgr=r(tht,"TFXLMForMultipleChoice"),tht.forEach(t),Egr=r(u7e," (XLM model)"),u7e.forEach(t),ygr=i(ne),WM=s(ne,"LI",{});var p7e=n(WM);qpe=s(p7e,"STRONG",{});var aht=n(qpe);wgr=r(aht,"xlm-roberta"),aht.forEach(t),Agr=r(p7e," \u2014 "),IG=s(p7e,"A",{href:!0});var sht=n(IG);Lgr=r(sht,"TFXLMRobertaForMultipleChoice"),sht.forEach(t),Bgr=r(p7e," (XLM-RoBERTa model)"),p7e.forEach(t),xgr=i(ne),QM=s(ne,"LI",{});var _7e=n(QM);Ope=s(_7e,"STRONG",{});var nht=n(Ope);kgr=r(nht,"xlnet"),nht.forEach(t),Rgr=r(_7e," \u2014 "),jG=s(_7e,"A",{href:!0});var lht=n(jG);Sgr=r(lht,"TFXLNetForMultipleChoice"),lht.forEach(t),Pgr=r(_7e," (XLNet model)"),_7e.forEach(t),ne.forEach(t),$gr=i(Fa),Gpe=s(Fa,"P",{});var iht=n(Gpe);Igr=r(iht,"Examples:"),iht.forEach(t),jgr=i(Fa),f(L0.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),vke=i(d),Ic=s(d,"H2",{class:!0});var kSe=n(Ic);HM=s(kSe,"A",{id:!0,class:!0,href:!0});var dht=n(HM);Xpe=s(dht,"SPAN",{});var cht=n(Xpe);f(B0.$$.fragment,cht),cht.forEach(t),dht.forEach(t),Dgr=i(kSe),Vpe=s(kSe,"SPAN",{});var mht=n(Vpe);Ngr=r(mht,"TFAutoModelForTableQuestionAnswering"),mht.forEach(t),kSe.forEach(t),Tke=i(d),Ar=s(d,"DIV",{class:!0});var oi=n(Ar);f(x0.$$.fragment,oi),qgr=i(oi),jc=s(oi,"P",{});var xW=n(jc);Ogr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zpe=s(xW,"CODE",{});var fht=n(zpe);Ggr=r(fht,"from_pretrained()"),fht.forEach(t),Xgr=r(xW,"class method or the "),Wpe=s(xW,"CODE",{});var ght=n(Wpe);Vgr=r(ght,"from_config()"),ght.forEach(t),zgr=r(xW,`class
method.`),xW.forEach(t),Wgr=i(oi),k0=s(oi,"P",{});var RSe=n(k0);Qgr=r(RSe,"This class cannot be instantiated directly using "),Qpe=s(RSe,"CODE",{});var hht=n(Qpe);Hgr=r(hht,"__init__()"),hht.forEach(t),Ugr=r(RSe," (throws an error)."),RSe.forEach(t),Jgr=i(oi),Ft=s(oi,"DIV",{class:!0});var ri=n(Ft);f(R0.$$.fragment,ri),Ygr=i(ri),Hpe=s(ri,"P",{});var uht=n(Hpe);Kgr=r(uht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uht.forEach(t),Zgr=i(ri),Dc=s(ri,"P",{});var kW=n(Dc);ehr=r(kW,`Note:
Loading a model from its configuration file does `),Upe=s(kW,"STRONG",{});var pht=n(Upe);ohr=r(pht,"not"),pht.forEach(t),rhr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jpe=s(kW,"CODE",{});var _ht=n(Jpe);thr=r(_ht,"from_pretrained()"),_ht.forEach(t),ahr=r(kW,"to load the model weights."),kW.forEach(t),shr=i(ri),Ype=s(ri,"P",{});var bht=n(Ype);nhr=r(bht,"Examples:"),bht.forEach(t),lhr=i(ri),f(S0.$$.fragment,ri),ri.forEach(t),ihr=i(oi),Co=s(oi,"DIV",{class:!0});var Ca=n(Co);f(P0.$$.fragment,Ca),dhr=i(Ca),Kpe=s(Ca,"P",{});var vht=n(Kpe);chr=r(vht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vht.forEach(t),mhr=i(Ca),Cs=s(Ca,"P",{});var A5=n(Cs);fhr=r(A5,"The model class to instantiate is selected based on the "),Zpe=s(A5,"CODE",{});var Tht=n(Zpe);ghr=r(Tht,"model_type"),Tht.forEach(t),hhr=r(A5,` property of the config object (either
passed as an argument or loaded from `),e_e=s(A5,"CODE",{});var Fht=n(e_e);uhr=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),phr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=s(A5,"CODE",{});var Cht=n(o_e);_hr=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),bhr=r(A5,":"),A5.forEach(t),vhr=i(Ca),r_e=s(Ca,"UL",{});var Mht=n(r_e);UM=s(Mht,"LI",{});var b7e=n(UM);t_e=s(b7e,"STRONG",{});var Eht=n(t_e);Thr=r(Eht,"tapas"),Eht.forEach(t),Fhr=r(b7e," \u2014 "),DG=s(b7e,"A",{href:!0});var yht=n(DG);Chr=r(yht,"TFTapasForQuestionAnswering"),yht.forEach(t),Mhr=r(b7e," (TAPAS model)"),b7e.forEach(t),Mht.forEach(t),Ehr=i(Ca),a_e=s(Ca,"P",{});var wht=n(a_e);yhr=r(wht,"Examples:"),wht.forEach(t),whr=i(Ca),f($0.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),Fke=i(d),Nc=s(d,"H2",{class:!0});var SSe=n(Nc);JM=s(SSe,"A",{id:!0,class:!0,href:!0});var Aht=n(JM);s_e=s(Aht,"SPAN",{});var Lht=n(s_e);f(I0.$$.fragment,Lht),Lht.forEach(t),Aht.forEach(t),Ahr=i(SSe),n_e=s(SSe,"SPAN",{});var Bht=n(n_e);Lhr=r(Bht,"TFAutoModelForTokenClassification"),Bht.forEach(t),SSe.forEach(t),Cke=i(d),Lr=s(d,"DIV",{class:!0});var ti=n(Lr);f(j0.$$.fragment,ti),Bhr=i(ti),qc=s(ti,"P",{});var RW=n(qc);xhr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),l_e=s(RW,"CODE",{});var xht=n(l_e);khr=r(xht,"from_pretrained()"),xht.forEach(t),Rhr=r(RW,"class method or the "),i_e=s(RW,"CODE",{});var kht=n(i_e);Shr=r(kht,"from_config()"),kht.forEach(t),Phr=r(RW,`class
method.`),RW.forEach(t),$hr=i(ti),D0=s(ti,"P",{});var PSe=n(D0);Ihr=r(PSe,"This class cannot be instantiated directly using "),d_e=s(PSe,"CODE",{});var Rht=n(d_e);jhr=r(Rht,"__init__()"),Rht.forEach(t),Dhr=r(PSe," (throws an error)."),PSe.forEach(t),Nhr=i(ti),Ct=s(ti,"DIV",{class:!0});var ai=n(Ct);f(N0.$$.fragment,ai),qhr=i(ai),c_e=s(ai,"P",{});var Sht=n(c_e);Ohr=r(Sht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sht.forEach(t),Ghr=i(ai),Oc=s(ai,"P",{});var SW=n(Oc);Xhr=r(SW,`Note:
Loading a model from its configuration file does `),m_e=s(SW,"STRONG",{});var Pht=n(m_e);Vhr=r(Pht,"not"),Pht.forEach(t),zhr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),f_e=s(SW,"CODE",{});var $ht=n(f_e);Whr=r($ht,"from_pretrained()"),$ht.forEach(t),Qhr=r(SW,"to load the model weights."),SW.forEach(t),Hhr=i(ai),g_e=s(ai,"P",{});var Iht=n(g_e);Uhr=r(Iht,"Examples:"),Iht.forEach(t),Jhr=i(ai),f(q0.$$.fragment,ai),ai.forEach(t),Yhr=i(ti),Mo=s(ti,"DIV",{class:!0});var Ma=n(Mo);f(O0.$$.fragment,Ma),Khr=i(Ma),h_e=s(Ma,"P",{});var jht=n(h_e);Zhr=r(jht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jht.forEach(t),eur=i(Ma),Ms=s(Ma,"P",{});var L5=n(Ms);our=r(L5,"The model class to instantiate is selected based on the "),u_e=s(L5,"CODE",{});var Dht=n(u_e);rur=r(Dht,"model_type"),Dht.forEach(t),tur=r(L5,` property of the config object (either
passed as an argument or loaded from `),p_e=s(L5,"CODE",{});var Nht=n(p_e);aur=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),sur=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=s(L5,"CODE",{});var qht=n(__e);nur=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),lur=r(L5,":"),L5.forEach(t),iur=i(Ma),K=s(Ma,"UL",{});var oe=n(K);YM=s(oe,"LI",{});var v7e=n(YM);b_e=s(v7e,"STRONG",{});var Oht=n(b_e);dur=r(Oht,"albert"),Oht.forEach(t),cur=r(v7e," \u2014 "),NG=s(v7e,"A",{href:!0});var Ght=n(NG);mur=r(Ght,"TFAlbertForTokenClassification"),Ght.forEach(t),fur=r(v7e," (ALBERT model)"),v7e.forEach(t),gur=i(oe),KM=s(oe,"LI",{});var T7e=n(KM);v_e=s(T7e,"STRONG",{});var Xht=n(v_e);hur=r(Xht,"bert"),Xht.forEach(t),uur=r(T7e," \u2014 "),qG=s(T7e,"A",{href:!0});var Vht=n(qG);pur=r(Vht,"TFBertForTokenClassification"),Vht.forEach(t),_ur=r(T7e," (BERT model)"),T7e.forEach(t),bur=i(oe),ZM=s(oe,"LI",{});var F7e=n(ZM);T_e=s(F7e,"STRONG",{});var zht=n(T_e);vur=r(zht,"camembert"),zht.forEach(t),Tur=r(F7e," \u2014 "),OG=s(F7e,"A",{href:!0});var Wht=n(OG);Fur=r(Wht,"TFCamembertForTokenClassification"),Wht.forEach(t),Cur=r(F7e," (CamemBERT model)"),F7e.forEach(t),Mur=i(oe),e4=s(oe,"LI",{});var C7e=n(e4);F_e=s(C7e,"STRONG",{});var Qht=n(F_e);Eur=r(Qht,"convbert"),Qht.forEach(t),yur=r(C7e," \u2014 "),GG=s(C7e,"A",{href:!0});var Hht=n(GG);wur=r(Hht,"TFConvBertForTokenClassification"),Hht.forEach(t),Aur=r(C7e," (ConvBERT model)"),C7e.forEach(t),Lur=i(oe),o4=s(oe,"LI",{});var M7e=n(o4);C_e=s(M7e,"STRONG",{});var Uht=n(C_e);Bur=r(Uht,"deberta"),Uht.forEach(t),xur=r(M7e," \u2014 "),XG=s(M7e,"A",{href:!0});var Jht=n(XG);kur=r(Jht,"TFDebertaForTokenClassification"),Jht.forEach(t),Rur=r(M7e," (DeBERTa model)"),M7e.forEach(t),Sur=i(oe),r4=s(oe,"LI",{});var E7e=n(r4);M_e=s(E7e,"STRONG",{});var Yht=n(M_e);Pur=r(Yht,"deberta-v2"),Yht.forEach(t),$ur=r(E7e," \u2014 "),VG=s(E7e,"A",{href:!0});var Kht=n(VG);Iur=r(Kht,"TFDebertaV2ForTokenClassification"),Kht.forEach(t),jur=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),Dur=i(oe),t4=s(oe,"LI",{});var y7e=n(t4);E_e=s(y7e,"STRONG",{});var Zht=n(E_e);Nur=r(Zht,"distilbert"),Zht.forEach(t),qur=r(y7e," \u2014 "),zG=s(y7e,"A",{href:!0});var eut=n(zG);Our=r(eut,"TFDistilBertForTokenClassification"),eut.forEach(t),Gur=r(y7e," (DistilBERT model)"),y7e.forEach(t),Xur=i(oe),a4=s(oe,"LI",{});var w7e=n(a4);y_e=s(w7e,"STRONG",{});var out=n(y_e);Vur=r(out,"electra"),out.forEach(t),zur=r(w7e," \u2014 "),WG=s(w7e,"A",{href:!0});var rut=n(WG);Wur=r(rut,"TFElectraForTokenClassification"),rut.forEach(t),Qur=r(w7e," (ELECTRA model)"),w7e.forEach(t),Hur=i(oe),s4=s(oe,"LI",{});var A7e=n(s4);w_e=s(A7e,"STRONG",{});var tut=n(w_e);Uur=r(tut,"flaubert"),tut.forEach(t),Jur=r(A7e," \u2014 "),QG=s(A7e,"A",{href:!0});var aut=n(QG);Yur=r(aut,"TFFlaubertForTokenClassification"),aut.forEach(t),Kur=r(A7e," (FlauBERT model)"),A7e.forEach(t),Zur=i(oe),n4=s(oe,"LI",{});var L7e=n(n4);A_e=s(L7e,"STRONG",{});var sut=n(A_e);epr=r(sut,"funnel"),sut.forEach(t),opr=r(L7e," \u2014 "),HG=s(L7e,"A",{href:!0});var nut=n(HG);rpr=r(nut,"TFFunnelForTokenClassification"),nut.forEach(t),tpr=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),apr=i(oe),l4=s(oe,"LI",{});var B7e=n(l4);L_e=s(B7e,"STRONG",{});var lut=n(L_e);spr=r(lut,"layoutlm"),lut.forEach(t),npr=r(B7e," \u2014 "),UG=s(B7e,"A",{href:!0});var iut=n(UG);lpr=r(iut,"TFLayoutLMForTokenClassification"),iut.forEach(t),ipr=r(B7e," (LayoutLM model)"),B7e.forEach(t),dpr=i(oe),i4=s(oe,"LI",{});var x7e=n(i4);B_e=s(x7e,"STRONG",{});var dut=n(B_e);cpr=r(dut,"longformer"),dut.forEach(t),mpr=r(x7e," \u2014 "),JG=s(x7e,"A",{href:!0});var cut=n(JG);fpr=r(cut,"TFLongformerForTokenClassification"),cut.forEach(t),gpr=r(x7e," (Longformer model)"),x7e.forEach(t),hpr=i(oe),d4=s(oe,"LI",{});var k7e=n(d4);x_e=s(k7e,"STRONG",{});var mut=n(x_e);upr=r(mut,"mobilebert"),mut.forEach(t),ppr=r(k7e," \u2014 "),YG=s(k7e,"A",{href:!0});var fut=n(YG);_pr=r(fut,"TFMobileBertForTokenClassification"),fut.forEach(t),bpr=r(k7e," (MobileBERT model)"),k7e.forEach(t),vpr=i(oe),c4=s(oe,"LI",{});var R7e=n(c4);k_e=s(R7e,"STRONG",{});var gut=n(k_e);Tpr=r(gut,"mpnet"),gut.forEach(t),Fpr=r(R7e," \u2014 "),KG=s(R7e,"A",{href:!0});var hut=n(KG);Cpr=r(hut,"TFMPNetForTokenClassification"),hut.forEach(t),Mpr=r(R7e," (MPNet model)"),R7e.forEach(t),Epr=i(oe),m4=s(oe,"LI",{});var S7e=n(m4);R_e=s(S7e,"STRONG",{});var uut=n(R_e);ypr=r(uut,"rembert"),uut.forEach(t),wpr=r(S7e," \u2014 "),ZG=s(S7e,"A",{href:!0});var put=n(ZG);Apr=r(put,"TFRemBertForTokenClassification"),put.forEach(t),Lpr=r(S7e," (RemBERT model)"),S7e.forEach(t),Bpr=i(oe),f4=s(oe,"LI",{});var P7e=n(f4);S_e=s(P7e,"STRONG",{});var _ut=n(S_e);xpr=r(_ut,"roberta"),_ut.forEach(t),kpr=r(P7e," \u2014 "),eX=s(P7e,"A",{href:!0});var but=n(eX);Rpr=r(but,"TFRobertaForTokenClassification"),but.forEach(t),Spr=r(P7e," (RoBERTa model)"),P7e.forEach(t),Ppr=i(oe),g4=s(oe,"LI",{});var $7e=n(g4);P_e=s($7e,"STRONG",{});var vut=n(P_e);$pr=r(vut,"roformer"),vut.forEach(t),Ipr=r($7e," \u2014 "),oX=s($7e,"A",{href:!0});var Tut=n(oX);jpr=r(Tut,"TFRoFormerForTokenClassification"),Tut.forEach(t),Dpr=r($7e," (RoFormer model)"),$7e.forEach(t),Npr=i(oe),h4=s(oe,"LI",{});var I7e=n(h4);$_e=s(I7e,"STRONG",{});var Fut=n($_e);qpr=r(Fut,"xlm"),Fut.forEach(t),Opr=r(I7e," \u2014 "),rX=s(I7e,"A",{href:!0});var Cut=n(rX);Gpr=r(Cut,"TFXLMForTokenClassification"),Cut.forEach(t),Xpr=r(I7e," (XLM model)"),I7e.forEach(t),Vpr=i(oe),u4=s(oe,"LI",{});var j7e=n(u4);I_e=s(j7e,"STRONG",{});var Mut=n(I_e);zpr=r(Mut,"xlm-roberta"),Mut.forEach(t),Wpr=r(j7e," \u2014 "),tX=s(j7e,"A",{href:!0});var Eut=n(tX);Qpr=r(Eut,"TFXLMRobertaForTokenClassification"),Eut.forEach(t),Hpr=r(j7e," (XLM-RoBERTa model)"),j7e.forEach(t),Upr=i(oe),p4=s(oe,"LI",{});var D7e=n(p4);j_e=s(D7e,"STRONG",{});var yut=n(j_e);Jpr=r(yut,"xlnet"),yut.forEach(t),Ypr=r(D7e," \u2014 "),aX=s(D7e,"A",{href:!0});var wut=n(aX);Kpr=r(wut,"TFXLNetForTokenClassification"),wut.forEach(t),Zpr=r(D7e," (XLNet model)"),D7e.forEach(t),oe.forEach(t),e_r=i(Ma),D_e=s(Ma,"P",{});var Aut=n(D_e);o_r=r(Aut,"Examples:"),Aut.forEach(t),r_r=i(Ma),f(G0.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),Mke=i(d),Gc=s(d,"H2",{class:!0});var $Se=n(Gc);_4=s($Se,"A",{id:!0,class:!0,href:!0});var Lut=n(_4);N_e=s(Lut,"SPAN",{});var But=n(N_e);f(X0.$$.fragment,But),But.forEach(t),Lut.forEach(t),t_r=i($Se),q_e=s($Se,"SPAN",{});var xut=n(q_e);a_r=r(xut,"TFAutoModelForQuestionAnswering"),xut.forEach(t),$Se.forEach(t),Eke=i(d),Br=s(d,"DIV",{class:!0});var si=n(Br);f(V0.$$.fragment,si),s_r=i(si),Xc=s(si,"P",{});var PW=n(Xc);n_r=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),O_e=s(PW,"CODE",{});var kut=n(O_e);l_r=r(kut,"from_pretrained()"),kut.forEach(t),i_r=r(PW,"class method or the "),G_e=s(PW,"CODE",{});var Rut=n(G_e);d_r=r(Rut,"from_config()"),Rut.forEach(t),c_r=r(PW,`class
method.`),PW.forEach(t),m_r=i(si),z0=s(si,"P",{});var ISe=n(z0);f_r=r(ISe,"This class cannot be instantiated directly using "),X_e=s(ISe,"CODE",{});var Sut=n(X_e);g_r=r(Sut,"__init__()"),Sut.forEach(t),h_r=r(ISe," (throws an error)."),ISe.forEach(t),u_r=i(si),Mt=s(si,"DIV",{class:!0});var ni=n(Mt);f(W0.$$.fragment,ni),p_r=i(ni),V_e=s(ni,"P",{});var Put=n(V_e);__r=r(Put,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Put.forEach(t),b_r=i(ni),Vc=s(ni,"P",{});var $W=n(Vc);v_r=r($W,`Note:
Loading a model from its configuration file does `),z_e=s($W,"STRONG",{});var $ut=n(z_e);T_r=r($ut,"not"),$ut.forEach(t),F_r=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),W_e=s($W,"CODE",{});var Iut=n(W_e);C_r=r(Iut,"from_pretrained()"),Iut.forEach(t),M_r=r($W,"to load the model weights."),$W.forEach(t),E_r=i(ni),Q_e=s(ni,"P",{});var jut=n(Q_e);y_r=r(jut,"Examples:"),jut.forEach(t),w_r=i(ni),f(Q0.$$.fragment,ni),ni.forEach(t),A_r=i(si),Eo=s(si,"DIV",{class:!0});var Ea=n(Eo);f(H0.$$.fragment,Ea),L_r=i(Ea),H_e=s(Ea,"P",{});var Dut=n(H_e);B_r=r(Dut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dut.forEach(t),x_r=i(Ea),Es=s(Ea,"P",{});var B5=n(Es);k_r=r(B5,"The model class to instantiate is selected based on the "),U_e=s(B5,"CODE",{});var Nut=n(U_e);R_r=r(Nut,"model_type"),Nut.forEach(t),S_r=r(B5,` property of the config object (either
passed as an argument or loaded from `),J_e=s(B5,"CODE",{});var qut=n(J_e);P_r=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),$_r=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=s(B5,"CODE",{});var Out=n(Y_e);I_r=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),j_r=r(B5,":"),B5.forEach(t),D_r=i(Ea),Z=s(Ea,"UL",{});var re=n(Z);b4=s(re,"LI",{});var N7e=n(b4);K_e=s(N7e,"STRONG",{});var Gut=n(K_e);N_r=r(Gut,"albert"),Gut.forEach(t),q_r=r(N7e," \u2014 "),sX=s(N7e,"A",{href:!0});var Xut=n(sX);O_r=r(Xut,"TFAlbertForQuestionAnswering"),Xut.forEach(t),G_r=r(N7e," (ALBERT model)"),N7e.forEach(t),X_r=i(re),v4=s(re,"LI",{});var q7e=n(v4);Z_e=s(q7e,"STRONG",{});var Vut=n(Z_e);V_r=r(Vut,"bert"),Vut.forEach(t),z_r=r(q7e," \u2014 "),nX=s(q7e,"A",{href:!0});var zut=n(nX);W_r=r(zut,"TFBertForQuestionAnswering"),zut.forEach(t),Q_r=r(q7e," (BERT model)"),q7e.forEach(t),H_r=i(re),T4=s(re,"LI",{});var O7e=n(T4);ebe=s(O7e,"STRONG",{});var Wut=n(ebe);U_r=r(Wut,"camembert"),Wut.forEach(t),J_r=r(O7e," \u2014 "),lX=s(O7e,"A",{href:!0});var Qut=n(lX);Y_r=r(Qut,"TFCamembertForQuestionAnswering"),Qut.forEach(t),K_r=r(O7e," (CamemBERT model)"),O7e.forEach(t),Z_r=i(re),F4=s(re,"LI",{});var G7e=n(F4);obe=s(G7e,"STRONG",{});var Hut=n(obe);ebr=r(Hut,"convbert"),Hut.forEach(t),obr=r(G7e," \u2014 "),iX=s(G7e,"A",{href:!0});var Uut=n(iX);rbr=r(Uut,"TFConvBertForQuestionAnswering"),Uut.forEach(t),tbr=r(G7e," (ConvBERT model)"),G7e.forEach(t),abr=i(re),C4=s(re,"LI",{});var X7e=n(C4);rbe=s(X7e,"STRONG",{});var Jut=n(rbe);sbr=r(Jut,"deberta"),Jut.forEach(t),nbr=r(X7e," \u2014 "),dX=s(X7e,"A",{href:!0});var Yut=n(dX);lbr=r(Yut,"TFDebertaForQuestionAnswering"),Yut.forEach(t),ibr=r(X7e," (DeBERTa model)"),X7e.forEach(t),dbr=i(re),M4=s(re,"LI",{});var V7e=n(M4);tbe=s(V7e,"STRONG",{});var Kut=n(tbe);cbr=r(Kut,"deberta-v2"),Kut.forEach(t),mbr=r(V7e," \u2014 "),cX=s(V7e,"A",{href:!0});var Zut=n(cX);fbr=r(Zut,"TFDebertaV2ForQuestionAnswering"),Zut.forEach(t),gbr=r(V7e," (DeBERTa-v2 model)"),V7e.forEach(t),hbr=i(re),E4=s(re,"LI",{});var z7e=n(E4);abe=s(z7e,"STRONG",{});var ept=n(abe);ubr=r(ept,"distilbert"),ept.forEach(t),pbr=r(z7e," \u2014 "),mX=s(z7e,"A",{href:!0});var opt=n(mX);_br=r(opt,"TFDistilBertForQuestionAnswering"),opt.forEach(t),bbr=r(z7e," (DistilBERT model)"),z7e.forEach(t),vbr=i(re),y4=s(re,"LI",{});var W7e=n(y4);sbe=s(W7e,"STRONG",{});var rpt=n(sbe);Tbr=r(rpt,"electra"),rpt.forEach(t),Fbr=r(W7e," \u2014 "),fX=s(W7e,"A",{href:!0});var tpt=n(fX);Cbr=r(tpt,"TFElectraForQuestionAnswering"),tpt.forEach(t),Mbr=r(W7e," (ELECTRA model)"),W7e.forEach(t),Ebr=i(re),w4=s(re,"LI",{});var Q7e=n(w4);nbe=s(Q7e,"STRONG",{});var apt=n(nbe);ybr=r(apt,"flaubert"),apt.forEach(t),wbr=r(Q7e," \u2014 "),gX=s(Q7e,"A",{href:!0});var spt=n(gX);Abr=r(spt,"TFFlaubertForQuestionAnsweringSimple"),spt.forEach(t),Lbr=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),Bbr=i(re),A4=s(re,"LI",{});var H7e=n(A4);lbe=s(H7e,"STRONG",{});var npt=n(lbe);xbr=r(npt,"funnel"),npt.forEach(t),kbr=r(H7e," \u2014 "),hX=s(H7e,"A",{href:!0});var lpt=n(hX);Rbr=r(lpt,"TFFunnelForQuestionAnswering"),lpt.forEach(t),Sbr=r(H7e," (Funnel Transformer model)"),H7e.forEach(t),Pbr=i(re),L4=s(re,"LI",{});var U7e=n(L4);ibe=s(U7e,"STRONG",{});var ipt=n(ibe);$br=r(ipt,"longformer"),ipt.forEach(t),Ibr=r(U7e," \u2014 "),uX=s(U7e,"A",{href:!0});var dpt=n(uX);jbr=r(dpt,"TFLongformerForQuestionAnswering"),dpt.forEach(t),Dbr=r(U7e," (Longformer model)"),U7e.forEach(t),Nbr=i(re),B4=s(re,"LI",{});var J7e=n(B4);dbe=s(J7e,"STRONG",{});var cpt=n(dbe);qbr=r(cpt,"mobilebert"),cpt.forEach(t),Obr=r(J7e," \u2014 "),pX=s(J7e,"A",{href:!0});var mpt=n(pX);Gbr=r(mpt,"TFMobileBertForQuestionAnswering"),mpt.forEach(t),Xbr=r(J7e," (MobileBERT model)"),J7e.forEach(t),Vbr=i(re),x4=s(re,"LI",{});var Y7e=n(x4);cbe=s(Y7e,"STRONG",{});var fpt=n(cbe);zbr=r(fpt,"mpnet"),fpt.forEach(t),Wbr=r(Y7e," \u2014 "),_X=s(Y7e,"A",{href:!0});var gpt=n(_X);Qbr=r(gpt,"TFMPNetForQuestionAnswering"),gpt.forEach(t),Hbr=r(Y7e," (MPNet model)"),Y7e.forEach(t),Ubr=i(re),k4=s(re,"LI",{});var K7e=n(k4);mbe=s(K7e,"STRONG",{});var hpt=n(mbe);Jbr=r(hpt,"rembert"),hpt.forEach(t),Ybr=r(K7e," \u2014 "),bX=s(K7e,"A",{href:!0});var upt=n(bX);Kbr=r(upt,"TFRemBertForQuestionAnswering"),upt.forEach(t),Zbr=r(K7e," (RemBERT model)"),K7e.forEach(t),e2r=i(re),R4=s(re,"LI",{});var Z7e=n(R4);fbe=s(Z7e,"STRONG",{});var ppt=n(fbe);o2r=r(ppt,"roberta"),ppt.forEach(t),r2r=r(Z7e," \u2014 "),vX=s(Z7e,"A",{href:!0});var _pt=n(vX);t2r=r(_pt,"TFRobertaForQuestionAnswering"),_pt.forEach(t),a2r=r(Z7e," (RoBERTa model)"),Z7e.forEach(t),s2r=i(re),S4=s(re,"LI",{});var e9e=n(S4);gbe=s(e9e,"STRONG",{});var bpt=n(gbe);n2r=r(bpt,"roformer"),bpt.forEach(t),l2r=r(e9e," \u2014 "),TX=s(e9e,"A",{href:!0});var vpt=n(TX);i2r=r(vpt,"TFRoFormerForQuestionAnswering"),vpt.forEach(t),d2r=r(e9e," (RoFormer model)"),e9e.forEach(t),c2r=i(re),P4=s(re,"LI",{});var o9e=n(P4);hbe=s(o9e,"STRONG",{});var Tpt=n(hbe);m2r=r(Tpt,"xlm"),Tpt.forEach(t),f2r=r(o9e," \u2014 "),FX=s(o9e,"A",{href:!0});var Fpt=n(FX);g2r=r(Fpt,"TFXLMForQuestionAnsweringSimple"),Fpt.forEach(t),h2r=r(o9e," (XLM model)"),o9e.forEach(t),u2r=i(re),$4=s(re,"LI",{});var r9e=n($4);ube=s(r9e,"STRONG",{});var Cpt=n(ube);p2r=r(Cpt,"xlm-roberta"),Cpt.forEach(t),_2r=r(r9e," \u2014 "),CX=s(r9e,"A",{href:!0});var Mpt=n(CX);b2r=r(Mpt,"TFXLMRobertaForQuestionAnswering"),Mpt.forEach(t),v2r=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),T2r=i(re),I4=s(re,"LI",{});var t9e=n(I4);pbe=s(t9e,"STRONG",{});var Ept=n(pbe);F2r=r(Ept,"xlnet"),Ept.forEach(t),C2r=r(t9e," \u2014 "),MX=s(t9e,"A",{href:!0});var ypt=n(MX);M2r=r(ypt,"TFXLNetForQuestionAnsweringSimple"),ypt.forEach(t),E2r=r(t9e," (XLNet model)"),t9e.forEach(t),re.forEach(t),y2r=i(Ea),_be=s(Ea,"P",{});var wpt=n(_be);w2r=r(wpt,"Examples:"),wpt.forEach(t),A2r=i(Ea),f(U0.$$.fragment,Ea),Ea.forEach(t),si.forEach(t),yke=i(d),zc=s(d,"H2",{class:!0});var jSe=n(zc);j4=s(jSe,"A",{id:!0,class:!0,href:!0});var Apt=n(j4);bbe=s(Apt,"SPAN",{});var Lpt=n(bbe);f(J0.$$.fragment,Lpt),Lpt.forEach(t),Apt.forEach(t),L2r=i(jSe),vbe=s(jSe,"SPAN",{});var Bpt=n(vbe);B2r=r(Bpt,"TFAutoModelForVision2Seq"),Bpt.forEach(t),jSe.forEach(t),wke=i(d),xr=s(d,"DIV",{class:!0});var li=n(xr);f(Y0.$$.fragment,li),x2r=i(li),Wc=s(li,"P",{});var IW=n(Wc);k2r=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Tbe=s(IW,"CODE",{});var xpt=n(Tbe);R2r=r(xpt,"from_pretrained()"),xpt.forEach(t),S2r=r(IW,"class method or the "),Fbe=s(IW,"CODE",{});var kpt=n(Fbe);P2r=r(kpt,"from_config()"),kpt.forEach(t),$2r=r(IW,`class
method.`),IW.forEach(t),I2r=i(li),K0=s(li,"P",{});var DSe=n(K0);j2r=r(DSe,"This class cannot be instantiated directly using "),Cbe=s(DSe,"CODE",{});var Rpt=n(Cbe);D2r=r(Rpt,"__init__()"),Rpt.forEach(t),N2r=r(DSe," (throws an error)."),DSe.forEach(t),q2r=i(li),Et=s(li,"DIV",{class:!0});var ii=n(Et);f(Z0.$$.fragment,ii),O2r=i(ii),Mbe=s(ii,"P",{});var Spt=n(Mbe);G2r=r(Spt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Spt.forEach(t),X2r=i(ii),Qc=s(ii,"P",{});var jW=n(Qc);V2r=r(jW,`Note:
Loading a model from its configuration file does `),Ebe=s(jW,"STRONG",{});var Ppt=n(Ebe);z2r=r(Ppt,"not"),Ppt.forEach(t),W2r=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ybe=s(jW,"CODE",{});var $pt=n(ybe);Q2r=r($pt,"from_pretrained()"),$pt.forEach(t),H2r=r(jW,"to load the model weights."),jW.forEach(t),U2r=i(ii),wbe=s(ii,"P",{});var Ipt=n(wbe);J2r=r(Ipt,"Examples:"),Ipt.forEach(t),Y2r=i(ii),f(eL.$$.fragment,ii),ii.forEach(t),K2r=i(li),yo=s(li,"DIV",{class:!0});var ya=n(yo);f(oL.$$.fragment,ya),Z2r=i(ya),Abe=s(ya,"P",{});var jpt=n(Abe);evr=r(jpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jpt.forEach(t),ovr=i(ya),ys=s(ya,"P",{});var x5=n(ys);rvr=r(x5,"The model class to instantiate is selected based on the "),Lbe=s(x5,"CODE",{});var Dpt=n(Lbe);tvr=r(Dpt,"model_type"),Dpt.forEach(t),avr=r(x5,` property of the config object (either
passed as an argument or loaded from `),Bbe=s(x5,"CODE",{});var Npt=n(Bbe);svr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),nvr=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=s(x5,"CODE",{});var qpt=n(xbe);lvr=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),ivr=r(x5,":"),x5.forEach(t),dvr=i(ya),kbe=s(ya,"UL",{});var Opt=n(kbe);D4=s(Opt,"LI",{});var a9e=n(D4);Rbe=s(a9e,"STRONG",{});var Gpt=n(Rbe);cvr=r(Gpt,"vision-encoder-decoder"),Gpt.forEach(t),mvr=r(a9e," \u2014 "),EX=s(a9e,"A",{href:!0});var Xpt=n(EX);fvr=r(Xpt,"TFVisionEncoderDecoderModel"),Xpt.forEach(t),gvr=r(a9e," (Vision Encoder decoder model)"),a9e.forEach(t),Opt.forEach(t),hvr=i(ya),Sbe=s(ya,"P",{});var Vpt=n(Sbe);uvr=r(Vpt,"Examples:"),Vpt.forEach(t),pvr=i(ya),f(rL.$$.fragment,ya),ya.forEach(t),li.forEach(t),Ake=i(d),Hc=s(d,"H2",{class:!0});var NSe=n(Hc);N4=s(NSe,"A",{id:!0,class:!0,href:!0});var zpt=n(N4);Pbe=s(zpt,"SPAN",{});var Wpt=n(Pbe);f(tL.$$.fragment,Wpt),Wpt.forEach(t),zpt.forEach(t),_vr=i(NSe),$be=s(NSe,"SPAN",{});var Qpt=n($be);bvr=r(Qpt,"TFAutoModelForSpeechSeq2Seq"),Qpt.forEach(t),NSe.forEach(t),Lke=i(d),kr=s(d,"DIV",{class:!0});var di=n(kr);f(aL.$$.fragment,di),vvr=i(di),Uc=s(di,"P",{});var DW=n(Uc);Tvr=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ibe=s(DW,"CODE",{});var Hpt=n(Ibe);Fvr=r(Hpt,"from_pretrained()"),Hpt.forEach(t),Cvr=r(DW,"class method or the "),jbe=s(DW,"CODE",{});var Upt=n(jbe);Mvr=r(Upt,"from_config()"),Upt.forEach(t),Evr=r(DW,`class
method.`),DW.forEach(t),yvr=i(di),sL=s(di,"P",{});var qSe=n(sL);wvr=r(qSe,"This class cannot be instantiated directly using "),Dbe=s(qSe,"CODE",{});var Jpt=n(Dbe);Avr=r(Jpt,"__init__()"),Jpt.forEach(t),Lvr=r(qSe," (throws an error)."),qSe.forEach(t),Bvr=i(di),yt=s(di,"DIV",{class:!0});var ci=n(yt);f(nL.$$.fragment,ci),xvr=i(ci),Nbe=s(ci,"P",{});var Ypt=n(Nbe);kvr=r(Ypt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ypt.forEach(t),Rvr=i(ci),Jc=s(ci,"P",{});var NW=n(Jc);Svr=r(NW,`Note:
Loading a model from its configuration file does `),qbe=s(NW,"STRONG",{});var Kpt=n(qbe);Pvr=r(Kpt,"not"),Kpt.forEach(t),$vr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Obe=s(NW,"CODE",{});var Zpt=n(Obe);Ivr=r(Zpt,"from_pretrained()"),Zpt.forEach(t),jvr=r(NW,"to load the model weights."),NW.forEach(t),Dvr=i(ci),Gbe=s(ci,"P",{});var e_t=n(Gbe);Nvr=r(e_t,"Examples:"),e_t.forEach(t),qvr=i(ci),f(lL.$$.fragment,ci),ci.forEach(t),Ovr=i(di),wo=s(di,"DIV",{class:!0});var wa=n(wo);f(iL.$$.fragment,wa),Gvr=i(wa),Xbe=s(wa,"P",{});var o_t=n(Xbe);Xvr=r(o_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o_t.forEach(t),Vvr=i(wa),ws=s(wa,"P",{});var k5=n(ws);zvr=r(k5,"The model class to instantiate is selected based on the "),Vbe=s(k5,"CODE",{});var r_t=n(Vbe);Wvr=r(r_t,"model_type"),r_t.forEach(t),Qvr=r(k5,` property of the config object (either
passed as an argument or loaded from `),zbe=s(k5,"CODE",{});var t_t=n(zbe);Hvr=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),Uvr=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=s(k5,"CODE",{});var a_t=n(Wbe);Jvr=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),Yvr=r(k5,":"),k5.forEach(t),Kvr=i(wa),Qbe=s(wa,"UL",{});var s_t=n(Qbe);q4=s(s_t,"LI",{});var s9e=n(q4);Hbe=s(s9e,"STRONG",{});var n_t=n(Hbe);Zvr=r(n_t,"speech_to_text"),n_t.forEach(t),eTr=r(s9e," \u2014 "),yX=s(s9e,"A",{href:!0});var l_t=n(yX);oTr=r(l_t,"TFSpeech2TextForConditionalGeneration"),l_t.forEach(t),rTr=r(s9e," (Speech2Text model)"),s9e.forEach(t),s_t.forEach(t),tTr=i(wa),Ube=s(wa,"P",{});var i_t=n(Ube);aTr=r(i_t,"Examples:"),i_t.forEach(t),sTr=i(wa),f(dL.$$.fragment,wa),wa.forEach(t),di.forEach(t),Bke=i(d),Yc=s(d,"H2",{class:!0});var OSe=n(Yc);O4=s(OSe,"A",{id:!0,class:!0,href:!0});var d_t=n(O4);Jbe=s(d_t,"SPAN",{});var c_t=n(Jbe);f(cL.$$.fragment,c_t),c_t.forEach(t),d_t.forEach(t),nTr=i(OSe),Ybe=s(OSe,"SPAN",{});var m_t=n(Ybe);lTr=r(m_t,"FlaxAutoModel"),m_t.forEach(t),OSe.forEach(t),xke=i(d),Rr=s(d,"DIV",{class:!0});var mi=n(Rr);f(mL.$$.fragment,mi),iTr=i(mi),Kc=s(mi,"P",{});var qW=n(Kc);dTr=r(qW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kbe=s(qW,"CODE",{});var f_t=n(Kbe);cTr=r(f_t,"from_pretrained()"),f_t.forEach(t),mTr=r(qW,"class method or the "),Zbe=s(qW,"CODE",{});var g_t=n(Zbe);fTr=r(g_t,"from_config()"),g_t.forEach(t),gTr=r(qW,`class
method.`),qW.forEach(t),hTr=i(mi),fL=s(mi,"P",{});var GSe=n(fL);uTr=r(GSe,"This class cannot be instantiated directly using "),e2e=s(GSe,"CODE",{});var h_t=n(e2e);pTr=r(h_t,"__init__()"),h_t.forEach(t),_Tr=r(GSe," (throws an error)."),GSe.forEach(t),bTr=i(mi),wt=s(mi,"DIV",{class:!0});var fi=n(wt);f(gL.$$.fragment,fi),vTr=i(fi),o2e=s(fi,"P",{});var u_t=n(o2e);TTr=r(u_t,"Instantiates one of the base model classes of the library from a configuration."),u_t.forEach(t),FTr=i(fi),Zc=s(fi,"P",{});var OW=n(Zc);CTr=r(OW,`Note:
Loading a model from its configuration file does `),r2e=s(OW,"STRONG",{});var p_t=n(r2e);MTr=r(p_t,"not"),p_t.forEach(t),ETr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),t2e=s(OW,"CODE",{});var __t=n(t2e);yTr=r(__t,"from_pretrained()"),__t.forEach(t),wTr=r(OW,"to load the model weights."),OW.forEach(t),ATr=i(fi),a2e=s(fi,"P",{});var b_t=n(a2e);LTr=r(b_t,"Examples:"),b_t.forEach(t),BTr=i(fi),f(hL.$$.fragment,fi),fi.forEach(t),xTr=i(mi),Ao=s(mi,"DIV",{class:!0});var Aa=n(Ao);f(uL.$$.fragment,Aa),kTr=i(Aa),s2e=s(Aa,"P",{});var v_t=n(s2e);RTr=r(v_t,"Instantiate one of the base model classes of the library from a pretrained model."),v_t.forEach(t),STr=i(Aa),As=s(Aa,"P",{});var R5=n(As);PTr=r(R5,"The model class to instantiate is selected based on the "),n2e=s(R5,"CODE",{});var T_t=n(n2e);$Tr=r(T_t,"model_type"),T_t.forEach(t),ITr=r(R5,` property of the config object (either
passed as an argument or loaded from `),l2e=s(R5,"CODE",{});var F_t=n(l2e);jTr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),DTr=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=s(R5,"CODE",{});var C_t=n(i2e);NTr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),qTr=r(R5,":"),R5.forEach(t),OTr=i(Aa),z=s(Aa,"UL",{});var Q=n(z);G4=s(Q,"LI",{});var n9e=n(G4);d2e=s(n9e,"STRONG",{});var M_t=n(d2e);GTr=r(M_t,"albert"),M_t.forEach(t),XTr=r(n9e," \u2014 "),wX=s(n9e,"A",{href:!0});var E_t=n(wX);VTr=r(E_t,"FlaxAlbertModel"),E_t.forEach(t),zTr=r(n9e," (ALBERT model)"),n9e.forEach(t),WTr=i(Q),X4=s(Q,"LI",{});var l9e=n(X4);c2e=s(l9e,"STRONG",{});var y_t=n(c2e);QTr=r(y_t,"bart"),y_t.forEach(t),HTr=r(l9e," \u2014 "),AX=s(l9e,"A",{href:!0});var w_t=n(AX);UTr=r(w_t,"FlaxBartModel"),w_t.forEach(t),JTr=r(l9e," (BART model)"),l9e.forEach(t),YTr=i(Q),V4=s(Q,"LI",{});var i9e=n(V4);m2e=s(i9e,"STRONG",{});var A_t=n(m2e);KTr=r(A_t,"beit"),A_t.forEach(t),ZTr=r(i9e," \u2014 "),LX=s(i9e,"A",{href:!0});var L_t=n(LX);e1r=r(L_t,"FlaxBeitModel"),L_t.forEach(t),o1r=r(i9e," (BEiT model)"),i9e.forEach(t),r1r=i(Q),z4=s(Q,"LI",{});var d9e=n(z4);f2e=s(d9e,"STRONG",{});var B_t=n(f2e);t1r=r(B_t,"bert"),B_t.forEach(t),a1r=r(d9e," \u2014 "),BX=s(d9e,"A",{href:!0});var x_t=n(BX);s1r=r(x_t,"FlaxBertModel"),x_t.forEach(t),n1r=r(d9e," (BERT model)"),d9e.forEach(t),l1r=i(Q),W4=s(Q,"LI",{});var c9e=n(W4);g2e=s(c9e,"STRONG",{});var k_t=n(g2e);i1r=r(k_t,"big_bird"),k_t.forEach(t),d1r=r(c9e," \u2014 "),xX=s(c9e,"A",{href:!0});var R_t=n(xX);c1r=r(R_t,"FlaxBigBirdModel"),R_t.forEach(t),m1r=r(c9e," (BigBird model)"),c9e.forEach(t),f1r=i(Q),Q4=s(Q,"LI",{});var m9e=n(Q4);h2e=s(m9e,"STRONG",{});var S_t=n(h2e);g1r=r(S_t,"blenderbot"),S_t.forEach(t),h1r=r(m9e," \u2014 "),kX=s(m9e,"A",{href:!0});var P_t=n(kX);u1r=r(P_t,"FlaxBlenderbotModel"),P_t.forEach(t),p1r=r(m9e," (Blenderbot model)"),m9e.forEach(t),_1r=i(Q),H4=s(Q,"LI",{});var f9e=n(H4);u2e=s(f9e,"STRONG",{});var $_t=n(u2e);b1r=r($_t,"blenderbot-small"),$_t.forEach(t),v1r=r(f9e," \u2014 "),RX=s(f9e,"A",{href:!0});var I_t=n(RX);T1r=r(I_t,"FlaxBlenderbotSmallModel"),I_t.forEach(t),F1r=r(f9e," (BlenderbotSmall model)"),f9e.forEach(t),C1r=i(Q),U4=s(Q,"LI",{});var g9e=n(U4);p2e=s(g9e,"STRONG",{});var j_t=n(p2e);M1r=r(j_t,"clip"),j_t.forEach(t),E1r=r(g9e," \u2014 "),SX=s(g9e,"A",{href:!0});var D_t=n(SX);y1r=r(D_t,"FlaxCLIPModel"),D_t.forEach(t),w1r=r(g9e," (CLIP model)"),g9e.forEach(t),A1r=i(Q),J4=s(Q,"LI",{});var h9e=n(J4);_2e=s(h9e,"STRONG",{});var N_t=n(_2e);L1r=r(N_t,"distilbert"),N_t.forEach(t),B1r=r(h9e," \u2014 "),PX=s(h9e,"A",{href:!0});var q_t=n(PX);x1r=r(q_t,"FlaxDistilBertModel"),q_t.forEach(t),k1r=r(h9e," (DistilBERT model)"),h9e.forEach(t),R1r=i(Q),Y4=s(Q,"LI",{});var u9e=n(Y4);b2e=s(u9e,"STRONG",{});var O_t=n(b2e);S1r=r(O_t,"electra"),O_t.forEach(t),P1r=r(u9e," \u2014 "),$X=s(u9e,"A",{href:!0});var G_t=n($X);$1r=r(G_t,"FlaxElectraModel"),G_t.forEach(t),I1r=r(u9e," (ELECTRA model)"),u9e.forEach(t),j1r=i(Q),K4=s(Q,"LI",{});var p9e=n(K4);v2e=s(p9e,"STRONG",{});var X_t=n(v2e);D1r=r(X_t,"gpt2"),X_t.forEach(t),N1r=r(p9e," \u2014 "),IX=s(p9e,"A",{href:!0});var V_t=n(IX);q1r=r(V_t,"FlaxGPT2Model"),V_t.forEach(t),O1r=r(p9e," (OpenAI GPT-2 model)"),p9e.forEach(t),G1r=i(Q),Z4=s(Q,"LI",{});var _9e=n(Z4);T2e=s(_9e,"STRONG",{});var z_t=n(T2e);X1r=r(z_t,"gpt_neo"),z_t.forEach(t),V1r=r(_9e," \u2014 "),jX=s(_9e,"A",{href:!0});var W_t=n(jX);z1r=r(W_t,"FlaxGPTNeoModel"),W_t.forEach(t),W1r=r(_9e," (GPT Neo model)"),_9e.forEach(t),Q1r=i(Q),eE=s(Q,"LI",{});var b9e=n(eE);F2e=s(b9e,"STRONG",{});var Q_t=n(F2e);H1r=r(Q_t,"gptj"),Q_t.forEach(t),U1r=r(b9e," \u2014 "),DX=s(b9e,"A",{href:!0});var H_t=n(DX);J1r=r(H_t,"FlaxGPTJModel"),H_t.forEach(t),Y1r=r(b9e," (GPT-J model)"),b9e.forEach(t),K1r=i(Q),oE=s(Q,"LI",{});var v9e=n(oE);C2e=s(v9e,"STRONG",{});var U_t=n(C2e);Z1r=r(U_t,"marian"),U_t.forEach(t),eFr=r(v9e," \u2014 "),NX=s(v9e,"A",{href:!0});var J_t=n(NX);oFr=r(J_t,"FlaxMarianModel"),J_t.forEach(t),rFr=r(v9e," (Marian model)"),v9e.forEach(t),tFr=i(Q),rE=s(Q,"LI",{});var T9e=n(rE);M2e=s(T9e,"STRONG",{});var Y_t=n(M2e);aFr=r(Y_t,"mbart"),Y_t.forEach(t),sFr=r(T9e," \u2014 "),qX=s(T9e,"A",{href:!0});var K_t=n(qX);nFr=r(K_t,"FlaxMBartModel"),K_t.forEach(t),lFr=r(T9e," (mBART model)"),T9e.forEach(t),iFr=i(Q),tE=s(Q,"LI",{});var F9e=n(tE);E2e=s(F9e,"STRONG",{});var Z_t=n(E2e);dFr=r(Z_t,"mt5"),Z_t.forEach(t),cFr=r(F9e," \u2014 "),OX=s(F9e,"A",{href:!0});var ebt=n(OX);mFr=r(ebt,"FlaxMT5Model"),ebt.forEach(t),fFr=r(F9e," (mT5 model)"),F9e.forEach(t),gFr=i(Q),aE=s(Q,"LI",{});var C9e=n(aE);y2e=s(C9e,"STRONG",{});var obt=n(y2e);hFr=r(obt,"pegasus"),obt.forEach(t),uFr=r(C9e," \u2014 "),GX=s(C9e,"A",{href:!0});var rbt=n(GX);pFr=r(rbt,"FlaxPegasusModel"),rbt.forEach(t),_Fr=r(C9e," (Pegasus model)"),C9e.forEach(t),bFr=i(Q),sE=s(Q,"LI",{});var M9e=n(sE);w2e=s(M9e,"STRONG",{});var tbt=n(w2e);vFr=r(tbt,"roberta"),tbt.forEach(t),TFr=r(M9e," \u2014 "),XX=s(M9e,"A",{href:!0});var abt=n(XX);FFr=r(abt,"FlaxRobertaModel"),abt.forEach(t),CFr=r(M9e," (RoBERTa model)"),M9e.forEach(t),MFr=i(Q),nE=s(Q,"LI",{});var E9e=n(nE);A2e=s(E9e,"STRONG",{});var sbt=n(A2e);EFr=r(sbt,"roformer"),sbt.forEach(t),yFr=r(E9e," \u2014 "),VX=s(E9e,"A",{href:!0});var nbt=n(VX);wFr=r(nbt,"FlaxRoFormerModel"),nbt.forEach(t),AFr=r(E9e," (RoFormer model)"),E9e.forEach(t),LFr=i(Q),lE=s(Q,"LI",{});var y9e=n(lE);L2e=s(y9e,"STRONG",{});var lbt=n(L2e);BFr=r(lbt,"t5"),lbt.forEach(t),xFr=r(y9e," \u2014 "),zX=s(y9e,"A",{href:!0});var ibt=n(zX);kFr=r(ibt,"FlaxT5Model"),ibt.forEach(t),RFr=r(y9e," (T5 model)"),y9e.forEach(t),SFr=i(Q),iE=s(Q,"LI",{});var w9e=n(iE);B2e=s(w9e,"STRONG",{});var dbt=n(B2e);PFr=r(dbt,"vision-text-dual-encoder"),dbt.forEach(t),$Fr=r(w9e," \u2014 "),WX=s(w9e,"A",{href:!0});var cbt=n(WX);IFr=r(cbt,"FlaxVisionTextDualEncoderModel"),cbt.forEach(t),jFr=r(w9e," (VisionTextDualEncoder model)"),w9e.forEach(t),DFr=i(Q),dE=s(Q,"LI",{});var A9e=n(dE);x2e=s(A9e,"STRONG",{});var mbt=n(x2e);NFr=r(mbt,"vit"),mbt.forEach(t),qFr=r(A9e," \u2014 "),QX=s(A9e,"A",{href:!0});var fbt=n(QX);OFr=r(fbt,"FlaxViTModel"),fbt.forEach(t),GFr=r(A9e," (ViT model)"),A9e.forEach(t),XFr=i(Q),cE=s(Q,"LI",{});var L9e=n(cE);k2e=s(L9e,"STRONG",{});var gbt=n(k2e);VFr=r(gbt,"wav2vec2"),gbt.forEach(t),zFr=r(L9e," \u2014 "),HX=s(L9e,"A",{href:!0});var hbt=n(HX);WFr=r(hbt,"FlaxWav2Vec2Model"),hbt.forEach(t),QFr=r(L9e," (Wav2Vec2 model)"),L9e.forEach(t),HFr=i(Q),mE=s(Q,"LI",{});var B9e=n(mE);R2e=s(B9e,"STRONG",{});var ubt=n(R2e);UFr=r(ubt,"xglm"),ubt.forEach(t),JFr=r(B9e," \u2014 "),UX=s(B9e,"A",{href:!0});var pbt=n(UX);YFr=r(pbt,"FlaxXGLMModel"),pbt.forEach(t),KFr=r(B9e," (XGLM model)"),B9e.forEach(t),ZFr=i(Q),fE=s(Q,"LI",{});var x9e=n(fE);S2e=s(x9e,"STRONG",{});var _bt=n(S2e);eCr=r(_bt,"xlm-roberta"),_bt.forEach(t),oCr=r(x9e," \u2014 "),JX=s(x9e,"A",{href:!0});var bbt=n(JX);rCr=r(bbt,"FlaxXLMRobertaModel"),bbt.forEach(t),tCr=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),Q.forEach(t),aCr=i(Aa),P2e=s(Aa,"P",{});var vbt=n(P2e);sCr=r(vbt,"Examples:"),vbt.forEach(t),nCr=i(Aa),f(pL.$$.fragment,Aa),Aa.forEach(t),mi.forEach(t),kke=i(d),em=s(d,"H2",{class:!0});var XSe=n(em);gE=s(XSe,"A",{id:!0,class:!0,href:!0});var Tbt=n(gE);$2e=s(Tbt,"SPAN",{});var Fbt=n($2e);f(_L.$$.fragment,Fbt),Fbt.forEach(t),Tbt.forEach(t),lCr=i(XSe),I2e=s(XSe,"SPAN",{});var Cbt=n(I2e);iCr=r(Cbt,"FlaxAutoModelForCausalLM"),Cbt.forEach(t),XSe.forEach(t),Rke=i(d),Sr=s(d,"DIV",{class:!0});var gi=n(Sr);f(bL.$$.fragment,gi),dCr=i(gi),om=s(gi,"P",{});var GW=n(om);cCr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j2e=s(GW,"CODE",{});var Mbt=n(j2e);mCr=r(Mbt,"from_pretrained()"),Mbt.forEach(t),fCr=r(GW,"class method or the "),D2e=s(GW,"CODE",{});var Ebt=n(D2e);gCr=r(Ebt,"from_config()"),Ebt.forEach(t),hCr=r(GW,`class
method.`),GW.forEach(t),uCr=i(gi),vL=s(gi,"P",{});var VSe=n(vL);pCr=r(VSe,"This class cannot be instantiated directly using "),N2e=s(VSe,"CODE",{});var ybt=n(N2e);_Cr=r(ybt,"__init__()"),ybt.forEach(t),bCr=r(VSe," (throws an error)."),VSe.forEach(t),vCr=i(gi),At=s(gi,"DIV",{class:!0});var hi=n(At);f(TL.$$.fragment,hi),TCr=i(hi),q2e=s(hi,"P",{});var wbt=n(q2e);FCr=r(wbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wbt.forEach(t),CCr=i(hi),rm=s(hi,"P",{});var XW=n(rm);MCr=r(XW,`Note:
Loading a model from its configuration file does `),O2e=s(XW,"STRONG",{});var Abt=n(O2e);ECr=r(Abt,"not"),Abt.forEach(t),yCr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),G2e=s(XW,"CODE",{});var Lbt=n(G2e);wCr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),ACr=r(XW,"to load the model weights."),XW.forEach(t),LCr=i(hi),X2e=s(hi,"P",{});var Bbt=n(X2e);BCr=r(Bbt,"Examples:"),Bbt.forEach(t),xCr=i(hi),f(FL.$$.fragment,hi),hi.forEach(t),kCr=i(gi),Lo=s(gi,"DIV",{class:!0});var La=n(Lo);f(CL.$$.fragment,La),RCr=i(La),V2e=s(La,"P",{});var xbt=n(V2e);SCr=r(xbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xbt.forEach(t),PCr=i(La),Ls=s(La,"P",{});var S5=n(Ls);$Cr=r(S5,"The model class to instantiate is selected based on the "),z2e=s(S5,"CODE",{});var kbt=n(z2e);ICr=r(kbt,"model_type"),kbt.forEach(t),jCr=r(S5,` property of the config object (either
passed as an argument or loaded from `),W2e=s(S5,"CODE",{});var Rbt=n(W2e);DCr=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),NCr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=s(S5,"CODE",{});var Sbt=n(Q2e);qCr=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),OCr=r(S5,":"),S5.forEach(t),GCr=i(La),Bs=s(La,"UL",{});var P5=n(Bs);hE=s(P5,"LI",{});var k9e=n(hE);H2e=s(k9e,"STRONG",{});var Pbt=n(H2e);XCr=r(Pbt,"gpt2"),Pbt.forEach(t),VCr=r(k9e," \u2014 "),YX=s(k9e,"A",{href:!0});var $bt=n(YX);zCr=r($bt,"FlaxGPT2LMHeadModel"),$bt.forEach(t),WCr=r(k9e," (OpenAI GPT-2 model)"),k9e.forEach(t),QCr=i(P5),uE=s(P5,"LI",{});var R9e=n(uE);U2e=s(R9e,"STRONG",{});var Ibt=n(U2e);HCr=r(Ibt,"gpt_neo"),Ibt.forEach(t),UCr=r(R9e," \u2014 "),KX=s(R9e,"A",{href:!0});var jbt=n(KX);JCr=r(jbt,"FlaxGPTNeoForCausalLM"),jbt.forEach(t),YCr=r(R9e," (GPT Neo model)"),R9e.forEach(t),KCr=i(P5),pE=s(P5,"LI",{});var S9e=n(pE);J2e=s(S9e,"STRONG",{});var Dbt=n(J2e);ZCr=r(Dbt,"gptj"),Dbt.forEach(t),eMr=r(S9e," \u2014 "),ZX=s(S9e,"A",{href:!0});var Nbt=n(ZX);oMr=r(Nbt,"FlaxGPTJForCausalLM"),Nbt.forEach(t),rMr=r(S9e," (GPT-J model)"),S9e.forEach(t),tMr=i(P5),_E=s(P5,"LI",{});var P9e=n(_E);Y2e=s(P9e,"STRONG",{});var qbt=n(Y2e);aMr=r(qbt,"xglm"),qbt.forEach(t),sMr=r(P9e," \u2014 "),eV=s(P9e,"A",{href:!0});var Obt=n(eV);nMr=r(Obt,"FlaxXGLMForCausalLM"),Obt.forEach(t),lMr=r(P9e," (XGLM model)"),P9e.forEach(t),P5.forEach(t),iMr=i(La),K2e=s(La,"P",{});var Gbt=n(K2e);dMr=r(Gbt,"Examples:"),Gbt.forEach(t),cMr=i(La),f(ML.$$.fragment,La),La.forEach(t),gi.forEach(t),Ske=i(d),tm=s(d,"H2",{class:!0});var zSe=n(tm);bE=s(zSe,"A",{id:!0,class:!0,href:!0});var Xbt=n(bE);Z2e=s(Xbt,"SPAN",{});var Vbt=n(Z2e);f(EL.$$.fragment,Vbt),Vbt.forEach(t),Xbt.forEach(t),mMr=i(zSe),eve=s(zSe,"SPAN",{});var zbt=n(eve);fMr=r(zbt,"FlaxAutoModelForPreTraining"),zbt.forEach(t),zSe.forEach(t),Pke=i(d),Pr=s(d,"DIV",{class:!0});var ui=n(Pr);f(yL.$$.fragment,ui),gMr=i(ui),am=s(ui,"P",{});var VW=n(am);hMr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ove=s(VW,"CODE",{});var Wbt=n(ove);uMr=r(Wbt,"from_pretrained()"),Wbt.forEach(t),pMr=r(VW,"class method or the "),rve=s(VW,"CODE",{});var Qbt=n(rve);_Mr=r(Qbt,"from_config()"),Qbt.forEach(t),bMr=r(VW,`class
method.`),VW.forEach(t),vMr=i(ui),wL=s(ui,"P",{});var WSe=n(wL);TMr=r(WSe,"This class cannot be instantiated directly using "),tve=s(WSe,"CODE",{});var Hbt=n(tve);FMr=r(Hbt,"__init__()"),Hbt.forEach(t),CMr=r(WSe," (throws an error)."),WSe.forEach(t),MMr=i(ui),Lt=s(ui,"DIV",{class:!0});var pi=n(Lt);f(AL.$$.fragment,pi),EMr=i(pi),ave=s(pi,"P",{});var Ubt=n(ave);yMr=r(Ubt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ubt.forEach(t),wMr=i(pi),sm=s(pi,"P",{});var zW=n(sm);AMr=r(zW,`Note:
Loading a model from its configuration file does `),sve=s(zW,"STRONG",{});var Jbt=n(sve);LMr=r(Jbt,"not"),Jbt.forEach(t),BMr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nve=s(zW,"CODE",{});var Ybt=n(nve);xMr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),kMr=r(zW,"to load the model weights."),zW.forEach(t),RMr=i(pi),lve=s(pi,"P",{});var Kbt=n(lve);SMr=r(Kbt,"Examples:"),Kbt.forEach(t),PMr=i(pi),f(LL.$$.fragment,pi),pi.forEach(t),$Mr=i(ui),Bo=s(ui,"DIV",{class:!0});var Ba=n(Bo);f(BL.$$.fragment,Ba),IMr=i(Ba),ive=s(Ba,"P",{});var Zbt=n(ive);jMr=r(Zbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zbt.forEach(t),DMr=i(Ba),xs=s(Ba,"P",{});var $5=n(xs);NMr=r($5,"The model class to instantiate is selected based on the "),dve=s($5,"CODE",{});var e2t=n(dve);qMr=r(e2t,"model_type"),e2t.forEach(t),OMr=r($5,` property of the config object (either
passed as an argument or loaded from `),cve=s($5,"CODE",{});var o2t=n(cve);GMr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),XMr=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=s($5,"CODE",{});var r2t=n(mve);VMr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),zMr=r($5,":"),$5.forEach(t),WMr=i(Ba),ce=s(Ba,"UL",{});var fe=n(ce);vE=s(fe,"LI",{});var $9e=n(vE);fve=s($9e,"STRONG",{});var t2t=n(fve);QMr=r(t2t,"albert"),t2t.forEach(t),HMr=r($9e," \u2014 "),oV=s($9e,"A",{href:!0});var a2t=n(oV);UMr=r(a2t,"FlaxAlbertForPreTraining"),a2t.forEach(t),JMr=r($9e," (ALBERT model)"),$9e.forEach(t),YMr=i(fe),TE=s(fe,"LI",{});var I9e=n(TE);gve=s(I9e,"STRONG",{});var s2t=n(gve);KMr=r(s2t,"bart"),s2t.forEach(t),ZMr=r(I9e," \u2014 "),rV=s(I9e,"A",{href:!0});var n2t=n(rV);e4r=r(n2t,"FlaxBartForConditionalGeneration"),n2t.forEach(t),o4r=r(I9e," (BART model)"),I9e.forEach(t),r4r=i(fe),FE=s(fe,"LI",{});var j9e=n(FE);hve=s(j9e,"STRONG",{});var l2t=n(hve);t4r=r(l2t,"bert"),l2t.forEach(t),a4r=r(j9e," \u2014 "),tV=s(j9e,"A",{href:!0});var i2t=n(tV);s4r=r(i2t,"FlaxBertForPreTraining"),i2t.forEach(t),n4r=r(j9e," (BERT model)"),j9e.forEach(t),l4r=i(fe),CE=s(fe,"LI",{});var D9e=n(CE);uve=s(D9e,"STRONG",{});var d2t=n(uve);i4r=r(d2t,"big_bird"),d2t.forEach(t),d4r=r(D9e," \u2014 "),aV=s(D9e,"A",{href:!0});var c2t=n(aV);c4r=r(c2t,"FlaxBigBirdForPreTraining"),c2t.forEach(t),m4r=r(D9e," (BigBird model)"),D9e.forEach(t),f4r=i(fe),ME=s(fe,"LI",{});var N9e=n(ME);pve=s(N9e,"STRONG",{});var m2t=n(pve);g4r=r(m2t,"electra"),m2t.forEach(t),h4r=r(N9e," \u2014 "),sV=s(N9e,"A",{href:!0});var f2t=n(sV);u4r=r(f2t,"FlaxElectraForPreTraining"),f2t.forEach(t),p4r=r(N9e," (ELECTRA model)"),N9e.forEach(t),_4r=i(fe),EE=s(fe,"LI",{});var q9e=n(EE);_ve=s(q9e,"STRONG",{});var g2t=n(_ve);b4r=r(g2t,"mbart"),g2t.forEach(t),v4r=r(q9e," \u2014 "),nV=s(q9e,"A",{href:!0});var h2t=n(nV);T4r=r(h2t,"FlaxMBartForConditionalGeneration"),h2t.forEach(t),F4r=r(q9e," (mBART model)"),q9e.forEach(t),C4r=i(fe),yE=s(fe,"LI",{});var O9e=n(yE);bve=s(O9e,"STRONG",{});var u2t=n(bve);M4r=r(u2t,"mt5"),u2t.forEach(t),E4r=r(O9e," \u2014 "),lV=s(O9e,"A",{href:!0});var p2t=n(lV);y4r=r(p2t,"FlaxMT5ForConditionalGeneration"),p2t.forEach(t),w4r=r(O9e," (mT5 model)"),O9e.forEach(t),A4r=i(fe),wE=s(fe,"LI",{});var G9e=n(wE);vve=s(G9e,"STRONG",{});var _2t=n(vve);L4r=r(_2t,"roberta"),_2t.forEach(t),B4r=r(G9e," \u2014 "),iV=s(G9e,"A",{href:!0});var b2t=n(iV);x4r=r(b2t,"FlaxRobertaForMaskedLM"),b2t.forEach(t),k4r=r(G9e," (RoBERTa model)"),G9e.forEach(t),R4r=i(fe),AE=s(fe,"LI",{});var X9e=n(AE);Tve=s(X9e,"STRONG",{});var v2t=n(Tve);S4r=r(v2t,"roformer"),v2t.forEach(t),P4r=r(X9e," \u2014 "),dV=s(X9e,"A",{href:!0});var T2t=n(dV);$4r=r(T2t,"FlaxRoFormerForMaskedLM"),T2t.forEach(t),I4r=r(X9e," (RoFormer model)"),X9e.forEach(t),j4r=i(fe),LE=s(fe,"LI",{});var V9e=n(LE);Fve=s(V9e,"STRONG",{});var F2t=n(Fve);D4r=r(F2t,"t5"),F2t.forEach(t),N4r=r(V9e," \u2014 "),cV=s(V9e,"A",{href:!0});var C2t=n(cV);q4r=r(C2t,"FlaxT5ForConditionalGeneration"),C2t.forEach(t),O4r=r(V9e," (T5 model)"),V9e.forEach(t),G4r=i(fe),BE=s(fe,"LI",{});var z9e=n(BE);Cve=s(z9e,"STRONG",{});var M2t=n(Cve);X4r=r(M2t,"wav2vec2"),M2t.forEach(t),V4r=r(z9e," \u2014 "),mV=s(z9e,"A",{href:!0});var E2t=n(mV);z4r=r(E2t,"FlaxWav2Vec2ForPreTraining"),E2t.forEach(t),W4r=r(z9e," (Wav2Vec2 model)"),z9e.forEach(t),Q4r=i(fe),xE=s(fe,"LI",{});var W9e=n(xE);Mve=s(W9e,"STRONG",{});var y2t=n(Mve);H4r=r(y2t,"xlm-roberta"),y2t.forEach(t),U4r=r(W9e," \u2014 "),fV=s(W9e,"A",{href:!0});var w2t=n(fV);J4r=r(w2t,"FlaxXLMRobertaForMaskedLM"),w2t.forEach(t),Y4r=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),fe.forEach(t),K4r=i(Ba),Eve=s(Ba,"P",{});var A2t=n(Eve);Z4r=r(A2t,"Examples:"),A2t.forEach(t),eEr=i(Ba),f(xL.$$.fragment,Ba),Ba.forEach(t),ui.forEach(t),$ke=i(d),nm=s(d,"H2",{class:!0});var QSe=n(nm);kE=s(QSe,"A",{id:!0,class:!0,href:!0});var L2t=n(kE);yve=s(L2t,"SPAN",{});var B2t=n(yve);f(kL.$$.fragment,B2t),B2t.forEach(t),L2t.forEach(t),oEr=i(QSe),wve=s(QSe,"SPAN",{});var x2t=n(wve);rEr=r(x2t,"FlaxAutoModelForMaskedLM"),x2t.forEach(t),QSe.forEach(t),Ike=i(d),$r=s(d,"DIV",{class:!0});var _i=n($r);f(RL.$$.fragment,_i),tEr=i(_i),lm=s(_i,"P",{});var WW=n(lm);aEr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ave=s(WW,"CODE",{});var k2t=n(Ave);sEr=r(k2t,"from_pretrained()"),k2t.forEach(t),nEr=r(WW,"class method or the "),Lve=s(WW,"CODE",{});var R2t=n(Lve);lEr=r(R2t,"from_config()"),R2t.forEach(t),iEr=r(WW,`class
method.`),WW.forEach(t),dEr=i(_i),SL=s(_i,"P",{});var HSe=n(SL);cEr=r(HSe,"This class cannot be instantiated directly using "),Bve=s(HSe,"CODE",{});var S2t=n(Bve);mEr=r(S2t,"__init__()"),S2t.forEach(t),fEr=r(HSe," (throws an error)."),HSe.forEach(t),gEr=i(_i),Bt=s(_i,"DIV",{class:!0});var bi=n(Bt);f(PL.$$.fragment,bi),hEr=i(bi),xve=s(bi,"P",{});var P2t=n(xve);uEr=r(P2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P2t.forEach(t),pEr=i(bi),im=s(bi,"P",{});var QW=n(im);_Er=r(QW,`Note:
Loading a model from its configuration file does `),kve=s(QW,"STRONG",{});var $2t=n(kve);bEr=r($2t,"not"),$2t.forEach(t),vEr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rve=s(QW,"CODE",{});var I2t=n(Rve);TEr=r(I2t,"from_pretrained()"),I2t.forEach(t),FEr=r(QW,"to load the model weights."),QW.forEach(t),CEr=i(bi),Sve=s(bi,"P",{});var j2t=n(Sve);MEr=r(j2t,"Examples:"),j2t.forEach(t),EEr=i(bi),f($L.$$.fragment,bi),bi.forEach(t),yEr=i(_i),xo=s(_i,"DIV",{class:!0});var xa=n(xo);f(IL.$$.fragment,xa),wEr=i(xa),Pve=s(xa,"P",{});var D2t=n(Pve);AEr=r(D2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D2t.forEach(t),LEr=i(xa),ks=s(xa,"P",{});var I5=n(ks);BEr=r(I5,"The model class to instantiate is selected based on the "),$ve=s(I5,"CODE",{});var N2t=n($ve);xEr=r(N2t,"model_type"),N2t.forEach(t),kEr=r(I5,` property of the config object (either
passed as an argument or loaded from `),Ive=s(I5,"CODE",{});var q2t=n(Ive);REr=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),SEr=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=s(I5,"CODE",{});var O2t=n(jve);PEr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),$Er=r(I5,":"),I5.forEach(t),IEr=i(xa),_e=s(xa,"UL",{});var ye=n(_e);RE=s(ye,"LI",{});var Q9e=n(RE);Dve=s(Q9e,"STRONG",{});var G2t=n(Dve);jEr=r(G2t,"albert"),G2t.forEach(t),DEr=r(Q9e," \u2014 "),gV=s(Q9e,"A",{href:!0});var X2t=n(gV);NEr=r(X2t,"FlaxAlbertForMaskedLM"),X2t.forEach(t),qEr=r(Q9e," (ALBERT model)"),Q9e.forEach(t),OEr=i(ye),SE=s(ye,"LI",{});var H9e=n(SE);Nve=s(H9e,"STRONG",{});var V2t=n(Nve);GEr=r(V2t,"bart"),V2t.forEach(t),XEr=r(H9e," \u2014 "),hV=s(H9e,"A",{href:!0});var z2t=n(hV);VEr=r(z2t,"FlaxBartForConditionalGeneration"),z2t.forEach(t),zEr=r(H9e," (BART model)"),H9e.forEach(t),WEr=i(ye),PE=s(ye,"LI",{});var U9e=n(PE);qve=s(U9e,"STRONG",{});var W2t=n(qve);QEr=r(W2t,"bert"),W2t.forEach(t),HEr=r(U9e," \u2014 "),uV=s(U9e,"A",{href:!0});var Q2t=n(uV);UEr=r(Q2t,"FlaxBertForMaskedLM"),Q2t.forEach(t),JEr=r(U9e," (BERT model)"),U9e.forEach(t),YEr=i(ye),$E=s(ye,"LI",{});var J9e=n($E);Ove=s(J9e,"STRONG",{});var H2t=n(Ove);KEr=r(H2t,"big_bird"),H2t.forEach(t),ZEr=r(J9e," \u2014 "),pV=s(J9e,"A",{href:!0});var U2t=n(pV);e3r=r(U2t,"FlaxBigBirdForMaskedLM"),U2t.forEach(t),o3r=r(J9e," (BigBird model)"),J9e.forEach(t),r3r=i(ye),IE=s(ye,"LI",{});var Y9e=n(IE);Gve=s(Y9e,"STRONG",{});var J2t=n(Gve);t3r=r(J2t,"distilbert"),J2t.forEach(t),a3r=r(Y9e," \u2014 "),_V=s(Y9e,"A",{href:!0});var Y2t=n(_V);s3r=r(Y2t,"FlaxDistilBertForMaskedLM"),Y2t.forEach(t),n3r=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),l3r=i(ye),jE=s(ye,"LI",{});var K9e=n(jE);Xve=s(K9e,"STRONG",{});var K2t=n(Xve);i3r=r(K2t,"electra"),K2t.forEach(t),d3r=r(K9e," \u2014 "),bV=s(K9e,"A",{href:!0});var Z2t=n(bV);c3r=r(Z2t,"FlaxElectraForMaskedLM"),Z2t.forEach(t),m3r=r(K9e," (ELECTRA model)"),K9e.forEach(t),f3r=i(ye),DE=s(ye,"LI",{});var Z9e=n(DE);Vve=s(Z9e,"STRONG",{});var evt=n(Vve);g3r=r(evt,"mbart"),evt.forEach(t),h3r=r(Z9e," \u2014 "),vV=s(Z9e,"A",{href:!0});var ovt=n(vV);u3r=r(ovt,"FlaxMBartForConditionalGeneration"),ovt.forEach(t),p3r=r(Z9e," (mBART model)"),Z9e.forEach(t),_3r=i(ye),NE=s(ye,"LI",{});var eBe=n(NE);zve=s(eBe,"STRONG",{});var rvt=n(zve);b3r=r(rvt,"roberta"),rvt.forEach(t),v3r=r(eBe," \u2014 "),TV=s(eBe,"A",{href:!0});var tvt=n(TV);T3r=r(tvt,"FlaxRobertaForMaskedLM"),tvt.forEach(t),F3r=r(eBe," (RoBERTa model)"),eBe.forEach(t),C3r=i(ye),qE=s(ye,"LI",{});var oBe=n(qE);Wve=s(oBe,"STRONG",{});var avt=n(Wve);M3r=r(avt,"roformer"),avt.forEach(t),E3r=r(oBe," \u2014 "),FV=s(oBe,"A",{href:!0});var svt=n(FV);y3r=r(svt,"FlaxRoFormerForMaskedLM"),svt.forEach(t),w3r=r(oBe," (RoFormer model)"),oBe.forEach(t),A3r=i(ye),OE=s(ye,"LI",{});var rBe=n(OE);Qve=s(rBe,"STRONG",{});var nvt=n(Qve);L3r=r(nvt,"xlm-roberta"),nvt.forEach(t),B3r=r(rBe," \u2014 "),CV=s(rBe,"A",{href:!0});var lvt=n(CV);x3r=r(lvt,"FlaxXLMRobertaForMaskedLM"),lvt.forEach(t),k3r=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),ye.forEach(t),R3r=i(xa),Hve=s(xa,"P",{});var ivt=n(Hve);S3r=r(ivt,"Examples:"),ivt.forEach(t),P3r=i(xa),f(jL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),jke=i(d),dm=s(d,"H2",{class:!0});var USe=n(dm);GE=s(USe,"A",{id:!0,class:!0,href:!0});var dvt=n(GE);Uve=s(dvt,"SPAN",{});var cvt=n(Uve);f(DL.$$.fragment,cvt),cvt.forEach(t),dvt.forEach(t),$3r=i(USe),Jve=s(USe,"SPAN",{});var mvt=n(Jve);I3r=r(mvt,"FlaxAutoModelForSeq2SeqLM"),mvt.forEach(t),USe.forEach(t),Dke=i(d),Ir=s(d,"DIV",{class:!0});var vi=n(Ir);f(NL.$$.fragment,vi),j3r=i(vi),cm=s(vi,"P",{});var HW=n(cm);D3r=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Yve=s(HW,"CODE",{});var fvt=n(Yve);N3r=r(fvt,"from_pretrained()"),fvt.forEach(t),q3r=r(HW,"class method or the "),Kve=s(HW,"CODE",{});var gvt=n(Kve);O3r=r(gvt,"from_config()"),gvt.forEach(t),G3r=r(HW,`class
method.`),HW.forEach(t),X3r=i(vi),qL=s(vi,"P",{});var JSe=n(qL);V3r=r(JSe,"This class cannot be instantiated directly using "),Zve=s(JSe,"CODE",{});var hvt=n(Zve);z3r=r(hvt,"__init__()"),hvt.forEach(t),W3r=r(JSe," (throws an error)."),JSe.forEach(t),Q3r=i(vi),xt=s(vi,"DIV",{class:!0});var Ti=n(xt);f(OL.$$.fragment,Ti),H3r=i(Ti),eTe=s(Ti,"P",{});var uvt=n(eTe);U3r=r(uvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uvt.forEach(t),J3r=i(Ti),mm=s(Ti,"P",{});var UW=n(mm);Y3r=r(UW,`Note:
Loading a model from its configuration file does `),oTe=s(UW,"STRONG",{});var pvt=n(oTe);K3r=r(pvt,"not"),pvt.forEach(t),Z3r=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rTe=s(UW,"CODE",{});var _vt=n(rTe);e5r=r(_vt,"from_pretrained()"),_vt.forEach(t),o5r=r(UW,"to load the model weights."),UW.forEach(t),r5r=i(Ti),tTe=s(Ti,"P",{});var bvt=n(tTe);t5r=r(bvt,"Examples:"),bvt.forEach(t),a5r=i(Ti),f(GL.$$.fragment,Ti),Ti.forEach(t),s5r=i(vi),ko=s(vi,"DIV",{class:!0});var ka=n(ko);f(XL.$$.fragment,ka),n5r=i(ka),aTe=s(ka,"P",{});var vvt=n(aTe);l5r=r(vvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vvt.forEach(t),i5r=i(ka),Rs=s(ka,"P",{});var j5=n(Rs);d5r=r(j5,"The model class to instantiate is selected based on the "),sTe=s(j5,"CODE",{});var Tvt=n(sTe);c5r=r(Tvt,"model_type"),Tvt.forEach(t),m5r=r(j5,` property of the config object (either
passed as an argument or loaded from `),nTe=s(j5,"CODE",{});var Fvt=n(nTe);f5r=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),g5r=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=s(j5,"CODE",{});var Cvt=n(lTe);h5r=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),u5r=r(j5,":"),j5.forEach(t),p5r=i(ka),Ce=s(ka,"UL",{});var lo=n(Ce);XE=s(lo,"LI",{});var tBe=n(XE);iTe=s(tBe,"STRONG",{});var Mvt=n(iTe);_5r=r(Mvt,"bart"),Mvt.forEach(t),b5r=r(tBe," \u2014 "),MV=s(tBe,"A",{href:!0});var Evt=n(MV);v5r=r(Evt,"FlaxBartForConditionalGeneration"),Evt.forEach(t),T5r=r(tBe," (BART model)"),tBe.forEach(t),F5r=i(lo),VE=s(lo,"LI",{});var aBe=n(VE);dTe=s(aBe,"STRONG",{});var yvt=n(dTe);C5r=r(yvt,"blenderbot"),yvt.forEach(t),M5r=r(aBe," \u2014 "),EV=s(aBe,"A",{href:!0});var wvt=n(EV);E5r=r(wvt,"FlaxBlenderbotForConditionalGeneration"),wvt.forEach(t),y5r=r(aBe," (Blenderbot model)"),aBe.forEach(t),w5r=i(lo),zE=s(lo,"LI",{});var sBe=n(zE);cTe=s(sBe,"STRONG",{});var Avt=n(cTe);A5r=r(Avt,"blenderbot-small"),Avt.forEach(t),L5r=r(sBe," \u2014 "),yV=s(sBe,"A",{href:!0});var Lvt=n(yV);B5r=r(Lvt,"FlaxBlenderbotSmallForConditionalGeneration"),Lvt.forEach(t),x5r=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),k5r=i(lo),WE=s(lo,"LI",{});var nBe=n(WE);mTe=s(nBe,"STRONG",{});var Bvt=n(mTe);R5r=r(Bvt,"encoder-decoder"),Bvt.forEach(t),S5r=r(nBe," \u2014 "),wV=s(nBe,"A",{href:!0});var xvt=n(wV);P5r=r(xvt,"FlaxEncoderDecoderModel"),xvt.forEach(t),$5r=r(nBe," (Encoder decoder model)"),nBe.forEach(t),I5r=i(lo),QE=s(lo,"LI",{});var lBe=n(QE);fTe=s(lBe,"STRONG",{});var kvt=n(fTe);j5r=r(kvt,"marian"),kvt.forEach(t),D5r=r(lBe," \u2014 "),AV=s(lBe,"A",{href:!0});var Rvt=n(AV);N5r=r(Rvt,"FlaxMarianMTModel"),Rvt.forEach(t),q5r=r(lBe," (Marian model)"),lBe.forEach(t),O5r=i(lo),HE=s(lo,"LI",{});var iBe=n(HE);gTe=s(iBe,"STRONG",{});var Svt=n(gTe);G5r=r(Svt,"mbart"),Svt.forEach(t),X5r=r(iBe," \u2014 "),LV=s(iBe,"A",{href:!0});var Pvt=n(LV);V5r=r(Pvt,"FlaxMBartForConditionalGeneration"),Pvt.forEach(t),z5r=r(iBe," (mBART model)"),iBe.forEach(t),W5r=i(lo),UE=s(lo,"LI",{});var dBe=n(UE);hTe=s(dBe,"STRONG",{});var $vt=n(hTe);Q5r=r($vt,"mt5"),$vt.forEach(t),H5r=r(dBe," \u2014 "),BV=s(dBe,"A",{href:!0});var Ivt=n(BV);U5r=r(Ivt,"FlaxMT5ForConditionalGeneration"),Ivt.forEach(t),J5r=r(dBe," (mT5 model)"),dBe.forEach(t),Y5r=i(lo),JE=s(lo,"LI",{});var cBe=n(JE);uTe=s(cBe,"STRONG",{});var jvt=n(uTe);K5r=r(jvt,"pegasus"),jvt.forEach(t),Z5r=r(cBe," \u2014 "),xV=s(cBe,"A",{href:!0});var Dvt=n(xV);eyr=r(Dvt,"FlaxPegasusForConditionalGeneration"),Dvt.forEach(t),oyr=r(cBe," (Pegasus model)"),cBe.forEach(t),ryr=i(lo),YE=s(lo,"LI",{});var mBe=n(YE);pTe=s(mBe,"STRONG",{});var Nvt=n(pTe);tyr=r(Nvt,"t5"),Nvt.forEach(t),ayr=r(mBe," \u2014 "),kV=s(mBe,"A",{href:!0});var qvt=n(kV);syr=r(qvt,"FlaxT5ForConditionalGeneration"),qvt.forEach(t),nyr=r(mBe," (T5 model)"),mBe.forEach(t),lo.forEach(t),lyr=i(ka),_Te=s(ka,"P",{});var Ovt=n(_Te);iyr=r(Ovt,"Examples:"),Ovt.forEach(t),dyr=i(ka),f(VL.$$.fragment,ka),ka.forEach(t),vi.forEach(t),Nke=i(d),fm=s(d,"H2",{class:!0});var YSe=n(fm);KE=s(YSe,"A",{id:!0,class:!0,href:!0});var Gvt=n(KE);bTe=s(Gvt,"SPAN",{});var Xvt=n(bTe);f(zL.$$.fragment,Xvt),Xvt.forEach(t),Gvt.forEach(t),cyr=i(YSe),vTe=s(YSe,"SPAN",{});var Vvt=n(vTe);myr=r(Vvt,"FlaxAutoModelForSequenceClassification"),Vvt.forEach(t),YSe.forEach(t),qke=i(d),jr=s(d,"DIV",{class:!0});var Fi=n(jr);f(WL.$$.fragment,Fi),fyr=i(Fi),gm=s(Fi,"P",{});var JW=n(gm);gyr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TTe=s(JW,"CODE",{});var zvt=n(TTe);hyr=r(zvt,"from_pretrained()"),zvt.forEach(t),uyr=r(JW,"class method or the "),FTe=s(JW,"CODE",{});var Wvt=n(FTe);pyr=r(Wvt,"from_config()"),Wvt.forEach(t),_yr=r(JW,`class
method.`),JW.forEach(t),byr=i(Fi),QL=s(Fi,"P",{});var KSe=n(QL);vyr=r(KSe,"This class cannot be instantiated directly using "),CTe=s(KSe,"CODE",{});var Qvt=n(CTe);Tyr=r(Qvt,"__init__()"),Qvt.forEach(t),Fyr=r(KSe," (throws an error)."),KSe.forEach(t),Cyr=i(Fi),kt=s(Fi,"DIV",{class:!0});var Ci=n(kt);f(HL.$$.fragment,Ci),Myr=i(Ci),MTe=s(Ci,"P",{});var Hvt=n(MTe);Eyr=r(Hvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Hvt.forEach(t),yyr=i(Ci),hm=s(Ci,"P",{});var YW=n(hm);wyr=r(YW,`Note:
Loading a model from its configuration file does `),ETe=s(YW,"STRONG",{});var Uvt=n(ETe);Ayr=r(Uvt,"not"),Uvt.forEach(t),Lyr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yTe=s(YW,"CODE",{});var Jvt=n(yTe);Byr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),xyr=r(YW,"to load the model weights."),YW.forEach(t),kyr=i(Ci),wTe=s(Ci,"P",{});var Yvt=n(wTe);Ryr=r(Yvt,"Examples:"),Yvt.forEach(t),Syr=i(Ci),f(UL.$$.fragment,Ci),Ci.forEach(t),Pyr=i(Fi),Ro=s(Fi,"DIV",{class:!0});var Ra=n(Ro);f(JL.$$.fragment,Ra),$yr=i(Ra),ATe=s(Ra,"P",{});var Kvt=n(ATe);Iyr=r(Kvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kvt.forEach(t),jyr=i(Ra),Ss=s(Ra,"P",{});var D5=n(Ss);Dyr=r(D5,"The model class to instantiate is selected based on the "),LTe=s(D5,"CODE",{});var Zvt=n(LTe);Nyr=r(Zvt,"model_type"),Zvt.forEach(t),qyr=r(D5,` property of the config object (either
passed as an argument or loaded from `),BTe=s(D5,"CODE",{});var eTt=n(BTe);Oyr=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),Gyr=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=s(D5,"CODE",{});var oTt=n(xTe);Xyr=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),Vyr=r(D5,":"),D5.forEach(t),zyr=i(Ra),be=s(Ra,"UL",{});var we=n(be);ZE=s(we,"LI",{});var fBe=n(ZE);kTe=s(fBe,"STRONG",{});var rTt=n(kTe);Wyr=r(rTt,"albert"),rTt.forEach(t),Qyr=r(fBe," \u2014 "),RV=s(fBe,"A",{href:!0});var tTt=n(RV);Hyr=r(tTt,"FlaxAlbertForSequenceClassification"),tTt.forEach(t),Uyr=r(fBe," (ALBERT model)"),fBe.forEach(t),Jyr=i(we),e3=s(we,"LI",{});var gBe=n(e3);RTe=s(gBe,"STRONG",{});var aTt=n(RTe);Yyr=r(aTt,"bart"),aTt.forEach(t),Kyr=r(gBe," \u2014 "),SV=s(gBe,"A",{href:!0});var sTt=n(SV);Zyr=r(sTt,"FlaxBartForSequenceClassification"),sTt.forEach(t),ewr=r(gBe," (BART model)"),gBe.forEach(t),owr=i(we),o3=s(we,"LI",{});var hBe=n(o3);STe=s(hBe,"STRONG",{});var nTt=n(STe);rwr=r(nTt,"bert"),nTt.forEach(t),twr=r(hBe," \u2014 "),PV=s(hBe,"A",{href:!0});var lTt=n(PV);awr=r(lTt,"FlaxBertForSequenceClassification"),lTt.forEach(t),swr=r(hBe," (BERT model)"),hBe.forEach(t),nwr=i(we),r3=s(we,"LI",{});var uBe=n(r3);PTe=s(uBe,"STRONG",{});var iTt=n(PTe);lwr=r(iTt,"big_bird"),iTt.forEach(t),iwr=r(uBe," \u2014 "),$V=s(uBe,"A",{href:!0});var dTt=n($V);dwr=r(dTt,"FlaxBigBirdForSequenceClassification"),dTt.forEach(t),cwr=r(uBe," (BigBird model)"),uBe.forEach(t),mwr=i(we),t3=s(we,"LI",{});var pBe=n(t3);$Te=s(pBe,"STRONG",{});var cTt=n($Te);fwr=r(cTt,"distilbert"),cTt.forEach(t),gwr=r(pBe," \u2014 "),IV=s(pBe,"A",{href:!0});var mTt=n(IV);hwr=r(mTt,"FlaxDistilBertForSequenceClassification"),mTt.forEach(t),uwr=r(pBe," (DistilBERT model)"),pBe.forEach(t),pwr=i(we),a3=s(we,"LI",{});var _Be=n(a3);ITe=s(_Be,"STRONG",{});var fTt=n(ITe);_wr=r(fTt,"electra"),fTt.forEach(t),bwr=r(_Be," \u2014 "),jV=s(_Be,"A",{href:!0});var gTt=n(jV);vwr=r(gTt,"FlaxElectraForSequenceClassification"),gTt.forEach(t),Twr=r(_Be," (ELECTRA model)"),_Be.forEach(t),Fwr=i(we),s3=s(we,"LI",{});var bBe=n(s3);jTe=s(bBe,"STRONG",{});var hTt=n(jTe);Cwr=r(hTt,"mbart"),hTt.forEach(t),Mwr=r(bBe," \u2014 "),DV=s(bBe,"A",{href:!0});var uTt=n(DV);Ewr=r(uTt,"FlaxMBartForSequenceClassification"),uTt.forEach(t),ywr=r(bBe," (mBART model)"),bBe.forEach(t),wwr=i(we),n3=s(we,"LI",{});var vBe=n(n3);DTe=s(vBe,"STRONG",{});var pTt=n(DTe);Awr=r(pTt,"roberta"),pTt.forEach(t),Lwr=r(vBe," \u2014 "),NV=s(vBe,"A",{href:!0});var _Tt=n(NV);Bwr=r(_Tt,"FlaxRobertaForSequenceClassification"),_Tt.forEach(t),xwr=r(vBe," (RoBERTa model)"),vBe.forEach(t),kwr=i(we),l3=s(we,"LI",{});var TBe=n(l3);NTe=s(TBe,"STRONG",{});var bTt=n(NTe);Rwr=r(bTt,"roformer"),bTt.forEach(t),Swr=r(TBe," \u2014 "),qV=s(TBe,"A",{href:!0});var vTt=n(qV);Pwr=r(vTt,"FlaxRoFormerForSequenceClassification"),vTt.forEach(t),$wr=r(TBe," (RoFormer model)"),TBe.forEach(t),Iwr=i(we),i3=s(we,"LI",{});var FBe=n(i3);qTe=s(FBe,"STRONG",{});var TTt=n(qTe);jwr=r(TTt,"xlm-roberta"),TTt.forEach(t),Dwr=r(FBe," \u2014 "),OV=s(FBe,"A",{href:!0});var FTt=n(OV);Nwr=r(FTt,"FlaxXLMRobertaForSequenceClassification"),FTt.forEach(t),qwr=r(FBe," (XLM-RoBERTa model)"),FBe.forEach(t),we.forEach(t),Owr=i(Ra),OTe=s(Ra,"P",{});var CTt=n(OTe);Gwr=r(CTt,"Examples:"),CTt.forEach(t),Xwr=i(Ra),f(YL.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Oke=i(d),um=s(d,"H2",{class:!0});var ZSe=n(um);d3=s(ZSe,"A",{id:!0,class:!0,href:!0});var MTt=n(d3);GTe=s(MTt,"SPAN",{});var ETt=n(GTe);f(KL.$$.fragment,ETt),ETt.forEach(t),MTt.forEach(t),Vwr=i(ZSe),XTe=s(ZSe,"SPAN",{});var yTt=n(XTe);zwr=r(yTt,"FlaxAutoModelForQuestionAnswering"),yTt.forEach(t),ZSe.forEach(t),Gke=i(d),Dr=s(d,"DIV",{class:!0});var Mi=n(Dr);f(ZL.$$.fragment,Mi),Wwr=i(Mi),pm=s(Mi,"P",{});var KW=n(pm);Qwr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VTe=s(KW,"CODE",{});var wTt=n(VTe);Hwr=r(wTt,"from_pretrained()"),wTt.forEach(t),Uwr=r(KW,"class method or the "),zTe=s(KW,"CODE",{});var ATt=n(zTe);Jwr=r(ATt,"from_config()"),ATt.forEach(t),Ywr=r(KW,`class
method.`),KW.forEach(t),Kwr=i(Mi),e8=s(Mi,"P",{});var ePe=n(e8);Zwr=r(ePe,"This class cannot be instantiated directly using "),WTe=s(ePe,"CODE",{});var LTt=n(WTe);e6r=r(LTt,"__init__()"),LTt.forEach(t),o6r=r(ePe," (throws an error)."),ePe.forEach(t),r6r=i(Mi),Rt=s(Mi,"DIV",{class:!0});var Ei=n(Rt);f(o8.$$.fragment,Ei),t6r=i(Ei),QTe=s(Ei,"P",{});var BTt=n(QTe);a6r=r(BTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BTt.forEach(t),s6r=i(Ei),_m=s(Ei,"P",{});var ZW=n(_m);n6r=r(ZW,`Note:
Loading a model from its configuration file does `),HTe=s(ZW,"STRONG",{});var xTt=n(HTe);l6r=r(xTt,"not"),xTt.forEach(t),i6r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),UTe=s(ZW,"CODE",{});var kTt=n(UTe);d6r=r(kTt,"from_pretrained()"),kTt.forEach(t),c6r=r(ZW,"to load the model weights."),ZW.forEach(t),m6r=i(Ei),JTe=s(Ei,"P",{});var RTt=n(JTe);f6r=r(RTt,"Examples:"),RTt.forEach(t),g6r=i(Ei),f(r8.$$.fragment,Ei),Ei.forEach(t),h6r=i(Mi),So=s(Mi,"DIV",{class:!0});var Sa=n(So);f(t8.$$.fragment,Sa),u6r=i(Sa),YTe=s(Sa,"P",{});var STt=n(YTe);p6r=r(STt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),STt.forEach(t),_6r=i(Sa),Ps=s(Sa,"P",{});var N5=n(Ps);b6r=r(N5,"The model class to instantiate is selected based on the "),KTe=s(N5,"CODE",{});var PTt=n(KTe);v6r=r(PTt,"model_type"),PTt.forEach(t),T6r=r(N5,` property of the config object (either
passed as an argument or loaded from `),ZTe=s(N5,"CODE",{});var $Tt=n(ZTe);F6r=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),C6r=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=s(N5,"CODE",{});var ITt=n(e1e);M6r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),E6r=r(N5,":"),N5.forEach(t),y6r=i(Sa),ve=s(Sa,"UL",{});var Ae=n(ve);c3=s(Ae,"LI",{});var CBe=n(c3);o1e=s(CBe,"STRONG",{});var jTt=n(o1e);w6r=r(jTt,"albert"),jTt.forEach(t),A6r=r(CBe," \u2014 "),GV=s(CBe,"A",{href:!0});var DTt=n(GV);L6r=r(DTt,"FlaxAlbertForQuestionAnswering"),DTt.forEach(t),B6r=r(CBe," (ALBERT model)"),CBe.forEach(t),x6r=i(Ae),m3=s(Ae,"LI",{});var MBe=n(m3);r1e=s(MBe,"STRONG",{});var NTt=n(r1e);k6r=r(NTt,"bart"),NTt.forEach(t),R6r=r(MBe," \u2014 "),XV=s(MBe,"A",{href:!0});var qTt=n(XV);S6r=r(qTt,"FlaxBartForQuestionAnswering"),qTt.forEach(t),P6r=r(MBe," (BART model)"),MBe.forEach(t),$6r=i(Ae),f3=s(Ae,"LI",{});var EBe=n(f3);t1e=s(EBe,"STRONG",{});var OTt=n(t1e);I6r=r(OTt,"bert"),OTt.forEach(t),j6r=r(EBe," \u2014 "),VV=s(EBe,"A",{href:!0});var GTt=n(VV);D6r=r(GTt,"FlaxBertForQuestionAnswering"),GTt.forEach(t),N6r=r(EBe," (BERT model)"),EBe.forEach(t),q6r=i(Ae),g3=s(Ae,"LI",{});var yBe=n(g3);a1e=s(yBe,"STRONG",{});var XTt=n(a1e);O6r=r(XTt,"big_bird"),XTt.forEach(t),G6r=r(yBe," \u2014 "),zV=s(yBe,"A",{href:!0});var VTt=n(zV);X6r=r(VTt,"FlaxBigBirdForQuestionAnswering"),VTt.forEach(t),V6r=r(yBe," (BigBird model)"),yBe.forEach(t),z6r=i(Ae),h3=s(Ae,"LI",{});var wBe=n(h3);s1e=s(wBe,"STRONG",{});var zTt=n(s1e);W6r=r(zTt,"distilbert"),zTt.forEach(t),Q6r=r(wBe," \u2014 "),WV=s(wBe,"A",{href:!0});var WTt=n(WV);H6r=r(WTt,"FlaxDistilBertForQuestionAnswering"),WTt.forEach(t),U6r=r(wBe," (DistilBERT model)"),wBe.forEach(t),J6r=i(Ae),u3=s(Ae,"LI",{});var ABe=n(u3);n1e=s(ABe,"STRONG",{});var QTt=n(n1e);Y6r=r(QTt,"electra"),QTt.forEach(t),K6r=r(ABe," \u2014 "),QV=s(ABe,"A",{href:!0});var HTt=n(QV);Z6r=r(HTt,"FlaxElectraForQuestionAnswering"),HTt.forEach(t),eAr=r(ABe," (ELECTRA model)"),ABe.forEach(t),oAr=i(Ae),p3=s(Ae,"LI",{});var LBe=n(p3);l1e=s(LBe,"STRONG",{});var UTt=n(l1e);rAr=r(UTt,"mbart"),UTt.forEach(t),tAr=r(LBe," \u2014 "),HV=s(LBe,"A",{href:!0});var JTt=n(HV);aAr=r(JTt,"FlaxMBartForQuestionAnswering"),JTt.forEach(t),sAr=r(LBe," (mBART model)"),LBe.forEach(t),nAr=i(Ae),_3=s(Ae,"LI",{});var BBe=n(_3);i1e=s(BBe,"STRONG",{});var YTt=n(i1e);lAr=r(YTt,"roberta"),YTt.forEach(t),iAr=r(BBe," \u2014 "),UV=s(BBe,"A",{href:!0});var KTt=n(UV);dAr=r(KTt,"FlaxRobertaForQuestionAnswering"),KTt.forEach(t),cAr=r(BBe," (RoBERTa model)"),BBe.forEach(t),mAr=i(Ae),b3=s(Ae,"LI",{});var xBe=n(b3);d1e=s(xBe,"STRONG",{});var ZTt=n(d1e);fAr=r(ZTt,"roformer"),ZTt.forEach(t),gAr=r(xBe," \u2014 "),JV=s(xBe,"A",{href:!0});var e1t=n(JV);hAr=r(e1t,"FlaxRoFormerForQuestionAnswering"),e1t.forEach(t),uAr=r(xBe," (RoFormer model)"),xBe.forEach(t),pAr=i(Ae),v3=s(Ae,"LI",{});var kBe=n(v3);c1e=s(kBe,"STRONG",{});var o1t=n(c1e);_Ar=r(o1t,"xlm-roberta"),o1t.forEach(t),bAr=r(kBe," \u2014 "),YV=s(kBe,"A",{href:!0});var r1t=n(YV);vAr=r(r1t,"FlaxXLMRobertaForQuestionAnswering"),r1t.forEach(t),TAr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Ae.forEach(t),FAr=i(Sa),m1e=s(Sa,"P",{});var t1t=n(m1e);CAr=r(t1t,"Examples:"),t1t.forEach(t),MAr=i(Sa),f(a8.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),Xke=i(d),bm=s(d,"H2",{class:!0});var oPe=n(bm);T3=s(oPe,"A",{id:!0,class:!0,href:!0});var a1t=n(T3);f1e=s(a1t,"SPAN",{});var s1t=n(f1e);f(s8.$$.fragment,s1t),s1t.forEach(t),a1t.forEach(t),EAr=i(oPe),g1e=s(oPe,"SPAN",{});var n1t=n(g1e);yAr=r(n1t,"FlaxAutoModelForTokenClassification"),n1t.forEach(t),oPe.forEach(t),Vke=i(d),Nr=s(d,"DIV",{class:!0});var yi=n(Nr);f(n8.$$.fragment,yi),wAr=i(yi),vm=s(yi,"P",{});var eQ=n(vm);AAr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),h1e=s(eQ,"CODE",{});var l1t=n(h1e);LAr=r(l1t,"from_pretrained()"),l1t.forEach(t),BAr=r(eQ,"class method or the "),u1e=s(eQ,"CODE",{});var i1t=n(u1e);xAr=r(i1t,"from_config()"),i1t.forEach(t),kAr=r(eQ,`class
method.`),eQ.forEach(t),RAr=i(yi),l8=s(yi,"P",{});var rPe=n(l8);SAr=r(rPe,"This class cannot be instantiated directly using "),p1e=s(rPe,"CODE",{});var d1t=n(p1e);PAr=r(d1t,"__init__()"),d1t.forEach(t),$Ar=r(rPe," (throws an error)."),rPe.forEach(t),IAr=i(yi),St=s(yi,"DIV",{class:!0});var wi=n(St);f(i8.$$.fragment,wi),jAr=i(wi),_1e=s(wi,"P",{});var c1t=n(_1e);DAr=r(c1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),c1t.forEach(t),NAr=i(wi),Tm=s(wi,"P",{});var oQ=n(Tm);qAr=r(oQ,`Note:
Loading a model from its configuration file does `),b1e=s(oQ,"STRONG",{});var m1t=n(b1e);OAr=r(m1t,"not"),m1t.forEach(t),GAr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),v1e=s(oQ,"CODE",{});var f1t=n(v1e);XAr=r(f1t,"from_pretrained()"),f1t.forEach(t),VAr=r(oQ,"to load the model weights."),oQ.forEach(t),zAr=i(wi),T1e=s(wi,"P",{});var g1t=n(T1e);WAr=r(g1t,"Examples:"),g1t.forEach(t),QAr=i(wi),f(d8.$$.fragment,wi),wi.forEach(t),HAr=i(yi),Po=s(yi,"DIV",{class:!0});var Pa=n(Po);f(c8.$$.fragment,Pa),UAr=i(Pa),F1e=s(Pa,"P",{});var h1t=n(F1e);JAr=r(h1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),h1t.forEach(t),YAr=i(Pa),$s=s(Pa,"P",{});var q5=n($s);KAr=r(q5,"The model class to instantiate is selected based on the "),C1e=s(q5,"CODE",{});var u1t=n(C1e);ZAr=r(u1t,"model_type"),u1t.forEach(t),e0r=r(q5,` property of the config object (either
passed as an argument or loaded from `),M1e=s(q5,"CODE",{});var p1t=n(M1e);o0r=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),r0r=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=s(q5,"CODE",{});var _1t=n(E1e);t0r=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),a0r=r(q5,":"),q5.forEach(t),s0r=i(Pa),Re=s(Pa,"UL",{});var Go=n(Re);F3=s(Go,"LI",{});var RBe=n(F3);y1e=s(RBe,"STRONG",{});var b1t=n(y1e);n0r=r(b1t,"albert"),b1t.forEach(t),l0r=r(RBe," \u2014 "),KV=s(RBe,"A",{href:!0});var v1t=n(KV);i0r=r(v1t,"FlaxAlbertForTokenClassification"),v1t.forEach(t),d0r=r(RBe," (ALBERT model)"),RBe.forEach(t),c0r=i(Go),C3=s(Go,"LI",{});var SBe=n(C3);w1e=s(SBe,"STRONG",{});var T1t=n(w1e);m0r=r(T1t,"bert"),T1t.forEach(t),f0r=r(SBe," \u2014 "),ZV=s(SBe,"A",{href:!0});var F1t=n(ZV);g0r=r(F1t,"FlaxBertForTokenClassification"),F1t.forEach(t),h0r=r(SBe," (BERT model)"),SBe.forEach(t),u0r=i(Go),M3=s(Go,"LI",{});var PBe=n(M3);A1e=s(PBe,"STRONG",{});var C1t=n(A1e);p0r=r(C1t,"big_bird"),C1t.forEach(t),_0r=r(PBe," \u2014 "),ez=s(PBe,"A",{href:!0});var M1t=n(ez);b0r=r(M1t,"FlaxBigBirdForTokenClassification"),M1t.forEach(t),v0r=r(PBe," (BigBird model)"),PBe.forEach(t),T0r=i(Go),E3=s(Go,"LI",{});var $Be=n(E3);L1e=s($Be,"STRONG",{});var E1t=n(L1e);F0r=r(E1t,"distilbert"),E1t.forEach(t),C0r=r($Be," \u2014 "),oz=s($Be,"A",{href:!0});var y1t=n(oz);M0r=r(y1t,"FlaxDistilBertForTokenClassification"),y1t.forEach(t),E0r=r($Be," (DistilBERT model)"),$Be.forEach(t),y0r=i(Go),y3=s(Go,"LI",{});var IBe=n(y3);B1e=s(IBe,"STRONG",{});var w1t=n(B1e);w0r=r(w1t,"electra"),w1t.forEach(t),A0r=r(IBe," \u2014 "),rz=s(IBe,"A",{href:!0});var A1t=n(rz);L0r=r(A1t,"FlaxElectraForTokenClassification"),A1t.forEach(t),B0r=r(IBe," (ELECTRA model)"),IBe.forEach(t),x0r=i(Go),w3=s(Go,"LI",{});var jBe=n(w3);x1e=s(jBe,"STRONG",{});var L1t=n(x1e);k0r=r(L1t,"roberta"),L1t.forEach(t),R0r=r(jBe," \u2014 "),tz=s(jBe,"A",{href:!0});var B1t=n(tz);S0r=r(B1t,"FlaxRobertaForTokenClassification"),B1t.forEach(t),P0r=r(jBe," (RoBERTa model)"),jBe.forEach(t),$0r=i(Go),A3=s(Go,"LI",{});var DBe=n(A3);k1e=s(DBe,"STRONG",{});var x1t=n(k1e);I0r=r(x1t,"roformer"),x1t.forEach(t),j0r=r(DBe," \u2014 "),az=s(DBe,"A",{href:!0});var k1t=n(az);D0r=r(k1t,"FlaxRoFormerForTokenClassification"),k1t.forEach(t),N0r=r(DBe," (RoFormer model)"),DBe.forEach(t),q0r=i(Go),L3=s(Go,"LI",{});var NBe=n(L3);R1e=s(NBe,"STRONG",{});var R1t=n(R1e);O0r=r(R1t,"xlm-roberta"),R1t.forEach(t),G0r=r(NBe," \u2014 "),sz=s(NBe,"A",{href:!0});var S1t=n(sz);X0r=r(S1t,"FlaxXLMRobertaForTokenClassification"),S1t.forEach(t),V0r=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),Go.forEach(t),z0r=i(Pa),S1e=s(Pa,"P",{});var P1t=n(S1e);W0r=r(P1t,"Examples:"),P1t.forEach(t),Q0r=i(Pa),f(m8.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),zke=i(d),Fm=s(d,"H2",{class:!0});var tPe=n(Fm);B3=s(tPe,"A",{id:!0,class:!0,href:!0});var $1t=n(B3);P1e=s($1t,"SPAN",{});var I1t=n(P1e);f(f8.$$.fragment,I1t),I1t.forEach(t),$1t.forEach(t),H0r=i(tPe),$1e=s(tPe,"SPAN",{});var j1t=n($1e);U0r=r(j1t,"FlaxAutoModelForMultipleChoice"),j1t.forEach(t),tPe.forEach(t),Wke=i(d),qr=s(d,"DIV",{class:!0});var Ai=n(qr);f(g8.$$.fragment,Ai),J0r=i(Ai),Cm=s(Ai,"P",{});var rQ=n(Cm);Y0r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),I1e=s(rQ,"CODE",{});var D1t=n(I1e);K0r=r(D1t,"from_pretrained()"),D1t.forEach(t),Z0r=r(rQ,"class method or the "),j1e=s(rQ,"CODE",{});var N1t=n(j1e);eLr=r(N1t,"from_config()"),N1t.forEach(t),oLr=r(rQ,`class
method.`),rQ.forEach(t),rLr=i(Ai),h8=s(Ai,"P",{});var aPe=n(h8);tLr=r(aPe,"This class cannot be instantiated directly using "),D1e=s(aPe,"CODE",{});var q1t=n(D1e);aLr=r(q1t,"__init__()"),q1t.forEach(t),sLr=r(aPe," (throws an error)."),aPe.forEach(t),nLr=i(Ai),Pt=s(Ai,"DIV",{class:!0});var Li=n(Pt);f(u8.$$.fragment,Li),lLr=i(Li),N1e=s(Li,"P",{});var O1t=n(N1e);iLr=r(O1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O1t.forEach(t),dLr=i(Li),Mm=s(Li,"P",{});var tQ=n(Mm);cLr=r(tQ,`Note:
Loading a model from its configuration file does `),q1e=s(tQ,"STRONG",{});var G1t=n(q1e);mLr=r(G1t,"not"),G1t.forEach(t),fLr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),O1e=s(tQ,"CODE",{});var X1t=n(O1e);gLr=r(X1t,"from_pretrained()"),X1t.forEach(t),hLr=r(tQ,"to load the model weights."),tQ.forEach(t),uLr=i(Li),G1e=s(Li,"P",{});var V1t=n(G1e);pLr=r(V1t,"Examples:"),V1t.forEach(t),_Lr=i(Li),f(p8.$$.fragment,Li),Li.forEach(t),bLr=i(Ai),$o=s(Ai,"DIV",{class:!0});var $a=n($o);f(_8.$$.fragment,$a),vLr=i($a),X1e=s($a,"P",{});var z1t=n(X1e);TLr=r(z1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z1t.forEach(t),FLr=i($a),Is=s($a,"P",{});var O5=n(Is);CLr=r(O5,"The model class to instantiate is selected based on the "),V1e=s(O5,"CODE",{});var W1t=n(V1e);MLr=r(W1t,"model_type"),W1t.forEach(t),ELr=r(O5,` property of the config object (either
passed as an argument or loaded from `),z1e=s(O5,"CODE",{});var Q1t=n(z1e);yLr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),wLr=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=s(O5,"CODE",{});var H1t=n(W1e);ALr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),LLr=r(O5,":"),O5.forEach(t),BLr=i($a),Se=s($a,"UL",{});var Xo=n(Se);x3=s(Xo,"LI",{});var qBe=n(x3);Q1e=s(qBe,"STRONG",{});var U1t=n(Q1e);xLr=r(U1t,"albert"),U1t.forEach(t),kLr=r(qBe," \u2014 "),nz=s(qBe,"A",{href:!0});var J1t=n(nz);RLr=r(J1t,"FlaxAlbertForMultipleChoice"),J1t.forEach(t),SLr=r(qBe," (ALBERT model)"),qBe.forEach(t),PLr=i(Xo),k3=s(Xo,"LI",{});var OBe=n(k3);H1e=s(OBe,"STRONG",{});var Y1t=n(H1e);$Lr=r(Y1t,"bert"),Y1t.forEach(t),ILr=r(OBe," \u2014 "),lz=s(OBe,"A",{href:!0});var K1t=n(lz);jLr=r(K1t,"FlaxBertForMultipleChoice"),K1t.forEach(t),DLr=r(OBe," (BERT model)"),OBe.forEach(t),NLr=i(Xo),R3=s(Xo,"LI",{});var GBe=n(R3);U1e=s(GBe,"STRONG",{});var Z1t=n(U1e);qLr=r(Z1t,"big_bird"),Z1t.forEach(t),OLr=r(GBe," \u2014 "),iz=s(GBe,"A",{href:!0});var eFt=n(iz);GLr=r(eFt,"FlaxBigBirdForMultipleChoice"),eFt.forEach(t),XLr=r(GBe," (BigBird model)"),GBe.forEach(t),VLr=i(Xo),S3=s(Xo,"LI",{});var XBe=n(S3);J1e=s(XBe,"STRONG",{});var oFt=n(J1e);zLr=r(oFt,"distilbert"),oFt.forEach(t),WLr=r(XBe," \u2014 "),dz=s(XBe,"A",{href:!0});var rFt=n(dz);QLr=r(rFt,"FlaxDistilBertForMultipleChoice"),rFt.forEach(t),HLr=r(XBe," (DistilBERT model)"),XBe.forEach(t),ULr=i(Xo),P3=s(Xo,"LI",{});var VBe=n(P3);Y1e=s(VBe,"STRONG",{});var tFt=n(Y1e);JLr=r(tFt,"electra"),tFt.forEach(t),YLr=r(VBe," \u2014 "),cz=s(VBe,"A",{href:!0});var aFt=n(cz);KLr=r(aFt,"FlaxElectraForMultipleChoice"),aFt.forEach(t),ZLr=r(VBe," (ELECTRA model)"),VBe.forEach(t),e8r=i(Xo),$3=s(Xo,"LI",{});var zBe=n($3);K1e=s(zBe,"STRONG",{});var sFt=n(K1e);o8r=r(sFt,"roberta"),sFt.forEach(t),r8r=r(zBe," \u2014 "),mz=s(zBe,"A",{href:!0});var nFt=n(mz);t8r=r(nFt,"FlaxRobertaForMultipleChoice"),nFt.forEach(t),a8r=r(zBe," (RoBERTa model)"),zBe.forEach(t),s8r=i(Xo),I3=s(Xo,"LI",{});var WBe=n(I3);Z1e=s(WBe,"STRONG",{});var lFt=n(Z1e);n8r=r(lFt,"roformer"),lFt.forEach(t),l8r=r(WBe," \u2014 "),fz=s(WBe,"A",{href:!0});var iFt=n(fz);i8r=r(iFt,"FlaxRoFormerForMultipleChoice"),iFt.forEach(t),d8r=r(WBe," (RoFormer model)"),WBe.forEach(t),c8r=i(Xo),j3=s(Xo,"LI",{});var QBe=n(j3);eFe=s(QBe,"STRONG",{});var dFt=n(eFe);m8r=r(dFt,"xlm-roberta"),dFt.forEach(t),f8r=r(QBe," \u2014 "),gz=s(QBe,"A",{href:!0});var cFt=n(gz);g8r=r(cFt,"FlaxXLMRobertaForMultipleChoice"),cFt.forEach(t),h8r=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Xo.forEach(t),u8r=i($a),oFe=s($a,"P",{});var mFt=n(oFe);p8r=r(mFt,"Examples:"),mFt.forEach(t),_8r=i($a),f(b8.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),Qke=i(d),Em=s(d,"H2",{class:!0});var sPe=n(Em);D3=s(sPe,"A",{id:!0,class:!0,href:!0});var fFt=n(D3);rFe=s(fFt,"SPAN",{});var gFt=n(rFe);f(v8.$$.fragment,gFt),gFt.forEach(t),fFt.forEach(t),b8r=i(sPe),tFe=s(sPe,"SPAN",{});var hFt=n(tFe);v8r=r(hFt,"FlaxAutoModelForNextSentencePrediction"),hFt.forEach(t),sPe.forEach(t),Hke=i(d),Or=s(d,"DIV",{class:!0});var Bi=n(Or);f(T8.$$.fragment,Bi),T8r=i(Bi),ym=s(Bi,"P",{});var aQ=n(ym);F8r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aFe=s(aQ,"CODE",{});var uFt=n(aFe);C8r=r(uFt,"from_pretrained()"),uFt.forEach(t),M8r=r(aQ,"class method or the "),sFe=s(aQ,"CODE",{});var pFt=n(sFe);E8r=r(pFt,"from_config()"),pFt.forEach(t),y8r=r(aQ,`class
method.`),aQ.forEach(t),w8r=i(Bi),F8=s(Bi,"P",{});var nPe=n(F8);A8r=r(nPe,"This class cannot be instantiated directly using "),nFe=s(nPe,"CODE",{});var _Ft=n(nFe);L8r=r(_Ft,"__init__()"),_Ft.forEach(t),B8r=r(nPe," (throws an error)."),nPe.forEach(t),x8r=i(Bi),$t=s(Bi,"DIV",{class:!0});var xi=n($t);f(C8.$$.fragment,xi),k8r=i(xi),lFe=s(xi,"P",{});var bFt=n(lFe);R8r=r(bFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bFt.forEach(t),S8r=i(xi),wm=s(xi,"P",{});var sQ=n(wm);P8r=r(sQ,`Note:
Loading a model from its configuration file does `),iFe=s(sQ,"STRONG",{});var vFt=n(iFe);$8r=r(vFt,"not"),vFt.forEach(t),I8r=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dFe=s(sQ,"CODE",{});var TFt=n(dFe);j8r=r(TFt,"from_pretrained()"),TFt.forEach(t),D8r=r(sQ,"to load the model weights."),sQ.forEach(t),N8r=i(xi),cFe=s(xi,"P",{});var FFt=n(cFe);q8r=r(FFt,"Examples:"),FFt.forEach(t),O8r=i(xi),f(M8.$$.fragment,xi),xi.forEach(t),G8r=i(Bi),Io=s(Bi,"DIV",{class:!0});var Ia=n(Io);f(E8.$$.fragment,Ia),X8r=i(Ia),mFe=s(Ia,"P",{});var CFt=n(mFe);V8r=r(CFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CFt.forEach(t),z8r=i(Ia),js=s(Ia,"P",{});var G5=n(js);W8r=r(G5,"The model class to instantiate is selected based on the "),fFe=s(G5,"CODE",{});var MFt=n(fFe);Q8r=r(MFt,"model_type"),MFt.forEach(t),H8r=r(G5,` property of the config object (either
passed as an argument or loaded from `),gFe=s(G5,"CODE",{});var EFt=n(gFe);U8r=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),J8r=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=s(G5,"CODE",{});var yFt=n(hFe);Y8r=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),K8r=r(G5,":"),G5.forEach(t),Z8r=i(Ia),uFe=s(Ia,"UL",{});var wFt=n(uFe);N3=s(wFt,"LI",{});var HBe=n(N3);pFe=s(HBe,"STRONG",{});var AFt=n(pFe);e7r=r(AFt,"bert"),AFt.forEach(t),o7r=r(HBe," \u2014 "),hz=s(HBe,"A",{href:!0});var LFt=n(hz);r7r=r(LFt,"FlaxBertForNextSentencePrediction"),LFt.forEach(t),t7r=r(HBe," (BERT model)"),HBe.forEach(t),wFt.forEach(t),a7r=i(Ia),_Fe=s(Ia,"P",{});var BFt=n(_Fe);s7r=r(BFt,"Examples:"),BFt.forEach(t),n7r=i(Ia),f(y8.$$.fragment,Ia),Ia.forEach(t),Bi.forEach(t),Uke=i(d),Am=s(d,"H2",{class:!0});var lPe=n(Am);q3=s(lPe,"A",{id:!0,class:!0,href:!0});var xFt=n(q3);bFe=s(xFt,"SPAN",{});var kFt=n(bFe);f(w8.$$.fragment,kFt),kFt.forEach(t),xFt.forEach(t),l7r=i(lPe),vFe=s(lPe,"SPAN",{});var RFt=n(vFe);i7r=r(RFt,"FlaxAutoModelForImageClassification"),RFt.forEach(t),lPe.forEach(t),Jke=i(d),Gr=s(d,"DIV",{class:!0});var ki=n(Gr);f(A8.$$.fragment,ki),d7r=i(ki),Lm=s(ki,"P",{});var nQ=n(Lm);c7r=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TFe=s(nQ,"CODE",{});var SFt=n(TFe);m7r=r(SFt,"from_pretrained()"),SFt.forEach(t),f7r=r(nQ,"class method or the "),FFe=s(nQ,"CODE",{});var PFt=n(FFe);g7r=r(PFt,"from_config()"),PFt.forEach(t),h7r=r(nQ,`class
method.`),nQ.forEach(t),u7r=i(ki),L8=s(ki,"P",{});var iPe=n(L8);p7r=r(iPe,"This class cannot be instantiated directly using "),CFe=s(iPe,"CODE",{});var $Ft=n(CFe);_7r=r($Ft,"__init__()"),$Ft.forEach(t),b7r=r(iPe," (throws an error)."),iPe.forEach(t),v7r=i(ki),It=s(ki,"DIV",{class:!0});var Ri=n(It);f(B8.$$.fragment,Ri),T7r=i(Ri),MFe=s(Ri,"P",{});var IFt=n(MFe);F7r=r(IFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IFt.forEach(t),C7r=i(Ri),Bm=s(Ri,"P",{});var lQ=n(Bm);M7r=r(lQ,`Note:
Loading a model from its configuration file does `),EFe=s(lQ,"STRONG",{});var jFt=n(EFe);E7r=r(jFt,"not"),jFt.forEach(t),y7r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yFe=s(lQ,"CODE",{});var DFt=n(yFe);w7r=r(DFt,"from_pretrained()"),DFt.forEach(t),A7r=r(lQ,"to load the model weights."),lQ.forEach(t),L7r=i(Ri),wFe=s(Ri,"P",{});var NFt=n(wFe);B7r=r(NFt,"Examples:"),NFt.forEach(t),x7r=i(Ri),f(x8.$$.fragment,Ri),Ri.forEach(t),k7r=i(ki),jo=s(ki,"DIV",{class:!0});var ja=n(jo);f(k8.$$.fragment,ja),R7r=i(ja),AFe=s(ja,"P",{});var qFt=n(AFe);S7r=r(qFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qFt.forEach(t),P7r=i(ja),Ds=s(ja,"P",{});var X5=n(Ds);$7r=r(X5,"The model class to instantiate is selected based on the "),LFe=s(X5,"CODE",{});var OFt=n(LFe);I7r=r(OFt,"model_type"),OFt.forEach(t),j7r=r(X5,` property of the config object (either
passed as an argument or loaded from `),BFe=s(X5,"CODE",{});var GFt=n(BFe);D7r=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),N7r=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=s(X5,"CODE",{});var XFt=n(xFe);q7r=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),O7r=r(X5,":"),X5.forEach(t),G7r=i(ja),R8=s(ja,"UL",{});var dPe=n(R8);O3=s(dPe,"LI",{});var UBe=n(O3);kFe=s(UBe,"STRONG",{});var VFt=n(kFe);X7r=r(VFt,"beit"),VFt.forEach(t),V7r=r(UBe," \u2014 "),uz=s(UBe,"A",{href:!0});var zFt=n(uz);z7r=r(zFt,"FlaxBeitForImageClassification"),zFt.forEach(t),W7r=r(UBe," (BEiT model)"),UBe.forEach(t),Q7r=i(dPe),G3=s(dPe,"LI",{});var JBe=n(G3);RFe=s(JBe,"STRONG",{});var WFt=n(RFe);H7r=r(WFt,"vit"),WFt.forEach(t),U7r=r(JBe," \u2014 "),pz=s(JBe,"A",{href:!0});var QFt=n(pz);J7r=r(QFt,"FlaxViTForImageClassification"),QFt.forEach(t),Y7r=r(JBe," (ViT model)"),JBe.forEach(t),dPe.forEach(t),K7r=i(ja),SFe=s(ja,"P",{});var HFt=n(SFe);Z7r=r(HFt,"Examples:"),HFt.forEach(t),e9r=i(ja),f(S8.$$.fragment,ja),ja.forEach(t),ki.forEach(t),Yke=i(d),xm=s(d,"H2",{class:!0});var cPe=n(xm);X3=s(cPe,"A",{id:!0,class:!0,href:!0});var UFt=n(X3);PFe=s(UFt,"SPAN",{});var JFt=n(PFe);f(P8.$$.fragment,JFt),JFt.forEach(t),UFt.forEach(t),o9r=i(cPe),$Fe=s(cPe,"SPAN",{});var YFt=n($Fe);r9r=r(YFt,"FlaxAutoModelForVision2Seq"),YFt.forEach(t),cPe.forEach(t),Kke=i(d),Xr=s(d,"DIV",{class:!0});var Si=n(Xr);f($8.$$.fragment,Si),t9r=i(Si),km=s(Si,"P",{});var iQ=n(km);a9r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IFe=s(iQ,"CODE",{});var KFt=n(IFe);s9r=r(KFt,"from_pretrained()"),KFt.forEach(t),n9r=r(iQ,"class method or the "),jFe=s(iQ,"CODE",{});var ZFt=n(jFe);l9r=r(ZFt,"from_config()"),ZFt.forEach(t),i9r=r(iQ,`class
method.`),iQ.forEach(t),d9r=i(Si),I8=s(Si,"P",{});var mPe=n(I8);c9r=r(mPe,"This class cannot be instantiated directly using "),DFe=s(mPe,"CODE",{});var eCt=n(DFe);m9r=r(eCt,"__init__()"),eCt.forEach(t),f9r=r(mPe," (throws an error)."),mPe.forEach(t),g9r=i(Si),jt=s(Si,"DIV",{class:!0});var Pi=n(jt);f(j8.$$.fragment,Pi),h9r=i(Pi),NFe=s(Pi,"P",{});var oCt=n(NFe);u9r=r(oCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oCt.forEach(t),p9r=i(Pi),Rm=s(Pi,"P",{});var dQ=n(Rm);_9r=r(dQ,`Note:
Loading a model from its configuration file does `),qFe=s(dQ,"STRONG",{});var rCt=n(qFe);b9r=r(rCt,"not"),rCt.forEach(t),v9r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OFe=s(dQ,"CODE",{});var tCt=n(OFe);T9r=r(tCt,"from_pretrained()"),tCt.forEach(t),F9r=r(dQ,"to load the model weights."),dQ.forEach(t),C9r=i(Pi),GFe=s(Pi,"P",{});var aCt=n(GFe);M9r=r(aCt,"Examples:"),aCt.forEach(t),E9r=i(Pi),f(D8.$$.fragment,Pi),Pi.forEach(t),y9r=i(Si),Do=s(Si,"DIV",{class:!0});var Da=n(Do);f(N8.$$.fragment,Da),w9r=i(Da),XFe=s(Da,"P",{});var sCt=n(XFe);A9r=r(sCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sCt.forEach(t),L9r=i(Da),Ns=s(Da,"P",{});var V5=n(Ns);B9r=r(V5,"The model class to instantiate is selected based on the "),VFe=s(V5,"CODE",{});var nCt=n(VFe);x9r=r(nCt,"model_type"),nCt.forEach(t),k9r=r(V5,` property of the config object (either
passed as an argument or loaded from `),zFe=s(V5,"CODE",{});var lCt=n(zFe);R9r=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),S9r=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=s(V5,"CODE",{});var iCt=n(WFe);P9r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),$9r=r(V5,":"),V5.forEach(t),I9r=i(Da),QFe=s(Da,"UL",{});var dCt=n(QFe);V3=s(dCt,"LI",{});var YBe=n(V3);HFe=s(YBe,"STRONG",{});var cCt=n(HFe);j9r=r(cCt,"vision-encoder-decoder"),cCt.forEach(t),D9r=r(YBe," \u2014 "),_z=s(YBe,"A",{href:!0});var mCt=n(_z);N9r=r(mCt,"FlaxVisionEncoderDecoderModel"),mCt.forEach(t),q9r=r(YBe," (Vision Encoder decoder model)"),YBe.forEach(t),dCt.forEach(t),O9r=i(Da),UFe=s(Da,"P",{});var fCt=n(UFe);G9r=r(fCt,"Examples:"),fCt.forEach(t),X9r=i(Da),f(q8.$$.fragment,Da),Da.forEach(t),Si.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(FCt)),c(ge,"id","auto-classes"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#auto-classes"),c(de,"class","relative group"),c(qs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig"),c(Gs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),c(Xs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),c(Gi,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(Dm,"id","extending-the-auto-classes"),c(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dm,"href","#extending-the-auto-classes"),c(Xi,"class","relative group"),c(qm,"id","transformers.AutoConfig"),c(qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qm,"href","#transformers.AutoConfig"),c(Vi,"class","relative group"),c(V7,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(z7,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig"),c(W7,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartConfig"),c(Q7,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig"),c(H7,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertConfig"),c(U7,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(J7,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Y7,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(K7,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Z7,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(e9,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig"),c(o9,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig"),c(r9,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig"),c(t9,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig"),c(a9,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig"),c(s9,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig"),c(n9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(l9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(i9,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig"),c(d9,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(c9,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig"),c(m9,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig"),c(f9,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),c(g9,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig"),c(h9,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig"),c(u9,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(p9,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig"),c(_9,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig"),c(b9,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig"),c(v9,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig"),c(T9,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config"),c(F9,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(C9,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig"),c(M9,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig"),c(E9,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig"),c(y9,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(w9,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(A9,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(L9,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDConfig"),c(B9,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig"),c(x9,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig"),c(k9,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig"),c(R9,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config"),c(S9,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig"),c(P9,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($9,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig"),c(I9,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(j9,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(D9,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig"),c(N9,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config"),c(q9,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(O9,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(G9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig"),c(X9,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig"),c(V9,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig"),c(z9,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(W9,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Q9,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(H9,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagConfig"),c(U9,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmConfig"),c(J9,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig"),c(Y9,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig"),c(K9,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig"),c(Z9,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig"),c(eB,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig"),c(oB,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig"),c(rB,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig"),c(tB,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig"),c(aB,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(sB,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(nB,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(lB,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig"),c(iB,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(dB,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig"),c(cB,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Config"),c(mB,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig"),c(fB,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(gB,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"),c(hB,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(uB,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(pB,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig"),c(_B,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(bB,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(vB,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(TB,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig"),c(FB,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(CB,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(MB,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig"),c(EB,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig"),c(yB,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig"),c(wB,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(AB,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(LB,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(BB,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig"),c(xB,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(Lg,"class","docstring"),c(Wo,"class","docstring"),c(Bg,"id","transformers.AutoTokenizer"),c(Bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bg,"href","#transformers.AutoTokenizer"),c(Wi,"class","relative group"),c(kB,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(RB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizer"),c(SB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(PB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),c($B,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizerFast"),c(IB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizer"),c(jB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(DB,"href","/docs/transformers/master/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(NB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(qB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(OB,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GB,"href","/docs/transformers/master/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(XB,"href","/docs/transformers/master/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(zB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(WB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(UB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(JB,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(YB,"href","/docs/transformers/master/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KB,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZB,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ex,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineTokenizer"),c(ox,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizer"),c(rx,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tx,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(ax,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sx,"href","/docs/transformers/master/en/model_doc/cpm#transformers.CpmTokenizer"),c(nx,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lx,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ix,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dx,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(fx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hx,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizer"),c(ux,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(px,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(_x,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizer"),c(bx,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vx,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Tx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Fx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Cx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Mx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Ex,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wx,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Ax,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Lx,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Bx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Rx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Sx,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Px,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($x,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Ix,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizer"),c(Dx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizerFast"),c(Nx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizer"),c(qx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Ox,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeTokenizer"),c(Gx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Xx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Vx,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zx,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianTokenizer"),c(Wx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizer"),c(Qx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Hx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Ux,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Jx,"href","/docs/transformers/master/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Yx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Kx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Zx,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ek,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ok,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Tokenizer"),c(rk,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5TokenizerFast"),c(tk,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ak,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(lk,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ik,"href","/docs/transformers/master/en/model_doc/phobert#transformers.PhobertTokenizer"),c(dk,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ck,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(fk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(gk,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagTokenizer"),c(hk,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizer"),c(uk,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizerFast"),c(pk,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_k,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(bk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizer"),c(vk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Tk,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Fk,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Ck,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Mk,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Ek,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(yk,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wk,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Ak,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Lk,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Bk,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(kk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Rk,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Tokenizer"),c(Sk,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5TokenizerFast"),c(Pk,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasTokenizer"),c($k,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Ik,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jk,"href","/docs/transformers/master/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Dk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qk,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMTokenizer"),c(Ok,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Gk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Xk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Vk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(sh,"class","docstring"),c(Qo,"class","docstring"),c(nh,"id","transformers.AutoFeatureExtractor"),c(nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nh,"href","#transformers.AutoFeatureExtractor"),c(Qi,"class","relative group"),c(Wk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Qk,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Hk,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Uk,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Jk,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Yk,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Kk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Zk,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(eR,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(oR,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rR,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tR,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(sR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(Eh,"class","docstring"),c(Ho,"class","docstring"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(Hi,"class","relative group"),c(dR,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPProcessor"),c(mR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(fR,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hR,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(uR,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),c(pR,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(_R,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c($h,"class","docstring"),c(Uo,"class","docstring"),c(Ih,"id","transformers.AutoModel"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoModel"),c(Ji,"class","relative group"),c(Vr,"class","docstring"),c(bR,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel"),c(vR,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartModel"),c(TR,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitModel"),c(FR,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(CR,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(MR,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel"),c(ER,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(yR,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wR,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(AR,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel"),c(LR,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineModel"),c(BR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel"),c(xR,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel"),c(kR,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel"),c(RR,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel"),c(SR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(PR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel"),c($R,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel"),c(IR,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(jR,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel"),c(DR,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrModel"),c(NR,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel"),c(qR,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(OR,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel"),c(GR,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel"),c(XR,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel"),c(VR,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel"),c(zR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel"),c(WR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel"),c(QR,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model"),c(HR,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(UR,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel"),c(JR,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel"),c(YR,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel"),c(KR,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(ZR,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(eS,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(oS,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDModel"),c(rS,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel"),c(tS,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeModel"),c(aS,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel"),c(sS,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model"),c(nS,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianModel"),c(lS,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel"),c(iS,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel"),c(dS,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cS,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel"),c(mS,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel"),c(fS,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model"),c(gS,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uS,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel"),c(pS,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel"),c(_S,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel"),c(bS,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel"),c(vS,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(TS,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel"),c(FS,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel"),c(CS,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel"),c(MS,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(ES,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel"),c(yS,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel"),c(wS,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel"),c(AS,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWModel"),c(LS,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel"),c(BS,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xS,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel"),c(kS,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(RS,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinModel"),c(SS,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Model"),c(PS,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel"),c($S,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(IS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jS,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(DS,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel"),c(NS,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(qS,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel"),c(OS,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTModel"),c(GS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(XS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(VS,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel"),c(zS,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel"),c(WS,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel"),c(QS,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(HS,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(US,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(JS,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel"),c(YS,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(pp,"id","transformers.AutoModelForPreTraining"),c(pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pp,"href","#transformers.AutoModelForPreTraining"),c(Zi,"class","relative group"),c(zr,"class","docstring"),c(KS,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining"),c(ZS,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining"),c(oP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(rP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sP,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nP,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lP,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dP,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cP,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining"),c(mP,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fP,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(gP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hP,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uP,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pP,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_P,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(bP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(vP,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(TP,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FP,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CP,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(MP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EP,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(yP,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wP,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AP,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LP,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(BP,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xP,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kP,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(RP,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($P,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(t_,"id","transformers.AutoModelForCausalLM"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForCausalLM"),c(rd,"class","relative group"),c(Wr,"class","docstring"),c(jP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM"),c(DP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel"),c(NP,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(qP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OP,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(GP,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XP,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(VP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(zP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(WP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(QP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM"),c(HP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(UP,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(JP,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(YP,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM"),c(KP,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ZP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(e$,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(o$,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(r$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(t$,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(a$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(s$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(n$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(l$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(i$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(d$,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(c$,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(m$,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(f$,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(g$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(h$,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(u$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(p$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_$,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(q_,"id","transformers.AutoModelForMaskedLM"),c(q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q_,"href","#transformers.AutoModelForMaskedLM"),c(sd,"class","relative group"),c(Qr,"class","docstring"),c(b$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(v$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(T$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM"),c(F$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(C$,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(M$,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(E$,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(y$,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(w$,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(A$,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(L$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(B$,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(x$,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(k$,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(R$,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(S$,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(P$,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(I$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(j$,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(D$,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(N$,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(q$,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(O$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(G$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(X$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(V$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(z$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(W$,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Q$,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(H$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(U$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(J$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Y$,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(id,"class","relative group"),c(Hr,"class","docstring"),c(K$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Z$,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eI,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oI,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rI,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tI,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(sI,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nI,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel"),c(lI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iI,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dI,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(mI,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fI,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gI,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(md,"class","relative group"),c(Ur,"class","docstring"),c(hI,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uI,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pI,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_I,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(CI,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MI,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(EI,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yI,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wI,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AI,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(LI,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(BI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(kI,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RI,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SI,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(PI,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($I,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(II,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(NI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(OI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(GI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(XI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(VI,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zI,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HI,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(UI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YI,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KI,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZI,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(ej,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(sj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c($2,"id","transformers.AutoModelForMultipleChoice"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForMultipleChoice"),c(hd,"class","relative group"),c(Jr,"class","docstring"),c(nj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(lj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ij,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(dj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(cj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(gj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uj,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_j,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bj,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vj,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Tj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Fj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Cj,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Mj,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Ej,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yj,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wj,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Aj,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Lj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Bj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Rj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Sj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(mv,"id","transformers.AutoModelForNextSentencePrediction"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForNextSentencePrediction"),c(_d,"class","relative group"),c(Yr,"class","docstring"),c(Pj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($j,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Ij,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Dj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(bv,"id","transformers.AutoModelForTokenClassification"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForTokenClassification"),c(Td,"class","relative group"),c(Kr,"class","docstring"),c(Nj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(qj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification"),c(Oj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Gj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Xj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Vj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(zj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Wj,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Qj,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Hj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Uj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Jj,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Yj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Kj,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Zj,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(aD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(lD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(mD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(fD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uD,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(pD,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(_D,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(Zv,"id","transformers.AutoModelForQuestionAnswering"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForQuestionAnswering"),c(Md,"class","relative group"),c(Zr,"class","docstring"),c(bD,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vD,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(TD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(FD,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CD,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(MD,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(ED,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yD,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(wD,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(AD,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(LD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(BD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(xD,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(RD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(SD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PD,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c($D,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(ID,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jD,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(DD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(ND,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(qD,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(zD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WD,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(QD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(HD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(UD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(JD,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(YD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(KD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(ZD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(eN,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(oN,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(rN,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(sr,"class","docstring"),c(qT,"id","transformers.AutoModelForTableQuestionAnswering"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(wd,"class","relative group"),c(et,"class","docstring"),c(tN,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(nr,"class","docstring"),c(XT,"id","transformers.AutoModelForImageClassification"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(ot,"class","docstring"),c(aN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification"),c(sN,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(nN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification"),c(lN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(iN,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(dN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(cN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(fN,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(gN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(hN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification"),c(uN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(KT,"id","transformers.AutoModelForVision2Seq"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForVision2Seq"),c(Rd,"class","relative group"),c(rt,"class","docstring"),c(pN,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(o1,"id","transformers.AutoModelForAudioClassification"),c(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o1,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(tt,"class","docstring"),c(_N,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(TN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(FN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(MN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(EN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(m1,"id","transformers.AutoModelForAudioFrameClassification"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForAudioFrameClassification"),c(Dd,"class","relative group"),c(at,"class","docstring"),c(yN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(wN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(AN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(LN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(_1,"id","transformers.AutoModelForCTC"),c(_1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_1,"href","#transformers.AutoModelForCTC"),c(Od,"class","relative group"),c(st,"class","docstring"),c(BN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(xN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC"),c(kN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC"),c(RN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC"),c(SN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(PN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c($N,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(IN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(mr,"class","docstring"),c(A1,"id","transformers.AutoModelForSpeechSeq2Seq"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Vd,"class","relative group"),c(nt,"class","docstring"),c(jN,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(DN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(fr,"class","docstring"),c(k1,"id","transformers.AutoModelForAudioXVector"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForAudioXVector"),c(Qd,"class","relative group"),c(lt,"class","docstring"),c(NN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(ON,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(GN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(j1,"id","transformers.AutoModelForMaskedImageModeling"),c(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j1,"href","#transformers.AutoModelForMaskedImageModeling"),c(Jd,"class","relative group"),c(it,"class","docstring"),c(XN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(VN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(G1,"id","transformers.AutoModelForObjectDetection"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForObjectDetection"),c(ec,"class","relative group"),c(dt,"class","docstring"),c(WN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(ur,"class","docstring"),c(z1,"id","transformers.AutoModelForImageSegmentation"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForImageSegmentation"),c(tc,"class","relative group"),c(ct,"class","docstring"),c(QN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(pr,"class","docstring"),c(H1,"id","transformers.AutoModelForSemanticSegmentation"),c(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H1,"href","#transformers.AutoModelForSemanticSegmentation"),c(nc,"class","relative group"),c(mt,"class","docstring"),c(HN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(UN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(_r,"class","docstring"),c(K1,"id","transformers.AutoModelForInstanceSegmentation"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForInstanceSegmentation"),c(dc,"class","relative group"),c(ft,"class","docstring"),c(JN,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(so,"class","docstring"),c(br,"class","docstring"),c(oF,"id","transformers.TFAutoModel"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.TFAutoModel"),c(fc,"class","relative group"),c(gt,"class","docstring"),c(YN,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel"),c(KN,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel"),c(ZN,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel"),c(eq,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(oq,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(rq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel"),c(tq,"href","/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel"),c(aq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel"),c(sq,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel"),c(nq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel"),c(lq,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel"),c(iq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(dq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(cq,"href","/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(mq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel"),c(fq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(gq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel"),c(hq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(uq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model"),c(pq,"href","/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel"),c(_q,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(bq,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel"),c(vq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel"),c(Tq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Fq,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel"),c(Cq,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel"),c(Mq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Eq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel"),c(yq,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model"),c(wq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Aq,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Lq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel"),c(Bq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel"),c(xq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel"),c(kq,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Rq,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model"),c(Sq,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel"),c(Pq,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c($q,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel"),c(Iq,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(jq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel"),c(Dq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Nq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(XF,"id","transformers.TFAutoModelForPreTraining"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.TFAutoModelForPreTraining"),c(uc,"class","relative group"),c(ht,"class","docstring"),c(qq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Oq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Gq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Xq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Vq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Wq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Qq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Hq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Uq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Jq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Yq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Kq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Zq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(lO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(uo,"class","docstring"),c(Tr,"class","docstring"),c(fC,"id","transformers.TFAutoModelForCausalLM"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForCausalLM"),c(bc,"class","relative group"),c(ut,"class","docstring"),c(iO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(dO,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(gO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(hO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_O,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c(MC,"id","transformers.TFAutoModelForImageClassification"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.TFAutoModelForImageClassification"),c(Fc,"class","relative group"),c(pt,"class","docstring"),c(bO,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(vO,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(wC,"id","transformers.TFAutoModelForMaskedLM"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForMaskedLM"),c(Ec,"class","relative group"),c(_t,"class","docstring"),c(TO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(CO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EO,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yO,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xO,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kO,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(RO,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c($O,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(jO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(QC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Ac,"class","relative group"),c(bt,"class","docstring"),c(qO,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OO,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GO,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XO,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VO,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zO,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel"),c(WO,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(QO,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HO,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(aM,"id","transformers.TFAutoModelForSequenceClassification"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForSequenceClassification"),c(xc,"class","relative group"),c(vt,"class","docstring"),c(JO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eG,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(sG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(nG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lG,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(dG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(cG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(fG,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(gG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(hG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(uG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(pG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(_G,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(bG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(vG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(xM,"id","transformers.TFAutoModelForMultipleChoice"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Sc,"class","relative group"),c(Tt,"class","docstring"),c(FG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(MG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(EG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(wG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(AG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(xG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(SG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($G,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(IG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(HM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ic,"class","relative group"),c(Ft,"class","docstring"),c(DG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(JM,"id","transformers.TFAutoModelForTokenClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(Ct,"class","docstring"),c(NG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(qG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(OG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(XG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(zG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(WG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(QG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(HG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(UG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(JG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(YG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(KG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(ZG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(eX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(oX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(rX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(tX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(aX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(_4,"id","transformers.TFAutoModelForQuestionAnswering"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Gc,"class","relative group"),c(Mt,"class","docstring"),c(sX,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(nX,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(lX,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(iX,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(dX,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(cX,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(mX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(fX,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(gX,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(hX,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(uX,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(pX,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(_X,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(bX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(TX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(FX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(j4,"id","transformers.TFAutoModelForVision2Seq"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.TFAutoModelForVision2Seq"),c(zc,"class","relative group"),c(Et,"class","docstring"),c(EX,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(N4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Hc,"class","relative group"),c(yt,"class","docstring"),c(yX,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(O4,"id","transformers.FlaxAutoModel"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.FlaxAutoModel"),c(Yc,"class","relative group"),c(wt,"class","docstring"),c(wX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel"),c(LX,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel"),c(BX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel"),c(xX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(kX,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(RX,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SX,"href","/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel"),c(PX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c($X,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel"),c(IX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DX,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel"),c(qX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel"),c(OX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model"),c(GX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(XX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(zX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model"),c(WX,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(QX,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel"),c(HX,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(UX,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(JX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(gE,"id","transformers.FlaxAutoModelForCausalLM"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.FlaxAutoModelForCausalLM"),c(em,"class","relative group"),c(At,"class","docstring"),c(YX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(KX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(ZX,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(eV,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(bE,"id","transformers.FlaxAutoModelForPreTraining"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.FlaxAutoModelForPreTraining"),c(tm,"class","relative group"),c(Lt,"class","docstring"),c(oV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(rV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(aV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(sV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(iV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mV,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(kE,"id","transformers.FlaxAutoModelForMaskedLM"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(nm,"class","relative group"),c(Bt,"class","docstring"),c(gV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(pV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(_V,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(TV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(FV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(GE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(dm,"class","relative group"),c(xt,"class","docstring"),c(MV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EV,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(yV,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(wV,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(AV,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(LV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xV,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(kV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(KE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(fm,"class","relative group"),c(kt,"class","docstring"),c(RV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(SV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(PV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c($V,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(IV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(jV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(DV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(NV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(OV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(d3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(um,"class","relative group"),c(Rt,"class","docstring"),c(GV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(zV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(QV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(HV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(UV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(JV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(YV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(T3,"id","transformers.FlaxAutoModelForTokenClassification"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(bm,"class","relative group"),c(St,"class","docstring"),c(KV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ez,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(az,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(sz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(B3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Fm,"class","relative group"),c(Pt,"class","docstring"),c(nz,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(lz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(iz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(dz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(cz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(fz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(gz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(D3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Em,"class","relative group"),c($t,"class","docstring"),c(hz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(q3,"id","transformers.FlaxAutoModelForImageClassification"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForImageClassification"),c(Am,"class","relative group"),c(It,"class","docstring"),c(uz,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(pz,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(X3,"id","transformers.FlaxAutoModelForVision2Seq"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xm,"class","relative group"),c(jt,"class","docstring"),c(_z,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,_){e(document.head,J),b(d,Pe,_),b(d,de,_),e(de,ge),e(ge,io),g(me,io,null),e(de,Te),e(de,Vo),e(Vo,Ii),b(d,Pm,_),b(d,ca,_),e(ca,ji),e(ca,Di),e(Di,z5),e(ca,$m),b(d,Le,_),b(d,co,_),e(co,Ni),e(co,qs),e(qs,W5),e(co,Os),e(co,Gs),e(Gs,Q5),e(co,qi),e(co,Xs),e(Xs,H5),e(co,Oi),b(d,Im,_),g(Na,d,_),b(d,mo,_),b(d,he,_),e(he,D7),e(he,Gi),e(Gi,N7),e(he,q7),b(d,zo,_),b(d,qa,_),e(qa,O7),e(qa,jm),e(jm,G7),e(qa,fPe),b(d,KBe,_),b(d,Xi,_),e(Xi,Dm),e(Dm,cQ),g(U5,cQ,null),e(Xi,gPe),e(Xi,mQ),e(mQ,hPe),b(d,ZBe,_),b(d,Vs,_),e(Vs,uPe),e(Vs,fQ),e(fQ,pPe),e(Vs,_Pe),e(Vs,gQ),e(gQ,bPe),e(Vs,vPe),b(d,exe,_),g(J5,d,_),b(d,oxe,_),b(d,X7,_),e(X7,TPe),b(d,rxe,_),g(Nm,d,_),b(d,txe,_),b(d,Vi,_),e(Vi,qm),e(qm,hQ),g(Y5,hQ,null),e(Vi,FPe),e(Vi,uQ),e(uQ,CPe),b(d,axe,_),b(d,Wo,_),g(K5,Wo,null),e(Wo,MPe),e(Wo,Z5),e(Z5,EPe),e(Z5,V7),e(V7,yPe),e(Z5,wPe),e(Wo,APe),e(Wo,ey),e(ey,LPe),e(ey,pQ),e(pQ,BPe),e(ey,xPe),e(Wo,kPe),e(Wo,fo),g(oy,fo,null),e(fo,RPe),e(fo,_Q),e(_Q,SPe),e(fo,PPe),e(fo,zi),e(zi,$Pe),e(zi,bQ),e(bQ,IPe),e(zi,jPe),e(zi,vQ),e(vQ,DPe),e(zi,NPe),e(fo,qPe),e(fo,v),e(v,Om),e(Om,TQ),e(TQ,OPe),e(Om,GPe),e(Om,z7),e(z7,XPe),e(Om,VPe),e(v,zPe),e(v,Gm),e(Gm,FQ),e(FQ,WPe),e(Gm,QPe),e(Gm,W7),e(W7,HPe),e(Gm,UPe),e(v,JPe),e(v,Xm),e(Xm,CQ),e(CQ,YPe),e(Xm,KPe),e(Xm,Q7),e(Q7,ZPe),e(Xm,e$e),e(v,o$e),e(v,Vm),e(Vm,MQ),e(MQ,r$e),e(Vm,t$e),e(Vm,H7),e(H7,a$e),e(Vm,s$e),e(v,n$e),e(v,zm),e(zm,EQ),e(EQ,l$e),e(zm,i$e),e(zm,U7),e(U7,d$e),e(zm,c$e),e(v,m$e),e(v,Wm),e(Wm,yQ),e(yQ,f$e),e(Wm,g$e),e(Wm,J7),e(J7,h$e),e(Wm,u$e),e(v,p$e),e(v,Qm),e(Qm,wQ),e(wQ,_$e),e(Qm,b$e),e(Qm,Y7),e(Y7,v$e),e(Qm,T$e),e(v,F$e),e(v,Hm),e(Hm,AQ),e(AQ,C$e),e(Hm,M$e),e(Hm,K7),e(K7,E$e),e(Hm,y$e),e(v,w$e),e(v,Um),e(Um,LQ),e(LQ,A$e),e(Um,L$e),e(Um,Z7),e(Z7,B$e),e(Um,x$e),e(v,k$e),e(v,Jm),e(Jm,BQ),e(BQ,R$e),e(Jm,S$e),e(Jm,e9),e(e9,P$e),e(Jm,$$e),e(v,I$e),e(v,Ym),e(Ym,xQ),e(xQ,j$e),e(Ym,D$e),e(Ym,o9),e(o9,N$e),e(Ym,q$e),e(v,O$e),e(v,Km),e(Km,kQ),e(kQ,G$e),e(Km,X$e),e(Km,r9),e(r9,V$e),e(Km,z$e),e(v,W$e),e(v,Zm),e(Zm,RQ),e(RQ,Q$e),e(Zm,H$e),e(Zm,t9),e(t9,U$e),e(Zm,J$e),e(v,Y$e),e(v,ef),e(ef,SQ),e(SQ,K$e),e(ef,Z$e),e(ef,a9),e(a9,eIe),e(ef,oIe),e(v,rIe),e(v,of),e(of,PQ),e(PQ,tIe),e(of,aIe),e(of,s9),e(s9,sIe),e(of,nIe),e(v,lIe),e(v,rf),e(rf,$Q),e($Q,iIe),e(rf,dIe),e(rf,n9),e(n9,cIe),e(rf,mIe),e(v,fIe),e(v,tf),e(tf,IQ),e(IQ,gIe),e(tf,hIe),e(tf,l9),e(l9,uIe),e(tf,pIe),e(v,_Ie),e(v,af),e(af,jQ),e(jQ,bIe),e(af,vIe),e(af,i9),e(i9,TIe),e(af,FIe),e(v,CIe),e(v,sf),e(sf,DQ),e(DQ,MIe),e(sf,EIe),e(sf,d9),e(d9,yIe),e(sf,wIe),e(v,AIe),e(v,nf),e(nf,NQ),e(NQ,LIe),e(nf,BIe),e(nf,c9),e(c9,xIe),e(nf,kIe),e(v,RIe),e(v,lf),e(lf,qQ),e(qQ,SIe),e(lf,PIe),e(lf,m9),e(m9,$Ie),e(lf,IIe),e(v,jIe),e(v,df),e(df,OQ),e(OQ,DIe),e(df,NIe),e(df,f9),e(f9,qIe),e(df,OIe),e(v,GIe),e(v,cf),e(cf,GQ),e(GQ,XIe),e(cf,VIe),e(cf,g9),e(g9,zIe),e(cf,WIe),e(v,QIe),e(v,mf),e(mf,XQ),e(XQ,HIe),e(mf,UIe),e(mf,h9),e(h9,JIe),e(mf,YIe),e(v,KIe),e(v,ff),e(ff,VQ),e(VQ,ZIe),e(ff,eje),e(ff,u9),e(u9,oje),e(ff,rje),e(v,tje),e(v,gf),e(gf,zQ),e(zQ,aje),e(gf,sje),e(gf,p9),e(p9,nje),e(gf,lje),e(v,ije),e(v,hf),e(hf,WQ),e(WQ,dje),e(hf,cje),e(hf,_9),e(_9,mje),e(hf,fje),e(v,gje),e(v,uf),e(uf,QQ),e(QQ,hje),e(uf,uje),e(uf,b9),e(b9,pje),e(uf,_je),e(v,bje),e(v,pf),e(pf,HQ),e(HQ,vje),e(pf,Tje),e(pf,v9),e(v9,Fje),e(pf,Cje),e(v,Mje),e(v,_f),e(_f,UQ),e(UQ,Eje),e(_f,yje),e(_f,T9),e(T9,wje),e(_f,Aje),e(v,Lje),e(v,bf),e(bf,JQ),e(JQ,Bje),e(bf,xje),e(bf,F9),e(F9,kje),e(bf,Rje),e(v,Sje),e(v,vf),e(vf,YQ),e(YQ,Pje),e(vf,$je),e(vf,C9),e(C9,Ije),e(vf,jje),e(v,Dje),e(v,Tf),e(Tf,KQ),e(KQ,Nje),e(Tf,qje),e(Tf,M9),e(M9,Oje),e(Tf,Gje),e(v,Xje),e(v,Ff),e(Ff,ZQ),e(ZQ,Vje),e(Ff,zje),e(Ff,E9),e(E9,Wje),e(Ff,Qje),e(v,Hje),e(v,Cf),e(Cf,eH),e(eH,Uje),e(Cf,Jje),e(Cf,y9),e(y9,Yje),e(Cf,Kje),e(v,Zje),e(v,Mf),e(Mf,oH),e(oH,eDe),e(Mf,oDe),e(Mf,w9),e(w9,rDe),e(Mf,tDe),e(v,aDe),e(v,Ef),e(Ef,rH),e(rH,sDe),e(Ef,nDe),e(Ef,A9),e(A9,lDe),e(Ef,iDe),e(v,dDe),e(v,yf),e(yf,tH),e(tH,cDe),e(yf,mDe),e(yf,L9),e(L9,fDe),e(yf,gDe),e(v,hDe),e(v,wf),e(wf,aH),e(aH,uDe),e(wf,pDe),e(wf,B9),e(B9,_De),e(wf,bDe),e(v,vDe),e(v,Af),e(Af,sH),e(sH,TDe),e(Af,FDe),e(Af,x9),e(x9,CDe),e(Af,MDe),e(v,EDe),e(v,Lf),e(Lf,nH),e(nH,yDe),e(Lf,wDe),e(Lf,k9),e(k9,ADe),e(Lf,LDe),e(v,BDe),e(v,Bf),e(Bf,lH),e(lH,xDe),e(Bf,kDe),e(Bf,R9),e(R9,RDe),e(Bf,SDe),e(v,PDe),e(v,xf),e(xf,iH),e(iH,$De),e(xf,IDe),e(xf,S9),e(S9,jDe),e(xf,DDe),e(v,NDe),e(v,kf),e(kf,dH),e(dH,qDe),e(kf,ODe),e(kf,P9),e(P9,GDe),e(kf,XDe),e(v,VDe),e(v,Rf),e(Rf,cH),e(cH,zDe),e(Rf,WDe),e(Rf,$9),e($9,QDe),e(Rf,HDe),e(v,UDe),e(v,Sf),e(Sf,mH),e(mH,JDe),e(Sf,YDe),e(Sf,I9),e(I9,KDe),e(Sf,ZDe),e(v,eNe),e(v,Pf),e(Pf,fH),e(fH,oNe),e(Pf,rNe),e(Pf,j9),e(j9,tNe),e(Pf,aNe),e(v,sNe),e(v,$f),e($f,gH),e(gH,nNe),e($f,lNe),e($f,D9),e(D9,iNe),e($f,dNe),e(v,cNe),e(v,If),e(If,hH),e(hH,mNe),e(If,fNe),e(If,N9),e(N9,gNe),e(If,hNe),e(v,uNe),e(v,jf),e(jf,uH),e(uH,pNe),e(jf,_Ne),e(jf,q9),e(q9,bNe),e(jf,vNe),e(v,TNe),e(v,Df),e(Df,pH),e(pH,FNe),e(Df,CNe),e(Df,O9),e(O9,MNe),e(Df,ENe),e(v,yNe),e(v,Nf),e(Nf,_H),e(_H,wNe),e(Nf,ANe),e(Nf,G9),e(G9,LNe),e(Nf,BNe),e(v,xNe),e(v,qf),e(qf,bH),e(bH,kNe),e(qf,RNe),e(qf,X9),e(X9,SNe),e(qf,PNe),e(v,$Ne),e(v,Of),e(Of,vH),e(vH,INe),e(Of,jNe),e(Of,V9),e(V9,DNe),e(Of,NNe),e(v,qNe),e(v,Gf),e(Gf,TH),e(TH,ONe),e(Gf,GNe),e(Gf,z9),e(z9,XNe),e(Gf,VNe),e(v,zNe),e(v,Xf),e(Xf,FH),e(FH,WNe),e(Xf,QNe),e(Xf,W9),e(W9,HNe),e(Xf,UNe),e(v,JNe),e(v,Vf),e(Vf,CH),e(CH,YNe),e(Vf,KNe),e(Vf,Q9),e(Q9,ZNe),e(Vf,eqe),e(v,oqe),e(v,zf),e(zf,MH),e(MH,rqe),e(zf,tqe),e(zf,H9),e(H9,aqe),e(zf,sqe),e(v,nqe),e(v,Wf),e(Wf,EH),e(EH,lqe),e(Wf,iqe),e(Wf,U9),e(U9,dqe),e(Wf,cqe),e(v,mqe),e(v,Qf),e(Qf,yH),e(yH,fqe),e(Qf,gqe),e(Qf,J9),e(J9,hqe),e(Qf,uqe),e(v,pqe),e(v,Hf),e(Hf,wH),e(wH,_qe),e(Hf,bqe),e(Hf,Y9),e(Y9,vqe),e(Hf,Tqe),e(v,Fqe),e(v,Uf),e(Uf,AH),e(AH,Cqe),e(Uf,Mqe),e(Uf,K9),e(K9,Eqe),e(Uf,yqe),e(v,wqe),e(v,Jf),e(Jf,LH),e(LH,Aqe),e(Jf,Lqe),e(Jf,Z9),e(Z9,Bqe),e(Jf,xqe),e(v,kqe),e(v,Yf),e(Yf,BH),e(BH,Rqe),e(Yf,Sqe),e(Yf,eB),e(eB,Pqe),e(Yf,$qe),e(v,Iqe),e(v,Kf),e(Kf,xH),e(xH,jqe),e(Kf,Dqe),e(Kf,oB),e(oB,Nqe),e(Kf,qqe),e(v,Oqe),e(v,Zf),e(Zf,kH),e(kH,Gqe),e(Zf,Xqe),e(Zf,rB),e(rB,Vqe),e(Zf,zqe),e(v,Wqe),e(v,eg),e(eg,RH),e(RH,Qqe),e(eg,Hqe),e(eg,tB),e(tB,Uqe),e(eg,Jqe),e(v,Yqe),e(v,og),e(og,SH),e(SH,Kqe),e(og,Zqe),e(og,aB),e(aB,eOe),e(og,oOe),e(v,rOe),e(v,rg),e(rg,PH),e(PH,tOe),e(rg,aOe),e(rg,sB),e(sB,sOe),e(rg,nOe),e(v,lOe),e(v,tg),e(tg,$H),e($H,iOe),e(tg,dOe),e(tg,nB),e(nB,cOe),e(tg,mOe),e(v,fOe),e(v,ag),e(ag,IH),e(IH,gOe),e(ag,hOe),e(ag,lB),e(lB,uOe),e(ag,pOe),e(v,_Oe),e(v,sg),e(sg,jH),e(jH,bOe),e(sg,vOe),e(sg,iB),e(iB,TOe),e(sg,FOe),e(v,COe),e(v,ng),e(ng,DH),e(DH,MOe),e(ng,EOe),e(ng,dB),e(dB,yOe),e(ng,wOe),e(v,AOe),e(v,lg),e(lg,NH),e(NH,LOe),e(lg,BOe),e(lg,cB),e(cB,xOe),e(lg,kOe),e(v,ROe),e(v,ig),e(ig,qH),e(qH,SOe),e(ig,POe),e(ig,mB),e(mB,$Oe),e(ig,IOe),e(v,jOe),e(v,dg),e(dg,OH),e(OH,DOe),e(dg,NOe),e(dg,fB),e(fB,qOe),e(dg,OOe),e(v,GOe),e(v,cg),e(cg,GH),e(GH,XOe),e(cg,VOe),e(cg,gB),e(gB,zOe),e(cg,WOe),e(v,QOe),e(v,mg),e(mg,XH),e(XH,HOe),e(mg,UOe),e(mg,hB),e(hB,JOe),e(mg,YOe),e(v,KOe),e(v,fg),e(fg,VH),e(VH,ZOe),e(fg,eGe),e(fg,uB),e(uB,oGe),e(fg,rGe),e(v,tGe),e(v,gg),e(gg,zH),e(zH,aGe),e(gg,sGe),e(gg,pB),e(pB,nGe),e(gg,lGe),e(v,iGe),e(v,hg),e(hg,WH),e(WH,dGe),e(hg,cGe),e(hg,_B),e(_B,mGe),e(hg,fGe),e(v,gGe),e(v,ug),e(ug,QH),e(QH,hGe),e(ug,uGe),e(ug,bB),e(bB,pGe),e(ug,_Ge),e(v,bGe),e(v,pg),e(pg,HH),e(HH,vGe),e(pg,TGe),e(pg,vB),e(vB,FGe),e(pg,CGe),e(v,MGe),e(v,_g),e(_g,UH),e(UH,EGe),e(_g,yGe),e(_g,TB),e(TB,wGe),e(_g,AGe),e(v,LGe),e(v,bg),e(bg,JH),e(JH,BGe),e(bg,xGe),e(bg,FB),e(FB,kGe),e(bg,RGe),e(v,SGe),e(v,vg),e(vg,YH),e(YH,PGe),e(vg,$Ge),e(vg,CB),e(CB,IGe),e(vg,jGe),e(v,DGe),e(v,Tg),e(Tg,KH),e(KH,NGe),e(Tg,qGe),e(Tg,MB),e(MB,OGe),e(Tg,GGe),e(v,XGe),e(v,Fg),e(Fg,ZH),e(ZH,VGe),e(Fg,zGe),e(Fg,EB),e(EB,WGe),e(Fg,QGe),e(v,HGe),e(v,Cg),e(Cg,eU),e(eU,UGe),e(Cg,JGe),e(Cg,yB),e(yB,YGe),e(Cg,KGe),e(v,ZGe),e(v,Mg),e(Mg,oU),e(oU,eXe),e(Mg,oXe),e(Mg,wB),e(wB,rXe),e(Mg,tXe),e(v,aXe),e(v,Eg),e(Eg,rU),e(rU,sXe),e(Eg,nXe),e(Eg,AB),e(AB,lXe),e(Eg,iXe),e(v,dXe),e(v,yg),e(yg,tU),e(tU,cXe),e(yg,mXe),e(yg,LB),e(LB,fXe),e(yg,gXe),e(v,hXe),e(v,wg),e(wg,aU),e(aU,uXe),e(wg,pXe),e(wg,BB),e(BB,_Xe),e(wg,bXe),e(v,vXe),e(v,Ag),e(Ag,sU),e(sU,TXe),e(Ag,FXe),e(Ag,xB),e(xB,CXe),e(Ag,MXe),e(fo,EXe),e(fo,nU),e(nU,yXe),e(fo,wXe),g(ry,fo,null),e(Wo,AXe),e(Wo,Lg),g(ty,Lg,null),e(Lg,LXe),e(Lg,lU),e(lU,BXe),b(d,sxe,_),b(d,Wi,_),e(Wi,Bg),e(Bg,iU),g(ay,iU,null),e(Wi,xXe),e(Wi,dU),e(dU,kXe),b(d,nxe,_),b(d,Qo,_),g(sy,Qo,null),e(Qo,RXe),e(Qo,ny),e(ny,SXe),e(ny,kB),e(kB,PXe),e(ny,$Xe),e(Qo,IXe),e(Qo,ly),e(ly,jXe),e(ly,cU),e(cU,DXe),e(ly,NXe),e(Qo,qXe),e(Qo,go),g(iy,go,null),e(go,OXe),e(go,mU),e(mU,GXe),e(go,XXe),e(go,Oa),e(Oa,VXe),e(Oa,fU),e(fU,zXe),e(Oa,WXe),e(Oa,gU),e(gU,QXe),e(Oa,HXe),e(Oa,hU),e(hU,UXe),e(Oa,JXe),e(go,YXe),e(go,E),e(E,zs),e(zs,uU),e(uU,KXe),e(zs,ZXe),e(zs,RB),e(RB,eVe),e(zs,oVe),e(zs,SB),e(SB,rVe),e(zs,tVe),e(E,aVe),e(E,Ws),e(Ws,pU),e(pU,sVe),e(Ws,nVe),e(Ws,PB),e(PB,lVe),e(Ws,iVe),e(Ws,$B),e($B,dVe),e(Ws,cVe),e(E,mVe),e(E,Qs),e(Qs,_U),e(_U,fVe),e(Qs,gVe),e(Qs,IB),e(IB,hVe),e(Qs,uVe),e(Qs,jB),e(jB,pVe),e(Qs,_Ve),e(E,bVe),e(E,xg),e(xg,bU),e(bU,vVe),e(xg,TVe),e(xg,DB),e(DB,FVe),e(xg,CVe),e(E,MVe),e(E,Hs),e(Hs,vU),e(vU,EVe),e(Hs,yVe),e(Hs,NB),e(NB,wVe),e(Hs,AVe),e(Hs,qB),e(qB,LVe),e(Hs,BVe),e(E,xVe),e(E,kg),e(kg,TU),e(TU,kVe),e(kg,RVe),e(kg,OB),e(OB,SVe),e(kg,PVe),e(E,$Ve),e(E,Rg),e(Rg,FU),e(FU,IVe),e(Rg,jVe),e(Rg,GB),e(GB,DVe),e(Rg,NVe),e(E,qVe),e(E,Sg),e(Sg,CU),e(CU,OVe),e(Sg,GVe),e(Sg,XB),e(XB,XVe),e(Sg,VVe),e(E,zVe),e(E,Us),e(Us,MU),e(MU,WVe),e(Us,QVe),e(Us,VB),e(VB,HVe),e(Us,UVe),e(Us,zB),e(zB,JVe),e(Us,YVe),e(E,KVe),e(E,Js),e(Js,EU),e(EU,ZVe),e(Js,eze),e(Js,WB),e(WB,oze),e(Js,rze),e(Js,QB),e(QB,tze),e(Js,aze),e(E,sze),e(E,Ys),e(Ys,yU),e(yU,nze),e(Ys,lze),e(Ys,HB),e(HB,ize),e(Ys,dze),e(Ys,UB),e(UB,cze),e(Ys,mze),e(E,fze),e(E,Pg),e(Pg,wU),e(wU,gze),e(Pg,hze),e(Pg,JB),e(JB,uze),e(Pg,pze),e(E,_ze),e(E,$g),e($g,AU),e(AU,bze),e($g,vze),e($g,YB),e(YB,Tze),e($g,Fze),e(E,Cze),e(E,Ks),e(Ks,LU),e(LU,Mze),e(Ks,Eze),e(Ks,KB),e(KB,yze),e(Ks,wze),e(Ks,ZB),e(ZB,Aze),e(Ks,Lze),e(E,Bze),e(E,Ig),e(Ig,BU),e(BU,xze),e(Ig,kze),e(Ig,ex),e(ex,Rze),e(Ig,Sze),e(E,Pze),e(E,Zs),e(Zs,xU),e(xU,$ze),e(Zs,Ize),e(Zs,ox),e(ox,jze),e(Zs,Dze),e(Zs,rx),e(rx,Nze),e(Zs,qze),e(E,Oze),e(E,en),e(en,kU),e(kU,Gze),e(en,Xze),e(en,tx),e(tx,Vze),e(en,zze),e(en,ax),e(ax,Wze),e(en,Qze),e(E,Hze),e(E,on),e(on,RU),e(RU,Uze),e(on,Jze),e(on,sx),e(sx,Yze),e(on,Kze),e(on,SU),e(SU,Zze),e(on,eWe),e(E,oWe),e(E,jg),e(jg,PU),e(PU,rWe),e(jg,tWe),e(jg,nx),e(nx,aWe),e(jg,sWe),e(E,nWe),e(E,rn),e(rn,$U),e($U,lWe),e(rn,iWe),e(rn,lx),e(lx,dWe),e(rn,cWe),e(rn,ix),e(ix,mWe),e(rn,fWe),e(E,gWe),e(E,Dg),e(Dg,IU),e(IU,hWe),e(Dg,uWe),e(Dg,dx),e(dx,pWe),e(Dg,_We),e(E,bWe),e(E,tn),e(tn,jU),e(jU,vWe),e(tn,TWe),e(tn,cx),e(cx,FWe),e(tn,CWe),e(tn,mx),e(mx,MWe),e(tn,EWe),e(E,yWe),e(E,an),e(an,DU),e(DU,wWe),e(an,AWe),e(an,fx),e(fx,LWe),e(an,BWe),e(an,gx),e(gx,xWe),e(an,kWe),e(E,RWe),e(E,sn),e(sn,NU),e(NU,SWe),e(sn,PWe),e(sn,hx),e(hx,$We),e(sn,IWe),e(sn,ux),e(ux,jWe),e(sn,DWe),e(E,NWe),e(E,Ng),e(Ng,qU),e(qU,qWe),e(Ng,OWe),e(Ng,px),e(px,GWe),e(Ng,XWe),e(E,VWe),e(E,nn),e(nn,OU),e(OU,zWe),e(nn,WWe),e(nn,_x),e(_x,QWe),e(nn,HWe),e(nn,bx),e(bx,UWe),e(nn,JWe),e(E,YWe),e(E,qg),e(qg,GU),e(GU,KWe),e(qg,ZWe),e(qg,vx),e(vx,eQe),e(qg,oQe),e(E,rQe),e(E,ln),e(ln,XU),e(XU,tQe),e(ln,aQe),e(ln,Tx),e(Tx,sQe),e(ln,nQe),e(ln,Fx),e(Fx,lQe),e(ln,iQe),e(E,dQe),e(E,dn),e(dn,VU),e(VU,cQe),e(dn,mQe),e(dn,Cx),e(Cx,fQe),e(dn,gQe),e(dn,Mx),e(Mx,hQe),e(dn,uQe),e(E,pQe),e(E,cn),e(cn,zU),e(zU,_Qe),e(cn,bQe),e(cn,Ex),e(Ex,vQe),e(cn,TQe),e(cn,yx),e(yx,FQe),e(cn,CQe),e(E,MQe),e(E,mn),e(mn,WU),e(WU,EQe),e(mn,yQe),e(mn,wx),e(wx,wQe),e(mn,AQe),e(mn,Ax),e(Ax,LQe),e(mn,BQe),e(E,xQe),e(E,Og),e(Og,QU),e(QU,kQe),e(Og,RQe),e(Og,Lx),e(Lx,SQe),e(Og,PQe),e(E,$Qe),e(E,fn),e(fn,HU),e(HU,IQe),e(fn,jQe),e(fn,Bx),e(Bx,DQe),e(fn,NQe),e(fn,xx),e(xx,qQe),e(fn,OQe),e(E,GQe),e(E,gn),e(gn,UU),e(UU,XQe),e(gn,VQe),e(gn,kx),e(kx,zQe),e(gn,WQe),e(gn,Rx),e(Rx,QQe),e(gn,HQe),e(E,UQe),e(E,hn),e(hn,JU),e(JU,JQe),e(hn,YQe),e(hn,Sx),e(Sx,KQe),e(hn,ZQe),e(hn,Px),e(Px,eHe),e(hn,oHe),e(E,rHe),e(E,un),e(un,YU),e(YU,tHe),e(un,aHe),e(un,$x),e($x,sHe),e(un,nHe),e(un,Ix),e(Ix,lHe),e(un,iHe),e(E,dHe),e(E,pn),e(pn,KU),e(KU,cHe),e(pn,mHe),e(pn,jx),e(jx,fHe),e(pn,gHe),e(pn,Dx),e(Dx,hHe),e(pn,uHe),e(E,pHe),e(E,_n),e(_n,ZU),e(ZU,_He),e(_n,bHe),e(_n,Nx),e(Nx,vHe),e(_n,THe),e(_n,qx),e(qx,FHe),e(_n,CHe),e(E,MHe),e(E,Gg),e(Gg,eJ),e(eJ,EHe),e(Gg,yHe),e(Gg,Ox),e(Ox,wHe),e(Gg,AHe),e(E,LHe),e(E,bn),e(bn,oJ),e(oJ,BHe),e(bn,xHe),e(bn,Gx),e(Gx,kHe),e(bn,RHe),e(bn,Xx),e(Xx,SHe),e(bn,PHe),e(E,$He),e(E,Xg),e(Xg,rJ),e(rJ,IHe),e(Xg,jHe),e(Xg,Vx),e(Vx,DHe),e(Xg,NHe),e(E,qHe),e(E,Vg),e(Vg,tJ),e(tJ,OHe),e(Vg,GHe),e(Vg,zx),e(zx,XHe),e(Vg,VHe),e(E,zHe),e(E,vn),e(vn,aJ),e(aJ,WHe),e(vn,QHe),e(vn,Wx),e(Wx,HHe),e(vn,UHe),e(vn,Qx),e(Qx,JHe),e(vn,YHe),e(E,KHe),e(E,Tn),e(Tn,sJ),e(sJ,ZHe),e(Tn,eUe),e(Tn,Hx),e(Hx,oUe),e(Tn,rUe),e(Tn,Ux),e(Ux,tUe),e(Tn,aUe),e(E,sUe),e(E,zg),e(zg,nJ),e(nJ,nUe),e(zg,lUe),e(zg,Jx),e(Jx,iUe),e(zg,dUe),e(E,cUe),e(E,Fn),e(Fn,lJ),e(lJ,mUe),e(Fn,fUe),e(Fn,Yx),e(Yx,gUe),e(Fn,hUe),e(Fn,Kx),e(Kx,uUe),e(Fn,pUe),e(E,_Ue),e(E,Cn),e(Cn,iJ),e(iJ,bUe),e(Cn,vUe),e(Cn,Zx),e(Zx,TUe),e(Cn,FUe),e(Cn,ek),e(ek,CUe),e(Cn,MUe),e(E,EUe),e(E,Mn),e(Mn,dJ),e(dJ,yUe),e(Mn,wUe),e(Mn,ok),e(ok,AUe),e(Mn,LUe),e(Mn,rk),e(rk,BUe),e(Mn,xUe),e(E,kUe),e(E,En),e(En,cJ),e(cJ,RUe),e(En,SUe),e(En,tk),e(tk,PUe),e(En,$Ue),e(En,ak),e(ak,IUe),e(En,jUe),e(E,DUe),e(E,yn),e(yn,mJ),e(mJ,NUe),e(yn,qUe),e(yn,sk),e(sk,OUe),e(yn,GUe),e(yn,nk),e(nk,XUe),e(yn,VUe),e(E,zUe),e(E,Wg),e(Wg,fJ),e(fJ,WUe),e(Wg,QUe),e(Wg,lk),e(lk,HUe),e(Wg,UUe),e(E,JUe),e(E,Qg),e(Qg,gJ),e(gJ,YUe),e(Qg,KUe),e(Qg,ik),e(ik,ZUe),e(Qg,eJe),e(E,oJe),e(E,Hg),e(Hg,hJ),e(hJ,rJe),e(Hg,tJe),e(Hg,dk),e(dk,aJe),e(Hg,sJe),e(E,nJe),e(E,Ug),e(Ug,uJ),e(uJ,lJe),e(Ug,iJe),e(Ug,ck),e(ck,dJe),e(Ug,cJe),e(E,mJe),e(E,wn),e(wn,pJ),e(pJ,fJe),e(wn,gJe),e(wn,mk),e(mk,hJe),e(wn,uJe),e(wn,fk),e(fk,pJe),e(wn,_Je),e(E,bJe),e(E,Jg),e(Jg,_J),e(_J,vJe),e(Jg,TJe),e(Jg,gk),e(gk,FJe),e(Jg,CJe),e(E,MJe),e(E,An),e(An,bJ),e(bJ,EJe),e(An,yJe),e(An,hk),e(hk,wJe),e(An,AJe),e(An,uk),e(uk,LJe),e(An,BJe),e(E,xJe),e(E,Ln),e(Ln,vJ),e(vJ,kJe),e(Ln,RJe),e(Ln,pk),e(pk,SJe),e(Ln,PJe),e(Ln,_k),e(_k,$Je),e(Ln,IJe),e(E,jJe),e(E,Bn),e(Bn,TJ),e(TJ,DJe),e(Bn,NJe),e(Bn,bk),e(bk,qJe),e(Bn,OJe),e(Bn,vk),e(vk,GJe),e(Bn,XJe),e(E,VJe),e(E,xn),e(xn,FJ),e(FJ,zJe),e(xn,WJe),e(xn,Tk),e(Tk,QJe),e(xn,HJe),e(xn,Fk),e(Fk,UJe),e(xn,JJe),e(E,YJe),e(E,kn),e(kn,CJ),e(CJ,KJe),e(kn,ZJe),e(kn,Ck),e(Ck,eYe),e(kn,oYe),e(kn,Mk),e(Mk,rYe),e(kn,tYe),e(E,aYe),e(E,Rn),e(Rn,MJ),e(MJ,sYe),e(Rn,nYe),e(Rn,Ek),e(Ek,lYe),e(Rn,iYe),e(Rn,yk),e(yk,dYe),e(Rn,cYe),e(E,mYe),e(E,Yg),e(Yg,EJ),e(EJ,fYe),e(Yg,gYe),e(Yg,wk),e(wk,hYe),e(Yg,uYe),e(E,pYe),e(E,Kg),e(Kg,yJ),e(yJ,_Ye),e(Kg,bYe),e(Kg,Ak),e(Ak,vYe),e(Kg,TYe),e(E,FYe),e(E,Sn),e(Sn,wJ),e(wJ,CYe),e(Sn,MYe),e(Sn,Lk),e(Lk,EYe),e(Sn,yYe),e(Sn,Bk),e(Bk,wYe),e(Sn,AYe),e(E,LYe),e(E,Pn),e(Pn,AJ),e(AJ,BYe),e(Pn,xYe),e(Pn,xk),e(xk,kYe),e(Pn,RYe),e(Pn,kk),e(kk,SYe),e(Pn,PYe),e(E,$Ye),e(E,$n),e($n,LJ),e(LJ,IYe),e($n,jYe),e($n,Rk),e(Rk,DYe),e($n,NYe),e($n,Sk),e(Sk,qYe),e($n,OYe),e(E,GYe),e(E,Zg),e(Zg,BJ),e(BJ,XYe),e(Zg,VYe),e(Zg,Pk),e(Pk,zYe),e(Zg,WYe),e(E,QYe),e(E,eh),e(eh,xJ),e(xJ,HYe),e(eh,UYe),e(eh,$k),e($k,JYe),e(eh,YYe),e(E,KYe),e(E,oh),e(oh,kJ),e(kJ,ZYe),e(oh,eKe),e(oh,Ik),e(Ik,oKe),e(oh,rKe),e(E,tKe),e(E,rh),e(rh,RJ),e(RJ,aKe),e(rh,sKe),e(rh,jk),e(jk,nKe),e(rh,lKe),e(E,iKe),e(E,In),e(In,SJ),e(SJ,dKe),e(In,cKe),e(In,Dk),e(Dk,mKe),e(In,fKe),e(In,Nk),e(Nk,gKe),e(In,hKe),e(E,uKe),e(E,th),e(th,PJ),e(PJ,pKe),e(th,_Ke),e(th,qk),e(qk,bKe),e(th,vKe),e(E,TKe),e(E,ah),e(ah,$J),e($J,FKe),e(ah,CKe),e(ah,Ok),e(Ok,MKe),e(ah,EKe),e(E,yKe),e(E,jn),e(jn,IJ),e(IJ,wKe),e(jn,AKe),e(jn,Gk),e(Gk,LKe),e(jn,BKe),e(jn,Xk),e(Xk,xKe),e(jn,kKe),e(E,RKe),e(E,Dn),e(Dn,jJ),e(jJ,SKe),e(Dn,PKe),e(Dn,Vk),e(Vk,$Ke),e(Dn,IKe),e(Dn,zk),e(zk,jKe),e(Dn,DKe),e(go,NKe),e(go,DJ),e(DJ,qKe),e(go,OKe),g(dy,go,null),e(Qo,GKe),e(Qo,sh),g(cy,sh,null),e(sh,XKe),e(sh,NJ),e(NJ,VKe),b(d,lxe,_),b(d,Qi,_),e(Qi,nh),e(nh,qJ),g(my,qJ,null),e(Qi,zKe),e(Qi,OJ),e(OJ,WKe),b(d,ixe,_),b(d,Ho,_),g(fy,Ho,null),e(Ho,QKe),e(Ho,gy),e(gy,HKe),e(gy,Wk),e(Wk,UKe),e(gy,JKe),e(Ho,YKe),e(Ho,hy),e(hy,KKe),e(hy,GJ),e(GJ,ZKe),e(hy,eZe),e(Ho,oZe),e(Ho,$e),g(uy,$e,null),e($e,rZe),e($e,XJ),e(XJ,tZe),e($e,aZe),e($e,Ga),e(Ga,sZe),e(Ga,VJ),e(VJ,nZe),e(Ga,lZe),e(Ga,zJ),e(zJ,iZe),e(Ga,dZe),e(Ga,WJ),e(WJ,cZe),e(Ga,mZe),e($e,fZe),e($e,ae),e(ae,lh),e(lh,QJ),e(QJ,gZe),e(lh,hZe),e(lh,Qk),e(Qk,uZe),e(lh,pZe),e(ae,_Ze),e(ae,ih),e(ih,HJ),e(HJ,bZe),e(ih,vZe),e(ih,Hk),e(Hk,TZe),e(ih,FZe),e(ae,CZe),e(ae,dh),e(dh,UJ),e(UJ,MZe),e(dh,EZe),e(dh,Uk),e(Uk,yZe),e(dh,wZe),e(ae,AZe),e(ae,ch),e(ch,JJ),e(JJ,LZe),e(ch,BZe),e(ch,Jk),e(Jk,xZe),e(ch,kZe),e(ae,RZe),e(ae,mh),e(mh,YJ),e(YJ,SZe),e(mh,PZe),e(mh,Yk),e(Yk,$Ze),e(mh,IZe),e(ae,jZe),e(ae,fh),e(fh,KJ),e(KJ,DZe),e(fh,NZe),e(fh,Kk),e(Kk,qZe),e(fh,OZe),e(ae,GZe),e(ae,gh),e(gh,ZJ),e(ZJ,XZe),e(gh,VZe),e(gh,Zk),e(Zk,zZe),e(gh,WZe),e(ae,QZe),e(ae,hh),e(hh,eY),e(eY,HZe),e(hh,UZe),e(hh,eR),e(eR,JZe),e(hh,YZe),e(ae,KZe),e(ae,uh),e(uh,oY),e(oY,ZZe),e(uh,eeo),e(uh,oR),e(oR,oeo),e(uh,reo),e(ae,teo),e(ae,ph),e(ph,rY),e(rY,aeo),e(ph,seo),e(ph,rR),e(rR,neo),e(ph,leo),e(ae,ieo),e(ae,_h),e(_h,tY),e(tY,deo),e(_h,ceo),e(_h,tR),e(tR,meo),e(_h,feo),e(ae,geo),e(ae,bh),e(bh,aY),e(aY,heo),e(bh,ueo),e(bh,aR),e(aR,peo),e(bh,_eo),e(ae,beo),e(ae,vh),e(vh,sY),e(sY,veo),e(vh,Teo),e(vh,sR),e(sR,Feo),e(vh,Ceo),e(ae,Meo),e(ae,Th),e(Th,nY),e(nY,Eeo),e(Th,yeo),e(Th,nR),e(nR,weo),e(Th,Aeo),e(ae,Leo),e(ae,Fh),e(Fh,lY),e(lY,Beo),e(Fh,xeo),e(Fh,lR),e(lR,keo),e(Fh,Reo),e(ae,Seo),e(ae,Ch),e(Ch,iY),e(iY,Peo),e(Ch,$eo),e(Ch,iR),e(iR,Ieo),e(Ch,jeo),e($e,Deo),g(Mh,$e,null),e($e,Neo),e($e,dY),e(dY,qeo),e($e,Oeo),g(py,$e,null),e(Ho,Geo),e(Ho,Eh),g(_y,Eh,null),e(Eh,Xeo),e(Eh,cY),e(cY,Veo),b(d,dxe,_),b(d,Hi,_),e(Hi,yh),e(yh,mY),g(by,mY,null),e(Hi,zeo),e(Hi,fY),e(fY,Weo),b(d,cxe,_),b(d,Uo,_),g(vy,Uo,null),e(Uo,Qeo),e(Uo,Ty),e(Ty,Heo),e(Ty,dR),e(dR,Ueo),e(Ty,Jeo),e(Uo,Yeo),e(Uo,Fy),e(Fy,Keo),e(Fy,gY),e(gY,Zeo),e(Fy,eoo),e(Uo,ooo),e(Uo,Ie),g(Cy,Ie,null),e(Ie,roo),e(Ie,hY),e(hY,too),e(Ie,aoo),e(Ie,Ui),e(Ui,soo),e(Ui,uY),e(uY,noo),e(Ui,loo),e(Ui,pY),e(pY,ioo),e(Ui,doo),e(Ie,coo),e(Ie,Be),e(Be,wh),e(wh,_Y),e(_Y,moo),e(wh,foo),e(wh,cR),e(cR,goo),e(wh,hoo),e(Be,uoo),e(Be,Ah),e(Ah,bY),e(bY,poo),e(Ah,_oo),e(Ah,mR),e(mR,boo),e(Ah,voo),e(Be,Too),e(Be,Lh),e(Lh,vY),e(vY,Foo),e(Lh,Coo),e(Lh,fR),e(fR,Moo),e(Lh,Eoo),e(Be,yoo),e(Be,Bh),e(Bh,TY),e(TY,woo),e(Bh,Aoo),e(Bh,gR),e(gR,Loo),e(Bh,Boo),e(Be,xoo),e(Be,xh),e(xh,FY),e(FY,koo),e(xh,Roo),e(xh,hR),e(hR,Soo),e(xh,Poo),e(Be,$oo),e(Be,kh),e(kh,CY),e(CY,Ioo),e(kh,joo),e(kh,uR),e(uR,Doo),e(kh,Noo),e(Be,qoo),e(Be,Rh),e(Rh,MY),e(MY,Ooo),e(Rh,Goo),e(Rh,pR),e(pR,Xoo),e(Rh,Voo),e(Be,zoo),e(Be,Sh),e(Sh,EY),e(EY,Woo),e(Sh,Qoo),e(Sh,_R),e(_R,Hoo),e(Sh,Uoo),e(Ie,Joo),g(Ph,Ie,null),e(Ie,Yoo),e(Ie,yY),e(yY,Koo),e(Ie,Zoo),g(My,Ie,null),e(Uo,ero),e(Uo,$h),g(Ey,$h,null),e($h,oro),e($h,wY),e(wY,rro),b(d,mxe,_),b(d,Ji,_),e(Ji,Ih),e(Ih,AY),g(yy,AY,null),e(Ji,tro),e(Ji,LY),e(LY,aro),b(d,fxe,_),b(d,Jo,_),g(wy,Jo,null),e(Jo,sro),e(Jo,Yi),e(Yi,nro),e(Yi,BY),e(BY,lro),e(Yi,iro),e(Yi,xY),e(xY,dro),e(Yi,cro),e(Jo,mro),e(Jo,Ay),e(Ay,fro),e(Ay,kY),e(kY,gro),e(Ay,hro),e(Jo,uro),e(Jo,Vr),g(Ly,Vr,null),e(Vr,pro),e(Vr,RY),e(RY,_ro),e(Vr,bro),e(Vr,Ki),e(Ki,vro),e(Ki,SY),e(SY,Tro),e(Ki,Fro),e(Ki,PY),e(PY,Cro),e(Ki,Mro),e(Vr,Ero),e(Vr,$Y),e($Y,yro),e(Vr,wro),g(By,Vr,null),e(Jo,Aro),e(Jo,je),g(xy,je,null),e(je,Lro),e(je,IY),e(IY,Bro),e(je,xro),e(je,Xa),e(Xa,kro),e(Xa,jY),e(jY,Rro),e(Xa,Sro),e(Xa,DY),e(DY,Pro),e(Xa,$ro),e(Xa,NY),e(NY,Iro),e(Xa,jro),e(je,Dro),e(je,F),e(F,jh),e(jh,qY),e(qY,Nro),e(jh,qro),e(jh,bR),e(bR,Oro),e(jh,Gro),e(F,Xro),e(F,Dh),e(Dh,OY),e(OY,Vro),e(Dh,zro),e(Dh,vR),e(vR,Wro),e(Dh,Qro),e(F,Hro),e(F,Nh),e(Nh,GY),e(GY,Uro),e(Nh,Jro),e(Nh,TR),e(TR,Yro),e(Nh,Kro),e(F,Zro),e(F,qh),e(qh,XY),e(XY,eto),e(qh,oto),e(qh,FR),e(FR,rto),e(qh,tto),e(F,ato),e(F,Oh),e(Oh,VY),e(VY,sto),e(Oh,nto),e(Oh,CR),e(CR,lto),e(Oh,ito),e(F,dto),e(F,Gh),e(Gh,zY),e(zY,cto),e(Gh,mto),e(Gh,MR),e(MR,fto),e(Gh,gto),e(F,hto),e(F,Xh),e(Xh,WY),e(WY,uto),e(Xh,pto),e(Xh,ER),e(ER,_to),e(Xh,bto),e(F,vto),e(F,Vh),e(Vh,QY),e(QY,Tto),e(Vh,Fto),e(Vh,yR),e(yR,Cto),e(Vh,Mto),e(F,Eto),e(F,zh),e(zh,HY),e(HY,yto),e(zh,wto),e(zh,wR),e(wR,Ato),e(zh,Lto),e(F,Bto),e(F,Wh),e(Wh,UY),e(UY,xto),e(Wh,kto),e(Wh,AR),e(AR,Rto),e(Wh,Sto),e(F,Pto),e(F,Qh),e(Qh,JY),e(JY,$to),e(Qh,Ito),e(Qh,LR),e(LR,jto),e(Qh,Dto),e(F,Nto),e(F,Hh),e(Hh,YY),e(YY,qto),e(Hh,Oto),e(Hh,BR),e(BR,Gto),e(Hh,Xto),e(F,Vto),e(F,Uh),e(Uh,KY),e(KY,zto),e(Uh,Wto),e(Uh,xR),e(xR,Qto),e(Uh,Hto),e(F,Uto),e(F,Jh),e(Jh,ZY),e(ZY,Jto),e(Jh,Yto),e(Jh,kR),e(kR,Kto),e(Jh,Zto),e(F,eao),e(F,Yh),e(Yh,eK),e(eK,oao),e(Yh,rao),e(Yh,RR),e(RR,tao),e(Yh,aao),e(F,sao),e(F,Kh),e(Kh,oK),e(oK,nao),e(Kh,lao),e(Kh,SR),e(SR,iao),e(Kh,dao),e(F,cao),e(F,Zh),e(Zh,rK),e(rK,mao),e(Zh,fao),e(Zh,PR),e(PR,gao),e(Zh,hao),e(F,uao),e(F,eu),e(eu,tK),e(tK,pao),e(eu,_ao),e(eu,$R),e($R,bao),e(eu,vao),e(F,Tao),e(F,ou),e(ou,aK),e(aK,Fao),e(ou,Cao),e(ou,IR),e(IR,Mao),e(ou,Eao),e(F,yao),e(F,ru),e(ru,sK),e(sK,wao),e(ru,Aao),e(ru,jR),e(jR,Lao),e(ru,Bao),e(F,xao),e(F,tu),e(tu,nK),e(nK,kao),e(tu,Rao),e(tu,DR),e(DR,Sao),e(tu,Pao),e(F,$ao),e(F,au),e(au,lK),e(lK,Iao),e(au,jao),e(au,NR),e(NR,Dao),e(au,Nao),e(F,qao),e(F,su),e(su,iK),e(iK,Oao),e(su,Gao),e(su,qR),e(qR,Xao),e(su,Vao),e(F,zao),e(F,nu),e(nu,dK),e(dK,Wao),e(nu,Qao),e(nu,OR),e(OR,Hao),e(nu,Uao),e(F,Jao),e(F,lu),e(lu,cK),e(cK,Yao),e(lu,Kao),e(lu,GR),e(GR,Zao),e(lu,eso),e(F,oso),e(F,iu),e(iu,mK),e(mK,rso),e(iu,tso),e(iu,XR),e(XR,aso),e(iu,sso),e(F,nso),e(F,du),e(du,fK),e(fK,lso),e(du,iso),e(du,VR),e(VR,dso),e(du,cso),e(F,mso),e(F,Nn),e(Nn,gK),e(gK,fso),e(Nn,gso),e(Nn,zR),e(zR,hso),e(Nn,uso),e(Nn,WR),e(WR,pso),e(Nn,_so),e(F,bso),e(F,cu),e(cu,hK),e(hK,vso),e(cu,Tso),e(cu,QR),e(QR,Fso),e(cu,Cso),e(F,Mso),e(F,mu),e(mu,uK),e(uK,Eso),e(mu,yso),e(mu,HR),e(HR,wso),e(mu,Aso),e(F,Lso),e(F,fu),e(fu,pK),e(pK,Bso),e(fu,xso),e(fu,UR),e(UR,kso),e(fu,Rso),e(F,Sso),e(F,gu),e(gu,_K),e(_K,Pso),e(gu,$so),e(gu,JR),e(JR,Iso),e(gu,jso),e(F,Dso),e(F,hu),e(hu,bK),e(bK,Nso),e(hu,qso),e(hu,YR),e(YR,Oso),e(hu,Gso),e(F,Xso),e(F,uu),e(uu,vK),e(vK,Vso),e(uu,zso),e(uu,KR),e(KR,Wso),e(uu,Qso),e(F,Hso),e(F,pu),e(pu,TK),e(TK,Uso),e(pu,Jso),e(pu,ZR),e(ZR,Yso),e(pu,Kso),e(F,Zso),e(F,_u),e(_u,FK),e(FK,eno),e(_u,ono),e(_u,eS),e(eS,rno),e(_u,tno),e(F,ano),e(F,bu),e(bu,CK),e(CK,sno),e(bu,nno),e(bu,oS),e(oS,lno),e(bu,ino),e(F,dno),e(F,vu),e(vu,MK),e(MK,cno),e(vu,mno),e(vu,rS),e(rS,fno),e(vu,gno),e(F,hno),e(F,Tu),e(Tu,EK),e(EK,uno),e(Tu,pno),e(Tu,tS),e(tS,_no),e(Tu,bno),e(F,vno),e(F,Fu),e(Fu,yK),e(yK,Tno),e(Fu,Fno),e(Fu,aS),e(aS,Cno),e(Fu,Mno),e(F,Eno),e(F,Cu),e(Cu,wK),e(wK,yno),e(Cu,wno),e(Cu,sS),e(sS,Ano),e(Cu,Lno),e(F,Bno),e(F,Mu),e(Mu,AK),e(AK,xno),e(Mu,kno),e(Mu,nS),e(nS,Rno),e(Mu,Sno),e(F,Pno),e(F,Eu),e(Eu,LK),e(LK,$no),e(Eu,Ino),e(Eu,lS),e(lS,jno),e(Eu,Dno),e(F,Nno),e(F,yu),e(yu,BK),e(BK,qno),e(yu,Ono),e(yu,iS),e(iS,Gno),e(yu,Xno),e(F,Vno),e(F,wu),e(wu,xK),e(xK,zno),e(wu,Wno),e(wu,dS),e(dS,Qno),e(wu,Hno),e(F,Uno),e(F,Au),e(Au,kK),e(kK,Jno),e(Au,Yno),e(Au,cS),e(cS,Kno),e(Au,Zno),e(F,elo),e(F,Lu),e(Lu,RK),e(RK,olo),e(Lu,rlo),e(Lu,mS),e(mS,tlo),e(Lu,alo),e(F,slo),e(F,Bu),e(Bu,SK),e(SK,nlo),e(Bu,llo),e(Bu,fS),e(fS,ilo),e(Bu,dlo),e(F,clo),e(F,xu),e(xu,PK),e(PK,mlo),e(xu,flo),e(xu,gS),e(gS,glo),e(xu,hlo),e(F,ulo),e(F,ku),e(ku,$K),e($K,plo),e(ku,_lo),e(ku,hS),e(hS,blo),e(ku,vlo),e(F,Tlo),e(F,Ru),e(Ru,IK),e(IK,Flo),e(Ru,Clo),e(Ru,uS),e(uS,Mlo),e(Ru,Elo),e(F,ylo),e(F,Su),e(Su,jK),e(jK,wlo),e(Su,Alo),e(Su,pS),e(pS,Llo),e(Su,Blo),e(F,xlo),e(F,Pu),e(Pu,DK),e(DK,klo),e(Pu,Rlo),e(Pu,_S),e(_S,Slo),e(Pu,Plo),e(F,$lo),e(F,$u),e($u,NK),e(NK,Ilo),e($u,jlo),e($u,bS),e(bS,Dlo),e($u,Nlo),e(F,qlo),e(F,Iu),e(Iu,qK),e(qK,Olo),e(Iu,Glo),e(Iu,vS),e(vS,Xlo),e(Iu,Vlo),e(F,zlo),e(F,ju),e(ju,OK),e(OK,Wlo),e(ju,Qlo),e(ju,TS),e(TS,Hlo),e(ju,Ulo),e(F,Jlo),e(F,Du),e(Du,GK),e(GK,Ylo),e(Du,Klo),e(Du,FS),e(FS,Zlo),e(Du,eio),e(F,oio),e(F,Nu),e(Nu,XK),e(XK,rio),e(Nu,tio),e(Nu,CS),e(CS,aio),e(Nu,sio),e(F,nio),e(F,qu),e(qu,VK),e(VK,lio),e(qu,iio),e(qu,MS),e(MS,dio),e(qu,cio),e(F,mio),e(F,Ou),e(Ou,zK),e(zK,fio),e(Ou,gio),e(Ou,ES),e(ES,hio),e(Ou,uio),e(F,pio),e(F,Gu),e(Gu,WK),e(WK,_io),e(Gu,bio),e(Gu,yS),e(yS,vio),e(Gu,Tio),e(F,Fio),e(F,Xu),e(Xu,QK),e(QK,Cio),e(Xu,Mio),e(Xu,wS),e(wS,Eio),e(Xu,yio),e(F,wio),e(F,Vu),e(Vu,HK),e(HK,Aio),e(Vu,Lio),e(Vu,AS),e(AS,Bio),e(Vu,xio),e(F,kio),e(F,zu),e(zu,UK),e(UK,Rio),e(zu,Sio),e(zu,LS),e(LS,Pio),e(zu,$io),e(F,Iio),e(F,Wu),e(Wu,JK),e(JK,jio),e(Wu,Dio),e(Wu,BS),e(BS,Nio),e(Wu,qio),e(F,Oio),e(F,Qu),e(Qu,YK),e(YK,Gio),e(Qu,Xio),e(Qu,xS),e(xS,Vio),e(Qu,zio),e(F,Wio),e(F,Hu),e(Hu,KK),e(KK,Qio),e(Hu,Hio),e(Hu,kS),e(kS,Uio),e(Hu,Jio),e(F,Yio),e(F,Uu),e(Uu,ZK),e(ZK,Kio),e(Uu,Zio),e(Uu,RS),e(RS,edo),e(Uu,odo),e(F,rdo),e(F,Ju),e(Ju,eZ),e(eZ,tdo),e(Ju,ado),e(Ju,SS),e(SS,sdo),e(Ju,ndo),e(F,ldo),e(F,Yu),e(Yu,oZ),e(oZ,ido),e(Yu,ddo),e(Yu,PS),e(PS,cdo),e(Yu,mdo),e(F,fdo),e(F,Ku),e(Ku,rZ),e(rZ,gdo),e(Ku,hdo),e(Ku,$S),e($S,udo),e(Ku,pdo),e(F,_do),e(F,Zu),e(Zu,tZ),e(tZ,bdo),e(Zu,vdo),e(Zu,IS),e(IS,Tdo),e(Zu,Fdo),e(F,Cdo),e(F,ep),e(ep,aZ),e(aZ,Mdo),e(ep,Edo),e(ep,jS),e(jS,ydo),e(ep,wdo),e(F,Ado),e(F,op),e(op,sZ),e(sZ,Ldo),e(op,Bdo),e(op,DS),e(DS,xdo),e(op,kdo),e(F,Rdo),e(F,rp),e(rp,nZ),e(nZ,Sdo),e(rp,Pdo),e(rp,NS),e(NS,$do),e(rp,Ido),e(F,jdo),e(F,tp),e(tp,lZ),e(lZ,Ddo),e(tp,Ndo),e(tp,qS),e(qS,qdo),e(tp,Odo),e(F,Gdo),e(F,ap),e(ap,iZ),e(iZ,Xdo),e(ap,Vdo),e(ap,OS),e(OS,zdo),e(ap,Wdo),e(F,Qdo),e(F,sp),e(sp,dZ),e(dZ,Hdo),e(sp,Udo),e(sp,GS),e(GS,Jdo),e(sp,Ydo),e(F,Kdo),e(F,np),e(np,cZ),e(cZ,Zdo),e(np,eco),e(np,XS),e(XS,oco),e(np,rco),e(F,tco),e(F,lp),e(lp,mZ),e(mZ,aco),e(lp,sco),e(lp,VS),e(VS,nco),e(lp,lco),e(F,ico),e(F,ip),e(ip,fZ),e(fZ,dco),e(ip,cco),e(ip,zS),e(zS,mco),e(ip,fco),e(F,gco),e(F,dp),e(dp,gZ),e(gZ,hco),e(dp,uco),e(dp,WS),e(WS,pco),e(dp,_co),e(F,bco),e(F,cp),e(cp,hZ),e(hZ,vco),e(cp,Tco),e(cp,QS),e(QS,Fco),e(cp,Cco),e(F,Mco),e(F,mp),e(mp,uZ),e(uZ,Eco),e(mp,yco),e(mp,HS),e(HS,wco),e(mp,Aco),e(F,Lco),e(F,fp),e(fp,pZ),e(pZ,Bco),e(fp,xco),e(fp,US),e(US,kco),e(fp,Rco),e(F,Sco),e(F,gp),e(gp,_Z),e(_Z,Pco),e(gp,$co),e(gp,JS),e(JS,Ico),e(gp,jco),e(F,Dco),e(F,hp),e(hp,bZ),e(bZ,Nco),e(hp,qco),e(hp,YS),e(YS,Oco),e(hp,Gco),e(je,Xco),e(je,up),e(up,Vco),e(up,vZ),e(vZ,zco),e(up,Wco),e(up,TZ),e(TZ,Qco),e(je,Hco),e(je,FZ),e(FZ,Uco),e(je,Jco),g(ky,je,null),b(d,gxe,_),b(d,Zi,_),e(Zi,pp),e(pp,CZ),g(Ry,CZ,null),e(Zi,Yco),e(Zi,MZ),e(MZ,Kco),b(d,hxe,_),b(d,Yo,_),g(Sy,Yo,null),e(Yo,Zco),e(Yo,ed),e(ed,emo),e(ed,EZ),e(EZ,omo),e(ed,rmo),e(ed,yZ),e(yZ,tmo),e(ed,amo),e(Yo,smo),e(Yo,Py),e(Py,nmo),e(Py,wZ),e(wZ,lmo),e(Py,imo),e(Yo,dmo),e(Yo,zr),g($y,zr,null),e(zr,cmo),e(zr,AZ),e(AZ,mmo),e(zr,fmo),e(zr,od),e(od,gmo),e(od,LZ),e(LZ,hmo),e(od,umo),e(od,BZ),e(BZ,pmo),e(od,_mo),e(zr,bmo),e(zr,xZ),e(xZ,vmo),e(zr,Tmo),g(Iy,zr,null),e(Yo,Fmo),e(Yo,De),g(jy,De,null),e(De,Cmo),e(De,kZ),e(kZ,Mmo),e(De,Emo),e(De,Va),e(Va,ymo),e(Va,RZ),e(RZ,wmo),e(Va,Amo),e(Va,SZ),e(SZ,Lmo),e(Va,Bmo),e(Va,PZ),e(PZ,xmo),e(Va,kmo),e(De,Rmo),e(De,k),e(k,_p),e(_p,$Z),e($Z,Smo),e(_p,Pmo),e(_p,KS),e(KS,$mo),e(_p,Imo),e(k,jmo),e(k,bp),e(bp,IZ),e(IZ,Dmo),e(bp,Nmo),e(bp,ZS),e(ZS,qmo),e(bp,Omo),e(k,Gmo),e(k,vp),e(vp,jZ),e(jZ,Xmo),e(vp,Vmo),e(vp,eP),e(eP,zmo),e(vp,Wmo),e(k,Qmo),e(k,Tp),e(Tp,DZ),e(DZ,Hmo),e(Tp,Umo),e(Tp,oP),e(oP,Jmo),e(Tp,Ymo),e(k,Kmo),e(k,Fp),e(Fp,NZ),e(NZ,Zmo),e(Fp,efo),e(Fp,rP),e(rP,ofo),e(Fp,rfo),e(k,tfo),e(k,Cp),e(Cp,qZ),e(qZ,afo),e(Cp,sfo),e(Cp,tP),e(tP,nfo),e(Cp,lfo),e(k,ifo),e(k,Mp),e(Mp,OZ),e(OZ,dfo),e(Mp,cfo),e(Mp,aP),e(aP,mfo),e(Mp,ffo),e(k,gfo),e(k,Ep),e(Ep,GZ),e(GZ,hfo),e(Ep,ufo),e(Ep,sP),e(sP,pfo),e(Ep,_fo),e(k,bfo),e(k,yp),e(yp,XZ),e(XZ,vfo),e(yp,Tfo),e(yp,nP),e(nP,Ffo),e(yp,Cfo),e(k,Mfo),e(k,wp),e(wp,VZ),e(VZ,Efo),e(wp,yfo),e(wp,lP),e(lP,wfo),e(wp,Afo),e(k,Lfo),e(k,Ap),e(Ap,zZ),e(zZ,Bfo),e(Ap,xfo),e(Ap,iP),e(iP,kfo),e(Ap,Rfo),e(k,Sfo),e(k,Lp),e(Lp,WZ),e(WZ,Pfo),e(Lp,$fo),e(Lp,dP),e(dP,Ifo),e(Lp,jfo),e(k,Dfo),e(k,Bp),e(Bp,QZ),e(QZ,Nfo),e(Bp,qfo),e(Bp,cP),e(cP,Ofo),e(Bp,Gfo),e(k,Xfo),e(k,xp),e(xp,HZ),e(HZ,Vfo),e(xp,zfo),e(xp,mP),e(mP,Wfo),e(xp,Qfo),e(k,Hfo),e(k,kp),e(kp,UZ),e(UZ,Ufo),e(kp,Jfo),e(kp,fP),e(fP,Yfo),e(kp,Kfo),e(k,Zfo),e(k,Rp),e(Rp,JZ),e(JZ,ego),e(Rp,ogo),e(Rp,gP),e(gP,rgo),e(Rp,tgo),e(k,ago),e(k,Sp),e(Sp,YZ),e(YZ,sgo),e(Sp,ngo),e(Sp,hP),e(hP,lgo),e(Sp,igo),e(k,dgo),e(k,Pp),e(Pp,KZ),e(KZ,cgo),e(Pp,mgo),e(Pp,uP),e(uP,fgo),e(Pp,ggo),e(k,hgo),e(k,$p),e($p,ZZ),e(ZZ,ugo),e($p,pgo),e($p,pP),e(pP,_go),e($p,bgo),e(k,vgo),e(k,Ip),e(Ip,eee),e(eee,Tgo),e(Ip,Fgo),e(Ip,_P),e(_P,Cgo),e(Ip,Mgo),e(k,Ego),e(k,jp),e(jp,oee),e(oee,ygo),e(jp,wgo),e(jp,bP),e(bP,Ago),e(jp,Lgo),e(k,Bgo),e(k,Dp),e(Dp,ree),e(ree,xgo),e(Dp,kgo),e(Dp,vP),e(vP,Rgo),e(Dp,Sgo),e(k,Pgo),e(k,Np),e(Np,tee),e(tee,$go),e(Np,Igo),e(Np,TP),e(TP,jgo),e(Np,Dgo),e(k,Ngo),e(k,qp),e(qp,aee),e(aee,qgo),e(qp,Ogo),e(qp,FP),e(FP,Ggo),e(qp,Xgo),e(k,Vgo),e(k,Op),e(Op,see),e(see,zgo),e(Op,Wgo),e(Op,CP),e(CP,Qgo),e(Op,Hgo),e(k,Ugo),e(k,Gp),e(Gp,nee),e(nee,Jgo),e(Gp,Ygo),e(Gp,MP),e(MP,Kgo),e(Gp,Zgo),e(k,eho),e(k,Xp),e(Xp,lee),e(lee,oho),e(Xp,rho),e(Xp,EP),e(EP,tho),e(Xp,aho),e(k,sho),e(k,Vp),e(Vp,iee),e(iee,nho),e(Vp,lho),e(Vp,yP),e(yP,iho),e(Vp,dho),e(k,cho),e(k,zp),e(zp,dee),e(dee,mho),e(zp,fho),e(zp,wP),e(wP,gho),e(zp,hho),e(k,uho),e(k,Wp),e(Wp,cee),e(cee,pho),e(Wp,_ho),e(Wp,AP),e(AP,bho),e(Wp,vho),e(k,Tho),e(k,Qp),e(Qp,mee),e(mee,Fho),e(Qp,Cho),e(Qp,LP),e(LP,Mho),e(Qp,Eho),e(k,yho),e(k,Hp),e(Hp,fee),e(fee,who),e(Hp,Aho),e(Hp,BP),e(BP,Lho),e(Hp,Bho),e(k,xho),e(k,Up),e(Up,gee),e(gee,kho),e(Up,Rho),e(Up,xP),e(xP,Sho),e(Up,Pho),e(k,$ho),e(k,Jp),e(Jp,hee),e(hee,Iho),e(Jp,jho),e(Jp,kP),e(kP,Dho),e(Jp,Nho),e(k,qho),e(k,Yp),e(Yp,uee),e(uee,Oho),e(Yp,Gho),e(Yp,RP),e(RP,Xho),e(Yp,Vho),e(k,zho),e(k,Kp),e(Kp,pee),e(pee,Who),e(Kp,Qho),e(Kp,SP),e(SP,Hho),e(Kp,Uho),e(k,Jho),e(k,Zp),e(Zp,_ee),e(_ee,Yho),e(Zp,Kho),e(Zp,PP),e(PP,Zho),e(Zp,euo),e(k,ouo),e(k,e_),e(e_,bee),e(bee,ruo),e(e_,tuo),e(e_,$P),e($P,auo),e(e_,suo),e(k,nuo),e(k,o_),e(o_,vee),e(vee,luo),e(o_,iuo),e(o_,IP),e(IP,duo),e(o_,cuo),e(De,muo),e(De,r_),e(r_,fuo),e(r_,Tee),e(Tee,guo),e(r_,huo),e(r_,Fee),e(Fee,uuo),e(De,puo),e(De,Cee),e(Cee,_uo),e(De,buo),g(Dy,De,null),b(d,uxe,_),b(d,rd,_),e(rd,t_),e(t_,Mee),g(Ny,Mee,null),e(rd,vuo),e(rd,Eee),e(Eee,Tuo),b(d,pxe,_),b(d,Ko,_),g(qy,Ko,null),e(Ko,Fuo),e(Ko,td),e(td,Cuo),e(td,yee),e(yee,Muo),e(td,Euo),e(td,wee),e(wee,yuo),e(td,wuo),e(Ko,Auo),e(Ko,Oy),e(Oy,Luo),e(Oy,Aee),e(Aee,Buo),e(Oy,xuo),e(Ko,kuo),e(Ko,Wr),g(Gy,Wr,null),e(Wr,Ruo),e(Wr,Lee),e(Lee,Suo),e(Wr,Puo),e(Wr,ad),e(ad,$uo),e(ad,Bee),e(Bee,Iuo),e(ad,juo),e(ad,xee),e(xee,Duo),e(ad,Nuo),e(Wr,quo),e(Wr,kee),e(kee,Ouo),e(Wr,Guo),g(Xy,Wr,null),e(Ko,Xuo),e(Ko,Ne),g(Vy,Ne,null),e(Ne,Vuo),e(Ne,Ree),e(Ree,zuo),e(Ne,Wuo),e(Ne,za),e(za,Quo),e(za,See),e(See,Huo),e(za,Uuo),e(za,Pee),e(Pee,Juo),e(za,Yuo),e(za,$ee),e($ee,Kuo),e(za,Zuo),e(Ne,epo),e(Ne,$),e($,a_),e(a_,Iee),e(Iee,opo),e(a_,rpo),e(a_,jP),e(jP,tpo),e(a_,apo),e($,spo),e($,s_),e(s_,jee),e(jee,npo),e(s_,lpo),e(s_,DP),e(DP,ipo),e(s_,dpo),e($,cpo),e($,n_),e(n_,Dee),e(Dee,mpo),e(n_,fpo),e(n_,NP),e(NP,gpo),e(n_,hpo),e($,upo),e($,l_),e(l_,Nee),e(Nee,ppo),e(l_,_po),e(l_,qP),e(qP,bpo),e(l_,vpo),e($,Tpo),e($,i_),e(i_,qee),e(qee,Fpo),e(i_,Cpo),e(i_,OP),e(OP,Mpo),e(i_,Epo),e($,ypo),e($,d_),e(d_,Oee),e(Oee,wpo),e(d_,Apo),e(d_,GP),e(GP,Lpo),e(d_,Bpo),e($,xpo),e($,c_),e(c_,Gee),e(Gee,kpo),e(c_,Rpo),e(c_,XP),e(XP,Spo),e(c_,Ppo),e($,$po),e($,m_),e(m_,Xee),e(Xee,Ipo),e(m_,jpo),e(m_,VP),e(VP,Dpo),e(m_,Npo),e($,qpo),e($,f_),e(f_,Vee),e(Vee,Opo),e(f_,Gpo),e(f_,zP),e(zP,Xpo),e(f_,Vpo),e($,zpo),e($,g_),e(g_,zee),e(zee,Wpo),e(g_,Qpo),e(g_,WP),e(WP,Hpo),e(g_,Upo),e($,Jpo),e($,h_),e(h_,Wee),e(Wee,Ypo),e(h_,Kpo),e(h_,QP),e(QP,Zpo),e(h_,e_o),e($,o_o),e($,u_),e(u_,Qee),e(Qee,r_o),e(u_,t_o),e(u_,HP),e(HP,a_o),e(u_,s_o),e($,n_o),e($,p_),e(p_,Hee),e(Hee,l_o),e(p_,i_o),e(p_,UP),e(UP,d_o),e(p_,c_o),e($,m_o),e($,__),e(__,Uee),e(Uee,f_o),e(__,g_o),e(__,JP),e(JP,h_o),e(__,u_o),e($,p_o),e($,b_),e(b_,Jee),e(Jee,__o),e(b_,b_o),e(b_,YP),e(YP,v_o),e(b_,T_o),e($,F_o),e($,v_),e(v_,Yee),e(Yee,C_o),e(v_,M_o),e(v_,KP),e(KP,E_o),e(v_,y_o),e($,w_o),e($,T_),e(T_,Kee),e(Kee,A_o),e(T_,L_o),e(T_,ZP),e(ZP,B_o),e(T_,x_o),e($,k_o),e($,F_),e(F_,Zee),e(Zee,R_o),e(F_,S_o),e(F_,e$),e(e$,P_o),e(F_,$_o),e($,I_o),e($,C_),e(C_,eoe),e(eoe,j_o),e(C_,D_o),e(C_,o$),e(o$,N_o),e(C_,q_o),e($,O_o),e($,M_),e(M_,ooe),e(ooe,G_o),e(M_,X_o),e(M_,r$),e(r$,V_o),e(M_,z_o),e($,W_o),e($,E_),e(E_,roe),e(roe,Q_o),e(E_,H_o),e(E_,t$),e(t$,U_o),e(E_,J_o),e($,Y_o),e($,y_),e(y_,toe),e(toe,K_o),e(y_,Z_o),e(y_,a$),e(a$,ebo),e(y_,obo),e($,rbo),e($,w_),e(w_,aoe),e(aoe,tbo),e(w_,abo),e(w_,s$),e(s$,sbo),e(w_,nbo),e($,lbo),e($,A_),e(A_,soe),e(soe,ibo),e(A_,dbo),e(A_,n$),e(n$,cbo),e(A_,mbo),e($,fbo),e($,L_),e(L_,noe),e(noe,gbo),e(L_,hbo),e(L_,l$),e(l$,ubo),e(L_,pbo),e($,_bo),e($,B_),e(B_,loe),e(loe,bbo),e(B_,vbo),e(B_,i$),e(i$,Tbo),e(B_,Fbo),e($,Cbo),e($,x_),e(x_,ioe),e(ioe,Mbo),e(x_,Ebo),e(x_,d$),e(d$,ybo),e(x_,wbo),e($,Abo),e($,k_),e(k_,doe),e(doe,Lbo),e(k_,Bbo),e(k_,c$),e(c$,xbo),e(k_,kbo),e($,Rbo),e($,R_),e(R_,coe),e(coe,Sbo),e(R_,Pbo),e(R_,m$),e(m$,$bo),e(R_,Ibo),e($,jbo),e($,S_),e(S_,moe),e(moe,Dbo),e(S_,Nbo),e(S_,f$),e(f$,qbo),e(S_,Obo),e($,Gbo),e($,P_),e(P_,foe),e(foe,Xbo),e(P_,Vbo),e(P_,g$),e(g$,zbo),e(P_,Wbo),e($,Qbo),e($,$_),e($_,goe),e(goe,Hbo),e($_,Ubo),e($_,h$),e(h$,Jbo),e($_,Ybo),e($,Kbo),e($,I_),e(I_,hoe),e(hoe,Zbo),e(I_,e2o),e(I_,u$),e(u$,o2o),e(I_,r2o),e($,t2o),e($,j_),e(j_,uoe),e(uoe,a2o),e(j_,s2o),e(j_,p$),e(p$,n2o),e(j_,l2o),e($,i2o),e($,D_),e(D_,poe),e(poe,d2o),e(D_,c2o),e(D_,_$),e(_$,m2o),e(D_,f2o),e(Ne,g2o),e(Ne,N_),e(N_,h2o),e(N_,_oe),e(_oe,u2o),e(N_,p2o),e(N_,boe),e(boe,_2o),e(Ne,b2o),e(Ne,voe),e(voe,v2o),e(Ne,T2o),g(zy,Ne,null),b(d,_xe,_),b(d,sd,_),e(sd,q_),e(q_,Toe),g(Wy,Toe,null),e(sd,F2o),e(sd,Foe),e(Foe,C2o),b(d,bxe,_),b(d,Zo,_),g(Qy,Zo,null),e(Zo,M2o),e(Zo,nd),e(nd,E2o),e(nd,Coe),e(Coe,y2o),e(nd,w2o),e(nd,Moe),e(Moe,A2o),e(nd,L2o),e(Zo,B2o),e(Zo,Hy),e(Hy,x2o),e(Hy,Eoe),e(Eoe,k2o),e(Hy,R2o),e(Zo,S2o),e(Zo,Qr),g(Uy,Qr,null),e(Qr,P2o),e(Qr,yoe),e(yoe,$2o),e(Qr,I2o),e(Qr,ld),e(ld,j2o),e(ld,woe),e(woe,D2o),e(ld,N2o),e(ld,Aoe),e(Aoe,q2o),e(ld,O2o),e(Qr,G2o),e(Qr,Loe),e(Loe,X2o),e(Qr,V2o),g(Jy,Qr,null),e(Zo,z2o),e(Zo,qe),g(Yy,qe,null),e(qe,W2o),e(qe,Boe),e(Boe,Q2o),e(qe,H2o),e(qe,Wa),e(Wa,U2o),e(Wa,xoe),e(xoe,J2o),e(Wa,Y2o),e(Wa,koe),e(koe,K2o),e(Wa,Z2o),e(Wa,Roe),e(Roe,evo),e(Wa,ovo),e(qe,rvo),e(qe,I),e(I,O_),e(O_,Soe),e(Soe,tvo),e(O_,avo),e(O_,b$),e(b$,svo),e(O_,nvo),e(I,lvo),e(I,G_),e(G_,Poe),e(Poe,ivo),e(G_,dvo),e(G_,v$),e(v$,cvo),e(G_,mvo),e(I,fvo),e(I,X_),e(X_,$oe),e($oe,gvo),e(X_,hvo),e(X_,T$),e(T$,uvo),e(X_,pvo),e(I,_vo),e(I,V_),e(V_,Ioe),e(Ioe,bvo),e(V_,vvo),e(V_,F$),e(F$,Tvo),e(V_,Fvo),e(I,Cvo),e(I,z_),e(z_,joe),e(joe,Mvo),e(z_,Evo),e(z_,C$),e(C$,yvo),e(z_,wvo),e(I,Avo),e(I,W_),e(W_,Doe),e(Doe,Lvo),e(W_,Bvo),e(W_,M$),e(M$,xvo),e(W_,kvo),e(I,Rvo),e(I,Q_),e(Q_,Noe),e(Noe,Svo),e(Q_,Pvo),e(Q_,E$),e(E$,$vo),e(Q_,Ivo),e(I,jvo),e(I,H_),e(H_,qoe),e(qoe,Dvo),e(H_,Nvo),e(H_,y$),e(y$,qvo),e(H_,Ovo),e(I,Gvo),e(I,U_),e(U_,Ooe),e(Ooe,Xvo),e(U_,Vvo),e(U_,w$),e(w$,zvo),e(U_,Wvo),e(I,Qvo),e(I,J_),e(J_,Goe),e(Goe,Hvo),e(J_,Uvo),e(J_,A$),e(A$,Jvo),e(J_,Yvo),e(I,Kvo),e(I,Y_),e(Y_,Xoe),e(Xoe,Zvo),e(Y_,eTo),e(Y_,L$),e(L$,oTo),e(Y_,rTo),e(I,tTo),e(I,K_),e(K_,Voe),e(Voe,aTo),e(K_,sTo),e(K_,B$),e(B$,nTo),e(K_,lTo),e(I,iTo),e(I,Z_),e(Z_,zoe),e(zoe,dTo),e(Z_,cTo),e(Z_,x$),e(x$,mTo),e(Z_,fTo),e(I,gTo),e(I,eb),e(eb,Woe),e(Woe,hTo),e(eb,uTo),e(eb,k$),e(k$,pTo),e(eb,_To),e(I,bTo),e(I,ob),e(ob,Qoe),e(Qoe,vTo),e(ob,TTo),e(ob,R$),e(R$,FTo),e(ob,CTo),e(I,MTo),e(I,rb),e(rb,Hoe),e(Hoe,ETo),e(rb,yTo),e(rb,S$),e(S$,wTo),e(rb,ATo),e(I,LTo),e(I,tb),e(tb,Uoe),e(Uoe,BTo),e(tb,xTo),e(tb,P$),e(P$,kTo),e(tb,RTo),e(I,STo),e(I,ab),e(ab,Joe),e(Joe,PTo),e(ab,$To),e(ab,$$),e($$,ITo),e(ab,jTo),e(I,DTo),e(I,sb),e(sb,Yoe),e(Yoe,NTo),e(sb,qTo),e(sb,I$),e(I$,OTo),e(sb,GTo),e(I,XTo),e(I,nb),e(nb,Koe),e(Koe,VTo),e(nb,zTo),e(nb,j$),e(j$,WTo),e(nb,QTo),e(I,HTo),e(I,lb),e(lb,Zoe),e(Zoe,UTo),e(lb,JTo),e(lb,D$),e(D$,YTo),e(lb,KTo),e(I,ZTo),e(I,ib),e(ib,ere),e(ere,e1o),e(ib,o1o),e(ib,N$),e(N$,r1o),e(ib,t1o),e(I,a1o),e(I,db),e(db,ore),e(ore,s1o),e(db,n1o),e(db,q$),e(q$,l1o),e(db,i1o),e(I,d1o),e(I,cb),e(cb,rre),e(rre,c1o),e(cb,m1o),e(cb,O$),e(O$,f1o),e(cb,g1o),e(I,h1o),e(I,mb),e(mb,tre),e(tre,u1o),e(mb,p1o),e(mb,G$),e(G$,_1o),e(mb,b1o),e(I,v1o),e(I,fb),e(fb,are),e(are,T1o),e(fb,F1o),e(fb,X$),e(X$,C1o),e(fb,M1o),e(I,E1o),e(I,gb),e(gb,sre),e(sre,y1o),e(gb,w1o),e(gb,V$),e(V$,A1o),e(gb,L1o),e(I,B1o),e(I,hb),e(hb,nre),e(nre,x1o),e(hb,k1o),e(hb,z$),e(z$,R1o),e(hb,S1o),e(I,P1o),e(I,ub),e(ub,lre),e(lre,$1o),e(ub,I1o),e(ub,W$),e(W$,j1o),e(ub,D1o),e(I,N1o),e(I,pb),e(pb,ire),e(ire,q1o),e(pb,O1o),e(pb,Q$),e(Q$,G1o),e(pb,X1o),e(I,V1o),e(I,_b),e(_b,dre),e(dre,z1o),e(_b,W1o),e(_b,cre),e(cre,Q1o),e(_b,H1o),e(I,U1o),e(I,bb),e(bb,mre),e(mre,J1o),e(bb,Y1o),e(bb,H$),e(H$,K1o),e(bb,Z1o),e(I,eFo),e(I,vb),e(vb,fre),e(fre,oFo),e(vb,rFo),e(vb,U$),e(U$,tFo),e(vb,aFo),e(I,sFo),e(I,Tb),e(Tb,gre),e(gre,nFo),e(Tb,lFo),e(Tb,J$),e(J$,iFo),e(Tb,dFo),e(I,cFo),e(I,Fb),e(Fb,hre),e(hre,mFo),e(Fb,fFo),e(Fb,Y$),e(Y$,gFo),e(Fb,hFo),e(qe,uFo),e(qe,Cb),e(Cb,pFo),e(Cb,ure),e(ure,_Fo),e(Cb,bFo),e(Cb,pre),e(pre,vFo),e(qe,TFo),e(qe,_re),e(_re,FFo),e(qe,CFo),g(Ky,qe,null),b(d,vxe,_),b(d,id,_),e(id,Mb),e(Mb,bre),g(Zy,bre,null),e(id,MFo),e(id,vre),e(vre,EFo),b(d,Txe,_),b(d,er,_),g(ew,er,null),e(er,yFo),e(er,dd),e(dd,wFo),e(dd,Tre),e(Tre,AFo),e(dd,LFo),e(dd,Fre),e(Fre,BFo),e(dd,xFo),e(er,kFo),e(er,ow),e(ow,RFo),e(ow,Cre),e(Cre,SFo),e(ow,PFo),e(er,$Fo),e(er,Hr),g(rw,Hr,null),e(Hr,IFo),e(Hr,Mre),e(Mre,jFo),e(Hr,DFo),e(Hr,cd),e(cd,NFo),e(cd,Ere),e(Ere,qFo),e(cd,OFo),e(cd,yre),e(yre,GFo),e(cd,XFo),e(Hr,VFo),e(Hr,wre),e(wre,zFo),e(Hr,WFo),g(tw,Hr,null),e(er,QFo),e(er,Oe),g(aw,Oe,null),e(Oe,HFo),e(Oe,Are),e(Are,UFo),e(Oe,JFo),e(Oe,Qa),e(Qa,YFo),e(Qa,Lre),e(Lre,KFo),e(Qa,ZFo),e(Qa,Bre),e(Bre,eCo),e(Qa,oCo),e(Qa,xre),e(xre,rCo),e(Qa,tCo),e(Oe,aCo),e(Oe,se),e(se,Eb),e(Eb,kre),e(kre,sCo),e(Eb,nCo),e(Eb,K$),e(K$,lCo),e(Eb,iCo),e(se,dCo),e(se,yb),e(yb,Rre),e(Rre,cCo),e(yb,mCo),e(yb,Z$),e(Z$,fCo),e(yb,gCo),e(se,hCo),e(se,wb),e(wb,Sre),e(Sre,uCo),e(wb,pCo),e(wb,eI),e(eI,_Co),e(wb,bCo),e(se,vCo),e(se,Ab),e(Ab,Pre),e(Pre,TCo),e(Ab,FCo),e(Ab,oI),e(oI,CCo),e(Ab,MCo),e(se,ECo),e(se,Lb),e(Lb,$re),e($re,yCo),e(Lb,wCo),e(Lb,rI),e(rI,ACo),e(Lb,LCo),e(se,BCo),e(se,Bb),e(Bb,Ire),e(Ire,xCo),e(Bb,kCo),e(Bb,tI),e(tI,RCo),e(Bb,SCo),e(se,PCo),e(se,xb),e(xb,jre),e(jre,$Co),e(xb,ICo),e(xb,aI),e(aI,jCo),e(xb,DCo),e(se,NCo),e(se,kb),e(kb,Dre),e(Dre,qCo),e(kb,OCo),e(kb,sI),e(sI,GCo),e(kb,XCo),e(se,VCo),e(se,Rb),e(Rb,Nre),e(Nre,zCo),e(Rb,WCo),e(Rb,nI),e(nI,QCo),e(Rb,HCo),e(se,UCo),e(se,Sb),e(Sb,qre),e(qre,JCo),e(Sb,YCo),e(Sb,lI),e(lI,KCo),e(Sb,ZCo),e(se,eMo),e(se,Pb),e(Pb,Ore),e(Ore,oMo),e(Pb,rMo),e(Pb,iI),e(iI,tMo),e(Pb,aMo),e(se,sMo),e(se,$b),e($b,Gre),e(Gre,nMo),e($b,lMo),e($b,dI),e(dI,iMo),e($b,dMo),e(se,cMo),e(se,Ib),e(Ib,Xre),e(Xre,mMo),e(Ib,fMo),e(Ib,cI),e(cI,gMo),e(Ib,hMo),e(se,uMo),e(se,jb),e(jb,Vre),e(Vre,pMo),e(jb,_Mo),e(jb,mI),e(mI,bMo),e(jb,vMo),e(se,TMo),e(se,Db),e(Db,zre),e(zre,FMo),e(Db,CMo),e(Db,fI),e(fI,MMo),e(Db,EMo),e(se,yMo),e(se,Nb),e(Nb,Wre),e(Wre,wMo),e(Nb,AMo),e(Nb,gI),e(gI,LMo),e(Nb,BMo),e(Oe,xMo),e(Oe,qb),e(qb,kMo),e(qb,Qre),e(Qre,RMo),e(qb,SMo),e(qb,Hre),e(Hre,PMo),e(Oe,$Mo),e(Oe,Ure),e(Ure,IMo),e(Oe,jMo),g(sw,Oe,null),b(d,Fxe,_),b(d,md,_),e(md,Ob),e(Ob,Jre),g(nw,Jre,null),e(md,DMo),e(md,Yre),e(Yre,NMo),b(d,Cxe,_),b(d,or,_),g(lw,or,null),e(or,qMo),e(or,fd),e(fd,OMo),e(fd,Kre),e(Kre,GMo),e(fd,XMo),e(fd,Zre),e(Zre,VMo),e(fd,zMo),e(or,WMo),e(or,iw),e(iw,QMo),e(iw,ete),e(ete,HMo),e(iw,UMo),e(or,JMo),e(or,Ur),g(dw,Ur,null),e(Ur,YMo),e(Ur,ote),e(ote,KMo),e(Ur,ZMo),e(Ur,gd),e(gd,e4o),e(gd,rte),e(rte,o4o),e(gd,r4o),e(gd,tte),e(tte,t4o),e(gd,a4o),e(Ur,s4o),e(Ur,ate),e(ate,n4o),e(Ur,l4o),g(cw,Ur,null),e(or,i4o),e(or,Ge),g(mw,Ge,null),e(Ge,d4o),e(Ge,ste),e(ste,c4o),e(Ge,m4o),e(Ge,Ha),e(Ha,f4o),e(Ha,nte),e(nte,g4o),e(Ha,h4o),e(Ha,lte),e(lte,u4o),e(Ha,p4o),e(Ha,ite),e(ite,_4o),e(Ha,b4o),e(Ge,v4o),e(Ge,A),e(A,Gb),e(Gb,dte),e(dte,T4o),e(Gb,F4o),e(Gb,hI),e(hI,C4o),e(Gb,M4o),e(A,E4o),e(A,Xb),e(Xb,cte),e(cte,y4o),e(Xb,w4o),e(Xb,uI),e(uI,A4o),e(Xb,L4o),e(A,B4o),e(A,Vb),e(Vb,mte),e(mte,x4o),e(Vb,k4o),e(Vb,pI),e(pI,R4o),e(Vb,S4o),e(A,P4o),e(A,zb),e(zb,fte),e(fte,$4o),e(zb,I4o),e(zb,_I),e(_I,j4o),e(zb,D4o),e(A,N4o),e(A,Wb),e(Wb,gte),e(gte,q4o),e(Wb,O4o),e(Wb,bI),e(bI,G4o),e(Wb,X4o),e(A,V4o),e(A,Qb),e(Qb,hte),e(hte,z4o),e(Qb,W4o),e(Qb,vI),e(vI,Q4o),e(Qb,H4o),e(A,U4o),e(A,Hb),e(Hb,ute),e(ute,J4o),e(Hb,Y4o),e(Hb,TI),e(TI,K4o),e(Hb,Z4o),e(A,eEo),e(A,Ub),e(Ub,pte),e(pte,oEo),e(Ub,rEo),e(Ub,FI),e(FI,tEo),e(Ub,aEo),e(A,sEo),e(A,Jb),e(Jb,_te),e(_te,nEo),e(Jb,lEo),e(Jb,CI),e(CI,iEo),e(Jb,dEo),e(A,cEo),e(A,Yb),e(Yb,bte),e(bte,mEo),e(Yb,fEo),e(Yb,MI),e(MI,gEo),e(Yb,hEo),e(A,uEo),e(A,Kb),e(Kb,vte),e(vte,pEo),e(Kb,_Eo),e(Kb,EI),e(EI,bEo),e(Kb,vEo),e(A,TEo),e(A,Zb),e(Zb,Tte),e(Tte,FEo),e(Zb,CEo),e(Zb,yI),e(yI,MEo),e(Zb,EEo),e(A,yEo),e(A,e2),e(e2,Fte),e(Fte,wEo),e(e2,AEo),e(e2,wI),e(wI,LEo),e(e2,BEo),e(A,xEo),e(A,o2),e(o2,Cte),e(Cte,kEo),e(o2,REo),e(o2,AI),e(AI,SEo),e(o2,PEo),e(A,$Eo),e(A,r2),e(r2,Mte),e(Mte,IEo),e(r2,jEo),e(r2,LI),e(LI,DEo),e(r2,NEo),e(A,qEo),e(A,t2),e(t2,Ete),e(Ete,OEo),e(t2,GEo),e(t2,BI),e(BI,XEo),e(t2,VEo),e(A,zEo),e(A,a2),e(a2,yte),e(yte,WEo),e(a2,QEo),e(a2,xI),e(xI,HEo),e(a2,UEo),e(A,JEo),e(A,s2),e(s2,wte),e(wte,YEo),e(s2,KEo),e(s2,kI),e(kI,ZEo),e(s2,e3o),e(A,o3o),e(A,n2),e(n2,Ate),e(Ate,r3o),e(n2,t3o),e(n2,RI),e(RI,a3o),e(n2,s3o),e(A,n3o),e(A,l2),e(l2,Lte),e(Lte,l3o),e(l2,i3o),e(l2,SI),e(SI,d3o),e(l2,c3o),e(A,m3o),e(A,i2),e(i2,Bte),e(Bte,f3o),e(i2,g3o),e(i2,PI),e(PI,h3o),e(i2,u3o),e(A,p3o),e(A,d2),e(d2,xte),e(xte,_3o),e(d2,b3o),e(d2,$I),e($I,v3o),e(d2,T3o),e(A,F3o),e(A,c2),e(c2,kte),e(kte,C3o),e(c2,M3o),e(c2,II),e(II,E3o),e(c2,y3o),e(A,w3o),e(A,m2),e(m2,Rte),e(Rte,A3o),e(m2,L3o),e(m2,jI),e(jI,B3o),e(m2,x3o),e(A,k3o),e(A,f2),e(f2,Ste),e(Ste,R3o),e(f2,S3o),e(f2,DI),e(DI,P3o),e(f2,$3o),e(A,I3o),e(A,g2),e(g2,Pte),e(Pte,j3o),e(g2,D3o),e(g2,NI),e(NI,N3o),e(g2,q3o),e(A,O3o),e(A,h2),e(h2,$te),e($te,G3o),e(h2,X3o),e(h2,qI),e(qI,V3o),e(h2,z3o),e(A,W3o),e(A,u2),e(u2,Ite),e(Ite,Q3o),e(u2,H3o),e(u2,OI),e(OI,U3o),e(u2,J3o),e(A,Y3o),e(A,p2),e(p2,jte),e(jte,K3o),e(p2,Z3o),e(p2,GI),e(GI,e5o),e(p2,o5o),e(A,r5o),e(A,_2),e(_2,Dte),e(Dte,t5o),e(_2,a5o),e(_2,XI),e(XI,s5o),e(_2,n5o),e(A,l5o),e(A,b2),e(b2,Nte),e(Nte,i5o),e(b2,d5o),e(b2,VI),e(VI,c5o),e(b2,m5o),e(A,f5o),e(A,v2),e(v2,qte),e(qte,g5o),e(v2,h5o),e(v2,zI),e(zI,u5o),e(v2,p5o),e(A,_5o),e(A,T2),e(T2,Ote),e(Ote,b5o),e(T2,v5o),e(T2,WI),e(WI,T5o),e(T2,F5o),e(A,C5o),e(A,F2),e(F2,Gte),e(Gte,M5o),e(F2,E5o),e(F2,QI),e(QI,y5o),e(F2,w5o),e(A,A5o),e(A,C2),e(C2,Xte),e(Xte,L5o),e(C2,B5o),e(C2,HI),e(HI,x5o),e(C2,k5o),e(A,R5o),e(A,M2),e(M2,Vte),e(Vte,S5o),e(M2,P5o),e(M2,UI),e(UI,$5o),e(M2,I5o),e(A,j5o),e(A,E2),e(E2,zte),e(zte,D5o),e(E2,N5o),e(E2,JI),e(JI,q5o),e(E2,O5o),e(A,G5o),e(A,y2),e(y2,Wte),e(Wte,X5o),e(y2,V5o),e(y2,YI),e(YI,z5o),e(y2,W5o),e(A,Q5o),e(A,w2),e(w2,Qte),e(Qte,H5o),e(w2,U5o),e(w2,KI),e(KI,J5o),e(w2,Y5o),e(A,K5o),e(A,A2),e(A2,Hte),e(Hte,Z5o),e(A2,eyo),e(A2,ZI),e(ZI,oyo),e(A2,ryo),e(A,tyo),e(A,L2),e(L2,Ute),e(Ute,ayo),e(L2,syo),e(L2,ej),e(ej,nyo),e(L2,lyo),e(A,iyo),e(A,B2),e(B2,Jte),e(Jte,dyo),e(B2,cyo),e(B2,oj),e(oj,myo),e(B2,fyo),e(A,gyo),e(A,x2),e(x2,Yte),e(Yte,hyo),e(x2,uyo),e(x2,rj),e(rj,pyo),e(x2,_yo),e(A,byo),e(A,k2),e(k2,Kte),e(Kte,vyo),e(k2,Tyo),e(k2,tj),e(tj,Fyo),e(k2,Cyo),e(A,Myo),e(A,R2),e(R2,Zte),e(Zte,Eyo),e(R2,yyo),e(R2,aj),e(aj,wyo),e(R2,Ayo),e(A,Lyo),e(A,S2),e(S2,eae),e(eae,Byo),e(S2,xyo),e(S2,sj),e(sj,kyo),e(S2,Ryo),e(Ge,Syo),e(Ge,P2),e(P2,Pyo),e(P2,oae),e(oae,$yo),e(P2,Iyo),e(P2,rae),e(rae,jyo),e(Ge,Dyo),e(Ge,tae),e(tae,Nyo),e(Ge,qyo),g(fw,Ge,null),b(d,Mxe,_),b(d,hd,_),e(hd,$2),e($2,aae),g(gw,aae,null),e(hd,Oyo),e(hd,sae),e(sae,Gyo),b(d,Exe,_),b(d,rr,_),g(hw,rr,null),e(rr,Xyo),e(rr,ud),e(ud,Vyo),e(ud,nae),e(nae,zyo),e(ud,Wyo),e(ud,lae),e(lae,Qyo),e(ud,Hyo),e(rr,Uyo),e(rr,uw),e(uw,Jyo),e(uw,iae),e(iae,Yyo),e(uw,Kyo),e(rr,Zyo),e(rr,Jr),g(pw,Jr,null),e(Jr,ewo),e(Jr,dae),e(dae,owo),e(Jr,rwo),e(Jr,pd),e(pd,two),e(pd,cae),e(cae,awo),e(pd,swo),e(pd,mae),e(mae,nwo),e(pd,lwo),e(Jr,iwo),e(Jr,fae),e(fae,dwo),e(Jr,cwo),g(_w,Jr,null),e(rr,mwo),e(rr,Xe),g(bw,Xe,null),e(Xe,fwo),e(Xe,gae),e(gae,gwo),e(Xe,hwo),e(Xe,Ua),e(Ua,uwo),e(Ua,hae),e(hae,pwo),e(Ua,_wo),e(Ua,uae),e(uae,bwo),e(Ua,vwo),e(Ua,pae),e(pae,Two),e(Ua,Fwo),e(Xe,Cwo),e(Xe,O),e(O,I2),e(I2,_ae),e(_ae,Mwo),e(I2,Ewo),e(I2,nj),e(nj,ywo),e(I2,wwo),e(O,Awo),e(O,j2),e(j2,bae),e(bae,Lwo),e(j2,Bwo),e(j2,lj),e(lj,xwo),e(j2,kwo),e(O,Rwo),e(O,D2),e(D2,vae),e(vae,Swo),e(D2,Pwo),e(D2,ij),e(ij,$wo),e(D2,Iwo),e(O,jwo),e(O,N2),e(N2,Tae),e(Tae,Dwo),e(N2,Nwo),e(N2,dj),e(dj,qwo),e(N2,Owo),e(O,Gwo),e(O,q2),e(q2,Fae),e(Fae,Xwo),e(q2,Vwo),e(q2,cj),e(cj,zwo),e(q2,Wwo),e(O,Qwo),e(O,O2),e(O2,Cae),e(Cae,Hwo),e(O2,Uwo),e(O2,mj),e(mj,Jwo),e(O2,Ywo),e(O,Kwo),e(O,G2),e(G2,Mae),e(Mae,Zwo),e(G2,e6o),e(G2,fj),e(fj,o6o),e(G2,r6o),e(O,t6o),e(O,X2),e(X2,Eae),e(Eae,a6o),e(X2,s6o),e(X2,gj),e(gj,n6o),e(X2,l6o),e(O,i6o),e(O,V2),e(V2,yae),e(yae,d6o),e(V2,c6o),e(V2,hj),e(hj,m6o),e(V2,f6o),e(O,g6o),e(O,z2),e(z2,wae),e(wae,h6o),e(z2,u6o),e(z2,uj),e(uj,p6o),e(z2,_6o),e(O,b6o),e(O,W2),e(W2,Aae),e(Aae,v6o),e(W2,T6o),e(W2,pj),e(pj,F6o),e(W2,C6o),e(O,M6o),e(O,Q2),e(Q2,Lae),e(Lae,E6o),e(Q2,y6o),e(Q2,_j),e(_j,w6o),e(Q2,A6o),e(O,L6o),e(O,H2),e(H2,Bae),e(Bae,B6o),e(H2,x6o),e(H2,bj),e(bj,k6o),e(H2,R6o),e(O,S6o),e(O,U2),e(U2,xae),e(xae,P6o),e(U2,$6o),e(U2,vj),e(vj,I6o),e(U2,j6o),e(O,D6o),e(O,J2),e(J2,kae),e(kae,N6o),e(J2,q6o),e(J2,Tj),e(Tj,O6o),e(J2,G6o),e(O,X6o),e(O,Y2),e(Y2,Rae),e(Rae,V6o),e(Y2,z6o),e(Y2,Fj),e(Fj,W6o),e(Y2,Q6o),e(O,H6o),e(O,K2),e(K2,Sae),e(Sae,U6o),e(K2,J6o),e(K2,Cj),e(Cj,Y6o),e(K2,K6o),e(O,Z6o),e(O,Z2),e(Z2,Pae),e(Pae,eAo),e(Z2,oAo),e(Z2,Mj),e(Mj,rAo),e(Z2,tAo),e(O,aAo),e(O,ev),e(ev,$ae),e($ae,sAo),e(ev,nAo),e(ev,Ej),e(Ej,lAo),e(ev,iAo),e(O,dAo),e(O,ov),e(ov,Iae),e(Iae,cAo),e(ov,mAo),e(ov,yj),e(yj,fAo),e(ov,gAo),e(O,hAo),e(O,rv),e(rv,jae),e(jae,uAo),e(rv,pAo),e(rv,wj),e(wj,_Ao),e(rv,bAo),e(O,vAo),e(O,tv),e(tv,Dae),e(Dae,TAo),e(tv,FAo),e(tv,Aj),e(Aj,CAo),e(tv,MAo),e(O,EAo),e(O,av),e(av,Nae),e(Nae,yAo),e(av,wAo),e(av,Lj),e(Lj,AAo),e(av,LAo),e(O,BAo),e(O,sv),e(sv,qae),e(qae,xAo),e(sv,kAo),e(sv,Bj),e(Bj,RAo),e(sv,SAo),e(O,PAo),e(O,nv),e(nv,Oae),e(Oae,$Ao),e(nv,IAo),e(nv,xj),e(xj,jAo),e(nv,DAo),e(O,NAo),e(O,lv),e(lv,Gae),e(Gae,qAo),e(lv,OAo),e(lv,kj),e(kj,GAo),e(lv,XAo),e(O,VAo),e(O,iv),e(iv,Xae),e(Xae,zAo),e(iv,WAo),e(iv,Rj),e(Rj,QAo),e(iv,HAo),e(O,UAo),e(O,dv),e(dv,Vae),e(Vae,JAo),e(dv,YAo),e(dv,Sj),e(Sj,KAo),e(dv,ZAo),e(Xe,e0o),e(Xe,cv),e(cv,o0o),e(cv,zae),e(zae,r0o),e(cv,t0o),e(cv,Wae),e(Wae,a0o),e(Xe,s0o),e(Xe,Qae),e(Qae,n0o),e(Xe,l0o),g(vw,Xe,null),b(d,yxe,_),b(d,_d,_),e(_d,mv),e(mv,Hae),g(Tw,Hae,null),e(_d,i0o),e(_d,Uae),e(Uae,d0o),b(d,wxe,_),b(d,tr,_),g(Fw,tr,null),e(tr,c0o),e(tr,bd),e(bd,m0o),e(bd,Jae),e(Jae,f0o),e(bd,g0o),e(bd,Yae),e(Yae,h0o),e(bd,u0o),e(tr,p0o),e(tr,Cw),e(Cw,_0o),e(Cw,Kae),e(Kae,b0o),e(Cw,v0o),e(tr,T0o),e(tr,Yr),g(Mw,Yr,null),e(Yr,F0o),e(Yr,Zae),e(Zae,C0o),e(Yr,M0o),e(Yr,vd),e(vd,E0o),e(vd,ese),e(ese,y0o),e(vd,w0o),e(vd,ose),e(ose,A0o),e(vd,L0o),e(Yr,B0o),e(Yr,rse),e(rse,x0o),e(Yr,k0o),g(Ew,Yr,null),e(tr,R0o),e(tr,Ve),g(yw,Ve,null),e(Ve,S0o),e(Ve,tse),e(tse,P0o),e(Ve,$0o),e(Ve,Ja),e(Ja,I0o),e(Ja,ase),e(ase,j0o),e(Ja,D0o),e(Ja,sse),e(sse,N0o),e(Ja,q0o),e(Ja,nse),e(nse,O0o),e(Ja,G0o),e(Ve,X0o),e(Ve,da),e(da,fv),e(fv,lse),e(lse,V0o),e(fv,z0o),e(fv,Pj),e(Pj,W0o),e(fv,Q0o),e(da,H0o),e(da,gv),e(gv,ise),e(ise,U0o),e(gv,J0o),e(gv,$j),e($j,Y0o),e(gv,K0o),e(da,Z0o),e(da,hv),e(hv,dse),e(dse,eLo),e(hv,oLo),e(hv,Ij),e(Ij,rLo),e(hv,tLo),e(da,aLo),e(da,uv),e(uv,cse),e(cse,sLo),e(uv,nLo),e(uv,jj),e(jj,lLo),e(uv,iLo),e(da,dLo),e(da,pv),e(pv,mse),e(mse,cLo),e(pv,mLo),e(pv,Dj),e(Dj,fLo),e(pv,gLo),e(Ve,hLo),e(Ve,_v),e(_v,uLo),e(_v,fse),e(fse,pLo),e(_v,_Lo),e(_v,gse),e(gse,bLo),e(Ve,vLo),e(Ve,hse),e(hse,TLo),e(Ve,FLo),g(ww,Ve,null),b(d,Axe,_),b(d,Td,_),e(Td,bv),e(bv,use),g(Aw,use,null),e(Td,CLo),e(Td,pse),e(pse,MLo),b(d,Lxe,_),b(d,ar,_),g(Lw,ar,null),e(ar,ELo),e(ar,Fd),e(Fd,yLo),e(Fd,_se),e(_se,wLo),e(Fd,ALo),e(Fd,bse),e(bse,LLo),e(Fd,BLo),e(ar,xLo),e(ar,Bw),e(Bw,kLo),e(Bw,vse),e(vse,RLo),e(Bw,SLo),e(ar,PLo),e(ar,Kr),g(xw,Kr,null),e(Kr,$Lo),e(Kr,Tse),e(Tse,ILo),e(Kr,jLo),e(Kr,Cd),e(Cd,DLo),e(Cd,Fse),e(Fse,NLo),e(Cd,qLo),e(Cd,Cse),e(Cse,OLo),e(Cd,GLo),e(Kr,XLo),e(Kr,Mse),e(Mse,VLo),e(Kr,zLo),g(kw,Kr,null),e(ar,WLo),e(ar,ze),g(Rw,ze,null),e(ze,QLo),e(ze,Ese),e(Ese,HLo),e(ze,ULo),e(ze,Ya),e(Ya,JLo),e(Ya,yse),e(yse,YLo),e(Ya,KLo),e(Ya,wse),e(wse,ZLo),e(Ya,e8o),e(Ya,Ase),e(Ase,o8o),e(Ya,r8o),e(ze,t8o),e(ze,N),e(N,vv),e(vv,Lse),e(Lse,a8o),e(vv,s8o),e(vv,Nj),e(Nj,n8o),e(vv,l8o),e(N,i8o),e(N,Tv),e(Tv,Bse),e(Bse,d8o),e(Tv,c8o),e(Tv,qj),e(qj,m8o),e(Tv,f8o),e(N,g8o),e(N,Fv),e(Fv,xse),e(xse,h8o),e(Fv,u8o),e(Fv,Oj),e(Oj,p8o),e(Fv,_8o),e(N,b8o),e(N,Cv),e(Cv,kse),e(kse,v8o),e(Cv,T8o),e(Cv,Gj),e(Gj,F8o),e(Cv,C8o),e(N,M8o),e(N,Mv),e(Mv,Rse),e(Rse,E8o),e(Mv,y8o),e(Mv,Xj),e(Xj,w8o),e(Mv,A8o),e(N,L8o),e(N,Ev),e(Ev,Sse),e(Sse,B8o),e(Ev,x8o),e(Ev,Vj),e(Vj,k8o),e(Ev,R8o),e(N,S8o),e(N,yv),e(yv,Pse),e(Pse,P8o),e(yv,$8o),e(yv,zj),e(zj,I8o),e(yv,j8o),e(N,D8o),e(N,wv),e(wv,$se),e($se,N8o),e(wv,q8o),e(wv,Wj),e(Wj,O8o),e(wv,G8o),e(N,X8o),e(N,Av),e(Av,Ise),e(Ise,V8o),e(Av,z8o),e(Av,Qj),e(Qj,W8o),e(Av,Q8o),e(N,H8o),e(N,Lv),e(Lv,jse),e(jse,U8o),e(Lv,J8o),e(Lv,Hj),e(Hj,Y8o),e(Lv,K8o),e(N,Z8o),e(N,Bv),e(Bv,Dse),e(Dse,e7o),e(Bv,o7o),e(Bv,Uj),e(Uj,r7o),e(Bv,t7o),e(N,a7o),e(N,xv),e(xv,Nse),e(Nse,s7o),e(xv,n7o),e(xv,Jj),e(Jj,l7o),e(xv,i7o),e(N,d7o),e(N,kv),e(kv,qse),e(qse,c7o),e(kv,m7o),e(kv,Yj),e(Yj,f7o),e(kv,g7o),e(N,h7o),e(N,Rv),e(Rv,Ose),e(Ose,u7o),e(Rv,p7o),e(Rv,Kj),e(Kj,_7o),e(Rv,b7o),e(N,v7o),e(N,Sv),e(Sv,Gse),e(Gse,T7o),e(Sv,F7o),e(Sv,Zj),e(Zj,C7o),e(Sv,M7o),e(N,E7o),e(N,Pv),e(Pv,Xse),e(Xse,y7o),e(Pv,w7o),e(Pv,eD),e(eD,A7o),e(Pv,L7o),e(N,B7o),e(N,$v),e($v,Vse),e(Vse,x7o),e($v,k7o),e($v,oD),e(oD,R7o),e($v,S7o),e(N,P7o),e(N,Iv),e(Iv,zse),e(zse,$7o),e(Iv,I7o),e(Iv,rD),e(rD,j7o),e(Iv,D7o),e(N,N7o),e(N,jv),e(jv,Wse),e(Wse,q7o),e(jv,O7o),e(jv,tD),e(tD,G7o),e(jv,X7o),e(N,V7o),e(N,Dv),e(Dv,Qse),e(Qse,z7o),e(Dv,W7o),e(Dv,aD),e(aD,Q7o),e(Dv,H7o),e(N,U7o),e(N,Nv),e(Nv,Hse),e(Hse,J7o),e(Nv,Y7o),e(Nv,sD),e(sD,K7o),e(Nv,Z7o),e(N,e9o),e(N,qv),e(qv,Use),e(Use,o9o),e(qv,r9o),e(qv,nD),e(nD,t9o),e(qv,a9o),e(N,s9o),e(N,Ov),e(Ov,Jse),e(Jse,n9o),e(Ov,l9o),e(Ov,lD),e(lD,i9o),e(Ov,d9o),e(N,c9o),e(N,Gv),e(Gv,Yse),e(Yse,m9o),e(Gv,f9o),e(Gv,iD),e(iD,g9o),e(Gv,h9o),e(N,u9o),e(N,Xv),e(Xv,Kse),e(Kse,p9o),e(Xv,_9o),e(Xv,dD),e(dD,b9o),e(Xv,v9o),e(N,T9o),e(N,Vv),e(Vv,Zse),e(Zse,F9o),e(Vv,C9o),e(Vv,cD),e(cD,M9o),e(Vv,E9o),e(N,y9o),e(N,zv),e(zv,ene),e(ene,w9o),e(zv,A9o),e(zv,mD),e(mD,L9o),e(zv,B9o),e(N,x9o),e(N,Wv),e(Wv,one),e(one,k9o),e(Wv,R9o),e(Wv,fD),e(fD,S9o),e(Wv,P9o),e(N,$9o),e(N,Qv),e(Qv,rne),e(rne,I9o),e(Qv,j9o),e(Qv,gD),e(gD,D9o),e(Qv,N9o),e(N,q9o),e(N,Hv),e(Hv,tne),e(tne,O9o),e(Hv,G9o),e(Hv,hD),e(hD,X9o),e(Hv,V9o),e(N,z9o),e(N,Uv),e(Uv,ane),e(ane,W9o),e(Uv,Q9o),e(Uv,uD),e(uD,H9o),e(Uv,U9o),e(N,J9o),e(N,Jv),e(Jv,sne),e(sne,Y9o),e(Jv,K9o),e(Jv,pD),e(pD,Z9o),e(Jv,eBo),e(N,oBo),e(N,Yv),e(Yv,nne),e(nne,rBo),e(Yv,tBo),e(Yv,_D),e(_D,aBo),e(Yv,sBo),e(ze,nBo),e(ze,Kv),e(Kv,lBo),e(Kv,lne),e(lne,iBo),e(Kv,dBo),e(Kv,ine),e(ine,cBo),e(ze,mBo),e(ze,dne),e(dne,fBo),e(ze,gBo),g(Sw,ze,null),b(d,Bxe,_),b(d,Md,_),e(Md,Zv),e(Zv,cne),g(Pw,cne,null),e(Md,hBo),e(Md,mne),e(mne,uBo),b(d,xxe,_),b(d,sr,_),g($w,sr,null),e(sr,pBo),e(sr,Ed),e(Ed,_Bo),e(Ed,fne),e(fne,bBo),e(Ed,vBo),e(Ed,gne),e(gne,TBo),e(Ed,FBo),e(sr,CBo),e(sr,Iw),e(Iw,MBo),e(Iw,hne),e(hne,EBo),e(Iw,yBo),e(sr,wBo),e(sr,Zr),g(jw,Zr,null),e(Zr,ABo),e(Zr,une),e(une,LBo),e(Zr,BBo),e(Zr,yd),e(yd,xBo),e(yd,pne),e(pne,kBo),e(yd,RBo),e(yd,_ne),e(_ne,SBo),e(yd,PBo),e(Zr,$Bo),e(Zr,bne),e(bne,IBo),e(Zr,jBo),g(Dw,Zr,null),e(sr,DBo),e(sr,We),g(Nw,We,null),e(We,NBo),e(We,vne),e(vne,qBo),e(We,OBo),e(We,Ka),e(Ka,GBo),e(Ka,Tne),e(Tne,XBo),e(Ka,VBo),e(Ka,Fne),e(Fne,zBo),e(Ka,WBo),e(Ka,Cne),e(Cne,QBo),e(Ka,HBo),e(We,UBo),e(We,R),e(R,eT),e(eT,Mne),e(Mne,JBo),e(eT,YBo),e(eT,bD),e(bD,KBo),e(eT,ZBo),e(R,exo),e(R,oT),e(oT,Ene),e(Ene,oxo),e(oT,rxo),e(oT,vD),e(vD,txo),e(oT,axo),e(R,sxo),e(R,rT),e(rT,yne),e(yne,nxo),e(rT,lxo),e(rT,TD),e(TD,ixo),e(rT,dxo),e(R,cxo),e(R,tT),e(tT,wne),e(wne,mxo),e(tT,fxo),e(tT,FD),e(FD,gxo),e(tT,hxo),e(R,uxo),e(R,aT),e(aT,Ane),e(Ane,pxo),e(aT,_xo),e(aT,CD),e(CD,bxo),e(aT,vxo),e(R,Txo),e(R,sT),e(sT,Lne),e(Lne,Fxo),e(sT,Cxo),e(sT,MD),e(MD,Mxo),e(sT,Exo),e(R,yxo),e(R,nT),e(nT,Bne),e(Bne,wxo),e(nT,Axo),e(nT,ED),e(ED,Lxo),e(nT,Bxo),e(R,xxo),e(R,lT),e(lT,xne),e(xne,kxo),e(lT,Rxo),e(lT,yD),e(yD,Sxo),e(lT,Pxo),e(R,$xo),e(R,iT),e(iT,kne),e(kne,Ixo),e(iT,jxo),e(iT,wD),e(wD,Dxo),e(iT,Nxo),e(R,qxo),e(R,dT),e(dT,Rne),e(Rne,Oxo),e(dT,Gxo),e(dT,AD),e(AD,Xxo),e(dT,Vxo),e(R,zxo),e(R,cT),e(cT,Sne),e(Sne,Wxo),e(cT,Qxo),e(cT,LD),e(LD,Hxo),e(cT,Uxo),e(R,Jxo),e(R,mT),e(mT,Pne),e(Pne,Yxo),e(mT,Kxo),e(mT,BD),e(BD,Zxo),e(mT,eko),e(R,oko),e(R,fT),e(fT,$ne),e($ne,rko),e(fT,tko),e(fT,xD),e(xD,ako),e(fT,sko),e(R,nko),e(R,gT),e(gT,Ine),e(Ine,lko),e(gT,iko),e(gT,kD),e(kD,dko),e(gT,cko),e(R,mko),e(R,hT),e(hT,jne),e(jne,fko),e(hT,gko),e(hT,RD),e(RD,hko),e(hT,uko),e(R,pko),e(R,uT),e(uT,Dne),e(Dne,_ko),e(uT,bko),e(uT,SD),e(SD,vko),e(uT,Tko),e(R,Fko),e(R,pT),e(pT,Nne),e(Nne,Cko),e(pT,Mko),e(pT,PD),e(PD,Eko),e(pT,yko),e(R,wko),e(R,_T),e(_T,qne),e(qne,Ako),e(_T,Lko),e(_T,$D),e($D,Bko),e(_T,xko),e(R,kko),e(R,bT),e(bT,One),e(One,Rko),e(bT,Sko),e(bT,ID),e(ID,Pko),e(bT,$ko),e(R,Iko),e(R,vT),e(vT,Gne),e(Gne,jko),e(vT,Dko),e(vT,jD),e(jD,Nko),e(vT,qko),e(R,Oko),e(R,TT),e(TT,Xne),e(Xne,Gko),e(TT,Xko),e(TT,DD),e(DD,Vko),e(TT,zko),e(R,Wko),e(R,FT),e(FT,Vne),e(Vne,Qko),e(FT,Hko),e(FT,ND),e(ND,Uko),e(FT,Jko),e(R,Yko),e(R,CT),e(CT,zne),e(zne,Kko),e(CT,Zko),e(CT,qD),e(qD,eRo),e(CT,oRo),e(R,rRo),e(R,MT),e(MT,Wne),e(Wne,tRo),e(MT,aRo),e(MT,OD),e(OD,sRo),e(MT,nRo),e(R,lRo),e(R,ET),e(ET,Qne),e(Qne,iRo),e(ET,dRo),e(ET,GD),e(GD,cRo),e(ET,mRo),e(R,fRo),e(R,yT),e(yT,Hne),e(Hne,gRo),e(yT,hRo),e(yT,XD),e(XD,uRo),e(yT,pRo),e(R,_Ro),e(R,wT),e(wT,Une),e(Une,bRo),e(wT,vRo),e(wT,VD),e(VD,TRo),e(wT,FRo),e(R,CRo),e(R,AT),e(AT,Jne),e(Jne,MRo),e(AT,ERo),e(AT,zD),e(zD,yRo),e(AT,wRo),e(R,ARo),e(R,LT),e(LT,Yne),e(Yne,LRo),e(LT,BRo),e(LT,WD),e(WD,xRo),e(LT,kRo),e(R,RRo),e(R,BT),e(BT,Kne),e(Kne,SRo),e(BT,PRo),e(BT,QD),e(QD,$Ro),e(BT,IRo),e(R,jRo),e(R,xT),e(xT,Zne),e(Zne,DRo),e(xT,NRo),e(xT,HD),e(HD,qRo),e(xT,ORo),e(R,GRo),e(R,kT),e(kT,ele),e(ele,XRo),e(kT,VRo),e(kT,UD),e(UD,zRo),e(kT,WRo),e(R,QRo),e(R,RT),e(RT,ole),e(ole,HRo),e(RT,URo),e(RT,JD),e(JD,JRo),e(RT,YRo),e(R,KRo),e(R,ST),e(ST,rle),e(rle,ZRo),e(ST,eSo),e(ST,YD),e(YD,oSo),e(ST,rSo),e(R,tSo),e(R,PT),e(PT,tle),e(tle,aSo),e(PT,sSo),e(PT,KD),e(KD,nSo),e(PT,lSo),e(R,iSo),e(R,$T),e($T,ale),e(ale,dSo),e($T,cSo),e($T,ZD),e(ZD,mSo),e($T,fSo),e(R,gSo),e(R,IT),e(IT,sle),e(sle,hSo),e(IT,uSo),e(IT,eN),e(eN,pSo),e(IT,_So),e(R,bSo),e(R,jT),e(jT,nle),e(nle,vSo),e(jT,TSo),e(jT,oN),e(oN,FSo),e(jT,CSo),e(R,MSo),e(R,DT),e(DT,lle),e(lle,ESo),e(DT,ySo),e(DT,rN),e(rN,wSo),e(DT,ASo),e(We,LSo),e(We,NT),e(NT,BSo),e(NT,ile),e(ile,xSo),e(NT,kSo),e(NT,dle),e(dle,RSo),e(We,SSo),e(We,cle),e(cle,PSo),e(We,$So),g(qw,We,null),b(d,kxe,_),b(d,wd,_),e(wd,qT),e(qT,mle),g(Ow,mle,null),e(wd,ISo),e(wd,fle),e(fle,jSo),b(d,Rxe,_),b(d,nr,_),g(Gw,nr,null),e(nr,DSo),e(nr,Ad),e(Ad,NSo),e(Ad,gle),e(gle,qSo),e(Ad,OSo),e(Ad,hle),e(hle,GSo),e(Ad,XSo),e(nr,VSo),e(nr,Xw),e(Xw,zSo),e(Xw,ule),e(ule,WSo),e(Xw,QSo),e(nr,HSo),e(nr,et),g(Vw,et,null),e(et,USo),e(et,ple),e(ple,JSo),e(et,YSo),e(et,Ld),e(Ld,KSo),e(Ld,_le),e(_le,ZSo),e(Ld,ePo),e(Ld,ble),e(ble,oPo),e(Ld,rPo),e(et,tPo),e(et,vle),e(vle,aPo),e(et,sPo),g(zw,et,null),e(nr,nPo),e(nr,Qe),g(Ww,Qe,null),e(Qe,lPo),e(Qe,Tle),e(Tle,iPo),e(Qe,dPo),e(Qe,Za),e(Za,cPo),e(Za,Fle),e(Fle,mPo),e(Za,fPo),e(Za,Cle),e(Cle,gPo),e(Za,hPo),e(Za,Mle),e(Mle,uPo),e(Za,pPo),e(Qe,_Po),e(Qe,Ele),e(Ele,OT),e(OT,yle),e(yle,bPo),e(OT,vPo),e(OT,tN),e(tN,TPo),e(OT,FPo),e(Qe,CPo),e(Qe,GT),e(GT,MPo),e(GT,wle),e(wle,EPo),e(GT,yPo),e(GT,Ale),e(Ale,wPo),e(Qe,APo),e(Qe,Lle),e(Lle,LPo),e(Qe,BPo),g(Qw,Qe,null),b(d,Sxe,_),b(d,Bd,_),e(Bd,XT),e(XT,Ble),g(Hw,Ble,null),e(Bd,xPo),e(Bd,xle),e(xle,kPo),b(d,Pxe,_),b(d,lr,_),g(Uw,lr,null),e(lr,RPo),e(lr,xd),e(xd,SPo),e(xd,kle),e(kle,PPo),e(xd,$Po),e(xd,Rle),e(Rle,IPo),e(xd,jPo),e(lr,DPo),e(lr,Jw),e(Jw,NPo),e(Jw,Sle),e(Sle,qPo),e(Jw,OPo),e(lr,GPo),e(lr,ot),g(Yw,ot,null),e(ot,XPo),e(ot,Ple),e(Ple,VPo),e(ot,zPo),e(ot,kd),e(kd,WPo),e(kd,$le),e($le,QPo),e(kd,HPo),e(kd,Ile),e(Ile,UPo),e(kd,JPo),e(ot,YPo),e(ot,jle),e(jle,KPo),e(ot,ZPo),g(Kw,ot,null),e(lr,e$o),e(lr,He),g(Zw,He,null),e(He,o$o),e(He,Dle),e(Dle,r$o),e(He,t$o),e(He,es),e(es,a$o),e(es,Nle),e(Nle,s$o),e(es,n$o),e(es,qle),e(qle,l$o),e(es,i$o),e(es,Ole),e(Ole,d$o),e(es,c$o),e(He,m$o),e(He,Fe),e(Fe,VT),e(VT,Gle),e(Gle,f$o),e(VT,g$o),e(VT,aN),e(aN,h$o),e(VT,u$o),e(Fe,p$o),e(Fe,zT),e(zT,Xle),e(Xle,_$o),e(zT,b$o),e(zT,sN),e(sN,v$o),e(zT,T$o),e(Fe,F$o),e(Fe,qn),e(qn,Vle),e(Vle,C$o),e(qn,M$o),e(qn,nN),e(nN,E$o),e(qn,y$o),e(qn,lN),e(lN,w$o),e(qn,A$o),e(Fe,L$o),e(Fe,WT),e(WT,zle),e(zle,B$o),e(WT,x$o),e(WT,iN),e(iN,k$o),e(WT,R$o),e(Fe,S$o),e(Fe,ma),e(ma,Wle),e(Wle,P$o),e(ma,$$o),e(ma,dN),e(dN,I$o),e(ma,j$o),e(ma,cN),e(cN,D$o),e(ma,N$o),e(ma,mN),e(mN,q$o),e(ma,O$o),e(Fe,G$o),e(Fe,QT),e(QT,Qle),e(Qle,X$o),e(QT,V$o),e(QT,fN),e(fN,z$o),e(QT,W$o),e(Fe,Q$o),e(Fe,HT),e(HT,Hle),e(Hle,H$o),e(HT,U$o),e(HT,gN),e(gN,J$o),e(HT,Y$o),e(Fe,K$o),e(Fe,UT),e(UT,Ule),e(Ule,Z$o),e(UT,eIo),e(UT,hN),e(hN,oIo),e(UT,rIo),e(Fe,tIo),e(Fe,JT),e(JT,Jle),e(Jle,aIo),e(JT,sIo),e(JT,uN),e(uN,nIo),e(JT,lIo),e(He,iIo),e(He,YT),e(YT,dIo),e(YT,Yle),e(Yle,cIo),e(YT,mIo),e(YT,Kle),e(Kle,fIo),e(He,gIo),e(He,Zle),e(Zle,hIo),e(He,uIo),g(e6,He,null),b(d,$xe,_),b(d,Rd,_),e(Rd,KT),e(KT,eie),g(o6,eie,null),e(Rd,pIo),e(Rd,oie),e(oie,_Io),b(d,Ixe,_),b(d,ir,_),g(r6,ir,null),e(ir,bIo),e(ir,Sd),e(Sd,vIo),e(Sd,rie),e(rie,TIo),e(Sd,FIo),e(Sd,tie),e(tie,CIo),e(Sd,MIo),e(ir,EIo),e(ir,t6),e(t6,yIo),e(t6,aie),e(aie,wIo),e(t6,AIo),e(ir,LIo),e(ir,rt),g(a6,rt,null),e(rt,BIo),e(rt,sie),e(sie,xIo),e(rt,kIo),e(rt,Pd),e(Pd,RIo),e(Pd,nie),e(nie,SIo),e(Pd,PIo),e(Pd,lie),e(lie,$Io),e(Pd,IIo),e(rt,jIo),e(rt,iie),e(iie,DIo),e(rt,NIo),g(s6,rt,null),e(ir,qIo),e(ir,Ue),g(n6,Ue,null),e(Ue,OIo),e(Ue,die),e(die,GIo),e(Ue,XIo),e(Ue,os),e(os,VIo),e(os,cie),e(cie,zIo),e(os,WIo),e(os,mie),e(mie,QIo),e(os,HIo),e(os,fie),e(fie,UIo),e(os,JIo),e(Ue,YIo),e(Ue,gie),e(gie,ZT),e(ZT,hie),e(hie,KIo),e(ZT,ZIo),e(ZT,pN),e(pN,ejo),e(ZT,ojo),e(Ue,rjo),e(Ue,e1),e(e1,tjo),e(e1,uie),e(uie,ajo),e(e1,sjo),e(e1,pie),e(pie,njo),e(Ue,ljo),e(Ue,_ie),e(_ie,ijo),e(Ue,djo),g(l6,Ue,null),b(d,jxe,_),b(d,$d,_),e($d,o1),e(o1,bie),g(i6,bie,null),e($d,cjo),e($d,vie),e(vie,mjo),b(d,Dxe,_),b(d,dr,_),g(d6,dr,null),e(dr,fjo),e(dr,Id),e(Id,gjo),e(Id,Tie),e(Tie,hjo),e(Id,ujo),e(Id,Fie),e(Fie,pjo),e(Id,_jo),e(dr,bjo),e(dr,c6),e(c6,vjo),e(c6,Cie),e(Cie,Tjo),e(c6,Fjo),e(dr,Cjo),e(dr,tt),g(m6,tt,null),e(tt,Mjo),e(tt,Mie),e(Mie,Ejo),e(tt,yjo),e(tt,jd),e(jd,wjo),e(jd,Eie),e(Eie,Ajo),e(jd,Ljo),e(jd,yie),e(yie,Bjo),e(jd,xjo),e(tt,kjo),e(tt,wie),e(wie,Rjo),e(tt,Sjo),g(f6,tt,null),e(dr,Pjo),e(dr,Je),g(g6,Je,null),e(Je,$jo),e(Je,Aie),e(Aie,Ijo),e(Je,jjo),e(Je,rs),e(rs,Djo),e(rs,Lie),e(Lie,Njo),e(rs,qjo),e(rs,Bie),e(Bie,Ojo),e(rs,Gjo),e(rs,xie),e(xie,Xjo),e(rs,Vjo),e(Je,zjo),e(Je,xe),e(xe,r1),e(r1,kie),e(kie,Wjo),e(r1,Qjo),e(r1,_N),e(_N,Hjo),e(r1,Ujo),e(xe,Jjo),e(xe,t1),e(t1,Rie),e(Rie,Yjo),e(t1,Kjo),e(t1,bN),e(bN,Zjo),e(t1,eDo),e(xe,oDo),e(xe,a1),e(a1,Sie),e(Sie,rDo),e(a1,tDo),e(a1,vN),e(vN,aDo),e(a1,sDo),e(xe,nDo),e(xe,s1),e(s1,Pie),e(Pie,lDo),e(s1,iDo),e(s1,TN),e(TN,dDo),e(s1,cDo),e(xe,mDo),e(xe,n1),e(n1,$ie),e($ie,fDo),e(n1,gDo),e(n1,FN),e(FN,hDo),e(n1,uDo),e(xe,pDo),e(xe,l1),e(l1,Iie),e(Iie,_Do),e(l1,bDo),e(l1,CN),e(CN,vDo),e(l1,TDo),e(xe,FDo),e(xe,i1),e(i1,jie),e(jie,CDo),e(i1,MDo),e(i1,MN),e(MN,EDo),e(i1,yDo),e(xe,wDo),e(xe,d1),e(d1,Die),e(Die,ADo),e(d1,LDo),e(d1,EN),e(EN,BDo),e(d1,xDo),e(Je,kDo),e(Je,c1),e(c1,RDo),e(c1,Nie),e(Nie,SDo),e(c1,PDo),e(c1,qie),e(qie,$Do),e(Je,IDo),e(Je,Oie),e(Oie,jDo),e(Je,DDo),g(h6,Je,null),b(d,Nxe,_),b(d,Dd,_),e(Dd,m1),e(m1,Gie),g(u6,Gie,null),e(Dd,NDo),e(Dd,Xie),e(Xie,qDo),b(d,qxe,_),b(d,cr,_),g(p6,cr,null),e(cr,ODo),e(cr,Nd),e(Nd,GDo),e(Nd,Vie),e(Vie,XDo),e(Nd,VDo),e(Nd,zie),e(zie,zDo),e(Nd,WDo),e(cr,QDo),e(cr,_6),e(_6,HDo),e(_6,Wie),e(Wie,UDo),e(_6,JDo),e(cr,YDo),e(cr,at),g(b6,at,null),e(at,KDo),e(at,Qie),e(Qie,ZDo),e(at,eNo),e(at,qd),e(qd,oNo),e(qd,Hie),e(Hie,rNo),e(qd,tNo),e(qd,Uie),e(Uie,aNo),e(qd,sNo),e(at,nNo),e(at,Jie),e(Jie,lNo),e(at,iNo),g(v6,at,null),e(cr,dNo),e(cr,Ye),g(T6,Ye,null),e(Ye,cNo),e(Ye,Yie),e(Yie,mNo),e(Ye,fNo),e(Ye,ts),e(ts,gNo),e(ts,Kie),e(Kie,hNo),e(ts,uNo),e(ts,Zie),e(Zie,pNo),e(ts,_No),e(ts,ede),e(ede,bNo),e(ts,vNo),e(Ye,TNo),e(Ye,as),e(as,f1),e(f1,ode),e(ode,FNo),e(f1,CNo),e(f1,yN),e(yN,MNo),e(f1,ENo),e(as,yNo),e(as,g1),e(g1,rde),e(rde,wNo),e(g1,ANo),e(g1,wN),e(wN,LNo),e(g1,BNo),e(as,xNo),e(as,h1),e(h1,tde),e(tde,kNo),e(h1,RNo),e(h1,AN),e(AN,SNo),e(h1,PNo),e(as,$No),e(as,u1),e(u1,ade),e(ade,INo),e(u1,jNo),e(u1,LN),e(LN,DNo),e(u1,NNo),e(Ye,qNo),e(Ye,p1),e(p1,ONo),e(p1,sde),e(sde,GNo),e(p1,XNo),e(p1,nde),e(nde,VNo),e(Ye,zNo),e(Ye,lde),e(lde,WNo),e(Ye,QNo),g(F6,Ye,null),b(d,Oxe,_),b(d,Od,_),e(Od,_1),e(_1,ide),g(C6,ide,null),e(Od,HNo),e(Od,dde),e(dde,UNo),b(d,Gxe,_),b(d,mr,_),g(M6,mr,null),e(mr,JNo),e(mr,Gd),e(Gd,YNo),e(Gd,cde),e(cde,KNo),e(Gd,ZNo),e(Gd,mde),e(mde,eqo),e(Gd,oqo),e(mr,rqo),e(mr,E6),e(E6,tqo),e(E6,fde),e(fde,aqo),e(E6,sqo),e(mr,nqo),e(mr,st),g(y6,st,null),e(st,lqo),e(st,gde),e(gde,iqo),e(st,dqo),e(st,Xd),e(Xd,cqo),e(Xd,hde),e(hde,mqo),e(Xd,fqo),e(Xd,ude),e(ude,gqo),e(Xd,hqo),e(st,uqo),e(st,pde),e(pde,pqo),e(st,_qo),g(w6,st,null),e(mr,bqo),e(mr,Ke),g(A6,Ke,null),e(Ke,vqo),e(Ke,_de),e(_de,Tqo),e(Ke,Fqo),e(Ke,ss),e(ss,Cqo),e(ss,bde),e(bde,Mqo),e(ss,Eqo),e(ss,vde),e(vde,yqo),e(ss,wqo),e(ss,Tde),e(Tde,Aqo),e(ss,Lqo),e(Ke,Bqo),e(Ke,ke),e(ke,b1),e(b1,Fde),e(Fde,xqo),e(b1,kqo),e(b1,BN),e(BN,Rqo),e(b1,Sqo),e(ke,Pqo),e(ke,v1),e(v1,Cde),e(Cde,$qo),e(v1,Iqo),e(v1,xN),e(xN,jqo),e(v1,Dqo),e(ke,Nqo),e(ke,T1),e(T1,Mde),e(Mde,qqo),e(T1,Oqo),e(T1,kN),e(kN,Gqo),e(T1,Xqo),e(ke,Vqo),e(ke,F1),e(F1,Ede),e(Ede,zqo),e(F1,Wqo),e(F1,RN),e(RN,Qqo),e(F1,Hqo),e(ke,Uqo),e(ke,C1),e(C1,yde),e(yde,Jqo),e(C1,Yqo),e(C1,SN),e(SN,Kqo),e(C1,Zqo),e(ke,eOo),e(ke,M1),e(M1,wde),e(wde,oOo),e(M1,rOo),e(M1,PN),e(PN,tOo),e(M1,aOo),e(ke,sOo),e(ke,E1),e(E1,Ade),e(Ade,nOo),e(E1,lOo),e(E1,$N),e($N,iOo),e(E1,dOo),e(ke,cOo),e(ke,y1),e(y1,Lde),e(Lde,mOo),e(y1,fOo),e(y1,IN),e(IN,gOo),e(y1,hOo),e(Ke,uOo),e(Ke,w1),e(w1,pOo),e(w1,Bde),e(Bde,_Oo),e(w1,bOo),e(w1,xde),e(xde,vOo),e(Ke,TOo),e(Ke,kde),e(kde,FOo),e(Ke,COo),g(L6,Ke,null),b(d,Xxe,_),b(d,Vd,_),e(Vd,A1),e(A1,Rde),g(B6,Rde,null),e(Vd,MOo),e(Vd,Sde),e(Sde,EOo),b(d,Vxe,_),b(d,fr,_),g(x6,fr,null),e(fr,yOo),e(fr,zd),e(zd,wOo),e(zd,Pde),e(Pde,AOo),e(zd,LOo),e(zd,$de),e($de,BOo),e(zd,xOo),e(fr,kOo),e(fr,k6),e(k6,ROo),e(k6,Ide),e(Ide,SOo),e(k6,POo),e(fr,$Oo),e(fr,nt),g(R6,nt,null),e(nt,IOo),e(nt,jde),e(jde,jOo),e(nt,DOo),e(nt,Wd),e(Wd,NOo),e(Wd,Dde),e(Dde,qOo),e(Wd,OOo),e(Wd,Nde),e(Nde,GOo),e(Wd,XOo),e(nt,VOo),e(nt,qde),e(qde,zOo),e(nt,WOo),g(S6,nt,null),e(fr,QOo),e(fr,Ze),g(P6,Ze,null),e(Ze,HOo),e(Ze,Ode),e(Ode,UOo),e(Ze,JOo),e(Ze,ns),e(ns,YOo),e(ns,Gde),e(Gde,KOo),e(ns,ZOo),e(ns,Xde),e(Xde,eGo),e(ns,oGo),e(ns,Vde),e(Vde,rGo),e(ns,tGo),e(Ze,aGo),e(Ze,$6),e($6,L1),e(L1,zde),e(zde,sGo),e(L1,nGo),e(L1,jN),e(jN,lGo),e(L1,iGo),e($6,dGo),e($6,B1),e(B1,Wde),e(Wde,cGo),e(B1,mGo),e(B1,DN),e(DN,fGo),e(B1,gGo),e(Ze,hGo),e(Ze,x1),e(x1,uGo),e(x1,Qde),e(Qde,pGo),e(x1,_Go),e(x1,Hde),e(Hde,bGo),e(Ze,vGo),e(Ze,Ude),e(Ude,TGo),e(Ze,FGo),g(I6,Ze,null),b(d,zxe,_),b(d,Qd,_),e(Qd,k1),e(k1,Jde),g(j6,Jde,null),e(Qd,CGo),e(Qd,Yde),e(Yde,MGo),b(d,Wxe,_),b(d,gr,_),g(D6,gr,null),e(gr,EGo),e(gr,Hd),e(Hd,yGo),e(Hd,Kde),e(Kde,wGo),e(Hd,AGo),e(Hd,Zde),e(Zde,LGo),e(Hd,BGo),e(gr,xGo),e(gr,N6),e(N6,kGo),e(N6,ece),e(ece,RGo),e(N6,SGo),e(gr,PGo),e(gr,lt),g(q6,lt,null),e(lt,$Go),e(lt,oce),e(oce,IGo),e(lt,jGo),e(lt,Ud),e(Ud,DGo),e(Ud,rce),e(rce,NGo),e(Ud,qGo),e(Ud,tce),e(tce,OGo),e(Ud,GGo),e(lt,XGo),e(lt,ace),e(ace,VGo),e(lt,zGo),g(O6,lt,null),e(gr,WGo),e(gr,eo),g(G6,eo,null),e(eo,QGo),e(eo,sce),e(sce,HGo),e(eo,UGo),e(eo,ls),e(ls,JGo),e(ls,nce),e(nce,YGo),e(ls,KGo),e(ls,lce),e(lce,ZGo),e(ls,eXo),e(ls,ice),e(ice,oXo),e(ls,rXo),e(eo,tXo),e(eo,is),e(is,R1),e(R1,dce),e(dce,aXo),e(R1,sXo),e(R1,NN),e(NN,nXo),e(R1,lXo),e(is,iXo),e(is,S1),e(S1,cce),e(cce,dXo),e(S1,cXo),e(S1,qN),e(qN,mXo),e(S1,fXo),e(is,gXo),e(is,P1),e(P1,mce),e(mce,hXo),e(P1,uXo),e(P1,ON),e(ON,pXo),e(P1,_Xo),e(is,bXo),e(is,$1),e($1,fce),e(fce,vXo),e($1,TXo),e($1,GN),e(GN,FXo),e($1,CXo),e(eo,MXo),e(eo,I1),e(I1,EXo),e(I1,gce),e(gce,yXo),e(I1,wXo),e(I1,hce),e(hce,AXo),e(eo,LXo),e(eo,uce),e(uce,BXo),e(eo,xXo),g(X6,eo,null),b(d,Qxe,_),b(d,Jd,_),e(Jd,j1),e(j1,pce),g(V6,pce,null),e(Jd,kXo),e(Jd,_ce),e(_ce,RXo),b(d,Hxe,_),b(d,hr,_),g(z6,hr,null),e(hr,SXo),e(hr,Yd),e(Yd,PXo),e(Yd,bce),e(bce,$Xo),e(Yd,IXo),e(Yd,vce),e(vce,jXo),e(Yd,DXo),e(hr,NXo),e(hr,W6),e(W6,qXo),e(W6,Tce),e(Tce,OXo),e(W6,GXo),e(hr,XXo),e(hr,it),g(Q6,it,null),e(it,VXo),e(it,Fce),e(Fce,zXo),e(it,WXo),e(it,Kd),e(Kd,QXo),e(Kd,Cce),e(Cce,HXo),e(Kd,UXo),e(Kd,Mce),e(Mce,JXo),e(Kd,YXo),e(it,KXo),e(it,Ece),e(Ece,ZXo),e(it,eVo),g(H6,it,null),e(hr,oVo),e(hr,oo),g(U6,oo,null),e(oo,rVo),e(oo,yce),e(yce,tVo),e(oo,aVo),e(oo,ds),e(ds,sVo),e(ds,wce),e(wce,nVo),e(ds,lVo),e(ds,Ace),e(Ace,iVo),e(ds,dVo),e(ds,Lce),e(Lce,cVo),e(ds,mVo),e(oo,fVo),e(oo,Zd),e(Zd,D1),e(D1,Bce),e(Bce,gVo),e(D1,hVo),e(D1,XN),e(XN,uVo),e(D1,pVo),e(Zd,_Vo),e(Zd,N1),e(N1,xce),e(xce,bVo),e(N1,vVo),e(N1,VN),e(VN,TVo),e(N1,FVo),e(Zd,CVo),e(Zd,q1),e(q1,kce),e(kce,MVo),e(q1,EVo),e(q1,zN),e(zN,yVo),e(q1,wVo),e(oo,AVo),e(oo,O1),e(O1,LVo),e(O1,Rce),e(Rce,BVo),e(O1,xVo),e(O1,Sce),e(Sce,kVo),e(oo,RVo),e(oo,Pce),e(Pce,SVo),e(oo,PVo),g(J6,oo,null),b(d,Uxe,_),b(d,ec,_),e(ec,G1),e(G1,$ce),g(Y6,$ce,null),e(ec,$Vo),e(ec,Ice),e(Ice,IVo),b(d,Jxe,_),b(d,ur,_),g(K6,ur,null),e(ur,jVo),e(ur,oc),e(oc,DVo),e(oc,jce),e(jce,NVo),e(oc,qVo),e(oc,Dce),e(Dce,OVo),e(oc,GVo),e(ur,XVo),e(ur,Z6),e(Z6,VVo),e(Z6,Nce),e(Nce,zVo),e(Z6,WVo),e(ur,QVo),e(ur,dt),g(eA,dt,null),e(dt,HVo),e(dt,qce),e(qce,UVo),e(dt,JVo),e(dt,rc),e(rc,YVo),e(rc,Oce),e(Oce,KVo),e(rc,ZVo),e(rc,Gce),e(Gce,ezo),e(rc,ozo),e(dt,rzo),e(dt,Xce),e(Xce,tzo),e(dt,azo),g(oA,dt,null),e(ur,szo),e(ur,ro),g(rA,ro,null),e(ro,nzo),e(ro,Vce),e(Vce,lzo),e(ro,izo),e(ro,cs),e(cs,dzo),e(cs,zce),e(zce,czo),e(cs,mzo),e(cs,Wce),e(Wce,fzo),e(cs,gzo),e(cs,Qce),e(Qce,hzo),e(cs,uzo),e(ro,pzo),e(ro,Hce),e(Hce,X1),e(X1,Uce),e(Uce,_zo),e(X1,bzo),e(X1,WN),e(WN,vzo),e(X1,Tzo),e(ro,Fzo),e(ro,V1),e(V1,Czo),e(V1,Jce),e(Jce,Mzo),e(V1,Ezo),e(V1,Yce),e(Yce,yzo),e(ro,wzo),e(ro,Kce),e(Kce,Azo),e(ro,Lzo),g(tA,ro,null),b(d,Yxe,_),b(d,tc,_),e(tc,z1),e(z1,Zce),g(aA,Zce,null),e(tc,Bzo),e(tc,eme),e(eme,xzo),b(d,Kxe,_),b(d,pr,_),g(sA,pr,null),e(pr,kzo),e(pr,ac),e(ac,Rzo),e(ac,ome),e(ome,Szo),e(ac,Pzo),e(ac,rme),e(rme,$zo),e(ac,Izo),e(pr,jzo),e(pr,nA),e(nA,Dzo),e(nA,tme),e(tme,Nzo),e(nA,qzo),e(pr,Ozo),e(pr,ct),g(lA,ct,null),e(ct,Gzo),e(ct,ame),e(ame,Xzo),e(ct,Vzo),e(ct,sc),e(sc,zzo),e(sc,sme),e(sme,Wzo),e(sc,Qzo),e(sc,nme),e(nme,Hzo),e(sc,Uzo),e(ct,Jzo),e(ct,lme),e(lme,Yzo),e(ct,Kzo),g(iA,ct,null),e(pr,Zzo),e(pr,to),g(dA,to,null),e(to,eWo),e(to,ime),e(ime,oWo),e(to,rWo),e(to,ms),e(ms,tWo),e(ms,dme),e(dme,aWo),e(ms,sWo),e(ms,cme),e(cme,nWo),e(ms,lWo),e(ms,mme),e(mme,iWo),e(ms,dWo),e(to,cWo),e(to,fme),e(fme,W1),e(W1,gme),e(gme,mWo),e(W1,fWo),e(W1,QN),e(QN,gWo),e(W1,hWo),e(to,uWo),e(to,Q1),e(Q1,pWo),e(Q1,hme),e(hme,_Wo),e(Q1,bWo),e(Q1,ume),e(ume,vWo),e(to,TWo),e(to,pme),e(pme,FWo),e(to,CWo),g(cA,to,null),b(d,Zxe,_),b(d,nc,_),e(nc,H1),e(H1,_me),g(mA,_me,null),e(nc,MWo),e(nc,bme),e(bme,EWo),b(d,eke,_),b(d,_r,_),g(fA,_r,null),e(_r,yWo),e(_r,lc),e(lc,wWo),e(lc,vme),e(vme,AWo),e(lc,LWo),e(lc,Tme),e(Tme,BWo),e(lc,xWo),e(_r,kWo),e(_r,gA),e(gA,RWo),e(gA,Fme),e(Fme,SWo),e(gA,PWo),e(_r,$Wo),e(_r,mt),g(hA,mt,null),e(mt,IWo),e(mt,Cme),e(Cme,jWo),e(mt,DWo),e(mt,ic),e(ic,NWo),e(ic,Mme),e(Mme,qWo),e(ic,OWo),e(ic,Eme),e(Eme,GWo),e(ic,XWo),e(mt,VWo),e(mt,yme),e(yme,zWo),e(mt,WWo),g(uA,mt,null),e(_r,QWo),e(_r,ao),g(pA,ao,null),e(ao,HWo),e(ao,wme),e(wme,UWo),e(ao,JWo),e(ao,fs),e(fs,YWo),e(fs,Ame),e(Ame,KWo),e(fs,ZWo),e(fs,Lme),e(Lme,eQo),e(fs,oQo),e(fs,Bme),e(Bme,rQo),e(fs,tQo),e(ao,aQo),e(ao,_A),e(_A,U1),e(U1,xme),e(xme,sQo),e(U1,nQo),e(U1,HN),e(HN,lQo),e(U1,iQo),e(_A,dQo),e(_A,J1),e(J1,kme),e(kme,cQo),e(J1,mQo),e(J1,UN),e(UN,fQo),e(J1,gQo),e(ao,hQo),e(ao,Y1),e(Y1,uQo),e(Y1,Rme),e(Rme,pQo),e(Y1,_Qo),e(Y1,Sme),e(Sme,bQo),e(ao,vQo),e(ao,Pme),e(Pme,TQo),e(ao,FQo),g(bA,ao,null),b(d,oke,_),b(d,dc,_),e(dc,K1),e(K1,$me),g(vA,$me,null),e(dc,CQo),e(dc,Ime),e(Ime,MQo),b(d,rke,_),b(d,br,_),g(TA,br,null),e(br,EQo),e(br,cc),e(cc,yQo),e(cc,jme),e(jme,wQo),e(cc,AQo),e(cc,Dme),e(Dme,LQo),e(cc,BQo),e(br,xQo),e(br,FA),e(FA,kQo),e(FA,Nme),e(Nme,RQo),e(FA,SQo),e(br,PQo),e(br,ft),g(CA,ft,null),e(ft,$Qo),e(ft,qme),e(qme,IQo),e(ft,jQo),e(ft,mc),e(mc,DQo),e(mc,Ome),e(Ome,NQo),e(mc,qQo),e(mc,Gme),e(Gme,OQo),e(mc,GQo),e(ft,XQo),e(ft,Xme),e(Xme,VQo),e(ft,zQo),g(MA,ft,null),e(br,WQo),e(br,so),g(EA,so,null),e(so,QQo),e(so,Vme),e(Vme,HQo),e(so,UQo),e(so,gs),e(gs,JQo),e(gs,zme),e(zme,YQo),e(gs,KQo),e(gs,Wme),e(Wme,ZQo),e(gs,eHo),e(gs,Qme),e(Qme,oHo),e(gs,rHo),e(so,tHo),e(so,Hme),e(Hme,Z1),e(Z1,Ume),e(Ume,aHo),e(Z1,sHo),e(Z1,JN),e(JN,nHo),e(Z1,lHo),e(so,iHo),e(so,eF),e(eF,dHo),e(eF,Jme),e(Jme,cHo),e(eF,mHo),e(eF,Yme),e(Yme,fHo),e(so,gHo),e(so,Kme),e(Kme,hHo),e(so,uHo),g(yA,so,null),b(d,tke,_),b(d,fc,_),e(fc,oF),e(oF,Zme),g(wA,Zme,null),e(fc,pHo),e(fc,efe),e(efe,_Ho),b(d,ake,_),b(d,vr,_),g(AA,vr,null),e(vr,bHo),e(vr,gc),e(gc,vHo),e(gc,ofe),e(ofe,THo),e(gc,FHo),e(gc,rfe),e(rfe,CHo),e(gc,MHo),e(vr,EHo),e(vr,LA),e(LA,yHo),e(LA,tfe),e(tfe,wHo),e(LA,AHo),e(vr,LHo),e(vr,gt),g(BA,gt,null),e(gt,BHo),e(gt,afe),e(afe,xHo),e(gt,kHo),e(gt,hc),e(hc,RHo),e(hc,sfe),e(sfe,SHo),e(hc,PHo),e(hc,nfe),e(nfe,$Ho),e(hc,IHo),e(gt,jHo),e(gt,lfe),e(lfe,DHo),e(gt,NHo),g(xA,gt,null),e(vr,qHo),e(vr,ho),g(kA,ho,null),e(ho,OHo),e(ho,ife),e(ife,GHo),e(ho,XHo),e(ho,hs),e(hs,VHo),e(hs,dfe),e(dfe,zHo),e(hs,WHo),e(hs,cfe),e(cfe,QHo),e(hs,HHo),e(hs,mfe),e(mfe,UHo),e(hs,JHo),e(ho,YHo),e(ho,B),e(B,rF),e(rF,ffe),e(ffe,KHo),e(rF,ZHo),e(rF,YN),e(YN,eUo),e(rF,oUo),e(B,rUo),e(B,tF),e(tF,gfe),e(gfe,tUo),e(tF,aUo),e(tF,KN),e(KN,sUo),e(tF,nUo),e(B,lUo),e(B,aF),e(aF,hfe),e(hfe,iUo),e(aF,dUo),e(aF,ZN),e(ZN,cUo),e(aF,mUo),e(B,fUo),e(B,sF),e(sF,ufe),e(ufe,gUo),e(sF,hUo),e(sF,eq),e(eq,uUo),e(sF,pUo),e(B,_Uo),e(B,nF),e(nF,pfe),e(pfe,bUo),e(nF,vUo),e(nF,oq),e(oq,TUo),e(nF,FUo),e(B,CUo),e(B,lF),e(lF,_fe),e(_fe,MUo),e(lF,EUo),e(lF,rq),e(rq,yUo),e(lF,wUo),e(B,AUo),e(B,iF),e(iF,bfe),e(bfe,LUo),e(iF,BUo),e(iF,tq),e(tq,xUo),e(iF,kUo),e(B,RUo),e(B,dF),e(dF,vfe),e(vfe,SUo),e(dF,PUo),e(dF,aq),e(aq,$Uo),e(dF,IUo),e(B,jUo),e(B,cF),e(cF,Tfe),e(Tfe,DUo),e(cF,NUo),e(cF,sq),e(sq,qUo),e(cF,OUo),e(B,GUo),e(B,mF),e(mF,Ffe),e(Ffe,XUo),e(mF,VUo),e(mF,nq),e(nq,zUo),e(mF,WUo),e(B,QUo),e(B,fF),e(fF,Cfe),e(Cfe,HUo),e(fF,UUo),e(fF,lq),e(lq,JUo),e(fF,YUo),e(B,KUo),e(B,gF),e(gF,Mfe),e(Mfe,ZUo),e(gF,eJo),e(gF,iq),e(iq,oJo),e(gF,rJo),e(B,tJo),e(B,hF),e(hF,Efe),e(Efe,aJo),e(hF,sJo),e(hF,dq),e(dq,nJo),e(hF,lJo),e(B,iJo),e(B,uF),e(uF,yfe),e(yfe,dJo),e(uF,cJo),e(uF,cq),e(cq,mJo),e(uF,fJo),e(B,gJo),e(B,pF),e(pF,wfe),e(wfe,hJo),e(pF,uJo),e(pF,mq),e(mq,pJo),e(pF,_Jo),e(B,bJo),e(B,_F),e(_F,Afe),e(Afe,vJo),e(_F,TJo),e(_F,fq),e(fq,FJo),e(_F,CJo),e(B,MJo),e(B,On),e(On,Lfe),e(Lfe,EJo),e(On,yJo),e(On,gq),e(gq,wJo),e(On,AJo),e(On,hq),e(hq,LJo),e(On,BJo),e(B,xJo),e(B,bF),e(bF,Bfe),e(Bfe,kJo),e(bF,RJo),e(bF,uq),e(uq,SJo),e(bF,PJo),e(B,$Jo),e(B,vF),e(vF,xfe),e(xfe,IJo),e(vF,jJo),e(vF,pq),e(pq,DJo),e(vF,NJo),e(B,qJo),e(B,TF),e(TF,kfe),e(kfe,OJo),e(TF,GJo),e(TF,_q),e(_q,XJo),e(TF,VJo),e(B,zJo),e(B,FF),e(FF,Rfe),e(Rfe,WJo),e(FF,QJo),e(FF,bq),e(bq,HJo),e(FF,UJo),e(B,JJo),e(B,CF),e(CF,Sfe),e(Sfe,YJo),e(CF,KJo),e(CF,vq),e(vq,ZJo),e(CF,eYo),e(B,oYo),e(B,MF),e(MF,Pfe),e(Pfe,rYo),e(MF,tYo),e(MF,Tq),e(Tq,aYo),e(MF,sYo),e(B,nYo),e(B,EF),e(EF,$fe),e($fe,lYo),e(EF,iYo),e(EF,Fq),e(Fq,dYo),e(EF,cYo),e(B,mYo),e(B,yF),e(yF,Ife),e(Ife,fYo),e(yF,gYo),e(yF,Cq),e(Cq,hYo),e(yF,uYo),e(B,pYo),e(B,wF),e(wF,jfe),e(jfe,_Yo),e(wF,bYo),e(wF,Mq),e(Mq,vYo),e(wF,TYo),e(B,FYo),e(B,AF),e(AF,Dfe),e(Dfe,CYo),e(AF,MYo),e(AF,Eq),e(Eq,EYo),e(AF,yYo),e(B,wYo),e(B,LF),e(LF,Nfe),e(Nfe,AYo),e(LF,LYo),e(LF,yq),e(yq,BYo),e(LF,xYo),e(B,kYo),e(B,BF),e(BF,qfe),e(qfe,RYo),e(BF,SYo),e(BF,wq),e(wq,PYo),e(BF,$Yo),e(B,IYo),e(B,xF),e(xF,Ofe),e(Ofe,jYo),e(xF,DYo),e(xF,Aq),e(Aq,NYo),e(xF,qYo),e(B,OYo),e(B,kF),e(kF,Gfe),e(Gfe,GYo),e(kF,XYo),e(kF,Lq),e(Lq,VYo),e(kF,zYo),e(B,WYo),e(B,RF),e(RF,Xfe),e(Xfe,QYo),e(RF,HYo),e(RF,Bq),e(Bq,UYo),e(RF,JYo),e(B,YYo),e(B,SF),e(SF,Vfe),e(Vfe,KYo),e(SF,ZYo),e(SF,xq),e(xq,eKo),e(SF,oKo),e(B,rKo),e(B,PF),e(PF,zfe),e(zfe,tKo),e(PF,aKo),e(PF,kq),e(kq,sKo),e(PF,nKo),e(B,lKo),e(B,$F),e($F,Wfe),e(Wfe,iKo),e($F,dKo),e($F,Rq),e(Rq,cKo),e($F,mKo),e(B,fKo),e(B,IF),e(IF,Qfe),e(Qfe,gKo),e(IF,hKo),e(IF,Sq),e(Sq,uKo),e(IF,pKo),e(B,_Ko),e(B,jF),e(jF,Hfe),e(Hfe,bKo),e(jF,vKo),e(jF,Pq),e(Pq,TKo),e(jF,FKo),e(B,CKo),e(B,DF),e(DF,Ufe),e(Ufe,MKo),e(DF,EKo),e(DF,$q),e($q,yKo),e(DF,wKo),e(B,AKo),e(B,NF),e(NF,Jfe),e(Jfe,LKo),e(NF,BKo),e(NF,Iq),e(Iq,xKo),e(NF,kKo),e(B,RKo),e(B,qF),e(qF,Yfe),e(Yfe,SKo),e(qF,PKo),e(qF,jq),e(jq,$Ko),e(qF,IKo),e(B,jKo),e(B,OF),e(OF,Kfe),e(Kfe,DKo),e(OF,NKo),e(OF,Dq),e(Dq,qKo),e(OF,OKo),e(B,GKo),e(B,GF),e(GF,Zfe),e(Zfe,XKo),e(GF,VKo),e(GF,Nq),e(Nq,zKo),e(GF,WKo),e(ho,QKo),e(ho,ege),e(ege,HKo),e(ho,UKo),g(RA,ho,null),b(d,ske,_),b(d,uc,_),e(uc,XF),e(XF,oge),g(SA,oge,null),e(uc,JKo),e(uc,rge),e(rge,YKo),b(d,nke,_),b(d,Tr,_),g(PA,Tr,null),e(Tr,KKo),e(Tr,pc),e(pc,ZKo),e(pc,tge),e(tge,eZo),e(pc,oZo),e(pc,age),e(age,rZo),e(pc,tZo),e(Tr,aZo),e(Tr,$A),e($A,sZo),e($A,sge),e(sge,nZo),e($A,lZo),e(Tr,iZo),e(Tr,ht),g(IA,ht,null),e(ht,dZo),e(ht,nge),e(nge,cZo),e(ht,mZo),e(ht,_c),e(_c,fZo),e(_c,lge),e(lge,gZo),e(_c,hZo),e(_c,ige),e(ige,uZo),e(_c,pZo),e(ht,_Zo),e(ht,dge),e(dge,bZo),e(ht,vZo),g(jA,ht,null),e(Tr,TZo),e(Tr,uo),g(DA,uo,null),e(uo,FZo),e(uo,cge),e(cge,CZo),e(uo,MZo),e(uo,us),e(us,EZo),e(us,mge),e(mge,yZo),e(us,wZo),e(us,fge),e(fge,AZo),e(us,LZo),e(us,gge),e(gge,BZo),e(us,xZo),e(uo,kZo),e(uo,H),e(H,VF),e(VF,hge),e(hge,RZo),e(VF,SZo),e(VF,qq),e(qq,PZo),e(VF,$Zo),e(H,IZo),e(H,zF),e(zF,uge),e(uge,jZo),e(zF,DZo),e(zF,Oq),e(Oq,NZo),e(zF,qZo),e(H,OZo),e(H,WF),e(WF,pge),e(pge,GZo),e(WF,XZo),e(WF,Gq),e(Gq,VZo),e(WF,zZo),e(H,WZo),e(H,QF),e(QF,_ge),e(_ge,QZo),e(QF,HZo),e(QF,Xq),e(Xq,UZo),e(QF,JZo),e(H,YZo),e(H,HF),e(HF,bge),e(bge,KZo),e(HF,ZZo),e(HF,Vq),e(Vq,eer),e(HF,oer),e(H,rer),e(H,UF),e(UF,vge),e(vge,ter),e(UF,aer),e(UF,zq),e(zq,ser),e(UF,ner),e(H,ler),e(H,JF),e(JF,Tge),e(Tge,ier),e(JF,der),e(JF,Wq),e(Wq,cer),e(JF,mer),e(H,fer),e(H,YF),e(YF,Fge),e(Fge,ger),e(YF,her),e(YF,Qq),e(Qq,uer),e(YF,per),e(H,_er),e(H,KF),e(KF,Cge),e(Cge,ber),e(KF,ver),e(KF,Hq),e(Hq,Ter),e(KF,Fer),e(H,Cer),e(H,ZF),e(ZF,Mge),e(Mge,Mer),e(ZF,Eer),e(ZF,Uq),e(Uq,yer),e(ZF,wer),e(H,Aer),e(H,eC),e(eC,Ege),e(Ege,Ler),e(eC,Ber),e(eC,Jq),e(Jq,xer),e(eC,ker),e(H,Rer),e(H,oC),e(oC,yge),e(yge,Ser),e(oC,Per),e(oC,Yq),e(Yq,$er),e(oC,Ier),e(H,jer),e(H,rC),e(rC,wge),e(wge,Der),e(rC,Ner),e(rC,Kq),e(Kq,qer),e(rC,Oer),e(H,Ger),e(H,tC),e(tC,Age),e(Age,Xer),e(tC,Ver),e(tC,Zq),e(Zq,zer),e(tC,Wer),e(H,Qer),e(H,aC),e(aC,Lge),e(Lge,Her),e(aC,Uer),e(aC,eO),e(eO,Jer),e(aC,Yer),e(H,Ker),e(H,sC),e(sC,Bge),e(Bge,Zer),e(sC,eor),e(sC,oO),e(oO,oor),e(sC,ror),e(H,tor),e(H,nC),e(nC,xge),e(xge,aor),e(nC,sor),e(nC,rO),e(rO,nor),e(nC,lor),e(H,ior),e(H,lC),e(lC,kge),e(kge,dor),e(lC,cor),e(lC,tO),e(tO,mor),e(lC,gor),e(H,hor),e(H,iC),e(iC,Rge),e(Rge,uor),e(iC,por),e(iC,aO),e(aO,_or),e(iC,bor),e(H,vor),e(H,dC),e(dC,Sge),e(Sge,Tor),e(dC,For),e(dC,sO),e(sO,Cor),e(dC,Mor),e(H,Eor),e(H,cC),e(cC,Pge),e(Pge,yor),e(cC,wor),e(cC,nO),e(nO,Aor),e(cC,Lor),e(H,Bor),e(H,mC),e(mC,$ge),e($ge,xor),e(mC,kor),e(mC,lO),e(lO,Ror),e(mC,Sor),e(uo,Por),e(uo,Ige),e(Ige,$or),e(uo,Ior),g(NA,uo,null),b(d,lke,_),b(d,bc,_),e(bc,fC),e(fC,jge),g(qA,jge,null),e(bc,jor),e(bc,Dge),e(Dge,Dor),b(d,ike,_),b(d,Fr,_),g(OA,Fr,null),e(Fr,Nor),e(Fr,vc),e(vc,qor),e(vc,Nge),e(Nge,Oor),e(vc,Gor),e(vc,qge),e(qge,Xor),e(vc,Vor),e(Fr,zor),e(Fr,GA),e(GA,Wor),e(GA,Oge),e(Oge,Qor),e(GA,Hor),e(Fr,Uor),e(Fr,ut),g(XA,ut,null),e(ut,Jor),e(ut,Gge),e(Gge,Yor),e(ut,Kor),e(ut,Tc),e(Tc,Zor),e(Tc,Xge),e(Xge,err),e(Tc,orr),e(Tc,Vge),e(Vge,rrr),e(Tc,trr),e(ut,arr),e(ut,zge),e(zge,srr),e(ut,nrr),g(VA,ut,null),e(Fr,lrr),e(Fr,po),g(zA,po,null),e(po,irr),e(po,Wge),e(Wge,drr),e(po,crr),e(po,ps),e(ps,mrr),e(ps,Qge),e(Qge,frr),e(ps,grr),e(ps,Hge),e(Hge,hrr),e(ps,urr),e(ps,Uge),e(Uge,prr),e(ps,_rr),e(po,brr),e(po,ue),e(ue,gC),e(gC,Jge),e(Jge,vrr),e(gC,Trr),e(gC,iO),e(iO,Frr),e(gC,Crr),e(ue,Mrr),e(ue,hC),e(hC,Yge),e(Yge,Err),e(hC,yrr),e(hC,dO),e(dO,wrr),e(hC,Arr),e(ue,Lrr),e(ue,uC),e(uC,Kge),e(Kge,Brr),e(uC,xrr),e(uC,cO),e(cO,krr),e(uC,Rrr),e(ue,Srr),e(ue,pC),e(pC,Zge),e(Zge,Prr),e(pC,$rr),e(pC,mO),e(mO,Irr),e(pC,jrr),e(ue,Drr),e(ue,_C),e(_C,ehe),e(ehe,Nrr),e(_C,qrr),e(_C,fO),e(fO,Orr),e(_C,Grr),e(ue,Xrr),e(ue,bC),e(bC,ohe),e(ohe,Vrr),e(bC,zrr),e(bC,gO),e(gO,Wrr),e(bC,Qrr),e(ue,Hrr),e(ue,vC),e(vC,rhe),e(rhe,Urr),e(vC,Jrr),e(vC,hO),e(hO,Yrr),e(vC,Krr),e(ue,Zrr),e(ue,TC),e(TC,the),e(the,etr),e(TC,otr),e(TC,uO),e(uO,rtr),e(TC,ttr),e(ue,atr),e(ue,FC),e(FC,ahe),e(ahe,str),e(FC,ntr),e(FC,pO),e(pO,ltr),e(FC,itr),e(ue,dtr),e(ue,CC),e(CC,she),e(she,ctr),e(CC,mtr),e(CC,_O),e(_O,ftr),e(CC,gtr),e(po,htr),e(po,nhe),e(nhe,utr),e(po,ptr),g(WA,po,null),b(d,dke,_),b(d,Fc,_),e(Fc,MC),e(MC,lhe),g(QA,lhe,null),e(Fc,_tr),e(Fc,ihe),e(ihe,btr),b(d,cke,_),b(d,Cr,_),g(HA,Cr,null),e(Cr,vtr),e(Cr,Cc),e(Cc,Ttr),e(Cc,dhe),e(dhe,Ftr),e(Cc,Ctr),e(Cc,che),e(che,Mtr),e(Cc,Etr),e(Cr,ytr),e(Cr,UA),e(UA,wtr),e(UA,mhe),e(mhe,Atr),e(UA,Ltr),e(Cr,Btr),e(Cr,pt),g(JA,pt,null),e(pt,xtr),e(pt,fhe),e(fhe,ktr),e(pt,Rtr),e(pt,Mc),e(Mc,Str),e(Mc,ghe),e(ghe,Ptr),e(Mc,$tr),e(Mc,hhe),e(hhe,Itr),e(Mc,jtr),e(pt,Dtr),e(pt,uhe),e(uhe,Ntr),e(pt,qtr),g(YA,pt,null),e(Cr,Otr),e(Cr,_o),g(KA,_o,null),e(_o,Gtr),e(_o,phe),e(phe,Xtr),e(_o,Vtr),e(_o,_s),e(_s,ztr),e(_s,_he),e(_he,Wtr),e(_s,Qtr),e(_s,bhe),e(bhe,Htr),e(_s,Utr),e(_s,vhe),e(vhe,Jtr),e(_s,Ytr),e(_o,Ktr),e(_o,ZA),e(ZA,EC),e(EC,The),e(The,Ztr),e(EC,ear),e(EC,bO),e(bO,oar),e(EC,rar),e(ZA,tar),e(ZA,yC),e(yC,Fhe),e(Fhe,aar),e(yC,sar),e(yC,vO),e(vO,nar),e(yC,lar),e(_o,iar),e(_o,Che),e(Che,dar),e(_o,car),g(e0,_o,null),b(d,mke,_),b(d,Ec,_),e(Ec,wC),e(wC,Mhe),g(o0,Mhe,null),e(Ec,mar),e(Ec,Ehe),e(Ehe,far),b(d,fke,_),b(d,Mr,_),g(r0,Mr,null),e(Mr,gar),e(Mr,yc),e(yc,har),e(yc,yhe),e(yhe,uar),e(yc,par),e(yc,whe),e(whe,_ar),e(yc,bar),e(Mr,Tar),e(Mr,t0),e(t0,Far),e(t0,Ahe),e(Ahe,Car),e(t0,Mar),e(Mr,Ear),e(Mr,_t),g(a0,_t,null),e(_t,yar),e(_t,Lhe),e(Lhe,war),e(_t,Aar),e(_t,wc),e(wc,Lar),e(wc,Bhe),e(Bhe,Bar),e(wc,xar),e(wc,xhe),e(xhe,kar),e(wc,Rar),e(_t,Sar),e(_t,khe),e(khe,Par),e(_t,$ar),g(s0,_t,null),e(Mr,Iar),e(Mr,bo),g(n0,bo,null),e(bo,jar),e(bo,Rhe),e(Rhe,Dar),e(bo,Nar),e(bo,bs),e(bs,qar),e(bs,She),e(She,Oar),e(bs,Gar),e(bs,Phe),e(Phe,Xar),e(bs,Var),e(bs,$he),e($he,zar),e(bs,War),e(bo,Qar),e(bo,Y),e(Y,AC),e(AC,Ihe),e(Ihe,Har),e(AC,Uar),e(AC,TO),e(TO,Jar),e(AC,Yar),e(Y,Kar),e(Y,LC),e(LC,jhe),e(jhe,Zar),e(LC,esr),e(LC,FO),e(FO,osr),e(LC,rsr),e(Y,tsr),e(Y,BC),e(BC,Dhe),e(Dhe,asr),e(BC,ssr),e(BC,CO),e(CO,nsr),e(BC,lsr),e(Y,isr),e(Y,xC),e(xC,Nhe),e(Nhe,dsr),e(xC,csr),e(xC,MO),e(MO,msr),e(xC,fsr),e(Y,gsr),e(Y,kC),e(kC,qhe),e(qhe,hsr),e(kC,usr),e(kC,EO),e(EO,psr),e(kC,_sr),e(Y,bsr),e(Y,RC),e(RC,Ohe),e(Ohe,vsr),e(RC,Tsr),e(RC,yO),e(yO,Fsr),e(RC,Csr),e(Y,Msr),e(Y,SC),e(SC,Ghe),e(Ghe,Esr),e(SC,ysr),e(SC,wO),e(wO,wsr),e(SC,Asr),e(Y,Lsr),e(Y,PC),e(PC,Xhe),e(Xhe,Bsr),e(PC,xsr),e(PC,AO),e(AO,ksr),e(PC,Rsr),e(Y,Ssr),e(Y,$C),e($C,Vhe),e(Vhe,Psr),e($C,$sr),e($C,LO),e(LO,Isr),e($C,jsr),e(Y,Dsr),e(Y,IC),e(IC,zhe),e(zhe,Nsr),e(IC,qsr),e(IC,BO),e(BO,Osr),e(IC,Gsr),e(Y,Xsr),e(Y,jC),e(jC,Whe),e(Whe,Vsr),e(jC,zsr),e(jC,xO),e(xO,Wsr),e(jC,Qsr),e(Y,Hsr),e(Y,DC),e(DC,Qhe),e(Qhe,Usr),e(DC,Jsr),e(DC,kO),e(kO,Ysr),e(DC,Ksr),e(Y,Zsr),e(Y,NC),e(NC,Hhe),e(Hhe,enr),e(NC,onr),e(NC,RO),e(RO,rnr),e(NC,tnr),e(Y,anr),e(Y,qC),e(qC,Uhe),e(Uhe,snr),e(qC,nnr),e(qC,SO),e(SO,lnr),e(qC,inr),e(Y,dnr),e(Y,OC),e(OC,Jhe),e(Jhe,cnr),e(OC,mnr),e(OC,PO),e(PO,fnr),e(OC,gnr),e(Y,hnr),e(Y,GC),e(GC,Yhe),e(Yhe,unr),e(GC,pnr),e(GC,$O),e($O,_nr),e(GC,bnr),e(Y,vnr),e(Y,XC),e(XC,Khe),e(Khe,Tnr),e(XC,Fnr),e(XC,IO),e(IO,Cnr),e(XC,Mnr),e(Y,Enr),e(Y,VC),e(VC,Zhe),e(Zhe,ynr),e(VC,wnr),e(VC,jO),e(jO,Anr),e(VC,Lnr),e(Y,Bnr),e(Y,zC),e(zC,eue),e(eue,xnr),e(zC,knr),e(zC,DO),e(DO,Rnr),e(zC,Snr),e(Y,Pnr),e(Y,WC),e(WC,oue),e(oue,$nr),e(WC,Inr),e(WC,NO),e(NO,jnr),e(WC,Dnr),e(bo,Nnr),e(bo,rue),e(rue,qnr),e(bo,Onr),g(l0,bo,null),b(d,gke,_),b(d,Ac,_),e(Ac,QC),e(QC,tue),g(i0,tue,null),e(Ac,Gnr),e(Ac,aue),e(aue,Xnr),b(d,hke,_),b(d,Er,_),g(d0,Er,null),e(Er,Vnr),e(Er,Lc),e(Lc,znr),e(Lc,sue),e(sue,Wnr),e(Lc,Qnr),e(Lc,nue),e(nue,Hnr),e(Lc,Unr),e(Er,Jnr),e(Er,c0),e(c0,Ynr),e(c0,lue),e(lue,Knr),e(c0,Znr),e(Er,elr),e(Er,bt),g(m0,bt,null),e(bt,olr),e(bt,iue),e(iue,rlr),e(bt,tlr),e(bt,Bc),e(Bc,alr),e(Bc,due),e(due,slr),e(Bc,nlr),e(Bc,cue),e(cue,llr),e(Bc,ilr),e(bt,dlr),e(bt,mue),e(mue,clr),e(bt,mlr),g(f0,bt,null),e(Er,flr),e(Er,vo),g(g0,vo,null),e(vo,glr),e(vo,fue),e(fue,hlr),e(vo,ulr),e(vo,vs),e(vs,plr),e(vs,gue),e(gue,_lr),e(vs,blr),e(vs,hue),e(hue,vlr),e(vs,Tlr),e(vs,uue),e(uue,Flr),e(vs,Clr),e(vo,Mlr),e(vo,pe),e(pe,HC),e(HC,pue),e(pue,Elr),e(HC,ylr),e(HC,qO),e(qO,wlr),e(HC,Alr),e(pe,Llr),e(pe,UC),e(UC,_ue),e(_ue,Blr),e(UC,xlr),e(UC,OO),e(OO,klr),e(UC,Rlr),e(pe,Slr),e(pe,JC),e(JC,bue),e(bue,Plr),e(JC,$lr),e(JC,GO),e(GO,Ilr),e(JC,jlr),e(pe,Dlr),e(pe,YC),e(YC,vue),e(vue,Nlr),e(YC,qlr),e(YC,XO),e(XO,Olr),e(YC,Glr),e(pe,Xlr),e(pe,KC),e(KC,Tue),e(Tue,Vlr),e(KC,zlr),e(KC,VO),e(VO,Wlr),e(KC,Qlr),e(pe,Hlr),e(pe,ZC),e(ZC,Fue),e(Fue,Ulr),e(ZC,Jlr),e(ZC,zO),e(zO,Ylr),e(ZC,Klr),e(pe,Zlr),e(pe,eM),e(eM,Cue),e(Cue,eir),e(eM,oir),e(eM,WO),e(WO,rir),e(eM,tir),e(pe,air),e(pe,oM),e(oM,Mue),e(Mue,sir),e(oM,nir),e(oM,QO),e(QO,lir),e(oM,iir),e(pe,dir),e(pe,rM),e(rM,Eue),e(Eue,cir),e(rM,mir),e(rM,HO),e(HO,fir),e(rM,gir),e(pe,hir),e(pe,tM),e(tM,yue),e(yue,uir),e(tM,pir),e(tM,UO),e(UO,_ir),e(tM,bir),e(vo,vir),e(vo,wue),e(wue,Tir),e(vo,Fir),g(h0,vo,null),b(d,uke,_),b(d,xc,_),e(xc,aM),e(aM,Aue),g(u0,Aue,null),e(xc,Cir),e(xc,Lue),e(Lue,Mir),b(d,pke,_),b(d,yr,_),g(p0,yr,null),e(yr,Eir),e(yr,kc),e(kc,yir),e(kc,Bue),e(Bue,wir),e(kc,Air),e(kc,xue),e(xue,Lir),e(kc,Bir),e(yr,xir),e(yr,_0),e(_0,kir),e(_0,kue),e(kue,Rir),e(_0,Sir),e(yr,Pir),e(yr,vt),g(b0,vt,null),e(vt,$ir),e(vt,Rue),e(Rue,Iir),e(vt,jir),e(vt,Rc),e(Rc,Dir),e(Rc,Sue),e(Sue,Nir),e(Rc,qir),e(Rc,Pue),e(Pue,Oir),e(Rc,Gir),e(vt,Xir),e(vt,$ue),e($ue,Vir),e(vt,zir),g(v0,vt,null),e(yr,Wir),e(yr,To),g(T0,To,null),e(To,Qir),e(To,Iue),e(Iue,Hir),e(To,Uir),e(To,Ts),e(Ts,Jir),e(Ts,jue),e(jue,Yir),e(Ts,Kir),e(Ts,Due),e(Due,Zir),e(Ts,edr),e(Ts,Nue),e(Nue,odr),e(Ts,rdr),e(To,tdr),e(To,V),e(V,sM),e(sM,que),e(que,adr),e(sM,sdr),e(sM,JO),e(JO,ndr),e(sM,ldr),e(V,idr),e(V,nM),e(nM,Oue),e(Oue,ddr),e(nM,cdr),e(nM,YO),e(YO,mdr),e(nM,fdr),e(V,gdr),e(V,lM),e(lM,Gue),e(Gue,hdr),e(lM,udr),e(lM,KO),e(KO,pdr),e(lM,_dr),e(V,bdr),e(V,iM),e(iM,Xue),e(Xue,vdr),e(iM,Tdr),e(iM,ZO),e(ZO,Fdr),e(iM,Cdr),e(V,Mdr),e(V,dM),e(dM,Vue),e(Vue,Edr),e(dM,ydr),e(dM,eG),e(eG,wdr),e(dM,Adr),e(V,Ldr),e(V,cM),e(cM,zue),e(zue,Bdr),e(cM,xdr),e(cM,oG),e(oG,kdr),e(cM,Rdr),e(V,Sdr),e(V,mM),e(mM,Wue),e(Wue,Pdr),e(mM,$dr),e(mM,rG),e(rG,Idr),e(mM,jdr),e(V,Ddr),e(V,fM),e(fM,Que),e(Que,Ndr),e(fM,qdr),e(fM,tG),e(tG,Odr),e(fM,Gdr),e(V,Xdr),e(V,gM),e(gM,Hue),e(Hue,Vdr),e(gM,zdr),e(gM,aG),e(aG,Wdr),e(gM,Qdr),e(V,Hdr),e(V,hM),e(hM,Uue),e(Uue,Udr),e(hM,Jdr),e(hM,sG),e(sG,Ydr),e(hM,Kdr),e(V,Zdr),e(V,uM),e(uM,Jue),e(Jue,ecr),e(uM,ocr),e(uM,nG),e(nG,rcr),e(uM,tcr),e(V,acr),e(V,pM),e(pM,Yue),e(Yue,scr),e(pM,ncr),e(pM,lG),e(lG,lcr),e(pM,icr),e(V,dcr),e(V,_M),e(_M,Kue),e(Kue,ccr),e(_M,mcr),e(_M,iG),e(iG,fcr),e(_M,gcr),e(V,hcr),e(V,bM),e(bM,Zue),e(Zue,ucr),e(bM,pcr),e(bM,dG),e(dG,_cr),e(bM,bcr),e(V,vcr),e(V,vM),e(vM,epe),e(epe,Tcr),e(vM,Fcr),e(vM,cG),e(cG,Ccr),e(vM,Mcr),e(V,Ecr),e(V,TM),e(TM,ope),e(ope,ycr),e(TM,wcr),e(TM,mG),e(mG,Acr),e(TM,Lcr),e(V,Bcr),e(V,FM),e(FM,rpe),e(rpe,xcr),e(FM,kcr),e(FM,fG),e(fG,Rcr),e(FM,Scr),e(V,Pcr),e(V,CM),e(CM,tpe),e(tpe,$cr),e(CM,Icr),e(CM,gG),e(gG,jcr),e(CM,Dcr),e(V,Ncr),e(V,MM),e(MM,ape),e(ape,qcr),e(MM,Ocr),e(MM,hG),e(hG,Gcr),e(MM,Xcr),e(V,Vcr),e(V,EM),e(EM,spe),e(spe,zcr),e(EM,Wcr),e(EM,uG),e(uG,Qcr),e(EM,Hcr),e(V,Ucr),e(V,yM),e(yM,npe),e(npe,Jcr),e(yM,Ycr),e(yM,pG),e(pG,Kcr),e(yM,Zcr),e(V,emr),e(V,wM),e(wM,lpe),e(lpe,omr),e(wM,rmr),e(wM,_G),e(_G,tmr),e(wM,amr),e(V,smr),e(V,AM),e(AM,ipe),e(ipe,nmr),e(AM,lmr),e(AM,bG),e(bG,imr),e(AM,dmr),e(V,cmr),e(V,LM),e(LM,dpe),e(dpe,mmr),e(LM,fmr),e(LM,vG),e(vG,gmr),e(LM,hmr),e(V,umr),e(V,BM),e(BM,cpe),e(cpe,pmr),e(BM,_mr),e(BM,TG),e(TG,bmr),e(BM,vmr),e(To,Tmr),e(To,mpe),e(mpe,Fmr),e(To,Cmr),g(F0,To,null),b(d,_ke,_),b(d,Sc,_),e(Sc,xM),e(xM,fpe),g(C0,fpe,null),e(Sc,Mmr),e(Sc,gpe),e(gpe,Emr),b(d,bke,_),b(d,wr,_),g(M0,wr,null),e(wr,ymr),e(wr,Pc),e(Pc,wmr),e(Pc,hpe),e(hpe,Amr),e(Pc,Lmr),e(Pc,upe),e(upe,Bmr),e(Pc,xmr),e(wr,kmr),e(wr,E0),e(E0,Rmr),e(E0,ppe),e(ppe,Smr),e(E0,Pmr),e(wr,$mr),e(wr,Tt),g(y0,Tt,null),e(Tt,Imr),e(Tt,_pe),e(_pe,jmr),e(Tt,Dmr),e(Tt,$c),e($c,Nmr),e($c,bpe),e(bpe,qmr),e($c,Omr),e($c,vpe),e(vpe,Gmr),e($c,Xmr),e(Tt,Vmr),e(Tt,Tpe),e(Tpe,zmr),e(Tt,Wmr),g(w0,Tt,null),e(wr,Qmr),e(wr,Fo),g(A0,Fo,null),e(Fo,Hmr),e(Fo,Fpe),e(Fpe,Umr),e(Fo,Jmr),e(Fo,Fs),e(Fs,Ymr),e(Fs,Cpe),e(Cpe,Kmr),e(Fs,Zmr),e(Fs,Mpe),e(Mpe,efr),e(Fs,ofr),e(Fs,Epe),e(Epe,rfr),e(Fs,tfr),e(Fo,afr),e(Fo,te),e(te,kM),e(kM,ype),e(ype,sfr),e(kM,nfr),e(kM,FG),e(FG,lfr),e(kM,ifr),e(te,dfr),e(te,RM),e(RM,wpe),e(wpe,cfr),e(RM,mfr),e(RM,CG),e(CG,ffr),e(RM,gfr),e(te,hfr),e(te,SM),e(SM,Ape),e(Ape,ufr),e(SM,pfr),e(SM,MG),e(MG,_fr),e(SM,bfr),e(te,vfr),e(te,PM),e(PM,Lpe),e(Lpe,Tfr),e(PM,Ffr),e(PM,EG),e(EG,Cfr),e(PM,Mfr),e(te,Efr),e(te,$M),e($M,Bpe),e(Bpe,yfr),e($M,wfr),e($M,yG),e(yG,Afr),e($M,Lfr),e(te,Bfr),e(te,IM),e(IM,xpe),e(xpe,xfr),e(IM,kfr),e(IM,wG),e(wG,Rfr),e(IM,Sfr),e(te,Pfr),e(te,jM),e(jM,kpe),e(kpe,$fr),e(jM,Ifr),e(jM,AG),e(AG,jfr),e(jM,Dfr),e(te,Nfr),e(te,DM),e(DM,Rpe),e(Rpe,qfr),e(DM,Ofr),e(DM,LG),e(LG,Gfr),e(DM,Xfr),e(te,Vfr),e(te,NM),e(NM,Spe),e(Spe,zfr),e(NM,Wfr),e(NM,BG),e(BG,Qfr),e(NM,Hfr),e(te,Ufr),e(te,qM),e(qM,Ppe),e(Ppe,Jfr),e(qM,Yfr),e(qM,xG),e(xG,Kfr),e(qM,Zfr),e(te,egr),e(te,OM),e(OM,$pe),e($pe,ogr),e(OM,rgr),e(OM,kG),e(kG,tgr),e(OM,agr),e(te,sgr),e(te,GM),e(GM,Ipe),e(Ipe,ngr),e(GM,lgr),e(GM,RG),e(RG,igr),e(GM,dgr),e(te,cgr),e(te,XM),e(XM,jpe),e(jpe,mgr),e(XM,fgr),e(XM,SG),e(SG,ggr),e(XM,hgr),e(te,ugr),e(te,VM),e(VM,Dpe),e(Dpe,pgr),e(VM,_gr),e(VM,PG),e(PG,bgr),e(VM,vgr),e(te,Tgr),e(te,zM),e(zM,Npe),e(Npe,Fgr),e(zM,Cgr),e(zM,$G),e($G,Mgr),e(zM,Egr),e(te,ygr),e(te,WM),e(WM,qpe),e(qpe,wgr),e(WM,Agr),e(WM,IG),e(IG,Lgr),e(WM,Bgr),e(te,xgr),e(te,QM),e(QM,Ope),e(Ope,kgr),e(QM,Rgr),e(QM,jG),e(jG,Sgr),e(QM,Pgr),e(Fo,$gr),e(Fo,Gpe),e(Gpe,Igr),e(Fo,jgr),g(L0,Fo,null),b(d,vke,_),b(d,Ic,_),e(Ic,HM),e(HM,Xpe),g(B0,Xpe,null),e(Ic,Dgr),e(Ic,Vpe),e(Vpe,Ngr),b(d,Tke,_),b(d,Ar,_),g(x0,Ar,null),e(Ar,qgr),e(Ar,jc),e(jc,Ogr),e(jc,zpe),e(zpe,Ggr),e(jc,Xgr),e(jc,Wpe),e(Wpe,Vgr),e(jc,zgr),e(Ar,Wgr),e(Ar,k0),e(k0,Qgr),e(k0,Qpe),e(Qpe,Hgr),e(k0,Ugr),e(Ar,Jgr),e(Ar,Ft),g(R0,Ft,null),e(Ft,Ygr),e(Ft,Hpe),e(Hpe,Kgr),e(Ft,Zgr),e(Ft,Dc),e(Dc,ehr),e(Dc,Upe),e(Upe,ohr),e(Dc,rhr),e(Dc,Jpe),e(Jpe,thr),e(Dc,ahr),e(Ft,shr),e(Ft,Ype),e(Ype,nhr),e(Ft,lhr),g(S0,Ft,null),e(Ar,ihr),e(Ar,Co),g(P0,Co,null),e(Co,dhr),e(Co,Kpe),e(Kpe,chr),e(Co,mhr),e(Co,Cs),e(Cs,fhr),e(Cs,Zpe),e(Zpe,ghr),e(Cs,hhr),e(Cs,e_e),e(e_e,uhr),e(Cs,phr),e(Cs,o_e),e(o_e,_hr),e(Cs,bhr),e(Co,vhr),e(Co,r_e),e(r_e,UM),e(UM,t_e),e(t_e,Thr),e(UM,Fhr),e(UM,DG),e(DG,Chr),e(UM,Mhr),e(Co,Ehr),e(Co,a_e),e(a_e,yhr),e(Co,whr),g($0,Co,null),b(d,Fke,_),b(d,Nc,_),e(Nc,JM),e(JM,s_e),g(I0,s_e,null),e(Nc,Ahr),e(Nc,n_e),e(n_e,Lhr),b(d,Cke,_),b(d,Lr,_),g(j0,Lr,null),e(Lr,Bhr),e(Lr,qc),e(qc,xhr),e(qc,l_e),e(l_e,khr),e(qc,Rhr),e(qc,i_e),e(i_e,Shr),e(qc,Phr),e(Lr,$hr),e(Lr,D0),e(D0,Ihr),e(D0,d_e),e(d_e,jhr),e(D0,Dhr),e(Lr,Nhr),e(Lr,Ct),g(N0,Ct,null),e(Ct,qhr),e(Ct,c_e),e(c_e,Ohr),e(Ct,Ghr),e(Ct,Oc),e(Oc,Xhr),e(Oc,m_e),e(m_e,Vhr),e(Oc,zhr),e(Oc,f_e),e(f_e,Whr),e(Oc,Qhr),e(Ct,Hhr),e(Ct,g_e),e(g_e,Uhr),e(Ct,Jhr),g(q0,Ct,null),e(Lr,Yhr),e(Lr,Mo),g(O0,Mo,null),e(Mo,Khr),e(Mo,h_e),e(h_e,Zhr),e(Mo,eur),e(Mo,Ms),e(Ms,our),e(Ms,u_e),e(u_e,rur),e(Ms,tur),e(Ms,p_e),e(p_e,aur),e(Ms,sur),e(Ms,__e),e(__e,nur),e(Ms,lur),e(Mo,iur),e(Mo,K),e(K,YM),e(YM,b_e),e(b_e,dur),e(YM,cur),e(YM,NG),e(NG,mur),e(YM,fur),e(K,gur),e(K,KM),e(KM,v_e),e(v_e,hur),e(KM,uur),e(KM,qG),e(qG,pur),e(KM,_ur),e(K,bur),e(K,ZM),e(ZM,T_e),e(T_e,vur),e(ZM,Tur),e(ZM,OG),e(OG,Fur),e(ZM,Cur),e(K,Mur),e(K,e4),e(e4,F_e),e(F_e,Eur),e(e4,yur),e(e4,GG),e(GG,wur),e(e4,Aur),e(K,Lur),e(K,o4),e(o4,C_e),e(C_e,Bur),e(o4,xur),e(o4,XG),e(XG,kur),e(o4,Rur),e(K,Sur),e(K,r4),e(r4,M_e),e(M_e,Pur),e(r4,$ur),e(r4,VG),e(VG,Iur),e(r4,jur),e(K,Dur),e(K,t4),e(t4,E_e),e(E_e,Nur),e(t4,qur),e(t4,zG),e(zG,Our),e(t4,Gur),e(K,Xur),e(K,a4),e(a4,y_e),e(y_e,Vur),e(a4,zur),e(a4,WG),e(WG,Wur),e(a4,Qur),e(K,Hur),e(K,s4),e(s4,w_e),e(w_e,Uur),e(s4,Jur),e(s4,QG),e(QG,Yur),e(s4,Kur),e(K,Zur),e(K,n4),e(n4,A_e),e(A_e,epr),e(n4,opr),e(n4,HG),e(HG,rpr),e(n4,tpr),e(K,apr),e(K,l4),e(l4,L_e),e(L_e,spr),e(l4,npr),e(l4,UG),e(UG,lpr),e(l4,ipr),e(K,dpr),e(K,i4),e(i4,B_e),e(B_e,cpr),e(i4,mpr),e(i4,JG),e(JG,fpr),e(i4,gpr),e(K,hpr),e(K,d4),e(d4,x_e),e(x_e,upr),e(d4,ppr),e(d4,YG),e(YG,_pr),e(d4,bpr),e(K,vpr),e(K,c4),e(c4,k_e),e(k_e,Tpr),e(c4,Fpr),e(c4,KG),e(KG,Cpr),e(c4,Mpr),e(K,Epr),e(K,m4),e(m4,R_e),e(R_e,ypr),e(m4,wpr),e(m4,ZG),e(ZG,Apr),e(m4,Lpr),e(K,Bpr),e(K,f4),e(f4,S_e),e(S_e,xpr),e(f4,kpr),e(f4,eX),e(eX,Rpr),e(f4,Spr),e(K,Ppr),e(K,g4),e(g4,P_e),e(P_e,$pr),e(g4,Ipr),e(g4,oX),e(oX,jpr),e(g4,Dpr),e(K,Npr),e(K,h4),e(h4,$_e),e($_e,qpr),e(h4,Opr),e(h4,rX),e(rX,Gpr),e(h4,Xpr),e(K,Vpr),e(K,u4),e(u4,I_e),e(I_e,zpr),e(u4,Wpr),e(u4,tX),e(tX,Qpr),e(u4,Hpr),e(K,Upr),e(K,p4),e(p4,j_e),e(j_e,Jpr),e(p4,Ypr),e(p4,aX),e(aX,Kpr),e(p4,Zpr),e(Mo,e_r),e(Mo,D_e),e(D_e,o_r),e(Mo,r_r),g(G0,Mo,null),b(d,Mke,_),b(d,Gc,_),e(Gc,_4),e(_4,N_e),g(X0,N_e,null),e(Gc,t_r),e(Gc,q_e),e(q_e,a_r),b(d,Eke,_),b(d,Br,_),g(V0,Br,null),e(Br,s_r),e(Br,Xc),e(Xc,n_r),e(Xc,O_e),e(O_e,l_r),e(Xc,i_r),e(Xc,G_e),e(G_e,d_r),e(Xc,c_r),e(Br,m_r),e(Br,z0),e(z0,f_r),e(z0,X_e),e(X_e,g_r),e(z0,h_r),e(Br,u_r),e(Br,Mt),g(W0,Mt,null),e(Mt,p_r),e(Mt,V_e),e(V_e,__r),e(Mt,b_r),e(Mt,Vc),e(Vc,v_r),e(Vc,z_e),e(z_e,T_r),e(Vc,F_r),e(Vc,W_e),e(W_e,C_r),e(Vc,M_r),e(Mt,E_r),e(Mt,Q_e),e(Q_e,y_r),e(Mt,w_r),g(Q0,Mt,null),e(Br,A_r),e(Br,Eo),g(H0,Eo,null),e(Eo,L_r),e(Eo,H_e),e(H_e,B_r),e(Eo,x_r),e(Eo,Es),e(Es,k_r),e(Es,U_e),e(U_e,R_r),e(Es,S_r),e(Es,J_e),e(J_e,P_r),e(Es,$_r),e(Es,Y_e),e(Y_e,I_r),e(Es,j_r),e(Eo,D_r),e(Eo,Z),e(Z,b4),e(b4,K_e),e(K_e,N_r),e(b4,q_r),e(b4,sX),e(sX,O_r),e(b4,G_r),e(Z,X_r),e(Z,v4),e(v4,Z_e),e(Z_e,V_r),e(v4,z_r),e(v4,nX),e(nX,W_r),e(v4,Q_r),e(Z,H_r),e(Z,T4),e(T4,ebe),e(ebe,U_r),e(T4,J_r),e(T4,lX),e(lX,Y_r),e(T4,K_r),e(Z,Z_r),e(Z,F4),e(F4,obe),e(obe,ebr),e(F4,obr),e(F4,iX),e(iX,rbr),e(F4,tbr),e(Z,abr),e(Z,C4),e(C4,rbe),e(rbe,sbr),e(C4,nbr),e(C4,dX),e(dX,lbr),e(C4,ibr),e(Z,dbr),e(Z,M4),e(M4,tbe),e(tbe,cbr),e(M4,mbr),e(M4,cX),e(cX,fbr),e(M4,gbr),e(Z,hbr),e(Z,E4),e(E4,abe),e(abe,ubr),e(E4,pbr),e(E4,mX),e(mX,_br),e(E4,bbr),e(Z,vbr),e(Z,y4),e(y4,sbe),e(sbe,Tbr),e(y4,Fbr),e(y4,fX),e(fX,Cbr),e(y4,Mbr),e(Z,Ebr),e(Z,w4),e(w4,nbe),e(nbe,ybr),e(w4,wbr),e(w4,gX),e(gX,Abr),e(w4,Lbr),e(Z,Bbr),e(Z,A4),e(A4,lbe),e(lbe,xbr),e(A4,kbr),e(A4,hX),e(hX,Rbr),e(A4,Sbr),e(Z,Pbr),e(Z,L4),e(L4,ibe),e(ibe,$br),e(L4,Ibr),e(L4,uX),e(uX,jbr),e(L4,Dbr),e(Z,Nbr),e(Z,B4),e(B4,dbe),e(dbe,qbr),e(B4,Obr),e(B4,pX),e(pX,Gbr),e(B4,Xbr),e(Z,Vbr),e(Z,x4),e(x4,cbe),e(cbe,zbr),e(x4,Wbr),e(x4,_X),e(_X,Qbr),e(x4,Hbr),e(Z,Ubr),e(Z,k4),e(k4,mbe),e(mbe,Jbr),e(k4,Ybr),e(k4,bX),e(bX,Kbr),e(k4,Zbr),e(Z,e2r),e(Z,R4),e(R4,fbe),e(fbe,o2r),e(R4,r2r),e(R4,vX),e(vX,t2r),e(R4,a2r),e(Z,s2r),e(Z,S4),e(S4,gbe),e(gbe,n2r),e(S4,l2r),e(S4,TX),e(TX,i2r),e(S4,d2r),e(Z,c2r),e(Z,P4),e(P4,hbe),e(hbe,m2r),e(P4,f2r),e(P4,FX),e(FX,g2r),e(P4,h2r),e(Z,u2r),e(Z,$4),e($4,ube),e(ube,p2r),e($4,_2r),e($4,CX),e(CX,b2r),e($4,v2r),e(Z,T2r),e(Z,I4),e(I4,pbe),e(pbe,F2r),e(I4,C2r),e(I4,MX),e(MX,M2r),e(I4,E2r),e(Eo,y2r),e(Eo,_be),e(_be,w2r),e(Eo,A2r),g(U0,Eo,null),b(d,yke,_),b(d,zc,_),e(zc,j4),e(j4,bbe),g(J0,bbe,null),e(zc,L2r),e(zc,vbe),e(vbe,B2r),b(d,wke,_),b(d,xr,_),g(Y0,xr,null),e(xr,x2r),e(xr,Wc),e(Wc,k2r),e(Wc,Tbe),e(Tbe,R2r),e(Wc,S2r),e(Wc,Fbe),e(Fbe,P2r),e(Wc,$2r),e(xr,I2r),e(xr,K0),e(K0,j2r),e(K0,Cbe),e(Cbe,D2r),e(K0,N2r),e(xr,q2r),e(xr,Et),g(Z0,Et,null),e(Et,O2r),e(Et,Mbe),e(Mbe,G2r),e(Et,X2r),e(Et,Qc),e(Qc,V2r),e(Qc,Ebe),e(Ebe,z2r),e(Qc,W2r),e(Qc,ybe),e(ybe,Q2r),e(Qc,H2r),e(Et,U2r),e(Et,wbe),e(wbe,J2r),e(Et,Y2r),g(eL,Et,null),e(xr,K2r),e(xr,yo),g(oL,yo,null),e(yo,Z2r),e(yo,Abe),e(Abe,evr),e(yo,ovr),e(yo,ys),e(ys,rvr),e(ys,Lbe),e(Lbe,tvr),e(ys,avr),e(ys,Bbe),e(Bbe,svr),e(ys,nvr),e(ys,xbe),e(xbe,lvr),e(ys,ivr),e(yo,dvr),e(yo,kbe),e(kbe,D4),e(D4,Rbe),e(Rbe,cvr),e(D4,mvr),e(D4,EX),e(EX,fvr),e(D4,gvr),e(yo,hvr),e(yo,Sbe),e(Sbe,uvr),e(yo,pvr),g(rL,yo,null),b(d,Ake,_),b(d,Hc,_),e(Hc,N4),e(N4,Pbe),g(tL,Pbe,null),e(Hc,_vr),e(Hc,$be),e($be,bvr),b(d,Lke,_),b(d,kr,_),g(aL,kr,null),e(kr,vvr),e(kr,Uc),e(Uc,Tvr),e(Uc,Ibe),e(Ibe,Fvr),e(Uc,Cvr),e(Uc,jbe),e(jbe,Mvr),e(Uc,Evr),e(kr,yvr),e(kr,sL),e(sL,wvr),e(sL,Dbe),e(Dbe,Avr),e(sL,Lvr),e(kr,Bvr),e(kr,yt),g(nL,yt,null),e(yt,xvr),e(yt,Nbe),e(Nbe,kvr),e(yt,Rvr),e(yt,Jc),e(Jc,Svr),e(Jc,qbe),e(qbe,Pvr),e(Jc,$vr),e(Jc,Obe),e(Obe,Ivr),e(Jc,jvr),e(yt,Dvr),e(yt,Gbe),e(Gbe,Nvr),e(yt,qvr),g(lL,yt,null),e(kr,Ovr),e(kr,wo),g(iL,wo,null),e(wo,Gvr),e(wo,Xbe),e(Xbe,Xvr),e(wo,Vvr),e(wo,ws),e(ws,zvr),e(ws,Vbe),e(Vbe,Wvr),e(ws,Qvr),e(ws,zbe),e(zbe,Hvr),e(ws,Uvr),e(ws,Wbe),e(Wbe,Jvr),e(ws,Yvr),e(wo,Kvr),e(wo,Qbe),e(Qbe,q4),e(q4,Hbe),e(Hbe,Zvr),e(q4,eTr),e(q4,yX),e(yX,oTr),e(q4,rTr),e(wo,tTr),e(wo,Ube),e(Ube,aTr),e(wo,sTr),g(dL,wo,null),b(d,Bke,_),b(d,Yc,_),e(Yc,O4),e(O4,Jbe),g(cL,Jbe,null),e(Yc,nTr),e(Yc,Ybe),e(Ybe,lTr),b(d,xke,_),b(d,Rr,_),g(mL,Rr,null),e(Rr,iTr),e(Rr,Kc),e(Kc,dTr),e(Kc,Kbe),e(Kbe,cTr),e(Kc,mTr),e(Kc,Zbe),e(Zbe,fTr),e(Kc,gTr),e(Rr,hTr),e(Rr,fL),e(fL,uTr),e(fL,e2e),e(e2e,pTr),e(fL,_Tr),e(Rr,bTr),e(Rr,wt),g(gL,wt,null),e(wt,vTr),e(wt,o2e),e(o2e,TTr),e(wt,FTr),e(wt,Zc),e(Zc,CTr),e(Zc,r2e),e(r2e,MTr),e(Zc,ETr),e(Zc,t2e),e(t2e,yTr),e(Zc,wTr),e(wt,ATr),e(wt,a2e),e(a2e,LTr),e(wt,BTr),g(hL,wt,null),e(Rr,xTr),e(Rr,Ao),g(uL,Ao,null),e(Ao,kTr),e(Ao,s2e),e(s2e,RTr),e(Ao,STr),e(Ao,As),e(As,PTr),e(As,n2e),e(n2e,$Tr),e(As,ITr),e(As,l2e),e(l2e,jTr),e(As,DTr),e(As,i2e),e(i2e,NTr),e(As,qTr),e(Ao,OTr),e(Ao,z),e(z,G4),e(G4,d2e),e(d2e,GTr),e(G4,XTr),e(G4,wX),e(wX,VTr),e(G4,zTr),e(z,WTr),e(z,X4),e(X4,c2e),e(c2e,QTr),e(X4,HTr),e(X4,AX),e(AX,UTr),e(X4,JTr),e(z,YTr),e(z,V4),e(V4,m2e),e(m2e,KTr),e(V4,ZTr),e(V4,LX),e(LX,e1r),e(V4,o1r),e(z,r1r),e(z,z4),e(z4,f2e),e(f2e,t1r),e(z4,a1r),e(z4,BX),e(BX,s1r),e(z4,n1r),e(z,l1r),e(z,W4),e(W4,g2e),e(g2e,i1r),e(W4,d1r),e(W4,xX),e(xX,c1r),e(W4,m1r),e(z,f1r),e(z,Q4),e(Q4,h2e),e(h2e,g1r),e(Q4,h1r),e(Q4,kX),e(kX,u1r),e(Q4,p1r),e(z,_1r),e(z,H4),e(H4,u2e),e(u2e,b1r),e(H4,v1r),e(H4,RX),e(RX,T1r),e(H4,F1r),e(z,C1r),e(z,U4),e(U4,p2e),e(p2e,M1r),e(U4,E1r),e(U4,SX),e(SX,y1r),e(U4,w1r),e(z,A1r),e(z,J4),e(J4,_2e),e(_2e,L1r),e(J4,B1r),e(J4,PX),e(PX,x1r),e(J4,k1r),e(z,R1r),e(z,Y4),e(Y4,b2e),e(b2e,S1r),e(Y4,P1r),e(Y4,$X),e($X,$1r),e(Y4,I1r),e(z,j1r),e(z,K4),e(K4,v2e),e(v2e,D1r),e(K4,N1r),e(K4,IX),e(IX,q1r),e(K4,O1r),e(z,G1r),e(z,Z4),e(Z4,T2e),e(T2e,X1r),e(Z4,V1r),e(Z4,jX),e(jX,z1r),e(Z4,W1r),e(z,Q1r),e(z,eE),e(eE,F2e),e(F2e,H1r),e(eE,U1r),e(eE,DX),e(DX,J1r),e(eE,Y1r),e(z,K1r),e(z,oE),e(oE,C2e),e(C2e,Z1r),e(oE,eFr),e(oE,NX),e(NX,oFr),e(oE,rFr),e(z,tFr),e(z,rE),e(rE,M2e),e(M2e,aFr),e(rE,sFr),e(rE,qX),e(qX,nFr),e(rE,lFr),e(z,iFr),e(z,tE),e(tE,E2e),e(E2e,dFr),e(tE,cFr),e(tE,OX),e(OX,mFr),e(tE,fFr),e(z,gFr),e(z,aE),e(aE,y2e),e(y2e,hFr),e(aE,uFr),e(aE,GX),e(GX,pFr),e(aE,_Fr),e(z,bFr),e(z,sE),e(sE,w2e),e(w2e,vFr),e(sE,TFr),e(sE,XX),e(XX,FFr),e(sE,CFr),e(z,MFr),e(z,nE),e(nE,A2e),e(A2e,EFr),e(nE,yFr),e(nE,VX),e(VX,wFr),e(nE,AFr),e(z,LFr),e(z,lE),e(lE,L2e),e(L2e,BFr),e(lE,xFr),e(lE,zX),e(zX,kFr),e(lE,RFr),e(z,SFr),e(z,iE),e(iE,B2e),e(B2e,PFr),e(iE,$Fr),e(iE,WX),e(WX,IFr),e(iE,jFr),e(z,DFr),e(z,dE),e(dE,x2e),e(x2e,NFr),e(dE,qFr),e(dE,QX),e(QX,OFr),e(dE,GFr),e(z,XFr),e(z,cE),e(cE,k2e),e(k2e,VFr),e(cE,zFr),e(cE,HX),e(HX,WFr),e(cE,QFr),e(z,HFr),e(z,mE),e(mE,R2e),e(R2e,UFr),e(mE,JFr),e(mE,UX),e(UX,YFr),e(mE,KFr),e(z,ZFr),e(z,fE),e(fE,S2e),e(S2e,eCr),e(fE,oCr),e(fE,JX),e(JX,rCr),e(fE,tCr),e(Ao,aCr),e(Ao,P2e),e(P2e,sCr),e(Ao,nCr),g(pL,Ao,null),b(d,kke,_),b(d,em,_),e(em,gE),e(gE,$2e),g(_L,$2e,null),e(em,lCr),e(em,I2e),e(I2e,iCr),b(d,Rke,_),b(d,Sr,_),g(bL,Sr,null),e(Sr,dCr),e(Sr,om),e(om,cCr),e(om,j2e),e(j2e,mCr),e(om,fCr),e(om,D2e),e(D2e,gCr),e(om,hCr),e(Sr,uCr),e(Sr,vL),e(vL,pCr),e(vL,N2e),e(N2e,_Cr),e(vL,bCr),e(Sr,vCr),e(Sr,At),g(TL,At,null),e(At,TCr),e(At,q2e),e(q2e,FCr),e(At,CCr),e(At,rm),e(rm,MCr),e(rm,O2e),e(O2e,ECr),e(rm,yCr),e(rm,G2e),e(G2e,wCr),e(rm,ACr),e(At,LCr),e(At,X2e),e(X2e,BCr),e(At,xCr),g(FL,At,null),e(Sr,kCr),e(Sr,Lo),g(CL,Lo,null),e(Lo,RCr),e(Lo,V2e),e(V2e,SCr),e(Lo,PCr),e(Lo,Ls),e(Ls,$Cr),e(Ls,z2e),e(z2e,ICr),e(Ls,jCr),e(Ls,W2e),e(W2e,DCr),e(Ls,NCr),e(Ls,Q2e),e(Q2e,qCr),e(Ls,OCr),e(Lo,GCr),e(Lo,Bs),e(Bs,hE),e(hE,H2e),e(H2e,XCr),e(hE,VCr),e(hE,YX),e(YX,zCr),e(hE,WCr),e(Bs,QCr),e(Bs,uE),e(uE,U2e),e(U2e,HCr),e(uE,UCr),e(uE,KX),e(KX,JCr),e(uE,YCr),e(Bs,KCr),e(Bs,pE),e(pE,J2e),e(J2e,ZCr),e(pE,eMr),e(pE,ZX),e(ZX,oMr),e(pE,rMr),e(Bs,tMr),e(Bs,_E),e(_E,Y2e),e(Y2e,aMr),e(_E,sMr),e(_E,eV),e(eV,nMr),e(_E,lMr),e(Lo,iMr),e(Lo,K2e),e(K2e,dMr),e(Lo,cMr),g(ML,Lo,null),b(d,Ske,_),b(d,tm,_),e(tm,bE),e(bE,Z2e),g(EL,Z2e,null),e(tm,mMr),e(tm,eve),e(eve,fMr),b(d,Pke,_),b(d,Pr,_),g(yL,Pr,null),e(Pr,gMr),e(Pr,am),e(am,hMr),e(am,ove),e(ove,uMr),e(am,pMr),e(am,rve),e(rve,_Mr),e(am,bMr),e(Pr,vMr),e(Pr,wL),e(wL,TMr),e(wL,tve),e(tve,FMr),e(wL,CMr),e(Pr,MMr),e(Pr,Lt),g(AL,Lt,null),e(Lt,EMr),e(Lt,ave),e(ave,yMr),e(Lt,wMr),e(Lt,sm),e(sm,AMr),e(sm,sve),e(sve,LMr),e(sm,BMr),e(sm,nve),e(nve,xMr),e(sm,kMr),e(Lt,RMr),e(Lt,lve),e(lve,SMr),e(Lt,PMr),g(LL,Lt,null),e(Pr,$Mr),e(Pr,Bo),g(BL,Bo,null),e(Bo,IMr),e(Bo,ive),e(ive,jMr),e(Bo,DMr),e(Bo,xs),e(xs,NMr),e(xs,dve),e(dve,qMr),e(xs,OMr),e(xs,cve),e(cve,GMr),e(xs,XMr),e(xs,mve),e(mve,VMr),e(xs,zMr),e(Bo,WMr),e(Bo,ce),e(ce,vE),e(vE,fve),e(fve,QMr),e(vE,HMr),e(vE,oV),e(oV,UMr),e(vE,JMr),e(ce,YMr),e(ce,TE),e(TE,gve),e(gve,KMr),e(TE,ZMr),e(TE,rV),e(rV,e4r),e(TE,o4r),e(ce,r4r),e(ce,FE),e(FE,hve),e(hve,t4r),e(FE,a4r),e(FE,tV),e(tV,s4r),e(FE,n4r),e(ce,l4r),e(ce,CE),e(CE,uve),e(uve,i4r),e(CE,d4r),e(CE,aV),e(aV,c4r),e(CE,m4r),e(ce,f4r),e(ce,ME),e(ME,pve),e(pve,g4r),e(ME,h4r),e(ME,sV),e(sV,u4r),e(ME,p4r),e(ce,_4r),e(ce,EE),e(EE,_ve),e(_ve,b4r),e(EE,v4r),e(EE,nV),e(nV,T4r),e(EE,F4r),e(ce,C4r),e(ce,yE),e(yE,bve),e(bve,M4r),e(yE,E4r),e(yE,lV),e(lV,y4r),e(yE,w4r),e(ce,A4r),e(ce,wE),e(wE,vve),e(vve,L4r),e(wE,B4r),e(wE,iV),e(iV,x4r),e(wE,k4r),e(ce,R4r),e(ce,AE),e(AE,Tve),e(Tve,S4r),e(AE,P4r),e(AE,dV),e(dV,$4r),e(AE,I4r),e(ce,j4r),e(ce,LE),e(LE,Fve),e(Fve,D4r),e(LE,N4r),e(LE,cV),e(cV,q4r),e(LE,O4r),e(ce,G4r),e(ce,BE),e(BE,Cve),e(Cve,X4r),e(BE,V4r),e(BE,mV),e(mV,z4r),e(BE,W4r),e(ce,Q4r),e(ce,xE),e(xE,Mve),e(Mve,H4r),e(xE,U4r),e(xE,fV),e(fV,J4r),e(xE,Y4r),e(Bo,K4r),e(Bo,Eve),e(Eve,Z4r),e(Bo,eEr),g(xL,Bo,null),b(d,$ke,_),b(d,nm,_),e(nm,kE),e(kE,yve),g(kL,yve,null),e(nm,oEr),e(nm,wve),e(wve,rEr),b(d,Ike,_),b(d,$r,_),g(RL,$r,null),e($r,tEr),e($r,lm),e(lm,aEr),e(lm,Ave),e(Ave,sEr),e(lm,nEr),e(lm,Lve),e(Lve,lEr),e(lm,iEr),e($r,dEr),e($r,SL),e(SL,cEr),e(SL,Bve),e(Bve,mEr),e(SL,fEr),e($r,gEr),e($r,Bt),g(PL,Bt,null),e(Bt,hEr),e(Bt,xve),e(xve,uEr),e(Bt,pEr),e(Bt,im),e(im,_Er),e(im,kve),e(kve,bEr),e(im,vEr),e(im,Rve),e(Rve,TEr),e(im,FEr),e(Bt,CEr),e(Bt,Sve),e(Sve,MEr),e(Bt,EEr),g($L,Bt,null),e($r,yEr),e($r,xo),g(IL,xo,null),e(xo,wEr),e(xo,Pve),e(Pve,AEr),e(xo,LEr),e(xo,ks),e(ks,BEr),e(ks,$ve),e($ve,xEr),e(ks,kEr),e(ks,Ive),e(Ive,REr),e(ks,SEr),e(ks,jve),e(jve,PEr),e(ks,$Er),e(xo,IEr),e(xo,_e),e(_e,RE),e(RE,Dve),e(Dve,jEr),e(RE,DEr),e(RE,gV),e(gV,NEr),e(RE,qEr),e(_e,OEr),e(_e,SE),e(SE,Nve),e(Nve,GEr),e(SE,XEr),e(SE,hV),e(hV,VEr),e(SE,zEr),e(_e,WEr),e(_e,PE),e(PE,qve),e(qve,QEr),e(PE,HEr),e(PE,uV),e(uV,UEr),e(PE,JEr),e(_e,YEr),e(_e,$E),e($E,Ove),e(Ove,KEr),e($E,ZEr),e($E,pV),e(pV,e3r),e($E,o3r),e(_e,r3r),e(_e,IE),e(IE,Gve),e(Gve,t3r),e(IE,a3r),e(IE,_V),e(_V,s3r),e(IE,n3r),e(_e,l3r),e(_e,jE),e(jE,Xve),e(Xve,i3r),e(jE,d3r),e(jE,bV),e(bV,c3r),e(jE,m3r),e(_e,f3r),e(_e,DE),e(DE,Vve),e(Vve,g3r),e(DE,h3r),e(DE,vV),e(vV,u3r),e(DE,p3r),e(_e,_3r),e(_e,NE),e(NE,zve),e(zve,b3r),e(NE,v3r),e(NE,TV),e(TV,T3r),e(NE,F3r),e(_e,C3r),e(_e,qE),e(qE,Wve),e(Wve,M3r),e(qE,E3r),e(qE,FV),e(FV,y3r),e(qE,w3r),e(_e,A3r),e(_e,OE),e(OE,Qve),e(Qve,L3r),e(OE,B3r),e(OE,CV),e(CV,x3r),e(OE,k3r),e(xo,R3r),e(xo,Hve),e(Hve,S3r),e(xo,P3r),g(jL,xo,null),b(d,jke,_),b(d,dm,_),e(dm,GE),e(GE,Uve),g(DL,Uve,null),e(dm,$3r),e(dm,Jve),e(Jve,I3r),b(d,Dke,_),b(d,Ir,_),g(NL,Ir,null),e(Ir,j3r),e(Ir,cm),e(cm,D3r),e(cm,Yve),e(Yve,N3r),e(cm,q3r),e(cm,Kve),e(Kve,O3r),e(cm,G3r),e(Ir,X3r),e(Ir,qL),e(qL,V3r),e(qL,Zve),e(Zve,z3r),e(qL,W3r),e(Ir,Q3r),e(Ir,xt),g(OL,xt,null),e(xt,H3r),e(xt,eTe),e(eTe,U3r),e(xt,J3r),e(xt,mm),e(mm,Y3r),e(mm,oTe),e(oTe,K3r),e(mm,Z3r),e(mm,rTe),e(rTe,e5r),e(mm,o5r),e(xt,r5r),e(xt,tTe),e(tTe,t5r),e(xt,a5r),g(GL,xt,null),e(Ir,s5r),e(Ir,ko),g(XL,ko,null),e(ko,n5r),e(ko,aTe),e(aTe,l5r),e(ko,i5r),e(ko,Rs),e(Rs,d5r),e(Rs,sTe),e(sTe,c5r),e(Rs,m5r),e(Rs,nTe),e(nTe,f5r),e(Rs,g5r),e(Rs,lTe),e(lTe,h5r),e(Rs,u5r),e(ko,p5r),e(ko,Ce),e(Ce,XE),e(XE,iTe),e(iTe,_5r),e(XE,b5r),e(XE,MV),e(MV,v5r),e(XE,T5r),e(Ce,F5r),e(Ce,VE),e(VE,dTe),e(dTe,C5r),e(VE,M5r),e(VE,EV),e(EV,E5r),e(VE,y5r),e(Ce,w5r),e(Ce,zE),e(zE,cTe),e(cTe,A5r),e(zE,L5r),e(zE,yV),e(yV,B5r),e(zE,x5r),e(Ce,k5r),e(Ce,WE),e(WE,mTe),e(mTe,R5r),e(WE,S5r),e(WE,wV),e(wV,P5r),e(WE,$5r),e(Ce,I5r),e(Ce,QE),e(QE,fTe),e(fTe,j5r),e(QE,D5r),e(QE,AV),e(AV,N5r),e(QE,q5r),e(Ce,O5r),e(Ce,HE),e(HE,gTe),e(gTe,G5r),e(HE,X5r),e(HE,LV),e(LV,V5r),e(HE,z5r),e(Ce,W5r),e(Ce,UE),e(UE,hTe),e(hTe,Q5r),e(UE,H5r),e(UE,BV),e(BV,U5r),e(UE,J5r),e(Ce,Y5r),e(Ce,JE),e(JE,uTe),e(uTe,K5r),e(JE,Z5r),e(JE,xV),e(xV,eyr),e(JE,oyr),e(Ce,ryr),e(Ce,YE),e(YE,pTe),e(pTe,tyr),e(YE,ayr),e(YE,kV),e(kV,syr),e(YE,nyr),e(ko,lyr),e(ko,_Te),e(_Te,iyr),e(ko,dyr),g(VL,ko,null),b(d,Nke,_),b(d,fm,_),e(fm,KE),e(KE,bTe),g(zL,bTe,null),e(fm,cyr),e(fm,vTe),e(vTe,myr),b(d,qke,_),b(d,jr,_),g(WL,jr,null),e(jr,fyr),e(jr,gm),e(gm,gyr),e(gm,TTe),e(TTe,hyr),e(gm,uyr),e(gm,FTe),e(FTe,pyr),e(gm,_yr),e(jr,byr),e(jr,QL),e(QL,vyr),e(QL,CTe),e(CTe,Tyr),e(QL,Fyr),e(jr,Cyr),e(jr,kt),g(HL,kt,null),e(kt,Myr),e(kt,MTe),e(MTe,Eyr),e(kt,yyr),e(kt,hm),e(hm,wyr),e(hm,ETe),e(ETe,Ayr),e(hm,Lyr),e(hm,yTe),e(yTe,Byr),e(hm,xyr),e(kt,kyr),e(kt,wTe),e(wTe,Ryr),e(kt,Syr),g(UL,kt,null),e(jr,Pyr),e(jr,Ro),g(JL,Ro,null),e(Ro,$yr),e(Ro,ATe),e(ATe,Iyr),e(Ro,jyr),e(Ro,Ss),e(Ss,Dyr),e(Ss,LTe),e(LTe,Nyr),e(Ss,qyr),e(Ss,BTe),e(BTe,Oyr),e(Ss,Gyr),e(Ss,xTe),e(xTe,Xyr),e(Ss,Vyr),e(Ro,zyr),e(Ro,be),e(be,ZE),e(ZE,kTe),e(kTe,Wyr),e(ZE,Qyr),e(ZE,RV),e(RV,Hyr),e(ZE,Uyr),e(be,Jyr),e(be,e3),e(e3,RTe),e(RTe,Yyr),e(e3,Kyr),e(e3,SV),e(SV,Zyr),e(e3,ewr),e(be,owr),e(be,o3),e(o3,STe),e(STe,rwr),e(o3,twr),e(o3,PV),e(PV,awr),e(o3,swr),e(be,nwr),e(be,r3),e(r3,PTe),e(PTe,lwr),e(r3,iwr),e(r3,$V),e($V,dwr),e(r3,cwr),e(be,mwr),e(be,t3),e(t3,$Te),e($Te,fwr),e(t3,gwr),e(t3,IV),e(IV,hwr),e(t3,uwr),e(be,pwr),e(be,a3),e(a3,ITe),e(ITe,_wr),e(a3,bwr),e(a3,jV),e(jV,vwr),e(a3,Twr),e(be,Fwr),e(be,s3),e(s3,jTe),e(jTe,Cwr),e(s3,Mwr),e(s3,DV),e(DV,Ewr),e(s3,ywr),e(be,wwr),e(be,n3),e(n3,DTe),e(DTe,Awr),e(n3,Lwr),e(n3,NV),e(NV,Bwr),e(n3,xwr),e(be,kwr),e(be,l3),e(l3,NTe),e(NTe,Rwr),e(l3,Swr),e(l3,qV),e(qV,Pwr),e(l3,$wr),e(be,Iwr),e(be,i3),e(i3,qTe),e(qTe,jwr),e(i3,Dwr),e(i3,OV),e(OV,Nwr),e(i3,qwr),e(Ro,Owr),e(Ro,OTe),e(OTe,Gwr),e(Ro,Xwr),g(YL,Ro,null),b(d,Oke,_),b(d,um,_),e(um,d3),e(d3,GTe),g(KL,GTe,null),e(um,Vwr),e(um,XTe),e(XTe,zwr),b(d,Gke,_),b(d,Dr,_),g(ZL,Dr,null),e(Dr,Wwr),e(Dr,pm),e(pm,Qwr),e(pm,VTe),e(VTe,Hwr),e(pm,Uwr),e(pm,zTe),e(zTe,Jwr),e(pm,Ywr),e(Dr,Kwr),e(Dr,e8),e(e8,Zwr),e(e8,WTe),e(WTe,e6r),e(e8,o6r),e(Dr,r6r),e(Dr,Rt),g(o8,Rt,null),e(Rt,t6r),e(Rt,QTe),e(QTe,a6r),e(Rt,s6r),e(Rt,_m),e(_m,n6r),e(_m,HTe),e(HTe,l6r),e(_m,i6r),e(_m,UTe),e(UTe,d6r),e(_m,c6r),e(Rt,m6r),e(Rt,JTe),e(JTe,f6r),e(Rt,g6r),g(r8,Rt,null),e(Dr,h6r),e(Dr,So),g(t8,So,null),e(So,u6r),e(So,YTe),e(YTe,p6r),e(So,_6r),e(So,Ps),e(Ps,b6r),e(Ps,KTe),e(KTe,v6r),e(Ps,T6r),e(Ps,ZTe),e(ZTe,F6r),e(Ps,C6r),e(Ps,e1e),e(e1e,M6r),e(Ps,E6r),e(So,y6r),e(So,ve),e(ve,c3),e(c3,o1e),e(o1e,w6r),e(c3,A6r),e(c3,GV),e(GV,L6r),e(c3,B6r),e(ve,x6r),e(ve,m3),e(m3,r1e),e(r1e,k6r),e(m3,R6r),e(m3,XV),e(XV,S6r),e(m3,P6r),e(ve,$6r),e(ve,f3),e(f3,t1e),e(t1e,I6r),e(f3,j6r),e(f3,VV),e(VV,D6r),e(f3,N6r),e(ve,q6r),e(ve,g3),e(g3,a1e),e(a1e,O6r),e(g3,G6r),e(g3,zV),e(zV,X6r),e(g3,V6r),e(ve,z6r),e(ve,h3),e(h3,s1e),e(s1e,W6r),e(h3,Q6r),e(h3,WV),e(WV,H6r),e(h3,U6r),e(ve,J6r),e(ve,u3),e(u3,n1e),e(n1e,Y6r),e(u3,K6r),e(u3,QV),e(QV,Z6r),e(u3,eAr),e(ve,oAr),e(ve,p3),e(p3,l1e),e(l1e,rAr),e(p3,tAr),e(p3,HV),e(HV,aAr),e(p3,sAr),e(ve,nAr),e(ve,_3),e(_3,i1e),e(i1e,lAr),e(_3,iAr),e(_3,UV),e(UV,dAr),e(_3,cAr),e(ve,mAr),e(ve,b3),e(b3,d1e),e(d1e,fAr),e(b3,gAr),e(b3,JV),e(JV,hAr),e(b3,uAr),e(ve,pAr),e(ve,v3),e(v3,c1e),e(c1e,_Ar),e(v3,bAr),e(v3,YV),e(YV,vAr),e(v3,TAr),e(So,FAr),e(So,m1e),e(m1e,CAr),e(So,MAr),g(a8,So,null),b(d,Xke,_),b(d,bm,_),e(bm,T3),e(T3,f1e),g(s8,f1e,null),e(bm,EAr),e(bm,g1e),e(g1e,yAr),b(d,Vke,_),b(d,Nr,_),g(n8,Nr,null),e(Nr,wAr),e(Nr,vm),e(vm,AAr),e(vm,h1e),e(h1e,LAr),e(vm,BAr),e(vm,u1e),e(u1e,xAr),e(vm,kAr),e(Nr,RAr),e(Nr,l8),e(l8,SAr),e(l8,p1e),e(p1e,PAr),e(l8,$Ar),e(Nr,IAr),e(Nr,St),g(i8,St,null),e(St,jAr),e(St,_1e),e(_1e,DAr),e(St,NAr),e(St,Tm),e(Tm,qAr),e(Tm,b1e),e(b1e,OAr),e(Tm,GAr),e(Tm,v1e),e(v1e,XAr),e(Tm,VAr),e(St,zAr),e(St,T1e),e(T1e,WAr),e(St,QAr),g(d8,St,null),e(Nr,HAr),e(Nr,Po),g(c8,Po,null),e(Po,UAr),e(Po,F1e),e(F1e,JAr),e(Po,YAr),e(Po,$s),e($s,KAr),e($s,C1e),e(C1e,ZAr),e($s,e0r),e($s,M1e),e(M1e,o0r),e($s,r0r),e($s,E1e),e(E1e,t0r),e($s,a0r),e(Po,s0r),e(Po,Re),e(Re,F3),e(F3,y1e),e(y1e,n0r),e(F3,l0r),e(F3,KV),e(KV,i0r),e(F3,d0r),e(Re,c0r),e(Re,C3),e(C3,w1e),e(w1e,m0r),e(C3,f0r),e(C3,ZV),e(ZV,g0r),e(C3,h0r),e(Re,u0r),e(Re,M3),e(M3,A1e),e(A1e,p0r),e(M3,_0r),e(M3,ez),e(ez,b0r),e(M3,v0r),e(Re,T0r),e(Re,E3),e(E3,L1e),e(L1e,F0r),e(E3,C0r),e(E3,oz),e(oz,M0r),e(E3,E0r),e(Re,y0r),e(Re,y3),e(y3,B1e),e(B1e,w0r),e(y3,A0r),e(y3,rz),e(rz,L0r),e(y3,B0r),e(Re,x0r),e(Re,w3),e(w3,x1e),e(x1e,k0r),e(w3,R0r),e(w3,tz),e(tz,S0r),e(w3,P0r),e(Re,$0r),e(Re,A3),e(A3,k1e),e(k1e,I0r),e(A3,j0r),e(A3,az),e(az,D0r),e(A3,N0r),e(Re,q0r),e(Re,L3),e(L3,R1e),e(R1e,O0r),e(L3,G0r),e(L3,sz),e(sz,X0r),e(L3,V0r),e(Po,z0r),e(Po,S1e),e(S1e,W0r),e(Po,Q0r),g(m8,Po,null),b(d,zke,_),b(d,Fm,_),e(Fm,B3),e(B3,P1e),g(f8,P1e,null),e(Fm,H0r),e(Fm,$1e),e($1e,U0r),b(d,Wke,_),b(d,qr,_),g(g8,qr,null),e(qr,J0r),e(qr,Cm),e(Cm,Y0r),e(Cm,I1e),e(I1e,K0r),e(Cm,Z0r),e(Cm,j1e),e(j1e,eLr),e(Cm,oLr),e(qr,rLr),e(qr,h8),e(h8,tLr),e(h8,D1e),e(D1e,aLr),e(h8,sLr),e(qr,nLr),e(qr,Pt),g(u8,Pt,null),e(Pt,lLr),e(Pt,N1e),e(N1e,iLr),e(Pt,dLr),e(Pt,Mm),e(Mm,cLr),e(Mm,q1e),e(q1e,mLr),e(Mm,fLr),e(Mm,O1e),e(O1e,gLr),e(Mm,hLr),e(Pt,uLr),e(Pt,G1e),e(G1e,pLr),e(Pt,_Lr),g(p8,Pt,null),e(qr,bLr),e(qr,$o),g(_8,$o,null),e($o,vLr),e($o,X1e),e(X1e,TLr),e($o,FLr),e($o,Is),e(Is,CLr),e(Is,V1e),e(V1e,MLr),e(Is,ELr),e(Is,z1e),e(z1e,yLr),e(Is,wLr),e(Is,W1e),e(W1e,ALr),e(Is,LLr),e($o,BLr),e($o,Se),e(Se,x3),e(x3,Q1e),e(Q1e,xLr),e(x3,kLr),e(x3,nz),e(nz,RLr),e(x3,SLr),e(Se,PLr),e(Se,k3),e(k3,H1e),e(H1e,$Lr),e(k3,ILr),e(k3,lz),e(lz,jLr),e(k3,DLr),e(Se,NLr),e(Se,R3),e(R3,U1e),e(U1e,qLr),e(R3,OLr),e(R3,iz),e(iz,GLr),e(R3,XLr),e(Se,VLr),e(Se,S3),e(S3,J1e),e(J1e,zLr),e(S3,WLr),e(S3,dz),e(dz,QLr),e(S3,HLr),e(Se,ULr),e(Se,P3),e(P3,Y1e),e(Y1e,JLr),e(P3,YLr),e(P3,cz),e(cz,KLr),e(P3,ZLr),e(Se,e8r),e(Se,$3),e($3,K1e),e(K1e,o8r),e($3,r8r),e($3,mz),e(mz,t8r),e($3,a8r),e(Se,s8r),e(Se,I3),e(I3,Z1e),e(Z1e,n8r),e(I3,l8r),e(I3,fz),e(fz,i8r),e(I3,d8r),e(Se,c8r),e(Se,j3),e(j3,eFe),e(eFe,m8r),e(j3,f8r),e(j3,gz),e(gz,g8r),e(j3,h8r),e($o,u8r),e($o,oFe),e(oFe,p8r),e($o,_8r),g(b8,$o,null),b(d,Qke,_),b(d,Em,_),e(Em,D3),e(D3,rFe),g(v8,rFe,null),e(Em,b8r),e(Em,tFe),e(tFe,v8r),b(d,Hke,_),b(d,Or,_),g(T8,Or,null),e(Or,T8r),e(Or,ym),e(ym,F8r),e(ym,aFe),e(aFe,C8r),e(ym,M8r),e(ym,sFe),e(sFe,E8r),e(ym,y8r),e(Or,w8r),e(Or,F8),e(F8,A8r),e(F8,nFe),e(nFe,L8r),e(F8,B8r),e(Or,x8r),e(Or,$t),g(C8,$t,null),e($t,k8r),e($t,lFe),e(lFe,R8r),e($t,S8r),e($t,wm),e(wm,P8r),e(wm,iFe),e(iFe,$8r),e(wm,I8r),e(wm,dFe),e(dFe,j8r),e(wm,D8r),e($t,N8r),e($t,cFe),e(cFe,q8r),e($t,O8r),g(M8,$t,null),e(Or,G8r),e(Or,Io),g(E8,Io,null),e(Io,X8r),e(Io,mFe),e(mFe,V8r),e(Io,z8r),e(Io,js),e(js,W8r),e(js,fFe),e(fFe,Q8r),e(js,H8r),e(js,gFe),e(gFe,U8r),e(js,J8r),e(js,hFe),e(hFe,Y8r),e(js,K8r),e(Io,Z8r),e(Io,uFe),e(uFe,N3),e(N3,pFe),e(pFe,e7r),e(N3,o7r),e(N3,hz),e(hz,r7r),e(N3,t7r),e(Io,a7r),e(Io,_Fe),e(_Fe,s7r),e(Io,n7r),g(y8,Io,null),b(d,Uke,_),b(d,Am,_),e(Am,q3),e(q3,bFe),g(w8,bFe,null),e(Am,l7r),e(Am,vFe),e(vFe,i7r),b(d,Jke,_),b(d,Gr,_),g(A8,Gr,null),e(Gr,d7r),e(Gr,Lm),e(Lm,c7r),e(Lm,TFe),e(TFe,m7r),e(Lm,f7r),e(Lm,FFe),e(FFe,g7r),e(Lm,h7r),e(Gr,u7r),e(Gr,L8),e(L8,p7r),e(L8,CFe),e(CFe,_7r),e(L8,b7r),e(Gr,v7r),e(Gr,It),g(B8,It,null),e(It,T7r),e(It,MFe),e(MFe,F7r),e(It,C7r),e(It,Bm),e(Bm,M7r),e(Bm,EFe),e(EFe,E7r),e(Bm,y7r),e(Bm,yFe),e(yFe,w7r),e(Bm,A7r),e(It,L7r),e(It,wFe),e(wFe,B7r),e(It,x7r),g(x8,It,null),e(Gr,k7r),e(Gr,jo),g(k8,jo,null),e(jo,R7r),e(jo,AFe),e(AFe,S7r),e(jo,P7r),e(jo,Ds),e(Ds,$7r),e(Ds,LFe),e(LFe,I7r),e(Ds,j7r),e(Ds,BFe),e(BFe,D7r),e(Ds,N7r),e(Ds,xFe),e(xFe,q7r),e(Ds,O7r),e(jo,G7r),e(jo,R8),e(R8,O3),e(O3,kFe),e(kFe,X7r),e(O3,V7r),e(O3,uz),e(uz,z7r),e(O3,W7r),e(R8,Q7r),e(R8,G3),e(G3,RFe),e(RFe,H7r),e(G3,U7r),e(G3,pz),e(pz,J7r),e(G3,Y7r),e(jo,K7r),e(jo,SFe),e(SFe,Z7r),e(jo,e9r),g(S8,jo,null),b(d,Yke,_),b(d,xm,_),e(xm,X3),e(X3,PFe),g(P8,PFe,null),e(xm,o9r),e(xm,$Fe),e($Fe,r9r),b(d,Kke,_),b(d,Xr,_),g($8,Xr,null),e(Xr,t9r),e(Xr,km),e(km,a9r),e(km,IFe),e(IFe,s9r),e(km,n9r),e(km,jFe),e(jFe,l9r),e(km,i9r),e(Xr,d9r),e(Xr,I8),e(I8,c9r),e(I8,DFe),e(DFe,m9r),e(I8,f9r),e(Xr,g9r),e(Xr,jt),g(j8,jt,null),e(jt,h9r),e(jt,NFe),e(NFe,u9r),e(jt,p9r),e(jt,Rm),e(Rm,_9r),e(Rm,qFe),e(qFe,b9r),e(Rm,v9r),e(Rm,OFe),e(OFe,T9r),e(Rm,F9r),e(jt,C9r),e(jt,GFe),e(GFe,M9r),e(jt,E9r),g(D8,jt,null),e(Xr,y9r),e(Xr,Do),g(N8,Do,null),e(Do,w9r),e(Do,XFe),e(XFe,A9r),e(Do,L9r),e(Do,Ns),e(Ns,B9r),e(Ns,VFe),e(VFe,x9r),e(Ns,k9r),e(Ns,zFe),e(zFe,R9r),e(Ns,S9r),e(Ns,WFe),e(WFe,P9r),e(Ns,$9r),e(Do,I9r),e(Do,QFe),e(QFe,V3),e(V3,HFe),e(HFe,j9r),e(V3,D9r),e(V3,_z),e(_z,N9r),e(V3,q9r),e(Do,O9r),e(Do,UFe),e(UFe,G9r),e(Do,X9r),g(q8,Do,null),Zke=!0},p(d,[_]){const O8={};_&2&&(O8.$$scope={dirty:_,ctx:d}),Nm.$set(O8);const JFe={};_&2&&(JFe.$$scope={dirty:_,ctx:d}),Mh.$set(JFe);const YFe={};_&2&&(YFe.$$scope={dirty:_,ctx:d}),Ph.$set(YFe)},i(d){Zke||(h(me.$$.fragment,d),h(Na.$$.fragment,d),h(U5.$$.fragment,d),h(J5.$$.fragment,d),h(Nm.$$.fragment,d),h(Y5.$$.fragment,d),h(K5.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(sy.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(my.$$.fragment,d),h(fy.$$.fragment,d),h(uy.$$.fragment,d),h(Mh.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Cy.$$.fragment,d),h(Ph.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Gy.$$.fragment,d),h(Xy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(sw.$$.fragment,d),h(nw.$$.fragment,d),h(lw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(fw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(a6.$$.fragment,d),h(s6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(m6.$$.fragment,d),h(f6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(u6.$$.fragment,d),h(p6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(q6.$$.fragment,d),h(O6.$$.fragment,d),h(G6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(U6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(mA.$$.fragment,d),h(fA.$$.fragment,d),h(hA.$$.fragment,d),h(uA.$$.fragment,d),h(pA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(a0.$$.fragment,d),h(s0.$$.fragment,d),h(n0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(m0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(u0.$$.fragment,d),h(p0.$$.fragment,d),h(b0.$$.fragment,d),h(v0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(y0.$$.fragment,d),h(w0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(R0.$$.fragment,d),h(S0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(N0.$$.fragment,d),h(q0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),h(X0.$$.fragment,d),h(V0.$$.fragment,d),h(W0.$$.fragment,d),h(Q0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(Z0.$$.fragment,d),h(eL.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(lL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(hL.$$.fragment,d),h(uL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(bL.$$.fragment,d),h(TL.$$.fragment,d),h(FL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(AL.$$.fragment,d),h(LL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(PL.$$.fragment,d),h($L.$$.fragment,d),h(IL.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(OL.$$.fragment,d),h(GL.$$.fragment,d),h(XL.$$.fragment,d),h(VL.$$.fragment,d),h(zL.$$.fragment,d),h(WL.$$.fragment,d),h(HL.$$.fragment,d),h(UL.$$.fragment,d),h(JL.$$.fragment,d),h(YL.$$.fragment,d),h(KL.$$.fragment,d),h(ZL.$$.fragment,d),h(o8.$$.fragment,d),h(r8.$$.fragment,d),h(t8.$$.fragment,d),h(a8.$$.fragment,d),h(s8.$$.fragment,d),h(n8.$$.fragment,d),h(i8.$$.fragment,d),h(d8.$$.fragment,d),h(c8.$$.fragment,d),h(m8.$$.fragment,d),h(f8.$$.fragment,d),h(g8.$$.fragment,d),h(u8.$$.fragment,d),h(p8.$$.fragment,d),h(_8.$$.fragment,d),h(b8.$$.fragment,d),h(v8.$$.fragment,d),h(T8.$$.fragment,d),h(C8.$$.fragment,d),h(M8.$$.fragment,d),h(E8.$$.fragment,d),h(y8.$$.fragment,d),h(w8.$$.fragment,d),h(A8.$$.fragment,d),h(B8.$$.fragment,d),h(x8.$$.fragment,d),h(k8.$$.fragment,d),h(S8.$$.fragment,d),h(P8.$$.fragment,d),h($8.$$.fragment,d),h(j8.$$.fragment,d),h(D8.$$.fragment,d),h(N8.$$.fragment,d),h(q8.$$.fragment,d),Zke=!0)},o(d){u(me.$$.fragment,d),u(Na.$$.fragment,d),u(U5.$$.fragment,d),u(J5.$$.fragment,d),u(Nm.$$.fragment,d),u(Y5.$$.fragment,d),u(K5.$$.fragment,d),u(oy.$$.fragment,d),u(ry.$$.fragment,d),u(ty.$$.fragment,d),u(ay.$$.fragment,d),u(sy.$$.fragment,d),u(iy.$$.fragment,d),u(dy.$$.fragment,d),u(cy.$$.fragment,d),u(my.$$.fragment,d),u(fy.$$.fragment,d),u(uy.$$.fragment,d),u(Mh.$$.fragment,d),u(py.$$.fragment,d),u(_y.$$.fragment,d),u(by.$$.fragment,d),u(vy.$$.fragment,d),u(Cy.$$.fragment,d),u(Ph.$$.fragment,d),u(My.$$.fragment,d),u(Ey.$$.fragment,d),u(yy.$$.fragment,d),u(wy.$$.fragment,d),u(Ly.$$.fragment,d),u(By.$$.fragment,d),u(xy.$$.fragment,d),u(ky.$$.fragment,d),u(Ry.$$.fragment,d),u(Sy.$$.fragment,d),u($y.$$.fragment,d),u(Iy.$$.fragment,d),u(jy.$$.fragment,d),u(Dy.$$.fragment,d),u(Ny.$$.fragment,d),u(qy.$$.fragment,d),u(Gy.$$.fragment,d),u(Xy.$$.fragment,d),u(Vy.$$.fragment,d),u(zy.$$.fragment,d),u(Wy.$$.fragment,d),u(Qy.$$.fragment,d),u(Uy.$$.fragment,d),u(Jy.$$.fragment,d),u(Yy.$$.fragment,d),u(Ky.$$.fragment,d),u(Zy.$$.fragment,d),u(ew.$$.fragment,d),u(rw.$$.fragment,d),u(tw.$$.fragment,d),u(aw.$$.fragment,d),u(sw.$$.fragment,d),u(nw.$$.fragment,d),u(lw.$$.fragment,d),u(dw.$$.fragment,d),u(cw.$$.fragment,d),u(mw.$$.fragment,d),u(fw.$$.fragment,d),u(gw.$$.fragment,d),u(hw.$$.fragment,d),u(pw.$$.fragment,d),u(_w.$$.fragment,d),u(bw.$$.fragment,d),u(vw.$$.fragment,d),u(Tw.$$.fragment,d),u(Fw.$$.fragment,d),u(Mw.$$.fragment,d),u(Ew.$$.fragment,d),u(yw.$$.fragment,d),u(ww.$$.fragment,d),u(Aw.$$.fragment,d),u(Lw.$$.fragment,d),u(xw.$$.fragment,d),u(kw.$$.fragment,d),u(Rw.$$.fragment,d),u(Sw.$$.fragment,d),u(Pw.$$.fragment,d),u($w.$$.fragment,d),u(jw.$$.fragment,d),u(Dw.$$.fragment,d),u(Nw.$$.fragment,d),u(qw.$$.fragment,d),u(Ow.$$.fragment,d),u(Gw.$$.fragment,d),u(Vw.$$.fragment,d),u(zw.$$.fragment,d),u(Ww.$$.fragment,d),u(Qw.$$.fragment,d),u(Hw.$$.fragment,d),u(Uw.$$.fragment,d),u(Yw.$$.fragment,d),u(Kw.$$.fragment,d),u(Zw.$$.fragment,d),u(e6.$$.fragment,d),u(o6.$$.fragment,d),u(r6.$$.fragment,d),u(a6.$$.fragment,d),u(s6.$$.fragment,d),u(n6.$$.fragment,d),u(l6.$$.fragment,d),u(i6.$$.fragment,d),u(d6.$$.fragment,d),u(m6.$$.fragment,d),u(f6.$$.fragment,d),u(g6.$$.fragment,d),u(h6.$$.fragment,d),u(u6.$$.fragment,d),u(p6.$$.fragment,d),u(b6.$$.fragment,d),u(v6.$$.fragment,d),u(T6.$$.fragment,d),u(F6.$$.fragment,d),u(C6.$$.fragment,d),u(M6.$$.fragment,d),u(y6.$$.fragment,d),u(w6.$$.fragment,d),u(A6.$$.fragment,d),u(L6.$$.fragment,d),u(B6.$$.fragment,d),u(x6.$$.fragment,d),u(R6.$$.fragment,d),u(S6.$$.fragment,d),u(P6.$$.fragment,d),u(I6.$$.fragment,d),u(j6.$$.fragment,d),u(D6.$$.fragment,d),u(q6.$$.fragment,d),u(O6.$$.fragment,d),u(G6.$$.fragment,d),u(X6.$$.fragment,d),u(V6.$$.fragment,d),u(z6.$$.fragment,d),u(Q6.$$.fragment,d),u(H6.$$.fragment,d),u(U6.$$.fragment,d),u(J6.$$.fragment,d),u(Y6.$$.fragment,d),u(K6.$$.fragment,d),u(eA.$$.fragment,d),u(oA.$$.fragment,d),u(rA.$$.fragment,d),u(tA.$$.fragment,d),u(aA.$$.fragment,d),u(sA.$$.fragment,d),u(lA.$$.fragment,d),u(iA.$$.fragment,d),u(dA.$$.fragment,d),u(cA.$$.fragment,d),u(mA.$$.fragment,d),u(fA.$$.fragment,d),u(hA.$$.fragment,d),u(uA.$$.fragment,d),u(pA.$$.fragment,d),u(bA.$$.fragment,d),u(vA.$$.fragment,d),u(TA.$$.fragment,d),u(CA.$$.fragment,d),u(MA.$$.fragment,d),u(EA.$$.fragment,d),u(yA.$$.fragment,d),u(wA.$$.fragment,d),u(AA.$$.fragment,d),u(BA.$$.fragment,d),u(xA.$$.fragment,d),u(kA.$$.fragment,d),u(RA.$$.fragment,d),u(SA.$$.fragment,d),u(PA.$$.fragment,d),u(IA.$$.fragment,d),u(jA.$$.fragment,d),u(DA.$$.fragment,d),u(NA.$$.fragment,d),u(qA.$$.fragment,d),u(OA.$$.fragment,d),u(XA.$$.fragment,d),u(VA.$$.fragment,d),u(zA.$$.fragment,d),u(WA.$$.fragment,d),u(QA.$$.fragment,d),u(HA.$$.fragment,d),u(JA.$$.fragment,d),u(YA.$$.fragment,d),u(KA.$$.fragment,d),u(e0.$$.fragment,d),u(o0.$$.fragment,d),u(r0.$$.fragment,d),u(a0.$$.fragment,d),u(s0.$$.fragment,d),u(n0.$$.fragment,d),u(l0.$$.fragment,d),u(i0.$$.fragment,d),u(d0.$$.fragment,d),u(m0.$$.fragment,d),u(f0.$$.fragment,d),u(g0.$$.fragment,d),u(h0.$$.fragment,d),u(u0.$$.fragment,d),u(p0.$$.fragment,d),u(b0.$$.fragment,d),u(v0.$$.fragment,d),u(T0.$$.fragment,d),u(F0.$$.fragment,d),u(C0.$$.fragment,d),u(M0.$$.fragment,d),u(y0.$$.fragment,d),u(w0.$$.fragment,d),u(A0.$$.fragment,d),u(L0.$$.fragment,d),u(B0.$$.fragment,d),u(x0.$$.fragment,d),u(R0.$$.fragment,d),u(S0.$$.fragment,d),u(P0.$$.fragment,d),u($0.$$.fragment,d),u(I0.$$.fragment,d),u(j0.$$.fragment,d),u(N0.$$.fragment,d),u(q0.$$.fragment,d),u(O0.$$.fragment,d),u(G0.$$.fragment,d),u(X0.$$.fragment,d),u(V0.$$.fragment,d),u(W0.$$.fragment,d),u(Q0.$$.fragment,d),u(H0.$$.fragment,d),u(U0.$$.fragment,d),u(J0.$$.fragment,d),u(Y0.$$.fragment,d),u(Z0.$$.fragment,d),u(eL.$$.fragment,d),u(oL.$$.fragment,d),u(rL.$$.fragment,d),u(tL.$$.fragment,d),u(aL.$$.fragment,d),u(nL.$$.fragment,d),u(lL.$$.fragment,d),u(iL.$$.fragment,d),u(dL.$$.fragment,d),u(cL.$$.fragment,d),u(mL.$$.fragment,d),u(gL.$$.fragment,d),u(hL.$$.fragment,d),u(uL.$$.fragment,d),u(pL.$$.fragment,d),u(_L.$$.fragment,d),u(bL.$$.fragment,d),u(TL.$$.fragment,d),u(FL.$$.fragment,d),u(CL.$$.fragment,d),u(ML.$$.fragment,d),u(EL.$$.fragment,d),u(yL.$$.fragment,d),u(AL.$$.fragment,d),u(LL.$$.fragment,d),u(BL.$$.fragment,d),u(xL.$$.fragment,d),u(kL.$$.fragment,d),u(RL.$$.fragment,d),u(PL.$$.fragment,d),u($L.$$.fragment,d),u(IL.$$.fragment,d),u(jL.$$.fragment,d),u(DL.$$.fragment,d),u(NL.$$.fragment,d),u(OL.$$.fragment,d),u(GL.$$.fragment,d),u(XL.$$.fragment,d),u(VL.$$.fragment,d),u(zL.$$.fragment,d),u(WL.$$.fragment,d),u(HL.$$.fragment,d),u(UL.$$.fragment,d),u(JL.$$.fragment,d),u(YL.$$.fragment,d),u(KL.$$.fragment,d),u(ZL.$$.fragment,d),u(o8.$$.fragment,d),u(r8.$$.fragment,d),u(t8.$$.fragment,d),u(a8.$$.fragment,d),u(s8.$$.fragment,d),u(n8.$$.fragment,d),u(i8.$$.fragment,d),u(d8.$$.fragment,d),u(c8.$$.fragment,d),u(m8.$$.fragment,d),u(f8.$$.fragment,d),u(g8.$$.fragment,d),u(u8.$$.fragment,d),u(p8.$$.fragment,d),u(_8.$$.fragment,d),u(b8.$$.fragment,d),u(v8.$$.fragment,d),u(T8.$$.fragment,d),u(C8.$$.fragment,d),u(M8.$$.fragment,d),u(E8.$$.fragment,d),u(y8.$$.fragment,d),u(w8.$$.fragment,d),u(A8.$$.fragment,d),u(B8.$$.fragment,d),u(x8.$$.fragment,d),u(k8.$$.fragment,d),u(S8.$$.fragment,d),u(P8.$$.fragment,d),u($8.$$.fragment,d),u(j8.$$.fragment,d),u(D8.$$.fragment,d),u(N8.$$.fragment,d),u(q8.$$.fragment,d),Zke=!1},d(d){t(J),d&&t(Pe),d&&t(de),p(me),d&&t(Pm),d&&t(ca),d&&t(Le),d&&t(co),d&&t(Im),p(Na,d),d&&t(mo),d&&t(he),d&&t(zo),d&&t(qa),d&&t(KBe),d&&t(Xi),p(U5),d&&t(ZBe),d&&t(Vs),d&&t(exe),p(J5,d),d&&t(oxe),d&&t(X7),d&&t(rxe),p(Nm,d),d&&t(txe),d&&t(Vi),p(Y5),d&&t(axe),d&&t(Wo),p(K5),p(oy),p(ry),p(ty),d&&t(sxe),d&&t(Wi),p(ay),d&&t(nxe),d&&t(Qo),p(sy),p(iy),p(dy),p(cy),d&&t(lxe),d&&t(Qi),p(my),d&&t(ixe),d&&t(Ho),p(fy),p(uy),p(Mh),p(py),p(_y),d&&t(dxe),d&&t(Hi),p(by),d&&t(cxe),d&&t(Uo),p(vy),p(Cy),p(Ph),p(My),p(Ey),d&&t(mxe),d&&t(Ji),p(yy),d&&t(fxe),d&&t(Jo),p(wy),p(Ly),p(By),p(xy),p(ky),d&&t(gxe),d&&t(Zi),p(Ry),d&&t(hxe),d&&t(Yo),p(Sy),p($y),p(Iy),p(jy),p(Dy),d&&t(uxe),d&&t(rd),p(Ny),d&&t(pxe),d&&t(Ko),p(qy),p(Gy),p(Xy),p(Vy),p(zy),d&&t(_xe),d&&t(sd),p(Wy),d&&t(bxe),d&&t(Zo),p(Qy),p(Uy),p(Jy),p(Yy),p(Ky),d&&t(vxe),d&&t(id),p(Zy),d&&t(Txe),d&&t(er),p(ew),p(rw),p(tw),p(aw),p(sw),d&&t(Fxe),d&&t(md),p(nw),d&&t(Cxe),d&&t(or),p(lw),p(dw),p(cw),p(mw),p(fw),d&&t(Mxe),d&&t(hd),p(gw),d&&t(Exe),d&&t(rr),p(hw),p(pw),p(_w),p(bw),p(vw),d&&t(yxe),d&&t(_d),p(Tw),d&&t(wxe),d&&t(tr),p(Fw),p(Mw),p(Ew),p(yw),p(ww),d&&t(Axe),d&&t(Td),p(Aw),d&&t(Lxe),d&&t(ar),p(Lw),p(xw),p(kw),p(Rw),p(Sw),d&&t(Bxe),d&&t(Md),p(Pw),d&&t(xxe),d&&t(sr),p($w),p(jw),p(Dw),p(Nw),p(qw),d&&t(kxe),d&&t(wd),p(Ow),d&&t(Rxe),d&&t(nr),p(Gw),p(Vw),p(zw),p(Ww),p(Qw),d&&t(Sxe),d&&t(Bd),p(Hw),d&&t(Pxe),d&&t(lr),p(Uw),p(Yw),p(Kw),p(Zw),p(e6),d&&t($xe),d&&t(Rd),p(o6),d&&t(Ixe),d&&t(ir),p(r6),p(a6),p(s6),p(n6),p(l6),d&&t(jxe),d&&t($d),p(i6),d&&t(Dxe),d&&t(dr),p(d6),p(m6),p(f6),p(g6),p(h6),d&&t(Nxe),d&&t(Dd),p(u6),d&&t(qxe),d&&t(cr),p(p6),p(b6),p(v6),p(T6),p(F6),d&&t(Oxe),d&&t(Od),p(C6),d&&t(Gxe),d&&t(mr),p(M6),p(y6),p(w6),p(A6),p(L6),d&&t(Xxe),d&&t(Vd),p(B6),d&&t(Vxe),d&&t(fr),p(x6),p(R6),p(S6),p(P6),p(I6),d&&t(zxe),d&&t(Qd),p(j6),d&&t(Wxe),d&&t(gr),p(D6),p(q6),p(O6),p(G6),p(X6),d&&t(Qxe),d&&t(Jd),p(V6),d&&t(Hxe),d&&t(hr),p(z6),p(Q6),p(H6),p(U6),p(J6),d&&t(Uxe),d&&t(ec),p(Y6),d&&t(Jxe),d&&t(ur),p(K6),p(eA),p(oA),p(rA),p(tA),d&&t(Yxe),d&&t(tc),p(aA),d&&t(Kxe),d&&t(pr),p(sA),p(lA),p(iA),p(dA),p(cA),d&&t(Zxe),d&&t(nc),p(mA),d&&t(eke),d&&t(_r),p(fA),p(hA),p(uA),p(pA),p(bA),d&&t(oke),d&&t(dc),p(vA),d&&t(rke),d&&t(br),p(TA),p(CA),p(MA),p(EA),p(yA),d&&t(tke),d&&t(fc),p(wA),d&&t(ake),d&&t(vr),p(AA),p(BA),p(xA),p(kA),p(RA),d&&t(ske),d&&t(uc),p(SA),d&&t(nke),d&&t(Tr),p(PA),p(IA),p(jA),p(DA),p(NA),d&&t(lke),d&&t(bc),p(qA),d&&t(ike),d&&t(Fr),p(OA),p(XA),p(VA),p(zA),p(WA),d&&t(dke),d&&t(Fc),p(QA),d&&t(cke),d&&t(Cr),p(HA),p(JA),p(YA),p(KA),p(e0),d&&t(mke),d&&t(Ec),p(o0),d&&t(fke),d&&t(Mr),p(r0),p(a0),p(s0),p(n0),p(l0),d&&t(gke),d&&t(Ac),p(i0),d&&t(hke),d&&t(Er),p(d0),p(m0),p(f0),p(g0),p(h0),d&&t(uke),d&&t(xc),p(u0),d&&t(pke),d&&t(yr),p(p0),p(b0),p(v0),p(T0),p(F0),d&&t(_ke),d&&t(Sc),p(C0),d&&t(bke),d&&t(wr),p(M0),p(y0),p(w0),p(A0),p(L0),d&&t(vke),d&&t(Ic),p(B0),d&&t(Tke),d&&t(Ar),p(x0),p(R0),p(S0),p(P0),p($0),d&&t(Fke),d&&t(Nc),p(I0),d&&t(Cke),d&&t(Lr),p(j0),p(N0),p(q0),p(O0),p(G0),d&&t(Mke),d&&t(Gc),p(X0),d&&t(Eke),d&&t(Br),p(V0),p(W0),p(Q0),p(H0),p(U0),d&&t(yke),d&&t(zc),p(J0),d&&t(wke),d&&t(xr),p(Y0),p(Z0),p(eL),p(oL),p(rL),d&&t(Ake),d&&t(Hc),p(tL),d&&t(Lke),d&&t(kr),p(aL),p(nL),p(lL),p(iL),p(dL),d&&t(Bke),d&&t(Yc),p(cL),d&&t(xke),d&&t(Rr),p(mL),p(gL),p(hL),p(uL),p(pL),d&&t(kke),d&&t(em),p(_L),d&&t(Rke),d&&t(Sr),p(bL),p(TL),p(FL),p(CL),p(ML),d&&t(Ske),d&&t(tm),p(EL),d&&t(Pke),d&&t(Pr),p(yL),p(AL),p(LL),p(BL),p(xL),d&&t($ke),d&&t(nm),p(kL),d&&t(Ike),d&&t($r),p(RL),p(PL),p($L),p(IL),p(jL),d&&t(jke),d&&t(dm),p(DL),d&&t(Dke),d&&t(Ir),p(NL),p(OL),p(GL),p(XL),p(VL),d&&t(Nke),d&&t(fm),p(zL),d&&t(qke),d&&t(jr),p(WL),p(HL),p(UL),p(JL),p(YL),d&&t(Oke),d&&t(um),p(KL),d&&t(Gke),d&&t(Dr),p(ZL),p(o8),p(r8),p(t8),p(a8),d&&t(Xke),d&&t(bm),p(s8),d&&t(Vke),d&&t(Nr),p(n8),p(i8),p(d8),p(c8),p(m8),d&&t(zke),d&&t(Fm),p(f8),d&&t(Wke),d&&t(qr),p(g8),p(u8),p(p8),p(_8),p(b8),d&&t(Qke),d&&t(Em),p(v8),d&&t(Hke),d&&t(Or),p(T8),p(C8),p(M8),p(E8),p(y8),d&&t(Uke),d&&t(Am),p(w8),d&&t(Jke),d&&t(Gr),p(A8),p(B8),p(x8),p(k8),p(S8),d&&t(Yke),d&&t(xm),p(P8),d&&t(Kke),d&&t(Xr),p($8),p(j8),p(D8),p(N8),p(q8)}}}const FCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function CCt($i,J,Pe){let{fw:de}=J;return $i.$$set=ge=>{"fw"in ge&&Pe(0,de=ge.fw)},[de]}class BCt extends gCt{constructor(J){super();hCt(this,J,CCt,TCt,uCt,{fw:0})}}export{BCt as default,FCt as metadata};
