import{S as yMt,i as wMt,s as AMt,e as a,k as l,w as m,t as o,M as LMt,c as s,d as t,m as i,a as n,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as VBr}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function BMt(Ii){let J,$e,de,he,io,me,Ce,Vo,ji,$m,ma,Di,Ni,Y5,Im,Be,co,qi,qs,K5,Os,Gs,Z5,Oi,Xs,ey,Gi,jm,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),he=o("NewModelConfig"),io=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),$m=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),Y5=o(")."),Im=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),qs=o("NewModel"),K5=o(" is a subclass of "),Os=a("a"),Gs=o("PreTrainedModel"),Z5=o(`, make sure its
`),Oi=a("code"),Xs=o("config_class"),ey=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jm=o("NewModelConfig"),qa=o(")."),this.h()},l(mo){J=s(mo,"P",{});var ue=n(J);$e=r(ue,"If your "),de=s(ue,"CODE",{});var V8=n(de);he=r(V8,"NewModelConfig"),V8.forEach(t),io=r(ue," is a subclass of "),me=s(ue,"CODE",{});var Xi=n(me);Ce=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(ue,`, make sure its
`),ji=s(ue,"CODE",{});var z8=n(ji);$m=r(z8,"model_type"),z8.forEach(t),ma=r(ue," attribute is set to the same key you use when registering the config (here "),Di=s(ue,"CODE",{});var W8=n(Di);Ni=r(W8,'"new-model"'),W8.forEach(t),Y5=r(ue,")."),ue.forEach(t),Im=i(mo),Be=s(mo,"P",{});var zo=n(Be);co=r(zo,"Likewise, if your "),qi=s(zo,"CODE",{});var Oa=n(qi);qs=r(Oa,"NewModel"),Oa.forEach(t),K5=r(zo," is a subclass of "),Os=s(zo,"A",{href:!0});var Q8=n(Os);Gs=r(Q8,"PreTrainedModel"),Q8.forEach(t),Z5=r(zo,`, make sure its
`),Oi=s(zo,"CODE",{});var Dm=n(Oi);Xs=r(Dm,"config_class"),Dm.forEach(t),ey=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=s(zo,"CODE",{});var H8=n(Gi);jm=r(H8,"NewModelConfig"),H8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(Os,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ue){b(mo,J,ue),e(J,$e),e(J,de),e(de,he),e(J,io),e(J,me),e(me,Ce),e(J,Vo),e(J,ji),e(ji,$m),e(J,ma),e(J,Di),e(Di,Ni),e(J,Y5),b(mo,Im,ue),b(mo,Be,ue),e(Be,co),e(Be,qi),e(qi,qs),e(Be,K5),e(Be,Os),e(Os,Gs),e(Be,Z5),e(Be,Oi),e(Oi,Xs),e(Be,ey),e(Be,Gi),e(Gi,jm),e(Be,qa)},d(mo){mo&&t(J),mo&&t(Im),mo&&t(Be)}}}function xMt(Ii){let J,$e,de,he,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Ce=n(J);$e=r(Ce,"Passing "),de=s(Ce,"CODE",{});var Vo=n(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,J,Ce),e(J,$e),e(J,de),e(de,he),e(J,io)},d(me){me&&t(J)}}}function kMt(Ii){let J,$e,de,he,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Ce=n(J);$e=r(Ce,"Passing "),de=s(Ce,"CODE",{});var Vo=n(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,J,Ce),e(J,$e),e(J,de),e(de,he),e(J,io)},d(me){me&&t(J)}}}function RMt(Ii){let J,$e,de,he,io,me,Ce,Vo,ji,$m,ma,Di,Ni,Y5,Im,Be,co,qi,qs,K5,Os,Gs,Z5,Oi,Xs,ey,Gi,jm,qa,mo,ue,V8,Xi,z8,W8,zo,Oa,Q8,Dm,H8,IPe,Cxe,Vi,Nm,CQ,oy,jPe,MQ,DPe,Mxe,Vs,NPe,EQ,qPe,OPe,yQ,GPe,XPe,Exe,ry,yxe,U8,VPe,wxe,qm,Axe,zi,Om,wQ,ty,zPe,AQ,WPe,Lxe,Wo,ay,QPe,sy,HPe,J8,UPe,JPe,YPe,ny,KPe,LQ,ZPe,e$e,o$e,fo,ly,r$e,BQ,t$e,a$e,Wi,s$e,xQ,n$e,l$e,kQ,i$e,d$e,c$e,v,Gm,RQ,m$e,f$e,Y8,g$e,h$e,u$e,Xm,SQ,p$e,_$e,K8,b$e,v$e,T$e,Vm,PQ,F$e,C$e,Z8,M$e,E$e,y$e,zm,$Q,w$e,A$e,e9,L$e,B$e,x$e,Wm,IQ,k$e,R$e,o9,S$e,P$e,$$e,Qm,jQ,I$e,j$e,r9,D$e,N$e,q$e,Hm,DQ,O$e,G$e,t9,X$e,V$e,z$e,Um,NQ,W$e,Q$e,a9,H$e,U$e,J$e,Jm,qQ,Y$e,K$e,s9,Z$e,eIe,oIe,Ym,OQ,rIe,tIe,n9,aIe,sIe,nIe,Km,GQ,lIe,iIe,l9,dIe,cIe,mIe,Zm,XQ,fIe,gIe,i9,hIe,uIe,pIe,ef,VQ,_Ie,bIe,d9,vIe,TIe,FIe,of,zQ,CIe,MIe,c9,EIe,yIe,wIe,rf,WQ,AIe,LIe,m9,BIe,xIe,kIe,tf,QQ,RIe,SIe,f9,PIe,$Ie,IIe,af,HQ,jIe,DIe,g9,NIe,qIe,OIe,sf,UQ,GIe,XIe,h9,VIe,zIe,WIe,nf,JQ,QIe,HIe,u9,UIe,JIe,YIe,lf,YQ,KIe,ZIe,p9,eje,oje,rje,df,KQ,tje,aje,_9,sje,nje,lje,cf,ZQ,ije,dje,b9,cje,mje,fje,mf,eH,gje,hje,v9,uje,pje,_je,ff,oH,bje,vje,T9,Tje,Fje,Cje,gf,rH,Mje,Eje,F9,yje,wje,Aje,hf,tH,Lje,Bje,C9,xje,kje,Rje,uf,aH,Sje,Pje,M9,$je,Ije,jje,pf,sH,Dje,Nje,E9,qje,Oje,Gje,_f,nH,Xje,Vje,y9,zje,Wje,Qje,bf,lH,Hje,Uje,w9,Jje,Yje,Kje,vf,iH,Zje,eDe,A9,oDe,rDe,tDe,Tf,dH,aDe,sDe,L9,nDe,lDe,iDe,Ff,cH,dDe,cDe,B9,mDe,fDe,gDe,Cf,mH,hDe,uDe,x9,pDe,_De,bDe,Mf,fH,vDe,TDe,k9,FDe,CDe,MDe,Ef,gH,EDe,yDe,R9,wDe,ADe,LDe,yf,hH,BDe,xDe,S9,kDe,RDe,SDe,wf,uH,PDe,$De,P9,IDe,jDe,DDe,Af,pH,NDe,qDe,$9,ODe,GDe,XDe,Lf,_H,VDe,zDe,I9,WDe,QDe,HDe,Bf,bH,UDe,JDe,j9,YDe,KDe,ZDe,xf,vH,eNe,oNe,D9,rNe,tNe,aNe,kf,TH,sNe,nNe,N9,lNe,iNe,dNe,Rf,FH,cNe,mNe,q9,fNe,gNe,hNe,Sf,CH,uNe,pNe,O9,_Ne,bNe,vNe,Pf,MH,TNe,FNe,G9,CNe,MNe,ENe,$f,EH,yNe,wNe,X9,ANe,LNe,BNe,If,yH,xNe,kNe,V9,RNe,SNe,PNe,jf,wH,$Ne,INe,z9,jNe,DNe,NNe,Df,AH,qNe,ONe,W9,GNe,XNe,VNe,Nf,LH,zNe,WNe,Q9,QNe,HNe,UNe,qf,BH,JNe,YNe,H9,KNe,ZNe,eqe,Of,xH,oqe,rqe,U9,tqe,aqe,sqe,Gf,kH,nqe,lqe,J9,iqe,dqe,cqe,Xf,RH,mqe,fqe,Y9,gqe,hqe,uqe,Vf,SH,pqe,_qe,K9,bqe,vqe,Tqe,zf,PH,Fqe,Cqe,Z9,Mqe,Eqe,yqe,Wf,$H,wqe,Aqe,eB,Lqe,Bqe,xqe,Qf,IH,kqe,Rqe,oB,Sqe,Pqe,$qe,Hf,jH,Iqe,jqe,rB,Dqe,Nqe,qqe,Uf,DH,Oqe,Gqe,tB,Xqe,Vqe,zqe,Jf,NH,Wqe,Qqe,aB,Hqe,Uqe,Jqe,Yf,qH,Yqe,Kqe,sB,Zqe,eOe,oOe,Kf,OH,rOe,tOe,nB,aOe,sOe,nOe,Zf,GH,lOe,iOe,lB,dOe,cOe,mOe,eg,XH,fOe,gOe,iB,hOe,uOe,pOe,og,VH,_Oe,bOe,dB,vOe,TOe,FOe,rg,zH,COe,MOe,cB,EOe,yOe,wOe,tg,WH,AOe,LOe,mB,BOe,xOe,kOe,ag,QH,ROe,SOe,fB,POe,$Oe,IOe,sg,HH,jOe,DOe,gB,NOe,qOe,OOe,ng,UH,GOe,XOe,hB,VOe,zOe,WOe,lg,JH,QOe,HOe,uB,UOe,JOe,YOe,ig,YH,KOe,ZOe,pB,eGe,oGe,rGe,dg,KH,tGe,aGe,_B,sGe,nGe,lGe,cg,ZH,iGe,dGe,bB,cGe,mGe,fGe,mg,eU,gGe,hGe,vB,uGe,pGe,_Ge,fg,oU,bGe,vGe,TB,TGe,FGe,CGe,gg,rU,MGe,EGe,FB,yGe,wGe,AGe,hg,tU,LGe,BGe,CB,xGe,kGe,RGe,ug,aU,SGe,PGe,MB,$Ge,IGe,jGe,pg,sU,DGe,NGe,EB,qGe,OGe,GGe,_g,nU,XGe,VGe,yB,zGe,WGe,QGe,bg,lU,HGe,UGe,wB,JGe,YGe,KGe,vg,iU,ZGe,eXe,AB,oXe,rXe,tXe,Tg,dU,aXe,sXe,LB,nXe,lXe,iXe,Fg,cU,dXe,cXe,BB,mXe,fXe,gXe,Cg,mU,hXe,uXe,xB,pXe,_Xe,bXe,Mg,fU,vXe,TXe,kB,FXe,CXe,MXe,Eg,gU,EXe,yXe,RB,wXe,AXe,LXe,yg,hU,BXe,xXe,SB,kXe,RXe,SXe,wg,uU,PXe,$Xe,PB,IXe,jXe,DXe,Ag,pU,NXe,qXe,$B,OXe,GXe,XXe,Lg,_U,VXe,zXe,IB,WXe,QXe,HXe,Bg,bU,UXe,JXe,jB,YXe,KXe,ZXe,vU,eVe,oVe,iy,rVe,xg,dy,tVe,TU,aVe,Bxe,Qi,kg,FU,cy,sVe,CU,nVe,xxe,Qo,my,lVe,fy,iVe,DB,dVe,cVe,mVe,gy,fVe,MU,gVe,hVe,uVe,go,hy,pVe,EU,_Ve,bVe,Ga,vVe,yU,TVe,FVe,wU,CVe,MVe,AU,EVe,yVe,wVe,E,zs,LU,AVe,LVe,NB,BVe,xVe,qB,kVe,RVe,SVe,Ws,BU,PVe,$Ve,OB,IVe,jVe,GB,DVe,NVe,qVe,Qs,xU,OVe,GVe,XB,XVe,VVe,VB,zVe,WVe,QVe,Rg,kU,HVe,UVe,zB,JVe,YVe,KVe,Hs,RU,ZVe,eze,WB,oze,rze,QB,tze,aze,sze,Sg,SU,nze,lze,HB,ize,dze,cze,Pg,PU,mze,fze,UB,gze,hze,uze,$g,$U,pze,_ze,JB,bze,vze,Tze,Us,IU,Fze,Cze,YB,Mze,Eze,KB,yze,wze,Aze,Js,jU,Lze,Bze,ZB,xze,kze,ex,Rze,Sze,Pze,Ys,DU,$ze,Ize,ox,jze,Dze,rx,Nze,qze,Oze,Ig,NU,Gze,Xze,tx,Vze,zze,Wze,jg,qU,Qze,Hze,ax,Uze,Jze,Yze,Ks,OU,Kze,Zze,sx,eWe,oWe,nx,rWe,tWe,aWe,Dg,GU,sWe,nWe,lx,lWe,iWe,dWe,Zs,XU,cWe,mWe,ix,fWe,gWe,dx,hWe,uWe,pWe,en,VU,_We,bWe,cx,vWe,TWe,mx,FWe,CWe,MWe,on,zU,EWe,yWe,fx,wWe,AWe,WU,LWe,BWe,xWe,Ng,QU,kWe,RWe,gx,SWe,PWe,$We,rn,HU,IWe,jWe,hx,DWe,NWe,ux,qWe,OWe,GWe,qg,UU,XWe,VWe,px,zWe,WWe,QWe,tn,JU,HWe,UWe,_x,JWe,YWe,bx,KWe,ZWe,eQe,an,YU,oQe,rQe,vx,tQe,aQe,Tx,sQe,nQe,lQe,sn,KU,iQe,dQe,Fx,cQe,mQe,Cx,fQe,gQe,hQe,Og,ZU,uQe,pQe,Mx,_Qe,bQe,vQe,nn,eJ,TQe,FQe,Ex,CQe,MQe,yx,EQe,yQe,wQe,Gg,oJ,AQe,LQe,wx,BQe,xQe,kQe,ln,rJ,RQe,SQe,Ax,PQe,$Qe,Lx,IQe,jQe,DQe,dn,tJ,NQe,qQe,Bx,OQe,GQe,xx,XQe,VQe,zQe,cn,aJ,WQe,QQe,kx,HQe,UQe,Rx,JQe,YQe,KQe,mn,sJ,ZQe,eHe,Sx,oHe,rHe,Px,tHe,aHe,sHe,Xg,nJ,nHe,lHe,$x,iHe,dHe,cHe,fn,lJ,mHe,fHe,Ix,gHe,hHe,jx,uHe,pHe,_He,gn,iJ,bHe,vHe,Dx,THe,FHe,Nx,CHe,MHe,EHe,hn,dJ,yHe,wHe,qx,AHe,LHe,Ox,BHe,xHe,kHe,un,cJ,RHe,SHe,Gx,PHe,$He,Xx,IHe,jHe,DHe,pn,mJ,NHe,qHe,Vx,OHe,GHe,zx,XHe,VHe,zHe,_n,fJ,WHe,QHe,Wx,HHe,UHe,Qx,JHe,YHe,KHe,Vg,gJ,ZHe,eUe,Hx,oUe,rUe,tUe,bn,hJ,aUe,sUe,Ux,nUe,lUe,Jx,iUe,dUe,cUe,zg,uJ,mUe,fUe,Yx,gUe,hUe,uUe,Wg,pJ,pUe,_Ue,Kx,bUe,vUe,TUe,vn,_J,FUe,CUe,Zx,MUe,EUe,ek,yUe,wUe,AUe,Tn,bJ,LUe,BUe,ok,xUe,kUe,rk,RUe,SUe,PUe,Qg,vJ,$Ue,IUe,tk,jUe,DUe,NUe,Fn,TJ,qUe,OUe,ak,GUe,XUe,sk,VUe,zUe,WUe,Cn,FJ,QUe,HUe,nk,UUe,JUe,lk,YUe,KUe,ZUe,Mn,CJ,eJe,oJe,ik,rJe,tJe,dk,aJe,sJe,nJe,En,MJ,lJe,iJe,ck,dJe,cJe,mk,mJe,fJe,gJe,yn,EJ,hJe,uJe,fk,pJe,_Je,gk,bJe,vJe,TJe,Hg,yJ,FJe,CJe,hk,MJe,EJe,yJe,Ug,wJ,wJe,AJe,uk,LJe,BJe,xJe,Jg,AJ,kJe,RJe,pk,SJe,PJe,$Je,Yg,LJ,IJe,jJe,_k,DJe,NJe,qJe,wn,BJ,OJe,GJe,bk,XJe,VJe,vk,zJe,WJe,QJe,Kg,xJ,HJe,UJe,Tk,JJe,YJe,KJe,An,kJ,ZJe,eYe,Fk,oYe,rYe,Ck,tYe,aYe,sYe,Ln,RJ,nYe,lYe,Mk,iYe,dYe,Ek,cYe,mYe,fYe,Bn,SJ,gYe,hYe,yk,uYe,pYe,wk,_Ye,bYe,vYe,xn,PJ,TYe,FYe,Ak,CYe,MYe,Lk,EYe,yYe,wYe,kn,$J,AYe,LYe,Bk,BYe,xYe,xk,kYe,RYe,SYe,Rn,IJ,PYe,$Ye,kk,IYe,jYe,Rk,DYe,NYe,qYe,Zg,jJ,OYe,GYe,Sk,XYe,VYe,zYe,eh,DJ,WYe,QYe,Pk,HYe,UYe,JYe,Sn,NJ,YYe,KYe,$k,ZYe,eKe,Ik,oKe,rKe,tKe,Pn,qJ,aKe,sKe,jk,nKe,lKe,Dk,iKe,dKe,cKe,$n,OJ,mKe,fKe,Nk,gKe,hKe,qk,uKe,pKe,_Ke,oh,GJ,bKe,vKe,Ok,TKe,FKe,CKe,rh,XJ,MKe,EKe,Gk,yKe,wKe,AKe,th,VJ,LKe,BKe,Xk,xKe,kKe,RKe,ah,zJ,SKe,PKe,Vk,$Ke,IKe,jKe,In,WJ,DKe,NKe,zk,qKe,OKe,Wk,GKe,XKe,VKe,sh,QJ,zKe,WKe,Qk,QKe,HKe,UKe,nh,HJ,JKe,YKe,Hk,KKe,ZKe,eZe,jn,UJ,oZe,rZe,Uk,tZe,aZe,Jk,sZe,nZe,lZe,Dn,JJ,iZe,dZe,Yk,cZe,mZe,Kk,fZe,gZe,hZe,YJ,uZe,pZe,uy,_Ze,lh,py,bZe,KJ,vZe,kxe,Hi,ih,ZJ,_y,TZe,eY,FZe,Rxe,Ho,by,CZe,vy,MZe,Zk,EZe,yZe,wZe,Ty,AZe,oY,LZe,BZe,xZe,Ie,Fy,kZe,rY,RZe,SZe,Xa,PZe,tY,$Ze,IZe,aY,jZe,DZe,sY,NZe,qZe,OZe,te,dh,nY,GZe,XZe,eR,VZe,zZe,WZe,ch,lY,QZe,HZe,oR,UZe,JZe,YZe,mh,iY,KZe,ZZe,rR,eeo,oeo,reo,fh,dY,teo,aeo,tR,seo,neo,leo,gh,cY,ieo,deo,aR,ceo,meo,feo,hh,mY,geo,heo,sR,ueo,peo,_eo,uh,fY,beo,veo,nR,Teo,Feo,Ceo,ph,gY,Meo,Eeo,lR,yeo,weo,Aeo,_h,hY,Leo,Beo,iR,xeo,keo,Reo,bh,uY,Seo,Peo,dR,$eo,Ieo,jeo,vh,pY,Deo,Neo,cR,qeo,Oeo,Geo,Th,_Y,Xeo,Veo,mR,zeo,Weo,Qeo,Fh,bY,Heo,Ueo,fR,Jeo,Yeo,Keo,Ch,vY,Zeo,eoo,gR,ooo,roo,too,Mh,TY,aoo,soo,hR,noo,loo,ioo,Eh,FY,doo,coo,uR,moo,foo,goo,yh,CY,hoo,uoo,pR,poo,_oo,boo,wh,voo,MY,Too,Foo,Cy,Coo,Ah,My,Moo,EY,Eoo,Sxe,Ui,Lh,yY,Ey,yoo,wY,woo,Pxe,Uo,yy,Aoo,wy,Loo,_R,Boo,xoo,koo,Ay,Roo,AY,Soo,Poo,$oo,je,Ly,Ioo,LY,joo,Doo,Ji,Noo,BY,qoo,Ooo,xY,Goo,Xoo,Voo,xe,Bh,kY,zoo,Woo,bR,Qoo,Hoo,Uoo,xh,RY,Joo,Yoo,vR,Koo,Zoo,ero,kh,SY,oro,rro,TR,tro,aro,sro,Rh,PY,nro,lro,FR,iro,dro,cro,Sh,$Y,mro,fro,CR,gro,hro,uro,Ph,IY,pro,_ro,MR,bro,vro,Tro,$h,jY,Fro,Cro,ER,Mro,Ero,yro,Ih,DY,wro,Aro,yR,Lro,Bro,xro,jh,kro,NY,Rro,Sro,By,Pro,Dh,xy,$ro,qY,Iro,$xe,Yi,Nh,OY,ky,jro,GY,Dro,Ixe,Jo,Ry,Nro,Ki,qro,XY,Oro,Gro,VY,Xro,Vro,zro,Sy,Wro,zY,Qro,Hro,Uro,Vr,Py,Jro,WY,Yro,Kro,Zi,Zro,QY,eto,oto,HY,rto,tto,ato,UY,sto,nto,$y,lto,De,Iy,ito,JY,dto,cto,Va,mto,YY,fto,gto,KY,hto,uto,ZY,pto,_to,bto,F,qh,eK,vto,Tto,wR,Fto,Cto,Mto,Oh,oK,Eto,yto,AR,wto,Ato,Lto,Gh,rK,Bto,xto,LR,kto,Rto,Sto,Xh,tK,Pto,$to,BR,Ito,jto,Dto,Vh,aK,Nto,qto,xR,Oto,Gto,Xto,zh,sK,Vto,zto,kR,Wto,Qto,Hto,Wh,nK,Uto,Jto,RR,Yto,Kto,Zto,Qh,lK,eao,oao,SR,rao,tao,aao,Hh,iK,sao,nao,PR,lao,iao,dao,Uh,dK,cao,mao,$R,fao,gao,hao,Jh,cK,uao,pao,IR,_ao,bao,vao,Yh,mK,Tao,Fao,jR,Cao,Mao,Eao,Kh,fK,yao,wao,DR,Aao,Lao,Bao,Zh,gK,xao,kao,NR,Rao,Sao,Pao,eu,hK,$ao,Iao,qR,jao,Dao,Nao,ou,uK,qao,Oao,OR,Gao,Xao,Vao,ru,pK,zao,Wao,GR,Qao,Hao,Uao,tu,_K,Jao,Yao,XR,Kao,Zao,eso,au,bK,oso,rso,VR,tso,aso,sso,su,vK,nso,lso,zR,iso,dso,cso,nu,TK,mso,fso,WR,gso,hso,uso,lu,FK,pso,_so,QR,bso,vso,Tso,iu,CK,Fso,Cso,HR,Mso,Eso,yso,du,MK,wso,Aso,UR,Lso,Bso,xso,cu,EK,kso,Rso,JR,Sso,Pso,$so,mu,yK,Iso,jso,YR,Dso,Nso,qso,fu,wK,Oso,Gso,KR,Xso,Vso,zso,Nn,AK,Wso,Qso,ZR,Hso,Uso,eS,Jso,Yso,Kso,gu,LK,Zso,eno,oS,ono,rno,tno,hu,BK,ano,sno,rS,nno,lno,ino,uu,xK,dno,cno,tS,mno,fno,gno,pu,kK,hno,uno,aS,pno,_no,bno,_u,RK,vno,Tno,sS,Fno,Cno,Mno,bu,SK,Eno,yno,nS,wno,Ano,Lno,vu,PK,Bno,xno,lS,kno,Rno,Sno,Tu,$K,Pno,$no,iS,Ino,jno,Dno,Fu,IK,Nno,qno,dS,Ono,Gno,Xno,Cu,jK,Vno,zno,cS,Wno,Qno,Hno,Mu,DK,Uno,Jno,mS,Yno,Kno,Zno,Eu,NK,elo,olo,fS,rlo,tlo,alo,yu,qK,slo,nlo,gS,llo,ilo,dlo,wu,OK,clo,mlo,hS,flo,glo,hlo,Au,GK,ulo,plo,uS,_lo,blo,vlo,Lu,XK,Tlo,Flo,pS,Clo,Mlo,Elo,Bu,VK,ylo,wlo,_S,Alo,Llo,Blo,xu,zK,xlo,klo,bS,Rlo,Slo,Plo,ku,WK,$lo,Ilo,vS,jlo,Dlo,Nlo,Ru,QK,qlo,Olo,TS,Glo,Xlo,Vlo,Su,HK,zlo,Wlo,FS,Qlo,Hlo,Ulo,Pu,UK,Jlo,Ylo,CS,Klo,Zlo,eio,$u,JK,oio,rio,MS,tio,aio,sio,Iu,YK,nio,lio,ES,iio,dio,cio,ju,KK,mio,fio,yS,gio,hio,uio,Du,ZK,pio,_io,wS,bio,vio,Tio,Nu,eZ,Fio,Cio,AS,Mio,Eio,yio,qu,oZ,wio,Aio,LS,Lio,Bio,xio,Ou,rZ,kio,Rio,BS,Sio,Pio,$io,Gu,tZ,Iio,jio,xS,Dio,Nio,qio,Xu,aZ,Oio,Gio,kS,Xio,Vio,zio,Vu,sZ,Wio,Qio,RS,Hio,Uio,Jio,zu,nZ,Yio,Kio,SS,Zio,edo,odo,Wu,lZ,rdo,tdo,PS,ado,sdo,ndo,Qu,iZ,ldo,ido,$S,ddo,cdo,mdo,Hu,dZ,fdo,gdo,IS,hdo,udo,pdo,Uu,cZ,_do,bdo,jS,vdo,Tdo,Fdo,Ju,mZ,Cdo,Mdo,DS,Edo,ydo,wdo,Yu,fZ,Ado,Ldo,NS,Bdo,xdo,kdo,Ku,gZ,Rdo,Sdo,qS,Pdo,$do,Ido,Zu,hZ,jdo,Ddo,OS,Ndo,qdo,Odo,ep,uZ,Gdo,Xdo,GS,Vdo,zdo,Wdo,op,pZ,Qdo,Hdo,XS,Udo,Jdo,Ydo,rp,_Z,Kdo,Zdo,VS,eco,oco,rco,tp,bZ,tco,aco,zS,sco,nco,lco,ap,vZ,ico,dco,WS,cco,mco,fco,sp,TZ,gco,hco,QS,uco,pco,_co,np,FZ,bco,vco,HS,Tco,Fco,Cco,lp,CZ,Mco,Eco,US,yco,wco,Aco,ip,MZ,Lco,Bco,JS,xco,kco,Rco,dp,EZ,Sco,Pco,YS,$co,Ico,jco,cp,yZ,Dco,Nco,KS,qco,Oco,Gco,mp,wZ,Xco,Vco,ZS,zco,Wco,Qco,fp,AZ,Hco,Uco,eP,Jco,Yco,Kco,gp,LZ,Zco,emo,oP,omo,rmo,tmo,hp,BZ,amo,smo,rP,nmo,lmo,imo,up,xZ,dmo,cmo,tP,mmo,fmo,gmo,pp,kZ,hmo,umo,aP,pmo,_mo,bmo,_p,RZ,vmo,Tmo,sP,Fmo,Cmo,Mmo,bp,SZ,Emo,ymo,nP,wmo,Amo,Lmo,vp,Bmo,PZ,xmo,kmo,$Z,Rmo,Smo,IZ,Pmo,$mo,jy,jxe,ed,Tp,jZ,Dy,Imo,DZ,jmo,Dxe,Yo,Ny,Dmo,od,Nmo,NZ,qmo,Omo,qZ,Gmo,Xmo,Vmo,qy,zmo,OZ,Wmo,Qmo,Hmo,zr,Oy,Umo,GZ,Jmo,Ymo,rd,Kmo,XZ,Zmo,efo,VZ,ofo,rfo,tfo,zZ,afo,sfo,Gy,nfo,Ne,Xy,lfo,WZ,ifo,dfo,za,cfo,QZ,mfo,ffo,HZ,gfo,hfo,UZ,ufo,pfo,_fo,k,Fp,JZ,bfo,vfo,lP,Tfo,Ffo,Cfo,Cp,YZ,Mfo,Efo,iP,yfo,wfo,Afo,Mp,KZ,Lfo,Bfo,dP,xfo,kfo,Rfo,Ep,ZZ,Sfo,Pfo,cP,$fo,Ifo,jfo,yp,eee,Dfo,Nfo,mP,qfo,Ofo,Gfo,wp,oee,Xfo,Vfo,fP,zfo,Wfo,Qfo,Ap,ree,Hfo,Ufo,gP,Jfo,Yfo,Kfo,Lp,tee,Zfo,ego,hP,ogo,rgo,tgo,Bp,aee,ago,sgo,uP,ngo,lgo,igo,xp,see,dgo,cgo,pP,mgo,fgo,ggo,kp,nee,hgo,ugo,_P,pgo,_go,bgo,Rp,lee,vgo,Tgo,bP,Fgo,Cgo,Mgo,Sp,iee,Ego,ygo,vP,wgo,Ago,Lgo,Pp,dee,Bgo,xgo,TP,kgo,Rgo,Sgo,$p,cee,Pgo,$go,FP,Igo,jgo,Dgo,Ip,mee,Ngo,qgo,CP,Ogo,Ggo,Xgo,jp,fee,Vgo,zgo,MP,Wgo,Qgo,Hgo,Dp,gee,Ugo,Jgo,EP,Ygo,Kgo,Zgo,Np,hee,eho,oho,yP,rho,tho,aho,qp,uee,sho,nho,wP,lho,iho,dho,Op,pee,cho,mho,AP,fho,gho,hho,Gp,_ee,uho,pho,LP,_ho,bho,vho,Xp,bee,Tho,Fho,BP,Cho,Mho,Eho,Vp,vee,yho,who,xP,Aho,Lho,Bho,zp,Tee,xho,kho,kP,Rho,Sho,Pho,Wp,Fee,$ho,Iho,RP,jho,Dho,Nho,Qp,Cee,qho,Oho,SP,Gho,Xho,Vho,Hp,Mee,zho,Who,PP,Qho,Hho,Uho,Up,Eee,Jho,Yho,$P,Kho,Zho,euo,Jp,yee,ouo,ruo,IP,tuo,auo,suo,Yp,wee,nuo,luo,jP,iuo,duo,cuo,Kp,Aee,muo,fuo,DP,guo,huo,uuo,Zp,Lee,puo,_uo,NP,buo,vuo,Tuo,e_,Bee,Fuo,Cuo,qP,Muo,Euo,yuo,o_,xee,wuo,Auo,OP,Luo,Buo,xuo,r_,kee,kuo,Ruo,GP,Suo,Puo,$uo,t_,Ree,Iuo,juo,XP,Duo,Nuo,quo,a_,See,Ouo,Guo,VP,Xuo,Vuo,zuo,s_,Pee,Wuo,Quo,zP,Huo,Uuo,Juo,n_,Yuo,$ee,Kuo,Zuo,Iee,epo,opo,jee,rpo,tpo,Vy,Nxe,td,l_,Dee,zy,apo,Nee,spo,qxe,Ko,Wy,npo,ad,lpo,qee,ipo,dpo,Oee,cpo,mpo,fpo,Qy,gpo,Gee,hpo,upo,ppo,Wr,Hy,_po,Xee,bpo,vpo,sd,Tpo,Vee,Fpo,Cpo,zee,Mpo,Epo,ypo,Wee,wpo,Apo,Uy,Lpo,qe,Jy,Bpo,Qee,xpo,kpo,Wa,Rpo,Hee,Spo,Ppo,Uee,$po,Ipo,Jee,jpo,Dpo,Npo,$,i_,Yee,qpo,Opo,WP,Gpo,Xpo,Vpo,d_,Kee,zpo,Wpo,QP,Qpo,Hpo,Upo,c_,Zee,Jpo,Ypo,HP,Kpo,Zpo,e_o,m_,eoe,o_o,r_o,UP,t_o,a_o,s_o,f_,ooe,n_o,l_o,JP,i_o,d_o,c_o,g_,roe,m_o,f_o,YP,g_o,h_o,u_o,h_,toe,p_o,__o,KP,b_o,v_o,T_o,u_,aoe,F_o,C_o,ZP,M_o,E_o,y_o,p_,soe,w_o,A_o,e$,L_o,B_o,x_o,__,noe,k_o,R_o,o$,S_o,P_o,$_o,b_,loe,I_o,j_o,r$,D_o,N_o,q_o,v_,ioe,O_o,G_o,t$,X_o,V_o,z_o,T_,doe,W_o,Q_o,a$,H_o,U_o,J_o,F_,coe,Y_o,K_o,s$,Z_o,ebo,obo,C_,moe,rbo,tbo,n$,abo,sbo,nbo,M_,foe,lbo,ibo,l$,dbo,cbo,mbo,E_,goe,fbo,gbo,i$,hbo,ubo,pbo,y_,hoe,_bo,bbo,d$,vbo,Tbo,Fbo,w_,uoe,Cbo,Mbo,c$,Ebo,ybo,wbo,A_,poe,Abo,Lbo,m$,Bbo,xbo,kbo,L_,_oe,Rbo,Sbo,f$,Pbo,$bo,Ibo,B_,boe,jbo,Dbo,g$,Nbo,qbo,Obo,x_,voe,Gbo,Xbo,h$,Vbo,zbo,Wbo,k_,Toe,Qbo,Hbo,u$,Ubo,Jbo,Ybo,R_,Foe,Kbo,Zbo,p$,e2o,o2o,r2o,S_,Coe,t2o,a2o,_$,s2o,n2o,l2o,P_,Moe,i2o,d2o,b$,c2o,m2o,f2o,$_,Eoe,g2o,h2o,v$,u2o,p2o,_2o,I_,yoe,b2o,v2o,T$,T2o,F2o,C2o,j_,woe,M2o,E2o,F$,y2o,w2o,A2o,D_,Aoe,L2o,B2o,C$,x2o,k2o,R2o,N_,Loe,S2o,P2o,M$,$2o,I2o,j2o,q_,Boe,D2o,N2o,E$,q2o,O2o,G2o,O_,xoe,X2o,V2o,y$,z2o,W2o,Q2o,G_,koe,H2o,U2o,w$,J2o,Y2o,K2o,X_,Z2o,Roe,evo,ovo,Soe,rvo,tvo,Poe,avo,svo,Yy,Oxe,nd,V_,$oe,Ky,nvo,Ioe,lvo,Gxe,Zo,Zy,ivo,ld,dvo,joe,cvo,mvo,Doe,fvo,gvo,hvo,ew,uvo,Noe,pvo,_vo,bvo,Qr,ow,vvo,qoe,Tvo,Fvo,id,Cvo,Ooe,Mvo,Evo,Goe,yvo,wvo,Avo,Xoe,Lvo,Bvo,rw,xvo,Oe,tw,kvo,Voe,Rvo,Svo,Qa,Pvo,zoe,$vo,Ivo,Woe,jvo,Dvo,Qoe,Nvo,qvo,Ovo,I,z_,Hoe,Gvo,Xvo,A$,Vvo,zvo,Wvo,W_,Uoe,Qvo,Hvo,L$,Uvo,Jvo,Yvo,Q_,Joe,Kvo,Zvo,B$,eTo,oTo,rTo,H_,Yoe,tTo,aTo,x$,sTo,nTo,lTo,U_,Koe,iTo,dTo,k$,cTo,mTo,fTo,J_,Zoe,gTo,hTo,R$,uTo,pTo,_To,Y_,ere,bTo,vTo,S$,TTo,FTo,CTo,K_,ore,MTo,ETo,P$,yTo,wTo,ATo,Z_,rre,LTo,BTo,$$,xTo,kTo,RTo,eb,tre,STo,PTo,I$,$To,ITo,jTo,ob,are,DTo,NTo,j$,qTo,OTo,GTo,rb,sre,XTo,VTo,D$,zTo,WTo,QTo,tb,nre,HTo,UTo,N$,JTo,YTo,KTo,ab,lre,ZTo,e1o,q$,o1o,r1o,t1o,sb,ire,a1o,s1o,O$,n1o,l1o,i1o,nb,dre,d1o,c1o,G$,m1o,f1o,g1o,lb,cre,h1o,u1o,X$,p1o,_1o,b1o,ib,mre,v1o,T1o,V$,F1o,C1o,M1o,db,fre,E1o,y1o,z$,w1o,A1o,L1o,cb,gre,B1o,x1o,W$,k1o,R1o,S1o,mb,hre,P1o,$1o,Q$,I1o,j1o,D1o,fb,ure,N1o,q1o,H$,O1o,G1o,X1o,gb,pre,V1o,z1o,U$,W1o,Q1o,H1o,hb,_re,U1o,J1o,J$,Y1o,K1o,Z1o,ub,bre,eFo,oFo,Y$,rFo,tFo,aFo,pb,vre,sFo,nFo,K$,lFo,iFo,dFo,_b,Tre,cFo,mFo,Z$,fFo,gFo,hFo,bb,Fre,uFo,pFo,eI,_Fo,bFo,vFo,vb,Cre,TFo,FFo,oI,CFo,MFo,EFo,Tb,Mre,yFo,wFo,rI,AFo,LFo,BFo,Fb,Ere,xFo,kFo,yre,RFo,SFo,PFo,Cb,wre,$Fo,IFo,tI,jFo,DFo,NFo,Mb,Are,qFo,OFo,aI,GFo,XFo,VFo,Eb,Lre,zFo,WFo,sI,QFo,HFo,UFo,yb,Bre,JFo,YFo,nI,KFo,ZFo,eCo,wb,oCo,xre,rCo,tCo,kre,aCo,sCo,Rre,nCo,lCo,aw,Xxe,dd,Ab,Sre,sw,iCo,Pre,dCo,Vxe,er,nw,cCo,cd,mCo,$re,fCo,gCo,Ire,hCo,uCo,pCo,lw,_Co,jre,bCo,vCo,TCo,Hr,iw,FCo,Dre,CCo,MCo,md,ECo,Nre,yCo,wCo,qre,ACo,LCo,BCo,Ore,xCo,kCo,dw,RCo,Ge,cw,SCo,Gre,PCo,$Co,Ha,ICo,Xre,jCo,DCo,Vre,NCo,qCo,zre,OCo,GCo,XCo,se,Lb,Wre,VCo,zCo,lI,WCo,QCo,HCo,Bb,Qre,UCo,JCo,iI,YCo,KCo,ZCo,xb,Hre,eMo,oMo,dI,rMo,tMo,aMo,kb,Ure,sMo,nMo,cI,lMo,iMo,dMo,Rb,Jre,cMo,mMo,mI,fMo,gMo,hMo,Sb,Yre,uMo,pMo,fI,_Mo,bMo,vMo,Pb,Kre,TMo,FMo,gI,CMo,MMo,EMo,$b,Zre,yMo,wMo,hI,AMo,LMo,BMo,Ib,ete,xMo,kMo,uI,RMo,SMo,PMo,jb,ote,$Mo,IMo,pI,jMo,DMo,NMo,Db,rte,qMo,OMo,_I,GMo,XMo,VMo,Nb,tte,zMo,WMo,bI,QMo,HMo,UMo,qb,ate,JMo,YMo,vI,KMo,ZMo,e4o,Ob,ste,o4o,r4o,TI,t4o,a4o,s4o,Gb,nte,n4o,l4o,FI,i4o,d4o,c4o,Xb,lte,m4o,f4o,CI,g4o,h4o,u4o,Vb,p4o,ite,_4o,b4o,dte,v4o,T4o,cte,F4o,C4o,mw,zxe,fd,zb,mte,fw,M4o,fte,E4o,Wxe,or,gw,y4o,gd,w4o,gte,A4o,L4o,hte,B4o,x4o,k4o,hw,R4o,ute,S4o,P4o,$4o,Ur,uw,I4o,pte,j4o,D4o,hd,N4o,_te,q4o,O4o,bte,G4o,X4o,V4o,vte,z4o,W4o,pw,Q4o,Xe,_w,H4o,Tte,U4o,J4o,Ua,Y4o,Fte,K4o,Z4o,Cte,eEo,oEo,Mte,rEo,tEo,aEo,A,Wb,Ete,sEo,nEo,MI,lEo,iEo,dEo,Qb,yte,cEo,mEo,EI,fEo,gEo,hEo,Hb,wte,uEo,pEo,yI,_Eo,bEo,vEo,Ub,Ate,TEo,FEo,wI,CEo,MEo,EEo,Jb,Lte,yEo,wEo,AI,AEo,LEo,BEo,Yb,Bte,xEo,kEo,LI,REo,SEo,PEo,Kb,xte,$Eo,IEo,BI,jEo,DEo,NEo,Zb,kte,qEo,OEo,xI,GEo,XEo,VEo,e2,Rte,zEo,WEo,kI,QEo,HEo,UEo,o2,Ste,JEo,YEo,RI,KEo,ZEo,e3o,r2,Pte,o3o,r3o,SI,t3o,a3o,s3o,t2,$te,n3o,l3o,PI,i3o,d3o,c3o,a2,Ite,m3o,f3o,$I,g3o,h3o,u3o,s2,jte,p3o,_3o,II,b3o,v3o,T3o,n2,Dte,F3o,C3o,jI,M3o,E3o,y3o,l2,Nte,w3o,A3o,DI,L3o,B3o,x3o,i2,qte,k3o,R3o,NI,S3o,P3o,$3o,d2,Ote,I3o,j3o,qI,D3o,N3o,q3o,c2,Gte,O3o,G3o,OI,X3o,V3o,z3o,m2,Xte,W3o,Q3o,GI,H3o,U3o,J3o,f2,Vte,Y3o,K3o,XI,Z3o,e5o,o5o,g2,zte,r5o,t5o,VI,a5o,s5o,n5o,h2,Wte,l5o,i5o,zI,d5o,c5o,m5o,u2,Qte,f5o,g5o,WI,h5o,u5o,p5o,p2,Hte,_5o,b5o,QI,v5o,T5o,F5o,_2,Ute,C5o,M5o,HI,E5o,y5o,w5o,b2,Jte,A5o,L5o,UI,B5o,x5o,k5o,v2,Yte,R5o,S5o,JI,P5o,$5o,I5o,T2,Kte,j5o,D5o,YI,N5o,q5o,O5o,F2,Zte,G5o,X5o,KI,V5o,z5o,W5o,C2,eae,Q5o,H5o,ZI,U5o,J5o,Y5o,M2,oae,K5o,Z5o,ej,eyo,oyo,ryo,E2,rae,tyo,ayo,oj,syo,nyo,lyo,y2,tae,iyo,dyo,rj,cyo,myo,fyo,w2,aae,gyo,hyo,tj,uyo,pyo,_yo,A2,sae,byo,vyo,aj,Tyo,Fyo,Cyo,L2,nae,Myo,Eyo,sj,yyo,wyo,Ayo,B2,lae,Lyo,Byo,nj,xyo,kyo,Ryo,x2,iae,Syo,Pyo,lj,$yo,Iyo,jyo,k2,dae,Dyo,Nyo,ij,qyo,Oyo,Gyo,R2,cae,Xyo,Vyo,dj,zyo,Wyo,Qyo,S2,mae,Hyo,Uyo,cj,Jyo,Yyo,Kyo,P2,fae,Zyo,ewo,mj,owo,rwo,two,$2,gae,awo,swo,fj,nwo,lwo,iwo,I2,hae,dwo,cwo,gj,mwo,fwo,gwo,j2,uae,hwo,uwo,hj,pwo,_wo,bwo,D2,vwo,pae,Two,Fwo,_ae,Cwo,Mwo,bae,Ewo,ywo,bw,Qxe,ud,N2,vae,vw,wwo,Tae,Awo,Hxe,rr,Tw,Lwo,pd,Bwo,Fae,xwo,kwo,Cae,Rwo,Swo,Pwo,Fw,$wo,Mae,Iwo,jwo,Dwo,Jr,Cw,Nwo,Eae,qwo,Owo,_d,Gwo,yae,Xwo,Vwo,wae,zwo,Wwo,Qwo,Aae,Hwo,Uwo,Mw,Jwo,Ve,Ew,Ywo,Lae,Kwo,Zwo,Ja,e6o,Bae,o6o,r6o,xae,t6o,a6o,kae,s6o,n6o,l6o,O,q2,Rae,i6o,d6o,uj,c6o,m6o,f6o,O2,Sae,g6o,h6o,pj,u6o,p6o,_6o,G2,Pae,b6o,v6o,_j,T6o,F6o,C6o,X2,$ae,M6o,E6o,bj,y6o,w6o,A6o,V2,Iae,L6o,B6o,vj,x6o,k6o,R6o,z2,jae,S6o,P6o,Tj,$6o,I6o,j6o,W2,Dae,D6o,N6o,Fj,q6o,O6o,G6o,Q2,Nae,X6o,V6o,Cj,z6o,W6o,Q6o,H2,qae,H6o,U6o,Mj,J6o,Y6o,K6o,U2,Oae,Z6o,eAo,Ej,oAo,rAo,tAo,J2,Gae,aAo,sAo,yj,nAo,lAo,iAo,Y2,Xae,dAo,cAo,wj,mAo,fAo,gAo,K2,Vae,hAo,uAo,Aj,pAo,_Ao,bAo,Z2,zae,vAo,TAo,Lj,FAo,CAo,MAo,ev,Wae,EAo,yAo,Bj,wAo,AAo,LAo,ov,Qae,BAo,xAo,xj,kAo,RAo,SAo,rv,Hae,PAo,$Ao,kj,IAo,jAo,DAo,tv,Uae,NAo,qAo,Rj,OAo,GAo,XAo,av,Jae,VAo,zAo,Sj,WAo,QAo,HAo,sv,Yae,UAo,JAo,Pj,YAo,KAo,ZAo,nv,Kae,e0o,o0o,$j,r0o,t0o,a0o,lv,Zae,s0o,n0o,Ij,l0o,i0o,d0o,iv,ese,c0o,m0o,jj,f0o,g0o,h0o,dv,ose,u0o,p0o,Dj,_0o,b0o,v0o,cv,rse,T0o,F0o,Nj,C0o,M0o,E0o,mv,tse,y0o,w0o,qj,A0o,L0o,B0o,fv,ase,x0o,k0o,Oj,R0o,S0o,P0o,gv,sse,$0o,I0o,Gj,j0o,D0o,N0o,hv,q0o,nse,O0o,G0o,lse,X0o,V0o,ise,z0o,W0o,yw,Uxe,bd,uv,dse,ww,Q0o,cse,H0o,Jxe,tr,Aw,U0o,vd,J0o,mse,Y0o,K0o,fse,Z0o,eLo,oLo,Lw,rLo,gse,tLo,aLo,sLo,Yr,Bw,nLo,hse,lLo,iLo,Td,dLo,use,cLo,mLo,pse,fLo,gLo,hLo,_se,uLo,pLo,xw,_Lo,ze,kw,bLo,bse,vLo,TLo,Ya,FLo,vse,CLo,MLo,Tse,ELo,yLo,Fse,wLo,ALo,LLo,da,pv,Cse,BLo,xLo,Xj,kLo,RLo,SLo,_v,Mse,PLo,$Lo,Vj,ILo,jLo,DLo,bv,Ese,NLo,qLo,zj,OLo,GLo,XLo,vv,yse,VLo,zLo,Wj,WLo,QLo,HLo,Tv,wse,ULo,JLo,Qj,YLo,KLo,ZLo,Fv,e7o,Ase,o7o,r7o,Lse,t7o,a7o,Bse,s7o,n7o,Rw,Yxe,Fd,Cv,xse,Sw,l7o,kse,i7o,Kxe,ar,Pw,d7o,Cd,c7o,Rse,m7o,f7o,Sse,g7o,h7o,u7o,$w,p7o,Pse,_7o,b7o,v7o,Kr,Iw,T7o,$se,F7o,C7o,Md,M7o,Ise,E7o,y7o,jse,w7o,A7o,L7o,Dse,B7o,x7o,jw,k7o,We,Dw,R7o,Nse,S7o,P7o,Ka,$7o,qse,I7o,j7o,Ose,D7o,N7o,Gse,q7o,O7o,G7o,N,Mv,Xse,X7o,V7o,Hj,z7o,W7o,Q7o,Ev,Vse,H7o,U7o,Uj,J7o,Y7o,K7o,yv,zse,Z7o,e8o,Jj,o8o,r8o,t8o,wv,Wse,a8o,s8o,Yj,n8o,l8o,i8o,Av,Qse,d8o,c8o,Kj,m8o,f8o,g8o,Lv,Hse,h8o,u8o,Zj,p8o,_8o,b8o,Bv,Use,v8o,T8o,eD,F8o,C8o,M8o,xv,Jse,E8o,y8o,oD,w8o,A8o,L8o,kv,Yse,B8o,x8o,rD,k8o,R8o,S8o,Rv,Kse,P8o,$8o,tD,I8o,j8o,D8o,Sv,Zse,N8o,q8o,aD,O8o,G8o,X8o,Pv,ene,V8o,z8o,sD,W8o,Q8o,H8o,$v,one,U8o,J8o,nD,Y8o,K8o,Z8o,Iv,rne,e9o,o9o,lD,r9o,t9o,a9o,jv,tne,s9o,n9o,iD,l9o,i9o,d9o,Dv,ane,c9o,m9o,dD,f9o,g9o,h9o,Nv,sne,u9o,p9o,cD,_9o,b9o,v9o,qv,nne,T9o,F9o,mD,C9o,M9o,E9o,Ov,lne,y9o,w9o,fD,A9o,L9o,B9o,Gv,ine,x9o,k9o,gD,R9o,S9o,P9o,Xv,dne,$9o,I9o,hD,j9o,D9o,N9o,Vv,cne,q9o,O9o,uD,G9o,X9o,V9o,zv,mne,z9o,W9o,pD,Q9o,H9o,U9o,Wv,fne,J9o,Y9o,_D,K9o,Z9o,eBo,Qv,gne,oBo,rBo,bD,tBo,aBo,sBo,Hv,hne,nBo,lBo,vD,iBo,dBo,cBo,Uv,une,mBo,fBo,TD,gBo,hBo,uBo,Jv,pne,pBo,_Bo,FD,bBo,vBo,TBo,Yv,_ne,FBo,CBo,CD,MBo,EBo,yBo,Kv,bne,wBo,ABo,MD,LBo,BBo,xBo,Zv,vne,kBo,RBo,ED,SBo,PBo,$Bo,eT,Tne,IBo,jBo,yD,DBo,NBo,qBo,oT,Fne,OBo,GBo,wD,XBo,VBo,zBo,rT,WBo,Cne,QBo,HBo,Mne,UBo,JBo,Ene,YBo,KBo,Nw,Zxe,Ed,tT,yne,qw,ZBo,wne,exo,eke,sr,Ow,oxo,yd,rxo,Ane,txo,axo,Lne,sxo,nxo,lxo,Gw,ixo,Bne,dxo,cxo,mxo,Zr,Xw,fxo,xne,gxo,hxo,wd,uxo,kne,pxo,_xo,Rne,bxo,vxo,Txo,Sne,Fxo,Cxo,Vw,Mxo,Qe,zw,Exo,Pne,yxo,wxo,Za,Axo,$ne,Lxo,Bxo,Ine,xxo,kxo,jne,Rxo,Sxo,Pxo,R,aT,Dne,$xo,Ixo,AD,jxo,Dxo,Nxo,sT,Nne,qxo,Oxo,LD,Gxo,Xxo,Vxo,nT,qne,zxo,Wxo,BD,Qxo,Hxo,Uxo,lT,One,Jxo,Yxo,xD,Kxo,Zxo,eko,iT,Gne,oko,rko,kD,tko,ako,sko,dT,Xne,nko,lko,RD,iko,dko,cko,cT,Vne,mko,fko,SD,gko,hko,uko,mT,zne,pko,_ko,PD,bko,vko,Tko,fT,Wne,Fko,Cko,$D,Mko,Eko,yko,gT,Qne,wko,Ako,ID,Lko,Bko,xko,hT,Hne,kko,Rko,jD,Sko,Pko,$ko,uT,Une,Iko,jko,DD,Dko,Nko,qko,pT,Jne,Oko,Gko,ND,Xko,Vko,zko,_T,Yne,Wko,Qko,qD,Hko,Uko,Jko,bT,Kne,Yko,Kko,OD,Zko,eRo,oRo,vT,Zne,rRo,tRo,GD,aRo,sRo,nRo,TT,ele,lRo,iRo,XD,dRo,cRo,mRo,FT,ole,fRo,gRo,VD,hRo,uRo,pRo,CT,rle,_Ro,bRo,zD,vRo,TRo,FRo,MT,tle,CRo,MRo,WD,ERo,yRo,wRo,ET,ale,ARo,LRo,QD,BRo,xRo,kRo,yT,sle,RRo,SRo,HD,PRo,$Ro,IRo,wT,nle,jRo,DRo,UD,NRo,qRo,ORo,AT,lle,GRo,XRo,JD,VRo,zRo,WRo,LT,ile,QRo,HRo,YD,URo,JRo,YRo,BT,dle,KRo,ZRo,KD,eSo,oSo,rSo,xT,cle,tSo,aSo,ZD,sSo,nSo,lSo,kT,mle,iSo,dSo,eN,cSo,mSo,fSo,RT,fle,gSo,hSo,oN,uSo,pSo,_So,ST,gle,bSo,vSo,rN,TSo,FSo,CSo,PT,hle,MSo,ESo,tN,ySo,wSo,ASo,$T,ule,LSo,BSo,aN,xSo,kSo,RSo,IT,ple,SSo,PSo,sN,$So,ISo,jSo,jT,_le,DSo,NSo,nN,qSo,OSo,GSo,DT,ble,XSo,VSo,lN,zSo,WSo,QSo,NT,vle,HSo,USo,iN,JSo,YSo,KSo,qT,Tle,ZSo,ePo,dN,oPo,rPo,tPo,OT,Fle,aPo,sPo,cN,nPo,lPo,iPo,GT,Cle,dPo,cPo,mN,mPo,fPo,gPo,XT,hPo,Mle,uPo,pPo,Ele,_Po,bPo,yle,vPo,TPo,Ww,oke,Ad,VT,wle,Qw,FPo,Ale,CPo,rke,nr,Hw,MPo,Ld,EPo,Lle,yPo,wPo,Ble,APo,LPo,BPo,Uw,xPo,xle,kPo,RPo,SPo,et,Jw,PPo,kle,$Po,IPo,Bd,jPo,Rle,DPo,NPo,Sle,qPo,OPo,GPo,Ple,XPo,VPo,Yw,zPo,He,Kw,WPo,$le,QPo,HPo,es,UPo,Ile,JPo,YPo,jle,KPo,ZPo,Dle,e$o,o$o,r$o,Nle,zT,qle,t$o,a$o,fN,s$o,n$o,l$o,WT,i$o,Ole,d$o,c$o,Gle,m$o,f$o,Xle,g$o,h$o,Zw,tke,xd,QT,Vle,e6,u$o,zle,p$o,ake,lr,o6,_$o,kd,b$o,Wle,v$o,T$o,Qle,F$o,C$o,M$o,r6,E$o,Hle,y$o,w$o,A$o,ot,t6,L$o,Ule,B$o,x$o,Rd,k$o,Jle,R$o,S$o,Yle,P$o,$$o,I$o,Kle,j$o,D$o,a6,N$o,Ue,s6,q$o,Zle,O$o,G$o,os,X$o,eie,V$o,z$o,oie,W$o,Q$o,rie,H$o,U$o,J$o,pe,HT,tie,Y$o,K$o,gN,Z$o,eIo,oIo,UT,aie,rIo,tIo,hN,aIo,sIo,nIo,qn,sie,lIo,iIo,uN,dIo,cIo,pN,mIo,fIo,gIo,JT,nie,hIo,uIo,_N,pIo,_Io,bIo,fa,lie,vIo,TIo,bN,FIo,CIo,vN,MIo,EIo,TN,yIo,wIo,AIo,YT,iie,LIo,BIo,FN,xIo,kIo,RIo,KT,die,SIo,PIo,CN,$Io,IIo,jIo,ZT,cie,DIo,NIo,MN,qIo,OIo,GIo,e1,mie,XIo,VIo,EN,zIo,WIo,QIo,o1,fie,HIo,UIo,yN,JIo,YIo,KIo,r1,ZIo,gie,ejo,ojo,hie,rjo,tjo,uie,ajo,sjo,n6,ske,Sd,t1,pie,l6,njo,_ie,ljo,nke,ir,i6,ijo,Pd,djo,bie,cjo,mjo,vie,fjo,gjo,hjo,d6,ujo,Tie,pjo,_jo,bjo,rt,c6,vjo,Fie,Tjo,Fjo,$d,Cjo,Cie,Mjo,Ejo,Mie,yjo,wjo,Ajo,Eie,Ljo,Bjo,m6,xjo,Je,f6,kjo,yie,Rjo,Sjo,rs,Pjo,wie,$jo,Ijo,Aie,jjo,Djo,Lie,Njo,qjo,Ojo,Bie,a1,xie,Gjo,Xjo,wN,Vjo,zjo,Wjo,s1,Qjo,kie,Hjo,Ujo,Rie,Jjo,Yjo,Sie,Kjo,Zjo,g6,lke,Id,n1,Pie,h6,eDo,$ie,oDo,ike,dr,u6,rDo,jd,tDo,Iie,aDo,sDo,jie,nDo,lDo,iDo,p6,dDo,Die,cDo,mDo,fDo,tt,_6,gDo,Nie,hDo,uDo,Dd,pDo,qie,_Do,bDo,Oie,vDo,TDo,FDo,Gie,CDo,MDo,b6,EDo,Ye,v6,yDo,Xie,wDo,ADo,ts,LDo,Vie,BDo,xDo,zie,kDo,RDo,Wie,SDo,PDo,$Do,ke,l1,Qie,IDo,jDo,AN,DDo,NDo,qDo,i1,Hie,ODo,GDo,LN,XDo,VDo,zDo,d1,Uie,WDo,QDo,BN,HDo,UDo,JDo,c1,Jie,YDo,KDo,xN,ZDo,eNo,oNo,m1,Yie,rNo,tNo,kN,aNo,sNo,nNo,f1,Kie,lNo,iNo,RN,dNo,cNo,mNo,g1,Zie,fNo,gNo,SN,hNo,uNo,pNo,h1,ede,_No,bNo,PN,vNo,TNo,FNo,u1,CNo,ode,MNo,ENo,rde,yNo,wNo,tde,ANo,LNo,T6,dke,Nd,p1,ade,F6,BNo,sde,xNo,cke,cr,C6,kNo,qd,RNo,nde,SNo,PNo,lde,$No,INo,jNo,M6,DNo,ide,NNo,qNo,ONo,at,E6,GNo,dde,XNo,VNo,Od,zNo,cde,WNo,QNo,mde,HNo,UNo,JNo,fde,YNo,KNo,y6,ZNo,Ke,w6,eqo,gde,oqo,rqo,as,tqo,hde,aqo,sqo,ude,nqo,lqo,pde,iqo,dqo,cqo,ss,_1,_de,mqo,fqo,$N,gqo,hqo,uqo,b1,bde,pqo,_qo,IN,bqo,vqo,Tqo,v1,vde,Fqo,Cqo,jN,Mqo,Eqo,yqo,T1,Tde,wqo,Aqo,DN,Lqo,Bqo,xqo,F1,kqo,Fde,Rqo,Sqo,Cde,Pqo,$qo,Mde,Iqo,jqo,A6,mke,Gd,C1,Ede,L6,Dqo,yde,Nqo,fke,mr,B6,qqo,Xd,Oqo,wde,Gqo,Xqo,Ade,Vqo,zqo,Wqo,x6,Qqo,Lde,Hqo,Uqo,Jqo,st,k6,Yqo,Bde,Kqo,Zqo,Vd,eOo,xde,oOo,rOo,kde,tOo,aOo,sOo,Rde,nOo,lOo,R6,iOo,Ze,S6,dOo,Sde,cOo,mOo,ns,fOo,Pde,gOo,hOo,$de,uOo,pOo,Ide,_Oo,bOo,vOo,Re,M1,jde,TOo,FOo,NN,COo,MOo,EOo,E1,Dde,yOo,wOo,qN,AOo,LOo,BOo,y1,Nde,xOo,kOo,ON,ROo,SOo,POo,w1,qde,$Oo,IOo,GN,jOo,DOo,NOo,A1,Ode,qOo,OOo,XN,GOo,XOo,VOo,L1,Gde,zOo,WOo,VN,QOo,HOo,UOo,B1,Xde,JOo,YOo,zN,KOo,ZOo,eGo,x1,Vde,oGo,rGo,WN,tGo,aGo,sGo,k1,nGo,zde,lGo,iGo,Wde,dGo,cGo,Qde,mGo,fGo,P6,gke,zd,R1,Hde,$6,gGo,Ude,hGo,hke,fr,I6,uGo,Wd,pGo,Jde,_Go,bGo,Yde,vGo,TGo,FGo,j6,CGo,Kde,MGo,EGo,yGo,nt,D6,wGo,Zde,AGo,LGo,Qd,BGo,ece,xGo,kGo,oce,RGo,SGo,PGo,rce,$Go,IGo,N6,jGo,eo,q6,DGo,tce,NGo,qGo,ls,OGo,ace,GGo,XGo,sce,VGo,zGo,nce,WGo,QGo,HGo,O6,S1,lce,UGo,JGo,QN,YGo,KGo,ZGo,P1,ice,eXo,oXo,HN,rXo,tXo,aXo,$1,sXo,dce,nXo,lXo,cce,iXo,dXo,mce,cXo,mXo,G6,uke,Hd,I1,fce,X6,fXo,gce,gXo,pke,gr,V6,hXo,Ud,uXo,hce,pXo,_Xo,uce,bXo,vXo,TXo,z6,FXo,pce,CXo,MXo,EXo,lt,W6,yXo,_ce,wXo,AXo,Jd,LXo,bce,BXo,xXo,vce,kXo,RXo,SXo,Tce,PXo,$Xo,Q6,IXo,oo,H6,jXo,Fce,DXo,NXo,is,qXo,Cce,OXo,GXo,Mce,XXo,VXo,Ece,zXo,WXo,QXo,ds,j1,yce,HXo,UXo,UN,JXo,YXo,KXo,D1,wce,ZXo,eVo,JN,oVo,rVo,tVo,N1,Ace,aVo,sVo,YN,nVo,lVo,iVo,q1,Lce,dVo,cVo,KN,mVo,fVo,gVo,O1,hVo,Bce,uVo,pVo,xce,_Vo,bVo,kce,vVo,TVo,U6,_ke,Yd,G1,Rce,J6,FVo,Sce,CVo,bke,hr,Y6,MVo,Kd,EVo,Pce,yVo,wVo,$ce,AVo,LVo,BVo,K6,xVo,Ice,kVo,RVo,SVo,it,Z6,PVo,jce,$Vo,IVo,Zd,jVo,Dce,DVo,NVo,Nce,qVo,OVo,GVo,qce,XVo,VVo,eA,zVo,ro,oA,WVo,Oce,QVo,HVo,cs,UVo,Gce,JVo,YVo,Xce,KVo,ZVo,Vce,ezo,ozo,rzo,ec,X1,zce,tzo,azo,ZN,szo,nzo,lzo,V1,Wce,izo,dzo,eq,czo,mzo,fzo,z1,Qce,gzo,hzo,oq,uzo,pzo,_zo,W1,bzo,Hce,vzo,Tzo,Uce,Fzo,Czo,Jce,Mzo,Ezo,rA,vke,oc,Q1,Yce,tA,yzo,Kce,wzo,Tke,ur,aA,Azo,rc,Lzo,Zce,Bzo,xzo,eme,kzo,Rzo,Szo,sA,Pzo,ome,$zo,Izo,jzo,dt,nA,Dzo,rme,Nzo,qzo,tc,Ozo,tme,Gzo,Xzo,ame,Vzo,zzo,Wzo,sme,Qzo,Hzo,lA,Uzo,to,iA,Jzo,nme,Yzo,Kzo,ms,Zzo,lme,eWo,oWo,ime,rWo,tWo,dme,aWo,sWo,nWo,cme,H1,mme,lWo,iWo,rq,dWo,cWo,mWo,U1,fWo,fme,gWo,hWo,gme,uWo,pWo,hme,_Wo,bWo,dA,Fke,ac,J1,ume,cA,vWo,pme,TWo,Cke,pr,mA,FWo,sc,CWo,_me,MWo,EWo,bme,yWo,wWo,AWo,fA,LWo,vme,BWo,xWo,kWo,ct,gA,RWo,Tme,SWo,PWo,nc,$Wo,Fme,IWo,jWo,Cme,DWo,NWo,qWo,Mme,OWo,GWo,hA,XWo,ao,uA,VWo,Eme,zWo,WWo,fs,QWo,yme,HWo,UWo,wme,JWo,YWo,Ame,KWo,ZWo,eQo,Lme,Y1,Bme,oQo,rQo,tq,tQo,aQo,sQo,K1,nQo,xme,lQo,iQo,kme,dQo,cQo,Rme,mQo,fQo,pA,Mke,lc,Z1,Sme,_A,gQo,Pme,hQo,Eke,_r,bA,uQo,ic,pQo,$me,_Qo,bQo,Ime,vQo,TQo,FQo,vA,CQo,jme,MQo,EQo,yQo,mt,TA,wQo,Dme,AQo,LQo,dc,BQo,Nme,xQo,kQo,qme,RQo,SQo,PQo,Ome,$Qo,IQo,FA,jQo,so,CA,DQo,Gme,NQo,qQo,gs,OQo,Xme,GQo,XQo,Vme,VQo,zQo,zme,WQo,QQo,HQo,MA,eF,Wme,UQo,JQo,aq,YQo,KQo,ZQo,oF,Qme,eHo,oHo,sq,rHo,tHo,aHo,rF,sHo,Hme,nHo,lHo,Ume,iHo,dHo,Jme,cHo,mHo,EA,yke,cc,tF,Yme,yA,fHo,Kme,gHo,wke,br,wA,hHo,mc,uHo,Zme,pHo,_Ho,efe,bHo,vHo,THo,AA,FHo,ofe,CHo,MHo,EHo,ft,LA,yHo,rfe,wHo,AHo,fc,LHo,tfe,BHo,xHo,afe,kHo,RHo,SHo,sfe,PHo,$Ho,BA,IHo,no,xA,jHo,nfe,DHo,NHo,hs,qHo,lfe,OHo,GHo,ife,XHo,VHo,dfe,zHo,WHo,QHo,cfe,aF,mfe,HHo,UHo,nq,JHo,YHo,KHo,sF,ZHo,ffe,eUo,oUo,gfe,rUo,tUo,hfe,aUo,sUo,kA,Ake,gc,nF,ufe,RA,nUo,pfe,lUo,Lke,vr,SA,iUo,hc,dUo,_fe,cUo,mUo,bfe,fUo,gUo,hUo,PA,uUo,vfe,pUo,_Uo,bUo,gt,$A,vUo,Tfe,TUo,FUo,uc,CUo,Ffe,MUo,EUo,Cfe,yUo,wUo,AUo,Mfe,LUo,BUo,IA,xUo,ho,jA,kUo,Efe,RUo,SUo,us,PUo,yfe,$Uo,IUo,wfe,jUo,DUo,Afe,NUo,qUo,OUo,B,lF,Lfe,GUo,XUo,lq,VUo,zUo,WUo,iF,Bfe,QUo,HUo,iq,UUo,JUo,YUo,dF,xfe,KUo,ZUo,dq,eJo,oJo,rJo,cF,kfe,tJo,aJo,cq,sJo,nJo,lJo,mF,Rfe,iJo,dJo,mq,cJo,mJo,fJo,fF,Sfe,gJo,hJo,fq,uJo,pJo,_Jo,gF,Pfe,bJo,vJo,gq,TJo,FJo,CJo,hF,$fe,MJo,EJo,hq,yJo,wJo,AJo,uF,Ife,LJo,BJo,uq,xJo,kJo,RJo,pF,jfe,SJo,PJo,pq,$Jo,IJo,jJo,_F,Dfe,DJo,NJo,_q,qJo,OJo,GJo,bF,Nfe,XJo,VJo,bq,zJo,WJo,QJo,vF,qfe,HJo,UJo,vq,JJo,YJo,KJo,TF,Ofe,ZJo,eYo,Tq,oYo,rYo,tYo,FF,Gfe,aYo,sYo,Fq,nYo,lYo,iYo,CF,Xfe,dYo,cYo,Cq,mYo,fYo,gYo,On,Vfe,hYo,uYo,Mq,pYo,_Yo,Eq,bYo,vYo,TYo,MF,zfe,FYo,CYo,yq,MYo,EYo,yYo,EF,Wfe,wYo,AYo,wq,LYo,BYo,xYo,yF,Qfe,kYo,RYo,Aq,SYo,PYo,$Yo,wF,Hfe,IYo,jYo,Lq,DYo,NYo,qYo,AF,Ufe,OYo,GYo,Bq,XYo,VYo,zYo,LF,Jfe,WYo,QYo,xq,HYo,UYo,JYo,BF,Yfe,YYo,KYo,kq,ZYo,eKo,oKo,xF,Kfe,rKo,tKo,Rq,aKo,sKo,nKo,kF,Zfe,lKo,iKo,Sq,dKo,cKo,mKo,RF,ege,fKo,gKo,Pq,hKo,uKo,pKo,SF,oge,_Ko,bKo,$q,vKo,TKo,FKo,PF,rge,CKo,MKo,Iq,EKo,yKo,wKo,$F,tge,AKo,LKo,jq,BKo,xKo,kKo,IF,age,RKo,SKo,Dq,PKo,$Ko,IKo,jF,sge,jKo,DKo,Nq,NKo,qKo,OKo,DF,nge,GKo,XKo,qq,VKo,zKo,WKo,NF,lge,QKo,HKo,Oq,UKo,JKo,YKo,qF,ige,KKo,ZKo,Gq,eZo,oZo,rZo,OF,dge,tZo,aZo,Xq,sZo,nZo,lZo,GF,cge,iZo,dZo,Vq,cZo,mZo,fZo,XF,mge,gZo,hZo,zq,uZo,pZo,_Zo,VF,fge,bZo,vZo,Wq,TZo,FZo,CZo,zF,gge,MZo,EZo,Qq,yZo,wZo,AZo,WF,hge,LZo,BZo,Hq,xZo,kZo,RZo,QF,uge,SZo,PZo,Uq,$Zo,IZo,jZo,pge,DZo,NZo,DA,Bke,pc,HF,_ge,NA,qZo,bge,OZo,xke,Tr,qA,GZo,_c,XZo,vge,VZo,zZo,Tge,WZo,QZo,HZo,OA,UZo,Fge,JZo,YZo,KZo,ht,GA,ZZo,Cge,eer,oer,bc,rer,Mge,ter,aer,Ege,ser,ner,ler,yge,ier,der,XA,cer,uo,VA,mer,wge,fer,ger,ps,her,Age,uer,per,Lge,_er,ber,Bge,ver,Ter,Fer,H,UF,xge,Cer,Mer,Jq,Eer,yer,wer,JF,kge,Aer,Ler,Yq,Ber,xer,ker,YF,Rge,Rer,Ser,Kq,Per,$er,Ier,KF,Sge,jer,Der,Zq,Ner,qer,Oer,ZF,Pge,Ger,Xer,eO,Ver,zer,Wer,eC,$ge,Qer,Her,oO,Uer,Jer,Yer,oC,Ige,Ker,Zer,rO,eor,oor,ror,rC,jge,tor,aor,tO,sor,nor,lor,tC,Dge,ior,dor,aO,cor,mor,gor,aC,Nge,hor,uor,sO,por,_or,bor,sC,qge,vor,Tor,nO,For,Cor,Mor,nC,Oge,Eor,yor,lO,wor,Aor,Lor,lC,Gge,Bor,xor,iO,kor,Ror,Sor,iC,Xge,Por,$or,dO,Ior,jor,Dor,dC,Vge,Nor,qor,cO,Oor,Gor,Xor,cC,zge,Vor,zor,mO,Wor,Qor,Hor,mC,Wge,Uor,Jor,fO,Yor,Kor,Zor,fC,Qge,err,orr,gO,rrr,trr,arr,gC,Hge,srr,nrr,hO,lrr,irr,drr,hC,Uge,crr,mrr,uO,frr,grr,hrr,uC,Jge,urr,prr,pO,_rr,brr,vrr,pC,Yge,Trr,Frr,_O,Crr,Mrr,Err,Kge,yrr,wrr,zA,kke,vc,_C,Zge,WA,Arr,ehe,Lrr,Rke,Fr,QA,Brr,Tc,xrr,ohe,krr,Rrr,rhe,Srr,Prr,$rr,HA,Irr,the,jrr,Drr,Nrr,ut,UA,qrr,ahe,Orr,Grr,Fc,Xrr,she,Vrr,zrr,nhe,Wrr,Qrr,Hrr,lhe,Urr,Jrr,JA,Yrr,po,YA,Krr,ihe,Zrr,etr,_s,otr,dhe,rtr,ttr,che,atr,str,mhe,ntr,ltr,itr,fe,bC,fhe,dtr,ctr,bO,mtr,ftr,gtr,vC,ghe,htr,utr,vO,ptr,_tr,btr,TC,hhe,vtr,Ttr,TO,Ftr,Ctr,Mtr,FC,uhe,Etr,ytr,FO,wtr,Atr,Ltr,CC,phe,Btr,xtr,CO,ktr,Rtr,Str,MC,_he,Ptr,$tr,MO,Itr,jtr,Dtr,EC,bhe,Ntr,qtr,EO,Otr,Gtr,Xtr,yC,vhe,Vtr,ztr,yO,Wtr,Qtr,Htr,wC,The,Utr,Jtr,wO,Ytr,Ktr,Ztr,AC,Fhe,ear,oar,AO,rar,tar,aar,LC,Che,sar,nar,LO,lar,iar,dar,Mhe,car,mar,KA,Ske,Cc,BC,Ehe,ZA,far,yhe,gar,Pke,Cr,e0,har,Mc,uar,whe,par,_ar,Ahe,bar,Tar,Far,o0,Car,Lhe,Mar,Ear,yar,pt,r0,war,Bhe,Aar,Lar,Ec,Bar,xhe,xar,kar,khe,Rar,Sar,Par,Rhe,$ar,Iar,t0,jar,_o,a0,Dar,She,Nar,qar,bs,Oar,Phe,Gar,Xar,$he,Var,zar,Ihe,War,Qar,Har,s0,xC,jhe,Uar,Jar,BO,Yar,Kar,Zar,kC,Dhe,esr,osr,xO,rsr,tsr,asr,Nhe,ssr,nsr,n0,$ke,yc,RC,qhe,l0,lsr,Ohe,isr,Ike,Mr,i0,dsr,wc,csr,Ghe,msr,fsr,Xhe,gsr,hsr,usr,d0,psr,Vhe,_sr,bsr,vsr,_t,c0,Tsr,zhe,Fsr,Csr,Ac,Msr,Whe,Esr,ysr,Qhe,wsr,Asr,Lsr,Hhe,Bsr,xsr,m0,ksr,bo,f0,Rsr,Uhe,Ssr,Psr,vs,$sr,Jhe,Isr,jsr,Yhe,Dsr,Nsr,Khe,qsr,Osr,Gsr,Y,SC,Zhe,Xsr,Vsr,kO,zsr,Wsr,Qsr,PC,eue,Hsr,Usr,RO,Jsr,Ysr,Ksr,$C,oue,Zsr,enr,SO,onr,rnr,tnr,IC,rue,anr,snr,PO,nnr,lnr,inr,jC,tue,dnr,cnr,$O,mnr,fnr,gnr,DC,aue,hnr,unr,IO,pnr,_nr,bnr,NC,sue,vnr,Tnr,jO,Fnr,Cnr,Mnr,qC,nue,Enr,ynr,DO,wnr,Anr,Lnr,OC,lue,Bnr,xnr,NO,knr,Rnr,Snr,GC,iue,Pnr,$nr,qO,Inr,jnr,Dnr,XC,due,Nnr,qnr,OO,Onr,Gnr,Xnr,VC,cue,Vnr,znr,GO,Wnr,Qnr,Hnr,zC,mue,Unr,Jnr,XO,Ynr,Knr,Znr,WC,fue,elr,olr,VO,rlr,tlr,alr,QC,gue,slr,nlr,zO,llr,ilr,dlr,HC,hue,clr,mlr,WO,flr,glr,hlr,UC,uue,ulr,plr,QO,_lr,blr,vlr,JC,pue,Tlr,Flr,HO,Clr,Mlr,Elr,YC,_ue,ylr,wlr,UO,Alr,Llr,Blr,KC,bue,xlr,klr,JO,Rlr,Slr,Plr,vue,$lr,Ilr,g0,jke,Lc,ZC,Tue,h0,jlr,Fue,Dlr,Dke,Er,u0,Nlr,Bc,qlr,Cue,Olr,Glr,Mue,Xlr,Vlr,zlr,p0,Wlr,Eue,Qlr,Hlr,Ulr,bt,_0,Jlr,yue,Ylr,Klr,xc,Zlr,wue,eir,oir,Aue,rir,tir,air,Lue,sir,nir,b0,lir,vo,v0,iir,Bue,dir,cir,Ts,mir,xue,fir,gir,kue,hir,uir,Rue,pir,_ir,bir,_e,eM,Sue,vir,Tir,YO,Fir,Cir,Mir,oM,Pue,Eir,yir,KO,wir,Air,Lir,rM,$ue,Bir,xir,ZO,kir,Rir,Sir,tM,Iue,Pir,$ir,eG,Iir,jir,Dir,aM,jue,Nir,qir,oG,Oir,Gir,Xir,sM,Due,Vir,zir,rG,Wir,Qir,Hir,nM,Nue,Uir,Jir,tG,Yir,Kir,Zir,lM,que,edr,odr,aG,rdr,tdr,adr,iM,Oue,sdr,ndr,sG,ldr,idr,ddr,dM,Gue,cdr,mdr,nG,fdr,gdr,hdr,Xue,udr,pdr,T0,Nke,kc,cM,Vue,F0,_dr,zue,bdr,qke,yr,C0,vdr,Rc,Tdr,Wue,Fdr,Cdr,Que,Mdr,Edr,ydr,M0,wdr,Hue,Adr,Ldr,Bdr,vt,E0,xdr,Uue,kdr,Rdr,Sc,Sdr,Jue,Pdr,$dr,Yue,Idr,jdr,Ddr,Kue,Ndr,qdr,y0,Odr,To,w0,Gdr,Zue,Xdr,Vdr,Fs,zdr,epe,Wdr,Qdr,ope,Hdr,Udr,rpe,Jdr,Ydr,Kdr,V,mM,tpe,Zdr,ecr,lG,ocr,rcr,tcr,fM,ape,acr,scr,iG,ncr,lcr,icr,gM,spe,dcr,ccr,dG,mcr,fcr,gcr,hM,npe,hcr,ucr,cG,pcr,_cr,bcr,uM,lpe,vcr,Tcr,mG,Fcr,Ccr,Mcr,pM,ipe,Ecr,ycr,fG,wcr,Acr,Lcr,_M,dpe,Bcr,xcr,gG,kcr,Rcr,Scr,bM,cpe,Pcr,$cr,hG,Icr,jcr,Dcr,vM,mpe,Ncr,qcr,uG,Ocr,Gcr,Xcr,TM,fpe,Vcr,zcr,pG,Wcr,Qcr,Hcr,FM,gpe,Ucr,Jcr,_G,Ycr,Kcr,Zcr,CM,hpe,emr,omr,bG,rmr,tmr,amr,MM,upe,smr,nmr,vG,lmr,imr,dmr,EM,ppe,cmr,mmr,TG,fmr,gmr,hmr,yM,_pe,umr,pmr,FG,_mr,bmr,vmr,wM,bpe,Tmr,Fmr,CG,Cmr,Mmr,Emr,AM,vpe,ymr,wmr,MG,Amr,Lmr,Bmr,LM,Tpe,xmr,kmr,EG,Rmr,Smr,Pmr,BM,Fpe,$mr,Imr,yG,jmr,Dmr,Nmr,xM,Cpe,qmr,Omr,wG,Gmr,Xmr,Vmr,kM,Mpe,zmr,Wmr,AG,Qmr,Hmr,Umr,RM,Epe,Jmr,Ymr,LG,Kmr,Zmr,efr,SM,ype,ofr,rfr,BG,tfr,afr,sfr,PM,wpe,nfr,lfr,xG,ifr,dfr,cfr,$M,Ape,mfr,ffr,kG,gfr,hfr,ufr,Lpe,pfr,_fr,A0,Oke,Pc,IM,Bpe,L0,bfr,xpe,vfr,Gke,wr,B0,Tfr,$c,Ffr,kpe,Cfr,Mfr,Rpe,Efr,yfr,wfr,x0,Afr,Spe,Lfr,Bfr,xfr,Tt,k0,kfr,Ppe,Rfr,Sfr,Ic,Pfr,$pe,$fr,Ifr,Ipe,jfr,Dfr,Nfr,jpe,qfr,Ofr,R0,Gfr,Fo,S0,Xfr,Dpe,Vfr,zfr,Cs,Wfr,Npe,Qfr,Hfr,qpe,Ufr,Jfr,Ope,Yfr,Kfr,Zfr,ae,jM,Gpe,egr,ogr,RG,rgr,tgr,agr,DM,Xpe,sgr,ngr,SG,lgr,igr,dgr,NM,Vpe,cgr,mgr,PG,fgr,ggr,hgr,qM,zpe,ugr,pgr,$G,_gr,bgr,vgr,OM,Wpe,Tgr,Fgr,IG,Cgr,Mgr,Egr,GM,Qpe,ygr,wgr,jG,Agr,Lgr,Bgr,XM,Hpe,xgr,kgr,DG,Rgr,Sgr,Pgr,VM,Upe,$gr,Igr,NG,jgr,Dgr,Ngr,zM,Jpe,qgr,Ogr,qG,Ggr,Xgr,Vgr,WM,Ype,zgr,Wgr,OG,Qgr,Hgr,Ugr,QM,Kpe,Jgr,Ygr,GG,Kgr,Zgr,ehr,HM,Zpe,ohr,rhr,XG,thr,ahr,shr,UM,e_e,nhr,lhr,VG,ihr,dhr,chr,JM,o_e,mhr,fhr,zG,ghr,hhr,uhr,YM,r_e,phr,_hr,WG,bhr,vhr,Thr,KM,t_e,Fhr,Chr,QG,Mhr,Ehr,yhr,ZM,a_e,whr,Ahr,HG,Lhr,Bhr,xhr,s_e,khr,Rhr,P0,Xke,jc,e4,n_e,$0,Shr,l_e,Phr,Vke,Ar,I0,$hr,Dc,Ihr,i_e,jhr,Dhr,d_e,Nhr,qhr,Ohr,j0,Ghr,c_e,Xhr,Vhr,zhr,Ft,D0,Whr,m_e,Qhr,Hhr,Nc,Uhr,f_e,Jhr,Yhr,g_e,Khr,Zhr,eur,h_e,our,rur,N0,tur,Co,q0,aur,u_e,sur,nur,Ms,lur,p_e,iur,dur,__e,cur,mur,b_e,fur,gur,hur,v_e,o4,T_e,uur,pur,UG,_ur,bur,vur,F_e,Tur,Fur,O0,zke,qc,r4,C_e,G0,Cur,M_e,Mur,Wke,Lr,X0,Eur,Oc,yur,E_e,wur,Aur,y_e,Lur,Bur,xur,V0,kur,w_e,Rur,Sur,Pur,Ct,z0,$ur,A_e,Iur,jur,Gc,Dur,L_e,Nur,qur,B_e,Our,Gur,Xur,x_e,Vur,zur,W0,Wur,Mo,Q0,Qur,k_e,Hur,Uur,Es,Jur,R_e,Yur,Kur,S_e,Zur,epr,P_e,opr,rpr,tpr,K,t4,$_e,apr,spr,JG,npr,lpr,ipr,a4,I_e,dpr,cpr,YG,mpr,fpr,gpr,s4,j_e,hpr,upr,KG,ppr,_pr,bpr,n4,D_e,vpr,Tpr,ZG,Fpr,Cpr,Mpr,l4,N_e,Epr,ypr,eX,wpr,Apr,Lpr,i4,q_e,Bpr,xpr,oX,kpr,Rpr,Spr,d4,O_e,Ppr,$pr,rX,Ipr,jpr,Dpr,c4,G_e,Npr,qpr,tX,Opr,Gpr,Xpr,m4,X_e,Vpr,zpr,aX,Wpr,Qpr,Hpr,f4,V_e,Upr,Jpr,sX,Ypr,Kpr,Zpr,g4,z_e,e_r,o_r,nX,r_r,t_r,a_r,h4,W_e,s_r,n_r,lX,l_r,i_r,d_r,u4,Q_e,c_r,m_r,iX,f_r,g_r,h_r,p4,H_e,u_r,p_r,dX,__r,b_r,v_r,_4,U_e,T_r,F_r,cX,C_r,M_r,E_r,b4,J_e,y_r,w_r,mX,A_r,L_r,B_r,v4,Y_e,x_r,k_r,fX,R_r,S_r,P_r,T4,K_e,$_r,I_r,gX,j_r,D_r,N_r,F4,Z_e,q_r,O_r,hX,G_r,X_r,V_r,C4,ebe,z_r,W_r,uX,Q_r,H_r,U_r,obe,J_r,Y_r,H0,Qke,Xc,M4,rbe,U0,K_r,tbe,Z_r,Hke,Br,J0,ebr,Vc,obr,abe,rbr,tbr,sbe,abr,sbr,nbr,Y0,lbr,nbe,ibr,dbr,cbr,Mt,K0,mbr,lbe,fbr,gbr,zc,hbr,ibe,ubr,pbr,dbe,_br,bbr,vbr,cbe,Tbr,Fbr,Z0,Cbr,Eo,eL,Mbr,mbe,Ebr,ybr,ys,wbr,fbe,Abr,Lbr,gbe,Bbr,xbr,hbe,kbr,Rbr,Sbr,Z,E4,ube,Pbr,$br,pX,Ibr,jbr,Dbr,y4,pbe,Nbr,qbr,_X,Obr,Gbr,Xbr,w4,_be,Vbr,zbr,bX,Wbr,Qbr,Hbr,A4,bbe,Ubr,Jbr,vX,Ybr,Kbr,Zbr,L4,vbe,e2r,o2r,TX,r2r,t2r,a2r,B4,Tbe,s2r,n2r,FX,l2r,i2r,d2r,x4,Fbe,c2r,m2r,CX,f2r,g2r,h2r,k4,Cbe,u2r,p2r,MX,_2r,b2r,v2r,R4,Mbe,T2r,F2r,EX,C2r,M2r,E2r,S4,Ebe,y2r,w2r,yX,A2r,L2r,B2r,P4,ybe,x2r,k2r,wX,R2r,S2r,P2r,$4,wbe,$2r,I2r,AX,j2r,D2r,N2r,I4,Abe,q2r,O2r,LX,G2r,X2r,V2r,j4,Lbe,z2r,W2r,BX,Q2r,H2r,U2r,D4,Bbe,J2r,Y2r,xX,K2r,Z2r,evr,N4,xbe,ovr,rvr,kX,tvr,avr,svr,q4,kbe,nvr,lvr,RX,ivr,dvr,cvr,O4,Rbe,mvr,fvr,SX,gvr,hvr,uvr,G4,Sbe,pvr,_vr,PX,bvr,vvr,Tvr,Pbe,Fvr,Cvr,oL,Uke,Wc,X4,$be,rL,Mvr,Ibe,Evr,Jke,xr,tL,yvr,Qc,wvr,jbe,Avr,Lvr,Dbe,Bvr,xvr,kvr,aL,Rvr,Nbe,Svr,Pvr,$vr,Et,sL,Ivr,qbe,jvr,Dvr,Hc,Nvr,Obe,qvr,Ovr,Gbe,Gvr,Xvr,Vvr,Xbe,zvr,Wvr,nL,Qvr,yo,lL,Hvr,Vbe,Uvr,Jvr,ws,Yvr,zbe,Kvr,Zvr,Wbe,eTr,oTr,Qbe,rTr,tTr,aTr,Hbe,V4,Ube,sTr,nTr,$X,lTr,iTr,dTr,Jbe,cTr,mTr,iL,Yke,Uc,z4,Ybe,dL,fTr,Kbe,gTr,Kke,kr,cL,hTr,Jc,uTr,Zbe,pTr,_Tr,e2e,bTr,vTr,TTr,mL,FTr,o2e,CTr,MTr,ETr,yt,fL,yTr,r2e,wTr,ATr,Yc,LTr,t2e,BTr,xTr,a2e,kTr,RTr,STr,s2e,PTr,$Tr,gL,ITr,wo,hL,jTr,n2e,DTr,NTr,As,qTr,l2e,OTr,GTr,i2e,XTr,VTr,d2e,zTr,WTr,QTr,c2e,W4,m2e,HTr,UTr,IX,JTr,YTr,KTr,f2e,ZTr,e1r,uL,Zke,Kc,Q4,g2e,pL,o1r,h2e,r1r,eRe,Rr,_L,t1r,Zc,a1r,u2e,s1r,n1r,p2e,l1r,i1r,d1r,bL,c1r,_2e,m1r,f1r,g1r,wt,vL,h1r,b2e,u1r,p1r,em,_1r,v2e,b1r,v1r,T2e,T1r,F1r,C1r,F2e,M1r,E1r,TL,y1r,Ao,FL,w1r,C2e,A1r,L1r,Ls,B1r,M2e,x1r,k1r,E2e,R1r,S1r,y2e,P1r,$1r,I1r,z,H4,w2e,j1r,D1r,jX,N1r,q1r,O1r,U4,A2e,G1r,X1r,DX,V1r,z1r,W1r,J4,L2e,Q1r,H1r,NX,U1r,J1r,Y1r,Y4,B2e,K1r,Z1r,qX,eFr,oFr,rFr,K4,x2e,tFr,aFr,OX,sFr,nFr,lFr,Z4,k2e,iFr,dFr,GX,cFr,mFr,fFr,eE,R2e,gFr,hFr,XX,uFr,pFr,_Fr,oE,S2e,bFr,vFr,VX,TFr,FFr,CFr,rE,P2e,MFr,EFr,zX,yFr,wFr,AFr,tE,$2e,LFr,BFr,WX,xFr,kFr,RFr,aE,I2e,SFr,PFr,QX,$Fr,IFr,jFr,sE,j2e,DFr,NFr,HX,qFr,OFr,GFr,nE,D2e,XFr,VFr,UX,zFr,WFr,QFr,lE,N2e,HFr,UFr,JX,JFr,YFr,KFr,iE,q2e,ZFr,eCr,YX,oCr,rCr,tCr,dE,O2e,aCr,sCr,KX,nCr,lCr,iCr,cE,G2e,dCr,cCr,ZX,mCr,fCr,gCr,mE,X2e,hCr,uCr,eV,pCr,_Cr,bCr,fE,V2e,vCr,TCr,oV,FCr,CCr,MCr,gE,z2e,ECr,yCr,rV,wCr,ACr,LCr,hE,W2e,BCr,xCr,tV,kCr,RCr,SCr,uE,Q2e,PCr,$Cr,aV,ICr,jCr,DCr,pE,H2e,NCr,qCr,sV,OCr,GCr,XCr,_E,U2e,VCr,zCr,nV,WCr,QCr,HCr,bE,J2e,UCr,JCr,lV,YCr,KCr,ZCr,Y2e,eMr,oMr,CL,oRe,om,vE,K2e,ML,rMr,Z2e,tMr,rRe,Sr,EL,aMr,rm,sMr,eve,nMr,lMr,ove,iMr,dMr,cMr,yL,mMr,rve,fMr,gMr,hMr,At,wL,uMr,tve,pMr,_Mr,tm,bMr,ave,vMr,TMr,sve,FMr,CMr,MMr,nve,EMr,yMr,AL,wMr,Lo,LL,AMr,lve,LMr,BMr,Bs,xMr,ive,kMr,RMr,dve,SMr,PMr,cve,$Mr,IMr,jMr,ca,TE,mve,DMr,NMr,iV,qMr,OMr,GMr,FE,fve,XMr,VMr,dV,zMr,WMr,QMr,CE,gve,HMr,UMr,cV,JMr,YMr,KMr,ME,hve,ZMr,e4r,mV,o4r,r4r,t4r,EE,uve,a4r,s4r,fV,n4r,l4r,i4r,pve,d4r,c4r,BL,tRe,am,yE,_ve,xL,m4r,bve,f4r,aRe,Pr,kL,g4r,sm,h4r,vve,u4r,p4r,Tve,_4r,b4r,v4r,RL,T4r,Fve,F4r,C4r,M4r,Lt,SL,E4r,Cve,y4r,w4r,nm,A4r,Mve,L4r,B4r,Eve,x4r,k4r,R4r,yve,S4r,P4r,PL,$4r,Bo,$L,I4r,wve,j4r,D4r,xs,N4r,Ave,q4r,O4r,Lve,G4r,X4r,Bve,V4r,z4r,W4r,ce,wE,xve,Q4r,H4r,gV,U4r,J4r,Y4r,AE,kve,K4r,Z4r,hV,eEr,oEr,rEr,LE,Rve,tEr,aEr,uV,sEr,nEr,lEr,BE,Sve,iEr,dEr,pV,cEr,mEr,fEr,xE,Pve,gEr,hEr,_V,uEr,pEr,_Er,kE,$ve,bEr,vEr,bV,TEr,FEr,CEr,RE,Ive,MEr,EEr,vV,yEr,wEr,AEr,SE,jve,LEr,BEr,TV,xEr,kEr,REr,PE,Dve,SEr,PEr,FV,$Er,IEr,jEr,$E,Nve,DEr,NEr,CV,qEr,OEr,GEr,IE,qve,XEr,VEr,MV,zEr,WEr,QEr,jE,Ove,HEr,UEr,EV,JEr,YEr,KEr,Gve,ZEr,e3r,IL,sRe,lm,DE,Xve,jL,o3r,Vve,r3r,nRe,$r,DL,t3r,im,a3r,zve,s3r,n3r,Wve,l3r,i3r,d3r,NL,c3r,Qve,m3r,f3r,g3r,Bt,qL,h3r,Hve,u3r,p3r,dm,_3r,Uve,b3r,v3r,Jve,T3r,F3r,C3r,Yve,M3r,E3r,OL,y3r,xo,GL,w3r,Kve,A3r,L3r,ks,B3r,Zve,x3r,k3r,eTe,R3r,S3r,oTe,P3r,$3r,I3r,be,NE,rTe,j3r,D3r,yV,N3r,q3r,O3r,qE,tTe,G3r,X3r,wV,V3r,z3r,W3r,OE,aTe,Q3r,H3r,AV,U3r,J3r,Y3r,GE,sTe,K3r,Z3r,LV,e5r,o5r,r5r,XE,nTe,t5r,a5r,BV,s5r,n5r,l5r,VE,lTe,i5r,d5r,xV,c5r,m5r,f5r,zE,iTe,g5r,h5r,kV,u5r,p5r,_5r,WE,dTe,b5r,v5r,RV,T5r,F5r,C5r,QE,cTe,M5r,E5r,SV,y5r,w5r,A5r,HE,mTe,L5r,B5r,PV,x5r,k5r,R5r,fTe,S5r,P5r,XL,lRe,cm,UE,gTe,VL,$5r,hTe,I5r,iRe,Ir,zL,j5r,mm,D5r,uTe,N5r,q5r,pTe,O5r,G5r,X5r,WL,V5r,_Te,z5r,W5r,Q5r,xt,QL,H5r,bTe,U5r,J5r,fm,Y5r,vTe,K5r,Z5r,TTe,eyr,oyr,ryr,FTe,tyr,ayr,HL,syr,ko,UL,nyr,CTe,lyr,iyr,Rs,dyr,MTe,cyr,myr,ETe,fyr,gyr,yTe,hyr,uyr,pyr,Me,JE,wTe,_yr,byr,$V,vyr,Tyr,Fyr,YE,ATe,Cyr,Myr,IV,Eyr,yyr,wyr,KE,LTe,Ayr,Lyr,jV,Byr,xyr,kyr,ZE,BTe,Ryr,Syr,DV,Pyr,$yr,Iyr,e3,xTe,jyr,Dyr,NV,Nyr,qyr,Oyr,o3,kTe,Gyr,Xyr,qV,Vyr,zyr,Wyr,r3,RTe,Qyr,Hyr,OV,Uyr,Jyr,Yyr,t3,STe,Kyr,Zyr,GV,ewr,owr,rwr,a3,PTe,twr,awr,XV,swr,nwr,lwr,$Te,iwr,dwr,JL,dRe,gm,s3,ITe,YL,cwr,jTe,mwr,cRe,jr,KL,fwr,hm,gwr,DTe,hwr,uwr,NTe,pwr,_wr,bwr,ZL,vwr,qTe,Twr,Fwr,Cwr,kt,e7,Mwr,OTe,Ewr,ywr,um,wwr,GTe,Awr,Lwr,XTe,Bwr,xwr,kwr,VTe,Rwr,Swr,o7,Pwr,Ro,r7,$wr,zTe,Iwr,jwr,Ss,Dwr,WTe,Nwr,qwr,QTe,Owr,Gwr,HTe,Xwr,Vwr,zwr,ve,n3,UTe,Wwr,Qwr,VV,Hwr,Uwr,Jwr,l3,JTe,Ywr,Kwr,zV,Zwr,e6r,o6r,i3,YTe,r6r,t6r,WV,a6r,s6r,n6r,d3,KTe,l6r,i6r,QV,d6r,c6r,m6r,c3,ZTe,f6r,g6r,HV,h6r,u6r,p6r,m3,e1e,_6r,b6r,UV,v6r,T6r,F6r,f3,o1e,C6r,M6r,JV,E6r,y6r,w6r,g3,r1e,A6r,L6r,YV,B6r,x6r,k6r,h3,t1e,R6r,S6r,KV,P6r,$6r,I6r,u3,a1e,j6r,D6r,ZV,N6r,q6r,O6r,s1e,G6r,X6r,t7,mRe,pm,p3,n1e,a7,V6r,l1e,z6r,fRe,Dr,s7,W6r,_m,Q6r,i1e,H6r,U6r,d1e,J6r,Y6r,K6r,n7,Z6r,c1e,eAr,oAr,rAr,Rt,l7,tAr,m1e,aAr,sAr,bm,nAr,f1e,lAr,iAr,g1e,dAr,cAr,mAr,h1e,fAr,gAr,i7,hAr,So,d7,uAr,u1e,pAr,_Ar,Ps,bAr,p1e,vAr,TAr,_1e,FAr,CAr,b1e,MAr,EAr,yAr,Te,_3,v1e,wAr,AAr,ez,LAr,BAr,xAr,b3,T1e,kAr,RAr,oz,SAr,PAr,$Ar,v3,F1e,IAr,jAr,rz,DAr,NAr,qAr,T3,C1e,OAr,GAr,tz,XAr,VAr,zAr,F3,M1e,WAr,QAr,az,HAr,UAr,JAr,C3,E1e,YAr,KAr,sz,ZAr,e0r,o0r,M3,y1e,r0r,t0r,nz,a0r,s0r,n0r,E3,w1e,l0r,i0r,lz,d0r,c0r,m0r,y3,A1e,f0r,g0r,iz,h0r,u0r,p0r,w3,L1e,_0r,b0r,dz,v0r,T0r,F0r,B1e,C0r,M0r,c7,gRe,vm,A3,x1e,m7,E0r,k1e,y0r,hRe,Nr,f7,w0r,Tm,A0r,R1e,L0r,B0r,S1e,x0r,k0r,R0r,g7,S0r,P1e,P0r,$0r,I0r,St,h7,j0r,$1e,D0r,N0r,Fm,q0r,I1e,O0r,G0r,j1e,X0r,V0r,z0r,D1e,W0r,Q0r,u7,H0r,Po,p7,U0r,N1e,J0r,Y0r,$s,K0r,q1e,Z0r,eLr,O1e,oLr,rLr,G1e,tLr,aLr,sLr,Se,L3,X1e,nLr,lLr,cz,iLr,dLr,cLr,B3,V1e,mLr,fLr,mz,gLr,hLr,uLr,x3,z1e,pLr,_Lr,fz,bLr,vLr,TLr,k3,W1e,FLr,CLr,gz,MLr,ELr,yLr,R3,Q1e,wLr,ALr,hz,LLr,BLr,xLr,S3,H1e,kLr,RLr,uz,SLr,PLr,$Lr,P3,U1e,ILr,jLr,pz,DLr,NLr,qLr,$3,J1e,OLr,GLr,_z,XLr,VLr,zLr,Y1e,WLr,QLr,_7,uRe,Cm,I3,K1e,b7,HLr,Z1e,ULr,pRe,qr,v7,JLr,Mm,YLr,eFe,KLr,ZLr,oFe,e7r,o7r,r7r,T7,t7r,rFe,a7r,s7r,n7r,Pt,F7,l7r,tFe,i7r,d7r,Em,c7r,aFe,m7r,f7r,sFe,g7r,h7r,u7r,nFe,p7r,_7r,C7,b7r,$o,M7,v7r,lFe,T7r,F7r,Is,C7r,iFe,M7r,E7r,dFe,y7r,w7r,cFe,A7r,L7r,B7r,Pe,j3,mFe,x7r,k7r,bz,R7r,S7r,P7r,D3,fFe,$7r,I7r,vz,j7r,D7r,N7r,N3,gFe,q7r,O7r,Tz,G7r,X7r,V7r,q3,hFe,z7r,W7r,Fz,Q7r,H7r,U7r,O3,uFe,J7r,Y7r,Cz,K7r,Z7r,e8r,G3,pFe,o8r,r8r,Mz,t8r,a8r,s8r,X3,_Fe,n8r,l8r,Ez,i8r,d8r,c8r,V3,bFe,m8r,f8r,yz,g8r,h8r,u8r,vFe,p8r,_8r,E7,_Re,ym,z3,TFe,y7,b8r,FFe,v8r,bRe,Or,w7,T8r,wm,F8r,CFe,C8r,M8r,MFe,E8r,y8r,w8r,A7,A8r,EFe,L8r,B8r,x8r,$t,L7,k8r,yFe,R8r,S8r,Am,P8r,wFe,$8r,I8r,AFe,j8r,D8r,N8r,LFe,q8r,O8r,B7,G8r,Io,x7,X8r,BFe,V8r,z8r,js,W8r,xFe,Q8r,H8r,kFe,U8r,J8r,RFe,Y8r,K8r,Z8r,SFe,W3,PFe,e9r,o9r,wz,r9r,t9r,a9r,$Fe,s9r,n9r,k7,vRe,Lm,Q3,IFe,R7,l9r,jFe,i9r,TRe,Gr,S7,d9r,Bm,c9r,DFe,m9r,f9r,NFe,g9r,h9r,u9r,P7,p9r,qFe,_9r,b9r,v9r,It,$7,T9r,OFe,F9r,C9r,xm,M9r,GFe,E9r,y9r,XFe,w9r,A9r,L9r,VFe,B9r,x9r,I7,k9r,jo,j7,R9r,zFe,S9r,P9r,Ds,$9r,WFe,I9r,j9r,QFe,D9r,N9r,HFe,q9r,O9r,G9r,D7,H3,UFe,X9r,V9r,Az,z9r,W9r,Q9r,U3,JFe,H9r,U9r,Lz,J9r,Y9r,K9r,YFe,Z9r,eBr,N7,FRe,km,J3,KFe,q7,oBr,ZFe,rBr,CRe,Xr,O7,tBr,Rm,aBr,eCe,sBr,nBr,oCe,lBr,iBr,dBr,G7,cBr,rCe,mBr,fBr,gBr,jt,X7,hBr,tCe,uBr,pBr,Sm,_Br,aCe,bBr,vBr,sCe,TBr,FBr,CBr,nCe,MBr,EBr,V7,yBr,Do,z7,wBr,lCe,ABr,LBr,Ns,BBr,iCe,xBr,kBr,dCe,RBr,SBr,cCe,PBr,$Br,IBr,mCe,Y3,fCe,jBr,DBr,Bz,NBr,qBr,OBr,gCe,GBr,XBr,W7,MRe;return me=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),oy=new X({}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new VBr({props:{warning:"&lcub;true}",$$slots:{default:[BMt]},$$scope:{ctx:Ii}}}),ty=new X({}),ay=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L530"}}),ly=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L553",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),iy=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),dy=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L675",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),cy=new X({}),my=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L352"}}),hy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),py=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),_y=new X({}),by=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),Fy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),wh=new VBr({props:{$$slots:{default:[xMt]},$$scope:{ctx:Ii}}}),Cy=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),My=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Ey=new X({}),yy=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L71"}}),Ly=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),jh=new VBr({props:{$$slots:{default:[kMt]},$$scope:{ctx:Ii}}}),By=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),xy=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),ky=new X({}),Ry=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L699"}}),Py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),Ny=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L706"}}),Oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Wy=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L721"}}),Hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L728"}}),ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),nw=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L735"}}),iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),gw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L744"}}),uw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),_w=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new X({}),Tw=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L778"}}),Cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L785"}}),Bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Pw=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L771"}}),Iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Ow=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L753"}}),Xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Hw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L760"}}),Jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e6=new X({}),o6=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L794"}}),t6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),a6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),s6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l6=new X({}),i6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L833"}}),c6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),f6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h6=new X({}),u6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L840"}}),_6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),v6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F6=new X({}),C6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L863"}}),E6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),w6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L6=new X({}),B6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L847"}}),k6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),S6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$6=new X({}),I6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L854"}}),D6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),q6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new X({}),V6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L872"}}),W6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),H6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new X({}),Y6=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L879"}}),Z6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),oA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L826"}}),nA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),iA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),mA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L801"}}),gA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),uA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),bA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L808"}}),TA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),CA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),wA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L817"}}),LA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),xA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),SA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),$A=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),jA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),qA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),GA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),VA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),QA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),UA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),YA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),r0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),a0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),c0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),f0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new X({}),u0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),_0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),b0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),v0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),C0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),E0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),w0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),B0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),k0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),R0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),S0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new X({}),I0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),D0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),q0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),X0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),z0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),W0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Q0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),K0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),eL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new X({}),tL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),sL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),lL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new X({}),cL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),fL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),hL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),vL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),FL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ML=new X({}),EL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),wL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),LL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xL=new X({}),kL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),SL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),$L=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jL=new X({}),DL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),qL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),GL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VL=new X({}),zL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),QL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),UL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new X({}),KL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),e7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),r7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a7=new X({}),s7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),l7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),i7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),d7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m7=new X({}),f7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),h7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),u7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),p7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b7=new X({}),v7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),F7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),C7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),M7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y7=new X({}),w7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),L7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),B7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),x7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R7=new X({}),S7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),$7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),I7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),j7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q7=new X({}),O7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),X7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),V7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),z7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),he=a("a"),io=a("span"),m(me.$$.fragment),Ce=l(),Vo=a("span"),ji=o("Auto Classes"),$m=l(),ma=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),Y5=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),qs=a("a"),K5=o("AutoConfig"),Os=o(", "),Gs=a("a"),Z5=o("AutoModel"),Oi=o(`, and
`),Xs=a("a"),ey=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jm=l(),m(qa.$$.fragment),mo=l(),ue=a("p"),V8=o("will create a model that is an instance of "),Xi=a("a"),z8=o("BertModel"),W8=o("."),zo=l(),Oa=a("p"),Q8=o("There is one class of "),Dm=a("code"),H8=o("AutoModel"),IPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Cxe=l(),Vi=a("h2"),Nm=a("a"),CQ=a("span"),m(oy.$$.fragment),jPe=l(),MQ=a("span"),DPe=o("Extending the Auto Classes"),Mxe=l(),Vs=a("p"),NPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),EQ=a("code"),qPe=o("NewModel"),OPe=o(", make sure you have a "),yQ=a("code"),GPe=o("NewModelConfig"),XPe=o(` then you can add those to the auto
classes like this:`),Exe=l(),m(ry.$$.fragment),yxe=l(),U8=a("p"),VPe=o("You will then be able to use the auto classes like you would usually do!"),wxe=l(),m(qm.$$.fragment),Axe=l(),zi=a("h2"),Om=a("a"),wQ=a("span"),m(ty.$$.fragment),zPe=l(),AQ=a("span"),WPe=o("AutoConfig"),Lxe=l(),Wo=a("div"),m(ay.$$.fragment),QPe=l(),sy=a("p"),HPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J8=a("a"),UPe=o("from_pretrained()"),JPe=o(" class method."),YPe=l(),ny=a("p"),KPe=o("This class cannot be instantiated directly using "),LQ=a("code"),ZPe=o("__init__()"),e$e=o(" (throws an error)."),o$e=l(),fo=a("div"),m(ly.$$.fragment),r$e=l(),BQ=a("p"),t$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),a$e=l(),Wi=a("p"),s$e=o("The configuration class to instantiate is selected based on the "),xQ=a("code"),n$e=o("model_type"),l$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kQ=a("code"),i$e=o("pretrained_model_name_or_path"),d$e=o(":"),c$e=l(),v=a("ul"),Gm=a("li"),RQ=a("strong"),m$e=o("albert"),f$e=o(" \u2014 "),Y8=a("a"),g$e=o("AlbertConfig"),h$e=o(" (ALBERT model)"),u$e=l(),Xm=a("li"),SQ=a("strong"),p$e=o("bart"),_$e=o(" \u2014 "),K8=a("a"),b$e=o("BartConfig"),v$e=o(" (BART model)"),T$e=l(),Vm=a("li"),PQ=a("strong"),F$e=o("beit"),C$e=o(" \u2014 "),Z8=a("a"),M$e=o("BeitConfig"),E$e=o(" (BEiT model)"),y$e=l(),zm=a("li"),$Q=a("strong"),w$e=o("bert"),A$e=o(" \u2014 "),e9=a("a"),L$e=o("BertConfig"),B$e=o(" (BERT model)"),x$e=l(),Wm=a("li"),IQ=a("strong"),k$e=o("bert-generation"),R$e=o(" \u2014 "),o9=a("a"),S$e=o("BertGenerationConfig"),P$e=o(" (Bert Generation model)"),$$e=l(),Qm=a("li"),jQ=a("strong"),I$e=o("big_bird"),j$e=o(" \u2014 "),r9=a("a"),D$e=o("BigBirdConfig"),N$e=o(" (BigBird model)"),q$e=l(),Hm=a("li"),DQ=a("strong"),O$e=o("bigbird_pegasus"),G$e=o(" \u2014 "),t9=a("a"),X$e=o("BigBirdPegasusConfig"),V$e=o(" (BigBirdPegasus model)"),z$e=l(),Um=a("li"),NQ=a("strong"),W$e=o("blenderbot"),Q$e=o(" \u2014 "),a9=a("a"),H$e=o("BlenderbotConfig"),U$e=o(" (Blenderbot model)"),J$e=l(),Jm=a("li"),qQ=a("strong"),Y$e=o("blenderbot-small"),K$e=o(" \u2014 "),s9=a("a"),Z$e=o("BlenderbotSmallConfig"),eIe=o(" (BlenderbotSmall model)"),oIe=l(),Ym=a("li"),OQ=a("strong"),rIe=o("camembert"),tIe=o(" \u2014 "),n9=a("a"),aIe=o("CamembertConfig"),sIe=o(" (CamemBERT model)"),nIe=l(),Km=a("li"),GQ=a("strong"),lIe=o("canine"),iIe=o(" \u2014 "),l9=a("a"),dIe=o("CanineConfig"),cIe=o(" (Canine model)"),mIe=l(),Zm=a("li"),XQ=a("strong"),fIe=o("clip"),gIe=o(" \u2014 "),i9=a("a"),hIe=o("CLIPConfig"),uIe=o(" (CLIP model)"),pIe=l(),ef=a("li"),VQ=a("strong"),_Ie=o("convbert"),bIe=o(" \u2014 "),d9=a("a"),vIe=o("ConvBertConfig"),TIe=o(" (ConvBERT model)"),FIe=l(),of=a("li"),zQ=a("strong"),CIe=o("convnext"),MIe=o(" \u2014 "),c9=a("a"),EIe=o("ConvNextConfig"),yIe=o(" (ConvNext model)"),wIe=l(),rf=a("li"),WQ=a("strong"),AIe=o("ctrl"),LIe=o(" \u2014 "),m9=a("a"),BIe=o("CTRLConfig"),xIe=o(" (CTRL model)"),kIe=l(),tf=a("li"),QQ=a("strong"),RIe=o("data2vec-audio"),SIe=o(" \u2014 "),f9=a("a"),PIe=o("Data2VecAudioConfig"),$Ie=o(" (Data2VecAudio model)"),IIe=l(),af=a("li"),HQ=a("strong"),jIe=o("data2vec-text"),DIe=o(" \u2014 "),g9=a("a"),NIe=o("Data2VecTextConfig"),qIe=o(" (Data2VecText model)"),OIe=l(),sf=a("li"),UQ=a("strong"),GIe=o("deberta"),XIe=o(" \u2014 "),h9=a("a"),VIe=o("DebertaConfig"),zIe=o(" (DeBERTa model)"),WIe=l(),nf=a("li"),JQ=a("strong"),QIe=o("deberta-v2"),HIe=o(" \u2014 "),u9=a("a"),UIe=o("DebertaV2Config"),JIe=o(" (DeBERTa-v2 model)"),YIe=l(),lf=a("li"),YQ=a("strong"),KIe=o("deit"),ZIe=o(" \u2014 "),p9=a("a"),eje=o("DeiTConfig"),oje=o(" (DeiT model)"),rje=l(),df=a("li"),KQ=a("strong"),tje=o("detr"),aje=o(" \u2014 "),_9=a("a"),sje=o("DetrConfig"),nje=o(" (DETR model)"),lje=l(),cf=a("li"),ZQ=a("strong"),ije=o("distilbert"),dje=o(" \u2014 "),b9=a("a"),cje=o("DistilBertConfig"),mje=o(" (DistilBERT model)"),fje=l(),mf=a("li"),eH=a("strong"),gje=o("dpr"),hje=o(" \u2014 "),v9=a("a"),uje=o("DPRConfig"),pje=o(" (DPR model)"),_je=l(),ff=a("li"),oH=a("strong"),bje=o("electra"),vje=o(" \u2014 "),T9=a("a"),Tje=o("ElectraConfig"),Fje=o(" (ELECTRA model)"),Cje=l(),gf=a("li"),rH=a("strong"),Mje=o("encoder-decoder"),Eje=o(" \u2014 "),F9=a("a"),yje=o("EncoderDecoderConfig"),wje=o(" (Encoder decoder model)"),Aje=l(),hf=a("li"),tH=a("strong"),Lje=o("flaubert"),Bje=o(" \u2014 "),C9=a("a"),xje=o("FlaubertConfig"),kje=o(" (FlauBERT model)"),Rje=l(),uf=a("li"),aH=a("strong"),Sje=o("fnet"),Pje=o(" \u2014 "),M9=a("a"),$je=o("FNetConfig"),Ije=o(" (FNet model)"),jje=l(),pf=a("li"),sH=a("strong"),Dje=o("fsmt"),Nje=o(" \u2014 "),E9=a("a"),qje=o("FSMTConfig"),Oje=o(" (FairSeq Machine-Translation model)"),Gje=l(),_f=a("li"),nH=a("strong"),Xje=o("funnel"),Vje=o(" \u2014 "),y9=a("a"),zje=o("FunnelConfig"),Wje=o(" (Funnel Transformer model)"),Qje=l(),bf=a("li"),lH=a("strong"),Hje=o("gpt2"),Uje=o(" \u2014 "),w9=a("a"),Jje=o("GPT2Config"),Yje=o(" (OpenAI GPT-2 model)"),Kje=l(),vf=a("li"),iH=a("strong"),Zje=o("gpt_neo"),eDe=o(" \u2014 "),A9=a("a"),oDe=o("GPTNeoConfig"),rDe=o(" (GPT Neo model)"),tDe=l(),Tf=a("li"),dH=a("strong"),aDe=o("gptj"),sDe=o(" \u2014 "),L9=a("a"),nDe=o("GPTJConfig"),lDe=o(" (GPT-J model)"),iDe=l(),Ff=a("li"),cH=a("strong"),dDe=o("hubert"),cDe=o(" \u2014 "),B9=a("a"),mDe=o("HubertConfig"),fDe=o(" (Hubert model)"),gDe=l(),Cf=a("li"),mH=a("strong"),hDe=o("ibert"),uDe=o(" \u2014 "),x9=a("a"),pDe=o("IBertConfig"),_De=o(" (I-BERT model)"),bDe=l(),Mf=a("li"),fH=a("strong"),vDe=o("imagegpt"),TDe=o(" \u2014 "),k9=a("a"),FDe=o("ImageGPTConfig"),CDe=o(" (ImageGPT model)"),MDe=l(),Ef=a("li"),gH=a("strong"),EDe=o("layoutlm"),yDe=o(" \u2014 "),R9=a("a"),wDe=o("LayoutLMConfig"),ADe=o(" (LayoutLM model)"),LDe=l(),yf=a("li"),hH=a("strong"),BDe=o("layoutlmv2"),xDe=o(" \u2014 "),S9=a("a"),kDe=o("LayoutLMv2Config"),RDe=o(" (LayoutLMv2 model)"),SDe=l(),wf=a("li"),uH=a("strong"),PDe=o("led"),$De=o(" \u2014 "),P9=a("a"),IDe=o("LEDConfig"),jDe=o(" (LED model)"),DDe=l(),Af=a("li"),pH=a("strong"),NDe=o("longformer"),qDe=o(" \u2014 "),$9=a("a"),ODe=o("LongformerConfig"),GDe=o(" (Longformer model)"),XDe=l(),Lf=a("li"),_H=a("strong"),VDe=o("luke"),zDe=o(" \u2014 "),I9=a("a"),WDe=o("LukeConfig"),QDe=o(" (LUKE model)"),HDe=l(),Bf=a("li"),bH=a("strong"),UDe=o("lxmert"),JDe=o(" \u2014 "),j9=a("a"),YDe=o("LxmertConfig"),KDe=o(" (LXMERT model)"),ZDe=l(),xf=a("li"),vH=a("strong"),eNe=o("m2m_100"),oNe=o(" \u2014 "),D9=a("a"),rNe=o("M2M100Config"),tNe=o(" (M2M100 model)"),aNe=l(),kf=a("li"),TH=a("strong"),sNe=o("marian"),nNe=o(" \u2014 "),N9=a("a"),lNe=o("MarianConfig"),iNe=o(" (Marian model)"),dNe=l(),Rf=a("li"),FH=a("strong"),cNe=o("maskformer"),mNe=o(" \u2014 "),q9=a("a"),fNe=o("MaskFormerConfig"),gNe=o(" (MaskFormer model)"),hNe=l(),Sf=a("li"),CH=a("strong"),uNe=o("mbart"),pNe=o(" \u2014 "),O9=a("a"),_Ne=o("MBartConfig"),bNe=o(" (mBART model)"),vNe=l(),Pf=a("li"),MH=a("strong"),TNe=o("megatron-bert"),FNe=o(" \u2014 "),G9=a("a"),CNe=o("MegatronBertConfig"),MNe=o(" (MegatronBert model)"),ENe=l(),$f=a("li"),EH=a("strong"),yNe=o("mobilebert"),wNe=o(" \u2014 "),X9=a("a"),ANe=o("MobileBertConfig"),LNe=o(" (MobileBERT model)"),BNe=l(),If=a("li"),yH=a("strong"),xNe=o("mpnet"),kNe=o(" \u2014 "),V9=a("a"),RNe=o("MPNetConfig"),SNe=o(" (MPNet model)"),PNe=l(),jf=a("li"),wH=a("strong"),$Ne=o("mt5"),INe=o(" \u2014 "),z9=a("a"),jNe=o("MT5Config"),DNe=o(" (mT5 model)"),NNe=l(),Df=a("li"),AH=a("strong"),qNe=o("nystromformer"),ONe=o(" \u2014 "),W9=a("a"),GNe=o("NystromformerConfig"),XNe=o(" (Nystromformer model)"),VNe=l(),Nf=a("li"),LH=a("strong"),zNe=o("openai-gpt"),WNe=o(" \u2014 "),Q9=a("a"),QNe=o("OpenAIGPTConfig"),HNe=o(" (OpenAI GPT model)"),UNe=l(),qf=a("li"),BH=a("strong"),JNe=o("pegasus"),YNe=o(" \u2014 "),H9=a("a"),KNe=o("PegasusConfig"),ZNe=o(" (Pegasus model)"),eqe=l(),Of=a("li"),xH=a("strong"),oqe=o("perceiver"),rqe=o(" \u2014 "),U9=a("a"),tqe=o("PerceiverConfig"),aqe=o(" (Perceiver model)"),sqe=l(),Gf=a("li"),kH=a("strong"),nqe=o("plbart"),lqe=o(" \u2014 "),J9=a("a"),iqe=o("PLBartConfig"),dqe=o(" (PLBart model)"),cqe=l(),Xf=a("li"),RH=a("strong"),mqe=o("poolformer"),fqe=o(" \u2014 "),Y9=a("a"),gqe=o("PoolFormerConfig"),hqe=o(" (PoolFormer model)"),uqe=l(),Vf=a("li"),SH=a("strong"),pqe=o("prophetnet"),_qe=o(" \u2014 "),K9=a("a"),bqe=o("ProphetNetConfig"),vqe=o(" (ProphetNet model)"),Tqe=l(),zf=a("li"),PH=a("strong"),Fqe=o("qdqbert"),Cqe=o(" \u2014 "),Z9=a("a"),Mqe=o("QDQBertConfig"),Eqe=o(" (QDQBert model)"),yqe=l(),Wf=a("li"),$H=a("strong"),wqe=o("rag"),Aqe=o(" \u2014 "),eB=a("a"),Lqe=o("RagConfig"),Bqe=o(" (RAG model)"),xqe=l(),Qf=a("li"),IH=a("strong"),kqe=o("realm"),Rqe=o(" \u2014 "),oB=a("a"),Sqe=o("RealmConfig"),Pqe=o(" (Realm model)"),$qe=l(),Hf=a("li"),jH=a("strong"),Iqe=o("reformer"),jqe=o(" \u2014 "),rB=a("a"),Dqe=o("ReformerConfig"),Nqe=o(" (Reformer model)"),qqe=l(),Uf=a("li"),DH=a("strong"),Oqe=o("rembert"),Gqe=o(" \u2014 "),tB=a("a"),Xqe=o("RemBertConfig"),Vqe=o(" (RemBERT model)"),zqe=l(),Jf=a("li"),NH=a("strong"),Wqe=o("resnet"),Qqe=o(" \u2014 "),aB=a("a"),Hqe=o("ResNetConfig"),Uqe=o(" (ResNet model)"),Jqe=l(),Yf=a("li"),qH=a("strong"),Yqe=o("retribert"),Kqe=o(" \u2014 "),sB=a("a"),Zqe=o("RetriBertConfig"),eOe=o(" (RetriBERT model)"),oOe=l(),Kf=a("li"),OH=a("strong"),rOe=o("roberta"),tOe=o(" \u2014 "),nB=a("a"),aOe=o("RobertaConfig"),sOe=o(" (RoBERTa model)"),nOe=l(),Zf=a("li"),GH=a("strong"),lOe=o("roformer"),iOe=o(" \u2014 "),lB=a("a"),dOe=o("RoFormerConfig"),cOe=o(" (RoFormer model)"),mOe=l(),eg=a("li"),XH=a("strong"),fOe=o("segformer"),gOe=o(" \u2014 "),iB=a("a"),hOe=o("SegformerConfig"),uOe=o(" (SegFormer model)"),pOe=l(),og=a("li"),VH=a("strong"),_Oe=o("sew"),bOe=o(" \u2014 "),dB=a("a"),vOe=o("SEWConfig"),TOe=o(" (SEW model)"),FOe=l(),rg=a("li"),zH=a("strong"),COe=o("sew-d"),MOe=o(" \u2014 "),cB=a("a"),EOe=o("SEWDConfig"),yOe=o(" (SEW-D model)"),wOe=l(),tg=a("li"),WH=a("strong"),AOe=o("speech-encoder-decoder"),LOe=o(" \u2014 "),mB=a("a"),BOe=o("SpeechEncoderDecoderConfig"),xOe=o(" (Speech Encoder decoder model)"),kOe=l(),ag=a("li"),QH=a("strong"),ROe=o("speech_to_text"),SOe=o(" \u2014 "),fB=a("a"),POe=o("Speech2TextConfig"),$Oe=o(" (Speech2Text model)"),IOe=l(),sg=a("li"),HH=a("strong"),jOe=o("speech_to_text_2"),DOe=o(" \u2014 "),gB=a("a"),NOe=o("Speech2Text2Config"),qOe=o(" (Speech2Text2 model)"),OOe=l(),ng=a("li"),UH=a("strong"),GOe=o("splinter"),XOe=o(" \u2014 "),hB=a("a"),VOe=o("SplinterConfig"),zOe=o(" (Splinter model)"),WOe=l(),lg=a("li"),JH=a("strong"),QOe=o("squeezebert"),HOe=o(" \u2014 "),uB=a("a"),UOe=o("SqueezeBertConfig"),JOe=o(" (SqueezeBERT model)"),YOe=l(),ig=a("li"),YH=a("strong"),KOe=o("swin"),ZOe=o(" \u2014 "),pB=a("a"),eGe=o("SwinConfig"),oGe=o(" (Swin model)"),rGe=l(),dg=a("li"),KH=a("strong"),tGe=o("t5"),aGe=o(" \u2014 "),_B=a("a"),sGe=o("T5Config"),nGe=o(" (T5 model)"),lGe=l(),cg=a("li"),ZH=a("strong"),iGe=o("tapas"),dGe=o(" \u2014 "),bB=a("a"),cGe=o("TapasConfig"),mGe=o(" (TAPAS model)"),fGe=l(),mg=a("li"),eU=a("strong"),gGe=o("transfo-xl"),hGe=o(" \u2014 "),vB=a("a"),uGe=o("TransfoXLConfig"),pGe=o(" (Transformer-XL model)"),_Ge=l(),fg=a("li"),oU=a("strong"),bGe=o("trocr"),vGe=o(" \u2014 "),TB=a("a"),TGe=o("TrOCRConfig"),FGe=o(" (TrOCR model)"),CGe=l(),gg=a("li"),rU=a("strong"),MGe=o("unispeech"),EGe=o(" \u2014 "),FB=a("a"),yGe=o("UniSpeechConfig"),wGe=o(" (UniSpeech model)"),AGe=l(),hg=a("li"),tU=a("strong"),LGe=o("unispeech-sat"),BGe=o(" \u2014 "),CB=a("a"),xGe=o("UniSpeechSatConfig"),kGe=o(" (UniSpeechSat model)"),RGe=l(),ug=a("li"),aU=a("strong"),SGe=o("vilt"),PGe=o(" \u2014 "),MB=a("a"),$Ge=o("ViltConfig"),IGe=o(" (ViLT model)"),jGe=l(),pg=a("li"),sU=a("strong"),DGe=o("vision-encoder-decoder"),NGe=o(" \u2014 "),EB=a("a"),qGe=o("VisionEncoderDecoderConfig"),OGe=o(" (Vision Encoder decoder model)"),GGe=l(),_g=a("li"),nU=a("strong"),XGe=o("vision-text-dual-encoder"),VGe=o(" \u2014 "),yB=a("a"),zGe=o("VisionTextDualEncoderConfig"),WGe=o(" (VisionTextDualEncoder model)"),QGe=l(),bg=a("li"),lU=a("strong"),HGe=o("visual_bert"),UGe=o(" \u2014 "),wB=a("a"),JGe=o("VisualBertConfig"),YGe=o(" (VisualBert model)"),KGe=l(),vg=a("li"),iU=a("strong"),ZGe=o("vit"),eXe=o(" \u2014 "),AB=a("a"),oXe=o("ViTConfig"),rXe=o(" (ViT model)"),tXe=l(),Tg=a("li"),dU=a("strong"),aXe=o("vit_mae"),sXe=o(" \u2014 "),LB=a("a"),nXe=o("ViTMAEConfig"),lXe=o(" (ViTMAE model)"),iXe=l(),Fg=a("li"),cU=a("strong"),dXe=o("wav2vec2"),cXe=o(" \u2014 "),BB=a("a"),mXe=o("Wav2Vec2Config"),fXe=o(" (Wav2Vec2 model)"),gXe=l(),Cg=a("li"),mU=a("strong"),hXe=o("wavlm"),uXe=o(" \u2014 "),xB=a("a"),pXe=o("WavLMConfig"),_Xe=o(" (WavLM model)"),bXe=l(),Mg=a("li"),fU=a("strong"),vXe=o("xglm"),TXe=o(" \u2014 "),kB=a("a"),FXe=o("XGLMConfig"),CXe=o(" (XGLM model)"),MXe=l(),Eg=a("li"),gU=a("strong"),EXe=o("xlm"),yXe=o(" \u2014 "),RB=a("a"),wXe=o("XLMConfig"),AXe=o(" (XLM model)"),LXe=l(),yg=a("li"),hU=a("strong"),BXe=o("xlm-prophetnet"),xXe=o(" \u2014 "),SB=a("a"),kXe=o("XLMProphetNetConfig"),RXe=o(" (XLMProphetNet model)"),SXe=l(),wg=a("li"),uU=a("strong"),PXe=o("xlm-roberta"),$Xe=o(" \u2014 "),PB=a("a"),IXe=o("XLMRobertaConfig"),jXe=o(" (XLM-RoBERTa model)"),DXe=l(),Ag=a("li"),pU=a("strong"),NXe=o("xlm-roberta-xl"),qXe=o(" \u2014 "),$B=a("a"),OXe=o("XLMRobertaXLConfig"),GXe=o(" (XLM-RoBERTa-XL model)"),XXe=l(),Lg=a("li"),_U=a("strong"),VXe=o("xlnet"),zXe=o(" \u2014 "),IB=a("a"),WXe=o("XLNetConfig"),QXe=o(" (XLNet model)"),HXe=l(),Bg=a("li"),bU=a("strong"),UXe=o("yoso"),JXe=o(" \u2014 "),jB=a("a"),YXe=o("YosoConfig"),KXe=o(" (YOSO model)"),ZXe=l(),vU=a("p"),eVe=o("Examples:"),oVe=l(),m(iy.$$.fragment),rVe=l(),xg=a("div"),m(dy.$$.fragment),tVe=l(),TU=a("p"),aVe=o("Register a new configuration for this class."),Bxe=l(),Qi=a("h2"),kg=a("a"),FU=a("span"),m(cy.$$.fragment),sVe=l(),CU=a("span"),nVe=o("AutoTokenizer"),xxe=l(),Qo=a("div"),m(my.$$.fragment),lVe=l(),fy=a("p"),iVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DB=a("a"),dVe=o("AutoTokenizer.from_pretrained()"),cVe=o(" class method."),mVe=l(),gy=a("p"),fVe=o("This class cannot be instantiated directly using "),MU=a("code"),gVe=o("__init__()"),hVe=o(" (throws an error)."),uVe=l(),go=a("div"),m(hy.$$.fragment),pVe=l(),EU=a("p"),_Ve=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),bVe=l(),Ga=a("p"),vVe=o("The tokenizer class to instantiate is selected based on the "),yU=a("code"),TVe=o("model_type"),FVe=o(` property of the config object (either
passed as an argument or loaded from `),wU=a("code"),CVe=o("pretrained_model_name_or_path"),MVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AU=a("code"),EVe=o("pretrained_model_name_or_path"),yVe=o(":"),wVe=l(),E=a("ul"),zs=a("li"),LU=a("strong"),AVe=o("albert"),LVe=o(" \u2014 "),NB=a("a"),BVe=o("AlbertTokenizer"),xVe=o(" or "),qB=a("a"),kVe=o("AlbertTokenizerFast"),RVe=o(" (ALBERT model)"),SVe=l(),Ws=a("li"),BU=a("strong"),PVe=o("bart"),$Ve=o(" \u2014 "),OB=a("a"),IVe=o("BartTokenizer"),jVe=o(" or "),GB=a("a"),DVe=o("BartTokenizerFast"),NVe=o(" (BART model)"),qVe=l(),Qs=a("li"),xU=a("strong"),OVe=o("barthez"),GVe=o(" \u2014 "),XB=a("a"),XVe=o("BarthezTokenizer"),VVe=o(" or "),VB=a("a"),zVe=o("BarthezTokenizerFast"),WVe=o(" (BARThez model)"),QVe=l(),Rg=a("li"),kU=a("strong"),HVe=o("bartpho"),UVe=o(" \u2014 "),zB=a("a"),JVe=o("BartphoTokenizer"),YVe=o(" (BARTpho model)"),KVe=l(),Hs=a("li"),RU=a("strong"),ZVe=o("bert"),eze=o(" \u2014 "),WB=a("a"),oze=o("BertTokenizer"),rze=o(" or "),QB=a("a"),tze=o("BertTokenizerFast"),aze=o(" (BERT model)"),sze=l(),Sg=a("li"),SU=a("strong"),nze=o("bert-generation"),lze=o(" \u2014 "),HB=a("a"),ize=o("BertGenerationTokenizer"),dze=o(" (Bert Generation model)"),cze=l(),Pg=a("li"),PU=a("strong"),mze=o("bert-japanese"),fze=o(" \u2014 "),UB=a("a"),gze=o("BertJapaneseTokenizer"),hze=o(" (BertJapanese model)"),uze=l(),$g=a("li"),$U=a("strong"),pze=o("bertweet"),_ze=o(" \u2014 "),JB=a("a"),bze=o("BertweetTokenizer"),vze=o(" (Bertweet model)"),Tze=l(),Us=a("li"),IU=a("strong"),Fze=o("big_bird"),Cze=o(" \u2014 "),YB=a("a"),Mze=o("BigBirdTokenizer"),Eze=o(" or "),KB=a("a"),yze=o("BigBirdTokenizerFast"),wze=o(" (BigBird model)"),Aze=l(),Js=a("li"),jU=a("strong"),Lze=o("bigbird_pegasus"),Bze=o(" \u2014 "),ZB=a("a"),xze=o("PegasusTokenizer"),kze=o(" or "),ex=a("a"),Rze=o("PegasusTokenizerFast"),Sze=o(" (BigBirdPegasus model)"),Pze=l(),Ys=a("li"),DU=a("strong"),$ze=o("blenderbot"),Ize=o(" \u2014 "),ox=a("a"),jze=o("BlenderbotTokenizer"),Dze=o(" or "),rx=a("a"),Nze=o("BlenderbotTokenizerFast"),qze=o(" (Blenderbot model)"),Oze=l(),Ig=a("li"),NU=a("strong"),Gze=o("blenderbot-small"),Xze=o(" \u2014 "),tx=a("a"),Vze=o("BlenderbotSmallTokenizer"),zze=o(" (BlenderbotSmall model)"),Wze=l(),jg=a("li"),qU=a("strong"),Qze=o("byt5"),Hze=o(" \u2014 "),ax=a("a"),Uze=o("ByT5Tokenizer"),Jze=o(" (ByT5 model)"),Yze=l(),Ks=a("li"),OU=a("strong"),Kze=o("camembert"),Zze=o(" \u2014 "),sx=a("a"),eWe=o("CamembertTokenizer"),oWe=o(" or "),nx=a("a"),rWe=o("CamembertTokenizerFast"),tWe=o(" (CamemBERT model)"),aWe=l(),Dg=a("li"),GU=a("strong"),sWe=o("canine"),nWe=o(" \u2014 "),lx=a("a"),lWe=o("CanineTokenizer"),iWe=o(" (Canine model)"),dWe=l(),Zs=a("li"),XU=a("strong"),cWe=o("clip"),mWe=o(" \u2014 "),ix=a("a"),fWe=o("CLIPTokenizer"),gWe=o(" or "),dx=a("a"),hWe=o("CLIPTokenizerFast"),uWe=o(" (CLIP model)"),pWe=l(),en=a("li"),VU=a("strong"),_We=o("convbert"),bWe=o(" \u2014 "),cx=a("a"),vWe=o("ConvBertTokenizer"),TWe=o(" or "),mx=a("a"),FWe=o("ConvBertTokenizerFast"),CWe=o(" (ConvBERT model)"),MWe=l(),on=a("li"),zU=a("strong"),EWe=o("cpm"),yWe=o(" \u2014 "),fx=a("a"),wWe=o("CpmTokenizer"),AWe=o(" or "),WU=a("code"),LWe=o("CpmTokenizerFast"),BWe=o(" (CPM model)"),xWe=l(),Ng=a("li"),QU=a("strong"),kWe=o("ctrl"),RWe=o(" \u2014 "),gx=a("a"),SWe=o("CTRLTokenizer"),PWe=o(" (CTRL model)"),$We=l(),rn=a("li"),HU=a("strong"),IWe=o("deberta"),jWe=o(" \u2014 "),hx=a("a"),DWe=o("DebertaTokenizer"),NWe=o(" or "),ux=a("a"),qWe=o("DebertaTokenizerFast"),OWe=o(" (DeBERTa model)"),GWe=l(),qg=a("li"),UU=a("strong"),XWe=o("deberta-v2"),VWe=o(" \u2014 "),px=a("a"),zWe=o("DebertaV2Tokenizer"),WWe=o(" (DeBERTa-v2 model)"),QWe=l(),tn=a("li"),JU=a("strong"),HWe=o("distilbert"),UWe=o(" \u2014 "),_x=a("a"),JWe=o("DistilBertTokenizer"),YWe=o(" or "),bx=a("a"),KWe=o("DistilBertTokenizerFast"),ZWe=o(" (DistilBERT model)"),eQe=l(),an=a("li"),YU=a("strong"),oQe=o("dpr"),rQe=o(" \u2014 "),vx=a("a"),tQe=o("DPRQuestionEncoderTokenizer"),aQe=o(" or "),Tx=a("a"),sQe=o("DPRQuestionEncoderTokenizerFast"),nQe=o(" (DPR model)"),lQe=l(),sn=a("li"),KU=a("strong"),iQe=o("electra"),dQe=o(" \u2014 "),Fx=a("a"),cQe=o("ElectraTokenizer"),mQe=o(" or "),Cx=a("a"),fQe=o("ElectraTokenizerFast"),gQe=o(" (ELECTRA model)"),hQe=l(),Og=a("li"),ZU=a("strong"),uQe=o("flaubert"),pQe=o(" \u2014 "),Mx=a("a"),_Qe=o("FlaubertTokenizer"),bQe=o(" (FlauBERT model)"),vQe=l(),nn=a("li"),eJ=a("strong"),TQe=o("fnet"),FQe=o(" \u2014 "),Ex=a("a"),CQe=o("FNetTokenizer"),MQe=o(" or "),yx=a("a"),EQe=o("FNetTokenizerFast"),yQe=o(" (FNet model)"),wQe=l(),Gg=a("li"),oJ=a("strong"),AQe=o("fsmt"),LQe=o(" \u2014 "),wx=a("a"),BQe=o("FSMTTokenizer"),xQe=o(" (FairSeq Machine-Translation model)"),kQe=l(),ln=a("li"),rJ=a("strong"),RQe=o("funnel"),SQe=o(" \u2014 "),Ax=a("a"),PQe=o("FunnelTokenizer"),$Qe=o(" or "),Lx=a("a"),IQe=o("FunnelTokenizerFast"),jQe=o(" (Funnel Transformer model)"),DQe=l(),dn=a("li"),tJ=a("strong"),NQe=o("gpt2"),qQe=o(" \u2014 "),Bx=a("a"),OQe=o("GPT2Tokenizer"),GQe=o(" or "),xx=a("a"),XQe=o("GPT2TokenizerFast"),VQe=o(" (OpenAI GPT-2 model)"),zQe=l(),cn=a("li"),aJ=a("strong"),WQe=o("gpt_neo"),QQe=o(" \u2014 "),kx=a("a"),HQe=o("GPT2Tokenizer"),UQe=o(" or "),Rx=a("a"),JQe=o("GPT2TokenizerFast"),YQe=o(" (GPT Neo model)"),KQe=l(),mn=a("li"),sJ=a("strong"),ZQe=o("herbert"),eHe=o(" \u2014 "),Sx=a("a"),oHe=o("HerbertTokenizer"),rHe=o(" or "),Px=a("a"),tHe=o("HerbertTokenizerFast"),aHe=o(" (HerBERT model)"),sHe=l(),Xg=a("li"),nJ=a("strong"),nHe=o("hubert"),lHe=o(" \u2014 "),$x=a("a"),iHe=o("Wav2Vec2CTCTokenizer"),dHe=o(" (Hubert model)"),cHe=l(),fn=a("li"),lJ=a("strong"),mHe=o("ibert"),fHe=o(" \u2014 "),Ix=a("a"),gHe=o("RobertaTokenizer"),hHe=o(" or "),jx=a("a"),uHe=o("RobertaTokenizerFast"),pHe=o(" (I-BERT model)"),_He=l(),gn=a("li"),iJ=a("strong"),bHe=o("layoutlm"),vHe=o(" \u2014 "),Dx=a("a"),THe=o("LayoutLMTokenizer"),FHe=o(" or "),Nx=a("a"),CHe=o("LayoutLMTokenizerFast"),MHe=o(" (LayoutLM model)"),EHe=l(),hn=a("li"),dJ=a("strong"),yHe=o("layoutlmv2"),wHe=o(" \u2014 "),qx=a("a"),AHe=o("LayoutLMv2Tokenizer"),LHe=o(" or "),Ox=a("a"),BHe=o("LayoutLMv2TokenizerFast"),xHe=o(" (LayoutLMv2 model)"),kHe=l(),un=a("li"),cJ=a("strong"),RHe=o("layoutxlm"),SHe=o(" \u2014 "),Gx=a("a"),PHe=o("LayoutXLMTokenizer"),$He=o(" or "),Xx=a("a"),IHe=o("LayoutXLMTokenizerFast"),jHe=o(" (LayoutXLM model)"),DHe=l(),pn=a("li"),mJ=a("strong"),NHe=o("led"),qHe=o(" \u2014 "),Vx=a("a"),OHe=o("LEDTokenizer"),GHe=o(" or "),zx=a("a"),XHe=o("LEDTokenizerFast"),VHe=o(" (LED model)"),zHe=l(),_n=a("li"),fJ=a("strong"),WHe=o("longformer"),QHe=o(" \u2014 "),Wx=a("a"),HHe=o("LongformerTokenizer"),UHe=o(" or "),Qx=a("a"),JHe=o("LongformerTokenizerFast"),YHe=o(" (Longformer model)"),KHe=l(),Vg=a("li"),gJ=a("strong"),ZHe=o("luke"),eUe=o(" \u2014 "),Hx=a("a"),oUe=o("LukeTokenizer"),rUe=o(" (LUKE model)"),tUe=l(),bn=a("li"),hJ=a("strong"),aUe=o("lxmert"),sUe=o(" \u2014 "),Ux=a("a"),nUe=o("LxmertTokenizer"),lUe=o(" or "),Jx=a("a"),iUe=o("LxmertTokenizerFast"),dUe=o(" (LXMERT model)"),cUe=l(),zg=a("li"),uJ=a("strong"),mUe=o("m2m_100"),fUe=o(" \u2014 "),Yx=a("a"),gUe=o("M2M100Tokenizer"),hUe=o(" (M2M100 model)"),uUe=l(),Wg=a("li"),pJ=a("strong"),pUe=o("marian"),_Ue=o(" \u2014 "),Kx=a("a"),bUe=o("MarianTokenizer"),vUe=o(" (Marian model)"),TUe=l(),vn=a("li"),_J=a("strong"),FUe=o("mbart"),CUe=o(" \u2014 "),Zx=a("a"),MUe=o("MBartTokenizer"),EUe=o(" or "),ek=a("a"),yUe=o("MBartTokenizerFast"),wUe=o(" (mBART model)"),AUe=l(),Tn=a("li"),bJ=a("strong"),LUe=o("mbart50"),BUe=o(" \u2014 "),ok=a("a"),xUe=o("MBart50Tokenizer"),kUe=o(" or "),rk=a("a"),RUe=o("MBart50TokenizerFast"),SUe=o(" (mBART-50 model)"),PUe=l(),Qg=a("li"),vJ=a("strong"),$Ue=o("mluke"),IUe=o(" \u2014 "),tk=a("a"),jUe=o("MLukeTokenizer"),DUe=o(" (mLUKE model)"),NUe=l(),Fn=a("li"),TJ=a("strong"),qUe=o("mobilebert"),OUe=o(" \u2014 "),ak=a("a"),GUe=o("MobileBertTokenizer"),XUe=o(" or "),sk=a("a"),VUe=o("MobileBertTokenizerFast"),zUe=o(" (MobileBERT model)"),WUe=l(),Cn=a("li"),FJ=a("strong"),QUe=o("mpnet"),HUe=o(" \u2014 "),nk=a("a"),UUe=o("MPNetTokenizer"),JUe=o(" or "),lk=a("a"),YUe=o("MPNetTokenizerFast"),KUe=o(" (MPNet model)"),ZUe=l(),Mn=a("li"),CJ=a("strong"),eJe=o("mt5"),oJe=o(" \u2014 "),ik=a("a"),rJe=o("MT5Tokenizer"),tJe=o(" or "),dk=a("a"),aJe=o("MT5TokenizerFast"),sJe=o(" (mT5 model)"),nJe=l(),En=a("li"),MJ=a("strong"),lJe=o("openai-gpt"),iJe=o(" \u2014 "),ck=a("a"),dJe=o("OpenAIGPTTokenizer"),cJe=o(" or "),mk=a("a"),mJe=o("OpenAIGPTTokenizerFast"),fJe=o(" (OpenAI GPT model)"),gJe=l(),yn=a("li"),EJ=a("strong"),hJe=o("pegasus"),uJe=o(" \u2014 "),fk=a("a"),pJe=o("PegasusTokenizer"),_Je=o(" or "),gk=a("a"),bJe=o("PegasusTokenizerFast"),vJe=o(" (Pegasus model)"),TJe=l(),Hg=a("li"),yJ=a("strong"),FJe=o("perceiver"),CJe=o(" \u2014 "),hk=a("a"),MJe=o("PerceiverTokenizer"),EJe=o(" (Perceiver model)"),yJe=l(),Ug=a("li"),wJ=a("strong"),wJe=o("phobert"),AJe=o(" \u2014 "),uk=a("a"),LJe=o("PhobertTokenizer"),BJe=o(" (PhoBERT model)"),xJe=l(),Jg=a("li"),AJ=a("strong"),kJe=o("plbart"),RJe=o(" \u2014 "),pk=a("a"),SJe=o("PLBartTokenizer"),PJe=o(" (PLBart model)"),$Je=l(),Yg=a("li"),LJ=a("strong"),IJe=o("prophetnet"),jJe=o(" \u2014 "),_k=a("a"),DJe=o("ProphetNetTokenizer"),NJe=o(" (ProphetNet model)"),qJe=l(),wn=a("li"),BJ=a("strong"),OJe=o("qdqbert"),GJe=o(" \u2014 "),bk=a("a"),XJe=o("BertTokenizer"),VJe=o(" or "),vk=a("a"),zJe=o("BertTokenizerFast"),WJe=o(" (QDQBert model)"),QJe=l(),Kg=a("li"),xJ=a("strong"),HJe=o("rag"),UJe=o(" \u2014 "),Tk=a("a"),JJe=o("RagTokenizer"),YJe=o(" (RAG model)"),KJe=l(),An=a("li"),kJ=a("strong"),ZJe=o("realm"),eYe=o(" \u2014 "),Fk=a("a"),oYe=o("RealmTokenizer"),rYe=o(" or "),Ck=a("a"),tYe=o("RealmTokenizerFast"),aYe=o(" (Realm model)"),sYe=l(),Ln=a("li"),RJ=a("strong"),nYe=o("reformer"),lYe=o(" \u2014 "),Mk=a("a"),iYe=o("ReformerTokenizer"),dYe=o(" or "),Ek=a("a"),cYe=o("ReformerTokenizerFast"),mYe=o(" (Reformer model)"),fYe=l(),Bn=a("li"),SJ=a("strong"),gYe=o("rembert"),hYe=o(" \u2014 "),yk=a("a"),uYe=o("RemBertTokenizer"),pYe=o(" or "),wk=a("a"),_Ye=o("RemBertTokenizerFast"),bYe=o(" (RemBERT model)"),vYe=l(),xn=a("li"),PJ=a("strong"),TYe=o("retribert"),FYe=o(" \u2014 "),Ak=a("a"),CYe=o("RetriBertTokenizer"),MYe=o(" or "),Lk=a("a"),EYe=o("RetriBertTokenizerFast"),yYe=o(" (RetriBERT model)"),wYe=l(),kn=a("li"),$J=a("strong"),AYe=o("roberta"),LYe=o(" \u2014 "),Bk=a("a"),BYe=o("RobertaTokenizer"),xYe=o(" or "),xk=a("a"),kYe=o("RobertaTokenizerFast"),RYe=o(" (RoBERTa model)"),SYe=l(),Rn=a("li"),IJ=a("strong"),PYe=o("roformer"),$Ye=o(" \u2014 "),kk=a("a"),IYe=o("RoFormerTokenizer"),jYe=o(" or "),Rk=a("a"),DYe=o("RoFormerTokenizerFast"),NYe=o(" (RoFormer model)"),qYe=l(),Zg=a("li"),jJ=a("strong"),OYe=o("speech_to_text"),GYe=o(" \u2014 "),Sk=a("a"),XYe=o("Speech2TextTokenizer"),VYe=o(" (Speech2Text model)"),zYe=l(),eh=a("li"),DJ=a("strong"),WYe=o("speech_to_text_2"),QYe=o(" \u2014 "),Pk=a("a"),HYe=o("Speech2Text2Tokenizer"),UYe=o(" (Speech2Text2 model)"),JYe=l(),Sn=a("li"),NJ=a("strong"),YYe=o("splinter"),KYe=o(" \u2014 "),$k=a("a"),ZYe=o("SplinterTokenizer"),eKe=o(" or "),Ik=a("a"),oKe=o("SplinterTokenizerFast"),rKe=o(" (Splinter model)"),tKe=l(),Pn=a("li"),qJ=a("strong"),aKe=o("squeezebert"),sKe=o(" \u2014 "),jk=a("a"),nKe=o("SqueezeBertTokenizer"),lKe=o(" or "),Dk=a("a"),iKe=o("SqueezeBertTokenizerFast"),dKe=o(" (SqueezeBERT model)"),cKe=l(),$n=a("li"),OJ=a("strong"),mKe=o("t5"),fKe=o(" \u2014 "),Nk=a("a"),gKe=o("T5Tokenizer"),hKe=o(" or "),qk=a("a"),uKe=o("T5TokenizerFast"),pKe=o(" (T5 model)"),_Ke=l(),oh=a("li"),GJ=a("strong"),bKe=o("tapas"),vKe=o(" \u2014 "),Ok=a("a"),TKe=o("TapasTokenizer"),FKe=o(" (TAPAS model)"),CKe=l(),rh=a("li"),XJ=a("strong"),MKe=o("transfo-xl"),EKe=o(" \u2014 "),Gk=a("a"),yKe=o("TransfoXLTokenizer"),wKe=o(" (Transformer-XL model)"),AKe=l(),th=a("li"),VJ=a("strong"),LKe=o("wav2vec2"),BKe=o(" \u2014 "),Xk=a("a"),xKe=o("Wav2Vec2CTCTokenizer"),kKe=o(" (Wav2Vec2 model)"),RKe=l(),ah=a("li"),zJ=a("strong"),SKe=o("wav2vec2_phoneme"),PKe=o(" \u2014 "),Vk=a("a"),$Ke=o("Wav2Vec2PhonemeCTCTokenizer"),IKe=o(" (Wav2Vec2Phoneme model)"),jKe=l(),In=a("li"),WJ=a("strong"),DKe=o("xglm"),NKe=o(" \u2014 "),zk=a("a"),qKe=o("XGLMTokenizer"),OKe=o(" or "),Wk=a("a"),GKe=o("XGLMTokenizerFast"),XKe=o(" (XGLM model)"),VKe=l(),sh=a("li"),QJ=a("strong"),zKe=o("xlm"),WKe=o(" \u2014 "),Qk=a("a"),QKe=o("XLMTokenizer"),HKe=o(" (XLM model)"),UKe=l(),nh=a("li"),HJ=a("strong"),JKe=o("xlm-prophetnet"),YKe=o(" \u2014 "),Hk=a("a"),KKe=o("XLMProphetNetTokenizer"),ZKe=o(" (XLMProphetNet model)"),eZe=l(),jn=a("li"),UJ=a("strong"),oZe=o("xlm-roberta"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("XLMRobertaTokenizer"),aZe=o(" or "),Jk=a("a"),sZe=o("XLMRobertaTokenizerFast"),nZe=o(" (XLM-RoBERTa model)"),lZe=l(),Dn=a("li"),JJ=a("strong"),iZe=o("xlnet"),dZe=o(" \u2014 "),Yk=a("a"),cZe=o("XLNetTokenizer"),mZe=o(" or "),Kk=a("a"),fZe=o("XLNetTokenizerFast"),gZe=o(" (XLNet model)"),hZe=l(),YJ=a("p"),uZe=o("Examples:"),pZe=l(),m(uy.$$.fragment),_Ze=l(),lh=a("div"),m(py.$$.fragment),bZe=l(),KJ=a("p"),vZe=o("Register a new tokenizer in this mapping."),kxe=l(),Hi=a("h2"),ih=a("a"),ZJ=a("span"),m(_y.$$.fragment),TZe=l(),eY=a("span"),FZe=o("AutoFeatureExtractor"),Rxe=l(),Ho=a("div"),m(by.$$.fragment),CZe=l(),vy=a("p"),MZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Zk=a("a"),EZe=o("AutoFeatureExtractor.from_pretrained()"),yZe=o(" class method."),wZe=l(),Ty=a("p"),AZe=o("This class cannot be instantiated directly using "),oY=a("code"),LZe=o("__init__()"),BZe=o(" (throws an error)."),xZe=l(),Ie=a("div"),m(Fy.$$.fragment),kZe=l(),rY=a("p"),RZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SZe=l(),Xa=a("p"),PZe=o("The feature extractor class to instantiate is selected based on the "),tY=a("code"),$Ze=o("model_type"),IZe=o(` property of the config object
(either passed as an argument or loaded from `),aY=a("code"),jZe=o("pretrained_model_name_or_path"),DZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sY=a("code"),NZe=o("pretrained_model_name_or_path"),qZe=o(":"),OZe=l(),te=a("ul"),dh=a("li"),nY=a("strong"),GZe=o("beit"),XZe=o(" \u2014 "),eR=a("a"),VZe=o("BeitFeatureExtractor"),zZe=o(" (BEiT model)"),WZe=l(),ch=a("li"),lY=a("strong"),QZe=o("clip"),HZe=o(" \u2014 "),oR=a("a"),UZe=o("CLIPFeatureExtractor"),JZe=o(" (CLIP model)"),YZe=l(),mh=a("li"),iY=a("strong"),KZe=o("convnext"),ZZe=o(" \u2014 "),rR=a("a"),eeo=o("ConvNextFeatureExtractor"),oeo=o(" (ConvNext model)"),reo=l(),fh=a("li"),dY=a("strong"),teo=o("deit"),aeo=o(" \u2014 "),tR=a("a"),seo=o("DeiTFeatureExtractor"),neo=o(" (DeiT model)"),leo=l(),gh=a("li"),cY=a("strong"),ieo=o("detr"),deo=o(" \u2014 "),aR=a("a"),ceo=o("DetrFeatureExtractor"),meo=o(" (DETR model)"),feo=l(),hh=a("li"),mY=a("strong"),geo=o("hubert"),heo=o(" \u2014 "),sR=a("a"),ueo=o("Wav2Vec2FeatureExtractor"),peo=o(" (Hubert model)"),_eo=l(),uh=a("li"),fY=a("strong"),beo=o("layoutlmv2"),veo=o(" \u2014 "),nR=a("a"),Teo=o("LayoutLMv2FeatureExtractor"),Feo=o(" (LayoutLMv2 model)"),Ceo=l(),ph=a("li"),gY=a("strong"),Meo=o("maskformer"),Eeo=o(" \u2014 "),lR=a("a"),yeo=o("MaskFormerFeatureExtractor"),weo=o(" (MaskFormer model)"),Aeo=l(),_h=a("li"),hY=a("strong"),Leo=o("perceiver"),Beo=o(" \u2014 "),iR=a("a"),xeo=o("PerceiverFeatureExtractor"),keo=o(" (Perceiver model)"),Reo=l(),bh=a("li"),uY=a("strong"),Seo=o("poolformer"),Peo=o(" \u2014 "),dR=a("a"),$eo=o("PoolFormerFeatureExtractor"),Ieo=o(" (PoolFormer model)"),jeo=l(),vh=a("li"),pY=a("strong"),Deo=o("resnet"),Neo=o(" \u2014 "),cR=a("a"),qeo=o("ConvNextFeatureExtractor"),Oeo=o(" (ResNet model)"),Geo=l(),Th=a("li"),_Y=a("strong"),Xeo=o("segformer"),Veo=o(" \u2014 "),mR=a("a"),zeo=o("SegformerFeatureExtractor"),Weo=o(" (SegFormer model)"),Qeo=l(),Fh=a("li"),bY=a("strong"),Heo=o("speech_to_text"),Ueo=o(" \u2014 "),fR=a("a"),Jeo=o("Speech2TextFeatureExtractor"),Yeo=o(" (Speech2Text model)"),Keo=l(),Ch=a("li"),vY=a("strong"),Zeo=o("swin"),eoo=o(" \u2014 "),gR=a("a"),ooo=o("ViTFeatureExtractor"),roo=o(" (Swin model)"),too=l(),Mh=a("li"),TY=a("strong"),aoo=o("vit"),soo=o(" \u2014 "),hR=a("a"),noo=o("ViTFeatureExtractor"),loo=o(" (ViT model)"),ioo=l(),Eh=a("li"),FY=a("strong"),doo=o("vit_mae"),coo=o(" \u2014 "),uR=a("a"),moo=o("ViTFeatureExtractor"),foo=o(" (ViTMAE model)"),goo=l(),yh=a("li"),CY=a("strong"),hoo=o("wav2vec2"),uoo=o(" \u2014 "),pR=a("a"),poo=o("Wav2Vec2FeatureExtractor"),_oo=o(" (Wav2Vec2 model)"),boo=l(),m(wh.$$.fragment),voo=l(),MY=a("p"),Too=o("Examples:"),Foo=l(),m(Cy.$$.fragment),Coo=l(),Ah=a("div"),m(My.$$.fragment),Moo=l(),EY=a("p"),Eoo=o("Register a new feature extractor for this class."),Sxe=l(),Ui=a("h2"),Lh=a("a"),yY=a("span"),m(Ey.$$.fragment),yoo=l(),wY=a("span"),woo=o("AutoProcessor"),Pxe=l(),Uo=a("div"),m(yy.$$.fragment),Aoo=l(),wy=a("p"),Loo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_R=a("a"),Boo=o("AutoProcessor.from_pretrained()"),xoo=o(" class method."),koo=l(),Ay=a("p"),Roo=o("This class cannot be instantiated directly using "),AY=a("code"),Soo=o("__init__()"),Poo=o(" (throws an error)."),$oo=l(),je=a("div"),m(Ly.$$.fragment),Ioo=l(),LY=a("p"),joo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Doo=l(),Ji=a("p"),Noo=o("The processor class to instantiate is selected based on the "),BY=a("code"),qoo=o("model_type"),Ooo=o(` property of the config object (either
passed as an argument or loaded from `),xY=a("code"),Goo=o("pretrained_model_name_or_path"),Xoo=o(" if possible):"),Voo=l(),xe=a("ul"),Bh=a("li"),kY=a("strong"),zoo=o("clip"),Woo=o(" \u2014 "),bR=a("a"),Qoo=o("CLIPProcessor"),Hoo=o(" (CLIP model)"),Uoo=l(),xh=a("li"),RY=a("strong"),Joo=o("layoutlmv2"),Yoo=o(" \u2014 "),vR=a("a"),Koo=o("LayoutLMv2Processor"),Zoo=o(" (LayoutLMv2 model)"),ero=l(),kh=a("li"),SY=a("strong"),oro=o("layoutxlm"),rro=o(" \u2014 "),TR=a("a"),tro=o("LayoutXLMProcessor"),aro=o(" (LayoutXLM model)"),sro=l(),Rh=a("li"),PY=a("strong"),nro=o("speech_to_text"),lro=o(" \u2014 "),FR=a("a"),iro=o("Speech2TextProcessor"),dro=o(" (Speech2Text model)"),cro=l(),Sh=a("li"),$Y=a("strong"),mro=o("speech_to_text_2"),fro=o(" \u2014 "),CR=a("a"),gro=o("Speech2Text2Processor"),hro=o(" (Speech2Text2 model)"),uro=l(),Ph=a("li"),IY=a("strong"),pro=o("trocr"),_ro=o(" \u2014 "),MR=a("a"),bro=o("TrOCRProcessor"),vro=o(" (TrOCR model)"),Tro=l(),$h=a("li"),jY=a("strong"),Fro=o("vision-text-dual-encoder"),Cro=o(" \u2014 "),ER=a("a"),Mro=o("VisionTextDualEncoderProcessor"),Ero=o(" (VisionTextDualEncoder model)"),yro=l(),Ih=a("li"),DY=a("strong"),wro=o("wav2vec2"),Aro=o(" \u2014 "),yR=a("a"),Lro=o("Wav2Vec2Processor"),Bro=o(" (Wav2Vec2 model)"),xro=l(),m(jh.$$.fragment),kro=l(),NY=a("p"),Rro=o("Examples:"),Sro=l(),m(By.$$.fragment),Pro=l(),Dh=a("div"),m(xy.$$.fragment),$ro=l(),qY=a("p"),Iro=o("Register a new processor for this class."),$xe=l(),Yi=a("h2"),Nh=a("a"),OY=a("span"),m(ky.$$.fragment),jro=l(),GY=a("span"),Dro=o("AutoModel"),Ixe=l(),Jo=a("div"),m(Ry.$$.fragment),Nro=l(),Ki=a("p"),qro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XY=a("code"),Oro=o("from_pretrained()"),Gro=o("class method or the "),VY=a("code"),Xro=o("from_config()"),Vro=o(`class
method.`),zro=l(),Sy=a("p"),Wro=o("This class cannot be instantiated directly using "),zY=a("code"),Qro=o("__init__()"),Hro=o(" (throws an error)."),Uro=l(),Vr=a("div"),m(Py.$$.fragment),Jro=l(),WY=a("p"),Yro=o("Instantiates one of the base model classes of the library from a configuration."),Kro=l(),Zi=a("p"),Zro=o(`Note:
Loading a model from its configuration file does `),QY=a("strong"),eto=o("not"),oto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("code"),rto=o("from_pretrained()"),tto=o("to load the model weights."),ato=l(),UY=a("p"),sto=o("Examples:"),nto=l(),m($y.$$.fragment),lto=l(),De=a("div"),m(Iy.$$.fragment),ito=l(),JY=a("p"),dto=o("Instantiate one of the base model classes of the library from a pretrained model."),cto=l(),Va=a("p"),mto=o("The model class to instantiate is selected based on the "),YY=a("code"),fto=o("model_type"),gto=o(` property of the config object (either
passed as an argument or loaded from `),KY=a("code"),hto=o("pretrained_model_name_or_path"),uto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZY=a("code"),pto=o("pretrained_model_name_or_path"),_to=o(":"),bto=l(),F=a("ul"),qh=a("li"),eK=a("strong"),vto=o("albert"),Tto=o(" \u2014 "),wR=a("a"),Fto=o("AlbertModel"),Cto=o(" (ALBERT model)"),Mto=l(),Oh=a("li"),oK=a("strong"),Eto=o("bart"),yto=o(" \u2014 "),AR=a("a"),wto=o("BartModel"),Ato=o(" (BART model)"),Lto=l(),Gh=a("li"),rK=a("strong"),Bto=o("beit"),xto=o(" \u2014 "),LR=a("a"),kto=o("BeitModel"),Rto=o(" (BEiT model)"),Sto=l(),Xh=a("li"),tK=a("strong"),Pto=o("bert"),$to=o(" \u2014 "),BR=a("a"),Ito=o("BertModel"),jto=o(" (BERT model)"),Dto=l(),Vh=a("li"),aK=a("strong"),Nto=o("bert-generation"),qto=o(" \u2014 "),xR=a("a"),Oto=o("BertGenerationEncoder"),Gto=o(" (Bert Generation model)"),Xto=l(),zh=a("li"),sK=a("strong"),Vto=o("big_bird"),zto=o(" \u2014 "),kR=a("a"),Wto=o("BigBirdModel"),Qto=o(" (BigBird model)"),Hto=l(),Wh=a("li"),nK=a("strong"),Uto=o("bigbird_pegasus"),Jto=o(" \u2014 "),RR=a("a"),Yto=o("BigBirdPegasusModel"),Kto=o(" (BigBirdPegasus model)"),Zto=l(),Qh=a("li"),lK=a("strong"),eao=o("blenderbot"),oao=o(" \u2014 "),SR=a("a"),rao=o("BlenderbotModel"),tao=o(" (Blenderbot model)"),aao=l(),Hh=a("li"),iK=a("strong"),sao=o("blenderbot-small"),nao=o(" \u2014 "),PR=a("a"),lao=o("BlenderbotSmallModel"),iao=o(" (BlenderbotSmall model)"),dao=l(),Uh=a("li"),dK=a("strong"),cao=o("camembert"),mao=o(" \u2014 "),$R=a("a"),fao=o("CamembertModel"),gao=o(" (CamemBERT model)"),hao=l(),Jh=a("li"),cK=a("strong"),uao=o("canine"),pao=o(" \u2014 "),IR=a("a"),_ao=o("CanineModel"),bao=o(" (Canine model)"),vao=l(),Yh=a("li"),mK=a("strong"),Tao=o("clip"),Fao=o(" \u2014 "),jR=a("a"),Cao=o("CLIPModel"),Mao=o(" (CLIP model)"),Eao=l(),Kh=a("li"),fK=a("strong"),yao=o("convbert"),wao=o(" \u2014 "),DR=a("a"),Aao=o("ConvBertModel"),Lao=o(" (ConvBERT model)"),Bao=l(),Zh=a("li"),gK=a("strong"),xao=o("convnext"),kao=o(" \u2014 "),NR=a("a"),Rao=o("ConvNextModel"),Sao=o(" (ConvNext model)"),Pao=l(),eu=a("li"),hK=a("strong"),$ao=o("ctrl"),Iao=o(" \u2014 "),qR=a("a"),jao=o("CTRLModel"),Dao=o(" (CTRL model)"),Nao=l(),ou=a("li"),uK=a("strong"),qao=o("data2vec-audio"),Oao=o(" \u2014 "),OR=a("a"),Gao=o("Data2VecAudioModel"),Xao=o(" (Data2VecAudio model)"),Vao=l(),ru=a("li"),pK=a("strong"),zao=o("data2vec-text"),Wao=o(" \u2014 "),GR=a("a"),Qao=o("Data2VecTextModel"),Hao=o(" (Data2VecText model)"),Uao=l(),tu=a("li"),_K=a("strong"),Jao=o("deberta"),Yao=o(" \u2014 "),XR=a("a"),Kao=o("DebertaModel"),Zao=o(" (DeBERTa model)"),eso=l(),au=a("li"),bK=a("strong"),oso=o("deberta-v2"),rso=o(" \u2014 "),VR=a("a"),tso=o("DebertaV2Model"),aso=o(" (DeBERTa-v2 model)"),sso=l(),su=a("li"),vK=a("strong"),nso=o("deit"),lso=o(" \u2014 "),zR=a("a"),iso=o("DeiTModel"),dso=o(" (DeiT model)"),cso=l(),nu=a("li"),TK=a("strong"),mso=o("detr"),fso=o(" \u2014 "),WR=a("a"),gso=o("DetrModel"),hso=o(" (DETR model)"),uso=l(),lu=a("li"),FK=a("strong"),pso=o("distilbert"),_so=o(" \u2014 "),QR=a("a"),bso=o("DistilBertModel"),vso=o(" (DistilBERT model)"),Tso=l(),iu=a("li"),CK=a("strong"),Fso=o("dpr"),Cso=o(" \u2014 "),HR=a("a"),Mso=o("DPRQuestionEncoder"),Eso=o(" (DPR model)"),yso=l(),du=a("li"),MK=a("strong"),wso=o("electra"),Aso=o(" \u2014 "),UR=a("a"),Lso=o("ElectraModel"),Bso=o(" (ELECTRA model)"),xso=l(),cu=a("li"),EK=a("strong"),kso=o("flaubert"),Rso=o(" \u2014 "),JR=a("a"),Sso=o("FlaubertModel"),Pso=o(" (FlauBERT model)"),$so=l(),mu=a("li"),yK=a("strong"),Iso=o("fnet"),jso=o(" \u2014 "),YR=a("a"),Dso=o("FNetModel"),Nso=o(" (FNet model)"),qso=l(),fu=a("li"),wK=a("strong"),Oso=o("fsmt"),Gso=o(" \u2014 "),KR=a("a"),Xso=o("FSMTModel"),Vso=o(" (FairSeq Machine-Translation model)"),zso=l(),Nn=a("li"),AK=a("strong"),Wso=o("funnel"),Qso=o(" \u2014 "),ZR=a("a"),Hso=o("FunnelModel"),Uso=o(" or "),eS=a("a"),Jso=o("FunnelBaseModel"),Yso=o(" (Funnel Transformer model)"),Kso=l(),gu=a("li"),LK=a("strong"),Zso=o("gpt2"),eno=o(" \u2014 "),oS=a("a"),ono=o("GPT2Model"),rno=o(" (OpenAI GPT-2 model)"),tno=l(),hu=a("li"),BK=a("strong"),ano=o("gpt_neo"),sno=o(" \u2014 "),rS=a("a"),nno=o("GPTNeoModel"),lno=o(" (GPT Neo model)"),ino=l(),uu=a("li"),xK=a("strong"),dno=o("gptj"),cno=o(" \u2014 "),tS=a("a"),mno=o("GPTJModel"),fno=o(" (GPT-J model)"),gno=l(),pu=a("li"),kK=a("strong"),hno=o("hubert"),uno=o(" \u2014 "),aS=a("a"),pno=o("HubertModel"),_no=o(" (Hubert model)"),bno=l(),_u=a("li"),RK=a("strong"),vno=o("ibert"),Tno=o(" \u2014 "),sS=a("a"),Fno=o("IBertModel"),Cno=o(" (I-BERT model)"),Mno=l(),bu=a("li"),SK=a("strong"),Eno=o("imagegpt"),yno=o(" \u2014 "),nS=a("a"),wno=o("ImageGPTModel"),Ano=o(" (ImageGPT model)"),Lno=l(),vu=a("li"),PK=a("strong"),Bno=o("layoutlm"),xno=o(" \u2014 "),lS=a("a"),kno=o("LayoutLMModel"),Rno=o(" (LayoutLM model)"),Sno=l(),Tu=a("li"),$K=a("strong"),Pno=o("layoutlmv2"),$no=o(" \u2014 "),iS=a("a"),Ino=o("LayoutLMv2Model"),jno=o(" (LayoutLMv2 model)"),Dno=l(),Fu=a("li"),IK=a("strong"),Nno=o("led"),qno=o(" \u2014 "),dS=a("a"),Ono=o("LEDModel"),Gno=o(" (LED model)"),Xno=l(),Cu=a("li"),jK=a("strong"),Vno=o("longformer"),zno=o(" \u2014 "),cS=a("a"),Wno=o("LongformerModel"),Qno=o(" (Longformer model)"),Hno=l(),Mu=a("li"),DK=a("strong"),Uno=o("luke"),Jno=o(" \u2014 "),mS=a("a"),Yno=o("LukeModel"),Kno=o(" (LUKE model)"),Zno=l(),Eu=a("li"),NK=a("strong"),elo=o("lxmert"),olo=o(" \u2014 "),fS=a("a"),rlo=o("LxmertModel"),tlo=o(" (LXMERT model)"),alo=l(),yu=a("li"),qK=a("strong"),slo=o("m2m_100"),nlo=o(" \u2014 "),gS=a("a"),llo=o("M2M100Model"),ilo=o(" (M2M100 model)"),dlo=l(),wu=a("li"),OK=a("strong"),clo=o("marian"),mlo=o(" \u2014 "),hS=a("a"),flo=o("MarianModel"),glo=o(" (Marian model)"),hlo=l(),Au=a("li"),GK=a("strong"),ulo=o("maskformer"),plo=o(" \u2014 "),uS=a("a"),_lo=o("MaskFormerModel"),blo=o(" (MaskFormer model)"),vlo=l(),Lu=a("li"),XK=a("strong"),Tlo=o("mbart"),Flo=o(" \u2014 "),pS=a("a"),Clo=o("MBartModel"),Mlo=o(" (mBART model)"),Elo=l(),Bu=a("li"),VK=a("strong"),ylo=o("megatron-bert"),wlo=o(" \u2014 "),_S=a("a"),Alo=o("MegatronBertModel"),Llo=o(" (MegatronBert model)"),Blo=l(),xu=a("li"),zK=a("strong"),xlo=o("mobilebert"),klo=o(" \u2014 "),bS=a("a"),Rlo=o("MobileBertModel"),Slo=o(" (MobileBERT model)"),Plo=l(),ku=a("li"),WK=a("strong"),$lo=o("mpnet"),Ilo=o(" \u2014 "),vS=a("a"),jlo=o("MPNetModel"),Dlo=o(" (MPNet model)"),Nlo=l(),Ru=a("li"),QK=a("strong"),qlo=o("mt5"),Olo=o(" \u2014 "),TS=a("a"),Glo=o("MT5Model"),Xlo=o(" (mT5 model)"),Vlo=l(),Su=a("li"),HK=a("strong"),zlo=o("nystromformer"),Wlo=o(" \u2014 "),FS=a("a"),Qlo=o("NystromformerModel"),Hlo=o(" (Nystromformer model)"),Ulo=l(),Pu=a("li"),UK=a("strong"),Jlo=o("openai-gpt"),Ylo=o(" \u2014 "),CS=a("a"),Klo=o("OpenAIGPTModel"),Zlo=o(" (OpenAI GPT model)"),eio=l(),$u=a("li"),JK=a("strong"),oio=o("pegasus"),rio=o(" \u2014 "),MS=a("a"),tio=o("PegasusModel"),aio=o(" (Pegasus model)"),sio=l(),Iu=a("li"),YK=a("strong"),nio=o("perceiver"),lio=o(" \u2014 "),ES=a("a"),iio=o("PerceiverModel"),dio=o(" (Perceiver model)"),cio=l(),ju=a("li"),KK=a("strong"),mio=o("plbart"),fio=o(" \u2014 "),yS=a("a"),gio=o("PLBartModel"),hio=o(" (PLBart model)"),uio=l(),Du=a("li"),ZK=a("strong"),pio=o("poolformer"),_io=o(" \u2014 "),wS=a("a"),bio=o("PoolFormerModel"),vio=o(" (PoolFormer model)"),Tio=l(),Nu=a("li"),eZ=a("strong"),Fio=o("prophetnet"),Cio=o(" \u2014 "),AS=a("a"),Mio=o("ProphetNetModel"),Eio=o(" (ProphetNet model)"),yio=l(),qu=a("li"),oZ=a("strong"),wio=o("qdqbert"),Aio=o(" \u2014 "),LS=a("a"),Lio=o("QDQBertModel"),Bio=o(" (QDQBert model)"),xio=l(),Ou=a("li"),rZ=a("strong"),kio=o("reformer"),Rio=o(" \u2014 "),BS=a("a"),Sio=o("ReformerModel"),Pio=o(" (Reformer model)"),$io=l(),Gu=a("li"),tZ=a("strong"),Iio=o("rembert"),jio=o(" \u2014 "),xS=a("a"),Dio=o("RemBertModel"),Nio=o(" (RemBERT model)"),qio=l(),Xu=a("li"),aZ=a("strong"),Oio=o("resnet"),Gio=o(" \u2014 "),kS=a("a"),Xio=o("ResNetModel"),Vio=o(" (ResNet model)"),zio=l(),Vu=a("li"),sZ=a("strong"),Wio=o("retribert"),Qio=o(" \u2014 "),RS=a("a"),Hio=o("RetriBertModel"),Uio=o(" (RetriBERT model)"),Jio=l(),zu=a("li"),nZ=a("strong"),Yio=o("roberta"),Kio=o(" \u2014 "),SS=a("a"),Zio=o("RobertaModel"),edo=o(" (RoBERTa model)"),odo=l(),Wu=a("li"),lZ=a("strong"),rdo=o("roformer"),tdo=o(" \u2014 "),PS=a("a"),ado=o("RoFormerModel"),sdo=o(" (RoFormer model)"),ndo=l(),Qu=a("li"),iZ=a("strong"),ldo=o("segformer"),ido=o(" \u2014 "),$S=a("a"),ddo=o("SegformerModel"),cdo=o(" (SegFormer model)"),mdo=l(),Hu=a("li"),dZ=a("strong"),fdo=o("sew"),gdo=o(" \u2014 "),IS=a("a"),hdo=o("SEWModel"),udo=o(" (SEW model)"),pdo=l(),Uu=a("li"),cZ=a("strong"),_do=o("sew-d"),bdo=o(" \u2014 "),jS=a("a"),vdo=o("SEWDModel"),Tdo=o(" (SEW-D model)"),Fdo=l(),Ju=a("li"),mZ=a("strong"),Cdo=o("speech_to_text"),Mdo=o(" \u2014 "),DS=a("a"),Edo=o("Speech2TextModel"),ydo=o(" (Speech2Text model)"),wdo=l(),Yu=a("li"),fZ=a("strong"),Ado=o("splinter"),Ldo=o(" \u2014 "),NS=a("a"),Bdo=o("SplinterModel"),xdo=o(" (Splinter model)"),kdo=l(),Ku=a("li"),gZ=a("strong"),Rdo=o("squeezebert"),Sdo=o(" \u2014 "),qS=a("a"),Pdo=o("SqueezeBertModel"),$do=o(" (SqueezeBERT model)"),Ido=l(),Zu=a("li"),hZ=a("strong"),jdo=o("swin"),Ddo=o(" \u2014 "),OS=a("a"),Ndo=o("SwinModel"),qdo=o(" (Swin model)"),Odo=l(),ep=a("li"),uZ=a("strong"),Gdo=o("t5"),Xdo=o(" \u2014 "),GS=a("a"),Vdo=o("T5Model"),zdo=o(" (T5 model)"),Wdo=l(),op=a("li"),pZ=a("strong"),Qdo=o("tapas"),Hdo=o(" \u2014 "),XS=a("a"),Udo=o("TapasModel"),Jdo=o(" (TAPAS model)"),Ydo=l(),rp=a("li"),_Z=a("strong"),Kdo=o("transfo-xl"),Zdo=o(" \u2014 "),VS=a("a"),eco=o("TransfoXLModel"),oco=o(" (Transformer-XL model)"),rco=l(),tp=a("li"),bZ=a("strong"),tco=o("unispeech"),aco=o(" \u2014 "),zS=a("a"),sco=o("UniSpeechModel"),nco=o(" (UniSpeech model)"),lco=l(),ap=a("li"),vZ=a("strong"),ico=o("unispeech-sat"),dco=o(" \u2014 "),WS=a("a"),cco=o("UniSpeechSatModel"),mco=o(" (UniSpeechSat model)"),fco=l(),sp=a("li"),TZ=a("strong"),gco=o("vilt"),hco=o(" \u2014 "),QS=a("a"),uco=o("ViltModel"),pco=o(" (ViLT model)"),_co=l(),np=a("li"),FZ=a("strong"),bco=o("vision-text-dual-encoder"),vco=o(" \u2014 "),HS=a("a"),Tco=o("VisionTextDualEncoderModel"),Fco=o(" (VisionTextDualEncoder model)"),Cco=l(),lp=a("li"),CZ=a("strong"),Mco=o("visual_bert"),Eco=o(" \u2014 "),US=a("a"),yco=o("VisualBertModel"),wco=o(" (VisualBert model)"),Aco=l(),ip=a("li"),MZ=a("strong"),Lco=o("vit"),Bco=o(" \u2014 "),JS=a("a"),xco=o("ViTModel"),kco=o(" (ViT model)"),Rco=l(),dp=a("li"),EZ=a("strong"),Sco=o("vit_mae"),Pco=o(" \u2014 "),YS=a("a"),$co=o("ViTMAEModel"),Ico=o(" (ViTMAE model)"),jco=l(),cp=a("li"),yZ=a("strong"),Dco=o("wav2vec2"),Nco=o(" \u2014 "),KS=a("a"),qco=o("Wav2Vec2Model"),Oco=o(" (Wav2Vec2 model)"),Gco=l(),mp=a("li"),wZ=a("strong"),Xco=o("wavlm"),Vco=o(" \u2014 "),ZS=a("a"),zco=o("WavLMModel"),Wco=o(" (WavLM model)"),Qco=l(),fp=a("li"),AZ=a("strong"),Hco=o("xglm"),Uco=o(" \u2014 "),eP=a("a"),Jco=o("XGLMModel"),Yco=o(" (XGLM model)"),Kco=l(),gp=a("li"),LZ=a("strong"),Zco=o("xlm"),emo=o(" \u2014 "),oP=a("a"),omo=o("XLMModel"),rmo=o(" (XLM model)"),tmo=l(),hp=a("li"),BZ=a("strong"),amo=o("xlm-prophetnet"),smo=o(" \u2014 "),rP=a("a"),nmo=o("XLMProphetNetModel"),lmo=o(" (XLMProphetNet model)"),imo=l(),up=a("li"),xZ=a("strong"),dmo=o("xlm-roberta"),cmo=o(" \u2014 "),tP=a("a"),mmo=o("XLMRobertaModel"),fmo=o(" (XLM-RoBERTa model)"),gmo=l(),pp=a("li"),kZ=a("strong"),hmo=o("xlm-roberta-xl"),umo=o(" \u2014 "),aP=a("a"),pmo=o("XLMRobertaXLModel"),_mo=o(" (XLM-RoBERTa-XL model)"),bmo=l(),_p=a("li"),RZ=a("strong"),vmo=o("xlnet"),Tmo=o(" \u2014 "),sP=a("a"),Fmo=o("XLNetModel"),Cmo=o(" (XLNet model)"),Mmo=l(),bp=a("li"),SZ=a("strong"),Emo=o("yoso"),ymo=o(" \u2014 "),nP=a("a"),wmo=o("YosoModel"),Amo=o(" (YOSO model)"),Lmo=l(),vp=a("p"),Bmo=o("The model is set in evaluation mode by default using "),PZ=a("code"),xmo=o("model.eval()"),kmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Z=a("code"),Rmo=o("model.train()"),Smo=l(),IZ=a("p"),Pmo=o("Examples:"),$mo=l(),m(jy.$$.fragment),jxe=l(),ed=a("h2"),Tp=a("a"),jZ=a("span"),m(Dy.$$.fragment),Imo=l(),DZ=a("span"),jmo=o("AutoModelForPreTraining"),Dxe=l(),Yo=a("div"),m(Ny.$$.fragment),Dmo=l(),od=a("p"),Nmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=a("code"),qmo=o("from_pretrained()"),Omo=o("class method or the "),qZ=a("code"),Gmo=o("from_config()"),Xmo=o(`class
method.`),Vmo=l(),qy=a("p"),zmo=o("This class cannot be instantiated directly using "),OZ=a("code"),Wmo=o("__init__()"),Qmo=o(" (throws an error)."),Hmo=l(),zr=a("div"),m(Oy.$$.fragment),Umo=l(),GZ=a("p"),Jmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ymo=l(),rd=a("p"),Kmo=o(`Note:
Loading a model from its configuration file does `),XZ=a("strong"),Zmo=o("not"),efo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("code"),ofo=o("from_pretrained()"),rfo=o("to load the model weights."),tfo=l(),zZ=a("p"),afo=o("Examples:"),sfo=l(),m(Gy.$$.fragment),nfo=l(),Ne=a("div"),m(Xy.$$.fragment),lfo=l(),WZ=a("p"),ifo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dfo=l(),za=a("p"),cfo=o("The model class to instantiate is selected based on the "),QZ=a("code"),mfo=o("model_type"),ffo=o(` property of the config object (either
passed as an argument or loaded from `),HZ=a("code"),gfo=o("pretrained_model_name_or_path"),hfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UZ=a("code"),ufo=o("pretrained_model_name_or_path"),pfo=o(":"),_fo=l(),k=a("ul"),Fp=a("li"),JZ=a("strong"),bfo=o("albert"),vfo=o(" \u2014 "),lP=a("a"),Tfo=o("AlbertForPreTraining"),Ffo=o(" (ALBERT model)"),Cfo=l(),Cp=a("li"),YZ=a("strong"),Mfo=o("bart"),Efo=o(" \u2014 "),iP=a("a"),yfo=o("BartForConditionalGeneration"),wfo=o(" (BART model)"),Afo=l(),Mp=a("li"),KZ=a("strong"),Lfo=o("bert"),Bfo=o(" \u2014 "),dP=a("a"),xfo=o("BertForPreTraining"),kfo=o(" (BERT model)"),Rfo=l(),Ep=a("li"),ZZ=a("strong"),Sfo=o("big_bird"),Pfo=o(" \u2014 "),cP=a("a"),$fo=o("BigBirdForPreTraining"),Ifo=o(" (BigBird model)"),jfo=l(),yp=a("li"),eee=a("strong"),Dfo=o("camembert"),Nfo=o(" \u2014 "),mP=a("a"),qfo=o("CamembertForMaskedLM"),Ofo=o(" (CamemBERT model)"),Gfo=l(),wp=a("li"),oee=a("strong"),Xfo=o("ctrl"),Vfo=o(" \u2014 "),fP=a("a"),zfo=o("CTRLLMHeadModel"),Wfo=o(" (CTRL model)"),Qfo=l(),Ap=a("li"),ree=a("strong"),Hfo=o("data2vec-text"),Ufo=o(" \u2014 "),gP=a("a"),Jfo=o("Data2VecTextForMaskedLM"),Yfo=o(" (Data2VecText model)"),Kfo=l(),Lp=a("li"),tee=a("strong"),Zfo=o("deberta"),ego=o(" \u2014 "),hP=a("a"),ogo=o("DebertaForMaskedLM"),rgo=o(" (DeBERTa model)"),tgo=l(),Bp=a("li"),aee=a("strong"),ago=o("deberta-v2"),sgo=o(" \u2014 "),uP=a("a"),ngo=o("DebertaV2ForMaskedLM"),lgo=o(" (DeBERTa-v2 model)"),igo=l(),xp=a("li"),see=a("strong"),dgo=o("distilbert"),cgo=o(" \u2014 "),pP=a("a"),mgo=o("DistilBertForMaskedLM"),fgo=o(" (DistilBERT model)"),ggo=l(),kp=a("li"),nee=a("strong"),hgo=o("electra"),ugo=o(" \u2014 "),_P=a("a"),pgo=o("ElectraForPreTraining"),_go=o(" (ELECTRA model)"),bgo=l(),Rp=a("li"),lee=a("strong"),vgo=o("flaubert"),Tgo=o(" \u2014 "),bP=a("a"),Fgo=o("FlaubertWithLMHeadModel"),Cgo=o(" (FlauBERT model)"),Mgo=l(),Sp=a("li"),iee=a("strong"),Ego=o("fnet"),ygo=o(" \u2014 "),vP=a("a"),wgo=o("FNetForPreTraining"),Ago=o(" (FNet model)"),Lgo=l(),Pp=a("li"),dee=a("strong"),Bgo=o("fsmt"),xgo=o(" \u2014 "),TP=a("a"),kgo=o("FSMTForConditionalGeneration"),Rgo=o(" (FairSeq Machine-Translation model)"),Sgo=l(),$p=a("li"),cee=a("strong"),Pgo=o("funnel"),$go=o(" \u2014 "),FP=a("a"),Igo=o("FunnelForPreTraining"),jgo=o(" (Funnel Transformer model)"),Dgo=l(),Ip=a("li"),mee=a("strong"),Ngo=o("gpt2"),qgo=o(" \u2014 "),CP=a("a"),Ogo=o("GPT2LMHeadModel"),Ggo=o(" (OpenAI GPT-2 model)"),Xgo=l(),jp=a("li"),fee=a("strong"),Vgo=o("ibert"),zgo=o(" \u2014 "),MP=a("a"),Wgo=o("IBertForMaskedLM"),Qgo=o(" (I-BERT model)"),Hgo=l(),Dp=a("li"),gee=a("strong"),Ugo=o("layoutlm"),Jgo=o(" \u2014 "),EP=a("a"),Ygo=o("LayoutLMForMaskedLM"),Kgo=o(" (LayoutLM model)"),Zgo=l(),Np=a("li"),hee=a("strong"),eho=o("longformer"),oho=o(" \u2014 "),yP=a("a"),rho=o("LongformerForMaskedLM"),tho=o(" (Longformer model)"),aho=l(),qp=a("li"),uee=a("strong"),sho=o("lxmert"),nho=o(" \u2014 "),wP=a("a"),lho=o("LxmertForPreTraining"),iho=o(" (LXMERT model)"),dho=l(),Op=a("li"),pee=a("strong"),cho=o("megatron-bert"),mho=o(" \u2014 "),AP=a("a"),fho=o("MegatronBertForPreTraining"),gho=o(" (MegatronBert model)"),hho=l(),Gp=a("li"),_ee=a("strong"),uho=o("mobilebert"),pho=o(" \u2014 "),LP=a("a"),_ho=o("MobileBertForPreTraining"),bho=o(" (MobileBERT model)"),vho=l(),Xp=a("li"),bee=a("strong"),Tho=o("mpnet"),Fho=o(" \u2014 "),BP=a("a"),Cho=o("MPNetForMaskedLM"),Mho=o(" (MPNet model)"),Eho=l(),Vp=a("li"),vee=a("strong"),yho=o("openai-gpt"),who=o(" \u2014 "),xP=a("a"),Aho=o("OpenAIGPTLMHeadModel"),Lho=o(" (OpenAI GPT model)"),Bho=l(),zp=a("li"),Tee=a("strong"),xho=o("retribert"),kho=o(" \u2014 "),kP=a("a"),Rho=o("RetriBertModel"),Sho=o(" (RetriBERT model)"),Pho=l(),Wp=a("li"),Fee=a("strong"),$ho=o("roberta"),Iho=o(" \u2014 "),RP=a("a"),jho=o("RobertaForMaskedLM"),Dho=o(" (RoBERTa model)"),Nho=l(),Qp=a("li"),Cee=a("strong"),qho=o("squeezebert"),Oho=o(" \u2014 "),SP=a("a"),Gho=o("SqueezeBertForMaskedLM"),Xho=o(" (SqueezeBERT model)"),Vho=l(),Hp=a("li"),Mee=a("strong"),zho=o("t5"),Who=o(" \u2014 "),PP=a("a"),Qho=o("T5ForConditionalGeneration"),Hho=o(" (T5 model)"),Uho=l(),Up=a("li"),Eee=a("strong"),Jho=o("tapas"),Yho=o(" \u2014 "),$P=a("a"),Kho=o("TapasForMaskedLM"),Zho=o(" (TAPAS model)"),euo=l(),Jp=a("li"),yee=a("strong"),ouo=o("transfo-xl"),ruo=o(" \u2014 "),IP=a("a"),tuo=o("TransfoXLLMHeadModel"),auo=o(" (Transformer-XL model)"),suo=l(),Yp=a("li"),wee=a("strong"),nuo=o("unispeech"),luo=o(" \u2014 "),jP=a("a"),iuo=o("UniSpeechForPreTraining"),duo=o(" (UniSpeech model)"),cuo=l(),Kp=a("li"),Aee=a("strong"),muo=o("unispeech-sat"),fuo=o(" \u2014 "),DP=a("a"),guo=o("UniSpeechSatForPreTraining"),huo=o(" (UniSpeechSat model)"),uuo=l(),Zp=a("li"),Lee=a("strong"),puo=o("visual_bert"),_uo=o(" \u2014 "),NP=a("a"),buo=o("VisualBertForPreTraining"),vuo=o(" (VisualBert model)"),Tuo=l(),e_=a("li"),Bee=a("strong"),Fuo=o("vit_mae"),Cuo=o(" \u2014 "),qP=a("a"),Muo=o("ViTMAEForPreTraining"),Euo=o(" (ViTMAE model)"),yuo=l(),o_=a("li"),xee=a("strong"),wuo=o("wav2vec2"),Auo=o(" \u2014 "),OP=a("a"),Luo=o("Wav2Vec2ForPreTraining"),Buo=o(" (Wav2Vec2 model)"),xuo=l(),r_=a("li"),kee=a("strong"),kuo=o("xlm"),Ruo=o(" \u2014 "),GP=a("a"),Suo=o("XLMWithLMHeadModel"),Puo=o(" (XLM model)"),$uo=l(),t_=a("li"),Ree=a("strong"),Iuo=o("xlm-roberta"),juo=o(" \u2014 "),XP=a("a"),Duo=o("XLMRobertaForMaskedLM"),Nuo=o(" (XLM-RoBERTa model)"),quo=l(),a_=a("li"),See=a("strong"),Ouo=o("xlm-roberta-xl"),Guo=o(" \u2014 "),VP=a("a"),Xuo=o("XLMRobertaXLForMaskedLM"),Vuo=o(" (XLM-RoBERTa-XL model)"),zuo=l(),s_=a("li"),Pee=a("strong"),Wuo=o("xlnet"),Quo=o(" \u2014 "),zP=a("a"),Huo=o("XLNetLMHeadModel"),Uuo=o(" (XLNet model)"),Juo=l(),n_=a("p"),Yuo=o("The model is set in evaluation mode by default using "),$ee=a("code"),Kuo=o("model.eval()"),Zuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iee=a("code"),epo=o("model.train()"),opo=l(),jee=a("p"),rpo=o("Examples:"),tpo=l(),m(Vy.$$.fragment),Nxe=l(),td=a("h2"),l_=a("a"),Dee=a("span"),m(zy.$$.fragment),apo=l(),Nee=a("span"),spo=o("AutoModelForCausalLM"),qxe=l(),Ko=a("div"),m(Wy.$$.fragment),npo=l(),ad=a("p"),lpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qee=a("code"),ipo=o("from_pretrained()"),dpo=o("class method or the "),Oee=a("code"),cpo=o("from_config()"),mpo=o(`class
method.`),fpo=l(),Qy=a("p"),gpo=o("This class cannot be instantiated directly using "),Gee=a("code"),hpo=o("__init__()"),upo=o(" (throws an error)."),ppo=l(),Wr=a("div"),m(Hy.$$.fragment),_po=l(),Xee=a("p"),bpo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vpo=l(),sd=a("p"),Tpo=o(`Note:
Loading a model from its configuration file does `),Vee=a("strong"),Fpo=o("not"),Cpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("code"),Mpo=o("from_pretrained()"),Epo=o("to load the model weights."),ypo=l(),Wee=a("p"),wpo=o("Examples:"),Apo=l(),m(Uy.$$.fragment),Lpo=l(),qe=a("div"),m(Jy.$$.fragment),Bpo=l(),Qee=a("p"),xpo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kpo=l(),Wa=a("p"),Rpo=o("The model class to instantiate is selected based on the "),Hee=a("code"),Spo=o("model_type"),Ppo=o(` property of the config object (either
passed as an argument or loaded from `),Uee=a("code"),$po=o("pretrained_model_name_or_path"),Ipo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jee=a("code"),jpo=o("pretrained_model_name_or_path"),Dpo=o(":"),Npo=l(),$=a("ul"),i_=a("li"),Yee=a("strong"),qpo=o("bart"),Opo=o(" \u2014 "),WP=a("a"),Gpo=o("BartForCausalLM"),Xpo=o(" (BART model)"),Vpo=l(),d_=a("li"),Kee=a("strong"),zpo=o("bert"),Wpo=o(" \u2014 "),QP=a("a"),Qpo=o("BertLMHeadModel"),Hpo=o(" (BERT model)"),Upo=l(),c_=a("li"),Zee=a("strong"),Jpo=o("bert-generation"),Ypo=o(" \u2014 "),HP=a("a"),Kpo=o("BertGenerationDecoder"),Zpo=o(" (Bert Generation model)"),e_o=l(),m_=a("li"),eoe=a("strong"),o_o=o("big_bird"),r_o=o(" \u2014 "),UP=a("a"),t_o=o("BigBirdForCausalLM"),a_o=o(" (BigBird model)"),s_o=l(),f_=a("li"),ooe=a("strong"),n_o=o("bigbird_pegasus"),l_o=o(" \u2014 "),JP=a("a"),i_o=o("BigBirdPegasusForCausalLM"),d_o=o(" (BigBirdPegasus model)"),c_o=l(),g_=a("li"),roe=a("strong"),m_o=o("blenderbot"),f_o=o(" \u2014 "),YP=a("a"),g_o=o("BlenderbotForCausalLM"),h_o=o(" (Blenderbot model)"),u_o=l(),h_=a("li"),toe=a("strong"),p_o=o("blenderbot-small"),__o=o(" \u2014 "),KP=a("a"),b_o=o("BlenderbotSmallForCausalLM"),v_o=o(" (BlenderbotSmall model)"),T_o=l(),u_=a("li"),aoe=a("strong"),F_o=o("camembert"),C_o=o(" \u2014 "),ZP=a("a"),M_o=o("CamembertForCausalLM"),E_o=o(" (CamemBERT model)"),y_o=l(),p_=a("li"),soe=a("strong"),w_o=o("ctrl"),A_o=o(" \u2014 "),e$=a("a"),L_o=o("CTRLLMHeadModel"),B_o=o(" (CTRL model)"),x_o=l(),__=a("li"),noe=a("strong"),k_o=o("data2vec-text"),R_o=o(" \u2014 "),o$=a("a"),S_o=o("Data2VecTextForCausalLM"),P_o=o(" (Data2VecText model)"),$_o=l(),b_=a("li"),loe=a("strong"),I_o=o("electra"),j_o=o(" \u2014 "),r$=a("a"),D_o=o("ElectraForCausalLM"),N_o=o(" (ELECTRA model)"),q_o=l(),v_=a("li"),ioe=a("strong"),O_o=o("gpt2"),G_o=o(" \u2014 "),t$=a("a"),X_o=o("GPT2LMHeadModel"),V_o=o(" (OpenAI GPT-2 model)"),z_o=l(),T_=a("li"),doe=a("strong"),W_o=o("gpt_neo"),Q_o=o(" \u2014 "),a$=a("a"),H_o=o("GPTNeoForCausalLM"),U_o=o(" (GPT Neo model)"),J_o=l(),F_=a("li"),coe=a("strong"),Y_o=o("gptj"),K_o=o(" \u2014 "),s$=a("a"),Z_o=o("GPTJForCausalLM"),ebo=o(" (GPT-J model)"),obo=l(),C_=a("li"),moe=a("strong"),rbo=o("marian"),tbo=o(" \u2014 "),n$=a("a"),abo=o("MarianForCausalLM"),sbo=o(" (Marian model)"),nbo=l(),M_=a("li"),foe=a("strong"),lbo=o("mbart"),ibo=o(" \u2014 "),l$=a("a"),dbo=o("MBartForCausalLM"),cbo=o(" (mBART model)"),mbo=l(),E_=a("li"),goe=a("strong"),fbo=o("megatron-bert"),gbo=o(" \u2014 "),i$=a("a"),hbo=o("MegatronBertForCausalLM"),ubo=o(" (MegatronBert model)"),pbo=l(),y_=a("li"),hoe=a("strong"),_bo=o("openai-gpt"),bbo=o(" \u2014 "),d$=a("a"),vbo=o("OpenAIGPTLMHeadModel"),Tbo=o(" (OpenAI GPT model)"),Fbo=l(),w_=a("li"),uoe=a("strong"),Cbo=o("pegasus"),Mbo=o(" \u2014 "),c$=a("a"),Ebo=o("PegasusForCausalLM"),ybo=o(" (Pegasus model)"),wbo=l(),A_=a("li"),poe=a("strong"),Abo=o("plbart"),Lbo=o(" \u2014 "),m$=a("a"),Bbo=o("PLBartForCausalLM"),xbo=o(" (PLBart model)"),kbo=l(),L_=a("li"),_oe=a("strong"),Rbo=o("prophetnet"),Sbo=o(" \u2014 "),f$=a("a"),Pbo=o("ProphetNetForCausalLM"),$bo=o(" (ProphetNet model)"),Ibo=l(),B_=a("li"),boe=a("strong"),jbo=o("qdqbert"),Dbo=o(" \u2014 "),g$=a("a"),Nbo=o("QDQBertLMHeadModel"),qbo=o(" (QDQBert model)"),Obo=l(),x_=a("li"),voe=a("strong"),Gbo=o("reformer"),Xbo=o(" \u2014 "),h$=a("a"),Vbo=o("ReformerModelWithLMHead"),zbo=o(" (Reformer model)"),Wbo=l(),k_=a("li"),Toe=a("strong"),Qbo=o("rembert"),Hbo=o(" \u2014 "),u$=a("a"),Ubo=o("RemBertForCausalLM"),Jbo=o(" (RemBERT model)"),Ybo=l(),R_=a("li"),Foe=a("strong"),Kbo=o("roberta"),Zbo=o(" \u2014 "),p$=a("a"),e2o=o("RobertaForCausalLM"),o2o=o(" (RoBERTa model)"),r2o=l(),S_=a("li"),Coe=a("strong"),t2o=o("roformer"),a2o=o(" \u2014 "),_$=a("a"),s2o=o("RoFormerForCausalLM"),n2o=o(" (RoFormer model)"),l2o=l(),P_=a("li"),Moe=a("strong"),i2o=o("speech_to_text_2"),d2o=o(" \u2014 "),b$=a("a"),c2o=o("Speech2Text2ForCausalLM"),m2o=o(" (Speech2Text2 model)"),f2o=l(),$_=a("li"),Eoe=a("strong"),g2o=o("transfo-xl"),h2o=o(" \u2014 "),v$=a("a"),u2o=o("TransfoXLLMHeadModel"),p2o=o(" (Transformer-XL model)"),_2o=l(),I_=a("li"),yoe=a("strong"),b2o=o("trocr"),v2o=o(" \u2014 "),T$=a("a"),T2o=o("TrOCRForCausalLM"),F2o=o(" (TrOCR model)"),C2o=l(),j_=a("li"),woe=a("strong"),M2o=o("xglm"),E2o=o(" \u2014 "),F$=a("a"),y2o=o("XGLMForCausalLM"),w2o=o(" (XGLM model)"),A2o=l(),D_=a("li"),Aoe=a("strong"),L2o=o("xlm"),B2o=o(" \u2014 "),C$=a("a"),x2o=o("XLMWithLMHeadModel"),k2o=o(" (XLM model)"),R2o=l(),N_=a("li"),Loe=a("strong"),S2o=o("xlm-prophetnet"),P2o=o(" \u2014 "),M$=a("a"),$2o=o("XLMProphetNetForCausalLM"),I2o=o(" (XLMProphetNet model)"),j2o=l(),q_=a("li"),Boe=a("strong"),D2o=o("xlm-roberta"),N2o=o(" \u2014 "),E$=a("a"),q2o=o("XLMRobertaForCausalLM"),O2o=o(" (XLM-RoBERTa model)"),G2o=l(),O_=a("li"),xoe=a("strong"),X2o=o("xlm-roberta-xl"),V2o=o(" \u2014 "),y$=a("a"),z2o=o("XLMRobertaXLForCausalLM"),W2o=o(" (XLM-RoBERTa-XL model)"),Q2o=l(),G_=a("li"),koe=a("strong"),H2o=o("xlnet"),U2o=o(" \u2014 "),w$=a("a"),J2o=o("XLNetLMHeadModel"),Y2o=o(" (XLNet model)"),K2o=l(),X_=a("p"),Z2o=o("The model is set in evaluation mode by default using "),Roe=a("code"),evo=o("model.eval()"),ovo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Soe=a("code"),rvo=o("model.train()"),tvo=l(),Poe=a("p"),avo=o("Examples:"),svo=l(),m(Yy.$$.fragment),Oxe=l(),nd=a("h2"),V_=a("a"),$oe=a("span"),m(Ky.$$.fragment),nvo=l(),Ioe=a("span"),lvo=o("AutoModelForMaskedLM"),Gxe=l(),Zo=a("div"),m(Zy.$$.fragment),ivo=l(),ld=a("p"),dvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),joe=a("code"),cvo=o("from_pretrained()"),mvo=o("class method or the "),Doe=a("code"),fvo=o("from_config()"),gvo=o(`class
method.`),hvo=l(),ew=a("p"),uvo=o("This class cannot be instantiated directly using "),Noe=a("code"),pvo=o("__init__()"),_vo=o(" (throws an error)."),bvo=l(),Qr=a("div"),m(ow.$$.fragment),vvo=l(),qoe=a("p"),Tvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fvo=l(),id=a("p"),Cvo=o(`Note:
Loading a model from its configuration file does `),Ooe=a("strong"),Mvo=o("not"),Evo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("code"),yvo=o("from_pretrained()"),wvo=o("to load the model weights."),Avo=l(),Xoe=a("p"),Lvo=o("Examples:"),Bvo=l(),m(rw.$$.fragment),xvo=l(),Oe=a("div"),m(tw.$$.fragment),kvo=l(),Voe=a("p"),Rvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Svo=l(),Qa=a("p"),Pvo=o("The model class to instantiate is selected based on the "),zoe=a("code"),$vo=o("model_type"),Ivo=o(` property of the config object (either
passed as an argument or loaded from `),Woe=a("code"),jvo=o("pretrained_model_name_or_path"),Dvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qoe=a("code"),Nvo=o("pretrained_model_name_or_path"),qvo=o(":"),Ovo=l(),I=a("ul"),z_=a("li"),Hoe=a("strong"),Gvo=o("albert"),Xvo=o(" \u2014 "),A$=a("a"),Vvo=o("AlbertForMaskedLM"),zvo=o(" (ALBERT model)"),Wvo=l(),W_=a("li"),Uoe=a("strong"),Qvo=o("bart"),Hvo=o(" \u2014 "),L$=a("a"),Uvo=o("BartForConditionalGeneration"),Jvo=o(" (BART model)"),Yvo=l(),Q_=a("li"),Joe=a("strong"),Kvo=o("bert"),Zvo=o(" \u2014 "),B$=a("a"),eTo=o("BertForMaskedLM"),oTo=o(" (BERT model)"),rTo=l(),H_=a("li"),Yoe=a("strong"),tTo=o("big_bird"),aTo=o(" \u2014 "),x$=a("a"),sTo=o("BigBirdForMaskedLM"),nTo=o(" (BigBird model)"),lTo=l(),U_=a("li"),Koe=a("strong"),iTo=o("camembert"),dTo=o(" \u2014 "),k$=a("a"),cTo=o("CamembertForMaskedLM"),mTo=o(" (CamemBERT model)"),fTo=l(),J_=a("li"),Zoe=a("strong"),gTo=o("convbert"),hTo=o(" \u2014 "),R$=a("a"),uTo=o("ConvBertForMaskedLM"),pTo=o(" (ConvBERT model)"),_To=l(),Y_=a("li"),ere=a("strong"),bTo=o("data2vec-text"),vTo=o(" \u2014 "),S$=a("a"),TTo=o("Data2VecTextForMaskedLM"),FTo=o(" (Data2VecText model)"),CTo=l(),K_=a("li"),ore=a("strong"),MTo=o("deberta"),ETo=o(" \u2014 "),P$=a("a"),yTo=o("DebertaForMaskedLM"),wTo=o(" (DeBERTa model)"),ATo=l(),Z_=a("li"),rre=a("strong"),LTo=o("deberta-v2"),BTo=o(" \u2014 "),$$=a("a"),xTo=o("DebertaV2ForMaskedLM"),kTo=o(" (DeBERTa-v2 model)"),RTo=l(),eb=a("li"),tre=a("strong"),STo=o("distilbert"),PTo=o(" \u2014 "),I$=a("a"),$To=o("DistilBertForMaskedLM"),ITo=o(" (DistilBERT model)"),jTo=l(),ob=a("li"),are=a("strong"),DTo=o("electra"),NTo=o(" \u2014 "),j$=a("a"),qTo=o("ElectraForMaskedLM"),OTo=o(" (ELECTRA model)"),GTo=l(),rb=a("li"),sre=a("strong"),XTo=o("flaubert"),VTo=o(" \u2014 "),D$=a("a"),zTo=o("FlaubertWithLMHeadModel"),WTo=o(" (FlauBERT model)"),QTo=l(),tb=a("li"),nre=a("strong"),HTo=o("fnet"),UTo=o(" \u2014 "),N$=a("a"),JTo=o("FNetForMaskedLM"),YTo=o(" (FNet model)"),KTo=l(),ab=a("li"),lre=a("strong"),ZTo=o("funnel"),e1o=o(" \u2014 "),q$=a("a"),o1o=o("FunnelForMaskedLM"),r1o=o(" (Funnel Transformer model)"),t1o=l(),sb=a("li"),ire=a("strong"),a1o=o("ibert"),s1o=o(" \u2014 "),O$=a("a"),n1o=o("IBertForMaskedLM"),l1o=o(" (I-BERT model)"),i1o=l(),nb=a("li"),dre=a("strong"),d1o=o("layoutlm"),c1o=o(" \u2014 "),G$=a("a"),m1o=o("LayoutLMForMaskedLM"),f1o=o(" (LayoutLM model)"),g1o=l(),lb=a("li"),cre=a("strong"),h1o=o("longformer"),u1o=o(" \u2014 "),X$=a("a"),p1o=o("LongformerForMaskedLM"),_1o=o(" (Longformer model)"),b1o=l(),ib=a("li"),mre=a("strong"),v1o=o("mbart"),T1o=o(" \u2014 "),V$=a("a"),F1o=o("MBartForConditionalGeneration"),C1o=o(" (mBART model)"),M1o=l(),db=a("li"),fre=a("strong"),E1o=o("megatron-bert"),y1o=o(" \u2014 "),z$=a("a"),w1o=o("MegatronBertForMaskedLM"),A1o=o(" (MegatronBert model)"),L1o=l(),cb=a("li"),gre=a("strong"),B1o=o("mobilebert"),x1o=o(" \u2014 "),W$=a("a"),k1o=o("MobileBertForMaskedLM"),R1o=o(" (MobileBERT model)"),S1o=l(),mb=a("li"),hre=a("strong"),P1o=o("mpnet"),$1o=o(" \u2014 "),Q$=a("a"),I1o=o("MPNetForMaskedLM"),j1o=o(" (MPNet model)"),D1o=l(),fb=a("li"),ure=a("strong"),N1o=o("nystromformer"),q1o=o(" \u2014 "),H$=a("a"),O1o=o("NystromformerForMaskedLM"),G1o=o(" (Nystromformer model)"),X1o=l(),gb=a("li"),pre=a("strong"),V1o=o("perceiver"),z1o=o(" \u2014 "),U$=a("a"),W1o=o("PerceiverForMaskedLM"),Q1o=o(" (Perceiver model)"),H1o=l(),hb=a("li"),_re=a("strong"),U1o=o("qdqbert"),J1o=o(" \u2014 "),J$=a("a"),Y1o=o("QDQBertForMaskedLM"),K1o=o(" (QDQBert model)"),Z1o=l(),ub=a("li"),bre=a("strong"),eFo=o("reformer"),oFo=o(" \u2014 "),Y$=a("a"),rFo=o("ReformerForMaskedLM"),tFo=o(" (Reformer model)"),aFo=l(),pb=a("li"),vre=a("strong"),sFo=o("rembert"),nFo=o(" \u2014 "),K$=a("a"),lFo=o("RemBertForMaskedLM"),iFo=o(" (RemBERT model)"),dFo=l(),_b=a("li"),Tre=a("strong"),cFo=o("roberta"),mFo=o(" \u2014 "),Z$=a("a"),fFo=o("RobertaForMaskedLM"),gFo=o(" (RoBERTa model)"),hFo=l(),bb=a("li"),Fre=a("strong"),uFo=o("roformer"),pFo=o(" \u2014 "),eI=a("a"),_Fo=o("RoFormerForMaskedLM"),bFo=o(" (RoFormer model)"),vFo=l(),vb=a("li"),Cre=a("strong"),TFo=o("squeezebert"),FFo=o(" \u2014 "),oI=a("a"),CFo=o("SqueezeBertForMaskedLM"),MFo=o(" (SqueezeBERT model)"),EFo=l(),Tb=a("li"),Mre=a("strong"),yFo=o("tapas"),wFo=o(" \u2014 "),rI=a("a"),AFo=o("TapasForMaskedLM"),LFo=o(" (TAPAS model)"),BFo=l(),Fb=a("li"),Ere=a("strong"),xFo=o("wav2vec2"),kFo=o(" \u2014 "),yre=a("code"),RFo=o("Wav2Vec2ForMaskedLM"),SFo=o("(Wav2Vec2 model)"),PFo=l(),Cb=a("li"),wre=a("strong"),$Fo=o("xlm"),IFo=o(" \u2014 "),tI=a("a"),jFo=o("XLMWithLMHeadModel"),DFo=o(" (XLM model)"),NFo=l(),Mb=a("li"),Are=a("strong"),qFo=o("xlm-roberta"),OFo=o(" \u2014 "),aI=a("a"),GFo=o("XLMRobertaForMaskedLM"),XFo=o(" (XLM-RoBERTa model)"),VFo=l(),Eb=a("li"),Lre=a("strong"),zFo=o("xlm-roberta-xl"),WFo=o(" \u2014 "),sI=a("a"),QFo=o("XLMRobertaXLForMaskedLM"),HFo=o(" (XLM-RoBERTa-XL model)"),UFo=l(),yb=a("li"),Bre=a("strong"),JFo=o("yoso"),YFo=o(" \u2014 "),nI=a("a"),KFo=o("YosoForMaskedLM"),ZFo=o(" (YOSO model)"),eCo=l(),wb=a("p"),oCo=o("The model is set in evaluation mode by default using "),xre=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kre=a("code"),aCo=o("model.train()"),sCo=l(),Rre=a("p"),nCo=o("Examples:"),lCo=l(),m(aw.$$.fragment),Xxe=l(),dd=a("h2"),Ab=a("a"),Sre=a("span"),m(sw.$$.fragment),iCo=l(),Pre=a("span"),dCo=o("AutoModelForSeq2SeqLM"),Vxe=l(),er=a("div"),m(nw.$$.fragment),cCo=l(),cd=a("p"),mCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$re=a("code"),fCo=o("from_pretrained()"),gCo=o("class method or the "),Ire=a("code"),hCo=o("from_config()"),uCo=o(`class
method.`),pCo=l(),lw=a("p"),_Co=o("This class cannot be instantiated directly using "),jre=a("code"),bCo=o("__init__()"),vCo=o(" (throws an error)."),TCo=l(),Hr=a("div"),m(iw.$$.fragment),FCo=l(),Dre=a("p"),CCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MCo=l(),md=a("p"),ECo=o(`Note:
Loading a model from its configuration file does `),Nre=a("strong"),yCo=o("not"),wCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("code"),ACo=o("from_pretrained()"),LCo=o("to load the model weights."),BCo=l(),Ore=a("p"),xCo=o("Examples:"),kCo=l(),m(dw.$$.fragment),RCo=l(),Ge=a("div"),m(cw.$$.fragment),SCo=l(),Gre=a("p"),PCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Co=l(),Ha=a("p"),ICo=o("The model class to instantiate is selected based on the "),Xre=a("code"),jCo=o("model_type"),DCo=o(` property of the config object (either
passed as an argument or loaded from `),Vre=a("code"),NCo=o("pretrained_model_name_or_path"),qCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zre=a("code"),OCo=o("pretrained_model_name_or_path"),GCo=o(":"),XCo=l(),se=a("ul"),Lb=a("li"),Wre=a("strong"),VCo=o("bart"),zCo=o(" \u2014 "),lI=a("a"),WCo=o("BartForConditionalGeneration"),QCo=o(" (BART model)"),HCo=l(),Bb=a("li"),Qre=a("strong"),UCo=o("bigbird_pegasus"),JCo=o(" \u2014 "),iI=a("a"),YCo=o("BigBirdPegasusForConditionalGeneration"),KCo=o(" (BigBirdPegasus model)"),ZCo=l(),xb=a("li"),Hre=a("strong"),eMo=o("blenderbot"),oMo=o(" \u2014 "),dI=a("a"),rMo=o("BlenderbotForConditionalGeneration"),tMo=o(" (Blenderbot model)"),aMo=l(),kb=a("li"),Ure=a("strong"),sMo=o("blenderbot-small"),nMo=o(" \u2014 "),cI=a("a"),lMo=o("BlenderbotSmallForConditionalGeneration"),iMo=o(" (BlenderbotSmall model)"),dMo=l(),Rb=a("li"),Jre=a("strong"),cMo=o("encoder-decoder"),mMo=o(" \u2014 "),mI=a("a"),fMo=o("EncoderDecoderModel"),gMo=o(" (Encoder decoder model)"),hMo=l(),Sb=a("li"),Yre=a("strong"),uMo=o("fsmt"),pMo=o(" \u2014 "),fI=a("a"),_Mo=o("FSMTForConditionalGeneration"),bMo=o(" (FairSeq Machine-Translation model)"),vMo=l(),Pb=a("li"),Kre=a("strong"),TMo=o("led"),FMo=o(" \u2014 "),gI=a("a"),CMo=o("LEDForConditionalGeneration"),MMo=o(" (LED model)"),EMo=l(),$b=a("li"),Zre=a("strong"),yMo=o("m2m_100"),wMo=o(" \u2014 "),hI=a("a"),AMo=o("M2M100ForConditionalGeneration"),LMo=o(" (M2M100 model)"),BMo=l(),Ib=a("li"),ete=a("strong"),xMo=o("marian"),kMo=o(" \u2014 "),uI=a("a"),RMo=o("MarianMTModel"),SMo=o(" (Marian model)"),PMo=l(),jb=a("li"),ote=a("strong"),$Mo=o("mbart"),IMo=o(" \u2014 "),pI=a("a"),jMo=o("MBartForConditionalGeneration"),DMo=o(" (mBART model)"),NMo=l(),Db=a("li"),rte=a("strong"),qMo=o("mt5"),OMo=o(" \u2014 "),_I=a("a"),GMo=o("MT5ForConditionalGeneration"),XMo=o(" (mT5 model)"),VMo=l(),Nb=a("li"),tte=a("strong"),zMo=o("pegasus"),WMo=o(" \u2014 "),bI=a("a"),QMo=o("PegasusForConditionalGeneration"),HMo=o(" (Pegasus model)"),UMo=l(),qb=a("li"),ate=a("strong"),JMo=o("plbart"),YMo=o(" \u2014 "),vI=a("a"),KMo=o("PLBartForConditionalGeneration"),ZMo=o(" (PLBart model)"),e4o=l(),Ob=a("li"),ste=a("strong"),o4o=o("prophetnet"),r4o=o(" \u2014 "),TI=a("a"),t4o=o("ProphetNetForConditionalGeneration"),a4o=o(" (ProphetNet model)"),s4o=l(),Gb=a("li"),nte=a("strong"),n4o=o("t5"),l4o=o(" \u2014 "),FI=a("a"),i4o=o("T5ForConditionalGeneration"),d4o=o(" (T5 model)"),c4o=l(),Xb=a("li"),lte=a("strong"),m4o=o("xlm-prophetnet"),f4o=o(" \u2014 "),CI=a("a"),g4o=o("XLMProphetNetForConditionalGeneration"),h4o=o(" (XLMProphetNet model)"),u4o=l(),Vb=a("p"),p4o=o("The model is set in evaluation mode by default using "),ite=a("code"),_4o=o("model.eval()"),b4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=a("code"),v4o=o("model.train()"),T4o=l(),cte=a("p"),F4o=o("Examples:"),C4o=l(),m(mw.$$.fragment),zxe=l(),fd=a("h2"),zb=a("a"),mte=a("span"),m(fw.$$.fragment),M4o=l(),fte=a("span"),E4o=o("AutoModelForSequenceClassification"),Wxe=l(),or=a("div"),m(gw.$$.fragment),y4o=l(),gd=a("p"),w4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gte=a("code"),A4o=o("from_pretrained()"),L4o=o("class method or the "),hte=a("code"),B4o=o("from_config()"),x4o=o(`class
method.`),k4o=l(),hw=a("p"),R4o=o("This class cannot be instantiated directly using "),ute=a("code"),S4o=o("__init__()"),P4o=o(" (throws an error)."),$4o=l(),Ur=a("div"),m(uw.$$.fragment),I4o=l(),pte=a("p"),j4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),D4o=l(),hd=a("p"),N4o=o(`Note:
Loading a model from its configuration file does `),_te=a("strong"),q4o=o("not"),O4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),G4o=o("from_pretrained()"),X4o=o("to load the model weights."),V4o=l(),vte=a("p"),z4o=o("Examples:"),W4o=l(),m(pw.$$.fragment),Q4o=l(),Xe=a("div"),m(_w.$$.fragment),H4o=l(),Tte=a("p"),U4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J4o=l(),Ua=a("p"),Y4o=o("The model class to instantiate is selected based on the "),Fte=a("code"),K4o=o("model_type"),Z4o=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),eEo=o("pretrained_model_name_or_path"),oEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),rEo=o("pretrained_model_name_or_path"),tEo=o(":"),aEo=l(),A=a("ul"),Wb=a("li"),Ete=a("strong"),sEo=o("albert"),nEo=o(" \u2014 "),MI=a("a"),lEo=o("AlbertForSequenceClassification"),iEo=o(" (ALBERT model)"),dEo=l(),Qb=a("li"),yte=a("strong"),cEo=o("bart"),mEo=o(" \u2014 "),EI=a("a"),fEo=o("BartForSequenceClassification"),gEo=o(" (BART model)"),hEo=l(),Hb=a("li"),wte=a("strong"),uEo=o("bert"),pEo=o(" \u2014 "),yI=a("a"),_Eo=o("BertForSequenceClassification"),bEo=o(" (BERT model)"),vEo=l(),Ub=a("li"),Ate=a("strong"),TEo=o("big_bird"),FEo=o(" \u2014 "),wI=a("a"),CEo=o("BigBirdForSequenceClassification"),MEo=o(" (BigBird model)"),EEo=l(),Jb=a("li"),Lte=a("strong"),yEo=o("bigbird_pegasus"),wEo=o(" \u2014 "),AI=a("a"),AEo=o("BigBirdPegasusForSequenceClassification"),LEo=o(" (BigBirdPegasus model)"),BEo=l(),Yb=a("li"),Bte=a("strong"),xEo=o("camembert"),kEo=o(" \u2014 "),LI=a("a"),REo=o("CamembertForSequenceClassification"),SEo=o(" (CamemBERT model)"),PEo=l(),Kb=a("li"),xte=a("strong"),$Eo=o("canine"),IEo=o(" \u2014 "),BI=a("a"),jEo=o("CanineForSequenceClassification"),DEo=o(" (Canine model)"),NEo=l(),Zb=a("li"),kte=a("strong"),qEo=o("convbert"),OEo=o(" \u2014 "),xI=a("a"),GEo=o("ConvBertForSequenceClassification"),XEo=o(" (ConvBERT model)"),VEo=l(),e2=a("li"),Rte=a("strong"),zEo=o("ctrl"),WEo=o(" \u2014 "),kI=a("a"),QEo=o("CTRLForSequenceClassification"),HEo=o(" (CTRL model)"),UEo=l(),o2=a("li"),Ste=a("strong"),JEo=o("data2vec-text"),YEo=o(" \u2014 "),RI=a("a"),KEo=o("Data2VecTextForSequenceClassification"),ZEo=o(" (Data2VecText model)"),e3o=l(),r2=a("li"),Pte=a("strong"),o3o=o("deberta"),r3o=o(" \u2014 "),SI=a("a"),t3o=o("DebertaForSequenceClassification"),a3o=o(" (DeBERTa model)"),s3o=l(),t2=a("li"),$te=a("strong"),n3o=o("deberta-v2"),l3o=o(" \u2014 "),PI=a("a"),i3o=o("DebertaV2ForSequenceClassification"),d3o=o(" (DeBERTa-v2 model)"),c3o=l(),a2=a("li"),Ite=a("strong"),m3o=o("distilbert"),f3o=o(" \u2014 "),$I=a("a"),g3o=o("DistilBertForSequenceClassification"),h3o=o(" (DistilBERT model)"),u3o=l(),s2=a("li"),jte=a("strong"),p3o=o("electra"),_3o=o(" \u2014 "),II=a("a"),b3o=o("ElectraForSequenceClassification"),v3o=o(" (ELECTRA model)"),T3o=l(),n2=a("li"),Dte=a("strong"),F3o=o("flaubert"),C3o=o(" \u2014 "),jI=a("a"),M3o=o("FlaubertForSequenceClassification"),E3o=o(" (FlauBERT model)"),y3o=l(),l2=a("li"),Nte=a("strong"),w3o=o("fnet"),A3o=o(" \u2014 "),DI=a("a"),L3o=o("FNetForSequenceClassification"),B3o=o(" (FNet model)"),x3o=l(),i2=a("li"),qte=a("strong"),k3o=o("funnel"),R3o=o(" \u2014 "),NI=a("a"),S3o=o("FunnelForSequenceClassification"),P3o=o(" (Funnel Transformer model)"),$3o=l(),d2=a("li"),Ote=a("strong"),I3o=o("gpt2"),j3o=o(" \u2014 "),qI=a("a"),D3o=o("GPT2ForSequenceClassification"),N3o=o(" (OpenAI GPT-2 model)"),q3o=l(),c2=a("li"),Gte=a("strong"),O3o=o("gpt_neo"),G3o=o(" \u2014 "),OI=a("a"),X3o=o("GPTNeoForSequenceClassification"),V3o=o(" (GPT Neo model)"),z3o=l(),m2=a("li"),Xte=a("strong"),W3o=o("gptj"),Q3o=o(" \u2014 "),GI=a("a"),H3o=o("GPTJForSequenceClassification"),U3o=o(" (GPT-J model)"),J3o=l(),f2=a("li"),Vte=a("strong"),Y3o=o("ibert"),K3o=o(" \u2014 "),XI=a("a"),Z3o=o("IBertForSequenceClassification"),e5o=o(" (I-BERT model)"),o5o=l(),g2=a("li"),zte=a("strong"),r5o=o("layoutlm"),t5o=o(" \u2014 "),VI=a("a"),a5o=o("LayoutLMForSequenceClassification"),s5o=o(" (LayoutLM model)"),n5o=l(),h2=a("li"),Wte=a("strong"),l5o=o("layoutlmv2"),i5o=o(" \u2014 "),zI=a("a"),d5o=o("LayoutLMv2ForSequenceClassification"),c5o=o(" (LayoutLMv2 model)"),m5o=l(),u2=a("li"),Qte=a("strong"),f5o=o("led"),g5o=o(" \u2014 "),WI=a("a"),h5o=o("LEDForSequenceClassification"),u5o=o(" (LED model)"),p5o=l(),p2=a("li"),Hte=a("strong"),_5o=o("longformer"),b5o=o(" \u2014 "),QI=a("a"),v5o=o("LongformerForSequenceClassification"),T5o=o(" (Longformer model)"),F5o=l(),_2=a("li"),Ute=a("strong"),C5o=o("mbart"),M5o=o(" \u2014 "),HI=a("a"),E5o=o("MBartForSequenceClassification"),y5o=o(" (mBART model)"),w5o=l(),b2=a("li"),Jte=a("strong"),A5o=o("megatron-bert"),L5o=o(" \u2014 "),UI=a("a"),B5o=o("MegatronBertForSequenceClassification"),x5o=o(" (MegatronBert model)"),k5o=l(),v2=a("li"),Yte=a("strong"),R5o=o("mobilebert"),S5o=o(" \u2014 "),JI=a("a"),P5o=o("MobileBertForSequenceClassification"),$5o=o(" (MobileBERT model)"),I5o=l(),T2=a("li"),Kte=a("strong"),j5o=o("mpnet"),D5o=o(" \u2014 "),YI=a("a"),N5o=o("MPNetForSequenceClassification"),q5o=o(" (MPNet model)"),O5o=l(),F2=a("li"),Zte=a("strong"),G5o=o("nystromformer"),X5o=o(" \u2014 "),KI=a("a"),V5o=o("NystromformerForSequenceClassification"),z5o=o(" (Nystromformer model)"),W5o=l(),C2=a("li"),eae=a("strong"),Q5o=o("openai-gpt"),H5o=o(" \u2014 "),ZI=a("a"),U5o=o("OpenAIGPTForSequenceClassification"),J5o=o(" (OpenAI GPT model)"),Y5o=l(),M2=a("li"),oae=a("strong"),K5o=o("perceiver"),Z5o=o(" \u2014 "),ej=a("a"),eyo=o("PerceiverForSequenceClassification"),oyo=o(" (Perceiver model)"),ryo=l(),E2=a("li"),rae=a("strong"),tyo=o("plbart"),ayo=o(" \u2014 "),oj=a("a"),syo=o("PLBartForSequenceClassification"),nyo=o(" (PLBart model)"),lyo=l(),y2=a("li"),tae=a("strong"),iyo=o("qdqbert"),dyo=o(" \u2014 "),rj=a("a"),cyo=o("QDQBertForSequenceClassification"),myo=o(" (QDQBert model)"),fyo=l(),w2=a("li"),aae=a("strong"),gyo=o("reformer"),hyo=o(" \u2014 "),tj=a("a"),uyo=o("ReformerForSequenceClassification"),pyo=o(" (Reformer model)"),_yo=l(),A2=a("li"),sae=a("strong"),byo=o("rembert"),vyo=o(" \u2014 "),aj=a("a"),Tyo=o("RemBertForSequenceClassification"),Fyo=o(" (RemBERT model)"),Cyo=l(),L2=a("li"),nae=a("strong"),Myo=o("roberta"),Eyo=o(" \u2014 "),sj=a("a"),yyo=o("RobertaForSequenceClassification"),wyo=o(" (RoBERTa model)"),Ayo=l(),B2=a("li"),lae=a("strong"),Lyo=o("roformer"),Byo=o(" \u2014 "),nj=a("a"),xyo=o("RoFormerForSequenceClassification"),kyo=o(" (RoFormer model)"),Ryo=l(),x2=a("li"),iae=a("strong"),Syo=o("squeezebert"),Pyo=o(" \u2014 "),lj=a("a"),$yo=o("SqueezeBertForSequenceClassification"),Iyo=o(" (SqueezeBERT model)"),jyo=l(),k2=a("li"),dae=a("strong"),Dyo=o("tapas"),Nyo=o(" \u2014 "),ij=a("a"),qyo=o("TapasForSequenceClassification"),Oyo=o(" (TAPAS model)"),Gyo=l(),R2=a("li"),cae=a("strong"),Xyo=o("transfo-xl"),Vyo=o(" \u2014 "),dj=a("a"),zyo=o("TransfoXLForSequenceClassification"),Wyo=o(" (Transformer-XL model)"),Qyo=l(),S2=a("li"),mae=a("strong"),Hyo=o("xlm"),Uyo=o(" \u2014 "),cj=a("a"),Jyo=o("XLMForSequenceClassification"),Yyo=o(" (XLM model)"),Kyo=l(),P2=a("li"),fae=a("strong"),Zyo=o("xlm-roberta"),ewo=o(" \u2014 "),mj=a("a"),owo=o("XLMRobertaForSequenceClassification"),rwo=o(" (XLM-RoBERTa model)"),two=l(),$2=a("li"),gae=a("strong"),awo=o("xlm-roberta-xl"),swo=o(" \u2014 "),fj=a("a"),nwo=o("XLMRobertaXLForSequenceClassification"),lwo=o(" (XLM-RoBERTa-XL model)"),iwo=l(),I2=a("li"),hae=a("strong"),dwo=o("xlnet"),cwo=o(" \u2014 "),gj=a("a"),mwo=o("XLNetForSequenceClassification"),fwo=o(" (XLNet model)"),gwo=l(),j2=a("li"),uae=a("strong"),hwo=o("yoso"),uwo=o(" \u2014 "),hj=a("a"),pwo=o("YosoForSequenceClassification"),_wo=o(" (YOSO model)"),bwo=l(),D2=a("p"),vwo=o("The model is set in evaluation mode by default using "),pae=a("code"),Two=o("model.eval()"),Fwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ae=a("code"),Cwo=o("model.train()"),Mwo=l(),bae=a("p"),Ewo=o("Examples:"),ywo=l(),m(bw.$$.fragment),Qxe=l(),ud=a("h2"),N2=a("a"),vae=a("span"),m(vw.$$.fragment),wwo=l(),Tae=a("span"),Awo=o("AutoModelForMultipleChoice"),Hxe=l(),rr=a("div"),m(Tw.$$.fragment),Lwo=l(),pd=a("p"),Bwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fae=a("code"),xwo=o("from_pretrained()"),kwo=o("class method or the "),Cae=a("code"),Rwo=o("from_config()"),Swo=o(`class
method.`),Pwo=l(),Fw=a("p"),$wo=o("This class cannot be instantiated directly using "),Mae=a("code"),Iwo=o("__init__()"),jwo=o(" (throws an error)."),Dwo=l(),Jr=a("div"),m(Cw.$$.fragment),Nwo=l(),Eae=a("p"),qwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Owo=l(),_d=a("p"),Gwo=o(`Note:
Loading a model from its configuration file does `),yae=a("strong"),Xwo=o("not"),Vwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wae=a("code"),zwo=o("from_pretrained()"),Wwo=o("to load the model weights."),Qwo=l(),Aae=a("p"),Hwo=o("Examples:"),Uwo=l(),m(Mw.$$.fragment),Jwo=l(),Ve=a("div"),m(Ew.$$.fragment),Ywo=l(),Lae=a("p"),Kwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zwo=l(),Ja=a("p"),e6o=o("The model class to instantiate is selected based on the "),Bae=a("code"),o6o=o("model_type"),r6o=o(` property of the config object (either
passed as an argument or loaded from `),xae=a("code"),t6o=o("pretrained_model_name_or_path"),a6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kae=a("code"),s6o=o("pretrained_model_name_or_path"),n6o=o(":"),l6o=l(),O=a("ul"),q2=a("li"),Rae=a("strong"),i6o=o("albert"),d6o=o(" \u2014 "),uj=a("a"),c6o=o("AlbertForMultipleChoice"),m6o=o(" (ALBERT model)"),f6o=l(),O2=a("li"),Sae=a("strong"),g6o=o("bert"),h6o=o(" \u2014 "),pj=a("a"),u6o=o("BertForMultipleChoice"),p6o=o(" (BERT model)"),_6o=l(),G2=a("li"),Pae=a("strong"),b6o=o("big_bird"),v6o=o(" \u2014 "),_j=a("a"),T6o=o("BigBirdForMultipleChoice"),F6o=o(" (BigBird model)"),C6o=l(),X2=a("li"),$ae=a("strong"),M6o=o("camembert"),E6o=o(" \u2014 "),bj=a("a"),y6o=o("CamembertForMultipleChoice"),w6o=o(" (CamemBERT model)"),A6o=l(),V2=a("li"),Iae=a("strong"),L6o=o("canine"),B6o=o(" \u2014 "),vj=a("a"),x6o=o("CanineForMultipleChoice"),k6o=o(" (Canine model)"),R6o=l(),z2=a("li"),jae=a("strong"),S6o=o("convbert"),P6o=o(" \u2014 "),Tj=a("a"),$6o=o("ConvBertForMultipleChoice"),I6o=o(" (ConvBERT model)"),j6o=l(),W2=a("li"),Dae=a("strong"),D6o=o("data2vec-text"),N6o=o(" \u2014 "),Fj=a("a"),q6o=o("Data2VecTextForMultipleChoice"),O6o=o(" (Data2VecText model)"),G6o=l(),Q2=a("li"),Nae=a("strong"),X6o=o("distilbert"),V6o=o(" \u2014 "),Cj=a("a"),z6o=o("DistilBertForMultipleChoice"),W6o=o(" (DistilBERT model)"),Q6o=l(),H2=a("li"),qae=a("strong"),H6o=o("electra"),U6o=o(" \u2014 "),Mj=a("a"),J6o=o("ElectraForMultipleChoice"),Y6o=o(" (ELECTRA model)"),K6o=l(),U2=a("li"),Oae=a("strong"),Z6o=o("flaubert"),eAo=o(" \u2014 "),Ej=a("a"),oAo=o("FlaubertForMultipleChoice"),rAo=o(" (FlauBERT model)"),tAo=l(),J2=a("li"),Gae=a("strong"),aAo=o("fnet"),sAo=o(" \u2014 "),yj=a("a"),nAo=o("FNetForMultipleChoice"),lAo=o(" (FNet model)"),iAo=l(),Y2=a("li"),Xae=a("strong"),dAo=o("funnel"),cAo=o(" \u2014 "),wj=a("a"),mAo=o("FunnelForMultipleChoice"),fAo=o(" (Funnel Transformer model)"),gAo=l(),K2=a("li"),Vae=a("strong"),hAo=o("ibert"),uAo=o(" \u2014 "),Aj=a("a"),pAo=o("IBertForMultipleChoice"),_Ao=o(" (I-BERT model)"),bAo=l(),Z2=a("li"),zae=a("strong"),vAo=o("longformer"),TAo=o(" \u2014 "),Lj=a("a"),FAo=o("LongformerForMultipleChoice"),CAo=o(" (Longformer model)"),MAo=l(),ev=a("li"),Wae=a("strong"),EAo=o("megatron-bert"),yAo=o(" \u2014 "),Bj=a("a"),wAo=o("MegatronBertForMultipleChoice"),AAo=o(" (MegatronBert model)"),LAo=l(),ov=a("li"),Qae=a("strong"),BAo=o("mobilebert"),xAo=o(" \u2014 "),xj=a("a"),kAo=o("MobileBertForMultipleChoice"),RAo=o(" (MobileBERT model)"),SAo=l(),rv=a("li"),Hae=a("strong"),PAo=o("mpnet"),$Ao=o(" \u2014 "),kj=a("a"),IAo=o("MPNetForMultipleChoice"),jAo=o(" (MPNet model)"),DAo=l(),tv=a("li"),Uae=a("strong"),NAo=o("nystromformer"),qAo=o(" \u2014 "),Rj=a("a"),OAo=o("NystromformerForMultipleChoice"),GAo=o(" (Nystromformer model)"),XAo=l(),av=a("li"),Jae=a("strong"),VAo=o("qdqbert"),zAo=o(" \u2014 "),Sj=a("a"),WAo=o("QDQBertForMultipleChoice"),QAo=o(" (QDQBert model)"),HAo=l(),sv=a("li"),Yae=a("strong"),UAo=o("rembert"),JAo=o(" \u2014 "),Pj=a("a"),YAo=o("RemBertForMultipleChoice"),KAo=o(" (RemBERT model)"),ZAo=l(),nv=a("li"),Kae=a("strong"),e0o=o("roberta"),o0o=o(" \u2014 "),$j=a("a"),r0o=o("RobertaForMultipleChoice"),t0o=o(" (RoBERTa model)"),a0o=l(),lv=a("li"),Zae=a("strong"),s0o=o("roformer"),n0o=o(" \u2014 "),Ij=a("a"),l0o=o("RoFormerForMultipleChoice"),i0o=o(" (RoFormer model)"),d0o=l(),iv=a("li"),ese=a("strong"),c0o=o("squeezebert"),m0o=o(" \u2014 "),jj=a("a"),f0o=o("SqueezeBertForMultipleChoice"),g0o=o(" (SqueezeBERT model)"),h0o=l(),dv=a("li"),ose=a("strong"),u0o=o("xlm"),p0o=o(" \u2014 "),Dj=a("a"),_0o=o("XLMForMultipleChoice"),b0o=o(" (XLM model)"),v0o=l(),cv=a("li"),rse=a("strong"),T0o=o("xlm-roberta"),F0o=o(" \u2014 "),Nj=a("a"),C0o=o("XLMRobertaForMultipleChoice"),M0o=o(" (XLM-RoBERTa model)"),E0o=l(),mv=a("li"),tse=a("strong"),y0o=o("xlm-roberta-xl"),w0o=o(" \u2014 "),qj=a("a"),A0o=o("XLMRobertaXLForMultipleChoice"),L0o=o(" (XLM-RoBERTa-XL model)"),B0o=l(),fv=a("li"),ase=a("strong"),x0o=o("xlnet"),k0o=o(" \u2014 "),Oj=a("a"),R0o=o("XLNetForMultipleChoice"),S0o=o(" (XLNet model)"),P0o=l(),gv=a("li"),sse=a("strong"),$0o=o("yoso"),I0o=o(" \u2014 "),Gj=a("a"),j0o=o("YosoForMultipleChoice"),D0o=o(" (YOSO model)"),N0o=l(),hv=a("p"),q0o=o("The model is set in evaluation mode by default using "),nse=a("code"),O0o=o("model.eval()"),G0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lse=a("code"),X0o=o("model.train()"),V0o=l(),ise=a("p"),z0o=o("Examples:"),W0o=l(),m(yw.$$.fragment),Uxe=l(),bd=a("h2"),uv=a("a"),dse=a("span"),m(ww.$$.fragment),Q0o=l(),cse=a("span"),H0o=o("AutoModelForNextSentencePrediction"),Jxe=l(),tr=a("div"),m(Aw.$$.fragment),U0o=l(),vd=a("p"),J0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mse=a("code"),Y0o=o("from_pretrained()"),K0o=o("class method or the "),fse=a("code"),Z0o=o("from_config()"),eLo=o(`class
method.`),oLo=l(),Lw=a("p"),rLo=o("This class cannot be instantiated directly using "),gse=a("code"),tLo=o("__init__()"),aLo=o(" (throws an error)."),sLo=l(),Yr=a("div"),m(Bw.$$.fragment),nLo=l(),hse=a("p"),lLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iLo=l(),Td=a("p"),dLo=o(`Note:
Loading a model from its configuration file does `),use=a("strong"),cLo=o("not"),mLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=a("code"),fLo=o("from_pretrained()"),gLo=o("to load the model weights."),hLo=l(),_se=a("p"),uLo=o("Examples:"),pLo=l(),m(xw.$$.fragment),_Lo=l(),ze=a("div"),m(kw.$$.fragment),bLo=l(),bse=a("p"),vLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TLo=l(),Ya=a("p"),FLo=o("The model class to instantiate is selected based on the "),vse=a("code"),CLo=o("model_type"),MLo=o(` property of the config object (either
passed as an argument or loaded from `),Tse=a("code"),ELo=o("pretrained_model_name_or_path"),yLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fse=a("code"),wLo=o("pretrained_model_name_or_path"),ALo=o(":"),LLo=l(),da=a("ul"),pv=a("li"),Cse=a("strong"),BLo=o("bert"),xLo=o(" \u2014 "),Xj=a("a"),kLo=o("BertForNextSentencePrediction"),RLo=o(" (BERT model)"),SLo=l(),_v=a("li"),Mse=a("strong"),PLo=o("fnet"),$Lo=o(" \u2014 "),Vj=a("a"),ILo=o("FNetForNextSentencePrediction"),jLo=o(" (FNet model)"),DLo=l(),bv=a("li"),Ese=a("strong"),NLo=o("megatron-bert"),qLo=o(" \u2014 "),zj=a("a"),OLo=o("MegatronBertForNextSentencePrediction"),GLo=o(" (MegatronBert model)"),XLo=l(),vv=a("li"),yse=a("strong"),VLo=o("mobilebert"),zLo=o(" \u2014 "),Wj=a("a"),WLo=o("MobileBertForNextSentencePrediction"),QLo=o(" (MobileBERT model)"),HLo=l(),Tv=a("li"),wse=a("strong"),ULo=o("qdqbert"),JLo=o(" \u2014 "),Qj=a("a"),YLo=o("QDQBertForNextSentencePrediction"),KLo=o(" (QDQBert model)"),ZLo=l(),Fv=a("p"),e7o=o("The model is set in evaluation mode by default using "),Ase=a("code"),o7o=o("model.eval()"),r7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=a("code"),t7o=o("model.train()"),a7o=l(),Bse=a("p"),s7o=o("Examples:"),n7o=l(),m(Rw.$$.fragment),Yxe=l(),Fd=a("h2"),Cv=a("a"),xse=a("span"),m(Sw.$$.fragment),l7o=l(),kse=a("span"),i7o=o("AutoModelForTokenClassification"),Kxe=l(),ar=a("div"),m(Pw.$$.fragment),d7o=l(),Cd=a("p"),c7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rse=a("code"),m7o=o("from_pretrained()"),f7o=o("class method or the "),Sse=a("code"),g7o=o("from_config()"),h7o=o(`class
method.`),u7o=l(),$w=a("p"),p7o=o("This class cannot be instantiated directly using "),Pse=a("code"),_7o=o("__init__()"),b7o=o(" (throws an error)."),v7o=l(),Kr=a("div"),m(Iw.$$.fragment),T7o=l(),$se=a("p"),F7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),C7o=l(),Md=a("p"),M7o=o(`Note:
Loading a model from its configuration file does `),Ise=a("strong"),E7o=o("not"),y7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jse=a("code"),w7o=o("from_pretrained()"),A7o=o("to load the model weights."),L7o=l(),Dse=a("p"),B7o=o("Examples:"),x7o=l(),m(jw.$$.fragment),k7o=l(),We=a("div"),m(Dw.$$.fragment),R7o=l(),Nse=a("p"),S7o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),P7o=l(),Ka=a("p"),$7o=o("The model class to instantiate is selected based on the "),qse=a("code"),I7o=o("model_type"),j7o=o(` property of the config object (either
passed as an argument or loaded from `),Ose=a("code"),D7o=o("pretrained_model_name_or_path"),N7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gse=a("code"),q7o=o("pretrained_model_name_or_path"),O7o=o(":"),G7o=l(),N=a("ul"),Mv=a("li"),Xse=a("strong"),X7o=o("albert"),V7o=o(" \u2014 "),Hj=a("a"),z7o=o("AlbertForTokenClassification"),W7o=o(" (ALBERT model)"),Q7o=l(),Ev=a("li"),Vse=a("strong"),H7o=o("bert"),U7o=o(" \u2014 "),Uj=a("a"),J7o=o("BertForTokenClassification"),Y7o=o(" (BERT model)"),K7o=l(),yv=a("li"),zse=a("strong"),Z7o=o("big_bird"),e8o=o(" \u2014 "),Jj=a("a"),o8o=o("BigBirdForTokenClassification"),r8o=o(" (BigBird model)"),t8o=l(),wv=a("li"),Wse=a("strong"),a8o=o("camembert"),s8o=o(" \u2014 "),Yj=a("a"),n8o=o("CamembertForTokenClassification"),l8o=o(" (CamemBERT model)"),i8o=l(),Av=a("li"),Qse=a("strong"),d8o=o("canine"),c8o=o(" \u2014 "),Kj=a("a"),m8o=o("CanineForTokenClassification"),f8o=o(" (Canine model)"),g8o=l(),Lv=a("li"),Hse=a("strong"),h8o=o("convbert"),u8o=o(" \u2014 "),Zj=a("a"),p8o=o("ConvBertForTokenClassification"),_8o=o(" (ConvBERT model)"),b8o=l(),Bv=a("li"),Use=a("strong"),v8o=o("data2vec-text"),T8o=o(" \u2014 "),eD=a("a"),F8o=o("Data2VecTextForTokenClassification"),C8o=o(" (Data2VecText model)"),M8o=l(),xv=a("li"),Jse=a("strong"),E8o=o("deberta"),y8o=o(" \u2014 "),oD=a("a"),w8o=o("DebertaForTokenClassification"),A8o=o(" (DeBERTa model)"),L8o=l(),kv=a("li"),Yse=a("strong"),B8o=o("deberta-v2"),x8o=o(" \u2014 "),rD=a("a"),k8o=o("DebertaV2ForTokenClassification"),R8o=o(" (DeBERTa-v2 model)"),S8o=l(),Rv=a("li"),Kse=a("strong"),P8o=o("distilbert"),$8o=o(" \u2014 "),tD=a("a"),I8o=o("DistilBertForTokenClassification"),j8o=o(" (DistilBERT model)"),D8o=l(),Sv=a("li"),Zse=a("strong"),N8o=o("electra"),q8o=o(" \u2014 "),aD=a("a"),O8o=o("ElectraForTokenClassification"),G8o=o(" (ELECTRA model)"),X8o=l(),Pv=a("li"),ene=a("strong"),V8o=o("flaubert"),z8o=o(" \u2014 "),sD=a("a"),W8o=o("FlaubertForTokenClassification"),Q8o=o(" (FlauBERT model)"),H8o=l(),$v=a("li"),one=a("strong"),U8o=o("fnet"),J8o=o(" \u2014 "),nD=a("a"),Y8o=o("FNetForTokenClassification"),K8o=o(" (FNet model)"),Z8o=l(),Iv=a("li"),rne=a("strong"),e9o=o("funnel"),o9o=o(" \u2014 "),lD=a("a"),r9o=o("FunnelForTokenClassification"),t9o=o(" (Funnel Transformer model)"),a9o=l(),jv=a("li"),tne=a("strong"),s9o=o("gpt2"),n9o=o(" \u2014 "),iD=a("a"),l9o=o("GPT2ForTokenClassification"),i9o=o(" (OpenAI GPT-2 model)"),d9o=l(),Dv=a("li"),ane=a("strong"),c9o=o("ibert"),m9o=o(" \u2014 "),dD=a("a"),f9o=o("IBertForTokenClassification"),g9o=o(" (I-BERT model)"),h9o=l(),Nv=a("li"),sne=a("strong"),u9o=o("layoutlm"),p9o=o(" \u2014 "),cD=a("a"),_9o=o("LayoutLMForTokenClassification"),b9o=o(" (LayoutLM model)"),v9o=l(),qv=a("li"),nne=a("strong"),T9o=o("layoutlmv2"),F9o=o(" \u2014 "),mD=a("a"),C9o=o("LayoutLMv2ForTokenClassification"),M9o=o(" (LayoutLMv2 model)"),E9o=l(),Ov=a("li"),lne=a("strong"),y9o=o("longformer"),w9o=o(" \u2014 "),fD=a("a"),A9o=o("LongformerForTokenClassification"),L9o=o(" (Longformer model)"),B9o=l(),Gv=a("li"),ine=a("strong"),x9o=o("megatron-bert"),k9o=o(" \u2014 "),gD=a("a"),R9o=o("MegatronBertForTokenClassification"),S9o=o(" (MegatronBert model)"),P9o=l(),Xv=a("li"),dne=a("strong"),$9o=o("mobilebert"),I9o=o(" \u2014 "),hD=a("a"),j9o=o("MobileBertForTokenClassification"),D9o=o(" (MobileBERT model)"),N9o=l(),Vv=a("li"),cne=a("strong"),q9o=o("mpnet"),O9o=o(" \u2014 "),uD=a("a"),G9o=o("MPNetForTokenClassification"),X9o=o(" (MPNet model)"),V9o=l(),zv=a("li"),mne=a("strong"),z9o=o("nystromformer"),W9o=o(" \u2014 "),pD=a("a"),Q9o=o("NystromformerForTokenClassification"),H9o=o(" (Nystromformer model)"),U9o=l(),Wv=a("li"),fne=a("strong"),J9o=o("qdqbert"),Y9o=o(" \u2014 "),_D=a("a"),K9o=o("QDQBertForTokenClassification"),Z9o=o(" (QDQBert model)"),eBo=l(),Qv=a("li"),gne=a("strong"),oBo=o("rembert"),rBo=o(" \u2014 "),bD=a("a"),tBo=o("RemBertForTokenClassification"),aBo=o(" (RemBERT model)"),sBo=l(),Hv=a("li"),hne=a("strong"),nBo=o("roberta"),lBo=o(" \u2014 "),vD=a("a"),iBo=o("RobertaForTokenClassification"),dBo=o(" (RoBERTa model)"),cBo=l(),Uv=a("li"),une=a("strong"),mBo=o("roformer"),fBo=o(" \u2014 "),TD=a("a"),gBo=o("RoFormerForTokenClassification"),hBo=o(" (RoFormer model)"),uBo=l(),Jv=a("li"),pne=a("strong"),pBo=o("squeezebert"),_Bo=o(" \u2014 "),FD=a("a"),bBo=o("SqueezeBertForTokenClassification"),vBo=o(" (SqueezeBERT model)"),TBo=l(),Yv=a("li"),_ne=a("strong"),FBo=o("xlm"),CBo=o(" \u2014 "),CD=a("a"),MBo=o("XLMForTokenClassification"),EBo=o(" (XLM model)"),yBo=l(),Kv=a("li"),bne=a("strong"),wBo=o("xlm-roberta"),ABo=o(" \u2014 "),MD=a("a"),LBo=o("XLMRobertaForTokenClassification"),BBo=o(" (XLM-RoBERTa model)"),xBo=l(),Zv=a("li"),vne=a("strong"),kBo=o("xlm-roberta-xl"),RBo=o(" \u2014 "),ED=a("a"),SBo=o("XLMRobertaXLForTokenClassification"),PBo=o(" (XLM-RoBERTa-XL model)"),$Bo=l(),eT=a("li"),Tne=a("strong"),IBo=o("xlnet"),jBo=o(" \u2014 "),yD=a("a"),DBo=o("XLNetForTokenClassification"),NBo=o(" (XLNet model)"),qBo=l(),oT=a("li"),Fne=a("strong"),OBo=o("yoso"),GBo=o(" \u2014 "),wD=a("a"),XBo=o("YosoForTokenClassification"),VBo=o(" (YOSO model)"),zBo=l(),rT=a("p"),WBo=o("The model is set in evaluation mode by default using "),Cne=a("code"),QBo=o("model.eval()"),HBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),UBo=o("model.train()"),JBo=l(),Ene=a("p"),YBo=o("Examples:"),KBo=l(),m(Nw.$$.fragment),Zxe=l(),Ed=a("h2"),tT=a("a"),yne=a("span"),m(qw.$$.fragment),ZBo=l(),wne=a("span"),exo=o("AutoModelForQuestionAnswering"),eke=l(),sr=a("div"),m(Ow.$$.fragment),oxo=l(),yd=a("p"),rxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ane=a("code"),txo=o("from_pretrained()"),axo=o("class method or the "),Lne=a("code"),sxo=o("from_config()"),nxo=o(`class
method.`),lxo=l(),Gw=a("p"),ixo=o("This class cannot be instantiated directly using "),Bne=a("code"),dxo=o("__init__()"),cxo=o(" (throws an error)."),mxo=l(),Zr=a("div"),m(Xw.$$.fragment),fxo=l(),xne=a("p"),gxo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hxo=l(),wd=a("p"),uxo=o(`Note:
Loading a model from its configuration file does `),kne=a("strong"),pxo=o("not"),_xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rne=a("code"),bxo=o("from_pretrained()"),vxo=o("to load the model weights."),Txo=l(),Sne=a("p"),Fxo=o("Examples:"),Cxo=l(),m(Vw.$$.fragment),Mxo=l(),Qe=a("div"),m(zw.$$.fragment),Exo=l(),Pne=a("p"),yxo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wxo=l(),Za=a("p"),Axo=o("The model class to instantiate is selected based on the "),$ne=a("code"),Lxo=o("model_type"),Bxo=o(` property of the config object (either
passed as an argument or loaded from `),Ine=a("code"),xxo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=a("code"),Rxo=o("pretrained_model_name_or_path"),Sxo=o(":"),Pxo=l(),R=a("ul"),aT=a("li"),Dne=a("strong"),$xo=o("albert"),Ixo=o(" \u2014 "),AD=a("a"),jxo=o("AlbertForQuestionAnswering"),Dxo=o(" (ALBERT model)"),Nxo=l(),sT=a("li"),Nne=a("strong"),qxo=o("bart"),Oxo=o(" \u2014 "),LD=a("a"),Gxo=o("BartForQuestionAnswering"),Xxo=o(" (BART model)"),Vxo=l(),nT=a("li"),qne=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),BD=a("a"),Qxo=o("BertForQuestionAnswering"),Hxo=o(" (BERT model)"),Uxo=l(),lT=a("li"),One=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),xD=a("a"),Kxo=o("BigBirdForQuestionAnswering"),Zxo=o(" (BigBird model)"),eko=l(),iT=a("li"),Gne=a("strong"),oko=o("bigbird_pegasus"),rko=o(" \u2014 "),kD=a("a"),tko=o("BigBirdPegasusForQuestionAnswering"),ako=o(" (BigBirdPegasus model)"),sko=l(),dT=a("li"),Xne=a("strong"),nko=o("camembert"),lko=o(" \u2014 "),RD=a("a"),iko=o("CamembertForQuestionAnswering"),dko=o(" (CamemBERT model)"),cko=l(),cT=a("li"),Vne=a("strong"),mko=o("canine"),fko=o(" \u2014 "),SD=a("a"),gko=o("CanineForQuestionAnswering"),hko=o(" (Canine model)"),uko=l(),mT=a("li"),zne=a("strong"),pko=o("convbert"),_ko=o(" \u2014 "),PD=a("a"),bko=o("ConvBertForQuestionAnswering"),vko=o(" (ConvBERT model)"),Tko=l(),fT=a("li"),Wne=a("strong"),Fko=o("data2vec-text"),Cko=o(" \u2014 "),$D=a("a"),Mko=o("Data2VecTextForQuestionAnswering"),Eko=o(" (Data2VecText model)"),yko=l(),gT=a("li"),Qne=a("strong"),wko=o("deberta"),Ako=o(" \u2014 "),ID=a("a"),Lko=o("DebertaForQuestionAnswering"),Bko=o(" (DeBERTa model)"),xko=l(),hT=a("li"),Hne=a("strong"),kko=o("deberta-v2"),Rko=o(" \u2014 "),jD=a("a"),Sko=o("DebertaV2ForQuestionAnswering"),Pko=o(" (DeBERTa-v2 model)"),$ko=l(),uT=a("li"),Une=a("strong"),Iko=o("distilbert"),jko=o(" \u2014 "),DD=a("a"),Dko=o("DistilBertForQuestionAnswering"),Nko=o(" (DistilBERT model)"),qko=l(),pT=a("li"),Jne=a("strong"),Oko=o("electra"),Gko=o(" \u2014 "),ND=a("a"),Xko=o("ElectraForQuestionAnswering"),Vko=o(" (ELECTRA model)"),zko=l(),_T=a("li"),Yne=a("strong"),Wko=o("flaubert"),Qko=o(" \u2014 "),qD=a("a"),Hko=o("FlaubertForQuestionAnsweringSimple"),Uko=o(" (FlauBERT model)"),Jko=l(),bT=a("li"),Kne=a("strong"),Yko=o("fnet"),Kko=o(" \u2014 "),OD=a("a"),Zko=o("FNetForQuestionAnswering"),eRo=o(" (FNet model)"),oRo=l(),vT=a("li"),Zne=a("strong"),rRo=o("funnel"),tRo=o(" \u2014 "),GD=a("a"),aRo=o("FunnelForQuestionAnswering"),sRo=o(" (Funnel Transformer model)"),nRo=l(),TT=a("li"),ele=a("strong"),lRo=o("gptj"),iRo=o(" \u2014 "),XD=a("a"),dRo=o("GPTJForQuestionAnswering"),cRo=o(" (GPT-J model)"),mRo=l(),FT=a("li"),ole=a("strong"),fRo=o("ibert"),gRo=o(" \u2014 "),VD=a("a"),hRo=o("IBertForQuestionAnswering"),uRo=o(" (I-BERT model)"),pRo=l(),CT=a("li"),rle=a("strong"),_Ro=o("layoutlmv2"),bRo=o(" \u2014 "),zD=a("a"),vRo=o("LayoutLMv2ForQuestionAnswering"),TRo=o(" (LayoutLMv2 model)"),FRo=l(),MT=a("li"),tle=a("strong"),CRo=o("led"),MRo=o(" \u2014 "),WD=a("a"),ERo=o("LEDForQuestionAnswering"),yRo=o(" (LED model)"),wRo=l(),ET=a("li"),ale=a("strong"),ARo=o("longformer"),LRo=o(" \u2014 "),QD=a("a"),BRo=o("LongformerForQuestionAnswering"),xRo=o(" (Longformer model)"),kRo=l(),yT=a("li"),sle=a("strong"),RRo=o("lxmert"),SRo=o(" \u2014 "),HD=a("a"),PRo=o("LxmertForQuestionAnswering"),$Ro=o(" (LXMERT model)"),IRo=l(),wT=a("li"),nle=a("strong"),jRo=o("mbart"),DRo=o(" \u2014 "),UD=a("a"),NRo=o("MBartForQuestionAnswering"),qRo=o(" (mBART model)"),ORo=l(),AT=a("li"),lle=a("strong"),GRo=o("megatron-bert"),XRo=o(" \u2014 "),JD=a("a"),VRo=o("MegatronBertForQuestionAnswering"),zRo=o(" (MegatronBert model)"),WRo=l(),LT=a("li"),ile=a("strong"),QRo=o("mobilebert"),HRo=o(" \u2014 "),YD=a("a"),URo=o("MobileBertForQuestionAnswering"),JRo=o(" (MobileBERT model)"),YRo=l(),BT=a("li"),dle=a("strong"),KRo=o("mpnet"),ZRo=o(" \u2014 "),KD=a("a"),eSo=o("MPNetForQuestionAnswering"),oSo=o(" (MPNet model)"),rSo=l(),xT=a("li"),cle=a("strong"),tSo=o("nystromformer"),aSo=o(" \u2014 "),ZD=a("a"),sSo=o("NystromformerForQuestionAnswering"),nSo=o(" (Nystromformer model)"),lSo=l(),kT=a("li"),mle=a("strong"),iSo=o("qdqbert"),dSo=o(" \u2014 "),eN=a("a"),cSo=o("QDQBertForQuestionAnswering"),mSo=o(" (QDQBert model)"),fSo=l(),RT=a("li"),fle=a("strong"),gSo=o("reformer"),hSo=o(" \u2014 "),oN=a("a"),uSo=o("ReformerForQuestionAnswering"),pSo=o(" (Reformer model)"),_So=l(),ST=a("li"),gle=a("strong"),bSo=o("rembert"),vSo=o(" \u2014 "),rN=a("a"),TSo=o("RemBertForQuestionAnswering"),FSo=o(" (RemBERT model)"),CSo=l(),PT=a("li"),hle=a("strong"),MSo=o("roberta"),ESo=o(" \u2014 "),tN=a("a"),ySo=o("RobertaForQuestionAnswering"),wSo=o(" (RoBERTa model)"),ASo=l(),$T=a("li"),ule=a("strong"),LSo=o("roformer"),BSo=o(" \u2014 "),aN=a("a"),xSo=o("RoFormerForQuestionAnswering"),kSo=o(" (RoFormer model)"),RSo=l(),IT=a("li"),ple=a("strong"),SSo=o("splinter"),PSo=o(" \u2014 "),sN=a("a"),$So=o("SplinterForQuestionAnswering"),ISo=o(" (Splinter model)"),jSo=l(),jT=a("li"),_le=a("strong"),DSo=o("squeezebert"),NSo=o(" \u2014 "),nN=a("a"),qSo=o("SqueezeBertForQuestionAnswering"),OSo=o(" (SqueezeBERT model)"),GSo=l(),DT=a("li"),ble=a("strong"),XSo=o("xlm"),VSo=o(" \u2014 "),lN=a("a"),zSo=o("XLMForQuestionAnsweringSimple"),WSo=o(" (XLM model)"),QSo=l(),NT=a("li"),vle=a("strong"),HSo=o("xlm-roberta"),USo=o(" \u2014 "),iN=a("a"),JSo=o("XLMRobertaForQuestionAnswering"),YSo=o(" (XLM-RoBERTa model)"),KSo=l(),qT=a("li"),Tle=a("strong"),ZSo=o("xlm-roberta-xl"),ePo=o(" \u2014 "),dN=a("a"),oPo=o("XLMRobertaXLForQuestionAnswering"),rPo=o(" (XLM-RoBERTa-XL model)"),tPo=l(),OT=a("li"),Fle=a("strong"),aPo=o("xlnet"),sPo=o(" \u2014 "),cN=a("a"),nPo=o("XLNetForQuestionAnsweringSimple"),lPo=o(" (XLNet model)"),iPo=l(),GT=a("li"),Cle=a("strong"),dPo=o("yoso"),cPo=o(" \u2014 "),mN=a("a"),mPo=o("YosoForQuestionAnswering"),fPo=o(" (YOSO model)"),gPo=l(),XT=a("p"),hPo=o("The model is set in evaluation mode by default using "),Mle=a("code"),uPo=o("model.eval()"),pPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=a("code"),_Po=o("model.train()"),bPo=l(),yle=a("p"),vPo=o("Examples:"),TPo=l(),m(Ww.$$.fragment),oke=l(),Ad=a("h2"),VT=a("a"),wle=a("span"),m(Qw.$$.fragment),FPo=l(),Ale=a("span"),CPo=o("AutoModelForTableQuestionAnswering"),rke=l(),nr=a("div"),m(Hw.$$.fragment),MPo=l(),Ld=a("p"),EPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lle=a("code"),yPo=o("from_pretrained()"),wPo=o("class method or the "),Ble=a("code"),APo=o("from_config()"),LPo=o(`class
method.`),BPo=l(),Uw=a("p"),xPo=o("This class cannot be instantiated directly using "),xle=a("code"),kPo=o("__init__()"),RPo=o(" (throws an error)."),SPo=l(),et=a("div"),m(Jw.$$.fragment),PPo=l(),kle=a("p"),$Po=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),IPo=l(),Bd=a("p"),jPo=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),DPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=a("code"),qPo=o("from_pretrained()"),OPo=o("to load the model weights."),GPo=l(),Ple=a("p"),XPo=o("Examples:"),VPo=l(),m(Yw.$$.fragment),zPo=l(),He=a("div"),m(Kw.$$.fragment),WPo=l(),$le=a("p"),QPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HPo=l(),es=a("p"),UPo=o("The model class to instantiate is selected based on the "),Ile=a("code"),JPo=o("model_type"),YPo=o(` property of the config object (either
passed as an argument or loaded from `),jle=a("code"),KPo=o("pretrained_model_name_or_path"),ZPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(":"),r$o=l(),Nle=a("ul"),zT=a("li"),qle=a("strong"),t$o=o("tapas"),a$o=o(" \u2014 "),fN=a("a"),s$o=o("TapasForQuestionAnswering"),n$o=o(" (TAPAS model)"),l$o=l(),WT=a("p"),i$o=o("The model is set in evaluation mode by default using "),Ole=a("code"),d$o=o("model.eval()"),c$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),m$o=o("model.train()"),f$o=l(),Xle=a("p"),g$o=o("Examples:"),h$o=l(),m(Zw.$$.fragment),tke=l(),xd=a("h2"),QT=a("a"),Vle=a("span"),m(e6.$$.fragment),u$o=l(),zle=a("span"),p$o=o("AutoModelForImageClassification"),ake=l(),lr=a("div"),m(o6.$$.fragment),_$o=l(),kd=a("p"),b$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wle=a("code"),v$o=o("from_pretrained()"),T$o=o("class method or the "),Qle=a("code"),F$o=o("from_config()"),C$o=o(`class
method.`),M$o=l(),r6=a("p"),E$o=o("This class cannot be instantiated directly using "),Hle=a("code"),y$o=o("__init__()"),w$o=o(" (throws an error)."),A$o=l(),ot=a("div"),m(t6.$$.fragment),L$o=l(),Ule=a("p"),B$o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x$o=l(),Rd=a("p"),k$o=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),R$o=o("not"),S$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("code"),P$o=o("from_pretrained()"),$$o=o("to load the model weights."),I$o=l(),Kle=a("p"),j$o=o("Examples:"),D$o=l(),m(a6.$$.fragment),N$o=l(),Ue=a("div"),m(s6.$$.fragment),q$o=l(),Zle=a("p"),O$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G$o=l(),os=a("p"),X$o=o("The model class to instantiate is selected based on the "),eie=a("code"),V$o=o("model_type"),z$o=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),W$o=o("pretrained_model_name_or_path"),Q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),H$o=o("pretrained_model_name_or_path"),U$o=o(":"),J$o=l(),pe=a("ul"),HT=a("li"),tie=a("strong"),Y$o=o("beit"),K$o=o(" \u2014 "),gN=a("a"),Z$o=o("BeitForImageClassification"),eIo=o(" (BEiT model)"),oIo=l(),UT=a("li"),aie=a("strong"),rIo=o("convnext"),tIo=o(" \u2014 "),hN=a("a"),aIo=o("ConvNextForImageClassification"),sIo=o(" (ConvNext model)"),nIo=l(),qn=a("li"),sie=a("strong"),lIo=o("deit"),iIo=o(" \u2014 "),uN=a("a"),dIo=o("DeiTForImageClassification"),cIo=o(" or "),pN=a("a"),mIo=o("DeiTForImageClassificationWithTeacher"),fIo=o(" (DeiT model)"),gIo=l(),JT=a("li"),nie=a("strong"),hIo=o("imagegpt"),uIo=o(" \u2014 "),_N=a("a"),pIo=o("ImageGPTForImageClassification"),_Io=o(" (ImageGPT model)"),bIo=l(),fa=a("li"),lie=a("strong"),vIo=o("perceiver"),TIo=o(" \u2014 "),bN=a("a"),FIo=o("PerceiverForImageClassificationLearned"),CIo=o(" or "),vN=a("a"),MIo=o("PerceiverForImageClassificationFourier"),EIo=o(" or "),TN=a("a"),yIo=o("PerceiverForImageClassificationConvProcessing"),wIo=o(" (Perceiver model)"),AIo=l(),YT=a("li"),iie=a("strong"),LIo=o("poolformer"),BIo=o(" \u2014 "),FN=a("a"),xIo=o("PoolFormerForImageClassification"),kIo=o(" (PoolFormer model)"),RIo=l(),KT=a("li"),die=a("strong"),SIo=o("resnet"),PIo=o(" \u2014 "),CN=a("a"),$Io=o("ResNetForImageClassification"),IIo=o(" (ResNet model)"),jIo=l(),ZT=a("li"),cie=a("strong"),DIo=o("segformer"),NIo=o(" \u2014 "),MN=a("a"),qIo=o("SegformerForImageClassification"),OIo=o(" (SegFormer model)"),GIo=l(),e1=a("li"),mie=a("strong"),XIo=o("swin"),VIo=o(" \u2014 "),EN=a("a"),zIo=o("SwinForImageClassification"),WIo=o(" (Swin model)"),QIo=l(),o1=a("li"),fie=a("strong"),HIo=o("vit"),UIo=o(" \u2014 "),yN=a("a"),JIo=o("ViTForImageClassification"),YIo=o(" (ViT model)"),KIo=l(),r1=a("p"),ZIo=o("The model is set in evaluation mode by default using "),gie=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),rjo=o("model.train()"),tjo=l(),uie=a("p"),ajo=o("Examples:"),sjo=l(),m(n6.$$.fragment),ske=l(),Sd=a("h2"),t1=a("a"),pie=a("span"),m(l6.$$.fragment),njo=l(),_ie=a("span"),ljo=o("AutoModelForVision2Seq"),nke=l(),ir=a("div"),m(i6.$$.fragment),ijo=l(),Pd=a("p"),djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bie=a("code"),cjo=o("from_pretrained()"),mjo=o("class method or the "),vie=a("code"),fjo=o("from_config()"),gjo=o(`class
method.`),hjo=l(),d6=a("p"),ujo=o("This class cannot be instantiated directly using "),Tie=a("code"),pjo=o("__init__()"),_jo=o(" (throws an error)."),bjo=l(),rt=a("div"),m(c6.$$.fragment),vjo=l(),Fie=a("p"),Tjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fjo=l(),$d=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),yjo=o("from_pretrained()"),wjo=o("to load the model weights."),Ajo=l(),Eie=a("p"),Ljo=o("Examples:"),Bjo=l(),m(m6.$$.fragment),xjo=l(),Je=a("div"),m(f6.$$.fragment),kjo=l(),yie=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sjo=l(),rs=a("p"),Pjo=o("The model class to instantiate is selected based on the "),wie=a("code"),$jo=o("model_type"),Ijo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),Njo=o("pretrained_model_name_or_path"),qjo=o(":"),Ojo=l(),Bie=a("ul"),a1=a("li"),xie=a("strong"),Gjo=o("vision-encoder-decoder"),Xjo=o(" \u2014 "),wN=a("a"),Vjo=o("VisionEncoderDecoderModel"),zjo=o(" (Vision Encoder decoder model)"),Wjo=l(),s1=a("p"),Qjo=o("The model is set in evaluation mode by default using "),kie=a("code"),Hjo=o("model.eval()"),Ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=a("code"),Jjo=o("model.train()"),Yjo=l(),Sie=a("p"),Kjo=o("Examples:"),Zjo=l(),m(g6.$$.fragment),lke=l(),Id=a("h2"),n1=a("a"),Pie=a("span"),m(h6.$$.fragment),eDo=l(),$ie=a("span"),oDo=o("AutoModelForAudioClassification"),ike=l(),dr=a("div"),m(u6.$$.fragment),rDo=l(),jd=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Iie=a("code"),aDo=o("from_pretrained()"),sDo=o("class method or the "),jie=a("code"),nDo=o("from_config()"),lDo=o(`class
method.`),iDo=l(),p6=a("p"),dDo=o("This class cannot be instantiated directly using "),Die=a("code"),cDo=o("__init__()"),mDo=o(" (throws an error)."),fDo=l(),tt=a("div"),m(_6.$$.fragment),gDo=l(),Nie=a("p"),hDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uDo=l(),Dd=a("p"),pDo=o(`Note:
Loading a model from its configuration file does `),qie=a("strong"),_Do=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=a("code"),vDo=o("from_pretrained()"),TDo=o("to load the model weights."),FDo=l(),Gie=a("p"),CDo=o("Examples:"),MDo=l(),m(b6.$$.fragment),EDo=l(),Ye=a("div"),m(v6.$$.fragment),yDo=l(),Xie=a("p"),wDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ADo=l(),ts=a("p"),LDo=o("The model class to instantiate is selected based on the "),Vie=a("code"),BDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),kDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),SDo=o("pretrained_model_name_or_path"),PDo=o(":"),$Do=l(),ke=a("ul"),l1=a("li"),Qie=a("strong"),IDo=o("data2vec-audio"),jDo=o(" \u2014 "),AN=a("a"),DDo=o("Data2VecAudioForSequenceClassification"),NDo=o(" (Data2VecAudio model)"),qDo=l(),i1=a("li"),Hie=a("strong"),ODo=o("hubert"),GDo=o(" \u2014 "),LN=a("a"),XDo=o("HubertForSequenceClassification"),VDo=o(" (Hubert model)"),zDo=l(),d1=a("li"),Uie=a("strong"),WDo=o("sew"),QDo=o(" \u2014 "),BN=a("a"),HDo=o("SEWForSequenceClassification"),UDo=o(" (SEW model)"),JDo=l(),c1=a("li"),Jie=a("strong"),YDo=o("sew-d"),KDo=o(" \u2014 "),xN=a("a"),ZDo=o("SEWDForSequenceClassification"),eNo=o(" (SEW-D model)"),oNo=l(),m1=a("li"),Yie=a("strong"),rNo=o("unispeech"),tNo=o(" \u2014 "),kN=a("a"),aNo=o("UniSpeechForSequenceClassification"),sNo=o(" (UniSpeech model)"),nNo=l(),f1=a("li"),Kie=a("strong"),lNo=o("unispeech-sat"),iNo=o(" \u2014 "),RN=a("a"),dNo=o("UniSpeechSatForSequenceClassification"),cNo=o(" (UniSpeechSat model)"),mNo=l(),g1=a("li"),Zie=a("strong"),fNo=o("wav2vec2"),gNo=o(" \u2014 "),SN=a("a"),hNo=o("Wav2Vec2ForSequenceClassification"),uNo=o(" (Wav2Vec2 model)"),pNo=l(),h1=a("li"),ede=a("strong"),_No=o("wavlm"),bNo=o(" \u2014 "),PN=a("a"),vNo=o("WavLMForSequenceClassification"),TNo=o(" (WavLM model)"),FNo=l(),u1=a("p"),CNo=o("The model is set in evaluation mode by default using "),ode=a("code"),MNo=o("model.eval()"),ENo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),yNo=o("model.train()"),wNo=l(),tde=a("p"),ANo=o("Examples:"),LNo=l(),m(T6.$$.fragment),dke=l(),Nd=a("h2"),p1=a("a"),ade=a("span"),m(F6.$$.fragment),BNo=l(),sde=a("span"),xNo=o("AutoModelForAudioFrameClassification"),cke=l(),cr=a("div"),m(C6.$$.fragment),kNo=l(),qd=a("p"),RNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),nde=a("code"),SNo=o("from_pretrained()"),PNo=o("class method or the "),lde=a("code"),$No=o("from_config()"),INo=o(`class
method.`),jNo=l(),M6=a("p"),DNo=o("This class cannot be instantiated directly using "),ide=a("code"),NNo=o("__init__()"),qNo=o(" (throws an error)."),ONo=l(),at=a("div"),m(E6.$$.fragment),GNo=l(),dde=a("p"),XNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),VNo=l(),Od=a("p"),zNo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),WNo=o("not"),QNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=a("code"),HNo=o("from_pretrained()"),UNo=o("to load the model weights."),JNo=l(),fde=a("p"),YNo=o("Examples:"),KNo=l(),m(y6.$$.fragment),ZNo=l(),Ke=a("div"),m(w6.$$.fragment),eqo=l(),gde=a("p"),oqo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rqo=l(),as=a("p"),tqo=o("The model class to instantiate is selected based on the "),hde=a("code"),aqo=o("model_type"),sqo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),nqo=o("pretrained_model_name_or_path"),lqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),iqo=o("pretrained_model_name_or_path"),dqo=o(":"),cqo=l(),ss=a("ul"),_1=a("li"),_de=a("strong"),mqo=o("data2vec-audio"),fqo=o(" \u2014 "),$N=a("a"),gqo=o("Data2VecAudioForAudioFrameClassification"),hqo=o(" (Data2VecAudio model)"),uqo=l(),b1=a("li"),bde=a("strong"),pqo=o("unispeech-sat"),_qo=o(" \u2014 "),IN=a("a"),bqo=o("UniSpeechSatForAudioFrameClassification"),vqo=o(" (UniSpeechSat model)"),Tqo=l(),v1=a("li"),vde=a("strong"),Fqo=o("wav2vec2"),Cqo=o(" \u2014 "),jN=a("a"),Mqo=o("Wav2Vec2ForAudioFrameClassification"),Eqo=o(" (Wav2Vec2 model)"),yqo=l(),T1=a("li"),Tde=a("strong"),wqo=o("wavlm"),Aqo=o(" \u2014 "),DN=a("a"),Lqo=o("WavLMForAudioFrameClassification"),Bqo=o(" (WavLM model)"),xqo=l(),F1=a("p"),kqo=o("The model is set in evaluation mode by default using "),Fde=a("code"),Rqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),Pqo=o("model.train()"),$qo=l(),Mde=a("p"),Iqo=o("Examples:"),jqo=l(),m(A6.$$.fragment),mke=l(),Gd=a("h2"),C1=a("a"),Ede=a("span"),m(L6.$$.fragment),Dqo=l(),yde=a("span"),Nqo=o("AutoModelForCTC"),fke=l(),mr=a("div"),m(B6.$$.fragment),qqo=l(),Xd=a("p"),Oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wde=a("code"),Gqo=o("from_pretrained()"),Xqo=o("class method or the "),Ade=a("code"),Vqo=o("from_config()"),zqo=o(`class
method.`),Wqo=l(),x6=a("p"),Qqo=o("This class cannot be instantiated directly using "),Lde=a("code"),Hqo=o("__init__()"),Uqo=o(" (throws an error)."),Jqo=l(),st=a("div"),m(k6.$$.fragment),Yqo=l(),Bde=a("p"),Kqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zqo=l(),Vd=a("p"),eOo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),oOo=o("not"),rOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),tOo=o("from_pretrained()"),aOo=o("to load the model weights."),sOo=l(),Rde=a("p"),nOo=o("Examples:"),lOo=l(),m(R6.$$.fragment),iOo=l(),Ze=a("div"),m(S6.$$.fragment),dOo=l(),Sde=a("p"),cOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mOo=l(),ns=a("p"),fOo=o("The model class to instantiate is selected based on the "),Pde=a("code"),gOo=o("model_type"),hOo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),uOo=o("pretrained_model_name_or_path"),pOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),_Oo=o("pretrained_model_name_or_path"),bOo=o(":"),vOo=l(),Re=a("ul"),M1=a("li"),jde=a("strong"),TOo=o("data2vec-audio"),FOo=o(" \u2014 "),NN=a("a"),COo=o("Data2VecAudioForCTC"),MOo=o(" (Data2VecAudio model)"),EOo=l(),E1=a("li"),Dde=a("strong"),yOo=o("hubert"),wOo=o(" \u2014 "),qN=a("a"),AOo=o("HubertForCTC"),LOo=o(" (Hubert model)"),BOo=l(),y1=a("li"),Nde=a("strong"),xOo=o("sew"),kOo=o(" \u2014 "),ON=a("a"),ROo=o("SEWForCTC"),SOo=o(" (SEW model)"),POo=l(),w1=a("li"),qde=a("strong"),$Oo=o("sew-d"),IOo=o(" \u2014 "),GN=a("a"),jOo=o("SEWDForCTC"),DOo=o(" (SEW-D model)"),NOo=l(),A1=a("li"),Ode=a("strong"),qOo=o("unispeech"),OOo=o(" \u2014 "),XN=a("a"),GOo=o("UniSpeechForCTC"),XOo=o(" (UniSpeech model)"),VOo=l(),L1=a("li"),Gde=a("strong"),zOo=o("unispeech-sat"),WOo=o(" \u2014 "),VN=a("a"),QOo=o("UniSpeechSatForCTC"),HOo=o(" (UniSpeechSat model)"),UOo=l(),B1=a("li"),Xde=a("strong"),JOo=o("wav2vec2"),YOo=o(" \u2014 "),zN=a("a"),KOo=o("Wav2Vec2ForCTC"),ZOo=o(" (Wav2Vec2 model)"),eGo=l(),x1=a("li"),Vde=a("strong"),oGo=o("wavlm"),rGo=o(" \u2014 "),WN=a("a"),tGo=o("WavLMForCTC"),aGo=o(" (WavLM model)"),sGo=l(),k1=a("p"),nGo=o("The model is set in evaluation mode by default using "),zde=a("code"),lGo=o("model.eval()"),iGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),dGo=o("model.train()"),cGo=l(),Qde=a("p"),mGo=o("Examples:"),fGo=l(),m(P6.$$.fragment),gke=l(),zd=a("h2"),R1=a("a"),Hde=a("span"),m($6.$$.fragment),gGo=l(),Ude=a("span"),hGo=o("AutoModelForSpeechSeq2Seq"),hke=l(),fr=a("div"),m(I6.$$.fragment),uGo=l(),Wd=a("p"),pGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Jde=a("code"),_Go=o("from_pretrained()"),bGo=o("class method or the "),Yde=a("code"),vGo=o("from_config()"),TGo=o(`class
method.`),FGo=l(),j6=a("p"),CGo=o("This class cannot be instantiated directly using "),Kde=a("code"),MGo=o("__init__()"),EGo=o(" (throws an error)."),yGo=l(),nt=a("div"),m(D6.$$.fragment),wGo=l(),Zde=a("p"),AGo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LGo=l(),Qd=a("p"),BGo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),xGo=o("not"),kGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),RGo=o("from_pretrained()"),SGo=o("to load the model weights."),PGo=l(),rce=a("p"),$Go=o("Examples:"),IGo=l(),m(N6.$$.fragment),jGo=l(),eo=a("div"),m(q6.$$.fragment),DGo=l(),tce=a("p"),NGo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qGo=l(),ls=a("p"),OGo=o("The model class to instantiate is selected based on the "),ace=a("code"),GGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),sce=a("code"),VGo=o("pretrained_model_name_or_path"),zGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(":"),HGo=l(),O6=a("ul"),S1=a("li"),lce=a("strong"),UGo=o("speech-encoder-decoder"),JGo=o(" \u2014 "),QN=a("a"),YGo=o("SpeechEncoderDecoderModel"),KGo=o(" (Speech Encoder decoder model)"),ZGo=l(),P1=a("li"),ice=a("strong"),eXo=o("speech_to_text"),oXo=o(" \u2014 "),HN=a("a"),rXo=o("Speech2TextForConditionalGeneration"),tXo=o(" (Speech2Text model)"),aXo=l(),$1=a("p"),sXo=o("The model is set in evaluation mode by default using "),dce=a("code"),nXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=a("code"),iXo=o("model.train()"),dXo=l(),mce=a("p"),cXo=o("Examples:"),mXo=l(),m(G6.$$.fragment),uke=l(),Hd=a("h2"),I1=a("a"),fce=a("span"),m(X6.$$.fragment),fXo=l(),gce=a("span"),gXo=o("AutoModelForAudioXVector"),pke=l(),gr=a("div"),m(V6.$$.fragment),hXo=l(),Ud=a("p"),uXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hce=a("code"),pXo=o("from_pretrained()"),_Xo=o("class method or the "),uce=a("code"),bXo=o("from_config()"),vXo=o(`class
method.`),TXo=l(),z6=a("p"),FXo=o("This class cannot be instantiated directly using "),pce=a("code"),CXo=o("__init__()"),MXo=o(" (throws an error)."),EXo=l(),lt=a("div"),m(W6.$$.fragment),yXo=l(),_ce=a("p"),wXo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),AXo=l(),Jd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),BXo=o("not"),xXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=a("code"),kXo=o("from_pretrained()"),RXo=o("to load the model weights."),SXo=l(),Tce=a("p"),PXo=o("Examples:"),$Xo=l(),m(Q6.$$.fragment),IXo=l(),oo=a("div"),m(H6.$$.fragment),jXo=l(),Fce=a("p"),DXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NXo=l(),is=a("p"),qXo=o("The model class to instantiate is selected based on the "),Cce=a("code"),OXo=o("model_type"),GXo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),XXo=o("pretrained_model_name_or_path"),VXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),zXo=o("pretrained_model_name_or_path"),WXo=o(":"),QXo=l(),ds=a("ul"),j1=a("li"),yce=a("strong"),HXo=o("data2vec-audio"),UXo=o(" \u2014 "),UN=a("a"),JXo=o("Data2VecAudioForXVector"),YXo=o(" (Data2VecAudio model)"),KXo=l(),D1=a("li"),wce=a("strong"),ZXo=o("unispeech-sat"),eVo=o(" \u2014 "),JN=a("a"),oVo=o("UniSpeechSatForXVector"),rVo=o(" (UniSpeechSat model)"),tVo=l(),N1=a("li"),Ace=a("strong"),aVo=o("wav2vec2"),sVo=o(" \u2014 "),YN=a("a"),nVo=o("Wav2Vec2ForXVector"),lVo=o(" (Wav2Vec2 model)"),iVo=l(),q1=a("li"),Lce=a("strong"),dVo=o("wavlm"),cVo=o(" \u2014 "),KN=a("a"),mVo=o("WavLMForXVector"),fVo=o(" (WavLM model)"),gVo=l(),O1=a("p"),hVo=o("The model is set in evaluation mode by default using "),Bce=a("code"),uVo=o("model.eval()"),pVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),_Vo=o("model.train()"),bVo=l(),kce=a("p"),vVo=o("Examples:"),TVo=l(),m(U6.$$.fragment),_ke=l(),Yd=a("h2"),G1=a("a"),Rce=a("span"),m(J6.$$.fragment),FVo=l(),Sce=a("span"),CVo=o("AutoModelForMaskedImageModeling"),bke=l(),hr=a("div"),m(Y6.$$.fragment),MVo=l(),Kd=a("p"),EVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pce=a("code"),yVo=o("from_pretrained()"),wVo=o("class method or the "),$ce=a("code"),AVo=o("from_config()"),LVo=o(`class
method.`),BVo=l(),K6=a("p"),xVo=o("This class cannot be instantiated directly using "),Ice=a("code"),kVo=o("__init__()"),RVo=o(" (throws an error)."),SVo=l(),it=a("div"),m(Z6.$$.fragment),PVo=l(),jce=a("p"),$Vo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),IVo=l(),Zd=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),Dce=a("strong"),DVo=o("not"),NVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),qVo=o("from_pretrained()"),OVo=o("to load the model weights."),GVo=l(),qce=a("p"),XVo=o("Examples:"),VVo=l(),m(eA.$$.fragment),zVo=l(),ro=a("div"),m(oA.$$.fragment),WVo=l(),Oce=a("p"),QVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),HVo=l(),cs=a("p"),UVo=o("The model class to instantiate is selected based on the "),Gce=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(":"),rzo=l(),ec=a("ul"),X1=a("li"),zce=a("strong"),tzo=o("deit"),azo=o(" \u2014 "),ZN=a("a"),szo=o("DeiTForMaskedImageModeling"),nzo=o(" (DeiT model)"),lzo=l(),V1=a("li"),Wce=a("strong"),izo=o("swin"),dzo=o(" \u2014 "),eq=a("a"),czo=o("SwinForMaskedImageModeling"),mzo=o(" (Swin model)"),fzo=l(),z1=a("li"),Qce=a("strong"),gzo=o("vit"),hzo=o(" \u2014 "),oq=a("a"),uzo=o("ViTForMaskedImageModeling"),pzo=o(" (ViT model)"),_zo=l(),W1=a("p"),bzo=o("The model is set in evaluation mode by default using "),Hce=a("code"),vzo=o("model.eval()"),Tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),Fzo=o("model.train()"),Czo=l(),Jce=a("p"),Mzo=o("Examples:"),Ezo=l(),m(rA.$$.fragment),vke=l(),oc=a("h2"),Q1=a("a"),Yce=a("span"),m(tA.$$.fragment),yzo=l(),Kce=a("span"),wzo=o("AutoModelForObjectDetection"),Tke=l(),ur=a("div"),m(aA.$$.fragment),Azo=l(),rc=a("p"),Lzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zce=a("code"),Bzo=o("from_pretrained()"),xzo=o("class method or the "),eme=a("code"),kzo=o("from_config()"),Rzo=o(`class
method.`),Szo=l(),sA=a("p"),Pzo=o("This class cannot be instantiated directly using "),ome=a("code"),$zo=o("__init__()"),Izo=o(" (throws an error)."),jzo=l(),dt=a("div"),m(nA.$$.fragment),Dzo=l(),rme=a("p"),Nzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qzo=l(),tc=a("p"),Ozo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),Gzo=o("not"),Xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=a("code"),Vzo=o("from_pretrained()"),zzo=o("to load the model weights."),Wzo=l(),sme=a("p"),Qzo=o("Examples:"),Hzo=l(),m(lA.$$.fragment),Uzo=l(),to=a("div"),m(iA.$$.fragment),Jzo=l(),nme=a("p"),Yzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Kzo=l(),ms=a("p"),Zzo=o("The model class to instantiate is selected based on the "),lme=a("code"),eWo=o("model_type"),oWo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),aWo=o("pretrained_model_name_or_path"),sWo=o(":"),nWo=l(),cme=a("ul"),H1=a("li"),mme=a("strong"),lWo=o("detr"),iWo=o(" \u2014 "),rq=a("a"),dWo=o("DetrForObjectDetection"),cWo=o(" (DETR model)"),mWo=l(),U1=a("p"),fWo=o("The model is set in evaluation mode by default using "),fme=a("code"),gWo=o("model.eval()"),hWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),uWo=o("model.train()"),pWo=l(),hme=a("p"),_Wo=o("Examples:"),bWo=l(),m(dA.$$.fragment),Fke=l(),ac=a("h2"),J1=a("a"),ume=a("span"),m(cA.$$.fragment),vWo=l(),pme=a("span"),TWo=o("AutoModelForImageSegmentation"),Cke=l(),pr=a("div"),m(mA.$$.fragment),FWo=l(),sc=a("p"),CWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_me=a("code"),MWo=o("from_pretrained()"),EWo=o("class method or the "),bme=a("code"),yWo=o("from_config()"),wWo=o(`class
method.`),AWo=l(),fA=a("p"),LWo=o("This class cannot be instantiated directly using "),vme=a("code"),BWo=o("__init__()"),xWo=o(" (throws an error)."),kWo=l(),ct=a("div"),m(gA.$$.fragment),RWo=l(),Tme=a("p"),SWo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),PWo=l(),nc=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),IWo=o("not"),jWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),DWo=o("from_pretrained()"),NWo=o("to load the model weights."),qWo=l(),Mme=a("p"),OWo=o("Examples:"),GWo=l(),m(hA.$$.fragment),XWo=l(),ao=a("div"),m(uA.$$.fragment),VWo=l(),Eme=a("p"),zWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WWo=l(),fs=a("p"),QWo=o("The model class to instantiate is selected based on the "),yme=a("code"),HWo=o("model_type"),UWo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(":"),eQo=l(),Lme=a("ul"),Y1=a("li"),Bme=a("strong"),oQo=o("detr"),rQo=o(" \u2014 "),tq=a("a"),tQo=o("DetrForSegmentation"),aQo=o(" (DETR model)"),sQo=l(),K1=a("p"),nQo=o("The model is set in evaluation mode by default using "),xme=a("code"),lQo=o("model.eval()"),iQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),dQo=o("model.train()"),cQo=l(),Rme=a("p"),mQo=o("Examples:"),fQo=l(),m(pA.$$.fragment),Mke=l(),lc=a("h2"),Z1=a("a"),Sme=a("span"),m(_A.$$.fragment),gQo=l(),Pme=a("span"),hQo=o("AutoModelForSemanticSegmentation"),Eke=l(),_r=a("div"),m(bA.$$.fragment),uQo=l(),ic=a("p"),pQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$me=a("code"),_Qo=o("from_pretrained()"),bQo=o("class method or the "),Ime=a("code"),vQo=o("from_config()"),TQo=o(`class
method.`),FQo=l(),vA=a("p"),CQo=o("This class cannot be instantiated directly using "),jme=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),yQo=l(),mt=a("div"),m(TA.$$.fragment),wQo=l(),Dme=a("p"),AQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LQo=l(),dc=a("p"),BQo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),xQo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=a("code"),RQo=o("from_pretrained()"),SQo=o("to load the model weights."),PQo=l(),Ome=a("p"),$Qo=o("Examples:"),IQo=l(),m(FA.$$.fragment),jQo=l(),so=a("div"),m(CA.$$.fragment),DQo=l(),Gme=a("p"),NQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qQo=l(),gs=a("p"),OQo=o("The model class to instantiate is selected based on the "),Xme=a("code"),GQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),VQo=o("pretrained_model_name_or_path"),zQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),WQo=o("pretrained_model_name_or_path"),QQo=o(":"),HQo=l(),MA=a("ul"),eF=a("li"),Wme=a("strong"),UQo=o("beit"),JQo=o(" \u2014 "),aq=a("a"),YQo=o("BeitForSemanticSegmentation"),KQo=o(" (BEiT model)"),ZQo=l(),oF=a("li"),Qme=a("strong"),eHo=o("segformer"),oHo=o(" \u2014 "),sq=a("a"),rHo=o("SegformerForSemanticSegmentation"),tHo=o(" (SegFormer model)"),aHo=l(),rF=a("p"),sHo=o("The model is set in evaluation mode by default using "),Hme=a("code"),nHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),iHo=o("model.train()"),dHo=l(),Jme=a("p"),cHo=o("Examples:"),mHo=l(),m(EA.$$.fragment),yke=l(),cc=a("h2"),tF=a("a"),Yme=a("span"),m(yA.$$.fragment),fHo=l(),Kme=a("span"),gHo=o("AutoModelForInstanceSegmentation"),wke=l(),br=a("div"),m(wA.$$.fragment),hHo=l(),mc=a("p"),uHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Zme=a("code"),pHo=o("from_pretrained()"),_Ho=o("class method or the "),efe=a("code"),bHo=o("from_config()"),vHo=o(`class
method.`),THo=l(),AA=a("p"),FHo=o("This class cannot be instantiated directly using "),ofe=a("code"),CHo=o("__init__()"),MHo=o(" (throws an error)."),EHo=l(),ft=a("div"),m(LA.$$.fragment),yHo=l(),rfe=a("p"),wHo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),AHo=l(),fc=a("p"),LHo=o(`Note:
Loading a model from its configuration file does `),tfe=a("strong"),BHo=o("not"),xHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=a("code"),kHo=o("from_pretrained()"),RHo=o("to load the model weights."),SHo=l(),sfe=a("p"),PHo=o("Examples:"),$Ho=l(),m(BA.$$.fragment),IHo=l(),no=a("div"),m(xA.$$.fragment),jHo=l(),nfe=a("p"),DHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),NHo=l(),hs=a("p"),qHo=o("The model class to instantiate is selected based on the "),lfe=a("code"),OHo=o("model_type"),GHo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),XHo=o("pretrained_model_name_or_path"),VHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),zHo=o("pretrained_model_name_or_path"),WHo=o(":"),QHo=l(),cfe=a("ul"),aF=a("li"),mfe=a("strong"),HHo=o("maskformer"),UHo=o(" \u2014 "),nq=a("a"),JHo=o("MaskFormerForInstanceSegmentation"),YHo=o(" (MaskFormer model)"),KHo=l(),sF=a("p"),ZHo=o("The model is set in evaluation mode by default using "),ffe=a("code"),eUo=o("model.eval()"),oUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),rUo=o("model.train()"),tUo=l(),hfe=a("p"),aUo=o("Examples:"),sUo=l(),m(kA.$$.fragment),Ake=l(),gc=a("h2"),nF=a("a"),ufe=a("span"),m(RA.$$.fragment),nUo=l(),pfe=a("span"),lUo=o("TFAutoModel"),Lke=l(),vr=a("div"),m(SA.$$.fragment),iUo=l(),hc=a("p"),dUo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_fe=a("code"),cUo=o("from_pretrained()"),mUo=o("class method or the "),bfe=a("code"),fUo=o("from_config()"),gUo=o(`class
method.`),hUo=l(),PA=a("p"),uUo=o("This class cannot be instantiated directly using "),vfe=a("code"),pUo=o("__init__()"),_Uo=o(" (throws an error)."),bUo=l(),gt=a("div"),m($A.$$.fragment),vUo=l(),Tfe=a("p"),TUo=o("Instantiates one of the base model classes of the library from a configuration."),FUo=l(),uc=a("p"),CUo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),MUo=o("not"),EUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=a("code"),yUo=o("from_pretrained()"),wUo=o("to load the model weights."),AUo=l(),Mfe=a("p"),LUo=o("Examples:"),BUo=l(),m(IA.$$.fragment),xUo=l(),ho=a("div"),m(jA.$$.fragment),kUo=l(),Efe=a("p"),RUo=o("Instantiate one of the base model classes of the library from a pretrained model."),SUo=l(),us=a("p"),PUo=o("The model class to instantiate is selected based on the "),yfe=a("code"),$Uo=o("model_type"),IUo=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),jUo=o("pretrained_model_name_or_path"),DUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),NUo=o("pretrained_model_name_or_path"),qUo=o(":"),OUo=l(),B=a("ul"),lF=a("li"),Lfe=a("strong"),GUo=o("albert"),XUo=o(" \u2014 "),lq=a("a"),VUo=o("TFAlbertModel"),zUo=o(" (ALBERT model)"),WUo=l(),iF=a("li"),Bfe=a("strong"),QUo=o("bart"),HUo=o(" \u2014 "),iq=a("a"),UUo=o("TFBartModel"),JUo=o(" (BART model)"),YUo=l(),dF=a("li"),xfe=a("strong"),KUo=o("bert"),ZUo=o(" \u2014 "),dq=a("a"),eJo=o("TFBertModel"),oJo=o(" (BERT model)"),rJo=l(),cF=a("li"),kfe=a("strong"),tJo=o("blenderbot"),aJo=o(" \u2014 "),cq=a("a"),sJo=o("TFBlenderbotModel"),nJo=o(" (Blenderbot model)"),lJo=l(),mF=a("li"),Rfe=a("strong"),iJo=o("blenderbot-small"),dJo=o(" \u2014 "),mq=a("a"),cJo=o("TFBlenderbotSmallModel"),mJo=o(" (BlenderbotSmall model)"),fJo=l(),fF=a("li"),Sfe=a("strong"),gJo=o("camembert"),hJo=o(" \u2014 "),fq=a("a"),uJo=o("TFCamembertModel"),pJo=o(" (CamemBERT model)"),_Jo=l(),gF=a("li"),Pfe=a("strong"),bJo=o("clip"),vJo=o(" \u2014 "),gq=a("a"),TJo=o("TFCLIPModel"),FJo=o(" (CLIP model)"),CJo=l(),hF=a("li"),$fe=a("strong"),MJo=o("convbert"),EJo=o(" \u2014 "),hq=a("a"),yJo=o("TFConvBertModel"),wJo=o(" (ConvBERT model)"),AJo=l(),uF=a("li"),Ife=a("strong"),LJo=o("convnext"),BJo=o(" \u2014 "),uq=a("a"),xJo=o("TFConvNextModel"),kJo=o(" (ConvNext model)"),RJo=l(),pF=a("li"),jfe=a("strong"),SJo=o("ctrl"),PJo=o(" \u2014 "),pq=a("a"),$Jo=o("TFCTRLModel"),IJo=o(" (CTRL model)"),jJo=l(),_F=a("li"),Dfe=a("strong"),DJo=o("deberta"),NJo=o(" \u2014 "),_q=a("a"),qJo=o("TFDebertaModel"),OJo=o(" (DeBERTa model)"),GJo=l(),bF=a("li"),Nfe=a("strong"),XJo=o("deberta-v2"),VJo=o(" \u2014 "),bq=a("a"),zJo=o("TFDebertaV2Model"),WJo=o(" (DeBERTa-v2 model)"),QJo=l(),vF=a("li"),qfe=a("strong"),HJo=o("distilbert"),UJo=o(" \u2014 "),vq=a("a"),JJo=o("TFDistilBertModel"),YJo=o(" (DistilBERT model)"),KJo=l(),TF=a("li"),Ofe=a("strong"),ZJo=o("dpr"),eYo=o(" \u2014 "),Tq=a("a"),oYo=o("TFDPRQuestionEncoder"),rYo=o(" (DPR model)"),tYo=l(),FF=a("li"),Gfe=a("strong"),aYo=o("electra"),sYo=o(" \u2014 "),Fq=a("a"),nYo=o("TFElectraModel"),lYo=o(" (ELECTRA model)"),iYo=l(),CF=a("li"),Xfe=a("strong"),dYo=o("flaubert"),cYo=o(" \u2014 "),Cq=a("a"),mYo=o("TFFlaubertModel"),fYo=o(" (FlauBERT model)"),gYo=l(),On=a("li"),Vfe=a("strong"),hYo=o("funnel"),uYo=o(" \u2014 "),Mq=a("a"),pYo=o("TFFunnelModel"),_Yo=o(" or "),Eq=a("a"),bYo=o("TFFunnelBaseModel"),vYo=o(" (Funnel Transformer model)"),TYo=l(),MF=a("li"),zfe=a("strong"),FYo=o("gpt2"),CYo=o(" \u2014 "),yq=a("a"),MYo=o("TFGPT2Model"),EYo=o(" (OpenAI GPT-2 model)"),yYo=l(),EF=a("li"),Wfe=a("strong"),wYo=o("hubert"),AYo=o(" \u2014 "),wq=a("a"),LYo=o("TFHubertModel"),BYo=o(" (Hubert model)"),xYo=l(),yF=a("li"),Qfe=a("strong"),kYo=o("layoutlm"),RYo=o(" \u2014 "),Aq=a("a"),SYo=o("TFLayoutLMModel"),PYo=o(" (LayoutLM model)"),$Yo=l(),wF=a("li"),Hfe=a("strong"),IYo=o("led"),jYo=o(" \u2014 "),Lq=a("a"),DYo=o("TFLEDModel"),NYo=o(" (LED model)"),qYo=l(),AF=a("li"),Ufe=a("strong"),OYo=o("longformer"),GYo=o(" \u2014 "),Bq=a("a"),XYo=o("TFLongformerModel"),VYo=o(" (Longformer model)"),zYo=l(),LF=a("li"),Jfe=a("strong"),WYo=o("lxmert"),QYo=o(" \u2014 "),xq=a("a"),HYo=o("TFLxmertModel"),UYo=o(" (LXMERT model)"),JYo=l(),BF=a("li"),Yfe=a("strong"),YYo=o("marian"),KYo=o(" \u2014 "),kq=a("a"),ZYo=o("TFMarianModel"),eKo=o(" (Marian model)"),oKo=l(),xF=a("li"),Kfe=a("strong"),rKo=o("mbart"),tKo=o(" \u2014 "),Rq=a("a"),aKo=o("TFMBartModel"),sKo=o(" (mBART model)"),nKo=l(),kF=a("li"),Zfe=a("strong"),lKo=o("mobilebert"),iKo=o(" \u2014 "),Sq=a("a"),dKo=o("TFMobileBertModel"),cKo=o(" (MobileBERT model)"),mKo=l(),RF=a("li"),ege=a("strong"),fKo=o("mpnet"),gKo=o(" \u2014 "),Pq=a("a"),hKo=o("TFMPNetModel"),uKo=o(" (MPNet model)"),pKo=l(),SF=a("li"),oge=a("strong"),_Ko=o("mt5"),bKo=o(" \u2014 "),$q=a("a"),vKo=o("TFMT5Model"),TKo=o(" (mT5 model)"),FKo=l(),PF=a("li"),rge=a("strong"),CKo=o("openai-gpt"),MKo=o(" \u2014 "),Iq=a("a"),EKo=o("TFOpenAIGPTModel"),yKo=o(" (OpenAI GPT model)"),wKo=l(),$F=a("li"),tge=a("strong"),AKo=o("pegasus"),LKo=o(" \u2014 "),jq=a("a"),BKo=o("TFPegasusModel"),xKo=o(" (Pegasus model)"),kKo=l(),IF=a("li"),age=a("strong"),RKo=o("rembert"),SKo=o(" \u2014 "),Dq=a("a"),PKo=o("TFRemBertModel"),$Ko=o(" (RemBERT model)"),IKo=l(),jF=a("li"),sge=a("strong"),jKo=o("roberta"),DKo=o(" \u2014 "),Nq=a("a"),NKo=o("TFRobertaModel"),qKo=o(" (RoBERTa model)"),OKo=l(),DF=a("li"),nge=a("strong"),GKo=o("roformer"),XKo=o(" \u2014 "),qq=a("a"),VKo=o("TFRoFormerModel"),zKo=o(" (RoFormer model)"),WKo=l(),NF=a("li"),lge=a("strong"),QKo=o("speech_to_text"),HKo=o(" \u2014 "),Oq=a("a"),UKo=o("TFSpeech2TextModel"),JKo=o(" (Speech2Text model)"),YKo=l(),qF=a("li"),ige=a("strong"),KKo=o("t5"),ZKo=o(" \u2014 "),Gq=a("a"),eZo=o("TFT5Model"),oZo=o(" (T5 model)"),rZo=l(),OF=a("li"),dge=a("strong"),tZo=o("tapas"),aZo=o(" \u2014 "),Xq=a("a"),sZo=o("TFTapasModel"),nZo=o(" (TAPAS model)"),lZo=l(),GF=a("li"),cge=a("strong"),iZo=o("transfo-xl"),dZo=o(" \u2014 "),Vq=a("a"),cZo=o("TFTransfoXLModel"),mZo=o(" (Transformer-XL model)"),fZo=l(),XF=a("li"),mge=a("strong"),gZo=o("vit"),hZo=o(" \u2014 "),zq=a("a"),uZo=o("TFViTModel"),pZo=o(" (ViT model)"),_Zo=l(),VF=a("li"),fge=a("strong"),bZo=o("wav2vec2"),vZo=o(" \u2014 "),Wq=a("a"),TZo=o("TFWav2Vec2Model"),FZo=o(" (Wav2Vec2 model)"),CZo=l(),zF=a("li"),gge=a("strong"),MZo=o("xlm"),EZo=o(" \u2014 "),Qq=a("a"),yZo=o("TFXLMModel"),wZo=o(" (XLM model)"),AZo=l(),WF=a("li"),hge=a("strong"),LZo=o("xlm-roberta"),BZo=o(" \u2014 "),Hq=a("a"),xZo=o("TFXLMRobertaModel"),kZo=o(" (XLM-RoBERTa model)"),RZo=l(),QF=a("li"),uge=a("strong"),SZo=o("xlnet"),PZo=o(" \u2014 "),Uq=a("a"),$Zo=o("TFXLNetModel"),IZo=o(" (XLNet model)"),jZo=l(),pge=a("p"),DZo=o("Examples:"),NZo=l(),m(DA.$$.fragment),Bke=l(),pc=a("h2"),HF=a("a"),_ge=a("span"),m(NA.$$.fragment),qZo=l(),bge=a("span"),OZo=o("TFAutoModelForPreTraining"),xke=l(),Tr=a("div"),m(qA.$$.fragment),GZo=l(),_c=a("p"),XZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vge=a("code"),VZo=o("from_pretrained()"),zZo=o("class method or the "),Tge=a("code"),WZo=o("from_config()"),QZo=o(`class
method.`),HZo=l(),OA=a("p"),UZo=o("This class cannot be instantiated directly using "),Fge=a("code"),JZo=o("__init__()"),YZo=o(" (throws an error)."),KZo=l(),ht=a("div"),m(GA.$$.fragment),ZZo=l(),Cge=a("p"),eer=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oer=l(),bc=a("p"),rer=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),ter=o("not"),aer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ege=a("code"),ser=o("from_pretrained()"),ner=o("to load the model weights."),ler=l(),yge=a("p"),ier=o("Examples:"),der=l(),m(XA.$$.fragment),cer=l(),uo=a("div"),m(VA.$$.fragment),mer=l(),wge=a("p"),fer=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ger=l(),ps=a("p"),her=o("The model class to instantiate is selected based on the "),Age=a("code"),uer=o("model_type"),per=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),_er=o("pretrained_model_name_or_path"),ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),ver=o("pretrained_model_name_or_path"),Ter=o(":"),Fer=l(),H=a("ul"),UF=a("li"),xge=a("strong"),Cer=o("albert"),Mer=o(" \u2014 "),Jq=a("a"),Eer=o("TFAlbertForPreTraining"),yer=o(" (ALBERT model)"),wer=l(),JF=a("li"),kge=a("strong"),Aer=o("bart"),Ler=o(" \u2014 "),Yq=a("a"),Ber=o("TFBartForConditionalGeneration"),xer=o(" (BART model)"),ker=l(),YF=a("li"),Rge=a("strong"),Rer=o("bert"),Ser=o(" \u2014 "),Kq=a("a"),Per=o("TFBertForPreTraining"),$er=o(" (BERT model)"),Ier=l(),KF=a("li"),Sge=a("strong"),jer=o("camembert"),Der=o(" \u2014 "),Zq=a("a"),Ner=o("TFCamembertForMaskedLM"),qer=o(" (CamemBERT model)"),Oer=l(),ZF=a("li"),Pge=a("strong"),Ger=o("ctrl"),Xer=o(" \u2014 "),eO=a("a"),Ver=o("TFCTRLLMHeadModel"),zer=o(" (CTRL model)"),Wer=l(),eC=a("li"),$ge=a("strong"),Qer=o("distilbert"),Her=o(" \u2014 "),oO=a("a"),Uer=o("TFDistilBertForMaskedLM"),Jer=o(" (DistilBERT model)"),Yer=l(),oC=a("li"),Ige=a("strong"),Ker=o("electra"),Zer=o(" \u2014 "),rO=a("a"),eor=o("TFElectraForPreTraining"),oor=o(" (ELECTRA model)"),ror=l(),rC=a("li"),jge=a("strong"),tor=o("flaubert"),aor=o(" \u2014 "),tO=a("a"),sor=o("TFFlaubertWithLMHeadModel"),nor=o(" (FlauBERT model)"),lor=l(),tC=a("li"),Dge=a("strong"),ior=o("funnel"),dor=o(" \u2014 "),aO=a("a"),cor=o("TFFunnelForPreTraining"),mor=o(" (Funnel Transformer model)"),gor=l(),aC=a("li"),Nge=a("strong"),hor=o("gpt2"),uor=o(" \u2014 "),sO=a("a"),por=o("TFGPT2LMHeadModel"),_or=o(" (OpenAI GPT-2 model)"),bor=l(),sC=a("li"),qge=a("strong"),vor=o("layoutlm"),Tor=o(" \u2014 "),nO=a("a"),For=o("TFLayoutLMForMaskedLM"),Cor=o(" (LayoutLM model)"),Mor=l(),nC=a("li"),Oge=a("strong"),Eor=o("lxmert"),yor=o(" \u2014 "),lO=a("a"),wor=o("TFLxmertForPreTraining"),Aor=o(" (LXMERT model)"),Lor=l(),lC=a("li"),Gge=a("strong"),Bor=o("mobilebert"),xor=o(" \u2014 "),iO=a("a"),kor=o("TFMobileBertForPreTraining"),Ror=o(" (MobileBERT model)"),Sor=l(),iC=a("li"),Xge=a("strong"),Por=o("mpnet"),$or=o(" \u2014 "),dO=a("a"),Ior=o("TFMPNetForMaskedLM"),jor=o(" (MPNet model)"),Dor=l(),dC=a("li"),Vge=a("strong"),Nor=o("openai-gpt"),qor=o(" \u2014 "),cO=a("a"),Oor=o("TFOpenAIGPTLMHeadModel"),Gor=o(" (OpenAI GPT model)"),Xor=l(),cC=a("li"),zge=a("strong"),Vor=o("roberta"),zor=o(" \u2014 "),mO=a("a"),Wor=o("TFRobertaForMaskedLM"),Qor=o(" (RoBERTa model)"),Hor=l(),mC=a("li"),Wge=a("strong"),Uor=o("t5"),Jor=o(" \u2014 "),fO=a("a"),Yor=o("TFT5ForConditionalGeneration"),Kor=o(" (T5 model)"),Zor=l(),fC=a("li"),Qge=a("strong"),err=o("tapas"),orr=o(" \u2014 "),gO=a("a"),rrr=o("TFTapasForMaskedLM"),trr=o(" (TAPAS model)"),arr=l(),gC=a("li"),Hge=a("strong"),srr=o("transfo-xl"),nrr=o(" \u2014 "),hO=a("a"),lrr=o("TFTransfoXLLMHeadModel"),irr=o(" (Transformer-XL model)"),drr=l(),hC=a("li"),Uge=a("strong"),crr=o("xlm"),mrr=o(" \u2014 "),uO=a("a"),frr=o("TFXLMWithLMHeadModel"),grr=o(" (XLM model)"),hrr=l(),uC=a("li"),Jge=a("strong"),urr=o("xlm-roberta"),prr=o(" \u2014 "),pO=a("a"),_rr=o("TFXLMRobertaForMaskedLM"),brr=o(" (XLM-RoBERTa model)"),vrr=l(),pC=a("li"),Yge=a("strong"),Trr=o("xlnet"),Frr=o(" \u2014 "),_O=a("a"),Crr=o("TFXLNetLMHeadModel"),Mrr=o(" (XLNet model)"),Err=l(),Kge=a("p"),yrr=o("Examples:"),wrr=l(),m(zA.$$.fragment),kke=l(),vc=a("h2"),_C=a("a"),Zge=a("span"),m(WA.$$.fragment),Arr=l(),ehe=a("span"),Lrr=o("TFAutoModelForCausalLM"),Rke=l(),Fr=a("div"),m(QA.$$.fragment),Brr=l(),Tc=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ohe=a("code"),krr=o("from_pretrained()"),Rrr=o("class method or the "),rhe=a("code"),Srr=o("from_config()"),Prr=o(`class
method.`),$rr=l(),HA=a("p"),Irr=o("This class cannot be instantiated directly using "),the=a("code"),jrr=o("__init__()"),Drr=o(" (throws an error)."),Nrr=l(),ut=a("div"),m(UA.$$.fragment),qrr=l(),ahe=a("p"),Orr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Grr=l(),Fc=a("p"),Xrr=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),Vrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=a("code"),Wrr=o("from_pretrained()"),Qrr=o("to load the model weights."),Hrr=l(),lhe=a("p"),Urr=o("Examples:"),Jrr=l(),m(JA.$$.fragment),Yrr=l(),po=a("div"),m(YA.$$.fragment),Krr=l(),ihe=a("p"),Zrr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),etr=l(),_s=a("p"),otr=o("The model class to instantiate is selected based on the "),dhe=a("code"),rtr=o("model_type"),ttr=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),atr=o("pretrained_model_name_or_path"),str=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),ntr=o("pretrained_model_name_or_path"),ltr=o(":"),itr=l(),fe=a("ul"),bC=a("li"),fhe=a("strong"),dtr=o("bert"),ctr=o(" \u2014 "),bO=a("a"),mtr=o("TFBertLMHeadModel"),ftr=o(" (BERT model)"),gtr=l(),vC=a("li"),ghe=a("strong"),htr=o("camembert"),utr=o(" \u2014 "),vO=a("a"),ptr=o("TFCamembertForCausalLM"),_tr=o(" (CamemBERT model)"),btr=l(),TC=a("li"),hhe=a("strong"),vtr=o("ctrl"),Ttr=o(" \u2014 "),TO=a("a"),Ftr=o("TFCTRLLMHeadModel"),Ctr=o(" (CTRL model)"),Mtr=l(),FC=a("li"),uhe=a("strong"),Etr=o("gpt2"),ytr=o(" \u2014 "),FO=a("a"),wtr=o("TFGPT2LMHeadModel"),Atr=o(" (OpenAI GPT-2 model)"),Ltr=l(),CC=a("li"),phe=a("strong"),Btr=o("openai-gpt"),xtr=o(" \u2014 "),CO=a("a"),ktr=o("TFOpenAIGPTLMHeadModel"),Rtr=o(" (OpenAI GPT model)"),Str=l(),MC=a("li"),_he=a("strong"),Ptr=o("rembert"),$tr=o(" \u2014 "),MO=a("a"),Itr=o("TFRemBertForCausalLM"),jtr=o(" (RemBERT model)"),Dtr=l(),EC=a("li"),bhe=a("strong"),Ntr=o("roberta"),qtr=o(" \u2014 "),EO=a("a"),Otr=o("TFRobertaForCausalLM"),Gtr=o(" (RoBERTa model)"),Xtr=l(),yC=a("li"),vhe=a("strong"),Vtr=o("roformer"),ztr=o(" \u2014 "),yO=a("a"),Wtr=o("TFRoFormerForCausalLM"),Qtr=o(" (RoFormer model)"),Htr=l(),wC=a("li"),The=a("strong"),Utr=o("transfo-xl"),Jtr=o(" \u2014 "),wO=a("a"),Ytr=o("TFTransfoXLLMHeadModel"),Ktr=o(" (Transformer-XL model)"),Ztr=l(),AC=a("li"),Fhe=a("strong"),ear=o("xlm"),oar=o(" \u2014 "),AO=a("a"),rar=o("TFXLMWithLMHeadModel"),tar=o(" (XLM model)"),aar=l(),LC=a("li"),Che=a("strong"),sar=o("xlnet"),nar=o(" \u2014 "),LO=a("a"),lar=o("TFXLNetLMHeadModel"),iar=o(" (XLNet model)"),dar=l(),Mhe=a("p"),car=o("Examples:"),mar=l(),m(KA.$$.fragment),Ske=l(),Cc=a("h2"),BC=a("a"),Ehe=a("span"),m(ZA.$$.fragment),far=l(),yhe=a("span"),gar=o("TFAutoModelForImageClassification"),Pke=l(),Cr=a("div"),m(e0.$$.fragment),har=l(),Mc=a("p"),uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),whe=a("code"),par=o("from_pretrained()"),_ar=o("class method or the "),Ahe=a("code"),bar=o("from_config()"),Tar=o(`class
method.`),Far=l(),o0=a("p"),Car=o("This class cannot be instantiated directly using "),Lhe=a("code"),Mar=o("__init__()"),Ear=o(" (throws an error)."),yar=l(),pt=a("div"),m(r0.$$.fragment),war=l(),Bhe=a("p"),Aar=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lar=l(),Ec=a("p"),Bar=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),xar=o("not"),kar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),khe=a("code"),Rar=o("from_pretrained()"),Sar=o("to load the model weights."),Par=l(),Rhe=a("p"),$ar=o("Examples:"),Iar=l(),m(t0.$$.fragment),jar=l(),_o=a("div"),m(a0.$$.fragment),Dar=l(),She=a("p"),Nar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qar=l(),bs=a("p"),Oar=o("The model class to instantiate is selected based on the "),Phe=a("code"),Gar=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),Var=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(":"),Har=l(),s0=a("ul"),xC=a("li"),jhe=a("strong"),Uar=o("convnext"),Jar=o(" \u2014 "),BO=a("a"),Yar=o("TFConvNextForImageClassification"),Kar=o(" (ConvNext model)"),Zar=l(),kC=a("li"),Dhe=a("strong"),esr=o("vit"),osr=o(" \u2014 "),xO=a("a"),rsr=o("TFViTForImageClassification"),tsr=o(" (ViT model)"),asr=l(),Nhe=a("p"),ssr=o("Examples:"),nsr=l(),m(n0.$$.fragment),$ke=l(),yc=a("h2"),RC=a("a"),qhe=a("span"),m(l0.$$.fragment),lsr=l(),Ohe=a("span"),isr=o("TFAutoModelForMaskedLM"),Ike=l(),Mr=a("div"),m(i0.$$.fragment),dsr=l(),wc=a("p"),csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ghe=a("code"),msr=o("from_pretrained()"),fsr=o("class method or the "),Xhe=a("code"),gsr=o("from_config()"),hsr=o(`class
method.`),usr=l(),d0=a("p"),psr=o("This class cannot be instantiated directly using "),Vhe=a("code"),_sr=o("__init__()"),bsr=o(" (throws an error)."),vsr=l(),_t=a("div"),m(c0.$$.fragment),Tsr=l(),zhe=a("p"),Fsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Csr=l(),Ac=a("p"),Msr=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),Esr=o("not"),ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qhe=a("code"),wsr=o("from_pretrained()"),Asr=o("to load the model weights."),Lsr=l(),Hhe=a("p"),Bsr=o("Examples:"),xsr=l(),m(m0.$$.fragment),ksr=l(),bo=a("div"),m(f0.$$.fragment),Rsr=l(),Uhe=a("p"),Ssr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Psr=l(),vs=a("p"),$sr=o("The model class to instantiate is selected based on the "),Jhe=a("code"),Isr=o("model_type"),jsr=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),Dsr=o("pretrained_model_name_or_path"),Nsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),qsr=o("pretrained_model_name_or_path"),Osr=o(":"),Gsr=l(),Y=a("ul"),SC=a("li"),Zhe=a("strong"),Xsr=o("albert"),Vsr=o(" \u2014 "),kO=a("a"),zsr=o("TFAlbertForMaskedLM"),Wsr=o(" (ALBERT model)"),Qsr=l(),PC=a("li"),eue=a("strong"),Hsr=o("bert"),Usr=o(" \u2014 "),RO=a("a"),Jsr=o("TFBertForMaskedLM"),Ysr=o(" (BERT model)"),Ksr=l(),$C=a("li"),oue=a("strong"),Zsr=o("camembert"),enr=o(" \u2014 "),SO=a("a"),onr=o("TFCamembertForMaskedLM"),rnr=o(" (CamemBERT model)"),tnr=l(),IC=a("li"),rue=a("strong"),anr=o("convbert"),snr=o(" \u2014 "),PO=a("a"),nnr=o("TFConvBertForMaskedLM"),lnr=o(" (ConvBERT model)"),inr=l(),jC=a("li"),tue=a("strong"),dnr=o("deberta"),cnr=o(" \u2014 "),$O=a("a"),mnr=o("TFDebertaForMaskedLM"),fnr=o(" (DeBERTa model)"),gnr=l(),DC=a("li"),aue=a("strong"),hnr=o("deberta-v2"),unr=o(" \u2014 "),IO=a("a"),pnr=o("TFDebertaV2ForMaskedLM"),_nr=o(" (DeBERTa-v2 model)"),bnr=l(),NC=a("li"),sue=a("strong"),vnr=o("distilbert"),Tnr=o(" \u2014 "),jO=a("a"),Fnr=o("TFDistilBertForMaskedLM"),Cnr=o(" (DistilBERT model)"),Mnr=l(),qC=a("li"),nue=a("strong"),Enr=o("electra"),ynr=o(" \u2014 "),DO=a("a"),wnr=o("TFElectraForMaskedLM"),Anr=o(" (ELECTRA model)"),Lnr=l(),OC=a("li"),lue=a("strong"),Bnr=o("flaubert"),xnr=o(" \u2014 "),NO=a("a"),knr=o("TFFlaubertWithLMHeadModel"),Rnr=o(" (FlauBERT model)"),Snr=l(),GC=a("li"),iue=a("strong"),Pnr=o("funnel"),$nr=o(" \u2014 "),qO=a("a"),Inr=o("TFFunnelForMaskedLM"),jnr=o(" (Funnel Transformer model)"),Dnr=l(),XC=a("li"),due=a("strong"),Nnr=o("layoutlm"),qnr=o(" \u2014 "),OO=a("a"),Onr=o("TFLayoutLMForMaskedLM"),Gnr=o(" (LayoutLM model)"),Xnr=l(),VC=a("li"),cue=a("strong"),Vnr=o("longformer"),znr=o(" \u2014 "),GO=a("a"),Wnr=o("TFLongformerForMaskedLM"),Qnr=o(" (Longformer model)"),Hnr=l(),zC=a("li"),mue=a("strong"),Unr=o("mobilebert"),Jnr=o(" \u2014 "),XO=a("a"),Ynr=o("TFMobileBertForMaskedLM"),Knr=o(" (MobileBERT model)"),Znr=l(),WC=a("li"),fue=a("strong"),elr=o("mpnet"),olr=o(" \u2014 "),VO=a("a"),rlr=o("TFMPNetForMaskedLM"),tlr=o(" (MPNet model)"),alr=l(),QC=a("li"),gue=a("strong"),slr=o("rembert"),nlr=o(" \u2014 "),zO=a("a"),llr=o("TFRemBertForMaskedLM"),ilr=o(" (RemBERT model)"),dlr=l(),HC=a("li"),hue=a("strong"),clr=o("roberta"),mlr=o(" \u2014 "),WO=a("a"),flr=o("TFRobertaForMaskedLM"),glr=o(" (RoBERTa model)"),hlr=l(),UC=a("li"),uue=a("strong"),ulr=o("roformer"),plr=o(" \u2014 "),QO=a("a"),_lr=o("TFRoFormerForMaskedLM"),blr=o(" (RoFormer model)"),vlr=l(),JC=a("li"),pue=a("strong"),Tlr=o("tapas"),Flr=o(" \u2014 "),HO=a("a"),Clr=o("TFTapasForMaskedLM"),Mlr=o(" (TAPAS model)"),Elr=l(),YC=a("li"),_ue=a("strong"),ylr=o("xlm"),wlr=o(" \u2014 "),UO=a("a"),Alr=o("TFXLMWithLMHeadModel"),Llr=o(" (XLM model)"),Blr=l(),KC=a("li"),bue=a("strong"),xlr=o("xlm-roberta"),klr=o(" \u2014 "),JO=a("a"),Rlr=o("TFXLMRobertaForMaskedLM"),Slr=o(" (XLM-RoBERTa model)"),Plr=l(),vue=a("p"),$lr=o("Examples:"),Ilr=l(),m(g0.$$.fragment),jke=l(),Lc=a("h2"),ZC=a("a"),Tue=a("span"),m(h0.$$.fragment),jlr=l(),Fue=a("span"),Dlr=o("TFAutoModelForSeq2SeqLM"),Dke=l(),Er=a("div"),m(u0.$$.fragment),Nlr=l(),Bc=a("p"),qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cue=a("code"),Olr=o("from_pretrained()"),Glr=o("class method or the "),Mue=a("code"),Xlr=o("from_config()"),Vlr=o(`class
method.`),zlr=l(),p0=a("p"),Wlr=o("This class cannot be instantiated directly using "),Eue=a("code"),Qlr=o("__init__()"),Hlr=o(" (throws an error)."),Ulr=l(),bt=a("div"),m(_0.$$.fragment),Jlr=l(),yue=a("p"),Ylr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Klr=l(),xc=a("p"),Zlr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),eir=o("not"),oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=a("code"),rir=o("from_pretrained()"),tir=o("to load the model weights."),air=l(),Lue=a("p"),sir=o("Examples:"),nir=l(),m(b0.$$.fragment),lir=l(),vo=a("div"),m(v0.$$.fragment),iir=l(),Bue=a("p"),dir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cir=l(),Ts=a("p"),mir=o("The model class to instantiate is selected based on the "),xue=a("code"),fir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),hir=o("pretrained_model_name_or_path"),uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(":"),bir=l(),_e=a("ul"),eM=a("li"),Sue=a("strong"),vir=o("bart"),Tir=o(" \u2014 "),YO=a("a"),Fir=o("TFBartForConditionalGeneration"),Cir=o(" (BART model)"),Mir=l(),oM=a("li"),Pue=a("strong"),Eir=o("blenderbot"),yir=o(" \u2014 "),KO=a("a"),wir=o("TFBlenderbotForConditionalGeneration"),Air=o(" (Blenderbot model)"),Lir=l(),rM=a("li"),$ue=a("strong"),Bir=o("blenderbot-small"),xir=o(" \u2014 "),ZO=a("a"),kir=o("TFBlenderbotSmallForConditionalGeneration"),Rir=o(" (BlenderbotSmall model)"),Sir=l(),tM=a("li"),Iue=a("strong"),Pir=o("encoder-decoder"),$ir=o(" \u2014 "),eG=a("a"),Iir=o("TFEncoderDecoderModel"),jir=o(" (Encoder decoder model)"),Dir=l(),aM=a("li"),jue=a("strong"),Nir=o("led"),qir=o(" \u2014 "),oG=a("a"),Oir=o("TFLEDForConditionalGeneration"),Gir=o(" (LED model)"),Xir=l(),sM=a("li"),Due=a("strong"),Vir=o("marian"),zir=o(" \u2014 "),rG=a("a"),Wir=o("TFMarianMTModel"),Qir=o(" (Marian model)"),Hir=l(),nM=a("li"),Nue=a("strong"),Uir=o("mbart"),Jir=o(" \u2014 "),tG=a("a"),Yir=o("TFMBartForConditionalGeneration"),Kir=o(" (mBART model)"),Zir=l(),lM=a("li"),que=a("strong"),edr=o("mt5"),odr=o(" \u2014 "),aG=a("a"),rdr=o("TFMT5ForConditionalGeneration"),tdr=o(" (mT5 model)"),adr=l(),iM=a("li"),Oue=a("strong"),sdr=o("pegasus"),ndr=o(" \u2014 "),sG=a("a"),ldr=o("TFPegasusForConditionalGeneration"),idr=o(" (Pegasus model)"),ddr=l(),dM=a("li"),Gue=a("strong"),cdr=o("t5"),mdr=o(" \u2014 "),nG=a("a"),fdr=o("TFT5ForConditionalGeneration"),gdr=o(" (T5 model)"),hdr=l(),Xue=a("p"),udr=o("Examples:"),pdr=l(),m(T0.$$.fragment),Nke=l(),kc=a("h2"),cM=a("a"),Vue=a("span"),m(F0.$$.fragment),_dr=l(),zue=a("span"),bdr=o("TFAutoModelForSequenceClassification"),qke=l(),yr=a("div"),m(C0.$$.fragment),vdr=l(),Rc=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wue=a("code"),Fdr=o("from_pretrained()"),Cdr=o("class method or the "),Que=a("code"),Mdr=o("from_config()"),Edr=o(`class
method.`),ydr=l(),M0=a("p"),wdr=o("This class cannot be instantiated directly using "),Hue=a("code"),Adr=o("__init__()"),Ldr=o(" (throws an error)."),Bdr=l(),vt=a("div"),m(E0.$$.fragment),xdr=l(),Uue=a("p"),kdr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rdr=l(),Sc=a("p"),Sdr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Pdr=o("not"),$dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yue=a("code"),Idr=o("from_pretrained()"),jdr=o("to load the model weights."),Ddr=l(),Kue=a("p"),Ndr=o("Examples:"),qdr=l(),m(y0.$$.fragment),Odr=l(),To=a("div"),m(w0.$$.fragment),Gdr=l(),Zue=a("p"),Xdr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vdr=l(),Fs=a("p"),zdr=o("The model class to instantiate is selected based on the "),epe=a("code"),Wdr=o("model_type"),Qdr=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),Hdr=o("pretrained_model_name_or_path"),Udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),Jdr=o("pretrained_model_name_or_path"),Ydr=o(":"),Kdr=l(),V=a("ul"),mM=a("li"),tpe=a("strong"),Zdr=o("albert"),ecr=o(" \u2014 "),lG=a("a"),ocr=o("TFAlbertForSequenceClassification"),rcr=o(" (ALBERT model)"),tcr=l(),fM=a("li"),ape=a("strong"),acr=o("bert"),scr=o(" \u2014 "),iG=a("a"),ncr=o("TFBertForSequenceClassification"),lcr=o(" (BERT model)"),icr=l(),gM=a("li"),spe=a("strong"),dcr=o("camembert"),ccr=o(" \u2014 "),dG=a("a"),mcr=o("TFCamembertForSequenceClassification"),fcr=o(" (CamemBERT model)"),gcr=l(),hM=a("li"),npe=a("strong"),hcr=o("convbert"),ucr=o(" \u2014 "),cG=a("a"),pcr=o("TFConvBertForSequenceClassification"),_cr=o(" (ConvBERT model)"),bcr=l(),uM=a("li"),lpe=a("strong"),vcr=o("ctrl"),Tcr=o(" \u2014 "),mG=a("a"),Fcr=o("TFCTRLForSequenceClassification"),Ccr=o(" (CTRL model)"),Mcr=l(),pM=a("li"),ipe=a("strong"),Ecr=o("deberta"),ycr=o(" \u2014 "),fG=a("a"),wcr=o("TFDebertaForSequenceClassification"),Acr=o(" (DeBERTa model)"),Lcr=l(),_M=a("li"),dpe=a("strong"),Bcr=o("deberta-v2"),xcr=o(" \u2014 "),gG=a("a"),kcr=o("TFDebertaV2ForSequenceClassification"),Rcr=o(" (DeBERTa-v2 model)"),Scr=l(),bM=a("li"),cpe=a("strong"),Pcr=o("distilbert"),$cr=o(" \u2014 "),hG=a("a"),Icr=o("TFDistilBertForSequenceClassification"),jcr=o(" (DistilBERT model)"),Dcr=l(),vM=a("li"),mpe=a("strong"),Ncr=o("electra"),qcr=o(" \u2014 "),uG=a("a"),Ocr=o("TFElectraForSequenceClassification"),Gcr=o(" (ELECTRA model)"),Xcr=l(),TM=a("li"),fpe=a("strong"),Vcr=o("flaubert"),zcr=o(" \u2014 "),pG=a("a"),Wcr=o("TFFlaubertForSequenceClassification"),Qcr=o(" (FlauBERT model)"),Hcr=l(),FM=a("li"),gpe=a("strong"),Ucr=o("funnel"),Jcr=o(" \u2014 "),_G=a("a"),Ycr=o("TFFunnelForSequenceClassification"),Kcr=o(" (Funnel Transformer model)"),Zcr=l(),CM=a("li"),hpe=a("strong"),emr=o("gpt2"),omr=o(" \u2014 "),bG=a("a"),rmr=o("TFGPT2ForSequenceClassification"),tmr=o(" (OpenAI GPT-2 model)"),amr=l(),MM=a("li"),upe=a("strong"),smr=o("layoutlm"),nmr=o(" \u2014 "),vG=a("a"),lmr=o("TFLayoutLMForSequenceClassification"),imr=o(" (LayoutLM model)"),dmr=l(),EM=a("li"),ppe=a("strong"),cmr=o("longformer"),mmr=o(" \u2014 "),TG=a("a"),fmr=o("TFLongformerForSequenceClassification"),gmr=o(" (Longformer model)"),hmr=l(),yM=a("li"),_pe=a("strong"),umr=o("mobilebert"),pmr=o(" \u2014 "),FG=a("a"),_mr=o("TFMobileBertForSequenceClassification"),bmr=o(" (MobileBERT model)"),vmr=l(),wM=a("li"),bpe=a("strong"),Tmr=o("mpnet"),Fmr=o(" \u2014 "),CG=a("a"),Cmr=o("TFMPNetForSequenceClassification"),Mmr=o(" (MPNet model)"),Emr=l(),AM=a("li"),vpe=a("strong"),ymr=o("openai-gpt"),wmr=o(" \u2014 "),MG=a("a"),Amr=o("TFOpenAIGPTForSequenceClassification"),Lmr=o(" (OpenAI GPT model)"),Bmr=l(),LM=a("li"),Tpe=a("strong"),xmr=o("rembert"),kmr=o(" \u2014 "),EG=a("a"),Rmr=o("TFRemBertForSequenceClassification"),Smr=o(" (RemBERT model)"),Pmr=l(),BM=a("li"),Fpe=a("strong"),$mr=o("roberta"),Imr=o(" \u2014 "),yG=a("a"),jmr=o("TFRobertaForSequenceClassification"),Dmr=o(" (RoBERTa model)"),Nmr=l(),xM=a("li"),Cpe=a("strong"),qmr=o("roformer"),Omr=o(" \u2014 "),wG=a("a"),Gmr=o("TFRoFormerForSequenceClassification"),Xmr=o(" (RoFormer model)"),Vmr=l(),kM=a("li"),Mpe=a("strong"),zmr=o("tapas"),Wmr=o(" \u2014 "),AG=a("a"),Qmr=o("TFTapasForSequenceClassification"),Hmr=o(" (TAPAS model)"),Umr=l(),RM=a("li"),Epe=a("strong"),Jmr=o("transfo-xl"),Ymr=o(" \u2014 "),LG=a("a"),Kmr=o("TFTransfoXLForSequenceClassification"),Zmr=o(" (Transformer-XL model)"),efr=l(),SM=a("li"),ype=a("strong"),ofr=o("xlm"),rfr=o(" \u2014 "),BG=a("a"),tfr=o("TFXLMForSequenceClassification"),afr=o(" (XLM model)"),sfr=l(),PM=a("li"),wpe=a("strong"),nfr=o("xlm-roberta"),lfr=o(" \u2014 "),xG=a("a"),ifr=o("TFXLMRobertaForSequenceClassification"),dfr=o(" (XLM-RoBERTa model)"),cfr=l(),$M=a("li"),Ape=a("strong"),mfr=o("xlnet"),ffr=o(" \u2014 "),kG=a("a"),gfr=o("TFXLNetForSequenceClassification"),hfr=o(" (XLNet model)"),ufr=l(),Lpe=a("p"),pfr=o("Examples:"),_fr=l(),m(A0.$$.fragment),Oke=l(),Pc=a("h2"),IM=a("a"),Bpe=a("span"),m(L0.$$.fragment),bfr=l(),xpe=a("span"),vfr=o("TFAutoModelForMultipleChoice"),Gke=l(),wr=a("div"),m(B0.$$.fragment),Tfr=l(),$c=a("p"),Ffr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kpe=a("code"),Cfr=o("from_pretrained()"),Mfr=o("class method or the "),Rpe=a("code"),Efr=o("from_config()"),yfr=o(`class
method.`),wfr=l(),x0=a("p"),Afr=o("This class cannot be instantiated directly using "),Spe=a("code"),Lfr=o("__init__()"),Bfr=o(" (throws an error)."),xfr=l(),Tt=a("div"),m(k0.$$.fragment),kfr=l(),Ppe=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sfr=l(),Ic=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),$fr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=a("code"),jfr=o("from_pretrained()"),Dfr=o("to load the model weights."),Nfr=l(),jpe=a("p"),qfr=o("Examples:"),Ofr=l(),m(R0.$$.fragment),Gfr=l(),Fo=a("div"),m(S0.$$.fragment),Xfr=l(),Dpe=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zfr=l(),Cs=a("p"),Wfr=o("The model class to instantiate is selected based on the "),Npe=a("code"),Qfr=o("model_type"),Hfr=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),ae=a("ul"),jM=a("li"),Gpe=a("strong"),egr=o("albert"),ogr=o(" \u2014 "),RG=a("a"),rgr=o("TFAlbertForMultipleChoice"),tgr=o(" (ALBERT model)"),agr=l(),DM=a("li"),Xpe=a("strong"),sgr=o("bert"),ngr=o(" \u2014 "),SG=a("a"),lgr=o("TFBertForMultipleChoice"),igr=o(" (BERT model)"),dgr=l(),NM=a("li"),Vpe=a("strong"),cgr=o("camembert"),mgr=o(" \u2014 "),PG=a("a"),fgr=o("TFCamembertForMultipleChoice"),ggr=o(" (CamemBERT model)"),hgr=l(),qM=a("li"),zpe=a("strong"),ugr=o("convbert"),pgr=o(" \u2014 "),$G=a("a"),_gr=o("TFConvBertForMultipleChoice"),bgr=o(" (ConvBERT model)"),vgr=l(),OM=a("li"),Wpe=a("strong"),Tgr=o("distilbert"),Fgr=o(" \u2014 "),IG=a("a"),Cgr=o("TFDistilBertForMultipleChoice"),Mgr=o(" (DistilBERT model)"),Egr=l(),GM=a("li"),Qpe=a("strong"),ygr=o("electra"),wgr=o(" \u2014 "),jG=a("a"),Agr=o("TFElectraForMultipleChoice"),Lgr=o(" (ELECTRA model)"),Bgr=l(),XM=a("li"),Hpe=a("strong"),xgr=o("flaubert"),kgr=o(" \u2014 "),DG=a("a"),Rgr=o("TFFlaubertForMultipleChoice"),Sgr=o(" (FlauBERT model)"),Pgr=l(),VM=a("li"),Upe=a("strong"),$gr=o("funnel"),Igr=o(" \u2014 "),NG=a("a"),jgr=o("TFFunnelForMultipleChoice"),Dgr=o(" (Funnel Transformer model)"),Ngr=l(),zM=a("li"),Jpe=a("strong"),qgr=o("longformer"),Ogr=o(" \u2014 "),qG=a("a"),Ggr=o("TFLongformerForMultipleChoice"),Xgr=o(" (Longformer model)"),Vgr=l(),WM=a("li"),Ype=a("strong"),zgr=o("mobilebert"),Wgr=o(" \u2014 "),OG=a("a"),Qgr=o("TFMobileBertForMultipleChoice"),Hgr=o(" (MobileBERT model)"),Ugr=l(),QM=a("li"),Kpe=a("strong"),Jgr=o("mpnet"),Ygr=o(" \u2014 "),GG=a("a"),Kgr=o("TFMPNetForMultipleChoice"),Zgr=o(" (MPNet model)"),ehr=l(),HM=a("li"),Zpe=a("strong"),ohr=o("rembert"),rhr=o(" \u2014 "),XG=a("a"),thr=o("TFRemBertForMultipleChoice"),ahr=o(" (RemBERT model)"),shr=l(),UM=a("li"),e_e=a("strong"),nhr=o("roberta"),lhr=o(" \u2014 "),VG=a("a"),ihr=o("TFRobertaForMultipleChoice"),dhr=o(" (RoBERTa model)"),chr=l(),JM=a("li"),o_e=a("strong"),mhr=o("roformer"),fhr=o(" \u2014 "),zG=a("a"),ghr=o("TFRoFormerForMultipleChoice"),hhr=o(" (RoFormer model)"),uhr=l(),YM=a("li"),r_e=a("strong"),phr=o("xlm"),_hr=o(" \u2014 "),WG=a("a"),bhr=o("TFXLMForMultipleChoice"),vhr=o(" (XLM model)"),Thr=l(),KM=a("li"),t_e=a("strong"),Fhr=o("xlm-roberta"),Chr=o(" \u2014 "),QG=a("a"),Mhr=o("TFXLMRobertaForMultipleChoice"),Ehr=o(" (XLM-RoBERTa model)"),yhr=l(),ZM=a("li"),a_e=a("strong"),whr=o("xlnet"),Ahr=o(" \u2014 "),HG=a("a"),Lhr=o("TFXLNetForMultipleChoice"),Bhr=o(" (XLNet model)"),xhr=l(),s_e=a("p"),khr=o("Examples:"),Rhr=l(),m(P0.$$.fragment),Xke=l(),jc=a("h2"),e4=a("a"),n_e=a("span"),m($0.$$.fragment),Shr=l(),l_e=a("span"),Phr=o("TFAutoModelForTableQuestionAnswering"),Vke=l(),Ar=a("div"),m(I0.$$.fragment),$hr=l(),Dc=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),i_e=a("code"),jhr=o("from_pretrained()"),Dhr=o("class method or the "),d_e=a("code"),Nhr=o("from_config()"),qhr=o(`class
method.`),Ohr=l(),j0=a("p"),Ghr=o("This class cannot be instantiated directly using "),c_e=a("code"),Xhr=o("__init__()"),Vhr=o(" (throws an error)."),zhr=l(),Ft=a("div"),m(D0.$$.fragment),Whr=l(),m_e=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hhr=l(),Nc=a("p"),Uhr=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g_e=a("code"),Khr=o("from_pretrained()"),Zhr=o("to load the model weights."),eur=l(),h_e=a("p"),our=o("Examples:"),rur=l(),m(N0.$$.fragment),tur=l(),Co=a("div"),m(q0.$$.fragment),aur=l(),u_e=a("p"),sur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nur=l(),Ms=a("p"),lur=o("The model class to instantiate is selected based on the "),p_e=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),cur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),fur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),v_e=a("ul"),o4=a("li"),T_e=a("strong"),uur=o("tapas"),pur=o(" \u2014 "),UG=a("a"),_ur=o("TFTapasForQuestionAnswering"),bur=o(" (TAPAS model)"),vur=l(),F_e=a("p"),Tur=o("Examples:"),Fur=l(),m(O0.$$.fragment),zke=l(),qc=a("h2"),r4=a("a"),C_e=a("span"),m(G0.$$.fragment),Cur=l(),M_e=a("span"),Mur=o("TFAutoModelForTokenClassification"),Wke=l(),Lr=a("div"),m(X0.$$.fragment),Eur=l(),Oc=a("p"),yur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),E_e=a("code"),wur=o("from_pretrained()"),Aur=o("class method or the "),y_e=a("code"),Lur=o("from_config()"),Bur=o(`class
method.`),xur=l(),V0=a("p"),kur=o("This class cannot be instantiated directly using "),w_e=a("code"),Rur=o("__init__()"),Sur=o(" (throws an error)."),Pur=l(),Ct=a("div"),m(z0.$$.fragment),$ur=l(),A_e=a("p"),Iur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jur=l(),Gc=a("p"),Dur=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),Nur=o("not"),qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B_e=a("code"),Our=o("from_pretrained()"),Gur=o("to load the model weights."),Xur=l(),x_e=a("p"),Vur=o("Examples:"),zur=l(),m(W0.$$.fragment),Wur=l(),Mo=a("div"),m(Q0.$$.fragment),Qur=l(),k_e=a("p"),Hur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uur=l(),Es=a("p"),Jur=o("The model class to instantiate is selected based on the "),R_e=a("code"),Yur=o("model_type"),Kur=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),Zur=o("pretrained_model_name_or_path"),epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(":"),tpr=l(),K=a("ul"),t4=a("li"),$_e=a("strong"),apr=o("albert"),spr=o(" \u2014 "),JG=a("a"),npr=o("TFAlbertForTokenClassification"),lpr=o(" (ALBERT model)"),ipr=l(),a4=a("li"),I_e=a("strong"),dpr=o("bert"),cpr=o(" \u2014 "),YG=a("a"),mpr=o("TFBertForTokenClassification"),fpr=o(" (BERT model)"),gpr=l(),s4=a("li"),j_e=a("strong"),hpr=o("camembert"),upr=o(" \u2014 "),KG=a("a"),ppr=o("TFCamembertForTokenClassification"),_pr=o(" (CamemBERT model)"),bpr=l(),n4=a("li"),D_e=a("strong"),vpr=o("convbert"),Tpr=o(" \u2014 "),ZG=a("a"),Fpr=o("TFConvBertForTokenClassification"),Cpr=o(" (ConvBERT model)"),Mpr=l(),l4=a("li"),N_e=a("strong"),Epr=o("deberta"),ypr=o(" \u2014 "),eX=a("a"),wpr=o("TFDebertaForTokenClassification"),Apr=o(" (DeBERTa model)"),Lpr=l(),i4=a("li"),q_e=a("strong"),Bpr=o("deberta-v2"),xpr=o(" \u2014 "),oX=a("a"),kpr=o("TFDebertaV2ForTokenClassification"),Rpr=o(" (DeBERTa-v2 model)"),Spr=l(),d4=a("li"),O_e=a("strong"),Ppr=o("distilbert"),$pr=o(" \u2014 "),rX=a("a"),Ipr=o("TFDistilBertForTokenClassification"),jpr=o(" (DistilBERT model)"),Dpr=l(),c4=a("li"),G_e=a("strong"),Npr=o("electra"),qpr=o(" \u2014 "),tX=a("a"),Opr=o("TFElectraForTokenClassification"),Gpr=o(" (ELECTRA model)"),Xpr=l(),m4=a("li"),X_e=a("strong"),Vpr=o("flaubert"),zpr=o(" \u2014 "),aX=a("a"),Wpr=o("TFFlaubertForTokenClassification"),Qpr=o(" (FlauBERT model)"),Hpr=l(),f4=a("li"),V_e=a("strong"),Upr=o("funnel"),Jpr=o(" \u2014 "),sX=a("a"),Ypr=o("TFFunnelForTokenClassification"),Kpr=o(" (Funnel Transformer model)"),Zpr=l(),g4=a("li"),z_e=a("strong"),e_r=o("layoutlm"),o_r=o(" \u2014 "),nX=a("a"),r_r=o("TFLayoutLMForTokenClassification"),t_r=o(" (LayoutLM model)"),a_r=l(),h4=a("li"),W_e=a("strong"),s_r=o("longformer"),n_r=o(" \u2014 "),lX=a("a"),l_r=o("TFLongformerForTokenClassification"),i_r=o(" (Longformer model)"),d_r=l(),u4=a("li"),Q_e=a("strong"),c_r=o("mobilebert"),m_r=o(" \u2014 "),iX=a("a"),f_r=o("TFMobileBertForTokenClassification"),g_r=o(" (MobileBERT model)"),h_r=l(),p4=a("li"),H_e=a("strong"),u_r=o("mpnet"),p_r=o(" \u2014 "),dX=a("a"),__r=o("TFMPNetForTokenClassification"),b_r=o(" (MPNet model)"),v_r=l(),_4=a("li"),U_e=a("strong"),T_r=o("rembert"),F_r=o(" \u2014 "),cX=a("a"),C_r=o("TFRemBertForTokenClassification"),M_r=o(" (RemBERT model)"),E_r=l(),b4=a("li"),J_e=a("strong"),y_r=o("roberta"),w_r=o(" \u2014 "),mX=a("a"),A_r=o("TFRobertaForTokenClassification"),L_r=o(" (RoBERTa model)"),B_r=l(),v4=a("li"),Y_e=a("strong"),x_r=o("roformer"),k_r=o(" \u2014 "),fX=a("a"),R_r=o("TFRoFormerForTokenClassification"),S_r=o(" (RoFormer model)"),P_r=l(),T4=a("li"),K_e=a("strong"),$_r=o("xlm"),I_r=o(" \u2014 "),gX=a("a"),j_r=o("TFXLMForTokenClassification"),D_r=o(" (XLM model)"),N_r=l(),F4=a("li"),Z_e=a("strong"),q_r=o("xlm-roberta"),O_r=o(" \u2014 "),hX=a("a"),G_r=o("TFXLMRobertaForTokenClassification"),X_r=o(" (XLM-RoBERTa model)"),V_r=l(),C4=a("li"),ebe=a("strong"),z_r=o("xlnet"),W_r=o(" \u2014 "),uX=a("a"),Q_r=o("TFXLNetForTokenClassification"),H_r=o(" (XLNet model)"),U_r=l(),obe=a("p"),J_r=o("Examples:"),Y_r=l(),m(H0.$$.fragment),Qke=l(),Xc=a("h2"),M4=a("a"),rbe=a("span"),m(U0.$$.fragment),K_r=l(),tbe=a("span"),Z_r=o("TFAutoModelForQuestionAnswering"),Hke=l(),Br=a("div"),m(J0.$$.fragment),ebr=l(),Vc=a("p"),obr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),abe=a("code"),rbr=o("from_pretrained()"),tbr=o("class method or the "),sbe=a("code"),abr=o("from_config()"),sbr=o(`class
method.`),nbr=l(),Y0=a("p"),lbr=o("This class cannot be instantiated directly using "),nbe=a("code"),ibr=o("__init__()"),dbr=o(" (throws an error)."),cbr=l(),Mt=a("div"),m(K0.$$.fragment),mbr=l(),lbe=a("p"),fbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gbr=l(),zc=a("p"),hbr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),ubr=o("not"),pbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dbe=a("code"),_br=o("from_pretrained()"),bbr=o("to load the model weights."),vbr=l(),cbe=a("p"),Tbr=o("Examples:"),Fbr=l(),m(Z0.$$.fragment),Cbr=l(),Eo=a("div"),m(eL.$$.fragment),Mbr=l(),mbe=a("p"),Ebr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ybr=l(),ys=a("p"),wbr=o("The model class to instantiate is selected based on the "),fbe=a("code"),Abr=o("model_type"),Lbr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),Bbr=o("pretrained_model_name_or_path"),xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),kbr=o("pretrained_model_name_or_path"),Rbr=o(":"),Sbr=l(),Z=a("ul"),E4=a("li"),ube=a("strong"),Pbr=o("albert"),$br=o(" \u2014 "),pX=a("a"),Ibr=o("TFAlbertForQuestionAnswering"),jbr=o(" (ALBERT model)"),Dbr=l(),y4=a("li"),pbe=a("strong"),Nbr=o("bert"),qbr=o(" \u2014 "),_X=a("a"),Obr=o("TFBertForQuestionAnswering"),Gbr=o(" (BERT model)"),Xbr=l(),w4=a("li"),_be=a("strong"),Vbr=o("camembert"),zbr=o(" \u2014 "),bX=a("a"),Wbr=o("TFCamembertForQuestionAnswering"),Qbr=o(" (CamemBERT model)"),Hbr=l(),A4=a("li"),bbe=a("strong"),Ubr=o("convbert"),Jbr=o(" \u2014 "),vX=a("a"),Ybr=o("TFConvBertForQuestionAnswering"),Kbr=o(" (ConvBERT model)"),Zbr=l(),L4=a("li"),vbe=a("strong"),e2r=o("deberta"),o2r=o(" \u2014 "),TX=a("a"),r2r=o("TFDebertaForQuestionAnswering"),t2r=o(" (DeBERTa model)"),a2r=l(),B4=a("li"),Tbe=a("strong"),s2r=o("deberta-v2"),n2r=o(" \u2014 "),FX=a("a"),l2r=o("TFDebertaV2ForQuestionAnswering"),i2r=o(" (DeBERTa-v2 model)"),d2r=l(),x4=a("li"),Fbe=a("strong"),c2r=o("distilbert"),m2r=o(" \u2014 "),CX=a("a"),f2r=o("TFDistilBertForQuestionAnswering"),g2r=o(" (DistilBERT model)"),h2r=l(),k4=a("li"),Cbe=a("strong"),u2r=o("electra"),p2r=o(" \u2014 "),MX=a("a"),_2r=o("TFElectraForQuestionAnswering"),b2r=o(" (ELECTRA model)"),v2r=l(),R4=a("li"),Mbe=a("strong"),T2r=o("flaubert"),F2r=o(" \u2014 "),EX=a("a"),C2r=o("TFFlaubertForQuestionAnsweringSimple"),M2r=o(" (FlauBERT model)"),E2r=l(),S4=a("li"),Ebe=a("strong"),y2r=o("funnel"),w2r=o(" \u2014 "),yX=a("a"),A2r=o("TFFunnelForQuestionAnswering"),L2r=o(" (Funnel Transformer model)"),B2r=l(),P4=a("li"),ybe=a("strong"),x2r=o("longformer"),k2r=o(" \u2014 "),wX=a("a"),R2r=o("TFLongformerForQuestionAnswering"),S2r=o(" (Longformer model)"),P2r=l(),$4=a("li"),wbe=a("strong"),$2r=o("mobilebert"),I2r=o(" \u2014 "),AX=a("a"),j2r=o("TFMobileBertForQuestionAnswering"),D2r=o(" (MobileBERT model)"),N2r=l(),I4=a("li"),Abe=a("strong"),q2r=o("mpnet"),O2r=o(" \u2014 "),LX=a("a"),G2r=o("TFMPNetForQuestionAnswering"),X2r=o(" (MPNet model)"),V2r=l(),j4=a("li"),Lbe=a("strong"),z2r=o("rembert"),W2r=o(" \u2014 "),BX=a("a"),Q2r=o("TFRemBertForQuestionAnswering"),H2r=o(" (RemBERT model)"),U2r=l(),D4=a("li"),Bbe=a("strong"),J2r=o("roberta"),Y2r=o(" \u2014 "),xX=a("a"),K2r=o("TFRobertaForQuestionAnswering"),Z2r=o(" (RoBERTa model)"),evr=l(),N4=a("li"),xbe=a("strong"),ovr=o("roformer"),rvr=o(" \u2014 "),kX=a("a"),tvr=o("TFRoFormerForQuestionAnswering"),avr=o(" (RoFormer model)"),svr=l(),q4=a("li"),kbe=a("strong"),nvr=o("xlm"),lvr=o(" \u2014 "),RX=a("a"),ivr=o("TFXLMForQuestionAnsweringSimple"),dvr=o(" (XLM model)"),cvr=l(),O4=a("li"),Rbe=a("strong"),mvr=o("xlm-roberta"),fvr=o(" \u2014 "),SX=a("a"),gvr=o("TFXLMRobertaForQuestionAnswering"),hvr=o(" (XLM-RoBERTa model)"),uvr=l(),G4=a("li"),Sbe=a("strong"),pvr=o("xlnet"),_vr=o(" \u2014 "),PX=a("a"),bvr=o("TFXLNetForQuestionAnsweringSimple"),vvr=o(" (XLNet model)"),Tvr=l(),Pbe=a("p"),Fvr=o("Examples:"),Cvr=l(),m(oL.$$.fragment),Uke=l(),Wc=a("h2"),X4=a("a"),$be=a("span"),m(rL.$$.fragment),Mvr=l(),Ibe=a("span"),Evr=o("TFAutoModelForVision2Seq"),Jke=l(),xr=a("div"),m(tL.$$.fragment),yvr=l(),Qc=a("p"),wvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jbe=a("code"),Avr=o("from_pretrained()"),Lvr=o("class method or the "),Dbe=a("code"),Bvr=o("from_config()"),xvr=o(`class
method.`),kvr=l(),aL=a("p"),Rvr=o("This class cannot be instantiated directly using "),Nbe=a("code"),Svr=o("__init__()"),Pvr=o(" (throws an error)."),$vr=l(),Et=a("div"),m(sL.$$.fragment),Ivr=l(),qbe=a("p"),jvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dvr=l(),Hc=a("p"),Nvr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),qvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=a("code"),Gvr=o("from_pretrained()"),Xvr=o("to load the model weights."),Vvr=l(),Xbe=a("p"),zvr=o("Examples:"),Wvr=l(),m(nL.$$.fragment),Qvr=l(),yo=a("div"),m(lL.$$.fragment),Hvr=l(),Vbe=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jvr=l(),ws=a("p"),Yvr=o("The model class to instantiate is selected based on the "),zbe=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),Hbe=a("ul"),V4=a("li"),Ube=a("strong"),sTr=o("vision-encoder-decoder"),nTr=o(" \u2014 "),$X=a("a"),lTr=o("TFVisionEncoderDecoderModel"),iTr=o(" (Vision Encoder decoder model)"),dTr=l(),Jbe=a("p"),cTr=o("Examples:"),mTr=l(),m(iL.$$.fragment),Yke=l(),Uc=a("h2"),z4=a("a"),Ybe=a("span"),m(dL.$$.fragment),fTr=l(),Kbe=a("span"),gTr=o("TFAutoModelForSpeechSeq2Seq"),Kke=l(),kr=a("div"),m(cL.$$.fragment),hTr=l(),Jc=a("p"),uTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Zbe=a("code"),pTr=o("from_pretrained()"),_Tr=o("class method or the "),e2e=a("code"),bTr=o("from_config()"),vTr=o(`class
method.`),TTr=l(),mL=a("p"),FTr=o("This class cannot be instantiated directly using "),o2e=a("code"),CTr=o("__init__()"),MTr=o(" (throws an error)."),ETr=l(),yt=a("div"),m(fL.$$.fragment),yTr=l(),r2e=a("p"),wTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ATr=l(),Yc=a("p"),LTr=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),BTr=o("not"),xTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=a("code"),kTr=o("from_pretrained()"),RTr=o("to load the model weights."),STr=l(),s2e=a("p"),PTr=o("Examples:"),$Tr=l(),m(gL.$$.fragment),ITr=l(),wo=a("div"),m(hL.$$.fragment),jTr=l(),n2e=a("p"),DTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NTr=l(),As=a("p"),qTr=o("The model class to instantiate is selected based on the "),l2e=a("code"),OTr=o("model_type"),GTr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),XTr=o("pretrained_model_name_or_path"),VTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),zTr=o("pretrained_model_name_or_path"),WTr=o(":"),QTr=l(),c2e=a("ul"),W4=a("li"),m2e=a("strong"),HTr=o("speech_to_text"),UTr=o(" \u2014 "),IX=a("a"),JTr=o("TFSpeech2TextForConditionalGeneration"),YTr=o(" (Speech2Text model)"),KTr=l(),f2e=a("p"),ZTr=o("Examples:"),e1r=l(),m(uL.$$.fragment),Zke=l(),Kc=a("h2"),Q4=a("a"),g2e=a("span"),m(pL.$$.fragment),o1r=l(),h2e=a("span"),r1r=o("FlaxAutoModel"),eRe=l(),Rr=a("div"),m(_L.$$.fragment),t1r=l(),Zc=a("p"),a1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),u2e=a("code"),s1r=o("from_pretrained()"),n1r=o("class method or the "),p2e=a("code"),l1r=o("from_config()"),i1r=o(`class
method.`),d1r=l(),bL=a("p"),c1r=o("This class cannot be instantiated directly using "),_2e=a("code"),m1r=o("__init__()"),f1r=o(" (throws an error)."),g1r=l(),wt=a("div"),m(vL.$$.fragment),h1r=l(),b2e=a("p"),u1r=o("Instantiates one of the base model classes of the library from a configuration."),p1r=l(),em=a("p"),_1r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),b1r=o("not"),v1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=a("code"),T1r=o("from_pretrained()"),F1r=o("to load the model weights."),C1r=l(),F2e=a("p"),M1r=o("Examples:"),E1r=l(),m(TL.$$.fragment),y1r=l(),Ao=a("div"),m(FL.$$.fragment),w1r=l(),C2e=a("p"),A1r=o("Instantiate one of the base model classes of the library from a pretrained model."),L1r=l(),Ls=a("p"),B1r=o("The model class to instantiate is selected based on the "),M2e=a("code"),x1r=o("model_type"),k1r=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),R1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),P1r=o("pretrained_model_name_or_path"),$1r=o(":"),I1r=l(),z=a("ul"),H4=a("li"),w2e=a("strong"),j1r=o("albert"),D1r=o(" \u2014 "),jX=a("a"),N1r=o("FlaxAlbertModel"),q1r=o(" (ALBERT model)"),O1r=l(),U4=a("li"),A2e=a("strong"),G1r=o("bart"),X1r=o(" \u2014 "),DX=a("a"),V1r=o("FlaxBartModel"),z1r=o(" (BART model)"),W1r=l(),J4=a("li"),L2e=a("strong"),Q1r=o("beit"),H1r=o(" \u2014 "),NX=a("a"),U1r=o("FlaxBeitModel"),J1r=o(" (BEiT model)"),Y1r=l(),Y4=a("li"),B2e=a("strong"),K1r=o("bert"),Z1r=o(" \u2014 "),qX=a("a"),eFr=o("FlaxBertModel"),oFr=o(" (BERT model)"),rFr=l(),K4=a("li"),x2e=a("strong"),tFr=o("big_bird"),aFr=o(" \u2014 "),OX=a("a"),sFr=o("FlaxBigBirdModel"),nFr=o(" (BigBird model)"),lFr=l(),Z4=a("li"),k2e=a("strong"),iFr=o("blenderbot"),dFr=o(" \u2014 "),GX=a("a"),cFr=o("FlaxBlenderbotModel"),mFr=o(" (Blenderbot model)"),fFr=l(),eE=a("li"),R2e=a("strong"),gFr=o("blenderbot-small"),hFr=o(" \u2014 "),XX=a("a"),uFr=o("FlaxBlenderbotSmallModel"),pFr=o(" (BlenderbotSmall model)"),_Fr=l(),oE=a("li"),S2e=a("strong"),bFr=o("clip"),vFr=o(" \u2014 "),VX=a("a"),TFr=o("FlaxCLIPModel"),FFr=o(" (CLIP model)"),CFr=l(),rE=a("li"),P2e=a("strong"),MFr=o("distilbert"),EFr=o(" \u2014 "),zX=a("a"),yFr=o("FlaxDistilBertModel"),wFr=o(" (DistilBERT model)"),AFr=l(),tE=a("li"),$2e=a("strong"),LFr=o("electra"),BFr=o(" \u2014 "),WX=a("a"),xFr=o("FlaxElectraModel"),kFr=o(" (ELECTRA model)"),RFr=l(),aE=a("li"),I2e=a("strong"),SFr=o("gpt2"),PFr=o(" \u2014 "),QX=a("a"),$Fr=o("FlaxGPT2Model"),IFr=o(" (OpenAI GPT-2 model)"),jFr=l(),sE=a("li"),j2e=a("strong"),DFr=o("gpt_neo"),NFr=o(" \u2014 "),HX=a("a"),qFr=o("FlaxGPTNeoModel"),OFr=o(" (GPT Neo model)"),GFr=l(),nE=a("li"),D2e=a("strong"),XFr=o("gptj"),VFr=o(" \u2014 "),UX=a("a"),zFr=o("FlaxGPTJModel"),WFr=o(" (GPT-J model)"),QFr=l(),lE=a("li"),N2e=a("strong"),HFr=o("marian"),UFr=o(" \u2014 "),JX=a("a"),JFr=o("FlaxMarianModel"),YFr=o(" (Marian model)"),KFr=l(),iE=a("li"),q2e=a("strong"),ZFr=o("mbart"),eCr=o(" \u2014 "),YX=a("a"),oCr=o("FlaxMBartModel"),rCr=o(" (mBART model)"),tCr=l(),dE=a("li"),O2e=a("strong"),aCr=o("mt5"),sCr=o(" \u2014 "),KX=a("a"),nCr=o("FlaxMT5Model"),lCr=o(" (mT5 model)"),iCr=l(),cE=a("li"),G2e=a("strong"),dCr=o("pegasus"),cCr=o(" \u2014 "),ZX=a("a"),mCr=o("FlaxPegasusModel"),fCr=o(" (Pegasus model)"),gCr=l(),mE=a("li"),X2e=a("strong"),hCr=o("roberta"),uCr=o(" \u2014 "),eV=a("a"),pCr=o("FlaxRobertaModel"),_Cr=o(" (RoBERTa model)"),bCr=l(),fE=a("li"),V2e=a("strong"),vCr=o("roformer"),TCr=o(" \u2014 "),oV=a("a"),FCr=o("FlaxRoFormerModel"),CCr=o(" (RoFormer model)"),MCr=l(),gE=a("li"),z2e=a("strong"),ECr=o("t5"),yCr=o(" \u2014 "),rV=a("a"),wCr=o("FlaxT5Model"),ACr=o(" (T5 model)"),LCr=l(),hE=a("li"),W2e=a("strong"),BCr=o("vision-text-dual-encoder"),xCr=o(" \u2014 "),tV=a("a"),kCr=o("FlaxVisionTextDualEncoderModel"),RCr=o(" (VisionTextDualEncoder model)"),SCr=l(),uE=a("li"),Q2e=a("strong"),PCr=o("vit"),$Cr=o(" \u2014 "),aV=a("a"),ICr=o("FlaxViTModel"),jCr=o(" (ViT model)"),DCr=l(),pE=a("li"),H2e=a("strong"),NCr=o("wav2vec2"),qCr=o(" \u2014 "),sV=a("a"),OCr=o("FlaxWav2Vec2Model"),GCr=o(" (Wav2Vec2 model)"),XCr=l(),_E=a("li"),U2e=a("strong"),VCr=o("xglm"),zCr=o(" \u2014 "),nV=a("a"),WCr=o("FlaxXGLMModel"),QCr=o(" (XGLM model)"),HCr=l(),bE=a("li"),J2e=a("strong"),UCr=o("xlm-roberta"),JCr=o(" \u2014 "),lV=a("a"),YCr=o("FlaxXLMRobertaModel"),KCr=o(" (XLM-RoBERTa model)"),ZCr=l(),Y2e=a("p"),eMr=o("Examples:"),oMr=l(),m(CL.$$.fragment),oRe=l(),om=a("h2"),vE=a("a"),K2e=a("span"),m(ML.$$.fragment),rMr=l(),Z2e=a("span"),tMr=o("FlaxAutoModelForCausalLM"),rRe=l(),Sr=a("div"),m(EL.$$.fragment),aMr=l(),rm=a("p"),sMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eve=a("code"),nMr=o("from_pretrained()"),lMr=o("class method or the "),ove=a("code"),iMr=o("from_config()"),dMr=o(`class
method.`),cMr=l(),yL=a("p"),mMr=o("This class cannot be instantiated directly using "),rve=a("code"),fMr=o("__init__()"),gMr=o(" (throws an error)."),hMr=l(),At=a("div"),m(wL.$$.fragment),uMr=l(),tve=a("p"),pMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Mr=l(),tm=a("p"),bMr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),vMr=o("not"),TMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sve=a("code"),FMr=o("from_pretrained()"),CMr=o("to load the model weights."),MMr=l(),nve=a("p"),EMr=o("Examples:"),yMr=l(),m(AL.$$.fragment),wMr=l(),Lo=a("div"),m(LL.$$.fragment),AMr=l(),lve=a("p"),LMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BMr=l(),Bs=a("p"),xMr=o("The model class to instantiate is selected based on the "),ive=a("code"),kMr=o("model_type"),RMr=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),SMr=o("pretrained_model_name_or_path"),PMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),$Mr=o("pretrained_model_name_or_path"),IMr=o(":"),jMr=l(),ca=a("ul"),TE=a("li"),mve=a("strong"),DMr=o("bart"),NMr=o(" \u2014 "),iV=a("a"),qMr=o("FlaxBartForCausalLM"),OMr=o(" (BART model)"),GMr=l(),FE=a("li"),fve=a("strong"),XMr=o("gpt2"),VMr=o(" \u2014 "),dV=a("a"),zMr=o("FlaxGPT2LMHeadModel"),WMr=o(" (OpenAI GPT-2 model)"),QMr=l(),CE=a("li"),gve=a("strong"),HMr=o("gpt_neo"),UMr=o(" \u2014 "),cV=a("a"),JMr=o("FlaxGPTNeoForCausalLM"),YMr=o(" (GPT Neo model)"),KMr=l(),ME=a("li"),hve=a("strong"),ZMr=o("gptj"),e4r=o(" \u2014 "),mV=a("a"),o4r=o("FlaxGPTJForCausalLM"),r4r=o(" (GPT-J model)"),t4r=l(),EE=a("li"),uve=a("strong"),a4r=o("xglm"),s4r=o(" \u2014 "),fV=a("a"),n4r=o("FlaxXGLMForCausalLM"),l4r=o(" (XGLM model)"),i4r=l(),pve=a("p"),d4r=o("Examples:"),c4r=l(),m(BL.$$.fragment),tRe=l(),am=a("h2"),yE=a("a"),_ve=a("span"),m(xL.$$.fragment),m4r=l(),bve=a("span"),f4r=o("FlaxAutoModelForPreTraining"),aRe=l(),Pr=a("div"),m(kL.$$.fragment),g4r=l(),sm=a("p"),h4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vve=a("code"),u4r=o("from_pretrained()"),p4r=o("class method or the "),Tve=a("code"),_4r=o("from_config()"),b4r=o(`class
method.`),v4r=l(),RL=a("p"),T4r=o("This class cannot be instantiated directly using "),Fve=a("code"),F4r=o("__init__()"),C4r=o(" (throws an error)."),M4r=l(),Lt=a("div"),m(SL.$$.fragment),E4r=l(),Cve=a("p"),y4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w4r=l(),nm=a("p"),A4r=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),L4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=a("code"),x4r=o("from_pretrained()"),k4r=o("to load the model weights."),R4r=l(),yve=a("p"),S4r=o("Examples:"),P4r=l(),m(PL.$$.fragment),$4r=l(),Bo=a("div"),m($L.$$.fragment),I4r=l(),wve=a("p"),j4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D4r=l(),xs=a("p"),N4r=o("The model class to instantiate is selected based on the "),Ave=a("code"),q4r=o("model_type"),O4r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),G4r=o("pretrained_model_name_or_path"),X4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),V4r=o("pretrained_model_name_or_path"),z4r=o(":"),W4r=l(),ce=a("ul"),wE=a("li"),xve=a("strong"),Q4r=o("albert"),H4r=o(" \u2014 "),gV=a("a"),U4r=o("FlaxAlbertForPreTraining"),J4r=o(" (ALBERT model)"),Y4r=l(),AE=a("li"),kve=a("strong"),K4r=o("bart"),Z4r=o(" \u2014 "),hV=a("a"),eEr=o("FlaxBartForConditionalGeneration"),oEr=o(" (BART model)"),rEr=l(),LE=a("li"),Rve=a("strong"),tEr=o("bert"),aEr=o(" \u2014 "),uV=a("a"),sEr=o("FlaxBertForPreTraining"),nEr=o(" (BERT model)"),lEr=l(),BE=a("li"),Sve=a("strong"),iEr=o("big_bird"),dEr=o(" \u2014 "),pV=a("a"),cEr=o("FlaxBigBirdForPreTraining"),mEr=o(" (BigBird model)"),fEr=l(),xE=a("li"),Pve=a("strong"),gEr=o("electra"),hEr=o(" \u2014 "),_V=a("a"),uEr=o("FlaxElectraForPreTraining"),pEr=o(" (ELECTRA model)"),_Er=l(),kE=a("li"),$ve=a("strong"),bEr=o("mbart"),vEr=o(" \u2014 "),bV=a("a"),TEr=o("FlaxMBartForConditionalGeneration"),FEr=o(" (mBART model)"),CEr=l(),RE=a("li"),Ive=a("strong"),MEr=o("mt5"),EEr=o(" \u2014 "),vV=a("a"),yEr=o("FlaxMT5ForConditionalGeneration"),wEr=o(" (mT5 model)"),AEr=l(),SE=a("li"),jve=a("strong"),LEr=o("roberta"),BEr=o(" \u2014 "),TV=a("a"),xEr=o("FlaxRobertaForMaskedLM"),kEr=o(" (RoBERTa model)"),REr=l(),PE=a("li"),Dve=a("strong"),SEr=o("roformer"),PEr=o(" \u2014 "),FV=a("a"),$Er=o("FlaxRoFormerForMaskedLM"),IEr=o(" (RoFormer model)"),jEr=l(),$E=a("li"),Nve=a("strong"),DEr=o("t5"),NEr=o(" \u2014 "),CV=a("a"),qEr=o("FlaxT5ForConditionalGeneration"),OEr=o(" (T5 model)"),GEr=l(),IE=a("li"),qve=a("strong"),XEr=o("wav2vec2"),VEr=o(" \u2014 "),MV=a("a"),zEr=o("FlaxWav2Vec2ForPreTraining"),WEr=o(" (Wav2Vec2 model)"),QEr=l(),jE=a("li"),Ove=a("strong"),HEr=o("xlm-roberta"),UEr=o(" \u2014 "),EV=a("a"),JEr=o("FlaxXLMRobertaForMaskedLM"),YEr=o(" (XLM-RoBERTa model)"),KEr=l(),Gve=a("p"),ZEr=o("Examples:"),e3r=l(),m(IL.$$.fragment),sRe=l(),lm=a("h2"),DE=a("a"),Xve=a("span"),m(jL.$$.fragment),o3r=l(),Vve=a("span"),r3r=o("FlaxAutoModelForMaskedLM"),nRe=l(),$r=a("div"),m(DL.$$.fragment),t3r=l(),im=a("p"),a3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zve=a("code"),s3r=o("from_pretrained()"),n3r=o("class method or the "),Wve=a("code"),l3r=o("from_config()"),i3r=o(`class
method.`),d3r=l(),NL=a("p"),c3r=o("This class cannot be instantiated directly using "),Qve=a("code"),m3r=o("__init__()"),f3r=o(" (throws an error)."),g3r=l(),Bt=a("div"),m(qL.$$.fragment),h3r=l(),Hve=a("p"),u3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p3r=l(),dm=a("p"),_3r=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),b3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jve=a("code"),T3r=o("from_pretrained()"),F3r=o("to load the model weights."),C3r=l(),Yve=a("p"),M3r=o("Examples:"),E3r=l(),m(OL.$$.fragment),y3r=l(),xo=a("div"),m(GL.$$.fragment),w3r=l(),Kve=a("p"),A3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L3r=l(),ks=a("p"),B3r=o("The model class to instantiate is selected based on the "),Zve=a("code"),x3r=o("model_type"),k3r=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),R3r=o("pretrained_model_name_or_path"),S3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),P3r=o("pretrained_model_name_or_path"),$3r=o(":"),I3r=l(),be=a("ul"),NE=a("li"),rTe=a("strong"),j3r=o("albert"),D3r=o(" \u2014 "),yV=a("a"),N3r=o("FlaxAlbertForMaskedLM"),q3r=o(" (ALBERT model)"),O3r=l(),qE=a("li"),tTe=a("strong"),G3r=o("bart"),X3r=o(" \u2014 "),wV=a("a"),V3r=o("FlaxBartForConditionalGeneration"),z3r=o(" (BART model)"),W3r=l(),OE=a("li"),aTe=a("strong"),Q3r=o("bert"),H3r=o(" \u2014 "),AV=a("a"),U3r=o("FlaxBertForMaskedLM"),J3r=o(" (BERT model)"),Y3r=l(),GE=a("li"),sTe=a("strong"),K3r=o("big_bird"),Z3r=o(" \u2014 "),LV=a("a"),e5r=o("FlaxBigBirdForMaskedLM"),o5r=o(" (BigBird model)"),r5r=l(),XE=a("li"),nTe=a("strong"),t5r=o("distilbert"),a5r=o(" \u2014 "),BV=a("a"),s5r=o("FlaxDistilBertForMaskedLM"),n5r=o(" (DistilBERT model)"),l5r=l(),VE=a("li"),lTe=a("strong"),i5r=o("electra"),d5r=o(" \u2014 "),xV=a("a"),c5r=o("FlaxElectraForMaskedLM"),m5r=o(" (ELECTRA model)"),f5r=l(),zE=a("li"),iTe=a("strong"),g5r=o("mbart"),h5r=o(" \u2014 "),kV=a("a"),u5r=o("FlaxMBartForConditionalGeneration"),p5r=o(" (mBART model)"),_5r=l(),WE=a("li"),dTe=a("strong"),b5r=o("roberta"),v5r=o(" \u2014 "),RV=a("a"),T5r=o("FlaxRobertaForMaskedLM"),F5r=o(" (RoBERTa model)"),C5r=l(),QE=a("li"),cTe=a("strong"),M5r=o("roformer"),E5r=o(" \u2014 "),SV=a("a"),y5r=o("FlaxRoFormerForMaskedLM"),w5r=o(" (RoFormer model)"),A5r=l(),HE=a("li"),mTe=a("strong"),L5r=o("xlm-roberta"),B5r=o(" \u2014 "),PV=a("a"),x5r=o("FlaxXLMRobertaForMaskedLM"),k5r=o(" (XLM-RoBERTa model)"),R5r=l(),fTe=a("p"),S5r=o("Examples:"),P5r=l(),m(XL.$$.fragment),lRe=l(),cm=a("h2"),UE=a("a"),gTe=a("span"),m(VL.$$.fragment),$5r=l(),hTe=a("span"),I5r=o("FlaxAutoModelForSeq2SeqLM"),iRe=l(),Ir=a("div"),m(zL.$$.fragment),j5r=l(),mm=a("p"),D5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uTe=a("code"),N5r=o("from_pretrained()"),q5r=o("class method or the "),pTe=a("code"),O5r=o("from_config()"),G5r=o(`class
method.`),X5r=l(),WL=a("p"),V5r=o("This class cannot be instantiated directly using "),_Te=a("code"),z5r=o("__init__()"),W5r=o(" (throws an error)."),Q5r=l(),xt=a("div"),m(QL.$$.fragment),H5r=l(),bTe=a("p"),U5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J5r=l(),fm=a("p"),Y5r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),K5r=o("not"),Z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TTe=a("code"),eyr=o("from_pretrained()"),oyr=o("to load the model weights."),ryr=l(),FTe=a("p"),tyr=o("Examples:"),ayr=l(),m(HL.$$.fragment),syr=l(),ko=a("div"),m(UL.$$.fragment),nyr=l(),CTe=a("p"),lyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iyr=l(),Rs=a("p"),dyr=o("The model class to instantiate is selected based on the "),MTe=a("code"),cyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),fyr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),hyr=o("pretrained_model_name_or_path"),uyr=o(":"),pyr=l(),Me=a("ul"),JE=a("li"),wTe=a("strong"),_yr=o("bart"),byr=o(" \u2014 "),$V=a("a"),vyr=o("FlaxBartForConditionalGeneration"),Tyr=o(" (BART model)"),Fyr=l(),YE=a("li"),ATe=a("strong"),Cyr=o("blenderbot"),Myr=o(" \u2014 "),IV=a("a"),Eyr=o("FlaxBlenderbotForConditionalGeneration"),yyr=o(" (Blenderbot model)"),wyr=l(),KE=a("li"),LTe=a("strong"),Ayr=o("blenderbot-small"),Lyr=o(" \u2014 "),jV=a("a"),Byr=o("FlaxBlenderbotSmallForConditionalGeneration"),xyr=o(" (BlenderbotSmall model)"),kyr=l(),ZE=a("li"),BTe=a("strong"),Ryr=o("encoder-decoder"),Syr=o(" \u2014 "),DV=a("a"),Pyr=o("FlaxEncoderDecoderModel"),$yr=o(" (Encoder decoder model)"),Iyr=l(),e3=a("li"),xTe=a("strong"),jyr=o("marian"),Dyr=o(" \u2014 "),NV=a("a"),Nyr=o("FlaxMarianMTModel"),qyr=o(" (Marian model)"),Oyr=l(),o3=a("li"),kTe=a("strong"),Gyr=o("mbart"),Xyr=o(" \u2014 "),qV=a("a"),Vyr=o("FlaxMBartForConditionalGeneration"),zyr=o(" (mBART model)"),Wyr=l(),r3=a("li"),RTe=a("strong"),Qyr=o("mt5"),Hyr=o(" \u2014 "),OV=a("a"),Uyr=o("FlaxMT5ForConditionalGeneration"),Jyr=o(" (mT5 model)"),Yyr=l(),t3=a("li"),STe=a("strong"),Kyr=o("pegasus"),Zyr=o(" \u2014 "),GV=a("a"),ewr=o("FlaxPegasusForConditionalGeneration"),owr=o(" (Pegasus model)"),rwr=l(),a3=a("li"),PTe=a("strong"),twr=o("t5"),awr=o(" \u2014 "),XV=a("a"),swr=o("FlaxT5ForConditionalGeneration"),nwr=o(" (T5 model)"),lwr=l(),$Te=a("p"),iwr=o("Examples:"),dwr=l(),m(JL.$$.fragment),dRe=l(),gm=a("h2"),s3=a("a"),ITe=a("span"),m(YL.$$.fragment),cwr=l(),jTe=a("span"),mwr=o("FlaxAutoModelForSequenceClassification"),cRe=l(),jr=a("div"),m(KL.$$.fragment),fwr=l(),hm=a("p"),gwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DTe=a("code"),hwr=o("from_pretrained()"),uwr=o("class method or the "),NTe=a("code"),pwr=o("from_config()"),_wr=o(`class
method.`),bwr=l(),ZL=a("p"),vwr=o("This class cannot be instantiated directly using "),qTe=a("code"),Twr=o("__init__()"),Fwr=o(" (throws an error)."),Cwr=l(),kt=a("div"),m(e7.$$.fragment),Mwr=l(),OTe=a("p"),Ewr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ywr=l(),um=a("p"),wwr=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),Awr=o("not"),Lwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XTe=a("code"),Bwr=o("from_pretrained()"),xwr=o("to load the model weights."),kwr=l(),VTe=a("p"),Rwr=o("Examples:"),Swr=l(),m(o7.$$.fragment),Pwr=l(),Ro=a("div"),m(r7.$$.fragment),$wr=l(),zTe=a("p"),Iwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jwr=l(),Ss=a("p"),Dwr=o("The model class to instantiate is selected based on the "),WTe=a("code"),Nwr=o("model_type"),qwr=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),Owr=o("pretrained_model_name_or_path"),Gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),Xwr=o("pretrained_model_name_or_path"),Vwr=o(":"),zwr=l(),ve=a("ul"),n3=a("li"),UTe=a("strong"),Wwr=o("albert"),Qwr=o(" \u2014 "),VV=a("a"),Hwr=o("FlaxAlbertForSequenceClassification"),Uwr=o(" (ALBERT model)"),Jwr=l(),l3=a("li"),JTe=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),zV=a("a"),Zwr=o("FlaxBartForSequenceClassification"),e6r=o(" (BART model)"),o6r=l(),i3=a("li"),YTe=a("strong"),r6r=o("bert"),t6r=o(" \u2014 "),WV=a("a"),a6r=o("FlaxBertForSequenceClassification"),s6r=o(" (BERT model)"),n6r=l(),d3=a("li"),KTe=a("strong"),l6r=o("big_bird"),i6r=o(" \u2014 "),QV=a("a"),d6r=o("FlaxBigBirdForSequenceClassification"),c6r=o(" (BigBird model)"),m6r=l(),c3=a("li"),ZTe=a("strong"),f6r=o("distilbert"),g6r=o(" \u2014 "),HV=a("a"),h6r=o("FlaxDistilBertForSequenceClassification"),u6r=o(" (DistilBERT model)"),p6r=l(),m3=a("li"),e1e=a("strong"),_6r=o("electra"),b6r=o(" \u2014 "),UV=a("a"),v6r=o("FlaxElectraForSequenceClassification"),T6r=o(" (ELECTRA model)"),F6r=l(),f3=a("li"),o1e=a("strong"),C6r=o("mbart"),M6r=o(" \u2014 "),JV=a("a"),E6r=o("FlaxMBartForSequenceClassification"),y6r=o(" (mBART model)"),w6r=l(),g3=a("li"),r1e=a("strong"),A6r=o("roberta"),L6r=o(" \u2014 "),YV=a("a"),B6r=o("FlaxRobertaForSequenceClassification"),x6r=o(" (RoBERTa model)"),k6r=l(),h3=a("li"),t1e=a("strong"),R6r=o("roformer"),S6r=o(" \u2014 "),KV=a("a"),P6r=o("FlaxRoFormerForSequenceClassification"),$6r=o(" (RoFormer model)"),I6r=l(),u3=a("li"),a1e=a("strong"),j6r=o("xlm-roberta"),D6r=o(" \u2014 "),ZV=a("a"),N6r=o("FlaxXLMRobertaForSequenceClassification"),q6r=o(" (XLM-RoBERTa model)"),O6r=l(),s1e=a("p"),G6r=o("Examples:"),X6r=l(),m(t7.$$.fragment),mRe=l(),pm=a("h2"),p3=a("a"),n1e=a("span"),m(a7.$$.fragment),V6r=l(),l1e=a("span"),z6r=o("FlaxAutoModelForQuestionAnswering"),fRe=l(),Dr=a("div"),m(s7.$$.fragment),W6r=l(),_m=a("p"),Q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),i1e=a("code"),H6r=o("from_pretrained()"),U6r=o("class method or the "),d1e=a("code"),J6r=o("from_config()"),Y6r=o(`class
method.`),K6r=l(),n7=a("p"),Z6r=o("This class cannot be instantiated directly using "),c1e=a("code"),eAr=o("__init__()"),oAr=o(" (throws an error)."),rAr=l(),Rt=a("div"),m(l7.$$.fragment),tAr=l(),m1e=a("p"),aAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sAr=l(),bm=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),lAr=o("not"),iAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g1e=a("code"),dAr=o("from_pretrained()"),cAr=o("to load the model weights."),mAr=l(),h1e=a("p"),fAr=o("Examples:"),gAr=l(),m(i7.$$.fragment),hAr=l(),So=a("div"),m(d7.$$.fragment),uAr=l(),u1e=a("p"),pAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Ar=l(),Ps=a("p"),bAr=o("The model class to instantiate is selected based on the "),p1e=a("code"),vAr=o("model_type"),TAr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),FAr=o("pretrained_model_name_or_path"),CAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(":"),yAr=l(),Te=a("ul"),_3=a("li"),v1e=a("strong"),wAr=o("albert"),AAr=o(" \u2014 "),ez=a("a"),LAr=o("FlaxAlbertForQuestionAnswering"),BAr=o(" (ALBERT model)"),xAr=l(),b3=a("li"),T1e=a("strong"),kAr=o("bart"),RAr=o(" \u2014 "),oz=a("a"),SAr=o("FlaxBartForQuestionAnswering"),PAr=o(" (BART model)"),$Ar=l(),v3=a("li"),F1e=a("strong"),IAr=o("bert"),jAr=o(" \u2014 "),rz=a("a"),DAr=o("FlaxBertForQuestionAnswering"),NAr=o(" (BERT model)"),qAr=l(),T3=a("li"),C1e=a("strong"),OAr=o("big_bird"),GAr=o(" \u2014 "),tz=a("a"),XAr=o("FlaxBigBirdForQuestionAnswering"),VAr=o(" (BigBird model)"),zAr=l(),F3=a("li"),M1e=a("strong"),WAr=o("distilbert"),QAr=o(" \u2014 "),az=a("a"),HAr=o("FlaxDistilBertForQuestionAnswering"),UAr=o(" (DistilBERT model)"),JAr=l(),C3=a("li"),E1e=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),sz=a("a"),ZAr=o("FlaxElectraForQuestionAnswering"),e0r=o(" (ELECTRA model)"),o0r=l(),M3=a("li"),y1e=a("strong"),r0r=o("mbart"),t0r=o(" \u2014 "),nz=a("a"),a0r=o("FlaxMBartForQuestionAnswering"),s0r=o(" (mBART model)"),n0r=l(),E3=a("li"),w1e=a("strong"),l0r=o("roberta"),i0r=o(" \u2014 "),lz=a("a"),d0r=o("FlaxRobertaForQuestionAnswering"),c0r=o(" (RoBERTa model)"),m0r=l(),y3=a("li"),A1e=a("strong"),f0r=o("roformer"),g0r=o(" \u2014 "),iz=a("a"),h0r=o("FlaxRoFormerForQuestionAnswering"),u0r=o(" (RoFormer model)"),p0r=l(),w3=a("li"),L1e=a("strong"),_0r=o("xlm-roberta"),b0r=o(" \u2014 "),dz=a("a"),v0r=o("FlaxXLMRobertaForQuestionAnswering"),T0r=o(" (XLM-RoBERTa model)"),F0r=l(),B1e=a("p"),C0r=o("Examples:"),M0r=l(),m(c7.$$.fragment),gRe=l(),vm=a("h2"),A3=a("a"),x1e=a("span"),m(m7.$$.fragment),E0r=l(),k1e=a("span"),y0r=o("FlaxAutoModelForTokenClassification"),hRe=l(),Nr=a("div"),m(f7.$$.fragment),w0r=l(),Tm=a("p"),A0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),R1e=a("code"),L0r=o("from_pretrained()"),B0r=o("class method or the "),S1e=a("code"),x0r=o("from_config()"),k0r=o(`class
method.`),R0r=l(),g7=a("p"),S0r=o("This class cannot be instantiated directly using "),P1e=a("code"),P0r=o("__init__()"),$0r=o(" (throws an error)."),I0r=l(),St=a("div"),m(h7.$$.fragment),j0r=l(),$1e=a("p"),D0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N0r=l(),Fm=a("p"),q0r=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),O0r=o("not"),G0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j1e=a("code"),X0r=o("from_pretrained()"),V0r=o("to load the model weights."),z0r=l(),D1e=a("p"),W0r=o("Examples:"),Q0r=l(),m(u7.$$.fragment),H0r=l(),Po=a("div"),m(p7.$$.fragment),U0r=l(),N1e=a("p"),J0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y0r=l(),$s=a("p"),K0r=o("The model class to instantiate is selected based on the "),q1e=a("code"),Z0r=o("model_type"),eLr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(":"),sLr=l(),Se=a("ul"),L3=a("li"),X1e=a("strong"),nLr=o("albert"),lLr=o(" \u2014 "),cz=a("a"),iLr=o("FlaxAlbertForTokenClassification"),dLr=o(" (ALBERT model)"),cLr=l(),B3=a("li"),V1e=a("strong"),mLr=o("bert"),fLr=o(" \u2014 "),mz=a("a"),gLr=o("FlaxBertForTokenClassification"),hLr=o(" (BERT model)"),uLr=l(),x3=a("li"),z1e=a("strong"),pLr=o("big_bird"),_Lr=o(" \u2014 "),fz=a("a"),bLr=o("FlaxBigBirdForTokenClassification"),vLr=o(" (BigBird model)"),TLr=l(),k3=a("li"),W1e=a("strong"),FLr=o("distilbert"),CLr=o(" \u2014 "),gz=a("a"),MLr=o("FlaxDistilBertForTokenClassification"),ELr=o(" (DistilBERT model)"),yLr=l(),R3=a("li"),Q1e=a("strong"),wLr=o("electra"),ALr=o(" \u2014 "),hz=a("a"),LLr=o("FlaxElectraForTokenClassification"),BLr=o(" (ELECTRA model)"),xLr=l(),S3=a("li"),H1e=a("strong"),kLr=o("roberta"),RLr=o(" \u2014 "),uz=a("a"),SLr=o("FlaxRobertaForTokenClassification"),PLr=o(" (RoBERTa model)"),$Lr=l(),P3=a("li"),U1e=a("strong"),ILr=o("roformer"),jLr=o(" \u2014 "),pz=a("a"),DLr=o("FlaxRoFormerForTokenClassification"),NLr=o(" (RoFormer model)"),qLr=l(),$3=a("li"),J1e=a("strong"),OLr=o("xlm-roberta"),GLr=o(" \u2014 "),_z=a("a"),XLr=o("FlaxXLMRobertaForTokenClassification"),VLr=o(" (XLM-RoBERTa model)"),zLr=l(),Y1e=a("p"),WLr=o("Examples:"),QLr=l(),m(_7.$$.fragment),uRe=l(),Cm=a("h2"),I3=a("a"),K1e=a("span"),m(b7.$$.fragment),HLr=l(),Z1e=a("span"),ULr=o("FlaxAutoModelForMultipleChoice"),pRe=l(),qr=a("div"),m(v7.$$.fragment),JLr=l(),Mm=a("p"),YLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eFe=a("code"),KLr=o("from_pretrained()"),ZLr=o("class method or the "),oFe=a("code"),e7r=o("from_config()"),o7r=o(`class
method.`),r7r=l(),T7=a("p"),t7r=o("This class cannot be instantiated directly using "),rFe=a("code"),a7r=o("__init__()"),s7r=o(" (throws an error)."),n7r=l(),Pt=a("div"),m(F7.$$.fragment),l7r=l(),tFe=a("p"),i7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d7r=l(),Em=a("p"),c7r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),m7r=o("not"),f7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sFe=a("code"),g7r=o("from_pretrained()"),h7r=o("to load the model weights."),u7r=l(),nFe=a("p"),p7r=o("Examples:"),_7r=l(),m(C7.$$.fragment),b7r=l(),$o=a("div"),m(M7.$$.fragment),v7r=l(),lFe=a("p"),T7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F7r=l(),Is=a("p"),C7r=o("The model class to instantiate is selected based on the "),iFe=a("code"),M7r=o("model_type"),E7r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),y7r=o("pretrained_model_name_or_path"),w7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),A7r=o("pretrained_model_name_or_path"),L7r=o(":"),B7r=l(),Pe=a("ul"),j3=a("li"),mFe=a("strong"),x7r=o("albert"),k7r=o(" \u2014 "),bz=a("a"),R7r=o("FlaxAlbertForMultipleChoice"),S7r=o(" (ALBERT model)"),P7r=l(),D3=a("li"),fFe=a("strong"),$7r=o("bert"),I7r=o(" \u2014 "),vz=a("a"),j7r=o("FlaxBertForMultipleChoice"),D7r=o(" (BERT model)"),N7r=l(),N3=a("li"),gFe=a("strong"),q7r=o("big_bird"),O7r=o(" \u2014 "),Tz=a("a"),G7r=o("FlaxBigBirdForMultipleChoice"),X7r=o(" (BigBird model)"),V7r=l(),q3=a("li"),hFe=a("strong"),z7r=o("distilbert"),W7r=o(" \u2014 "),Fz=a("a"),Q7r=o("FlaxDistilBertForMultipleChoice"),H7r=o(" (DistilBERT model)"),U7r=l(),O3=a("li"),uFe=a("strong"),J7r=o("electra"),Y7r=o(" \u2014 "),Cz=a("a"),K7r=o("FlaxElectraForMultipleChoice"),Z7r=o(" (ELECTRA model)"),e8r=l(),G3=a("li"),pFe=a("strong"),o8r=o("roberta"),r8r=o(" \u2014 "),Mz=a("a"),t8r=o("FlaxRobertaForMultipleChoice"),a8r=o(" (RoBERTa model)"),s8r=l(),X3=a("li"),_Fe=a("strong"),n8r=o("roformer"),l8r=o(" \u2014 "),Ez=a("a"),i8r=o("FlaxRoFormerForMultipleChoice"),d8r=o(" (RoFormer model)"),c8r=l(),V3=a("li"),bFe=a("strong"),m8r=o("xlm-roberta"),f8r=o(" \u2014 "),yz=a("a"),g8r=o("FlaxXLMRobertaForMultipleChoice"),h8r=o(" (XLM-RoBERTa model)"),u8r=l(),vFe=a("p"),p8r=o("Examples:"),_8r=l(),m(E7.$$.fragment),_Re=l(),ym=a("h2"),z3=a("a"),TFe=a("span"),m(y7.$$.fragment),b8r=l(),FFe=a("span"),v8r=o("FlaxAutoModelForNextSentencePrediction"),bRe=l(),Or=a("div"),m(w7.$$.fragment),T8r=l(),wm=a("p"),F8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CFe=a("code"),C8r=o("from_pretrained()"),M8r=o("class method or the "),MFe=a("code"),E8r=o("from_config()"),y8r=o(`class
method.`),w8r=l(),A7=a("p"),A8r=o("This class cannot be instantiated directly using "),EFe=a("code"),L8r=o("__init__()"),B8r=o(" (throws an error)."),x8r=l(),$t=a("div"),m(L7.$$.fragment),k8r=l(),yFe=a("p"),R8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S8r=l(),Am=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),$8r=o("not"),I8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AFe=a("code"),j8r=o("from_pretrained()"),D8r=o("to load the model weights."),N8r=l(),LFe=a("p"),q8r=o("Examples:"),O8r=l(),m(B7.$$.fragment),G8r=l(),Io=a("div"),m(x7.$$.fragment),X8r=l(),BFe=a("p"),V8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z8r=l(),js=a("p"),W8r=o("The model class to instantiate is selected based on the "),xFe=a("code"),Q8r=o("model_type"),H8r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(":"),Z8r=l(),SFe=a("ul"),W3=a("li"),PFe=a("strong"),e9r=o("bert"),o9r=o(" \u2014 "),wz=a("a"),r9r=o("FlaxBertForNextSentencePrediction"),t9r=o(" (BERT model)"),a9r=l(),$Fe=a("p"),s9r=o("Examples:"),n9r=l(),m(k7.$$.fragment),vRe=l(),Lm=a("h2"),Q3=a("a"),IFe=a("span"),m(R7.$$.fragment),l9r=l(),jFe=a("span"),i9r=o("FlaxAutoModelForImageClassification"),TRe=l(),Gr=a("div"),m(S7.$$.fragment),d9r=l(),Bm=a("p"),c9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DFe=a("code"),m9r=o("from_pretrained()"),f9r=o("class method or the "),NFe=a("code"),g9r=o("from_config()"),h9r=o(`class
method.`),u9r=l(),P7=a("p"),p9r=o("This class cannot be instantiated directly using "),qFe=a("code"),_9r=o("__init__()"),b9r=o(" (throws an error)."),v9r=l(),It=a("div"),m($7.$$.fragment),T9r=l(),OFe=a("p"),F9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C9r=l(),xm=a("p"),M9r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),E9r=o("not"),y9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XFe=a("code"),w9r=o("from_pretrained()"),A9r=o("to load the model weights."),L9r=l(),VFe=a("p"),B9r=o("Examples:"),x9r=l(),m(I7.$$.fragment),k9r=l(),jo=a("div"),m(j7.$$.fragment),R9r=l(),zFe=a("p"),S9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P9r=l(),Ds=a("p"),$9r=o("The model class to instantiate is selected based on the "),WFe=a("code"),I9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),D9r=o("pretrained_model_name_or_path"),N9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),q9r=o("pretrained_model_name_or_path"),O9r=o(":"),G9r=l(),D7=a("ul"),H3=a("li"),UFe=a("strong"),X9r=o("beit"),V9r=o(" \u2014 "),Az=a("a"),z9r=o("FlaxBeitForImageClassification"),W9r=o(" (BEiT model)"),Q9r=l(),U3=a("li"),JFe=a("strong"),H9r=o("vit"),U9r=o(" \u2014 "),Lz=a("a"),J9r=o("FlaxViTForImageClassification"),Y9r=o(" (ViT model)"),K9r=l(),YFe=a("p"),Z9r=o("Examples:"),eBr=l(),m(N7.$$.fragment),FRe=l(),km=a("h2"),J3=a("a"),KFe=a("span"),m(q7.$$.fragment),oBr=l(),ZFe=a("span"),rBr=o("FlaxAutoModelForVision2Seq"),CRe=l(),Xr=a("div"),m(O7.$$.fragment),tBr=l(),Rm=a("p"),aBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eCe=a("code"),sBr=o("from_pretrained()"),nBr=o("class method or the "),oCe=a("code"),lBr=o("from_config()"),iBr=o(`class
method.`),dBr=l(),G7=a("p"),cBr=o("This class cannot be instantiated directly using "),rCe=a("code"),mBr=o("__init__()"),fBr=o(" (throws an error)."),gBr=l(),jt=a("div"),m(X7.$$.fragment),hBr=l(),tCe=a("p"),uBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pBr=l(),Sm=a("p"),_Br=o(`Note:
Loading a model from its configuration file does `),aCe=a("strong"),bBr=o("not"),vBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sCe=a("code"),TBr=o("from_pretrained()"),FBr=o("to load the model weights."),CBr=l(),nCe=a("p"),MBr=o("Examples:"),EBr=l(),m(V7.$$.fragment),yBr=l(),Do=a("div"),m(z7.$$.fragment),wBr=l(),lCe=a("p"),ABr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LBr=l(),Ns=a("p"),BBr=o("The model class to instantiate is selected based on the "),iCe=a("code"),xBr=o("model_type"),kBr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),RBr=o("pretrained_model_name_or_path"),SBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),PBr=o("pretrained_model_name_or_path"),$Br=o(":"),IBr=l(),mCe=a("ul"),Y3=a("li"),fCe=a("strong"),jBr=o("vision-encoder-decoder"),DBr=o(" \u2014 "),Bz=a("a"),NBr=o("FlaxVisionEncoderDecoderModel"),qBr=o(" (Vision Encoder decoder model)"),OBr=l(),gCe=a("p"),GBr=o("Examples:"),XBr=l(),m(W7.$$.fragment),this.h()},l(c){const _=LMt('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(t),$e=i(c),de=s(c,"H1",{class:!0});var Q7=n(de);he=s(Q7,"A",{id:!0,class:!0,href:!0});var hCe=n(he);io=s(hCe,"SPAN",{});var uCe=n(io);f(me.$$.fragment,uCe),uCe.forEach(t),hCe.forEach(t),Ce=i(Q7),Vo=s(Q7,"SPAN",{});var zBr=n(Vo);ji=r(zBr,"Auto Classes"),zBr.forEach(t),Q7.forEach(t),$m=i(c),ma=s(c,"P",{});var ERe=n(ma);Di=r(ERe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=s(ERe,"CODE",{});var WBr=n(Ni);Y5=r(WBr,"from_pretrained()"),WBr.forEach(t),Im=r(ERe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ERe.forEach(t),Be=i(c),co=s(c,"P",{});var K3=n(co);qi=r(K3,"Instantiating one of "),qs=s(K3,"A",{href:!0});var QBr=n(qs);K5=r(QBr,"AutoConfig"),QBr.forEach(t),Os=r(K3,", "),Gs=s(K3,"A",{href:!0});var HBr=n(Gs);Z5=r(HBr,"AutoModel"),HBr.forEach(t),Oi=r(K3,`, and
`),Xs=s(K3,"A",{href:!0});var UBr=n(Xs);ey=r(UBr,"AutoTokenizer"),UBr.forEach(t),Gi=r(K3," will directly create a class of the relevant architecture. For instance"),K3.forEach(t),jm=i(c),f(qa.$$.fragment,c),mo=i(c),ue=s(c,"P",{});var yRe=n(ue);V8=r(yRe,"will create a model that is an instance of "),Xi=s(yRe,"A",{href:!0});var JBr=n(Xi);z8=r(JBr,"BertModel"),JBr.forEach(t),W8=r(yRe,"."),yRe.forEach(t),zo=i(c),Oa=s(c,"P",{});var wRe=n(Oa);Q8=r(wRe,"There is one class of "),Dm=s(wRe,"CODE",{});var YBr=n(Dm);H8=r(YBr,"AutoModel"),YBr.forEach(t),IPe=r(wRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wRe.forEach(t),Cxe=i(c),Vi=s(c,"H2",{class:!0});var ARe=n(Vi);Nm=s(ARe,"A",{id:!0,class:!0,href:!0});var KBr=n(Nm);CQ=s(KBr,"SPAN",{});var ZBr=n(CQ);f(oy.$$.fragment,ZBr),ZBr.forEach(t),KBr.forEach(t),jPe=i(ARe),MQ=s(ARe,"SPAN",{});var exr=n(MQ);DPe=r(exr,"Extending the Auto Classes"),exr.forEach(t),ARe.forEach(t),Mxe=i(c),Vs=s(c,"P",{});var xz=n(Vs);NPe=r(xz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),EQ=s(xz,"CODE",{});var oxr=n(EQ);qPe=r(oxr,"NewModel"),oxr.forEach(t),OPe=r(xz,", make sure you have a "),yQ=s(xz,"CODE",{});var rxr=n(yQ);GPe=r(rxr,"NewModelConfig"),rxr.forEach(t),XPe=r(xz,` then you can add those to the auto
classes like this:`),xz.forEach(t),Exe=i(c),f(ry.$$.fragment,c),yxe=i(c),U8=s(c,"P",{});var txr=n(U8);VPe=r(txr,"You will then be able to use the auto classes like you would usually do!"),txr.forEach(t),wxe=i(c),f(qm.$$.fragment,c),Axe=i(c),zi=s(c,"H2",{class:!0});var LRe=n(zi);Om=s(LRe,"A",{id:!0,class:!0,href:!0});var axr=n(Om);wQ=s(axr,"SPAN",{});var sxr=n(wQ);f(ty.$$.fragment,sxr),sxr.forEach(t),axr.forEach(t),zPe=i(LRe),AQ=s(LRe,"SPAN",{});var nxr=n(AQ);WPe=r(nxr,"AutoConfig"),nxr.forEach(t),LRe.forEach(t),Lxe=i(c),Wo=s(c,"DIV",{class:!0});var Gn=n(Wo);f(ay.$$.fragment,Gn),QPe=i(Gn),sy=s(Gn,"P",{});var BRe=n(sy);HPe=r(BRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J8=s(BRe,"A",{href:!0});var lxr=n(J8);UPe=r(lxr,"from_pretrained()"),lxr.forEach(t),JPe=r(BRe," class method."),BRe.forEach(t),YPe=i(Gn),ny=s(Gn,"P",{});var xRe=n(ny);KPe=r(xRe,"This class cannot be instantiated directly using "),LQ=s(xRe,"CODE",{});var ixr=n(LQ);ZPe=r(ixr,"__init__()"),ixr.forEach(t),e$e=r(xRe," (throws an error)."),xRe.forEach(t),o$e=i(Gn),fo=s(Gn,"DIV",{class:!0});var ga=n(fo);f(ly.$$.fragment,ga),r$e=i(ga),BQ=s(ga,"P",{});var dxr=n(BQ);t$e=r(dxr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dxr.forEach(t),a$e=i(ga),Wi=s(ga,"P",{});var kz=n(Wi);s$e=r(kz,"The configuration class to instantiate is selected based on the "),xQ=s(kz,"CODE",{});var cxr=n(xQ);n$e=r(cxr,"model_type"),cxr.forEach(t),l$e=r(kz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kQ=s(kz,"CODE",{});var mxr=n(kQ);i$e=r(mxr,"pretrained_model_name_or_path"),mxr.forEach(t),d$e=r(kz,":"),kz.forEach(t),c$e=i(ga),v=s(ga,"UL",{});var T=n(v);Gm=s(T,"LI",{});var pCe=n(Gm);RQ=s(pCe,"STRONG",{});var fxr=n(RQ);m$e=r(fxr,"albert"),fxr.forEach(t),f$e=r(pCe," \u2014 "),Y8=s(pCe,"A",{href:!0});var gxr=n(Y8);g$e=r(gxr,"AlbertConfig"),gxr.forEach(t),h$e=r(pCe," (ALBERT model)"),pCe.forEach(t),u$e=i(T),Xm=s(T,"LI",{});var _Ce=n(Xm);SQ=s(_Ce,"STRONG",{});var hxr=n(SQ);p$e=r(hxr,"bart"),hxr.forEach(t),_$e=r(_Ce," \u2014 "),K8=s(_Ce,"A",{href:!0});var uxr=n(K8);b$e=r(uxr,"BartConfig"),uxr.forEach(t),v$e=r(_Ce," (BART model)"),_Ce.forEach(t),T$e=i(T),Vm=s(T,"LI",{});var bCe=n(Vm);PQ=s(bCe,"STRONG",{});var pxr=n(PQ);F$e=r(pxr,"beit"),pxr.forEach(t),C$e=r(bCe," \u2014 "),Z8=s(bCe,"A",{href:!0});var _xr=n(Z8);M$e=r(_xr,"BeitConfig"),_xr.forEach(t),E$e=r(bCe," (BEiT model)"),bCe.forEach(t),y$e=i(T),zm=s(T,"LI",{});var vCe=n(zm);$Q=s(vCe,"STRONG",{});var bxr=n($Q);w$e=r(bxr,"bert"),bxr.forEach(t),A$e=r(vCe," \u2014 "),e9=s(vCe,"A",{href:!0});var vxr=n(e9);L$e=r(vxr,"BertConfig"),vxr.forEach(t),B$e=r(vCe," (BERT model)"),vCe.forEach(t),x$e=i(T),Wm=s(T,"LI",{});var TCe=n(Wm);IQ=s(TCe,"STRONG",{});var Txr=n(IQ);k$e=r(Txr,"bert-generation"),Txr.forEach(t),R$e=r(TCe," \u2014 "),o9=s(TCe,"A",{href:!0});var Fxr=n(o9);S$e=r(Fxr,"BertGenerationConfig"),Fxr.forEach(t),P$e=r(TCe," (Bert Generation model)"),TCe.forEach(t),$$e=i(T),Qm=s(T,"LI",{});var FCe=n(Qm);jQ=s(FCe,"STRONG",{});var Cxr=n(jQ);I$e=r(Cxr,"big_bird"),Cxr.forEach(t),j$e=r(FCe," \u2014 "),r9=s(FCe,"A",{href:!0});var Mxr=n(r9);D$e=r(Mxr,"BigBirdConfig"),Mxr.forEach(t),N$e=r(FCe," (BigBird model)"),FCe.forEach(t),q$e=i(T),Hm=s(T,"LI",{});var CCe=n(Hm);DQ=s(CCe,"STRONG",{});var Exr=n(DQ);O$e=r(Exr,"bigbird_pegasus"),Exr.forEach(t),G$e=r(CCe," \u2014 "),t9=s(CCe,"A",{href:!0});var yxr=n(t9);X$e=r(yxr,"BigBirdPegasusConfig"),yxr.forEach(t),V$e=r(CCe," (BigBirdPegasus model)"),CCe.forEach(t),z$e=i(T),Um=s(T,"LI",{});var MCe=n(Um);NQ=s(MCe,"STRONG",{});var wxr=n(NQ);W$e=r(wxr,"blenderbot"),wxr.forEach(t),Q$e=r(MCe," \u2014 "),a9=s(MCe,"A",{href:!0});var Axr=n(a9);H$e=r(Axr,"BlenderbotConfig"),Axr.forEach(t),U$e=r(MCe," (Blenderbot model)"),MCe.forEach(t),J$e=i(T),Jm=s(T,"LI",{});var ECe=n(Jm);qQ=s(ECe,"STRONG",{});var Lxr=n(qQ);Y$e=r(Lxr,"blenderbot-small"),Lxr.forEach(t),K$e=r(ECe," \u2014 "),s9=s(ECe,"A",{href:!0});var Bxr=n(s9);Z$e=r(Bxr,"BlenderbotSmallConfig"),Bxr.forEach(t),eIe=r(ECe," (BlenderbotSmall model)"),ECe.forEach(t),oIe=i(T),Ym=s(T,"LI",{});var yCe=n(Ym);OQ=s(yCe,"STRONG",{});var xxr=n(OQ);rIe=r(xxr,"camembert"),xxr.forEach(t),tIe=r(yCe," \u2014 "),n9=s(yCe,"A",{href:!0});var kxr=n(n9);aIe=r(kxr,"CamembertConfig"),kxr.forEach(t),sIe=r(yCe," (CamemBERT model)"),yCe.forEach(t),nIe=i(T),Km=s(T,"LI",{});var wCe=n(Km);GQ=s(wCe,"STRONG",{});var Rxr=n(GQ);lIe=r(Rxr,"canine"),Rxr.forEach(t),iIe=r(wCe," \u2014 "),l9=s(wCe,"A",{href:!0});var Sxr=n(l9);dIe=r(Sxr,"CanineConfig"),Sxr.forEach(t),cIe=r(wCe," (Canine model)"),wCe.forEach(t),mIe=i(T),Zm=s(T,"LI",{});var ACe=n(Zm);XQ=s(ACe,"STRONG",{});var Pxr=n(XQ);fIe=r(Pxr,"clip"),Pxr.forEach(t),gIe=r(ACe," \u2014 "),i9=s(ACe,"A",{href:!0});var $xr=n(i9);hIe=r($xr,"CLIPConfig"),$xr.forEach(t),uIe=r(ACe," (CLIP model)"),ACe.forEach(t),pIe=i(T),ef=s(T,"LI",{});var LCe=n(ef);VQ=s(LCe,"STRONG",{});var Ixr=n(VQ);_Ie=r(Ixr,"convbert"),Ixr.forEach(t),bIe=r(LCe," \u2014 "),d9=s(LCe,"A",{href:!0});var jxr=n(d9);vIe=r(jxr,"ConvBertConfig"),jxr.forEach(t),TIe=r(LCe," (ConvBERT model)"),LCe.forEach(t),FIe=i(T),of=s(T,"LI",{});var BCe=n(of);zQ=s(BCe,"STRONG",{});var Dxr=n(zQ);CIe=r(Dxr,"convnext"),Dxr.forEach(t),MIe=r(BCe," \u2014 "),c9=s(BCe,"A",{href:!0});var Nxr=n(c9);EIe=r(Nxr,"ConvNextConfig"),Nxr.forEach(t),yIe=r(BCe," (ConvNext model)"),BCe.forEach(t),wIe=i(T),rf=s(T,"LI",{});var xCe=n(rf);WQ=s(xCe,"STRONG",{});var qxr=n(WQ);AIe=r(qxr,"ctrl"),qxr.forEach(t),LIe=r(xCe," \u2014 "),m9=s(xCe,"A",{href:!0});var Oxr=n(m9);BIe=r(Oxr,"CTRLConfig"),Oxr.forEach(t),xIe=r(xCe," (CTRL model)"),xCe.forEach(t),kIe=i(T),tf=s(T,"LI",{});var kCe=n(tf);QQ=s(kCe,"STRONG",{});var Gxr=n(QQ);RIe=r(Gxr,"data2vec-audio"),Gxr.forEach(t),SIe=r(kCe," \u2014 "),f9=s(kCe,"A",{href:!0});var Xxr=n(f9);PIe=r(Xxr,"Data2VecAudioConfig"),Xxr.forEach(t),$Ie=r(kCe," (Data2VecAudio model)"),kCe.forEach(t),IIe=i(T),af=s(T,"LI",{});var RCe=n(af);HQ=s(RCe,"STRONG",{});var Vxr=n(HQ);jIe=r(Vxr,"data2vec-text"),Vxr.forEach(t),DIe=r(RCe," \u2014 "),g9=s(RCe,"A",{href:!0});var zxr=n(g9);NIe=r(zxr,"Data2VecTextConfig"),zxr.forEach(t),qIe=r(RCe," (Data2VecText model)"),RCe.forEach(t),OIe=i(T),sf=s(T,"LI",{});var SCe=n(sf);UQ=s(SCe,"STRONG",{});var Wxr=n(UQ);GIe=r(Wxr,"deberta"),Wxr.forEach(t),XIe=r(SCe," \u2014 "),h9=s(SCe,"A",{href:!0});var Qxr=n(h9);VIe=r(Qxr,"DebertaConfig"),Qxr.forEach(t),zIe=r(SCe," (DeBERTa model)"),SCe.forEach(t),WIe=i(T),nf=s(T,"LI",{});var PCe=n(nf);JQ=s(PCe,"STRONG",{});var Hxr=n(JQ);QIe=r(Hxr,"deberta-v2"),Hxr.forEach(t),HIe=r(PCe," \u2014 "),u9=s(PCe,"A",{href:!0});var Uxr=n(u9);UIe=r(Uxr,"DebertaV2Config"),Uxr.forEach(t),JIe=r(PCe," (DeBERTa-v2 model)"),PCe.forEach(t),YIe=i(T),lf=s(T,"LI",{});var $Ce=n(lf);YQ=s($Ce,"STRONG",{});var Jxr=n(YQ);KIe=r(Jxr,"deit"),Jxr.forEach(t),ZIe=r($Ce," \u2014 "),p9=s($Ce,"A",{href:!0});var Yxr=n(p9);eje=r(Yxr,"DeiTConfig"),Yxr.forEach(t),oje=r($Ce," (DeiT model)"),$Ce.forEach(t),rje=i(T),df=s(T,"LI",{});var ICe=n(df);KQ=s(ICe,"STRONG",{});var Kxr=n(KQ);tje=r(Kxr,"detr"),Kxr.forEach(t),aje=r(ICe," \u2014 "),_9=s(ICe,"A",{href:!0});var Zxr=n(_9);sje=r(Zxr,"DetrConfig"),Zxr.forEach(t),nje=r(ICe," (DETR model)"),ICe.forEach(t),lje=i(T),cf=s(T,"LI",{});var jCe=n(cf);ZQ=s(jCe,"STRONG",{});var ekr=n(ZQ);ije=r(ekr,"distilbert"),ekr.forEach(t),dje=r(jCe," \u2014 "),b9=s(jCe,"A",{href:!0});var okr=n(b9);cje=r(okr,"DistilBertConfig"),okr.forEach(t),mje=r(jCe," (DistilBERT model)"),jCe.forEach(t),fje=i(T),mf=s(T,"LI",{});var DCe=n(mf);eH=s(DCe,"STRONG",{});var rkr=n(eH);gje=r(rkr,"dpr"),rkr.forEach(t),hje=r(DCe," \u2014 "),v9=s(DCe,"A",{href:!0});var tkr=n(v9);uje=r(tkr,"DPRConfig"),tkr.forEach(t),pje=r(DCe," (DPR model)"),DCe.forEach(t),_je=i(T),ff=s(T,"LI",{});var NCe=n(ff);oH=s(NCe,"STRONG",{});var akr=n(oH);bje=r(akr,"electra"),akr.forEach(t),vje=r(NCe," \u2014 "),T9=s(NCe,"A",{href:!0});var skr=n(T9);Tje=r(skr,"ElectraConfig"),skr.forEach(t),Fje=r(NCe," (ELECTRA model)"),NCe.forEach(t),Cje=i(T),gf=s(T,"LI",{});var qCe=n(gf);rH=s(qCe,"STRONG",{});var nkr=n(rH);Mje=r(nkr,"encoder-decoder"),nkr.forEach(t),Eje=r(qCe," \u2014 "),F9=s(qCe,"A",{href:!0});var lkr=n(F9);yje=r(lkr,"EncoderDecoderConfig"),lkr.forEach(t),wje=r(qCe," (Encoder decoder model)"),qCe.forEach(t),Aje=i(T),hf=s(T,"LI",{});var OCe=n(hf);tH=s(OCe,"STRONG",{});var ikr=n(tH);Lje=r(ikr,"flaubert"),ikr.forEach(t),Bje=r(OCe," \u2014 "),C9=s(OCe,"A",{href:!0});var dkr=n(C9);xje=r(dkr,"FlaubertConfig"),dkr.forEach(t),kje=r(OCe," (FlauBERT model)"),OCe.forEach(t),Rje=i(T),uf=s(T,"LI",{});var GCe=n(uf);aH=s(GCe,"STRONG",{});var ckr=n(aH);Sje=r(ckr,"fnet"),ckr.forEach(t),Pje=r(GCe," \u2014 "),M9=s(GCe,"A",{href:!0});var mkr=n(M9);$je=r(mkr,"FNetConfig"),mkr.forEach(t),Ije=r(GCe," (FNet model)"),GCe.forEach(t),jje=i(T),pf=s(T,"LI",{});var XCe=n(pf);sH=s(XCe,"STRONG",{});var fkr=n(sH);Dje=r(fkr,"fsmt"),fkr.forEach(t),Nje=r(XCe," \u2014 "),E9=s(XCe,"A",{href:!0});var gkr=n(E9);qje=r(gkr,"FSMTConfig"),gkr.forEach(t),Oje=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),Gje=i(T),_f=s(T,"LI",{});var VCe=n(_f);nH=s(VCe,"STRONG",{});var hkr=n(nH);Xje=r(hkr,"funnel"),hkr.forEach(t),Vje=r(VCe," \u2014 "),y9=s(VCe,"A",{href:!0});var ukr=n(y9);zje=r(ukr,"FunnelConfig"),ukr.forEach(t),Wje=r(VCe," (Funnel Transformer model)"),VCe.forEach(t),Qje=i(T),bf=s(T,"LI",{});var zCe=n(bf);lH=s(zCe,"STRONG",{});var pkr=n(lH);Hje=r(pkr,"gpt2"),pkr.forEach(t),Uje=r(zCe," \u2014 "),w9=s(zCe,"A",{href:!0});var _kr=n(w9);Jje=r(_kr,"GPT2Config"),_kr.forEach(t),Yje=r(zCe," (OpenAI GPT-2 model)"),zCe.forEach(t),Kje=i(T),vf=s(T,"LI",{});var WCe=n(vf);iH=s(WCe,"STRONG",{});var bkr=n(iH);Zje=r(bkr,"gpt_neo"),bkr.forEach(t),eDe=r(WCe," \u2014 "),A9=s(WCe,"A",{href:!0});var vkr=n(A9);oDe=r(vkr,"GPTNeoConfig"),vkr.forEach(t),rDe=r(WCe," (GPT Neo model)"),WCe.forEach(t),tDe=i(T),Tf=s(T,"LI",{});var QCe=n(Tf);dH=s(QCe,"STRONG",{});var Tkr=n(dH);aDe=r(Tkr,"gptj"),Tkr.forEach(t),sDe=r(QCe," \u2014 "),L9=s(QCe,"A",{href:!0});var Fkr=n(L9);nDe=r(Fkr,"GPTJConfig"),Fkr.forEach(t),lDe=r(QCe," (GPT-J model)"),QCe.forEach(t),iDe=i(T),Ff=s(T,"LI",{});var HCe=n(Ff);cH=s(HCe,"STRONG",{});var Ckr=n(cH);dDe=r(Ckr,"hubert"),Ckr.forEach(t),cDe=r(HCe," \u2014 "),B9=s(HCe,"A",{href:!0});var Mkr=n(B9);mDe=r(Mkr,"HubertConfig"),Mkr.forEach(t),fDe=r(HCe," (Hubert model)"),HCe.forEach(t),gDe=i(T),Cf=s(T,"LI",{});var UCe=n(Cf);mH=s(UCe,"STRONG",{});var Ekr=n(mH);hDe=r(Ekr,"ibert"),Ekr.forEach(t),uDe=r(UCe," \u2014 "),x9=s(UCe,"A",{href:!0});var ykr=n(x9);pDe=r(ykr,"IBertConfig"),ykr.forEach(t),_De=r(UCe," (I-BERT model)"),UCe.forEach(t),bDe=i(T),Mf=s(T,"LI",{});var JCe=n(Mf);fH=s(JCe,"STRONG",{});var wkr=n(fH);vDe=r(wkr,"imagegpt"),wkr.forEach(t),TDe=r(JCe," \u2014 "),k9=s(JCe,"A",{href:!0});var Akr=n(k9);FDe=r(Akr,"ImageGPTConfig"),Akr.forEach(t),CDe=r(JCe," (ImageGPT model)"),JCe.forEach(t),MDe=i(T),Ef=s(T,"LI",{});var YCe=n(Ef);gH=s(YCe,"STRONG",{});var Lkr=n(gH);EDe=r(Lkr,"layoutlm"),Lkr.forEach(t),yDe=r(YCe," \u2014 "),R9=s(YCe,"A",{href:!0});var Bkr=n(R9);wDe=r(Bkr,"LayoutLMConfig"),Bkr.forEach(t),ADe=r(YCe," (LayoutLM model)"),YCe.forEach(t),LDe=i(T),yf=s(T,"LI",{});var KCe=n(yf);hH=s(KCe,"STRONG",{});var xkr=n(hH);BDe=r(xkr,"layoutlmv2"),xkr.forEach(t),xDe=r(KCe," \u2014 "),S9=s(KCe,"A",{href:!0});var kkr=n(S9);kDe=r(kkr,"LayoutLMv2Config"),kkr.forEach(t),RDe=r(KCe," (LayoutLMv2 model)"),KCe.forEach(t),SDe=i(T),wf=s(T,"LI",{});var ZCe=n(wf);uH=s(ZCe,"STRONG",{});var Rkr=n(uH);PDe=r(Rkr,"led"),Rkr.forEach(t),$De=r(ZCe," \u2014 "),P9=s(ZCe,"A",{href:!0});var Skr=n(P9);IDe=r(Skr,"LEDConfig"),Skr.forEach(t),jDe=r(ZCe," (LED model)"),ZCe.forEach(t),DDe=i(T),Af=s(T,"LI",{});var eMe=n(Af);pH=s(eMe,"STRONG",{});var Pkr=n(pH);NDe=r(Pkr,"longformer"),Pkr.forEach(t),qDe=r(eMe," \u2014 "),$9=s(eMe,"A",{href:!0});var $kr=n($9);ODe=r($kr,"LongformerConfig"),$kr.forEach(t),GDe=r(eMe," (Longformer model)"),eMe.forEach(t),XDe=i(T),Lf=s(T,"LI",{});var oMe=n(Lf);_H=s(oMe,"STRONG",{});var Ikr=n(_H);VDe=r(Ikr,"luke"),Ikr.forEach(t),zDe=r(oMe," \u2014 "),I9=s(oMe,"A",{href:!0});var jkr=n(I9);WDe=r(jkr,"LukeConfig"),jkr.forEach(t),QDe=r(oMe," (LUKE model)"),oMe.forEach(t),HDe=i(T),Bf=s(T,"LI",{});var rMe=n(Bf);bH=s(rMe,"STRONG",{});var Dkr=n(bH);UDe=r(Dkr,"lxmert"),Dkr.forEach(t),JDe=r(rMe," \u2014 "),j9=s(rMe,"A",{href:!0});var Nkr=n(j9);YDe=r(Nkr,"LxmertConfig"),Nkr.forEach(t),KDe=r(rMe," (LXMERT model)"),rMe.forEach(t),ZDe=i(T),xf=s(T,"LI",{});var tMe=n(xf);vH=s(tMe,"STRONG",{});var qkr=n(vH);eNe=r(qkr,"m2m_100"),qkr.forEach(t),oNe=r(tMe," \u2014 "),D9=s(tMe,"A",{href:!0});var Okr=n(D9);rNe=r(Okr,"M2M100Config"),Okr.forEach(t),tNe=r(tMe," (M2M100 model)"),tMe.forEach(t),aNe=i(T),kf=s(T,"LI",{});var aMe=n(kf);TH=s(aMe,"STRONG",{});var Gkr=n(TH);sNe=r(Gkr,"marian"),Gkr.forEach(t),nNe=r(aMe," \u2014 "),N9=s(aMe,"A",{href:!0});var Xkr=n(N9);lNe=r(Xkr,"MarianConfig"),Xkr.forEach(t),iNe=r(aMe," (Marian model)"),aMe.forEach(t),dNe=i(T),Rf=s(T,"LI",{});var sMe=n(Rf);FH=s(sMe,"STRONG",{});var Vkr=n(FH);cNe=r(Vkr,"maskformer"),Vkr.forEach(t),mNe=r(sMe," \u2014 "),q9=s(sMe,"A",{href:!0});var zkr=n(q9);fNe=r(zkr,"MaskFormerConfig"),zkr.forEach(t),gNe=r(sMe," (MaskFormer model)"),sMe.forEach(t),hNe=i(T),Sf=s(T,"LI",{});var nMe=n(Sf);CH=s(nMe,"STRONG",{});var Wkr=n(CH);uNe=r(Wkr,"mbart"),Wkr.forEach(t),pNe=r(nMe," \u2014 "),O9=s(nMe,"A",{href:!0});var Qkr=n(O9);_Ne=r(Qkr,"MBartConfig"),Qkr.forEach(t),bNe=r(nMe," (mBART model)"),nMe.forEach(t),vNe=i(T),Pf=s(T,"LI",{});var lMe=n(Pf);MH=s(lMe,"STRONG",{});var Hkr=n(MH);TNe=r(Hkr,"megatron-bert"),Hkr.forEach(t),FNe=r(lMe," \u2014 "),G9=s(lMe,"A",{href:!0});var Ukr=n(G9);CNe=r(Ukr,"MegatronBertConfig"),Ukr.forEach(t),MNe=r(lMe," (MegatronBert model)"),lMe.forEach(t),ENe=i(T),$f=s(T,"LI",{});var iMe=n($f);EH=s(iMe,"STRONG",{});var Jkr=n(EH);yNe=r(Jkr,"mobilebert"),Jkr.forEach(t),wNe=r(iMe," \u2014 "),X9=s(iMe,"A",{href:!0});var Ykr=n(X9);ANe=r(Ykr,"MobileBertConfig"),Ykr.forEach(t),LNe=r(iMe," (MobileBERT model)"),iMe.forEach(t),BNe=i(T),If=s(T,"LI",{});var dMe=n(If);yH=s(dMe,"STRONG",{});var Kkr=n(yH);xNe=r(Kkr,"mpnet"),Kkr.forEach(t),kNe=r(dMe," \u2014 "),V9=s(dMe,"A",{href:!0});var Zkr=n(V9);RNe=r(Zkr,"MPNetConfig"),Zkr.forEach(t),SNe=r(dMe," (MPNet model)"),dMe.forEach(t),PNe=i(T),jf=s(T,"LI",{});var cMe=n(jf);wH=s(cMe,"STRONG",{});var eRr=n(wH);$Ne=r(eRr,"mt5"),eRr.forEach(t),INe=r(cMe," \u2014 "),z9=s(cMe,"A",{href:!0});var oRr=n(z9);jNe=r(oRr,"MT5Config"),oRr.forEach(t),DNe=r(cMe," (mT5 model)"),cMe.forEach(t),NNe=i(T),Df=s(T,"LI",{});var mMe=n(Df);AH=s(mMe,"STRONG",{});var rRr=n(AH);qNe=r(rRr,"nystromformer"),rRr.forEach(t),ONe=r(mMe," \u2014 "),W9=s(mMe,"A",{href:!0});var tRr=n(W9);GNe=r(tRr,"NystromformerConfig"),tRr.forEach(t),XNe=r(mMe," (Nystromformer model)"),mMe.forEach(t),VNe=i(T),Nf=s(T,"LI",{});var fMe=n(Nf);LH=s(fMe,"STRONG",{});var aRr=n(LH);zNe=r(aRr,"openai-gpt"),aRr.forEach(t),WNe=r(fMe," \u2014 "),Q9=s(fMe,"A",{href:!0});var sRr=n(Q9);QNe=r(sRr,"OpenAIGPTConfig"),sRr.forEach(t),HNe=r(fMe," (OpenAI GPT model)"),fMe.forEach(t),UNe=i(T),qf=s(T,"LI",{});var gMe=n(qf);BH=s(gMe,"STRONG",{});var nRr=n(BH);JNe=r(nRr,"pegasus"),nRr.forEach(t),YNe=r(gMe," \u2014 "),H9=s(gMe,"A",{href:!0});var lRr=n(H9);KNe=r(lRr,"PegasusConfig"),lRr.forEach(t),ZNe=r(gMe," (Pegasus model)"),gMe.forEach(t),eqe=i(T),Of=s(T,"LI",{});var hMe=n(Of);xH=s(hMe,"STRONG",{});var iRr=n(xH);oqe=r(iRr,"perceiver"),iRr.forEach(t),rqe=r(hMe," \u2014 "),U9=s(hMe,"A",{href:!0});var dRr=n(U9);tqe=r(dRr,"PerceiverConfig"),dRr.forEach(t),aqe=r(hMe," (Perceiver model)"),hMe.forEach(t),sqe=i(T),Gf=s(T,"LI",{});var uMe=n(Gf);kH=s(uMe,"STRONG",{});var cRr=n(kH);nqe=r(cRr,"plbart"),cRr.forEach(t),lqe=r(uMe," \u2014 "),J9=s(uMe,"A",{href:!0});var mRr=n(J9);iqe=r(mRr,"PLBartConfig"),mRr.forEach(t),dqe=r(uMe," (PLBart model)"),uMe.forEach(t),cqe=i(T),Xf=s(T,"LI",{});var pMe=n(Xf);RH=s(pMe,"STRONG",{});var fRr=n(RH);mqe=r(fRr,"poolformer"),fRr.forEach(t),fqe=r(pMe," \u2014 "),Y9=s(pMe,"A",{href:!0});var gRr=n(Y9);gqe=r(gRr,"PoolFormerConfig"),gRr.forEach(t),hqe=r(pMe," (PoolFormer model)"),pMe.forEach(t),uqe=i(T),Vf=s(T,"LI",{});var _Me=n(Vf);SH=s(_Me,"STRONG",{});var hRr=n(SH);pqe=r(hRr,"prophetnet"),hRr.forEach(t),_qe=r(_Me," \u2014 "),K9=s(_Me,"A",{href:!0});var uRr=n(K9);bqe=r(uRr,"ProphetNetConfig"),uRr.forEach(t),vqe=r(_Me," (ProphetNet model)"),_Me.forEach(t),Tqe=i(T),zf=s(T,"LI",{});var bMe=n(zf);PH=s(bMe,"STRONG",{});var pRr=n(PH);Fqe=r(pRr,"qdqbert"),pRr.forEach(t),Cqe=r(bMe," \u2014 "),Z9=s(bMe,"A",{href:!0});var _Rr=n(Z9);Mqe=r(_Rr,"QDQBertConfig"),_Rr.forEach(t),Eqe=r(bMe," (QDQBert model)"),bMe.forEach(t),yqe=i(T),Wf=s(T,"LI",{});var vMe=n(Wf);$H=s(vMe,"STRONG",{});var bRr=n($H);wqe=r(bRr,"rag"),bRr.forEach(t),Aqe=r(vMe," \u2014 "),eB=s(vMe,"A",{href:!0});var vRr=n(eB);Lqe=r(vRr,"RagConfig"),vRr.forEach(t),Bqe=r(vMe," (RAG model)"),vMe.forEach(t),xqe=i(T),Qf=s(T,"LI",{});var TMe=n(Qf);IH=s(TMe,"STRONG",{});var TRr=n(IH);kqe=r(TRr,"realm"),TRr.forEach(t),Rqe=r(TMe," \u2014 "),oB=s(TMe,"A",{href:!0});var FRr=n(oB);Sqe=r(FRr,"RealmConfig"),FRr.forEach(t),Pqe=r(TMe," (Realm model)"),TMe.forEach(t),$qe=i(T),Hf=s(T,"LI",{});var FMe=n(Hf);jH=s(FMe,"STRONG",{});var CRr=n(jH);Iqe=r(CRr,"reformer"),CRr.forEach(t),jqe=r(FMe," \u2014 "),rB=s(FMe,"A",{href:!0});var MRr=n(rB);Dqe=r(MRr,"ReformerConfig"),MRr.forEach(t),Nqe=r(FMe," (Reformer model)"),FMe.forEach(t),qqe=i(T),Uf=s(T,"LI",{});var CMe=n(Uf);DH=s(CMe,"STRONG",{});var ERr=n(DH);Oqe=r(ERr,"rembert"),ERr.forEach(t),Gqe=r(CMe," \u2014 "),tB=s(CMe,"A",{href:!0});var yRr=n(tB);Xqe=r(yRr,"RemBertConfig"),yRr.forEach(t),Vqe=r(CMe," (RemBERT model)"),CMe.forEach(t),zqe=i(T),Jf=s(T,"LI",{});var MMe=n(Jf);NH=s(MMe,"STRONG",{});var wRr=n(NH);Wqe=r(wRr,"resnet"),wRr.forEach(t),Qqe=r(MMe," \u2014 "),aB=s(MMe,"A",{href:!0});var ARr=n(aB);Hqe=r(ARr,"ResNetConfig"),ARr.forEach(t),Uqe=r(MMe," (ResNet model)"),MMe.forEach(t),Jqe=i(T),Yf=s(T,"LI",{});var EMe=n(Yf);qH=s(EMe,"STRONG",{});var LRr=n(qH);Yqe=r(LRr,"retribert"),LRr.forEach(t),Kqe=r(EMe," \u2014 "),sB=s(EMe,"A",{href:!0});var BRr=n(sB);Zqe=r(BRr,"RetriBertConfig"),BRr.forEach(t),eOe=r(EMe," (RetriBERT model)"),EMe.forEach(t),oOe=i(T),Kf=s(T,"LI",{});var yMe=n(Kf);OH=s(yMe,"STRONG",{});var xRr=n(OH);rOe=r(xRr,"roberta"),xRr.forEach(t),tOe=r(yMe," \u2014 "),nB=s(yMe,"A",{href:!0});var kRr=n(nB);aOe=r(kRr,"RobertaConfig"),kRr.forEach(t),sOe=r(yMe," (RoBERTa model)"),yMe.forEach(t),nOe=i(T),Zf=s(T,"LI",{});var wMe=n(Zf);GH=s(wMe,"STRONG",{});var RRr=n(GH);lOe=r(RRr,"roformer"),RRr.forEach(t),iOe=r(wMe," \u2014 "),lB=s(wMe,"A",{href:!0});var SRr=n(lB);dOe=r(SRr,"RoFormerConfig"),SRr.forEach(t),cOe=r(wMe," (RoFormer model)"),wMe.forEach(t),mOe=i(T),eg=s(T,"LI",{});var AMe=n(eg);XH=s(AMe,"STRONG",{});var PRr=n(XH);fOe=r(PRr,"segformer"),PRr.forEach(t),gOe=r(AMe," \u2014 "),iB=s(AMe,"A",{href:!0});var $Rr=n(iB);hOe=r($Rr,"SegformerConfig"),$Rr.forEach(t),uOe=r(AMe," (SegFormer model)"),AMe.forEach(t),pOe=i(T),og=s(T,"LI",{});var LMe=n(og);VH=s(LMe,"STRONG",{});var IRr=n(VH);_Oe=r(IRr,"sew"),IRr.forEach(t),bOe=r(LMe," \u2014 "),dB=s(LMe,"A",{href:!0});var jRr=n(dB);vOe=r(jRr,"SEWConfig"),jRr.forEach(t),TOe=r(LMe," (SEW model)"),LMe.forEach(t),FOe=i(T),rg=s(T,"LI",{});var BMe=n(rg);zH=s(BMe,"STRONG",{});var DRr=n(zH);COe=r(DRr,"sew-d"),DRr.forEach(t),MOe=r(BMe," \u2014 "),cB=s(BMe,"A",{href:!0});var NRr=n(cB);EOe=r(NRr,"SEWDConfig"),NRr.forEach(t),yOe=r(BMe," (SEW-D model)"),BMe.forEach(t),wOe=i(T),tg=s(T,"LI",{});var xMe=n(tg);WH=s(xMe,"STRONG",{});var qRr=n(WH);AOe=r(qRr,"speech-encoder-decoder"),qRr.forEach(t),LOe=r(xMe," \u2014 "),mB=s(xMe,"A",{href:!0});var ORr=n(mB);BOe=r(ORr,"SpeechEncoderDecoderConfig"),ORr.forEach(t),xOe=r(xMe," (Speech Encoder decoder model)"),xMe.forEach(t),kOe=i(T),ag=s(T,"LI",{});var kMe=n(ag);QH=s(kMe,"STRONG",{});var GRr=n(QH);ROe=r(GRr,"speech_to_text"),GRr.forEach(t),SOe=r(kMe," \u2014 "),fB=s(kMe,"A",{href:!0});var XRr=n(fB);POe=r(XRr,"Speech2TextConfig"),XRr.forEach(t),$Oe=r(kMe," (Speech2Text model)"),kMe.forEach(t),IOe=i(T),sg=s(T,"LI",{});var RMe=n(sg);HH=s(RMe,"STRONG",{});var VRr=n(HH);jOe=r(VRr,"speech_to_text_2"),VRr.forEach(t),DOe=r(RMe," \u2014 "),gB=s(RMe,"A",{href:!0});var zRr=n(gB);NOe=r(zRr,"Speech2Text2Config"),zRr.forEach(t),qOe=r(RMe," (Speech2Text2 model)"),RMe.forEach(t),OOe=i(T),ng=s(T,"LI",{});var SMe=n(ng);UH=s(SMe,"STRONG",{});var WRr=n(UH);GOe=r(WRr,"splinter"),WRr.forEach(t),XOe=r(SMe," \u2014 "),hB=s(SMe,"A",{href:!0});var QRr=n(hB);VOe=r(QRr,"SplinterConfig"),QRr.forEach(t),zOe=r(SMe," (Splinter model)"),SMe.forEach(t),WOe=i(T),lg=s(T,"LI",{});var PMe=n(lg);JH=s(PMe,"STRONG",{});var HRr=n(JH);QOe=r(HRr,"squeezebert"),HRr.forEach(t),HOe=r(PMe," \u2014 "),uB=s(PMe,"A",{href:!0});var URr=n(uB);UOe=r(URr,"SqueezeBertConfig"),URr.forEach(t),JOe=r(PMe," (SqueezeBERT model)"),PMe.forEach(t),YOe=i(T),ig=s(T,"LI",{});var $Me=n(ig);YH=s($Me,"STRONG",{});var JRr=n(YH);KOe=r(JRr,"swin"),JRr.forEach(t),ZOe=r($Me," \u2014 "),pB=s($Me,"A",{href:!0});var YRr=n(pB);eGe=r(YRr,"SwinConfig"),YRr.forEach(t),oGe=r($Me," (Swin model)"),$Me.forEach(t),rGe=i(T),dg=s(T,"LI",{});var IMe=n(dg);KH=s(IMe,"STRONG",{});var KRr=n(KH);tGe=r(KRr,"t5"),KRr.forEach(t),aGe=r(IMe," \u2014 "),_B=s(IMe,"A",{href:!0});var ZRr=n(_B);sGe=r(ZRr,"T5Config"),ZRr.forEach(t),nGe=r(IMe," (T5 model)"),IMe.forEach(t),lGe=i(T),cg=s(T,"LI",{});var jMe=n(cg);ZH=s(jMe,"STRONG",{});var eSr=n(ZH);iGe=r(eSr,"tapas"),eSr.forEach(t),dGe=r(jMe," \u2014 "),bB=s(jMe,"A",{href:!0});var oSr=n(bB);cGe=r(oSr,"TapasConfig"),oSr.forEach(t),mGe=r(jMe," (TAPAS model)"),jMe.forEach(t),fGe=i(T),mg=s(T,"LI",{});var DMe=n(mg);eU=s(DMe,"STRONG",{});var rSr=n(eU);gGe=r(rSr,"transfo-xl"),rSr.forEach(t),hGe=r(DMe," \u2014 "),vB=s(DMe,"A",{href:!0});var tSr=n(vB);uGe=r(tSr,"TransfoXLConfig"),tSr.forEach(t),pGe=r(DMe," (Transformer-XL model)"),DMe.forEach(t),_Ge=i(T),fg=s(T,"LI",{});var NMe=n(fg);oU=s(NMe,"STRONG",{});var aSr=n(oU);bGe=r(aSr,"trocr"),aSr.forEach(t),vGe=r(NMe," \u2014 "),TB=s(NMe,"A",{href:!0});var sSr=n(TB);TGe=r(sSr,"TrOCRConfig"),sSr.forEach(t),FGe=r(NMe," (TrOCR model)"),NMe.forEach(t),CGe=i(T),gg=s(T,"LI",{});var qMe=n(gg);rU=s(qMe,"STRONG",{});var nSr=n(rU);MGe=r(nSr,"unispeech"),nSr.forEach(t),EGe=r(qMe," \u2014 "),FB=s(qMe,"A",{href:!0});var lSr=n(FB);yGe=r(lSr,"UniSpeechConfig"),lSr.forEach(t),wGe=r(qMe," (UniSpeech model)"),qMe.forEach(t),AGe=i(T),hg=s(T,"LI",{});var OMe=n(hg);tU=s(OMe,"STRONG",{});var iSr=n(tU);LGe=r(iSr,"unispeech-sat"),iSr.forEach(t),BGe=r(OMe," \u2014 "),CB=s(OMe,"A",{href:!0});var dSr=n(CB);xGe=r(dSr,"UniSpeechSatConfig"),dSr.forEach(t),kGe=r(OMe," (UniSpeechSat model)"),OMe.forEach(t),RGe=i(T),ug=s(T,"LI",{});var GMe=n(ug);aU=s(GMe,"STRONG",{});var cSr=n(aU);SGe=r(cSr,"vilt"),cSr.forEach(t),PGe=r(GMe," \u2014 "),MB=s(GMe,"A",{href:!0});var mSr=n(MB);$Ge=r(mSr,"ViltConfig"),mSr.forEach(t),IGe=r(GMe," (ViLT model)"),GMe.forEach(t),jGe=i(T),pg=s(T,"LI",{});var XMe=n(pg);sU=s(XMe,"STRONG",{});var fSr=n(sU);DGe=r(fSr,"vision-encoder-decoder"),fSr.forEach(t),NGe=r(XMe," \u2014 "),EB=s(XMe,"A",{href:!0});var gSr=n(EB);qGe=r(gSr,"VisionEncoderDecoderConfig"),gSr.forEach(t),OGe=r(XMe," (Vision Encoder decoder model)"),XMe.forEach(t),GGe=i(T),_g=s(T,"LI",{});var VMe=n(_g);nU=s(VMe,"STRONG",{});var hSr=n(nU);XGe=r(hSr,"vision-text-dual-encoder"),hSr.forEach(t),VGe=r(VMe," \u2014 "),yB=s(VMe,"A",{href:!0});var uSr=n(yB);zGe=r(uSr,"VisionTextDualEncoderConfig"),uSr.forEach(t),WGe=r(VMe," (VisionTextDualEncoder model)"),VMe.forEach(t),QGe=i(T),bg=s(T,"LI",{});var zMe=n(bg);lU=s(zMe,"STRONG",{});var pSr=n(lU);HGe=r(pSr,"visual_bert"),pSr.forEach(t),UGe=r(zMe," \u2014 "),wB=s(zMe,"A",{href:!0});var _Sr=n(wB);JGe=r(_Sr,"VisualBertConfig"),_Sr.forEach(t),YGe=r(zMe," (VisualBert model)"),zMe.forEach(t),KGe=i(T),vg=s(T,"LI",{});var WMe=n(vg);iU=s(WMe,"STRONG",{});var bSr=n(iU);ZGe=r(bSr,"vit"),bSr.forEach(t),eXe=r(WMe," \u2014 "),AB=s(WMe,"A",{href:!0});var vSr=n(AB);oXe=r(vSr,"ViTConfig"),vSr.forEach(t),rXe=r(WMe," (ViT model)"),WMe.forEach(t),tXe=i(T),Tg=s(T,"LI",{});var QMe=n(Tg);dU=s(QMe,"STRONG",{});var TSr=n(dU);aXe=r(TSr,"vit_mae"),TSr.forEach(t),sXe=r(QMe," \u2014 "),LB=s(QMe,"A",{href:!0});var FSr=n(LB);nXe=r(FSr,"ViTMAEConfig"),FSr.forEach(t),lXe=r(QMe," (ViTMAE model)"),QMe.forEach(t),iXe=i(T),Fg=s(T,"LI",{});var HMe=n(Fg);cU=s(HMe,"STRONG",{});var CSr=n(cU);dXe=r(CSr,"wav2vec2"),CSr.forEach(t),cXe=r(HMe," \u2014 "),BB=s(HMe,"A",{href:!0});var MSr=n(BB);mXe=r(MSr,"Wav2Vec2Config"),MSr.forEach(t),fXe=r(HMe," (Wav2Vec2 model)"),HMe.forEach(t),gXe=i(T),Cg=s(T,"LI",{});var UMe=n(Cg);mU=s(UMe,"STRONG",{});var ESr=n(mU);hXe=r(ESr,"wavlm"),ESr.forEach(t),uXe=r(UMe," \u2014 "),xB=s(UMe,"A",{href:!0});var ySr=n(xB);pXe=r(ySr,"WavLMConfig"),ySr.forEach(t),_Xe=r(UMe," (WavLM model)"),UMe.forEach(t),bXe=i(T),Mg=s(T,"LI",{});var JMe=n(Mg);fU=s(JMe,"STRONG",{});var wSr=n(fU);vXe=r(wSr,"xglm"),wSr.forEach(t),TXe=r(JMe," \u2014 "),kB=s(JMe,"A",{href:!0});var ASr=n(kB);FXe=r(ASr,"XGLMConfig"),ASr.forEach(t),CXe=r(JMe," (XGLM model)"),JMe.forEach(t),MXe=i(T),Eg=s(T,"LI",{});var YMe=n(Eg);gU=s(YMe,"STRONG",{});var LSr=n(gU);EXe=r(LSr,"xlm"),LSr.forEach(t),yXe=r(YMe," \u2014 "),RB=s(YMe,"A",{href:!0});var BSr=n(RB);wXe=r(BSr,"XLMConfig"),BSr.forEach(t),AXe=r(YMe," (XLM model)"),YMe.forEach(t),LXe=i(T),yg=s(T,"LI",{});var KMe=n(yg);hU=s(KMe,"STRONG",{});var xSr=n(hU);BXe=r(xSr,"xlm-prophetnet"),xSr.forEach(t),xXe=r(KMe," \u2014 "),SB=s(KMe,"A",{href:!0});var kSr=n(SB);kXe=r(kSr,"XLMProphetNetConfig"),kSr.forEach(t),RXe=r(KMe," (XLMProphetNet model)"),KMe.forEach(t),SXe=i(T),wg=s(T,"LI",{});var ZMe=n(wg);uU=s(ZMe,"STRONG",{});var RSr=n(uU);PXe=r(RSr,"xlm-roberta"),RSr.forEach(t),$Xe=r(ZMe," \u2014 "),PB=s(ZMe,"A",{href:!0});var SSr=n(PB);IXe=r(SSr,"XLMRobertaConfig"),SSr.forEach(t),jXe=r(ZMe," (XLM-RoBERTa model)"),ZMe.forEach(t),DXe=i(T),Ag=s(T,"LI",{});var e4e=n(Ag);pU=s(e4e,"STRONG",{});var PSr=n(pU);NXe=r(PSr,"xlm-roberta-xl"),PSr.forEach(t),qXe=r(e4e," \u2014 "),$B=s(e4e,"A",{href:!0});var $Sr=n($B);OXe=r($Sr,"XLMRobertaXLConfig"),$Sr.forEach(t),GXe=r(e4e," (XLM-RoBERTa-XL model)"),e4e.forEach(t),XXe=i(T),Lg=s(T,"LI",{});var o4e=n(Lg);_U=s(o4e,"STRONG",{});var ISr=n(_U);VXe=r(ISr,"xlnet"),ISr.forEach(t),zXe=r(o4e," \u2014 "),IB=s(o4e,"A",{href:!0});var jSr=n(IB);WXe=r(jSr,"XLNetConfig"),jSr.forEach(t),QXe=r(o4e," (XLNet model)"),o4e.forEach(t),HXe=i(T),Bg=s(T,"LI",{});var r4e=n(Bg);bU=s(r4e,"STRONG",{});var DSr=n(bU);UXe=r(DSr,"yoso"),DSr.forEach(t),JXe=r(r4e," \u2014 "),jB=s(r4e,"A",{href:!0});var NSr=n(jB);YXe=r(NSr,"YosoConfig"),NSr.forEach(t),KXe=r(r4e," (YOSO model)"),r4e.forEach(t),T.forEach(t),ZXe=i(ga),vU=s(ga,"P",{});var qSr=n(vU);eVe=r(qSr,"Examples:"),qSr.forEach(t),oVe=i(ga),f(iy.$$.fragment,ga),ga.forEach(t),rVe=i(Gn),xg=s(Gn,"DIV",{class:!0});var kRe=n(xg);f(dy.$$.fragment,kRe),tVe=i(kRe),TU=s(kRe,"P",{});var OSr=n(TU);aVe=r(OSr,"Register a new configuration for this class."),OSr.forEach(t),kRe.forEach(t),Gn.forEach(t),Bxe=i(c),Qi=s(c,"H2",{class:!0});var RRe=n(Qi);kg=s(RRe,"A",{id:!0,class:!0,href:!0});var GSr=n(kg);FU=s(GSr,"SPAN",{});var XSr=n(FU);f(cy.$$.fragment,XSr),XSr.forEach(t),GSr.forEach(t),sVe=i(RRe),CU=s(RRe,"SPAN",{});var VSr=n(CU);nVe=r(VSr,"AutoTokenizer"),VSr.forEach(t),RRe.forEach(t),xxe=i(c),Qo=s(c,"DIV",{class:!0});var Xn=n(Qo);f(my.$$.fragment,Xn),lVe=i(Xn),fy=s(Xn,"P",{});var SRe=n(fy);iVe=r(SRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DB=s(SRe,"A",{href:!0});var zSr=n(DB);dVe=r(zSr,"AutoTokenizer.from_pretrained()"),zSr.forEach(t),cVe=r(SRe," class method."),SRe.forEach(t),mVe=i(Xn),gy=s(Xn,"P",{});var PRe=n(gy);fVe=r(PRe,"This class cannot be instantiated directly using "),MU=s(PRe,"CODE",{});var WSr=n(MU);gVe=r(WSr,"__init__()"),WSr.forEach(t),hVe=r(PRe," (throws an error)."),PRe.forEach(t),uVe=i(Xn),go=s(Xn,"DIV",{class:!0});var ha=n(go);f(hy.$$.fragment,ha),pVe=i(ha),EU=s(ha,"P",{});var QSr=n(EU);_Ve=r(QSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QSr.forEach(t),bVe=i(ha),Ga=s(ha,"P",{});var Z3=n(Ga);vVe=r(Z3,"The tokenizer class to instantiate is selected based on the "),yU=s(Z3,"CODE",{});var HSr=n(yU);TVe=r(HSr,"model_type"),HSr.forEach(t),FVe=r(Z3,` property of the config object (either
passed as an argument or loaded from `),wU=s(Z3,"CODE",{});var USr=n(wU);CVe=r(USr,"pretrained_model_name_or_path"),USr.forEach(t),MVe=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AU=s(Z3,"CODE",{});var JSr=n(AU);EVe=r(JSr,"pretrained_model_name_or_path"),JSr.forEach(t),yVe=r(Z3,":"),Z3.forEach(t),wVe=i(ha),E=s(ha,"UL",{});var y=n(E);zs=s(y,"LI",{});var H7=n(zs);LU=s(H7,"STRONG",{});var YSr=n(LU);AVe=r(YSr,"albert"),YSr.forEach(t),LVe=r(H7," \u2014 "),NB=s(H7,"A",{href:!0});var KSr=n(NB);BVe=r(KSr,"AlbertTokenizer"),KSr.forEach(t),xVe=r(H7," or "),qB=s(H7,"A",{href:!0});var ZSr=n(qB);kVe=r(ZSr,"AlbertTokenizerFast"),ZSr.forEach(t),RVe=r(H7," (ALBERT model)"),H7.forEach(t),SVe=i(y),Ws=s(y,"LI",{});var U7=n(Ws);BU=s(U7,"STRONG",{});var ePr=n(BU);PVe=r(ePr,"bart"),ePr.forEach(t),$Ve=r(U7," \u2014 "),OB=s(U7,"A",{href:!0});var oPr=n(OB);IVe=r(oPr,"BartTokenizer"),oPr.forEach(t),jVe=r(U7," or "),GB=s(U7,"A",{href:!0});var rPr=n(GB);DVe=r(rPr,"BartTokenizerFast"),rPr.forEach(t),NVe=r(U7," (BART model)"),U7.forEach(t),qVe=i(y),Qs=s(y,"LI",{});var J7=n(Qs);xU=s(J7,"STRONG",{});var tPr=n(xU);OVe=r(tPr,"barthez"),tPr.forEach(t),GVe=r(J7," \u2014 "),XB=s(J7,"A",{href:!0});var aPr=n(XB);XVe=r(aPr,"BarthezTokenizer"),aPr.forEach(t),VVe=r(J7," or "),VB=s(J7,"A",{href:!0});var sPr=n(VB);zVe=r(sPr,"BarthezTokenizerFast"),sPr.forEach(t),WVe=r(J7," (BARThez model)"),J7.forEach(t),QVe=i(y),Rg=s(y,"LI",{});var t4e=n(Rg);kU=s(t4e,"STRONG",{});var nPr=n(kU);HVe=r(nPr,"bartpho"),nPr.forEach(t),UVe=r(t4e," \u2014 "),zB=s(t4e,"A",{href:!0});var lPr=n(zB);JVe=r(lPr,"BartphoTokenizer"),lPr.forEach(t),YVe=r(t4e," (BARTpho model)"),t4e.forEach(t),KVe=i(y),Hs=s(y,"LI",{});var Y7=n(Hs);RU=s(Y7,"STRONG",{});var iPr=n(RU);ZVe=r(iPr,"bert"),iPr.forEach(t),eze=r(Y7," \u2014 "),WB=s(Y7,"A",{href:!0});var dPr=n(WB);oze=r(dPr,"BertTokenizer"),dPr.forEach(t),rze=r(Y7," or "),QB=s(Y7,"A",{href:!0});var cPr=n(QB);tze=r(cPr,"BertTokenizerFast"),cPr.forEach(t),aze=r(Y7," (BERT model)"),Y7.forEach(t),sze=i(y),Sg=s(y,"LI",{});var a4e=n(Sg);SU=s(a4e,"STRONG",{});var mPr=n(SU);nze=r(mPr,"bert-generation"),mPr.forEach(t),lze=r(a4e," \u2014 "),HB=s(a4e,"A",{href:!0});var fPr=n(HB);ize=r(fPr,"BertGenerationTokenizer"),fPr.forEach(t),dze=r(a4e," (Bert Generation model)"),a4e.forEach(t),cze=i(y),Pg=s(y,"LI",{});var s4e=n(Pg);PU=s(s4e,"STRONG",{});var gPr=n(PU);mze=r(gPr,"bert-japanese"),gPr.forEach(t),fze=r(s4e," \u2014 "),UB=s(s4e,"A",{href:!0});var hPr=n(UB);gze=r(hPr,"BertJapaneseTokenizer"),hPr.forEach(t),hze=r(s4e," (BertJapanese model)"),s4e.forEach(t),uze=i(y),$g=s(y,"LI",{});var n4e=n($g);$U=s(n4e,"STRONG",{});var uPr=n($U);pze=r(uPr,"bertweet"),uPr.forEach(t),_ze=r(n4e," \u2014 "),JB=s(n4e,"A",{href:!0});var pPr=n(JB);bze=r(pPr,"BertweetTokenizer"),pPr.forEach(t),vze=r(n4e," (Bertweet model)"),n4e.forEach(t),Tze=i(y),Us=s(y,"LI",{});var K7=n(Us);IU=s(K7,"STRONG",{});var _Pr=n(IU);Fze=r(_Pr,"big_bird"),_Pr.forEach(t),Cze=r(K7," \u2014 "),YB=s(K7,"A",{href:!0});var bPr=n(YB);Mze=r(bPr,"BigBirdTokenizer"),bPr.forEach(t),Eze=r(K7," or "),KB=s(K7,"A",{href:!0});var vPr=n(KB);yze=r(vPr,"BigBirdTokenizerFast"),vPr.forEach(t),wze=r(K7," (BigBird model)"),K7.forEach(t),Aze=i(y),Js=s(y,"LI",{});var Z7=n(Js);jU=s(Z7,"STRONG",{});var TPr=n(jU);Lze=r(TPr,"bigbird_pegasus"),TPr.forEach(t),Bze=r(Z7," \u2014 "),ZB=s(Z7,"A",{href:!0});var FPr=n(ZB);xze=r(FPr,"PegasusTokenizer"),FPr.forEach(t),kze=r(Z7," or "),ex=s(Z7,"A",{href:!0});var CPr=n(ex);Rze=r(CPr,"PegasusTokenizerFast"),CPr.forEach(t),Sze=r(Z7," (BigBirdPegasus model)"),Z7.forEach(t),Pze=i(y),Ys=s(y,"LI",{});var e8=n(Ys);DU=s(e8,"STRONG",{});var MPr=n(DU);$ze=r(MPr,"blenderbot"),MPr.forEach(t),Ize=r(e8," \u2014 "),ox=s(e8,"A",{href:!0});var EPr=n(ox);jze=r(EPr,"BlenderbotTokenizer"),EPr.forEach(t),Dze=r(e8," or "),rx=s(e8,"A",{href:!0});var yPr=n(rx);Nze=r(yPr,"BlenderbotTokenizerFast"),yPr.forEach(t),qze=r(e8," (Blenderbot model)"),e8.forEach(t),Oze=i(y),Ig=s(y,"LI",{});var l4e=n(Ig);NU=s(l4e,"STRONG",{});var wPr=n(NU);Gze=r(wPr,"blenderbot-small"),wPr.forEach(t),Xze=r(l4e," \u2014 "),tx=s(l4e,"A",{href:!0});var APr=n(tx);Vze=r(APr,"BlenderbotSmallTokenizer"),APr.forEach(t),zze=r(l4e," (BlenderbotSmall model)"),l4e.forEach(t),Wze=i(y),jg=s(y,"LI",{});var i4e=n(jg);qU=s(i4e,"STRONG",{});var LPr=n(qU);Qze=r(LPr,"byt5"),LPr.forEach(t),Hze=r(i4e," \u2014 "),ax=s(i4e,"A",{href:!0});var BPr=n(ax);Uze=r(BPr,"ByT5Tokenizer"),BPr.forEach(t),Jze=r(i4e," (ByT5 model)"),i4e.forEach(t),Yze=i(y),Ks=s(y,"LI",{});var o8=n(Ks);OU=s(o8,"STRONG",{});var xPr=n(OU);Kze=r(xPr,"camembert"),xPr.forEach(t),Zze=r(o8," \u2014 "),sx=s(o8,"A",{href:!0});var kPr=n(sx);eWe=r(kPr,"CamembertTokenizer"),kPr.forEach(t),oWe=r(o8," or "),nx=s(o8,"A",{href:!0});var RPr=n(nx);rWe=r(RPr,"CamembertTokenizerFast"),RPr.forEach(t),tWe=r(o8," (CamemBERT model)"),o8.forEach(t),aWe=i(y),Dg=s(y,"LI",{});var d4e=n(Dg);GU=s(d4e,"STRONG",{});var SPr=n(GU);sWe=r(SPr,"canine"),SPr.forEach(t),nWe=r(d4e," \u2014 "),lx=s(d4e,"A",{href:!0});var PPr=n(lx);lWe=r(PPr,"CanineTokenizer"),PPr.forEach(t),iWe=r(d4e," (Canine model)"),d4e.forEach(t),dWe=i(y),Zs=s(y,"LI",{});var r8=n(Zs);XU=s(r8,"STRONG",{});var $Pr=n(XU);cWe=r($Pr,"clip"),$Pr.forEach(t),mWe=r(r8," \u2014 "),ix=s(r8,"A",{href:!0});var IPr=n(ix);fWe=r(IPr,"CLIPTokenizer"),IPr.forEach(t),gWe=r(r8," or "),dx=s(r8,"A",{href:!0});var jPr=n(dx);hWe=r(jPr,"CLIPTokenizerFast"),jPr.forEach(t),uWe=r(r8," (CLIP model)"),r8.forEach(t),pWe=i(y),en=s(y,"LI",{});var t8=n(en);VU=s(t8,"STRONG",{});var DPr=n(VU);_We=r(DPr,"convbert"),DPr.forEach(t),bWe=r(t8," \u2014 "),cx=s(t8,"A",{href:!0});var NPr=n(cx);vWe=r(NPr,"ConvBertTokenizer"),NPr.forEach(t),TWe=r(t8," or "),mx=s(t8,"A",{href:!0});var qPr=n(mx);FWe=r(qPr,"ConvBertTokenizerFast"),qPr.forEach(t),CWe=r(t8," (ConvBERT model)"),t8.forEach(t),MWe=i(y),on=s(y,"LI",{});var a8=n(on);zU=s(a8,"STRONG",{});var OPr=n(zU);EWe=r(OPr,"cpm"),OPr.forEach(t),yWe=r(a8," \u2014 "),fx=s(a8,"A",{href:!0});var GPr=n(fx);wWe=r(GPr,"CpmTokenizer"),GPr.forEach(t),AWe=r(a8," or "),WU=s(a8,"CODE",{});var XPr=n(WU);LWe=r(XPr,"CpmTokenizerFast"),XPr.forEach(t),BWe=r(a8," (CPM model)"),a8.forEach(t),xWe=i(y),Ng=s(y,"LI",{});var c4e=n(Ng);QU=s(c4e,"STRONG",{});var VPr=n(QU);kWe=r(VPr,"ctrl"),VPr.forEach(t),RWe=r(c4e," \u2014 "),gx=s(c4e,"A",{href:!0});var zPr=n(gx);SWe=r(zPr,"CTRLTokenizer"),zPr.forEach(t),PWe=r(c4e," (CTRL model)"),c4e.forEach(t),$We=i(y),rn=s(y,"LI",{});var s8=n(rn);HU=s(s8,"STRONG",{});var WPr=n(HU);IWe=r(WPr,"deberta"),WPr.forEach(t),jWe=r(s8," \u2014 "),hx=s(s8,"A",{href:!0});var QPr=n(hx);DWe=r(QPr,"DebertaTokenizer"),QPr.forEach(t),NWe=r(s8," or "),ux=s(s8,"A",{href:!0});var HPr=n(ux);qWe=r(HPr,"DebertaTokenizerFast"),HPr.forEach(t),OWe=r(s8," (DeBERTa model)"),s8.forEach(t),GWe=i(y),qg=s(y,"LI",{});var m4e=n(qg);UU=s(m4e,"STRONG",{});var UPr=n(UU);XWe=r(UPr,"deberta-v2"),UPr.forEach(t),VWe=r(m4e," \u2014 "),px=s(m4e,"A",{href:!0});var JPr=n(px);zWe=r(JPr,"DebertaV2Tokenizer"),JPr.forEach(t),WWe=r(m4e," (DeBERTa-v2 model)"),m4e.forEach(t),QWe=i(y),tn=s(y,"LI",{});var n8=n(tn);JU=s(n8,"STRONG",{});var YPr=n(JU);HWe=r(YPr,"distilbert"),YPr.forEach(t),UWe=r(n8," \u2014 "),_x=s(n8,"A",{href:!0});var KPr=n(_x);JWe=r(KPr,"DistilBertTokenizer"),KPr.forEach(t),YWe=r(n8," or "),bx=s(n8,"A",{href:!0});var ZPr=n(bx);KWe=r(ZPr,"DistilBertTokenizerFast"),ZPr.forEach(t),ZWe=r(n8," (DistilBERT model)"),n8.forEach(t),eQe=i(y),an=s(y,"LI",{});var l8=n(an);YU=s(l8,"STRONG",{});var e$r=n(YU);oQe=r(e$r,"dpr"),e$r.forEach(t),rQe=r(l8," \u2014 "),vx=s(l8,"A",{href:!0});var o$r=n(vx);tQe=r(o$r,"DPRQuestionEncoderTokenizer"),o$r.forEach(t),aQe=r(l8," or "),Tx=s(l8,"A",{href:!0});var r$r=n(Tx);sQe=r(r$r,"DPRQuestionEncoderTokenizerFast"),r$r.forEach(t),nQe=r(l8," (DPR model)"),l8.forEach(t),lQe=i(y),sn=s(y,"LI",{});var i8=n(sn);KU=s(i8,"STRONG",{});var t$r=n(KU);iQe=r(t$r,"electra"),t$r.forEach(t),dQe=r(i8," \u2014 "),Fx=s(i8,"A",{href:!0});var a$r=n(Fx);cQe=r(a$r,"ElectraTokenizer"),a$r.forEach(t),mQe=r(i8," or "),Cx=s(i8,"A",{href:!0});var s$r=n(Cx);fQe=r(s$r,"ElectraTokenizerFast"),s$r.forEach(t),gQe=r(i8," (ELECTRA model)"),i8.forEach(t),hQe=i(y),Og=s(y,"LI",{});var f4e=n(Og);ZU=s(f4e,"STRONG",{});var n$r=n(ZU);uQe=r(n$r,"flaubert"),n$r.forEach(t),pQe=r(f4e," \u2014 "),Mx=s(f4e,"A",{href:!0});var l$r=n(Mx);_Qe=r(l$r,"FlaubertTokenizer"),l$r.forEach(t),bQe=r(f4e," (FlauBERT model)"),f4e.forEach(t),vQe=i(y),nn=s(y,"LI",{});var d8=n(nn);eJ=s(d8,"STRONG",{});var i$r=n(eJ);TQe=r(i$r,"fnet"),i$r.forEach(t),FQe=r(d8," \u2014 "),Ex=s(d8,"A",{href:!0});var d$r=n(Ex);CQe=r(d$r,"FNetTokenizer"),d$r.forEach(t),MQe=r(d8," or "),yx=s(d8,"A",{href:!0});var c$r=n(yx);EQe=r(c$r,"FNetTokenizerFast"),c$r.forEach(t),yQe=r(d8," (FNet model)"),d8.forEach(t),wQe=i(y),Gg=s(y,"LI",{});var g4e=n(Gg);oJ=s(g4e,"STRONG",{});var m$r=n(oJ);AQe=r(m$r,"fsmt"),m$r.forEach(t),LQe=r(g4e," \u2014 "),wx=s(g4e,"A",{href:!0});var f$r=n(wx);BQe=r(f$r,"FSMTTokenizer"),f$r.forEach(t),xQe=r(g4e," (FairSeq Machine-Translation model)"),g4e.forEach(t),kQe=i(y),ln=s(y,"LI",{});var c8=n(ln);rJ=s(c8,"STRONG",{});var g$r=n(rJ);RQe=r(g$r,"funnel"),g$r.forEach(t),SQe=r(c8," \u2014 "),Ax=s(c8,"A",{href:!0});var h$r=n(Ax);PQe=r(h$r,"FunnelTokenizer"),h$r.forEach(t),$Qe=r(c8," or "),Lx=s(c8,"A",{href:!0});var u$r=n(Lx);IQe=r(u$r,"FunnelTokenizerFast"),u$r.forEach(t),jQe=r(c8," (Funnel Transformer model)"),c8.forEach(t),DQe=i(y),dn=s(y,"LI",{});var m8=n(dn);tJ=s(m8,"STRONG",{});var p$r=n(tJ);NQe=r(p$r,"gpt2"),p$r.forEach(t),qQe=r(m8," \u2014 "),Bx=s(m8,"A",{href:!0});var _$r=n(Bx);OQe=r(_$r,"GPT2Tokenizer"),_$r.forEach(t),GQe=r(m8," or "),xx=s(m8,"A",{href:!0});var b$r=n(xx);XQe=r(b$r,"GPT2TokenizerFast"),b$r.forEach(t),VQe=r(m8," (OpenAI GPT-2 model)"),m8.forEach(t),zQe=i(y),cn=s(y,"LI",{});var f8=n(cn);aJ=s(f8,"STRONG",{});var v$r=n(aJ);WQe=r(v$r,"gpt_neo"),v$r.forEach(t),QQe=r(f8," \u2014 "),kx=s(f8,"A",{href:!0});var T$r=n(kx);HQe=r(T$r,"GPT2Tokenizer"),T$r.forEach(t),UQe=r(f8," or "),Rx=s(f8,"A",{href:!0});var F$r=n(Rx);JQe=r(F$r,"GPT2TokenizerFast"),F$r.forEach(t),YQe=r(f8," (GPT Neo model)"),f8.forEach(t),KQe=i(y),mn=s(y,"LI",{});var g8=n(mn);sJ=s(g8,"STRONG",{});var C$r=n(sJ);ZQe=r(C$r,"herbert"),C$r.forEach(t),eHe=r(g8," \u2014 "),Sx=s(g8,"A",{href:!0});var M$r=n(Sx);oHe=r(M$r,"HerbertTokenizer"),M$r.forEach(t),rHe=r(g8," or "),Px=s(g8,"A",{href:!0});var E$r=n(Px);tHe=r(E$r,"HerbertTokenizerFast"),E$r.forEach(t),aHe=r(g8," (HerBERT model)"),g8.forEach(t),sHe=i(y),Xg=s(y,"LI",{});var h4e=n(Xg);nJ=s(h4e,"STRONG",{});var y$r=n(nJ);nHe=r(y$r,"hubert"),y$r.forEach(t),lHe=r(h4e," \u2014 "),$x=s(h4e,"A",{href:!0});var w$r=n($x);iHe=r(w$r,"Wav2Vec2CTCTokenizer"),w$r.forEach(t),dHe=r(h4e," (Hubert model)"),h4e.forEach(t),cHe=i(y),fn=s(y,"LI",{});var h8=n(fn);lJ=s(h8,"STRONG",{});var A$r=n(lJ);mHe=r(A$r,"ibert"),A$r.forEach(t),fHe=r(h8," \u2014 "),Ix=s(h8,"A",{href:!0});var L$r=n(Ix);gHe=r(L$r,"RobertaTokenizer"),L$r.forEach(t),hHe=r(h8," or "),jx=s(h8,"A",{href:!0});var B$r=n(jx);uHe=r(B$r,"RobertaTokenizerFast"),B$r.forEach(t),pHe=r(h8," (I-BERT model)"),h8.forEach(t),_He=i(y),gn=s(y,"LI",{});var u8=n(gn);iJ=s(u8,"STRONG",{});var x$r=n(iJ);bHe=r(x$r,"layoutlm"),x$r.forEach(t),vHe=r(u8," \u2014 "),Dx=s(u8,"A",{href:!0});var k$r=n(Dx);THe=r(k$r,"LayoutLMTokenizer"),k$r.forEach(t),FHe=r(u8," or "),Nx=s(u8,"A",{href:!0});var R$r=n(Nx);CHe=r(R$r,"LayoutLMTokenizerFast"),R$r.forEach(t),MHe=r(u8," (LayoutLM model)"),u8.forEach(t),EHe=i(y),hn=s(y,"LI",{});var p8=n(hn);dJ=s(p8,"STRONG",{});var S$r=n(dJ);yHe=r(S$r,"layoutlmv2"),S$r.forEach(t),wHe=r(p8," \u2014 "),qx=s(p8,"A",{href:!0});var P$r=n(qx);AHe=r(P$r,"LayoutLMv2Tokenizer"),P$r.forEach(t),LHe=r(p8," or "),Ox=s(p8,"A",{href:!0});var $$r=n(Ox);BHe=r($$r,"LayoutLMv2TokenizerFast"),$$r.forEach(t),xHe=r(p8," (LayoutLMv2 model)"),p8.forEach(t),kHe=i(y),un=s(y,"LI",{});var _8=n(un);cJ=s(_8,"STRONG",{});var I$r=n(cJ);RHe=r(I$r,"layoutxlm"),I$r.forEach(t),SHe=r(_8," \u2014 "),Gx=s(_8,"A",{href:!0});var j$r=n(Gx);PHe=r(j$r,"LayoutXLMTokenizer"),j$r.forEach(t),$He=r(_8," or "),Xx=s(_8,"A",{href:!0});var D$r=n(Xx);IHe=r(D$r,"LayoutXLMTokenizerFast"),D$r.forEach(t),jHe=r(_8," (LayoutXLM model)"),_8.forEach(t),DHe=i(y),pn=s(y,"LI",{});var b8=n(pn);mJ=s(b8,"STRONG",{});var N$r=n(mJ);NHe=r(N$r,"led"),N$r.forEach(t),qHe=r(b8," \u2014 "),Vx=s(b8,"A",{href:!0});var q$r=n(Vx);OHe=r(q$r,"LEDTokenizer"),q$r.forEach(t),GHe=r(b8," or "),zx=s(b8,"A",{href:!0});var O$r=n(zx);XHe=r(O$r,"LEDTokenizerFast"),O$r.forEach(t),VHe=r(b8," (LED model)"),b8.forEach(t),zHe=i(y),_n=s(y,"LI",{});var v8=n(_n);fJ=s(v8,"STRONG",{});var G$r=n(fJ);WHe=r(G$r,"longformer"),G$r.forEach(t),QHe=r(v8," \u2014 "),Wx=s(v8,"A",{href:!0});var X$r=n(Wx);HHe=r(X$r,"LongformerTokenizer"),X$r.forEach(t),UHe=r(v8," or "),Qx=s(v8,"A",{href:!0});var V$r=n(Qx);JHe=r(V$r,"LongformerTokenizerFast"),V$r.forEach(t),YHe=r(v8," (Longformer model)"),v8.forEach(t),KHe=i(y),Vg=s(y,"LI",{});var u4e=n(Vg);gJ=s(u4e,"STRONG",{});var z$r=n(gJ);ZHe=r(z$r,"luke"),z$r.forEach(t),eUe=r(u4e," \u2014 "),Hx=s(u4e,"A",{href:!0});var W$r=n(Hx);oUe=r(W$r,"LukeTokenizer"),W$r.forEach(t),rUe=r(u4e," (LUKE model)"),u4e.forEach(t),tUe=i(y),bn=s(y,"LI",{});var T8=n(bn);hJ=s(T8,"STRONG",{});var Q$r=n(hJ);aUe=r(Q$r,"lxmert"),Q$r.forEach(t),sUe=r(T8," \u2014 "),Ux=s(T8,"A",{href:!0});var H$r=n(Ux);nUe=r(H$r,"LxmertTokenizer"),H$r.forEach(t),lUe=r(T8," or "),Jx=s(T8,"A",{href:!0});var U$r=n(Jx);iUe=r(U$r,"LxmertTokenizerFast"),U$r.forEach(t),dUe=r(T8," (LXMERT model)"),T8.forEach(t),cUe=i(y),zg=s(y,"LI",{});var p4e=n(zg);uJ=s(p4e,"STRONG",{});var J$r=n(uJ);mUe=r(J$r,"m2m_100"),J$r.forEach(t),fUe=r(p4e," \u2014 "),Yx=s(p4e,"A",{href:!0});var Y$r=n(Yx);gUe=r(Y$r,"M2M100Tokenizer"),Y$r.forEach(t),hUe=r(p4e," (M2M100 model)"),p4e.forEach(t),uUe=i(y),Wg=s(y,"LI",{});var _4e=n(Wg);pJ=s(_4e,"STRONG",{});var K$r=n(pJ);pUe=r(K$r,"marian"),K$r.forEach(t),_Ue=r(_4e," \u2014 "),Kx=s(_4e,"A",{href:!0});var Z$r=n(Kx);bUe=r(Z$r,"MarianTokenizer"),Z$r.forEach(t),vUe=r(_4e," (Marian model)"),_4e.forEach(t),TUe=i(y),vn=s(y,"LI",{});var F8=n(vn);_J=s(F8,"STRONG",{});var eIr=n(_J);FUe=r(eIr,"mbart"),eIr.forEach(t),CUe=r(F8," \u2014 "),Zx=s(F8,"A",{href:!0});var oIr=n(Zx);MUe=r(oIr,"MBartTokenizer"),oIr.forEach(t),EUe=r(F8," or "),ek=s(F8,"A",{href:!0});var rIr=n(ek);yUe=r(rIr,"MBartTokenizerFast"),rIr.forEach(t),wUe=r(F8," (mBART model)"),F8.forEach(t),AUe=i(y),Tn=s(y,"LI",{});var C8=n(Tn);bJ=s(C8,"STRONG",{});var tIr=n(bJ);LUe=r(tIr,"mbart50"),tIr.forEach(t),BUe=r(C8," \u2014 "),ok=s(C8,"A",{href:!0});var aIr=n(ok);xUe=r(aIr,"MBart50Tokenizer"),aIr.forEach(t),kUe=r(C8," or "),rk=s(C8,"A",{href:!0});var sIr=n(rk);RUe=r(sIr,"MBart50TokenizerFast"),sIr.forEach(t),SUe=r(C8," (mBART-50 model)"),C8.forEach(t),PUe=i(y),Qg=s(y,"LI",{});var b4e=n(Qg);vJ=s(b4e,"STRONG",{});var nIr=n(vJ);$Ue=r(nIr,"mluke"),nIr.forEach(t),IUe=r(b4e," \u2014 "),tk=s(b4e,"A",{href:!0});var lIr=n(tk);jUe=r(lIr,"MLukeTokenizer"),lIr.forEach(t),DUe=r(b4e," (mLUKE model)"),b4e.forEach(t),NUe=i(y),Fn=s(y,"LI",{});var M8=n(Fn);TJ=s(M8,"STRONG",{});var iIr=n(TJ);qUe=r(iIr,"mobilebert"),iIr.forEach(t),OUe=r(M8," \u2014 "),ak=s(M8,"A",{href:!0});var dIr=n(ak);GUe=r(dIr,"MobileBertTokenizer"),dIr.forEach(t),XUe=r(M8," or "),sk=s(M8,"A",{href:!0});var cIr=n(sk);VUe=r(cIr,"MobileBertTokenizerFast"),cIr.forEach(t),zUe=r(M8," (MobileBERT model)"),M8.forEach(t),WUe=i(y),Cn=s(y,"LI",{});var E8=n(Cn);FJ=s(E8,"STRONG",{});var mIr=n(FJ);QUe=r(mIr,"mpnet"),mIr.forEach(t),HUe=r(E8," \u2014 "),nk=s(E8,"A",{href:!0});var fIr=n(nk);UUe=r(fIr,"MPNetTokenizer"),fIr.forEach(t),JUe=r(E8," or "),lk=s(E8,"A",{href:!0});var gIr=n(lk);YUe=r(gIr,"MPNetTokenizerFast"),gIr.forEach(t),KUe=r(E8," (MPNet model)"),E8.forEach(t),ZUe=i(y),Mn=s(y,"LI",{});var y8=n(Mn);CJ=s(y8,"STRONG",{});var hIr=n(CJ);eJe=r(hIr,"mt5"),hIr.forEach(t),oJe=r(y8," \u2014 "),ik=s(y8,"A",{href:!0});var uIr=n(ik);rJe=r(uIr,"MT5Tokenizer"),uIr.forEach(t),tJe=r(y8," or "),dk=s(y8,"A",{href:!0});var pIr=n(dk);aJe=r(pIr,"MT5TokenizerFast"),pIr.forEach(t),sJe=r(y8," (mT5 model)"),y8.forEach(t),nJe=i(y),En=s(y,"LI",{});var w8=n(En);MJ=s(w8,"STRONG",{});var _Ir=n(MJ);lJe=r(_Ir,"openai-gpt"),_Ir.forEach(t),iJe=r(w8," \u2014 "),ck=s(w8,"A",{href:!0});var bIr=n(ck);dJe=r(bIr,"OpenAIGPTTokenizer"),bIr.forEach(t),cJe=r(w8," or "),mk=s(w8,"A",{href:!0});var vIr=n(mk);mJe=r(vIr,"OpenAIGPTTokenizerFast"),vIr.forEach(t),fJe=r(w8," (OpenAI GPT model)"),w8.forEach(t),gJe=i(y),yn=s(y,"LI",{});var A8=n(yn);EJ=s(A8,"STRONG",{});var TIr=n(EJ);hJe=r(TIr,"pegasus"),TIr.forEach(t),uJe=r(A8," \u2014 "),fk=s(A8,"A",{href:!0});var FIr=n(fk);pJe=r(FIr,"PegasusTokenizer"),FIr.forEach(t),_Je=r(A8," or "),gk=s(A8,"A",{href:!0});var CIr=n(gk);bJe=r(CIr,"PegasusTokenizerFast"),CIr.forEach(t),vJe=r(A8," (Pegasus model)"),A8.forEach(t),TJe=i(y),Hg=s(y,"LI",{});var v4e=n(Hg);yJ=s(v4e,"STRONG",{});var MIr=n(yJ);FJe=r(MIr,"perceiver"),MIr.forEach(t),CJe=r(v4e," \u2014 "),hk=s(v4e,"A",{href:!0});var EIr=n(hk);MJe=r(EIr,"PerceiverTokenizer"),EIr.forEach(t),EJe=r(v4e," (Perceiver model)"),v4e.forEach(t),yJe=i(y),Ug=s(y,"LI",{});var T4e=n(Ug);wJ=s(T4e,"STRONG",{});var yIr=n(wJ);wJe=r(yIr,"phobert"),yIr.forEach(t),AJe=r(T4e," \u2014 "),uk=s(T4e,"A",{href:!0});var wIr=n(uk);LJe=r(wIr,"PhobertTokenizer"),wIr.forEach(t),BJe=r(T4e," (PhoBERT model)"),T4e.forEach(t),xJe=i(y),Jg=s(y,"LI",{});var F4e=n(Jg);AJ=s(F4e,"STRONG",{});var AIr=n(AJ);kJe=r(AIr,"plbart"),AIr.forEach(t),RJe=r(F4e," \u2014 "),pk=s(F4e,"A",{href:!0});var LIr=n(pk);SJe=r(LIr,"PLBartTokenizer"),LIr.forEach(t),PJe=r(F4e," (PLBart model)"),F4e.forEach(t),$Je=i(y),Yg=s(y,"LI",{});var C4e=n(Yg);LJ=s(C4e,"STRONG",{});var BIr=n(LJ);IJe=r(BIr,"prophetnet"),BIr.forEach(t),jJe=r(C4e," \u2014 "),_k=s(C4e,"A",{href:!0});var xIr=n(_k);DJe=r(xIr,"ProphetNetTokenizer"),xIr.forEach(t),NJe=r(C4e," (ProphetNet model)"),C4e.forEach(t),qJe=i(y),wn=s(y,"LI",{});var L8=n(wn);BJ=s(L8,"STRONG",{});var kIr=n(BJ);OJe=r(kIr,"qdqbert"),kIr.forEach(t),GJe=r(L8," \u2014 "),bk=s(L8,"A",{href:!0});var RIr=n(bk);XJe=r(RIr,"BertTokenizer"),RIr.forEach(t),VJe=r(L8," or "),vk=s(L8,"A",{href:!0});var SIr=n(vk);zJe=r(SIr,"BertTokenizerFast"),SIr.forEach(t),WJe=r(L8," (QDQBert model)"),L8.forEach(t),QJe=i(y),Kg=s(y,"LI",{});var M4e=n(Kg);xJ=s(M4e,"STRONG",{});var PIr=n(xJ);HJe=r(PIr,"rag"),PIr.forEach(t),UJe=r(M4e," \u2014 "),Tk=s(M4e,"A",{href:!0});var $Ir=n(Tk);JJe=r($Ir,"RagTokenizer"),$Ir.forEach(t),YJe=r(M4e," (RAG model)"),M4e.forEach(t),KJe=i(y),An=s(y,"LI",{});var B8=n(An);kJ=s(B8,"STRONG",{});var IIr=n(kJ);ZJe=r(IIr,"realm"),IIr.forEach(t),eYe=r(B8," \u2014 "),Fk=s(B8,"A",{href:!0});var jIr=n(Fk);oYe=r(jIr,"RealmTokenizer"),jIr.forEach(t),rYe=r(B8," or "),Ck=s(B8,"A",{href:!0});var DIr=n(Ck);tYe=r(DIr,"RealmTokenizerFast"),DIr.forEach(t),aYe=r(B8," (Realm model)"),B8.forEach(t),sYe=i(y),Ln=s(y,"LI",{});var x8=n(Ln);RJ=s(x8,"STRONG",{});var NIr=n(RJ);nYe=r(NIr,"reformer"),NIr.forEach(t),lYe=r(x8," \u2014 "),Mk=s(x8,"A",{href:!0});var qIr=n(Mk);iYe=r(qIr,"ReformerTokenizer"),qIr.forEach(t),dYe=r(x8," or "),Ek=s(x8,"A",{href:!0});var OIr=n(Ek);cYe=r(OIr,"ReformerTokenizerFast"),OIr.forEach(t),mYe=r(x8," (Reformer model)"),x8.forEach(t),fYe=i(y),Bn=s(y,"LI",{});var k8=n(Bn);SJ=s(k8,"STRONG",{});var GIr=n(SJ);gYe=r(GIr,"rembert"),GIr.forEach(t),hYe=r(k8," \u2014 "),yk=s(k8,"A",{href:!0});var XIr=n(yk);uYe=r(XIr,"RemBertTokenizer"),XIr.forEach(t),pYe=r(k8," or "),wk=s(k8,"A",{href:!0});var VIr=n(wk);_Ye=r(VIr,"RemBertTokenizerFast"),VIr.forEach(t),bYe=r(k8," (RemBERT model)"),k8.forEach(t),vYe=i(y),xn=s(y,"LI",{});var R8=n(xn);PJ=s(R8,"STRONG",{});var zIr=n(PJ);TYe=r(zIr,"retribert"),zIr.forEach(t),FYe=r(R8," \u2014 "),Ak=s(R8,"A",{href:!0});var WIr=n(Ak);CYe=r(WIr,"RetriBertTokenizer"),WIr.forEach(t),MYe=r(R8," or "),Lk=s(R8,"A",{href:!0});var QIr=n(Lk);EYe=r(QIr,"RetriBertTokenizerFast"),QIr.forEach(t),yYe=r(R8," (RetriBERT model)"),R8.forEach(t),wYe=i(y),kn=s(y,"LI",{});var S8=n(kn);$J=s(S8,"STRONG",{});var HIr=n($J);AYe=r(HIr,"roberta"),HIr.forEach(t),LYe=r(S8," \u2014 "),Bk=s(S8,"A",{href:!0});var UIr=n(Bk);BYe=r(UIr,"RobertaTokenizer"),UIr.forEach(t),xYe=r(S8," or "),xk=s(S8,"A",{href:!0});var JIr=n(xk);kYe=r(JIr,"RobertaTokenizerFast"),JIr.forEach(t),RYe=r(S8," (RoBERTa model)"),S8.forEach(t),SYe=i(y),Rn=s(y,"LI",{});var P8=n(Rn);IJ=s(P8,"STRONG",{});var YIr=n(IJ);PYe=r(YIr,"roformer"),YIr.forEach(t),$Ye=r(P8," \u2014 "),kk=s(P8,"A",{href:!0});var KIr=n(kk);IYe=r(KIr,"RoFormerTokenizer"),KIr.forEach(t),jYe=r(P8," or "),Rk=s(P8,"A",{href:!0});var ZIr=n(Rk);DYe=r(ZIr,"RoFormerTokenizerFast"),ZIr.forEach(t),NYe=r(P8," (RoFormer model)"),P8.forEach(t),qYe=i(y),Zg=s(y,"LI",{});var E4e=n(Zg);jJ=s(E4e,"STRONG",{});var ejr=n(jJ);OYe=r(ejr,"speech_to_text"),ejr.forEach(t),GYe=r(E4e," \u2014 "),Sk=s(E4e,"A",{href:!0});var ojr=n(Sk);XYe=r(ojr,"Speech2TextTokenizer"),ojr.forEach(t),VYe=r(E4e," (Speech2Text model)"),E4e.forEach(t),zYe=i(y),eh=s(y,"LI",{});var y4e=n(eh);DJ=s(y4e,"STRONG",{});var rjr=n(DJ);WYe=r(rjr,"speech_to_text_2"),rjr.forEach(t),QYe=r(y4e," \u2014 "),Pk=s(y4e,"A",{href:!0});var tjr=n(Pk);HYe=r(tjr,"Speech2Text2Tokenizer"),tjr.forEach(t),UYe=r(y4e," (Speech2Text2 model)"),y4e.forEach(t),JYe=i(y),Sn=s(y,"LI",{});var $8=n(Sn);NJ=s($8,"STRONG",{});var ajr=n(NJ);YYe=r(ajr,"splinter"),ajr.forEach(t),KYe=r($8," \u2014 "),$k=s($8,"A",{href:!0});var sjr=n($k);ZYe=r(sjr,"SplinterTokenizer"),sjr.forEach(t),eKe=r($8," or "),Ik=s($8,"A",{href:!0});var njr=n(Ik);oKe=r(njr,"SplinterTokenizerFast"),njr.forEach(t),rKe=r($8," (Splinter model)"),$8.forEach(t),tKe=i(y),Pn=s(y,"LI",{});var I8=n(Pn);qJ=s(I8,"STRONG",{});var ljr=n(qJ);aKe=r(ljr,"squeezebert"),ljr.forEach(t),sKe=r(I8," \u2014 "),jk=s(I8,"A",{href:!0});var ijr=n(jk);nKe=r(ijr,"SqueezeBertTokenizer"),ijr.forEach(t),lKe=r(I8," or "),Dk=s(I8,"A",{href:!0});var djr=n(Dk);iKe=r(djr,"SqueezeBertTokenizerFast"),djr.forEach(t),dKe=r(I8," (SqueezeBERT model)"),I8.forEach(t),cKe=i(y),$n=s(y,"LI",{});var j8=n($n);OJ=s(j8,"STRONG",{});var cjr=n(OJ);mKe=r(cjr,"t5"),cjr.forEach(t),fKe=r(j8," \u2014 "),Nk=s(j8,"A",{href:!0});var mjr=n(Nk);gKe=r(mjr,"T5Tokenizer"),mjr.forEach(t),hKe=r(j8," or "),qk=s(j8,"A",{href:!0});var fjr=n(qk);uKe=r(fjr,"T5TokenizerFast"),fjr.forEach(t),pKe=r(j8," (T5 model)"),j8.forEach(t),_Ke=i(y),oh=s(y,"LI",{});var w4e=n(oh);GJ=s(w4e,"STRONG",{});var gjr=n(GJ);bKe=r(gjr,"tapas"),gjr.forEach(t),vKe=r(w4e," \u2014 "),Ok=s(w4e,"A",{href:!0});var hjr=n(Ok);TKe=r(hjr,"TapasTokenizer"),hjr.forEach(t),FKe=r(w4e," (TAPAS model)"),w4e.forEach(t),CKe=i(y),rh=s(y,"LI",{});var A4e=n(rh);XJ=s(A4e,"STRONG",{});var ujr=n(XJ);MKe=r(ujr,"transfo-xl"),ujr.forEach(t),EKe=r(A4e," \u2014 "),Gk=s(A4e,"A",{href:!0});var pjr=n(Gk);yKe=r(pjr,"TransfoXLTokenizer"),pjr.forEach(t),wKe=r(A4e," (Transformer-XL model)"),A4e.forEach(t),AKe=i(y),th=s(y,"LI",{});var L4e=n(th);VJ=s(L4e,"STRONG",{});var _jr=n(VJ);LKe=r(_jr,"wav2vec2"),_jr.forEach(t),BKe=r(L4e," \u2014 "),Xk=s(L4e,"A",{href:!0});var bjr=n(Xk);xKe=r(bjr,"Wav2Vec2CTCTokenizer"),bjr.forEach(t),kKe=r(L4e," (Wav2Vec2 model)"),L4e.forEach(t),RKe=i(y),ah=s(y,"LI",{});var B4e=n(ah);zJ=s(B4e,"STRONG",{});var vjr=n(zJ);SKe=r(vjr,"wav2vec2_phoneme"),vjr.forEach(t),PKe=r(B4e," \u2014 "),Vk=s(B4e,"A",{href:!0});var Tjr=n(Vk);$Ke=r(Tjr,"Wav2Vec2PhonemeCTCTokenizer"),Tjr.forEach(t),IKe=r(B4e," (Wav2Vec2Phoneme model)"),B4e.forEach(t),jKe=i(y),In=s(y,"LI",{});var D8=n(In);WJ=s(D8,"STRONG",{});var Fjr=n(WJ);DKe=r(Fjr,"xglm"),Fjr.forEach(t),NKe=r(D8," \u2014 "),zk=s(D8,"A",{href:!0});var Cjr=n(zk);qKe=r(Cjr,"XGLMTokenizer"),Cjr.forEach(t),OKe=r(D8," or "),Wk=s(D8,"A",{href:!0});var Mjr=n(Wk);GKe=r(Mjr,"XGLMTokenizerFast"),Mjr.forEach(t),XKe=r(D8," (XGLM model)"),D8.forEach(t),VKe=i(y),sh=s(y,"LI",{});var x4e=n(sh);QJ=s(x4e,"STRONG",{});var Ejr=n(QJ);zKe=r(Ejr,"xlm"),Ejr.forEach(t),WKe=r(x4e," \u2014 "),Qk=s(x4e,"A",{href:!0});var yjr=n(Qk);QKe=r(yjr,"XLMTokenizer"),yjr.forEach(t),HKe=r(x4e," (XLM model)"),x4e.forEach(t),UKe=i(y),nh=s(y,"LI",{});var k4e=n(nh);HJ=s(k4e,"STRONG",{});var wjr=n(HJ);JKe=r(wjr,"xlm-prophetnet"),wjr.forEach(t),YKe=r(k4e," \u2014 "),Hk=s(k4e,"A",{href:!0});var Ajr=n(Hk);KKe=r(Ajr,"XLMProphetNetTokenizer"),Ajr.forEach(t),ZKe=r(k4e," (XLMProphetNet model)"),k4e.forEach(t),eZe=i(y),jn=s(y,"LI",{});var N8=n(jn);UJ=s(N8,"STRONG",{});var Ljr=n(UJ);oZe=r(Ljr,"xlm-roberta"),Ljr.forEach(t),rZe=r(N8," \u2014 "),Uk=s(N8,"A",{href:!0});var Bjr=n(Uk);tZe=r(Bjr,"XLMRobertaTokenizer"),Bjr.forEach(t),aZe=r(N8," or "),Jk=s(N8,"A",{href:!0});var xjr=n(Jk);sZe=r(xjr,"XLMRobertaTokenizerFast"),xjr.forEach(t),nZe=r(N8," (XLM-RoBERTa model)"),N8.forEach(t),lZe=i(y),Dn=s(y,"LI",{});var q8=n(Dn);JJ=s(q8,"STRONG",{});var kjr=n(JJ);iZe=r(kjr,"xlnet"),kjr.forEach(t),dZe=r(q8," \u2014 "),Yk=s(q8,"A",{href:!0});var Rjr=n(Yk);cZe=r(Rjr,"XLNetTokenizer"),Rjr.forEach(t),mZe=r(q8," or "),Kk=s(q8,"A",{href:!0});var Sjr=n(Kk);fZe=r(Sjr,"XLNetTokenizerFast"),Sjr.forEach(t),gZe=r(q8," (XLNet model)"),q8.forEach(t),y.forEach(t),hZe=i(ha),YJ=s(ha,"P",{});var Pjr=n(YJ);uZe=r(Pjr,"Examples:"),Pjr.forEach(t),pZe=i(ha),f(uy.$$.fragment,ha),ha.forEach(t),_Ze=i(Xn),lh=s(Xn,"DIV",{class:!0});var $Re=n(lh);f(py.$$.fragment,$Re),bZe=i($Re),KJ=s($Re,"P",{});var $jr=n(KJ);vZe=r($jr,"Register a new tokenizer in this mapping."),$jr.forEach(t),$Re.forEach(t),Xn.forEach(t),kxe=i(c),Hi=s(c,"H2",{class:!0});var IRe=n(Hi);ih=s(IRe,"A",{id:!0,class:!0,href:!0});var Ijr=n(ih);ZJ=s(Ijr,"SPAN",{});var jjr=n(ZJ);f(_y.$$.fragment,jjr),jjr.forEach(t),Ijr.forEach(t),TZe=i(IRe),eY=s(IRe,"SPAN",{});var Djr=n(eY);FZe=r(Djr,"AutoFeatureExtractor"),Djr.forEach(t),IRe.forEach(t),Rxe=i(c),Ho=s(c,"DIV",{class:!0});var Vn=n(Ho);f(by.$$.fragment,Vn),CZe=i(Vn),vy=s(Vn,"P",{});var jRe=n(vy);MZe=r(jRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Zk=s(jRe,"A",{href:!0});var Njr=n(Zk);EZe=r(Njr,"AutoFeatureExtractor.from_pretrained()"),Njr.forEach(t),yZe=r(jRe," class method."),jRe.forEach(t),wZe=i(Vn),Ty=s(Vn,"P",{});var DRe=n(Ty);AZe=r(DRe,"This class cannot be instantiated directly using "),oY=s(DRe,"CODE",{});var qjr=n(oY);LZe=r(qjr,"__init__()"),qjr.forEach(t),BZe=r(DRe," (throws an error)."),DRe.forEach(t),xZe=i(Vn),Ie=s(Vn,"DIV",{class:!0});var Dt=n(Ie);f(Fy.$$.fragment,Dt),kZe=i(Dt),rY=s(Dt,"P",{});var Ojr=n(rY);RZe=r(Ojr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ojr.forEach(t),SZe=i(Dt),Xa=s(Dt,"P",{});var e5=n(Xa);PZe=r(e5,"The feature extractor class to instantiate is selected based on the "),tY=s(e5,"CODE",{});var Gjr=n(tY);$Ze=r(Gjr,"model_type"),Gjr.forEach(t),IZe=r(e5,` property of the config object
(either passed as an argument or loaded from `),aY=s(e5,"CODE",{});var Xjr=n(aY);jZe=r(Xjr,"pretrained_model_name_or_path"),Xjr.forEach(t),DZe=r(e5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sY=s(e5,"CODE",{});var Vjr=n(sY);NZe=r(Vjr,"pretrained_model_name_or_path"),Vjr.forEach(t),qZe=r(e5,":"),e5.forEach(t),OZe=i(Dt),te=s(Dt,"UL",{});var ne=n(te);dh=s(ne,"LI",{});var R4e=n(dh);nY=s(R4e,"STRONG",{});var zjr=n(nY);GZe=r(zjr,"beit"),zjr.forEach(t),XZe=r(R4e," \u2014 "),eR=s(R4e,"A",{href:!0});var Wjr=n(eR);VZe=r(Wjr,"BeitFeatureExtractor"),Wjr.forEach(t),zZe=r(R4e," (BEiT model)"),R4e.forEach(t),WZe=i(ne),ch=s(ne,"LI",{});var S4e=n(ch);lY=s(S4e,"STRONG",{});var Qjr=n(lY);QZe=r(Qjr,"clip"),Qjr.forEach(t),HZe=r(S4e," \u2014 "),oR=s(S4e,"A",{href:!0});var Hjr=n(oR);UZe=r(Hjr,"CLIPFeatureExtractor"),Hjr.forEach(t),JZe=r(S4e," (CLIP model)"),S4e.forEach(t),YZe=i(ne),mh=s(ne,"LI",{});var P4e=n(mh);iY=s(P4e,"STRONG",{});var Ujr=n(iY);KZe=r(Ujr,"convnext"),Ujr.forEach(t),ZZe=r(P4e," \u2014 "),rR=s(P4e,"A",{href:!0});var Jjr=n(rR);eeo=r(Jjr,"ConvNextFeatureExtractor"),Jjr.forEach(t),oeo=r(P4e," (ConvNext model)"),P4e.forEach(t),reo=i(ne),fh=s(ne,"LI",{});var $4e=n(fh);dY=s($4e,"STRONG",{});var Yjr=n(dY);teo=r(Yjr,"deit"),Yjr.forEach(t),aeo=r($4e," \u2014 "),tR=s($4e,"A",{href:!0});var Kjr=n(tR);seo=r(Kjr,"DeiTFeatureExtractor"),Kjr.forEach(t),neo=r($4e," (DeiT model)"),$4e.forEach(t),leo=i(ne),gh=s(ne,"LI",{});var I4e=n(gh);cY=s(I4e,"STRONG",{});var Zjr=n(cY);ieo=r(Zjr,"detr"),Zjr.forEach(t),deo=r(I4e," \u2014 "),aR=s(I4e,"A",{href:!0});var eDr=n(aR);ceo=r(eDr,"DetrFeatureExtractor"),eDr.forEach(t),meo=r(I4e," (DETR model)"),I4e.forEach(t),feo=i(ne),hh=s(ne,"LI",{});var j4e=n(hh);mY=s(j4e,"STRONG",{});var oDr=n(mY);geo=r(oDr,"hubert"),oDr.forEach(t),heo=r(j4e," \u2014 "),sR=s(j4e,"A",{href:!0});var rDr=n(sR);ueo=r(rDr,"Wav2Vec2FeatureExtractor"),rDr.forEach(t),peo=r(j4e," (Hubert model)"),j4e.forEach(t),_eo=i(ne),uh=s(ne,"LI",{});var D4e=n(uh);fY=s(D4e,"STRONG",{});var tDr=n(fY);beo=r(tDr,"layoutlmv2"),tDr.forEach(t),veo=r(D4e," \u2014 "),nR=s(D4e,"A",{href:!0});var aDr=n(nR);Teo=r(aDr,"LayoutLMv2FeatureExtractor"),aDr.forEach(t),Feo=r(D4e," (LayoutLMv2 model)"),D4e.forEach(t),Ceo=i(ne),ph=s(ne,"LI",{});var N4e=n(ph);gY=s(N4e,"STRONG",{});var sDr=n(gY);Meo=r(sDr,"maskformer"),sDr.forEach(t),Eeo=r(N4e," \u2014 "),lR=s(N4e,"A",{href:!0});var nDr=n(lR);yeo=r(nDr,"MaskFormerFeatureExtractor"),nDr.forEach(t),weo=r(N4e," (MaskFormer model)"),N4e.forEach(t),Aeo=i(ne),_h=s(ne,"LI",{});var q4e=n(_h);hY=s(q4e,"STRONG",{});var lDr=n(hY);Leo=r(lDr,"perceiver"),lDr.forEach(t),Beo=r(q4e," \u2014 "),iR=s(q4e,"A",{href:!0});var iDr=n(iR);xeo=r(iDr,"PerceiverFeatureExtractor"),iDr.forEach(t),keo=r(q4e," (Perceiver model)"),q4e.forEach(t),Reo=i(ne),bh=s(ne,"LI",{});var O4e=n(bh);uY=s(O4e,"STRONG",{});var dDr=n(uY);Seo=r(dDr,"poolformer"),dDr.forEach(t),Peo=r(O4e," \u2014 "),dR=s(O4e,"A",{href:!0});var cDr=n(dR);$eo=r(cDr,"PoolFormerFeatureExtractor"),cDr.forEach(t),Ieo=r(O4e," (PoolFormer model)"),O4e.forEach(t),jeo=i(ne),vh=s(ne,"LI",{});var G4e=n(vh);pY=s(G4e,"STRONG",{});var mDr=n(pY);Deo=r(mDr,"resnet"),mDr.forEach(t),Neo=r(G4e," \u2014 "),cR=s(G4e,"A",{href:!0});var fDr=n(cR);qeo=r(fDr,"ConvNextFeatureExtractor"),fDr.forEach(t),Oeo=r(G4e," (ResNet model)"),G4e.forEach(t),Geo=i(ne),Th=s(ne,"LI",{});var X4e=n(Th);_Y=s(X4e,"STRONG",{});var gDr=n(_Y);Xeo=r(gDr,"segformer"),gDr.forEach(t),Veo=r(X4e," \u2014 "),mR=s(X4e,"A",{href:!0});var hDr=n(mR);zeo=r(hDr,"SegformerFeatureExtractor"),hDr.forEach(t),Weo=r(X4e," (SegFormer model)"),X4e.forEach(t),Qeo=i(ne),Fh=s(ne,"LI",{});var V4e=n(Fh);bY=s(V4e,"STRONG",{});var uDr=n(bY);Heo=r(uDr,"speech_to_text"),uDr.forEach(t),Ueo=r(V4e," \u2014 "),fR=s(V4e,"A",{href:!0});var pDr=n(fR);Jeo=r(pDr,"Speech2TextFeatureExtractor"),pDr.forEach(t),Yeo=r(V4e," (Speech2Text model)"),V4e.forEach(t),Keo=i(ne),Ch=s(ne,"LI",{});var z4e=n(Ch);vY=s(z4e,"STRONG",{});var _Dr=n(vY);Zeo=r(_Dr,"swin"),_Dr.forEach(t),eoo=r(z4e," \u2014 "),gR=s(z4e,"A",{href:!0});var bDr=n(gR);ooo=r(bDr,"ViTFeatureExtractor"),bDr.forEach(t),roo=r(z4e," (Swin model)"),z4e.forEach(t),too=i(ne),Mh=s(ne,"LI",{});var W4e=n(Mh);TY=s(W4e,"STRONG",{});var vDr=n(TY);aoo=r(vDr,"vit"),vDr.forEach(t),soo=r(W4e," \u2014 "),hR=s(W4e,"A",{href:!0});var TDr=n(hR);noo=r(TDr,"ViTFeatureExtractor"),TDr.forEach(t),loo=r(W4e," (ViT model)"),W4e.forEach(t),ioo=i(ne),Eh=s(ne,"LI",{});var Q4e=n(Eh);FY=s(Q4e,"STRONG",{});var FDr=n(FY);doo=r(FDr,"vit_mae"),FDr.forEach(t),coo=r(Q4e," \u2014 "),uR=s(Q4e,"A",{href:!0});var CDr=n(uR);moo=r(CDr,"ViTFeatureExtractor"),CDr.forEach(t),foo=r(Q4e," (ViTMAE model)"),Q4e.forEach(t),goo=i(ne),yh=s(ne,"LI",{});var H4e=n(yh);CY=s(H4e,"STRONG",{});var MDr=n(CY);hoo=r(MDr,"wav2vec2"),MDr.forEach(t),uoo=r(H4e," \u2014 "),pR=s(H4e,"A",{href:!0});var EDr=n(pR);poo=r(EDr,"Wav2Vec2FeatureExtractor"),EDr.forEach(t),_oo=r(H4e," (Wav2Vec2 model)"),H4e.forEach(t),ne.forEach(t),boo=i(Dt),f(wh.$$.fragment,Dt),voo=i(Dt),MY=s(Dt,"P",{});var yDr=n(MY);Too=r(yDr,"Examples:"),yDr.forEach(t),Foo=i(Dt),f(Cy.$$.fragment,Dt),Dt.forEach(t),Coo=i(Vn),Ah=s(Vn,"DIV",{class:!0});var NRe=n(Ah);f(My.$$.fragment,NRe),Moo=i(NRe),EY=s(NRe,"P",{});var wDr=n(EY);Eoo=r(wDr,"Register a new feature extractor for this class."),wDr.forEach(t),NRe.forEach(t),Vn.forEach(t),Sxe=i(c),Ui=s(c,"H2",{class:!0});var qRe=n(Ui);Lh=s(qRe,"A",{id:!0,class:!0,href:!0});var ADr=n(Lh);yY=s(ADr,"SPAN",{});var LDr=n(yY);f(Ey.$$.fragment,LDr),LDr.forEach(t),ADr.forEach(t),yoo=i(qRe),wY=s(qRe,"SPAN",{});var BDr=n(wY);woo=r(BDr,"AutoProcessor"),BDr.forEach(t),qRe.forEach(t),Pxe=i(c),Uo=s(c,"DIV",{class:!0});var zn=n(Uo);f(yy.$$.fragment,zn),Aoo=i(zn),wy=s(zn,"P",{});var ORe=n(wy);Loo=r(ORe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_R=s(ORe,"A",{href:!0});var xDr=n(_R);Boo=r(xDr,"AutoProcessor.from_pretrained()"),xDr.forEach(t),xoo=r(ORe," class method."),ORe.forEach(t),koo=i(zn),Ay=s(zn,"P",{});var GRe=n(Ay);Roo=r(GRe,"This class cannot be instantiated directly using "),AY=s(GRe,"CODE",{});var kDr=n(AY);Soo=r(kDr,"__init__()"),kDr.forEach(t),Poo=r(GRe," (throws an error)."),GRe.forEach(t),$oo=i(zn),je=s(zn,"DIV",{class:!0});var Nt=n(je);f(Ly.$$.fragment,Nt),Ioo=i(Nt),LY=s(Nt,"P",{});var RDr=n(LY);joo=r(RDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),RDr.forEach(t),Doo=i(Nt),Ji=s(Nt,"P",{});var Rz=n(Ji);Noo=r(Rz,"The processor class to instantiate is selected based on the "),BY=s(Rz,"CODE",{});var SDr=n(BY);qoo=r(SDr,"model_type"),SDr.forEach(t),Ooo=r(Rz,` property of the config object (either
passed as an argument or loaded from `),xY=s(Rz,"CODE",{});var PDr=n(xY);Goo=r(PDr,"pretrained_model_name_or_path"),PDr.forEach(t),Xoo=r(Rz," if possible):"),Rz.forEach(t),Voo=i(Nt),xe=s(Nt,"UL",{});var No=n(xe);Bh=s(No,"LI",{});var U4e=n(Bh);kY=s(U4e,"STRONG",{});var $Dr=n(kY);zoo=r($Dr,"clip"),$Dr.forEach(t),Woo=r(U4e," \u2014 "),bR=s(U4e,"A",{href:!0});var IDr=n(bR);Qoo=r(IDr,"CLIPProcessor"),IDr.forEach(t),Hoo=r(U4e," (CLIP model)"),U4e.forEach(t),Uoo=i(No),xh=s(No,"LI",{});var J4e=n(xh);RY=s(J4e,"STRONG",{});var jDr=n(RY);Joo=r(jDr,"layoutlmv2"),jDr.forEach(t),Yoo=r(J4e," \u2014 "),vR=s(J4e,"A",{href:!0});var DDr=n(vR);Koo=r(DDr,"LayoutLMv2Processor"),DDr.forEach(t),Zoo=r(J4e," (LayoutLMv2 model)"),J4e.forEach(t),ero=i(No),kh=s(No,"LI",{});var Y4e=n(kh);SY=s(Y4e,"STRONG",{});var NDr=n(SY);oro=r(NDr,"layoutxlm"),NDr.forEach(t),rro=r(Y4e," \u2014 "),TR=s(Y4e,"A",{href:!0});var qDr=n(TR);tro=r(qDr,"LayoutXLMProcessor"),qDr.forEach(t),aro=r(Y4e," (LayoutXLM model)"),Y4e.forEach(t),sro=i(No),Rh=s(No,"LI",{});var K4e=n(Rh);PY=s(K4e,"STRONG",{});var ODr=n(PY);nro=r(ODr,"speech_to_text"),ODr.forEach(t),lro=r(K4e," \u2014 "),FR=s(K4e,"A",{href:!0});var GDr=n(FR);iro=r(GDr,"Speech2TextProcessor"),GDr.forEach(t),dro=r(K4e," (Speech2Text model)"),K4e.forEach(t),cro=i(No),Sh=s(No,"LI",{});var Z4e=n(Sh);$Y=s(Z4e,"STRONG",{});var XDr=n($Y);mro=r(XDr,"speech_to_text_2"),XDr.forEach(t),fro=r(Z4e," \u2014 "),CR=s(Z4e,"A",{href:!0});var VDr=n(CR);gro=r(VDr,"Speech2Text2Processor"),VDr.forEach(t),hro=r(Z4e," (Speech2Text2 model)"),Z4e.forEach(t),uro=i(No),Ph=s(No,"LI",{});var eEe=n(Ph);IY=s(eEe,"STRONG",{});var zDr=n(IY);pro=r(zDr,"trocr"),zDr.forEach(t),_ro=r(eEe," \u2014 "),MR=s(eEe,"A",{href:!0});var WDr=n(MR);bro=r(WDr,"TrOCRProcessor"),WDr.forEach(t),vro=r(eEe," (TrOCR model)"),eEe.forEach(t),Tro=i(No),$h=s(No,"LI",{});var oEe=n($h);jY=s(oEe,"STRONG",{});var QDr=n(jY);Fro=r(QDr,"vision-text-dual-encoder"),QDr.forEach(t),Cro=r(oEe," \u2014 "),ER=s(oEe,"A",{href:!0});var HDr=n(ER);Mro=r(HDr,"VisionTextDualEncoderProcessor"),HDr.forEach(t),Ero=r(oEe," (VisionTextDualEncoder model)"),oEe.forEach(t),yro=i(No),Ih=s(No,"LI",{});var rEe=n(Ih);DY=s(rEe,"STRONG",{});var UDr=n(DY);wro=r(UDr,"wav2vec2"),UDr.forEach(t),Aro=r(rEe," \u2014 "),yR=s(rEe,"A",{href:!0});var JDr=n(yR);Lro=r(JDr,"Wav2Vec2Processor"),JDr.forEach(t),Bro=r(rEe," (Wav2Vec2 model)"),rEe.forEach(t),No.forEach(t),xro=i(Nt),f(jh.$$.fragment,Nt),kro=i(Nt),NY=s(Nt,"P",{});var YDr=n(NY);Rro=r(YDr,"Examples:"),YDr.forEach(t),Sro=i(Nt),f(By.$$.fragment,Nt),Nt.forEach(t),Pro=i(zn),Dh=s(zn,"DIV",{class:!0});var XRe=n(Dh);f(xy.$$.fragment,XRe),$ro=i(XRe),qY=s(XRe,"P",{});var KDr=n(qY);Iro=r(KDr,"Register a new processor for this class."),KDr.forEach(t),XRe.forEach(t),zn.forEach(t),$xe=i(c),Yi=s(c,"H2",{class:!0});var VRe=n(Yi);Nh=s(VRe,"A",{id:!0,class:!0,href:!0});var ZDr=n(Nh);OY=s(ZDr,"SPAN",{});var eNr=n(OY);f(ky.$$.fragment,eNr),eNr.forEach(t),ZDr.forEach(t),jro=i(VRe),GY=s(VRe,"SPAN",{});var oNr=n(GY);Dro=r(oNr,"AutoModel"),oNr.forEach(t),VRe.forEach(t),Ixe=i(c),Jo=s(c,"DIV",{class:!0});var Wn=n(Jo);f(Ry.$$.fragment,Wn),Nro=i(Wn),Ki=s(Wn,"P",{});var Sz=n(Ki);qro=r(Sz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XY=s(Sz,"CODE",{});var rNr=n(XY);Oro=r(rNr,"from_pretrained()"),rNr.forEach(t),Gro=r(Sz,"class method or the "),VY=s(Sz,"CODE",{});var tNr=n(VY);Xro=r(tNr,"from_config()"),tNr.forEach(t),Vro=r(Sz,`class
method.`),Sz.forEach(t),zro=i(Wn),Sy=s(Wn,"P",{});var zRe=n(Sy);Wro=r(zRe,"This class cannot be instantiated directly using "),zY=s(zRe,"CODE",{});var aNr=n(zY);Qro=r(aNr,"__init__()"),aNr.forEach(t),Hro=r(zRe," (throws an error)."),zRe.forEach(t),Uro=i(Wn),Vr=s(Wn,"DIV",{class:!0});var Qn=n(Vr);f(Py.$$.fragment,Qn),Jro=i(Qn),WY=s(Qn,"P",{});var sNr=n(WY);Yro=r(sNr,"Instantiates one of the base model classes of the library from a configuration."),sNr.forEach(t),Kro=i(Qn),Zi=s(Qn,"P",{});var Pz=n(Zi);Zro=r(Pz,`Note:
Loading a model from its configuration file does `),QY=s(Pz,"STRONG",{});var nNr=n(QY);eto=r(nNr,"not"),nNr.forEach(t),oto=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=s(Pz,"CODE",{});var lNr=n(HY);rto=r(lNr,"from_pretrained()"),lNr.forEach(t),tto=r(Pz,"to load the model weights."),Pz.forEach(t),ato=i(Qn),UY=s(Qn,"P",{});var iNr=n(UY);sto=r(iNr,"Examples:"),iNr.forEach(t),nto=i(Qn),f($y.$$.fragment,Qn),Qn.forEach(t),lto=i(Wn),De=s(Wn,"DIV",{class:!0});var qt=n(De);f(Iy.$$.fragment,qt),ito=i(qt),JY=s(qt,"P",{});var dNr=n(JY);dto=r(dNr,"Instantiate one of the base model classes of the library from a pretrained model."),dNr.forEach(t),cto=i(qt),Va=s(qt,"P",{});var o5=n(Va);mto=r(o5,"The model class to instantiate is selected based on the "),YY=s(o5,"CODE",{});var cNr=n(YY);fto=r(cNr,"model_type"),cNr.forEach(t),gto=r(o5,` property of the config object (either
passed as an argument or loaded from `),KY=s(o5,"CODE",{});var mNr=n(KY);hto=r(mNr,"pretrained_model_name_or_path"),mNr.forEach(t),uto=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZY=s(o5,"CODE",{});var fNr=n(ZY);pto=r(fNr,"pretrained_model_name_or_path"),fNr.forEach(t),_to=r(o5,":"),o5.forEach(t),bto=i(qt),F=s(qt,"UL",{});var C=n(F);qh=s(C,"LI",{});var tEe=n(qh);eK=s(tEe,"STRONG",{});var gNr=n(eK);vto=r(gNr,"albert"),gNr.forEach(t),Tto=r(tEe," \u2014 "),wR=s(tEe,"A",{href:!0});var hNr=n(wR);Fto=r(hNr,"AlbertModel"),hNr.forEach(t),Cto=r(tEe," (ALBERT model)"),tEe.forEach(t),Mto=i(C),Oh=s(C,"LI",{});var aEe=n(Oh);oK=s(aEe,"STRONG",{});var uNr=n(oK);Eto=r(uNr,"bart"),uNr.forEach(t),yto=r(aEe," \u2014 "),AR=s(aEe,"A",{href:!0});var pNr=n(AR);wto=r(pNr,"BartModel"),pNr.forEach(t),Ato=r(aEe," (BART model)"),aEe.forEach(t),Lto=i(C),Gh=s(C,"LI",{});var sEe=n(Gh);rK=s(sEe,"STRONG",{});var _Nr=n(rK);Bto=r(_Nr,"beit"),_Nr.forEach(t),xto=r(sEe," \u2014 "),LR=s(sEe,"A",{href:!0});var bNr=n(LR);kto=r(bNr,"BeitModel"),bNr.forEach(t),Rto=r(sEe," (BEiT model)"),sEe.forEach(t),Sto=i(C),Xh=s(C,"LI",{});var nEe=n(Xh);tK=s(nEe,"STRONG",{});var vNr=n(tK);Pto=r(vNr,"bert"),vNr.forEach(t),$to=r(nEe," \u2014 "),BR=s(nEe,"A",{href:!0});var TNr=n(BR);Ito=r(TNr,"BertModel"),TNr.forEach(t),jto=r(nEe," (BERT model)"),nEe.forEach(t),Dto=i(C),Vh=s(C,"LI",{});var lEe=n(Vh);aK=s(lEe,"STRONG",{});var FNr=n(aK);Nto=r(FNr,"bert-generation"),FNr.forEach(t),qto=r(lEe," \u2014 "),xR=s(lEe,"A",{href:!0});var CNr=n(xR);Oto=r(CNr,"BertGenerationEncoder"),CNr.forEach(t),Gto=r(lEe," (Bert Generation model)"),lEe.forEach(t),Xto=i(C),zh=s(C,"LI",{});var iEe=n(zh);sK=s(iEe,"STRONG",{});var MNr=n(sK);Vto=r(MNr,"big_bird"),MNr.forEach(t),zto=r(iEe," \u2014 "),kR=s(iEe,"A",{href:!0});var ENr=n(kR);Wto=r(ENr,"BigBirdModel"),ENr.forEach(t),Qto=r(iEe," (BigBird model)"),iEe.forEach(t),Hto=i(C),Wh=s(C,"LI",{});var dEe=n(Wh);nK=s(dEe,"STRONG",{});var yNr=n(nK);Uto=r(yNr,"bigbird_pegasus"),yNr.forEach(t),Jto=r(dEe," \u2014 "),RR=s(dEe,"A",{href:!0});var wNr=n(RR);Yto=r(wNr,"BigBirdPegasusModel"),wNr.forEach(t),Kto=r(dEe," (BigBirdPegasus model)"),dEe.forEach(t),Zto=i(C),Qh=s(C,"LI",{});var cEe=n(Qh);lK=s(cEe,"STRONG",{});var ANr=n(lK);eao=r(ANr,"blenderbot"),ANr.forEach(t),oao=r(cEe," \u2014 "),SR=s(cEe,"A",{href:!0});var LNr=n(SR);rao=r(LNr,"BlenderbotModel"),LNr.forEach(t),tao=r(cEe," (Blenderbot model)"),cEe.forEach(t),aao=i(C),Hh=s(C,"LI",{});var mEe=n(Hh);iK=s(mEe,"STRONG",{});var BNr=n(iK);sao=r(BNr,"blenderbot-small"),BNr.forEach(t),nao=r(mEe," \u2014 "),PR=s(mEe,"A",{href:!0});var xNr=n(PR);lao=r(xNr,"BlenderbotSmallModel"),xNr.forEach(t),iao=r(mEe," (BlenderbotSmall model)"),mEe.forEach(t),dao=i(C),Uh=s(C,"LI",{});var fEe=n(Uh);dK=s(fEe,"STRONG",{});var kNr=n(dK);cao=r(kNr,"camembert"),kNr.forEach(t),mao=r(fEe," \u2014 "),$R=s(fEe,"A",{href:!0});var RNr=n($R);fao=r(RNr,"CamembertModel"),RNr.forEach(t),gao=r(fEe," (CamemBERT model)"),fEe.forEach(t),hao=i(C),Jh=s(C,"LI",{});var gEe=n(Jh);cK=s(gEe,"STRONG",{});var SNr=n(cK);uao=r(SNr,"canine"),SNr.forEach(t),pao=r(gEe," \u2014 "),IR=s(gEe,"A",{href:!0});var PNr=n(IR);_ao=r(PNr,"CanineModel"),PNr.forEach(t),bao=r(gEe," (Canine model)"),gEe.forEach(t),vao=i(C),Yh=s(C,"LI",{});var hEe=n(Yh);mK=s(hEe,"STRONG",{});var $Nr=n(mK);Tao=r($Nr,"clip"),$Nr.forEach(t),Fao=r(hEe," \u2014 "),jR=s(hEe,"A",{href:!0});var INr=n(jR);Cao=r(INr,"CLIPModel"),INr.forEach(t),Mao=r(hEe," (CLIP model)"),hEe.forEach(t),Eao=i(C),Kh=s(C,"LI",{});var uEe=n(Kh);fK=s(uEe,"STRONG",{});var jNr=n(fK);yao=r(jNr,"convbert"),jNr.forEach(t),wao=r(uEe," \u2014 "),DR=s(uEe,"A",{href:!0});var DNr=n(DR);Aao=r(DNr,"ConvBertModel"),DNr.forEach(t),Lao=r(uEe," (ConvBERT model)"),uEe.forEach(t),Bao=i(C),Zh=s(C,"LI",{});var pEe=n(Zh);gK=s(pEe,"STRONG",{});var NNr=n(gK);xao=r(NNr,"convnext"),NNr.forEach(t),kao=r(pEe," \u2014 "),NR=s(pEe,"A",{href:!0});var qNr=n(NR);Rao=r(qNr,"ConvNextModel"),qNr.forEach(t),Sao=r(pEe," (ConvNext model)"),pEe.forEach(t),Pao=i(C),eu=s(C,"LI",{});var _Ee=n(eu);hK=s(_Ee,"STRONG",{});var ONr=n(hK);$ao=r(ONr,"ctrl"),ONr.forEach(t),Iao=r(_Ee," \u2014 "),qR=s(_Ee,"A",{href:!0});var GNr=n(qR);jao=r(GNr,"CTRLModel"),GNr.forEach(t),Dao=r(_Ee," (CTRL model)"),_Ee.forEach(t),Nao=i(C),ou=s(C,"LI",{});var bEe=n(ou);uK=s(bEe,"STRONG",{});var XNr=n(uK);qao=r(XNr,"data2vec-audio"),XNr.forEach(t),Oao=r(bEe," \u2014 "),OR=s(bEe,"A",{href:!0});var VNr=n(OR);Gao=r(VNr,"Data2VecAudioModel"),VNr.forEach(t),Xao=r(bEe," (Data2VecAudio model)"),bEe.forEach(t),Vao=i(C),ru=s(C,"LI",{});var vEe=n(ru);pK=s(vEe,"STRONG",{});var zNr=n(pK);zao=r(zNr,"data2vec-text"),zNr.forEach(t),Wao=r(vEe," \u2014 "),GR=s(vEe,"A",{href:!0});var WNr=n(GR);Qao=r(WNr,"Data2VecTextModel"),WNr.forEach(t),Hao=r(vEe," (Data2VecText model)"),vEe.forEach(t),Uao=i(C),tu=s(C,"LI",{});var TEe=n(tu);_K=s(TEe,"STRONG",{});var QNr=n(_K);Jao=r(QNr,"deberta"),QNr.forEach(t),Yao=r(TEe," \u2014 "),XR=s(TEe,"A",{href:!0});var HNr=n(XR);Kao=r(HNr,"DebertaModel"),HNr.forEach(t),Zao=r(TEe," (DeBERTa model)"),TEe.forEach(t),eso=i(C),au=s(C,"LI",{});var FEe=n(au);bK=s(FEe,"STRONG",{});var UNr=n(bK);oso=r(UNr,"deberta-v2"),UNr.forEach(t),rso=r(FEe," \u2014 "),VR=s(FEe,"A",{href:!0});var JNr=n(VR);tso=r(JNr,"DebertaV2Model"),JNr.forEach(t),aso=r(FEe," (DeBERTa-v2 model)"),FEe.forEach(t),sso=i(C),su=s(C,"LI",{});var CEe=n(su);vK=s(CEe,"STRONG",{});var YNr=n(vK);nso=r(YNr,"deit"),YNr.forEach(t),lso=r(CEe," \u2014 "),zR=s(CEe,"A",{href:!0});var KNr=n(zR);iso=r(KNr,"DeiTModel"),KNr.forEach(t),dso=r(CEe," (DeiT model)"),CEe.forEach(t),cso=i(C),nu=s(C,"LI",{});var MEe=n(nu);TK=s(MEe,"STRONG",{});var ZNr=n(TK);mso=r(ZNr,"detr"),ZNr.forEach(t),fso=r(MEe," \u2014 "),WR=s(MEe,"A",{href:!0});var eqr=n(WR);gso=r(eqr,"DetrModel"),eqr.forEach(t),hso=r(MEe," (DETR model)"),MEe.forEach(t),uso=i(C),lu=s(C,"LI",{});var EEe=n(lu);FK=s(EEe,"STRONG",{});var oqr=n(FK);pso=r(oqr,"distilbert"),oqr.forEach(t),_so=r(EEe," \u2014 "),QR=s(EEe,"A",{href:!0});var rqr=n(QR);bso=r(rqr,"DistilBertModel"),rqr.forEach(t),vso=r(EEe," (DistilBERT model)"),EEe.forEach(t),Tso=i(C),iu=s(C,"LI",{});var yEe=n(iu);CK=s(yEe,"STRONG",{});var tqr=n(CK);Fso=r(tqr,"dpr"),tqr.forEach(t),Cso=r(yEe," \u2014 "),HR=s(yEe,"A",{href:!0});var aqr=n(HR);Mso=r(aqr,"DPRQuestionEncoder"),aqr.forEach(t),Eso=r(yEe," (DPR model)"),yEe.forEach(t),yso=i(C),du=s(C,"LI",{});var wEe=n(du);MK=s(wEe,"STRONG",{});var sqr=n(MK);wso=r(sqr,"electra"),sqr.forEach(t),Aso=r(wEe," \u2014 "),UR=s(wEe,"A",{href:!0});var nqr=n(UR);Lso=r(nqr,"ElectraModel"),nqr.forEach(t),Bso=r(wEe," (ELECTRA model)"),wEe.forEach(t),xso=i(C),cu=s(C,"LI",{});var AEe=n(cu);EK=s(AEe,"STRONG",{});var lqr=n(EK);kso=r(lqr,"flaubert"),lqr.forEach(t),Rso=r(AEe," \u2014 "),JR=s(AEe,"A",{href:!0});var iqr=n(JR);Sso=r(iqr,"FlaubertModel"),iqr.forEach(t),Pso=r(AEe," (FlauBERT model)"),AEe.forEach(t),$so=i(C),mu=s(C,"LI",{});var LEe=n(mu);yK=s(LEe,"STRONG",{});var dqr=n(yK);Iso=r(dqr,"fnet"),dqr.forEach(t),jso=r(LEe," \u2014 "),YR=s(LEe,"A",{href:!0});var cqr=n(YR);Dso=r(cqr,"FNetModel"),cqr.forEach(t),Nso=r(LEe," (FNet model)"),LEe.forEach(t),qso=i(C),fu=s(C,"LI",{});var BEe=n(fu);wK=s(BEe,"STRONG",{});var mqr=n(wK);Oso=r(mqr,"fsmt"),mqr.forEach(t),Gso=r(BEe," \u2014 "),KR=s(BEe,"A",{href:!0});var fqr=n(KR);Xso=r(fqr,"FSMTModel"),fqr.forEach(t),Vso=r(BEe," (FairSeq Machine-Translation model)"),BEe.forEach(t),zso=i(C),Nn=s(C,"LI",{});var O8=n(Nn);AK=s(O8,"STRONG",{});var gqr=n(AK);Wso=r(gqr,"funnel"),gqr.forEach(t),Qso=r(O8," \u2014 "),ZR=s(O8,"A",{href:!0});var hqr=n(ZR);Hso=r(hqr,"FunnelModel"),hqr.forEach(t),Uso=r(O8," or "),eS=s(O8,"A",{href:!0});var uqr=n(eS);Jso=r(uqr,"FunnelBaseModel"),uqr.forEach(t),Yso=r(O8," (Funnel Transformer model)"),O8.forEach(t),Kso=i(C),gu=s(C,"LI",{});var xEe=n(gu);LK=s(xEe,"STRONG",{});var pqr=n(LK);Zso=r(pqr,"gpt2"),pqr.forEach(t),eno=r(xEe," \u2014 "),oS=s(xEe,"A",{href:!0});var _qr=n(oS);ono=r(_qr,"GPT2Model"),_qr.forEach(t),rno=r(xEe," (OpenAI GPT-2 model)"),xEe.forEach(t),tno=i(C),hu=s(C,"LI",{});var kEe=n(hu);BK=s(kEe,"STRONG",{});var bqr=n(BK);ano=r(bqr,"gpt_neo"),bqr.forEach(t),sno=r(kEe," \u2014 "),rS=s(kEe,"A",{href:!0});var vqr=n(rS);nno=r(vqr,"GPTNeoModel"),vqr.forEach(t),lno=r(kEe," (GPT Neo model)"),kEe.forEach(t),ino=i(C),uu=s(C,"LI",{});var REe=n(uu);xK=s(REe,"STRONG",{});var Tqr=n(xK);dno=r(Tqr,"gptj"),Tqr.forEach(t),cno=r(REe," \u2014 "),tS=s(REe,"A",{href:!0});var Fqr=n(tS);mno=r(Fqr,"GPTJModel"),Fqr.forEach(t),fno=r(REe," (GPT-J model)"),REe.forEach(t),gno=i(C),pu=s(C,"LI",{});var SEe=n(pu);kK=s(SEe,"STRONG",{});var Cqr=n(kK);hno=r(Cqr,"hubert"),Cqr.forEach(t),uno=r(SEe," \u2014 "),aS=s(SEe,"A",{href:!0});var Mqr=n(aS);pno=r(Mqr,"HubertModel"),Mqr.forEach(t),_no=r(SEe," (Hubert model)"),SEe.forEach(t),bno=i(C),_u=s(C,"LI",{});var PEe=n(_u);RK=s(PEe,"STRONG",{});var Eqr=n(RK);vno=r(Eqr,"ibert"),Eqr.forEach(t),Tno=r(PEe," \u2014 "),sS=s(PEe,"A",{href:!0});var yqr=n(sS);Fno=r(yqr,"IBertModel"),yqr.forEach(t),Cno=r(PEe," (I-BERT model)"),PEe.forEach(t),Mno=i(C),bu=s(C,"LI",{});var $Ee=n(bu);SK=s($Ee,"STRONG",{});var wqr=n(SK);Eno=r(wqr,"imagegpt"),wqr.forEach(t),yno=r($Ee," \u2014 "),nS=s($Ee,"A",{href:!0});var Aqr=n(nS);wno=r(Aqr,"ImageGPTModel"),Aqr.forEach(t),Ano=r($Ee," (ImageGPT model)"),$Ee.forEach(t),Lno=i(C),vu=s(C,"LI",{});var IEe=n(vu);PK=s(IEe,"STRONG",{});var Lqr=n(PK);Bno=r(Lqr,"layoutlm"),Lqr.forEach(t),xno=r(IEe," \u2014 "),lS=s(IEe,"A",{href:!0});var Bqr=n(lS);kno=r(Bqr,"LayoutLMModel"),Bqr.forEach(t),Rno=r(IEe," (LayoutLM model)"),IEe.forEach(t),Sno=i(C),Tu=s(C,"LI",{});var jEe=n(Tu);$K=s(jEe,"STRONG",{});var xqr=n($K);Pno=r(xqr,"layoutlmv2"),xqr.forEach(t),$no=r(jEe," \u2014 "),iS=s(jEe,"A",{href:!0});var kqr=n(iS);Ino=r(kqr,"LayoutLMv2Model"),kqr.forEach(t),jno=r(jEe," (LayoutLMv2 model)"),jEe.forEach(t),Dno=i(C),Fu=s(C,"LI",{});var DEe=n(Fu);IK=s(DEe,"STRONG",{});var Rqr=n(IK);Nno=r(Rqr,"led"),Rqr.forEach(t),qno=r(DEe," \u2014 "),dS=s(DEe,"A",{href:!0});var Sqr=n(dS);Ono=r(Sqr,"LEDModel"),Sqr.forEach(t),Gno=r(DEe," (LED model)"),DEe.forEach(t),Xno=i(C),Cu=s(C,"LI",{});var NEe=n(Cu);jK=s(NEe,"STRONG",{});var Pqr=n(jK);Vno=r(Pqr,"longformer"),Pqr.forEach(t),zno=r(NEe," \u2014 "),cS=s(NEe,"A",{href:!0});var $qr=n(cS);Wno=r($qr,"LongformerModel"),$qr.forEach(t),Qno=r(NEe," (Longformer model)"),NEe.forEach(t),Hno=i(C),Mu=s(C,"LI",{});var qEe=n(Mu);DK=s(qEe,"STRONG",{});var Iqr=n(DK);Uno=r(Iqr,"luke"),Iqr.forEach(t),Jno=r(qEe," \u2014 "),mS=s(qEe,"A",{href:!0});var jqr=n(mS);Yno=r(jqr,"LukeModel"),jqr.forEach(t),Kno=r(qEe," (LUKE model)"),qEe.forEach(t),Zno=i(C),Eu=s(C,"LI",{});var OEe=n(Eu);NK=s(OEe,"STRONG",{});var Dqr=n(NK);elo=r(Dqr,"lxmert"),Dqr.forEach(t),olo=r(OEe," \u2014 "),fS=s(OEe,"A",{href:!0});var Nqr=n(fS);rlo=r(Nqr,"LxmertModel"),Nqr.forEach(t),tlo=r(OEe," (LXMERT model)"),OEe.forEach(t),alo=i(C),yu=s(C,"LI",{});var GEe=n(yu);qK=s(GEe,"STRONG",{});var qqr=n(qK);slo=r(qqr,"m2m_100"),qqr.forEach(t),nlo=r(GEe," \u2014 "),gS=s(GEe,"A",{href:!0});var Oqr=n(gS);llo=r(Oqr,"M2M100Model"),Oqr.forEach(t),ilo=r(GEe," (M2M100 model)"),GEe.forEach(t),dlo=i(C),wu=s(C,"LI",{});var XEe=n(wu);OK=s(XEe,"STRONG",{});var Gqr=n(OK);clo=r(Gqr,"marian"),Gqr.forEach(t),mlo=r(XEe," \u2014 "),hS=s(XEe,"A",{href:!0});var Xqr=n(hS);flo=r(Xqr,"MarianModel"),Xqr.forEach(t),glo=r(XEe," (Marian model)"),XEe.forEach(t),hlo=i(C),Au=s(C,"LI",{});var VEe=n(Au);GK=s(VEe,"STRONG",{});var Vqr=n(GK);ulo=r(Vqr,"maskformer"),Vqr.forEach(t),plo=r(VEe," \u2014 "),uS=s(VEe,"A",{href:!0});var zqr=n(uS);_lo=r(zqr,"MaskFormerModel"),zqr.forEach(t),blo=r(VEe," (MaskFormer model)"),VEe.forEach(t),vlo=i(C),Lu=s(C,"LI",{});var zEe=n(Lu);XK=s(zEe,"STRONG",{});var Wqr=n(XK);Tlo=r(Wqr,"mbart"),Wqr.forEach(t),Flo=r(zEe," \u2014 "),pS=s(zEe,"A",{href:!0});var Qqr=n(pS);Clo=r(Qqr,"MBartModel"),Qqr.forEach(t),Mlo=r(zEe," (mBART model)"),zEe.forEach(t),Elo=i(C),Bu=s(C,"LI",{});var WEe=n(Bu);VK=s(WEe,"STRONG",{});var Hqr=n(VK);ylo=r(Hqr,"megatron-bert"),Hqr.forEach(t),wlo=r(WEe," \u2014 "),_S=s(WEe,"A",{href:!0});var Uqr=n(_S);Alo=r(Uqr,"MegatronBertModel"),Uqr.forEach(t),Llo=r(WEe," (MegatronBert model)"),WEe.forEach(t),Blo=i(C),xu=s(C,"LI",{});var QEe=n(xu);zK=s(QEe,"STRONG",{});var Jqr=n(zK);xlo=r(Jqr,"mobilebert"),Jqr.forEach(t),klo=r(QEe," \u2014 "),bS=s(QEe,"A",{href:!0});var Yqr=n(bS);Rlo=r(Yqr,"MobileBertModel"),Yqr.forEach(t),Slo=r(QEe," (MobileBERT model)"),QEe.forEach(t),Plo=i(C),ku=s(C,"LI",{});var HEe=n(ku);WK=s(HEe,"STRONG",{});var Kqr=n(WK);$lo=r(Kqr,"mpnet"),Kqr.forEach(t),Ilo=r(HEe," \u2014 "),vS=s(HEe,"A",{href:!0});var Zqr=n(vS);jlo=r(Zqr,"MPNetModel"),Zqr.forEach(t),Dlo=r(HEe," (MPNet model)"),HEe.forEach(t),Nlo=i(C),Ru=s(C,"LI",{});var UEe=n(Ru);QK=s(UEe,"STRONG",{});var eOr=n(QK);qlo=r(eOr,"mt5"),eOr.forEach(t),Olo=r(UEe," \u2014 "),TS=s(UEe,"A",{href:!0});var oOr=n(TS);Glo=r(oOr,"MT5Model"),oOr.forEach(t),Xlo=r(UEe," (mT5 model)"),UEe.forEach(t),Vlo=i(C),Su=s(C,"LI",{});var JEe=n(Su);HK=s(JEe,"STRONG",{});var rOr=n(HK);zlo=r(rOr,"nystromformer"),rOr.forEach(t),Wlo=r(JEe," \u2014 "),FS=s(JEe,"A",{href:!0});var tOr=n(FS);Qlo=r(tOr,"NystromformerModel"),tOr.forEach(t),Hlo=r(JEe," (Nystromformer model)"),JEe.forEach(t),Ulo=i(C),Pu=s(C,"LI",{});var YEe=n(Pu);UK=s(YEe,"STRONG",{});var aOr=n(UK);Jlo=r(aOr,"openai-gpt"),aOr.forEach(t),Ylo=r(YEe," \u2014 "),CS=s(YEe,"A",{href:!0});var sOr=n(CS);Klo=r(sOr,"OpenAIGPTModel"),sOr.forEach(t),Zlo=r(YEe," (OpenAI GPT model)"),YEe.forEach(t),eio=i(C),$u=s(C,"LI",{});var KEe=n($u);JK=s(KEe,"STRONG",{});var nOr=n(JK);oio=r(nOr,"pegasus"),nOr.forEach(t),rio=r(KEe," \u2014 "),MS=s(KEe,"A",{href:!0});var lOr=n(MS);tio=r(lOr,"PegasusModel"),lOr.forEach(t),aio=r(KEe," (Pegasus model)"),KEe.forEach(t),sio=i(C),Iu=s(C,"LI",{});var ZEe=n(Iu);YK=s(ZEe,"STRONG",{});var iOr=n(YK);nio=r(iOr,"perceiver"),iOr.forEach(t),lio=r(ZEe," \u2014 "),ES=s(ZEe,"A",{href:!0});var dOr=n(ES);iio=r(dOr,"PerceiverModel"),dOr.forEach(t),dio=r(ZEe," (Perceiver model)"),ZEe.forEach(t),cio=i(C),ju=s(C,"LI",{});var e3e=n(ju);KK=s(e3e,"STRONG",{});var cOr=n(KK);mio=r(cOr,"plbart"),cOr.forEach(t),fio=r(e3e," \u2014 "),yS=s(e3e,"A",{href:!0});var mOr=n(yS);gio=r(mOr,"PLBartModel"),mOr.forEach(t),hio=r(e3e," (PLBart model)"),e3e.forEach(t),uio=i(C),Du=s(C,"LI",{});var o3e=n(Du);ZK=s(o3e,"STRONG",{});var fOr=n(ZK);pio=r(fOr,"poolformer"),fOr.forEach(t),_io=r(o3e," \u2014 "),wS=s(o3e,"A",{href:!0});var gOr=n(wS);bio=r(gOr,"PoolFormerModel"),gOr.forEach(t),vio=r(o3e," (PoolFormer model)"),o3e.forEach(t),Tio=i(C),Nu=s(C,"LI",{});var r3e=n(Nu);eZ=s(r3e,"STRONG",{});var hOr=n(eZ);Fio=r(hOr,"prophetnet"),hOr.forEach(t),Cio=r(r3e," \u2014 "),AS=s(r3e,"A",{href:!0});var uOr=n(AS);Mio=r(uOr,"ProphetNetModel"),uOr.forEach(t),Eio=r(r3e," (ProphetNet model)"),r3e.forEach(t),yio=i(C),qu=s(C,"LI",{});var t3e=n(qu);oZ=s(t3e,"STRONG",{});var pOr=n(oZ);wio=r(pOr,"qdqbert"),pOr.forEach(t),Aio=r(t3e," \u2014 "),LS=s(t3e,"A",{href:!0});var _Or=n(LS);Lio=r(_Or,"QDQBertModel"),_Or.forEach(t),Bio=r(t3e," (QDQBert model)"),t3e.forEach(t),xio=i(C),Ou=s(C,"LI",{});var a3e=n(Ou);rZ=s(a3e,"STRONG",{});var bOr=n(rZ);kio=r(bOr,"reformer"),bOr.forEach(t),Rio=r(a3e," \u2014 "),BS=s(a3e,"A",{href:!0});var vOr=n(BS);Sio=r(vOr,"ReformerModel"),vOr.forEach(t),Pio=r(a3e," (Reformer model)"),a3e.forEach(t),$io=i(C),Gu=s(C,"LI",{});var s3e=n(Gu);tZ=s(s3e,"STRONG",{});var TOr=n(tZ);Iio=r(TOr,"rembert"),TOr.forEach(t),jio=r(s3e," \u2014 "),xS=s(s3e,"A",{href:!0});var FOr=n(xS);Dio=r(FOr,"RemBertModel"),FOr.forEach(t),Nio=r(s3e," (RemBERT model)"),s3e.forEach(t),qio=i(C),Xu=s(C,"LI",{});var n3e=n(Xu);aZ=s(n3e,"STRONG",{});var COr=n(aZ);Oio=r(COr,"resnet"),COr.forEach(t),Gio=r(n3e," \u2014 "),kS=s(n3e,"A",{href:!0});var MOr=n(kS);Xio=r(MOr,"ResNetModel"),MOr.forEach(t),Vio=r(n3e," (ResNet model)"),n3e.forEach(t),zio=i(C),Vu=s(C,"LI",{});var l3e=n(Vu);sZ=s(l3e,"STRONG",{});var EOr=n(sZ);Wio=r(EOr,"retribert"),EOr.forEach(t),Qio=r(l3e," \u2014 "),RS=s(l3e,"A",{href:!0});var yOr=n(RS);Hio=r(yOr,"RetriBertModel"),yOr.forEach(t),Uio=r(l3e," (RetriBERT model)"),l3e.forEach(t),Jio=i(C),zu=s(C,"LI",{});var i3e=n(zu);nZ=s(i3e,"STRONG",{});var wOr=n(nZ);Yio=r(wOr,"roberta"),wOr.forEach(t),Kio=r(i3e," \u2014 "),SS=s(i3e,"A",{href:!0});var AOr=n(SS);Zio=r(AOr,"RobertaModel"),AOr.forEach(t),edo=r(i3e," (RoBERTa model)"),i3e.forEach(t),odo=i(C),Wu=s(C,"LI",{});var d3e=n(Wu);lZ=s(d3e,"STRONG",{});var LOr=n(lZ);rdo=r(LOr,"roformer"),LOr.forEach(t),tdo=r(d3e," \u2014 "),PS=s(d3e,"A",{href:!0});var BOr=n(PS);ado=r(BOr,"RoFormerModel"),BOr.forEach(t),sdo=r(d3e," (RoFormer model)"),d3e.forEach(t),ndo=i(C),Qu=s(C,"LI",{});var c3e=n(Qu);iZ=s(c3e,"STRONG",{});var xOr=n(iZ);ldo=r(xOr,"segformer"),xOr.forEach(t),ido=r(c3e," \u2014 "),$S=s(c3e,"A",{href:!0});var kOr=n($S);ddo=r(kOr,"SegformerModel"),kOr.forEach(t),cdo=r(c3e," (SegFormer model)"),c3e.forEach(t),mdo=i(C),Hu=s(C,"LI",{});var m3e=n(Hu);dZ=s(m3e,"STRONG",{});var ROr=n(dZ);fdo=r(ROr,"sew"),ROr.forEach(t),gdo=r(m3e," \u2014 "),IS=s(m3e,"A",{href:!0});var SOr=n(IS);hdo=r(SOr,"SEWModel"),SOr.forEach(t),udo=r(m3e," (SEW model)"),m3e.forEach(t),pdo=i(C),Uu=s(C,"LI",{});var f3e=n(Uu);cZ=s(f3e,"STRONG",{});var POr=n(cZ);_do=r(POr,"sew-d"),POr.forEach(t),bdo=r(f3e," \u2014 "),jS=s(f3e,"A",{href:!0});var $Or=n(jS);vdo=r($Or,"SEWDModel"),$Or.forEach(t),Tdo=r(f3e," (SEW-D model)"),f3e.forEach(t),Fdo=i(C),Ju=s(C,"LI",{});var g3e=n(Ju);mZ=s(g3e,"STRONG",{});var IOr=n(mZ);Cdo=r(IOr,"speech_to_text"),IOr.forEach(t),Mdo=r(g3e," \u2014 "),DS=s(g3e,"A",{href:!0});var jOr=n(DS);Edo=r(jOr,"Speech2TextModel"),jOr.forEach(t),ydo=r(g3e," (Speech2Text model)"),g3e.forEach(t),wdo=i(C),Yu=s(C,"LI",{});var h3e=n(Yu);fZ=s(h3e,"STRONG",{});var DOr=n(fZ);Ado=r(DOr,"splinter"),DOr.forEach(t),Ldo=r(h3e," \u2014 "),NS=s(h3e,"A",{href:!0});var NOr=n(NS);Bdo=r(NOr,"SplinterModel"),NOr.forEach(t),xdo=r(h3e," (Splinter model)"),h3e.forEach(t),kdo=i(C),Ku=s(C,"LI",{});var u3e=n(Ku);gZ=s(u3e,"STRONG",{});var qOr=n(gZ);Rdo=r(qOr,"squeezebert"),qOr.forEach(t),Sdo=r(u3e," \u2014 "),qS=s(u3e,"A",{href:!0});var OOr=n(qS);Pdo=r(OOr,"SqueezeBertModel"),OOr.forEach(t),$do=r(u3e," (SqueezeBERT model)"),u3e.forEach(t),Ido=i(C),Zu=s(C,"LI",{});var p3e=n(Zu);hZ=s(p3e,"STRONG",{});var GOr=n(hZ);jdo=r(GOr,"swin"),GOr.forEach(t),Ddo=r(p3e," \u2014 "),OS=s(p3e,"A",{href:!0});var XOr=n(OS);Ndo=r(XOr,"SwinModel"),XOr.forEach(t),qdo=r(p3e," (Swin model)"),p3e.forEach(t),Odo=i(C),ep=s(C,"LI",{});var _3e=n(ep);uZ=s(_3e,"STRONG",{});var VOr=n(uZ);Gdo=r(VOr,"t5"),VOr.forEach(t),Xdo=r(_3e," \u2014 "),GS=s(_3e,"A",{href:!0});var zOr=n(GS);Vdo=r(zOr,"T5Model"),zOr.forEach(t),zdo=r(_3e," (T5 model)"),_3e.forEach(t),Wdo=i(C),op=s(C,"LI",{});var b3e=n(op);pZ=s(b3e,"STRONG",{});var WOr=n(pZ);Qdo=r(WOr,"tapas"),WOr.forEach(t),Hdo=r(b3e," \u2014 "),XS=s(b3e,"A",{href:!0});var QOr=n(XS);Udo=r(QOr,"TapasModel"),QOr.forEach(t),Jdo=r(b3e," (TAPAS model)"),b3e.forEach(t),Ydo=i(C),rp=s(C,"LI",{});var v3e=n(rp);_Z=s(v3e,"STRONG",{});var HOr=n(_Z);Kdo=r(HOr,"transfo-xl"),HOr.forEach(t),Zdo=r(v3e," \u2014 "),VS=s(v3e,"A",{href:!0});var UOr=n(VS);eco=r(UOr,"TransfoXLModel"),UOr.forEach(t),oco=r(v3e," (Transformer-XL model)"),v3e.forEach(t),rco=i(C),tp=s(C,"LI",{});var T3e=n(tp);bZ=s(T3e,"STRONG",{});var JOr=n(bZ);tco=r(JOr,"unispeech"),JOr.forEach(t),aco=r(T3e," \u2014 "),zS=s(T3e,"A",{href:!0});var YOr=n(zS);sco=r(YOr,"UniSpeechModel"),YOr.forEach(t),nco=r(T3e," (UniSpeech model)"),T3e.forEach(t),lco=i(C),ap=s(C,"LI",{});var F3e=n(ap);vZ=s(F3e,"STRONG",{});var KOr=n(vZ);ico=r(KOr,"unispeech-sat"),KOr.forEach(t),dco=r(F3e," \u2014 "),WS=s(F3e,"A",{href:!0});var ZOr=n(WS);cco=r(ZOr,"UniSpeechSatModel"),ZOr.forEach(t),mco=r(F3e," (UniSpeechSat model)"),F3e.forEach(t),fco=i(C),sp=s(C,"LI",{});var C3e=n(sp);TZ=s(C3e,"STRONG",{});var eGr=n(TZ);gco=r(eGr,"vilt"),eGr.forEach(t),hco=r(C3e," \u2014 "),QS=s(C3e,"A",{href:!0});var oGr=n(QS);uco=r(oGr,"ViltModel"),oGr.forEach(t),pco=r(C3e," (ViLT model)"),C3e.forEach(t),_co=i(C),np=s(C,"LI",{});var M3e=n(np);FZ=s(M3e,"STRONG",{});var rGr=n(FZ);bco=r(rGr,"vision-text-dual-encoder"),rGr.forEach(t),vco=r(M3e," \u2014 "),HS=s(M3e,"A",{href:!0});var tGr=n(HS);Tco=r(tGr,"VisionTextDualEncoderModel"),tGr.forEach(t),Fco=r(M3e," (VisionTextDualEncoder model)"),M3e.forEach(t),Cco=i(C),lp=s(C,"LI",{});var E3e=n(lp);CZ=s(E3e,"STRONG",{});var aGr=n(CZ);Mco=r(aGr,"visual_bert"),aGr.forEach(t),Eco=r(E3e," \u2014 "),US=s(E3e,"A",{href:!0});var sGr=n(US);yco=r(sGr,"VisualBertModel"),sGr.forEach(t),wco=r(E3e," (VisualBert model)"),E3e.forEach(t),Aco=i(C),ip=s(C,"LI",{});var y3e=n(ip);MZ=s(y3e,"STRONG",{});var nGr=n(MZ);Lco=r(nGr,"vit"),nGr.forEach(t),Bco=r(y3e," \u2014 "),JS=s(y3e,"A",{href:!0});var lGr=n(JS);xco=r(lGr,"ViTModel"),lGr.forEach(t),kco=r(y3e," (ViT model)"),y3e.forEach(t),Rco=i(C),dp=s(C,"LI",{});var w3e=n(dp);EZ=s(w3e,"STRONG",{});var iGr=n(EZ);Sco=r(iGr,"vit_mae"),iGr.forEach(t),Pco=r(w3e," \u2014 "),YS=s(w3e,"A",{href:!0});var dGr=n(YS);$co=r(dGr,"ViTMAEModel"),dGr.forEach(t),Ico=r(w3e," (ViTMAE model)"),w3e.forEach(t),jco=i(C),cp=s(C,"LI",{});var A3e=n(cp);yZ=s(A3e,"STRONG",{});var cGr=n(yZ);Dco=r(cGr,"wav2vec2"),cGr.forEach(t),Nco=r(A3e," \u2014 "),KS=s(A3e,"A",{href:!0});var mGr=n(KS);qco=r(mGr,"Wav2Vec2Model"),mGr.forEach(t),Oco=r(A3e," (Wav2Vec2 model)"),A3e.forEach(t),Gco=i(C),mp=s(C,"LI",{});var L3e=n(mp);wZ=s(L3e,"STRONG",{});var fGr=n(wZ);Xco=r(fGr,"wavlm"),fGr.forEach(t),Vco=r(L3e," \u2014 "),ZS=s(L3e,"A",{href:!0});var gGr=n(ZS);zco=r(gGr,"WavLMModel"),gGr.forEach(t),Wco=r(L3e," (WavLM model)"),L3e.forEach(t),Qco=i(C),fp=s(C,"LI",{});var B3e=n(fp);AZ=s(B3e,"STRONG",{});var hGr=n(AZ);Hco=r(hGr,"xglm"),hGr.forEach(t),Uco=r(B3e," \u2014 "),eP=s(B3e,"A",{href:!0});var uGr=n(eP);Jco=r(uGr,"XGLMModel"),uGr.forEach(t),Yco=r(B3e," (XGLM model)"),B3e.forEach(t),Kco=i(C),gp=s(C,"LI",{});var x3e=n(gp);LZ=s(x3e,"STRONG",{});var pGr=n(LZ);Zco=r(pGr,"xlm"),pGr.forEach(t),emo=r(x3e," \u2014 "),oP=s(x3e,"A",{href:!0});var _Gr=n(oP);omo=r(_Gr,"XLMModel"),_Gr.forEach(t),rmo=r(x3e," (XLM model)"),x3e.forEach(t),tmo=i(C),hp=s(C,"LI",{});var k3e=n(hp);BZ=s(k3e,"STRONG",{});var bGr=n(BZ);amo=r(bGr,"xlm-prophetnet"),bGr.forEach(t),smo=r(k3e," \u2014 "),rP=s(k3e,"A",{href:!0});var vGr=n(rP);nmo=r(vGr,"XLMProphetNetModel"),vGr.forEach(t),lmo=r(k3e," (XLMProphetNet model)"),k3e.forEach(t),imo=i(C),up=s(C,"LI",{});var R3e=n(up);xZ=s(R3e,"STRONG",{});var TGr=n(xZ);dmo=r(TGr,"xlm-roberta"),TGr.forEach(t),cmo=r(R3e," \u2014 "),tP=s(R3e,"A",{href:!0});var FGr=n(tP);mmo=r(FGr,"XLMRobertaModel"),FGr.forEach(t),fmo=r(R3e," (XLM-RoBERTa model)"),R3e.forEach(t),gmo=i(C),pp=s(C,"LI",{});var S3e=n(pp);kZ=s(S3e,"STRONG",{});var CGr=n(kZ);hmo=r(CGr,"xlm-roberta-xl"),CGr.forEach(t),umo=r(S3e," \u2014 "),aP=s(S3e,"A",{href:!0});var MGr=n(aP);pmo=r(MGr,"XLMRobertaXLModel"),MGr.forEach(t),_mo=r(S3e," (XLM-RoBERTa-XL model)"),S3e.forEach(t),bmo=i(C),_p=s(C,"LI",{});var P3e=n(_p);RZ=s(P3e,"STRONG",{});var EGr=n(RZ);vmo=r(EGr,"xlnet"),EGr.forEach(t),Tmo=r(P3e," \u2014 "),sP=s(P3e,"A",{href:!0});var yGr=n(sP);Fmo=r(yGr,"XLNetModel"),yGr.forEach(t),Cmo=r(P3e," (XLNet model)"),P3e.forEach(t),Mmo=i(C),bp=s(C,"LI",{});var $3e=n(bp);SZ=s($3e,"STRONG",{});var wGr=n(SZ);Emo=r(wGr,"yoso"),wGr.forEach(t),ymo=r($3e," \u2014 "),nP=s($3e,"A",{href:!0});var AGr=n(nP);wmo=r(AGr,"YosoModel"),AGr.forEach(t),Amo=r($3e," (YOSO model)"),$3e.forEach(t),C.forEach(t),Lmo=i(qt),vp=s(qt,"P",{});var I3e=n(vp);Bmo=r(I3e,"The model is set in evaluation mode by default using "),PZ=s(I3e,"CODE",{});var LGr=n(PZ);xmo=r(LGr,"model.eval()"),LGr.forEach(t),kmo=r(I3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Z=s(I3e,"CODE",{});var BGr=n($Z);Rmo=r(BGr,"model.train()"),BGr.forEach(t),I3e.forEach(t),Smo=i(qt),IZ=s(qt,"P",{});var xGr=n(IZ);Pmo=r(xGr,"Examples:"),xGr.forEach(t),$mo=i(qt),f(jy.$$.fragment,qt),qt.forEach(t),Wn.forEach(t),jxe=i(c),ed=s(c,"H2",{class:!0});var WRe=n(ed);Tp=s(WRe,"A",{id:!0,class:!0,href:!0});var kGr=n(Tp);jZ=s(kGr,"SPAN",{});var RGr=n(jZ);f(Dy.$$.fragment,RGr),RGr.forEach(t),kGr.forEach(t),Imo=i(WRe),DZ=s(WRe,"SPAN",{});var SGr=n(DZ);jmo=r(SGr,"AutoModelForPreTraining"),SGr.forEach(t),WRe.forEach(t),Dxe=i(c),Yo=s(c,"DIV",{class:!0});var Hn=n(Yo);f(Ny.$$.fragment,Hn),Dmo=i(Hn),od=s(Hn,"P",{});var $z=n(od);Nmo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=s($z,"CODE",{});var PGr=n(NZ);qmo=r(PGr,"from_pretrained()"),PGr.forEach(t),Omo=r($z,"class method or the "),qZ=s($z,"CODE",{});var $Gr=n(qZ);Gmo=r($Gr,"from_config()"),$Gr.forEach(t),Xmo=r($z,`class
method.`),$z.forEach(t),Vmo=i(Hn),qy=s(Hn,"P",{});var QRe=n(qy);zmo=r(QRe,"This class cannot be instantiated directly using "),OZ=s(QRe,"CODE",{});var IGr=n(OZ);Wmo=r(IGr,"__init__()"),IGr.forEach(t),Qmo=r(QRe," (throws an error)."),QRe.forEach(t),Hmo=i(Hn),zr=s(Hn,"DIV",{class:!0});var Un=n(zr);f(Oy.$$.fragment,Un),Umo=i(Un),GZ=s(Un,"P",{});var jGr=n(GZ);Jmo=r(jGr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jGr.forEach(t),Ymo=i(Un),rd=s(Un,"P",{});var Iz=n(rd);Kmo=r(Iz,`Note:
Loading a model from its configuration file does `),XZ=s(Iz,"STRONG",{});var DGr=n(XZ);Zmo=r(DGr,"not"),DGr.forEach(t),efo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=s(Iz,"CODE",{});var NGr=n(VZ);ofo=r(NGr,"from_pretrained()"),NGr.forEach(t),rfo=r(Iz,"to load the model weights."),Iz.forEach(t),tfo=i(Un),zZ=s(Un,"P",{});var qGr=n(zZ);afo=r(qGr,"Examples:"),qGr.forEach(t),sfo=i(Un),f(Gy.$$.fragment,Un),Un.forEach(t),nfo=i(Hn),Ne=s(Hn,"DIV",{class:!0});var Ot=n(Ne);f(Xy.$$.fragment,Ot),lfo=i(Ot),WZ=s(Ot,"P",{});var OGr=n(WZ);ifo=r(OGr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OGr.forEach(t),dfo=i(Ot),za=s(Ot,"P",{});var r5=n(za);cfo=r(r5,"The model class to instantiate is selected based on the "),QZ=s(r5,"CODE",{});var GGr=n(QZ);mfo=r(GGr,"model_type"),GGr.forEach(t),ffo=r(r5,` property of the config object (either
passed as an argument or loaded from `),HZ=s(r5,"CODE",{});var XGr=n(HZ);gfo=r(XGr,"pretrained_model_name_or_path"),XGr.forEach(t),hfo=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UZ=s(r5,"CODE",{});var VGr=n(UZ);ufo=r(VGr,"pretrained_model_name_or_path"),VGr.forEach(t),pfo=r(r5,":"),r5.forEach(t),_fo=i(Ot),k=s(Ot,"UL",{});var S=n(k);Fp=s(S,"LI",{});var j3e=n(Fp);JZ=s(j3e,"STRONG",{});var zGr=n(JZ);bfo=r(zGr,"albert"),zGr.forEach(t),vfo=r(j3e," \u2014 "),lP=s(j3e,"A",{href:!0});var WGr=n(lP);Tfo=r(WGr,"AlbertForPreTraining"),WGr.forEach(t),Ffo=r(j3e," (ALBERT model)"),j3e.forEach(t),Cfo=i(S),Cp=s(S,"LI",{});var D3e=n(Cp);YZ=s(D3e,"STRONG",{});var QGr=n(YZ);Mfo=r(QGr,"bart"),QGr.forEach(t),Efo=r(D3e," \u2014 "),iP=s(D3e,"A",{href:!0});var HGr=n(iP);yfo=r(HGr,"BartForConditionalGeneration"),HGr.forEach(t),wfo=r(D3e," (BART model)"),D3e.forEach(t),Afo=i(S),Mp=s(S,"LI",{});var N3e=n(Mp);KZ=s(N3e,"STRONG",{});var UGr=n(KZ);Lfo=r(UGr,"bert"),UGr.forEach(t),Bfo=r(N3e," \u2014 "),dP=s(N3e,"A",{href:!0});var JGr=n(dP);xfo=r(JGr,"BertForPreTraining"),JGr.forEach(t),kfo=r(N3e," (BERT model)"),N3e.forEach(t),Rfo=i(S),Ep=s(S,"LI",{});var q3e=n(Ep);ZZ=s(q3e,"STRONG",{});var YGr=n(ZZ);Sfo=r(YGr,"big_bird"),YGr.forEach(t),Pfo=r(q3e," \u2014 "),cP=s(q3e,"A",{href:!0});var KGr=n(cP);$fo=r(KGr,"BigBirdForPreTraining"),KGr.forEach(t),Ifo=r(q3e," (BigBird model)"),q3e.forEach(t),jfo=i(S),yp=s(S,"LI",{});var O3e=n(yp);eee=s(O3e,"STRONG",{});var ZGr=n(eee);Dfo=r(ZGr,"camembert"),ZGr.forEach(t),Nfo=r(O3e," \u2014 "),mP=s(O3e,"A",{href:!0});var eXr=n(mP);qfo=r(eXr,"CamembertForMaskedLM"),eXr.forEach(t),Ofo=r(O3e," (CamemBERT model)"),O3e.forEach(t),Gfo=i(S),wp=s(S,"LI",{});var G3e=n(wp);oee=s(G3e,"STRONG",{});var oXr=n(oee);Xfo=r(oXr,"ctrl"),oXr.forEach(t),Vfo=r(G3e," \u2014 "),fP=s(G3e,"A",{href:!0});var rXr=n(fP);zfo=r(rXr,"CTRLLMHeadModel"),rXr.forEach(t),Wfo=r(G3e," (CTRL model)"),G3e.forEach(t),Qfo=i(S),Ap=s(S,"LI",{});var X3e=n(Ap);ree=s(X3e,"STRONG",{});var tXr=n(ree);Hfo=r(tXr,"data2vec-text"),tXr.forEach(t),Ufo=r(X3e," \u2014 "),gP=s(X3e,"A",{href:!0});var aXr=n(gP);Jfo=r(aXr,"Data2VecTextForMaskedLM"),aXr.forEach(t),Yfo=r(X3e," (Data2VecText model)"),X3e.forEach(t),Kfo=i(S),Lp=s(S,"LI",{});var V3e=n(Lp);tee=s(V3e,"STRONG",{});var sXr=n(tee);Zfo=r(sXr,"deberta"),sXr.forEach(t),ego=r(V3e," \u2014 "),hP=s(V3e,"A",{href:!0});var nXr=n(hP);ogo=r(nXr,"DebertaForMaskedLM"),nXr.forEach(t),rgo=r(V3e," (DeBERTa model)"),V3e.forEach(t),tgo=i(S),Bp=s(S,"LI",{});var z3e=n(Bp);aee=s(z3e,"STRONG",{});var lXr=n(aee);ago=r(lXr,"deberta-v2"),lXr.forEach(t),sgo=r(z3e," \u2014 "),uP=s(z3e,"A",{href:!0});var iXr=n(uP);ngo=r(iXr,"DebertaV2ForMaskedLM"),iXr.forEach(t),lgo=r(z3e," (DeBERTa-v2 model)"),z3e.forEach(t),igo=i(S),xp=s(S,"LI",{});var W3e=n(xp);see=s(W3e,"STRONG",{});var dXr=n(see);dgo=r(dXr,"distilbert"),dXr.forEach(t),cgo=r(W3e," \u2014 "),pP=s(W3e,"A",{href:!0});var cXr=n(pP);mgo=r(cXr,"DistilBertForMaskedLM"),cXr.forEach(t),fgo=r(W3e," (DistilBERT model)"),W3e.forEach(t),ggo=i(S),kp=s(S,"LI",{});var Q3e=n(kp);nee=s(Q3e,"STRONG",{});var mXr=n(nee);hgo=r(mXr,"electra"),mXr.forEach(t),ugo=r(Q3e," \u2014 "),_P=s(Q3e,"A",{href:!0});var fXr=n(_P);pgo=r(fXr,"ElectraForPreTraining"),fXr.forEach(t),_go=r(Q3e," (ELECTRA model)"),Q3e.forEach(t),bgo=i(S),Rp=s(S,"LI",{});var H3e=n(Rp);lee=s(H3e,"STRONG",{});var gXr=n(lee);vgo=r(gXr,"flaubert"),gXr.forEach(t),Tgo=r(H3e," \u2014 "),bP=s(H3e,"A",{href:!0});var hXr=n(bP);Fgo=r(hXr,"FlaubertWithLMHeadModel"),hXr.forEach(t),Cgo=r(H3e," (FlauBERT model)"),H3e.forEach(t),Mgo=i(S),Sp=s(S,"LI",{});var U3e=n(Sp);iee=s(U3e,"STRONG",{});var uXr=n(iee);Ego=r(uXr,"fnet"),uXr.forEach(t),ygo=r(U3e," \u2014 "),vP=s(U3e,"A",{href:!0});var pXr=n(vP);wgo=r(pXr,"FNetForPreTraining"),pXr.forEach(t),Ago=r(U3e," (FNet model)"),U3e.forEach(t),Lgo=i(S),Pp=s(S,"LI",{});var J3e=n(Pp);dee=s(J3e,"STRONG",{});var _Xr=n(dee);Bgo=r(_Xr,"fsmt"),_Xr.forEach(t),xgo=r(J3e," \u2014 "),TP=s(J3e,"A",{href:!0});var bXr=n(TP);kgo=r(bXr,"FSMTForConditionalGeneration"),bXr.forEach(t),Rgo=r(J3e," (FairSeq Machine-Translation model)"),J3e.forEach(t),Sgo=i(S),$p=s(S,"LI",{});var Y3e=n($p);cee=s(Y3e,"STRONG",{});var vXr=n(cee);Pgo=r(vXr,"funnel"),vXr.forEach(t),$go=r(Y3e," \u2014 "),FP=s(Y3e,"A",{href:!0});var TXr=n(FP);Igo=r(TXr,"FunnelForPreTraining"),TXr.forEach(t),jgo=r(Y3e," (Funnel Transformer model)"),Y3e.forEach(t),Dgo=i(S),Ip=s(S,"LI",{});var K3e=n(Ip);mee=s(K3e,"STRONG",{});var FXr=n(mee);Ngo=r(FXr,"gpt2"),FXr.forEach(t),qgo=r(K3e," \u2014 "),CP=s(K3e,"A",{href:!0});var CXr=n(CP);Ogo=r(CXr,"GPT2LMHeadModel"),CXr.forEach(t),Ggo=r(K3e," (OpenAI GPT-2 model)"),K3e.forEach(t),Xgo=i(S),jp=s(S,"LI",{});var Z3e=n(jp);fee=s(Z3e,"STRONG",{});var MXr=n(fee);Vgo=r(MXr,"ibert"),MXr.forEach(t),zgo=r(Z3e," \u2014 "),MP=s(Z3e,"A",{href:!0});var EXr=n(MP);Wgo=r(EXr,"IBertForMaskedLM"),EXr.forEach(t),Qgo=r(Z3e," (I-BERT model)"),Z3e.forEach(t),Hgo=i(S),Dp=s(S,"LI",{});var e5e=n(Dp);gee=s(e5e,"STRONG",{});var yXr=n(gee);Ugo=r(yXr,"layoutlm"),yXr.forEach(t),Jgo=r(e5e," \u2014 "),EP=s(e5e,"A",{href:!0});var wXr=n(EP);Ygo=r(wXr,"LayoutLMForMaskedLM"),wXr.forEach(t),Kgo=r(e5e," (LayoutLM model)"),e5e.forEach(t),Zgo=i(S),Np=s(S,"LI",{});var o5e=n(Np);hee=s(o5e,"STRONG",{});var AXr=n(hee);eho=r(AXr,"longformer"),AXr.forEach(t),oho=r(o5e," \u2014 "),yP=s(o5e,"A",{href:!0});var LXr=n(yP);rho=r(LXr,"LongformerForMaskedLM"),LXr.forEach(t),tho=r(o5e," (Longformer model)"),o5e.forEach(t),aho=i(S),qp=s(S,"LI",{});var r5e=n(qp);uee=s(r5e,"STRONG",{});var BXr=n(uee);sho=r(BXr,"lxmert"),BXr.forEach(t),nho=r(r5e," \u2014 "),wP=s(r5e,"A",{href:!0});var xXr=n(wP);lho=r(xXr,"LxmertForPreTraining"),xXr.forEach(t),iho=r(r5e," (LXMERT model)"),r5e.forEach(t),dho=i(S),Op=s(S,"LI",{});var t5e=n(Op);pee=s(t5e,"STRONG",{});var kXr=n(pee);cho=r(kXr,"megatron-bert"),kXr.forEach(t),mho=r(t5e," \u2014 "),AP=s(t5e,"A",{href:!0});var RXr=n(AP);fho=r(RXr,"MegatronBertForPreTraining"),RXr.forEach(t),gho=r(t5e," (MegatronBert model)"),t5e.forEach(t),hho=i(S),Gp=s(S,"LI",{});var a5e=n(Gp);_ee=s(a5e,"STRONG",{});var SXr=n(_ee);uho=r(SXr,"mobilebert"),SXr.forEach(t),pho=r(a5e," \u2014 "),LP=s(a5e,"A",{href:!0});var PXr=n(LP);_ho=r(PXr,"MobileBertForPreTraining"),PXr.forEach(t),bho=r(a5e," (MobileBERT model)"),a5e.forEach(t),vho=i(S),Xp=s(S,"LI",{});var s5e=n(Xp);bee=s(s5e,"STRONG",{});var $Xr=n(bee);Tho=r($Xr,"mpnet"),$Xr.forEach(t),Fho=r(s5e," \u2014 "),BP=s(s5e,"A",{href:!0});var IXr=n(BP);Cho=r(IXr,"MPNetForMaskedLM"),IXr.forEach(t),Mho=r(s5e," (MPNet model)"),s5e.forEach(t),Eho=i(S),Vp=s(S,"LI",{});var n5e=n(Vp);vee=s(n5e,"STRONG",{});var jXr=n(vee);yho=r(jXr,"openai-gpt"),jXr.forEach(t),who=r(n5e," \u2014 "),xP=s(n5e,"A",{href:!0});var DXr=n(xP);Aho=r(DXr,"OpenAIGPTLMHeadModel"),DXr.forEach(t),Lho=r(n5e," (OpenAI GPT model)"),n5e.forEach(t),Bho=i(S),zp=s(S,"LI",{});var l5e=n(zp);Tee=s(l5e,"STRONG",{});var NXr=n(Tee);xho=r(NXr,"retribert"),NXr.forEach(t),kho=r(l5e," \u2014 "),kP=s(l5e,"A",{href:!0});var qXr=n(kP);Rho=r(qXr,"RetriBertModel"),qXr.forEach(t),Sho=r(l5e," (RetriBERT model)"),l5e.forEach(t),Pho=i(S),Wp=s(S,"LI",{});var i5e=n(Wp);Fee=s(i5e,"STRONG",{});var OXr=n(Fee);$ho=r(OXr,"roberta"),OXr.forEach(t),Iho=r(i5e," \u2014 "),RP=s(i5e,"A",{href:!0});var GXr=n(RP);jho=r(GXr,"RobertaForMaskedLM"),GXr.forEach(t),Dho=r(i5e," (RoBERTa model)"),i5e.forEach(t),Nho=i(S),Qp=s(S,"LI",{});var d5e=n(Qp);Cee=s(d5e,"STRONG",{});var XXr=n(Cee);qho=r(XXr,"squeezebert"),XXr.forEach(t),Oho=r(d5e," \u2014 "),SP=s(d5e,"A",{href:!0});var VXr=n(SP);Gho=r(VXr,"SqueezeBertForMaskedLM"),VXr.forEach(t),Xho=r(d5e," (SqueezeBERT model)"),d5e.forEach(t),Vho=i(S),Hp=s(S,"LI",{});var c5e=n(Hp);Mee=s(c5e,"STRONG",{});var zXr=n(Mee);zho=r(zXr,"t5"),zXr.forEach(t),Who=r(c5e," \u2014 "),PP=s(c5e,"A",{href:!0});var WXr=n(PP);Qho=r(WXr,"T5ForConditionalGeneration"),WXr.forEach(t),Hho=r(c5e," (T5 model)"),c5e.forEach(t),Uho=i(S),Up=s(S,"LI",{});var m5e=n(Up);Eee=s(m5e,"STRONG",{});var QXr=n(Eee);Jho=r(QXr,"tapas"),QXr.forEach(t),Yho=r(m5e," \u2014 "),$P=s(m5e,"A",{href:!0});var HXr=n($P);Kho=r(HXr,"TapasForMaskedLM"),HXr.forEach(t),Zho=r(m5e," (TAPAS model)"),m5e.forEach(t),euo=i(S),Jp=s(S,"LI",{});var f5e=n(Jp);yee=s(f5e,"STRONG",{});var UXr=n(yee);ouo=r(UXr,"transfo-xl"),UXr.forEach(t),ruo=r(f5e," \u2014 "),IP=s(f5e,"A",{href:!0});var JXr=n(IP);tuo=r(JXr,"TransfoXLLMHeadModel"),JXr.forEach(t),auo=r(f5e," (Transformer-XL model)"),f5e.forEach(t),suo=i(S),Yp=s(S,"LI",{});var g5e=n(Yp);wee=s(g5e,"STRONG",{});var YXr=n(wee);nuo=r(YXr,"unispeech"),YXr.forEach(t),luo=r(g5e," \u2014 "),jP=s(g5e,"A",{href:!0});var KXr=n(jP);iuo=r(KXr,"UniSpeechForPreTraining"),KXr.forEach(t),duo=r(g5e," (UniSpeech model)"),g5e.forEach(t),cuo=i(S),Kp=s(S,"LI",{});var h5e=n(Kp);Aee=s(h5e,"STRONG",{});var ZXr=n(Aee);muo=r(ZXr,"unispeech-sat"),ZXr.forEach(t),fuo=r(h5e," \u2014 "),DP=s(h5e,"A",{href:!0});var eVr=n(DP);guo=r(eVr,"UniSpeechSatForPreTraining"),eVr.forEach(t),huo=r(h5e," (UniSpeechSat model)"),h5e.forEach(t),uuo=i(S),Zp=s(S,"LI",{});var u5e=n(Zp);Lee=s(u5e,"STRONG",{});var oVr=n(Lee);puo=r(oVr,"visual_bert"),oVr.forEach(t),_uo=r(u5e," \u2014 "),NP=s(u5e,"A",{href:!0});var rVr=n(NP);buo=r(rVr,"VisualBertForPreTraining"),rVr.forEach(t),vuo=r(u5e," (VisualBert model)"),u5e.forEach(t),Tuo=i(S),e_=s(S,"LI",{});var p5e=n(e_);Bee=s(p5e,"STRONG",{});var tVr=n(Bee);Fuo=r(tVr,"vit_mae"),tVr.forEach(t),Cuo=r(p5e," \u2014 "),qP=s(p5e,"A",{href:!0});var aVr=n(qP);Muo=r(aVr,"ViTMAEForPreTraining"),aVr.forEach(t),Euo=r(p5e," (ViTMAE model)"),p5e.forEach(t),yuo=i(S),o_=s(S,"LI",{});var _5e=n(o_);xee=s(_5e,"STRONG",{});var sVr=n(xee);wuo=r(sVr,"wav2vec2"),sVr.forEach(t),Auo=r(_5e," \u2014 "),OP=s(_5e,"A",{href:!0});var nVr=n(OP);Luo=r(nVr,"Wav2Vec2ForPreTraining"),nVr.forEach(t),Buo=r(_5e," (Wav2Vec2 model)"),_5e.forEach(t),xuo=i(S),r_=s(S,"LI",{});var b5e=n(r_);kee=s(b5e,"STRONG",{});var lVr=n(kee);kuo=r(lVr,"xlm"),lVr.forEach(t),Ruo=r(b5e," \u2014 "),GP=s(b5e,"A",{href:!0});var iVr=n(GP);Suo=r(iVr,"XLMWithLMHeadModel"),iVr.forEach(t),Puo=r(b5e," (XLM model)"),b5e.forEach(t),$uo=i(S),t_=s(S,"LI",{});var v5e=n(t_);Ree=s(v5e,"STRONG",{});var dVr=n(Ree);Iuo=r(dVr,"xlm-roberta"),dVr.forEach(t),juo=r(v5e," \u2014 "),XP=s(v5e,"A",{href:!0});var cVr=n(XP);Duo=r(cVr,"XLMRobertaForMaskedLM"),cVr.forEach(t),Nuo=r(v5e," (XLM-RoBERTa model)"),v5e.forEach(t),quo=i(S),a_=s(S,"LI",{});var T5e=n(a_);See=s(T5e,"STRONG",{});var mVr=n(See);Ouo=r(mVr,"xlm-roberta-xl"),mVr.forEach(t),Guo=r(T5e," \u2014 "),VP=s(T5e,"A",{href:!0});var fVr=n(VP);Xuo=r(fVr,"XLMRobertaXLForMaskedLM"),fVr.forEach(t),Vuo=r(T5e," (XLM-RoBERTa-XL model)"),T5e.forEach(t),zuo=i(S),s_=s(S,"LI",{});var F5e=n(s_);Pee=s(F5e,"STRONG",{});var gVr=n(Pee);Wuo=r(gVr,"xlnet"),gVr.forEach(t),Quo=r(F5e," \u2014 "),zP=s(F5e,"A",{href:!0});var hVr=n(zP);Huo=r(hVr,"XLNetLMHeadModel"),hVr.forEach(t),Uuo=r(F5e," (XLNet model)"),F5e.forEach(t),S.forEach(t),Juo=i(Ot),n_=s(Ot,"P",{});var C5e=n(n_);Yuo=r(C5e,"The model is set in evaluation mode by default using "),$ee=s(C5e,"CODE",{});var uVr=n($ee);Kuo=r(uVr,"model.eval()"),uVr.forEach(t),Zuo=r(C5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iee=s(C5e,"CODE",{});var pVr=n(Iee);epo=r(pVr,"model.train()"),pVr.forEach(t),C5e.forEach(t),opo=i(Ot),jee=s(Ot,"P",{});var _Vr=n(jee);rpo=r(_Vr,"Examples:"),_Vr.forEach(t),tpo=i(Ot),f(Vy.$$.fragment,Ot),Ot.forEach(t),Hn.forEach(t),Nxe=i(c),td=s(c,"H2",{class:!0});var HRe=n(td);l_=s(HRe,"A",{id:!0,class:!0,href:!0});var bVr=n(l_);Dee=s(bVr,"SPAN",{});var vVr=n(Dee);f(zy.$$.fragment,vVr),vVr.forEach(t),bVr.forEach(t),apo=i(HRe),Nee=s(HRe,"SPAN",{});var TVr=n(Nee);spo=r(TVr,"AutoModelForCausalLM"),TVr.forEach(t),HRe.forEach(t),qxe=i(c),Ko=s(c,"DIV",{class:!0});var Jn=n(Ko);f(Wy.$$.fragment,Jn),npo=i(Jn),ad=s(Jn,"P",{});var jz=n(ad);lpo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qee=s(jz,"CODE",{});var FVr=n(qee);ipo=r(FVr,"from_pretrained()"),FVr.forEach(t),dpo=r(jz,"class method or the "),Oee=s(jz,"CODE",{});var CVr=n(Oee);cpo=r(CVr,"from_config()"),CVr.forEach(t),mpo=r(jz,`class
method.`),jz.forEach(t),fpo=i(Jn),Qy=s(Jn,"P",{});var URe=n(Qy);gpo=r(URe,"This class cannot be instantiated directly using "),Gee=s(URe,"CODE",{});var MVr=n(Gee);hpo=r(MVr,"__init__()"),MVr.forEach(t),upo=r(URe," (throws an error)."),URe.forEach(t),ppo=i(Jn),Wr=s(Jn,"DIV",{class:!0});var Yn=n(Wr);f(Hy.$$.fragment,Yn),_po=i(Yn),Xee=s(Yn,"P",{});var EVr=n(Xee);bpo=r(EVr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EVr.forEach(t),vpo=i(Yn),sd=s(Yn,"P",{});var Dz=n(sd);Tpo=r(Dz,`Note:
Loading a model from its configuration file does `),Vee=s(Dz,"STRONG",{});var yVr=n(Vee);Fpo=r(yVr,"not"),yVr.forEach(t),Cpo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=s(Dz,"CODE",{});var wVr=n(zee);Mpo=r(wVr,"from_pretrained()"),wVr.forEach(t),Epo=r(Dz,"to load the model weights."),Dz.forEach(t),ypo=i(Yn),Wee=s(Yn,"P",{});var AVr=n(Wee);wpo=r(AVr,"Examples:"),AVr.forEach(t),Apo=i(Yn),f(Uy.$$.fragment,Yn),Yn.forEach(t),Lpo=i(Jn),qe=s(Jn,"DIV",{class:!0});var Gt=n(qe);f(Jy.$$.fragment,Gt),Bpo=i(Gt),Qee=s(Gt,"P",{});var LVr=n(Qee);xpo=r(LVr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),LVr.forEach(t),kpo=i(Gt),Wa=s(Gt,"P",{});var t5=n(Wa);Rpo=r(t5,"The model class to instantiate is selected based on the "),Hee=s(t5,"CODE",{});var BVr=n(Hee);Spo=r(BVr,"model_type"),BVr.forEach(t),Ppo=r(t5,` property of the config object (either
passed as an argument or loaded from `),Uee=s(t5,"CODE",{});var xVr=n(Uee);$po=r(xVr,"pretrained_model_name_or_path"),xVr.forEach(t),Ipo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jee=s(t5,"CODE",{});var kVr=n(Jee);jpo=r(kVr,"pretrained_model_name_or_path"),kVr.forEach(t),Dpo=r(t5,":"),t5.forEach(t),Npo=i(Gt),$=s(Gt,"UL",{});var j=n($);i_=s(j,"LI",{});var M5e=n(i_);Yee=s(M5e,"STRONG",{});var RVr=n(Yee);qpo=r(RVr,"bart"),RVr.forEach(t),Opo=r(M5e," \u2014 "),WP=s(M5e,"A",{href:!0});var SVr=n(WP);Gpo=r(SVr,"BartForCausalLM"),SVr.forEach(t),Xpo=r(M5e," (BART model)"),M5e.forEach(t),Vpo=i(j),d_=s(j,"LI",{});var E5e=n(d_);Kee=s(E5e,"STRONG",{});var PVr=n(Kee);zpo=r(PVr,"bert"),PVr.forEach(t),Wpo=r(E5e," \u2014 "),QP=s(E5e,"A",{href:!0});var $Vr=n(QP);Qpo=r($Vr,"BertLMHeadModel"),$Vr.forEach(t),Hpo=r(E5e," (BERT model)"),E5e.forEach(t),Upo=i(j),c_=s(j,"LI",{});var y5e=n(c_);Zee=s(y5e,"STRONG",{});var IVr=n(Zee);Jpo=r(IVr,"bert-generation"),IVr.forEach(t),Ypo=r(y5e," \u2014 "),HP=s(y5e,"A",{href:!0});var jVr=n(HP);Kpo=r(jVr,"BertGenerationDecoder"),jVr.forEach(t),Zpo=r(y5e," (Bert Generation model)"),y5e.forEach(t),e_o=i(j),m_=s(j,"LI",{});var w5e=n(m_);eoe=s(w5e,"STRONG",{});var DVr=n(eoe);o_o=r(DVr,"big_bird"),DVr.forEach(t),r_o=r(w5e," \u2014 "),UP=s(w5e,"A",{href:!0});var NVr=n(UP);t_o=r(NVr,"BigBirdForCausalLM"),NVr.forEach(t),a_o=r(w5e," (BigBird model)"),w5e.forEach(t),s_o=i(j),f_=s(j,"LI",{});var A5e=n(f_);ooe=s(A5e,"STRONG",{});var qVr=n(ooe);n_o=r(qVr,"bigbird_pegasus"),qVr.forEach(t),l_o=r(A5e," \u2014 "),JP=s(A5e,"A",{href:!0});var OVr=n(JP);i_o=r(OVr,"BigBirdPegasusForCausalLM"),OVr.forEach(t),d_o=r(A5e," (BigBirdPegasus model)"),A5e.forEach(t),c_o=i(j),g_=s(j,"LI",{});var L5e=n(g_);roe=s(L5e,"STRONG",{});var GVr=n(roe);m_o=r(GVr,"blenderbot"),GVr.forEach(t),f_o=r(L5e," \u2014 "),YP=s(L5e,"A",{href:!0});var XVr=n(YP);g_o=r(XVr,"BlenderbotForCausalLM"),XVr.forEach(t),h_o=r(L5e," (Blenderbot model)"),L5e.forEach(t),u_o=i(j),h_=s(j,"LI",{});var B5e=n(h_);toe=s(B5e,"STRONG",{});var VVr=n(toe);p_o=r(VVr,"blenderbot-small"),VVr.forEach(t),__o=r(B5e," \u2014 "),KP=s(B5e,"A",{href:!0});var zVr=n(KP);b_o=r(zVr,"BlenderbotSmallForCausalLM"),zVr.forEach(t),v_o=r(B5e," (BlenderbotSmall model)"),B5e.forEach(t),T_o=i(j),u_=s(j,"LI",{});var x5e=n(u_);aoe=s(x5e,"STRONG",{});var WVr=n(aoe);F_o=r(WVr,"camembert"),WVr.forEach(t),C_o=r(x5e," \u2014 "),ZP=s(x5e,"A",{href:!0});var QVr=n(ZP);M_o=r(QVr,"CamembertForCausalLM"),QVr.forEach(t),E_o=r(x5e," (CamemBERT model)"),x5e.forEach(t),y_o=i(j),p_=s(j,"LI",{});var k5e=n(p_);soe=s(k5e,"STRONG",{});var HVr=n(soe);w_o=r(HVr,"ctrl"),HVr.forEach(t),A_o=r(k5e," \u2014 "),e$=s(k5e,"A",{href:!0});var UVr=n(e$);L_o=r(UVr,"CTRLLMHeadModel"),UVr.forEach(t),B_o=r(k5e," (CTRL model)"),k5e.forEach(t),x_o=i(j),__=s(j,"LI",{});var R5e=n(__);noe=s(R5e,"STRONG",{});var JVr=n(noe);k_o=r(JVr,"data2vec-text"),JVr.forEach(t),R_o=r(R5e," \u2014 "),o$=s(R5e,"A",{href:!0});var YVr=n(o$);S_o=r(YVr,"Data2VecTextForCausalLM"),YVr.forEach(t),P_o=r(R5e," (Data2VecText model)"),R5e.forEach(t),$_o=i(j),b_=s(j,"LI",{});var S5e=n(b_);loe=s(S5e,"STRONG",{});var KVr=n(loe);I_o=r(KVr,"electra"),KVr.forEach(t),j_o=r(S5e," \u2014 "),r$=s(S5e,"A",{href:!0});var ZVr=n(r$);D_o=r(ZVr,"ElectraForCausalLM"),ZVr.forEach(t),N_o=r(S5e," (ELECTRA model)"),S5e.forEach(t),q_o=i(j),v_=s(j,"LI",{});var P5e=n(v_);ioe=s(P5e,"STRONG",{});var ezr=n(ioe);O_o=r(ezr,"gpt2"),ezr.forEach(t),G_o=r(P5e," \u2014 "),t$=s(P5e,"A",{href:!0});var ozr=n(t$);X_o=r(ozr,"GPT2LMHeadModel"),ozr.forEach(t),V_o=r(P5e," (OpenAI GPT-2 model)"),P5e.forEach(t),z_o=i(j),T_=s(j,"LI",{});var $5e=n(T_);doe=s($5e,"STRONG",{});var rzr=n(doe);W_o=r(rzr,"gpt_neo"),rzr.forEach(t),Q_o=r($5e," \u2014 "),a$=s($5e,"A",{href:!0});var tzr=n(a$);H_o=r(tzr,"GPTNeoForCausalLM"),tzr.forEach(t),U_o=r($5e," (GPT Neo model)"),$5e.forEach(t),J_o=i(j),F_=s(j,"LI",{});var I5e=n(F_);coe=s(I5e,"STRONG",{});var azr=n(coe);Y_o=r(azr,"gptj"),azr.forEach(t),K_o=r(I5e," \u2014 "),s$=s(I5e,"A",{href:!0});var szr=n(s$);Z_o=r(szr,"GPTJForCausalLM"),szr.forEach(t),ebo=r(I5e," (GPT-J model)"),I5e.forEach(t),obo=i(j),C_=s(j,"LI",{});var j5e=n(C_);moe=s(j5e,"STRONG",{});var nzr=n(moe);rbo=r(nzr,"marian"),nzr.forEach(t),tbo=r(j5e," \u2014 "),n$=s(j5e,"A",{href:!0});var lzr=n(n$);abo=r(lzr,"MarianForCausalLM"),lzr.forEach(t),sbo=r(j5e," (Marian model)"),j5e.forEach(t),nbo=i(j),M_=s(j,"LI",{});var D5e=n(M_);foe=s(D5e,"STRONG",{});var izr=n(foe);lbo=r(izr,"mbart"),izr.forEach(t),ibo=r(D5e," \u2014 "),l$=s(D5e,"A",{href:!0});var dzr=n(l$);dbo=r(dzr,"MBartForCausalLM"),dzr.forEach(t),cbo=r(D5e," (mBART model)"),D5e.forEach(t),mbo=i(j),E_=s(j,"LI",{});var N5e=n(E_);goe=s(N5e,"STRONG",{});var czr=n(goe);fbo=r(czr,"megatron-bert"),czr.forEach(t),gbo=r(N5e," \u2014 "),i$=s(N5e,"A",{href:!0});var mzr=n(i$);hbo=r(mzr,"MegatronBertForCausalLM"),mzr.forEach(t),ubo=r(N5e," (MegatronBert model)"),N5e.forEach(t),pbo=i(j),y_=s(j,"LI",{});var q5e=n(y_);hoe=s(q5e,"STRONG",{});var fzr=n(hoe);_bo=r(fzr,"openai-gpt"),fzr.forEach(t),bbo=r(q5e," \u2014 "),d$=s(q5e,"A",{href:!0});var gzr=n(d$);vbo=r(gzr,"OpenAIGPTLMHeadModel"),gzr.forEach(t),Tbo=r(q5e," (OpenAI GPT model)"),q5e.forEach(t),Fbo=i(j),w_=s(j,"LI",{});var O5e=n(w_);uoe=s(O5e,"STRONG",{});var hzr=n(uoe);Cbo=r(hzr,"pegasus"),hzr.forEach(t),Mbo=r(O5e," \u2014 "),c$=s(O5e,"A",{href:!0});var uzr=n(c$);Ebo=r(uzr,"PegasusForCausalLM"),uzr.forEach(t),ybo=r(O5e," (Pegasus model)"),O5e.forEach(t),wbo=i(j),A_=s(j,"LI",{});var G5e=n(A_);poe=s(G5e,"STRONG",{});var pzr=n(poe);Abo=r(pzr,"plbart"),pzr.forEach(t),Lbo=r(G5e," \u2014 "),m$=s(G5e,"A",{href:!0});var _zr=n(m$);Bbo=r(_zr,"PLBartForCausalLM"),_zr.forEach(t),xbo=r(G5e," (PLBart model)"),G5e.forEach(t),kbo=i(j),L_=s(j,"LI",{});var X5e=n(L_);_oe=s(X5e,"STRONG",{});var bzr=n(_oe);Rbo=r(bzr,"prophetnet"),bzr.forEach(t),Sbo=r(X5e," \u2014 "),f$=s(X5e,"A",{href:!0});var vzr=n(f$);Pbo=r(vzr,"ProphetNetForCausalLM"),vzr.forEach(t),$bo=r(X5e," (ProphetNet model)"),X5e.forEach(t),Ibo=i(j),B_=s(j,"LI",{});var V5e=n(B_);boe=s(V5e,"STRONG",{});var Tzr=n(boe);jbo=r(Tzr,"qdqbert"),Tzr.forEach(t),Dbo=r(V5e," \u2014 "),g$=s(V5e,"A",{href:!0});var Fzr=n(g$);Nbo=r(Fzr,"QDQBertLMHeadModel"),Fzr.forEach(t),qbo=r(V5e," (QDQBert model)"),V5e.forEach(t),Obo=i(j),x_=s(j,"LI",{});var z5e=n(x_);voe=s(z5e,"STRONG",{});var Czr=n(voe);Gbo=r(Czr,"reformer"),Czr.forEach(t),Xbo=r(z5e," \u2014 "),h$=s(z5e,"A",{href:!0});var Mzr=n(h$);Vbo=r(Mzr,"ReformerModelWithLMHead"),Mzr.forEach(t),zbo=r(z5e," (Reformer model)"),z5e.forEach(t),Wbo=i(j),k_=s(j,"LI",{});var W5e=n(k_);Toe=s(W5e,"STRONG",{});var Ezr=n(Toe);Qbo=r(Ezr,"rembert"),Ezr.forEach(t),Hbo=r(W5e," \u2014 "),u$=s(W5e,"A",{href:!0});var yzr=n(u$);Ubo=r(yzr,"RemBertForCausalLM"),yzr.forEach(t),Jbo=r(W5e," (RemBERT model)"),W5e.forEach(t),Ybo=i(j),R_=s(j,"LI",{});var Q5e=n(R_);Foe=s(Q5e,"STRONG",{});var wzr=n(Foe);Kbo=r(wzr,"roberta"),wzr.forEach(t),Zbo=r(Q5e," \u2014 "),p$=s(Q5e,"A",{href:!0});var Azr=n(p$);e2o=r(Azr,"RobertaForCausalLM"),Azr.forEach(t),o2o=r(Q5e," (RoBERTa model)"),Q5e.forEach(t),r2o=i(j),S_=s(j,"LI",{});var H5e=n(S_);Coe=s(H5e,"STRONG",{});var Lzr=n(Coe);t2o=r(Lzr,"roformer"),Lzr.forEach(t),a2o=r(H5e," \u2014 "),_$=s(H5e,"A",{href:!0});var Bzr=n(_$);s2o=r(Bzr,"RoFormerForCausalLM"),Bzr.forEach(t),n2o=r(H5e," (RoFormer model)"),H5e.forEach(t),l2o=i(j),P_=s(j,"LI",{});var U5e=n(P_);Moe=s(U5e,"STRONG",{});var xzr=n(Moe);i2o=r(xzr,"speech_to_text_2"),xzr.forEach(t),d2o=r(U5e," \u2014 "),b$=s(U5e,"A",{href:!0});var kzr=n(b$);c2o=r(kzr,"Speech2Text2ForCausalLM"),kzr.forEach(t),m2o=r(U5e," (Speech2Text2 model)"),U5e.forEach(t),f2o=i(j),$_=s(j,"LI",{});var J5e=n($_);Eoe=s(J5e,"STRONG",{});var Rzr=n(Eoe);g2o=r(Rzr,"transfo-xl"),Rzr.forEach(t),h2o=r(J5e," \u2014 "),v$=s(J5e,"A",{href:!0});var Szr=n(v$);u2o=r(Szr,"TransfoXLLMHeadModel"),Szr.forEach(t),p2o=r(J5e," (Transformer-XL model)"),J5e.forEach(t),_2o=i(j),I_=s(j,"LI",{});var Y5e=n(I_);yoe=s(Y5e,"STRONG",{});var Pzr=n(yoe);b2o=r(Pzr,"trocr"),Pzr.forEach(t),v2o=r(Y5e," \u2014 "),T$=s(Y5e,"A",{href:!0});var $zr=n(T$);T2o=r($zr,"TrOCRForCausalLM"),$zr.forEach(t),F2o=r(Y5e," (TrOCR model)"),Y5e.forEach(t),C2o=i(j),j_=s(j,"LI",{});var K5e=n(j_);woe=s(K5e,"STRONG",{});var Izr=n(woe);M2o=r(Izr,"xglm"),Izr.forEach(t),E2o=r(K5e," \u2014 "),F$=s(K5e,"A",{href:!0});var jzr=n(F$);y2o=r(jzr,"XGLMForCausalLM"),jzr.forEach(t),w2o=r(K5e," (XGLM model)"),K5e.forEach(t),A2o=i(j),D_=s(j,"LI",{});var Z5e=n(D_);Aoe=s(Z5e,"STRONG",{});var Dzr=n(Aoe);L2o=r(Dzr,"xlm"),Dzr.forEach(t),B2o=r(Z5e," \u2014 "),C$=s(Z5e,"A",{href:!0});var Nzr=n(C$);x2o=r(Nzr,"XLMWithLMHeadModel"),Nzr.forEach(t),k2o=r(Z5e," (XLM model)"),Z5e.forEach(t),R2o=i(j),N_=s(j,"LI",{});var eye=n(N_);Loe=s(eye,"STRONG",{});var qzr=n(Loe);S2o=r(qzr,"xlm-prophetnet"),qzr.forEach(t),P2o=r(eye," \u2014 "),M$=s(eye,"A",{href:!0});var Ozr=n(M$);$2o=r(Ozr,"XLMProphetNetForCausalLM"),Ozr.forEach(t),I2o=r(eye," (XLMProphetNet model)"),eye.forEach(t),j2o=i(j),q_=s(j,"LI",{});var oye=n(q_);Boe=s(oye,"STRONG",{});var Gzr=n(Boe);D2o=r(Gzr,"xlm-roberta"),Gzr.forEach(t),N2o=r(oye," \u2014 "),E$=s(oye,"A",{href:!0});var Xzr=n(E$);q2o=r(Xzr,"XLMRobertaForCausalLM"),Xzr.forEach(t),O2o=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),G2o=i(j),O_=s(j,"LI",{});var rye=n(O_);xoe=s(rye,"STRONG",{});var Vzr=n(xoe);X2o=r(Vzr,"xlm-roberta-xl"),Vzr.forEach(t),V2o=r(rye," \u2014 "),y$=s(rye,"A",{href:!0});var zzr=n(y$);z2o=r(zzr,"XLMRobertaXLForCausalLM"),zzr.forEach(t),W2o=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),Q2o=i(j),G_=s(j,"LI",{});var tye=n(G_);koe=s(tye,"STRONG",{});var Wzr=n(koe);H2o=r(Wzr,"xlnet"),Wzr.forEach(t),U2o=r(tye," \u2014 "),w$=s(tye,"A",{href:!0});var Qzr=n(w$);J2o=r(Qzr,"XLNetLMHeadModel"),Qzr.forEach(t),Y2o=r(tye," (XLNet model)"),tye.forEach(t),j.forEach(t),K2o=i(Gt),X_=s(Gt,"P",{});var aye=n(X_);Z2o=r(aye,"The model is set in evaluation mode by default using "),Roe=s(aye,"CODE",{});var Hzr=n(Roe);evo=r(Hzr,"model.eval()"),Hzr.forEach(t),ovo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Soe=s(aye,"CODE",{});var Uzr=n(Soe);rvo=r(Uzr,"model.train()"),Uzr.forEach(t),aye.forEach(t),tvo=i(Gt),Poe=s(Gt,"P",{});var Jzr=n(Poe);avo=r(Jzr,"Examples:"),Jzr.forEach(t),svo=i(Gt),f(Yy.$$.fragment,Gt),Gt.forEach(t),Jn.forEach(t),Oxe=i(c),nd=s(c,"H2",{class:!0});var JRe=n(nd);V_=s(JRe,"A",{id:!0,class:!0,href:!0});var Yzr=n(V_);$oe=s(Yzr,"SPAN",{});var Kzr=n($oe);f(Ky.$$.fragment,Kzr),Kzr.forEach(t),Yzr.forEach(t),nvo=i(JRe),Ioe=s(JRe,"SPAN",{});var Zzr=n(Ioe);lvo=r(Zzr,"AutoModelForMaskedLM"),Zzr.forEach(t),JRe.forEach(t),Gxe=i(c),Zo=s(c,"DIV",{class:!0});var Kn=n(Zo);f(Zy.$$.fragment,Kn),ivo=i(Kn),ld=s(Kn,"P",{});var Nz=n(ld);dvo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),joe=s(Nz,"CODE",{});var eWr=n(joe);cvo=r(eWr,"from_pretrained()"),eWr.forEach(t),mvo=r(Nz,"class method or the "),Doe=s(Nz,"CODE",{});var oWr=n(Doe);fvo=r(oWr,"from_config()"),oWr.forEach(t),gvo=r(Nz,`class
method.`),Nz.forEach(t),hvo=i(Kn),ew=s(Kn,"P",{});var YRe=n(ew);uvo=r(YRe,"This class cannot be instantiated directly using "),Noe=s(YRe,"CODE",{});var rWr=n(Noe);pvo=r(rWr,"__init__()"),rWr.forEach(t),_vo=r(YRe," (throws an error)."),YRe.forEach(t),bvo=i(Kn),Qr=s(Kn,"DIV",{class:!0});var Zn=n(Qr);f(ow.$$.fragment,Zn),vvo=i(Zn),qoe=s(Zn,"P",{});var tWr=n(qoe);Tvo=r(tWr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tWr.forEach(t),Fvo=i(Zn),id=s(Zn,"P",{});var qz=n(id);Cvo=r(qz,`Note:
Loading a model from its configuration file does `),Ooe=s(qz,"STRONG",{});var aWr=n(Ooe);Mvo=r(aWr,"not"),aWr.forEach(t),Evo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=s(qz,"CODE",{});var sWr=n(Goe);yvo=r(sWr,"from_pretrained()"),sWr.forEach(t),wvo=r(qz,"to load the model weights."),qz.forEach(t),Avo=i(Zn),Xoe=s(Zn,"P",{});var nWr=n(Xoe);Lvo=r(nWr,"Examples:"),nWr.forEach(t),Bvo=i(Zn),f(rw.$$.fragment,Zn),Zn.forEach(t),xvo=i(Kn),Oe=s(Kn,"DIV",{class:!0});var Xt=n(Oe);f(tw.$$.fragment,Xt),kvo=i(Xt),Voe=s(Xt,"P",{});var lWr=n(Voe);Rvo=r(lWr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lWr.forEach(t),Svo=i(Xt),Qa=s(Xt,"P",{});var a5=n(Qa);Pvo=r(a5,"The model class to instantiate is selected based on the "),zoe=s(a5,"CODE",{});var iWr=n(zoe);$vo=r(iWr,"model_type"),iWr.forEach(t),Ivo=r(a5,` property of the config object (either
passed as an argument or loaded from `),Woe=s(a5,"CODE",{});var dWr=n(Woe);jvo=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),Dvo=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qoe=s(a5,"CODE",{});var cWr=n(Qoe);Nvo=r(cWr,"pretrained_model_name_or_path"),cWr.forEach(t),qvo=r(a5,":"),a5.forEach(t),Ovo=i(Xt),I=s(Xt,"UL",{});var D=n(I);z_=s(D,"LI",{});var sye=n(z_);Hoe=s(sye,"STRONG",{});var mWr=n(Hoe);Gvo=r(mWr,"albert"),mWr.forEach(t),Xvo=r(sye," \u2014 "),A$=s(sye,"A",{href:!0});var fWr=n(A$);Vvo=r(fWr,"AlbertForMaskedLM"),fWr.forEach(t),zvo=r(sye," (ALBERT model)"),sye.forEach(t),Wvo=i(D),W_=s(D,"LI",{});var nye=n(W_);Uoe=s(nye,"STRONG",{});var gWr=n(Uoe);Qvo=r(gWr,"bart"),gWr.forEach(t),Hvo=r(nye," \u2014 "),L$=s(nye,"A",{href:!0});var hWr=n(L$);Uvo=r(hWr,"BartForConditionalGeneration"),hWr.forEach(t),Jvo=r(nye," (BART model)"),nye.forEach(t),Yvo=i(D),Q_=s(D,"LI",{});var lye=n(Q_);Joe=s(lye,"STRONG",{});var uWr=n(Joe);Kvo=r(uWr,"bert"),uWr.forEach(t),Zvo=r(lye," \u2014 "),B$=s(lye,"A",{href:!0});var pWr=n(B$);eTo=r(pWr,"BertForMaskedLM"),pWr.forEach(t),oTo=r(lye," (BERT model)"),lye.forEach(t),rTo=i(D),H_=s(D,"LI",{});var iye=n(H_);Yoe=s(iye,"STRONG",{});var _Wr=n(Yoe);tTo=r(_Wr,"big_bird"),_Wr.forEach(t),aTo=r(iye," \u2014 "),x$=s(iye,"A",{href:!0});var bWr=n(x$);sTo=r(bWr,"BigBirdForMaskedLM"),bWr.forEach(t),nTo=r(iye," (BigBird model)"),iye.forEach(t),lTo=i(D),U_=s(D,"LI",{});var dye=n(U_);Koe=s(dye,"STRONG",{});var vWr=n(Koe);iTo=r(vWr,"camembert"),vWr.forEach(t),dTo=r(dye," \u2014 "),k$=s(dye,"A",{href:!0});var TWr=n(k$);cTo=r(TWr,"CamembertForMaskedLM"),TWr.forEach(t),mTo=r(dye," (CamemBERT model)"),dye.forEach(t),fTo=i(D),J_=s(D,"LI",{});var cye=n(J_);Zoe=s(cye,"STRONG",{});var FWr=n(Zoe);gTo=r(FWr,"convbert"),FWr.forEach(t),hTo=r(cye," \u2014 "),R$=s(cye,"A",{href:!0});var CWr=n(R$);uTo=r(CWr,"ConvBertForMaskedLM"),CWr.forEach(t),pTo=r(cye," (ConvBERT model)"),cye.forEach(t),_To=i(D),Y_=s(D,"LI",{});var mye=n(Y_);ere=s(mye,"STRONG",{});var MWr=n(ere);bTo=r(MWr,"data2vec-text"),MWr.forEach(t),vTo=r(mye," \u2014 "),S$=s(mye,"A",{href:!0});var EWr=n(S$);TTo=r(EWr,"Data2VecTextForMaskedLM"),EWr.forEach(t),FTo=r(mye," (Data2VecText model)"),mye.forEach(t),CTo=i(D),K_=s(D,"LI",{});var fye=n(K_);ore=s(fye,"STRONG",{});var yWr=n(ore);MTo=r(yWr,"deberta"),yWr.forEach(t),ETo=r(fye," \u2014 "),P$=s(fye,"A",{href:!0});var wWr=n(P$);yTo=r(wWr,"DebertaForMaskedLM"),wWr.forEach(t),wTo=r(fye," (DeBERTa model)"),fye.forEach(t),ATo=i(D),Z_=s(D,"LI",{});var gye=n(Z_);rre=s(gye,"STRONG",{});var AWr=n(rre);LTo=r(AWr,"deberta-v2"),AWr.forEach(t),BTo=r(gye," \u2014 "),$$=s(gye,"A",{href:!0});var LWr=n($$);xTo=r(LWr,"DebertaV2ForMaskedLM"),LWr.forEach(t),kTo=r(gye," (DeBERTa-v2 model)"),gye.forEach(t),RTo=i(D),eb=s(D,"LI",{});var hye=n(eb);tre=s(hye,"STRONG",{});var BWr=n(tre);STo=r(BWr,"distilbert"),BWr.forEach(t),PTo=r(hye," \u2014 "),I$=s(hye,"A",{href:!0});var xWr=n(I$);$To=r(xWr,"DistilBertForMaskedLM"),xWr.forEach(t),ITo=r(hye," (DistilBERT model)"),hye.forEach(t),jTo=i(D),ob=s(D,"LI",{});var uye=n(ob);are=s(uye,"STRONG",{});var kWr=n(are);DTo=r(kWr,"electra"),kWr.forEach(t),NTo=r(uye," \u2014 "),j$=s(uye,"A",{href:!0});var RWr=n(j$);qTo=r(RWr,"ElectraForMaskedLM"),RWr.forEach(t),OTo=r(uye," (ELECTRA model)"),uye.forEach(t),GTo=i(D),rb=s(D,"LI",{});var pye=n(rb);sre=s(pye,"STRONG",{});var SWr=n(sre);XTo=r(SWr,"flaubert"),SWr.forEach(t),VTo=r(pye," \u2014 "),D$=s(pye,"A",{href:!0});var PWr=n(D$);zTo=r(PWr,"FlaubertWithLMHeadModel"),PWr.forEach(t),WTo=r(pye," (FlauBERT model)"),pye.forEach(t),QTo=i(D),tb=s(D,"LI",{});var _ye=n(tb);nre=s(_ye,"STRONG",{});var $Wr=n(nre);HTo=r($Wr,"fnet"),$Wr.forEach(t),UTo=r(_ye," \u2014 "),N$=s(_ye,"A",{href:!0});var IWr=n(N$);JTo=r(IWr,"FNetForMaskedLM"),IWr.forEach(t),YTo=r(_ye," (FNet model)"),_ye.forEach(t),KTo=i(D),ab=s(D,"LI",{});var bye=n(ab);lre=s(bye,"STRONG",{});var jWr=n(lre);ZTo=r(jWr,"funnel"),jWr.forEach(t),e1o=r(bye," \u2014 "),q$=s(bye,"A",{href:!0});var DWr=n(q$);o1o=r(DWr,"FunnelForMaskedLM"),DWr.forEach(t),r1o=r(bye," (Funnel Transformer model)"),bye.forEach(t),t1o=i(D),sb=s(D,"LI",{});var vye=n(sb);ire=s(vye,"STRONG",{});var NWr=n(ire);a1o=r(NWr,"ibert"),NWr.forEach(t),s1o=r(vye," \u2014 "),O$=s(vye,"A",{href:!0});var qWr=n(O$);n1o=r(qWr,"IBertForMaskedLM"),qWr.forEach(t),l1o=r(vye," (I-BERT model)"),vye.forEach(t),i1o=i(D),nb=s(D,"LI",{});var Tye=n(nb);dre=s(Tye,"STRONG",{});var OWr=n(dre);d1o=r(OWr,"layoutlm"),OWr.forEach(t),c1o=r(Tye," \u2014 "),G$=s(Tye,"A",{href:!0});var GWr=n(G$);m1o=r(GWr,"LayoutLMForMaskedLM"),GWr.forEach(t),f1o=r(Tye," (LayoutLM model)"),Tye.forEach(t),g1o=i(D),lb=s(D,"LI",{});var Fye=n(lb);cre=s(Fye,"STRONG",{});var XWr=n(cre);h1o=r(XWr,"longformer"),XWr.forEach(t),u1o=r(Fye," \u2014 "),X$=s(Fye,"A",{href:!0});var VWr=n(X$);p1o=r(VWr,"LongformerForMaskedLM"),VWr.forEach(t),_1o=r(Fye," (Longformer model)"),Fye.forEach(t),b1o=i(D),ib=s(D,"LI",{});var Cye=n(ib);mre=s(Cye,"STRONG",{});var zWr=n(mre);v1o=r(zWr,"mbart"),zWr.forEach(t),T1o=r(Cye," \u2014 "),V$=s(Cye,"A",{href:!0});var WWr=n(V$);F1o=r(WWr,"MBartForConditionalGeneration"),WWr.forEach(t),C1o=r(Cye," (mBART model)"),Cye.forEach(t),M1o=i(D),db=s(D,"LI",{});var Mye=n(db);fre=s(Mye,"STRONG",{});var QWr=n(fre);E1o=r(QWr,"megatron-bert"),QWr.forEach(t),y1o=r(Mye," \u2014 "),z$=s(Mye,"A",{href:!0});var HWr=n(z$);w1o=r(HWr,"MegatronBertForMaskedLM"),HWr.forEach(t),A1o=r(Mye," (MegatronBert model)"),Mye.forEach(t),L1o=i(D),cb=s(D,"LI",{});var Eye=n(cb);gre=s(Eye,"STRONG",{});var UWr=n(gre);B1o=r(UWr,"mobilebert"),UWr.forEach(t),x1o=r(Eye," \u2014 "),W$=s(Eye,"A",{href:!0});var JWr=n(W$);k1o=r(JWr,"MobileBertForMaskedLM"),JWr.forEach(t),R1o=r(Eye," (MobileBERT model)"),Eye.forEach(t),S1o=i(D),mb=s(D,"LI",{});var yye=n(mb);hre=s(yye,"STRONG",{});var YWr=n(hre);P1o=r(YWr,"mpnet"),YWr.forEach(t),$1o=r(yye," \u2014 "),Q$=s(yye,"A",{href:!0});var KWr=n(Q$);I1o=r(KWr,"MPNetForMaskedLM"),KWr.forEach(t),j1o=r(yye," (MPNet model)"),yye.forEach(t),D1o=i(D),fb=s(D,"LI",{});var wye=n(fb);ure=s(wye,"STRONG",{});var ZWr=n(ure);N1o=r(ZWr,"nystromformer"),ZWr.forEach(t),q1o=r(wye," \u2014 "),H$=s(wye,"A",{href:!0});var eQr=n(H$);O1o=r(eQr,"NystromformerForMaskedLM"),eQr.forEach(t),G1o=r(wye," (Nystromformer model)"),wye.forEach(t),X1o=i(D),gb=s(D,"LI",{});var Aye=n(gb);pre=s(Aye,"STRONG",{});var oQr=n(pre);V1o=r(oQr,"perceiver"),oQr.forEach(t),z1o=r(Aye," \u2014 "),U$=s(Aye,"A",{href:!0});var rQr=n(U$);W1o=r(rQr,"PerceiverForMaskedLM"),rQr.forEach(t),Q1o=r(Aye," (Perceiver model)"),Aye.forEach(t),H1o=i(D),hb=s(D,"LI",{});var Lye=n(hb);_re=s(Lye,"STRONG",{});var tQr=n(_re);U1o=r(tQr,"qdqbert"),tQr.forEach(t),J1o=r(Lye," \u2014 "),J$=s(Lye,"A",{href:!0});var aQr=n(J$);Y1o=r(aQr,"QDQBertForMaskedLM"),aQr.forEach(t),K1o=r(Lye," (QDQBert model)"),Lye.forEach(t),Z1o=i(D),ub=s(D,"LI",{});var Bye=n(ub);bre=s(Bye,"STRONG",{});var sQr=n(bre);eFo=r(sQr,"reformer"),sQr.forEach(t),oFo=r(Bye," \u2014 "),Y$=s(Bye,"A",{href:!0});var nQr=n(Y$);rFo=r(nQr,"ReformerForMaskedLM"),nQr.forEach(t),tFo=r(Bye," (Reformer model)"),Bye.forEach(t),aFo=i(D),pb=s(D,"LI",{});var xye=n(pb);vre=s(xye,"STRONG",{});var lQr=n(vre);sFo=r(lQr,"rembert"),lQr.forEach(t),nFo=r(xye," \u2014 "),K$=s(xye,"A",{href:!0});var iQr=n(K$);lFo=r(iQr,"RemBertForMaskedLM"),iQr.forEach(t),iFo=r(xye," (RemBERT model)"),xye.forEach(t),dFo=i(D),_b=s(D,"LI",{});var kye=n(_b);Tre=s(kye,"STRONG",{});var dQr=n(Tre);cFo=r(dQr,"roberta"),dQr.forEach(t),mFo=r(kye," \u2014 "),Z$=s(kye,"A",{href:!0});var cQr=n(Z$);fFo=r(cQr,"RobertaForMaskedLM"),cQr.forEach(t),gFo=r(kye," (RoBERTa model)"),kye.forEach(t),hFo=i(D),bb=s(D,"LI",{});var Rye=n(bb);Fre=s(Rye,"STRONG",{});var mQr=n(Fre);uFo=r(mQr,"roformer"),mQr.forEach(t),pFo=r(Rye," \u2014 "),eI=s(Rye,"A",{href:!0});var fQr=n(eI);_Fo=r(fQr,"RoFormerForMaskedLM"),fQr.forEach(t),bFo=r(Rye," (RoFormer model)"),Rye.forEach(t),vFo=i(D),vb=s(D,"LI",{});var Sye=n(vb);Cre=s(Sye,"STRONG",{});var gQr=n(Cre);TFo=r(gQr,"squeezebert"),gQr.forEach(t),FFo=r(Sye," \u2014 "),oI=s(Sye,"A",{href:!0});var hQr=n(oI);CFo=r(hQr,"SqueezeBertForMaskedLM"),hQr.forEach(t),MFo=r(Sye," (SqueezeBERT model)"),Sye.forEach(t),EFo=i(D),Tb=s(D,"LI",{});var Pye=n(Tb);Mre=s(Pye,"STRONG",{});var uQr=n(Mre);yFo=r(uQr,"tapas"),uQr.forEach(t),wFo=r(Pye," \u2014 "),rI=s(Pye,"A",{href:!0});var pQr=n(rI);AFo=r(pQr,"TapasForMaskedLM"),pQr.forEach(t),LFo=r(Pye," (TAPAS model)"),Pye.forEach(t),BFo=i(D),Fb=s(D,"LI",{});var $ye=n(Fb);Ere=s($ye,"STRONG",{});var _Qr=n(Ere);xFo=r(_Qr,"wav2vec2"),_Qr.forEach(t),kFo=r($ye," \u2014 "),yre=s($ye,"CODE",{});var bQr=n(yre);RFo=r(bQr,"Wav2Vec2ForMaskedLM"),bQr.forEach(t),SFo=r($ye,"(Wav2Vec2 model)"),$ye.forEach(t),PFo=i(D),Cb=s(D,"LI",{});var Iye=n(Cb);wre=s(Iye,"STRONG",{});var vQr=n(wre);$Fo=r(vQr,"xlm"),vQr.forEach(t),IFo=r(Iye," \u2014 "),tI=s(Iye,"A",{href:!0});var TQr=n(tI);jFo=r(TQr,"XLMWithLMHeadModel"),TQr.forEach(t),DFo=r(Iye," (XLM model)"),Iye.forEach(t),NFo=i(D),Mb=s(D,"LI",{});var jye=n(Mb);Are=s(jye,"STRONG",{});var FQr=n(Are);qFo=r(FQr,"xlm-roberta"),FQr.forEach(t),OFo=r(jye," \u2014 "),aI=s(jye,"A",{href:!0});var CQr=n(aI);GFo=r(CQr,"XLMRobertaForMaskedLM"),CQr.forEach(t),XFo=r(jye," (XLM-RoBERTa model)"),jye.forEach(t),VFo=i(D),Eb=s(D,"LI",{});var Dye=n(Eb);Lre=s(Dye,"STRONG",{});var MQr=n(Lre);zFo=r(MQr,"xlm-roberta-xl"),MQr.forEach(t),WFo=r(Dye," \u2014 "),sI=s(Dye,"A",{href:!0});var EQr=n(sI);QFo=r(EQr,"XLMRobertaXLForMaskedLM"),EQr.forEach(t),HFo=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),UFo=i(D),yb=s(D,"LI",{});var Nye=n(yb);Bre=s(Nye,"STRONG",{});var yQr=n(Bre);JFo=r(yQr,"yoso"),yQr.forEach(t),YFo=r(Nye," \u2014 "),nI=s(Nye,"A",{href:!0});var wQr=n(nI);KFo=r(wQr,"YosoForMaskedLM"),wQr.forEach(t),ZFo=r(Nye," (YOSO model)"),Nye.forEach(t),D.forEach(t),eCo=i(Xt),wb=s(Xt,"P",{});var qye=n(wb);oCo=r(qye,"The model is set in evaluation mode by default using "),xre=s(qye,"CODE",{});var AQr=n(xre);rCo=r(AQr,"model.eval()"),AQr.forEach(t),tCo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kre=s(qye,"CODE",{});var LQr=n(kre);aCo=r(LQr,"model.train()"),LQr.forEach(t),qye.forEach(t),sCo=i(Xt),Rre=s(Xt,"P",{});var BQr=n(Rre);nCo=r(BQr,"Examples:"),BQr.forEach(t),lCo=i(Xt),f(aw.$$.fragment,Xt),Xt.forEach(t),Kn.forEach(t),Xxe=i(c),dd=s(c,"H2",{class:!0});var KRe=n(dd);Ab=s(KRe,"A",{id:!0,class:!0,href:!0});var xQr=n(Ab);Sre=s(xQr,"SPAN",{});var kQr=n(Sre);f(sw.$$.fragment,kQr),kQr.forEach(t),xQr.forEach(t),iCo=i(KRe),Pre=s(KRe,"SPAN",{});var RQr=n(Pre);dCo=r(RQr,"AutoModelForSeq2SeqLM"),RQr.forEach(t),KRe.forEach(t),Vxe=i(c),er=s(c,"DIV",{class:!0});var el=n(er);f(nw.$$.fragment,el),cCo=i(el),cd=s(el,"P",{});var Oz=n(cd);mCo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$re=s(Oz,"CODE",{});var SQr=n($re);fCo=r(SQr,"from_pretrained()"),SQr.forEach(t),gCo=r(Oz,"class method or the "),Ire=s(Oz,"CODE",{});var PQr=n(Ire);hCo=r(PQr,"from_config()"),PQr.forEach(t),uCo=r(Oz,`class
method.`),Oz.forEach(t),pCo=i(el),lw=s(el,"P",{});var ZRe=n(lw);_Co=r(ZRe,"This class cannot be instantiated directly using "),jre=s(ZRe,"CODE",{});var $Qr=n(jre);bCo=r($Qr,"__init__()"),$Qr.forEach(t),vCo=r(ZRe," (throws an error)."),ZRe.forEach(t),TCo=i(el),Hr=s(el,"DIV",{class:!0});var ol=n(Hr);f(iw.$$.fragment,ol),FCo=i(ol),Dre=s(ol,"P",{});var IQr=n(Dre);CCo=r(IQr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IQr.forEach(t),MCo=i(ol),md=s(ol,"P",{});var Gz=n(md);ECo=r(Gz,`Note:
Loading a model from its configuration file does `),Nre=s(Gz,"STRONG",{});var jQr=n(Nre);yCo=r(jQr,"not"),jQr.forEach(t),wCo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=s(Gz,"CODE",{});var DQr=n(qre);ACo=r(DQr,"from_pretrained()"),DQr.forEach(t),LCo=r(Gz,"to load the model weights."),Gz.forEach(t),BCo=i(ol),Ore=s(ol,"P",{});var NQr=n(Ore);xCo=r(NQr,"Examples:"),NQr.forEach(t),kCo=i(ol),f(dw.$$.fragment,ol),ol.forEach(t),RCo=i(el),Ge=s(el,"DIV",{class:!0});var Vt=n(Ge);f(cw.$$.fragment,Vt),SCo=i(Vt),Gre=s(Vt,"P",{});var qQr=n(Gre);PCo=r(qQr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qQr.forEach(t),$Co=i(Vt),Ha=s(Vt,"P",{});var s5=n(Ha);ICo=r(s5,"The model class to instantiate is selected based on the "),Xre=s(s5,"CODE",{});var OQr=n(Xre);jCo=r(OQr,"model_type"),OQr.forEach(t),DCo=r(s5,` property of the config object (either
passed as an argument or loaded from `),Vre=s(s5,"CODE",{});var GQr=n(Vre);NCo=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),qCo=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zre=s(s5,"CODE",{});var XQr=n(zre);OCo=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),GCo=r(s5,":"),s5.forEach(t),XCo=i(Vt),se=s(Vt,"UL",{});var ie=n(se);Lb=s(ie,"LI",{});var Oye=n(Lb);Wre=s(Oye,"STRONG",{});var VQr=n(Wre);VCo=r(VQr,"bart"),VQr.forEach(t),zCo=r(Oye," \u2014 "),lI=s(Oye,"A",{href:!0});var zQr=n(lI);WCo=r(zQr,"BartForConditionalGeneration"),zQr.forEach(t),QCo=r(Oye," (BART model)"),Oye.forEach(t),HCo=i(ie),Bb=s(ie,"LI",{});var Gye=n(Bb);Qre=s(Gye,"STRONG",{});var WQr=n(Qre);UCo=r(WQr,"bigbird_pegasus"),WQr.forEach(t),JCo=r(Gye," \u2014 "),iI=s(Gye,"A",{href:!0});var QQr=n(iI);YCo=r(QQr,"BigBirdPegasusForConditionalGeneration"),QQr.forEach(t),KCo=r(Gye," (BigBirdPegasus model)"),Gye.forEach(t),ZCo=i(ie),xb=s(ie,"LI",{});var Xye=n(xb);Hre=s(Xye,"STRONG",{});var HQr=n(Hre);eMo=r(HQr,"blenderbot"),HQr.forEach(t),oMo=r(Xye," \u2014 "),dI=s(Xye,"A",{href:!0});var UQr=n(dI);rMo=r(UQr,"BlenderbotForConditionalGeneration"),UQr.forEach(t),tMo=r(Xye," (Blenderbot model)"),Xye.forEach(t),aMo=i(ie),kb=s(ie,"LI",{});var Vye=n(kb);Ure=s(Vye,"STRONG",{});var JQr=n(Ure);sMo=r(JQr,"blenderbot-small"),JQr.forEach(t),nMo=r(Vye," \u2014 "),cI=s(Vye,"A",{href:!0});var YQr=n(cI);lMo=r(YQr,"BlenderbotSmallForConditionalGeneration"),YQr.forEach(t),iMo=r(Vye," (BlenderbotSmall model)"),Vye.forEach(t),dMo=i(ie),Rb=s(ie,"LI",{});var zye=n(Rb);Jre=s(zye,"STRONG",{});var KQr=n(Jre);cMo=r(KQr,"encoder-decoder"),KQr.forEach(t),mMo=r(zye," \u2014 "),mI=s(zye,"A",{href:!0});var ZQr=n(mI);fMo=r(ZQr,"EncoderDecoderModel"),ZQr.forEach(t),gMo=r(zye," (Encoder decoder model)"),zye.forEach(t),hMo=i(ie),Sb=s(ie,"LI",{});var Wye=n(Sb);Yre=s(Wye,"STRONG",{});var eHr=n(Yre);uMo=r(eHr,"fsmt"),eHr.forEach(t),pMo=r(Wye," \u2014 "),fI=s(Wye,"A",{href:!0});var oHr=n(fI);_Mo=r(oHr,"FSMTForConditionalGeneration"),oHr.forEach(t),bMo=r(Wye," (FairSeq Machine-Translation model)"),Wye.forEach(t),vMo=i(ie),Pb=s(ie,"LI",{});var Qye=n(Pb);Kre=s(Qye,"STRONG",{});var rHr=n(Kre);TMo=r(rHr,"led"),rHr.forEach(t),FMo=r(Qye," \u2014 "),gI=s(Qye,"A",{href:!0});var tHr=n(gI);CMo=r(tHr,"LEDForConditionalGeneration"),tHr.forEach(t),MMo=r(Qye," (LED model)"),Qye.forEach(t),EMo=i(ie),$b=s(ie,"LI",{});var Hye=n($b);Zre=s(Hye,"STRONG",{});var aHr=n(Zre);yMo=r(aHr,"m2m_100"),aHr.forEach(t),wMo=r(Hye," \u2014 "),hI=s(Hye,"A",{href:!0});var sHr=n(hI);AMo=r(sHr,"M2M100ForConditionalGeneration"),sHr.forEach(t),LMo=r(Hye," (M2M100 model)"),Hye.forEach(t),BMo=i(ie),Ib=s(ie,"LI",{});var Uye=n(Ib);ete=s(Uye,"STRONG",{});var nHr=n(ete);xMo=r(nHr,"marian"),nHr.forEach(t),kMo=r(Uye," \u2014 "),uI=s(Uye,"A",{href:!0});var lHr=n(uI);RMo=r(lHr,"MarianMTModel"),lHr.forEach(t),SMo=r(Uye," (Marian model)"),Uye.forEach(t),PMo=i(ie),jb=s(ie,"LI",{});var Jye=n(jb);ote=s(Jye,"STRONG",{});var iHr=n(ote);$Mo=r(iHr,"mbart"),iHr.forEach(t),IMo=r(Jye," \u2014 "),pI=s(Jye,"A",{href:!0});var dHr=n(pI);jMo=r(dHr,"MBartForConditionalGeneration"),dHr.forEach(t),DMo=r(Jye," (mBART model)"),Jye.forEach(t),NMo=i(ie),Db=s(ie,"LI",{});var Yye=n(Db);rte=s(Yye,"STRONG",{});var cHr=n(rte);qMo=r(cHr,"mt5"),cHr.forEach(t),OMo=r(Yye," \u2014 "),_I=s(Yye,"A",{href:!0});var mHr=n(_I);GMo=r(mHr,"MT5ForConditionalGeneration"),mHr.forEach(t),XMo=r(Yye," (mT5 model)"),Yye.forEach(t),VMo=i(ie),Nb=s(ie,"LI",{});var Kye=n(Nb);tte=s(Kye,"STRONG",{});var fHr=n(tte);zMo=r(fHr,"pegasus"),fHr.forEach(t),WMo=r(Kye," \u2014 "),bI=s(Kye,"A",{href:!0});var gHr=n(bI);QMo=r(gHr,"PegasusForConditionalGeneration"),gHr.forEach(t),HMo=r(Kye," (Pegasus model)"),Kye.forEach(t),UMo=i(ie),qb=s(ie,"LI",{});var Zye=n(qb);ate=s(Zye,"STRONG",{});var hHr=n(ate);JMo=r(hHr,"plbart"),hHr.forEach(t),YMo=r(Zye," \u2014 "),vI=s(Zye,"A",{href:!0});var uHr=n(vI);KMo=r(uHr,"PLBartForConditionalGeneration"),uHr.forEach(t),ZMo=r(Zye," (PLBart model)"),Zye.forEach(t),e4o=i(ie),Ob=s(ie,"LI",{});var ewe=n(Ob);ste=s(ewe,"STRONG",{});var pHr=n(ste);o4o=r(pHr,"prophetnet"),pHr.forEach(t),r4o=r(ewe," \u2014 "),TI=s(ewe,"A",{href:!0});var _Hr=n(TI);t4o=r(_Hr,"ProphetNetForConditionalGeneration"),_Hr.forEach(t),a4o=r(ewe," (ProphetNet model)"),ewe.forEach(t),s4o=i(ie),Gb=s(ie,"LI",{});var owe=n(Gb);nte=s(owe,"STRONG",{});var bHr=n(nte);n4o=r(bHr,"t5"),bHr.forEach(t),l4o=r(owe," \u2014 "),FI=s(owe,"A",{href:!0});var vHr=n(FI);i4o=r(vHr,"T5ForConditionalGeneration"),vHr.forEach(t),d4o=r(owe," (T5 model)"),owe.forEach(t),c4o=i(ie),Xb=s(ie,"LI",{});var rwe=n(Xb);lte=s(rwe,"STRONG",{});var THr=n(lte);m4o=r(THr,"xlm-prophetnet"),THr.forEach(t),f4o=r(rwe," \u2014 "),CI=s(rwe,"A",{href:!0});var FHr=n(CI);g4o=r(FHr,"XLMProphetNetForConditionalGeneration"),FHr.forEach(t),h4o=r(rwe," (XLMProphetNet model)"),rwe.forEach(t),ie.forEach(t),u4o=i(Vt),Vb=s(Vt,"P",{});var twe=n(Vb);p4o=r(twe,"The model is set in evaluation mode by default using "),ite=s(twe,"CODE",{});var CHr=n(ite);_4o=r(CHr,"model.eval()"),CHr.forEach(t),b4o=r(twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=s(twe,"CODE",{});var MHr=n(dte);v4o=r(MHr,"model.train()"),MHr.forEach(t),twe.forEach(t),T4o=i(Vt),cte=s(Vt,"P",{});var EHr=n(cte);F4o=r(EHr,"Examples:"),EHr.forEach(t),C4o=i(Vt),f(mw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),zxe=i(c),fd=s(c,"H2",{class:!0});var eSe=n(fd);zb=s(eSe,"A",{id:!0,class:!0,href:!0});var yHr=n(zb);mte=s(yHr,"SPAN",{});var wHr=n(mte);f(fw.$$.fragment,wHr),wHr.forEach(t),yHr.forEach(t),M4o=i(eSe),fte=s(eSe,"SPAN",{});var AHr=n(fte);E4o=r(AHr,"AutoModelForSequenceClassification"),AHr.forEach(t),eSe.forEach(t),Wxe=i(c),or=s(c,"DIV",{class:!0});var rl=n(or);f(gw.$$.fragment,rl),y4o=i(rl),gd=s(rl,"P",{});var Xz=n(gd);w4o=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gte=s(Xz,"CODE",{});var LHr=n(gte);A4o=r(LHr,"from_pretrained()"),LHr.forEach(t),L4o=r(Xz,"class method or the "),hte=s(Xz,"CODE",{});var BHr=n(hte);B4o=r(BHr,"from_config()"),BHr.forEach(t),x4o=r(Xz,`class
method.`),Xz.forEach(t),k4o=i(rl),hw=s(rl,"P",{});var oSe=n(hw);R4o=r(oSe,"This class cannot be instantiated directly using "),ute=s(oSe,"CODE",{});var xHr=n(ute);S4o=r(xHr,"__init__()"),xHr.forEach(t),P4o=r(oSe," (throws an error)."),oSe.forEach(t),$4o=i(rl),Ur=s(rl,"DIV",{class:!0});var tl=n(Ur);f(uw.$$.fragment,tl),I4o=i(tl),pte=s(tl,"P",{});var kHr=n(pte);j4o=r(kHr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kHr.forEach(t),D4o=i(tl),hd=s(tl,"P",{});var Vz=n(hd);N4o=r(Vz,`Note:
Loading a model from its configuration file does `),_te=s(Vz,"STRONG",{});var RHr=n(_te);q4o=r(RHr,"not"),RHr.forEach(t),O4o=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=s(Vz,"CODE",{});var SHr=n(bte);G4o=r(SHr,"from_pretrained()"),SHr.forEach(t),X4o=r(Vz,"to load the model weights."),Vz.forEach(t),V4o=i(tl),vte=s(tl,"P",{});var PHr=n(vte);z4o=r(PHr,"Examples:"),PHr.forEach(t),W4o=i(tl),f(pw.$$.fragment,tl),tl.forEach(t),Q4o=i(rl),Xe=s(rl,"DIV",{class:!0});var zt=n(Xe);f(_w.$$.fragment,zt),H4o=i(zt),Tte=s(zt,"P",{});var $Hr=n(Tte);U4o=r($Hr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Hr.forEach(t),J4o=i(zt),Ua=s(zt,"P",{});var n5=n(Ua);Y4o=r(n5,"The model class to instantiate is selected based on the "),Fte=s(n5,"CODE",{});var IHr=n(Fte);K4o=r(IHr,"model_type"),IHr.forEach(t),Z4o=r(n5,` property of the config object (either
passed as an argument or loaded from `),Cte=s(n5,"CODE",{});var jHr=n(Cte);eEo=r(jHr,"pretrained_model_name_or_path"),jHr.forEach(t),oEo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=s(n5,"CODE",{});var DHr=n(Mte);rEo=r(DHr,"pretrained_model_name_or_path"),DHr.forEach(t),tEo=r(n5,":"),n5.forEach(t),aEo=i(zt),A=s(zt,"UL",{});var L=n(A);Wb=s(L,"LI",{});var awe=n(Wb);Ete=s(awe,"STRONG",{});var NHr=n(Ete);sEo=r(NHr,"albert"),NHr.forEach(t),nEo=r(awe," \u2014 "),MI=s(awe,"A",{href:!0});var qHr=n(MI);lEo=r(qHr,"AlbertForSequenceClassification"),qHr.forEach(t),iEo=r(awe," (ALBERT model)"),awe.forEach(t),dEo=i(L),Qb=s(L,"LI",{});var swe=n(Qb);yte=s(swe,"STRONG",{});var OHr=n(yte);cEo=r(OHr,"bart"),OHr.forEach(t),mEo=r(swe," \u2014 "),EI=s(swe,"A",{href:!0});var GHr=n(EI);fEo=r(GHr,"BartForSequenceClassification"),GHr.forEach(t),gEo=r(swe," (BART model)"),swe.forEach(t),hEo=i(L),Hb=s(L,"LI",{});var nwe=n(Hb);wte=s(nwe,"STRONG",{});var XHr=n(wte);uEo=r(XHr,"bert"),XHr.forEach(t),pEo=r(nwe," \u2014 "),yI=s(nwe,"A",{href:!0});var VHr=n(yI);_Eo=r(VHr,"BertForSequenceClassification"),VHr.forEach(t),bEo=r(nwe," (BERT model)"),nwe.forEach(t),vEo=i(L),Ub=s(L,"LI",{});var lwe=n(Ub);Ate=s(lwe,"STRONG",{});var zHr=n(Ate);TEo=r(zHr,"big_bird"),zHr.forEach(t),FEo=r(lwe," \u2014 "),wI=s(lwe,"A",{href:!0});var WHr=n(wI);CEo=r(WHr,"BigBirdForSequenceClassification"),WHr.forEach(t),MEo=r(lwe," (BigBird model)"),lwe.forEach(t),EEo=i(L),Jb=s(L,"LI",{});var iwe=n(Jb);Lte=s(iwe,"STRONG",{});var QHr=n(Lte);yEo=r(QHr,"bigbird_pegasus"),QHr.forEach(t),wEo=r(iwe," \u2014 "),AI=s(iwe,"A",{href:!0});var HHr=n(AI);AEo=r(HHr,"BigBirdPegasusForSequenceClassification"),HHr.forEach(t),LEo=r(iwe," (BigBirdPegasus model)"),iwe.forEach(t),BEo=i(L),Yb=s(L,"LI",{});var dwe=n(Yb);Bte=s(dwe,"STRONG",{});var UHr=n(Bte);xEo=r(UHr,"camembert"),UHr.forEach(t),kEo=r(dwe," \u2014 "),LI=s(dwe,"A",{href:!0});var JHr=n(LI);REo=r(JHr,"CamembertForSequenceClassification"),JHr.forEach(t),SEo=r(dwe," (CamemBERT model)"),dwe.forEach(t),PEo=i(L),Kb=s(L,"LI",{});var cwe=n(Kb);xte=s(cwe,"STRONG",{});var YHr=n(xte);$Eo=r(YHr,"canine"),YHr.forEach(t),IEo=r(cwe," \u2014 "),BI=s(cwe,"A",{href:!0});var KHr=n(BI);jEo=r(KHr,"CanineForSequenceClassification"),KHr.forEach(t),DEo=r(cwe," (Canine model)"),cwe.forEach(t),NEo=i(L),Zb=s(L,"LI",{});var mwe=n(Zb);kte=s(mwe,"STRONG",{});var ZHr=n(kte);qEo=r(ZHr,"convbert"),ZHr.forEach(t),OEo=r(mwe," \u2014 "),xI=s(mwe,"A",{href:!0});var eUr=n(xI);GEo=r(eUr,"ConvBertForSequenceClassification"),eUr.forEach(t),XEo=r(mwe," (ConvBERT model)"),mwe.forEach(t),VEo=i(L),e2=s(L,"LI",{});var fwe=n(e2);Rte=s(fwe,"STRONG",{});var oUr=n(Rte);zEo=r(oUr,"ctrl"),oUr.forEach(t),WEo=r(fwe," \u2014 "),kI=s(fwe,"A",{href:!0});var rUr=n(kI);QEo=r(rUr,"CTRLForSequenceClassification"),rUr.forEach(t),HEo=r(fwe," (CTRL model)"),fwe.forEach(t),UEo=i(L),o2=s(L,"LI",{});var gwe=n(o2);Ste=s(gwe,"STRONG",{});var tUr=n(Ste);JEo=r(tUr,"data2vec-text"),tUr.forEach(t),YEo=r(gwe," \u2014 "),RI=s(gwe,"A",{href:!0});var aUr=n(RI);KEo=r(aUr,"Data2VecTextForSequenceClassification"),aUr.forEach(t),ZEo=r(gwe," (Data2VecText model)"),gwe.forEach(t),e3o=i(L),r2=s(L,"LI",{});var hwe=n(r2);Pte=s(hwe,"STRONG",{});var sUr=n(Pte);o3o=r(sUr,"deberta"),sUr.forEach(t),r3o=r(hwe," \u2014 "),SI=s(hwe,"A",{href:!0});var nUr=n(SI);t3o=r(nUr,"DebertaForSequenceClassification"),nUr.forEach(t),a3o=r(hwe," (DeBERTa model)"),hwe.forEach(t),s3o=i(L),t2=s(L,"LI",{});var uwe=n(t2);$te=s(uwe,"STRONG",{});var lUr=n($te);n3o=r(lUr,"deberta-v2"),lUr.forEach(t),l3o=r(uwe," \u2014 "),PI=s(uwe,"A",{href:!0});var iUr=n(PI);i3o=r(iUr,"DebertaV2ForSequenceClassification"),iUr.forEach(t),d3o=r(uwe," (DeBERTa-v2 model)"),uwe.forEach(t),c3o=i(L),a2=s(L,"LI",{});var pwe=n(a2);Ite=s(pwe,"STRONG",{});var dUr=n(Ite);m3o=r(dUr,"distilbert"),dUr.forEach(t),f3o=r(pwe," \u2014 "),$I=s(pwe,"A",{href:!0});var cUr=n($I);g3o=r(cUr,"DistilBertForSequenceClassification"),cUr.forEach(t),h3o=r(pwe," (DistilBERT model)"),pwe.forEach(t),u3o=i(L),s2=s(L,"LI",{});var _we=n(s2);jte=s(_we,"STRONG",{});var mUr=n(jte);p3o=r(mUr,"electra"),mUr.forEach(t),_3o=r(_we," \u2014 "),II=s(_we,"A",{href:!0});var fUr=n(II);b3o=r(fUr,"ElectraForSequenceClassification"),fUr.forEach(t),v3o=r(_we," (ELECTRA model)"),_we.forEach(t),T3o=i(L),n2=s(L,"LI",{});var bwe=n(n2);Dte=s(bwe,"STRONG",{});var gUr=n(Dte);F3o=r(gUr,"flaubert"),gUr.forEach(t),C3o=r(bwe," \u2014 "),jI=s(bwe,"A",{href:!0});var hUr=n(jI);M3o=r(hUr,"FlaubertForSequenceClassification"),hUr.forEach(t),E3o=r(bwe," (FlauBERT model)"),bwe.forEach(t),y3o=i(L),l2=s(L,"LI",{});var vwe=n(l2);Nte=s(vwe,"STRONG",{});var uUr=n(Nte);w3o=r(uUr,"fnet"),uUr.forEach(t),A3o=r(vwe," \u2014 "),DI=s(vwe,"A",{href:!0});var pUr=n(DI);L3o=r(pUr,"FNetForSequenceClassification"),pUr.forEach(t),B3o=r(vwe," (FNet model)"),vwe.forEach(t),x3o=i(L),i2=s(L,"LI",{});var Twe=n(i2);qte=s(Twe,"STRONG",{});var _Ur=n(qte);k3o=r(_Ur,"funnel"),_Ur.forEach(t),R3o=r(Twe," \u2014 "),NI=s(Twe,"A",{href:!0});var bUr=n(NI);S3o=r(bUr,"FunnelForSequenceClassification"),bUr.forEach(t),P3o=r(Twe," (Funnel Transformer model)"),Twe.forEach(t),$3o=i(L),d2=s(L,"LI",{});var Fwe=n(d2);Ote=s(Fwe,"STRONG",{});var vUr=n(Ote);I3o=r(vUr,"gpt2"),vUr.forEach(t),j3o=r(Fwe," \u2014 "),qI=s(Fwe,"A",{href:!0});var TUr=n(qI);D3o=r(TUr,"GPT2ForSequenceClassification"),TUr.forEach(t),N3o=r(Fwe," (OpenAI GPT-2 model)"),Fwe.forEach(t),q3o=i(L),c2=s(L,"LI",{});var Cwe=n(c2);Gte=s(Cwe,"STRONG",{});var FUr=n(Gte);O3o=r(FUr,"gpt_neo"),FUr.forEach(t),G3o=r(Cwe," \u2014 "),OI=s(Cwe,"A",{href:!0});var CUr=n(OI);X3o=r(CUr,"GPTNeoForSequenceClassification"),CUr.forEach(t),V3o=r(Cwe," (GPT Neo model)"),Cwe.forEach(t),z3o=i(L),m2=s(L,"LI",{});var Mwe=n(m2);Xte=s(Mwe,"STRONG",{});var MUr=n(Xte);W3o=r(MUr,"gptj"),MUr.forEach(t),Q3o=r(Mwe," \u2014 "),GI=s(Mwe,"A",{href:!0});var EUr=n(GI);H3o=r(EUr,"GPTJForSequenceClassification"),EUr.forEach(t),U3o=r(Mwe," (GPT-J model)"),Mwe.forEach(t),J3o=i(L),f2=s(L,"LI",{});var Ewe=n(f2);Vte=s(Ewe,"STRONG",{});var yUr=n(Vte);Y3o=r(yUr,"ibert"),yUr.forEach(t),K3o=r(Ewe," \u2014 "),XI=s(Ewe,"A",{href:!0});var wUr=n(XI);Z3o=r(wUr,"IBertForSequenceClassification"),wUr.forEach(t),e5o=r(Ewe," (I-BERT model)"),Ewe.forEach(t),o5o=i(L),g2=s(L,"LI",{});var ywe=n(g2);zte=s(ywe,"STRONG",{});var AUr=n(zte);r5o=r(AUr,"layoutlm"),AUr.forEach(t),t5o=r(ywe," \u2014 "),VI=s(ywe,"A",{href:!0});var LUr=n(VI);a5o=r(LUr,"LayoutLMForSequenceClassification"),LUr.forEach(t),s5o=r(ywe," (LayoutLM model)"),ywe.forEach(t),n5o=i(L),h2=s(L,"LI",{});var wwe=n(h2);Wte=s(wwe,"STRONG",{});var BUr=n(Wte);l5o=r(BUr,"layoutlmv2"),BUr.forEach(t),i5o=r(wwe," \u2014 "),zI=s(wwe,"A",{href:!0});var xUr=n(zI);d5o=r(xUr,"LayoutLMv2ForSequenceClassification"),xUr.forEach(t),c5o=r(wwe," (LayoutLMv2 model)"),wwe.forEach(t),m5o=i(L),u2=s(L,"LI",{});var Awe=n(u2);Qte=s(Awe,"STRONG",{});var kUr=n(Qte);f5o=r(kUr,"led"),kUr.forEach(t),g5o=r(Awe," \u2014 "),WI=s(Awe,"A",{href:!0});var RUr=n(WI);h5o=r(RUr,"LEDForSequenceClassification"),RUr.forEach(t),u5o=r(Awe," (LED model)"),Awe.forEach(t),p5o=i(L),p2=s(L,"LI",{});var Lwe=n(p2);Hte=s(Lwe,"STRONG",{});var SUr=n(Hte);_5o=r(SUr,"longformer"),SUr.forEach(t),b5o=r(Lwe," \u2014 "),QI=s(Lwe,"A",{href:!0});var PUr=n(QI);v5o=r(PUr,"LongformerForSequenceClassification"),PUr.forEach(t),T5o=r(Lwe," (Longformer model)"),Lwe.forEach(t),F5o=i(L),_2=s(L,"LI",{});var Bwe=n(_2);Ute=s(Bwe,"STRONG",{});var $Ur=n(Ute);C5o=r($Ur,"mbart"),$Ur.forEach(t),M5o=r(Bwe," \u2014 "),HI=s(Bwe,"A",{href:!0});var IUr=n(HI);E5o=r(IUr,"MBartForSequenceClassification"),IUr.forEach(t),y5o=r(Bwe," (mBART model)"),Bwe.forEach(t),w5o=i(L),b2=s(L,"LI",{});var xwe=n(b2);Jte=s(xwe,"STRONG",{});var jUr=n(Jte);A5o=r(jUr,"megatron-bert"),jUr.forEach(t),L5o=r(xwe," \u2014 "),UI=s(xwe,"A",{href:!0});var DUr=n(UI);B5o=r(DUr,"MegatronBertForSequenceClassification"),DUr.forEach(t),x5o=r(xwe," (MegatronBert model)"),xwe.forEach(t),k5o=i(L),v2=s(L,"LI",{});var kwe=n(v2);Yte=s(kwe,"STRONG",{});var NUr=n(Yte);R5o=r(NUr,"mobilebert"),NUr.forEach(t),S5o=r(kwe," \u2014 "),JI=s(kwe,"A",{href:!0});var qUr=n(JI);P5o=r(qUr,"MobileBertForSequenceClassification"),qUr.forEach(t),$5o=r(kwe," (MobileBERT model)"),kwe.forEach(t),I5o=i(L),T2=s(L,"LI",{});var Rwe=n(T2);Kte=s(Rwe,"STRONG",{});var OUr=n(Kte);j5o=r(OUr,"mpnet"),OUr.forEach(t),D5o=r(Rwe," \u2014 "),YI=s(Rwe,"A",{href:!0});var GUr=n(YI);N5o=r(GUr,"MPNetForSequenceClassification"),GUr.forEach(t),q5o=r(Rwe," (MPNet model)"),Rwe.forEach(t),O5o=i(L),F2=s(L,"LI",{});var Swe=n(F2);Zte=s(Swe,"STRONG",{});var XUr=n(Zte);G5o=r(XUr,"nystromformer"),XUr.forEach(t),X5o=r(Swe," \u2014 "),KI=s(Swe,"A",{href:!0});var VUr=n(KI);V5o=r(VUr,"NystromformerForSequenceClassification"),VUr.forEach(t),z5o=r(Swe," (Nystromformer model)"),Swe.forEach(t),W5o=i(L),C2=s(L,"LI",{});var Pwe=n(C2);eae=s(Pwe,"STRONG",{});var zUr=n(eae);Q5o=r(zUr,"openai-gpt"),zUr.forEach(t),H5o=r(Pwe," \u2014 "),ZI=s(Pwe,"A",{href:!0});var WUr=n(ZI);U5o=r(WUr,"OpenAIGPTForSequenceClassification"),WUr.forEach(t),J5o=r(Pwe," (OpenAI GPT model)"),Pwe.forEach(t),Y5o=i(L),M2=s(L,"LI",{});var $we=n(M2);oae=s($we,"STRONG",{});var QUr=n(oae);K5o=r(QUr,"perceiver"),QUr.forEach(t),Z5o=r($we," \u2014 "),ej=s($we,"A",{href:!0});var HUr=n(ej);eyo=r(HUr,"PerceiverForSequenceClassification"),HUr.forEach(t),oyo=r($we," (Perceiver model)"),$we.forEach(t),ryo=i(L),E2=s(L,"LI",{});var Iwe=n(E2);rae=s(Iwe,"STRONG",{});var UUr=n(rae);tyo=r(UUr,"plbart"),UUr.forEach(t),ayo=r(Iwe," \u2014 "),oj=s(Iwe,"A",{href:!0});var JUr=n(oj);syo=r(JUr,"PLBartForSequenceClassification"),JUr.forEach(t),nyo=r(Iwe," (PLBart model)"),Iwe.forEach(t),lyo=i(L),y2=s(L,"LI",{});var jwe=n(y2);tae=s(jwe,"STRONG",{});var YUr=n(tae);iyo=r(YUr,"qdqbert"),YUr.forEach(t),dyo=r(jwe," \u2014 "),rj=s(jwe,"A",{href:!0});var KUr=n(rj);cyo=r(KUr,"QDQBertForSequenceClassification"),KUr.forEach(t),myo=r(jwe," (QDQBert model)"),jwe.forEach(t),fyo=i(L),w2=s(L,"LI",{});var Dwe=n(w2);aae=s(Dwe,"STRONG",{});var ZUr=n(aae);gyo=r(ZUr,"reformer"),ZUr.forEach(t),hyo=r(Dwe," \u2014 "),tj=s(Dwe,"A",{href:!0});var eJr=n(tj);uyo=r(eJr,"ReformerForSequenceClassification"),eJr.forEach(t),pyo=r(Dwe," (Reformer model)"),Dwe.forEach(t),_yo=i(L),A2=s(L,"LI",{});var Nwe=n(A2);sae=s(Nwe,"STRONG",{});var oJr=n(sae);byo=r(oJr,"rembert"),oJr.forEach(t),vyo=r(Nwe," \u2014 "),aj=s(Nwe,"A",{href:!0});var rJr=n(aj);Tyo=r(rJr,"RemBertForSequenceClassification"),rJr.forEach(t),Fyo=r(Nwe," (RemBERT model)"),Nwe.forEach(t),Cyo=i(L),L2=s(L,"LI",{});var qwe=n(L2);nae=s(qwe,"STRONG",{});var tJr=n(nae);Myo=r(tJr,"roberta"),tJr.forEach(t),Eyo=r(qwe," \u2014 "),sj=s(qwe,"A",{href:!0});var aJr=n(sj);yyo=r(aJr,"RobertaForSequenceClassification"),aJr.forEach(t),wyo=r(qwe," (RoBERTa model)"),qwe.forEach(t),Ayo=i(L),B2=s(L,"LI",{});var Owe=n(B2);lae=s(Owe,"STRONG",{});var sJr=n(lae);Lyo=r(sJr,"roformer"),sJr.forEach(t),Byo=r(Owe," \u2014 "),nj=s(Owe,"A",{href:!0});var nJr=n(nj);xyo=r(nJr,"RoFormerForSequenceClassification"),nJr.forEach(t),kyo=r(Owe," (RoFormer model)"),Owe.forEach(t),Ryo=i(L),x2=s(L,"LI",{});var Gwe=n(x2);iae=s(Gwe,"STRONG",{});var lJr=n(iae);Syo=r(lJr,"squeezebert"),lJr.forEach(t),Pyo=r(Gwe," \u2014 "),lj=s(Gwe,"A",{href:!0});var iJr=n(lj);$yo=r(iJr,"SqueezeBertForSequenceClassification"),iJr.forEach(t),Iyo=r(Gwe," (SqueezeBERT model)"),Gwe.forEach(t),jyo=i(L),k2=s(L,"LI",{});var Xwe=n(k2);dae=s(Xwe,"STRONG",{});var dJr=n(dae);Dyo=r(dJr,"tapas"),dJr.forEach(t),Nyo=r(Xwe," \u2014 "),ij=s(Xwe,"A",{href:!0});var cJr=n(ij);qyo=r(cJr,"TapasForSequenceClassification"),cJr.forEach(t),Oyo=r(Xwe," (TAPAS model)"),Xwe.forEach(t),Gyo=i(L),R2=s(L,"LI",{});var Vwe=n(R2);cae=s(Vwe,"STRONG",{});var mJr=n(cae);Xyo=r(mJr,"transfo-xl"),mJr.forEach(t),Vyo=r(Vwe," \u2014 "),dj=s(Vwe,"A",{href:!0});var fJr=n(dj);zyo=r(fJr,"TransfoXLForSequenceClassification"),fJr.forEach(t),Wyo=r(Vwe," (Transformer-XL model)"),Vwe.forEach(t),Qyo=i(L),S2=s(L,"LI",{});var zwe=n(S2);mae=s(zwe,"STRONG",{});var gJr=n(mae);Hyo=r(gJr,"xlm"),gJr.forEach(t),Uyo=r(zwe," \u2014 "),cj=s(zwe,"A",{href:!0});var hJr=n(cj);Jyo=r(hJr,"XLMForSequenceClassification"),hJr.forEach(t),Yyo=r(zwe," (XLM model)"),zwe.forEach(t),Kyo=i(L),P2=s(L,"LI",{});var Wwe=n(P2);fae=s(Wwe,"STRONG",{});var uJr=n(fae);Zyo=r(uJr,"xlm-roberta"),uJr.forEach(t),ewo=r(Wwe," \u2014 "),mj=s(Wwe,"A",{href:!0});var pJr=n(mj);owo=r(pJr,"XLMRobertaForSequenceClassification"),pJr.forEach(t),rwo=r(Wwe," (XLM-RoBERTa model)"),Wwe.forEach(t),two=i(L),$2=s(L,"LI",{});var Qwe=n($2);gae=s(Qwe,"STRONG",{});var _Jr=n(gae);awo=r(_Jr,"xlm-roberta-xl"),_Jr.forEach(t),swo=r(Qwe," \u2014 "),fj=s(Qwe,"A",{href:!0});var bJr=n(fj);nwo=r(bJr,"XLMRobertaXLForSequenceClassification"),bJr.forEach(t),lwo=r(Qwe," (XLM-RoBERTa-XL model)"),Qwe.forEach(t),iwo=i(L),I2=s(L,"LI",{});var Hwe=n(I2);hae=s(Hwe,"STRONG",{});var vJr=n(hae);dwo=r(vJr,"xlnet"),vJr.forEach(t),cwo=r(Hwe," \u2014 "),gj=s(Hwe,"A",{href:!0});var TJr=n(gj);mwo=r(TJr,"XLNetForSequenceClassification"),TJr.forEach(t),fwo=r(Hwe," (XLNet model)"),Hwe.forEach(t),gwo=i(L),j2=s(L,"LI",{});var Uwe=n(j2);uae=s(Uwe,"STRONG",{});var FJr=n(uae);hwo=r(FJr,"yoso"),FJr.forEach(t),uwo=r(Uwe," \u2014 "),hj=s(Uwe,"A",{href:!0});var CJr=n(hj);pwo=r(CJr,"YosoForSequenceClassification"),CJr.forEach(t),_wo=r(Uwe," (YOSO model)"),Uwe.forEach(t),L.forEach(t),bwo=i(zt),D2=s(zt,"P",{});var Jwe=n(D2);vwo=r(Jwe,"The model is set in evaluation mode by default using "),pae=s(Jwe,"CODE",{});var MJr=n(pae);Two=r(MJr,"model.eval()"),MJr.forEach(t),Fwo=r(Jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ae=s(Jwe,"CODE",{});var EJr=n(_ae);Cwo=r(EJr,"model.train()"),EJr.forEach(t),Jwe.forEach(t),Mwo=i(zt),bae=s(zt,"P",{});var yJr=n(bae);Ewo=r(yJr,"Examples:"),yJr.forEach(t),ywo=i(zt),f(bw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Qxe=i(c),ud=s(c,"H2",{class:!0});var rSe=n(ud);N2=s(rSe,"A",{id:!0,class:!0,href:!0});var wJr=n(N2);vae=s(wJr,"SPAN",{});var AJr=n(vae);f(vw.$$.fragment,AJr),AJr.forEach(t),wJr.forEach(t),wwo=i(rSe),Tae=s(rSe,"SPAN",{});var LJr=n(Tae);Awo=r(LJr,"AutoModelForMultipleChoice"),LJr.forEach(t),rSe.forEach(t),Hxe=i(c),rr=s(c,"DIV",{class:!0});var al=n(rr);f(Tw.$$.fragment,al),Lwo=i(al),pd=s(al,"P",{});var zz=n(pd);Bwo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fae=s(zz,"CODE",{});var BJr=n(Fae);xwo=r(BJr,"from_pretrained()"),BJr.forEach(t),kwo=r(zz,"class method or the "),Cae=s(zz,"CODE",{});var xJr=n(Cae);Rwo=r(xJr,"from_config()"),xJr.forEach(t),Swo=r(zz,`class
method.`),zz.forEach(t),Pwo=i(al),Fw=s(al,"P",{});var tSe=n(Fw);$wo=r(tSe,"This class cannot be instantiated directly using "),Mae=s(tSe,"CODE",{});var kJr=n(Mae);Iwo=r(kJr,"__init__()"),kJr.forEach(t),jwo=r(tSe," (throws an error)."),tSe.forEach(t),Dwo=i(al),Jr=s(al,"DIV",{class:!0});var sl=n(Jr);f(Cw.$$.fragment,sl),Nwo=i(sl),Eae=s(sl,"P",{});var RJr=n(Eae);qwo=r(RJr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RJr.forEach(t),Owo=i(sl),_d=s(sl,"P",{});var Wz=n(_d);Gwo=r(Wz,`Note:
Loading a model from its configuration file does `),yae=s(Wz,"STRONG",{});var SJr=n(yae);Xwo=r(SJr,"not"),SJr.forEach(t),Vwo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wae=s(Wz,"CODE",{});var PJr=n(wae);zwo=r(PJr,"from_pretrained()"),PJr.forEach(t),Wwo=r(Wz,"to load the model weights."),Wz.forEach(t),Qwo=i(sl),Aae=s(sl,"P",{});var $Jr=n(Aae);Hwo=r($Jr,"Examples:"),$Jr.forEach(t),Uwo=i(sl),f(Mw.$$.fragment,sl),sl.forEach(t),Jwo=i(al),Ve=s(al,"DIV",{class:!0});var Wt=n(Ve);f(Ew.$$.fragment,Wt),Ywo=i(Wt),Lae=s(Wt,"P",{});var IJr=n(Lae);Kwo=r(IJr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IJr.forEach(t),Zwo=i(Wt),Ja=s(Wt,"P",{});var l5=n(Ja);e6o=r(l5,"The model class to instantiate is selected based on the "),Bae=s(l5,"CODE",{});var jJr=n(Bae);o6o=r(jJr,"model_type"),jJr.forEach(t),r6o=r(l5,` property of the config object (either
passed as an argument or loaded from `),xae=s(l5,"CODE",{});var DJr=n(xae);t6o=r(DJr,"pretrained_model_name_or_path"),DJr.forEach(t),a6o=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kae=s(l5,"CODE",{});var NJr=n(kae);s6o=r(NJr,"pretrained_model_name_or_path"),NJr.forEach(t),n6o=r(l5,":"),l5.forEach(t),l6o=i(Wt),O=s(Wt,"UL",{});var G=n(O);q2=s(G,"LI",{});var Ywe=n(q2);Rae=s(Ywe,"STRONG",{});var qJr=n(Rae);i6o=r(qJr,"albert"),qJr.forEach(t),d6o=r(Ywe," \u2014 "),uj=s(Ywe,"A",{href:!0});var OJr=n(uj);c6o=r(OJr,"AlbertForMultipleChoice"),OJr.forEach(t),m6o=r(Ywe," (ALBERT model)"),Ywe.forEach(t),f6o=i(G),O2=s(G,"LI",{});var Kwe=n(O2);Sae=s(Kwe,"STRONG",{});var GJr=n(Sae);g6o=r(GJr,"bert"),GJr.forEach(t),h6o=r(Kwe," \u2014 "),pj=s(Kwe,"A",{href:!0});var XJr=n(pj);u6o=r(XJr,"BertForMultipleChoice"),XJr.forEach(t),p6o=r(Kwe," (BERT model)"),Kwe.forEach(t),_6o=i(G),G2=s(G,"LI",{});var Zwe=n(G2);Pae=s(Zwe,"STRONG",{});var VJr=n(Pae);b6o=r(VJr,"big_bird"),VJr.forEach(t),v6o=r(Zwe," \u2014 "),_j=s(Zwe,"A",{href:!0});var zJr=n(_j);T6o=r(zJr,"BigBirdForMultipleChoice"),zJr.forEach(t),F6o=r(Zwe," (BigBird model)"),Zwe.forEach(t),C6o=i(G),X2=s(G,"LI",{});var e6e=n(X2);$ae=s(e6e,"STRONG",{});var WJr=n($ae);M6o=r(WJr,"camembert"),WJr.forEach(t),E6o=r(e6e," \u2014 "),bj=s(e6e,"A",{href:!0});var QJr=n(bj);y6o=r(QJr,"CamembertForMultipleChoice"),QJr.forEach(t),w6o=r(e6e," (CamemBERT model)"),e6e.forEach(t),A6o=i(G),V2=s(G,"LI",{});var o6e=n(V2);Iae=s(o6e,"STRONG",{});var HJr=n(Iae);L6o=r(HJr,"canine"),HJr.forEach(t),B6o=r(o6e," \u2014 "),vj=s(o6e,"A",{href:!0});var UJr=n(vj);x6o=r(UJr,"CanineForMultipleChoice"),UJr.forEach(t),k6o=r(o6e," (Canine model)"),o6e.forEach(t),R6o=i(G),z2=s(G,"LI",{});var r6e=n(z2);jae=s(r6e,"STRONG",{});var JJr=n(jae);S6o=r(JJr,"convbert"),JJr.forEach(t),P6o=r(r6e," \u2014 "),Tj=s(r6e,"A",{href:!0});var YJr=n(Tj);$6o=r(YJr,"ConvBertForMultipleChoice"),YJr.forEach(t),I6o=r(r6e," (ConvBERT model)"),r6e.forEach(t),j6o=i(G),W2=s(G,"LI",{});var t6e=n(W2);Dae=s(t6e,"STRONG",{});var KJr=n(Dae);D6o=r(KJr,"data2vec-text"),KJr.forEach(t),N6o=r(t6e," \u2014 "),Fj=s(t6e,"A",{href:!0});var ZJr=n(Fj);q6o=r(ZJr,"Data2VecTextForMultipleChoice"),ZJr.forEach(t),O6o=r(t6e," (Data2VecText model)"),t6e.forEach(t),G6o=i(G),Q2=s(G,"LI",{});var a6e=n(Q2);Nae=s(a6e,"STRONG",{});var eYr=n(Nae);X6o=r(eYr,"distilbert"),eYr.forEach(t),V6o=r(a6e," \u2014 "),Cj=s(a6e,"A",{href:!0});var oYr=n(Cj);z6o=r(oYr,"DistilBertForMultipleChoice"),oYr.forEach(t),W6o=r(a6e," (DistilBERT model)"),a6e.forEach(t),Q6o=i(G),H2=s(G,"LI",{});var s6e=n(H2);qae=s(s6e,"STRONG",{});var rYr=n(qae);H6o=r(rYr,"electra"),rYr.forEach(t),U6o=r(s6e," \u2014 "),Mj=s(s6e,"A",{href:!0});var tYr=n(Mj);J6o=r(tYr,"ElectraForMultipleChoice"),tYr.forEach(t),Y6o=r(s6e," (ELECTRA model)"),s6e.forEach(t),K6o=i(G),U2=s(G,"LI",{});var n6e=n(U2);Oae=s(n6e,"STRONG",{});var aYr=n(Oae);Z6o=r(aYr,"flaubert"),aYr.forEach(t),eAo=r(n6e," \u2014 "),Ej=s(n6e,"A",{href:!0});var sYr=n(Ej);oAo=r(sYr,"FlaubertForMultipleChoice"),sYr.forEach(t),rAo=r(n6e," (FlauBERT model)"),n6e.forEach(t),tAo=i(G),J2=s(G,"LI",{});var l6e=n(J2);Gae=s(l6e,"STRONG",{});var nYr=n(Gae);aAo=r(nYr,"fnet"),nYr.forEach(t),sAo=r(l6e," \u2014 "),yj=s(l6e,"A",{href:!0});var lYr=n(yj);nAo=r(lYr,"FNetForMultipleChoice"),lYr.forEach(t),lAo=r(l6e," (FNet model)"),l6e.forEach(t),iAo=i(G),Y2=s(G,"LI",{});var i6e=n(Y2);Xae=s(i6e,"STRONG",{});var iYr=n(Xae);dAo=r(iYr,"funnel"),iYr.forEach(t),cAo=r(i6e," \u2014 "),wj=s(i6e,"A",{href:!0});var dYr=n(wj);mAo=r(dYr,"FunnelForMultipleChoice"),dYr.forEach(t),fAo=r(i6e," (Funnel Transformer model)"),i6e.forEach(t),gAo=i(G),K2=s(G,"LI",{});var d6e=n(K2);Vae=s(d6e,"STRONG",{});var cYr=n(Vae);hAo=r(cYr,"ibert"),cYr.forEach(t),uAo=r(d6e," \u2014 "),Aj=s(d6e,"A",{href:!0});var mYr=n(Aj);pAo=r(mYr,"IBertForMultipleChoice"),mYr.forEach(t),_Ao=r(d6e," (I-BERT model)"),d6e.forEach(t),bAo=i(G),Z2=s(G,"LI",{});var c6e=n(Z2);zae=s(c6e,"STRONG",{});var fYr=n(zae);vAo=r(fYr,"longformer"),fYr.forEach(t),TAo=r(c6e," \u2014 "),Lj=s(c6e,"A",{href:!0});var gYr=n(Lj);FAo=r(gYr,"LongformerForMultipleChoice"),gYr.forEach(t),CAo=r(c6e," (Longformer model)"),c6e.forEach(t),MAo=i(G),ev=s(G,"LI",{});var m6e=n(ev);Wae=s(m6e,"STRONG",{});var hYr=n(Wae);EAo=r(hYr,"megatron-bert"),hYr.forEach(t),yAo=r(m6e," \u2014 "),Bj=s(m6e,"A",{href:!0});var uYr=n(Bj);wAo=r(uYr,"MegatronBertForMultipleChoice"),uYr.forEach(t),AAo=r(m6e," (MegatronBert model)"),m6e.forEach(t),LAo=i(G),ov=s(G,"LI",{});var f6e=n(ov);Qae=s(f6e,"STRONG",{});var pYr=n(Qae);BAo=r(pYr,"mobilebert"),pYr.forEach(t),xAo=r(f6e," \u2014 "),xj=s(f6e,"A",{href:!0});var _Yr=n(xj);kAo=r(_Yr,"MobileBertForMultipleChoice"),_Yr.forEach(t),RAo=r(f6e," (MobileBERT model)"),f6e.forEach(t),SAo=i(G),rv=s(G,"LI",{});var g6e=n(rv);Hae=s(g6e,"STRONG",{});var bYr=n(Hae);PAo=r(bYr,"mpnet"),bYr.forEach(t),$Ao=r(g6e," \u2014 "),kj=s(g6e,"A",{href:!0});var vYr=n(kj);IAo=r(vYr,"MPNetForMultipleChoice"),vYr.forEach(t),jAo=r(g6e," (MPNet model)"),g6e.forEach(t),DAo=i(G),tv=s(G,"LI",{});var h6e=n(tv);Uae=s(h6e,"STRONG",{});var TYr=n(Uae);NAo=r(TYr,"nystromformer"),TYr.forEach(t),qAo=r(h6e," \u2014 "),Rj=s(h6e,"A",{href:!0});var FYr=n(Rj);OAo=r(FYr,"NystromformerForMultipleChoice"),FYr.forEach(t),GAo=r(h6e," (Nystromformer model)"),h6e.forEach(t),XAo=i(G),av=s(G,"LI",{});var u6e=n(av);Jae=s(u6e,"STRONG",{});var CYr=n(Jae);VAo=r(CYr,"qdqbert"),CYr.forEach(t),zAo=r(u6e," \u2014 "),Sj=s(u6e,"A",{href:!0});var MYr=n(Sj);WAo=r(MYr,"QDQBertForMultipleChoice"),MYr.forEach(t),QAo=r(u6e," (QDQBert model)"),u6e.forEach(t),HAo=i(G),sv=s(G,"LI",{});var p6e=n(sv);Yae=s(p6e,"STRONG",{});var EYr=n(Yae);UAo=r(EYr,"rembert"),EYr.forEach(t),JAo=r(p6e," \u2014 "),Pj=s(p6e,"A",{href:!0});var yYr=n(Pj);YAo=r(yYr,"RemBertForMultipleChoice"),yYr.forEach(t),KAo=r(p6e," (RemBERT model)"),p6e.forEach(t),ZAo=i(G),nv=s(G,"LI",{});var _6e=n(nv);Kae=s(_6e,"STRONG",{});var wYr=n(Kae);e0o=r(wYr,"roberta"),wYr.forEach(t),o0o=r(_6e," \u2014 "),$j=s(_6e,"A",{href:!0});var AYr=n($j);r0o=r(AYr,"RobertaForMultipleChoice"),AYr.forEach(t),t0o=r(_6e," (RoBERTa model)"),_6e.forEach(t),a0o=i(G),lv=s(G,"LI",{});var b6e=n(lv);Zae=s(b6e,"STRONG",{});var LYr=n(Zae);s0o=r(LYr,"roformer"),LYr.forEach(t),n0o=r(b6e," \u2014 "),Ij=s(b6e,"A",{href:!0});var BYr=n(Ij);l0o=r(BYr,"RoFormerForMultipleChoice"),BYr.forEach(t),i0o=r(b6e," (RoFormer model)"),b6e.forEach(t),d0o=i(G),iv=s(G,"LI",{});var v6e=n(iv);ese=s(v6e,"STRONG",{});var xYr=n(ese);c0o=r(xYr,"squeezebert"),xYr.forEach(t),m0o=r(v6e," \u2014 "),jj=s(v6e,"A",{href:!0});var kYr=n(jj);f0o=r(kYr,"SqueezeBertForMultipleChoice"),kYr.forEach(t),g0o=r(v6e," (SqueezeBERT model)"),v6e.forEach(t),h0o=i(G),dv=s(G,"LI",{});var T6e=n(dv);ose=s(T6e,"STRONG",{});var RYr=n(ose);u0o=r(RYr,"xlm"),RYr.forEach(t),p0o=r(T6e," \u2014 "),Dj=s(T6e,"A",{href:!0});var SYr=n(Dj);_0o=r(SYr,"XLMForMultipleChoice"),SYr.forEach(t),b0o=r(T6e," (XLM model)"),T6e.forEach(t),v0o=i(G),cv=s(G,"LI",{});var F6e=n(cv);rse=s(F6e,"STRONG",{});var PYr=n(rse);T0o=r(PYr,"xlm-roberta"),PYr.forEach(t),F0o=r(F6e," \u2014 "),Nj=s(F6e,"A",{href:!0});var $Yr=n(Nj);C0o=r($Yr,"XLMRobertaForMultipleChoice"),$Yr.forEach(t),M0o=r(F6e," (XLM-RoBERTa model)"),F6e.forEach(t),E0o=i(G),mv=s(G,"LI",{});var C6e=n(mv);tse=s(C6e,"STRONG",{});var IYr=n(tse);y0o=r(IYr,"xlm-roberta-xl"),IYr.forEach(t),w0o=r(C6e," \u2014 "),qj=s(C6e,"A",{href:!0});var jYr=n(qj);A0o=r(jYr,"XLMRobertaXLForMultipleChoice"),jYr.forEach(t),L0o=r(C6e," (XLM-RoBERTa-XL model)"),C6e.forEach(t),B0o=i(G),fv=s(G,"LI",{});var M6e=n(fv);ase=s(M6e,"STRONG",{});var DYr=n(ase);x0o=r(DYr,"xlnet"),DYr.forEach(t),k0o=r(M6e," \u2014 "),Oj=s(M6e,"A",{href:!0});var NYr=n(Oj);R0o=r(NYr,"XLNetForMultipleChoice"),NYr.forEach(t),S0o=r(M6e," (XLNet model)"),M6e.forEach(t),P0o=i(G),gv=s(G,"LI",{});var E6e=n(gv);sse=s(E6e,"STRONG",{});var qYr=n(sse);$0o=r(qYr,"yoso"),qYr.forEach(t),I0o=r(E6e," \u2014 "),Gj=s(E6e,"A",{href:!0});var OYr=n(Gj);j0o=r(OYr,"YosoForMultipleChoice"),OYr.forEach(t),D0o=r(E6e," (YOSO model)"),E6e.forEach(t),G.forEach(t),N0o=i(Wt),hv=s(Wt,"P",{});var y6e=n(hv);q0o=r(y6e,"The model is set in evaluation mode by default using "),nse=s(y6e,"CODE",{});var GYr=n(nse);O0o=r(GYr,"model.eval()"),GYr.forEach(t),G0o=r(y6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lse=s(y6e,"CODE",{});var XYr=n(lse);X0o=r(XYr,"model.train()"),XYr.forEach(t),y6e.forEach(t),V0o=i(Wt),ise=s(Wt,"P",{});var VYr=n(ise);z0o=r(VYr,"Examples:"),VYr.forEach(t),W0o=i(Wt),f(yw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Uxe=i(c),bd=s(c,"H2",{class:!0});var aSe=n(bd);uv=s(aSe,"A",{id:!0,class:!0,href:!0});var zYr=n(uv);dse=s(zYr,"SPAN",{});var WYr=n(dse);f(ww.$$.fragment,WYr),WYr.forEach(t),zYr.forEach(t),Q0o=i(aSe),cse=s(aSe,"SPAN",{});var QYr=n(cse);H0o=r(QYr,"AutoModelForNextSentencePrediction"),QYr.forEach(t),aSe.forEach(t),Jxe=i(c),tr=s(c,"DIV",{class:!0});var nl=n(tr);f(Aw.$$.fragment,nl),U0o=i(nl),vd=s(nl,"P",{});var Qz=n(vd);J0o=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mse=s(Qz,"CODE",{});var HYr=n(mse);Y0o=r(HYr,"from_pretrained()"),HYr.forEach(t),K0o=r(Qz,"class method or the "),fse=s(Qz,"CODE",{});var UYr=n(fse);Z0o=r(UYr,"from_config()"),UYr.forEach(t),eLo=r(Qz,`class
method.`),Qz.forEach(t),oLo=i(nl),Lw=s(nl,"P",{});var sSe=n(Lw);rLo=r(sSe,"This class cannot be instantiated directly using "),gse=s(sSe,"CODE",{});var JYr=n(gse);tLo=r(JYr,"__init__()"),JYr.forEach(t),aLo=r(sSe," (throws an error)."),sSe.forEach(t),sLo=i(nl),Yr=s(nl,"DIV",{class:!0});var ll=n(Yr);f(Bw.$$.fragment,ll),nLo=i(ll),hse=s(ll,"P",{});var YYr=n(hse);lLo=r(YYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YYr.forEach(t),iLo=i(ll),Td=s(ll,"P",{});var Hz=n(Td);dLo=r(Hz,`Note:
Loading a model from its configuration file does `),use=s(Hz,"STRONG",{});var KYr=n(use);cLo=r(KYr,"not"),KYr.forEach(t),mLo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=s(Hz,"CODE",{});var ZYr=n(pse);fLo=r(ZYr,"from_pretrained()"),ZYr.forEach(t),gLo=r(Hz,"to load the model weights."),Hz.forEach(t),hLo=i(ll),_se=s(ll,"P",{});var eKr=n(_se);uLo=r(eKr,"Examples:"),eKr.forEach(t),pLo=i(ll),f(xw.$$.fragment,ll),ll.forEach(t),_Lo=i(nl),ze=s(nl,"DIV",{class:!0});var Qt=n(ze);f(kw.$$.fragment,Qt),bLo=i(Qt),bse=s(Qt,"P",{});var oKr=n(bse);vLo=r(oKr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oKr.forEach(t),TLo=i(Qt),Ya=s(Qt,"P",{});var i5=n(Ya);FLo=r(i5,"The model class to instantiate is selected based on the "),vse=s(i5,"CODE",{});var rKr=n(vse);CLo=r(rKr,"model_type"),rKr.forEach(t),MLo=r(i5,` property of the config object (either
passed as an argument or loaded from `),Tse=s(i5,"CODE",{});var tKr=n(Tse);ELo=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),yLo=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fse=s(i5,"CODE",{});var aKr=n(Fse);wLo=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),ALo=r(i5,":"),i5.forEach(t),LLo=i(Qt),da=s(Qt,"UL",{});var il=n(da);pv=s(il,"LI",{});var w6e=n(pv);Cse=s(w6e,"STRONG",{});var sKr=n(Cse);BLo=r(sKr,"bert"),sKr.forEach(t),xLo=r(w6e," \u2014 "),Xj=s(w6e,"A",{href:!0});var nKr=n(Xj);kLo=r(nKr,"BertForNextSentencePrediction"),nKr.forEach(t),RLo=r(w6e," (BERT model)"),w6e.forEach(t),SLo=i(il),_v=s(il,"LI",{});var A6e=n(_v);Mse=s(A6e,"STRONG",{});var lKr=n(Mse);PLo=r(lKr,"fnet"),lKr.forEach(t),$Lo=r(A6e," \u2014 "),Vj=s(A6e,"A",{href:!0});var iKr=n(Vj);ILo=r(iKr,"FNetForNextSentencePrediction"),iKr.forEach(t),jLo=r(A6e," (FNet model)"),A6e.forEach(t),DLo=i(il),bv=s(il,"LI",{});var L6e=n(bv);Ese=s(L6e,"STRONG",{});var dKr=n(Ese);NLo=r(dKr,"megatron-bert"),dKr.forEach(t),qLo=r(L6e," \u2014 "),zj=s(L6e,"A",{href:!0});var cKr=n(zj);OLo=r(cKr,"MegatronBertForNextSentencePrediction"),cKr.forEach(t),GLo=r(L6e," (MegatronBert model)"),L6e.forEach(t),XLo=i(il),vv=s(il,"LI",{});var B6e=n(vv);yse=s(B6e,"STRONG",{});var mKr=n(yse);VLo=r(mKr,"mobilebert"),mKr.forEach(t),zLo=r(B6e," \u2014 "),Wj=s(B6e,"A",{href:!0});var fKr=n(Wj);WLo=r(fKr,"MobileBertForNextSentencePrediction"),fKr.forEach(t),QLo=r(B6e," (MobileBERT model)"),B6e.forEach(t),HLo=i(il),Tv=s(il,"LI",{});var x6e=n(Tv);wse=s(x6e,"STRONG",{});var gKr=n(wse);ULo=r(gKr,"qdqbert"),gKr.forEach(t),JLo=r(x6e," \u2014 "),Qj=s(x6e,"A",{href:!0});var hKr=n(Qj);YLo=r(hKr,"QDQBertForNextSentencePrediction"),hKr.forEach(t),KLo=r(x6e," (QDQBert model)"),x6e.forEach(t),il.forEach(t),ZLo=i(Qt),Fv=s(Qt,"P",{});var k6e=n(Fv);e7o=r(k6e,"The model is set in evaluation mode by default using "),Ase=s(k6e,"CODE",{});var uKr=n(Ase);o7o=r(uKr,"model.eval()"),uKr.forEach(t),r7o=r(k6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=s(k6e,"CODE",{});var pKr=n(Lse);t7o=r(pKr,"model.train()"),pKr.forEach(t),k6e.forEach(t),a7o=i(Qt),Bse=s(Qt,"P",{});var _Kr=n(Bse);s7o=r(_Kr,"Examples:"),_Kr.forEach(t),n7o=i(Qt),f(Rw.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),Yxe=i(c),Fd=s(c,"H2",{class:!0});var nSe=n(Fd);Cv=s(nSe,"A",{id:!0,class:!0,href:!0});var bKr=n(Cv);xse=s(bKr,"SPAN",{});var vKr=n(xse);f(Sw.$$.fragment,vKr),vKr.forEach(t),bKr.forEach(t),l7o=i(nSe),kse=s(nSe,"SPAN",{});var TKr=n(kse);i7o=r(TKr,"AutoModelForTokenClassification"),TKr.forEach(t),nSe.forEach(t),Kxe=i(c),ar=s(c,"DIV",{class:!0});var dl=n(ar);f(Pw.$$.fragment,dl),d7o=i(dl),Cd=s(dl,"P",{});var Uz=n(Cd);c7o=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rse=s(Uz,"CODE",{});var FKr=n(Rse);m7o=r(FKr,"from_pretrained()"),FKr.forEach(t),f7o=r(Uz,"class method or the "),Sse=s(Uz,"CODE",{});var CKr=n(Sse);g7o=r(CKr,"from_config()"),CKr.forEach(t),h7o=r(Uz,`class
method.`),Uz.forEach(t),u7o=i(dl),$w=s(dl,"P",{});var lSe=n($w);p7o=r(lSe,"This class cannot be instantiated directly using "),Pse=s(lSe,"CODE",{});var MKr=n(Pse);_7o=r(MKr,"__init__()"),MKr.forEach(t),b7o=r(lSe," (throws an error)."),lSe.forEach(t),v7o=i(dl),Kr=s(dl,"DIV",{class:!0});var cl=n(Kr);f(Iw.$$.fragment,cl),T7o=i(cl),$se=s(cl,"P",{});var EKr=n($se);F7o=r(EKr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EKr.forEach(t),C7o=i(cl),Md=s(cl,"P",{});var Jz=n(Md);M7o=r(Jz,`Note:
Loading a model from its configuration file does `),Ise=s(Jz,"STRONG",{});var yKr=n(Ise);E7o=r(yKr,"not"),yKr.forEach(t),y7o=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jse=s(Jz,"CODE",{});var wKr=n(jse);w7o=r(wKr,"from_pretrained()"),wKr.forEach(t),A7o=r(Jz,"to load the model weights."),Jz.forEach(t),L7o=i(cl),Dse=s(cl,"P",{});var AKr=n(Dse);B7o=r(AKr,"Examples:"),AKr.forEach(t),x7o=i(cl),f(jw.$$.fragment,cl),cl.forEach(t),k7o=i(dl),We=s(dl,"DIV",{class:!0});var Ht=n(We);f(Dw.$$.fragment,Ht),R7o=i(Ht),Nse=s(Ht,"P",{});var LKr=n(Nse);S7o=r(LKr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LKr.forEach(t),P7o=i(Ht),Ka=s(Ht,"P",{});var d5=n(Ka);$7o=r(d5,"The model class to instantiate is selected based on the "),qse=s(d5,"CODE",{});var BKr=n(qse);I7o=r(BKr,"model_type"),BKr.forEach(t),j7o=r(d5,` property of the config object (either
passed as an argument or loaded from `),Ose=s(d5,"CODE",{});var xKr=n(Ose);D7o=r(xKr,"pretrained_model_name_or_path"),xKr.forEach(t),N7o=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gse=s(d5,"CODE",{});var kKr=n(Gse);q7o=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),O7o=r(d5,":"),d5.forEach(t),G7o=i(Ht),N=s(Ht,"UL",{});var q=n(N);Mv=s(q,"LI",{});var R6e=n(Mv);Xse=s(R6e,"STRONG",{});var RKr=n(Xse);X7o=r(RKr,"albert"),RKr.forEach(t),V7o=r(R6e," \u2014 "),Hj=s(R6e,"A",{href:!0});var SKr=n(Hj);z7o=r(SKr,"AlbertForTokenClassification"),SKr.forEach(t),W7o=r(R6e," (ALBERT model)"),R6e.forEach(t),Q7o=i(q),Ev=s(q,"LI",{});var S6e=n(Ev);Vse=s(S6e,"STRONG",{});var PKr=n(Vse);H7o=r(PKr,"bert"),PKr.forEach(t),U7o=r(S6e," \u2014 "),Uj=s(S6e,"A",{href:!0});var $Kr=n(Uj);J7o=r($Kr,"BertForTokenClassification"),$Kr.forEach(t),Y7o=r(S6e," (BERT model)"),S6e.forEach(t),K7o=i(q),yv=s(q,"LI",{});var P6e=n(yv);zse=s(P6e,"STRONG",{});var IKr=n(zse);Z7o=r(IKr,"big_bird"),IKr.forEach(t),e8o=r(P6e," \u2014 "),Jj=s(P6e,"A",{href:!0});var jKr=n(Jj);o8o=r(jKr,"BigBirdForTokenClassification"),jKr.forEach(t),r8o=r(P6e," (BigBird model)"),P6e.forEach(t),t8o=i(q),wv=s(q,"LI",{});var $6e=n(wv);Wse=s($6e,"STRONG",{});var DKr=n(Wse);a8o=r(DKr,"camembert"),DKr.forEach(t),s8o=r($6e," \u2014 "),Yj=s($6e,"A",{href:!0});var NKr=n(Yj);n8o=r(NKr,"CamembertForTokenClassification"),NKr.forEach(t),l8o=r($6e," (CamemBERT model)"),$6e.forEach(t),i8o=i(q),Av=s(q,"LI",{});var I6e=n(Av);Qse=s(I6e,"STRONG",{});var qKr=n(Qse);d8o=r(qKr,"canine"),qKr.forEach(t),c8o=r(I6e," \u2014 "),Kj=s(I6e,"A",{href:!0});var OKr=n(Kj);m8o=r(OKr,"CanineForTokenClassification"),OKr.forEach(t),f8o=r(I6e," (Canine model)"),I6e.forEach(t),g8o=i(q),Lv=s(q,"LI",{});var j6e=n(Lv);Hse=s(j6e,"STRONG",{});var GKr=n(Hse);h8o=r(GKr,"convbert"),GKr.forEach(t),u8o=r(j6e," \u2014 "),Zj=s(j6e,"A",{href:!0});var XKr=n(Zj);p8o=r(XKr,"ConvBertForTokenClassification"),XKr.forEach(t),_8o=r(j6e," (ConvBERT model)"),j6e.forEach(t),b8o=i(q),Bv=s(q,"LI",{});var D6e=n(Bv);Use=s(D6e,"STRONG",{});var VKr=n(Use);v8o=r(VKr,"data2vec-text"),VKr.forEach(t),T8o=r(D6e," \u2014 "),eD=s(D6e,"A",{href:!0});var zKr=n(eD);F8o=r(zKr,"Data2VecTextForTokenClassification"),zKr.forEach(t),C8o=r(D6e," (Data2VecText model)"),D6e.forEach(t),M8o=i(q),xv=s(q,"LI",{});var N6e=n(xv);Jse=s(N6e,"STRONG",{});var WKr=n(Jse);E8o=r(WKr,"deberta"),WKr.forEach(t),y8o=r(N6e," \u2014 "),oD=s(N6e,"A",{href:!0});var QKr=n(oD);w8o=r(QKr,"DebertaForTokenClassification"),QKr.forEach(t),A8o=r(N6e," (DeBERTa model)"),N6e.forEach(t),L8o=i(q),kv=s(q,"LI",{});var q6e=n(kv);Yse=s(q6e,"STRONG",{});var HKr=n(Yse);B8o=r(HKr,"deberta-v2"),HKr.forEach(t),x8o=r(q6e," \u2014 "),rD=s(q6e,"A",{href:!0});var UKr=n(rD);k8o=r(UKr,"DebertaV2ForTokenClassification"),UKr.forEach(t),R8o=r(q6e," (DeBERTa-v2 model)"),q6e.forEach(t),S8o=i(q),Rv=s(q,"LI",{});var O6e=n(Rv);Kse=s(O6e,"STRONG",{});var JKr=n(Kse);P8o=r(JKr,"distilbert"),JKr.forEach(t),$8o=r(O6e," \u2014 "),tD=s(O6e,"A",{href:!0});var YKr=n(tD);I8o=r(YKr,"DistilBertForTokenClassification"),YKr.forEach(t),j8o=r(O6e," (DistilBERT model)"),O6e.forEach(t),D8o=i(q),Sv=s(q,"LI",{});var G6e=n(Sv);Zse=s(G6e,"STRONG",{});var KKr=n(Zse);N8o=r(KKr,"electra"),KKr.forEach(t),q8o=r(G6e," \u2014 "),aD=s(G6e,"A",{href:!0});var ZKr=n(aD);O8o=r(ZKr,"ElectraForTokenClassification"),ZKr.forEach(t),G8o=r(G6e," (ELECTRA model)"),G6e.forEach(t),X8o=i(q),Pv=s(q,"LI",{});var X6e=n(Pv);ene=s(X6e,"STRONG",{});var eZr=n(ene);V8o=r(eZr,"flaubert"),eZr.forEach(t),z8o=r(X6e," \u2014 "),sD=s(X6e,"A",{href:!0});var oZr=n(sD);W8o=r(oZr,"FlaubertForTokenClassification"),oZr.forEach(t),Q8o=r(X6e," (FlauBERT model)"),X6e.forEach(t),H8o=i(q),$v=s(q,"LI",{});var V6e=n($v);one=s(V6e,"STRONG",{});var rZr=n(one);U8o=r(rZr,"fnet"),rZr.forEach(t),J8o=r(V6e," \u2014 "),nD=s(V6e,"A",{href:!0});var tZr=n(nD);Y8o=r(tZr,"FNetForTokenClassification"),tZr.forEach(t),K8o=r(V6e," (FNet model)"),V6e.forEach(t),Z8o=i(q),Iv=s(q,"LI",{});var z6e=n(Iv);rne=s(z6e,"STRONG",{});var aZr=n(rne);e9o=r(aZr,"funnel"),aZr.forEach(t),o9o=r(z6e," \u2014 "),lD=s(z6e,"A",{href:!0});var sZr=n(lD);r9o=r(sZr,"FunnelForTokenClassification"),sZr.forEach(t),t9o=r(z6e," (Funnel Transformer model)"),z6e.forEach(t),a9o=i(q),jv=s(q,"LI",{});var W6e=n(jv);tne=s(W6e,"STRONG",{});var nZr=n(tne);s9o=r(nZr,"gpt2"),nZr.forEach(t),n9o=r(W6e," \u2014 "),iD=s(W6e,"A",{href:!0});var lZr=n(iD);l9o=r(lZr,"GPT2ForTokenClassification"),lZr.forEach(t),i9o=r(W6e," (OpenAI GPT-2 model)"),W6e.forEach(t),d9o=i(q),Dv=s(q,"LI",{});var Q6e=n(Dv);ane=s(Q6e,"STRONG",{});var iZr=n(ane);c9o=r(iZr,"ibert"),iZr.forEach(t),m9o=r(Q6e," \u2014 "),dD=s(Q6e,"A",{href:!0});var dZr=n(dD);f9o=r(dZr,"IBertForTokenClassification"),dZr.forEach(t),g9o=r(Q6e," (I-BERT model)"),Q6e.forEach(t),h9o=i(q),Nv=s(q,"LI",{});var H6e=n(Nv);sne=s(H6e,"STRONG",{});var cZr=n(sne);u9o=r(cZr,"layoutlm"),cZr.forEach(t),p9o=r(H6e," \u2014 "),cD=s(H6e,"A",{href:!0});var mZr=n(cD);_9o=r(mZr,"LayoutLMForTokenClassification"),mZr.forEach(t),b9o=r(H6e," (LayoutLM model)"),H6e.forEach(t),v9o=i(q),qv=s(q,"LI",{});var U6e=n(qv);nne=s(U6e,"STRONG",{});var fZr=n(nne);T9o=r(fZr,"layoutlmv2"),fZr.forEach(t),F9o=r(U6e," \u2014 "),mD=s(U6e,"A",{href:!0});var gZr=n(mD);C9o=r(gZr,"LayoutLMv2ForTokenClassification"),gZr.forEach(t),M9o=r(U6e," (LayoutLMv2 model)"),U6e.forEach(t),E9o=i(q),Ov=s(q,"LI",{});var J6e=n(Ov);lne=s(J6e,"STRONG",{});var hZr=n(lne);y9o=r(hZr,"longformer"),hZr.forEach(t),w9o=r(J6e," \u2014 "),fD=s(J6e,"A",{href:!0});var uZr=n(fD);A9o=r(uZr,"LongformerForTokenClassification"),uZr.forEach(t),L9o=r(J6e," (Longformer model)"),J6e.forEach(t),B9o=i(q),Gv=s(q,"LI",{});var Y6e=n(Gv);ine=s(Y6e,"STRONG",{});var pZr=n(ine);x9o=r(pZr,"megatron-bert"),pZr.forEach(t),k9o=r(Y6e," \u2014 "),gD=s(Y6e,"A",{href:!0});var _Zr=n(gD);R9o=r(_Zr,"MegatronBertForTokenClassification"),_Zr.forEach(t),S9o=r(Y6e," (MegatronBert model)"),Y6e.forEach(t),P9o=i(q),Xv=s(q,"LI",{});var K6e=n(Xv);dne=s(K6e,"STRONG",{});var bZr=n(dne);$9o=r(bZr,"mobilebert"),bZr.forEach(t),I9o=r(K6e," \u2014 "),hD=s(K6e,"A",{href:!0});var vZr=n(hD);j9o=r(vZr,"MobileBertForTokenClassification"),vZr.forEach(t),D9o=r(K6e," (MobileBERT model)"),K6e.forEach(t),N9o=i(q),Vv=s(q,"LI",{});var Z6e=n(Vv);cne=s(Z6e,"STRONG",{});var TZr=n(cne);q9o=r(TZr,"mpnet"),TZr.forEach(t),O9o=r(Z6e," \u2014 "),uD=s(Z6e,"A",{href:!0});var FZr=n(uD);G9o=r(FZr,"MPNetForTokenClassification"),FZr.forEach(t),X9o=r(Z6e," (MPNet model)"),Z6e.forEach(t),V9o=i(q),zv=s(q,"LI",{});var eAe=n(zv);mne=s(eAe,"STRONG",{});var CZr=n(mne);z9o=r(CZr,"nystromformer"),CZr.forEach(t),W9o=r(eAe," \u2014 "),pD=s(eAe,"A",{href:!0});var MZr=n(pD);Q9o=r(MZr,"NystromformerForTokenClassification"),MZr.forEach(t),H9o=r(eAe," (Nystromformer model)"),eAe.forEach(t),U9o=i(q),Wv=s(q,"LI",{});var oAe=n(Wv);fne=s(oAe,"STRONG",{});var EZr=n(fne);J9o=r(EZr,"qdqbert"),EZr.forEach(t),Y9o=r(oAe," \u2014 "),_D=s(oAe,"A",{href:!0});var yZr=n(_D);K9o=r(yZr,"QDQBertForTokenClassification"),yZr.forEach(t),Z9o=r(oAe," (QDQBert model)"),oAe.forEach(t),eBo=i(q),Qv=s(q,"LI",{});var rAe=n(Qv);gne=s(rAe,"STRONG",{});var wZr=n(gne);oBo=r(wZr,"rembert"),wZr.forEach(t),rBo=r(rAe," \u2014 "),bD=s(rAe,"A",{href:!0});var AZr=n(bD);tBo=r(AZr,"RemBertForTokenClassification"),AZr.forEach(t),aBo=r(rAe," (RemBERT model)"),rAe.forEach(t),sBo=i(q),Hv=s(q,"LI",{});var tAe=n(Hv);hne=s(tAe,"STRONG",{});var LZr=n(hne);nBo=r(LZr,"roberta"),LZr.forEach(t),lBo=r(tAe," \u2014 "),vD=s(tAe,"A",{href:!0});var BZr=n(vD);iBo=r(BZr,"RobertaForTokenClassification"),BZr.forEach(t),dBo=r(tAe," (RoBERTa model)"),tAe.forEach(t),cBo=i(q),Uv=s(q,"LI",{});var aAe=n(Uv);une=s(aAe,"STRONG",{});var xZr=n(une);mBo=r(xZr,"roformer"),xZr.forEach(t),fBo=r(aAe," \u2014 "),TD=s(aAe,"A",{href:!0});var kZr=n(TD);gBo=r(kZr,"RoFormerForTokenClassification"),kZr.forEach(t),hBo=r(aAe," (RoFormer model)"),aAe.forEach(t),uBo=i(q),Jv=s(q,"LI",{});var sAe=n(Jv);pne=s(sAe,"STRONG",{});var RZr=n(pne);pBo=r(RZr,"squeezebert"),RZr.forEach(t),_Bo=r(sAe," \u2014 "),FD=s(sAe,"A",{href:!0});var SZr=n(FD);bBo=r(SZr,"SqueezeBertForTokenClassification"),SZr.forEach(t),vBo=r(sAe," (SqueezeBERT model)"),sAe.forEach(t),TBo=i(q),Yv=s(q,"LI",{});var nAe=n(Yv);_ne=s(nAe,"STRONG",{});var PZr=n(_ne);FBo=r(PZr,"xlm"),PZr.forEach(t),CBo=r(nAe," \u2014 "),CD=s(nAe,"A",{href:!0});var $Zr=n(CD);MBo=r($Zr,"XLMForTokenClassification"),$Zr.forEach(t),EBo=r(nAe," (XLM model)"),nAe.forEach(t),yBo=i(q),Kv=s(q,"LI",{});var lAe=n(Kv);bne=s(lAe,"STRONG",{});var IZr=n(bne);wBo=r(IZr,"xlm-roberta"),IZr.forEach(t),ABo=r(lAe," \u2014 "),MD=s(lAe,"A",{href:!0});var jZr=n(MD);LBo=r(jZr,"XLMRobertaForTokenClassification"),jZr.forEach(t),BBo=r(lAe," (XLM-RoBERTa model)"),lAe.forEach(t),xBo=i(q),Zv=s(q,"LI",{});var iAe=n(Zv);vne=s(iAe,"STRONG",{});var DZr=n(vne);kBo=r(DZr,"xlm-roberta-xl"),DZr.forEach(t),RBo=r(iAe," \u2014 "),ED=s(iAe,"A",{href:!0});var NZr=n(ED);SBo=r(NZr,"XLMRobertaXLForTokenClassification"),NZr.forEach(t),PBo=r(iAe," (XLM-RoBERTa-XL model)"),iAe.forEach(t),$Bo=i(q),eT=s(q,"LI",{});var dAe=n(eT);Tne=s(dAe,"STRONG",{});var qZr=n(Tne);IBo=r(qZr,"xlnet"),qZr.forEach(t),jBo=r(dAe," \u2014 "),yD=s(dAe,"A",{href:!0});var OZr=n(yD);DBo=r(OZr,"XLNetForTokenClassification"),OZr.forEach(t),NBo=r(dAe," (XLNet model)"),dAe.forEach(t),qBo=i(q),oT=s(q,"LI",{});var cAe=n(oT);Fne=s(cAe,"STRONG",{});var GZr=n(Fne);OBo=r(GZr,"yoso"),GZr.forEach(t),GBo=r(cAe," \u2014 "),wD=s(cAe,"A",{href:!0});var XZr=n(wD);XBo=r(XZr,"YosoForTokenClassification"),XZr.forEach(t),VBo=r(cAe," (YOSO model)"),cAe.forEach(t),q.forEach(t),zBo=i(Ht),rT=s(Ht,"P",{});var mAe=n(rT);WBo=r(mAe,"The model is set in evaluation mode by default using "),Cne=s(mAe,"CODE",{});var VZr=n(Cne);QBo=r(VZr,"model.eval()"),VZr.forEach(t),HBo=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=s(mAe,"CODE",{});var zZr=n(Mne);UBo=r(zZr,"model.train()"),zZr.forEach(t),mAe.forEach(t),JBo=i(Ht),Ene=s(Ht,"P",{});var WZr=n(Ene);YBo=r(WZr,"Examples:"),WZr.forEach(t),KBo=i(Ht),f(Nw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Zxe=i(c),Ed=s(c,"H2",{class:!0});var iSe=n(Ed);tT=s(iSe,"A",{id:!0,class:!0,href:!0});var QZr=n(tT);yne=s(QZr,"SPAN",{});var HZr=n(yne);f(qw.$$.fragment,HZr),HZr.forEach(t),QZr.forEach(t),ZBo=i(iSe),wne=s(iSe,"SPAN",{});var UZr=n(wne);exo=r(UZr,"AutoModelForQuestionAnswering"),UZr.forEach(t),iSe.forEach(t),eke=i(c),sr=s(c,"DIV",{class:!0});var ml=n(sr);f(Ow.$$.fragment,ml),oxo=i(ml),yd=s(ml,"P",{});var Yz=n(yd);rxo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ane=s(Yz,"CODE",{});var JZr=n(Ane);txo=r(JZr,"from_pretrained()"),JZr.forEach(t),axo=r(Yz,"class method or the "),Lne=s(Yz,"CODE",{});var YZr=n(Lne);sxo=r(YZr,"from_config()"),YZr.forEach(t),nxo=r(Yz,`class
method.`),Yz.forEach(t),lxo=i(ml),Gw=s(ml,"P",{});var dSe=n(Gw);ixo=r(dSe,"This class cannot be instantiated directly using "),Bne=s(dSe,"CODE",{});var KZr=n(Bne);dxo=r(KZr,"__init__()"),KZr.forEach(t),cxo=r(dSe," (throws an error)."),dSe.forEach(t),mxo=i(ml),Zr=s(ml,"DIV",{class:!0});var fl=n(Zr);f(Xw.$$.fragment,fl),fxo=i(fl),xne=s(fl,"P",{});var ZZr=n(xne);gxo=r(ZZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZZr.forEach(t),hxo=i(fl),wd=s(fl,"P",{});var Kz=n(wd);uxo=r(Kz,`Note:
Loading a model from its configuration file does `),kne=s(Kz,"STRONG",{});var eet=n(kne);pxo=r(eet,"not"),eet.forEach(t),_xo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rne=s(Kz,"CODE",{});var oet=n(Rne);bxo=r(oet,"from_pretrained()"),oet.forEach(t),vxo=r(Kz,"to load the model weights."),Kz.forEach(t),Txo=i(fl),Sne=s(fl,"P",{});var ret=n(Sne);Fxo=r(ret,"Examples:"),ret.forEach(t),Cxo=i(fl),f(Vw.$$.fragment,fl),fl.forEach(t),Mxo=i(ml),Qe=s(ml,"DIV",{class:!0});var Ut=n(Qe);f(zw.$$.fragment,Ut),Exo=i(Ut),Pne=s(Ut,"P",{});var tet=n(Pne);yxo=r(tet,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tet.forEach(t),wxo=i(Ut),Za=s(Ut,"P",{});var c5=n(Za);Axo=r(c5,"The model class to instantiate is selected based on the "),$ne=s(c5,"CODE",{});var aet=n($ne);Lxo=r(aet,"model_type"),aet.forEach(t),Bxo=r(c5,` property of the config object (either
passed as an argument or loaded from `),Ine=s(c5,"CODE",{});var set=n(Ine);xxo=r(set,"pretrained_model_name_or_path"),set.forEach(t),kxo=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=s(c5,"CODE",{});var net=n(jne);Rxo=r(net,"pretrained_model_name_or_path"),net.forEach(t),Sxo=r(c5,":"),c5.forEach(t),Pxo=i(Ut),R=s(Ut,"UL",{});var P=n(R);aT=s(P,"LI",{});var fAe=n(aT);Dne=s(fAe,"STRONG",{});var iet=n(Dne);$xo=r(iet,"albert"),iet.forEach(t),Ixo=r(fAe," \u2014 "),AD=s(fAe,"A",{href:!0});var det=n(AD);jxo=r(det,"AlbertForQuestionAnswering"),det.forEach(t),Dxo=r(fAe," (ALBERT model)"),fAe.forEach(t),Nxo=i(P),sT=s(P,"LI",{});var gAe=n(sT);Nne=s(gAe,"STRONG",{});var cet=n(Nne);qxo=r(cet,"bart"),cet.forEach(t),Oxo=r(gAe," \u2014 "),LD=s(gAe,"A",{href:!0});var met=n(LD);Gxo=r(met,"BartForQuestionAnswering"),met.forEach(t),Xxo=r(gAe," (BART model)"),gAe.forEach(t),Vxo=i(P),nT=s(P,"LI",{});var hAe=n(nT);qne=s(hAe,"STRONG",{});var fet=n(qne);zxo=r(fet,"bert"),fet.forEach(t),Wxo=r(hAe," \u2014 "),BD=s(hAe,"A",{href:!0});var get=n(BD);Qxo=r(get,"BertForQuestionAnswering"),get.forEach(t),Hxo=r(hAe," (BERT model)"),hAe.forEach(t),Uxo=i(P),lT=s(P,"LI",{});var uAe=n(lT);One=s(uAe,"STRONG",{});var het=n(One);Jxo=r(het,"big_bird"),het.forEach(t),Yxo=r(uAe," \u2014 "),xD=s(uAe,"A",{href:!0});var uet=n(xD);Kxo=r(uet,"BigBirdForQuestionAnswering"),uet.forEach(t),Zxo=r(uAe," (BigBird model)"),uAe.forEach(t),eko=i(P),iT=s(P,"LI",{});var pAe=n(iT);Gne=s(pAe,"STRONG",{});var pet=n(Gne);oko=r(pet,"bigbird_pegasus"),pet.forEach(t),rko=r(pAe," \u2014 "),kD=s(pAe,"A",{href:!0});var _et=n(kD);tko=r(_et,"BigBirdPegasusForQuestionAnswering"),_et.forEach(t),ako=r(pAe," (BigBirdPegasus model)"),pAe.forEach(t),sko=i(P),dT=s(P,"LI",{});var _Ae=n(dT);Xne=s(_Ae,"STRONG",{});var bet=n(Xne);nko=r(bet,"camembert"),bet.forEach(t),lko=r(_Ae," \u2014 "),RD=s(_Ae,"A",{href:!0});var vet=n(RD);iko=r(vet,"CamembertForQuestionAnswering"),vet.forEach(t),dko=r(_Ae," (CamemBERT model)"),_Ae.forEach(t),cko=i(P),cT=s(P,"LI",{});var bAe=n(cT);Vne=s(bAe,"STRONG",{});var Tet=n(Vne);mko=r(Tet,"canine"),Tet.forEach(t),fko=r(bAe," \u2014 "),SD=s(bAe,"A",{href:!0});var Fet=n(SD);gko=r(Fet,"CanineForQuestionAnswering"),Fet.forEach(t),hko=r(bAe," (Canine model)"),bAe.forEach(t),uko=i(P),mT=s(P,"LI",{});var vAe=n(mT);zne=s(vAe,"STRONG",{});var Cet=n(zne);pko=r(Cet,"convbert"),Cet.forEach(t),_ko=r(vAe," \u2014 "),PD=s(vAe,"A",{href:!0});var Met=n(PD);bko=r(Met,"ConvBertForQuestionAnswering"),Met.forEach(t),vko=r(vAe," (ConvBERT model)"),vAe.forEach(t),Tko=i(P),fT=s(P,"LI",{});var TAe=n(fT);Wne=s(TAe,"STRONG",{});var Eet=n(Wne);Fko=r(Eet,"data2vec-text"),Eet.forEach(t),Cko=r(TAe," \u2014 "),$D=s(TAe,"A",{href:!0});var yet=n($D);Mko=r(yet,"Data2VecTextForQuestionAnswering"),yet.forEach(t),Eko=r(TAe," (Data2VecText model)"),TAe.forEach(t),yko=i(P),gT=s(P,"LI",{});var FAe=n(gT);Qne=s(FAe,"STRONG",{});var wet=n(Qne);wko=r(wet,"deberta"),wet.forEach(t),Ako=r(FAe," \u2014 "),ID=s(FAe,"A",{href:!0});var Aet=n(ID);Lko=r(Aet,"DebertaForQuestionAnswering"),Aet.forEach(t),Bko=r(FAe," (DeBERTa model)"),FAe.forEach(t),xko=i(P),hT=s(P,"LI",{});var CAe=n(hT);Hne=s(CAe,"STRONG",{});var Let=n(Hne);kko=r(Let,"deberta-v2"),Let.forEach(t),Rko=r(CAe," \u2014 "),jD=s(CAe,"A",{href:!0});var Bet=n(jD);Sko=r(Bet,"DebertaV2ForQuestionAnswering"),Bet.forEach(t),Pko=r(CAe," (DeBERTa-v2 model)"),CAe.forEach(t),$ko=i(P),uT=s(P,"LI",{});var MAe=n(uT);Une=s(MAe,"STRONG",{});var xet=n(Une);Iko=r(xet,"distilbert"),xet.forEach(t),jko=r(MAe," \u2014 "),DD=s(MAe,"A",{href:!0});var ket=n(DD);Dko=r(ket,"DistilBertForQuestionAnswering"),ket.forEach(t),Nko=r(MAe," (DistilBERT model)"),MAe.forEach(t),qko=i(P),pT=s(P,"LI",{});var EAe=n(pT);Jne=s(EAe,"STRONG",{});var Ret=n(Jne);Oko=r(Ret,"electra"),Ret.forEach(t),Gko=r(EAe," \u2014 "),ND=s(EAe,"A",{href:!0});var Set=n(ND);Xko=r(Set,"ElectraForQuestionAnswering"),Set.forEach(t),Vko=r(EAe," (ELECTRA model)"),EAe.forEach(t),zko=i(P),_T=s(P,"LI",{});var yAe=n(_T);Yne=s(yAe,"STRONG",{});var Pet=n(Yne);Wko=r(Pet,"flaubert"),Pet.forEach(t),Qko=r(yAe," \u2014 "),qD=s(yAe,"A",{href:!0});var $et=n(qD);Hko=r($et,"FlaubertForQuestionAnsweringSimple"),$et.forEach(t),Uko=r(yAe," (FlauBERT model)"),yAe.forEach(t),Jko=i(P),bT=s(P,"LI",{});var wAe=n(bT);Kne=s(wAe,"STRONG",{});var Iet=n(Kne);Yko=r(Iet,"fnet"),Iet.forEach(t),Kko=r(wAe," \u2014 "),OD=s(wAe,"A",{href:!0});var jet=n(OD);Zko=r(jet,"FNetForQuestionAnswering"),jet.forEach(t),eRo=r(wAe," (FNet model)"),wAe.forEach(t),oRo=i(P),vT=s(P,"LI",{});var AAe=n(vT);Zne=s(AAe,"STRONG",{});var Det=n(Zne);rRo=r(Det,"funnel"),Det.forEach(t),tRo=r(AAe," \u2014 "),GD=s(AAe,"A",{href:!0});var Net=n(GD);aRo=r(Net,"FunnelForQuestionAnswering"),Net.forEach(t),sRo=r(AAe," (Funnel Transformer model)"),AAe.forEach(t),nRo=i(P),TT=s(P,"LI",{});var LAe=n(TT);ele=s(LAe,"STRONG",{});var qet=n(ele);lRo=r(qet,"gptj"),qet.forEach(t),iRo=r(LAe," \u2014 "),XD=s(LAe,"A",{href:!0});var Oet=n(XD);dRo=r(Oet,"GPTJForQuestionAnswering"),Oet.forEach(t),cRo=r(LAe," (GPT-J model)"),LAe.forEach(t),mRo=i(P),FT=s(P,"LI",{});var BAe=n(FT);ole=s(BAe,"STRONG",{});var Get=n(ole);fRo=r(Get,"ibert"),Get.forEach(t),gRo=r(BAe," \u2014 "),VD=s(BAe,"A",{href:!0});var Xet=n(VD);hRo=r(Xet,"IBertForQuestionAnswering"),Xet.forEach(t),uRo=r(BAe," (I-BERT model)"),BAe.forEach(t),pRo=i(P),CT=s(P,"LI",{});var xAe=n(CT);rle=s(xAe,"STRONG",{});var Vet=n(rle);_Ro=r(Vet,"layoutlmv2"),Vet.forEach(t),bRo=r(xAe," \u2014 "),zD=s(xAe,"A",{href:!0});var zet=n(zD);vRo=r(zet,"LayoutLMv2ForQuestionAnswering"),zet.forEach(t),TRo=r(xAe," (LayoutLMv2 model)"),xAe.forEach(t),FRo=i(P),MT=s(P,"LI",{});var kAe=n(MT);tle=s(kAe,"STRONG",{});var Wet=n(tle);CRo=r(Wet,"led"),Wet.forEach(t),MRo=r(kAe," \u2014 "),WD=s(kAe,"A",{href:!0});var Qet=n(WD);ERo=r(Qet,"LEDForQuestionAnswering"),Qet.forEach(t),yRo=r(kAe," (LED model)"),kAe.forEach(t),wRo=i(P),ET=s(P,"LI",{});var RAe=n(ET);ale=s(RAe,"STRONG",{});var Het=n(ale);ARo=r(Het,"longformer"),Het.forEach(t),LRo=r(RAe," \u2014 "),QD=s(RAe,"A",{href:!0});var Uet=n(QD);BRo=r(Uet,"LongformerForQuestionAnswering"),Uet.forEach(t),xRo=r(RAe," (Longformer model)"),RAe.forEach(t),kRo=i(P),yT=s(P,"LI",{});var SAe=n(yT);sle=s(SAe,"STRONG",{});var Jet=n(sle);RRo=r(Jet,"lxmert"),Jet.forEach(t),SRo=r(SAe," \u2014 "),HD=s(SAe,"A",{href:!0});var Yet=n(HD);PRo=r(Yet,"LxmertForQuestionAnswering"),Yet.forEach(t),$Ro=r(SAe," (LXMERT model)"),SAe.forEach(t),IRo=i(P),wT=s(P,"LI",{});var PAe=n(wT);nle=s(PAe,"STRONG",{});var Ket=n(nle);jRo=r(Ket,"mbart"),Ket.forEach(t),DRo=r(PAe," \u2014 "),UD=s(PAe,"A",{href:!0});var Zet=n(UD);NRo=r(Zet,"MBartForQuestionAnswering"),Zet.forEach(t),qRo=r(PAe," (mBART model)"),PAe.forEach(t),ORo=i(P),AT=s(P,"LI",{});var $Ae=n(AT);lle=s($Ae,"STRONG",{});var eot=n(lle);GRo=r(eot,"megatron-bert"),eot.forEach(t),XRo=r($Ae," \u2014 "),JD=s($Ae,"A",{href:!0});var oot=n(JD);VRo=r(oot,"MegatronBertForQuestionAnswering"),oot.forEach(t),zRo=r($Ae," (MegatronBert model)"),$Ae.forEach(t),WRo=i(P),LT=s(P,"LI",{});var IAe=n(LT);ile=s(IAe,"STRONG",{});var rot=n(ile);QRo=r(rot,"mobilebert"),rot.forEach(t),HRo=r(IAe," \u2014 "),YD=s(IAe,"A",{href:!0});var tot=n(YD);URo=r(tot,"MobileBertForQuestionAnswering"),tot.forEach(t),JRo=r(IAe," (MobileBERT model)"),IAe.forEach(t),YRo=i(P),BT=s(P,"LI",{});var jAe=n(BT);dle=s(jAe,"STRONG",{});var aot=n(dle);KRo=r(aot,"mpnet"),aot.forEach(t),ZRo=r(jAe," \u2014 "),KD=s(jAe,"A",{href:!0});var sot=n(KD);eSo=r(sot,"MPNetForQuestionAnswering"),sot.forEach(t),oSo=r(jAe," (MPNet model)"),jAe.forEach(t),rSo=i(P),xT=s(P,"LI",{});var DAe=n(xT);cle=s(DAe,"STRONG",{});var not=n(cle);tSo=r(not,"nystromformer"),not.forEach(t),aSo=r(DAe," \u2014 "),ZD=s(DAe,"A",{href:!0});var lot=n(ZD);sSo=r(lot,"NystromformerForQuestionAnswering"),lot.forEach(t),nSo=r(DAe," (Nystromformer model)"),DAe.forEach(t),lSo=i(P),kT=s(P,"LI",{});var NAe=n(kT);mle=s(NAe,"STRONG",{});var iot=n(mle);iSo=r(iot,"qdqbert"),iot.forEach(t),dSo=r(NAe," \u2014 "),eN=s(NAe,"A",{href:!0});var dot=n(eN);cSo=r(dot,"QDQBertForQuestionAnswering"),dot.forEach(t),mSo=r(NAe," (QDQBert model)"),NAe.forEach(t),fSo=i(P),RT=s(P,"LI",{});var qAe=n(RT);fle=s(qAe,"STRONG",{});var cot=n(fle);gSo=r(cot,"reformer"),cot.forEach(t),hSo=r(qAe," \u2014 "),oN=s(qAe,"A",{href:!0});var mot=n(oN);uSo=r(mot,"ReformerForQuestionAnswering"),mot.forEach(t),pSo=r(qAe," (Reformer model)"),qAe.forEach(t),_So=i(P),ST=s(P,"LI",{});var OAe=n(ST);gle=s(OAe,"STRONG",{});var fot=n(gle);bSo=r(fot,"rembert"),fot.forEach(t),vSo=r(OAe," \u2014 "),rN=s(OAe,"A",{href:!0});var got=n(rN);TSo=r(got,"RemBertForQuestionAnswering"),got.forEach(t),FSo=r(OAe," (RemBERT model)"),OAe.forEach(t),CSo=i(P),PT=s(P,"LI",{});var GAe=n(PT);hle=s(GAe,"STRONG",{});var hot=n(hle);MSo=r(hot,"roberta"),hot.forEach(t),ESo=r(GAe," \u2014 "),tN=s(GAe,"A",{href:!0});var uot=n(tN);ySo=r(uot,"RobertaForQuestionAnswering"),uot.forEach(t),wSo=r(GAe," (RoBERTa model)"),GAe.forEach(t),ASo=i(P),$T=s(P,"LI",{});var XAe=n($T);ule=s(XAe,"STRONG",{});var pot=n(ule);LSo=r(pot,"roformer"),pot.forEach(t),BSo=r(XAe," \u2014 "),aN=s(XAe,"A",{href:!0});var _ot=n(aN);xSo=r(_ot,"RoFormerForQuestionAnswering"),_ot.forEach(t),kSo=r(XAe," (RoFormer model)"),XAe.forEach(t),RSo=i(P),IT=s(P,"LI",{});var VAe=n(IT);ple=s(VAe,"STRONG",{});var bot=n(ple);SSo=r(bot,"splinter"),bot.forEach(t),PSo=r(VAe," \u2014 "),sN=s(VAe,"A",{href:!0});var vot=n(sN);$So=r(vot,"SplinterForQuestionAnswering"),vot.forEach(t),ISo=r(VAe," (Splinter model)"),VAe.forEach(t),jSo=i(P),jT=s(P,"LI",{});var zAe=n(jT);_le=s(zAe,"STRONG",{});var Tot=n(_le);DSo=r(Tot,"squeezebert"),Tot.forEach(t),NSo=r(zAe," \u2014 "),nN=s(zAe,"A",{href:!0});var Fot=n(nN);qSo=r(Fot,"SqueezeBertForQuestionAnswering"),Fot.forEach(t),OSo=r(zAe," (SqueezeBERT model)"),zAe.forEach(t),GSo=i(P),DT=s(P,"LI",{});var WAe=n(DT);ble=s(WAe,"STRONG",{});var Cot=n(ble);XSo=r(Cot,"xlm"),Cot.forEach(t),VSo=r(WAe," \u2014 "),lN=s(WAe,"A",{href:!0});var Mot=n(lN);zSo=r(Mot,"XLMForQuestionAnsweringSimple"),Mot.forEach(t),WSo=r(WAe," (XLM model)"),WAe.forEach(t),QSo=i(P),NT=s(P,"LI",{});var QAe=n(NT);vle=s(QAe,"STRONG",{});var Eot=n(vle);HSo=r(Eot,"xlm-roberta"),Eot.forEach(t),USo=r(QAe," \u2014 "),iN=s(QAe,"A",{href:!0});var yot=n(iN);JSo=r(yot,"XLMRobertaForQuestionAnswering"),yot.forEach(t),YSo=r(QAe," (XLM-RoBERTa model)"),QAe.forEach(t),KSo=i(P),qT=s(P,"LI",{});var HAe=n(qT);Tle=s(HAe,"STRONG",{});var wot=n(Tle);ZSo=r(wot,"xlm-roberta-xl"),wot.forEach(t),ePo=r(HAe," \u2014 "),dN=s(HAe,"A",{href:!0});var Aot=n(dN);oPo=r(Aot,"XLMRobertaXLForQuestionAnswering"),Aot.forEach(t),rPo=r(HAe," (XLM-RoBERTa-XL model)"),HAe.forEach(t),tPo=i(P),OT=s(P,"LI",{});var UAe=n(OT);Fle=s(UAe,"STRONG",{});var Lot=n(Fle);aPo=r(Lot,"xlnet"),Lot.forEach(t),sPo=r(UAe," \u2014 "),cN=s(UAe,"A",{href:!0});var Bot=n(cN);nPo=r(Bot,"XLNetForQuestionAnsweringSimple"),Bot.forEach(t),lPo=r(UAe," (XLNet model)"),UAe.forEach(t),iPo=i(P),GT=s(P,"LI",{});var JAe=n(GT);Cle=s(JAe,"STRONG",{});var xot=n(Cle);dPo=r(xot,"yoso"),xot.forEach(t),cPo=r(JAe," \u2014 "),mN=s(JAe,"A",{href:!0});var kot=n(mN);mPo=r(kot,"YosoForQuestionAnswering"),kot.forEach(t),fPo=r(JAe," (YOSO model)"),JAe.forEach(t),P.forEach(t),gPo=i(Ut),XT=s(Ut,"P",{});var YAe=n(XT);hPo=r(YAe,"The model is set in evaluation mode by default using "),Mle=s(YAe,"CODE",{});var Rot=n(Mle);uPo=r(Rot,"model.eval()"),Rot.forEach(t),pPo=r(YAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=s(YAe,"CODE",{});var Sot=n(Ele);_Po=r(Sot,"model.train()"),Sot.forEach(t),YAe.forEach(t),bPo=i(Ut),yle=s(Ut,"P",{});var Pot=n(yle);vPo=r(Pot,"Examples:"),Pot.forEach(t),TPo=i(Ut),f(Ww.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),oke=i(c),Ad=s(c,"H2",{class:!0});var cSe=n(Ad);VT=s(cSe,"A",{id:!0,class:!0,href:!0});var $ot=n(VT);wle=s($ot,"SPAN",{});var Iot=n(wle);f(Qw.$$.fragment,Iot),Iot.forEach(t),$ot.forEach(t),FPo=i(cSe),Ale=s(cSe,"SPAN",{});var jot=n(Ale);CPo=r(jot,"AutoModelForTableQuestionAnswering"),jot.forEach(t),cSe.forEach(t),rke=i(c),nr=s(c,"DIV",{class:!0});var gl=n(nr);f(Hw.$$.fragment,gl),MPo=i(gl),Ld=s(gl,"P",{});var Zz=n(Ld);EPo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lle=s(Zz,"CODE",{});var Dot=n(Lle);yPo=r(Dot,"from_pretrained()"),Dot.forEach(t),wPo=r(Zz,"class method or the "),Ble=s(Zz,"CODE",{});var Not=n(Ble);APo=r(Not,"from_config()"),Not.forEach(t),LPo=r(Zz,`class
method.`),Zz.forEach(t),BPo=i(gl),Uw=s(gl,"P",{});var mSe=n(Uw);xPo=r(mSe,"This class cannot be instantiated directly using "),xle=s(mSe,"CODE",{});var qot=n(xle);kPo=r(qot,"__init__()"),qot.forEach(t),RPo=r(mSe," (throws an error)."),mSe.forEach(t),SPo=i(gl),et=s(gl,"DIV",{class:!0});var hl=n(et);f(Jw.$$.fragment,hl),PPo=i(hl),kle=s(hl,"P",{});var Oot=n(kle);$Po=r(Oot,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Oot.forEach(t),IPo=i(hl),Bd=s(hl,"P",{});var eW=n(Bd);jPo=r(eW,`Note:
Loading a model from its configuration file does `),Rle=s(eW,"STRONG",{});var Got=n(Rle);DPo=r(Got,"not"),Got.forEach(t),NPo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=s(eW,"CODE",{});var Xot=n(Sle);qPo=r(Xot,"from_pretrained()"),Xot.forEach(t),OPo=r(eW,"to load the model weights."),eW.forEach(t),GPo=i(hl),Ple=s(hl,"P",{});var Vot=n(Ple);XPo=r(Vot,"Examples:"),Vot.forEach(t),VPo=i(hl),f(Yw.$$.fragment,hl),hl.forEach(t),zPo=i(gl),He=s(gl,"DIV",{class:!0});var Jt=n(He);f(Kw.$$.fragment,Jt),WPo=i(Jt),$le=s(Jt,"P",{});var zot=n($le);QPo=r(zot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zot.forEach(t),HPo=i(Jt),es=s(Jt,"P",{});var m5=n(es);UPo=r(m5,"The model class to instantiate is selected based on the "),Ile=s(m5,"CODE",{});var Wot=n(Ile);JPo=r(Wot,"model_type"),Wot.forEach(t),YPo=r(m5,` property of the config object (either
passed as an argument or loaded from `),jle=s(m5,"CODE",{});var Qot=n(jle);KPo=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),ZPo=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=s(m5,"CODE",{});var Hot=n(Dle);e$o=r(Hot,"pretrained_model_name_or_path"),Hot.forEach(t),o$o=r(m5,":"),m5.forEach(t),r$o=i(Jt),Nle=s(Jt,"UL",{});var Uot=n(Nle);zT=s(Uot,"LI",{});var KAe=n(zT);qle=s(KAe,"STRONG",{});var Jot=n(qle);t$o=r(Jot,"tapas"),Jot.forEach(t),a$o=r(KAe," \u2014 "),fN=s(KAe,"A",{href:!0});var Yot=n(fN);s$o=r(Yot,"TapasForQuestionAnswering"),Yot.forEach(t),n$o=r(KAe," (TAPAS model)"),KAe.forEach(t),Uot.forEach(t),l$o=i(Jt),WT=s(Jt,"P",{});var ZAe=n(WT);i$o=r(ZAe,"The model is set in evaluation mode by default using "),Ole=s(ZAe,"CODE",{});var Kot=n(Ole);d$o=r(Kot,"model.eval()"),Kot.forEach(t),c$o=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=s(ZAe,"CODE",{});var Zot=n(Gle);m$o=r(Zot,"model.train()"),Zot.forEach(t),ZAe.forEach(t),f$o=i(Jt),Xle=s(Jt,"P",{});var ert=n(Xle);g$o=r(ert,"Examples:"),ert.forEach(t),h$o=i(Jt),f(Zw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),tke=i(c),xd=s(c,"H2",{class:!0});var fSe=n(xd);QT=s(fSe,"A",{id:!0,class:!0,href:!0});var ort=n(QT);Vle=s(ort,"SPAN",{});var rrt=n(Vle);f(e6.$$.fragment,rrt),rrt.forEach(t),ort.forEach(t),u$o=i(fSe),zle=s(fSe,"SPAN",{});var trt=n(zle);p$o=r(trt,"AutoModelForImageClassification"),trt.forEach(t),fSe.forEach(t),ake=i(c),lr=s(c,"DIV",{class:!0});var ul=n(lr);f(o6.$$.fragment,ul),_$o=i(ul),kd=s(ul,"P",{});var oW=n(kd);b$o=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wle=s(oW,"CODE",{});var art=n(Wle);v$o=r(art,"from_pretrained()"),art.forEach(t),T$o=r(oW,"class method or the "),Qle=s(oW,"CODE",{});var srt=n(Qle);F$o=r(srt,"from_config()"),srt.forEach(t),C$o=r(oW,`class
method.`),oW.forEach(t),M$o=i(ul),r6=s(ul,"P",{});var gSe=n(r6);E$o=r(gSe,"This class cannot be instantiated directly using "),Hle=s(gSe,"CODE",{});var nrt=n(Hle);y$o=r(nrt,"__init__()"),nrt.forEach(t),w$o=r(gSe," (throws an error)."),gSe.forEach(t),A$o=i(ul),ot=s(ul,"DIV",{class:!0});var pl=n(ot);f(t6.$$.fragment,pl),L$o=i(pl),Ule=s(pl,"P",{});var lrt=n(Ule);B$o=r(lrt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lrt.forEach(t),x$o=i(pl),Rd=s(pl,"P",{});var rW=n(Rd);k$o=r(rW,`Note:
Loading a model from its configuration file does `),Jle=s(rW,"STRONG",{});var irt=n(Jle);R$o=r(irt,"not"),irt.forEach(t),S$o=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=s(rW,"CODE",{});var drt=n(Yle);P$o=r(drt,"from_pretrained()"),drt.forEach(t),$$o=r(rW,"to load the model weights."),rW.forEach(t),I$o=i(pl),Kle=s(pl,"P",{});var crt=n(Kle);j$o=r(crt,"Examples:"),crt.forEach(t),D$o=i(pl),f(a6.$$.fragment,pl),pl.forEach(t),N$o=i(ul),Ue=s(ul,"DIV",{class:!0});var Yt=n(Ue);f(s6.$$.fragment,Yt),q$o=i(Yt),Zle=s(Yt,"P",{});var mrt=n(Zle);O$o=r(mrt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mrt.forEach(t),G$o=i(Yt),os=s(Yt,"P",{});var f5=n(os);X$o=r(f5,"The model class to instantiate is selected based on the "),eie=s(f5,"CODE",{});var frt=n(eie);V$o=r(frt,"model_type"),frt.forEach(t),z$o=r(f5,` property of the config object (either
passed as an argument or loaded from `),oie=s(f5,"CODE",{});var grt=n(oie);W$o=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),Q$o=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=s(f5,"CODE",{});var hrt=n(rie);H$o=r(hrt,"pretrained_model_name_or_path"),hrt.forEach(t),U$o=r(f5,":"),f5.forEach(t),J$o=i(Yt),pe=s(Yt,"UL",{});var Ee=n(pe);HT=s(Ee,"LI",{});var e0e=n(HT);tie=s(e0e,"STRONG",{});var urt=n(tie);Y$o=r(urt,"beit"),urt.forEach(t),K$o=r(e0e," \u2014 "),gN=s(e0e,"A",{href:!0});var prt=n(gN);Z$o=r(prt,"BeitForImageClassification"),prt.forEach(t),eIo=r(e0e," (BEiT model)"),e0e.forEach(t),oIo=i(Ee),UT=s(Ee,"LI",{});var o0e=n(UT);aie=s(o0e,"STRONG",{});var _rt=n(aie);rIo=r(_rt,"convnext"),_rt.forEach(t),tIo=r(o0e," \u2014 "),hN=s(o0e,"A",{href:!0});var brt=n(hN);aIo=r(brt,"ConvNextForImageClassification"),brt.forEach(t),sIo=r(o0e," (ConvNext model)"),o0e.forEach(t),nIo=i(Ee),qn=s(Ee,"LI",{});var G8=n(qn);sie=s(G8,"STRONG",{});var vrt=n(sie);lIo=r(vrt,"deit"),vrt.forEach(t),iIo=r(G8," \u2014 "),uN=s(G8,"A",{href:!0});var Trt=n(uN);dIo=r(Trt,"DeiTForImageClassification"),Trt.forEach(t),cIo=r(G8," or "),pN=s(G8,"A",{href:!0});var Frt=n(pN);mIo=r(Frt,"DeiTForImageClassificationWithTeacher"),Frt.forEach(t),fIo=r(G8," (DeiT model)"),G8.forEach(t),gIo=i(Ee),JT=s(Ee,"LI",{});var r0e=n(JT);nie=s(r0e,"STRONG",{});var Crt=n(nie);hIo=r(Crt,"imagegpt"),Crt.forEach(t),uIo=r(r0e," \u2014 "),_N=s(r0e,"A",{href:!0});var Mrt=n(_N);pIo=r(Mrt,"ImageGPTForImageClassification"),Mrt.forEach(t),_Io=r(r0e," (ImageGPT model)"),r0e.forEach(t),bIo=i(Ee),fa=s(Ee,"LI",{});var Pm=n(fa);lie=s(Pm,"STRONG",{});var Ert=n(lie);vIo=r(Ert,"perceiver"),Ert.forEach(t),TIo=r(Pm," \u2014 "),bN=s(Pm,"A",{href:!0});var yrt=n(bN);FIo=r(yrt,"PerceiverForImageClassificationLearned"),yrt.forEach(t),CIo=r(Pm," or "),vN=s(Pm,"A",{href:!0});var wrt=n(vN);MIo=r(wrt,"PerceiverForImageClassificationFourier"),wrt.forEach(t),EIo=r(Pm," or "),TN=s(Pm,"A",{href:!0});var Art=n(TN);yIo=r(Art,"PerceiverForImageClassificationConvProcessing"),Art.forEach(t),wIo=r(Pm," (Perceiver model)"),Pm.forEach(t),AIo=i(Ee),YT=s(Ee,"LI",{});var t0e=n(YT);iie=s(t0e,"STRONG",{});var Lrt=n(iie);LIo=r(Lrt,"poolformer"),Lrt.forEach(t),BIo=r(t0e," \u2014 "),FN=s(t0e,"A",{href:!0});var Brt=n(FN);xIo=r(Brt,"PoolFormerForImageClassification"),Brt.forEach(t),kIo=r(t0e," (PoolFormer model)"),t0e.forEach(t),RIo=i(Ee),KT=s(Ee,"LI",{});var a0e=n(KT);die=s(a0e,"STRONG",{});var xrt=n(die);SIo=r(xrt,"resnet"),xrt.forEach(t),PIo=r(a0e," \u2014 "),CN=s(a0e,"A",{href:!0});var krt=n(CN);$Io=r(krt,"ResNetForImageClassification"),krt.forEach(t),IIo=r(a0e," (ResNet model)"),a0e.forEach(t),jIo=i(Ee),ZT=s(Ee,"LI",{});var s0e=n(ZT);cie=s(s0e,"STRONG",{});var Rrt=n(cie);DIo=r(Rrt,"segformer"),Rrt.forEach(t),NIo=r(s0e," \u2014 "),MN=s(s0e,"A",{href:!0});var Srt=n(MN);qIo=r(Srt,"SegformerForImageClassification"),Srt.forEach(t),OIo=r(s0e," (SegFormer model)"),s0e.forEach(t),GIo=i(Ee),e1=s(Ee,"LI",{});var n0e=n(e1);mie=s(n0e,"STRONG",{});var Prt=n(mie);XIo=r(Prt,"swin"),Prt.forEach(t),VIo=r(n0e," \u2014 "),EN=s(n0e,"A",{href:!0});var $rt=n(EN);zIo=r($rt,"SwinForImageClassification"),$rt.forEach(t),WIo=r(n0e," (Swin model)"),n0e.forEach(t),QIo=i(Ee),o1=s(Ee,"LI",{});var l0e=n(o1);fie=s(l0e,"STRONG",{});var Irt=n(fie);HIo=r(Irt,"vit"),Irt.forEach(t),UIo=r(l0e," \u2014 "),yN=s(l0e,"A",{href:!0});var jrt=n(yN);JIo=r(jrt,"ViTForImageClassification"),jrt.forEach(t),YIo=r(l0e," (ViT model)"),l0e.forEach(t),Ee.forEach(t),KIo=i(Yt),r1=s(Yt,"P",{});var i0e=n(r1);ZIo=r(i0e,"The model is set in evaluation mode by default using "),gie=s(i0e,"CODE",{});var Drt=n(gie);ejo=r(Drt,"model.eval()"),Drt.forEach(t),ojo=r(i0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=s(i0e,"CODE",{});var Nrt=n(hie);rjo=r(Nrt,"model.train()"),Nrt.forEach(t),i0e.forEach(t),tjo=i(Yt),uie=s(Yt,"P",{});var qrt=n(uie);ajo=r(qrt,"Examples:"),qrt.forEach(t),sjo=i(Yt),f(n6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),ske=i(c),Sd=s(c,"H2",{class:!0});var hSe=n(Sd);t1=s(hSe,"A",{id:!0,class:!0,href:!0});var Ort=n(t1);pie=s(Ort,"SPAN",{});var Grt=n(pie);f(l6.$$.fragment,Grt),Grt.forEach(t),Ort.forEach(t),njo=i(hSe),_ie=s(hSe,"SPAN",{});var Xrt=n(_ie);ljo=r(Xrt,"AutoModelForVision2Seq"),Xrt.forEach(t),hSe.forEach(t),nke=i(c),ir=s(c,"DIV",{class:!0});var _l=n(ir);f(i6.$$.fragment,_l),ijo=i(_l),Pd=s(_l,"P",{});var tW=n(Pd);djo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bie=s(tW,"CODE",{});var Vrt=n(bie);cjo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),mjo=r(tW,"class method or the "),vie=s(tW,"CODE",{});var zrt=n(vie);fjo=r(zrt,"from_config()"),zrt.forEach(t),gjo=r(tW,`class
method.`),tW.forEach(t),hjo=i(_l),d6=s(_l,"P",{});var uSe=n(d6);ujo=r(uSe,"This class cannot be instantiated directly using "),Tie=s(uSe,"CODE",{});var Wrt=n(Tie);pjo=r(Wrt,"__init__()"),Wrt.forEach(t),_jo=r(uSe," (throws an error)."),uSe.forEach(t),bjo=i(_l),rt=s(_l,"DIV",{class:!0});var bl=n(rt);f(c6.$$.fragment,bl),vjo=i(bl),Fie=s(bl,"P",{});var Qrt=n(Fie);Tjo=r(Qrt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qrt.forEach(t),Fjo=i(bl),$d=s(bl,"P",{});var aW=n($d);Cjo=r(aW,`Note:
Loading a model from its configuration file does `),Cie=s(aW,"STRONG",{});var Hrt=n(Cie);Mjo=r(Hrt,"not"),Hrt.forEach(t),Ejo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=s(aW,"CODE",{});var Urt=n(Mie);yjo=r(Urt,"from_pretrained()"),Urt.forEach(t),wjo=r(aW,"to load the model weights."),aW.forEach(t),Ajo=i(bl),Eie=s(bl,"P",{});var Jrt=n(Eie);Ljo=r(Jrt,"Examples:"),Jrt.forEach(t),Bjo=i(bl),f(m6.$$.fragment,bl),bl.forEach(t),xjo=i(_l),Je=s(_l,"DIV",{class:!0});var Kt=n(Je);f(f6.$$.fragment,Kt),kjo=i(Kt),yie=s(Kt,"P",{});var Yrt=n(yie);Rjo=r(Yrt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yrt.forEach(t),Sjo=i(Kt),rs=s(Kt,"P",{});var g5=n(rs);Pjo=r(g5,"The model class to instantiate is selected based on the "),wie=s(g5,"CODE",{});var Krt=n(wie);$jo=r(Krt,"model_type"),Krt.forEach(t),Ijo=r(g5,` property of the config object (either
passed as an argument or loaded from `),Aie=s(g5,"CODE",{});var Zrt=n(Aie);jjo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),Djo=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=s(g5,"CODE",{});var ett=n(Lie);Njo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),qjo=r(g5,":"),g5.forEach(t),Ojo=i(Kt),Bie=s(Kt,"UL",{});var ott=n(Bie);a1=s(ott,"LI",{});var d0e=n(a1);xie=s(d0e,"STRONG",{});var rtt=n(xie);Gjo=r(rtt,"vision-encoder-decoder"),rtt.forEach(t),Xjo=r(d0e," \u2014 "),wN=s(d0e,"A",{href:!0});var ttt=n(wN);Vjo=r(ttt,"VisionEncoderDecoderModel"),ttt.forEach(t),zjo=r(d0e," (Vision Encoder decoder model)"),d0e.forEach(t),ott.forEach(t),Wjo=i(Kt),s1=s(Kt,"P",{});var c0e=n(s1);Qjo=r(c0e,"The model is set in evaluation mode by default using "),kie=s(c0e,"CODE",{});var att=n(kie);Hjo=r(att,"model.eval()"),att.forEach(t),Ujo=r(c0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=s(c0e,"CODE",{});var stt=n(Rie);Jjo=r(stt,"model.train()"),stt.forEach(t),c0e.forEach(t),Yjo=i(Kt),Sie=s(Kt,"P",{});var ntt=n(Sie);Kjo=r(ntt,"Examples:"),ntt.forEach(t),Zjo=i(Kt),f(g6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),lke=i(c),Id=s(c,"H2",{class:!0});var pSe=n(Id);n1=s(pSe,"A",{id:!0,class:!0,href:!0});var ltt=n(n1);Pie=s(ltt,"SPAN",{});var itt=n(Pie);f(h6.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),eDo=i(pSe),$ie=s(pSe,"SPAN",{});var dtt=n($ie);oDo=r(dtt,"AutoModelForAudioClassification"),dtt.forEach(t),pSe.forEach(t),ike=i(c),dr=s(c,"DIV",{class:!0});var vl=n(dr);f(u6.$$.fragment,vl),rDo=i(vl),jd=s(vl,"P",{});var sW=n(jd);tDo=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Iie=s(sW,"CODE",{});var ctt=n(Iie);aDo=r(ctt,"from_pretrained()"),ctt.forEach(t),sDo=r(sW,"class method or the "),jie=s(sW,"CODE",{});var mtt=n(jie);nDo=r(mtt,"from_config()"),mtt.forEach(t),lDo=r(sW,`class
method.`),sW.forEach(t),iDo=i(vl),p6=s(vl,"P",{});var _Se=n(p6);dDo=r(_Se,"This class cannot be instantiated directly using "),Die=s(_Se,"CODE",{});var ftt=n(Die);cDo=r(ftt,"__init__()"),ftt.forEach(t),mDo=r(_Se," (throws an error)."),_Se.forEach(t),fDo=i(vl),tt=s(vl,"DIV",{class:!0});var Tl=n(tt);f(_6.$$.fragment,Tl),gDo=i(Tl),Nie=s(Tl,"P",{});var gtt=n(Nie);hDo=r(gtt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gtt.forEach(t),uDo=i(Tl),Dd=s(Tl,"P",{});var nW=n(Dd);pDo=r(nW,`Note:
Loading a model from its configuration file does `),qie=s(nW,"STRONG",{});var htt=n(qie);_Do=r(htt,"not"),htt.forEach(t),bDo=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=s(nW,"CODE",{});var utt=n(Oie);vDo=r(utt,"from_pretrained()"),utt.forEach(t),TDo=r(nW,"to load the model weights."),nW.forEach(t),FDo=i(Tl),Gie=s(Tl,"P",{});var ptt=n(Gie);CDo=r(ptt,"Examples:"),ptt.forEach(t),MDo=i(Tl),f(b6.$$.fragment,Tl),Tl.forEach(t),EDo=i(vl),Ye=s(vl,"DIV",{class:!0});var Zt=n(Ye);f(v6.$$.fragment,Zt),yDo=i(Zt),Xie=s(Zt,"P",{});var _tt=n(Xie);wDo=r(_tt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),_tt.forEach(t),ADo=i(Zt),ts=s(Zt,"P",{});var h5=n(ts);LDo=r(h5,"The model class to instantiate is selected based on the "),Vie=s(h5,"CODE",{});var btt=n(Vie);BDo=r(btt,"model_type"),btt.forEach(t),xDo=r(h5,` property of the config object (either
passed as an argument or loaded from `),zie=s(h5,"CODE",{});var vtt=n(zie);kDo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),RDo=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=s(h5,"CODE",{});var Ttt=n(Wie);SDo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),PDo=r(h5,":"),h5.forEach(t),$Do=i(Zt),ke=s(Zt,"UL",{});var qo=n(ke);l1=s(qo,"LI",{});var m0e=n(l1);Qie=s(m0e,"STRONG",{});var Ftt=n(Qie);IDo=r(Ftt,"data2vec-audio"),Ftt.forEach(t),jDo=r(m0e," \u2014 "),AN=s(m0e,"A",{href:!0});var Ctt=n(AN);DDo=r(Ctt,"Data2VecAudioForSequenceClassification"),Ctt.forEach(t),NDo=r(m0e," (Data2VecAudio model)"),m0e.forEach(t),qDo=i(qo),i1=s(qo,"LI",{});var f0e=n(i1);Hie=s(f0e,"STRONG",{});var Mtt=n(Hie);ODo=r(Mtt,"hubert"),Mtt.forEach(t),GDo=r(f0e," \u2014 "),LN=s(f0e,"A",{href:!0});var Ett=n(LN);XDo=r(Ett,"HubertForSequenceClassification"),Ett.forEach(t),VDo=r(f0e," (Hubert model)"),f0e.forEach(t),zDo=i(qo),d1=s(qo,"LI",{});var g0e=n(d1);Uie=s(g0e,"STRONG",{});var ytt=n(Uie);WDo=r(ytt,"sew"),ytt.forEach(t),QDo=r(g0e," \u2014 "),BN=s(g0e,"A",{href:!0});var wtt=n(BN);HDo=r(wtt,"SEWForSequenceClassification"),wtt.forEach(t),UDo=r(g0e," (SEW model)"),g0e.forEach(t),JDo=i(qo),c1=s(qo,"LI",{});var h0e=n(c1);Jie=s(h0e,"STRONG",{});var Att=n(Jie);YDo=r(Att,"sew-d"),Att.forEach(t),KDo=r(h0e," \u2014 "),xN=s(h0e,"A",{href:!0});var Ltt=n(xN);ZDo=r(Ltt,"SEWDForSequenceClassification"),Ltt.forEach(t),eNo=r(h0e," (SEW-D model)"),h0e.forEach(t),oNo=i(qo),m1=s(qo,"LI",{});var u0e=n(m1);Yie=s(u0e,"STRONG",{});var Btt=n(Yie);rNo=r(Btt,"unispeech"),Btt.forEach(t),tNo=r(u0e," \u2014 "),kN=s(u0e,"A",{href:!0});var xtt=n(kN);aNo=r(xtt,"UniSpeechForSequenceClassification"),xtt.forEach(t),sNo=r(u0e," (UniSpeech model)"),u0e.forEach(t),nNo=i(qo),f1=s(qo,"LI",{});var p0e=n(f1);Kie=s(p0e,"STRONG",{});var ktt=n(Kie);lNo=r(ktt,"unispeech-sat"),ktt.forEach(t),iNo=r(p0e," \u2014 "),RN=s(p0e,"A",{href:!0});var Rtt=n(RN);dNo=r(Rtt,"UniSpeechSatForSequenceClassification"),Rtt.forEach(t),cNo=r(p0e," (UniSpeechSat model)"),p0e.forEach(t),mNo=i(qo),g1=s(qo,"LI",{});var _0e=n(g1);Zie=s(_0e,"STRONG",{});var Stt=n(Zie);fNo=r(Stt,"wav2vec2"),Stt.forEach(t),gNo=r(_0e," \u2014 "),SN=s(_0e,"A",{href:!0});var Ptt=n(SN);hNo=r(Ptt,"Wav2Vec2ForSequenceClassification"),Ptt.forEach(t),uNo=r(_0e," (Wav2Vec2 model)"),_0e.forEach(t),pNo=i(qo),h1=s(qo,"LI",{});var b0e=n(h1);ede=s(b0e,"STRONG",{});var $tt=n(ede);_No=r($tt,"wavlm"),$tt.forEach(t),bNo=r(b0e," \u2014 "),PN=s(b0e,"A",{href:!0});var Itt=n(PN);vNo=r(Itt,"WavLMForSequenceClassification"),Itt.forEach(t),TNo=r(b0e," (WavLM model)"),b0e.forEach(t),qo.forEach(t),FNo=i(Zt),u1=s(Zt,"P",{});var v0e=n(u1);CNo=r(v0e,"The model is set in evaluation mode by default using "),ode=s(v0e,"CODE",{});var jtt=n(ode);MNo=r(jtt,"model.eval()"),jtt.forEach(t),ENo=r(v0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=s(v0e,"CODE",{});var Dtt=n(rde);yNo=r(Dtt,"model.train()"),Dtt.forEach(t),v0e.forEach(t),wNo=i(Zt),tde=s(Zt,"P",{});var Ntt=n(tde);ANo=r(Ntt,"Examples:"),Ntt.forEach(t),LNo=i(Zt),f(T6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),dke=i(c),Nd=s(c,"H2",{class:!0});var bSe=n(Nd);p1=s(bSe,"A",{id:!0,class:!0,href:!0});var qtt=n(p1);ade=s(qtt,"SPAN",{});var Ott=n(ade);f(F6.$$.fragment,Ott),Ott.forEach(t),qtt.forEach(t),BNo=i(bSe),sde=s(bSe,"SPAN",{});var Gtt=n(sde);xNo=r(Gtt,"AutoModelForAudioFrameClassification"),Gtt.forEach(t),bSe.forEach(t),cke=i(c),cr=s(c,"DIV",{class:!0});var Fl=n(cr);f(C6.$$.fragment,Fl),kNo=i(Fl),qd=s(Fl,"P",{});var lW=n(qd);RNo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),nde=s(lW,"CODE",{});var Xtt=n(nde);SNo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),PNo=r(lW,"class method or the "),lde=s(lW,"CODE",{});var Vtt=n(lde);$No=r(Vtt,"from_config()"),Vtt.forEach(t),INo=r(lW,`class
method.`),lW.forEach(t),jNo=i(Fl),M6=s(Fl,"P",{});var vSe=n(M6);DNo=r(vSe,"This class cannot be instantiated directly using "),ide=s(vSe,"CODE",{});var ztt=n(ide);NNo=r(ztt,"__init__()"),ztt.forEach(t),qNo=r(vSe," (throws an error)."),vSe.forEach(t),ONo=i(Fl),at=s(Fl,"DIV",{class:!0});var Cl=n(at);f(E6.$$.fragment,Cl),GNo=i(Cl),dde=s(Cl,"P",{});var Wtt=n(dde);XNo=r(Wtt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wtt.forEach(t),VNo=i(Cl),Od=s(Cl,"P",{});var iW=n(Od);zNo=r(iW,`Note:
Loading a model from its configuration file does `),cde=s(iW,"STRONG",{});var Qtt=n(cde);WNo=r(Qtt,"not"),Qtt.forEach(t),QNo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=s(iW,"CODE",{});var Htt=n(mde);HNo=r(Htt,"from_pretrained()"),Htt.forEach(t),UNo=r(iW,"to load the model weights."),iW.forEach(t),JNo=i(Cl),fde=s(Cl,"P",{});var Utt=n(fde);YNo=r(Utt,"Examples:"),Utt.forEach(t),KNo=i(Cl),f(y6.$$.fragment,Cl),Cl.forEach(t),ZNo=i(Fl),Ke=s(Fl,"DIV",{class:!0});var ea=n(Ke);f(w6.$$.fragment,ea),eqo=i(ea),gde=s(ea,"P",{});var Jtt=n(gde);oqo=r(Jtt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jtt.forEach(t),rqo=i(ea),as=s(ea,"P",{});var u5=n(as);tqo=r(u5,"The model class to instantiate is selected based on the "),hde=s(u5,"CODE",{});var Ytt=n(hde);aqo=r(Ytt,"model_type"),Ytt.forEach(t),sqo=r(u5,` property of the config object (either
passed as an argument or loaded from `),ude=s(u5,"CODE",{});var Ktt=n(ude);nqo=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),lqo=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=s(u5,"CODE",{});var Ztt=n(pde);iqo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),dqo=r(u5,":"),u5.forEach(t),cqo=i(ea),ss=s(ea,"UL",{});var p5=n(ss);_1=s(p5,"LI",{});var T0e=n(_1);_de=s(T0e,"STRONG",{});var eat=n(_de);mqo=r(eat,"data2vec-audio"),eat.forEach(t),fqo=r(T0e," \u2014 "),$N=s(T0e,"A",{href:!0});var oat=n($N);gqo=r(oat,"Data2VecAudioForAudioFrameClassification"),oat.forEach(t),hqo=r(T0e," (Data2VecAudio model)"),T0e.forEach(t),uqo=i(p5),b1=s(p5,"LI",{});var F0e=n(b1);bde=s(F0e,"STRONG",{});var rat=n(bde);pqo=r(rat,"unispeech-sat"),rat.forEach(t),_qo=r(F0e," \u2014 "),IN=s(F0e,"A",{href:!0});var tat=n(IN);bqo=r(tat,"UniSpeechSatForAudioFrameClassification"),tat.forEach(t),vqo=r(F0e," (UniSpeechSat model)"),F0e.forEach(t),Tqo=i(p5),v1=s(p5,"LI",{});var C0e=n(v1);vde=s(C0e,"STRONG",{});var aat=n(vde);Fqo=r(aat,"wav2vec2"),aat.forEach(t),Cqo=r(C0e," \u2014 "),jN=s(C0e,"A",{href:!0});var sat=n(jN);Mqo=r(sat,"Wav2Vec2ForAudioFrameClassification"),sat.forEach(t),Eqo=r(C0e," (Wav2Vec2 model)"),C0e.forEach(t),yqo=i(p5),T1=s(p5,"LI",{});var M0e=n(T1);Tde=s(M0e,"STRONG",{});var nat=n(Tde);wqo=r(nat,"wavlm"),nat.forEach(t),Aqo=r(M0e," \u2014 "),DN=s(M0e,"A",{href:!0});var lat=n(DN);Lqo=r(lat,"WavLMForAudioFrameClassification"),lat.forEach(t),Bqo=r(M0e," (WavLM model)"),M0e.forEach(t),p5.forEach(t),xqo=i(ea),F1=s(ea,"P",{});var E0e=n(F1);kqo=r(E0e,"The model is set in evaluation mode by default using "),Fde=s(E0e,"CODE",{});var iat=n(Fde);Rqo=r(iat,"model.eval()"),iat.forEach(t),Sqo=r(E0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=s(E0e,"CODE",{});var dat=n(Cde);Pqo=r(dat,"model.train()"),dat.forEach(t),E0e.forEach(t),$qo=i(ea),Mde=s(ea,"P",{});var cat=n(Mde);Iqo=r(cat,"Examples:"),cat.forEach(t),jqo=i(ea),f(A6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),mke=i(c),Gd=s(c,"H2",{class:!0});var TSe=n(Gd);C1=s(TSe,"A",{id:!0,class:!0,href:!0});var mat=n(C1);Ede=s(mat,"SPAN",{});var fat=n(Ede);f(L6.$$.fragment,fat),fat.forEach(t),mat.forEach(t),Dqo=i(TSe),yde=s(TSe,"SPAN",{});var gat=n(yde);Nqo=r(gat,"AutoModelForCTC"),gat.forEach(t),TSe.forEach(t),fke=i(c),mr=s(c,"DIV",{class:!0});var Ml=n(mr);f(B6.$$.fragment,Ml),qqo=i(Ml),Xd=s(Ml,"P",{});var dW=n(Xd);Oqo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wde=s(dW,"CODE",{});var hat=n(wde);Gqo=r(hat,"from_pretrained()"),hat.forEach(t),Xqo=r(dW,"class method or the "),Ade=s(dW,"CODE",{});var uat=n(Ade);Vqo=r(uat,"from_config()"),uat.forEach(t),zqo=r(dW,`class
method.`),dW.forEach(t),Wqo=i(Ml),x6=s(Ml,"P",{});var FSe=n(x6);Qqo=r(FSe,"This class cannot be instantiated directly using "),Lde=s(FSe,"CODE",{});var pat=n(Lde);Hqo=r(pat,"__init__()"),pat.forEach(t),Uqo=r(FSe," (throws an error)."),FSe.forEach(t),Jqo=i(Ml),st=s(Ml,"DIV",{class:!0});var El=n(st);f(k6.$$.fragment,El),Yqo=i(El),Bde=s(El,"P",{});var _at=n(Bde);Kqo=r(_at,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_at.forEach(t),Zqo=i(El),Vd=s(El,"P",{});var cW=n(Vd);eOo=r(cW,`Note:
Loading a model from its configuration file does `),xde=s(cW,"STRONG",{});var bat=n(xde);oOo=r(bat,"not"),bat.forEach(t),rOo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=s(cW,"CODE",{});var vat=n(kde);tOo=r(vat,"from_pretrained()"),vat.forEach(t),aOo=r(cW,"to load the model weights."),cW.forEach(t),sOo=i(El),Rde=s(El,"P",{});var Tat=n(Rde);nOo=r(Tat,"Examples:"),Tat.forEach(t),lOo=i(El),f(R6.$$.fragment,El),El.forEach(t),iOo=i(Ml),Ze=s(Ml,"DIV",{class:!0});var oa=n(Ze);f(S6.$$.fragment,oa),dOo=i(oa),Sde=s(oa,"P",{});var Fat=n(Sde);cOo=r(Fat,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fat.forEach(t),mOo=i(oa),ns=s(oa,"P",{});var _5=n(ns);fOo=r(_5,"The model class to instantiate is selected based on the "),Pde=s(_5,"CODE",{});var Cat=n(Pde);gOo=r(Cat,"model_type"),Cat.forEach(t),hOo=r(_5,` property of the config object (either
passed as an argument or loaded from `),$de=s(_5,"CODE",{});var Mat=n($de);uOo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),pOo=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=s(_5,"CODE",{});var Eat=n(Ide);_Oo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),bOo=r(_5,":"),_5.forEach(t),vOo=i(oa),Re=s(oa,"UL",{});var Oo=n(Re);M1=s(Oo,"LI",{});var y0e=n(M1);jde=s(y0e,"STRONG",{});var yat=n(jde);TOo=r(yat,"data2vec-audio"),yat.forEach(t),FOo=r(y0e," \u2014 "),NN=s(y0e,"A",{href:!0});var wat=n(NN);COo=r(wat,"Data2VecAudioForCTC"),wat.forEach(t),MOo=r(y0e," (Data2VecAudio model)"),y0e.forEach(t),EOo=i(Oo),E1=s(Oo,"LI",{});var w0e=n(E1);Dde=s(w0e,"STRONG",{});var Aat=n(Dde);yOo=r(Aat,"hubert"),Aat.forEach(t),wOo=r(w0e," \u2014 "),qN=s(w0e,"A",{href:!0});var Lat=n(qN);AOo=r(Lat,"HubertForCTC"),Lat.forEach(t),LOo=r(w0e," (Hubert model)"),w0e.forEach(t),BOo=i(Oo),y1=s(Oo,"LI",{});var A0e=n(y1);Nde=s(A0e,"STRONG",{});var Bat=n(Nde);xOo=r(Bat,"sew"),Bat.forEach(t),kOo=r(A0e," \u2014 "),ON=s(A0e,"A",{href:!0});var xat=n(ON);ROo=r(xat,"SEWForCTC"),xat.forEach(t),SOo=r(A0e," (SEW model)"),A0e.forEach(t),POo=i(Oo),w1=s(Oo,"LI",{});var L0e=n(w1);qde=s(L0e,"STRONG",{});var kat=n(qde);$Oo=r(kat,"sew-d"),kat.forEach(t),IOo=r(L0e," \u2014 "),GN=s(L0e,"A",{href:!0});var Rat=n(GN);jOo=r(Rat,"SEWDForCTC"),Rat.forEach(t),DOo=r(L0e," (SEW-D model)"),L0e.forEach(t),NOo=i(Oo),A1=s(Oo,"LI",{});var B0e=n(A1);Ode=s(B0e,"STRONG",{});var Sat=n(Ode);qOo=r(Sat,"unispeech"),Sat.forEach(t),OOo=r(B0e," \u2014 "),XN=s(B0e,"A",{href:!0});var Pat=n(XN);GOo=r(Pat,"UniSpeechForCTC"),Pat.forEach(t),XOo=r(B0e," (UniSpeech model)"),B0e.forEach(t),VOo=i(Oo),L1=s(Oo,"LI",{});var x0e=n(L1);Gde=s(x0e,"STRONG",{});var $at=n(Gde);zOo=r($at,"unispeech-sat"),$at.forEach(t),WOo=r(x0e," \u2014 "),VN=s(x0e,"A",{href:!0});var Iat=n(VN);QOo=r(Iat,"UniSpeechSatForCTC"),Iat.forEach(t),HOo=r(x0e," (UniSpeechSat model)"),x0e.forEach(t),UOo=i(Oo),B1=s(Oo,"LI",{});var k0e=n(B1);Xde=s(k0e,"STRONG",{});var jat=n(Xde);JOo=r(jat,"wav2vec2"),jat.forEach(t),YOo=r(k0e," \u2014 "),zN=s(k0e,"A",{href:!0});var Dat=n(zN);KOo=r(Dat,"Wav2Vec2ForCTC"),Dat.forEach(t),ZOo=r(k0e," (Wav2Vec2 model)"),k0e.forEach(t),eGo=i(Oo),x1=s(Oo,"LI",{});var R0e=n(x1);Vde=s(R0e,"STRONG",{});var Nat=n(Vde);oGo=r(Nat,"wavlm"),Nat.forEach(t),rGo=r(R0e," \u2014 "),WN=s(R0e,"A",{href:!0});var qat=n(WN);tGo=r(qat,"WavLMForCTC"),qat.forEach(t),aGo=r(R0e," (WavLM model)"),R0e.forEach(t),Oo.forEach(t),sGo=i(oa),k1=s(oa,"P",{});var S0e=n(k1);nGo=r(S0e,"The model is set in evaluation mode by default using "),zde=s(S0e,"CODE",{});var Oat=n(zde);lGo=r(Oat,"model.eval()"),Oat.forEach(t),iGo=r(S0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=s(S0e,"CODE",{});var Gat=n(Wde);dGo=r(Gat,"model.train()"),Gat.forEach(t),S0e.forEach(t),cGo=i(oa),Qde=s(oa,"P",{});var Xat=n(Qde);mGo=r(Xat,"Examples:"),Xat.forEach(t),fGo=i(oa),f(P6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),gke=i(c),zd=s(c,"H2",{class:!0});var CSe=n(zd);R1=s(CSe,"A",{id:!0,class:!0,href:!0});var Vat=n(R1);Hde=s(Vat,"SPAN",{});var zat=n(Hde);f($6.$$.fragment,zat),zat.forEach(t),Vat.forEach(t),gGo=i(CSe),Ude=s(CSe,"SPAN",{});var Wat=n(Ude);hGo=r(Wat,"AutoModelForSpeechSeq2Seq"),Wat.forEach(t),CSe.forEach(t),hke=i(c),fr=s(c,"DIV",{class:!0});var yl=n(fr);f(I6.$$.fragment,yl),uGo=i(yl),Wd=s(yl,"P",{});var mW=n(Wd);pGo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Jde=s(mW,"CODE",{});var Qat=n(Jde);_Go=r(Qat,"from_pretrained()"),Qat.forEach(t),bGo=r(mW,"class method or the "),Yde=s(mW,"CODE",{});var Hat=n(Yde);vGo=r(Hat,"from_config()"),Hat.forEach(t),TGo=r(mW,`class
method.`),mW.forEach(t),FGo=i(yl),j6=s(yl,"P",{});var MSe=n(j6);CGo=r(MSe,"This class cannot be instantiated directly using "),Kde=s(MSe,"CODE",{});var Uat=n(Kde);MGo=r(Uat,"__init__()"),Uat.forEach(t),EGo=r(MSe," (throws an error)."),MSe.forEach(t),yGo=i(yl),nt=s(yl,"DIV",{class:!0});var wl=n(nt);f(D6.$$.fragment,wl),wGo=i(wl),Zde=s(wl,"P",{});var Jat=n(Zde);AGo=r(Jat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jat.forEach(t),LGo=i(wl),Qd=s(wl,"P",{});var fW=n(Qd);BGo=r(fW,`Note:
Loading a model from its configuration file does `),ece=s(fW,"STRONG",{});var Yat=n(ece);xGo=r(Yat,"not"),Yat.forEach(t),kGo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=s(fW,"CODE",{});var Kat=n(oce);RGo=r(Kat,"from_pretrained()"),Kat.forEach(t),SGo=r(fW,"to load the model weights."),fW.forEach(t),PGo=i(wl),rce=s(wl,"P",{});var Zat=n(rce);$Go=r(Zat,"Examples:"),Zat.forEach(t),IGo=i(wl),f(N6.$$.fragment,wl),wl.forEach(t),jGo=i(yl),eo=s(yl,"DIV",{class:!0});var ra=n(eo);f(q6.$$.fragment,ra),DGo=i(ra),tce=s(ra,"P",{});var est=n(tce);NGo=r(est,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),est.forEach(t),qGo=i(ra),ls=s(ra,"P",{});var b5=n(ls);OGo=r(b5,"The model class to instantiate is selected based on the "),ace=s(b5,"CODE",{});var ost=n(ace);GGo=r(ost,"model_type"),ost.forEach(t),XGo=r(b5,` property of the config object (either
passed as an argument or loaded from `),sce=s(b5,"CODE",{});var rst=n(sce);VGo=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),zGo=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=s(b5,"CODE",{});var tst=n(nce);WGo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),QGo=r(b5,":"),b5.forEach(t),HGo=i(ra),O6=s(ra,"UL",{});var ESe=n(O6);S1=s(ESe,"LI",{});var P0e=n(S1);lce=s(P0e,"STRONG",{});var ast=n(lce);UGo=r(ast,"speech-encoder-decoder"),ast.forEach(t),JGo=r(P0e," \u2014 "),QN=s(P0e,"A",{href:!0});var sst=n(QN);YGo=r(sst,"SpeechEncoderDecoderModel"),sst.forEach(t),KGo=r(P0e," (Speech Encoder decoder model)"),P0e.forEach(t),ZGo=i(ESe),P1=s(ESe,"LI",{});var $0e=n(P1);ice=s($0e,"STRONG",{});var nst=n(ice);eXo=r(nst,"speech_to_text"),nst.forEach(t),oXo=r($0e," \u2014 "),HN=s($0e,"A",{href:!0});var lst=n(HN);rXo=r(lst,"Speech2TextForConditionalGeneration"),lst.forEach(t),tXo=r($0e," (Speech2Text model)"),$0e.forEach(t),ESe.forEach(t),aXo=i(ra),$1=s(ra,"P",{});var I0e=n($1);sXo=r(I0e,"The model is set in evaluation mode by default using "),dce=s(I0e,"CODE",{});var ist=n(dce);nXo=r(ist,"model.eval()"),ist.forEach(t),lXo=r(I0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=s(I0e,"CODE",{});var dst=n(cce);iXo=r(dst,"model.train()"),dst.forEach(t),I0e.forEach(t),dXo=i(ra),mce=s(ra,"P",{});var cst=n(mce);cXo=r(cst,"Examples:"),cst.forEach(t),mXo=i(ra),f(G6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),uke=i(c),Hd=s(c,"H2",{class:!0});var ySe=n(Hd);I1=s(ySe,"A",{id:!0,class:!0,href:!0});var mst=n(I1);fce=s(mst,"SPAN",{});var fst=n(fce);f(X6.$$.fragment,fst),fst.forEach(t),mst.forEach(t),fXo=i(ySe),gce=s(ySe,"SPAN",{});var gst=n(gce);gXo=r(gst,"AutoModelForAudioXVector"),gst.forEach(t),ySe.forEach(t),pke=i(c),gr=s(c,"DIV",{class:!0});var Al=n(gr);f(V6.$$.fragment,Al),hXo=i(Al),Ud=s(Al,"P",{});var gW=n(Ud);uXo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hce=s(gW,"CODE",{});var hst=n(hce);pXo=r(hst,"from_pretrained()"),hst.forEach(t),_Xo=r(gW,"class method or the "),uce=s(gW,"CODE",{});var ust=n(uce);bXo=r(ust,"from_config()"),ust.forEach(t),vXo=r(gW,`class
method.`),gW.forEach(t),TXo=i(Al),z6=s(Al,"P",{});var wSe=n(z6);FXo=r(wSe,"This class cannot be instantiated directly using "),pce=s(wSe,"CODE",{});var pst=n(pce);CXo=r(pst,"__init__()"),pst.forEach(t),MXo=r(wSe," (throws an error)."),wSe.forEach(t),EXo=i(Al),lt=s(Al,"DIV",{class:!0});var Ll=n(lt);f(W6.$$.fragment,Ll),yXo=i(Ll),_ce=s(Ll,"P",{});var _st=n(_ce);wXo=r(_st,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),_st.forEach(t),AXo=i(Ll),Jd=s(Ll,"P",{});var hW=n(Jd);LXo=r(hW,`Note:
Loading a model from its configuration file does `),bce=s(hW,"STRONG",{});var bst=n(bce);BXo=r(bst,"not"),bst.forEach(t),xXo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=s(hW,"CODE",{});var vst=n(vce);kXo=r(vst,"from_pretrained()"),vst.forEach(t),RXo=r(hW,"to load the model weights."),hW.forEach(t),SXo=i(Ll),Tce=s(Ll,"P",{});var Tst=n(Tce);PXo=r(Tst,"Examples:"),Tst.forEach(t),$Xo=i(Ll),f(Q6.$$.fragment,Ll),Ll.forEach(t),IXo=i(Al),oo=s(Al,"DIV",{class:!0});var ta=n(oo);f(H6.$$.fragment,ta),jXo=i(ta),Fce=s(ta,"P",{});var Fst=n(Fce);DXo=r(Fst,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Fst.forEach(t),NXo=i(ta),is=s(ta,"P",{});var v5=n(is);qXo=r(v5,"The model class to instantiate is selected based on the "),Cce=s(v5,"CODE",{});var Cst=n(Cce);OXo=r(Cst,"model_type"),Cst.forEach(t),GXo=r(v5,` property of the config object (either
passed as an argument or loaded from `),Mce=s(v5,"CODE",{});var Mst=n(Mce);XXo=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),VXo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=s(v5,"CODE",{});var Est=n(Ece);zXo=r(Est,"pretrained_model_name_or_path"),Est.forEach(t),WXo=r(v5,":"),v5.forEach(t),QXo=i(ta),ds=s(ta,"UL",{});var T5=n(ds);j1=s(T5,"LI",{});var j0e=n(j1);yce=s(j0e,"STRONG",{});var yst=n(yce);HXo=r(yst,"data2vec-audio"),yst.forEach(t),UXo=r(j0e," \u2014 "),UN=s(j0e,"A",{href:!0});var wst=n(UN);JXo=r(wst,"Data2VecAudioForXVector"),wst.forEach(t),YXo=r(j0e," (Data2VecAudio model)"),j0e.forEach(t),KXo=i(T5),D1=s(T5,"LI",{});var D0e=n(D1);wce=s(D0e,"STRONG",{});var Ast=n(wce);ZXo=r(Ast,"unispeech-sat"),Ast.forEach(t),eVo=r(D0e," \u2014 "),JN=s(D0e,"A",{href:!0});var Lst=n(JN);oVo=r(Lst,"UniSpeechSatForXVector"),Lst.forEach(t),rVo=r(D0e," (UniSpeechSat model)"),D0e.forEach(t),tVo=i(T5),N1=s(T5,"LI",{});var N0e=n(N1);Ace=s(N0e,"STRONG",{});var Bst=n(Ace);aVo=r(Bst,"wav2vec2"),Bst.forEach(t),sVo=r(N0e," \u2014 "),YN=s(N0e,"A",{href:!0});var xst=n(YN);nVo=r(xst,"Wav2Vec2ForXVector"),xst.forEach(t),lVo=r(N0e," (Wav2Vec2 model)"),N0e.forEach(t),iVo=i(T5),q1=s(T5,"LI",{});var q0e=n(q1);Lce=s(q0e,"STRONG",{});var kst=n(Lce);dVo=r(kst,"wavlm"),kst.forEach(t),cVo=r(q0e," \u2014 "),KN=s(q0e,"A",{href:!0});var Rst=n(KN);mVo=r(Rst,"WavLMForXVector"),Rst.forEach(t),fVo=r(q0e," (WavLM model)"),q0e.forEach(t),T5.forEach(t),gVo=i(ta),O1=s(ta,"P",{});var O0e=n(O1);hVo=r(O0e,"The model is set in evaluation mode by default using "),Bce=s(O0e,"CODE",{});var Sst=n(Bce);uVo=r(Sst,"model.eval()"),Sst.forEach(t),pVo=r(O0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=s(O0e,"CODE",{});var Pst=n(xce);_Vo=r(Pst,"model.train()"),Pst.forEach(t),O0e.forEach(t),bVo=i(ta),kce=s(ta,"P",{});var $st=n(kce);vVo=r($st,"Examples:"),$st.forEach(t),TVo=i(ta),f(U6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),_ke=i(c),Yd=s(c,"H2",{class:!0});var ASe=n(Yd);G1=s(ASe,"A",{id:!0,class:!0,href:!0});var Ist=n(G1);Rce=s(Ist,"SPAN",{});var jst=n(Rce);f(J6.$$.fragment,jst),jst.forEach(t),Ist.forEach(t),FVo=i(ASe),Sce=s(ASe,"SPAN",{});var Dst=n(Sce);CVo=r(Dst,"AutoModelForMaskedImageModeling"),Dst.forEach(t),ASe.forEach(t),bke=i(c),hr=s(c,"DIV",{class:!0});var Bl=n(hr);f(Y6.$$.fragment,Bl),MVo=i(Bl),Kd=s(Bl,"P",{});var uW=n(Kd);EVo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pce=s(uW,"CODE",{});var Nst=n(Pce);yVo=r(Nst,"from_pretrained()"),Nst.forEach(t),wVo=r(uW,"class method or the "),$ce=s(uW,"CODE",{});var qst=n($ce);AVo=r(qst,"from_config()"),qst.forEach(t),LVo=r(uW,`class
method.`),uW.forEach(t),BVo=i(Bl),K6=s(Bl,"P",{});var LSe=n(K6);xVo=r(LSe,"This class cannot be instantiated directly using "),Ice=s(LSe,"CODE",{});var Ost=n(Ice);kVo=r(Ost,"__init__()"),Ost.forEach(t),RVo=r(LSe," (throws an error)."),LSe.forEach(t),SVo=i(Bl),it=s(Bl,"DIV",{class:!0});var xl=n(it);f(Z6.$$.fragment,xl),PVo=i(xl),jce=s(xl,"P",{});var Gst=n(jce);$Vo=r(Gst,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Gst.forEach(t),IVo=i(xl),Zd=s(xl,"P",{});var pW=n(Zd);jVo=r(pW,`Note:
Loading a model from its configuration file does `),Dce=s(pW,"STRONG",{});var Xst=n(Dce);DVo=r(Xst,"not"),Xst.forEach(t),NVo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=s(pW,"CODE",{});var Vst=n(Nce);qVo=r(Vst,"from_pretrained()"),Vst.forEach(t),OVo=r(pW,"to load the model weights."),pW.forEach(t),GVo=i(xl),qce=s(xl,"P",{});var zst=n(qce);XVo=r(zst,"Examples:"),zst.forEach(t),VVo=i(xl),f(eA.$$.fragment,xl),xl.forEach(t),zVo=i(Bl),ro=s(Bl,"DIV",{class:!0});var aa=n(ro);f(oA.$$.fragment,aa),WVo=i(aa),Oce=s(aa,"P",{});var Wst=n(Oce);QVo=r(Wst,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wst.forEach(t),HVo=i(aa),cs=s(aa,"P",{});var F5=n(cs);UVo=r(F5,"The model class to instantiate is selected based on the "),Gce=s(F5,"CODE",{});var Qst=n(Gce);JVo=r(Qst,"model_type"),Qst.forEach(t),YVo=r(F5,` property of the config object (either
passed as an argument or loaded from `),Xce=s(F5,"CODE",{});var Hst=n(Xce);KVo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),ZVo=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=s(F5,"CODE",{});var Ust=n(Vce);ezo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),ozo=r(F5,":"),F5.forEach(t),rzo=i(aa),ec=s(aa,"UL",{});var _W=n(ec);X1=s(_W,"LI",{});var G0e=n(X1);zce=s(G0e,"STRONG",{});var Jst=n(zce);tzo=r(Jst,"deit"),Jst.forEach(t),azo=r(G0e," \u2014 "),ZN=s(G0e,"A",{href:!0});var Yst=n(ZN);szo=r(Yst,"DeiTForMaskedImageModeling"),Yst.forEach(t),nzo=r(G0e," (DeiT model)"),G0e.forEach(t),lzo=i(_W),V1=s(_W,"LI",{});var X0e=n(V1);Wce=s(X0e,"STRONG",{});var Kst=n(Wce);izo=r(Kst,"swin"),Kst.forEach(t),dzo=r(X0e," \u2014 "),eq=s(X0e,"A",{href:!0});var Zst=n(eq);czo=r(Zst,"SwinForMaskedImageModeling"),Zst.forEach(t),mzo=r(X0e," (Swin model)"),X0e.forEach(t),fzo=i(_W),z1=s(_W,"LI",{});var V0e=n(z1);Qce=s(V0e,"STRONG",{});var ent=n(Qce);gzo=r(ent,"vit"),ent.forEach(t),hzo=r(V0e," \u2014 "),oq=s(V0e,"A",{href:!0});var ont=n(oq);uzo=r(ont,"ViTForMaskedImageModeling"),ont.forEach(t),pzo=r(V0e," (ViT model)"),V0e.forEach(t),_W.forEach(t),_zo=i(aa),W1=s(aa,"P",{});var z0e=n(W1);bzo=r(z0e,"The model is set in evaluation mode by default using "),Hce=s(z0e,"CODE",{});var rnt=n(Hce);vzo=r(rnt,"model.eval()"),rnt.forEach(t),Tzo=r(z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=s(z0e,"CODE",{});var tnt=n(Uce);Fzo=r(tnt,"model.train()"),tnt.forEach(t),z0e.forEach(t),Czo=i(aa),Jce=s(aa,"P",{});var ant=n(Jce);Mzo=r(ant,"Examples:"),ant.forEach(t),Ezo=i(aa),f(rA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),vke=i(c),oc=s(c,"H2",{class:!0});var BSe=n(oc);Q1=s(BSe,"A",{id:!0,class:!0,href:!0});var snt=n(Q1);Yce=s(snt,"SPAN",{});var nnt=n(Yce);f(tA.$$.fragment,nnt),nnt.forEach(t),snt.forEach(t),yzo=i(BSe),Kce=s(BSe,"SPAN",{});var lnt=n(Kce);wzo=r(lnt,"AutoModelForObjectDetection"),lnt.forEach(t),BSe.forEach(t),Tke=i(c),ur=s(c,"DIV",{class:!0});var kl=n(ur);f(aA.$$.fragment,kl),Azo=i(kl),rc=s(kl,"P",{});var bW=n(rc);Lzo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zce=s(bW,"CODE",{});var int=n(Zce);Bzo=r(int,"from_pretrained()"),int.forEach(t),xzo=r(bW,"class method or the "),eme=s(bW,"CODE",{});var dnt=n(eme);kzo=r(dnt,"from_config()"),dnt.forEach(t),Rzo=r(bW,`class
method.`),bW.forEach(t),Szo=i(kl),sA=s(kl,"P",{});var xSe=n(sA);Pzo=r(xSe,"This class cannot be instantiated directly using "),ome=s(xSe,"CODE",{});var cnt=n(ome);$zo=r(cnt,"__init__()"),cnt.forEach(t),Izo=r(xSe," (throws an error)."),xSe.forEach(t),jzo=i(kl),dt=s(kl,"DIV",{class:!0});var Rl=n(dt);f(nA.$$.fragment,Rl),Dzo=i(Rl),rme=s(Rl,"P",{});var mnt=n(rme);Nzo=r(mnt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mnt.forEach(t),qzo=i(Rl),tc=s(Rl,"P",{});var vW=n(tc);Ozo=r(vW,`Note:
Loading a model from its configuration file does `),tme=s(vW,"STRONG",{});var fnt=n(tme);Gzo=r(fnt,"not"),fnt.forEach(t),Xzo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=s(vW,"CODE",{});var gnt=n(ame);Vzo=r(gnt,"from_pretrained()"),gnt.forEach(t),zzo=r(vW,"to load the model weights."),vW.forEach(t),Wzo=i(Rl),sme=s(Rl,"P",{});var hnt=n(sme);Qzo=r(hnt,"Examples:"),hnt.forEach(t),Hzo=i(Rl),f(lA.$$.fragment,Rl),Rl.forEach(t),Uzo=i(kl),to=s(kl,"DIV",{class:!0});var sa=n(to);f(iA.$$.fragment,sa),Jzo=i(sa),nme=s(sa,"P",{});var unt=n(nme);Yzo=r(unt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),unt.forEach(t),Kzo=i(sa),ms=s(sa,"P",{});var C5=n(ms);Zzo=r(C5,"The model class to instantiate is selected based on the "),lme=s(C5,"CODE",{});var pnt=n(lme);eWo=r(pnt,"model_type"),pnt.forEach(t),oWo=r(C5,` property of the config object (either
passed as an argument or loaded from `),ime=s(C5,"CODE",{});var _nt=n(ime);rWo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),tWo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=s(C5,"CODE",{});var bnt=n(dme);aWo=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),sWo=r(C5,":"),C5.forEach(t),nWo=i(sa),cme=s(sa,"UL",{});var vnt=n(cme);H1=s(vnt,"LI",{});var W0e=n(H1);mme=s(W0e,"STRONG",{});var Tnt=n(mme);lWo=r(Tnt,"detr"),Tnt.forEach(t),iWo=r(W0e," \u2014 "),rq=s(W0e,"A",{href:!0});var Fnt=n(rq);dWo=r(Fnt,"DetrForObjectDetection"),Fnt.forEach(t),cWo=r(W0e," (DETR model)"),W0e.forEach(t),vnt.forEach(t),mWo=i(sa),U1=s(sa,"P",{});var Q0e=n(U1);fWo=r(Q0e,"The model is set in evaluation mode by default using "),fme=s(Q0e,"CODE",{});var Cnt=n(fme);gWo=r(Cnt,"model.eval()"),Cnt.forEach(t),hWo=r(Q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=s(Q0e,"CODE",{});var Mnt=n(gme);uWo=r(Mnt,"model.train()"),Mnt.forEach(t),Q0e.forEach(t),pWo=i(sa),hme=s(sa,"P",{});var Ent=n(hme);_Wo=r(Ent,"Examples:"),Ent.forEach(t),bWo=i(sa),f(dA.$$.fragment,sa),sa.forEach(t),kl.forEach(t),Fke=i(c),ac=s(c,"H2",{class:!0});var kSe=n(ac);J1=s(kSe,"A",{id:!0,class:!0,href:!0});var ynt=n(J1);ume=s(ynt,"SPAN",{});var wnt=n(ume);f(cA.$$.fragment,wnt),wnt.forEach(t),ynt.forEach(t),vWo=i(kSe),pme=s(kSe,"SPAN",{});var Ant=n(pme);TWo=r(Ant,"AutoModelForImageSegmentation"),Ant.forEach(t),kSe.forEach(t),Cke=i(c),pr=s(c,"DIV",{class:!0});var Sl=n(pr);f(mA.$$.fragment,Sl),FWo=i(Sl),sc=s(Sl,"P",{});var TW=n(sc);CWo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_me=s(TW,"CODE",{});var Lnt=n(_me);MWo=r(Lnt,"from_pretrained()"),Lnt.forEach(t),EWo=r(TW,"class method or the "),bme=s(TW,"CODE",{});var Bnt=n(bme);yWo=r(Bnt,"from_config()"),Bnt.forEach(t),wWo=r(TW,`class
method.`),TW.forEach(t),AWo=i(Sl),fA=s(Sl,"P",{});var RSe=n(fA);LWo=r(RSe,"This class cannot be instantiated directly using "),vme=s(RSe,"CODE",{});var xnt=n(vme);BWo=r(xnt,"__init__()"),xnt.forEach(t),xWo=r(RSe," (throws an error)."),RSe.forEach(t),kWo=i(Sl),ct=s(Sl,"DIV",{class:!0});var Pl=n(ct);f(gA.$$.fragment,Pl),RWo=i(Pl),Tme=s(Pl,"P",{});var knt=n(Tme);SWo=r(knt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),knt.forEach(t),PWo=i(Pl),nc=s(Pl,"P",{});var FW=n(nc);$Wo=r(FW,`Note:
Loading a model from its configuration file does `),Fme=s(FW,"STRONG",{});var Rnt=n(Fme);IWo=r(Rnt,"not"),Rnt.forEach(t),jWo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=s(FW,"CODE",{});var Snt=n(Cme);DWo=r(Snt,"from_pretrained()"),Snt.forEach(t),NWo=r(FW,"to load the model weights."),FW.forEach(t),qWo=i(Pl),Mme=s(Pl,"P",{});var Pnt=n(Mme);OWo=r(Pnt,"Examples:"),Pnt.forEach(t),GWo=i(Pl),f(hA.$$.fragment,Pl),Pl.forEach(t),XWo=i(Sl),ao=s(Sl,"DIV",{class:!0});var na=n(ao);f(uA.$$.fragment,na),VWo=i(na),Eme=s(na,"P",{});var $nt=n(Eme);zWo=r($nt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$nt.forEach(t),WWo=i(na),fs=s(na,"P",{});var M5=n(fs);QWo=r(M5,"The model class to instantiate is selected based on the "),yme=s(M5,"CODE",{});var Int=n(yme);HWo=r(Int,"model_type"),Int.forEach(t),UWo=r(M5,` property of the config object (either
passed as an argument or loaded from `),wme=s(M5,"CODE",{});var jnt=n(wme);JWo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),YWo=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=s(M5,"CODE",{});var Dnt=n(Ame);KWo=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),ZWo=r(M5,":"),M5.forEach(t),eQo=i(na),Lme=s(na,"UL",{});var Nnt=n(Lme);Y1=s(Nnt,"LI",{});var H0e=n(Y1);Bme=s(H0e,"STRONG",{});var qnt=n(Bme);oQo=r(qnt,"detr"),qnt.forEach(t),rQo=r(H0e," \u2014 "),tq=s(H0e,"A",{href:!0});var Ont=n(tq);tQo=r(Ont,"DetrForSegmentation"),Ont.forEach(t),aQo=r(H0e," (DETR model)"),H0e.forEach(t),Nnt.forEach(t),sQo=i(na),K1=s(na,"P",{});var U0e=n(K1);nQo=r(U0e,"The model is set in evaluation mode by default using "),xme=s(U0e,"CODE",{});var Gnt=n(xme);lQo=r(Gnt,"model.eval()"),Gnt.forEach(t),iQo=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=s(U0e,"CODE",{});var Xnt=n(kme);dQo=r(Xnt,"model.train()"),Xnt.forEach(t),U0e.forEach(t),cQo=i(na),Rme=s(na,"P",{});var Vnt=n(Rme);mQo=r(Vnt,"Examples:"),Vnt.forEach(t),fQo=i(na),f(pA.$$.fragment,na),na.forEach(t),Sl.forEach(t),Mke=i(c),lc=s(c,"H2",{class:!0});var SSe=n(lc);Z1=s(SSe,"A",{id:!0,class:!0,href:!0});var znt=n(Z1);Sme=s(znt,"SPAN",{});var Wnt=n(Sme);f(_A.$$.fragment,Wnt),Wnt.forEach(t),znt.forEach(t),gQo=i(SSe),Pme=s(SSe,"SPAN",{});var Qnt=n(Pme);hQo=r(Qnt,"AutoModelForSemanticSegmentation"),Qnt.forEach(t),SSe.forEach(t),Eke=i(c),_r=s(c,"DIV",{class:!0});var $l=n(_r);f(bA.$$.fragment,$l),uQo=i($l),ic=s($l,"P",{});var CW=n(ic);pQo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$me=s(CW,"CODE",{});var Hnt=n($me);_Qo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),bQo=r(CW,"class method or the "),Ime=s(CW,"CODE",{});var Unt=n(Ime);vQo=r(Unt,"from_config()"),Unt.forEach(t),TQo=r(CW,`class
method.`),CW.forEach(t),FQo=i($l),vA=s($l,"P",{});var PSe=n(vA);CQo=r(PSe,"This class cannot be instantiated directly using "),jme=s(PSe,"CODE",{});var Jnt=n(jme);MQo=r(Jnt,"__init__()"),Jnt.forEach(t),EQo=r(PSe," (throws an error)."),PSe.forEach(t),yQo=i($l),mt=s($l,"DIV",{class:!0});var Il=n(mt);f(TA.$$.fragment,Il),wQo=i(Il),Dme=s(Il,"P",{});var Ynt=n(Dme);AQo=r(Ynt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ynt.forEach(t),LQo=i(Il),dc=s(Il,"P",{});var MW=n(dc);BQo=r(MW,`Note:
Loading a model from its configuration file does `),Nme=s(MW,"STRONG",{});var Knt=n(Nme);xQo=r(Knt,"not"),Knt.forEach(t),kQo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=s(MW,"CODE",{});var Znt=n(qme);RQo=r(Znt,"from_pretrained()"),Znt.forEach(t),SQo=r(MW,"to load the model weights."),MW.forEach(t),PQo=i(Il),Ome=s(Il,"P",{});var elt=n(Ome);$Qo=r(elt,"Examples:"),elt.forEach(t),IQo=i(Il),f(FA.$$.fragment,Il),Il.forEach(t),jQo=i($l),so=s($l,"DIV",{class:!0});var la=n(so);f(CA.$$.fragment,la),DQo=i(la),Gme=s(la,"P",{});var olt=n(Gme);NQo=r(olt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),olt.forEach(t),qQo=i(la),gs=s(la,"P",{});var E5=n(gs);OQo=r(E5,"The model class to instantiate is selected based on the "),Xme=s(E5,"CODE",{});var rlt=n(Xme);GQo=r(rlt,"model_type"),rlt.forEach(t),XQo=r(E5,` property of the config object (either
passed as an argument or loaded from `),Vme=s(E5,"CODE",{});var tlt=n(Vme);VQo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),zQo=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=s(E5,"CODE",{});var alt=n(zme);WQo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),QQo=r(E5,":"),E5.forEach(t),HQo=i(la),MA=s(la,"UL",{});var $Se=n(MA);eF=s($Se,"LI",{});var J0e=n(eF);Wme=s(J0e,"STRONG",{});var slt=n(Wme);UQo=r(slt,"beit"),slt.forEach(t),JQo=r(J0e," \u2014 "),aq=s(J0e,"A",{href:!0});var nlt=n(aq);YQo=r(nlt,"BeitForSemanticSegmentation"),nlt.forEach(t),KQo=r(J0e," (BEiT model)"),J0e.forEach(t),ZQo=i($Se),oF=s($Se,"LI",{});var Y0e=n(oF);Qme=s(Y0e,"STRONG",{});var llt=n(Qme);eHo=r(llt,"segformer"),llt.forEach(t),oHo=r(Y0e," \u2014 "),sq=s(Y0e,"A",{href:!0});var ilt=n(sq);rHo=r(ilt,"SegformerForSemanticSegmentation"),ilt.forEach(t),tHo=r(Y0e," (SegFormer model)"),Y0e.forEach(t),$Se.forEach(t),aHo=i(la),rF=s(la,"P",{});var K0e=n(rF);sHo=r(K0e,"The model is set in evaluation mode by default using "),Hme=s(K0e,"CODE",{});var dlt=n(Hme);nHo=r(dlt,"model.eval()"),dlt.forEach(t),lHo=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=s(K0e,"CODE",{});var clt=n(Ume);iHo=r(clt,"model.train()"),clt.forEach(t),K0e.forEach(t),dHo=i(la),Jme=s(la,"P",{});var mlt=n(Jme);cHo=r(mlt,"Examples:"),mlt.forEach(t),mHo=i(la),f(EA.$$.fragment,la),la.forEach(t),$l.forEach(t),yke=i(c),cc=s(c,"H2",{class:!0});var ISe=n(cc);tF=s(ISe,"A",{id:!0,class:!0,href:!0});var flt=n(tF);Yme=s(flt,"SPAN",{});var glt=n(Yme);f(yA.$$.fragment,glt),glt.forEach(t),flt.forEach(t),fHo=i(ISe),Kme=s(ISe,"SPAN",{});var hlt=n(Kme);gHo=r(hlt,"AutoModelForInstanceSegmentation"),hlt.forEach(t),ISe.forEach(t),wke=i(c),br=s(c,"DIV",{class:!0});var jl=n(br);f(wA.$$.fragment,jl),hHo=i(jl),mc=s(jl,"P",{});var EW=n(mc);uHo=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Zme=s(EW,"CODE",{});var ult=n(Zme);pHo=r(ult,"from_pretrained()"),ult.forEach(t),_Ho=r(EW,"class method or the "),efe=s(EW,"CODE",{});var plt=n(efe);bHo=r(plt,"from_config()"),plt.forEach(t),vHo=r(EW,`class
method.`),EW.forEach(t),THo=i(jl),AA=s(jl,"P",{});var jSe=n(AA);FHo=r(jSe,"This class cannot be instantiated directly using "),ofe=s(jSe,"CODE",{});var _lt=n(ofe);CHo=r(_lt,"__init__()"),_lt.forEach(t),MHo=r(jSe," (throws an error)."),jSe.forEach(t),EHo=i(jl),ft=s(jl,"DIV",{class:!0});var Dl=n(ft);f(LA.$$.fragment,Dl),yHo=i(Dl),rfe=s(Dl,"P",{});var blt=n(rfe);wHo=r(blt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),blt.forEach(t),AHo=i(Dl),fc=s(Dl,"P",{});var yW=n(fc);LHo=r(yW,`Note:
Loading a model from its configuration file does `),tfe=s(yW,"STRONG",{});var vlt=n(tfe);BHo=r(vlt,"not"),vlt.forEach(t),xHo=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=s(yW,"CODE",{});var Tlt=n(afe);kHo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),RHo=r(yW,"to load the model weights."),yW.forEach(t),SHo=i(Dl),sfe=s(Dl,"P",{});var Flt=n(sfe);PHo=r(Flt,"Examples:"),Flt.forEach(t),$Ho=i(Dl),f(BA.$$.fragment,Dl),Dl.forEach(t),IHo=i(jl),no=s(jl,"DIV",{class:!0});var ia=n(no);f(xA.$$.fragment,ia),jHo=i(ia),nfe=s(ia,"P",{});var Clt=n(nfe);DHo=r(Clt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Clt.forEach(t),NHo=i(ia),hs=s(ia,"P",{});var y5=n(hs);qHo=r(y5,"The model class to instantiate is selected based on the "),lfe=s(y5,"CODE",{});var Mlt=n(lfe);OHo=r(Mlt,"model_type"),Mlt.forEach(t),GHo=r(y5,` property of the config object (either
passed as an argument or loaded from `),ife=s(y5,"CODE",{});var Elt=n(ife);XHo=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),VHo=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=s(y5,"CODE",{});var ylt=n(dfe);zHo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),WHo=r(y5,":"),y5.forEach(t),QHo=i(ia),cfe=s(ia,"UL",{});var wlt=n(cfe);aF=s(wlt,"LI",{});var Z0e=n(aF);mfe=s(Z0e,"STRONG",{});var Alt=n(mfe);HHo=r(Alt,"maskformer"),Alt.forEach(t),UHo=r(Z0e," \u2014 "),nq=s(Z0e,"A",{href:!0});var Llt=n(nq);JHo=r(Llt,"MaskFormerForInstanceSegmentation"),Llt.forEach(t),YHo=r(Z0e," (MaskFormer model)"),Z0e.forEach(t),wlt.forEach(t),KHo=i(ia),sF=s(ia,"P",{});var eLe=n(sF);ZHo=r(eLe,"The model is set in evaluation mode by default using "),ffe=s(eLe,"CODE",{});var Blt=n(ffe);eUo=r(Blt,"model.eval()"),Blt.forEach(t),oUo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=s(eLe,"CODE",{});var xlt=n(gfe);rUo=r(xlt,"model.train()"),xlt.forEach(t),eLe.forEach(t),tUo=i(ia),hfe=s(ia,"P",{});var klt=n(hfe);aUo=r(klt,"Examples:"),klt.forEach(t),sUo=i(ia),f(kA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),Ake=i(c),gc=s(c,"H2",{class:!0});var DSe=n(gc);nF=s(DSe,"A",{id:!0,class:!0,href:!0});var Rlt=n(nF);ufe=s(Rlt,"SPAN",{});var Slt=n(ufe);f(RA.$$.fragment,Slt),Slt.forEach(t),Rlt.forEach(t),nUo=i(DSe),pfe=s(DSe,"SPAN",{});var Plt=n(pfe);lUo=r(Plt,"TFAutoModel"),Plt.forEach(t),DSe.forEach(t),Lke=i(c),vr=s(c,"DIV",{class:!0});var Nl=n(vr);f(SA.$$.fragment,Nl),iUo=i(Nl),hc=s(Nl,"P",{});var wW=n(hc);dUo=r(wW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_fe=s(wW,"CODE",{});var $lt=n(_fe);cUo=r($lt,"from_pretrained()"),$lt.forEach(t),mUo=r(wW,"class method or the "),bfe=s(wW,"CODE",{});var Ilt=n(bfe);fUo=r(Ilt,"from_config()"),Ilt.forEach(t),gUo=r(wW,`class
method.`),wW.forEach(t),hUo=i(Nl),PA=s(Nl,"P",{});var NSe=n(PA);uUo=r(NSe,"This class cannot be instantiated directly using "),vfe=s(NSe,"CODE",{});var jlt=n(vfe);pUo=r(jlt,"__init__()"),jlt.forEach(t),_Uo=r(NSe," (throws an error)."),NSe.forEach(t),bUo=i(Nl),gt=s(Nl,"DIV",{class:!0});var ql=n(gt);f($A.$$.fragment,ql),vUo=i(ql),Tfe=s(ql,"P",{});var Dlt=n(Tfe);TUo=r(Dlt,"Instantiates one of the base model classes of the library from a configuration."),Dlt.forEach(t),FUo=i(ql),uc=s(ql,"P",{});var AW=n(uc);CUo=r(AW,`Note:
Loading a model from its configuration file does `),Ffe=s(AW,"STRONG",{});var Nlt=n(Ffe);MUo=r(Nlt,"not"),Nlt.forEach(t),EUo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=s(AW,"CODE",{});var qlt=n(Cfe);yUo=r(qlt,"from_pretrained()"),qlt.forEach(t),wUo=r(AW,"to load the model weights."),AW.forEach(t),AUo=i(ql),Mfe=s(ql,"P",{});var Olt=n(Mfe);LUo=r(Olt,"Examples:"),Olt.forEach(t),BUo=i(ql),f(IA.$$.fragment,ql),ql.forEach(t),xUo=i(Nl),ho=s(Nl,"DIV",{class:!0});var ua=n(ho);f(jA.$$.fragment,ua),kUo=i(ua),Efe=s(ua,"P",{});var Glt=n(Efe);RUo=r(Glt,"Instantiate one of the base model classes of the library from a pretrained model."),Glt.forEach(t),SUo=i(ua),us=s(ua,"P",{});var w5=n(us);PUo=r(w5,"The model class to instantiate is selected based on the "),yfe=s(w5,"CODE",{});var Xlt=n(yfe);$Uo=r(Xlt,"model_type"),Xlt.forEach(t),IUo=r(w5,` property of the config object (either
passed as an argument or loaded from `),wfe=s(w5,"CODE",{});var Vlt=n(wfe);jUo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),DUo=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=s(w5,"CODE",{});var zlt=n(Afe);NUo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),qUo=r(w5,":"),w5.forEach(t),OUo=i(ua),B=s(ua,"UL",{});var x=n(B);lF=s(x,"LI",{});var oLe=n(lF);Lfe=s(oLe,"STRONG",{});var Wlt=n(Lfe);GUo=r(Wlt,"albert"),Wlt.forEach(t),XUo=r(oLe," \u2014 "),lq=s(oLe,"A",{href:!0});var Qlt=n(lq);VUo=r(Qlt,"TFAlbertModel"),Qlt.forEach(t),zUo=r(oLe," (ALBERT model)"),oLe.forEach(t),WUo=i(x),iF=s(x,"LI",{});var rLe=n(iF);Bfe=s(rLe,"STRONG",{});var Hlt=n(Bfe);QUo=r(Hlt,"bart"),Hlt.forEach(t),HUo=r(rLe," \u2014 "),iq=s(rLe,"A",{href:!0});var Ult=n(iq);UUo=r(Ult,"TFBartModel"),Ult.forEach(t),JUo=r(rLe," (BART model)"),rLe.forEach(t),YUo=i(x),dF=s(x,"LI",{});var tLe=n(dF);xfe=s(tLe,"STRONG",{});var Jlt=n(xfe);KUo=r(Jlt,"bert"),Jlt.forEach(t),ZUo=r(tLe," \u2014 "),dq=s(tLe,"A",{href:!0});var Ylt=n(dq);eJo=r(Ylt,"TFBertModel"),Ylt.forEach(t),oJo=r(tLe," (BERT model)"),tLe.forEach(t),rJo=i(x),cF=s(x,"LI",{});var aLe=n(cF);kfe=s(aLe,"STRONG",{});var Klt=n(kfe);tJo=r(Klt,"blenderbot"),Klt.forEach(t),aJo=r(aLe," \u2014 "),cq=s(aLe,"A",{href:!0});var Zlt=n(cq);sJo=r(Zlt,"TFBlenderbotModel"),Zlt.forEach(t),nJo=r(aLe," (Blenderbot model)"),aLe.forEach(t),lJo=i(x),mF=s(x,"LI",{});var sLe=n(mF);Rfe=s(sLe,"STRONG",{});var eit=n(Rfe);iJo=r(eit,"blenderbot-small"),eit.forEach(t),dJo=r(sLe," \u2014 "),mq=s(sLe,"A",{href:!0});var oit=n(mq);cJo=r(oit,"TFBlenderbotSmallModel"),oit.forEach(t),mJo=r(sLe," (BlenderbotSmall model)"),sLe.forEach(t),fJo=i(x),fF=s(x,"LI",{});var nLe=n(fF);Sfe=s(nLe,"STRONG",{});var rit=n(Sfe);gJo=r(rit,"camembert"),rit.forEach(t),hJo=r(nLe," \u2014 "),fq=s(nLe,"A",{href:!0});var tit=n(fq);uJo=r(tit,"TFCamembertModel"),tit.forEach(t),pJo=r(nLe," (CamemBERT model)"),nLe.forEach(t),_Jo=i(x),gF=s(x,"LI",{});var lLe=n(gF);Pfe=s(lLe,"STRONG",{});var ait=n(Pfe);bJo=r(ait,"clip"),ait.forEach(t),vJo=r(lLe," \u2014 "),gq=s(lLe,"A",{href:!0});var sit=n(gq);TJo=r(sit,"TFCLIPModel"),sit.forEach(t),FJo=r(lLe," (CLIP model)"),lLe.forEach(t),CJo=i(x),hF=s(x,"LI",{});var iLe=n(hF);$fe=s(iLe,"STRONG",{});var nit=n($fe);MJo=r(nit,"convbert"),nit.forEach(t),EJo=r(iLe," \u2014 "),hq=s(iLe,"A",{href:!0});var lit=n(hq);yJo=r(lit,"TFConvBertModel"),lit.forEach(t),wJo=r(iLe," (ConvBERT model)"),iLe.forEach(t),AJo=i(x),uF=s(x,"LI",{});var dLe=n(uF);Ife=s(dLe,"STRONG",{});var iit=n(Ife);LJo=r(iit,"convnext"),iit.forEach(t),BJo=r(dLe," \u2014 "),uq=s(dLe,"A",{href:!0});var dit=n(uq);xJo=r(dit,"TFConvNextModel"),dit.forEach(t),kJo=r(dLe," (ConvNext model)"),dLe.forEach(t),RJo=i(x),pF=s(x,"LI",{});var cLe=n(pF);jfe=s(cLe,"STRONG",{});var cit=n(jfe);SJo=r(cit,"ctrl"),cit.forEach(t),PJo=r(cLe," \u2014 "),pq=s(cLe,"A",{href:!0});var mit=n(pq);$Jo=r(mit,"TFCTRLModel"),mit.forEach(t),IJo=r(cLe," (CTRL model)"),cLe.forEach(t),jJo=i(x),_F=s(x,"LI",{});var mLe=n(_F);Dfe=s(mLe,"STRONG",{});var fit=n(Dfe);DJo=r(fit,"deberta"),fit.forEach(t),NJo=r(mLe," \u2014 "),_q=s(mLe,"A",{href:!0});var git=n(_q);qJo=r(git,"TFDebertaModel"),git.forEach(t),OJo=r(mLe," (DeBERTa model)"),mLe.forEach(t),GJo=i(x),bF=s(x,"LI",{});var fLe=n(bF);Nfe=s(fLe,"STRONG",{});var hit=n(Nfe);XJo=r(hit,"deberta-v2"),hit.forEach(t),VJo=r(fLe," \u2014 "),bq=s(fLe,"A",{href:!0});var uit=n(bq);zJo=r(uit,"TFDebertaV2Model"),uit.forEach(t),WJo=r(fLe," (DeBERTa-v2 model)"),fLe.forEach(t),QJo=i(x),vF=s(x,"LI",{});var gLe=n(vF);qfe=s(gLe,"STRONG",{});var pit=n(qfe);HJo=r(pit,"distilbert"),pit.forEach(t),UJo=r(gLe," \u2014 "),vq=s(gLe,"A",{href:!0});var _it=n(vq);JJo=r(_it,"TFDistilBertModel"),_it.forEach(t),YJo=r(gLe," (DistilBERT model)"),gLe.forEach(t),KJo=i(x),TF=s(x,"LI",{});var hLe=n(TF);Ofe=s(hLe,"STRONG",{});var bit=n(Ofe);ZJo=r(bit,"dpr"),bit.forEach(t),eYo=r(hLe," \u2014 "),Tq=s(hLe,"A",{href:!0});var vit=n(Tq);oYo=r(vit,"TFDPRQuestionEncoder"),vit.forEach(t),rYo=r(hLe," (DPR model)"),hLe.forEach(t),tYo=i(x),FF=s(x,"LI",{});var uLe=n(FF);Gfe=s(uLe,"STRONG",{});var Tit=n(Gfe);aYo=r(Tit,"electra"),Tit.forEach(t),sYo=r(uLe," \u2014 "),Fq=s(uLe,"A",{href:!0});var Fit=n(Fq);nYo=r(Fit,"TFElectraModel"),Fit.forEach(t),lYo=r(uLe," (ELECTRA model)"),uLe.forEach(t),iYo=i(x),CF=s(x,"LI",{});var pLe=n(CF);Xfe=s(pLe,"STRONG",{});var Cit=n(Xfe);dYo=r(Cit,"flaubert"),Cit.forEach(t),cYo=r(pLe," \u2014 "),Cq=s(pLe,"A",{href:!0});var Mit=n(Cq);mYo=r(Mit,"TFFlaubertModel"),Mit.forEach(t),fYo=r(pLe," (FlauBERT model)"),pLe.forEach(t),gYo=i(x),On=s(x,"LI",{});var X8=n(On);Vfe=s(X8,"STRONG",{});var Eit=n(Vfe);hYo=r(Eit,"funnel"),Eit.forEach(t),uYo=r(X8," \u2014 "),Mq=s(X8,"A",{href:!0});var yit=n(Mq);pYo=r(yit,"TFFunnelModel"),yit.forEach(t),_Yo=r(X8," or "),Eq=s(X8,"A",{href:!0});var wit=n(Eq);bYo=r(wit,"TFFunnelBaseModel"),wit.forEach(t),vYo=r(X8," (Funnel Transformer model)"),X8.forEach(t),TYo=i(x),MF=s(x,"LI",{});var _Le=n(MF);zfe=s(_Le,"STRONG",{});var Ait=n(zfe);FYo=r(Ait,"gpt2"),Ait.forEach(t),CYo=r(_Le," \u2014 "),yq=s(_Le,"A",{href:!0});var Lit=n(yq);MYo=r(Lit,"TFGPT2Model"),Lit.forEach(t),EYo=r(_Le," (OpenAI GPT-2 model)"),_Le.forEach(t),yYo=i(x),EF=s(x,"LI",{});var bLe=n(EF);Wfe=s(bLe,"STRONG",{});var Bit=n(Wfe);wYo=r(Bit,"hubert"),Bit.forEach(t),AYo=r(bLe," \u2014 "),wq=s(bLe,"A",{href:!0});var xit=n(wq);LYo=r(xit,"TFHubertModel"),xit.forEach(t),BYo=r(bLe," (Hubert model)"),bLe.forEach(t),xYo=i(x),yF=s(x,"LI",{});var vLe=n(yF);Qfe=s(vLe,"STRONG",{});var kit=n(Qfe);kYo=r(kit,"layoutlm"),kit.forEach(t),RYo=r(vLe," \u2014 "),Aq=s(vLe,"A",{href:!0});var Rit=n(Aq);SYo=r(Rit,"TFLayoutLMModel"),Rit.forEach(t),PYo=r(vLe," (LayoutLM model)"),vLe.forEach(t),$Yo=i(x),wF=s(x,"LI",{});var TLe=n(wF);Hfe=s(TLe,"STRONG",{});var Sit=n(Hfe);IYo=r(Sit,"led"),Sit.forEach(t),jYo=r(TLe," \u2014 "),Lq=s(TLe,"A",{href:!0});var Pit=n(Lq);DYo=r(Pit,"TFLEDModel"),Pit.forEach(t),NYo=r(TLe," (LED model)"),TLe.forEach(t),qYo=i(x),AF=s(x,"LI",{});var FLe=n(AF);Ufe=s(FLe,"STRONG",{});var $it=n(Ufe);OYo=r($it,"longformer"),$it.forEach(t),GYo=r(FLe," \u2014 "),Bq=s(FLe,"A",{href:!0});var Iit=n(Bq);XYo=r(Iit,"TFLongformerModel"),Iit.forEach(t),VYo=r(FLe," (Longformer model)"),FLe.forEach(t),zYo=i(x),LF=s(x,"LI",{});var CLe=n(LF);Jfe=s(CLe,"STRONG",{});var jit=n(Jfe);WYo=r(jit,"lxmert"),jit.forEach(t),QYo=r(CLe," \u2014 "),xq=s(CLe,"A",{href:!0});var Dit=n(xq);HYo=r(Dit,"TFLxmertModel"),Dit.forEach(t),UYo=r(CLe," (LXMERT model)"),CLe.forEach(t),JYo=i(x),BF=s(x,"LI",{});var MLe=n(BF);Yfe=s(MLe,"STRONG",{});var Nit=n(Yfe);YYo=r(Nit,"marian"),Nit.forEach(t),KYo=r(MLe," \u2014 "),kq=s(MLe,"A",{href:!0});var qit=n(kq);ZYo=r(qit,"TFMarianModel"),qit.forEach(t),eKo=r(MLe," (Marian model)"),MLe.forEach(t),oKo=i(x),xF=s(x,"LI",{});var ELe=n(xF);Kfe=s(ELe,"STRONG",{});var Oit=n(Kfe);rKo=r(Oit,"mbart"),Oit.forEach(t),tKo=r(ELe," \u2014 "),Rq=s(ELe,"A",{href:!0});var Git=n(Rq);aKo=r(Git,"TFMBartModel"),Git.forEach(t),sKo=r(ELe," (mBART model)"),ELe.forEach(t),nKo=i(x),kF=s(x,"LI",{});var yLe=n(kF);Zfe=s(yLe,"STRONG",{});var Xit=n(Zfe);lKo=r(Xit,"mobilebert"),Xit.forEach(t),iKo=r(yLe," \u2014 "),Sq=s(yLe,"A",{href:!0});var Vit=n(Sq);dKo=r(Vit,"TFMobileBertModel"),Vit.forEach(t),cKo=r(yLe," (MobileBERT model)"),yLe.forEach(t),mKo=i(x),RF=s(x,"LI",{});var wLe=n(RF);ege=s(wLe,"STRONG",{});var zit=n(ege);fKo=r(zit,"mpnet"),zit.forEach(t),gKo=r(wLe," \u2014 "),Pq=s(wLe,"A",{href:!0});var Wit=n(Pq);hKo=r(Wit,"TFMPNetModel"),Wit.forEach(t),uKo=r(wLe," (MPNet model)"),wLe.forEach(t),pKo=i(x),SF=s(x,"LI",{});var ALe=n(SF);oge=s(ALe,"STRONG",{});var Qit=n(oge);_Ko=r(Qit,"mt5"),Qit.forEach(t),bKo=r(ALe," \u2014 "),$q=s(ALe,"A",{href:!0});var Hit=n($q);vKo=r(Hit,"TFMT5Model"),Hit.forEach(t),TKo=r(ALe," (mT5 model)"),ALe.forEach(t),FKo=i(x),PF=s(x,"LI",{});var LLe=n(PF);rge=s(LLe,"STRONG",{});var Uit=n(rge);CKo=r(Uit,"openai-gpt"),Uit.forEach(t),MKo=r(LLe," \u2014 "),Iq=s(LLe,"A",{href:!0});var Jit=n(Iq);EKo=r(Jit,"TFOpenAIGPTModel"),Jit.forEach(t),yKo=r(LLe," (OpenAI GPT model)"),LLe.forEach(t),wKo=i(x),$F=s(x,"LI",{});var BLe=n($F);tge=s(BLe,"STRONG",{});var Yit=n(tge);AKo=r(Yit,"pegasus"),Yit.forEach(t),LKo=r(BLe," \u2014 "),jq=s(BLe,"A",{href:!0});var Kit=n(jq);BKo=r(Kit,"TFPegasusModel"),Kit.forEach(t),xKo=r(BLe," (Pegasus model)"),BLe.forEach(t),kKo=i(x),IF=s(x,"LI",{});var xLe=n(IF);age=s(xLe,"STRONG",{});var Zit=n(age);RKo=r(Zit,"rembert"),Zit.forEach(t),SKo=r(xLe," \u2014 "),Dq=s(xLe,"A",{href:!0});var edt=n(Dq);PKo=r(edt,"TFRemBertModel"),edt.forEach(t),$Ko=r(xLe," (RemBERT model)"),xLe.forEach(t),IKo=i(x),jF=s(x,"LI",{});var kLe=n(jF);sge=s(kLe,"STRONG",{});var odt=n(sge);jKo=r(odt,"roberta"),odt.forEach(t),DKo=r(kLe," \u2014 "),Nq=s(kLe,"A",{href:!0});var rdt=n(Nq);NKo=r(rdt,"TFRobertaModel"),rdt.forEach(t),qKo=r(kLe," (RoBERTa model)"),kLe.forEach(t),OKo=i(x),DF=s(x,"LI",{});var RLe=n(DF);nge=s(RLe,"STRONG",{});var tdt=n(nge);GKo=r(tdt,"roformer"),tdt.forEach(t),XKo=r(RLe," \u2014 "),qq=s(RLe,"A",{href:!0});var adt=n(qq);VKo=r(adt,"TFRoFormerModel"),adt.forEach(t),zKo=r(RLe," (RoFormer model)"),RLe.forEach(t),WKo=i(x),NF=s(x,"LI",{});var SLe=n(NF);lge=s(SLe,"STRONG",{});var sdt=n(lge);QKo=r(sdt,"speech_to_text"),sdt.forEach(t),HKo=r(SLe," \u2014 "),Oq=s(SLe,"A",{href:!0});var ndt=n(Oq);UKo=r(ndt,"TFSpeech2TextModel"),ndt.forEach(t),JKo=r(SLe," (Speech2Text model)"),SLe.forEach(t),YKo=i(x),qF=s(x,"LI",{});var PLe=n(qF);ige=s(PLe,"STRONG",{});var ldt=n(ige);KKo=r(ldt,"t5"),ldt.forEach(t),ZKo=r(PLe," \u2014 "),Gq=s(PLe,"A",{href:!0});var idt=n(Gq);eZo=r(idt,"TFT5Model"),idt.forEach(t),oZo=r(PLe," (T5 model)"),PLe.forEach(t),rZo=i(x),OF=s(x,"LI",{});var $Le=n(OF);dge=s($Le,"STRONG",{});var ddt=n(dge);tZo=r(ddt,"tapas"),ddt.forEach(t),aZo=r($Le," \u2014 "),Xq=s($Le,"A",{href:!0});var cdt=n(Xq);sZo=r(cdt,"TFTapasModel"),cdt.forEach(t),nZo=r($Le," (TAPAS model)"),$Le.forEach(t),lZo=i(x),GF=s(x,"LI",{});var ILe=n(GF);cge=s(ILe,"STRONG",{});var mdt=n(cge);iZo=r(mdt,"transfo-xl"),mdt.forEach(t),dZo=r(ILe," \u2014 "),Vq=s(ILe,"A",{href:!0});var fdt=n(Vq);cZo=r(fdt,"TFTransfoXLModel"),fdt.forEach(t),mZo=r(ILe," (Transformer-XL model)"),ILe.forEach(t),fZo=i(x),XF=s(x,"LI",{});var jLe=n(XF);mge=s(jLe,"STRONG",{});var gdt=n(mge);gZo=r(gdt,"vit"),gdt.forEach(t),hZo=r(jLe," \u2014 "),zq=s(jLe,"A",{href:!0});var hdt=n(zq);uZo=r(hdt,"TFViTModel"),hdt.forEach(t),pZo=r(jLe," (ViT model)"),jLe.forEach(t),_Zo=i(x),VF=s(x,"LI",{});var DLe=n(VF);fge=s(DLe,"STRONG",{});var udt=n(fge);bZo=r(udt,"wav2vec2"),udt.forEach(t),vZo=r(DLe," \u2014 "),Wq=s(DLe,"A",{href:!0});var pdt=n(Wq);TZo=r(pdt,"TFWav2Vec2Model"),pdt.forEach(t),FZo=r(DLe," (Wav2Vec2 model)"),DLe.forEach(t),CZo=i(x),zF=s(x,"LI",{});var NLe=n(zF);gge=s(NLe,"STRONG",{});var _dt=n(gge);MZo=r(_dt,"xlm"),_dt.forEach(t),EZo=r(NLe," \u2014 "),Qq=s(NLe,"A",{href:!0});var bdt=n(Qq);yZo=r(bdt,"TFXLMModel"),bdt.forEach(t),wZo=r(NLe," (XLM model)"),NLe.forEach(t),AZo=i(x),WF=s(x,"LI",{});var qLe=n(WF);hge=s(qLe,"STRONG",{});var vdt=n(hge);LZo=r(vdt,"xlm-roberta"),vdt.forEach(t),BZo=r(qLe," \u2014 "),Hq=s(qLe,"A",{href:!0});var Tdt=n(Hq);xZo=r(Tdt,"TFXLMRobertaModel"),Tdt.forEach(t),kZo=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),RZo=i(x),QF=s(x,"LI",{});var OLe=n(QF);uge=s(OLe,"STRONG",{});var Fdt=n(uge);SZo=r(Fdt,"xlnet"),Fdt.forEach(t),PZo=r(OLe," \u2014 "),Uq=s(OLe,"A",{href:!0});var Cdt=n(Uq);$Zo=r(Cdt,"TFXLNetModel"),Cdt.forEach(t),IZo=r(OLe," (XLNet model)"),OLe.forEach(t),x.forEach(t),jZo=i(ua),pge=s(ua,"P",{});var Mdt=n(pge);DZo=r(Mdt,"Examples:"),Mdt.forEach(t),NZo=i(ua),f(DA.$$.fragment,ua),ua.forEach(t),Nl.forEach(t),Bke=i(c),pc=s(c,"H2",{class:!0});var qSe=n(pc);HF=s(qSe,"A",{id:!0,class:!0,href:!0});var Edt=n(HF);_ge=s(Edt,"SPAN",{});var ydt=n(_ge);f(NA.$$.fragment,ydt),ydt.forEach(t),Edt.forEach(t),qZo=i(qSe),bge=s(qSe,"SPAN",{});var wdt=n(bge);OZo=r(wdt,"TFAutoModelForPreTraining"),wdt.forEach(t),qSe.forEach(t),xke=i(c),Tr=s(c,"DIV",{class:!0});var Ol=n(Tr);f(qA.$$.fragment,Ol),GZo=i(Ol),_c=s(Ol,"P",{});var LW=n(_c);XZo=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vge=s(LW,"CODE",{});var Adt=n(vge);VZo=r(Adt,"from_pretrained()"),Adt.forEach(t),zZo=r(LW,"class method or the "),Tge=s(LW,"CODE",{});var Ldt=n(Tge);WZo=r(Ldt,"from_config()"),Ldt.forEach(t),QZo=r(LW,`class
method.`),LW.forEach(t),HZo=i(Ol),OA=s(Ol,"P",{});var OSe=n(OA);UZo=r(OSe,"This class cannot be instantiated directly using "),Fge=s(OSe,"CODE",{});var Bdt=n(Fge);JZo=r(Bdt,"__init__()"),Bdt.forEach(t),YZo=r(OSe," (throws an error)."),OSe.forEach(t),KZo=i(Ol),ht=s(Ol,"DIV",{class:!0});var Gl=n(ht);f(GA.$$.fragment,Gl),ZZo=i(Gl),Cge=s(Gl,"P",{});var xdt=n(Cge);eer=r(xdt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xdt.forEach(t),oer=i(Gl),bc=s(Gl,"P",{});var BW=n(bc);rer=r(BW,`Note:
Loading a model from its configuration file does `),Mge=s(BW,"STRONG",{});var kdt=n(Mge);ter=r(kdt,"not"),kdt.forEach(t),aer=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ege=s(BW,"CODE",{});var Rdt=n(Ege);ser=r(Rdt,"from_pretrained()"),Rdt.forEach(t),ner=r(BW,"to load the model weights."),BW.forEach(t),ler=i(Gl),yge=s(Gl,"P",{});var Sdt=n(yge);ier=r(Sdt,"Examples:"),Sdt.forEach(t),der=i(Gl),f(XA.$$.fragment,Gl),Gl.forEach(t),cer=i(Ol),uo=s(Ol,"DIV",{class:!0});var pa=n(uo);f(VA.$$.fragment,pa),mer=i(pa),wge=s(pa,"P",{});var Pdt=n(wge);fer=r(Pdt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pdt.forEach(t),ger=i(pa),ps=s(pa,"P",{});var A5=n(ps);her=r(A5,"The model class to instantiate is selected based on the "),Age=s(A5,"CODE",{});var $dt=n(Age);uer=r($dt,"model_type"),$dt.forEach(t),per=r(A5,` property of the config object (either
passed as an argument or loaded from `),Lge=s(A5,"CODE",{});var Idt=n(Lge);_er=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),ber=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=s(A5,"CODE",{});var jdt=n(Bge);ver=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),Ter=r(A5,":"),A5.forEach(t),Fer=i(pa),H=s(pa,"UL",{});var U=n(H);UF=s(U,"LI",{});var GLe=n(UF);xge=s(GLe,"STRONG",{});var Ddt=n(xge);Cer=r(Ddt,"albert"),Ddt.forEach(t),Mer=r(GLe," \u2014 "),Jq=s(GLe,"A",{href:!0});var Ndt=n(Jq);Eer=r(Ndt,"TFAlbertForPreTraining"),Ndt.forEach(t),yer=r(GLe," (ALBERT model)"),GLe.forEach(t),wer=i(U),JF=s(U,"LI",{});var XLe=n(JF);kge=s(XLe,"STRONG",{});var qdt=n(kge);Aer=r(qdt,"bart"),qdt.forEach(t),Ler=r(XLe," \u2014 "),Yq=s(XLe,"A",{href:!0});var Odt=n(Yq);Ber=r(Odt,"TFBartForConditionalGeneration"),Odt.forEach(t),xer=r(XLe," (BART model)"),XLe.forEach(t),ker=i(U),YF=s(U,"LI",{});var VLe=n(YF);Rge=s(VLe,"STRONG",{});var Gdt=n(Rge);Rer=r(Gdt,"bert"),Gdt.forEach(t),Ser=r(VLe," \u2014 "),Kq=s(VLe,"A",{href:!0});var Xdt=n(Kq);Per=r(Xdt,"TFBertForPreTraining"),Xdt.forEach(t),$er=r(VLe," (BERT model)"),VLe.forEach(t),Ier=i(U),KF=s(U,"LI",{});var zLe=n(KF);Sge=s(zLe,"STRONG",{});var Vdt=n(Sge);jer=r(Vdt,"camembert"),Vdt.forEach(t),Der=r(zLe," \u2014 "),Zq=s(zLe,"A",{href:!0});var zdt=n(Zq);Ner=r(zdt,"TFCamembertForMaskedLM"),zdt.forEach(t),qer=r(zLe," (CamemBERT model)"),zLe.forEach(t),Oer=i(U),ZF=s(U,"LI",{});var WLe=n(ZF);Pge=s(WLe,"STRONG",{});var Wdt=n(Pge);Ger=r(Wdt,"ctrl"),Wdt.forEach(t),Xer=r(WLe," \u2014 "),eO=s(WLe,"A",{href:!0});var Qdt=n(eO);Ver=r(Qdt,"TFCTRLLMHeadModel"),Qdt.forEach(t),zer=r(WLe," (CTRL model)"),WLe.forEach(t),Wer=i(U),eC=s(U,"LI",{});var QLe=n(eC);$ge=s(QLe,"STRONG",{});var Hdt=n($ge);Qer=r(Hdt,"distilbert"),Hdt.forEach(t),Her=r(QLe," \u2014 "),oO=s(QLe,"A",{href:!0});var Udt=n(oO);Uer=r(Udt,"TFDistilBertForMaskedLM"),Udt.forEach(t),Jer=r(QLe," (DistilBERT model)"),QLe.forEach(t),Yer=i(U),oC=s(U,"LI",{});var HLe=n(oC);Ige=s(HLe,"STRONG",{});var Jdt=n(Ige);Ker=r(Jdt,"electra"),Jdt.forEach(t),Zer=r(HLe," \u2014 "),rO=s(HLe,"A",{href:!0});var Ydt=n(rO);eor=r(Ydt,"TFElectraForPreTraining"),Ydt.forEach(t),oor=r(HLe," (ELECTRA model)"),HLe.forEach(t),ror=i(U),rC=s(U,"LI",{});var ULe=n(rC);jge=s(ULe,"STRONG",{});var Kdt=n(jge);tor=r(Kdt,"flaubert"),Kdt.forEach(t),aor=r(ULe," \u2014 "),tO=s(ULe,"A",{href:!0});var Zdt=n(tO);sor=r(Zdt,"TFFlaubertWithLMHeadModel"),Zdt.forEach(t),nor=r(ULe," (FlauBERT model)"),ULe.forEach(t),lor=i(U),tC=s(U,"LI",{});var JLe=n(tC);Dge=s(JLe,"STRONG",{});var ect=n(Dge);ior=r(ect,"funnel"),ect.forEach(t),dor=r(JLe," \u2014 "),aO=s(JLe,"A",{href:!0});var oct=n(aO);cor=r(oct,"TFFunnelForPreTraining"),oct.forEach(t),mor=r(JLe," (Funnel Transformer model)"),JLe.forEach(t),gor=i(U),aC=s(U,"LI",{});var YLe=n(aC);Nge=s(YLe,"STRONG",{});var rct=n(Nge);hor=r(rct,"gpt2"),rct.forEach(t),uor=r(YLe," \u2014 "),sO=s(YLe,"A",{href:!0});var tct=n(sO);por=r(tct,"TFGPT2LMHeadModel"),tct.forEach(t),_or=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),bor=i(U),sC=s(U,"LI",{});var KLe=n(sC);qge=s(KLe,"STRONG",{});var act=n(qge);vor=r(act,"layoutlm"),act.forEach(t),Tor=r(KLe," \u2014 "),nO=s(KLe,"A",{href:!0});var sct=n(nO);For=r(sct,"TFLayoutLMForMaskedLM"),sct.forEach(t),Cor=r(KLe," (LayoutLM model)"),KLe.forEach(t),Mor=i(U),nC=s(U,"LI",{});var ZLe=n(nC);Oge=s(ZLe,"STRONG",{});var nct=n(Oge);Eor=r(nct,"lxmert"),nct.forEach(t),yor=r(ZLe," \u2014 "),lO=s(ZLe,"A",{href:!0});var lct=n(lO);wor=r(lct,"TFLxmertForPreTraining"),lct.forEach(t),Aor=r(ZLe," (LXMERT model)"),ZLe.forEach(t),Lor=i(U),lC=s(U,"LI",{});var e7e=n(lC);Gge=s(e7e,"STRONG",{});var ict=n(Gge);Bor=r(ict,"mobilebert"),ict.forEach(t),xor=r(e7e," \u2014 "),iO=s(e7e,"A",{href:!0});var dct=n(iO);kor=r(dct,"TFMobileBertForPreTraining"),dct.forEach(t),Ror=r(e7e," (MobileBERT model)"),e7e.forEach(t),Sor=i(U),iC=s(U,"LI",{});var o7e=n(iC);Xge=s(o7e,"STRONG",{});var cct=n(Xge);Por=r(cct,"mpnet"),cct.forEach(t),$or=r(o7e," \u2014 "),dO=s(o7e,"A",{href:!0});var mct=n(dO);Ior=r(mct,"TFMPNetForMaskedLM"),mct.forEach(t),jor=r(o7e," (MPNet model)"),o7e.forEach(t),Dor=i(U),dC=s(U,"LI",{});var r7e=n(dC);Vge=s(r7e,"STRONG",{});var fct=n(Vge);Nor=r(fct,"openai-gpt"),fct.forEach(t),qor=r(r7e," \u2014 "),cO=s(r7e,"A",{href:!0});var gct=n(cO);Oor=r(gct,"TFOpenAIGPTLMHeadModel"),gct.forEach(t),Gor=r(r7e," (OpenAI GPT model)"),r7e.forEach(t),Xor=i(U),cC=s(U,"LI",{});var t7e=n(cC);zge=s(t7e,"STRONG",{});var hct=n(zge);Vor=r(hct,"roberta"),hct.forEach(t),zor=r(t7e," \u2014 "),mO=s(t7e,"A",{href:!0});var uct=n(mO);Wor=r(uct,"TFRobertaForMaskedLM"),uct.forEach(t),Qor=r(t7e," (RoBERTa model)"),t7e.forEach(t),Hor=i(U),mC=s(U,"LI",{});var a7e=n(mC);Wge=s(a7e,"STRONG",{});var pct=n(Wge);Uor=r(pct,"t5"),pct.forEach(t),Jor=r(a7e," \u2014 "),fO=s(a7e,"A",{href:!0});var _ct=n(fO);Yor=r(_ct,"TFT5ForConditionalGeneration"),_ct.forEach(t),Kor=r(a7e," (T5 model)"),a7e.forEach(t),Zor=i(U),fC=s(U,"LI",{});var s7e=n(fC);Qge=s(s7e,"STRONG",{});var bct=n(Qge);err=r(bct,"tapas"),bct.forEach(t),orr=r(s7e," \u2014 "),gO=s(s7e,"A",{href:!0});var vct=n(gO);rrr=r(vct,"TFTapasForMaskedLM"),vct.forEach(t),trr=r(s7e," (TAPAS model)"),s7e.forEach(t),arr=i(U),gC=s(U,"LI",{});var n7e=n(gC);Hge=s(n7e,"STRONG",{});var Tct=n(Hge);srr=r(Tct,"transfo-xl"),Tct.forEach(t),nrr=r(n7e," \u2014 "),hO=s(n7e,"A",{href:!0});var Fct=n(hO);lrr=r(Fct,"TFTransfoXLLMHeadModel"),Fct.forEach(t),irr=r(n7e," (Transformer-XL model)"),n7e.forEach(t),drr=i(U),hC=s(U,"LI",{});var l7e=n(hC);Uge=s(l7e,"STRONG",{});var Cct=n(Uge);crr=r(Cct,"xlm"),Cct.forEach(t),mrr=r(l7e," \u2014 "),uO=s(l7e,"A",{href:!0});var Mct=n(uO);frr=r(Mct,"TFXLMWithLMHeadModel"),Mct.forEach(t),grr=r(l7e," (XLM model)"),l7e.forEach(t),hrr=i(U),uC=s(U,"LI",{});var i7e=n(uC);Jge=s(i7e,"STRONG",{});var Ect=n(Jge);urr=r(Ect,"xlm-roberta"),Ect.forEach(t),prr=r(i7e," \u2014 "),pO=s(i7e,"A",{href:!0});var yct=n(pO);_rr=r(yct,"TFXLMRobertaForMaskedLM"),yct.forEach(t),brr=r(i7e," (XLM-RoBERTa model)"),i7e.forEach(t),vrr=i(U),pC=s(U,"LI",{});var d7e=n(pC);Yge=s(d7e,"STRONG",{});var wct=n(Yge);Trr=r(wct,"xlnet"),wct.forEach(t),Frr=r(d7e," \u2014 "),_O=s(d7e,"A",{href:!0});var Act=n(_O);Crr=r(Act,"TFXLNetLMHeadModel"),Act.forEach(t),Mrr=r(d7e," (XLNet model)"),d7e.forEach(t),U.forEach(t),Err=i(pa),Kge=s(pa,"P",{});var Lct=n(Kge);yrr=r(Lct,"Examples:"),Lct.forEach(t),wrr=i(pa),f(zA.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),kke=i(c),vc=s(c,"H2",{class:!0});var GSe=n(vc);_C=s(GSe,"A",{id:!0,class:!0,href:!0});var Bct=n(_C);Zge=s(Bct,"SPAN",{});var xct=n(Zge);f(WA.$$.fragment,xct),xct.forEach(t),Bct.forEach(t),Arr=i(GSe),ehe=s(GSe,"SPAN",{});var kct=n(ehe);Lrr=r(kct,"TFAutoModelForCausalLM"),kct.forEach(t),GSe.forEach(t),Rke=i(c),Fr=s(c,"DIV",{class:!0});var Xl=n(Fr);f(QA.$$.fragment,Xl),Brr=i(Xl),Tc=s(Xl,"P",{});var xW=n(Tc);xrr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ohe=s(xW,"CODE",{});var Rct=n(ohe);krr=r(Rct,"from_pretrained()"),Rct.forEach(t),Rrr=r(xW,"class method or the "),rhe=s(xW,"CODE",{});var Sct=n(rhe);Srr=r(Sct,"from_config()"),Sct.forEach(t),Prr=r(xW,`class
method.`),xW.forEach(t),$rr=i(Xl),HA=s(Xl,"P",{});var XSe=n(HA);Irr=r(XSe,"This class cannot be instantiated directly using "),the=s(XSe,"CODE",{});var Pct=n(the);jrr=r(Pct,"__init__()"),Pct.forEach(t),Drr=r(XSe," (throws an error)."),XSe.forEach(t),Nrr=i(Xl),ut=s(Xl,"DIV",{class:!0});var Vl=n(ut);f(UA.$$.fragment,Vl),qrr=i(Vl),ahe=s(Vl,"P",{});var $ct=n(ahe);Orr=r($ct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$ct.forEach(t),Grr=i(Vl),Fc=s(Vl,"P",{});var kW=n(Fc);Xrr=r(kW,`Note:
Loading a model from its configuration file does `),she=s(kW,"STRONG",{});var Ict=n(she);Vrr=r(Ict,"not"),Ict.forEach(t),zrr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=s(kW,"CODE",{});var jct=n(nhe);Wrr=r(jct,"from_pretrained()"),jct.forEach(t),Qrr=r(kW,"to load the model weights."),kW.forEach(t),Hrr=i(Vl),lhe=s(Vl,"P",{});var Dct=n(lhe);Urr=r(Dct,"Examples:"),Dct.forEach(t),Jrr=i(Vl),f(JA.$$.fragment,Vl),Vl.forEach(t),Yrr=i(Xl),po=s(Xl,"DIV",{class:!0});var _a=n(po);f(YA.$$.fragment,_a),Krr=i(_a),ihe=s(_a,"P",{});var Nct=n(ihe);Zrr=r(Nct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nct.forEach(t),etr=i(_a),_s=s(_a,"P",{});var L5=n(_s);otr=r(L5,"The model class to instantiate is selected based on the "),dhe=s(L5,"CODE",{});var qct=n(dhe);rtr=r(qct,"model_type"),qct.forEach(t),ttr=r(L5,` property of the config object (either
passed as an argument or loaded from `),che=s(L5,"CODE",{});var Oct=n(che);atr=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),str=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=s(L5,"CODE",{});var Gct=n(mhe);ntr=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),ltr=r(L5,":"),L5.forEach(t),itr=i(_a),fe=s(_a,"UL",{});var Fe=n(fe);bC=s(Fe,"LI",{});var c7e=n(bC);fhe=s(c7e,"STRONG",{});var Xct=n(fhe);dtr=r(Xct,"bert"),Xct.forEach(t),ctr=r(c7e," \u2014 "),bO=s(c7e,"A",{href:!0});var Vct=n(bO);mtr=r(Vct,"TFBertLMHeadModel"),Vct.forEach(t),ftr=r(c7e," (BERT model)"),c7e.forEach(t),gtr=i(Fe),vC=s(Fe,"LI",{});var m7e=n(vC);ghe=s(m7e,"STRONG",{});var zct=n(ghe);htr=r(zct,"camembert"),zct.forEach(t),utr=r(m7e," \u2014 "),vO=s(m7e,"A",{href:!0});var Wct=n(vO);ptr=r(Wct,"TFCamembertForCausalLM"),Wct.forEach(t),_tr=r(m7e," (CamemBERT model)"),m7e.forEach(t),btr=i(Fe),TC=s(Fe,"LI",{});var f7e=n(TC);hhe=s(f7e,"STRONG",{});var Qct=n(hhe);vtr=r(Qct,"ctrl"),Qct.forEach(t),Ttr=r(f7e," \u2014 "),TO=s(f7e,"A",{href:!0});var Hct=n(TO);Ftr=r(Hct,"TFCTRLLMHeadModel"),Hct.forEach(t),Ctr=r(f7e," (CTRL model)"),f7e.forEach(t),Mtr=i(Fe),FC=s(Fe,"LI",{});var g7e=n(FC);uhe=s(g7e,"STRONG",{});var Uct=n(uhe);Etr=r(Uct,"gpt2"),Uct.forEach(t),ytr=r(g7e," \u2014 "),FO=s(g7e,"A",{href:!0});var Jct=n(FO);wtr=r(Jct,"TFGPT2LMHeadModel"),Jct.forEach(t),Atr=r(g7e," (OpenAI GPT-2 model)"),g7e.forEach(t),Ltr=i(Fe),CC=s(Fe,"LI",{});var h7e=n(CC);phe=s(h7e,"STRONG",{});var Yct=n(phe);Btr=r(Yct,"openai-gpt"),Yct.forEach(t),xtr=r(h7e," \u2014 "),CO=s(h7e,"A",{href:!0});var Kct=n(CO);ktr=r(Kct,"TFOpenAIGPTLMHeadModel"),Kct.forEach(t),Rtr=r(h7e," (OpenAI GPT model)"),h7e.forEach(t),Str=i(Fe),MC=s(Fe,"LI",{});var u7e=n(MC);_he=s(u7e,"STRONG",{});var Zct=n(_he);Ptr=r(Zct,"rembert"),Zct.forEach(t),$tr=r(u7e," \u2014 "),MO=s(u7e,"A",{href:!0});var emt=n(MO);Itr=r(emt,"TFRemBertForCausalLM"),emt.forEach(t),jtr=r(u7e," (RemBERT model)"),u7e.forEach(t),Dtr=i(Fe),EC=s(Fe,"LI",{});var p7e=n(EC);bhe=s(p7e,"STRONG",{});var omt=n(bhe);Ntr=r(omt,"roberta"),omt.forEach(t),qtr=r(p7e," \u2014 "),EO=s(p7e,"A",{href:!0});var rmt=n(EO);Otr=r(rmt,"TFRobertaForCausalLM"),rmt.forEach(t),Gtr=r(p7e," (RoBERTa model)"),p7e.forEach(t),Xtr=i(Fe),yC=s(Fe,"LI",{});var _7e=n(yC);vhe=s(_7e,"STRONG",{});var tmt=n(vhe);Vtr=r(tmt,"roformer"),tmt.forEach(t),ztr=r(_7e," \u2014 "),yO=s(_7e,"A",{href:!0});var amt=n(yO);Wtr=r(amt,"TFRoFormerForCausalLM"),amt.forEach(t),Qtr=r(_7e," (RoFormer model)"),_7e.forEach(t),Htr=i(Fe),wC=s(Fe,"LI",{});var b7e=n(wC);The=s(b7e,"STRONG",{});var smt=n(The);Utr=r(smt,"transfo-xl"),smt.forEach(t),Jtr=r(b7e," \u2014 "),wO=s(b7e,"A",{href:!0});var nmt=n(wO);Ytr=r(nmt,"TFTransfoXLLMHeadModel"),nmt.forEach(t),Ktr=r(b7e," (Transformer-XL model)"),b7e.forEach(t),Ztr=i(Fe),AC=s(Fe,"LI",{});var v7e=n(AC);Fhe=s(v7e,"STRONG",{});var lmt=n(Fhe);ear=r(lmt,"xlm"),lmt.forEach(t),oar=r(v7e," \u2014 "),AO=s(v7e,"A",{href:!0});var imt=n(AO);rar=r(imt,"TFXLMWithLMHeadModel"),imt.forEach(t),tar=r(v7e," (XLM model)"),v7e.forEach(t),aar=i(Fe),LC=s(Fe,"LI",{});var T7e=n(LC);Che=s(T7e,"STRONG",{});var dmt=n(Che);sar=r(dmt,"xlnet"),dmt.forEach(t),nar=r(T7e," \u2014 "),LO=s(T7e,"A",{href:!0});var cmt=n(LO);lar=r(cmt,"TFXLNetLMHeadModel"),cmt.forEach(t),iar=r(T7e," (XLNet model)"),T7e.forEach(t),Fe.forEach(t),dar=i(_a),Mhe=s(_a,"P",{});var mmt=n(Mhe);car=r(mmt,"Examples:"),mmt.forEach(t),mar=i(_a),f(KA.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),Ske=i(c),Cc=s(c,"H2",{class:!0});var VSe=n(Cc);BC=s(VSe,"A",{id:!0,class:!0,href:!0});var fmt=n(BC);Ehe=s(fmt,"SPAN",{});var gmt=n(Ehe);f(ZA.$$.fragment,gmt),gmt.forEach(t),fmt.forEach(t),far=i(VSe),yhe=s(VSe,"SPAN",{});var hmt=n(yhe);gar=r(hmt,"TFAutoModelForImageClassification"),hmt.forEach(t),VSe.forEach(t),Pke=i(c),Cr=s(c,"DIV",{class:!0});var zl=n(Cr);f(e0.$$.fragment,zl),har=i(zl),Mc=s(zl,"P",{});var RW=n(Mc);uar=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),whe=s(RW,"CODE",{});var umt=n(whe);par=r(umt,"from_pretrained()"),umt.forEach(t),_ar=r(RW,"class method or the "),Ahe=s(RW,"CODE",{});var pmt=n(Ahe);bar=r(pmt,"from_config()"),pmt.forEach(t),Tar=r(RW,`class
method.`),RW.forEach(t),Far=i(zl),o0=s(zl,"P",{});var zSe=n(o0);Car=r(zSe,"This class cannot be instantiated directly using "),Lhe=s(zSe,"CODE",{});var _mt=n(Lhe);Mar=r(_mt,"__init__()"),_mt.forEach(t),Ear=r(zSe," (throws an error)."),zSe.forEach(t),yar=i(zl),pt=s(zl,"DIV",{class:!0});var Wl=n(pt);f(r0.$$.fragment,Wl),war=i(Wl),Bhe=s(Wl,"P",{});var bmt=n(Bhe);Aar=r(bmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bmt.forEach(t),Lar=i(Wl),Ec=s(Wl,"P",{});var SW=n(Ec);Bar=r(SW,`Note:
Loading a model from its configuration file does `),xhe=s(SW,"STRONG",{});var vmt=n(xhe);xar=r(vmt,"not"),vmt.forEach(t),kar=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),khe=s(SW,"CODE",{});var Tmt=n(khe);Rar=r(Tmt,"from_pretrained()"),Tmt.forEach(t),Sar=r(SW,"to load the model weights."),SW.forEach(t),Par=i(Wl),Rhe=s(Wl,"P",{});var Fmt=n(Rhe);$ar=r(Fmt,"Examples:"),Fmt.forEach(t),Iar=i(Wl),f(t0.$$.fragment,Wl),Wl.forEach(t),jar=i(zl),_o=s(zl,"DIV",{class:!0});var ba=n(_o);f(a0.$$.fragment,ba),Dar=i(ba),She=s(ba,"P",{});var Cmt=n(She);Nar=r(Cmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cmt.forEach(t),qar=i(ba),bs=s(ba,"P",{});var B5=n(bs);Oar=r(B5,"The model class to instantiate is selected based on the "),Phe=s(B5,"CODE",{});var Mmt=n(Phe);Gar=r(Mmt,"model_type"),Mmt.forEach(t),Xar=r(B5,` property of the config object (either
passed as an argument or loaded from `),$he=s(B5,"CODE",{});var Emt=n($he);Var=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),zar=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=s(B5,"CODE",{});var ymt=n(Ihe);War=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),Qar=r(B5,":"),B5.forEach(t),Har=i(ba),s0=s(ba,"UL",{});var WSe=n(s0);xC=s(WSe,"LI",{});var F7e=n(xC);jhe=s(F7e,"STRONG",{});var wmt=n(jhe);Uar=r(wmt,"convnext"),wmt.forEach(t),Jar=r(F7e," \u2014 "),BO=s(F7e,"A",{href:!0});var Amt=n(BO);Yar=r(Amt,"TFConvNextForImageClassification"),Amt.forEach(t),Kar=r(F7e," (ConvNext model)"),F7e.forEach(t),Zar=i(WSe),kC=s(WSe,"LI",{});var C7e=n(kC);Dhe=s(C7e,"STRONG",{});var Lmt=n(Dhe);esr=r(Lmt,"vit"),Lmt.forEach(t),osr=r(C7e," \u2014 "),xO=s(C7e,"A",{href:!0});var Bmt=n(xO);rsr=r(Bmt,"TFViTForImageClassification"),Bmt.forEach(t),tsr=r(C7e," (ViT model)"),C7e.forEach(t),WSe.forEach(t),asr=i(ba),Nhe=s(ba,"P",{});var xmt=n(Nhe);ssr=r(xmt,"Examples:"),xmt.forEach(t),nsr=i(ba),f(n0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),$ke=i(c),yc=s(c,"H2",{class:!0});var QSe=n(yc);RC=s(QSe,"A",{id:!0,class:!0,href:!0});var kmt=n(RC);qhe=s(kmt,"SPAN",{});var Rmt=n(qhe);f(l0.$$.fragment,Rmt),Rmt.forEach(t),kmt.forEach(t),lsr=i(QSe),Ohe=s(QSe,"SPAN",{});var Smt=n(Ohe);isr=r(Smt,"TFAutoModelForMaskedLM"),Smt.forEach(t),QSe.forEach(t),Ike=i(c),Mr=s(c,"DIV",{class:!0});var Ql=n(Mr);f(i0.$$.fragment,Ql),dsr=i(Ql),wc=s(Ql,"P",{});var PW=n(wc);csr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ghe=s(PW,"CODE",{});var Pmt=n(Ghe);msr=r(Pmt,"from_pretrained()"),Pmt.forEach(t),fsr=r(PW,"class method or the "),Xhe=s(PW,"CODE",{});var $mt=n(Xhe);gsr=r($mt,"from_config()"),$mt.forEach(t),hsr=r(PW,`class
method.`),PW.forEach(t),usr=i(Ql),d0=s(Ql,"P",{});var HSe=n(d0);psr=r(HSe,"This class cannot be instantiated directly using "),Vhe=s(HSe,"CODE",{});var Imt=n(Vhe);_sr=r(Imt,"__init__()"),Imt.forEach(t),bsr=r(HSe," (throws an error)."),HSe.forEach(t),vsr=i(Ql),_t=s(Ql,"DIV",{class:!0});var Hl=n(_t);f(c0.$$.fragment,Hl),Tsr=i(Hl),zhe=s(Hl,"P",{});var jmt=n(zhe);Fsr=r(jmt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jmt.forEach(t),Csr=i(Hl),Ac=s(Hl,"P",{});var $W=n(Ac);Msr=r($W,`Note:
Loading a model from its configuration file does `),Whe=s($W,"STRONG",{});var Dmt=n(Whe);Esr=r(Dmt,"not"),Dmt.forEach(t),ysr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qhe=s($W,"CODE",{});var Nmt=n(Qhe);wsr=r(Nmt,"from_pretrained()"),Nmt.forEach(t),Asr=r($W,"to load the model weights."),$W.forEach(t),Lsr=i(Hl),Hhe=s(Hl,"P",{});var qmt=n(Hhe);Bsr=r(qmt,"Examples:"),qmt.forEach(t),xsr=i(Hl),f(m0.$$.fragment,Hl),Hl.forEach(t),ksr=i(Ql),bo=s(Ql,"DIV",{class:!0});var va=n(bo);f(f0.$$.fragment,va),Rsr=i(va),Uhe=s(va,"P",{});var Omt=n(Uhe);Ssr=r(Omt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Omt.forEach(t),Psr=i(va),vs=s(va,"P",{});var x5=n(vs);$sr=r(x5,"The model class to instantiate is selected based on the "),Jhe=s(x5,"CODE",{});var Gmt=n(Jhe);Isr=r(Gmt,"model_type"),Gmt.forEach(t),jsr=r(x5,` property of the config object (either
passed as an argument or loaded from `),Yhe=s(x5,"CODE",{});var Xmt=n(Yhe);Dsr=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),Nsr=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=s(x5,"CODE",{});var Vmt=n(Khe);qsr=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),Osr=r(x5,":"),x5.forEach(t),Gsr=i(va),Y=s(va,"UL",{});var ee=n(Y);SC=s(ee,"LI",{});var M7e=n(SC);Zhe=s(M7e,"STRONG",{});var zmt=n(Zhe);Xsr=r(zmt,"albert"),zmt.forEach(t),Vsr=r(M7e," \u2014 "),kO=s(M7e,"A",{href:!0});var Wmt=n(kO);zsr=r(Wmt,"TFAlbertForMaskedLM"),Wmt.forEach(t),Wsr=r(M7e," (ALBERT model)"),M7e.forEach(t),Qsr=i(ee),PC=s(ee,"LI",{});var E7e=n(PC);eue=s(E7e,"STRONG",{});var Qmt=n(eue);Hsr=r(Qmt,"bert"),Qmt.forEach(t),Usr=r(E7e," \u2014 "),RO=s(E7e,"A",{href:!0});var Hmt=n(RO);Jsr=r(Hmt,"TFBertForMaskedLM"),Hmt.forEach(t),Ysr=r(E7e," (BERT model)"),E7e.forEach(t),Ksr=i(ee),$C=s(ee,"LI",{});var y7e=n($C);oue=s(y7e,"STRONG",{});var Umt=n(oue);Zsr=r(Umt,"camembert"),Umt.forEach(t),enr=r(y7e," \u2014 "),SO=s(y7e,"A",{href:!0});var Jmt=n(SO);onr=r(Jmt,"TFCamembertForMaskedLM"),Jmt.forEach(t),rnr=r(y7e," (CamemBERT model)"),y7e.forEach(t),tnr=i(ee),IC=s(ee,"LI",{});var w7e=n(IC);rue=s(w7e,"STRONG",{});var Ymt=n(rue);anr=r(Ymt,"convbert"),Ymt.forEach(t),snr=r(w7e," \u2014 "),PO=s(w7e,"A",{href:!0});var Kmt=n(PO);nnr=r(Kmt,"TFConvBertForMaskedLM"),Kmt.forEach(t),lnr=r(w7e," (ConvBERT model)"),w7e.forEach(t),inr=i(ee),jC=s(ee,"LI",{});var A7e=n(jC);tue=s(A7e,"STRONG",{});var Zmt=n(tue);dnr=r(Zmt,"deberta"),Zmt.forEach(t),cnr=r(A7e," \u2014 "),$O=s(A7e,"A",{href:!0});var eft=n($O);mnr=r(eft,"TFDebertaForMaskedLM"),eft.forEach(t),fnr=r(A7e," (DeBERTa model)"),A7e.forEach(t),gnr=i(ee),DC=s(ee,"LI",{});var L7e=n(DC);aue=s(L7e,"STRONG",{});var oft=n(aue);hnr=r(oft,"deberta-v2"),oft.forEach(t),unr=r(L7e," \u2014 "),IO=s(L7e,"A",{href:!0});var rft=n(IO);pnr=r(rft,"TFDebertaV2ForMaskedLM"),rft.forEach(t),_nr=r(L7e," (DeBERTa-v2 model)"),L7e.forEach(t),bnr=i(ee),NC=s(ee,"LI",{});var B7e=n(NC);sue=s(B7e,"STRONG",{});var tft=n(sue);vnr=r(tft,"distilbert"),tft.forEach(t),Tnr=r(B7e," \u2014 "),jO=s(B7e,"A",{href:!0});var aft=n(jO);Fnr=r(aft,"TFDistilBertForMaskedLM"),aft.forEach(t),Cnr=r(B7e," (DistilBERT model)"),B7e.forEach(t),Mnr=i(ee),qC=s(ee,"LI",{});var x7e=n(qC);nue=s(x7e,"STRONG",{});var sft=n(nue);Enr=r(sft,"electra"),sft.forEach(t),ynr=r(x7e," \u2014 "),DO=s(x7e,"A",{href:!0});var nft=n(DO);wnr=r(nft,"TFElectraForMaskedLM"),nft.forEach(t),Anr=r(x7e," (ELECTRA model)"),x7e.forEach(t),Lnr=i(ee),OC=s(ee,"LI",{});var k7e=n(OC);lue=s(k7e,"STRONG",{});var lft=n(lue);Bnr=r(lft,"flaubert"),lft.forEach(t),xnr=r(k7e," \u2014 "),NO=s(k7e,"A",{href:!0});var ift=n(NO);knr=r(ift,"TFFlaubertWithLMHeadModel"),ift.forEach(t),Rnr=r(k7e," (FlauBERT model)"),k7e.forEach(t),Snr=i(ee),GC=s(ee,"LI",{});var R7e=n(GC);iue=s(R7e,"STRONG",{});var dft=n(iue);Pnr=r(dft,"funnel"),dft.forEach(t),$nr=r(R7e," \u2014 "),qO=s(R7e,"A",{href:!0});var cft=n(qO);Inr=r(cft,"TFFunnelForMaskedLM"),cft.forEach(t),jnr=r(R7e," (Funnel Transformer model)"),R7e.forEach(t),Dnr=i(ee),XC=s(ee,"LI",{});var S7e=n(XC);due=s(S7e,"STRONG",{});var mft=n(due);Nnr=r(mft,"layoutlm"),mft.forEach(t),qnr=r(S7e," \u2014 "),OO=s(S7e,"A",{href:!0});var fft=n(OO);Onr=r(fft,"TFLayoutLMForMaskedLM"),fft.forEach(t),Gnr=r(S7e," (LayoutLM model)"),S7e.forEach(t),Xnr=i(ee),VC=s(ee,"LI",{});var P7e=n(VC);cue=s(P7e,"STRONG",{});var gft=n(cue);Vnr=r(gft,"longformer"),gft.forEach(t),znr=r(P7e," \u2014 "),GO=s(P7e,"A",{href:!0});var hft=n(GO);Wnr=r(hft,"TFLongformerForMaskedLM"),hft.forEach(t),Qnr=r(P7e," (Longformer model)"),P7e.forEach(t),Hnr=i(ee),zC=s(ee,"LI",{});var $7e=n(zC);mue=s($7e,"STRONG",{});var uft=n(mue);Unr=r(uft,"mobilebert"),uft.forEach(t),Jnr=r($7e," \u2014 "),XO=s($7e,"A",{href:!0});var pft=n(XO);Ynr=r(pft,"TFMobileBertForMaskedLM"),pft.forEach(t),Knr=r($7e," (MobileBERT model)"),$7e.forEach(t),Znr=i(ee),WC=s(ee,"LI",{});var I7e=n(WC);fue=s(I7e,"STRONG",{});var _ft=n(fue);elr=r(_ft,"mpnet"),_ft.forEach(t),olr=r(I7e," \u2014 "),VO=s(I7e,"A",{href:!0});var bft=n(VO);rlr=r(bft,"TFMPNetForMaskedLM"),bft.forEach(t),tlr=r(I7e," (MPNet model)"),I7e.forEach(t),alr=i(ee),QC=s(ee,"LI",{});var j7e=n(QC);gue=s(j7e,"STRONG",{});var vft=n(gue);slr=r(vft,"rembert"),vft.forEach(t),nlr=r(j7e," \u2014 "),zO=s(j7e,"A",{href:!0});var Tft=n(zO);llr=r(Tft,"TFRemBertForMaskedLM"),Tft.forEach(t),ilr=r(j7e," (RemBERT model)"),j7e.forEach(t),dlr=i(ee),HC=s(ee,"LI",{});var D7e=n(HC);hue=s(D7e,"STRONG",{});var Fft=n(hue);clr=r(Fft,"roberta"),Fft.forEach(t),mlr=r(D7e," \u2014 "),WO=s(D7e,"A",{href:!0});var Cft=n(WO);flr=r(Cft,"TFRobertaForMaskedLM"),Cft.forEach(t),glr=r(D7e," (RoBERTa model)"),D7e.forEach(t),hlr=i(ee),UC=s(ee,"LI",{});var N7e=n(UC);uue=s(N7e,"STRONG",{});var Mft=n(uue);ulr=r(Mft,"roformer"),Mft.forEach(t),plr=r(N7e," \u2014 "),QO=s(N7e,"A",{href:!0});var Eft=n(QO);_lr=r(Eft,"TFRoFormerForMaskedLM"),Eft.forEach(t),blr=r(N7e," (RoFormer model)"),N7e.forEach(t),vlr=i(ee),JC=s(ee,"LI",{});var q7e=n(JC);pue=s(q7e,"STRONG",{});var yft=n(pue);Tlr=r(yft,"tapas"),yft.forEach(t),Flr=r(q7e," \u2014 "),HO=s(q7e,"A",{href:!0});var wft=n(HO);Clr=r(wft,"TFTapasForMaskedLM"),wft.forEach(t),Mlr=r(q7e," (TAPAS model)"),q7e.forEach(t),Elr=i(ee),YC=s(ee,"LI",{});var O7e=n(YC);_ue=s(O7e,"STRONG",{});var Aft=n(_ue);ylr=r(Aft,"xlm"),Aft.forEach(t),wlr=r(O7e," \u2014 "),UO=s(O7e,"A",{href:!0});var Lft=n(UO);Alr=r(Lft,"TFXLMWithLMHeadModel"),Lft.forEach(t),Llr=r(O7e," (XLM model)"),O7e.forEach(t),Blr=i(ee),KC=s(ee,"LI",{});var G7e=n(KC);bue=s(G7e,"STRONG",{});var Bft=n(bue);xlr=r(Bft,"xlm-roberta"),Bft.forEach(t),klr=r(G7e," \u2014 "),JO=s(G7e,"A",{href:!0});var xft=n(JO);Rlr=r(xft,"TFXLMRobertaForMaskedLM"),xft.forEach(t),Slr=r(G7e," (XLM-RoBERTa model)"),G7e.forEach(t),ee.forEach(t),Plr=i(va),vue=s(va,"P",{});var kft=n(vue);$lr=r(kft,"Examples:"),kft.forEach(t),Ilr=i(va),f(g0.$$.fragment,va),va.forEach(t),Ql.forEach(t),jke=i(c),Lc=s(c,"H2",{class:!0});var USe=n(Lc);ZC=s(USe,"A",{id:!0,class:!0,href:!0});var Rft=n(ZC);Tue=s(Rft,"SPAN",{});var Sft=n(Tue);f(h0.$$.fragment,Sft),Sft.forEach(t),Rft.forEach(t),jlr=i(USe),Fue=s(USe,"SPAN",{});var Pft=n(Fue);Dlr=r(Pft,"TFAutoModelForSeq2SeqLM"),Pft.forEach(t),USe.forEach(t),Dke=i(c),Er=s(c,"DIV",{class:!0});var Ul=n(Er);f(u0.$$.fragment,Ul),Nlr=i(Ul),Bc=s(Ul,"P",{});var IW=n(Bc);qlr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cue=s(IW,"CODE",{});var $ft=n(Cue);Olr=r($ft,"from_pretrained()"),$ft.forEach(t),Glr=r(IW,"class method or the "),Mue=s(IW,"CODE",{});var Ift=n(Mue);Xlr=r(Ift,"from_config()"),Ift.forEach(t),Vlr=r(IW,`class
method.`),IW.forEach(t),zlr=i(Ul),p0=s(Ul,"P",{});var JSe=n(p0);Wlr=r(JSe,"This class cannot be instantiated directly using "),Eue=s(JSe,"CODE",{});var jft=n(Eue);Qlr=r(jft,"__init__()"),jft.forEach(t),Hlr=r(JSe," (throws an error)."),JSe.forEach(t),Ulr=i(Ul),bt=s(Ul,"DIV",{class:!0});var Jl=n(bt);f(_0.$$.fragment,Jl),Jlr=i(Jl),yue=s(Jl,"P",{});var Dft=n(yue);Ylr=r(Dft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dft.forEach(t),Klr=i(Jl),xc=s(Jl,"P",{});var jW=n(xc);Zlr=r(jW,`Note:
Loading a model from its configuration file does `),wue=s(jW,"STRONG",{});var Nft=n(wue);eir=r(Nft,"not"),Nft.forEach(t),oir=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=s(jW,"CODE",{});var qft=n(Aue);rir=r(qft,"from_pretrained()"),qft.forEach(t),tir=r(jW,"to load the model weights."),jW.forEach(t),air=i(Jl),Lue=s(Jl,"P",{});var Oft=n(Lue);sir=r(Oft,"Examples:"),Oft.forEach(t),nir=i(Jl),f(b0.$$.fragment,Jl),Jl.forEach(t),lir=i(Ul),vo=s(Ul,"DIV",{class:!0});var Ta=n(vo);f(v0.$$.fragment,Ta),iir=i(Ta),Bue=s(Ta,"P",{});var Gft=n(Bue);dir=r(Gft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gft.forEach(t),cir=i(Ta),Ts=s(Ta,"P",{});var k5=n(Ts);mir=r(k5,"The model class to instantiate is selected based on the "),xue=s(k5,"CODE",{});var Xft=n(xue);fir=r(Xft,"model_type"),Xft.forEach(t),gir=r(k5,` property of the config object (either
passed as an argument or loaded from `),kue=s(k5,"CODE",{});var Vft=n(kue);hir=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),uir=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=s(k5,"CODE",{});var zft=n(Rue);pir=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),_ir=r(k5,":"),k5.forEach(t),bir=i(Ta),_e=s(Ta,"UL",{});var ye=n(_e);eM=s(ye,"LI",{});var X7e=n(eM);Sue=s(X7e,"STRONG",{});var Wft=n(Sue);vir=r(Wft,"bart"),Wft.forEach(t),Tir=r(X7e," \u2014 "),YO=s(X7e,"A",{href:!0});var Qft=n(YO);Fir=r(Qft,"TFBartForConditionalGeneration"),Qft.forEach(t),Cir=r(X7e," (BART model)"),X7e.forEach(t),Mir=i(ye),oM=s(ye,"LI",{});var V7e=n(oM);Pue=s(V7e,"STRONG",{});var Hft=n(Pue);Eir=r(Hft,"blenderbot"),Hft.forEach(t),yir=r(V7e," \u2014 "),KO=s(V7e,"A",{href:!0});var Uft=n(KO);wir=r(Uft,"TFBlenderbotForConditionalGeneration"),Uft.forEach(t),Air=r(V7e," (Blenderbot model)"),V7e.forEach(t),Lir=i(ye),rM=s(ye,"LI",{});var z7e=n(rM);$ue=s(z7e,"STRONG",{});var Jft=n($ue);Bir=r(Jft,"blenderbot-small"),Jft.forEach(t),xir=r(z7e," \u2014 "),ZO=s(z7e,"A",{href:!0});var Yft=n(ZO);kir=r(Yft,"TFBlenderbotSmallForConditionalGeneration"),Yft.forEach(t),Rir=r(z7e," (BlenderbotSmall model)"),z7e.forEach(t),Sir=i(ye),tM=s(ye,"LI",{});var W7e=n(tM);Iue=s(W7e,"STRONG",{});var Kft=n(Iue);Pir=r(Kft,"encoder-decoder"),Kft.forEach(t),$ir=r(W7e," \u2014 "),eG=s(W7e,"A",{href:!0});var Zft=n(eG);Iir=r(Zft,"TFEncoderDecoderModel"),Zft.forEach(t),jir=r(W7e," (Encoder decoder model)"),W7e.forEach(t),Dir=i(ye),aM=s(ye,"LI",{});var Q7e=n(aM);jue=s(Q7e,"STRONG",{});var egt=n(jue);Nir=r(egt,"led"),egt.forEach(t),qir=r(Q7e," \u2014 "),oG=s(Q7e,"A",{href:!0});var ogt=n(oG);Oir=r(ogt,"TFLEDForConditionalGeneration"),ogt.forEach(t),Gir=r(Q7e," (LED model)"),Q7e.forEach(t),Xir=i(ye),sM=s(ye,"LI",{});var H7e=n(sM);Due=s(H7e,"STRONG",{});var rgt=n(Due);Vir=r(rgt,"marian"),rgt.forEach(t),zir=r(H7e," \u2014 "),rG=s(H7e,"A",{href:!0});var tgt=n(rG);Wir=r(tgt,"TFMarianMTModel"),tgt.forEach(t),Qir=r(H7e," (Marian model)"),H7e.forEach(t),Hir=i(ye),nM=s(ye,"LI",{});var U7e=n(nM);Nue=s(U7e,"STRONG",{});var agt=n(Nue);Uir=r(agt,"mbart"),agt.forEach(t),Jir=r(U7e," \u2014 "),tG=s(U7e,"A",{href:!0});var sgt=n(tG);Yir=r(sgt,"TFMBartForConditionalGeneration"),sgt.forEach(t),Kir=r(U7e," (mBART model)"),U7e.forEach(t),Zir=i(ye),lM=s(ye,"LI",{});var J7e=n(lM);que=s(J7e,"STRONG",{});var ngt=n(que);edr=r(ngt,"mt5"),ngt.forEach(t),odr=r(J7e," \u2014 "),aG=s(J7e,"A",{href:!0});var lgt=n(aG);rdr=r(lgt,"TFMT5ForConditionalGeneration"),lgt.forEach(t),tdr=r(J7e," (mT5 model)"),J7e.forEach(t),adr=i(ye),iM=s(ye,"LI",{});var Y7e=n(iM);Oue=s(Y7e,"STRONG",{});var igt=n(Oue);sdr=r(igt,"pegasus"),igt.forEach(t),ndr=r(Y7e," \u2014 "),sG=s(Y7e,"A",{href:!0});var dgt=n(sG);ldr=r(dgt,"TFPegasusForConditionalGeneration"),dgt.forEach(t),idr=r(Y7e," (Pegasus model)"),Y7e.forEach(t),ddr=i(ye),dM=s(ye,"LI",{});var K7e=n(dM);Gue=s(K7e,"STRONG",{});var cgt=n(Gue);cdr=r(cgt,"t5"),cgt.forEach(t),mdr=r(K7e," \u2014 "),nG=s(K7e,"A",{href:!0});var mgt=n(nG);fdr=r(mgt,"TFT5ForConditionalGeneration"),mgt.forEach(t),gdr=r(K7e," (T5 model)"),K7e.forEach(t),ye.forEach(t),hdr=i(Ta),Xue=s(Ta,"P",{});var fgt=n(Xue);udr=r(fgt,"Examples:"),fgt.forEach(t),pdr=i(Ta),f(T0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),Nke=i(c),kc=s(c,"H2",{class:!0});var YSe=n(kc);cM=s(YSe,"A",{id:!0,class:!0,href:!0});var ggt=n(cM);Vue=s(ggt,"SPAN",{});var hgt=n(Vue);f(F0.$$.fragment,hgt),hgt.forEach(t),ggt.forEach(t),_dr=i(YSe),zue=s(YSe,"SPAN",{});var ugt=n(zue);bdr=r(ugt,"TFAutoModelForSequenceClassification"),ugt.forEach(t),YSe.forEach(t),qke=i(c),yr=s(c,"DIV",{class:!0});var Yl=n(yr);f(C0.$$.fragment,Yl),vdr=i(Yl),Rc=s(Yl,"P",{});var DW=n(Rc);Tdr=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wue=s(DW,"CODE",{});var pgt=n(Wue);Fdr=r(pgt,"from_pretrained()"),pgt.forEach(t),Cdr=r(DW,"class method or the "),Que=s(DW,"CODE",{});var _gt=n(Que);Mdr=r(_gt,"from_config()"),_gt.forEach(t),Edr=r(DW,`class
method.`),DW.forEach(t),ydr=i(Yl),M0=s(Yl,"P",{});var KSe=n(M0);wdr=r(KSe,"This class cannot be instantiated directly using "),Hue=s(KSe,"CODE",{});var bgt=n(Hue);Adr=r(bgt,"__init__()"),bgt.forEach(t),Ldr=r(KSe," (throws an error)."),KSe.forEach(t),Bdr=i(Yl),vt=s(Yl,"DIV",{class:!0});var Kl=n(vt);f(E0.$$.fragment,Kl),xdr=i(Kl),Uue=s(Kl,"P",{});var vgt=n(Uue);kdr=r(vgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vgt.forEach(t),Rdr=i(Kl),Sc=s(Kl,"P",{});var NW=n(Sc);Sdr=r(NW,`Note:
Loading a model from its configuration file does `),Jue=s(NW,"STRONG",{});var Tgt=n(Jue);Pdr=r(Tgt,"not"),Tgt.forEach(t),$dr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yue=s(NW,"CODE",{});var Fgt=n(Yue);Idr=r(Fgt,"from_pretrained()"),Fgt.forEach(t),jdr=r(NW,"to load the model weights."),NW.forEach(t),Ddr=i(Kl),Kue=s(Kl,"P",{});var Cgt=n(Kue);Ndr=r(Cgt,"Examples:"),Cgt.forEach(t),qdr=i(Kl),f(y0.$$.fragment,Kl),Kl.forEach(t),Odr=i(Yl),To=s(Yl,"DIV",{class:!0});var Fa=n(To);f(w0.$$.fragment,Fa),Gdr=i(Fa),Zue=s(Fa,"P",{});var Mgt=n(Zue);Xdr=r(Mgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mgt.forEach(t),Vdr=i(Fa),Fs=s(Fa,"P",{});var R5=n(Fs);zdr=r(R5,"The model class to instantiate is selected based on the "),epe=s(R5,"CODE",{});var Egt=n(epe);Wdr=r(Egt,"model_type"),Egt.forEach(t),Qdr=r(R5,` property of the config object (either
passed as an argument or loaded from `),ope=s(R5,"CODE",{});var ygt=n(ope);Hdr=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),Udr=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=s(R5,"CODE",{});var wgt=n(rpe);Jdr=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),Ydr=r(R5,":"),R5.forEach(t),Kdr=i(Fa),V=s(Fa,"UL",{});var W=n(V);mM=s(W,"LI",{});var Z7e=n(mM);tpe=s(Z7e,"STRONG",{});var Agt=n(tpe);Zdr=r(Agt,"albert"),Agt.forEach(t),ecr=r(Z7e," \u2014 "),lG=s(Z7e,"A",{href:!0});var Lgt=n(lG);ocr=r(Lgt,"TFAlbertForSequenceClassification"),Lgt.forEach(t),rcr=r(Z7e," (ALBERT model)"),Z7e.forEach(t),tcr=i(W),fM=s(W,"LI",{});var e8e=n(fM);ape=s(e8e,"STRONG",{});var Bgt=n(ape);acr=r(Bgt,"bert"),Bgt.forEach(t),scr=r(e8e," \u2014 "),iG=s(e8e,"A",{href:!0});var xgt=n(iG);ncr=r(xgt,"TFBertForSequenceClassification"),xgt.forEach(t),lcr=r(e8e," (BERT model)"),e8e.forEach(t),icr=i(W),gM=s(W,"LI",{});var o8e=n(gM);spe=s(o8e,"STRONG",{});var kgt=n(spe);dcr=r(kgt,"camembert"),kgt.forEach(t),ccr=r(o8e," \u2014 "),dG=s(o8e,"A",{href:!0});var Rgt=n(dG);mcr=r(Rgt,"TFCamembertForSequenceClassification"),Rgt.forEach(t),fcr=r(o8e," (CamemBERT model)"),o8e.forEach(t),gcr=i(W),hM=s(W,"LI",{});var r8e=n(hM);npe=s(r8e,"STRONG",{});var Sgt=n(npe);hcr=r(Sgt,"convbert"),Sgt.forEach(t),ucr=r(r8e," \u2014 "),cG=s(r8e,"A",{href:!0});var Pgt=n(cG);pcr=r(Pgt,"TFConvBertForSequenceClassification"),Pgt.forEach(t),_cr=r(r8e," (ConvBERT model)"),r8e.forEach(t),bcr=i(W),uM=s(W,"LI",{});var t8e=n(uM);lpe=s(t8e,"STRONG",{});var $gt=n(lpe);vcr=r($gt,"ctrl"),$gt.forEach(t),Tcr=r(t8e," \u2014 "),mG=s(t8e,"A",{href:!0});var Igt=n(mG);Fcr=r(Igt,"TFCTRLForSequenceClassification"),Igt.forEach(t),Ccr=r(t8e," (CTRL model)"),t8e.forEach(t),Mcr=i(W),pM=s(W,"LI",{});var a8e=n(pM);ipe=s(a8e,"STRONG",{});var jgt=n(ipe);Ecr=r(jgt,"deberta"),jgt.forEach(t),ycr=r(a8e," \u2014 "),fG=s(a8e,"A",{href:!0});var Dgt=n(fG);wcr=r(Dgt,"TFDebertaForSequenceClassification"),Dgt.forEach(t),Acr=r(a8e," (DeBERTa model)"),a8e.forEach(t),Lcr=i(W),_M=s(W,"LI",{});var s8e=n(_M);dpe=s(s8e,"STRONG",{});var Ngt=n(dpe);Bcr=r(Ngt,"deberta-v2"),Ngt.forEach(t),xcr=r(s8e," \u2014 "),gG=s(s8e,"A",{href:!0});var qgt=n(gG);kcr=r(qgt,"TFDebertaV2ForSequenceClassification"),qgt.forEach(t),Rcr=r(s8e," (DeBERTa-v2 model)"),s8e.forEach(t),Scr=i(W),bM=s(W,"LI",{});var n8e=n(bM);cpe=s(n8e,"STRONG",{});var Ogt=n(cpe);Pcr=r(Ogt,"distilbert"),Ogt.forEach(t),$cr=r(n8e," \u2014 "),hG=s(n8e,"A",{href:!0});var Ggt=n(hG);Icr=r(Ggt,"TFDistilBertForSequenceClassification"),Ggt.forEach(t),jcr=r(n8e," (DistilBERT model)"),n8e.forEach(t),Dcr=i(W),vM=s(W,"LI",{});var l8e=n(vM);mpe=s(l8e,"STRONG",{});var Xgt=n(mpe);Ncr=r(Xgt,"electra"),Xgt.forEach(t),qcr=r(l8e," \u2014 "),uG=s(l8e,"A",{href:!0});var Vgt=n(uG);Ocr=r(Vgt,"TFElectraForSequenceClassification"),Vgt.forEach(t),Gcr=r(l8e," (ELECTRA model)"),l8e.forEach(t),Xcr=i(W),TM=s(W,"LI",{});var i8e=n(TM);fpe=s(i8e,"STRONG",{});var zgt=n(fpe);Vcr=r(zgt,"flaubert"),zgt.forEach(t),zcr=r(i8e," \u2014 "),pG=s(i8e,"A",{href:!0});var Wgt=n(pG);Wcr=r(Wgt,"TFFlaubertForSequenceClassification"),Wgt.forEach(t),Qcr=r(i8e," (FlauBERT model)"),i8e.forEach(t),Hcr=i(W),FM=s(W,"LI",{});var d8e=n(FM);gpe=s(d8e,"STRONG",{});var Qgt=n(gpe);Ucr=r(Qgt,"funnel"),Qgt.forEach(t),Jcr=r(d8e," \u2014 "),_G=s(d8e,"A",{href:!0});var Hgt=n(_G);Ycr=r(Hgt,"TFFunnelForSequenceClassification"),Hgt.forEach(t),Kcr=r(d8e," (Funnel Transformer model)"),d8e.forEach(t),Zcr=i(W),CM=s(W,"LI",{});var c8e=n(CM);hpe=s(c8e,"STRONG",{});var Ugt=n(hpe);emr=r(Ugt,"gpt2"),Ugt.forEach(t),omr=r(c8e," \u2014 "),bG=s(c8e,"A",{href:!0});var Jgt=n(bG);rmr=r(Jgt,"TFGPT2ForSequenceClassification"),Jgt.forEach(t),tmr=r(c8e," (OpenAI GPT-2 model)"),c8e.forEach(t),amr=i(W),MM=s(W,"LI",{});var m8e=n(MM);upe=s(m8e,"STRONG",{});var Ygt=n(upe);smr=r(Ygt,"layoutlm"),Ygt.forEach(t),nmr=r(m8e," \u2014 "),vG=s(m8e,"A",{href:!0});var Kgt=n(vG);lmr=r(Kgt,"TFLayoutLMForSequenceClassification"),Kgt.forEach(t),imr=r(m8e," (LayoutLM model)"),m8e.forEach(t),dmr=i(W),EM=s(W,"LI",{});var f8e=n(EM);ppe=s(f8e,"STRONG",{});var Zgt=n(ppe);cmr=r(Zgt,"longformer"),Zgt.forEach(t),mmr=r(f8e," \u2014 "),TG=s(f8e,"A",{href:!0});var eht=n(TG);fmr=r(eht,"TFLongformerForSequenceClassification"),eht.forEach(t),gmr=r(f8e," (Longformer model)"),f8e.forEach(t),hmr=i(W),yM=s(W,"LI",{});var g8e=n(yM);_pe=s(g8e,"STRONG",{});var oht=n(_pe);umr=r(oht,"mobilebert"),oht.forEach(t),pmr=r(g8e," \u2014 "),FG=s(g8e,"A",{href:!0});var rht=n(FG);_mr=r(rht,"TFMobileBertForSequenceClassification"),rht.forEach(t),bmr=r(g8e," (MobileBERT model)"),g8e.forEach(t),vmr=i(W),wM=s(W,"LI",{});var h8e=n(wM);bpe=s(h8e,"STRONG",{});var tht=n(bpe);Tmr=r(tht,"mpnet"),tht.forEach(t),Fmr=r(h8e," \u2014 "),CG=s(h8e,"A",{href:!0});var aht=n(CG);Cmr=r(aht,"TFMPNetForSequenceClassification"),aht.forEach(t),Mmr=r(h8e," (MPNet model)"),h8e.forEach(t),Emr=i(W),AM=s(W,"LI",{});var u8e=n(AM);vpe=s(u8e,"STRONG",{});var sht=n(vpe);ymr=r(sht,"openai-gpt"),sht.forEach(t),wmr=r(u8e," \u2014 "),MG=s(u8e,"A",{href:!0});var nht=n(MG);Amr=r(nht,"TFOpenAIGPTForSequenceClassification"),nht.forEach(t),Lmr=r(u8e," (OpenAI GPT model)"),u8e.forEach(t),Bmr=i(W),LM=s(W,"LI",{});var p8e=n(LM);Tpe=s(p8e,"STRONG",{});var lht=n(Tpe);xmr=r(lht,"rembert"),lht.forEach(t),kmr=r(p8e," \u2014 "),EG=s(p8e,"A",{href:!0});var iht=n(EG);Rmr=r(iht,"TFRemBertForSequenceClassification"),iht.forEach(t),Smr=r(p8e," (RemBERT model)"),p8e.forEach(t),Pmr=i(W),BM=s(W,"LI",{});var _8e=n(BM);Fpe=s(_8e,"STRONG",{});var dht=n(Fpe);$mr=r(dht,"roberta"),dht.forEach(t),Imr=r(_8e," \u2014 "),yG=s(_8e,"A",{href:!0});var cht=n(yG);jmr=r(cht,"TFRobertaForSequenceClassification"),cht.forEach(t),Dmr=r(_8e," (RoBERTa model)"),_8e.forEach(t),Nmr=i(W),xM=s(W,"LI",{});var b8e=n(xM);Cpe=s(b8e,"STRONG",{});var mht=n(Cpe);qmr=r(mht,"roformer"),mht.forEach(t),Omr=r(b8e," \u2014 "),wG=s(b8e,"A",{href:!0});var fht=n(wG);Gmr=r(fht,"TFRoFormerForSequenceClassification"),fht.forEach(t),Xmr=r(b8e," (RoFormer model)"),b8e.forEach(t),Vmr=i(W),kM=s(W,"LI",{});var v8e=n(kM);Mpe=s(v8e,"STRONG",{});var ght=n(Mpe);zmr=r(ght,"tapas"),ght.forEach(t),Wmr=r(v8e," \u2014 "),AG=s(v8e,"A",{href:!0});var hht=n(AG);Qmr=r(hht,"TFTapasForSequenceClassification"),hht.forEach(t),Hmr=r(v8e," (TAPAS model)"),v8e.forEach(t),Umr=i(W),RM=s(W,"LI",{});var T8e=n(RM);Epe=s(T8e,"STRONG",{});var uht=n(Epe);Jmr=r(uht,"transfo-xl"),uht.forEach(t),Ymr=r(T8e," \u2014 "),LG=s(T8e,"A",{href:!0});var pht=n(LG);Kmr=r(pht,"TFTransfoXLForSequenceClassification"),pht.forEach(t),Zmr=r(T8e," (Transformer-XL model)"),T8e.forEach(t),efr=i(W),SM=s(W,"LI",{});var F8e=n(SM);ype=s(F8e,"STRONG",{});var _ht=n(ype);ofr=r(_ht,"xlm"),_ht.forEach(t),rfr=r(F8e," \u2014 "),BG=s(F8e,"A",{href:!0});var bht=n(BG);tfr=r(bht,"TFXLMForSequenceClassification"),bht.forEach(t),afr=r(F8e," (XLM model)"),F8e.forEach(t),sfr=i(W),PM=s(W,"LI",{});var C8e=n(PM);wpe=s(C8e,"STRONG",{});var vht=n(wpe);nfr=r(vht,"xlm-roberta"),vht.forEach(t),lfr=r(C8e," \u2014 "),xG=s(C8e,"A",{href:!0});var Tht=n(xG);ifr=r(Tht,"TFXLMRobertaForSequenceClassification"),Tht.forEach(t),dfr=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),cfr=i(W),$M=s(W,"LI",{});var M8e=n($M);Ape=s(M8e,"STRONG",{});var Fht=n(Ape);mfr=r(Fht,"xlnet"),Fht.forEach(t),ffr=r(M8e," \u2014 "),kG=s(M8e,"A",{href:!0});var Cht=n(kG);gfr=r(Cht,"TFXLNetForSequenceClassification"),Cht.forEach(t),hfr=r(M8e," (XLNet model)"),M8e.forEach(t),W.forEach(t),ufr=i(Fa),Lpe=s(Fa,"P",{});var Mht=n(Lpe);pfr=r(Mht,"Examples:"),Mht.forEach(t),_fr=i(Fa),f(A0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),Oke=i(c),Pc=s(c,"H2",{class:!0});var ZSe=n(Pc);IM=s(ZSe,"A",{id:!0,class:!0,href:!0});var Eht=n(IM);Bpe=s(Eht,"SPAN",{});var yht=n(Bpe);f(L0.$$.fragment,yht),yht.forEach(t),Eht.forEach(t),bfr=i(ZSe),xpe=s(ZSe,"SPAN",{});var wht=n(xpe);vfr=r(wht,"TFAutoModelForMultipleChoice"),wht.forEach(t),ZSe.forEach(t),Gke=i(c),wr=s(c,"DIV",{class:!0});var Zl=n(wr);f(B0.$$.fragment,Zl),Tfr=i(Zl),$c=s(Zl,"P",{});var qW=n($c);Ffr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kpe=s(qW,"CODE",{});var Aht=n(kpe);Cfr=r(Aht,"from_pretrained()"),Aht.forEach(t),Mfr=r(qW,"class method or the "),Rpe=s(qW,"CODE",{});var Lht=n(Rpe);Efr=r(Lht,"from_config()"),Lht.forEach(t),yfr=r(qW,`class
method.`),qW.forEach(t),wfr=i(Zl),x0=s(Zl,"P",{});var ePe=n(x0);Afr=r(ePe,"This class cannot be instantiated directly using "),Spe=s(ePe,"CODE",{});var Bht=n(Spe);Lfr=r(Bht,"__init__()"),Bht.forEach(t),Bfr=r(ePe," (throws an error)."),ePe.forEach(t),xfr=i(Zl),Tt=s(Zl,"DIV",{class:!0});var ei=n(Tt);f(k0.$$.fragment,ei),kfr=i(ei),Ppe=s(ei,"P",{});var xht=n(Ppe);Rfr=r(xht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xht.forEach(t),Sfr=i(ei),Ic=s(ei,"P",{});var OW=n(Ic);Pfr=r(OW,`Note:
Loading a model from its configuration file does `),$pe=s(OW,"STRONG",{});var kht=n($pe);$fr=r(kht,"not"),kht.forEach(t),Ifr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=s(OW,"CODE",{});var Rht=n(Ipe);jfr=r(Rht,"from_pretrained()"),Rht.forEach(t),Dfr=r(OW,"to load the model weights."),OW.forEach(t),Nfr=i(ei),jpe=s(ei,"P",{});var Sht=n(jpe);qfr=r(Sht,"Examples:"),Sht.forEach(t),Ofr=i(ei),f(R0.$$.fragment,ei),ei.forEach(t),Gfr=i(Zl),Fo=s(Zl,"DIV",{class:!0});var Ca=n(Fo);f(S0.$$.fragment,Ca),Xfr=i(Ca),Dpe=s(Ca,"P",{});var Pht=n(Dpe);Vfr=r(Pht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pht.forEach(t),zfr=i(Ca),Cs=s(Ca,"P",{});var S5=n(Cs);Wfr=r(S5,"The model class to instantiate is selected based on the "),Npe=s(S5,"CODE",{});var $ht=n(Npe);Qfr=r($ht,"model_type"),$ht.forEach(t),Hfr=r(S5,` property of the config object (either
passed as an argument or loaded from `),qpe=s(S5,"CODE",{});var Iht=n(qpe);Ufr=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),Jfr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=s(S5,"CODE",{});var jht=n(Ope);Yfr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),Kfr=r(S5,":"),S5.forEach(t),Zfr=i(Ca),ae=s(Ca,"UL",{});var le=n(ae);jM=s(le,"LI",{});var E8e=n(jM);Gpe=s(E8e,"STRONG",{});var Dht=n(Gpe);egr=r(Dht,"albert"),Dht.forEach(t),ogr=r(E8e," \u2014 "),RG=s(E8e,"A",{href:!0});var Nht=n(RG);rgr=r(Nht,"TFAlbertForMultipleChoice"),Nht.forEach(t),tgr=r(E8e," (ALBERT model)"),E8e.forEach(t),agr=i(le),DM=s(le,"LI",{});var y8e=n(DM);Xpe=s(y8e,"STRONG",{});var qht=n(Xpe);sgr=r(qht,"bert"),qht.forEach(t),ngr=r(y8e," \u2014 "),SG=s(y8e,"A",{href:!0});var Oht=n(SG);lgr=r(Oht,"TFBertForMultipleChoice"),Oht.forEach(t),igr=r(y8e," (BERT model)"),y8e.forEach(t),dgr=i(le),NM=s(le,"LI",{});var w8e=n(NM);Vpe=s(w8e,"STRONG",{});var Ght=n(Vpe);cgr=r(Ght,"camembert"),Ght.forEach(t),mgr=r(w8e," \u2014 "),PG=s(w8e,"A",{href:!0});var Xht=n(PG);fgr=r(Xht,"TFCamembertForMultipleChoice"),Xht.forEach(t),ggr=r(w8e," (CamemBERT model)"),w8e.forEach(t),hgr=i(le),qM=s(le,"LI",{});var A8e=n(qM);zpe=s(A8e,"STRONG",{});var Vht=n(zpe);ugr=r(Vht,"convbert"),Vht.forEach(t),pgr=r(A8e," \u2014 "),$G=s(A8e,"A",{href:!0});var zht=n($G);_gr=r(zht,"TFConvBertForMultipleChoice"),zht.forEach(t),bgr=r(A8e," (ConvBERT model)"),A8e.forEach(t),vgr=i(le),OM=s(le,"LI",{});var L8e=n(OM);Wpe=s(L8e,"STRONG",{});var Wht=n(Wpe);Tgr=r(Wht,"distilbert"),Wht.forEach(t),Fgr=r(L8e," \u2014 "),IG=s(L8e,"A",{href:!0});var Qht=n(IG);Cgr=r(Qht,"TFDistilBertForMultipleChoice"),Qht.forEach(t),Mgr=r(L8e," (DistilBERT model)"),L8e.forEach(t),Egr=i(le),GM=s(le,"LI",{});var B8e=n(GM);Qpe=s(B8e,"STRONG",{});var Hht=n(Qpe);ygr=r(Hht,"electra"),Hht.forEach(t),wgr=r(B8e," \u2014 "),jG=s(B8e,"A",{href:!0});var Uht=n(jG);Agr=r(Uht,"TFElectraForMultipleChoice"),Uht.forEach(t),Lgr=r(B8e," (ELECTRA model)"),B8e.forEach(t),Bgr=i(le),XM=s(le,"LI",{});var x8e=n(XM);Hpe=s(x8e,"STRONG",{});var Jht=n(Hpe);xgr=r(Jht,"flaubert"),Jht.forEach(t),kgr=r(x8e," \u2014 "),DG=s(x8e,"A",{href:!0});var Yht=n(DG);Rgr=r(Yht,"TFFlaubertForMultipleChoice"),Yht.forEach(t),Sgr=r(x8e," (FlauBERT model)"),x8e.forEach(t),Pgr=i(le),VM=s(le,"LI",{});var k8e=n(VM);Upe=s(k8e,"STRONG",{});var Kht=n(Upe);$gr=r(Kht,"funnel"),Kht.forEach(t),Igr=r(k8e," \u2014 "),NG=s(k8e,"A",{href:!0});var Zht=n(NG);jgr=r(Zht,"TFFunnelForMultipleChoice"),Zht.forEach(t),Dgr=r(k8e," (Funnel Transformer model)"),k8e.forEach(t),Ngr=i(le),zM=s(le,"LI",{});var R8e=n(zM);Jpe=s(R8e,"STRONG",{});var eut=n(Jpe);qgr=r(eut,"longformer"),eut.forEach(t),Ogr=r(R8e," \u2014 "),qG=s(R8e,"A",{href:!0});var out=n(qG);Ggr=r(out,"TFLongformerForMultipleChoice"),out.forEach(t),Xgr=r(R8e," (Longformer model)"),R8e.forEach(t),Vgr=i(le),WM=s(le,"LI",{});var S8e=n(WM);Ype=s(S8e,"STRONG",{});var rut=n(Ype);zgr=r(rut,"mobilebert"),rut.forEach(t),Wgr=r(S8e," \u2014 "),OG=s(S8e,"A",{href:!0});var tut=n(OG);Qgr=r(tut,"TFMobileBertForMultipleChoice"),tut.forEach(t),Hgr=r(S8e," (MobileBERT model)"),S8e.forEach(t),Ugr=i(le),QM=s(le,"LI",{});var P8e=n(QM);Kpe=s(P8e,"STRONG",{});var aut=n(Kpe);Jgr=r(aut,"mpnet"),aut.forEach(t),Ygr=r(P8e," \u2014 "),GG=s(P8e,"A",{href:!0});var sut=n(GG);Kgr=r(sut,"TFMPNetForMultipleChoice"),sut.forEach(t),Zgr=r(P8e," (MPNet model)"),P8e.forEach(t),ehr=i(le),HM=s(le,"LI",{});var $8e=n(HM);Zpe=s($8e,"STRONG",{});var nut=n(Zpe);ohr=r(nut,"rembert"),nut.forEach(t),rhr=r($8e," \u2014 "),XG=s($8e,"A",{href:!0});var lut=n(XG);thr=r(lut,"TFRemBertForMultipleChoice"),lut.forEach(t),ahr=r($8e," (RemBERT model)"),$8e.forEach(t),shr=i(le),UM=s(le,"LI",{});var I8e=n(UM);e_e=s(I8e,"STRONG",{});var iut=n(e_e);nhr=r(iut,"roberta"),iut.forEach(t),lhr=r(I8e," \u2014 "),VG=s(I8e,"A",{href:!0});var dut=n(VG);ihr=r(dut,"TFRobertaForMultipleChoice"),dut.forEach(t),dhr=r(I8e," (RoBERTa model)"),I8e.forEach(t),chr=i(le),JM=s(le,"LI",{});var j8e=n(JM);o_e=s(j8e,"STRONG",{});var cut=n(o_e);mhr=r(cut,"roformer"),cut.forEach(t),fhr=r(j8e," \u2014 "),zG=s(j8e,"A",{href:!0});var mut=n(zG);ghr=r(mut,"TFRoFormerForMultipleChoice"),mut.forEach(t),hhr=r(j8e," (RoFormer model)"),j8e.forEach(t),uhr=i(le),YM=s(le,"LI",{});var D8e=n(YM);r_e=s(D8e,"STRONG",{});var fut=n(r_e);phr=r(fut,"xlm"),fut.forEach(t),_hr=r(D8e," \u2014 "),WG=s(D8e,"A",{href:!0});var gut=n(WG);bhr=r(gut,"TFXLMForMultipleChoice"),gut.forEach(t),vhr=r(D8e," (XLM model)"),D8e.forEach(t),Thr=i(le),KM=s(le,"LI",{});var N8e=n(KM);t_e=s(N8e,"STRONG",{});var hut=n(t_e);Fhr=r(hut,"xlm-roberta"),hut.forEach(t),Chr=r(N8e," \u2014 "),QG=s(N8e,"A",{href:!0});var uut=n(QG);Mhr=r(uut,"TFXLMRobertaForMultipleChoice"),uut.forEach(t),Ehr=r(N8e," (XLM-RoBERTa model)"),N8e.forEach(t),yhr=i(le),ZM=s(le,"LI",{});var q8e=n(ZM);a_e=s(q8e,"STRONG",{});var put=n(a_e);whr=r(put,"xlnet"),put.forEach(t),Ahr=r(q8e," \u2014 "),HG=s(q8e,"A",{href:!0});var _ut=n(HG);Lhr=r(_ut,"TFXLNetForMultipleChoice"),_ut.forEach(t),Bhr=r(q8e," (XLNet model)"),q8e.forEach(t),le.forEach(t),xhr=i(Ca),s_e=s(Ca,"P",{});var but=n(s_e);khr=r(but,"Examples:"),but.forEach(t),Rhr=i(Ca),f(P0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Xke=i(c),jc=s(c,"H2",{class:!0});var oPe=n(jc);e4=s(oPe,"A",{id:!0,class:!0,href:!0});var vut=n(e4);n_e=s(vut,"SPAN",{});var Tut=n(n_e);f($0.$$.fragment,Tut),Tut.forEach(t),vut.forEach(t),Shr=i(oPe),l_e=s(oPe,"SPAN",{});var Fut=n(l_e);Phr=r(Fut,"TFAutoModelForTableQuestionAnswering"),Fut.forEach(t),oPe.forEach(t),Vke=i(c),Ar=s(c,"DIV",{class:!0});var oi=n(Ar);f(I0.$$.fragment,oi),$hr=i(oi),Dc=s(oi,"P",{});var GW=n(Dc);Ihr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),i_e=s(GW,"CODE",{});var Cut=n(i_e);jhr=r(Cut,"from_pretrained()"),Cut.forEach(t),Dhr=r(GW,"class method or the "),d_e=s(GW,"CODE",{});var Mut=n(d_e);Nhr=r(Mut,"from_config()"),Mut.forEach(t),qhr=r(GW,`class
method.`),GW.forEach(t),Ohr=i(oi),j0=s(oi,"P",{});var rPe=n(j0);Ghr=r(rPe,"This class cannot be instantiated directly using "),c_e=s(rPe,"CODE",{});var Eut=n(c_e);Xhr=r(Eut,"__init__()"),Eut.forEach(t),Vhr=r(rPe," (throws an error)."),rPe.forEach(t),zhr=i(oi),Ft=s(oi,"DIV",{class:!0});var ri=n(Ft);f(D0.$$.fragment,ri),Whr=i(ri),m_e=s(ri,"P",{});var yut=n(m_e);Qhr=r(yut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yut.forEach(t),Hhr=i(ri),Nc=s(ri,"P",{});var XW=n(Nc);Uhr=r(XW,`Note:
Loading a model from its configuration file does `),f_e=s(XW,"STRONG",{});var wut=n(f_e);Jhr=r(wut,"not"),wut.forEach(t),Yhr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),g_e=s(XW,"CODE",{});var Aut=n(g_e);Khr=r(Aut,"from_pretrained()"),Aut.forEach(t),Zhr=r(XW,"to load the model weights."),XW.forEach(t),eur=i(ri),h_e=s(ri,"P",{});var Lut=n(h_e);our=r(Lut,"Examples:"),Lut.forEach(t),rur=i(ri),f(N0.$$.fragment,ri),ri.forEach(t),tur=i(oi),Co=s(oi,"DIV",{class:!0});var Ma=n(Co);f(q0.$$.fragment,Ma),aur=i(Ma),u_e=s(Ma,"P",{});var But=n(u_e);sur=r(But,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),But.forEach(t),nur=i(Ma),Ms=s(Ma,"P",{});var P5=n(Ms);lur=r(P5,"The model class to instantiate is selected based on the "),p_e=s(P5,"CODE",{});var xut=n(p_e);iur=r(xut,"model_type"),xut.forEach(t),dur=r(P5,` property of the config object (either
passed as an argument or loaded from `),__e=s(P5,"CODE",{});var kut=n(__e);cur=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),mur=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=s(P5,"CODE",{});var Rut=n(b_e);fur=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),gur=r(P5,":"),P5.forEach(t),hur=i(Ma),v_e=s(Ma,"UL",{});var Sut=n(v_e);o4=s(Sut,"LI",{});var O8e=n(o4);T_e=s(O8e,"STRONG",{});var Put=n(T_e);uur=r(Put,"tapas"),Put.forEach(t),pur=r(O8e," \u2014 "),UG=s(O8e,"A",{href:!0});var $ut=n(UG);_ur=r($ut,"TFTapasForQuestionAnswering"),$ut.forEach(t),bur=r(O8e," (TAPAS model)"),O8e.forEach(t),Sut.forEach(t),vur=i(Ma),F_e=s(Ma,"P",{});var Iut=n(F_e);Tur=r(Iut,"Examples:"),Iut.forEach(t),Fur=i(Ma),f(O0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),zke=i(c),qc=s(c,"H2",{class:!0});var tPe=n(qc);r4=s(tPe,"A",{id:!0,class:!0,href:!0});var jut=n(r4);C_e=s(jut,"SPAN",{});var Dut=n(C_e);f(G0.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),Cur=i(tPe),M_e=s(tPe,"SPAN",{});var Nut=n(M_e);Mur=r(Nut,"TFAutoModelForTokenClassification"),Nut.forEach(t),tPe.forEach(t),Wke=i(c),Lr=s(c,"DIV",{class:!0});var ti=n(Lr);f(X0.$$.fragment,ti),Eur=i(ti),Oc=s(ti,"P",{});var VW=n(Oc);yur=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),E_e=s(VW,"CODE",{});var qut=n(E_e);wur=r(qut,"from_pretrained()"),qut.forEach(t),Aur=r(VW,"class method or the "),y_e=s(VW,"CODE",{});var Out=n(y_e);Lur=r(Out,"from_config()"),Out.forEach(t),Bur=r(VW,`class
method.`),VW.forEach(t),xur=i(ti),V0=s(ti,"P",{});var aPe=n(V0);kur=r(aPe,"This class cannot be instantiated directly using "),w_e=s(aPe,"CODE",{});var Gut=n(w_e);Rur=r(Gut,"__init__()"),Gut.forEach(t),Sur=r(aPe," (throws an error)."),aPe.forEach(t),Pur=i(ti),Ct=s(ti,"DIV",{class:!0});var ai=n(Ct);f(z0.$$.fragment,ai),$ur=i(ai),A_e=s(ai,"P",{});var Xut=n(A_e);Iur=r(Xut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xut.forEach(t),jur=i(ai),Gc=s(ai,"P",{});var zW=n(Gc);Dur=r(zW,`Note:
Loading a model from its configuration file does `),L_e=s(zW,"STRONG",{});var Vut=n(L_e);Nur=r(Vut,"not"),Vut.forEach(t),qur=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),B_e=s(zW,"CODE",{});var zut=n(B_e);Our=r(zut,"from_pretrained()"),zut.forEach(t),Gur=r(zW,"to load the model weights."),zW.forEach(t),Xur=i(ai),x_e=s(ai,"P",{});var Wut=n(x_e);Vur=r(Wut,"Examples:"),Wut.forEach(t),zur=i(ai),f(W0.$$.fragment,ai),ai.forEach(t),Wur=i(ti),Mo=s(ti,"DIV",{class:!0});var Ea=n(Mo);f(Q0.$$.fragment,Ea),Qur=i(Ea),k_e=s(Ea,"P",{});var Qut=n(k_e);Hur=r(Qut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qut.forEach(t),Uur=i(Ea),Es=s(Ea,"P",{});var $5=n(Es);Jur=r($5,"The model class to instantiate is selected based on the "),R_e=s($5,"CODE",{});var Hut=n(R_e);Yur=r(Hut,"model_type"),Hut.forEach(t),Kur=r($5,` property of the config object (either
passed as an argument or loaded from `),S_e=s($5,"CODE",{});var Uut=n(S_e);Zur=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),epr=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=s($5,"CODE",{});var Jut=n(P_e);opr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),rpr=r($5,":"),$5.forEach(t),tpr=i(Ea),K=s(Ea,"UL",{});var oe=n(K);t4=s(oe,"LI",{});var G8e=n(t4);$_e=s(G8e,"STRONG",{});var Yut=n($_e);apr=r(Yut,"albert"),Yut.forEach(t),spr=r(G8e," \u2014 "),JG=s(G8e,"A",{href:!0});var Kut=n(JG);npr=r(Kut,"TFAlbertForTokenClassification"),Kut.forEach(t),lpr=r(G8e," (ALBERT model)"),G8e.forEach(t),ipr=i(oe),a4=s(oe,"LI",{});var X8e=n(a4);I_e=s(X8e,"STRONG",{});var Zut=n(I_e);dpr=r(Zut,"bert"),Zut.forEach(t),cpr=r(X8e," \u2014 "),YG=s(X8e,"A",{href:!0});var ept=n(YG);mpr=r(ept,"TFBertForTokenClassification"),ept.forEach(t),fpr=r(X8e," (BERT model)"),X8e.forEach(t),gpr=i(oe),s4=s(oe,"LI",{});var V8e=n(s4);j_e=s(V8e,"STRONG",{});var opt=n(j_e);hpr=r(opt,"camembert"),opt.forEach(t),upr=r(V8e," \u2014 "),KG=s(V8e,"A",{href:!0});var rpt=n(KG);ppr=r(rpt,"TFCamembertForTokenClassification"),rpt.forEach(t),_pr=r(V8e," (CamemBERT model)"),V8e.forEach(t),bpr=i(oe),n4=s(oe,"LI",{});var z8e=n(n4);D_e=s(z8e,"STRONG",{});var tpt=n(D_e);vpr=r(tpt,"convbert"),tpt.forEach(t),Tpr=r(z8e," \u2014 "),ZG=s(z8e,"A",{href:!0});var apt=n(ZG);Fpr=r(apt,"TFConvBertForTokenClassification"),apt.forEach(t),Cpr=r(z8e," (ConvBERT model)"),z8e.forEach(t),Mpr=i(oe),l4=s(oe,"LI",{});var W8e=n(l4);N_e=s(W8e,"STRONG",{});var spt=n(N_e);Epr=r(spt,"deberta"),spt.forEach(t),ypr=r(W8e," \u2014 "),eX=s(W8e,"A",{href:!0});var npt=n(eX);wpr=r(npt,"TFDebertaForTokenClassification"),npt.forEach(t),Apr=r(W8e," (DeBERTa model)"),W8e.forEach(t),Lpr=i(oe),i4=s(oe,"LI",{});var Q8e=n(i4);q_e=s(Q8e,"STRONG",{});var lpt=n(q_e);Bpr=r(lpt,"deberta-v2"),lpt.forEach(t),xpr=r(Q8e," \u2014 "),oX=s(Q8e,"A",{href:!0});var ipt=n(oX);kpr=r(ipt,"TFDebertaV2ForTokenClassification"),ipt.forEach(t),Rpr=r(Q8e," (DeBERTa-v2 model)"),Q8e.forEach(t),Spr=i(oe),d4=s(oe,"LI",{});var H8e=n(d4);O_e=s(H8e,"STRONG",{});var dpt=n(O_e);Ppr=r(dpt,"distilbert"),dpt.forEach(t),$pr=r(H8e," \u2014 "),rX=s(H8e,"A",{href:!0});var cpt=n(rX);Ipr=r(cpt,"TFDistilBertForTokenClassification"),cpt.forEach(t),jpr=r(H8e," (DistilBERT model)"),H8e.forEach(t),Dpr=i(oe),c4=s(oe,"LI",{});var U8e=n(c4);G_e=s(U8e,"STRONG",{});var mpt=n(G_e);Npr=r(mpt,"electra"),mpt.forEach(t),qpr=r(U8e," \u2014 "),tX=s(U8e,"A",{href:!0});var fpt=n(tX);Opr=r(fpt,"TFElectraForTokenClassification"),fpt.forEach(t),Gpr=r(U8e," (ELECTRA model)"),U8e.forEach(t),Xpr=i(oe),m4=s(oe,"LI",{});var J8e=n(m4);X_e=s(J8e,"STRONG",{});var gpt=n(X_e);Vpr=r(gpt,"flaubert"),gpt.forEach(t),zpr=r(J8e," \u2014 "),aX=s(J8e,"A",{href:!0});var hpt=n(aX);Wpr=r(hpt,"TFFlaubertForTokenClassification"),hpt.forEach(t),Qpr=r(J8e," (FlauBERT model)"),J8e.forEach(t),Hpr=i(oe),f4=s(oe,"LI",{});var Y8e=n(f4);V_e=s(Y8e,"STRONG",{});var upt=n(V_e);Upr=r(upt,"funnel"),upt.forEach(t),Jpr=r(Y8e," \u2014 "),sX=s(Y8e,"A",{href:!0});var ppt=n(sX);Ypr=r(ppt,"TFFunnelForTokenClassification"),ppt.forEach(t),Kpr=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),Zpr=i(oe),g4=s(oe,"LI",{});var K8e=n(g4);z_e=s(K8e,"STRONG",{});var _pt=n(z_e);e_r=r(_pt,"layoutlm"),_pt.forEach(t),o_r=r(K8e," \u2014 "),nX=s(K8e,"A",{href:!0});var bpt=n(nX);r_r=r(bpt,"TFLayoutLMForTokenClassification"),bpt.forEach(t),t_r=r(K8e," (LayoutLM model)"),K8e.forEach(t),a_r=i(oe),h4=s(oe,"LI",{});var Z8e=n(h4);W_e=s(Z8e,"STRONG",{});var vpt=n(W_e);s_r=r(vpt,"longformer"),vpt.forEach(t),n_r=r(Z8e," \u2014 "),lX=s(Z8e,"A",{href:!0});var Tpt=n(lX);l_r=r(Tpt,"TFLongformerForTokenClassification"),Tpt.forEach(t),i_r=r(Z8e," (Longformer model)"),Z8e.forEach(t),d_r=i(oe),u4=s(oe,"LI",{});var e9e=n(u4);Q_e=s(e9e,"STRONG",{});var Fpt=n(Q_e);c_r=r(Fpt,"mobilebert"),Fpt.forEach(t),m_r=r(e9e," \u2014 "),iX=s(e9e,"A",{href:!0});var Cpt=n(iX);f_r=r(Cpt,"TFMobileBertForTokenClassification"),Cpt.forEach(t),g_r=r(e9e," (MobileBERT model)"),e9e.forEach(t),h_r=i(oe),p4=s(oe,"LI",{});var o9e=n(p4);H_e=s(o9e,"STRONG",{});var Mpt=n(H_e);u_r=r(Mpt,"mpnet"),Mpt.forEach(t),p_r=r(o9e," \u2014 "),dX=s(o9e,"A",{href:!0});var Ept=n(dX);__r=r(Ept,"TFMPNetForTokenClassification"),Ept.forEach(t),b_r=r(o9e," (MPNet model)"),o9e.forEach(t),v_r=i(oe),_4=s(oe,"LI",{});var r9e=n(_4);U_e=s(r9e,"STRONG",{});var ypt=n(U_e);T_r=r(ypt,"rembert"),ypt.forEach(t),F_r=r(r9e," \u2014 "),cX=s(r9e,"A",{href:!0});var wpt=n(cX);C_r=r(wpt,"TFRemBertForTokenClassification"),wpt.forEach(t),M_r=r(r9e," (RemBERT model)"),r9e.forEach(t),E_r=i(oe),b4=s(oe,"LI",{});var t9e=n(b4);J_e=s(t9e,"STRONG",{});var Apt=n(J_e);y_r=r(Apt,"roberta"),Apt.forEach(t),w_r=r(t9e," \u2014 "),mX=s(t9e,"A",{href:!0});var Lpt=n(mX);A_r=r(Lpt,"TFRobertaForTokenClassification"),Lpt.forEach(t),L_r=r(t9e," (RoBERTa model)"),t9e.forEach(t),B_r=i(oe),v4=s(oe,"LI",{});var a9e=n(v4);Y_e=s(a9e,"STRONG",{});var Bpt=n(Y_e);x_r=r(Bpt,"roformer"),Bpt.forEach(t),k_r=r(a9e," \u2014 "),fX=s(a9e,"A",{href:!0});var xpt=n(fX);R_r=r(xpt,"TFRoFormerForTokenClassification"),xpt.forEach(t),S_r=r(a9e," (RoFormer model)"),a9e.forEach(t),P_r=i(oe),T4=s(oe,"LI",{});var s9e=n(T4);K_e=s(s9e,"STRONG",{});var kpt=n(K_e);$_r=r(kpt,"xlm"),kpt.forEach(t),I_r=r(s9e," \u2014 "),gX=s(s9e,"A",{href:!0});var Rpt=n(gX);j_r=r(Rpt,"TFXLMForTokenClassification"),Rpt.forEach(t),D_r=r(s9e," (XLM model)"),s9e.forEach(t),N_r=i(oe),F4=s(oe,"LI",{});var n9e=n(F4);Z_e=s(n9e,"STRONG",{});var Spt=n(Z_e);q_r=r(Spt,"xlm-roberta"),Spt.forEach(t),O_r=r(n9e," \u2014 "),hX=s(n9e,"A",{href:!0});var Ppt=n(hX);G_r=r(Ppt,"TFXLMRobertaForTokenClassification"),Ppt.forEach(t),X_r=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),V_r=i(oe),C4=s(oe,"LI",{});var l9e=n(C4);ebe=s(l9e,"STRONG",{});var $pt=n(ebe);z_r=r($pt,"xlnet"),$pt.forEach(t),W_r=r(l9e," \u2014 "),uX=s(l9e,"A",{href:!0});var Ipt=n(uX);Q_r=r(Ipt,"TFXLNetForTokenClassification"),Ipt.forEach(t),H_r=r(l9e," (XLNet model)"),l9e.forEach(t),oe.forEach(t),U_r=i(Ea),obe=s(Ea,"P",{});var jpt=n(obe);J_r=r(jpt,"Examples:"),jpt.forEach(t),Y_r=i(Ea),f(H0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),Qke=i(c),Xc=s(c,"H2",{class:!0});var sPe=n(Xc);M4=s(sPe,"A",{id:!0,class:!0,href:!0});var Dpt=n(M4);rbe=s(Dpt,"SPAN",{});var Npt=n(rbe);f(U0.$$.fragment,Npt),Npt.forEach(t),Dpt.forEach(t),K_r=i(sPe),tbe=s(sPe,"SPAN",{});var qpt=n(tbe);Z_r=r(qpt,"TFAutoModelForQuestionAnswering"),qpt.forEach(t),sPe.forEach(t),Hke=i(c),Br=s(c,"DIV",{class:!0});var si=n(Br);f(J0.$$.fragment,si),ebr=i(si),Vc=s(si,"P",{});var WW=n(Vc);obr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),abe=s(WW,"CODE",{});var Opt=n(abe);rbr=r(Opt,"from_pretrained()"),Opt.forEach(t),tbr=r(WW,"class method or the "),sbe=s(WW,"CODE",{});var Gpt=n(sbe);abr=r(Gpt,"from_config()"),Gpt.forEach(t),sbr=r(WW,`class
method.`),WW.forEach(t),nbr=i(si),Y0=s(si,"P",{});var nPe=n(Y0);lbr=r(nPe,"This class cannot be instantiated directly using "),nbe=s(nPe,"CODE",{});var Xpt=n(nbe);ibr=r(Xpt,"__init__()"),Xpt.forEach(t),dbr=r(nPe," (throws an error)."),nPe.forEach(t),cbr=i(si),Mt=s(si,"DIV",{class:!0});var ni=n(Mt);f(K0.$$.fragment,ni),mbr=i(ni),lbe=s(ni,"P",{});var Vpt=n(lbe);fbr=r(Vpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vpt.forEach(t),gbr=i(ni),zc=s(ni,"P",{});var QW=n(zc);hbr=r(QW,`Note:
Loading a model from its configuration file does `),ibe=s(QW,"STRONG",{});var zpt=n(ibe);ubr=r(zpt,"not"),zpt.forEach(t),pbr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dbe=s(QW,"CODE",{});var Wpt=n(dbe);_br=r(Wpt,"from_pretrained()"),Wpt.forEach(t),bbr=r(QW,"to load the model weights."),QW.forEach(t),vbr=i(ni),cbe=s(ni,"P",{});var Qpt=n(cbe);Tbr=r(Qpt,"Examples:"),Qpt.forEach(t),Fbr=i(ni),f(Z0.$$.fragment,ni),ni.forEach(t),Cbr=i(si),Eo=s(si,"DIV",{class:!0});var ya=n(Eo);f(eL.$$.fragment,ya),Mbr=i(ya),mbe=s(ya,"P",{});var Hpt=n(mbe);Ebr=r(Hpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hpt.forEach(t),ybr=i(ya),ys=s(ya,"P",{});var I5=n(ys);wbr=r(I5,"The model class to instantiate is selected based on the "),fbe=s(I5,"CODE",{});var Upt=n(fbe);Abr=r(Upt,"model_type"),Upt.forEach(t),Lbr=r(I5,` property of the config object (either
passed as an argument or loaded from `),gbe=s(I5,"CODE",{});var Jpt=n(gbe);Bbr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),xbr=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=s(I5,"CODE",{});var Ypt=n(hbe);kbr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),Rbr=r(I5,":"),I5.forEach(t),Sbr=i(ya),Z=s(ya,"UL",{});var re=n(Z);E4=s(re,"LI",{});var i9e=n(E4);ube=s(i9e,"STRONG",{});var Kpt=n(ube);Pbr=r(Kpt,"albert"),Kpt.forEach(t),$br=r(i9e," \u2014 "),pX=s(i9e,"A",{href:!0});var Zpt=n(pX);Ibr=r(Zpt,"TFAlbertForQuestionAnswering"),Zpt.forEach(t),jbr=r(i9e," (ALBERT model)"),i9e.forEach(t),Dbr=i(re),y4=s(re,"LI",{});var d9e=n(y4);pbe=s(d9e,"STRONG",{});var e_t=n(pbe);Nbr=r(e_t,"bert"),e_t.forEach(t),qbr=r(d9e," \u2014 "),_X=s(d9e,"A",{href:!0});var o_t=n(_X);Obr=r(o_t,"TFBertForQuestionAnswering"),o_t.forEach(t),Gbr=r(d9e," (BERT model)"),d9e.forEach(t),Xbr=i(re),w4=s(re,"LI",{});var c9e=n(w4);_be=s(c9e,"STRONG",{});var r_t=n(_be);Vbr=r(r_t,"camembert"),r_t.forEach(t),zbr=r(c9e," \u2014 "),bX=s(c9e,"A",{href:!0});var t_t=n(bX);Wbr=r(t_t,"TFCamembertForQuestionAnswering"),t_t.forEach(t),Qbr=r(c9e," (CamemBERT model)"),c9e.forEach(t),Hbr=i(re),A4=s(re,"LI",{});var m9e=n(A4);bbe=s(m9e,"STRONG",{});var a_t=n(bbe);Ubr=r(a_t,"convbert"),a_t.forEach(t),Jbr=r(m9e," \u2014 "),vX=s(m9e,"A",{href:!0});var s_t=n(vX);Ybr=r(s_t,"TFConvBertForQuestionAnswering"),s_t.forEach(t),Kbr=r(m9e," (ConvBERT model)"),m9e.forEach(t),Zbr=i(re),L4=s(re,"LI",{});var f9e=n(L4);vbe=s(f9e,"STRONG",{});var n_t=n(vbe);e2r=r(n_t,"deberta"),n_t.forEach(t),o2r=r(f9e," \u2014 "),TX=s(f9e,"A",{href:!0});var l_t=n(TX);r2r=r(l_t,"TFDebertaForQuestionAnswering"),l_t.forEach(t),t2r=r(f9e," (DeBERTa model)"),f9e.forEach(t),a2r=i(re),B4=s(re,"LI",{});var g9e=n(B4);Tbe=s(g9e,"STRONG",{});var i_t=n(Tbe);s2r=r(i_t,"deberta-v2"),i_t.forEach(t),n2r=r(g9e," \u2014 "),FX=s(g9e,"A",{href:!0});var d_t=n(FX);l2r=r(d_t,"TFDebertaV2ForQuestionAnswering"),d_t.forEach(t),i2r=r(g9e," (DeBERTa-v2 model)"),g9e.forEach(t),d2r=i(re),x4=s(re,"LI",{});var h9e=n(x4);Fbe=s(h9e,"STRONG",{});var c_t=n(Fbe);c2r=r(c_t,"distilbert"),c_t.forEach(t),m2r=r(h9e," \u2014 "),CX=s(h9e,"A",{href:!0});var m_t=n(CX);f2r=r(m_t,"TFDistilBertForQuestionAnswering"),m_t.forEach(t),g2r=r(h9e," (DistilBERT model)"),h9e.forEach(t),h2r=i(re),k4=s(re,"LI",{});var u9e=n(k4);Cbe=s(u9e,"STRONG",{});var f_t=n(Cbe);u2r=r(f_t,"electra"),f_t.forEach(t),p2r=r(u9e," \u2014 "),MX=s(u9e,"A",{href:!0});var g_t=n(MX);_2r=r(g_t,"TFElectraForQuestionAnswering"),g_t.forEach(t),b2r=r(u9e," (ELECTRA model)"),u9e.forEach(t),v2r=i(re),R4=s(re,"LI",{});var p9e=n(R4);Mbe=s(p9e,"STRONG",{});var h_t=n(Mbe);T2r=r(h_t,"flaubert"),h_t.forEach(t),F2r=r(p9e," \u2014 "),EX=s(p9e,"A",{href:!0});var u_t=n(EX);C2r=r(u_t,"TFFlaubertForQuestionAnsweringSimple"),u_t.forEach(t),M2r=r(p9e," (FlauBERT model)"),p9e.forEach(t),E2r=i(re),S4=s(re,"LI",{});var _9e=n(S4);Ebe=s(_9e,"STRONG",{});var p_t=n(Ebe);y2r=r(p_t,"funnel"),p_t.forEach(t),w2r=r(_9e," \u2014 "),yX=s(_9e,"A",{href:!0});var __t=n(yX);A2r=r(__t,"TFFunnelForQuestionAnswering"),__t.forEach(t),L2r=r(_9e," (Funnel Transformer model)"),_9e.forEach(t),B2r=i(re),P4=s(re,"LI",{});var b9e=n(P4);ybe=s(b9e,"STRONG",{});var b_t=n(ybe);x2r=r(b_t,"longformer"),b_t.forEach(t),k2r=r(b9e," \u2014 "),wX=s(b9e,"A",{href:!0});var v_t=n(wX);R2r=r(v_t,"TFLongformerForQuestionAnswering"),v_t.forEach(t),S2r=r(b9e," (Longformer model)"),b9e.forEach(t),P2r=i(re),$4=s(re,"LI",{});var v9e=n($4);wbe=s(v9e,"STRONG",{});var T_t=n(wbe);$2r=r(T_t,"mobilebert"),T_t.forEach(t),I2r=r(v9e," \u2014 "),AX=s(v9e,"A",{href:!0});var F_t=n(AX);j2r=r(F_t,"TFMobileBertForQuestionAnswering"),F_t.forEach(t),D2r=r(v9e," (MobileBERT model)"),v9e.forEach(t),N2r=i(re),I4=s(re,"LI",{});var T9e=n(I4);Abe=s(T9e,"STRONG",{});var C_t=n(Abe);q2r=r(C_t,"mpnet"),C_t.forEach(t),O2r=r(T9e," \u2014 "),LX=s(T9e,"A",{href:!0});var M_t=n(LX);G2r=r(M_t,"TFMPNetForQuestionAnswering"),M_t.forEach(t),X2r=r(T9e," (MPNet model)"),T9e.forEach(t),V2r=i(re),j4=s(re,"LI",{});var F9e=n(j4);Lbe=s(F9e,"STRONG",{});var E_t=n(Lbe);z2r=r(E_t,"rembert"),E_t.forEach(t),W2r=r(F9e," \u2014 "),BX=s(F9e,"A",{href:!0});var y_t=n(BX);Q2r=r(y_t,"TFRemBertForQuestionAnswering"),y_t.forEach(t),H2r=r(F9e," (RemBERT model)"),F9e.forEach(t),U2r=i(re),D4=s(re,"LI",{});var C9e=n(D4);Bbe=s(C9e,"STRONG",{});var w_t=n(Bbe);J2r=r(w_t,"roberta"),w_t.forEach(t),Y2r=r(C9e," \u2014 "),xX=s(C9e,"A",{href:!0});var A_t=n(xX);K2r=r(A_t,"TFRobertaForQuestionAnswering"),A_t.forEach(t),Z2r=r(C9e," (RoBERTa model)"),C9e.forEach(t),evr=i(re),N4=s(re,"LI",{});var M9e=n(N4);xbe=s(M9e,"STRONG",{});var L_t=n(xbe);ovr=r(L_t,"roformer"),L_t.forEach(t),rvr=r(M9e," \u2014 "),kX=s(M9e,"A",{href:!0});var B_t=n(kX);tvr=r(B_t,"TFRoFormerForQuestionAnswering"),B_t.forEach(t),avr=r(M9e," (RoFormer model)"),M9e.forEach(t),svr=i(re),q4=s(re,"LI",{});var E9e=n(q4);kbe=s(E9e,"STRONG",{});var x_t=n(kbe);nvr=r(x_t,"xlm"),x_t.forEach(t),lvr=r(E9e," \u2014 "),RX=s(E9e,"A",{href:!0});var k_t=n(RX);ivr=r(k_t,"TFXLMForQuestionAnsweringSimple"),k_t.forEach(t),dvr=r(E9e," (XLM model)"),E9e.forEach(t),cvr=i(re),O4=s(re,"LI",{});var y9e=n(O4);Rbe=s(y9e,"STRONG",{});var R_t=n(Rbe);mvr=r(R_t,"xlm-roberta"),R_t.forEach(t),fvr=r(y9e," \u2014 "),SX=s(y9e,"A",{href:!0});var S_t=n(SX);gvr=r(S_t,"TFXLMRobertaForQuestionAnswering"),S_t.forEach(t),hvr=r(y9e," (XLM-RoBERTa model)"),y9e.forEach(t),uvr=i(re),G4=s(re,"LI",{});var w9e=n(G4);Sbe=s(w9e,"STRONG",{});var P_t=n(Sbe);pvr=r(P_t,"xlnet"),P_t.forEach(t),_vr=r(w9e," \u2014 "),PX=s(w9e,"A",{href:!0});var $_t=n(PX);bvr=r($_t,"TFXLNetForQuestionAnsweringSimple"),$_t.forEach(t),vvr=r(w9e," (XLNet model)"),w9e.forEach(t),re.forEach(t),Tvr=i(ya),Pbe=s(ya,"P",{});var I_t=n(Pbe);Fvr=r(I_t,"Examples:"),I_t.forEach(t),Cvr=i(ya),f(oL.$$.fragment,ya),ya.forEach(t),si.forEach(t),Uke=i(c),Wc=s(c,"H2",{class:!0});var lPe=n(Wc);X4=s(lPe,"A",{id:!0,class:!0,href:!0});var j_t=n(X4);$be=s(j_t,"SPAN",{});var D_t=n($be);f(rL.$$.fragment,D_t),D_t.forEach(t),j_t.forEach(t),Mvr=i(lPe),Ibe=s(lPe,"SPAN",{});var N_t=n(Ibe);Evr=r(N_t,"TFAutoModelForVision2Seq"),N_t.forEach(t),lPe.forEach(t),Jke=i(c),xr=s(c,"DIV",{class:!0});var li=n(xr);f(tL.$$.fragment,li),yvr=i(li),Qc=s(li,"P",{});var HW=n(Qc);wvr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jbe=s(HW,"CODE",{});var q_t=n(jbe);Avr=r(q_t,"from_pretrained()"),q_t.forEach(t),Lvr=r(HW,"class method or the "),Dbe=s(HW,"CODE",{});var O_t=n(Dbe);Bvr=r(O_t,"from_config()"),O_t.forEach(t),xvr=r(HW,`class
method.`),HW.forEach(t),kvr=i(li),aL=s(li,"P",{});var iPe=n(aL);Rvr=r(iPe,"This class cannot be instantiated directly using "),Nbe=s(iPe,"CODE",{});var G_t=n(Nbe);Svr=r(G_t,"__init__()"),G_t.forEach(t),Pvr=r(iPe," (throws an error)."),iPe.forEach(t),$vr=i(li),Et=s(li,"DIV",{class:!0});var ii=n(Et);f(sL.$$.fragment,ii),Ivr=i(ii),qbe=s(ii,"P",{});var X_t=n(qbe);jvr=r(X_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X_t.forEach(t),Dvr=i(ii),Hc=s(ii,"P",{});var UW=n(Hc);Nvr=r(UW,`Note:
Loading a model from its configuration file does `),Obe=s(UW,"STRONG",{});var V_t=n(Obe);qvr=r(V_t,"not"),V_t.forEach(t),Ovr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=s(UW,"CODE",{});var z_t=n(Gbe);Gvr=r(z_t,"from_pretrained()"),z_t.forEach(t),Xvr=r(UW,"to load the model weights."),UW.forEach(t),Vvr=i(ii),Xbe=s(ii,"P",{});var W_t=n(Xbe);zvr=r(W_t,"Examples:"),W_t.forEach(t),Wvr=i(ii),f(nL.$$.fragment,ii),ii.forEach(t),Qvr=i(li),yo=s(li,"DIV",{class:!0});var wa=n(yo);f(lL.$$.fragment,wa),Hvr=i(wa),Vbe=s(wa,"P",{});var Q_t=n(Vbe);Uvr=r(Q_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Q_t.forEach(t),Jvr=i(wa),ws=s(wa,"P",{});var j5=n(ws);Yvr=r(j5,"The model class to instantiate is selected based on the "),zbe=s(j5,"CODE",{});var H_t=n(zbe);Kvr=r(H_t,"model_type"),H_t.forEach(t),Zvr=r(j5,` property of the config object (either
passed as an argument or loaded from `),Wbe=s(j5,"CODE",{});var U_t=n(Wbe);eTr=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),oTr=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=s(j5,"CODE",{});var J_t=n(Qbe);rTr=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),tTr=r(j5,":"),j5.forEach(t),aTr=i(wa),Hbe=s(wa,"UL",{});var Y_t=n(Hbe);V4=s(Y_t,"LI",{});var A9e=n(V4);Ube=s(A9e,"STRONG",{});var K_t=n(Ube);sTr=r(K_t,"vision-encoder-decoder"),K_t.forEach(t),nTr=r(A9e," \u2014 "),$X=s(A9e,"A",{href:!0});var Z_t=n($X);lTr=r(Z_t,"TFVisionEncoderDecoderModel"),Z_t.forEach(t),iTr=r(A9e," (Vision Encoder decoder model)"),A9e.forEach(t),Y_t.forEach(t),dTr=i(wa),Jbe=s(wa,"P",{});var ebt=n(Jbe);cTr=r(ebt,"Examples:"),ebt.forEach(t),mTr=i(wa),f(iL.$$.fragment,wa),wa.forEach(t),li.forEach(t),Yke=i(c),Uc=s(c,"H2",{class:!0});var dPe=n(Uc);z4=s(dPe,"A",{id:!0,class:!0,href:!0});var obt=n(z4);Ybe=s(obt,"SPAN",{});var rbt=n(Ybe);f(dL.$$.fragment,rbt),rbt.forEach(t),obt.forEach(t),fTr=i(dPe),Kbe=s(dPe,"SPAN",{});var tbt=n(Kbe);gTr=r(tbt,"TFAutoModelForSpeechSeq2Seq"),tbt.forEach(t),dPe.forEach(t),Kke=i(c),kr=s(c,"DIV",{class:!0});var di=n(kr);f(cL.$$.fragment,di),hTr=i(di),Jc=s(di,"P",{});var JW=n(Jc);uTr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Zbe=s(JW,"CODE",{});var abt=n(Zbe);pTr=r(abt,"from_pretrained()"),abt.forEach(t),_Tr=r(JW,"class method or the "),e2e=s(JW,"CODE",{});var sbt=n(e2e);bTr=r(sbt,"from_config()"),sbt.forEach(t),vTr=r(JW,`class
method.`),JW.forEach(t),TTr=i(di),mL=s(di,"P",{});var cPe=n(mL);FTr=r(cPe,"This class cannot be instantiated directly using "),o2e=s(cPe,"CODE",{});var nbt=n(o2e);CTr=r(nbt,"__init__()"),nbt.forEach(t),MTr=r(cPe," (throws an error)."),cPe.forEach(t),ETr=i(di),yt=s(di,"DIV",{class:!0});var ci=n(yt);f(fL.$$.fragment,ci),yTr=i(ci),r2e=s(ci,"P",{});var lbt=n(r2e);wTr=r(lbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lbt.forEach(t),ATr=i(ci),Yc=s(ci,"P",{});var YW=n(Yc);LTr=r(YW,`Note:
Loading a model from its configuration file does `),t2e=s(YW,"STRONG",{});var ibt=n(t2e);BTr=r(ibt,"not"),ibt.forEach(t),xTr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=s(YW,"CODE",{});var dbt=n(a2e);kTr=r(dbt,"from_pretrained()"),dbt.forEach(t),RTr=r(YW,"to load the model weights."),YW.forEach(t),STr=i(ci),s2e=s(ci,"P",{});var cbt=n(s2e);PTr=r(cbt,"Examples:"),cbt.forEach(t),$Tr=i(ci),f(gL.$$.fragment,ci),ci.forEach(t),ITr=i(di),wo=s(di,"DIV",{class:!0});var Aa=n(wo);f(hL.$$.fragment,Aa),jTr=i(Aa),n2e=s(Aa,"P",{});var mbt=n(n2e);DTr=r(mbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mbt.forEach(t),NTr=i(Aa),As=s(Aa,"P",{});var D5=n(As);qTr=r(D5,"The model class to instantiate is selected based on the "),l2e=s(D5,"CODE",{});var fbt=n(l2e);OTr=r(fbt,"model_type"),fbt.forEach(t),GTr=r(D5,` property of the config object (either
passed as an argument or loaded from `),i2e=s(D5,"CODE",{});var gbt=n(i2e);XTr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),VTr=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=s(D5,"CODE",{});var hbt=n(d2e);zTr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),WTr=r(D5,":"),D5.forEach(t),QTr=i(Aa),c2e=s(Aa,"UL",{});var ubt=n(c2e);W4=s(ubt,"LI",{});var L9e=n(W4);m2e=s(L9e,"STRONG",{});var pbt=n(m2e);HTr=r(pbt,"speech_to_text"),pbt.forEach(t),UTr=r(L9e," \u2014 "),IX=s(L9e,"A",{href:!0});var _bt=n(IX);JTr=r(_bt,"TFSpeech2TextForConditionalGeneration"),_bt.forEach(t),YTr=r(L9e," (Speech2Text model)"),L9e.forEach(t),ubt.forEach(t),KTr=i(Aa),f2e=s(Aa,"P",{});var bbt=n(f2e);ZTr=r(bbt,"Examples:"),bbt.forEach(t),e1r=i(Aa),f(uL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),Zke=i(c),Kc=s(c,"H2",{class:!0});var mPe=n(Kc);Q4=s(mPe,"A",{id:!0,class:!0,href:!0});var vbt=n(Q4);g2e=s(vbt,"SPAN",{});var Tbt=n(g2e);f(pL.$$.fragment,Tbt),Tbt.forEach(t),vbt.forEach(t),o1r=i(mPe),h2e=s(mPe,"SPAN",{});var Fbt=n(h2e);r1r=r(Fbt,"FlaxAutoModel"),Fbt.forEach(t),mPe.forEach(t),eRe=i(c),Rr=s(c,"DIV",{class:!0});var mi=n(Rr);f(_L.$$.fragment,mi),t1r=i(mi),Zc=s(mi,"P",{});var KW=n(Zc);a1r=r(KW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),u2e=s(KW,"CODE",{});var Cbt=n(u2e);s1r=r(Cbt,"from_pretrained()"),Cbt.forEach(t),n1r=r(KW,"class method or the "),p2e=s(KW,"CODE",{});var Mbt=n(p2e);l1r=r(Mbt,"from_config()"),Mbt.forEach(t),i1r=r(KW,`class
method.`),KW.forEach(t),d1r=i(mi),bL=s(mi,"P",{});var fPe=n(bL);c1r=r(fPe,"This class cannot be instantiated directly using "),_2e=s(fPe,"CODE",{});var Ebt=n(_2e);m1r=r(Ebt,"__init__()"),Ebt.forEach(t),f1r=r(fPe," (throws an error)."),fPe.forEach(t),g1r=i(mi),wt=s(mi,"DIV",{class:!0});var fi=n(wt);f(vL.$$.fragment,fi),h1r=i(fi),b2e=s(fi,"P",{});var ybt=n(b2e);u1r=r(ybt,"Instantiates one of the base model classes of the library from a configuration."),ybt.forEach(t),p1r=i(fi),em=s(fi,"P",{});var ZW=n(em);_1r=r(ZW,`Note:
Loading a model from its configuration file does `),v2e=s(ZW,"STRONG",{});var wbt=n(v2e);b1r=r(wbt,"not"),wbt.forEach(t),v1r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=s(ZW,"CODE",{});var Abt=n(T2e);T1r=r(Abt,"from_pretrained()"),Abt.forEach(t),F1r=r(ZW,"to load the model weights."),ZW.forEach(t),C1r=i(fi),F2e=s(fi,"P",{});var Lbt=n(F2e);M1r=r(Lbt,"Examples:"),Lbt.forEach(t),E1r=i(fi),f(TL.$$.fragment,fi),fi.forEach(t),y1r=i(mi),Ao=s(mi,"DIV",{class:!0});var La=n(Ao);f(FL.$$.fragment,La),w1r=i(La),C2e=s(La,"P",{});var Bbt=n(C2e);A1r=r(Bbt,"Instantiate one of the base model classes of the library from a pretrained model."),Bbt.forEach(t),L1r=i(La),Ls=s(La,"P",{});var N5=n(Ls);B1r=r(N5,"The model class to instantiate is selected based on the "),M2e=s(N5,"CODE",{});var xbt=n(M2e);x1r=r(xbt,"model_type"),xbt.forEach(t),k1r=r(N5,` property of the config object (either
passed as an argument or loaded from `),E2e=s(N5,"CODE",{});var kbt=n(E2e);R1r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),S1r=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=s(N5,"CODE",{});var Rbt=n(y2e);P1r=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),$1r=r(N5,":"),N5.forEach(t),I1r=i(La),z=s(La,"UL",{});var Q=n(z);H4=s(Q,"LI",{});var B9e=n(H4);w2e=s(B9e,"STRONG",{});var Sbt=n(w2e);j1r=r(Sbt,"albert"),Sbt.forEach(t),D1r=r(B9e," \u2014 "),jX=s(B9e,"A",{href:!0});var Pbt=n(jX);N1r=r(Pbt,"FlaxAlbertModel"),Pbt.forEach(t),q1r=r(B9e," (ALBERT model)"),B9e.forEach(t),O1r=i(Q),U4=s(Q,"LI",{});var x9e=n(U4);A2e=s(x9e,"STRONG",{});var $bt=n(A2e);G1r=r($bt,"bart"),$bt.forEach(t),X1r=r(x9e," \u2014 "),DX=s(x9e,"A",{href:!0});var Ibt=n(DX);V1r=r(Ibt,"FlaxBartModel"),Ibt.forEach(t),z1r=r(x9e," (BART model)"),x9e.forEach(t),W1r=i(Q),J4=s(Q,"LI",{});var k9e=n(J4);L2e=s(k9e,"STRONG",{});var jbt=n(L2e);Q1r=r(jbt,"beit"),jbt.forEach(t),H1r=r(k9e," \u2014 "),NX=s(k9e,"A",{href:!0});var Dbt=n(NX);U1r=r(Dbt,"FlaxBeitModel"),Dbt.forEach(t),J1r=r(k9e," (BEiT model)"),k9e.forEach(t),Y1r=i(Q),Y4=s(Q,"LI",{});var R9e=n(Y4);B2e=s(R9e,"STRONG",{});var Nbt=n(B2e);K1r=r(Nbt,"bert"),Nbt.forEach(t),Z1r=r(R9e," \u2014 "),qX=s(R9e,"A",{href:!0});var qbt=n(qX);eFr=r(qbt,"FlaxBertModel"),qbt.forEach(t),oFr=r(R9e," (BERT model)"),R9e.forEach(t),rFr=i(Q),K4=s(Q,"LI",{});var S9e=n(K4);x2e=s(S9e,"STRONG",{});var Obt=n(x2e);tFr=r(Obt,"big_bird"),Obt.forEach(t),aFr=r(S9e," \u2014 "),OX=s(S9e,"A",{href:!0});var Gbt=n(OX);sFr=r(Gbt,"FlaxBigBirdModel"),Gbt.forEach(t),nFr=r(S9e," (BigBird model)"),S9e.forEach(t),lFr=i(Q),Z4=s(Q,"LI",{});var P9e=n(Z4);k2e=s(P9e,"STRONG",{});var Xbt=n(k2e);iFr=r(Xbt,"blenderbot"),Xbt.forEach(t),dFr=r(P9e," \u2014 "),GX=s(P9e,"A",{href:!0});var Vbt=n(GX);cFr=r(Vbt,"FlaxBlenderbotModel"),Vbt.forEach(t),mFr=r(P9e," (Blenderbot model)"),P9e.forEach(t),fFr=i(Q),eE=s(Q,"LI",{});var $9e=n(eE);R2e=s($9e,"STRONG",{});var zbt=n(R2e);gFr=r(zbt,"blenderbot-small"),zbt.forEach(t),hFr=r($9e," \u2014 "),XX=s($9e,"A",{href:!0});var Wbt=n(XX);uFr=r(Wbt,"FlaxBlenderbotSmallModel"),Wbt.forEach(t),pFr=r($9e," (BlenderbotSmall model)"),$9e.forEach(t),_Fr=i(Q),oE=s(Q,"LI",{});var I9e=n(oE);S2e=s(I9e,"STRONG",{});var Qbt=n(S2e);bFr=r(Qbt,"clip"),Qbt.forEach(t),vFr=r(I9e," \u2014 "),VX=s(I9e,"A",{href:!0});var Hbt=n(VX);TFr=r(Hbt,"FlaxCLIPModel"),Hbt.forEach(t),FFr=r(I9e," (CLIP model)"),I9e.forEach(t),CFr=i(Q),rE=s(Q,"LI",{});var j9e=n(rE);P2e=s(j9e,"STRONG",{});var Ubt=n(P2e);MFr=r(Ubt,"distilbert"),Ubt.forEach(t),EFr=r(j9e," \u2014 "),zX=s(j9e,"A",{href:!0});var Jbt=n(zX);yFr=r(Jbt,"FlaxDistilBertModel"),Jbt.forEach(t),wFr=r(j9e," (DistilBERT model)"),j9e.forEach(t),AFr=i(Q),tE=s(Q,"LI",{});var D9e=n(tE);$2e=s(D9e,"STRONG",{});var Ybt=n($2e);LFr=r(Ybt,"electra"),Ybt.forEach(t),BFr=r(D9e," \u2014 "),WX=s(D9e,"A",{href:!0});var Kbt=n(WX);xFr=r(Kbt,"FlaxElectraModel"),Kbt.forEach(t),kFr=r(D9e," (ELECTRA model)"),D9e.forEach(t),RFr=i(Q),aE=s(Q,"LI",{});var N9e=n(aE);I2e=s(N9e,"STRONG",{});var Zbt=n(I2e);SFr=r(Zbt,"gpt2"),Zbt.forEach(t),PFr=r(N9e," \u2014 "),QX=s(N9e,"A",{href:!0});var e2t=n(QX);$Fr=r(e2t,"FlaxGPT2Model"),e2t.forEach(t),IFr=r(N9e," (OpenAI GPT-2 model)"),N9e.forEach(t),jFr=i(Q),sE=s(Q,"LI",{});var q9e=n(sE);j2e=s(q9e,"STRONG",{});var o2t=n(j2e);DFr=r(o2t,"gpt_neo"),o2t.forEach(t),NFr=r(q9e," \u2014 "),HX=s(q9e,"A",{href:!0});var r2t=n(HX);qFr=r(r2t,"FlaxGPTNeoModel"),r2t.forEach(t),OFr=r(q9e," (GPT Neo model)"),q9e.forEach(t),GFr=i(Q),nE=s(Q,"LI",{});var O9e=n(nE);D2e=s(O9e,"STRONG",{});var t2t=n(D2e);XFr=r(t2t,"gptj"),t2t.forEach(t),VFr=r(O9e," \u2014 "),UX=s(O9e,"A",{href:!0});var a2t=n(UX);zFr=r(a2t,"FlaxGPTJModel"),a2t.forEach(t),WFr=r(O9e," (GPT-J model)"),O9e.forEach(t),QFr=i(Q),lE=s(Q,"LI",{});var G9e=n(lE);N2e=s(G9e,"STRONG",{});var s2t=n(N2e);HFr=r(s2t,"marian"),s2t.forEach(t),UFr=r(G9e," \u2014 "),JX=s(G9e,"A",{href:!0});var n2t=n(JX);JFr=r(n2t,"FlaxMarianModel"),n2t.forEach(t),YFr=r(G9e," (Marian model)"),G9e.forEach(t),KFr=i(Q),iE=s(Q,"LI",{});var X9e=n(iE);q2e=s(X9e,"STRONG",{});var l2t=n(q2e);ZFr=r(l2t,"mbart"),l2t.forEach(t),eCr=r(X9e," \u2014 "),YX=s(X9e,"A",{href:!0});var i2t=n(YX);oCr=r(i2t,"FlaxMBartModel"),i2t.forEach(t),rCr=r(X9e," (mBART model)"),X9e.forEach(t),tCr=i(Q),dE=s(Q,"LI",{});var V9e=n(dE);O2e=s(V9e,"STRONG",{});var d2t=n(O2e);aCr=r(d2t,"mt5"),d2t.forEach(t),sCr=r(V9e," \u2014 "),KX=s(V9e,"A",{href:!0});var c2t=n(KX);nCr=r(c2t,"FlaxMT5Model"),c2t.forEach(t),lCr=r(V9e," (mT5 model)"),V9e.forEach(t),iCr=i(Q),cE=s(Q,"LI",{});var z9e=n(cE);G2e=s(z9e,"STRONG",{});var m2t=n(G2e);dCr=r(m2t,"pegasus"),m2t.forEach(t),cCr=r(z9e," \u2014 "),ZX=s(z9e,"A",{href:!0});var f2t=n(ZX);mCr=r(f2t,"FlaxPegasusModel"),f2t.forEach(t),fCr=r(z9e," (Pegasus model)"),z9e.forEach(t),gCr=i(Q),mE=s(Q,"LI",{});var W9e=n(mE);X2e=s(W9e,"STRONG",{});var g2t=n(X2e);hCr=r(g2t,"roberta"),g2t.forEach(t),uCr=r(W9e," \u2014 "),eV=s(W9e,"A",{href:!0});var h2t=n(eV);pCr=r(h2t,"FlaxRobertaModel"),h2t.forEach(t),_Cr=r(W9e," (RoBERTa model)"),W9e.forEach(t),bCr=i(Q),fE=s(Q,"LI",{});var Q9e=n(fE);V2e=s(Q9e,"STRONG",{});var u2t=n(V2e);vCr=r(u2t,"roformer"),u2t.forEach(t),TCr=r(Q9e," \u2014 "),oV=s(Q9e,"A",{href:!0});var p2t=n(oV);FCr=r(p2t,"FlaxRoFormerModel"),p2t.forEach(t),CCr=r(Q9e," (RoFormer model)"),Q9e.forEach(t),MCr=i(Q),gE=s(Q,"LI",{});var H9e=n(gE);z2e=s(H9e,"STRONG",{});var _2t=n(z2e);ECr=r(_2t,"t5"),_2t.forEach(t),yCr=r(H9e," \u2014 "),rV=s(H9e,"A",{href:!0});var b2t=n(rV);wCr=r(b2t,"FlaxT5Model"),b2t.forEach(t),ACr=r(H9e," (T5 model)"),H9e.forEach(t),LCr=i(Q),hE=s(Q,"LI",{});var U9e=n(hE);W2e=s(U9e,"STRONG",{});var v2t=n(W2e);BCr=r(v2t,"vision-text-dual-encoder"),v2t.forEach(t),xCr=r(U9e," \u2014 "),tV=s(U9e,"A",{href:!0});var T2t=n(tV);kCr=r(T2t,"FlaxVisionTextDualEncoderModel"),T2t.forEach(t),RCr=r(U9e," (VisionTextDualEncoder model)"),U9e.forEach(t),SCr=i(Q),uE=s(Q,"LI",{});var J9e=n(uE);Q2e=s(J9e,"STRONG",{});var F2t=n(Q2e);PCr=r(F2t,"vit"),F2t.forEach(t),$Cr=r(J9e," \u2014 "),aV=s(J9e,"A",{href:!0});var C2t=n(aV);ICr=r(C2t,"FlaxViTModel"),C2t.forEach(t),jCr=r(J9e," (ViT model)"),J9e.forEach(t),DCr=i(Q),pE=s(Q,"LI",{});var Y9e=n(pE);H2e=s(Y9e,"STRONG",{});var M2t=n(H2e);NCr=r(M2t,"wav2vec2"),M2t.forEach(t),qCr=r(Y9e," \u2014 "),sV=s(Y9e,"A",{href:!0});var E2t=n(sV);OCr=r(E2t,"FlaxWav2Vec2Model"),E2t.forEach(t),GCr=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),XCr=i(Q),_E=s(Q,"LI",{});var K9e=n(_E);U2e=s(K9e,"STRONG",{});var y2t=n(U2e);VCr=r(y2t,"xglm"),y2t.forEach(t),zCr=r(K9e," \u2014 "),nV=s(K9e,"A",{href:!0});var w2t=n(nV);WCr=r(w2t,"FlaxXGLMModel"),w2t.forEach(t),QCr=r(K9e," (XGLM model)"),K9e.forEach(t),HCr=i(Q),bE=s(Q,"LI",{});var Z9e=n(bE);J2e=s(Z9e,"STRONG",{});var A2t=n(J2e);UCr=r(A2t,"xlm-roberta"),A2t.forEach(t),JCr=r(Z9e," \u2014 "),lV=s(Z9e,"A",{href:!0});var L2t=n(lV);YCr=r(L2t,"FlaxXLMRobertaModel"),L2t.forEach(t),KCr=r(Z9e," (XLM-RoBERTa model)"),Z9e.forEach(t),Q.forEach(t),ZCr=i(La),Y2e=s(La,"P",{});var B2t=n(Y2e);eMr=r(B2t,"Examples:"),B2t.forEach(t),oMr=i(La),f(CL.$$.fragment,La),La.forEach(t),mi.forEach(t),oRe=i(c),om=s(c,"H2",{class:!0});var gPe=n(om);vE=s(gPe,"A",{id:!0,class:!0,href:!0});var x2t=n(vE);K2e=s(x2t,"SPAN",{});var k2t=n(K2e);f(ML.$$.fragment,k2t),k2t.forEach(t),x2t.forEach(t),rMr=i(gPe),Z2e=s(gPe,"SPAN",{});var R2t=n(Z2e);tMr=r(R2t,"FlaxAutoModelForCausalLM"),R2t.forEach(t),gPe.forEach(t),rRe=i(c),Sr=s(c,"DIV",{class:!0});var gi=n(Sr);f(EL.$$.fragment,gi),aMr=i(gi),rm=s(gi,"P",{});var eQ=n(rm);sMr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eve=s(eQ,"CODE",{});var S2t=n(eve);nMr=r(S2t,"from_pretrained()"),S2t.forEach(t),lMr=r(eQ,"class method or the "),ove=s(eQ,"CODE",{});var P2t=n(ove);iMr=r(P2t,"from_config()"),P2t.forEach(t),dMr=r(eQ,`class
method.`),eQ.forEach(t),cMr=i(gi),yL=s(gi,"P",{});var hPe=n(yL);mMr=r(hPe,"This class cannot be instantiated directly using "),rve=s(hPe,"CODE",{});var $2t=n(rve);fMr=r($2t,"__init__()"),$2t.forEach(t),gMr=r(hPe," (throws an error)."),hPe.forEach(t),hMr=i(gi),At=s(gi,"DIV",{class:!0});var hi=n(At);f(wL.$$.fragment,hi),uMr=i(hi),tve=s(hi,"P",{});var I2t=n(tve);pMr=r(I2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I2t.forEach(t),_Mr=i(hi),tm=s(hi,"P",{});var oQ=n(tm);bMr=r(oQ,`Note:
Loading a model from its configuration file does `),ave=s(oQ,"STRONG",{});var j2t=n(ave);vMr=r(j2t,"not"),j2t.forEach(t),TMr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sve=s(oQ,"CODE",{});var D2t=n(sve);FMr=r(D2t,"from_pretrained()"),D2t.forEach(t),CMr=r(oQ,"to load the model weights."),oQ.forEach(t),MMr=i(hi),nve=s(hi,"P",{});var N2t=n(nve);EMr=r(N2t,"Examples:"),N2t.forEach(t),yMr=i(hi),f(AL.$$.fragment,hi),hi.forEach(t),wMr=i(gi),Lo=s(gi,"DIV",{class:!0});var Ba=n(Lo);f(LL.$$.fragment,Ba),AMr=i(Ba),lve=s(Ba,"P",{});var q2t=n(lve);LMr=r(q2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q2t.forEach(t),BMr=i(Ba),Bs=s(Ba,"P",{});var q5=n(Bs);xMr=r(q5,"The model class to instantiate is selected based on the "),ive=s(q5,"CODE",{});var O2t=n(ive);kMr=r(O2t,"model_type"),O2t.forEach(t),RMr=r(q5,` property of the config object (either
passed as an argument or loaded from `),dve=s(q5,"CODE",{});var G2t=n(dve);SMr=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),PMr=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=s(q5,"CODE",{});var X2t=n(cve);$Mr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),IMr=r(q5,":"),q5.forEach(t),jMr=i(Ba),ca=s(Ba,"UL",{});var ui=n(ca);TE=s(ui,"LI",{});var eBe=n(TE);mve=s(eBe,"STRONG",{});var V2t=n(mve);DMr=r(V2t,"bart"),V2t.forEach(t),NMr=r(eBe," \u2014 "),iV=s(eBe,"A",{href:!0});var z2t=n(iV);qMr=r(z2t,"FlaxBartForCausalLM"),z2t.forEach(t),OMr=r(eBe," (BART model)"),eBe.forEach(t),GMr=i(ui),FE=s(ui,"LI",{});var oBe=n(FE);fve=s(oBe,"STRONG",{});var W2t=n(fve);XMr=r(W2t,"gpt2"),W2t.forEach(t),VMr=r(oBe," \u2014 "),dV=s(oBe,"A",{href:!0});var Q2t=n(dV);zMr=r(Q2t,"FlaxGPT2LMHeadModel"),Q2t.forEach(t),WMr=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),QMr=i(ui),CE=s(ui,"LI",{});var rBe=n(CE);gve=s(rBe,"STRONG",{});var H2t=n(gve);HMr=r(H2t,"gpt_neo"),H2t.forEach(t),UMr=r(rBe," \u2014 "),cV=s(rBe,"A",{href:!0});var U2t=n(cV);JMr=r(U2t,"FlaxGPTNeoForCausalLM"),U2t.forEach(t),YMr=r(rBe," (GPT Neo model)"),rBe.forEach(t),KMr=i(ui),ME=s(ui,"LI",{});var tBe=n(ME);hve=s(tBe,"STRONG",{});var J2t=n(hve);ZMr=r(J2t,"gptj"),J2t.forEach(t),e4r=r(tBe," \u2014 "),mV=s(tBe,"A",{href:!0});var Y2t=n(mV);o4r=r(Y2t,"FlaxGPTJForCausalLM"),Y2t.forEach(t),r4r=r(tBe," (GPT-J model)"),tBe.forEach(t),t4r=i(ui),EE=s(ui,"LI",{});var aBe=n(EE);uve=s(aBe,"STRONG",{});var K2t=n(uve);a4r=r(K2t,"xglm"),K2t.forEach(t),s4r=r(aBe," \u2014 "),fV=s(aBe,"A",{href:!0});var Z2t=n(fV);n4r=r(Z2t,"FlaxXGLMForCausalLM"),Z2t.forEach(t),l4r=r(aBe," (XGLM model)"),aBe.forEach(t),ui.forEach(t),i4r=i(Ba),pve=s(Ba,"P",{});var evt=n(pve);d4r=r(evt,"Examples:"),evt.forEach(t),c4r=i(Ba),f(BL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),tRe=i(c),am=s(c,"H2",{class:!0});var uPe=n(am);yE=s(uPe,"A",{id:!0,class:!0,href:!0});var ovt=n(yE);_ve=s(ovt,"SPAN",{});var rvt=n(_ve);f(xL.$$.fragment,rvt),rvt.forEach(t),ovt.forEach(t),m4r=i(uPe),bve=s(uPe,"SPAN",{});var tvt=n(bve);f4r=r(tvt,"FlaxAutoModelForPreTraining"),tvt.forEach(t),uPe.forEach(t),aRe=i(c),Pr=s(c,"DIV",{class:!0});var pi=n(Pr);f(kL.$$.fragment,pi),g4r=i(pi),sm=s(pi,"P",{});var rQ=n(sm);h4r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vve=s(rQ,"CODE",{});var avt=n(vve);u4r=r(avt,"from_pretrained()"),avt.forEach(t),p4r=r(rQ,"class method or the "),Tve=s(rQ,"CODE",{});var svt=n(Tve);_4r=r(svt,"from_config()"),svt.forEach(t),b4r=r(rQ,`class
method.`),rQ.forEach(t),v4r=i(pi),RL=s(pi,"P",{});var pPe=n(RL);T4r=r(pPe,"This class cannot be instantiated directly using "),Fve=s(pPe,"CODE",{});var nvt=n(Fve);F4r=r(nvt,"__init__()"),nvt.forEach(t),C4r=r(pPe," (throws an error)."),pPe.forEach(t),M4r=i(pi),Lt=s(pi,"DIV",{class:!0});var _i=n(Lt);f(SL.$$.fragment,_i),E4r=i(_i),Cve=s(_i,"P",{});var lvt=n(Cve);y4r=r(lvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lvt.forEach(t),w4r=i(_i),nm=s(_i,"P",{});var tQ=n(nm);A4r=r(tQ,`Note:
Loading a model from its configuration file does `),Mve=s(tQ,"STRONG",{});var ivt=n(Mve);L4r=r(ivt,"not"),ivt.forEach(t),B4r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=s(tQ,"CODE",{});var dvt=n(Eve);x4r=r(dvt,"from_pretrained()"),dvt.forEach(t),k4r=r(tQ,"to load the model weights."),tQ.forEach(t),R4r=i(_i),yve=s(_i,"P",{});var cvt=n(yve);S4r=r(cvt,"Examples:"),cvt.forEach(t),P4r=i(_i),f(PL.$$.fragment,_i),_i.forEach(t),$4r=i(pi),Bo=s(pi,"DIV",{class:!0});var xa=n(Bo);f($L.$$.fragment,xa),I4r=i(xa),wve=s(xa,"P",{});var mvt=n(wve);j4r=r(mvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mvt.forEach(t),D4r=i(xa),xs=s(xa,"P",{});var O5=n(xs);N4r=r(O5,"The model class to instantiate is selected based on the "),Ave=s(O5,"CODE",{});var fvt=n(Ave);q4r=r(fvt,"model_type"),fvt.forEach(t),O4r=r(O5,` property of the config object (either
passed as an argument or loaded from `),Lve=s(O5,"CODE",{});var gvt=n(Lve);G4r=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),X4r=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=s(O5,"CODE",{});var hvt=n(Bve);V4r=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),z4r=r(O5,":"),O5.forEach(t),W4r=i(xa),ce=s(xa,"UL",{});var ge=n(ce);wE=s(ge,"LI",{});var sBe=n(wE);xve=s(sBe,"STRONG",{});var uvt=n(xve);Q4r=r(uvt,"albert"),uvt.forEach(t),H4r=r(sBe," \u2014 "),gV=s(sBe,"A",{href:!0});var pvt=n(gV);U4r=r(pvt,"FlaxAlbertForPreTraining"),pvt.forEach(t),J4r=r(sBe," (ALBERT model)"),sBe.forEach(t),Y4r=i(ge),AE=s(ge,"LI",{});var nBe=n(AE);kve=s(nBe,"STRONG",{});var _vt=n(kve);K4r=r(_vt,"bart"),_vt.forEach(t),Z4r=r(nBe," \u2014 "),hV=s(nBe,"A",{href:!0});var bvt=n(hV);eEr=r(bvt,"FlaxBartForConditionalGeneration"),bvt.forEach(t),oEr=r(nBe," (BART model)"),nBe.forEach(t),rEr=i(ge),LE=s(ge,"LI",{});var lBe=n(LE);Rve=s(lBe,"STRONG",{});var vvt=n(Rve);tEr=r(vvt,"bert"),vvt.forEach(t),aEr=r(lBe," \u2014 "),uV=s(lBe,"A",{href:!0});var Tvt=n(uV);sEr=r(Tvt,"FlaxBertForPreTraining"),Tvt.forEach(t),nEr=r(lBe," (BERT model)"),lBe.forEach(t),lEr=i(ge),BE=s(ge,"LI",{});var iBe=n(BE);Sve=s(iBe,"STRONG",{});var Fvt=n(Sve);iEr=r(Fvt,"big_bird"),Fvt.forEach(t),dEr=r(iBe," \u2014 "),pV=s(iBe,"A",{href:!0});var Cvt=n(pV);cEr=r(Cvt,"FlaxBigBirdForPreTraining"),Cvt.forEach(t),mEr=r(iBe," (BigBird model)"),iBe.forEach(t),fEr=i(ge),xE=s(ge,"LI",{});var dBe=n(xE);Pve=s(dBe,"STRONG",{});var Mvt=n(Pve);gEr=r(Mvt,"electra"),Mvt.forEach(t),hEr=r(dBe," \u2014 "),_V=s(dBe,"A",{href:!0});var Evt=n(_V);uEr=r(Evt,"FlaxElectraForPreTraining"),Evt.forEach(t),pEr=r(dBe," (ELECTRA model)"),dBe.forEach(t),_Er=i(ge),kE=s(ge,"LI",{});var cBe=n(kE);$ve=s(cBe,"STRONG",{});var yvt=n($ve);bEr=r(yvt,"mbart"),yvt.forEach(t),vEr=r(cBe," \u2014 "),bV=s(cBe,"A",{href:!0});var wvt=n(bV);TEr=r(wvt,"FlaxMBartForConditionalGeneration"),wvt.forEach(t),FEr=r(cBe," (mBART model)"),cBe.forEach(t),CEr=i(ge),RE=s(ge,"LI",{});var mBe=n(RE);Ive=s(mBe,"STRONG",{});var Avt=n(Ive);MEr=r(Avt,"mt5"),Avt.forEach(t),EEr=r(mBe," \u2014 "),vV=s(mBe,"A",{href:!0});var Lvt=n(vV);yEr=r(Lvt,"FlaxMT5ForConditionalGeneration"),Lvt.forEach(t),wEr=r(mBe," (mT5 model)"),mBe.forEach(t),AEr=i(ge),SE=s(ge,"LI",{});var fBe=n(SE);jve=s(fBe,"STRONG",{});var Bvt=n(jve);LEr=r(Bvt,"roberta"),Bvt.forEach(t),BEr=r(fBe," \u2014 "),TV=s(fBe,"A",{href:!0});var xvt=n(TV);xEr=r(xvt,"FlaxRobertaForMaskedLM"),xvt.forEach(t),kEr=r(fBe," (RoBERTa model)"),fBe.forEach(t),REr=i(ge),PE=s(ge,"LI",{});var gBe=n(PE);Dve=s(gBe,"STRONG",{});var kvt=n(Dve);SEr=r(kvt,"roformer"),kvt.forEach(t),PEr=r(gBe," \u2014 "),FV=s(gBe,"A",{href:!0});var Rvt=n(FV);$Er=r(Rvt,"FlaxRoFormerForMaskedLM"),Rvt.forEach(t),IEr=r(gBe," (RoFormer model)"),gBe.forEach(t),jEr=i(ge),$E=s(ge,"LI",{});var hBe=n($E);Nve=s(hBe,"STRONG",{});var Svt=n(Nve);DEr=r(Svt,"t5"),Svt.forEach(t),NEr=r(hBe," \u2014 "),CV=s(hBe,"A",{href:!0});var Pvt=n(CV);qEr=r(Pvt,"FlaxT5ForConditionalGeneration"),Pvt.forEach(t),OEr=r(hBe," (T5 model)"),hBe.forEach(t),GEr=i(ge),IE=s(ge,"LI",{});var uBe=n(IE);qve=s(uBe,"STRONG",{});var $vt=n(qve);XEr=r($vt,"wav2vec2"),$vt.forEach(t),VEr=r(uBe," \u2014 "),MV=s(uBe,"A",{href:!0});var Ivt=n(MV);zEr=r(Ivt,"FlaxWav2Vec2ForPreTraining"),Ivt.forEach(t),WEr=r(uBe," (Wav2Vec2 model)"),uBe.forEach(t),QEr=i(ge),jE=s(ge,"LI",{});var pBe=n(jE);Ove=s(pBe,"STRONG",{});var jvt=n(Ove);HEr=r(jvt,"xlm-roberta"),jvt.forEach(t),UEr=r(pBe," \u2014 "),EV=s(pBe,"A",{href:!0});var Dvt=n(EV);JEr=r(Dvt,"FlaxXLMRobertaForMaskedLM"),Dvt.forEach(t),YEr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),ge.forEach(t),KEr=i(xa),Gve=s(xa,"P",{});var Nvt=n(Gve);ZEr=r(Nvt,"Examples:"),Nvt.forEach(t),e3r=i(xa),f(IL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),sRe=i(c),lm=s(c,"H2",{class:!0});var _Pe=n(lm);DE=s(_Pe,"A",{id:!0,class:!0,href:!0});var qvt=n(DE);Xve=s(qvt,"SPAN",{});var Ovt=n(Xve);f(jL.$$.fragment,Ovt),Ovt.forEach(t),qvt.forEach(t),o3r=i(_Pe),Vve=s(_Pe,"SPAN",{});var Gvt=n(Vve);r3r=r(Gvt,"FlaxAutoModelForMaskedLM"),Gvt.forEach(t),_Pe.forEach(t),nRe=i(c),$r=s(c,"DIV",{class:!0});var bi=n($r);f(DL.$$.fragment,bi),t3r=i(bi),im=s(bi,"P",{});var aQ=n(im);a3r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zve=s(aQ,"CODE",{});var Xvt=n(zve);s3r=r(Xvt,"from_pretrained()"),Xvt.forEach(t),n3r=r(aQ,"class method or the "),Wve=s(aQ,"CODE",{});var Vvt=n(Wve);l3r=r(Vvt,"from_config()"),Vvt.forEach(t),i3r=r(aQ,`class
method.`),aQ.forEach(t),d3r=i(bi),NL=s(bi,"P",{});var bPe=n(NL);c3r=r(bPe,"This class cannot be instantiated directly using "),Qve=s(bPe,"CODE",{});var zvt=n(Qve);m3r=r(zvt,"__init__()"),zvt.forEach(t),f3r=r(bPe," (throws an error)."),bPe.forEach(t),g3r=i(bi),Bt=s(bi,"DIV",{class:!0});var vi=n(Bt);f(qL.$$.fragment,vi),h3r=i(vi),Hve=s(vi,"P",{});var Wvt=n(Hve);u3r=r(Wvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wvt.forEach(t),p3r=i(vi),dm=s(vi,"P",{});var sQ=n(dm);_3r=r(sQ,`Note:
Loading a model from its configuration file does `),Uve=s(sQ,"STRONG",{});var Qvt=n(Uve);b3r=r(Qvt,"not"),Qvt.forEach(t),v3r=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jve=s(sQ,"CODE",{});var Hvt=n(Jve);T3r=r(Hvt,"from_pretrained()"),Hvt.forEach(t),F3r=r(sQ,"to load the model weights."),sQ.forEach(t),C3r=i(vi),Yve=s(vi,"P",{});var Uvt=n(Yve);M3r=r(Uvt,"Examples:"),Uvt.forEach(t),E3r=i(vi),f(OL.$$.fragment,vi),vi.forEach(t),y3r=i(bi),xo=s(bi,"DIV",{class:!0});var ka=n(xo);f(GL.$$.fragment,ka),w3r=i(ka),Kve=s(ka,"P",{});var Jvt=n(Kve);A3r=r(Jvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jvt.forEach(t),L3r=i(ka),ks=s(ka,"P",{});var G5=n(ks);B3r=r(G5,"The model class to instantiate is selected based on the "),Zve=s(G5,"CODE",{});var Yvt=n(Zve);x3r=r(Yvt,"model_type"),Yvt.forEach(t),k3r=r(G5,` property of the config object (either
passed as an argument or loaded from `),eTe=s(G5,"CODE",{});var Kvt=n(eTe);R3r=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),S3r=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=s(G5,"CODE",{});var Zvt=n(oTe);P3r=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),$3r=r(G5,":"),G5.forEach(t),I3r=i(ka),be=s(ka,"UL",{});var we=n(be);NE=s(we,"LI",{});var _Be=n(NE);rTe=s(_Be,"STRONG",{});var eTt=n(rTe);j3r=r(eTt,"albert"),eTt.forEach(t),D3r=r(_Be," \u2014 "),yV=s(_Be,"A",{href:!0});var oTt=n(yV);N3r=r(oTt,"FlaxAlbertForMaskedLM"),oTt.forEach(t),q3r=r(_Be," (ALBERT model)"),_Be.forEach(t),O3r=i(we),qE=s(we,"LI",{});var bBe=n(qE);tTe=s(bBe,"STRONG",{});var rTt=n(tTe);G3r=r(rTt,"bart"),rTt.forEach(t),X3r=r(bBe," \u2014 "),wV=s(bBe,"A",{href:!0});var tTt=n(wV);V3r=r(tTt,"FlaxBartForConditionalGeneration"),tTt.forEach(t),z3r=r(bBe," (BART model)"),bBe.forEach(t),W3r=i(we),OE=s(we,"LI",{});var vBe=n(OE);aTe=s(vBe,"STRONG",{});var aTt=n(aTe);Q3r=r(aTt,"bert"),aTt.forEach(t),H3r=r(vBe," \u2014 "),AV=s(vBe,"A",{href:!0});var sTt=n(AV);U3r=r(sTt,"FlaxBertForMaskedLM"),sTt.forEach(t),J3r=r(vBe," (BERT model)"),vBe.forEach(t),Y3r=i(we),GE=s(we,"LI",{});var TBe=n(GE);sTe=s(TBe,"STRONG",{});var nTt=n(sTe);K3r=r(nTt,"big_bird"),nTt.forEach(t),Z3r=r(TBe," \u2014 "),LV=s(TBe,"A",{href:!0});var lTt=n(LV);e5r=r(lTt,"FlaxBigBirdForMaskedLM"),lTt.forEach(t),o5r=r(TBe," (BigBird model)"),TBe.forEach(t),r5r=i(we),XE=s(we,"LI",{});var FBe=n(XE);nTe=s(FBe,"STRONG",{});var iTt=n(nTe);t5r=r(iTt,"distilbert"),iTt.forEach(t),a5r=r(FBe," \u2014 "),BV=s(FBe,"A",{href:!0});var dTt=n(BV);s5r=r(dTt,"FlaxDistilBertForMaskedLM"),dTt.forEach(t),n5r=r(FBe," (DistilBERT model)"),FBe.forEach(t),l5r=i(we),VE=s(we,"LI",{});var CBe=n(VE);lTe=s(CBe,"STRONG",{});var cTt=n(lTe);i5r=r(cTt,"electra"),cTt.forEach(t),d5r=r(CBe," \u2014 "),xV=s(CBe,"A",{href:!0});var mTt=n(xV);c5r=r(mTt,"FlaxElectraForMaskedLM"),mTt.forEach(t),m5r=r(CBe," (ELECTRA model)"),CBe.forEach(t),f5r=i(we),zE=s(we,"LI",{});var MBe=n(zE);iTe=s(MBe,"STRONG",{});var fTt=n(iTe);g5r=r(fTt,"mbart"),fTt.forEach(t),h5r=r(MBe," \u2014 "),kV=s(MBe,"A",{href:!0});var gTt=n(kV);u5r=r(gTt,"FlaxMBartForConditionalGeneration"),gTt.forEach(t),p5r=r(MBe," (mBART model)"),MBe.forEach(t),_5r=i(we),WE=s(we,"LI",{});var EBe=n(WE);dTe=s(EBe,"STRONG",{});var hTt=n(dTe);b5r=r(hTt,"roberta"),hTt.forEach(t),v5r=r(EBe," \u2014 "),RV=s(EBe,"A",{href:!0});var uTt=n(RV);T5r=r(uTt,"FlaxRobertaForMaskedLM"),uTt.forEach(t),F5r=r(EBe," (RoBERTa model)"),EBe.forEach(t),C5r=i(we),QE=s(we,"LI",{});var yBe=n(QE);cTe=s(yBe,"STRONG",{});var pTt=n(cTe);M5r=r(pTt,"roformer"),pTt.forEach(t),E5r=r(yBe," \u2014 "),SV=s(yBe,"A",{href:!0});var _Tt=n(SV);y5r=r(_Tt,"FlaxRoFormerForMaskedLM"),_Tt.forEach(t),w5r=r(yBe," (RoFormer model)"),yBe.forEach(t),A5r=i(we),HE=s(we,"LI",{});var wBe=n(HE);mTe=s(wBe,"STRONG",{});var bTt=n(mTe);L5r=r(bTt,"xlm-roberta"),bTt.forEach(t),B5r=r(wBe," \u2014 "),PV=s(wBe,"A",{href:!0});var vTt=n(PV);x5r=r(vTt,"FlaxXLMRobertaForMaskedLM"),vTt.forEach(t),k5r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),we.forEach(t),R5r=i(ka),fTe=s(ka,"P",{});var TTt=n(fTe);S5r=r(TTt,"Examples:"),TTt.forEach(t),P5r=i(ka),f(XL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),lRe=i(c),cm=s(c,"H2",{class:!0});var vPe=n(cm);UE=s(vPe,"A",{id:!0,class:!0,href:!0});var FTt=n(UE);gTe=s(FTt,"SPAN",{});var CTt=n(gTe);f(VL.$$.fragment,CTt),CTt.forEach(t),FTt.forEach(t),$5r=i(vPe),hTe=s(vPe,"SPAN",{});var MTt=n(hTe);I5r=r(MTt,"FlaxAutoModelForSeq2SeqLM"),MTt.forEach(t),vPe.forEach(t),iRe=i(c),Ir=s(c,"DIV",{class:!0});var Ti=n(Ir);f(zL.$$.fragment,Ti),j5r=i(Ti),mm=s(Ti,"P",{});var nQ=n(mm);D5r=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uTe=s(nQ,"CODE",{});var ETt=n(uTe);N5r=r(ETt,"from_pretrained()"),ETt.forEach(t),q5r=r(nQ,"class method or the "),pTe=s(nQ,"CODE",{});var yTt=n(pTe);O5r=r(yTt,"from_config()"),yTt.forEach(t),G5r=r(nQ,`class
method.`),nQ.forEach(t),X5r=i(Ti),WL=s(Ti,"P",{});var TPe=n(WL);V5r=r(TPe,"This class cannot be instantiated directly using "),_Te=s(TPe,"CODE",{});var wTt=n(_Te);z5r=r(wTt,"__init__()"),wTt.forEach(t),W5r=r(TPe," (throws an error)."),TPe.forEach(t),Q5r=i(Ti),xt=s(Ti,"DIV",{class:!0});var Fi=n(xt);f(QL.$$.fragment,Fi),H5r=i(Fi),bTe=s(Fi,"P",{});var ATt=n(bTe);U5r=r(ATt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ATt.forEach(t),J5r=i(Fi),fm=s(Fi,"P",{});var lQ=n(fm);Y5r=r(lQ,`Note:
Loading a model from its configuration file does `),vTe=s(lQ,"STRONG",{});var LTt=n(vTe);K5r=r(LTt,"not"),LTt.forEach(t),Z5r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TTe=s(lQ,"CODE",{});var BTt=n(TTe);eyr=r(BTt,"from_pretrained()"),BTt.forEach(t),oyr=r(lQ,"to load the model weights."),lQ.forEach(t),ryr=i(Fi),FTe=s(Fi,"P",{});var xTt=n(FTe);tyr=r(xTt,"Examples:"),xTt.forEach(t),ayr=i(Fi),f(HL.$$.fragment,Fi),Fi.forEach(t),syr=i(Ti),ko=s(Ti,"DIV",{class:!0});var Ra=n(ko);f(UL.$$.fragment,Ra),nyr=i(Ra),CTe=s(Ra,"P",{});var kTt=n(CTe);lyr=r(kTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kTt.forEach(t),iyr=i(Ra),Rs=s(Ra,"P",{});var X5=n(Rs);dyr=r(X5,"The model class to instantiate is selected based on the "),MTe=s(X5,"CODE",{});var RTt=n(MTe);cyr=r(RTt,"model_type"),RTt.forEach(t),myr=r(X5,` property of the config object (either
passed as an argument or loaded from `),ETe=s(X5,"CODE",{});var STt=n(ETe);fyr=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),gyr=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=s(X5,"CODE",{});var PTt=n(yTe);hyr=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),uyr=r(X5,":"),X5.forEach(t),pyr=i(Ra),Me=s(Ra,"UL",{});var lo=n(Me);JE=s(lo,"LI",{});var ABe=n(JE);wTe=s(ABe,"STRONG",{});var $Tt=n(wTe);_yr=r($Tt,"bart"),$Tt.forEach(t),byr=r(ABe," \u2014 "),$V=s(ABe,"A",{href:!0});var ITt=n($V);vyr=r(ITt,"FlaxBartForConditionalGeneration"),ITt.forEach(t),Tyr=r(ABe," (BART model)"),ABe.forEach(t),Fyr=i(lo),YE=s(lo,"LI",{});var LBe=n(YE);ATe=s(LBe,"STRONG",{});var jTt=n(ATe);Cyr=r(jTt,"blenderbot"),jTt.forEach(t),Myr=r(LBe," \u2014 "),IV=s(LBe,"A",{href:!0});var DTt=n(IV);Eyr=r(DTt,"FlaxBlenderbotForConditionalGeneration"),DTt.forEach(t),yyr=r(LBe," (Blenderbot model)"),LBe.forEach(t),wyr=i(lo),KE=s(lo,"LI",{});var BBe=n(KE);LTe=s(BBe,"STRONG",{});var NTt=n(LTe);Ayr=r(NTt,"blenderbot-small"),NTt.forEach(t),Lyr=r(BBe," \u2014 "),jV=s(BBe,"A",{href:!0});var qTt=n(jV);Byr=r(qTt,"FlaxBlenderbotSmallForConditionalGeneration"),qTt.forEach(t),xyr=r(BBe," (BlenderbotSmall model)"),BBe.forEach(t),kyr=i(lo),ZE=s(lo,"LI",{});var xBe=n(ZE);BTe=s(xBe,"STRONG",{});var OTt=n(BTe);Ryr=r(OTt,"encoder-decoder"),OTt.forEach(t),Syr=r(xBe," \u2014 "),DV=s(xBe,"A",{href:!0});var GTt=n(DV);Pyr=r(GTt,"FlaxEncoderDecoderModel"),GTt.forEach(t),$yr=r(xBe," (Encoder decoder model)"),xBe.forEach(t),Iyr=i(lo),e3=s(lo,"LI",{});var kBe=n(e3);xTe=s(kBe,"STRONG",{});var XTt=n(xTe);jyr=r(XTt,"marian"),XTt.forEach(t),Dyr=r(kBe," \u2014 "),NV=s(kBe,"A",{href:!0});var VTt=n(NV);Nyr=r(VTt,"FlaxMarianMTModel"),VTt.forEach(t),qyr=r(kBe," (Marian model)"),kBe.forEach(t),Oyr=i(lo),o3=s(lo,"LI",{});var RBe=n(o3);kTe=s(RBe,"STRONG",{});var zTt=n(kTe);Gyr=r(zTt,"mbart"),zTt.forEach(t),Xyr=r(RBe," \u2014 "),qV=s(RBe,"A",{href:!0});var WTt=n(qV);Vyr=r(WTt,"FlaxMBartForConditionalGeneration"),WTt.forEach(t),zyr=r(RBe," (mBART model)"),RBe.forEach(t),Wyr=i(lo),r3=s(lo,"LI",{});var SBe=n(r3);RTe=s(SBe,"STRONG",{});var QTt=n(RTe);Qyr=r(QTt,"mt5"),QTt.forEach(t),Hyr=r(SBe," \u2014 "),OV=s(SBe,"A",{href:!0});var HTt=n(OV);Uyr=r(HTt,"FlaxMT5ForConditionalGeneration"),HTt.forEach(t),Jyr=r(SBe," (mT5 model)"),SBe.forEach(t),Yyr=i(lo),t3=s(lo,"LI",{});var PBe=n(t3);STe=s(PBe,"STRONG",{});var UTt=n(STe);Kyr=r(UTt,"pegasus"),UTt.forEach(t),Zyr=r(PBe," \u2014 "),GV=s(PBe,"A",{href:!0});var JTt=n(GV);ewr=r(JTt,"FlaxPegasusForConditionalGeneration"),JTt.forEach(t),owr=r(PBe," (Pegasus model)"),PBe.forEach(t),rwr=i(lo),a3=s(lo,"LI",{});var $Be=n(a3);PTe=s($Be,"STRONG",{});var YTt=n(PTe);twr=r(YTt,"t5"),YTt.forEach(t),awr=r($Be," \u2014 "),XV=s($Be,"A",{href:!0});var KTt=n(XV);swr=r(KTt,"FlaxT5ForConditionalGeneration"),KTt.forEach(t),nwr=r($Be," (T5 model)"),$Be.forEach(t),lo.forEach(t),lwr=i(Ra),$Te=s(Ra,"P",{});var ZTt=n($Te);iwr=r(ZTt,"Examples:"),ZTt.forEach(t),dwr=i(Ra),f(JL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),dRe=i(c),gm=s(c,"H2",{class:!0});var FPe=n(gm);s3=s(FPe,"A",{id:!0,class:!0,href:!0});var e1t=n(s3);ITe=s(e1t,"SPAN",{});var o1t=n(ITe);f(YL.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),cwr=i(FPe),jTe=s(FPe,"SPAN",{});var r1t=n(jTe);mwr=r(r1t,"FlaxAutoModelForSequenceClassification"),r1t.forEach(t),FPe.forEach(t),cRe=i(c),jr=s(c,"DIV",{class:!0});var Ci=n(jr);f(KL.$$.fragment,Ci),fwr=i(Ci),hm=s(Ci,"P",{});var iQ=n(hm);gwr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DTe=s(iQ,"CODE",{});var t1t=n(DTe);hwr=r(t1t,"from_pretrained()"),t1t.forEach(t),uwr=r(iQ,"class method or the "),NTe=s(iQ,"CODE",{});var a1t=n(NTe);pwr=r(a1t,"from_config()"),a1t.forEach(t),_wr=r(iQ,`class
method.`),iQ.forEach(t),bwr=i(Ci),ZL=s(Ci,"P",{});var CPe=n(ZL);vwr=r(CPe,"This class cannot be instantiated directly using "),qTe=s(CPe,"CODE",{});var s1t=n(qTe);Twr=r(s1t,"__init__()"),s1t.forEach(t),Fwr=r(CPe," (throws an error)."),CPe.forEach(t),Cwr=i(Ci),kt=s(Ci,"DIV",{class:!0});var Mi=n(kt);f(e7.$$.fragment,Mi),Mwr=i(Mi),OTe=s(Mi,"P",{});var n1t=n(OTe);Ewr=r(n1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n1t.forEach(t),ywr=i(Mi),um=s(Mi,"P",{});var dQ=n(um);wwr=r(dQ,`Note:
Loading a model from its configuration file does `),GTe=s(dQ,"STRONG",{});var l1t=n(GTe);Awr=r(l1t,"not"),l1t.forEach(t),Lwr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XTe=s(dQ,"CODE",{});var i1t=n(XTe);Bwr=r(i1t,"from_pretrained()"),i1t.forEach(t),xwr=r(dQ,"to load the model weights."),dQ.forEach(t),kwr=i(Mi),VTe=s(Mi,"P",{});var d1t=n(VTe);Rwr=r(d1t,"Examples:"),d1t.forEach(t),Swr=i(Mi),f(o7.$$.fragment,Mi),Mi.forEach(t),Pwr=i(Ci),Ro=s(Ci,"DIV",{class:!0});var Sa=n(Ro);f(r7.$$.fragment,Sa),$wr=i(Sa),zTe=s(Sa,"P",{});var c1t=n(zTe);Iwr=r(c1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c1t.forEach(t),jwr=i(Sa),Ss=s(Sa,"P",{});var V5=n(Ss);Dwr=r(V5,"The model class to instantiate is selected based on the "),WTe=s(V5,"CODE",{});var m1t=n(WTe);Nwr=r(m1t,"model_type"),m1t.forEach(t),qwr=r(V5,` property of the config object (either
passed as an argument or loaded from `),QTe=s(V5,"CODE",{});var f1t=n(QTe);Owr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),Gwr=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=s(V5,"CODE",{});var g1t=n(HTe);Xwr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Vwr=r(V5,":"),V5.forEach(t),zwr=i(Sa),ve=s(Sa,"UL",{});var Ae=n(ve);n3=s(Ae,"LI",{});var IBe=n(n3);UTe=s(IBe,"STRONG",{});var h1t=n(UTe);Wwr=r(h1t,"albert"),h1t.forEach(t),Qwr=r(IBe," \u2014 "),VV=s(IBe,"A",{href:!0});var u1t=n(VV);Hwr=r(u1t,"FlaxAlbertForSequenceClassification"),u1t.forEach(t),Uwr=r(IBe," (ALBERT model)"),IBe.forEach(t),Jwr=i(Ae),l3=s(Ae,"LI",{});var jBe=n(l3);JTe=s(jBe,"STRONG",{});var p1t=n(JTe);Ywr=r(p1t,"bart"),p1t.forEach(t),Kwr=r(jBe," \u2014 "),zV=s(jBe,"A",{href:!0});var _1t=n(zV);Zwr=r(_1t,"FlaxBartForSequenceClassification"),_1t.forEach(t),e6r=r(jBe," (BART model)"),jBe.forEach(t),o6r=i(Ae),i3=s(Ae,"LI",{});var DBe=n(i3);YTe=s(DBe,"STRONG",{});var b1t=n(YTe);r6r=r(b1t,"bert"),b1t.forEach(t),t6r=r(DBe," \u2014 "),WV=s(DBe,"A",{href:!0});var v1t=n(WV);a6r=r(v1t,"FlaxBertForSequenceClassification"),v1t.forEach(t),s6r=r(DBe," (BERT model)"),DBe.forEach(t),n6r=i(Ae),d3=s(Ae,"LI",{});var NBe=n(d3);KTe=s(NBe,"STRONG",{});var T1t=n(KTe);l6r=r(T1t,"big_bird"),T1t.forEach(t),i6r=r(NBe," \u2014 "),QV=s(NBe,"A",{href:!0});var F1t=n(QV);d6r=r(F1t,"FlaxBigBirdForSequenceClassification"),F1t.forEach(t),c6r=r(NBe," (BigBird model)"),NBe.forEach(t),m6r=i(Ae),c3=s(Ae,"LI",{});var qBe=n(c3);ZTe=s(qBe,"STRONG",{});var C1t=n(ZTe);f6r=r(C1t,"distilbert"),C1t.forEach(t),g6r=r(qBe," \u2014 "),HV=s(qBe,"A",{href:!0});var M1t=n(HV);h6r=r(M1t,"FlaxDistilBertForSequenceClassification"),M1t.forEach(t),u6r=r(qBe," (DistilBERT model)"),qBe.forEach(t),p6r=i(Ae),m3=s(Ae,"LI",{});var OBe=n(m3);e1e=s(OBe,"STRONG",{});var E1t=n(e1e);_6r=r(E1t,"electra"),E1t.forEach(t),b6r=r(OBe," \u2014 "),UV=s(OBe,"A",{href:!0});var y1t=n(UV);v6r=r(y1t,"FlaxElectraForSequenceClassification"),y1t.forEach(t),T6r=r(OBe," (ELECTRA model)"),OBe.forEach(t),F6r=i(Ae),f3=s(Ae,"LI",{});var GBe=n(f3);o1e=s(GBe,"STRONG",{});var w1t=n(o1e);C6r=r(w1t,"mbart"),w1t.forEach(t),M6r=r(GBe," \u2014 "),JV=s(GBe,"A",{href:!0});var A1t=n(JV);E6r=r(A1t,"FlaxMBartForSequenceClassification"),A1t.forEach(t),y6r=r(GBe," (mBART model)"),GBe.forEach(t),w6r=i(Ae),g3=s(Ae,"LI",{});var XBe=n(g3);r1e=s(XBe,"STRONG",{});var L1t=n(r1e);A6r=r(L1t,"roberta"),L1t.forEach(t),L6r=r(XBe," \u2014 "),YV=s(XBe,"A",{href:!0});var B1t=n(YV);B6r=r(B1t,"FlaxRobertaForSequenceClassification"),B1t.forEach(t),x6r=r(XBe," (RoBERTa model)"),XBe.forEach(t),k6r=i(Ae),h3=s(Ae,"LI",{});var VBe=n(h3);t1e=s(VBe,"STRONG",{});var x1t=n(t1e);R6r=r(x1t,"roformer"),x1t.forEach(t),S6r=r(VBe," \u2014 "),KV=s(VBe,"A",{href:!0});var k1t=n(KV);P6r=r(k1t,"FlaxRoFormerForSequenceClassification"),k1t.forEach(t),$6r=r(VBe," (RoFormer model)"),VBe.forEach(t),I6r=i(Ae),u3=s(Ae,"LI",{});var zBe=n(u3);a1e=s(zBe,"STRONG",{});var R1t=n(a1e);j6r=r(R1t,"xlm-roberta"),R1t.forEach(t),D6r=r(zBe," \u2014 "),ZV=s(zBe,"A",{href:!0});var S1t=n(ZV);N6r=r(S1t,"FlaxXLMRobertaForSequenceClassification"),S1t.forEach(t),q6r=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),Ae.forEach(t),O6r=i(Sa),s1e=s(Sa,"P",{});var P1t=n(s1e);G6r=r(P1t,"Examples:"),P1t.forEach(t),X6r=i(Sa),f(t7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),mRe=i(c),pm=s(c,"H2",{class:!0});var MPe=n(pm);p3=s(MPe,"A",{id:!0,class:!0,href:!0});var $1t=n(p3);n1e=s($1t,"SPAN",{});var I1t=n(n1e);f(a7.$$.fragment,I1t),I1t.forEach(t),$1t.forEach(t),V6r=i(MPe),l1e=s(MPe,"SPAN",{});var j1t=n(l1e);z6r=r(j1t,"FlaxAutoModelForQuestionAnswering"),j1t.forEach(t),MPe.forEach(t),fRe=i(c),Dr=s(c,"DIV",{class:!0});var Ei=n(Dr);f(s7.$$.fragment,Ei),W6r=i(Ei),_m=s(Ei,"P",{});var cQ=n(_m);Q6r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),i1e=s(cQ,"CODE",{});var D1t=n(i1e);H6r=r(D1t,"from_pretrained()"),D1t.forEach(t),U6r=r(cQ,"class method or the "),d1e=s(cQ,"CODE",{});var N1t=n(d1e);J6r=r(N1t,"from_config()"),N1t.forEach(t),Y6r=r(cQ,`class
method.`),cQ.forEach(t),K6r=i(Ei),n7=s(Ei,"P",{});var EPe=n(n7);Z6r=r(EPe,"This class cannot be instantiated directly using "),c1e=s(EPe,"CODE",{});var q1t=n(c1e);eAr=r(q1t,"__init__()"),q1t.forEach(t),oAr=r(EPe," (throws an error)."),EPe.forEach(t),rAr=i(Ei),Rt=s(Ei,"DIV",{class:!0});var yi=n(Rt);f(l7.$$.fragment,yi),tAr=i(yi),m1e=s(yi,"P",{});var O1t=n(m1e);aAr=r(O1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),O1t.forEach(t),sAr=i(yi),bm=s(yi,"P",{});var mQ=n(bm);nAr=r(mQ,`Note:
Loading a model from its configuration file does `),f1e=s(mQ,"STRONG",{});var G1t=n(f1e);lAr=r(G1t,"not"),G1t.forEach(t),iAr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g1e=s(mQ,"CODE",{});var X1t=n(g1e);dAr=r(X1t,"from_pretrained()"),X1t.forEach(t),cAr=r(mQ,"to load the model weights."),mQ.forEach(t),mAr=i(yi),h1e=s(yi,"P",{});var V1t=n(h1e);fAr=r(V1t,"Examples:"),V1t.forEach(t),gAr=i(yi),f(i7.$$.fragment,yi),yi.forEach(t),hAr=i(Ei),So=s(Ei,"DIV",{class:!0});var Pa=n(So);f(d7.$$.fragment,Pa),uAr=i(Pa),u1e=s(Pa,"P",{});var z1t=n(u1e);pAr=r(z1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),z1t.forEach(t),_Ar=i(Pa),Ps=s(Pa,"P",{});var z5=n(Ps);bAr=r(z5,"The model class to instantiate is selected based on the "),p1e=s(z5,"CODE",{});var W1t=n(p1e);vAr=r(W1t,"model_type"),W1t.forEach(t),TAr=r(z5,` property of the config object (either
passed as an argument or loaded from `),_1e=s(z5,"CODE",{});var Q1t=n(_1e);FAr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),CAr=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=s(z5,"CODE",{});var H1t=n(b1e);MAr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),EAr=r(z5,":"),z5.forEach(t),yAr=i(Pa),Te=s(Pa,"UL",{});var Le=n(Te);_3=s(Le,"LI",{});var WBe=n(_3);v1e=s(WBe,"STRONG",{});var U1t=n(v1e);wAr=r(U1t,"albert"),U1t.forEach(t),AAr=r(WBe," \u2014 "),ez=s(WBe,"A",{href:!0});var J1t=n(ez);LAr=r(J1t,"FlaxAlbertForQuestionAnswering"),J1t.forEach(t),BAr=r(WBe," (ALBERT model)"),WBe.forEach(t),xAr=i(Le),b3=s(Le,"LI",{});var QBe=n(b3);T1e=s(QBe,"STRONG",{});var Y1t=n(T1e);kAr=r(Y1t,"bart"),Y1t.forEach(t),RAr=r(QBe," \u2014 "),oz=s(QBe,"A",{href:!0});var K1t=n(oz);SAr=r(K1t,"FlaxBartForQuestionAnswering"),K1t.forEach(t),PAr=r(QBe," (BART model)"),QBe.forEach(t),$Ar=i(Le),v3=s(Le,"LI",{});var HBe=n(v3);F1e=s(HBe,"STRONG",{});var Z1t=n(F1e);IAr=r(Z1t,"bert"),Z1t.forEach(t),jAr=r(HBe," \u2014 "),rz=s(HBe,"A",{href:!0});var eFt=n(rz);DAr=r(eFt,"FlaxBertForQuestionAnswering"),eFt.forEach(t),NAr=r(HBe," (BERT model)"),HBe.forEach(t),qAr=i(Le),T3=s(Le,"LI",{});var UBe=n(T3);C1e=s(UBe,"STRONG",{});var oFt=n(C1e);OAr=r(oFt,"big_bird"),oFt.forEach(t),GAr=r(UBe," \u2014 "),tz=s(UBe,"A",{href:!0});var rFt=n(tz);XAr=r(rFt,"FlaxBigBirdForQuestionAnswering"),rFt.forEach(t),VAr=r(UBe," (BigBird model)"),UBe.forEach(t),zAr=i(Le),F3=s(Le,"LI",{});var JBe=n(F3);M1e=s(JBe,"STRONG",{});var tFt=n(M1e);WAr=r(tFt,"distilbert"),tFt.forEach(t),QAr=r(JBe," \u2014 "),az=s(JBe,"A",{href:!0});var aFt=n(az);HAr=r(aFt,"FlaxDistilBertForQuestionAnswering"),aFt.forEach(t),UAr=r(JBe," (DistilBERT model)"),JBe.forEach(t),JAr=i(Le),C3=s(Le,"LI",{});var YBe=n(C3);E1e=s(YBe,"STRONG",{});var sFt=n(E1e);YAr=r(sFt,"electra"),sFt.forEach(t),KAr=r(YBe," \u2014 "),sz=s(YBe,"A",{href:!0});var nFt=n(sz);ZAr=r(nFt,"FlaxElectraForQuestionAnswering"),nFt.forEach(t),e0r=r(YBe," (ELECTRA model)"),YBe.forEach(t),o0r=i(Le),M3=s(Le,"LI",{});var KBe=n(M3);y1e=s(KBe,"STRONG",{});var lFt=n(y1e);r0r=r(lFt,"mbart"),lFt.forEach(t),t0r=r(KBe," \u2014 "),nz=s(KBe,"A",{href:!0});var iFt=n(nz);a0r=r(iFt,"FlaxMBartForQuestionAnswering"),iFt.forEach(t),s0r=r(KBe," (mBART model)"),KBe.forEach(t),n0r=i(Le),E3=s(Le,"LI",{});var ZBe=n(E3);w1e=s(ZBe,"STRONG",{});var dFt=n(w1e);l0r=r(dFt,"roberta"),dFt.forEach(t),i0r=r(ZBe," \u2014 "),lz=s(ZBe,"A",{href:!0});var cFt=n(lz);d0r=r(cFt,"FlaxRobertaForQuestionAnswering"),cFt.forEach(t),c0r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),m0r=i(Le),y3=s(Le,"LI",{});var exe=n(y3);A1e=s(exe,"STRONG",{});var mFt=n(A1e);f0r=r(mFt,"roformer"),mFt.forEach(t),g0r=r(exe," \u2014 "),iz=s(exe,"A",{href:!0});var fFt=n(iz);h0r=r(fFt,"FlaxRoFormerForQuestionAnswering"),fFt.forEach(t),u0r=r(exe," (RoFormer model)"),exe.forEach(t),p0r=i(Le),w3=s(Le,"LI",{});var oxe=n(w3);L1e=s(oxe,"STRONG",{});var gFt=n(L1e);_0r=r(gFt,"xlm-roberta"),gFt.forEach(t),b0r=r(oxe," \u2014 "),dz=s(oxe,"A",{href:!0});var hFt=n(dz);v0r=r(hFt,"FlaxXLMRobertaForQuestionAnswering"),hFt.forEach(t),T0r=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Le.forEach(t),F0r=i(Pa),B1e=s(Pa,"P",{});var uFt=n(B1e);C0r=r(uFt,"Examples:"),uFt.forEach(t),M0r=i(Pa),f(c7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),gRe=i(c),vm=s(c,"H2",{class:!0});var yPe=n(vm);A3=s(yPe,"A",{id:!0,class:!0,href:!0});var pFt=n(A3);x1e=s(pFt,"SPAN",{});var _Ft=n(x1e);f(m7.$$.fragment,_Ft),_Ft.forEach(t),pFt.forEach(t),E0r=i(yPe),k1e=s(yPe,"SPAN",{});var bFt=n(k1e);y0r=r(bFt,"FlaxAutoModelForTokenClassification"),bFt.forEach(t),yPe.forEach(t),hRe=i(c),Nr=s(c,"DIV",{class:!0});var wi=n(Nr);f(f7.$$.fragment,wi),w0r=i(wi),Tm=s(wi,"P",{});var fQ=n(Tm);A0r=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),R1e=s(fQ,"CODE",{});var vFt=n(R1e);L0r=r(vFt,"from_pretrained()"),vFt.forEach(t),B0r=r(fQ,"class method or the "),S1e=s(fQ,"CODE",{});var TFt=n(S1e);x0r=r(TFt,"from_config()"),TFt.forEach(t),k0r=r(fQ,`class
method.`),fQ.forEach(t),R0r=i(wi),g7=s(wi,"P",{});var wPe=n(g7);S0r=r(wPe,"This class cannot be instantiated directly using "),P1e=s(wPe,"CODE",{});var FFt=n(P1e);P0r=r(FFt,"__init__()"),FFt.forEach(t),$0r=r(wPe," (throws an error)."),wPe.forEach(t),I0r=i(wi),St=s(wi,"DIV",{class:!0});var Ai=n(St);f(h7.$$.fragment,Ai),j0r=i(Ai),$1e=s(Ai,"P",{});var CFt=n($1e);D0r=r(CFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CFt.forEach(t),N0r=i(Ai),Fm=s(Ai,"P",{});var gQ=n(Fm);q0r=r(gQ,`Note:
Loading a model from its configuration file does `),I1e=s(gQ,"STRONG",{});var MFt=n(I1e);O0r=r(MFt,"not"),MFt.forEach(t),G0r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),j1e=s(gQ,"CODE",{});var EFt=n(j1e);X0r=r(EFt,"from_pretrained()"),EFt.forEach(t),V0r=r(gQ,"to load the model weights."),gQ.forEach(t),z0r=i(Ai),D1e=s(Ai,"P",{});var yFt=n(D1e);W0r=r(yFt,"Examples:"),yFt.forEach(t),Q0r=i(Ai),f(u7.$$.fragment,Ai),Ai.forEach(t),H0r=i(wi),Po=s(wi,"DIV",{class:!0});var $a=n(Po);f(p7.$$.fragment,$a),U0r=i($a),N1e=s($a,"P",{});var wFt=n(N1e);J0r=r(wFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wFt.forEach(t),Y0r=i($a),$s=s($a,"P",{});var W5=n($s);K0r=r(W5,"The model class to instantiate is selected based on the "),q1e=s(W5,"CODE",{});var AFt=n(q1e);Z0r=r(AFt,"model_type"),AFt.forEach(t),eLr=r(W5,` property of the config object (either
passed as an argument or loaded from `),O1e=s(W5,"CODE",{});var LFt=n(O1e);oLr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),rLr=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=s(W5,"CODE",{});var BFt=n(G1e);tLr=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),aLr=r(W5,":"),W5.forEach(t),sLr=i($a),Se=s($a,"UL",{});var Go=n(Se);L3=s(Go,"LI",{});var rxe=n(L3);X1e=s(rxe,"STRONG",{});var xFt=n(X1e);nLr=r(xFt,"albert"),xFt.forEach(t),lLr=r(rxe," \u2014 "),cz=s(rxe,"A",{href:!0});var kFt=n(cz);iLr=r(kFt,"FlaxAlbertForTokenClassification"),kFt.forEach(t),dLr=r(rxe," (ALBERT model)"),rxe.forEach(t),cLr=i(Go),B3=s(Go,"LI",{});var txe=n(B3);V1e=s(txe,"STRONG",{});var RFt=n(V1e);mLr=r(RFt,"bert"),RFt.forEach(t),fLr=r(txe," \u2014 "),mz=s(txe,"A",{href:!0});var SFt=n(mz);gLr=r(SFt,"FlaxBertForTokenClassification"),SFt.forEach(t),hLr=r(txe," (BERT model)"),txe.forEach(t),uLr=i(Go),x3=s(Go,"LI",{});var axe=n(x3);z1e=s(axe,"STRONG",{});var PFt=n(z1e);pLr=r(PFt,"big_bird"),PFt.forEach(t),_Lr=r(axe," \u2014 "),fz=s(axe,"A",{href:!0});var $Ft=n(fz);bLr=r($Ft,"FlaxBigBirdForTokenClassification"),$Ft.forEach(t),vLr=r(axe," (BigBird model)"),axe.forEach(t),TLr=i(Go),k3=s(Go,"LI",{});var sxe=n(k3);W1e=s(sxe,"STRONG",{});var IFt=n(W1e);FLr=r(IFt,"distilbert"),IFt.forEach(t),CLr=r(sxe," \u2014 "),gz=s(sxe,"A",{href:!0});var jFt=n(gz);MLr=r(jFt,"FlaxDistilBertForTokenClassification"),jFt.forEach(t),ELr=r(sxe," (DistilBERT model)"),sxe.forEach(t),yLr=i(Go),R3=s(Go,"LI",{});var nxe=n(R3);Q1e=s(nxe,"STRONG",{});var DFt=n(Q1e);wLr=r(DFt,"electra"),DFt.forEach(t),ALr=r(nxe," \u2014 "),hz=s(nxe,"A",{href:!0});var NFt=n(hz);LLr=r(NFt,"FlaxElectraForTokenClassification"),NFt.forEach(t),BLr=r(nxe," (ELECTRA model)"),nxe.forEach(t),xLr=i(Go),S3=s(Go,"LI",{});var lxe=n(S3);H1e=s(lxe,"STRONG",{});var qFt=n(H1e);kLr=r(qFt,"roberta"),qFt.forEach(t),RLr=r(lxe," \u2014 "),uz=s(lxe,"A",{href:!0});var OFt=n(uz);SLr=r(OFt,"FlaxRobertaForTokenClassification"),OFt.forEach(t),PLr=r(lxe," (RoBERTa model)"),lxe.forEach(t),$Lr=i(Go),P3=s(Go,"LI",{});var ixe=n(P3);U1e=s(ixe,"STRONG",{});var GFt=n(U1e);ILr=r(GFt,"roformer"),GFt.forEach(t),jLr=r(ixe," \u2014 "),pz=s(ixe,"A",{href:!0});var XFt=n(pz);DLr=r(XFt,"FlaxRoFormerForTokenClassification"),XFt.forEach(t),NLr=r(ixe," (RoFormer model)"),ixe.forEach(t),qLr=i(Go),$3=s(Go,"LI",{});var dxe=n($3);J1e=s(dxe,"STRONG",{});var VFt=n(J1e);OLr=r(VFt,"xlm-roberta"),VFt.forEach(t),GLr=r(dxe," \u2014 "),_z=s(dxe,"A",{href:!0});var zFt=n(_z);XLr=r(zFt,"FlaxXLMRobertaForTokenClassification"),zFt.forEach(t),VLr=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),Go.forEach(t),zLr=i($a),Y1e=s($a,"P",{});var WFt=n(Y1e);WLr=r(WFt,"Examples:"),WFt.forEach(t),QLr=i($a),f(_7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),uRe=i(c),Cm=s(c,"H2",{class:!0});var APe=n(Cm);I3=s(APe,"A",{id:!0,class:!0,href:!0});var QFt=n(I3);K1e=s(QFt,"SPAN",{});var HFt=n(K1e);f(b7.$$.fragment,HFt),HFt.forEach(t),QFt.forEach(t),HLr=i(APe),Z1e=s(APe,"SPAN",{});var UFt=n(Z1e);ULr=r(UFt,"FlaxAutoModelForMultipleChoice"),UFt.forEach(t),APe.forEach(t),pRe=i(c),qr=s(c,"DIV",{class:!0});var Li=n(qr);f(v7.$$.fragment,Li),JLr=i(Li),Mm=s(Li,"P",{});var hQ=n(Mm);YLr=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eFe=s(hQ,"CODE",{});var JFt=n(eFe);KLr=r(JFt,"from_pretrained()"),JFt.forEach(t),ZLr=r(hQ,"class method or the "),oFe=s(hQ,"CODE",{});var YFt=n(oFe);e7r=r(YFt,"from_config()"),YFt.forEach(t),o7r=r(hQ,`class
method.`),hQ.forEach(t),r7r=i(Li),T7=s(Li,"P",{});var LPe=n(T7);t7r=r(LPe,"This class cannot be instantiated directly using "),rFe=s(LPe,"CODE",{});var KFt=n(rFe);a7r=r(KFt,"__init__()"),KFt.forEach(t),s7r=r(LPe," (throws an error)."),LPe.forEach(t),n7r=i(Li),Pt=s(Li,"DIV",{class:!0});var Bi=n(Pt);f(F7.$$.fragment,Bi),l7r=i(Bi),tFe=s(Bi,"P",{});var ZFt=n(tFe);i7r=r(ZFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZFt.forEach(t),d7r=i(Bi),Em=s(Bi,"P",{});var uQ=n(Em);c7r=r(uQ,`Note:
Loading a model from its configuration file does `),aFe=s(uQ,"STRONG",{});var eCt=n(aFe);m7r=r(eCt,"not"),eCt.forEach(t),f7r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sFe=s(uQ,"CODE",{});var oCt=n(sFe);g7r=r(oCt,"from_pretrained()"),oCt.forEach(t),h7r=r(uQ,"to load the model weights."),uQ.forEach(t),u7r=i(Bi),nFe=s(Bi,"P",{});var rCt=n(nFe);p7r=r(rCt,"Examples:"),rCt.forEach(t),_7r=i(Bi),f(C7.$$.fragment,Bi),Bi.forEach(t),b7r=i(Li),$o=s(Li,"DIV",{class:!0});var Ia=n($o);f(M7.$$.fragment,Ia),v7r=i(Ia),lFe=s(Ia,"P",{});var tCt=n(lFe);T7r=r(tCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tCt.forEach(t),F7r=i(Ia),Is=s(Ia,"P",{});var Q5=n(Is);C7r=r(Q5,"The model class to instantiate is selected based on the "),iFe=s(Q5,"CODE",{});var aCt=n(iFe);M7r=r(aCt,"model_type"),aCt.forEach(t),E7r=r(Q5,` property of the config object (either
passed as an argument or loaded from `),dFe=s(Q5,"CODE",{});var sCt=n(dFe);y7r=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),w7r=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=s(Q5,"CODE",{});var nCt=n(cFe);A7r=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),L7r=r(Q5,":"),Q5.forEach(t),B7r=i(Ia),Pe=s(Ia,"UL",{});var Xo=n(Pe);j3=s(Xo,"LI",{});var cxe=n(j3);mFe=s(cxe,"STRONG",{});var lCt=n(mFe);x7r=r(lCt,"albert"),lCt.forEach(t),k7r=r(cxe," \u2014 "),bz=s(cxe,"A",{href:!0});var iCt=n(bz);R7r=r(iCt,"FlaxAlbertForMultipleChoice"),iCt.forEach(t),S7r=r(cxe," (ALBERT model)"),cxe.forEach(t),P7r=i(Xo),D3=s(Xo,"LI",{});var mxe=n(D3);fFe=s(mxe,"STRONG",{});var dCt=n(fFe);$7r=r(dCt,"bert"),dCt.forEach(t),I7r=r(mxe," \u2014 "),vz=s(mxe,"A",{href:!0});var cCt=n(vz);j7r=r(cCt,"FlaxBertForMultipleChoice"),cCt.forEach(t),D7r=r(mxe," (BERT model)"),mxe.forEach(t),N7r=i(Xo),N3=s(Xo,"LI",{});var fxe=n(N3);gFe=s(fxe,"STRONG",{});var mCt=n(gFe);q7r=r(mCt,"big_bird"),mCt.forEach(t),O7r=r(fxe," \u2014 "),Tz=s(fxe,"A",{href:!0});var fCt=n(Tz);G7r=r(fCt,"FlaxBigBirdForMultipleChoice"),fCt.forEach(t),X7r=r(fxe," (BigBird model)"),fxe.forEach(t),V7r=i(Xo),q3=s(Xo,"LI",{});var gxe=n(q3);hFe=s(gxe,"STRONG",{});var gCt=n(hFe);z7r=r(gCt,"distilbert"),gCt.forEach(t),W7r=r(gxe," \u2014 "),Fz=s(gxe,"A",{href:!0});var hCt=n(Fz);Q7r=r(hCt,"FlaxDistilBertForMultipleChoice"),hCt.forEach(t),H7r=r(gxe," (DistilBERT model)"),gxe.forEach(t),U7r=i(Xo),O3=s(Xo,"LI",{});var hxe=n(O3);uFe=s(hxe,"STRONG",{});var uCt=n(uFe);J7r=r(uCt,"electra"),uCt.forEach(t),Y7r=r(hxe," \u2014 "),Cz=s(hxe,"A",{href:!0});var pCt=n(Cz);K7r=r(pCt,"FlaxElectraForMultipleChoice"),pCt.forEach(t),Z7r=r(hxe," (ELECTRA model)"),hxe.forEach(t),e8r=i(Xo),G3=s(Xo,"LI",{});var uxe=n(G3);pFe=s(uxe,"STRONG",{});var _Ct=n(pFe);o8r=r(_Ct,"roberta"),_Ct.forEach(t),r8r=r(uxe," \u2014 "),Mz=s(uxe,"A",{href:!0});var bCt=n(Mz);t8r=r(bCt,"FlaxRobertaForMultipleChoice"),bCt.forEach(t),a8r=r(uxe," (RoBERTa model)"),uxe.forEach(t),s8r=i(Xo),X3=s(Xo,"LI",{});var pxe=n(X3);_Fe=s(pxe,"STRONG",{});var vCt=n(_Fe);n8r=r(vCt,"roformer"),vCt.forEach(t),l8r=r(pxe," \u2014 "),Ez=s(pxe,"A",{href:!0});var TCt=n(Ez);i8r=r(TCt,"FlaxRoFormerForMultipleChoice"),TCt.forEach(t),d8r=r(pxe," (RoFormer model)"),pxe.forEach(t),c8r=i(Xo),V3=s(Xo,"LI",{});var _xe=n(V3);bFe=s(_xe,"STRONG",{});var FCt=n(bFe);m8r=r(FCt,"xlm-roberta"),FCt.forEach(t),f8r=r(_xe," \u2014 "),yz=s(_xe,"A",{href:!0});var CCt=n(yz);g8r=r(CCt,"FlaxXLMRobertaForMultipleChoice"),CCt.forEach(t),h8r=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),Xo.forEach(t),u8r=i(Ia),vFe=s(Ia,"P",{});var MCt=n(vFe);p8r=r(MCt,"Examples:"),MCt.forEach(t),_8r=i(Ia),f(E7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),_Re=i(c),ym=s(c,"H2",{class:!0});var BPe=n(ym);z3=s(BPe,"A",{id:!0,class:!0,href:!0});var ECt=n(z3);TFe=s(ECt,"SPAN",{});var yCt=n(TFe);f(y7.$$.fragment,yCt),yCt.forEach(t),ECt.forEach(t),b8r=i(BPe),FFe=s(BPe,"SPAN",{});var wCt=n(FFe);v8r=r(wCt,"FlaxAutoModelForNextSentencePrediction"),wCt.forEach(t),BPe.forEach(t),bRe=i(c),Or=s(c,"DIV",{class:!0});var xi=n(Or);f(w7.$$.fragment,xi),T8r=i(xi),wm=s(xi,"P",{});var pQ=n(wm);F8r=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CFe=s(pQ,"CODE",{});var ACt=n(CFe);C8r=r(ACt,"from_pretrained()"),ACt.forEach(t),M8r=r(pQ,"class method or the "),MFe=s(pQ,"CODE",{});var LCt=n(MFe);E8r=r(LCt,"from_config()"),LCt.forEach(t),y8r=r(pQ,`class
method.`),pQ.forEach(t),w8r=i(xi),A7=s(xi,"P",{});var xPe=n(A7);A8r=r(xPe,"This class cannot be instantiated directly using "),EFe=s(xPe,"CODE",{});var BCt=n(EFe);L8r=r(BCt,"__init__()"),BCt.forEach(t),B8r=r(xPe," (throws an error)."),xPe.forEach(t),x8r=i(xi),$t=s(xi,"DIV",{class:!0});var ki=n($t);f(L7.$$.fragment,ki),k8r=i(ki),yFe=s(ki,"P",{});var xCt=n(yFe);R8r=r(xCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xCt.forEach(t),S8r=i(ki),Am=s(ki,"P",{});var _Q=n(Am);P8r=r(_Q,`Note:
Loading a model from its configuration file does `),wFe=s(_Q,"STRONG",{});var kCt=n(wFe);$8r=r(kCt,"not"),kCt.forEach(t),I8r=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),AFe=s(_Q,"CODE",{});var RCt=n(AFe);j8r=r(RCt,"from_pretrained()"),RCt.forEach(t),D8r=r(_Q,"to load the model weights."),_Q.forEach(t),N8r=i(ki),LFe=s(ki,"P",{});var SCt=n(LFe);q8r=r(SCt,"Examples:"),SCt.forEach(t),O8r=i(ki),f(B7.$$.fragment,ki),ki.forEach(t),G8r=i(xi),Io=s(xi,"DIV",{class:!0});var ja=n(Io);f(x7.$$.fragment,ja),X8r=i(ja),BFe=s(ja,"P",{});var PCt=n(BFe);V8r=r(PCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PCt.forEach(t),z8r=i(ja),js=s(ja,"P",{});var H5=n(js);W8r=r(H5,"The model class to instantiate is selected based on the "),xFe=s(H5,"CODE",{});var $Ct=n(xFe);Q8r=r($Ct,"model_type"),$Ct.forEach(t),H8r=r(H5,` property of the config object (either
passed as an argument or loaded from `),kFe=s(H5,"CODE",{});var ICt=n(kFe);U8r=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),J8r=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=s(H5,"CODE",{});var jCt=n(RFe);Y8r=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),K8r=r(H5,":"),H5.forEach(t),Z8r=i(ja),SFe=s(ja,"UL",{});var DCt=n(SFe);W3=s(DCt,"LI",{});var bxe=n(W3);PFe=s(bxe,"STRONG",{});var NCt=n(PFe);e9r=r(NCt,"bert"),NCt.forEach(t),o9r=r(bxe," \u2014 "),wz=s(bxe,"A",{href:!0});var qCt=n(wz);r9r=r(qCt,"FlaxBertForNextSentencePrediction"),qCt.forEach(t),t9r=r(bxe," (BERT model)"),bxe.forEach(t),DCt.forEach(t),a9r=i(ja),$Fe=s(ja,"P",{});var OCt=n($Fe);s9r=r(OCt,"Examples:"),OCt.forEach(t),n9r=i(ja),f(k7.$$.fragment,ja),ja.forEach(t),xi.forEach(t),vRe=i(c),Lm=s(c,"H2",{class:!0});var kPe=n(Lm);Q3=s(kPe,"A",{id:!0,class:!0,href:!0});var GCt=n(Q3);IFe=s(GCt,"SPAN",{});var XCt=n(IFe);f(R7.$$.fragment,XCt),XCt.forEach(t),GCt.forEach(t),l9r=i(kPe),jFe=s(kPe,"SPAN",{});var VCt=n(jFe);i9r=r(VCt,"FlaxAutoModelForImageClassification"),VCt.forEach(t),kPe.forEach(t),TRe=i(c),Gr=s(c,"DIV",{class:!0});var Ri=n(Gr);f(S7.$$.fragment,Ri),d9r=i(Ri),Bm=s(Ri,"P",{});var bQ=n(Bm);c9r=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DFe=s(bQ,"CODE",{});var zCt=n(DFe);m9r=r(zCt,"from_pretrained()"),zCt.forEach(t),f9r=r(bQ,"class method or the "),NFe=s(bQ,"CODE",{});var WCt=n(NFe);g9r=r(WCt,"from_config()"),WCt.forEach(t),h9r=r(bQ,`class
method.`),bQ.forEach(t),u9r=i(Ri),P7=s(Ri,"P",{});var RPe=n(P7);p9r=r(RPe,"This class cannot be instantiated directly using "),qFe=s(RPe,"CODE",{});var QCt=n(qFe);_9r=r(QCt,"__init__()"),QCt.forEach(t),b9r=r(RPe," (throws an error)."),RPe.forEach(t),v9r=i(Ri),It=s(Ri,"DIV",{class:!0});var Si=n(It);f($7.$$.fragment,Si),T9r=i(Si),OFe=s(Si,"P",{});var HCt=n(OFe);F9r=r(HCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HCt.forEach(t),C9r=i(Si),xm=s(Si,"P",{});var vQ=n(xm);M9r=r(vQ,`Note:
Loading a model from its configuration file does `),GFe=s(vQ,"STRONG",{});var UCt=n(GFe);E9r=r(UCt,"not"),UCt.forEach(t),y9r=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XFe=s(vQ,"CODE",{});var JCt=n(XFe);w9r=r(JCt,"from_pretrained()"),JCt.forEach(t),A9r=r(vQ,"to load the model weights."),vQ.forEach(t),L9r=i(Si),VFe=s(Si,"P",{});var YCt=n(VFe);B9r=r(YCt,"Examples:"),YCt.forEach(t),x9r=i(Si),f(I7.$$.fragment,Si),Si.forEach(t),k9r=i(Ri),jo=s(Ri,"DIV",{class:!0});var Da=n(jo);f(j7.$$.fragment,Da),R9r=i(Da),zFe=s(Da,"P",{});var KCt=n(zFe);S9r=r(KCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KCt.forEach(t),P9r=i(Da),Ds=s(Da,"P",{});var U5=n(Ds);$9r=r(U5,"The model class to instantiate is selected based on the "),WFe=s(U5,"CODE",{});var ZCt=n(WFe);I9r=r(ZCt,"model_type"),ZCt.forEach(t),j9r=r(U5,` property of the config object (either
passed as an argument or loaded from `),QFe=s(U5,"CODE",{});var eMt=n(QFe);D9r=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),N9r=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=s(U5,"CODE",{});var oMt=n(HFe);q9r=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),O9r=r(U5,":"),U5.forEach(t),G9r=i(Da),D7=s(Da,"UL",{});var SPe=n(D7);H3=s(SPe,"LI",{});var vxe=n(H3);UFe=s(vxe,"STRONG",{});var rMt=n(UFe);X9r=r(rMt,"beit"),rMt.forEach(t),V9r=r(vxe," \u2014 "),Az=s(vxe,"A",{href:!0});var tMt=n(Az);z9r=r(tMt,"FlaxBeitForImageClassification"),tMt.forEach(t),W9r=r(vxe," (BEiT model)"),vxe.forEach(t),Q9r=i(SPe),U3=s(SPe,"LI",{});var Txe=n(U3);JFe=s(Txe,"STRONG",{});var aMt=n(JFe);H9r=r(aMt,"vit"),aMt.forEach(t),U9r=r(Txe," \u2014 "),Lz=s(Txe,"A",{href:!0});var sMt=n(Lz);J9r=r(sMt,"FlaxViTForImageClassification"),sMt.forEach(t),Y9r=r(Txe," (ViT model)"),Txe.forEach(t),SPe.forEach(t),K9r=i(Da),YFe=s(Da,"P",{});var nMt=n(YFe);Z9r=r(nMt,"Examples:"),nMt.forEach(t),eBr=i(Da),f(N7.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),FRe=i(c),km=s(c,"H2",{class:!0});var PPe=n(km);J3=s(PPe,"A",{id:!0,class:!0,href:!0});var lMt=n(J3);KFe=s(lMt,"SPAN",{});var iMt=n(KFe);f(q7.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),oBr=i(PPe),ZFe=s(PPe,"SPAN",{});var dMt=n(ZFe);rBr=r(dMt,"FlaxAutoModelForVision2Seq"),dMt.forEach(t),PPe.forEach(t),CRe=i(c),Xr=s(c,"DIV",{class:!0});var Pi=n(Xr);f(O7.$$.fragment,Pi),tBr=i(Pi),Rm=s(Pi,"P",{});var TQ=n(Rm);aBr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eCe=s(TQ,"CODE",{});var cMt=n(eCe);sBr=r(cMt,"from_pretrained()"),cMt.forEach(t),nBr=r(TQ,"class method or the "),oCe=s(TQ,"CODE",{});var mMt=n(oCe);lBr=r(mMt,"from_config()"),mMt.forEach(t),iBr=r(TQ,`class
method.`),TQ.forEach(t),dBr=i(Pi),G7=s(Pi,"P",{});var $Pe=n(G7);cBr=r($Pe,"This class cannot be instantiated directly using "),rCe=s($Pe,"CODE",{});var fMt=n(rCe);mBr=r(fMt,"__init__()"),fMt.forEach(t),fBr=r($Pe," (throws an error)."),$Pe.forEach(t),gBr=i(Pi),jt=s(Pi,"DIV",{class:!0});var $i=n(jt);f(X7.$$.fragment,$i),hBr=i($i),tCe=s($i,"P",{});var gMt=n(tCe);uBr=r(gMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gMt.forEach(t),pBr=i($i),Sm=s($i,"P",{});var FQ=n(Sm);_Br=r(FQ,`Note:
Loading a model from its configuration file does `),aCe=s(FQ,"STRONG",{});var hMt=n(aCe);bBr=r(hMt,"not"),hMt.forEach(t),vBr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sCe=s(FQ,"CODE",{});var uMt=n(sCe);TBr=r(uMt,"from_pretrained()"),uMt.forEach(t),FBr=r(FQ,"to load the model weights."),FQ.forEach(t),CBr=i($i),nCe=s($i,"P",{});var pMt=n(nCe);MBr=r(pMt,"Examples:"),pMt.forEach(t),EBr=i($i),f(V7.$$.fragment,$i),$i.forEach(t),yBr=i(Pi),Do=s(Pi,"DIV",{class:!0});var Na=n(Do);f(z7.$$.fragment,Na),wBr=i(Na),lCe=s(Na,"P",{});var _Mt=n(lCe);ABr=r(_Mt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Mt.forEach(t),LBr=i(Na),Ns=s(Na,"P",{});var J5=n(Ns);BBr=r(J5,"The model class to instantiate is selected based on the "),iCe=s(J5,"CODE",{});var bMt=n(iCe);xBr=r(bMt,"model_type"),bMt.forEach(t),kBr=r(J5,` property of the config object (either
passed as an argument or loaded from `),dCe=s(J5,"CODE",{});var vMt=n(dCe);RBr=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),SBr=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=s(J5,"CODE",{});var TMt=n(cCe);PBr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),$Br=r(J5,":"),J5.forEach(t),IBr=i(Na),mCe=s(Na,"UL",{});var FMt=n(mCe);Y3=s(FMt,"LI",{});var Fxe=n(Y3);fCe=s(Fxe,"STRONG",{});var CMt=n(fCe);jBr=r(CMt,"vision-encoder-decoder"),CMt.forEach(t),DBr=r(Fxe," \u2014 "),Bz=s(Fxe,"A",{href:!0});var MMt=n(Bz);NBr=r(MMt,"FlaxVisionEncoderDecoderModel"),MMt.forEach(t),qBr=r(Fxe," (Vision Encoder decoder model)"),Fxe.forEach(t),FMt.forEach(t),OBr=i(Na),gCe=s(Na,"P",{});var EMt=n(gCe);GBr=r(EMt,"Examples:"),EMt.forEach(t),XBr=i(Na),f(W7.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(SMt)),d(he,"id","auto-classes"),d(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(he,"href","#auto-classes"),d(de,"class","relative group"),d(qs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig"),d(Gs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),d(Xs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),d(Nm,"id","extending-the-auto-classes"),d(Nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nm,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Om,"id","transformers.AutoConfig"),d(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Om,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(J8,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(Y8,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig"),d(K8,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartConfig"),d(Z8,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig"),d(e9,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertConfig"),d(o9,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(r9,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig"),d(t9,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(a9,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(s9,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(n9,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig"),d(l9,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig"),d(i9,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig"),d(d9,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig"),d(c9,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig"),d(m9,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig"),d(f9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(g9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(h9,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig"),d(u9,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(p9,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig"),d(_9,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig"),d(b9,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),d(v9,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig"),d(T9,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig"),d(F9,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(C9,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig"),d(M9,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig"),d(E9,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig"),d(y9,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig"),d(w9,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config"),d(A9,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(L9,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig"),d(B9,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig"),d(x9,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig"),d(k9,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(R9,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(S9,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(P9,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDConfig"),d($9,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig"),d(I9,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig"),d(j9,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig"),d(D9,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config"),d(N9,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig"),d(q9,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(O9,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig"),d(G9,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(X9,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(V9,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig"),d(z9,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config"),d(W9,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Q9,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(H9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig"),d(U9,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig"),d(J9,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig"),d(Y9,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(K9,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Z9,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(eB,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagConfig"),d(oB,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmConfig"),d(rB,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig"),d(tB,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig"),d(aB,"href","/docs/transformers/master/en/model_doc/resnet#transformers.ResNetConfig"),d(sB,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig"),d(nB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig"),d(lB,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig"),d(iB,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig"),d(dB,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig"),d(cB,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig"),d(mB,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(fB,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(gB,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(hB,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig"),d(uB,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(pB,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig"),d(_B,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Config"),d(bB,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig"),d(vB,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(TB,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"),d(FB,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(CB,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(MB,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig"),d(EB,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(yB,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(wB,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(AB,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig"),d(LB,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(BB,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(xB,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig"),d(kB,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig"),d(RB,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig"),d(SB,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(PB,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d($B,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(IB,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig"),d(jB,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(xg,"class","docstring"),d(Wo,"class","docstring"),d(kg,"id","transformers.AutoTokenizer"),d(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(DB,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(NB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizer"),d(qB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(OB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),d(GB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizerFast"),d(XB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizer"),d(VB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(zB,"href","/docs/transformers/master/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(WB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),d(QB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),d(HB,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(UB,"href","/docs/transformers/master/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(JB,"href","/docs/transformers/master/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(YB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(KB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(ZB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ex,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(ox,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(rx,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(tx,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(ax,"href","/docs/transformers/master/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(sx,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),d(nx,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(lx,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineTokenizer"),d(ix,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizer"),d(dx,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(cx,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(mx,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(fx,"href","/docs/transformers/master/en/model_doc/cpm#transformers.CpmTokenizer"),d(gx,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(hx,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizer"),d(ux,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(px,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(_x,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(bx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(vx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Tx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Fx,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizer"),d(Cx,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Mx,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Ex,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizer"),d(yx,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(wx,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Ax,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Lx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Bx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(xx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(kx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Rx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Sx,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Px,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d($x,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Ix,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(jx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Dx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Nx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(qx,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Ox,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Gx,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Xx,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Vx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizer"),d(zx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizerFast"),d(Wx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizer"),d(Qx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(Hx,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeTokenizer"),d(Ux,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(Jx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(Yx,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(Kx,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianTokenizer"),d(Zx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizer"),d(ek,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ok,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(rk,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(tk,"href","/docs/transformers/master/en/model_doc/mluke#transformers.MLukeTokenizer"),d(ak,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(sk,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(nk,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(lk,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(ik,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),d(dk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ck,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(mk,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(fk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(gk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(hk,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(uk,"href","/docs/transformers/master/en/model_doc/phobert#transformers.PhobertTokenizer"),d(pk,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartTokenizer"),d(_k,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(bk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),d(vk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),d(Tk,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagTokenizer"),d(Fk,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizer"),d(Ck,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Mk,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Ek,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(yk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizer"),d(wk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Ak,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Lk,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Bk,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(xk,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(kk,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Rk,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Sk,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Pk,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d($k,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Ik,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(jk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Dk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Nk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),d(qk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Ok,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasTokenizer"),d(Gk,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Xk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Vk,"href","/docs/transformers/master/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(zk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizer"),d(Wk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(Qk,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMTokenizer"),d(Hk,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(Uk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(Jk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(Yk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(Kk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(lh,"class","docstring"),d(Qo,"class","docstring"),d(ih,"id","transformers.AutoFeatureExtractor"),d(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ih,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(Zk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(eR,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(oR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(rR,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(tR,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(aR,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(sR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(nR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(lR,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(iR,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(dR,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(cR,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(mR,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(fR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(gR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(hR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(uR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(pR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(Ah,"class","docstring"),d(Ho,"class","docstring"),d(Lh,"id","transformers.AutoProcessor"),d(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(_R,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(bR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPProcessor"),d(vR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(TR,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(FR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(CR,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(MR,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),d(ER,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(yR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(je,"class","docstring"),d(Dh,"class","docstring"),d(Uo,"class","docstring"),d(Nh,"id","transformers.AutoModel"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(wR,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel"),d(AR,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartModel"),d(LR,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitModel"),d(BR,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),d(xR,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(kR,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel"),d(RR,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(SR,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(PR,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d($R,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel"),d(IR,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineModel"),d(jR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel"),d(DR,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel"),d(NR,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel"),d(qR,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel"),d(OR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(GR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(XR,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel"),d(VR,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(zR,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel"),d(WR,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrModel"),d(QR,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel"),d(HR,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(UR,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel"),d(JR,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel"),d(YR,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel"),d(KR,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel"),d(ZR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel"),d(eS,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel"),d(oS,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model"),d(rS,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(tS,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel"),d(aS,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel"),d(sS,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel"),d(nS,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(lS,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(iS,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(dS,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDModel"),d(cS,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel"),d(mS,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeModel"),d(fS,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel"),d(gS,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model"),d(hS,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianModel"),d(uS,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel"),d(pS,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel"),d(_S,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(bS,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel"),d(vS,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel"),d(TS,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model"),d(FS,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel"),d(CS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(MS,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel"),d(ES,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel"),d(yS,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel"),d(wS,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AS,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(LS,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel"),d(BS,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel"),d(xS,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel"),d(kS,"href","/docs/transformers/master/en/model_doc/resnet#transformers.ResNetModel"),d(RS,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),d(SS,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel"),d(PS,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel"),d($S,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel"),d(IS,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWModel"),d(jS,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel"),d(DS,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(NS,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel"),d(qS,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(OS,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinModel"),d(GS,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Model"),d(XS,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel"),d(VS,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(zS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel"),d(WS,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(QS,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel"),d(HS,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(US,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel"),d(JS,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTModel"),d(YS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(KS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(ZS,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel"),d(eP,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel"),d(oP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel"),d(rP,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(tP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(aP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(sP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel"),d(nP,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(Tp,"id","transformers.AutoModelForPreTraining"),d(Tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tp,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(lP,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining"),d(iP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(dP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining"),d(cP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(mP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(fP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(gP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(hP,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(uP,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(pP,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(_P,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining"),d(bP,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(vP,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining"),d(TP,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(FP,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(CP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(MP,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(EP,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(yP,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(wP,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(AP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(LP,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(BP,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(xP,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(kP,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),d(RP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(SP,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(PP,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($P,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(IP,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(jP,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(DP,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(NP,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(qP,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(OP,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(GP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(XP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(VP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(zP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(l_,"id","transformers.AutoModelForCausalLM"),d(l_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l_,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(WP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM"),d(QP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel"),d(HP,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(UP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(JP,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(YP,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(KP,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(ZP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(e$,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(o$,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(r$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM"),d(t$,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(a$,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(s$,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(n$,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM"),d(l$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM"),d(i$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(d$,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(c$,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(m$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(f$,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(g$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(h$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(u$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(p$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(_$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(b$,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(v$,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(T$,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(F$,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(C$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(M$,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(E$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(y$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(w$,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(V_,"id","transformers.AutoModelForMaskedLM"),d(V_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V_,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(A$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(L$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(B$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM"),d(x$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(k$,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(R$,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(S$,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(P$,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d($$,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(I$,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(j$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(D$,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(N$,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(q$,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(O$,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(G$,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(X$,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(V$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(z$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(W$,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Q$,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(H$,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(U$,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(J$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Y$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(K$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(Z$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eI,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oI,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rI,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tI,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aI,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(sI,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nI,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Oe,"class","docstring"),d(Zo,"class","docstring"),d(Ab,"id","transformers.AutoModelForSeq2SeqLM"),d(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ab,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(lI,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(iI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(dI,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(cI,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(mI,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(fI,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(gI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(hI,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(uI,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel"),d(pI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(_I,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(bI,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(vI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(TI,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(FI,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(CI,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(zb,"id","transformers.AutoModelForSequenceClassification"),d(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zb,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(MI,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(EI,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yI,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification"),d(wI,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(AI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(LI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(BI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(xI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(kI,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(RI,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(SI,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(PI,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d($I,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(II,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(jI,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(DI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(NI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(qI,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(OI,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(GI,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(XI,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(VI,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(zI,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(WI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification"),d(QI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(HI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(UI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(JI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(YI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(KI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(ZI,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(ej,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(oj,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(rj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(tj,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(aj,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(sj,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(nj,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(lj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(ij,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(dj,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(cj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(mj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(fj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(gj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(hj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(N2,"id","transformers.AutoModelForMultipleChoice"),d(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N2,"href","#transformers.AutoModelForMultipleChoice"),d(ud,"class","relative group"),d(Jr,"class","docstring"),d(uj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(pj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice"),d(_j,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(bj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(vj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Tj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Fj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Cj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Mj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Ej,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(yj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(wj,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Aj,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Lj,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Bj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(xj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(kj,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Rj,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Sj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Pj,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d($j,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Ij,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(jj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Dj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Nj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(qj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Oj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Gj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(uv,"id","transformers.AutoModelForNextSentencePrediction"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(Xj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Vj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(zj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Wj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Qj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(Cv,"id","transformers.AutoModelForTokenClassification"),d(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cv,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(Hj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Uj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification"),d(Jj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Yj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Kj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Zj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(eD,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(oD,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(rD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(tD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(aD,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(sD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(nD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(lD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(iD,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(dD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(cD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(mD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(fD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(gD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(hD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(uD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(pD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(_D,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(bD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(vD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(TD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(FD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(CD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(MD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(ED,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(yD,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(wD,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(tT,"id","transformers.AutoModelForQuestionAnswering"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(AD,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(LD,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(BD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(xD,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(kD,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(RD,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(SD,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(PD,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d($D,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ID,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(jD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(DD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(ND,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(qD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(OD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(GD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(XD,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(VD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(zD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(WD,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(QD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(HD,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(UD,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(JD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(YD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(KD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(ZD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(eN,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(oN,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(rN,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(tN,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(aN,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(sN,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(nN,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(lN,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(iN,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(dN,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(cN,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(mN,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(VT,"id","transformers.AutoModelForTableQuestionAnswering"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(fN,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(nr,"class","docstring"),d(QT,"id","transformers.AutoModelForImageClassification"),d(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QT,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(gN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification"),d(hN,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(uN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification"),d(pN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(_N,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(bN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(vN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(TN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(FN,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(CN,"href","/docs/transformers/master/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(MN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(EN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification"),d(yN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(t1,"id","transformers.AutoModelForVision2Seq"),d(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t1,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(wN,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(n1,"id","transformers.AutoModelForAudioClassification"),d(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n1,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(AN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(LN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(BN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(xN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(kN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(RN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(SN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(PN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(p1,"id","transformers.AutoModelForAudioFrameClassification"),d(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p1,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d($N,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(IN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(jN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(DN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(C1,"id","transformers.AutoModelForCTC"),d(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C1,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(st,"class","docstring"),d(NN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(qN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC"),d(ON,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC"),d(GN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC"),d(XN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(VN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(zN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(WN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(R1,"id","transformers.AutoModelForSpeechSeq2Seq"),d(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R1,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(nt,"class","docstring"),d(QN,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(HN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(fr,"class","docstring"),d(I1,"id","transformers.AutoModelForAudioXVector"),d(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I1,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(UN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(JN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(YN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(KN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(G1,"id","transformers.AutoModelForMaskedImageModeling"),d(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G1,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(ZN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(eq,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(oq,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(Q1,"id","transformers.AutoModelForObjectDetection"),d(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q1,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(rq,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(ur,"class","docstring"),d(J1,"id","transformers.AutoModelForImageSegmentation"),d(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J1,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(tq,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(pr,"class","docstring"),d(Z1,"id","transformers.AutoModelForSemanticSegmentation"),d(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z1,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(mt,"class","docstring"),d(aq,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(sq,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(so,"class","docstring"),d(_r,"class","docstring"),d(tF,"id","transformers.AutoModelForInstanceSegmentation"),d(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(ft,"class","docstring"),d(nq,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(nF,"id","transformers.TFAutoModel"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(lq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel"),d(iq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel"),d(dq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel"),d(cq,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(mq,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(fq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel"),d(gq,"href","/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel"),d(hq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel"),d(uq,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel"),d(pq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel"),d(_q,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel"),d(bq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(vq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Tq,"href","/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Fq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel"),d(Cq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Mq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel"),d(Eq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(yq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model"),d(wq,"href","/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel"),d(Aq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Lq,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel"),d(Bq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel"),d(xq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel"),d(kq,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel"),d(Rq,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel"),d(Sq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Pq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel"),d($q,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model"),d(Iq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(jq,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Dq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel"),d(Nq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel"),d(qq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Oq,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Gq,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model"),d(Xq,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel"),d(Vq,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(zq,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel"),d(Wq,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(Qq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel"),d(Hq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(Uq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(HF,"id","transformers.TFAutoModelForPreTraining"),d(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HF,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(ht,"class","docstring"),d(Jq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(Yq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Kq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining"),d(Zq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(eO,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(oO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(tO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(sO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(nO,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(lO,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(iO,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(dO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(cO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(mO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(gO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(hO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(uO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(pO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(_O,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(Tr,"class","docstring"),d(_C,"id","transformers.TFAutoModelForCausalLM"),d(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_C,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(ut,"class","docstring"),d(bO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(vO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(TO,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(FO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(MO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(EO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(yO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(wO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(AO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(LO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Fr,"class","docstring"),d(BC,"id","transformers.TFAutoModelForImageClassification"),d(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BC,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(pt,"class","docstring"),d(BO,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(xO,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(Cr,"class","docstring"),d(RC,"id","transformers.TFAutoModelForMaskedLM"),d(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RC,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(_t,"class","docstring"),d(kO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(RO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(SO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(PO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d($O,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(IO,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(jO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(DO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(NO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(qO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(OO,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(GO,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(XO,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(VO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(zO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(WO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(QO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(HO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(UO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(ZC,"id","transformers.TFAutoModelForSeq2SeqLM"),d(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZC,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(YO,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(KO,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(ZO,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(eG,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(oG,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(rG,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel"),d(tG,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(aG,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(sG,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(nG,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(cM,"id","transformers.TFAutoModelForSequenceClassification"),d(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cM,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(lG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(iG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(dG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(cG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(mG,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(fG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(gG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(hG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(uG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(pG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(_G,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(bG,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(vG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(TG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(FG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(CG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(MG,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(EG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(yG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(wG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(AG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(LG,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(BG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(xG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(kG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(IM,"id","transformers.TFAutoModelForMultipleChoice"),d(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IM,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(RG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(SG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(PG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d($G,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(IG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(jG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(DG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(NG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(qG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(OG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(GG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(XG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(VG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(zG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(WG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(QG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(HG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(e4,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Ft,"class","docstring"),d(UG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(r4,"id","transformers.TFAutoModelForTokenClassification"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(JG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(YG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(KG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(ZG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(eX,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(oX,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(rX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(tX,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(aX,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(sX,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(nX,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(lX,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(iX,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(dX,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(cX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(mX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(fX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(gX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(hX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(uX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(M4,"id","transformers.TFAutoModelForQuestionAnswering"),d(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M4,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(pX,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(_X,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(bX,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(vX,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(TX,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(FX,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(CX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(MX,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(EX,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(yX,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(wX,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(AX,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(LX,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(BX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(xX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(kX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(RX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(SX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(PX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(X4,"id","transformers.TFAutoModelForVision2Seq"),d(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X4,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d($X,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(z4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(IX,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(Q4,"id","transformers.FlaxAutoModel"),d(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q4,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(jX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel"),d(DX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel"),d(NX,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel"),d(qX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel"),d(OX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(GX,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(XX,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(VX,"href","/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel"),d(zX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(WX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel"),d(QX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(HX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(UX,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(JX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel"),d(YX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel"),d(KX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model"),d(ZX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(eV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(oV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(rV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model"),d(tV,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(aV,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel"),d(sV,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(nV,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(lV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(vE,"id","transformers.FlaxAutoModelForCausalLM"),d(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vE,"href","#transformers.FlaxAutoModelForCausalLM"),d(om,"class","relative group"),d(At,"class","docstring"),d(iV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(dV,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(cV,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(mV,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(fV,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(yE,"id","transformers.FlaxAutoModelForPreTraining"),d(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yE,"href","#transformers.FlaxAutoModelForPreTraining"),d(am,"class","relative group"),d(Lt,"class","docstring"),d(gV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(hV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(uV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(pV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(_V,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(bV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(vV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(TV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(FV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(CV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(MV,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(EV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(DE,"id","transformers.FlaxAutoModelForMaskedLM"),d(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lm,"class","relative group"),d(Bt,"class","docstring"),d(yV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(wV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(AV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(LV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(BV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(xV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(kV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(UE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cm,"class","relative group"),d(xt,"class","docstring"),d($V,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(IV,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(jV,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(DV,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(NV,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(qV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(OV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(XV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(s3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gm,"class","relative group"),d(kt,"class","docstring"),d(VV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(zV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(WV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(QV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(HV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(UV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(JV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(YV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(KV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ZV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(p3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pm,"class","relative group"),d(Rt,"class","docstring"),d(ez,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(oz,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(rz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(tz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(az,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(sz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(nz,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(lz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(iz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(dz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(A3,"id","transformers.FlaxAutoModelForTokenClassification"),d(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vm,"class","relative group"),d(St,"class","docstring"),d(cz,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(mz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(fz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(gz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(hz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(uz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(pz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(_z,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Nr,"class","docstring"),d(I3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cm,"class","relative group"),d(Pt,"class","docstring"),d(bz,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(vz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Tz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Fz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Cz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Mz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Ez,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(yz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(z3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(ym,"class","relative group"),d($t,"class","docstring"),d(wz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Or,"class","docstring"),d(Q3,"id","transformers.FlaxAutoModelForImageClassification"),d(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q3,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lm,"class","relative group"),d(It,"class","docstring"),d(Az,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Lz,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Gr,"class","docstring"),d(J3,"id","transformers.FlaxAutoModelForVision2Seq"),d(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(km,"class","relative group"),d(jt,"class","docstring"),d(Bz,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,_){e(document.head,J),b(c,$e,_),b(c,de,_),e(de,he),e(he,io),g(me,io,null),e(de,Ce),e(de,Vo),e(Vo,ji),b(c,$m,_),b(c,ma,_),e(ma,Di),e(ma,Ni),e(Ni,Y5),e(ma,Im),b(c,Be,_),b(c,co,_),e(co,qi),e(co,qs),e(qs,K5),e(co,Os),e(co,Gs),e(Gs,Z5),e(co,Oi),e(co,Xs),e(Xs,ey),e(co,Gi),b(c,jm,_),g(qa,c,_),b(c,mo,_),b(c,ue,_),e(ue,V8),e(ue,Xi),e(Xi,z8),e(ue,W8),b(c,zo,_),b(c,Oa,_),e(Oa,Q8),e(Oa,Dm),e(Dm,H8),e(Oa,IPe),b(c,Cxe,_),b(c,Vi,_),e(Vi,Nm),e(Nm,CQ),g(oy,CQ,null),e(Vi,jPe),e(Vi,MQ),e(MQ,DPe),b(c,Mxe,_),b(c,Vs,_),e(Vs,NPe),e(Vs,EQ),e(EQ,qPe),e(Vs,OPe),e(Vs,yQ),e(yQ,GPe),e(Vs,XPe),b(c,Exe,_),g(ry,c,_),b(c,yxe,_),b(c,U8,_),e(U8,VPe),b(c,wxe,_),g(qm,c,_),b(c,Axe,_),b(c,zi,_),e(zi,Om),e(Om,wQ),g(ty,wQ,null),e(zi,zPe),e(zi,AQ),e(AQ,WPe),b(c,Lxe,_),b(c,Wo,_),g(ay,Wo,null),e(Wo,QPe),e(Wo,sy),e(sy,HPe),e(sy,J8),e(J8,UPe),e(sy,JPe),e(Wo,YPe),e(Wo,ny),e(ny,KPe),e(ny,LQ),e(LQ,ZPe),e(ny,e$e),e(Wo,o$e),e(Wo,fo),g(ly,fo,null),e(fo,r$e),e(fo,BQ),e(BQ,t$e),e(fo,a$e),e(fo,Wi),e(Wi,s$e),e(Wi,xQ),e(xQ,n$e),e(Wi,l$e),e(Wi,kQ),e(kQ,i$e),e(Wi,d$e),e(fo,c$e),e(fo,v),e(v,Gm),e(Gm,RQ),e(RQ,m$e),e(Gm,f$e),e(Gm,Y8),e(Y8,g$e),e(Gm,h$e),e(v,u$e),e(v,Xm),e(Xm,SQ),e(SQ,p$e),e(Xm,_$e),e(Xm,K8),e(K8,b$e),e(Xm,v$e),e(v,T$e),e(v,Vm),e(Vm,PQ),e(PQ,F$e),e(Vm,C$e),e(Vm,Z8),e(Z8,M$e),e(Vm,E$e),e(v,y$e),e(v,zm),e(zm,$Q),e($Q,w$e),e(zm,A$e),e(zm,e9),e(e9,L$e),e(zm,B$e),e(v,x$e),e(v,Wm),e(Wm,IQ),e(IQ,k$e),e(Wm,R$e),e(Wm,o9),e(o9,S$e),e(Wm,P$e),e(v,$$e),e(v,Qm),e(Qm,jQ),e(jQ,I$e),e(Qm,j$e),e(Qm,r9),e(r9,D$e),e(Qm,N$e),e(v,q$e),e(v,Hm),e(Hm,DQ),e(DQ,O$e),e(Hm,G$e),e(Hm,t9),e(t9,X$e),e(Hm,V$e),e(v,z$e),e(v,Um),e(Um,NQ),e(NQ,W$e),e(Um,Q$e),e(Um,a9),e(a9,H$e),e(Um,U$e),e(v,J$e),e(v,Jm),e(Jm,qQ),e(qQ,Y$e),e(Jm,K$e),e(Jm,s9),e(s9,Z$e),e(Jm,eIe),e(v,oIe),e(v,Ym),e(Ym,OQ),e(OQ,rIe),e(Ym,tIe),e(Ym,n9),e(n9,aIe),e(Ym,sIe),e(v,nIe),e(v,Km),e(Km,GQ),e(GQ,lIe),e(Km,iIe),e(Km,l9),e(l9,dIe),e(Km,cIe),e(v,mIe),e(v,Zm),e(Zm,XQ),e(XQ,fIe),e(Zm,gIe),e(Zm,i9),e(i9,hIe),e(Zm,uIe),e(v,pIe),e(v,ef),e(ef,VQ),e(VQ,_Ie),e(ef,bIe),e(ef,d9),e(d9,vIe),e(ef,TIe),e(v,FIe),e(v,of),e(of,zQ),e(zQ,CIe),e(of,MIe),e(of,c9),e(c9,EIe),e(of,yIe),e(v,wIe),e(v,rf),e(rf,WQ),e(WQ,AIe),e(rf,LIe),e(rf,m9),e(m9,BIe),e(rf,xIe),e(v,kIe),e(v,tf),e(tf,QQ),e(QQ,RIe),e(tf,SIe),e(tf,f9),e(f9,PIe),e(tf,$Ie),e(v,IIe),e(v,af),e(af,HQ),e(HQ,jIe),e(af,DIe),e(af,g9),e(g9,NIe),e(af,qIe),e(v,OIe),e(v,sf),e(sf,UQ),e(UQ,GIe),e(sf,XIe),e(sf,h9),e(h9,VIe),e(sf,zIe),e(v,WIe),e(v,nf),e(nf,JQ),e(JQ,QIe),e(nf,HIe),e(nf,u9),e(u9,UIe),e(nf,JIe),e(v,YIe),e(v,lf),e(lf,YQ),e(YQ,KIe),e(lf,ZIe),e(lf,p9),e(p9,eje),e(lf,oje),e(v,rje),e(v,df),e(df,KQ),e(KQ,tje),e(df,aje),e(df,_9),e(_9,sje),e(df,nje),e(v,lje),e(v,cf),e(cf,ZQ),e(ZQ,ije),e(cf,dje),e(cf,b9),e(b9,cje),e(cf,mje),e(v,fje),e(v,mf),e(mf,eH),e(eH,gje),e(mf,hje),e(mf,v9),e(v9,uje),e(mf,pje),e(v,_je),e(v,ff),e(ff,oH),e(oH,bje),e(ff,vje),e(ff,T9),e(T9,Tje),e(ff,Fje),e(v,Cje),e(v,gf),e(gf,rH),e(rH,Mje),e(gf,Eje),e(gf,F9),e(F9,yje),e(gf,wje),e(v,Aje),e(v,hf),e(hf,tH),e(tH,Lje),e(hf,Bje),e(hf,C9),e(C9,xje),e(hf,kje),e(v,Rje),e(v,uf),e(uf,aH),e(aH,Sje),e(uf,Pje),e(uf,M9),e(M9,$je),e(uf,Ije),e(v,jje),e(v,pf),e(pf,sH),e(sH,Dje),e(pf,Nje),e(pf,E9),e(E9,qje),e(pf,Oje),e(v,Gje),e(v,_f),e(_f,nH),e(nH,Xje),e(_f,Vje),e(_f,y9),e(y9,zje),e(_f,Wje),e(v,Qje),e(v,bf),e(bf,lH),e(lH,Hje),e(bf,Uje),e(bf,w9),e(w9,Jje),e(bf,Yje),e(v,Kje),e(v,vf),e(vf,iH),e(iH,Zje),e(vf,eDe),e(vf,A9),e(A9,oDe),e(vf,rDe),e(v,tDe),e(v,Tf),e(Tf,dH),e(dH,aDe),e(Tf,sDe),e(Tf,L9),e(L9,nDe),e(Tf,lDe),e(v,iDe),e(v,Ff),e(Ff,cH),e(cH,dDe),e(Ff,cDe),e(Ff,B9),e(B9,mDe),e(Ff,fDe),e(v,gDe),e(v,Cf),e(Cf,mH),e(mH,hDe),e(Cf,uDe),e(Cf,x9),e(x9,pDe),e(Cf,_De),e(v,bDe),e(v,Mf),e(Mf,fH),e(fH,vDe),e(Mf,TDe),e(Mf,k9),e(k9,FDe),e(Mf,CDe),e(v,MDe),e(v,Ef),e(Ef,gH),e(gH,EDe),e(Ef,yDe),e(Ef,R9),e(R9,wDe),e(Ef,ADe),e(v,LDe),e(v,yf),e(yf,hH),e(hH,BDe),e(yf,xDe),e(yf,S9),e(S9,kDe),e(yf,RDe),e(v,SDe),e(v,wf),e(wf,uH),e(uH,PDe),e(wf,$De),e(wf,P9),e(P9,IDe),e(wf,jDe),e(v,DDe),e(v,Af),e(Af,pH),e(pH,NDe),e(Af,qDe),e(Af,$9),e($9,ODe),e(Af,GDe),e(v,XDe),e(v,Lf),e(Lf,_H),e(_H,VDe),e(Lf,zDe),e(Lf,I9),e(I9,WDe),e(Lf,QDe),e(v,HDe),e(v,Bf),e(Bf,bH),e(bH,UDe),e(Bf,JDe),e(Bf,j9),e(j9,YDe),e(Bf,KDe),e(v,ZDe),e(v,xf),e(xf,vH),e(vH,eNe),e(xf,oNe),e(xf,D9),e(D9,rNe),e(xf,tNe),e(v,aNe),e(v,kf),e(kf,TH),e(TH,sNe),e(kf,nNe),e(kf,N9),e(N9,lNe),e(kf,iNe),e(v,dNe),e(v,Rf),e(Rf,FH),e(FH,cNe),e(Rf,mNe),e(Rf,q9),e(q9,fNe),e(Rf,gNe),e(v,hNe),e(v,Sf),e(Sf,CH),e(CH,uNe),e(Sf,pNe),e(Sf,O9),e(O9,_Ne),e(Sf,bNe),e(v,vNe),e(v,Pf),e(Pf,MH),e(MH,TNe),e(Pf,FNe),e(Pf,G9),e(G9,CNe),e(Pf,MNe),e(v,ENe),e(v,$f),e($f,EH),e(EH,yNe),e($f,wNe),e($f,X9),e(X9,ANe),e($f,LNe),e(v,BNe),e(v,If),e(If,yH),e(yH,xNe),e(If,kNe),e(If,V9),e(V9,RNe),e(If,SNe),e(v,PNe),e(v,jf),e(jf,wH),e(wH,$Ne),e(jf,INe),e(jf,z9),e(z9,jNe),e(jf,DNe),e(v,NNe),e(v,Df),e(Df,AH),e(AH,qNe),e(Df,ONe),e(Df,W9),e(W9,GNe),e(Df,XNe),e(v,VNe),e(v,Nf),e(Nf,LH),e(LH,zNe),e(Nf,WNe),e(Nf,Q9),e(Q9,QNe),e(Nf,HNe),e(v,UNe),e(v,qf),e(qf,BH),e(BH,JNe),e(qf,YNe),e(qf,H9),e(H9,KNe),e(qf,ZNe),e(v,eqe),e(v,Of),e(Of,xH),e(xH,oqe),e(Of,rqe),e(Of,U9),e(U9,tqe),e(Of,aqe),e(v,sqe),e(v,Gf),e(Gf,kH),e(kH,nqe),e(Gf,lqe),e(Gf,J9),e(J9,iqe),e(Gf,dqe),e(v,cqe),e(v,Xf),e(Xf,RH),e(RH,mqe),e(Xf,fqe),e(Xf,Y9),e(Y9,gqe),e(Xf,hqe),e(v,uqe),e(v,Vf),e(Vf,SH),e(SH,pqe),e(Vf,_qe),e(Vf,K9),e(K9,bqe),e(Vf,vqe),e(v,Tqe),e(v,zf),e(zf,PH),e(PH,Fqe),e(zf,Cqe),e(zf,Z9),e(Z9,Mqe),e(zf,Eqe),e(v,yqe),e(v,Wf),e(Wf,$H),e($H,wqe),e(Wf,Aqe),e(Wf,eB),e(eB,Lqe),e(Wf,Bqe),e(v,xqe),e(v,Qf),e(Qf,IH),e(IH,kqe),e(Qf,Rqe),e(Qf,oB),e(oB,Sqe),e(Qf,Pqe),e(v,$qe),e(v,Hf),e(Hf,jH),e(jH,Iqe),e(Hf,jqe),e(Hf,rB),e(rB,Dqe),e(Hf,Nqe),e(v,qqe),e(v,Uf),e(Uf,DH),e(DH,Oqe),e(Uf,Gqe),e(Uf,tB),e(tB,Xqe),e(Uf,Vqe),e(v,zqe),e(v,Jf),e(Jf,NH),e(NH,Wqe),e(Jf,Qqe),e(Jf,aB),e(aB,Hqe),e(Jf,Uqe),e(v,Jqe),e(v,Yf),e(Yf,qH),e(qH,Yqe),e(Yf,Kqe),e(Yf,sB),e(sB,Zqe),e(Yf,eOe),e(v,oOe),e(v,Kf),e(Kf,OH),e(OH,rOe),e(Kf,tOe),e(Kf,nB),e(nB,aOe),e(Kf,sOe),e(v,nOe),e(v,Zf),e(Zf,GH),e(GH,lOe),e(Zf,iOe),e(Zf,lB),e(lB,dOe),e(Zf,cOe),e(v,mOe),e(v,eg),e(eg,XH),e(XH,fOe),e(eg,gOe),e(eg,iB),e(iB,hOe),e(eg,uOe),e(v,pOe),e(v,og),e(og,VH),e(VH,_Oe),e(og,bOe),e(og,dB),e(dB,vOe),e(og,TOe),e(v,FOe),e(v,rg),e(rg,zH),e(zH,COe),e(rg,MOe),e(rg,cB),e(cB,EOe),e(rg,yOe),e(v,wOe),e(v,tg),e(tg,WH),e(WH,AOe),e(tg,LOe),e(tg,mB),e(mB,BOe),e(tg,xOe),e(v,kOe),e(v,ag),e(ag,QH),e(QH,ROe),e(ag,SOe),e(ag,fB),e(fB,POe),e(ag,$Oe),e(v,IOe),e(v,sg),e(sg,HH),e(HH,jOe),e(sg,DOe),e(sg,gB),e(gB,NOe),e(sg,qOe),e(v,OOe),e(v,ng),e(ng,UH),e(UH,GOe),e(ng,XOe),e(ng,hB),e(hB,VOe),e(ng,zOe),e(v,WOe),e(v,lg),e(lg,JH),e(JH,QOe),e(lg,HOe),e(lg,uB),e(uB,UOe),e(lg,JOe),e(v,YOe),e(v,ig),e(ig,YH),e(YH,KOe),e(ig,ZOe),e(ig,pB),e(pB,eGe),e(ig,oGe),e(v,rGe),e(v,dg),e(dg,KH),e(KH,tGe),e(dg,aGe),e(dg,_B),e(_B,sGe),e(dg,nGe),e(v,lGe),e(v,cg),e(cg,ZH),e(ZH,iGe),e(cg,dGe),e(cg,bB),e(bB,cGe),e(cg,mGe),e(v,fGe),e(v,mg),e(mg,eU),e(eU,gGe),e(mg,hGe),e(mg,vB),e(vB,uGe),e(mg,pGe),e(v,_Ge),e(v,fg),e(fg,oU),e(oU,bGe),e(fg,vGe),e(fg,TB),e(TB,TGe),e(fg,FGe),e(v,CGe),e(v,gg),e(gg,rU),e(rU,MGe),e(gg,EGe),e(gg,FB),e(FB,yGe),e(gg,wGe),e(v,AGe),e(v,hg),e(hg,tU),e(tU,LGe),e(hg,BGe),e(hg,CB),e(CB,xGe),e(hg,kGe),e(v,RGe),e(v,ug),e(ug,aU),e(aU,SGe),e(ug,PGe),e(ug,MB),e(MB,$Ge),e(ug,IGe),e(v,jGe),e(v,pg),e(pg,sU),e(sU,DGe),e(pg,NGe),e(pg,EB),e(EB,qGe),e(pg,OGe),e(v,GGe),e(v,_g),e(_g,nU),e(nU,XGe),e(_g,VGe),e(_g,yB),e(yB,zGe),e(_g,WGe),e(v,QGe),e(v,bg),e(bg,lU),e(lU,HGe),e(bg,UGe),e(bg,wB),e(wB,JGe),e(bg,YGe),e(v,KGe),e(v,vg),e(vg,iU),e(iU,ZGe),e(vg,eXe),e(vg,AB),e(AB,oXe),e(vg,rXe),e(v,tXe),e(v,Tg),e(Tg,dU),e(dU,aXe),e(Tg,sXe),e(Tg,LB),e(LB,nXe),e(Tg,lXe),e(v,iXe),e(v,Fg),e(Fg,cU),e(cU,dXe),e(Fg,cXe),e(Fg,BB),e(BB,mXe),e(Fg,fXe),e(v,gXe),e(v,Cg),e(Cg,mU),e(mU,hXe),e(Cg,uXe),e(Cg,xB),e(xB,pXe),e(Cg,_Xe),e(v,bXe),e(v,Mg),e(Mg,fU),e(fU,vXe),e(Mg,TXe),e(Mg,kB),e(kB,FXe),e(Mg,CXe),e(v,MXe),e(v,Eg),e(Eg,gU),e(gU,EXe),e(Eg,yXe),e(Eg,RB),e(RB,wXe),e(Eg,AXe),e(v,LXe),e(v,yg),e(yg,hU),e(hU,BXe),e(yg,xXe),e(yg,SB),e(SB,kXe),e(yg,RXe),e(v,SXe),e(v,wg),e(wg,uU),e(uU,PXe),e(wg,$Xe),e(wg,PB),e(PB,IXe),e(wg,jXe),e(v,DXe),e(v,Ag),e(Ag,pU),e(pU,NXe),e(Ag,qXe),e(Ag,$B),e($B,OXe),e(Ag,GXe),e(v,XXe),e(v,Lg),e(Lg,_U),e(_U,VXe),e(Lg,zXe),e(Lg,IB),e(IB,WXe),e(Lg,QXe),e(v,HXe),e(v,Bg),e(Bg,bU),e(bU,UXe),e(Bg,JXe),e(Bg,jB),e(jB,YXe),e(Bg,KXe),e(fo,ZXe),e(fo,vU),e(vU,eVe),e(fo,oVe),g(iy,fo,null),e(Wo,rVe),e(Wo,xg),g(dy,xg,null),e(xg,tVe),e(xg,TU),e(TU,aVe),b(c,Bxe,_),b(c,Qi,_),e(Qi,kg),e(kg,FU),g(cy,FU,null),e(Qi,sVe),e(Qi,CU),e(CU,nVe),b(c,xxe,_),b(c,Qo,_),g(my,Qo,null),e(Qo,lVe),e(Qo,fy),e(fy,iVe),e(fy,DB),e(DB,dVe),e(fy,cVe),e(Qo,mVe),e(Qo,gy),e(gy,fVe),e(gy,MU),e(MU,gVe),e(gy,hVe),e(Qo,uVe),e(Qo,go),g(hy,go,null),e(go,pVe),e(go,EU),e(EU,_Ve),e(go,bVe),e(go,Ga),e(Ga,vVe),e(Ga,yU),e(yU,TVe),e(Ga,FVe),e(Ga,wU),e(wU,CVe),e(Ga,MVe),e(Ga,AU),e(AU,EVe),e(Ga,yVe),e(go,wVe),e(go,E),e(E,zs),e(zs,LU),e(LU,AVe),e(zs,LVe),e(zs,NB),e(NB,BVe),e(zs,xVe),e(zs,qB),e(qB,kVe),e(zs,RVe),e(E,SVe),e(E,Ws),e(Ws,BU),e(BU,PVe),e(Ws,$Ve),e(Ws,OB),e(OB,IVe),e(Ws,jVe),e(Ws,GB),e(GB,DVe),e(Ws,NVe),e(E,qVe),e(E,Qs),e(Qs,xU),e(xU,OVe),e(Qs,GVe),e(Qs,XB),e(XB,XVe),e(Qs,VVe),e(Qs,VB),e(VB,zVe),e(Qs,WVe),e(E,QVe),e(E,Rg),e(Rg,kU),e(kU,HVe),e(Rg,UVe),e(Rg,zB),e(zB,JVe),e(Rg,YVe),e(E,KVe),e(E,Hs),e(Hs,RU),e(RU,ZVe),e(Hs,eze),e(Hs,WB),e(WB,oze),e(Hs,rze),e(Hs,QB),e(QB,tze),e(Hs,aze),e(E,sze),e(E,Sg),e(Sg,SU),e(SU,nze),e(Sg,lze),e(Sg,HB),e(HB,ize),e(Sg,dze),e(E,cze),e(E,Pg),e(Pg,PU),e(PU,mze),e(Pg,fze),e(Pg,UB),e(UB,gze),e(Pg,hze),e(E,uze),e(E,$g),e($g,$U),e($U,pze),e($g,_ze),e($g,JB),e(JB,bze),e($g,vze),e(E,Tze),e(E,Us),e(Us,IU),e(IU,Fze),e(Us,Cze),e(Us,YB),e(YB,Mze),e(Us,Eze),e(Us,KB),e(KB,yze),e(Us,wze),e(E,Aze),e(E,Js),e(Js,jU),e(jU,Lze),e(Js,Bze),e(Js,ZB),e(ZB,xze),e(Js,kze),e(Js,ex),e(ex,Rze),e(Js,Sze),e(E,Pze),e(E,Ys),e(Ys,DU),e(DU,$ze),e(Ys,Ize),e(Ys,ox),e(ox,jze),e(Ys,Dze),e(Ys,rx),e(rx,Nze),e(Ys,qze),e(E,Oze),e(E,Ig),e(Ig,NU),e(NU,Gze),e(Ig,Xze),e(Ig,tx),e(tx,Vze),e(Ig,zze),e(E,Wze),e(E,jg),e(jg,qU),e(qU,Qze),e(jg,Hze),e(jg,ax),e(ax,Uze),e(jg,Jze),e(E,Yze),e(E,Ks),e(Ks,OU),e(OU,Kze),e(Ks,Zze),e(Ks,sx),e(sx,eWe),e(Ks,oWe),e(Ks,nx),e(nx,rWe),e(Ks,tWe),e(E,aWe),e(E,Dg),e(Dg,GU),e(GU,sWe),e(Dg,nWe),e(Dg,lx),e(lx,lWe),e(Dg,iWe),e(E,dWe),e(E,Zs),e(Zs,XU),e(XU,cWe),e(Zs,mWe),e(Zs,ix),e(ix,fWe),e(Zs,gWe),e(Zs,dx),e(dx,hWe),e(Zs,uWe),e(E,pWe),e(E,en),e(en,VU),e(VU,_We),e(en,bWe),e(en,cx),e(cx,vWe),e(en,TWe),e(en,mx),e(mx,FWe),e(en,CWe),e(E,MWe),e(E,on),e(on,zU),e(zU,EWe),e(on,yWe),e(on,fx),e(fx,wWe),e(on,AWe),e(on,WU),e(WU,LWe),e(on,BWe),e(E,xWe),e(E,Ng),e(Ng,QU),e(QU,kWe),e(Ng,RWe),e(Ng,gx),e(gx,SWe),e(Ng,PWe),e(E,$We),e(E,rn),e(rn,HU),e(HU,IWe),e(rn,jWe),e(rn,hx),e(hx,DWe),e(rn,NWe),e(rn,ux),e(ux,qWe),e(rn,OWe),e(E,GWe),e(E,qg),e(qg,UU),e(UU,XWe),e(qg,VWe),e(qg,px),e(px,zWe),e(qg,WWe),e(E,QWe),e(E,tn),e(tn,JU),e(JU,HWe),e(tn,UWe),e(tn,_x),e(_x,JWe),e(tn,YWe),e(tn,bx),e(bx,KWe),e(tn,ZWe),e(E,eQe),e(E,an),e(an,YU),e(YU,oQe),e(an,rQe),e(an,vx),e(vx,tQe),e(an,aQe),e(an,Tx),e(Tx,sQe),e(an,nQe),e(E,lQe),e(E,sn),e(sn,KU),e(KU,iQe),e(sn,dQe),e(sn,Fx),e(Fx,cQe),e(sn,mQe),e(sn,Cx),e(Cx,fQe),e(sn,gQe),e(E,hQe),e(E,Og),e(Og,ZU),e(ZU,uQe),e(Og,pQe),e(Og,Mx),e(Mx,_Qe),e(Og,bQe),e(E,vQe),e(E,nn),e(nn,eJ),e(eJ,TQe),e(nn,FQe),e(nn,Ex),e(Ex,CQe),e(nn,MQe),e(nn,yx),e(yx,EQe),e(nn,yQe),e(E,wQe),e(E,Gg),e(Gg,oJ),e(oJ,AQe),e(Gg,LQe),e(Gg,wx),e(wx,BQe),e(Gg,xQe),e(E,kQe),e(E,ln),e(ln,rJ),e(rJ,RQe),e(ln,SQe),e(ln,Ax),e(Ax,PQe),e(ln,$Qe),e(ln,Lx),e(Lx,IQe),e(ln,jQe),e(E,DQe),e(E,dn),e(dn,tJ),e(tJ,NQe),e(dn,qQe),e(dn,Bx),e(Bx,OQe),e(dn,GQe),e(dn,xx),e(xx,XQe),e(dn,VQe),e(E,zQe),e(E,cn),e(cn,aJ),e(aJ,WQe),e(cn,QQe),e(cn,kx),e(kx,HQe),e(cn,UQe),e(cn,Rx),e(Rx,JQe),e(cn,YQe),e(E,KQe),e(E,mn),e(mn,sJ),e(sJ,ZQe),e(mn,eHe),e(mn,Sx),e(Sx,oHe),e(mn,rHe),e(mn,Px),e(Px,tHe),e(mn,aHe),e(E,sHe),e(E,Xg),e(Xg,nJ),e(nJ,nHe),e(Xg,lHe),e(Xg,$x),e($x,iHe),e(Xg,dHe),e(E,cHe),e(E,fn),e(fn,lJ),e(lJ,mHe),e(fn,fHe),e(fn,Ix),e(Ix,gHe),e(fn,hHe),e(fn,jx),e(jx,uHe),e(fn,pHe),e(E,_He),e(E,gn),e(gn,iJ),e(iJ,bHe),e(gn,vHe),e(gn,Dx),e(Dx,THe),e(gn,FHe),e(gn,Nx),e(Nx,CHe),e(gn,MHe),e(E,EHe),e(E,hn),e(hn,dJ),e(dJ,yHe),e(hn,wHe),e(hn,qx),e(qx,AHe),e(hn,LHe),e(hn,Ox),e(Ox,BHe),e(hn,xHe),e(E,kHe),e(E,un),e(un,cJ),e(cJ,RHe),e(un,SHe),e(un,Gx),e(Gx,PHe),e(un,$He),e(un,Xx),e(Xx,IHe),e(un,jHe),e(E,DHe),e(E,pn),e(pn,mJ),e(mJ,NHe),e(pn,qHe),e(pn,Vx),e(Vx,OHe),e(pn,GHe),e(pn,zx),e(zx,XHe),e(pn,VHe),e(E,zHe),e(E,_n),e(_n,fJ),e(fJ,WHe),e(_n,QHe),e(_n,Wx),e(Wx,HHe),e(_n,UHe),e(_n,Qx),e(Qx,JHe),e(_n,YHe),e(E,KHe),e(E,Vg),e(Vg,gJ),e(gJ,ZHe),e(Vg,eUe),e(Vg,Hx),e(Hx,oUe),e(Vg,rUe),e(E,tUe),e(E,bn),e(bn,hJ),e(hJ,aUe),e(bn,sUe),e(bn,Ux),e(Ux,nUe),e(bn,lUe),e(bn,Jx),e(Jx,iUe),e(bn,dUe),e(E,cUe),e(E,zg),e(zg,uJ),e(uJ,mUe),e(zg,fUe),e(zg,Yx),e(Yx,gUe),e(zg,hUe),e(E,uUe),e(E,Wg),e(Wg,pJ),e(pJ,pUe),e(Wg,_Ue),e(Wg,Kx),e(Kx,bUe),e(Wg,vUe),e(E,TUe),e(E,vn),e(vn,_J),e(_J,FUe),e(vn,CUe),e(vn,Zx),e(Zx,MUe),e(vn,EUe),e(vn,ek),e(ek,yUe),e(vn,wUe),e(E,AUe),e(E,Tn),e(Tn,bJ),e(bJ,LUe),e(Tn,BUe),e(Tn,ok),e(ok,xUe),e(Tn,kUe),e(Tn,rk),e(rk,RUe),e(Tn,SUe),e(E,PUe),e(E,Qg),e(Qg,vJ),e(vJ,$Ue),e(Qg,IUe),e(Qg,tk),e(tk,jUe),e(Qg,DUe),e(E,NUe),e(E,Fn),e(Fn,TJ),e(TJ,qUe),e(Fn,OUe),e(Fn,ak),e(ak,GUe),e(Fn,XUe),e(Fn,sk),e(sk,VUe),e(Fn,zUe),e(E,WUe),e(E,Cn),e(Cn,FJ),e(FJ,QUe),e(Cn,HUe),e(Cn,nk),e(nk,UUe),e(Cn,JUe),e(Cn,lk),e(lk,YUe),e(Cn,KUe),e(E,ZUe),e(E,Mn),e(Mn,CJ),e(CJ,eJe),e(Mn,oJe),e(Mn,ik),e(ik,rJe),e(Mn,tJe),e(Mn,dk),e(dk,aJe),e(Mn,sJe),e(E,nJe),e(E,En),e(En,MJ),e(MJ,lJe),e(En,iJe),e(En,ck),e(ck,dJe),e(En,cJe),e(En,mk),e(mk,mJe),e(En,fJe),e(E,gJe),e(E,yn),e(yn,EJ),e(EJ,hJe),e(yn,uJe),e(yn,fk),e(fk,pJe),e(yn,_Je),e(yn,gk),e(gk,bJe),e(yn,vJe),e(E,TJe),e(E,Hg),e(Hg,yJ),e(yJ,FJe),e(Hg,CJe),e(Hg,hk),e(hk,MJe),e(Hg,EJe),e(E,yJe),e(E,Ug),e(Ug,wJ),e(wJ,wJe),e(Ug,AJe),e(Ug,uk),e(uk,LJe),e(Ug,BJe),e(E,xJe),e(E,Jg),e(Jg,AJ),e(AJ,kJe),e(Jg,RJe),e(Jg,pk),e(pk,SJe),e(Jg,PJe),e(E,$Je),e(E,Yg),e(Yg,LJ),e(LJ,IJe),e(Yg,jJe),e(Yg,_k),e(_k,DJe),e(Yg,NJe),e(E,qJe),e(E,wn),e(wn,BJ),e(BJ,OJe),e(wn,GJe),e(wn,bk),e(bk,XJe),e(wn,VJe),e(wn,vk),e(vk,zJe),e(wn,WJe),e(E,QJe),e(E,Kg),e(Kg,xJ),e(xJ,HJe),e(Kg,UJe),e(Kg,Tk),e(Tk,JJe),e(Kg,YJe),e(E,KJe),e(E,An),e(An,kJ),e(kJ,ZJe),e(An,eYe),e(An,Fk),e(Fk,oYe),e(An,rYe),e(An,Ck),e(Ck,tYe),e(An,aYe),e(E,sYe),e(E,Ln),e(Ln,RJ),e(RJ,nYe),e(Ln,lYe),e(Ln,Mk),e(Mk,iYe),e(Ln,dYe),e(Ln,Ek),e(Ek,cYe),e(Ln,mYe),e(E,fYe),e(E,Bn),e(Bn,SJ),e(SJ,gYe),e(Bn,hYe),e(Bn,yk),e(yk,uYe),e(Bn,pYe),e(Bn,wk),e(wk,_Ye),e(Bn,bYe),e(E,vYe),e(E,xn),e(xn,PJ),e(PJ,TYe),e(xn,FYe),e(xn,Ak),e(Ak,CYe),e(xn,MYe),e(xn,Lk),e(Lk,EYe),e(xn,yYe),e(E,wYe),e(E,kn),e(kn,$J),e($J,AYe),e(kn,LYe),e(kn,Bk),e(Bk,BYe),e(kn,xYe),e(kn,xk),e(xk,kYe),e(kn,RYe),e(E,SYe),e(E,Rn),e(Rn,IJ),e(IJ,PYe),e(Rn,$Ye),e(Rn,kk),e(kk,IYe),e(Rn,jYe),e(Rn,Rk),e(Rk,DYe),e(Rn,NYe),e(E,qYe),e(E,Zg),e(Zg,jJ),e(jJ,OYe),e(Zg,GYe),e(Zg,Sk),e(Sk,XYe),e(Zg,VYe),e(E,zYe),e(E,eh),e(eh,DJ),e(DJ,WYe),e(eh,QYe),e(eh,Pk),e(Pk,HYe),e(eh,UYe),e(E,JYe),e(E,Sn),e(Sn,NJ),e(NJ,YYe),e(Sn,KYe),e(Sn,$k),e($k,ZYe),e(Sn,eKe),e(Sn,Ik),e(Ik,oKe),e(Sn,rKe),e(E,tKe),e(E,Pn),e(Pn,qJ),e(qJ,aKe),e(Pn,sKe),e(Pn,jk),e(jk,nKe),e(Pn,lKe),e(Pn,Dk),e(Dk,iKe),e(Pn,dKe),e(E,cKe),e(E,$n),e($n,OJ),e(OJ,mKe),e($n,fKe),e($n,Nk),e(Nk,gKe),e($n,hKe),e($n,qk),e(qk,uKe),e($n,pKe),e(E,_Ke),e(E,oh),e(oh,GJ),e(GJ,bKe),e(oh,vKe),e(oh,Ok),e(Ok,TKe),e(oh,FKe),e(E,CKe),e(E,rh),e(rh,XJ),e(XJ,MKe),e(rh,EKe),e(rh,Gk),e(Gk,yKe),e(rh,wKe),e(E,AKe),e(E,th),e(th,VJ),e(VJ,LKe),e(th,BKe),e(th,Xk),e(Xk,xKe),e(th,kKe),e(E,RKe),e(E,ah),e(ah,zJ),e(zJ,SKe),e(ah,PKe),e(ah,Vk),e(Vk,$Ke),e(ah,IKe),e(E,jKe),e(E,In),e(In,WJ),e(WJ,DKe),e(In,NKe),e(In,zk),e(zk,qKe),e(In,OKe),e(In,Wk),e(Wk,GKe),e(In,XKe),e(E,VKe),e(E,sh),e(sh,QJ),e(QJ,zKe),e(sh,WKe),e(sh,Qk),e(Qk,QKe),e(sh,HKe),e(E,UKe),e(E,nh),e(nh,HJ),e(HJ,JKe),e(nh,YKe),e(nh,Hk),e(Hk,KKe),e(nh,ZKe),e(E,eZe),e(E,jn),e(jn,UJ),e(UJ,oZe),e(jn,rZe),e(jn,Uk),e(Uk,tZe),e(jn,aZe),e(jn,Jk),e(Jk,sZe),e(jn,nZe),e(E,lZe),e(E,Dn),e(Dn,JJ),e(JJ,iZe),e(Dn,dZe),e(Dn,Yk),e(Yk,cZe),e(Dn,mZe),e(Dn,Kk),e(Kk,fZe),e(Dn,gZe),e(go,hZe),e(go,YJ),e(YJ,uZe),e(go,pZe),g(uy,go,null),e(Qo,_Ze),e(Qo,lh),g(py,lh,null),e(lh,bZe),e(lh,KJ),e(KJ,vZe),b(c,kxe,_),b(c,Hi,_),e(Hi,ih),e(ih,ZJ),g(_y,ZJ,null),e(Hi,TZe),e(Hi,eY),e(eY,FZe),b(c,Rxe,_),b(c,Ho,_),g(by,Ho,null),e(Ho,CZe),e(Ho,vy),e(vy,MZe),e(vy,Zk),e(Zk,EZe),e(vy,yZe),e(Ho,wZe),e(Ho,Ty),e(Ty,AZe),e(Ty,oY),e(oY,LZe),e(Ty,BZe),e(Ho,xZe),e(Ho,Ie),g(Fy,Ie,null),e(Ie,kZe),e(Ie,rY),e(rY,RZe),e(Ie,SZe),e(Ie,Xa),e(Xa,PZe),e(Xa,tY),e(tY,$Ze),e(Xa,IZe),e(Xa,aY),e(aY,jZe),e(Xa,DZe),e(Xa,sY),e(sY,NZe),e(Xa,qZe),e(Ie,OZe),e(Ie,te),e(te,dh),e(dh,nY),e(nY,GZe),e(dh,XZe),e(dh,eR),e(eR,VZe),e(dh,zZe),e(te,WZe),e(te,ch),e(ch,lY),e(lY,QZe),e(ch,HZe),e(ch,oR),e(oR,UZe),e(ch,JZe),e(te,YZe),e(te,mh),e(mh,iY),e(iY,KZe),e(mh,ZZe),e(mh,rR),e(rR,eeo),e(mh,oeo),e(te,reo),e(te,fh),e(fh,dY),e(dY,teo),e(fh,aeo),e(fh,tR),e(tR,seo),e(fh,neo),e(te,leo),e(te,gh),e(gh,cY),e(cY,ieo),e(gh,deo),e(gh,aR),e(aR,ceo),e(gh,meo),e(te,feo),e(te,hh),e(hh,mY),e(mY,geo),e(hh,heo),e(hh,sR),e(sR,ueo),e(hh,peo),e(te,_eo),e(te,uh),e(uh,fY),e(fY,beo),e(uh,veo),e(uh,nR),e(nR,Teo),e(uh,Feo),e(te,Ceo),e(te,ph),e(ph,gY),e(gY,Meo),e(ph,Eeo),e(ph,lR),e(lR,yeo),e(ph,weo),e(te,Aeo),e(te,_h),e(_h,hY),e(hY,Leo),e(_h,Beo),e(_h,iR),e(iR,xeo),e(_h,keo),e(te,Reo),e(te,bh),e(bh,uY),e(uY,Seo),e(bh,Peo),e(bh,dR),e(dR,$eo),e(bh,Ieo),e(te,jeo),e(te,vh),e(vh,pY),e(pY,Deo),e(vh,Neo),e(vh,cR),e(cR,qeo),e(vh,Oeo),e(te,Geo),e(te,Th),e(Th,_Y),e(_Y,Xeo),e(Th,Veo),e(Th,mR),e(mR,zeo),e(Th,Weo),e(te,Qeo),e(te,Fh),e(Fh,bY),e(bY,Heo),e(Fh,Ueo),e(Fh,fR),e(fR,Jeo),e(Fh,Yeo),e(te,Keo),e(te,Ch),e(Ch,vY),e(vY,Zeo),e(Ch,eoo),e(Ch,gR),e(gR,ooo),e(Ch,roo),e(te,too),e(te,Mh),e(Mh,TY),e(TY,aoo),e(Mh,soo),e(Mh,hR),e(hR,noo),e(Mh,loo),e(te,ioo),e(te,Eh),e(Eh,FY),e(FY,doo),e(Eh,coo),e(Eh,uR),e(uR,moo),e(Eh,foo),e(te,goo),e(te,yh),e(yh,CY),e(CY,hoo),e(yh,uoo),e(yh,pR),e(pR,poo),e(yh,_oo),e(Ie,boo),g(wh,Ie,null),e(Ie,voo),e(Ie,MY),e(MY,Too),e(Ie,Foo),g(Cy,Ie,null),e(Ho,Coo),e(Ho,Ah),g(My,Ah,null),e(Ah,Moo),e(Ah,EY),e(EY,Eoo),b(c,Sxe,_),b(c,Ui,_),e(Ui,Lh),e(Lh,yY),g(Ey,yY,null),e(Ui,yoo),e(Ui,wY),e(wY,woo),b(c,Pxe,_),b(c,Uo,_),g(yy,Uo,null),e(Uo,Aoo),e(Uo,wy),e(wy,Loo),e(wy,_R),e(_R,Boo),e(wy,xoo),e(Uo,koo),e(Uo,Ay),e(Ay,Roo),e(Ay,AY),e(AY,Soo),e(Ay,Poo),e(Uo,$oo),e(Uo,je),g(Ly,je,null),e(je,Ioo),e(je,LY),e(LY,joo),e(je,Doo),e(je,Ji),e(Ji,Noo),e(Ji,BY),e(BY,qoo),e(Ji,Ooo),e(Ji,xY),e(xY,Goo),e(Ji,Xoo),e(je,Voo),e(je,xe),e(xe,Bh),e(Bh,kY),e(kY,zoo),e(Bh,Woo),e(Bh,bR),e(bR,Qoo),e(Bh,Hoo),e(xe,Uoo),e(xe,xh),e(xh,RY),e(RY,Joo),e(xh,Yoo),e(xh,vR),e(vR,Koo),e(xh,Zoo),e(xe,ero),e(xe,kh),e(kh,SY),e(SY,oro),e(kh,rro),e(kh,TR),e(TR,tro),e(kh,aro),e(xe,sro),e(xe,Rh),e(Rh,PY),e(PY,nro),e(Rh,lro),e(Rh,FR),e(FR,iro),e(Rh,dro),e(xe,cro),e(xe,Sh),e(Sh,$Y),e($Y,mro),e(Sh,fro),e(Sh,CR),e(CR,gro),e(Sh,hro),e(xe,uro),e(xe,Ph),e(Ph,IY),e(IY,pro),e(Ph,_ro),e(Ph,MR),e(MR,bro),e(Ph,vro),e(xe,Tro),e(xe,$h),e($h,jY),e(jY,Fro),e($h,Cro),e($h,ER),e(ER,Mro),e($h,Ero),e(xe,yro),e(xe,Ih),e(Ih,DY),e(DY,wro),e(Ih,Aro),e(Ih,yR),e(yR,Lro),e(Ih,Bro),e(je,xro),g(jh,je,null),e(je,kro),e(je,NY),e(NY,Rro),e(je,Sro),g(By,je,null),e(Uo,Pro),e(Uo,Dh),g(xy,Dh,null),e(Dh,$ro),e(Dh,qY),e(qY,Iro),b(c,$xe,_),b(c,Yi,_),e(Yi,Nh),e(Nh,OY),g(ky,OY,null),e(Yi,jro),e(Yi,GY),e(GY,Dro),b(c,Ixe,_),b(c,Jo,_),g(Ry,Jo,null),e(Jo,Nro),e(Jo,Ki),e(Ki,qro),e(Ki,XY),e(XY,Oro),e(Ki,Gro),e(Ki,VY),e(VY,Xro),e(Ki,Vro),e(Jo,zro),e(Jo,Sy),e(Sy,Wro),e(Sy,zY),e(zY,Qro),e(Sy,Hro),e(Jo,Uro),e(Jo,Vr),g(Py,Vr,null),e(Vr,Jro),e(Vr,WY),e(WY,Yro),e(Vr,Kro),e(Vr,Zi),e(Zi,Zro),e(Zi,QY),e(QY,eto),e(Zi,oto),e(Zi,HY),e(HY,rto),e(Zi,tto),e(Vr,ato),e(Vr,UY),e(UY,sto),e(Vr,nto),g($y,Vr,null),e(Jo,lto),e(Jo,De),g(Iy,De,null),e(De,ito),e(De,JY),e(JY,dto),e(De,cto),e(De,Va),e(Va,mto),e(Va,YY),e(YY,fto),e(Va,gto),e(Va,KY),e(KY,hto),e(Va,uto),e(Va,ZY),e(ZY,pto),e(Va,_to),e(De,bto),e(De,F),e(F,qh),e(qh,eK),e(eK,vto),e(qh,Tto),e(qh,wR),e(wR,Fto),e(qh,Cto),e(F,Mto),e(F,Oh),e(Oh,oK),e(oK,Eto),e(Oh,yto),e(Oh,AR),e(AR,wto),e(Oh,Ato),e(F,Lto),e(F,Gh),e(Gh,rK),e(rK,Bto),e(Gh,xto),e(Gh,LR),e(LR,kto),e(Gh,Rto),e(F,Sto),e(F,Xh),e(Xh,tK),e(tK,Pto),e(Xh,$to),e(Xh,BR),e(BR,Ito),e(Xh,jto),e(F,Dto),e(F,Vh),e(Vh,aK),e(aK,Nto),e(Vh,qto),e(Vh,xR),e(xR,Oto),e(Vh,Gto),e(F,Xto),e(F,zh),e(zh,sK),e(sK,Vto),e(zh,zto),e(zh,kR),e(kR,Wto),e(zh,Qto),e(F,Hto),e(F,Wh),e(Wh,nK),e(nK,Uto),e(Wh,Jto),e(Wh,RR),e(RR,Yto),e(Wh,Kto),e(F,Zto),e(F,Qh),e(Qh,lK),e(lK,eao),e(Qh,oao),e(Qh,SR),e(SR,rao),e(Qh,tao),e(F,aao),e(F,Hh),e(Hh,iK),e(iK,sao),e(Hh,nao),e(Hh,PR),e(PR,lao),e(Hh,iao),e(F,dao),e(F,Uh),e(Uh,dK),e(dK,cao),e(Uh,mao),e(Uh,$R),e($R,fao),e(Uh,gao),e(F,hao),e(F,Jh),e(Jh,cK),e(cK,uao),e(Jh,pao),e(Jh,IR),e(IR,_ao),e(Jh,bao),e(F,vao),e(F,Yh),e(Yh,mK),e(mK,Tao),e(Yh,Fao),e(Yh,jR),e(jR,Cao),e(Yh,Mao),e(F,Eao),e(F,Kh),e(Kh,fK),e(fK,yao),e(Kh,wao),e(Kh,DR),e(DR,Aao),e(Kh,Lao),e(F,Bao),e(F,Zh),e(Zh,gK),e(gK,xao),e(Zh,kao),e(Zh,NR),e(NR,Rao),e(Zh,Sao),e(F,Pao),e(F,eu),e(eu,hK),e(hK,$ao),e(eu,Iao),e(eu,qR),e(qR,jao),e(eu,Dao),e(F,Nao),e(F,ou),e(ou,uK),e(uK,qao),e(ou,Oao),e(ou,OR),e(OR,Gao),e(ou,Xao),e(F,Vao),e(F,ru),e(ru,pK),e(pK,zao),e(ru,Wao),e(ru,GR),e(GR,Qao),e(ru,Hao),e(F,Uao),e(F,tu),e(tu,_K),e(_K,Jao),e(tu,Yao),e(tu,XR),e(XR,Kao),e(tu,Zao),e(F,eso),e(F,au),e(au,bK),e(bK,oso),e(au,rso),e(au,VR),e(VR,tso),e(au,aso),e(F,sso),e(F,su),e(su,vK),e(vK,nso),e(su,lso),e(su,zR),e(zR,iso),e(su,dso),e(F,cso),e(F,nu),e(nu,TK),e(TK,mso),e(nu,fso),e(nu,WR),e(WR,gso),e(nu,hso),e(F,uso),e(F,lu),e(lu,FK),e(FK,pso),e(lu,_so),e(lu,QR),e(QR,bso),e(lu,vso),e(F,Tso),e(F,iu),e(iu,CK),e(CK,Fso),e(iu,Cso),e(iu,HR),e(HR,Mso),e(iu,Eso),e(F,yso),e(F,du),e(du,MK),e(MK,wso),e(du,Aso),e(du,UR),e(UR,Lso),e(du,Bso),e(F,xso),e(F,cu),e(cu,EK),e(EK,kso),e(cu,Rso),e(cu,JR),e(JR,Sso),e(cu,Pso),e(F,$so),e(F,mu),e(mu,yK),e(yK,Iso),e(mu,jso),e(mu,YR),e(YR,Dso),e(mu,Nso),e(F,qso),e(F,fu),e(fu,wK),e(wK,Oso),e(fu,Gso),e(fu,KR),e(KR,Xso),e(fu,Vso),e(F,zso),e(F,Nn),e(Nn,AK),e(AK,Wso),e(Nn,Qso),e(Nn,ZR),e(ZR,Hso),e(Nn,Uso),e(Nn,eS),e(eS,Jso),e(Nn,Yso),e(F,Kso),e(F,gu),e(gu,LK),e(LK,Zso),e(gu,eno),e(gu,oS),e(oS,ono),e(gu,rno),e(F,tno),e(F,hu),e(hu,BK),e(BK,ano),e(hu,sno),e(hu,rS),e(rS,nno),e(hu,lno),e(F,ino),e(F,uu),e(uu,xK),e(xK,dno),e(uu,cno),e(uu,tS),e(tS,mno),e(uu,fno),e(F,gno),e(F,pu),e(pu,kK),e(kK,hno),e(pu,uno),e(pu,aS),e(aS,pno),e(pu,_no),e(F,bno),e(F,_u),e(_u,RK),e(RK,vno),e(_u,Tno),e(_u,sS),e(sS,Fno),e(_u,Cno),e(F,Mno),e(F,bu),e(bu,SK),e(SK,Eno),e(bu,yno),e(bu,nS),e(nS,wno),e(bu,Ano),e(F,Lno),e(F,vu),e(vu,PK),e(PK,Bno),e(vu,xno),e(vu,lS),e(lS,kno),e(vu,Rno),e(F,Sno),e(F,Tu),e(Tu,$K),e($K,Pno),e(Tu,$no),e(Tu,iS),e(iS,Ino),e(Tu,jno),e(F,Dno),e(F,Fu),e(Fu,IK),e(IK,Nno),e(Fu,qno),e(Fu,dS),e(dS,Ono),e(Fu,Gno),e(F,Xno),e(F,Cu),e(Cu,jK),e(jK,Vno),e(Cu,zno),e(Cu,cS),e(cS,Wno),e(Cu,Qno),e(F,Hno),e(F,Mu),e(Mu,DK),e(DK,Uno),e(Mu,Jno),e(Mu,mS),e(mS,Yno),e(Mu,Kno),e(F,Zno),e(F,Eu),e(Eu,NK),e(NK,elo),e(Eu,olo),e(Eu,fS),e(fS,rlo),e(Eu,tlo),e(F,alo),e(F,yu),e(yu,qK),e(qK,slo),e(yu,nlo),e(yu,gS),e(gS,llo),e(yu,ilo),e(F,dlo),e(F,wu),e(wu,OK),e(OK,clo),e(wu,mlo),e(wu,hS),e(hS,flo),e(wu,glo),e(F,hlo),e(F,Au),e(Au,GK),e(GK,ulo),e(Au,plo),e(Au,uS),e(uS,_lo),e(Au,blo),e(F,vlo),e(F,Lu),e(Lu,XK),e(XK,Tlo),e(Lu,Flo),e(Lu,pS),e(pS,Clo),e(Lu,Mlo),e(F,Elo),e(F,Bu),e(Bu,VK),e(VK,ylo),e(Bu,wlo),e(Bu,_S),e(_S,Alo),e(Bu,Llo),e(F,Blo),e(F,xu),e(xu,zK),e(zK,xlo),e(xu,klo),e(xu,bS),e(bS,Rlo),e(xu,Slo),e(F,Plo),e(F,ku),e(ku,WK),e(WK,$lo),e(ku,Ilo),e(ku,vS),e(vS,jlo),e(ku,Dlo),e(F,Nlo),e(F,Ru),e(Ru,QK),e(QK,qlo),e(Ru,Olo),e(Ru,TS),e(TS,Glo),e(Ru,Xlo),e(F,Vlo),e(F,Su),e(Su,HK),e(HK,zlo),e(Su,Wlo),e(Su,FS),e(FS,Qlo),e(Su,Hlo),e(F,Ulo),e(F,Pu),e(Pu,UK),e(UK,Jlo),e(Pu,Ylo),e(Pu,CS),e(CS,Klo),e(Pu,Zlo),e(F,eio),e(F,$u),e($u,JK),e(JK,oio),e($u,rio),e($u,MS),e(MS,tio),e($u,aio),e(F,sio),e(F,Iu),e(Iu,YK),e(YK,nio),e(Iu,lio),e(Iu,ES),e(ES,iio),e(Iu,dio),e(F,cio),e(F,ju),e(ju,KK),e(KK,mio),e(ju,fio),e(ju,yS),e(yS,gio),e(ju,hio),e(F,uio),e(F,Du),e(Du,ZK),e(ZK,pio),e(Du,_io),e(Du,wS),e(wS,bio),e(Du,vio),e(F,Tio),e(F,Nu),e(Nu,eZ),e(eZ,Fio),e(Nu,Cio),e(Nu,AS),e(AS,Mio),e(Nu,Eio),e(F,yio),e(F,qu),e(qu,oZ),e(oZ,wio),e(qu,Aio),e(qu,LS),e(LS,Lio),e(qu,Bio),e(F,xio),e(F,Ou),e(Ou,rZ),e(rZ,kio),e(Ou,Rio),e(Ou,BS),e(BS,Sio),e(Ou,Pio),e(F,$io),e(F,Gu),e(Gu,tZ),e(tZ,Iio),e(Gu,jio),e(Gu,xS),e(xS,Dio),e(Gu,Nio),e(F,qio),e(F,Xu),e(Xu,aZ),e(aZ,Oio),e(Xu,Gio),e(Xu,kS),e(kS,Xio),e(Xu,Vio),e(F,zio),e(F,Vu),e(Vu,sZ),e(sZ,Wio),e(Vu,Qio),e(Vu,RS),e(RS,Hio),e(Vu,Uio),e(F,Jio),e(F,zu),e(zu,nZ),e(nZ,Yio),e(zu,Kio),e(zu,SS),e(SS,Zio),e(zu,edo),e(F,odo),e(F,Wu),e(Wu,lZ),e(lZ,rdo),e(Wu,tdo),e(Wu,PS),e(PS,ado),e(Wu,sdo),e(F,ndo),e(F,Qu),e(Qu,iZ),e(iZ,ldo),e(Qu,ido),e(Qu,$S),e($S,ddo),e(Qu,cdo),e(F,mdo),e(F,Hu),e(Hu,dZ),e(dZ,fdo),e(Hu,gdo),e(Hu,IS),e(IS,hdo),e(Hu,udo),e(F,pdo),e(F,Uu),e(Uu,cZ),e(cZ,_do),e(Uu,bdo),e(Uu,jS),e(jS,vdo),e(Uu,Tdo),e(F,Fdo),e(F,Ju),e(Ju,mZ),e(mZ,Cdo),e(Ju,Mdo),e(Ju,DS),e(DS,Edo),e(Ju,ydo),e(F,wdo),e(F,Yu),e(Yu,fZ),e(fZ,Ado),e(Yu,Ldo),e(Yu,NS),e(NS,Bdo),e(Yu,xdo),e(F,kdo),e(F,Ku),e(Ku,gZ),e(gZ,Rdo),e(Ku,Sdo),e(Ku,qS),e(qS,Pdo),e(Ku,$do),e(F,Ido),e(F,Zu),e(Zu,hZ),e(hZ,jdo),e(Zu,Ddo),e(Zu,OS),e(OS,Ndo),e(Zu,qdo),e(F,Odo),e(F,ep),e(ep,uZ),e(uZ,Gdo),e(ep,Xdo),e(ep,GS),e(GS,Vdo),e(ep,zdo),e(F,Wdo),e(F,op),e(op,pZ),e(pZ,Qdo),e(op,Hdo),e(op,XS),e(XS,Udo),e(op,Jdo),e(F,Ydo),e(F,rp),e(rp,_Z),e(_Z,Kdo),e(rp,Zdo),e(rp,VS),e(VS,eco),e(rp,oco),e(F,rco),e(F,tp),e(tp,bZ),e(bZ,tco),e(tp,aco),e(tp,zS),e(zS,sco),e(tp,nco),e(F,lco),e(F,ap),e(ap,vZ),e(vZ,ico),e(ap,dco),e(ap,WS),e(WS,cco),e(ap,mco),e(F,fco),e(F,sp),e(sp,TZ),e(TZ,gco),e(sp,hco),e(sp,QS),e(QS,uco),e(sp,pco),e(F,_co),e(F,np),e(np,FZ),e(FZ,bco),e(np,vco),e(np,HS),e(HS,Tco),e(np,Fco),e(F,Cco),e(F,lp),e(lp,CZ),e(CZ,Mco),e(lp,Eco),e(lp,US),e(US,yco),e(lp,wco),e(F,Aco),e(F,ip),e(ip,MZ),e(MZ,Lco),e(ip,Bco),e(ip,JS),e(JS,xco),e(ip,kco),e(F,Rco),e(F,dp),e(dp,EZ),e(EZ,Sco),e(dp,Pco),e(dp,YS),e(YS,$co),e(dp,Ico),e(F,jco),e(F,cp),e(cp,yZ),e(yZ,Dco),e(cp,Nco),e(cp,KS),e(KS,qco),e(cp,Oco),e(F,Gco),e(F,mp),e(mp,wZ),e(wZ,Xco),e(mp,Vco),e(mp,ZS),e(ZS,zco),e(mp,Wco),e(F,Qco),e(F,fp),e(fp,AZ),e(AZ,Hco),e(fp,Uco),e(fp,eP),e(eP,Jco),e(fp,Yco),e(F,Kco),e(F,gp),e(gp,LZ),e(LZ,Zco),e(gp,emo),e(gp,oP),e(oP,omo),e(gp,rmo),e(F,tmo),e(F,hp),e(hp,BZ),e(BZ,amo),e(hp,smo),e(hp,rP),e(rP,nmo),e(hp,lmo),e(F,imo),e(F,up),e(up,xZ),e(xZ,dmo),e(up,cmo),e(up,tP),e(tP,mmo),e(up,fmo),e(F,gmo),e(F,pp),e(pp,kZ),e(kZ,hmo),e(pp,umo),e(pp,aP),e(aP,pmo),e(pp,_mo),e(F,bmo),e(F,_p),e(_p,RZ),e(RZ,vmo),e(_p,Tmo),e(_p,sP),e(sP,Fmo),e(_p,Cmo),e(F,Mmo),e(F,bp),e(bp,SZ),e(SZ,Emo),e(bp,ymo),e(bp,nP),e(nP,wmo),e(bp,Amo),e(De,Lmo),e(De,vp),e(vp,Bmo),e(vp,PZ),e(PZ,xmo),e(vp,kmo),e(vp,$Z),e($Z,Rmo),e(De,Smo),e(De,IZ),e(IZ,Pmo),e(De,$mo),g(jy,De,null),b(c,jxe,_),b(c,ed,_),e(ed,Tp),e(Tp,jZ),g(Dy,jZ,null),e(ed,Imo),e(ed,DZ),e(DZ,jmo),b(c,Dxe,_),b(c,Yo,_),g(Ny,Yo,null),e(Yo,Dmo),e(Yo,od),e(od,Nmo),e(od,NZ),e(NZ,qmo),e(od,Omo),e(od,qZ),e(qZ,Gmo),e(od,Xmo),e(Yo,Vmo),e(Yo,qy),e(qy,zmo),e(qy,OZ),e(OZ,Wmo),e(qy,Qmo),e(Yo,Hmo),e(Yo,zr),g(Oy,zr,null),e(zr,Umo),e(zr,GZ),e(GZ,Jmo),e(zr,Ymo),e(zr,rd),e(rd,Kmo),e(rd,XZ),e(XZ,Zmo),e(rd,efo),e(rd,VZ),e(VZ,ofo),e(rd,rfo),e(zr,tfo),e(zr,zZ),e(zZ,afo),e(zr,sfo),g(Gy,zr,null),e(Yo,nfo),e(Yo,Ne),g(Xy,Ne,null),e(Ne,lfo),e(Ne,WZ),e(WZ,ifo),e(Ne,dfo),e(Ne,za),e(za,cfo),e(za,QZ),e(QZ,mfo),e(za,ffo),e(za,HZ),e(HZ,gfo),e(za,hfo),e(za,UZ),e(UZ,ufo),e(za,pfo),e(Ne,_fo),e(Ne,k),e(k,Fp),e(Fp,JZ),e(JZ,bfo),e(Fp,vfo),e(Fp,lP),e(lP,Tfo),e(Fp,Ffo),e(k,Cfo),e(k,Cp),e(Cp,YZ),e(YZ,Mfo),e(Cp,Efo),e(Cp,iP),e(iP,yfo),e(Cp,wfo),e(k,Afo),e(k,Mp),e(Mp,KZ),e(KZ,Lfo),e(Mp,Bfo),e(Mp,dP),e(dP,xfo),e(Mp,kfo),e(k,Rfo),e(k,Ep),e(Ep,ZZ),e(ZZ,Sfo),e(Ep,Pfo),e(Ep,cP),e(cP,$fo),e(Ep,Ifo),e(k,jfo),e(k,yp),e(yp,eee),e(eee,Dfo),e(yp,Nfo),e(yp,mP),e(mP,qfo),e(yp,Ofo),e(k,Gfo),e(k,wp),e(wp,oee),e(oee,Xfo),e(wp,Vfo),e(wp,fP),e(fP,zfo),e(wp,Wfo),e(k,Qfo),e(k,Ap),e(Ap,ree),e(ree,Hfo),e(Ap,Ufo),e(Ap,gP),e(gP,Jfo),e(Ap,Yfo),e(k,Kfo),e(k,Lp),e(Lp,tee),e(tee,Zfo),e(Lp,ego),e(Lp,hP),e(hP,ogo),e(Lp,rgo),e(k,tgo),e(k,Bp),e(Bp,aee),e(aee,ago),e(Bp,sgo),e(Bp,uP),e(uP,ngo),e(Bp,lgo),e(k,igo),e(k,xp),e(xp,see),e(see,dgo),e(xp,cgo),e(xp,pP),e(pP,mgo),e(xp,fgo),e(k,ggo),e(k,kp),e(kp,nee),e(nee,hgo),e(kp,ugo),e(kp,_P),e(_P,pgo),e(kp,_go),e(k,bgo),e(k,Rp),e(Rp,lee),e(lee,vgo),e(Rp,Tgo),e(Rp,bP),e(bP,Fgo),e(Rp,Cgo),e(k,Mgo),e(k,Sp),e(Sp,iee),e(iee,Ego),e(Sp,ygo),e(Sp,vP),e(vP,wgo),e(Sp,Ago),e(k,Lgo),e(k,Pp),e(Pp,dee),e(dee,Bgo),e(Pp,xgo),e(Pp,TP),e(TP,kgo),e(Pp,Rgo),e(k,Sgo),e(k,$p),e($p,cee),e(cee,Pgo),e($p,$go),e($p,FP),e(FP,Igo),e($p,jgo),e(k,Dgo),e(k,Ip),e(Ip,mee),e(mee,Ngo),e(Ip,qgo),e(Ip,CP),e(CP,Ogo),e(Ip,Ggo),e(k,Xgo),e(k,jp),e(jp,fee),e(fee,Vgo),e(jp,zgo),e(jp,MP),e(MP,Wgo),e(jp,Qgo),e(k,Hgo),e(k,Dp),e(Dp,gee),e(gee,Ugo),e(Dp,Jgo),e(Dp,EP),e(EP,Ygo),e(Dp,Kgo),e(k,Zgo),e(k,Np),e(Np,hee),e(hee,eho),e(Np,oho),e(Np,yP),e(yP,rho),e(Np,tho),e(k,aho),e(k,qp),e(qp,uee),e(uee,sho),e(qp,nho),e(qp,wP),e(wP,lho),e(qp,iho),e(k,dho),e(k,Op),e(Op,pee),e(pee,cho),e(Op,mho),e(Op,AP),e(AP,fho),e(Op,gho),e(k,hho),e(k,Gp),e(Gp,_ee),e(_ee,uho),e(Gp,pho),e(Gp,LP),e(LP,_ho),e(Gp,bho),e(k,vho),e(k,Xp),e(Xp,bee),e(bee,Tho),e(Xp,Fho),e(Xp,BP),e(BP,Cho),e(Xp,Mho),e(k,Eho),e(k,Vp),e(Vp,vee),e(vee,yho),e(Vp,who),e(Vp,xP),e(xP,Aho),e(Vp,Lho),e(k,Bho),e(k,zp),e(zp,Tee),e(Tee,xho),e(zp,kho),e(zp,kP),e(kP,Rho),e(zp,Sho),e(k,Pho),e(k,Wp),e(Wp,Fee),e(Fee,$ho),e(Wp,Iho),e(Wp,RP),e(RP,jho),e(Wp,Dho),e(k,Nho),e(k,Qp),e(Qp,Cee),e(Cee,qho),e(Qp,Oho),e(Qp,SP),e(SP,Gho),e(Qp,Xho),e(k,Vho),e(k,Hp),e(Hp,Mee),e(Mee,zho),e(Hp,Who),e(Hp,PP),e(PP,Qho),e(Hp,Hho),e(k,Uho),e(k,Up),e(Up,Eee),e(Eee,Jho),e(Up,Yho),e(Up,$P),e($P,Kho),e(Up,Zho),e(k,euo),e(k,Jp),e(Jp,yee),e(yee,ouo),e(Jp,ruo),e(Jp,IP),e(IP,tuo),e(Jp,auo),e(k,suo),e(k,Yp),e(Yp,wee),e(wee,nuo),e(Yp,luo),e(Yp,jP),e(jP,iuo),e(Yp,duo),e(k,cuo),e(k,Kp),e(Kp,Aee),e(Aee,muo),e(Kp,fuo),e(Kp,DP),e(DP,guo),e(Kp,huo),e(k,uuo),e(k,Zp),e(Zp,Lee),e(Lee,puo),e(Zp,_uo),e(Zp,NP),e(NP,buo),e(Zp,vuo),e(k,Tuo),e(k,e_),e(e_,Bee),e(Bee,Fuo),e(e_,Cuo),e(e_,qP),e(qP,Muo),e(e_,Euo),e(k,yuo),e(k,o_),e(o_,xee),e(xee,wuo),e(o_,Auo),e(o_,OP),e(OP,Luo),e(o_,Buo),e(k,xuo),e(k,r_),e(r_,kee),e(kee,kuo),e(r_,Ruo),e(r_,GP),e(GP,Suo),e(r_,Puo),e(k,$uo),e(k,t_),e(t_,Ree),e(Ree,Iuo),e(t_,juo),e(t_,XP),e(XP,Duo),e(t_,Nuo),e(k,quo),e(k,a_),e(a_,See),e(See,Ouo),e(a_,Guo),e(a_,VP),e(VP,Xuo),e(a_,Vuo),e(k,zuo),e(k,s_),e(s_,Pee),e(Pee,Wuo),e(s_,Quo),e(s_,zP),e(zP,Huo),e(s_,Uuo),e(Ne,Juo),e(Ne,n_),e(n_,Yuo),e(n_,$ee),e($ee,Kuo),e(n_,Zuo),e(n_,Iee),e(Iee,epo),e(Ne,opo),e(Ne,jee),e(jee,rpo),e(Ne,tpo),g(Vy,Ne,null),b(c,Nxe,_),b(c,td,_),e(td,l_),e(l_,Dee),g(zy,Dee,null),e(td,apo),e(td,Nee),e(Nee,spo),b(c,qxe,_),b(c,Ko,_),g(Wy,Ko,null),e(Ko,npo),e(Ko,ad),e(ad,lpo),e(ad,qee),e(qee,ipo),e(ad,dpo),e(ad,Oee),e(Oee,cpo),e(ad,mpo),e(Ko,fpo),e(Ko,Qy),e(Qy,gpo),e(Qy,Gee),e(Gee,hpo),e(Qy,upo),e(Ko,ppo),e(Ko,Wr),g(Hy,Wr,null),e(Wr,_po),e(Wr,Xee),e(Xee,bpo),e(Wr,vpo),e(Wr,sd),e(sd,Tpo),e(sd,Vee),e(Vee,Fpo),e(sd,Cpo),e(sd,zee),e(zee,Mpo),e(sd,Epo),e(Wr,ypo),e(Wr,Wee),e(Wee,wpo),e(Wr,Apo),g(Uy,Wr,null),e(Ko,Lpo),e(Ko,qe),g(Jy,qe,null),e(qe,Bpo),e(qe,Qee),e(Qee,xpo),e(qe,kpo),e(qe,Wa),e(Wa,Rpo),e(Wa,Hee),e(Hee,Spo),e(Wa,Ppo),e(Wa,Uee),e(Uee,$po),e(Wa,Ipo),e(Wa,Jee),e(Jee,jpo),e(Wa,Dpo),e(qe,Npo),e(qe,$),e($,i_),e(i_,Yee),e(Yee,qpo),e(i_,Opo),e(i_,WP),e(WP,Gpo),e(i_,Xpo),e($,Vpo),e($,d_),e(d_,Kee),e(Kee,zpo),e(d_,Wpo),e(d_,QP),e(QP,Qpo),e(d_,Hpo),e($,Upo),e($,c_),e(c_,Zee),e(Zee,Jpo),e(c_,Ypo),e(c_,HP),e(HP,Kpo),e(c_,Zpo),e($,e_o),e($,m_),e(m_,eoe),e(eoe,o_o),e(m_,r_o),e(m_,UP),e(UP,t_o),e(m_,a_o),e($,s_o),e($,f_),e(f_,ooe),e(ooe,n_o),e(f_,l_o),e(f_,JP),e(JP,i_o),e(f_,d_o),e($,c_o),e($,g_),e(g_,roe),e(roe,m_o),e(g_,f_o),e(g_,YP),e(YP,g_o),e(g_,h_o),e($,u_o),e($,h_),e(h_,toe),e(toe,p_o),e(h_,__o),e(h_,KP),e(KP,b_o),e(h_,v_o),e($,T_o),e($,u_),e(u_,aoe),e(aoe,F_o),e(u_,C_o),e(u_,ZP),e(ZP,M_o),e(u_,E_o),e($,y_o),e($,p_),e(p_,soe),e(soe,w_o),e(p_,A_o),e(p_,e$),e(e$,L_o),e(p_,B_o),e($,x_o),e($,__),e(__,noe),e(noe,k_o),e(__,R_o),e(__,o$),e(o$,S_o),e(__,P_o),e($,$_o),e($,b_),e(b_,loe),e(loe,I_o),e(b_,j_o),e(b_,r$),e(r$,D_o),e(b_,N_o),e($,q_o),e($,v_),e(v_,ioe),e(ioe,O_o),e(v_,G_o),e(v_,t$),e(t$,X_o),e(v_,V_o),e($,z_o),e($,T_),e(T_,doe),e(doe,W_o),e(T_,Q_o),e(T_,a$),e(a$,H_o),e(T_,U_o),e($,J_o),e($,F_),e(F_,coe),e(coe,Y_o),e(F_,K_o),e(F_,s$),e(s$,Z_o),e(F_,ebo),e($,obo),e($,C_),e(C_,moe),e(moe,rbo),e(C_,tbo),e(C_,n$),e(n$,abo),e(C_,sbo),e($,nbo),e($,M_),e(M_,foe),e(foe,lbo),e(M_,ibo),e(M_,l$),e(l$,dbo),e(M_,cbo),e($,mbo),e($,E_),e(E_,goe),e(goe,fbo),e(E_,gbo),e(E_,i$),e(i$,hbo),e(E_,ubo),e($,pbo),e($,y_),e(y_,hoe),e(hoe,_bo),e(y_,bbo),e(y_,d$),e(d$,vbo),e(y_,Tbo),e($,Fbo),e($,w_),e(w_,uoe),e(uoe,Cbo),e(w_,Mbo),e(w_,c$),e(c$,Ebo),e(w_,ybo),e($,wbo),e($,A_),e(A_,poe),e(poe,Abo),e(A_,Lbo),e(A_,m$),e(m$,Bbo),e(A_,xbo),e($,kbo),e($,L_),e(L_,_oe),e(_oe,Rbo),e(L_,Sbo),e(L_,f$),e(f$,Pbo),e(L_,$bo),e($,Ibo),e($,B_),e(B_,boe),e(boe,jbo),e(B_,Dbo),e(B_,g$),e(g$,Nbo),e(B_,qbo),e($,Obo),e($,x_),e(x_,voe),e(voe,Gbo),e(x_,Xbo),e(x_,h$),e(h$,Vbo),e(x_,zbo),e($,Wbo),e($,k_),e(k_,Toe),e(Toe,Qbo),e(k_,Hbo),e(k_,u$),e(u$,Ubo),e(k_,Jbo),e($,Ybo),e($,R_),e(R_,Foe),e(Foe,Kbo),e(R_,Zbo),e(R_,p$),e(p$,e2o),e(R_,o2o),e($,r2o),e($,S_),e(S_,Coe),e(Coe,t2o),e(S_,a2o),e(S_,_$),e(_$,s2o),e(S_,n2o),e($,l2o),e($,P_),e(P_,Moe),e(Moe,i2o),e(P_,d2o),e(P_,b$),e(b$,c2o),e(P_,m2o),e($,f2o),e($,$_),e($_,Eoe),e(Eoe,g2o),e($_,h2o),e($_,v$),e(v$,u2o),e($_,p2o),e($,_2o),e($,I_),e(I_,yoe),e(yoe,b2o),e(I_,v2o),e(I_,T$),e(T$,T2o),e(I_,F2o),e($,C2o),e($,j_),e(j_,woe),e(woe,M2o),e(j_,E2o),e(j_,F$),e(F$,y2o),e(j_,w2o),e($,A2o),e($,D_),e(D_,Aoe),e(Aoe,L2o),e(D_,B2o),e(D_,C$),e(C$,x2o),e(D_,k2o),e($,R2o),e($,N_),e(N_,Loe),e(Loe,S2o),e(N_,P2o),e(N_,M$),e(M$,$2o),e(N_,I2o),e($,j2o),e($,q_),e(q_,Boe),e(Boe,D2o),e(q_,N2o),e(q_,E$),e(E$,q2o),e(q_,O2o),e($,G2o),e($,O_),e(O_,xoe),e(xoe,X2o),e(O_,V2o),e(O_,y$),e(y$,z2o),e(O_,W2o),e($,Q2o),e($,G_),e(G_,koe),e(koe,H2o),e(G_,U2o),e(G_,w$),e(w$,J2o),e(G_,Y2o),e(qe,K2o),e(qe,X_),e(X_,Z2o),e(X_,Roe),e(Roe,evo),e(X_,ovo),e(X_,Soe),e(Soe,rvo),e(qe,tvo),e(qe,Poe),e(Poe,avo),e(qe,svo),g(Yy,qe,null),b(c,Oxe,_),b(c,nd,_),e(nd,V_),e(V_,$oe),g(Ky,$oe,null),e(nd,nvo),e(nd,Ioe),e(Ioe,lvo),b(c,Gxe,_),b(c,Zo,_),g(Zy,Zo,null),e(Zo,ivo),e(Zo,ld),e(ld,dvo),e(ld,joe),e(joe,cvo),e(ld,mvo),e(ld,Doe),e(Doe,fvo),e(ld,gvo),e(Zo,hvo),e(Zo,ew),e(ew,uvo),e(ew,Noe),e(Noe,pvo),e(ew,_vo),e(Zo,bvo),e(Zo,Qr),g(ow,Qr,null),e(Qr,vvo),e(Qr,qoe),e(qoe,Tvo),e(Qr,Fvo),e(Qr,id),e(id,Cvo),e(id,Ooe),e(Ooe,Mvo),e(id,Evo),e(id,Goe),e(Goe,yvo),e(id,wvo),e(Qr,Avo),e(Qr,Xoe),e(Xoe,Lvo),e(Qr,Bvo),g(rw,Qr,null),e(Zo,xvo),e(Zo,Oe),g(tw,Oe,null),e(Oe,kvo),e(Oe,Voe),e(Voe,Rvo),e(Oe,Svo),e(Oe,Qa),e(Qa,Pvo),e(Qa,zoe),e(zoe,$vo),e(Qa,Ivo),e(Qa,Woe),e(Woe,jvo),e(Qa,Dvo),e(Qa,Qoe),e(Qoe,Nvo),e(Qa,qvo),e(Oe,Ovo),e(Oe,I),e(I,z_),e(z_,Hoe),e(Hoe,Gvo),e(z_,Xvo),e(z_,A$),e(A$,Vvo),e(z_,zvo),e(I,Wvo),e(I,W_),e(W_,Uoe),e(Uoe,Qvo),e(W_,Hvo),e(W_,L$),e(L$,Uvo),e(W_,Jvo),e(I,Yvo),e(I,Q_),e(Q_,Joe),e(Joe,Kvo),e(Q_,Zvo),e(Q_,B$),e(B$,eTo),e(Q_,oTo),e(I,rTo),e(I,H_),e(H_,Yoe),e(Yoe,tTo),e(H_,aTo),e(H_,x$),e(x$,sTo),e(H_,nTo),e(I,lTo),e(I,U_),e(U_,Koe),e(Koe,iTo),e(U_,dTo),e(U_,k$),e(k$,cTo),e(U_,mTo),e(I,fTo),e(I,J_),e(J_,Zoe),e(Zoe,gTo),e(J_,hTo),e(J_,R$),e(R$,uTo),e(J_,pTo),e(I,_To),e(I,Y_),e(Y_,ere),e(ere,bTo),e(Y_,vTo),e(Y_,S$),e(S$,TTo),e(Y_,FTo),e(I,CTo),e(I,K_),e(K_,ore),e(ore,MTo),e(K_,ETo),e(K_,P$),e(P$,yTo),e(K_,wTo),e(I,ATo),e(I,Z_),e(Z_,rre),e(rre,LTo),e(Z_,BTo),e(Z_,$$),e($$,xTo),e(Z_,kTo),e(I,RTo),e(I,eb),e(eb,tre),e(tre,STo),e(eb,PTo),e(eb,I$),e(I$,$To),e(eb,ITo),e(I,jTo),e(I,ob),e(ob,are),e(are,DTo),e(ob,NTo),e(ob,j$),e(j$,qTo),e(ob,OTo),e(I,GTo),e(I,rb),e(rb,sre),e(sre,XTo),e(rb,VTo),e(rb,D$),e(D$,zTo),e(rb,WTo),e(I,QTo),e(I,tb),e(tb,nre),e(nre,HTo),e(tb,UTo),e(tb,N$),e(N$,JTo),e(tb,YTo),e(I,KTo),e(I,ab),e(ab,lre),e(lre,ZTo),e(ab,e1o),e(ab,q$),e(q$,o1o),e(ab,r1o),e(I,t1o),e(I,sb),e(sb,ire),e(ire,a1o),e(sb,s1o),e(sb,O$),e(O$,n1o),e(sb,l1o),e(I,i1o),e(I,nb),e(nb,dre),e(dre,d1o),e(nb,c1o),e(nb,G$),e(G$,m1o),e(nb,f1o),e(I,g1o),e(I,lb),e(lb,cre),e(cre,h1o),e(lb,u1o),e(lb,X$),e(X$,p1o),e(lb,_1o),e(I,b1o),e(I,ib),e(ib,mre),e(mre,v1o),e(ib,T1o),e(ib,V$),e(V$,F1o),e(ib,C1o),e(I,M1o),e(I,db),e(db,fre),e(fre,E1o),e(db,y1o),e(db,z$),e(z$,w1o),e(db,A1o),e(I,L1o),e(I,cb),e(cb,gre),e(gre,B1o),e(cb,x1o),e(cb,W$),e(W$,k1o),e(cb,R1o),e(I,S1o),e(I,mb),e(mb,hre),e(hre,P1o),e(mb,$1o),e(mb,Q$),e(Q$,I1o),e(mb,j1o),e(I,D1o),e(I,fb),e(fb,ure),e(ure,N1o),e(fb,q1o),e(fb,H$),e(H$,O1o),e(fb,G1o),e(I,X1o),e(I,gb),e(gb,pre),e(pre,V1o),e(gb,z1o),e(gb,U$),e(U$,W1o),e(gb,Q1o),e(I,H1o),e(I,hb),e(hb,_re),e(_re,U1o),e(hb,J1o),e(hb,J$),e(J$,Y1o),e(hb,K1o),e(I,Z1o),e(I,ub),e(ub,bre),e(bre,eFo),e(ub,oFo),e(ub,Y$),e(Y$,rFo),e(ub,tFo),e(I,aFo),e(I,pb),e(pb,vre),e(vre,sFo),e(pb,nFo),e(pb,K$),e(K$,lFo),e(pb,iFo),e(I,dFo),e(I,_b),e(_b,Tre),e(Tre,cFo),e(_b,mFo),e(_b,Z$),e(Z$,fFo),e(_b,gFo),e(I,hFo),e(I,bb),e(bb,Fre),e(Fre,uFo),e(bb,pFo),e(bb,eI),e(eI,_Fo),e(bb,bFo),e(I,vFo),e(I,vb),e(vb,Cre),e(Cre,TFo),e(vb,FFo),e(vb,oI),e(oI,CFo),e(vb,MFo),e(I,EFo),e(I,Tb),e(Tb,Mre),e(Mre,yFo),e(Tb,wFo),e(Tb,rI),e(rI,AFo),e(Tb,LFo),e(I,BFo),e(I,Fb),e(Fb,Ere),e(Ere,xFo),e(Fb,kFo),e(Fb,yre),e(yre,RFo),e(Fb,SFo),e(I,PFo),e(I,Cb),e(Cb,wre),e(wre,$Fo),e(Cb,IFo),e(Cb,tI),e(tI,jFo),e(Cb,DFo),e(I,NFo),e(I,Mb),e(Mb,Are),e(Are,qFo),e(Mb,OFo),e(Mb,aI),e(aI,GFo),e(Mb,XFo),e(I,VFo),e(I,Eb),e(Eb,Lre),e(Lre,zFo),e(Eb,WFo),e(Eb,sI),e(sI,QFo),e(Eb,HFo),e(I,UFo),e(I,yb),e(yb,Bre),e(Bre,JFo),e(yb,YFo),e(yb,nI),e(nI,KFo),e(yb,ZFo),e(Oe,eCo),e(Oe,wb),e(wb,oCo),e(wb,xre),e(xre,rCo),e(wb,tCo),e(wb,kre),e(kre,aCo),e(Oe,sCo),e(Oe,Rre),e(Rre,nCo),e(Oe,lCo),g(aw,Oe,null),b(c,Xxe,_),b(c,dd,_),e(dd,Ab),e(Ab,Sre),g(sw,Sre,null),e(dd,iCo),e(dd,Pre),e(Pre,dCo),b(c,Vxe,_),b(c,er,_),g(nw,er,null),e(er,cCo),e(er,cd),e(cd,mCo),e(cd,$re),e($re,fCo),e(cd,gCo),e(cd,Ire),e(Ire,hCo),e(cd,uCo),e(er,pCo),e(er,lw),e(lw,_Co),e(lw,jre),e(jre,bCo),e(lw,vCo),e(er,TCo),e(er,Hr),g(iw,Hr,null),e(Hr,FCo),e(Hr,Dre),e(Dre,CCo),e(Hr,MCo),e(Hr,md),e(md,ECo),e(md,Nre),e(Nre,yCo),e(md,wCo),e(md,qre),e(qre,ACo),e(md,LCo),e(Hr,BCo),e(Hr,Ore),e(Ore,xCo),e(Hr,kCo),g(dw,Hr,null),e(er,RCo),e(er,Ge),g(cw,Ge,null),e(Ge,SCo),e(Ge,Gre),e(Gre,PCo),e(Ge,$Co),e(Ge,Ha),e(Ha,ICo),e(Ha,Xre),e(Xre,jCo),e(Ha,DCo),e(Ha,Vre),e(Vre,NCo),e(Ha,qCo),e(Ha,zre),e(zre,OCo),e(Ha,GCo),e(Ge,XCo),e(Ge,se),e(se,Lb),e(Lb,Wre),e(Wre,VCo),e(Lb,zCo),e(Lb,lI),e(lI,WCo),e(Lb,QCo),e(se,HCo),e(se,Bb),e(Bb,Qre),e(Qre,UCo),e(Bb,JCo),e(Bb,iI),e(iI,YCo),e(Bb,KCo),e(se,ZCo),e(se,xb),e(xb,Hre),e(Hre,eMo),e(xb,oMo),e(xb,dI),e(dI,rMo),e(xb,tMo),e(se,aMo),e(se,kb),e(kb,Ure),e(Ure,sMo),e(kb,nMo),e(kb,cI),e(cI,lMo),e(kb,iMo),e(se,dMo),e(se,Rb),e(Rb,Jre),e(Jre,cMo),e(Rb,mMo),e(Rb,mI),e(mI,fMo),e(Rb,gMo),e(se,hMo),e(se,Sb),e(Sb,Yre),e(Yre,uMo),e(Sb,pMo),e(Sb,fI),e(fI,_Mo),e(Sb,bMo),e(se,vMo),e(se,Pb),e(Pb,Kre),e(Kre,TMo),e(Pb,FMo),e(Pb,gI),e(gI,CMo),e(Pb,MMo),e(se,EMo),e(se,$b),e($b,Zre),e(Zre,yMo),e($b,wMo),e($b,hI),e(hI,AMo),e($b,LMo),e(se,BMo),e(se,Ib),e(Ib,ete),e(ete,xMo),e(Ib,kMo),e(Ib,uI),e(uI,RMo),e(Ib,SMo),e(se,PMo),e(se,jb),e(jb,ote),e(ote,$Mo),e(jb,IMo),e(jb,pI),e(pI,jMo),e(jb,DMo),e(se,NMo),e(se,Db),e(Db,rte),e(rte,qMo),e(Db,OMo),e(Db,_I),e(_I,GMo),e(Db,XMo),e(se,VMo),e(se,Nb),e(Nb,tte),e(tte,zMo),e(Nb,WMo),e(Nb,bI),e(bI,QMo),e(Nb,HMo),e(se,UMo),e(se,qb),e(qb,ate),e(ate,JMo),e(qb,YMo),e(qb,vI),e(vI,KMo),e(qb,ZMo),e(se,e4o),e(se,Ob),e(Ob,ste),e(ste,o4o),e(Ob,r4o),e(Ob,TI),e(TI,t4o),e(Ob,a4o),e(se,s4o),e(se,Gb),e(Gb,nte),e(nte,n4o),e(Gb,l4o),e(Gb,FI),e(FI,i4o),e(Gb,d4o),e(se,c4o),e(se,Xb),e(Xb,lte),e(lte,m4o),e(Xb,f4o),e(Xb,CI),e(CI,g4o),e(Xb,h4o),e(Ge,u4o),e(Ge,Vb),e(Vb,p4o),e(Vb,ite),e(ite,_4o),e(Vb,b4o),e(Vb,dte),e(dte,v4o),e(Ge,T4o),e(Ge,cte),e(cte,F4o),e(Ge,C4o),g(mw,Ge,null),b(c,zxe,_),b(c,fd,_),e(fd,zb),e(zb,mte),g(fw,mte,null),e(fd,M4o),e(fd,fte),e(fte,E4o),b(c,Wxe,_),b(c,or,_),g(gw,or,null),e(or,y4o),e(or,gd),e(gd,w4o),e(gd,gte),e(gte,A4o),e(gd,L4o),e(gd,hte),e(hte,B4o),e(gd,x4o),e(or,k4o),e(or,hw),e(hw,R4o),e(hw,ute),e(ute,S4o),e(hw,P4o),e(or,$4o),e(or,Ur),g(uw,Ur,null),e(Ur,I4o),e(Ur,pte),e(pte,j4o),e(Ur,D4o),e(Ur,hd),e(hd,N4o),e(hd,_te),e(_te,q4o),e(hd,O4o),e(hd,bte),e(bte,G4o),e(hd,X4o),e(Ur,V4o),e(Ur,vte),e(vte,z4o),e(Ur,W4o),g(pw,Ur,null),e(or,Q4o),e(or,Xe),g(_w,Xe,null),e(Xe,H4o),e(Xe,Tte),e(Tte,U4o),e(Xe,J4o),e(Xe,Ua),e(Ua,Y4o),e(Ua,Fte),e(Fte,K4o),e(Ua,Z4o),e(Ua,Cte),e(Cte,eEo),e(Ua,oEo),e(Ua,Mte),e(Mte,rEo),e(Ua,tEo),e(Xe,aEo),e(Xe,A),e(A,Wb),e(Wb,Ete),e(Ete,sEo),e(Wb,nEo),e(Wb,MI),e(MI,lEo),e(Wb,iEo),e(A,dEo),e(A,Qb),e(Qb,yte),e(yte,cEo),e(Qb,mEo),e(Qb,EI),e(EI,fEo),e(Qb,gEo),e(A,hEo),e(A,Hb),e(Hb,wte),e(wte,uEo),e(Hb,pEo),e(Hb,yI),e(yI,_Eo),e(Hb,bEo),e(A,vEo),e(A,Ub),e(Ub,Ate),e(Ate,TEo),e(Ub,FEo),e(Ub,wI),e(wI,CEo),e(Ub,MEo),e(A,EEo),e(A,Jb),e(Jb,Lte),e(Lte,yEo),e(Jb,wEo),e(Jb,AI),e(AI,AEo),e(Jb,LEo),e(A,BEo),e(A,Yb),e(Yb,Bte),e(Bte,xEo),e(Yb,kEo),e(Yb,LI),e(LI,REo),e(Yb,SEo),e(A,PEo),e(A,Kb),e(Kb,xte),e(xte,$Eo),e(Kb,IEo),e(Kb,BI),e(BI,jEo),e(Kb,DEo),e(A,NEo),e(A,Zb),e(Zb,kte),e(kte,qEo),e(Zb,OEo),e(Zb,xI),e(xI,GEo),e(Zb,XEo),e(A,VEo),e(A,e2),e(e2,Rte),e(Rte,zEo),e(e2,WEo),e(e2,kI),e(kI,QEo),e(e2,HEo),e(A,UEo),e(A,o2),e(o2,Ste),e(Ste,JEo),e(o2,YEo),e(o2,RI),e(RI,KEo),e(o2,ZEo),e(A,e3o),e(A,r2),e(r2,Pte),e(Pte,o3o),e(r2,r3o),e(r2,SI),e(SI,t3o),e(r2,a3o),e(A,s3o),e(A,t2),e(t2,$te),e($te,n3o),e(t2,l3o),e(t2,PI),e(PI,i3o),e(t2,d3o),e(A,c3o),e(A,a2),e(a2,Ite),e(Ite,m3o),e(a2,f3o),e(a2,$I),e($I,g3o),e(a2,h3o),e(A,u3o),e(A,s2),e(s2,jte),e(jte,p3o),e(s2,_3o),e(s2,II),e(II,b3o),e(s2,v3o),e(A,T3o),e(A,n2),e(n2,Dte),e(Dte,F3o),e(n2,C3o),e(n2,jI),e(jI,M3o),e(n2,E3o),e(A,y3o),e(A,l2),e(l2,Nte),e(Nte,w3o),e(l2,A3o),e(l2,DI),e(DI,L3o),e(l2,B3o),e(A,x3o),e(A,i2),e(i2,qte),e(qte,k3o),e(i2,R3o),e(i2,NI),e(NI,S3o),e(i2,P3o),e(A,$3o),e(A,d2),e(d2,Ote),e(Ote,I3o),e(d2,j3o),e(d2,qI),e(qI,D3o),e(d2,N3o),e(A,q3o),e(A,c2),e(c2,Gte),e(Gte,O3o),e(c2,G3o),e(c2,OI),e(OI,X3o),e(c2,V3o),e(A,z3o),e(A,m2),e(m2,Xte),e(Xte,W3o),e(m2,Q3o),e(m2,GI),e(GI,H3o),e(m2,U3o),e(A,J3o),e(A,f2),e(f2,Vte),e(Vte,Y3o),e(f2,K3o),e(f2,XI),e(XI,Z3o),e(f2,e5o),e(A,o5o),e(A,g2),e(g2,zte),e(zte,r5o),e(g2,t5o),e(g2,VI),e(VI,a5o),e(g2,s5o),e(A,n5o),e(A,h2),e(h2,Wte),e(Wte,l5o),e(h2,i5o),e(h2,zI),e(zI,d5o),e(h2,c5o),e(A,m5o),e(A,u2),e(u2,Qte),e(Qte,f5o),e(u2,g5o),e(u2,WI),e(WI,h5o),e(u2,u5o),e(A,p5o),e(A,p2),e(p2,Hte),e(Hte,_5o),e(p2,b5o),e(p2,QI),e(QI,v5o),e(p2,T5o),e(A,F5o),e(A,_2),e(_2,Ute),e(Ute,C5o),e(_2,M5o),e(_2,HI),e(HI,E5o),e(_2,y5o),e(A,w5o),e(A,b2),e(b2,Jte),e(Jte,A5o),e(b2,L5o),e(b2,UI),e(UI,B5o),e(b2,x5o),e(A,k5o),e(A,v2),e(v2,Yte),e(Yte,R5o),e(v2,S5o),e(v2,JI),e(JI,P5o),e(v2,$5o),e(A,I5o),e(A,T2),e(T2,Kte),e(Kte,j5o),e(T2,D5o),e(T2,YI),e(YI,N5o),e(T2,q5o),e(A,O5o),e(A,F2),e(F2,Zte),e(Zte,G5o),e(F2,X5o),e(F2,KI),e(KI,V5o),e(F2,z5o),e(A,W5o),e(A,C2),e(C2,eae),e(eae,Q5o),e(C2,H5o),e(C2,ZI),e(ZI,U5o),e(C2,J5o),e(A,Y5o),e(A,M2),e(M2,oae),e(oae,K5o),e(M2,Z5o),e(M2,ej),e(ej,eyo),e(M2,oyo),e(A,ryo),e(A,E2),e(E2,rae),e(rae,tyo),e(E2,ayo),e(E2,oj),e(oj,syo),e(E2,nyo),e(A,lyo),e(A,y2),e(y2,tae),e(tae,iyo),e(y2,dyo),e(y2,rj),e(rj,cyo),e(y2,myo),e(A,fyo),e(A,w2),e(w2,aae),e(aae,gyo),e(w2,hyo),e(w2,tj),e(tj,uyo),e(w2,pyo),e(A,_yo),e(A,A2),e(A2,sae),e(sae,byo),e(A2,vyo),e(A2,aj),e(aj,Tyo),e(A2,Fyo),e(A,Cyo),e(A,L2),e(L2,nae),e(nae,Myo),e(L2,Eyo),e(L2,sj),e(sj,yyo),e(L2,wyo),e(A,Ayo),e(A,B2),e(B2,lae),e(lae,Lyo),e(B2,Byo),e(B2,nj),e(nj,xyo),e(B2,kyo),e(A,Ryo),e(A,x2),e(x2,iae),e(iae,Syo),e(x2,Pyo),e(x2,lj),e(lj,$yo),e(x2,Iyo),e(A,jyo),e(A,k2),e(k2,dae),e(dae,Dyo),e(k2,Nyo),e(k2,ij),e(ij,qyo),e(k2,Oyo),e(A,Gyo),e(A,R2),e(R2,cae),e(cae,Xyo),e(R2,Vyo),e(R2,dj),e(dj,zyo),e(R2,Wyo),e(A,Qyo),e(A,S2),e(S2,mae),e(mae,Hyo),e(S2,Uyo),e(S2,cj),e(cj,Jyo),e(S2,Yyo),e(A,Kyo),e(A,P2),e(P2,fae),e(fae,Zyo),e(P2,ewo),e(P2,mj),e(mj,owo),e(P2,rwo),e(A,two),e(A,$2),e($2,gae),e(gae,awo),e($2,swo),e($2,fj),e(fj,nwo),e($2,lwo),e(A,iwo),e(A,I2),e(I2,hae),e(hae,dwo),e(I2,cwo),e(I2,gj),e(gj,mwo),e(I2,fwo),e(A,gwo),e(A,j2),e(j2,uae),e(uae,hwo),e(j2,uwo),e(j2,hj),e(hj,pwo),e(j2,_wo),e(Xe,bwo),e(Xe,D2),e(D2,vwo),e(D2,pae),e(pae,Two),e(D2,Fwo),e(D2,_ae),e(_ae,Cwo),e(Xe,Mwo),e(Xe,bae),e(bae,Ewo),e(Xe,ywo),g(bw,Xe,null),b(c,Qxe,_),b(c,ud,_),e(ud,N2),e(N2,vae),g(vw,vae,null),e(ud,wwo),e(ud,Tae),e(Tae,Awo),b(c,Hxe,_),b(c,rr,_),g(Tw,rr,null),e(rr,Lwo),e(rr,pd),e(pd,Bwo),e(pd,Fae),e(Fae,xwo),e(pd,kwo),e(pd,Cae),e(Cae,Rwo),e(pd,Swo),e(rr,Pwo),e(rr,Fw),e(Fw,$wo),e(Fw,Mae),e(Mae,Iwo),e(Fw,jwo),e(rr,Dwo),e(rr,Jr),g(Cw,Jr,null),e(Jr,Nwo),e(Jr,Eae),e(Eae,qwo),e(Jr,Owo),e(Jr,_d),e(_d,Gwo),e(_d,yae),e(yae,Xwo),e(_d,Vwo),e(_d,wae),e(wae,zwo),e(_d,Wwo),e(Jr,Qwo),e(Jr,Aae),e(Aae,Hwo),e(Jr,Uwo),g(Mw,Jr,null),e(rr,Jwo),e(rr,Ve),g(Ew,Ve,null),e(Ve,Ywo),e(Ve,Lae),e(Lae,Kwo),e(Ve,Zwo),e(Ve,Ja),e(Ja,e6o),e(Ja,Bae),e(Bae,o6o),e(Ja,r6o),e(Ja,xae),e(xae,t6o),e(Ja,a6o),e(Ja,kae),e(kae,s6o),e(Ja,n6o),e(Ve,l6o),e(Ve,O),e(O,q2),e(q2,Rae),e(Rae,i6o),e(q2,d6o),e(q2,uj),e(uj,c6o),e(q2,m6o),e(O,f6o),e(O,O2),e(O2,Sae),e(Sae,g6o),e(O2,h6o),e(O2,pj),e(pj,u6o),e(O2,p6o),e(O,_6o),e(O,G2),e(G2,Pae),e(Pae,b6o),e(G2,v6o),e(G2,_j),e(_j,T6o),e(G2,F6o),e(O,C6o),e(O,X2),e(X2,$ae),e($ae,M6o),e(X2,E6o),e(X2,bj),e(bj,y6o),e(X2,w6o),e(O,A6o),e(O,V2),e(V2,Iae),e(Iae,L6o),e(V2,B6o),e(V2,vj),e(vj,x6o),e(V2,k6o),e(O,R6o),e(O,z2),e(z2,jae),e(jae,S6o),e(z2,P6o),e(z2,Tj),e(Tj,$6o),e(z2,I6o),e(O,j6o),e(O,W2),e(W2,Dae),e(Dae,D6o),e(W2,N6o),e(W2,Fj),e(Fj,q6o),e(W2,O6o),e(O,G6o),e(O,Q2),e(Q2,Nae),e(Nae,X6o),e(Q2,V6o),e(Q2,Cj),e(Cj,z6o),e(Q2,W6o),e(O,Q6o),e(O,H2),e(H2,qae),e(qae,H6o),e(H2,U6o),e(H2,Mj),e(Mj,J6o),e(H2,Y6o),e(O,K6o),e(O,U2),e(U2,Oae),e(Oae,Z6o),e(U2,eAo),e(U2,Ej),e(Ej,oAo),e(U2,rAo),e(O,tAo),e(O,J2),e(J2,Gae),e(Gae,aAo),e(J2,sAo),e(J2,yj),e(yj,nAo),e(J2,lAo),e(O,iAo),e(O,Y2),e(Y2,Xae),e(Xae,dAo),e(Y2,cAo),e(Y2,wj),e(wj,mAo),e(Y2,fAo),e(O,gAo),e(O,K2),e(K2,Vae),e(Vae,hAo),e(K2,uAo),e(K2,Aj),e(Aj,pAo),e(K2,_Ao),e(O,bAo),e(O,Z2),e(Z2,zae),e(zae,vAo),e(Z2,TAo),e(Z2,Lj),e(Lj,FAo),e(Z2,CAo),e(O,MAo),e(O,ev),e(ev,Wae),e(Wae,EAo),e(ev,yAo),e(ev,Bj),e(Bj,wAo),e(ev,AAo),e(O,LAo),e(O,ov),e(ov,Qae),e(Qae,BAo),e(ov,xAo),e(ov,xj),e(xj,kAo),e(ov,RAo),e(O,SAo),e(O,rv),e(rv,Hae),e(Hae,PAo),e(rv,$Ao),e(rv,kj),e(kj,IAo),e(rv,jAo),e(O,DAo),e(O,tv),e(tv,Uae),e(Uae,NAo),e(tv,qAo),e(tv,Rj),e(Rj,OAo),e(tv,GAo),e(O,XAo),e(O,av),e(av,Jae),e(Jae,VAo),e(av,zAo),e(av,Sj),e(Sj,WAo),e(av,QAo),e(O,HAo),e(O,sv),e(sv,Yae),e(Yae,UAo),e(sv,JAo),e(sv,Pj),e(Pj,YAo),e(sv,KAo),e(O,ZAo),e(O,nv),e(nv,Kae),e(Kae,e0o),e(nv,o0o),e(nv,$j),e($j,r0o),e(nv,t0o),e(O,a0o),e(O,lv),e(lv,Zae),e(Zae,s0o),e(lv,n0o),e(lv,Ij),e(Ij,l0o),e(lv,i0o),e(O,d0o),e(O,iv),e(iv,ese),e(ese,c0o),e(iv,m0o),e(iv,jj),e(jj,f0o),e(iv,g0o),e(O,h0o),e(O,dv),e(dv,ose),e(ose,u0o),e(dv,p0o),e(dv,Dj),e(Dj,_0o),e(dv,b0o),e(O,v0o),e(O,cv),e(cv,rse),e(rse,T0o),e(cv,F0o),e(cv,Nj),e(Nj,C0o),e(cv,M0o),e(O,E0o),e(O,mv),e(mv,tse),e(tse,y0o),e(mv,w0o),e(mv,qj),e(qj,A0o),e(mv,L0o),e(O,B0o),e(O,fv),e(fv,ase),e(ase,x0o),e(fv,k0o),e(fv,Oj),e(Oj,R0o),e(fv,S0o),e(O,P0o),e(O,gv),e(gv,sse),e(sse,$0o),e(gv,I0o),e(gv,Gj),e(Gj,j0o),e(gv,D0o),e(Ve,N0o),e(Ve,hv),e(hv,q0o),e(hv,nse),e(nse,O0o),e(hv,G0o),e(hv,lse),e(lse,X0o),e(Ve,V0o),e(Ve,ise),e(ise,z0o),e(Ve,W0o),g(yw,Ve,null),b(c,Uxe,_),b(c,bd,_),e(bd,uv),e(uv,dse),g(ww,dse,null),e(bd,Q0o),e(bd,cse),e(cse,H0o),b(c,Jxe,_),b(c,tr,_),g(Aw,tr,null),e(tr,U0o),e(tr,vd),e(vd,J0o),e(vd,mse),e(mse,Y0o),e(vd,K0o),e(vd,fse),e(fse,Z0o),e(vd,eLo),e(tr,oLo),e(tr,Lw),e(Lw,rLo),e(Lw,gse),e(gse,tLo),e(Lw,aLo),e(tr,sLo),e(tr,Yr),g(Bw,Yr,null),e(Yr,nLo),e(Yr,hse),e(hse,lLo),e(Yr,iLo),e(Yr,Td),e(Td,dLo),e(Td,use),e(use,cLo),e(Td,mLo),e(Td,pse),e(pse,fLo),e(Td,gLo),e(Yr,hLo),e(Yr,_se),e(_se,uLo),e(Yr,pLo),g(xw,Yr,null),e(tr,_Lo),e(tr,ze),g(kw,ze,null),e(ze,bLo),e(ze,bse),e(bse,vLo),e(ze,TLo),e(ze,Ya),e(Ya,FLo),e(Ya,vse),e(vse,CLo),e(Ya,MLo),e(Ya,Tse),e(Tse,ELo),e(Ya,yLo),e(Ya,Fse),e(Fse,wLo),e(Ya,ALo),e(ze,LLo),e(ze,da),e(da,pv),e(pv,Cse),e(Cse,BLo),e(pv,xLo),e(pv,Xj),e(Xj,kLo),e(pv,RLo),e(da,SLo),e(da,_v),e(_v,Mse),e(Mse,PLo),e(_v,$Lo),e(_v,Vj),e(Vj,ILo),e(_v,jLo),e(da,DLo),e(da,bv),e(bv,Ese),e(Ese,NLo),e(bv,qLo),e(bv,zj),e(zj,OLo),e(bv,GLo),e(da,XLo),e(da,vv),e(vv,yse),e(yse,VLo),e(vv,zLo),e(vv,Wj),e(Wj,WLo),e(vv,QLo),e(da,HLo),e(da,Tv),e(Tv,wse),e(wse,ULo),e(Tv,JLo),e(Tv,Qj),e(Qj,YLo),e(Tv,KLo),e(ze,ZLo),e(ze,Fv),e(Fv,e7o),e(Fv,Ase),e(Ase,o7o),e(Fv,r7o),e(Fv,Lse),e(Lse,t7o),e(ze,a7o),e(ze,Bse),e(Bse,s7o),e(ze,n7o),g(Rw,ze,null),b(c,Yxe,_),b(c,Fd,_),e(Fd,Cv),e(Cv,xse),g(Sw,xse,null),e(Fd,l7o),e(Fd,kse),e(kse,i7o),b(c,Kxe,_),b(c,ar,_),g(Pw,ar,null),e(ar,d7o),e(ar,Cd),e(Cd,c7o),e(Cd,Rse),e(Rse,m7o),e(Cd,f7o),e(Cd,Sse),e(Sse,g7o),e(Cd,h7o),e(ar,u7o),e(ar,$w),e($w,p7o),e($w,Pse),e(Pse,_7o),e($w,b7o),e(ar,v7o),e(ar,Kr),g(Iw,Kr,null),e(Kr,T7o),e(Kr,$se),e($se,F7o),e(Kr,C7o),e(Kr,Md),e(Md,M7o),e(Md,Ise),e(Ise,E7o),e(Md,y7o),e(Md,jse),e(jse,w7o),e(Md,A7o),e(Kr,L7o),e(Kr,Dse),e(Dse,B7o),e(Kr,x7o),g(jw,Kr,null),e(ar,k7o),e(ar,We),g(Dw,We,null),e(We,R7o),e(We,Nse),e(Nse,S7o),e(We,P7o),e(We,Ka),e(Ka,$7o),e(Ka,qse),e(qse,I7o),e(Ka,j7o),e(Ka,Ose),e(Ose,D7o),e(Ka,N7o),e(Ka,Gse),e(Gse,q7o),e(Ka,O7o),e(We,G7o),e(We,N),e(N,Mv),e(Mv,Xse),e(Xse,X7o),e(Mv,V7o),e(Mv,Hj),e(Hj,z7o),e(Mv,W7o),e(N,Q7o),e(N,Ev),e(Ev,Vse),e(Vse,H7o),e(Ev,U7o),e(Ev,Uj),e(Uj,J7o),e(Ev,Y7o),e(N,K7o),e(N,yv),e(yv,zse),e(zse,Z7o),e(yv,e8o),e(yv,Jj),e(Jj,o8o),e(yv,r8o),e(N,t8o),e(N,wv),e(wv,Wse),e(Wse,a8o),e(wv,s8o),e(wv,Yj),e(Yj,n8o),e(wv,l8o),e(N,i8o),e(N,Av),e(Av,Qse),e(Qse,d8o),e(Av,c8o),e(Av,Kj),e(Kj,m8o),e(Av,f8o),e(N,g8o),e(N,Lv),e(Lv,Hse),e(Hse,h8o),e(Lv,u8o),e(Lv,Zj),e(Zj,p8o),e(Lv,_8o),e(N,b8o),e(N,Bv),e(Bv,Use),e(Use,v8o),e(Bv,T8o),e(Bv,eD),e(eD,F8o),e(Bv,C8o),e(N,M8o),e(N,xv),e(xv,Jse),e(Jse,E8o),e(xv,y8o),e(xv,oD),e(oD,w8o),e(xv,A8o),e(N,L8o),e(N,kv),e(kv,Yse),e(Yse,B8o),e(kv,x8o),e(kv,rD),e(rD,k8o),e(kv,R8o),e(N,S8o),e(N,Rv),e(Rv,Kse),e(Kse,P8o),e(Rv,$8o),e(Rv,tD),e(tD,I8o),e(Rv,j8o),e(N,D8o),e(N,Sv),e(Sv,Zse),e(Zse,N8o),e(Sv,q8o),e(Sv,aD),e(aD,O8o),e(Sv,G8o),e(N,X8o),e(N,Pv),e(Pv,ene),e(ene,V8o),e(Pv,z8o),e(Pv,sD),e(sD,W8o),e(Pv,Q8o),e(N,H8o),e(N,$v),e($v,one),e(one,U8o),e($v,J8o),e($v,nD),e(nD,Y8o),e($v,K8o),e(N,Z8o),e(N,Iv),e(Iv,rne),e(rne,e9o),e(Iv,o9o),e(Iv,lD),e(lD,r9o),e(Iv,t9o),e(N,a9o),e(N,jv),e(jv,tne),e(tne,s9o),e(jv,n9o),e(jv,iD),e(iD,l9o),e(jv,i9o),e(N,d9o),e(N,Dv),e(Dv,ane),e(ane,c9o),e(Dv,m9o),e(Dv,dD),e(dD,f9o),e(Dv,g9o),e(N,h9o),e(N,Nv),e(Nv,sne),e(sne,u9o),e(Nv,p9o),e(Nv,cD),e(cD,_9o),e(Nv,b9o),e(N,v9o),e(N,qv),e(qv,nne),e(nne,T9o),e(qv,F9o),e(qv,mD),e(mD,C9o),e(qv,M9o),e(N,E9o),e(N,Ov),e(Ov,lne),e(lne,y9o),e(Ov,w9o),e(Ov,fD),e(fD,A9o),e(Ov,L9o),e(N,B9o),e(N,Gv),e(Gv,ine),e(ine,x9o),e(Gv,k9o),e(Gv,gD),e(gD,R9o),e(Gv,S9o),e(N,P9o),e(N,Xv),e(Xv,dne),e(dne,$9o),e(Xv,I9o),e(Xv,hD),e(hD,j9o),e(Xv,D9o),e(N,N9o),e(N,Vv),e(Vv,cne),e(cne,q9o),e(Vv,O9o),e(Vv,uD),e(uD,G9o),e(Vv,X9o),e(N,V9o),e(N,zv),e(zv,mne),e(mne,z9o),e(zv,W9o),e(zv,pD),e(pD,Q9o),e(zv,H9o),e(N,U9o),e(N,Wv),e(Wv,fne),e(fne,J9o),e(Wv,Y9o),e(Wv,_D),e(_D,K9o),e(Wv,Z9o),e(N,eBo),e(N,Qv),e(Qv,gne),e(gne,oBo),e(Qv,rBo),e(Qv,bD),e(bD,tBo),e(Qv,aBo),e(N,sBo),e(N,Hv),e(Hv,hne),e(hne,nBo),e(Hv,lBo),e(Hv,vD),e(vD,iBo),e(Hv,dBo),e(N,cBo),e(N,Uv),e(Uv,une),e(une,mBo),e(Uv,fBo),e(Uv,TD),e(TD,gBo),e(Uv,hBo),e(N,uBo),e(N,Jv),e(Jv,pne),e(pne,pBo),e(Jv,_Bo),e(Jv,FD),e(FD,bBo),e(Jv,vBo),e(N,TBo),e(N,Yv),e(Yv,_ne),e(_ne,FBo),e(Yv,CBo),e(Yv,CD),e(CD,MBo),e(Yv,EBo),e(N,yBo),e(N,Kv),e(Kv,bne),e(bne,wBo),e(Kv,ABo),e(Kv,MD),e(MD,LBo),e(Kv,BBo),e(N,xBo),e(N,Zv),e(Zv,vne),e(vne,kBo),e(Zv,RBo),e(Zv,ED),e(ED,SBo),e(Zv,PBo),e(N,$Bo),e(N,eT),e(eT,Tne),e(Tne,IBo),e(eT,jBo),e(eT,yD),e(yD,DBo),e(eT,NBo),e(N,qBo),e(N,oT),e(oT,Fne),e(Fne,OBo),e(oT,GBo),e(oT,wD),e(wD,XBo),e(oT,VBo),e(We,zBo),e(We,rT),e(rT,WBo),e(rT,Cne),e(Cne,QBo),e(rT,HBo),e(rT,Mne),e(Mne,UBo),e(We,JBo),e(We,Ene),e(Ene,YBo),e(We,KBo),g(Nw,We,null),b(c,Zxe,_),b(c,Ed,_),e(Ed,tT),e(tT,yne),g(qw,yne,null),e(Ed,ZBo),e(Ed,wne),e(wne,exo),b(c,eke,_),b(c,sr,_),g(Ow,sr,null),e(sr,oxo),e(sr,yd),e(yd,rxo),e(yd,Ane),e(Ane,txo),e(yd,axo),e(yd,Lne),e(Lne,sxo),e(yd,nxo),e(sr,lxo),e(sr,Gw),e(Gw,ixo),e(Gw,Bne),e(Bne,dxo),e(Gw,cxo),e(sr,mxo),e(sr,Zr),g(Xw,Zr,null),e(Zr,fxo),e(Zr,xne),e(xne,gxo),e(Zr,hxo),e(Zr,wd),e(wd,uxo),e(wd,kne),e(kne,pxo),e(wd,_xo),e(wd,Rne),e(Rne,bxo),e(wd,vxo),e(Zr,Txo),e(Zr,Sne),e(Sne,Fxo),e(Zr,Cxo),g(Vw,Zr,null),e(sr,Mxo),e(sr,Qe),g(zw,Qe,null),e(Qe,Exo),e(Qe,Pne),e(Pne,yxo),e(Qe,wxo),e(Qe,Za),e(Za,Axo),e(Za,$ne),e($ne,Lxo),e(Za,Bxo),e(Za,Ine),e(Ine,xxo),e(Za,kxo),e(Za,jne),e(jne,Rxo),e(Za,Sxo),e(Qe,Pxo),e(Qe,R),e(R,aT),e(aT,Dne),e(Dne,$xo),e(aT,Ixo),e(aT,AD),e(AD,jxo),e(aT,Dxo),e(R,Nxo),e(R,sT),e(sT,Nne),e(Nne,qxo),e(sT,Oxo),e(sT,LD),e(LD,Gxo),e(sT,Xxo),e(R,Vxo),e(R,nT),e(nT,qne),e(qne,zxo),e(nT,Wxo),e(nT,BD),e(BD,Qxo),e(nT,Hxo),e(R,Uxo),e(R,lT),e(lT,One),e(One,Jxo),e(lT,Yxo),e(lT,xD),e(xD,Kxo),e(lT,Zxo),e(R,eko),e(R,iT),e(iT,Gne),e(Gne,oko),e(iT,rko),e(iT,kD),e(kD,tko),e(iT,ako),e(R,sko),e(R,dT),e(dT,Xne),e(Xne,nko),e(dT,lko),e(dT,RD),e(RD,iko),e(dT,dko),e(R,cko),e(R,cT),e(cT,Vne),e(Vne,mko),e(cT,fko),e(cT,SD),e(SD,gko),e(cT,hko),e(R,uko),e(R,mT),e(mT,zne),e(zne,pko),e(mT,_ko),e(mT,PD),e(PD,bko),e(mT,vko),e(R,Tko),e(R,fT),e(fT,Wne),e(Wne,Fko),e(fT,Cko),e(fT,$D),e($D,Mko),e(fT,Eko),e(R,yko),e(R,gT),e(gT,Qne),e(Qne,wko),e(gT,Ako),e(gT,ID),e(ID,Lko),e(gT,Bko),e(R,xko),e(R,hT),e(hT,Hne),e(Hne,kko),e(hT,Rko),e(hT,jD),e(jD,Sko),e(hT,Pko),e(R,$ko),e(R,uT),e(uT,Une),e(Une,Iko),e(uT,jko),e(uT,DD),e(DD,Dko),e(uT,Nko),e(R,qko),e(R,pT),e(pT,Jne),e(Jne,Oko),e(pT,Gko),e(pT,ND),e(ND,Xko),e(pT,Vko),e(R,zko),e(R,_T),e(_T,Yne),e(Yne,Wko),e(_T,Qko),e(_T,qD),e(qD,Hko),e(_T,Uko),e(R,Jko),e(R,bT),e(bT,Kne),e(Kne,Yko),e(bT,Kko),e(bT,OD),e(OD,Zko),e(bT,eRo),e(R,oRo),e(R,vT),e(vT,Zne),e(Zne,rRo),e(vT,tRo),e(vT,GD),e(GD,aRo),e(vT,sRo),e(R,nRo),e(R,TT),e(TT,ele),e(ele,lRo),e(TT,iRo),e(TT,XD),e(XD,dRo),e(TT,cRo),e(R,mRo),e(R,FT),e(FT,ole),e(ole,fRo),e(FT,gRo),e(FT,VD),e(VD,hRo),e(FT,uRo),e(R,pRo),e(R,CT),e(CT,rle),e(rle,_Ro),e(CT,bRo),e(CT,zD),e(zD,vRo),e(CT,TRo),e(R,FRo),e(R,MT),e(MT,tle),e(tle,CRo),e(MT,MRo),e(MT,WD),e(WD,ERo),e(MT,yRo),e(R,wRo),e(R,ET),e(ET,ale),e(ale,ARo),e(ET,LRo),e(ET,QD),e(QD,BRo),e(ET,xRo),e(R,kRo),e(R,yT),e(yT,sle),e(sle,RRo),e(yT,SRo),e(yT,HD),e(HD,PRo),e(yT,$Ro),e(R,IRo),e(R,wT),e(wT,nle),e(nle,jRo),e(wT,DRo),e(wT,UD),e(UD,NRo),e(wT,qRo),e(R,ORo),e(R,AT),e(AT,lle),e(lle,GRo),e(AT,XRo),e(AT,JD),e(JD,VRo),e(AT,zRo),e(R,WRo),e(R,LT),e(LT,ile),e(ile,QRo),e(LT,HRo),e(LT,YD),e(YD,URo),e(LT,JRo),e(R,YRo),e(R,BT),e(BT,dle),e(dle,KRo),e(BT,ZRo),e(BT,KD),e(KD,eSo),e(BT,oSo),e(R,rSo),e(R,xT),e(xT,cle),e(cle,tSo),e(xT,aSo),e(xT,ZD),e(ZD,sSo),e(xT,nSo),e(R,lSo),e(R,kT),e(kT,mle),e(mle,iSo),e(kT,dSo),e(kT,eN),e(eN,cSo),e(kT,mSo),e(R,fSo),e(R,RT),e(RT,fle),e(fle,gSo),e(RT,hSo),e(RT,oN),e(oN,uSo),e(RT,pSo),e(R,_So),e(R,ST),e(ST,gle),e(gle,bSo),e(ST,vSo),e(ST,rN),e(rN,TSo),e(ST,FSo),e(R,CSo),e(R,PT),e(PT,hle),e(hle,MSo),e(PT,ESo),e(PT,tN),e(tN,ySo),e(PT,wSo),e(R,ASo),e(R,$T),e($T,ule),e(ule,LSo),e($T,BSo),e($T,aN),e(aN,xSo),e($T,kSo),e(R,RSo),e(R,IT),e(IT,ple),e(ple,SSo),e(IT,PSo),e(IT,sN),e(sN,$So),e(IT,ISo),e(R,jSo),e(R,jT),e(jT,_le),e(_le,DSo),e(jT,NSo),e(jT,nN),e(nN,qSo),e(jT,OSo),e(R,GSo),e(R,DT),e(DT,ble),e(ble,XSo),e(DT,VSo),e(DT,lN),e(lN,zSo),e(DT,WSo),e(R,QSo),e(R,NT),e(NT,vle),e(vle,HSo),e(NT,USo),e(NT,iN),e(iN,JSo),e(NT,YSo),e(R,KSo),e(R,qT),e(qT,Tle),e(Tle,ZSo),e(qT,ePo),e(qT,dN),e(dN,oPo),e(qT,rPo),e(R,tPo),e(R,OT),e(OT,Fle),e(Fle,aPo),e(OT,sPo),e(OT,cN),e(cN,nPo),e(OT,lPo),e(R,iPo),e(R,GT),e(GT,Cle),e(Cle,dPo),e(GT,cPo),e(GT,mN),e(mN,mPo),e(GT,fPo),e(Qe,gPo),e(Qe,XT),e(XT,hPo),e(XT,Mle),e(Mle,uPo),e(XT,pPo),e(XT,Ele),e(Ele,_Po),e(Qe,bPo),e(Qe,yle),e(yle,vPo),e(Qe,TPo),g(Ww,Qe,null),b(c,oke,_),b(c,Ad,_),e(Ad,VT),e(VT,wle),g(Qw,wle,null),e(Ad,FPo),e(Ad,Ale),e(Ale,CPo),b(c,rke,_),b(c,nr,_),g(Hw,nr,null),e(nr,MPo),e(nr,Ld),e(Ld,EPo),e(Ld,Lle),e(Lle,yPo),e(Ld,wPo),e(Ld,Ble),e(Ble,APo),e(Ld,LPo),e(nr,BPo),e(nr,Uw),e(Uw,xPo),e(Uw,xle),e(xle,kPo),e(Uw,RPo),e(nr,SPo),e(nr,et),g(Jw,et,null),e(et,PPo),e(et,kle),e(kle,$Po),e(et,IPo),e(et,Bd),e(Bd,jPo),e(Bd,Rle),e(Rle,DPo),e(Bd,NPo),e(Bd,Sle),e(Sle,qPo),e(Bd,OPo),e(et,GPo),e(et,Ple),e(Ple,XPo),e(et,VPo),g(Yw,et,null),e(nr,zPo),e(nr,He),g(Kw,He,null),e(He,WPo),e(He,$le),e($le,QPo),e(He,HPo),e(He,es),e(es,UPo),e(es,Ile),e(Ile,JPo),e(es,YPo),e(es,jle),e(jle,KPo),e(es,ZPo),e(es,Dle),e(Dle,e$o),e(es,o$o),e(He,r$o),e(He,Nle),e(Nle,zT),e(zT,qle),e(qle,t$o),e(zT,a$o),e(zT,fN),e(fN,s$o),e(zT,n$o),e(He,l$o),e(He,WT),e(WT,i$o),e(WT,Ole),e(Ole,d$o),e(WT,c$o),e(WT,Gle),e(Gle,m$o),e(He,f$o),e(He,Xle),e(Xle,g$o),e(He,h$o),g(Zw,He,null),b(c,tke,_),b(c,xd,_),e(xd,QT),e(QT,Vle),g(e6,Vle,null),e(xd,u$o),e(xd,zle),e(zle,p$o),b(c,ake,_),b(c,lr,_),g(o6,lr,null),e(lr,_$o),e(lr,kd),e(kd,b$o),e(kd,Wle),e(Wle,v$o),e(kd,T$o),e(kd,Qle),e(Qle,F$o),e(kd,C$o),e(lr,M$o),e(lr,r6),e(r6,E$o),e(r6,Hle),e(Hle,y$o),e(r6,w$o),e(lr,A$o),e(lr,ot),g(t6,ot,null),e(ot,L$o),e(ot,Ule),e(Ule,B$o),e(ot,x$o),e(ot,Rd),e(Rd,k$o),e(Rd,Jle),e(Jle,R$o),e(Rd,S$o),e(Rd,Yle),e(Yle,P$o),e(Rd,$$o),e(ot,I$o),e(ot,Kle),e(Kle,j$o),e(ot,D$o),g(a6,ot,null),e(lr,N$o),e(lr,Ue),g(s6,Ue,null),e(Ue,q$o),e(Ue,Zle),e(Zle,O$o),e(Ue,G$o),e(Ue,os),e(os,X$o),e(os,eie),e(eie,V$o),e(os,z$o),e(os,oie),e(oie,W$o),e(os,Q$o),e(os,rie),e(rie,H$o),e(os,U$o),e(Ue,J$o),e(Ue,pe),e(pe,HT),e(HT,tie),e(tie,Y$o),e(HT,K$o),e(HT,gN),e(gN,Z$o),e(HT,eIo),e(pe,oIo),e(pe,UT),e(UT,aie),e(aie,rIo),e(UT,tIo),e(UT,hN),e(hN,aIo),e(UT,sIo),e(pe,nIo),e(pe,qn),e(qn,sie),e(sie,lIo),e(qn,iIo),e(qn,uN),e(uN,dIo),e(qn,cIo),e(qn,pN),e(pN,mIo),e(qn,fIo),e(pe,gIo),e(pe,JT),e(JT,nie),e(nie,hIo),e(JT,uIo),e(JT,_N),e(_N,pIo),e(JT,_Io),e(pe,bIo),e(pe,fa),e(fa,lie),e(lie,vIo),e(fa,TIo),e(fa,bN),e(bN,FIo),e(fa,CIo),e(fa,vN),e(vN,MIo),e(fa,EIo),e(fa,TN),e(TN,yIo),e(fa,wIo),e(pe,AIo),e(pe,YT),e(YT,iie),e(iie,LIo),e(YT,BIo),e(YT,FN),e(FN,xIo),e(YT,kIo),e(pe,RIo),e(pe,KT),e(KT,die),e(die,SIo),e(KT,PIo),e(KT,CN),e(CN,$Io),e(KT,IIo),e(pe,jIo),e(pe,ZT),e(ZT,cie),e(cie,DIo),e(ZT,NIo),e(ZT,MN),e(MN,qIo),e(ZT,OIo),e(pe,GIo),e(pe,e1),e(e1,mie),e(mie,XIo),e(e1,VIo),e(e1,EN),e(EN,zIo),e(e1,WIo),e(pe,QIo),e(pe,o1),e(o1,fie),e(fie,HIo),e(o1,UIo),e(o1,yN),e(yN,JIo),e(o1,YIo),e(Ue,KIo),e(Ue,r1),e(r1,ZIo),e(r1,gie),e(gie,ejo),e(r1,ojo),e(r1,hie),e(hie,rjo),e(Ue,tjo),e(Ue,uie),e(uie,ajo),e(Ue,sjo),g(n6,Ue,null),b(c,ske,_),b(c,Sd,_),e(Sd,t1),e(t1,pie),g(l6,pie,null),e(Sd,njo),e(Sd,_ie),e(_ie,ljo),b(c,nke,_),b(c,ir,_),g(i6,ir,null),e(ir,ijo),e(ir,Pd),e(Pd,djo),e(Pd,bie),e(bie,cjo),e(Pd,mjo),e(Pd,vie),e(vie,fjo),e(Pd,gjo),e(ir,hjo),e(ir,d6),e(d6,ujo),e(d6,Tie),e(Tie,pjo),e(d6,_jo),e(ir,bjo),e(ir,rt),g(c6,rt,null),e(rt,vjo),e(rt,Fie),e(Fie,Tjo),e(rt,Fjo),e(rt,$d),e($d,Cjo),e($d,Cie),e(Cie,Mjo),e($d,Ejo),e($d,Mie),e(Mie,yjo),e($d,wjo),e(rt,Ajo),e(rt,Eie),e(Eie,Ljo),e(rt,Bjo),g(m6,rt,null),e(ir,xjo),e(ir,Je),g(f6,Je,null),e(Je,kjo),e(Je,yie),e(yie,Rjo),e(Je,Sjo),e(Je,rs),e(rs,Pjo),e(rs,wie),e(wie,$jo),e(rs,Ijo),e(rs,Aie),e(Aie,jjo),e(rs,Djo),e(rs,Lie),e(Lie,Njo),e(rs,qjo),e(Je,Ojo),e(Je,Bie),e(Bie,a1),e(a1,xie),e(xie,Gjo),e(a1,Xjo),e(a1,wN),e(wN,Vjo),e(a1,zjo),e(Je,Wjo),e(Je,s1),e(s1,Qjo),e(s1,kie),e(kie,Hjo),e(s1,Ujo),e(s1,Rie),e(Rie,Jjo),e(Je,Yjo),e(Je,Sie),e(Sie,Kjo),e(Je,Zjo),g(g6,Je,null),b(c,lke,_),b(c,Id,_),e(Id,n1),e(n1,Pie),g(h6,Pie,null),e(Id,eDo),e(Id,$ie),e($ie,oDo),b(c,ike,_),b(c,dr,_),g(u6,dr,null),e(dr,rDo),e(dr,jd),e(jd,tDo),e(jd,Iie),e(Iie,aDo),e(jd,sDo),e(jd,jie),e(jie,nDo),e(jd,lDo),e(dr,iDo),e(dr,p6),e(p6,dDo),e(p6,Die),e(Die,cDo),e(p6,mDo),e(dr,fDo),e(dr,tt),g(_6,tt,null),e(tt,gDo),e(tt,Nie),e(Nie,hDo),e(tt,uDo),e(tt,Dd),e(Dd,pDo),e(Dd,qie),e(qie,_Do),e(Dd,bDo),e(Dd,Oie),e(Oie,vDo),e(Dd,TDo),e(tt,FDo),e(tt,Gie),e(Gie,CDo),e(tt,MDo),g(b6,tt,null),e(dr,EDo),e(dr,Ye),g(v6,Ye,null),e(Ye,yDo),e(Ye,Xie),e(Xie,wDo),e(Ye,ADo),e(Ye,ts),e(ts,LDo),e(ts,Vie),e(Vie,BDo),e(ts,xDo),e(ts,zie),e(zie,kDo),e(ts,RDo),e(ts,Wie),e(Wie,SDo),e(ts,PDo),e(Ye,$Do),e(Ye,ke),e(ke,l1),e(l1,Qie),e(Qie,IDo),e(l1,jDo),e(l1,AN),e(AN,DDo),e(l1,NDo),e(ke,qDo),e(ke,i1),e(i1,Hie),e(Hie,ODo),e(i1,GDo),e(i1,LN),e(LN,XDo),e(i1,VDo),e(ke,zDo),e(ke,d1),e(d1,Uie),e(Uie,WDo),e(d1,QDo),e(d1,BN),e(BN,HDo),e(d1,UDo),e(ke,JDo),e(ke,c1),e(c1,Jie),e(Jie,YDo),e(c1,KDo),e(c1,xN),e(xN,ZDo),e(c1,eNo),e(ke,oNo),e(ke,m1),e(m1,Yie),e(Yie,rNo),e(m1,tNo),e(m1,kN),e(kN,aNo),e(m1,sNo),e(ke,nNo),e(ke,f1),e(f1,Kie),e(Kie,lNo),e(f1,iNo),e(f1,RN),e(RN,dNo),e(f1,cNo),e(ke,mNo),e(ke,g1),e(g1,Zie),e(Zie,fNo),e(g1,gNo),e(g1,SN),e(SN,hNo),e(g1,uNo),e(ke,pNo),e(ke,h1),e(h1,ede),e(ede,_No),e(h1,bNo),e(h1,PN),e(PN,vNo),e(h1,TNo),e(Ye,FNo),e(Ye,u1),e(u1,CNo),e(u1,ode),e(ode,MNo),e(u1,ENo),e(u1,rde),e(rde,yNo),e(Ye,wNo),e(Ye,tde),e(tde,ANo),e(Ye,LNo),g(T6,Ye,null),b(c,dke,_),b(c,Nd,_),e(Nd,p1),e(p1,ade),g(F6,ade,null),e(Nd,BNo),e(Nd,sde),e(sde,xNo),b(c,cke,_),b(c,cr,_),g(C6,cr,null),e(cr,kNo),e(cr,qd),e(qd,RNo),e(qd,nde),e(nde,SNo),e(qd,PNo),e(qd,lde),e(lde,$No),e(qd,INo),e(cr,jNo),e(cr,M6),e(M6,DNo),e(M6,ide),e(ide,NNo),e(M6,qNo),e(cr,ONo),e(cr,at),g(E6,at,null),e(at,GNo),e(at,dde),e(dde,XNo),e(at,VNo),e(at,Od),e(Od,zNo),e(Od,cde),e(cde,WNo),e(Od,QNo),e(Od,mde),e(mde,HNo),e(Od,UNo),e(at,JNo),e(at,fde),e(fde,YNo),e(at,KNo),g(y6,at,null),e(cr,ZNo),e(cr,Ke),g(w6,Ke,null),e(Ke,eqo),e(Ke,gde),e(gde,oqo),e(Ke,rqo),e(Ke,as),e(as,tqo),e(as,hde),e(hde,aqo),e(as,sqo),e(as,ude),e(ude,nqo),e(as,lqo),e(as,pde),e(pde,iqo),e(as,dqo),e(Ke,cqo),e(Ke,ss),e(ss,_1),e(_1,_de),e(_de,mqo),e(_1,fqo),e(_1,$N),e($N,gqo),e(_1,hqo),e(ss,uqo),e(ss,b1),e(b1,bde),e(bde,pqo),e(b1,_qo),e(b1,IN),e(IN,bqo),e(b1,vqo),e(ss,Tqo),e(ss,v1),e(v1,vde),e(vde,Fqo),e(v1,Cqo),e(v1,jN),e(jN,Mqo),e(v1,Eqo),e(ss,yqo),e(ss,T1),e(T1,Tde),e(Tde,wqo),e(T1,Aqo),e(T1,DN),e(DN,Lqo),e(T1,Bqo),e(Ke,xqo),e(Ke,F1),e(F1,kqo),e(F1,Fde),e(Fde,Rqo),e(F1,Sqo),e(F1,Cde),e(Cde,Pqo),e(Ke,$qo),e(Ke,Mde),e(Mde,Iqo),e(Ke,jqo),g(A6,Ke,null),b(c,mke,_),b(c,Gd,_),e(Gd,C1),e(C1,Ede),g(L6,Ede,null),e(Gd,Dqo),e(Gd,yde),e(yde,Nqo),b(c,fke,_),b(c,mr,_),g(B6,mr,null),e(mr,qqo),e(mr,Xd),e(Xd,Oqo),e(Xd,wde),e(wde,Gqo),e(Xd,Xqo),e(Xd,Ade),e(Ade,Vqo),e(Xd,zqo),e(mr,Wqo),e(mr,x6),e(x6,Qqo),e(x6,Lde),e(Lde,Hqo),e(x6,Uqo),e(mr,Jqo),e(mr,st),g(k6,st,null),e(st,Yqo),e(st,Bde),e(Bde,Kqo),e(st,Zqo),e(st,Vd),e(Vd,eOo),e(Vd,xde),e(xde,oOo),e(Vd,rOo),e(Vd,kde),e(kde,tOo),e(Vd,aOo),e(st,sOo),e(st,Rde),e(Rde,nOo),e(st,lOo),g(R6,st,null),e(mr,iOo),e(mr,Ze),g(S6,Ze,null),e(Ze,dOo),e(Ze,Sde),e(Sde,cOo),e(Ze,mOo),e(Ze,ns),e(ns,fOo),e(ns,Pde),e(Pde,gOo),e(ns,hOo),e(ns,$de),e($de,uOo),e(ns,pOo),e(ns,Ide),e(Ide,_Oo),e(ns,bOo),e(Ze,vOo),e(Ze,Re),e(Re,M1),e(M1,jde),e(jde,TOo),e(M1,FOo),e(M1,NN),e(NN,COo),e(M1,MOo),e(Re,EOo),e(Re,E1),e(E1,Dde),e(Dde,yOo),e(E1,wOo),e(E1,qN),e(qN,AOo),e(E1,LOo),e(Re,BOo),e(Re,y1),e(y1,Nde),e(Nde,xOo),e(y1,kOo),e(y1,ON),e(ON,ROo),e(y1,SOo),e(Re,POo),e(Re,w1),e(w1,qde),e(qde,$Oo),e(w1,IOo),e(w1,GN),e(GN,jOo),e(w1,DOo),e(Re,NOo),e(Re,A1),e(A1,Ode),e(Ode,qOo),e(A1,OOo),e(A1,XN),e(XN,GOo),e(A1,XOo),e(Re,VOo),e(Re,L1),e(L1,Gde),e(Gde,zOo),e(L1,WOo),e(L1,VN),e(VN,QOo),e(L1,HOo),e(Re,UOo),e(Re,B1),e(B1,Xde),e(Xde,JOo),e(B1,YOo),e(B1,zN),e(zN,KOo),e(B1,ZOo),e(Re,eGo),e(Re,x1),e(x1,Vde),e(Vde,oGo),e(x1,rGo),e(x1,WN),e(WN,tGo),e(x1,aGo),e(Ze,sGo),e(Ze,k1),e(k1,nGo),e(k1,zde),e(zde,lGo),e(k1,iGo),e(k1,Wde),e(Wde,dGo),e(Ze,cGo),e(Ze,Qde),e(Qde,mGo),e(Ze,fGo),g(P6,Ze,null),b(c,gke,_),b(c,zd,_),e(zd,R1),e(R1,Hde),g($6,Hde,null),e(zd,gGo),e(zd,Ude),e(Ude,hGo),b(c,hke,_),b(c,fr,_),g(I6,fr,null),e(fr,uGo),e(fr,Wd),e(Wd,pGo),e(Wd,Jde),e(Jde,_Go),e(Wd,bGo),e(Wd,Yde),e(Yde,vGo),e(Wd,TGo),e(fr,FGo),e(fr,j6),e(j6,CGo),e(j6,Kde),e(Kde,MGo),e(j6,EGo),e(fr,yGo),e(fr,nt),g(D6,nt,null),e(nt,wGo),e(nt,Zde),e(Zde,AGo),e(nt,LGo),e(nt,Qd),e(Qd,BGo),e(Qd,ece),e(ece,xGo),e(Qd,kGo),e(Qd,oce),e(oce,RGo),e(Qd,SGo),e(nt,PGo),e(nt,rce),e(rce,$Go),e(nt,IGo),g(N6,nt,null),e(fr,jGo),e(fr,eo),g(q6,eo,null),e(eo,DGo),e(eo,tce),e(tce,NGo),e(eo,qGo),e(eo,ls),e(ls,OGo),e(ls,ace),e(ace,GGo),e(ls,XGo),e(ls,sce),e(sce,VGo),e(ls,zGo),e(ls,nce),e(nce,WGo),e(ls,QGo),e(eo,HGo),e(eo,O6),e(O6,S1),e(S1,lce),e(lce,UGo),e(S1,JGo),e(S1,QN),e(QN,YGo),e(S1,KGo),e(O6,ZGo),e(O6,P1),e(P1,ice),e(ice,eXo),e(P1,oXo),e(P1,HN),e(HN,rXo),e(P1,tXo),e(eo,aXo),e(eo,$1),e($1,sXo),e($1,dce),e(dce,nXo),e($1,lXo),e($1,cce),e(cce,iXo),e(eo,dXo),e(eo,mce),e(mce,cXo),e(eo,mXo),g(G6,eo,null),b(c,uke,_),b(c,Hd,_),e(Hd,I1),e(I1,fce),g(X6,fce,null),e(Hd,fXo),e(Hd,gce),e(gce,gXo),b(c,pke,_),b(c,gr,_),g(V6,gr,null),e(gr,hXo),e(gr,Ud),e(Ud,uXo),e(Ud,hce),e(hce,pXo),e(Ud,_Xo),e(Ud,uce),e(uce,bXo),e(Ud,vXo),e(gr,TXo),e(gr,z6),e(z6,FXo),e(z6,pce),e(pce,CXo),e(z6,MXo),e(gr,EXo),e(gr,lt),g(W6,lt,null),e(lt,yXo),e(lt,_ce),e(_ce,wXo),e(lt,AXo),e(lt,Jd),e(Jd,LXo),e(Jd,bce),e(bce,BXo),e(Jd,xXo),e(Jd,vce),e(vce,kXo),e(Jd,RXo),e(lt,SXo),e(lt,Tce),e(Tce,PXo),e(lt,$Xo),g(Q6,lt,null),e(gr,IXo),e(gr,oo),g(H6,oo,null),e(oo,jXo),e(oo,Fce),e(Fce,DXo),e(oo,NXo),e(oo,is),e(is,qXo),e(is,Cce),e(Cce,OXo),e(is,GXo),e(is,Mce),e(Mce,XXo),e(is,VXo),e(is,Ece),e(Ece,zXo),e(is,WXo),e(oo,QXo),e(oo,ds),e(ds,j1),e(j1,yce),e(yce,HXo),e(j1,UXo),e(j1,UN),e(UN,JXo),e(j1,YXo),e(ds,KXo),e(ds,D1),e(D1,wce),e(wce,ZXo),e(D1,eVo),e(D1,JN),e(JN,oVo),e(D1,rVo),e(ds,tVo),e(ds,N1),e(N1,Ace),e(Ace,aVo),e(N1,sVo),e(N1,YN),e(YN,nVo),e(N1,lVo),e(ds,iVo),e(ds,q1),e(q1,Lce),e(Lce,dVo),e(q1,cVo),e(q1,KN),e(KN,mVo),e(q1,fVo),e(oo,gVo),e(oo,O1),e(O1,hVo),e(O1,Bce),e(Bce,uVo),e(O1,pVo),e(O1,xce),e(xce,_Vo),e(oo,bVo),e(oo,kce),e(kce,vVo),e(oo,TVo),g(U6,oo,null),b(c,_ke,_),b(c,Yd,_),e(Yd,G1),e(G1,Rce),g(J6,Rce,null),e(Yd,FVo),e(Yd,Sce),e(Sce,CVo),b(c,bke,_),b(c,hr,_),g(Y6,hr,null),e(hr,MVo),e(hr,Kd),e(Kd,EVo),e(Kd,Pce),e(Pce,yVo),e(Kd,wVo),e(Kd,$ce),e($ce,AVo),e(Kd,LVo),e(hr,BVo),e(hr,K6),e(K6,xVo),e(K6,Ice),e(Ice,kVo),e(K6,RVo),e(hr,SVo),e(hr,it),g(Z6,it,null),e(it,PVo),e(it,jce),e(jce,$Vo),e(it,IVo),e(it,Zd),e(Zd,jVo),e(Zd,Dce),e(Dce,DVo),e(Zd,NVo),e(Zd,Nce),e(Nce,qVo),e(Zd,OVo),e(it,GVo),e(it,qce),e(qce,XVo),e(it,VVo),g(eA,it,null),e(hr,zVo),e(hr,ro),g(oA,ro,null),e(ro,WVo),e(ro,Oce),e(Oce,QVo),e(ro,HVo),e(ro,cs),e(cs,UVo),e(cs,Gce),e(Gce,JVo),e(cs,YVo),e(cs,Xce),e(Xce,KVo),e(cs,ZVo),e(cs,Vce),e(Vce,ezo),e(cs,ozo),e(ro,rzo),e(ro,ec),e(ec,X1),e(X1,zce),e(zce,tzo),e(X1,azo),e(X1,ZN),e(ZN,szo),e(X1,nzo),e(ec,lzo),e(ec,V1),e(V1,Wce),e(Wce,izo),e(V1,dzo),e(V1,eq),e(eq,czo),e(V1,mzo),e(ec,fzo),e(ec,z1),e(z1,Qce),e(Qce,gzo),e(z1,hzo),e(z1,oq),e(oq,uzo),e(z1,pzo),e(ro,_zo),e(ro,W1),e(W1,bzo),e(W1,Hce),e(Hce,vzo),e(W1,Tzo),e(W1,Uce),e(Uce,Fzo),e(ro,Czo),e(ro,Jce),e(Jce,Mzo),e(ro,Ezo),g(rA,ro,null),b(c,vke,_),b(c,oc,_),e(oc,Q1),e(Q1,Yce),g(tA,Yce,null),e(oc,yzo),e(oc,Kce),e(Kce,wzo),b(c,Tke,_),b(c,ur,_),g(aA,ur,null),e(ur,Azo),e(ur,rc),e(rc,Lzo),e(rc,Zce),e(Zce,Bzo),e(rc,xzo),e(rc,eme),e(eme,kzo),e(rc,Rzo),e(ur,Szo),e(ur,sA),e(sA,Pzo),e(sA,ome),e(ome,$zo),e(sA,Izo),e(ur,jzo),e(ur,dt),g(nA,dt,null),e(dt,Dzo),e(dt,rme),e(rme,Nzo),e(dt,qzo),e(dt,tc),e(tc,Ozo),e(tc,tme),e(tme,Gzo),e(tc,Xzo),e(tc,ame),e(ame,Vzo),e(tc,zzo),e(dt,Wzo),e(dt,sme),e(sme,Qzo),e(dt,Hzo),g(lA,dt,null),e(ur,Uzo),e(ur,to),g(iA,to,null),e(to,Jzo),e(to,nme),e(nme,Yzo),e(to,Kzo),e(to,ms),e(ms,Zzo),e(ms,lme),e(lme,eWo),e(ms,oWo),e(ms,ime),e(ime,rWo),e(ms,tWo),e(ms,dme),e(dme,aWo),e(ms,sWo),e(to,nWo),e(to,cme),e(cme,H1),e(H1,mme),e(mme,lWo),e(H1,iWo),e(H1,rq),e(rq,dWo),e(H1,cWo),e(to,mWo),e(to,U1),e(U1,fWo),e(U1,fme),e(fme,gWo),e(U1,hWo),e(U1,gme),e(gme,uWo),e(to,pWo),e(to,hme),e(hme,_Wo),e(to,bWo),g(dA,to,null),b(c,Fke,_),b(c,ac,_),e(ac,J1),e(J1,ume),g(cA,ume,null),e(ac,vWo),e(ac,pme),e(pme,TWo),b(c,Cke,_),b(c,pr,_),g(mA,pr,null),e(pr,FWo),e(pr,sc),e(sc,CWo),e(sc,_me),e(_me,MWo),e(sc,EWo),e(sc,bme),e(bme,yWo),e(sc,wWo),e(pr,AWo),e(pr,fA),e(fA,LWo),e(fA,vme),e(vme,BWo),e(fA,xWo),e(pr,kWo),e(pr,ct),g(gA,ct,null),e(ct,RWo),e(ct,Tme),e(Tme,SWo),e(ct,PWo),e(ct,nc),e(nc,$Wo),e(nc,Fme),e(Fme,IWo),e(nc,jWo),e(nc,Cme),e(Cme,DWo),e(nc,NWo),e(ct,qWo),e(ct,Mme),e(Mme,OWo),e(ct,GWo),g(hA,ct,null),e(pr,XWo),e(pr,ao),g(uA,ao,null),e(ao,VWo),e(ao,Eme),e(Eme,zWo),e(ao,WWo),e(ao,fs),e(fs,QWo),e(fs,yme),e(yme,HWo),e(fs,UWo),e(fs,wme),e(wme,JWo),e(fs,YWo),e(fs,Ame),e(Ame,KWo),e(fs,ZWo),e(ao,eQo),e(ao,Lme),e(Lme,Y1),e(Y1,Bme),e(Bme,oQo),e(Y1,rQo),e(Y1,tq),e(tq,tQo),e(Y1,aQo),e(ao,sQo),e(ao,K1),e(K1,nQo),e(K1,xme),e(xme,lQo),e(K1,iQo),e(K1,kme),e(kme,dQo),e(ao,cQo),e(ao,Rme),e(Rme,mQo),e(ao,fQo),g(pA,ao,null),b(c,Mke,_),b(c,lc,_),e(lc,Z1),e(Z1,Sme),g(_A,Sme,null),e(lc,gQo),e(lc,Pme),e(Pme,hQo),b(c,Eke,_),b(c,_r,_),g(bA,_r,null),e(_r,uQo),e(_r,ic),e(ic,pQo),e(ic,$me),e($me,_Qo),e(ic,bQo),e(ic,Ime),e(Ime,vQo),e(ic,TQo),e(_r,FQo),e(_r,vA),e(vA,CQo),e(vA,jme),e(jme,MQo),e(vA,EQo),e(_r,yQo),e(_r,mt),g(TA,mt,null),e(mt,wQo),e(mt,Dme),e(Dme,AQo),e(mt,LQo),e(mt,dc),e(dc,BQo),e(dc,Nme),e(Nme,xQo),e(dc,kQo),e(dc,qme),e(qme,RQo),e(dc,SQo),e(mt,PQo),e(mt,Ome),e(Ome,$Qo),e(mt,IQo),g(FA,mt,null),e(_r,jQo),e(_r,so),g(CA,so,null),e(so,DQo),e(so,Gme),e(Gme,NQo),e(so,qQo),e(so,gs),e(gs,OQo),e(gs,Xme),e(Xme,GQo),e(gs,XQo),e(gs,Vme),e(Vme,VQo),e(gs,zQo),e(gs,zme),e(zme,WQo),e(gs,QQo),e(so,HQo),e(so,MA),e(MA,eF),e(eF,Wme),e(Wme,UQo),e(eF,JQo),e(eF,aq),e(aq,YQo),e(eF,KQo),e(MA,ZQo),e(MA,oF),e(oF,Qme),e(Qme,eHo),e(oF,oHo),e(oF,sq),e(sq,rHo),e(oF,tHo),e(so,aHo),e(so,rF),e(rF,sHo),e(rF,Hme),e(Hme,nHo),e(rF,lHo),e(rF,Ume),e(Ume,iHo),e(so,dHo),e(so,Jme),e(Jme,cHo),e(so,mHo),g(EA,so,null),b(c,yke,_),b(c,cc,_),e(cc,tF),e(tF,Yme),g(yA,Yme,null),e(cc,fHo),e(cc,Kme),e(Kme,gHo),b(c,wke,_),b(c,br,_),g(wA,br,null),e(br,hHo),e(br,mc),e(mc,uHo),e(mc,Zme),e(Zme,pHo),e(mc,_Ho),e(mc,efe),e(efe,bHo),e(mc,vHo),e(br,THo),e(br,AA),e(AA,FHo),e(AA,ofe),e(ofe,CHo),e(AA,MHo),e(br,EHo),e(br,ft),g(LA,ft,null),e(ft,yHo),e(ft,rfe),e(rfe,wHo),e(ft,AHo),e(ft,fc),e(fc,LHo),e(fc,tfe),e(tfe,BHo),e(fc,xHo),e(fc,afe),e(afe,kHo),e(fc,RHo),e(ft,SHo),e(ft,sfe),e(sfe,PHo),e(ft,$Ho),g(BA,ft,null),e(br,IHo),e(br,no),g(xA,no,null),e(no,jHo),e(no,nfe),e(nfe,DHo),e(no,NHo),e(no,hs),e(hs,qHo),e(hs,lfe),e(lfe,OHo),e(hs,GHo),e(hs,ife),e(ife,XHo),e(hs,VHo),e(hs,dfe),e(dfe,zHo),e(hs,WHo),e(no,QHo),e(no,cfe),e(cfe,aF),e(aF,mfe),e(mfe,HHo),e(aF,UHo),e(aF,nq),e(nq,JHo),e(aF,YHo),e(no,KHo),e(no,sF),e(sF,ZHo),e(sF,ffe),e(ffe,eUo),e(sF,oUo),e(sF,gfe),e(gfe,rUo),e(no,tUo),e(no,hfe),e(hfe,aUo),e(no,sUo),g(kA,no,null),b(c,Ake,_),b(c,gc,_),e(gc,nF),e(nF,ufe),g(RA,ufe,null),e(gc,nUo),e(gc,pfe),e(pfe,lUo),b(c,Lke,_),b(c,vr,_),g(SA,vr,null),e(vr,iUo),e(vr,hc),e(hc,dUo),e(hc,_fe),e(_fe,cUo),e(hc,mUo),e(hc,bfe),e(bfe,fUo),e(hc,gUo),e(vr,hUo),e(vr,PA),e(PA,uUo),e(PA,vfe),e(vfe,pUo),e(PA,_Uo),e(vr,bUo),e(vr,gt),g($A,gt,null),e(gt,vUo),e(gt,Tfe),e(Tfe,TUo),e(gt,FUo),e(gt,uc),e(uc,CUo),e(uc,Ffe),e(Ffe,MUo),e(uc,EUo),e(uc,Cfe),e(Cfe,yUo),e(uc,wUo),e(gt,AUo),e(gt,Mfe),e(Mfe,LUo),e(gt,BUo),g(IA,gt,null),e(vr,xUo),e(vr,ho),g(jA,ho,null),e(ho,kUo),e(ho,Efe),e(Efe,RUo),e(ho,SUo),e(ho,us),e(us,PUo),e(us,yfe),e(yfe,$Uo),e(us,IUo),e(us,wfe),e(wfe,jUo),e(us,DUo),e(us,Afe),e(Afe,NUo),e(us,qUo),e(ho,OUo),e(ho,B),e(B,lF),e(lF,Lfe),e(Lfe,GUo),e(lF,XUo),e(lF,lq),e(lq,VUo),e(lF,zUo),e(B,WUo),e(B,iF),e(iF,Bfe),e(Bfe,QUo),e(iF,HUo),e(iF,iq),e(iq,UUo),e(iF,JUo),e(B,YUo),e(B,dF),e(dF,xfe),e(xfe,KUo),e(dF,ZUo),e(dF,dq),e(dq,eJo),e(dF,oJo),e(B,rJo),e(B,cF),e(cF,kfe),e(kfe,tJo),e(cF,aJo),e(cF,cq),e(cq,sJo),e(cF,nJo),e(B,lJo),e(B,mF),e(mF,Rfe),e(Rfe,iJo),e(mF,dJo),e(mF,mq),e(mq,cJo),e(mF,mJo),e(B,fJo),e(B,fF),e(fF,Sfe),e(Sfe,gJo),e(fF,hJo),e(fF,fq),e(fq,uJo),e(fF,pJo),e(B,_Jo),e(B,gF),e(gF,Pfe),e(Pfe,bJo),e(gF,vJo),e(gF,gq),e(gq,TJo),e(gF,FJo),e(B,CJo),e(B,hF),e(hF,$fe),e($fe,MJo),e(hF,EJo),e(hF,hq),e(hq,yJo),e(hF,wJo),e(B,AJo),e(B,uF),e(uF,Ife),e(Ife,LJo),e(uF,BJo),e(uF,uq),e(uq,xJo),e(uF,kJo),e(B,RJo),e(B,pF),e(pF,jfe),e(jfe,SJo),e(pF,PJo),e(pF,pq),e(pq,$Jo),e(pF,IJo),e(B,jJo),e(B,_F),e(_F,Dfe),e(Dfe,DJo),e(_F,NJo),e(_F,_q),e(_q,qJo),e(_F,OJo),e(B,GJo),e(B,bF),e(bF,Nfe),e(Nfe,XJo),e(bF,VJo),e(bF,bq),e(bq,zJo),e(bF,WJo),e(B,QJo),e(B,vF),e(vF,qfe),e(qfe,HJo),e(vF,UJo),e(vF,vq),e(vq,JJo),e(vF,YJo),e(B,KJo),e(B,TF),e(TF,Ofe),e(Ofe,ZJo),e(TF,eYo),e(TF,Tq),e(Tq,oYo),e(TF,rYo),e(B,tYo),e(B,FF),e(FF,Gfe),e(Gfe,aYo),e(FF,sYo),e(FF,Fq),e(Fq,nYo),e(FF,lYo),e(B,iYo),e(B,CF),e(CF,Xfe),e(Xfe,dYo),e(CF,cYo),e(CF,Cq),e(Cq,mYo),e(CF,fYo),e(B,gYo),e(B,On),e(On,Vfe),e(Vfe,hYo),e(On,uYo),e(On,Mq),e(Mq,pYo),e(On,_Yo),e(On,Eq),e(Eq,bYo),e(On,vYo),e(B,TYo),e(B,MF),e(MF,zfe),e(zfe,FYo),e(MF,CYo),e(MF,yq),e(yq,MYo),e(MF,EYo),e(B,yYo),e(B,EF),e(EF,Wfe),e(Wfe,wYo),e(EF,AYo),e(EF,wq),e(wq,LYo),e(EF,BYo),e(B,xYo),e(B,yF),e(yF,Qfe),e(Qfe,kYo),e(yF,RYo),e(yF,Aq),e(Aq,SYo),e(yF,PYo),e(B,$Yo),e(B,wF),e(wF,Hfe),e(Hfe,IYo),e(wF,jYo),e(wF,Lq),e(Lq,DYo),e(wF,NYo),e(B,qYo),e(B,AF),e(AF,Ufe),e(Ufe,OYo),e(AF,GYo),e(AF,Bq),e(Bq,XYo),e(AF,VYo),e(B,zYo),e(B,LF),e(LF,Jfe),e(Jfe,WYo),e(LF,QYo),e(LF,xq),e(xq,HYo),e(LF,UYo),e(B,JYo),e(B,BF),e(BF,Yfe),e(Yfe,YYo),e(BF,KYo),e(BF,kq),e(kq,ZYo),e(BF,eKo),e(B,oKo),e(B,xF),e(xF,Kfe),e(Kfe,rKo),e(xF,tKo),e(xF,Rq),e(Rq,aKo),e(xF,sKo),e(B,nKo),e(B,kF),e(kF,Zfe),e(Zfe,lKo),e(kF,iKo),e(kF,Sq),e(Sq,dKo),e(kF,cKo),e(B,mKo),e(B,RF),e(RF,ege),e(ege,fKo),e(RF,gKo),e(RF,Pq),e(Pq,hKo),e(RF,uKo),e(B,pKo),e(B,SF),e(SF,oge),e(oge,_Ko),e(SF,bKo),e(SF,$q),e($q,vKo),e(SF,TKo),e(B,FKo),e(B,PF),e(PF,rge),e(rge,CKo),e(PF,MKo),e(PF,Iq),e(Iq,EKo),e(PF,yKo),e(B,wKo),e(B,$F),e($F,tge),e(tge,AKo),e($F,LKo),e($F,jq),e(jq,BKo),e($F,xKo),e(B,kKo),e(B,IF),e(IF,age),e(age,RKo),e(IF,SKo),e(IF,Dq),e(Dq,PKo),e(IF,$Ko),e(B,IKo),e(B,jF),e(jF,sge),e(sge,jKo),e(jF,DKo),e(jF,Nq),e(Nq,NKo),e(jF,qKo),e(B,OKo),e(B,DF),e(DF,nge),e(nge,GKo),e(DF,XKo),e(DF,qq),e(qq,VKo),e(DF,zKo),e(B,WKo),e(B,NF),e(NF,lge),e(lge,QKo),e(NF,HKo),e(NF,Oq),e(Oq,UKo),e(NF,JKo),e(B,YKo),e(B,qF),e(qF,ige),e(ige,KKo),e(qF,ZKo),e(qF,Gq),e(Gq,eZo),e(qF,oZo),e(B,rZo),e(B,OF),e(OF,dge),e(dge,tZo),e(OF,aZo),e(OF,Xq),e(Xq,sZo),e(OF,nZo),e(B,lZo),e(B,GF),e(GF,cge),e(cge,iZo),e(GF,dZo),e(GF,Vq),e(Vq,cZo),e(GF,mZo),e(B,fZo),e(B,XF),e(XF,mge),e(mge,gZo),e(XF,hZo),e(XF,zq),e(zq,uZo),e(XF,pZo),e(B,_Zo),e(B,VF),e(VF,fge),e(fge,bZo),e(VF,vZo),e(VF,Wq),e(Wq,TZo),e(VF,FZo),e(B,CZo),e(B,zF),e(zF,gge),e(gge,MZo),e(zF,EZo),e(zF,Qq),e(Qq,yZo),e(zF,wZo),e(B,AZo),e(B,WF),e(WF,hge),e(hge,LZo),e(WF,BZo),e(WF,Hq),e(Hq,xZo),e(WF,kZo),e(B,RZo),e(B,QF),e(QF,uge),e(uge,SZo),e(QF,PZo),e(QF,Uq),e(Uq,$Zo),e(QF,IZo),e(ho,jZo),e(ho,pge),e(pge,DZo),e(ho,NZo),g(DA,ho,null),b(c,Bke,_),b(c,pc,_),e(pc,HF),e(HF,_ge),g(NA,_ge,null),e(pc,qZo),e(pc,bge),e(bge,OZo),b(c,xke,_),b(c,Tr,_),g(qA,Tr,null),e(Tr,GZo),e(Tr,_c),e(_c,XZo),e(_c,vge),e(vge,VZo),e(_c,zZo),e(_c,Tge),e(Tge,WZo),e(_c,QZo),e(Tr,HZo),e(Tr,OA),e(OA,UZo),e(OA,Fge),e(Fge,JZo),e(OA,YZo),e(Tr,KZo),e(Tr,ht),g(GA,ht,null),e(ht,ZZo),e(ht,Cge),e(Cge,eer),e(ht,oer),e(ht,bc),e(bc,rer),e(bc,Mge),e(Mge,ter),e(bc,aer),e(bc,Ege),e(Ege,ser),e(bc,ner),e(ht,ler),e(ht,yge),e(yge,ier),e(ht,der),g(XA,ht,null),e(Tr,cer),e(Tr,uo),g(VA,uo,null),e(uo,mer),e(uo,wge),e(wge,fer),e(uo,ger),e(uo,ps),e(ps,her),e(ps,Age),e(Age,uer),e(ps,per),e(ps,Lge),e(Lge,_er),e(ps,ber),e(ps,Bge),e(Bge,ver),e(ps,Ter),e(uo,Fer),e(uo,H),e(H,UF),e(UF,xge),e(xge,Cer),e(UF,Mer),e(UF,Jq),e(Jq,Eer),e(UF,yer),e(H,wer),e(H,JF),e(JF,kge),e(kge,Aer),e(JF,Ler),e(JF,Yq),e(Yq,Ber),e(JF,xer),e(H,ker),e(H,YF),e(YF,Rge),e(Rge,Rer),e(YF,Ser),e(YF,Kq),e(Kq,Per),e(YF,$er),e(H,Ier),e(H,KF),e(KF,Sge),e(Sge,jer),e(KF,Der),e(KF,Zq),e(Zq,Ner),e(KF,qer),e(H,Oer),e(H,ZF),e(ZF,Pge),e(Pge,Ger),e(ZF,Xer),e(ZF,eO),e(eO,Ver),e(ZF,zer),e(H,Wer),e(H,eC),e(eC,$ge),e($ge,Qer),e(eC,Her),e(eC,oO),e(oO,Uer),e(eC,Jer),e(H,Yer),e(H,oC),e(oC,Ige),e(Ige,Ker),e(oC,Zer),e(oC,rO),e(rO,eor),e(oC,oor),e(H,ror),e(H,rC),e(rC,jge),e(jge,tor),e(rC,aor),e(rC,tO),e(tO,sor),e(rC,nor),e(H,lor),e(H,tC),e(tC,Dge),e(Dge,ior),e(tC,dor),e(tC,aO),e(aO,cor),e(tC,mor),e(H,gor),e(H,aC),e(aC,Nge),e(Nge,hor),e(aC,uor),e(aC,sO),e(sO,por),e(aC,_or),e(H,bor),e(H,sC),e(sC,qge),e(qge,vor),e(sC,Tor),e(sC,nO),e(nO,For),e(sC,Cor),e(H,Mor),e(H,nC),e(nC,Oge),e(Oge,Eor),e(nC,yor),e(nC,lO),e(lO,wor),e(nC,Aor),e(H,Lor),e(H,lC),e(lC,Gge),e(Gge,Bor),e(lC,xor),e(lC,iO),e(iO,kor),e(lC,Ror),e(H,Sor),e(H,iC),e(iC,Xge),e(Xge,Por),e(iC,$or),e(iC,dO),e(dO,Ior),e(iC,jor),e(H,Dor),e(H,dC),e(dC,Vge),e(Vge,Nor),e(dC,qor),e(dC,cO),e(cO,Oor),e(dC,Gor),e(H,Xor),e(H,cC),e(cC,zge),e(zge,Vor),e(cC,zor),e(cC,mO),e(mO,Wor),e(cC,Qor),e(H,Hor),e(H,mC),e(mC,Wge),e(Wge,Uor),e(mC,Jor),e(mC,fO),e(fO,Yor),e(mC,Kor),e(H,Zor),e(H,fC),e(fC,Qge),e(Qge,err),e(fC,orr),e(fC,gO),e(gO,rrr),e(fC,trr),e(H,arr),e(H,gC),e(gC,Hge),e(Hge,srr),e(gC,nrr),e(gC,hO),e(hO,lrr),e(gC,irr),e(H,drr),e(H,hC),e(hC,Uge),e(Uge,crr),e(hC,mrr),e(hC,uO),e(uO,frr),e(hC,grr),e(H,hrr),e(H,uC),e(uC,Jge),e(Jge,urr),e(uC,prr),e(uC,pO),e(pO,_rr),e(uC,brr),e(H,vrr),e(H,pC),e(pC,Yge),e(Yge,Trr),e(pC,Frr),e(pC,_O),e(_O,Crr),e(pC,Mrr),e(uo,Err),e(uo,Kge),e(Kge,yrr),e(uo,wrr),g(zA,uo,null),b(c,kke,_),b(c,vc,_),e(vc,_C),e(_C,Zge),g(WA,Zge,null),e(vc,Arr),e(vc,ehe),e(ehe,Lrr),b(c,Rke,_),b(c,Fr,_),g(QA,Fr,null),e(Fr,Brr),e(Fr,Tc),e(Tc,xrr),e(Tc,ohe),e(ohe,krr),e(Tc,Rrr),e(Tc,rhe),e(rhe,Srr),e(Tc,Prr),e(Fr,$rr),e(Fr,HA),e(HA,Irr),e(HA,the),e(the,jrr),e(HA,Drr),e(Fr,Nrr),e(Fr,ut),g(UA,ut,null),e(ut,qrr),e(ut,ahe),e(ahe,Orr),e(ut,Grr),e(ut,Fc),e(Fc,Xrr),e(Fc,she),e(she,Vrr),e(Fc,zrr),e(Fc,nhe),e(nhe,Wrr),e(Fc,Qrr),e(ut,Hrr),e(ut,lhe),e(lhe,Urr),e(ut,Jrr),g(JA,ut,null),e(Fr,Yrr),e(Fr,po),g(YA,po,null),e(po,Krr),e(po,ihe),e(ihe,Zrr),e(po,etr),e(po,_s),e(_s,otr),e(_s,dhe),e(dhe,rtr),e(_s,ttr),e(_s,che),e(che,atr),e(_s,str),e(_s,mhe),e(mhe,ntr),e(_s,ltr),e(po,itr),e(po,fe),e(fe,bC),e(bC,fhe),e(fhe,dtr),e(bC,ctr),e(bC,bO),e(bO,mtr),e(bC,ftr),e(fe,gtr),e(fe,vC),e(vC,ghe),e(ghe,htr),e(vC,utr),e(vC,vO),e(vO,ptr),e(vC,_tr),e(fe,btr),e(fe,TC),e(TC,hhe),e(hhe,vtr),e(TC,Ttr),e(TC,TO),e(TO,Ftr),e(TC,Ctr),e(fe,Mtr),e(fe,FC),e(FC,uhe),e(uhe,Etr),e(FC,ytr),e(FC,FO),e(FO,wtr),e(FC,Atr),e(fe,Ltr),e(fe,CC),e(CC,phe),e(phe,Btr),e(CC,xtr),e(CC,CO),e(CO,ktr),e(CC,Rtr),e(fe,Str),e(fe,MC),e(MC,_he),e(_he,Ptr),e(MC,$tr),e(MC,MO),e(MO,Itr),e(MC,jtr),e(fe,Dtr),e(fe,EC),e(EC,bhe),e(bhe,Ntr),e(EC,qtr),e(EC,EO),e(EO,Otr),e(EC,Gtr),e(fe,Xtr),e(fe,yC),e(yC,vhe),e(vhe,Vtr),e(yC,ztr),e(yC,yO),e(yO,Wtr),e(yC,Qtr),e(fe,Htr),e(fe,wC),e(wC,The),e(The,Utr),e(wC,Jtr),e(wC,wO),e(wO,Ytr),e(wC,Ktr),e(fe,Ztr),e(fe,AC),e(AC,Fhe),e(Fhe,ear),e(AC,oar),e(AC,AO),e(AO,rar),e(AC,tar),e(fe,aar),e(fe,LC),e(LC,Che),e(Che,sar),e(LC,nar),e(LC,LO),e(LO,lar),e(LC,iar),e(po,dar),e(po,Mhe),e(Mhe,car),e(po,mar),g(KA,po,null),b(c,Ske,_),b(c,Cc,_),e(Cc,BC),e(BC,Ehe),g(ZA,Ehe,null),e(Cc,far),e(Cc,yhe),e(yhe,gar),b(c,Pke,_),b(c,Cr,_),g(e0,Cr,null),e(Cr,har),e(Cr,Mc),e(Mc,uar),e(Mc,whe),e(whe,par),e(Mc,_ar),e(Mc,Ahe),e(Ahe,bar),e(Mc,Tar),e(Cr,Far),e(Cr,o0),e(o0,Car),e(o0,Lhe),e(Lhe,Mar),e(o0,Ear),e(Cr,yar),e(Cr,pt),g(r0,pt,null),e(pt,war),e(pt,Bhe),e(Bhe,Aar),e(pt,Lar),e(pt,Ec),e(Ec,Bar),e(Ec,xhe),e(xhe,xar),e(Ec,kar),e(Ec,khe),e(khe,Rar),e(Ec,Sar),e(pt,Par),e(pt,Rhe),e(Rhe,$ar),e(pt,Iar),g(t0,pt,null),e(Cr,jar),e(Cr,_o),g(a0,_o,null),e(_o,Dar),e(_o,She),e(She,Nar),e(_o,qar),e(_o,bs),e(bs,Oar),e(bs,Phe),e(Phe,Gar),e(bs,Xar),e(bs,$he),e($he,Var),e(bs,zar),e(bs,Ihe),e(Ihe,War),e(bs,Qar),e(_o,Har),e(_o,s0),e(s0,xC),e(xC,jhe),e(jhe,Uar),e(xC,Jar),e(xC,BO),e(BO,Yar),e(xC,Kar),e(s0,Zar),e(s0,kC),e(kC,Dhe),e(Dhe,esr),e(kC,osr),e(kC,xO),e(xO,rsr),e(kC,tsr),e(_o,asr),e(_o,Nhe),e(Nhe,ssr),e(_o,nsr),g(n0,_o,null),b(c,$ke,_),b(c,yc,_),e(yc,RC),e(RC,qhe),g(l0,qhe,null),e(yc,lsr),e(yc,Ohe),e(Ohe,isr),b(c,Ike,_),b(c,Mr,_),g(i0,Mr,null),e(Mr,dsr),e(Mr,wc),e(wc,csr),e(wc,Ghe),e(Ghe,msr),e(wc,fsr),e(wc,Xhe),e(Xhe,gsr),e(wc,hsr),e(Mr,usr),e(Mr,d0),e(d0,psr),e(d0,Vhe),e(Vhe,_sr),e(d0,bsr),e(Mr,vsr),e(Mr,_t),g(c0,_t,null),e(_t,Tsr),e(_t,zhe),e(zhe,Fsr),e(_t,Csr),e(_t,Ac),e(Ac,Msr),e(Ac,Whe),e(Whe,Esr),e(Ac,ysr),e(Ac,Qhe),e(Qhe,wsr),e(Ac,Asr),e(_t,Lsr),e(_t,Hhe),e(Hhe,Bsr),e(_t,xsr),g(m0,_t,null),e(Mr,ksr),e(Mr,bo),g(f0,bo,null),e(bo,Rsr),e(bo,Uhe),e(Uhe,Ssr),e(bo,Psr),e(bo,vs),e(vs,$sr),e(vs,Jhe),e(Jhe,Isr),e(vs,jsr),e(vs,Yhe),e(Yhe,Dsr),e(vs,Nsr),e(vs,Khe),e(Khe,qsr),e(vs,Osr),e(bo,Gsr),e(bo,Y),e(Y,SC),e(SC,Zhe),e(Zhe,Xsr),e(SC,Vsr),e(SC,kO),e(kO,zsr),e(SC,Wsr),e(Y,Qsr),e(Y,PC),e(PC,eue),e(eue,Hsr),e(PC,Usr),e(PC,RO),e(RO,Jsr),e(PC,Ysr),e(Y,Ksr),e(Y,$C),e($C,oue),e(oue,Zsr),e($C,enr),e($C,SO),e(SO,onr),e($C,rnr),e(Y,tnr),e(Y,IC),e(IC,rue),e(rue,anr),e(IC,snr),e(IC,PO),e(PO,nnr),e(IC,lnr),e(Y,inr),e(Y,jC),e(jC,tue),e(tue,dnr),e(jC,cnr),e(jC,$O),e($O,mnr),e(jC,fnr),e(Y,gnr),e(Y,DC),e(DC,aue),e(aue,hnr),e(DC,unr),e(DC,IO),e(IO,pnr),e(DC,_nr),e(Y,bnr),e(Y,NC),e(NC,sue),e(sue,vnr),e(NC,Tnr),e(NC,jO),e(jO,Fnr),e(NC,Cnr),e(Y,Mnr),e(Y,qC),e(qC,nue),e(nue,Enr),e(qC,ynr),e(qC,DO),e(DO,wnr),e(qC,Anr),e(Y,Lnr),e(Y,OC),e(OC,lue),e(lue,Bnr),e(OC,xnr),e(OC,NO),e(NO,knr),e(OC,Rnr),e(Y,Snr),e(Y,GC),e(GC,iue),e(iue,Pnr),e(GC,$nr),e(GC,qO),e(qO,Inr),e(GC,jnr),e(Y,Dnr),e(Y,XC),e(XC,due),e(due,Nnr),e(XC,qnr),e(XC,OO),e(OO,Onr),e(XC,Gnr),e(Y,Xnr),e(Y,VC),e(VC,cue),e(cue,Vnr),e(VC,znr),e(VC,GO),e(GO,Wnr),e(VC,Qnr),e(Y,Hnr),e(Y,zC),e(zC,mue),e(mue,Unr),e(zC,Jnr),e(zC,XO),e(XO,Ynr),e(zC,Knr),e(Y,Znr),e(Y,WC),e(WC,fue),e(fue,elr),e(WC,olr),e(WC,VO),e(VO,rlr),e(WC,tlr),e(Y,alr),e(Y,QC),e(QC,gue),e(gue,slr),e(QC,nlr),e(QC,zO),e(zO,llr),e(QC,ilr),e(Y,dlr),e(Y,HC),e(HC,hue),e(hue,clr),e(HC,mlr),e(HC,WO),e(WO,flr),e(HC,glr),e(Y,hlr),e(Y,UC),e(UC,uue),e(uue,ulr),e(UC,plr),e(UC,QO),e(QO,_lr),e(UC,blr),e(Y,vlr),e(Y,JC),e(JC,pue),e(pue,Tlr),e(JC,Flr),e(JC,HO),e(HO,Clr),e(JC,Mlr),e(Y,Elr),e(Y,YC),e(YC,_ue),e(_ue,ylr),e(YC,wlr),e(YC,UO),e(UO,Alr),e(YC,Llr),e(Y,Blr),e(Y,KC),e(KC,bue),e(bue,xlr),e(KC,klr),e(KC,JO),e(JO,Rlr),e(KC,Slr),e(bo,Plr),e(bo,vue),e(vue,$lr),e(bo,Ilr),g(g0,bo,null),b(c,jke,_),b(c,Lc,_),e(Lc,ZC),e(ZC,Tue),g(h0,Tue,null),e(Lc,jlr),e(Lc,Fue),e(Fue,Dlr),b(c,Dke,_),b(c,Er,_),g(u0,Er,null),e(Er,Nlr),e(Er,Bc),e(Bc,qlr),e(Bc,Cue),e(Cue,Olr),e(Bc,Glr),e(Bc,Mue),e(Mue,Xlr),e(Bc,Vlr),e(Er,zlr),e(Er,p0),e(p0,Wlr),e(p0,Eue),e(Eue,Qlr),e(p0,Hlr),e(Er,Ulr),e(Er,bt),g(_0,bt,null),e(bt,Jlr),e(bt,yue),e(yue,Ylr),e(bt,Klr),e(bt,xc),e(xc,Zlr),e(xc,wue),e(wue,eir),e(xc,oir),e(xc,Aue),e(Aue,rir),e(xc,tir),e(bt,air),e(bt,Lue),e(Lue,sir),e(bt,nir),g(b0,bt,null),e(Er,lir),e(Er,vo),g(v0,vo,null),e(vo,iir),e(vo,Bue),e(Bue,dir),e(vo,cir),e(vo,Ts),e(Ts,mir),e(Ts,xue),e(xue,fir),e(Ts,gir),e(Ts,kue),e(kue,hir),e(Ts,uir),e(Ts,Rue),e(Rue,pir),e(Ts,_ir),e(vo,bir),e(vo,_e),e(_e,eM),e(eM,Sue),e(Sue,vir),e(eM,Tir),e(eM,YO),e(YO,Fir),e(eM,Cir),e(_e,Mir),e(_e,oM),e(oM,Pue),e(Pue,Eir),e(oM,yir),e(oM,KO),e(KO,wir),e(oM,Air),e(_e,Lir),e(_e,rM),e(rM,$ue),e($ue,Bir),e(rM,xir),e(rM,ZO),e(ZO,kir),e(rM,Rir),e(_e,Sir),e(_e,tM),e(tM,Iue),e(Iue,Pir),e(tM,$ir),e(tM,eG),e(eG,Iir),e(tM,jir),e(_e,Dir),e(_e,aM),e(aM,jue),e(jue,Nir),e(aM,qir),e(aM,oG),e(oG,Oir),e(aM,Gir),e(_e,Xir),e(_e,sM),e(sM,Due),e(Due,Vir),e(sM,zir),e(sM,rG),e(rG,Wir),e(sM,Qir),e(_e,Hir),e(_e,nM),e(nM,Nue),e(Nue,Uir),e(nM,Jir),e(nM,tG),e(tG,Yir),e(nM,Kir),e(_e,Zir),e(_e,lM),e(lM,que),e(que,edr),e(lM,odr),e(lM,aG),e(aG,rdr),e(lM,tdr),e(_e,adr),e(_e,iM),e(iM,Oue),e(Oue,sdr),e(iM,ndr),e(iM,sG),e(sG,ldr),e(iM,idr),e(_e,ddr),e(_e,dM),e(dM,Gue),e(Gue,cdr),e(dM,mdr),e(dM,nG),e(nG,fdr),e(dM,gdr),e(vo,hdr),e(vo,Xue),e(Xue,udr),e(vo,pdr),g(T0,vo,null),b(c,Nke,_),b(c,kc,_),e(kc,cM),e(cM,Vue),g(F0,Vue,null),e(kc,_dr),e(kc,zue),e(zue,bdr),b(c,qke,_),b(c,yr,_),g(C0,yr,null),e(yr,vdr),e(yr,Rc),e(Rc,Tdr),e(Rc,Wue),e(Wue,Fdr),e(Rc,Cdr),e(Rc,Que),e(Que,Mdr),e(Rc,Edr),e(yr,ydr),e(yr,M0),e(M0,wdr),e(M0,Hue),e(Hue,Adr),e(M0,Ldr),e(yr,Bdr),e(yr,vt),g(E0,vt,null),e(vt,xdr),e(vt,Uue),e(Uue,kdr),e(vt,Rdr),e(vt,Sc),e(Sc,Sdr),e(Sc,Jue),e(Jue,Pdr),e(Sc,$dr),e(Sc,Yue),e(Yue,Idr),e(Sc,jdr),e(vt,Ddr),e(vt,Kue),e(Kue,Ndr),e(vt,qdr),g(y0,vt,null),e(yr,Odr),e(yr,To),g(w0,To,null),e(To,Gdr),e(To,Zue),e(Zue,Xdr),e(To,Vdr),e(To,Fs),e(Fs,zdr),e(Fs,epe),e(epe,Wdr),e(Fs,Qdr),e(Fs,ope),e(ope,Hdr),e(Fs,Udr),e(Fs,rpe),e(rpe,Jdr),e(Fs,Ydr),e(To,Kdr),e(To,V),e(V,mM),e(mM,tpe),e(tpe,Zdr),e(mM,ecr),e(mM,lG),e(lG,ocr),e(mM,rcr),e(V,tcr),e(V,fM),e(fM,ape),e(ape,acr),e(fM,scr),e(fM,iG),e(iG,ncr),e(fM,lcr),e(V,icr),e(V,gM),e(gM,spe),e(spe,dcr),e(gM,ccr),e(gM,dG),e(dG,mcr),e(gM,fcr),e(V,gcr),e(V,hM),e(hM,npe),e(npe,hcr),e(hM,ucr),e(hM,cG),e(cG,pcr),e(hM,_cr),e(V,bcr),e(V,uM),e(uM,lpe),e(lpe,vcr),e(uM,Tcr),e(uM,mG),e(mG,Fcr),e(uM,Ccr),e(V,Mcr),e(V,pM),e(pM,ipe),e(ipe,Ecr),e(pM,ycr),e(pM,fG),e(fG,wcr),e(pM,Acr),e(V,Lcr),e(V,_M),e(_M,dpe),e(dpe,Bcr),e(_M,xcr),e(_M,gG),e(gG,kcr),e(_M,Rcr),e(V,Scr),e(V,bM),e(bM,cpe),e(cpe,Pcr),e(bM,$cr),e(bM,hG),e(hG,Icr),e(bM,jcr),e(V,Dcr),e(V,vM),e(vM,mpe),e(mpe,Ncr),e(vM,qcr),e(vM,uG),e(uG,Ocr),e(vM,Gcr),e(V,Xcr),e(V,TM),e(TM,fpe),e(fpe,Vcr),e(TM,zcr),e(TM,pG),e(pG,Wcr),e(TM,Qcr),e(V,Hcr),e(V,FM),e(FM,gpe),e(gpe,Ucr),e(FM,Jcr),e(FM,_G),e(_G,Ycr),e(FM,Kcr),e(V,Zcr),e(V,CM),e(CM,hpe),e(hpe,emr),e(CM,omr),e(CM,bG),e(bG,rmr),e(CM,tmr),e(V,amr),e(V,MM),e(MM,upe),e(upe,smr),e(MM,nmr),e(MM,vG),e(vG,lmr),e(MM,imr),e(V,dmr),e(V,EM),e(EM,ppe),e(ppe,cmr),e(EM,mmr),e(EM,TG),e(TG,fmr),e(EM,gmr),e(V,hmr),e(V,yM),e(yM,_pe),e(_pe,umr),e(yM,pmr),e(yM,FG),e(FG,_mr),e(yM,bmr),e(V,vmr),e(V,wM),e(wM,bpe),e(bpe,Tmr),e(wM,Fmr),e(wM,CG),e(CG,Cmr),e(wM,Mmr),e(V,Emr),e(V,AM),e(AM,vpe),e(vpe,ymr),e(AM,wmr),e(AM,MG),e(MG,Amr),e(AM,Lmr),e(V,Bmr),e(V,LM),e(LM,Tpe),e(Tpe,xmr),e(LM,kmr),e(LM,EG),e(EG,Rmr),e(LM,Smr),e(V,Pmr),e(V,BM),e(BM,Fpe),e(Fpe,$mr),e(BM,Imr),e(BM,yG),e(yG,jmr),e(BM,Dmr),e(V,Nmr),e(V,xM),e(xM,Cpe),e(Cpe,qmr),e(xM,Omr),e(xM,wG),e(wG,Gmr),e(xM,Xmr),e(V,Vmr),e(V,kM),e(kM,Mpe),e(Mpe,zmr),e(kM,Wmr),e(kM,AG),e(AG,Qmr),e(kM,Hmr),e(V,Umr),e(V,RM),e(RM,Epe),e(Epe,Jmr),e(RM,Ymr),e(RM,LG),e(LG,Kmr),e(RM,Zmr),e(V,efr),e(V,SM),e(SM,ype),e(ype,ofr),e(SM,rfr),e(SM,BG),e(BG,tfr),e(SM,afr),e(V,sfr),e(V,PM),e(PM,wpe),e(wpe,nfr),e(PM,lfr),e(PM,xG),e(xG,ifr),e(PM,dfr),e(V,cfr),e(V,$M),e($M,Ape),e(Ape,mfr),e($M,ffr),e($M,kG),e(kG,gfr),e($M,hfr),e(To,ufr),e(To,Lpe),e(Lpe,pfr),e(To,_fr),g(A0,To,null),b(c,Oke,_),b(c,Pc,_),e(Pc,IM),e(IM,Bpe),g(L0,Bpe,null),e(Pc,bfr),e(Pc,xpe),e(xpe,vfr),b(c,Gke,_),b(c,wr,_),g(B0,wr,null),e(wr,Tfr),e(wr,$c),e($c,Ffr),e($c,kpe),e(kpe,Cfr),e($c,Mfr),e($c,Rpe),e(Rpe,Efr),e($c,yfr),e(wr,wfr),e(wr,x0),e(x0,Afr),e(x0,Spe),e(Spe,Lfr),e(x0,Bfr),e(wr,xfr),e(wr,Tt),g(k0,Tt,null),e(Tt,kfr),e(Tt,Ppe),e(Ppe,Rfr),e(Tt,Sfr),e(Tt,Ic),e(Ic,Pfr),e(Ic,$pe),e($pe,$fr),e(Ic,Ifr),e(Ic,Ipe),e(Ipe,jfr),e(Ic,Dfr),e(Tt,Nfr),e(Tt,jpe),e(jpe,qfr),e(Tt,Ofr),g(R0,Tt,null),e(wr,Gfr),e(wr,Fo),g(S0,Fo,null),e(Fo,Xfr),e(Fo,Dpe),e(Dpe,Vfr),e(Fo,zfr),e(Fo,Cs),e(Cs,Wfr),e(Cs,Npe),e(Npe,Qfr),e(Cs,Hfr),e(Cs,qpe),e(qpe,Ufr),e(Cs,Jfr),e(Cs,Ope),e(Ope,Yfr),e(Cs,Kfr),e(Fo,Zfr),e(Fo,ae),e(ae,jM),e(jM,Gpe),e(Gpe,egr),e(jM,ogr),e(jM,RG),e(RG,rgr),e(jM,tgr),e(ae,agr),e(ae,DM),e(DM,Xpe),e(Xpe,sgr),e(DM,ngr),e(DM,SG),e(SG,lgr),e(DM,igr),e(ae,dgr),e(ae,NM),e(NM,Vpe),e(Vpe,cgr),e(NM,mgr),e(NM,PG),e(PG,fgr),e(NM,ggr),e(ae,hgr),e(ae,qM),e(qM,zpe),e(zpe,ugr),e(qM,pgr),e(qM,$G),e($G,_gr),e(qM,bgr),e(ae,vgr),e(ae,OM),e(OM,Wpe),e(Wpe,Tgr),e(OM,Fgr),e(OM,IG),e(IG,Cgr),e(OM,Mgr),e(ae,Egr),e(ae,GM),e(GM,Qpe),e(Qpe,ygr),e(GM,wgr),e(GM,jG),e(jG,Agr),e(GM,Lgr),e(ae,Bgr),e(ae,XM),e(XM,Hpe),e(Hpe,xgr),e(XM,kgr),e(XM,DG),e(DG,Rgr),e(XM,Sgr),e(ae,Pgr),e(ae,VM),e(VM,Upe),e(Upe,$gr),e(VM,Igr),e(VM,NG),e(NG,jgr),e(VM,Dgr),e(ae,Ngr),e(ae,zM),e(zM,Jpe),e(Jpe,qgr),e(zM,Ogr),e(zM,qG),e(qG,Ggr),e(zM,Xgr),e(ae,Vgr),e(ae,WM),e(WM,Ype),e(Ype,zgr),e(WM,Wgr),e(WM,OG),e(OG,Qgr),e(WM,Hgr),e(ae,Ugr),e(ae,QM),e(QM,Kpe),e(Kpe,Jgr),e(QM,Ygr),e(QM,GG),e(GG,Kgr),e(QM,Zgr),e(ae,ehr),e(ae,HM),e(HM,Zpe),e(Zpe,ohr),e(HM,rhr),e(HM,XG),e(XG,thr),e(HM,ahr),e(ae,shr),e(ae,UM),e(UM,e_e),e(e_e,nhr),e(UM,lhr),e(UM,VG),e(VG,ihr),e(UM,dhr),e(ae,chr),e(ae,JM),e(JM,o_e),e(o_e,mhr),e(JM,fhr),e(JM,zG),e(zG,ghr),e(JM,hhr),e(ae,uhr),e(ae,YM),e(YM,r_e),e(r_e,phr),e(YM,_hr),e(YM,WG),e(WG,bhr),e(YM,vhr),e(ae,Thr),e(ae,KM),e(KM,t_e),e(t_e,Fhr),e(KM,Chr),e(KM,QG),e(QG,Mhr),e(KM,Ehr),e(ae,yhr),e(ae,ZM),e(ZM,a_e),e(a_e,whr),e(ZM,Ahr),e(ZM,HG),e(HG,Lhr),e(ZM,Bhr),e(Fo,xhr),e(Fo,s_e),e(s_e,khr),e(Fo,Rhr),g(P0,Fo,null),b(c,Xke,_),b(c,jc,_),e(jc,e4),e(e4,n_e),g($0,n_e,null),e(jc,Shr),e(jc,l_e),e(l_e,Phr),b(c,Vke,_),b(c,Ar,_),g(I0,Ar,null),e(Ar,$hr),e(Ar,Dc),e(Dc,Ihr),e(Dc,i_e),e(i_e,jhr),e(Dc,Dhr),e(Dc,d_e),e(d_e,Nhr),e(Dc,qhr),e(Ar,Ohr),e(Ar,j0),e(j0,Ghr),e(j0,c_e),e(c_e,Xhr),e(j0,Vhr),e(Ar,zhr),e(Ar,Ft),g(D0,Ft,null),e(Ft,Whr),e(Ft,m_e),e(m_e,Qhr),e(Ft,Hhr),e(Ft,Nc),e(Nc,Uhr),e(Nc,f_e),e(f_e,Jhr),e(Nc,Yhr),e(Nc,g_e),e(g_e,Khr),e(Nc,Zhr),e(Ft,eur),e(Ft,h_e),e(h_e,our),e(Ft,rur),g(N0,Ft,null),e(Ar,tur),e(Ar,Co),g(q0,Co,null),e(Co,aur),e(Co,u_e),e(u_e,sur),e(Co,nur),e(Co,Ms),e(Ms,lur),e(Ms,p_e),e(p_e,iur),e(Ms,dur),e(Ms,__e),e(__e,cur),e(Ms,mur),e(Ms,b_e),e(b_e,fur),e(Ms,gur),e(Co,hur),e(Co,v_e),e(v_e,o4),e(o4,T_e),e(T_e,uur),e(o4,pur),e(o4,UG),e(UG,_ur),e(o4,bur),e(Co,vur),e(Co,F_e),e(F_e,Tur),e(Co,Fur),g(O0,Co,null),b(c,zke,_),b(c,qc,_),e(qc,r4),e(r4,C_e),g(G0,C_e,null),e(qc,Cur),e(qc,M_e),e(M_e,Mur),b(c,Wke,_),b(c,Lr,_),g(X0,Lr,null),e(Lr,Eur),e(Lr,Oc),e(Oc,yur),e(Oc,E_e),e(E_e,wur),e(Oc,Aur),e(Oc,y_e),e(y_e,Lur),e(Oc,Bur),e(Lr,xur),e(Lr,V0),e(V0,kur),e(V0,w_e),e(w_e,Rur),e(V0,Sur),e(Lr,Pur),e(Lr,Ct),g(z0,Ct,null),e(Ct,$ur),e(Ct,A_e),e(A_e,Iur),e(Ct,jur),e(Ct,Gc),e(Gc,Dur),e(Gc,L_e),e(L_e,Nur),e(Gc,qur),e(Gc,B_e),e(B_e,Our),e(Gc,Gur),e(Ct,Xur),e(Ct,x_e),e(x_e,Vur),e(Ct,zur),g(W0,Ct,null),e(Lr,Wur),e(Lr,Mo),g(Q0,Mo,null),e(Mo,Qur),e(Mo,k_e),e(k_e,Hur),e(Mo,Uur),e(Mo,Es),e(Es,Jur),e(Es,R_e),e(R_e,Yur),e(Es,Kur),e(Es,S_e),e(S_e,Zur),e(Es,epr),e(Es,P_e),e(P_e,opr),e(Es,rpr),e(Mo,tpr),e(Mo,K),e(K,t4),e(t4,$_e),e($_e,apr),e(t4,spr),e(t4,JG),e(JG,npr),e(t4,lpr),e(K,ipr),e(K,a4),e(a4,I_e),e(I_e,dpr),e(a4,cpr),e(a4,YG),e(YG,mpr),e(a4,fpr),e(K,gpr),e(K,s4),e(s4,j_e),e(j_e,hpr),e(s4,upr),e(s4,KG),e(KG,ppr),e(s4,_pr),e(K,bpr),e(K,n4),e(n4,D_e),e(D_e,vpr),e(n4,Tpr),e(n4,ZG),e(ZG,Fpr),e(n4,Cpr),e(K,Mpr),e(K,l4),e(l4,N_e),e(N_e,Epr),e(l4,ypr),e(l4,eX),e(eX,wpr),e(l4,Apr),e(K,Lpr),e(K,i4),e(i4,q_e),e(q_e,Bpr),e(i4,xpr),e(i4,oX),e(oX,kpr),e(i4,Rpr),e(K,Spr),e(K,d4),e(d4,O_e),e(O_e,Ppr),e(d4,$pr),e(d4,rX),e(rX,Ipr),e(d4,jpr),e(K,Dpr),e(K,c4),e(c4,G_e),e(G_e,Npr),e(c4,qpr),e(c4,tX),e(tX,Opr),e(c4,Gpr),e(K,Xpr),e(K,m4),e(m4,X_e),e(X_e,Vpr),e(m4,zpr),e(m4,aX),e(aX,Wpr),e(m4,Qpr),e(K,Hpr),e(K,f4),e(f4,V_e),e(V_e,Upr),e(f4,Jpr),e(f4,sX),e(sX,Ypr),e(f4,Kpr),e(K,Zpr),e(K,g4),e(g4,z_e),e(z_e,e_r),e(g4,o_r),e(g4,nX),e(nX,r_r),e(g4,t_r),e(K,a_r),e(K,h4),e(h4,W_e),e(W_e,s_r),e(h4,n_r),e(h4,lX),e(lX,l_r),e(h4,i_r),e(K,d_r),e(K,u4),e(u4,Q_e),e(Q_e,c_r),e(u4,m_r),e(u4,iX),e(iX,f_r),e(u4,g_r),e(K,h_r),e(K,p4),e(p4,H_e),e(H_e,u_r),e(p4,p_r),e(p4,dX),e(dX,__r),e(p4,b_r),e(K,v_r),e(K,_4),e(_4,U_e),e(U_e,T_r),e(_4,F_r),e(_4,cX),e(cX,C_r),e(_4,M_r),e(K,E_r),e(K,b4),e(b4,J_e),e(J_e,y_r),e(b4,w_r),e(b4,mX),e(mX,A_r),e(b4,L_r),e(K,B_r),e(K,v4),e(v4,Y_e),e(Y_e,x_r),e(v4,k_r),e(v4,fX),e(fX,R_r),e(v4,S_r),e(K,P_r),e(K,T4),e(T4,K_e),e(K_e,$_r),e(T4,I_r),e(T4,gX),e(gX,j_r),e(T4,D_r),e(K,N_r),e(K,F4),e(F4,Z_e),e(Z_e,q_r),e(F4,O_r),e(F4,hX),e(hX,G_r),e(F4,X_r),e(K,V_r),e(K,C4),e(C4,ebe),e(ebe,z_r),e(C4,W_r),e(C4,uX),e(uX,Q_r),e(C4,H_r),e(Mo,U_r),e(Mo,obe),e(obe,J_r),e(Mo,Y_r),g(H0,Mo,null),b(c,Qke,_),b(c,Xc,_),e(Xc,M4),e(M4,rbe),g(U0,rbe,null),e(Xc,K_r),e(Xc,tbe),e(tbe,Z_r),b(c,Hke,_),b(c,Br,_),g(J0,Br,null),e(Br,ebr),e(Br,Vc),e(Vc,obr),e(Vc,abe),e(abe,rbr),e(Vc,tbr),e(Vc,sbe),e(sbe,abr),e(Vc,sbr),e(Br,nbr),e(Br,Y0),e(Y0,lbr),e(Y0,nbe),e(nbe,ibr),e(Y0,dbr),e(Br,cbr),e(Br,Mt),g(K0,Mt,null),e(Mt,mbr),e(Mt,lbe),e(lbe,fbr),e(Mt,gbr),e(Mt,zc),e(zc,hbr),e(zc,ibe),e(ibe,ubr),e(zc,pbr),e(zc,dbe),e(dbe,_br),e(zc,bbr),e(Mt,vbr),e(Mt,cbe),e(cbe,Tbr),e(Mt,Fbr),g(Z0,Mt,null),e(Br,Cbr),e(Br,Eo),g(eL,Eo,null),e(Eo,Mbr),e(Eo,mbe),e(mbe,Ebr),e(Eo,ybr),e(Eo,ys),e(ys,wbr),e(ys,fbe),e(fbe,Abr),e(ys,Lbr),e(ys,gbe),e(gbe,Bbr),e(ys,xbr),e(ys,hbe),e(hbe,kbr),e(ys,Rbr),e(Eo,Sbr),e(Eo,Z),e(Z,E4),e(E4,ube),e(ube,Pbr),e(E4,$br),e(E4,pX),e(pX,Ibr),e(E4,jbr),e(Z,Dbr),e(Z,y4),e(y4,pbe),e(pbe,Nbr),e(y4,qbr),e(y4,_X),e(_X,Obr),e(y4,Gbr),e(Z,Xbr),e(Z,w4),e(w4,_be),e(_be,Vbr),e(w4,zbr),e(w4,bX),e(bX,Wbr),e(w4,Qbr),e(Z,Hbr),e(Z,A4),e(A4,bbe),e(bbe,Ubr),e(A4,Jbr),e(A4,vX),e(vX,Ybr),e(A4,Kbr),e(Z,Zbr),e(Z,L4),e(L4,vbe),e(vbe,e2r),e(L4,o2r),e(L4,TX),e(TX,r2r),e(L4,t2r),e(Z,a2r),e(Z,B4),e(B4,Tbe),e(Tbe,s2r),e(B4,n2r),e(B4,FX),e(FX,l2r),e(B4,i2r),e(Z,d2r),e(Z,x4),e(x4,Fbe),e(Fbe,c2r),e(x4,m2r),e(x4,CX),e(CX,f2r),e(x4,g2r),e(Z,h2r),e(Z,k4),e(k4,Cbe),e(Cbe,u2r),e(k4,p2r),e(k4,MX),e(MX,_2r),e(k4,b2r),e(Z,v2r),e(Z,R4),e(R4,Mbe),e(Mbe,T2r),e(R4,F2r),e(R4,EX),e(EX,C2r),e(R4,M2r),e(Z,E2r),e(Z,S4),e(S4,Ebe),e(Ebe,y2r),e(S4,w2r),e(S4,yX),e(yX,A2r),e(S4,L2r),e(Z,B2r),e(Z,P4),e(P4,ybe),e(ybe,x2r),e(P4,k2r),e(P4,wX),e(wX,R2r),e(P4,S2r),e(Z,P2r),e(Z,$4),e($4,wbe),e(wbe,$2r),e($4,I2r),e($4,AX),e(AX,j2r),e($4,D2r),e(Z,N2r),e(Z,I4),e(I4,Abe),e(Abe,q2r),e(I4,O2r),e(I4,LX),e(LX,G2r),e(I4,X2r),e(Z,V2r),e(Z,j4),e(j4,Lbe),e(Lbe,z2r),e(j4,W2r),e(j4,BX),e(BX,Q2r),e(j4,H2r),e(Z,U2r),e(Z,D4),e(D4,Bbe),e(Bbe,J2r),e(D4,Y2r),e(D4,xX),e(xX,K2r),e(D4,Z2r),e(Z,evr),e(Z,N4),e(N4,xbe),e(xbe,ovr),e(N4,rvr),e(N4,kX),e(kX,tvr),e(N4,avr),e(Z,svr),e(Z,q4),e(q4,kbe),e(kbe,nvr),e(q4,lvr),e(q4,RX),e(RX,ivr),e(q4,dvr),e(Z,cvr),e(Z,O4),e(O4,Rbe),e(Rbe,mvr),e(O4,fvr),e(O4,SX),e(SX,gvr),e(O4,hvr),e(Z,uvr),e(Z,G4),e(G4,Sbe),e(Sbe,pvr),e(G4,_vr),e(G4,PX),e(PX,bvr),e(G4,vvr),e(Eo,Tvr),e(Eo,Pbe),e(Pbe,Fvr),e(Eo,Cvr),g(oL,Eo,null),b(c,Uke,_),b(c,Wc,_),e(Wc,X4),e(X4,$be),g(rL,$be,null),e(Wc,Mvr),e(Wc,Ibe),e(Ibe,Evr),b(c,Jke,_),b(c,xr,_),g(tL,xr,null),e(xr,yvr),e(xr,Qc),e(Qc,wvr),e(Qc,jbe),e(jbe,Avr),e(Qc,Lvr),e(Qc,Dbe),e(Dbe,Bvr),e(Qc,xvr),e(xr,kvr),e(xr,aL),e(aL,Rvr),e(aL,Nbe),e(Nbe,Svr),e(aL,Pvr),e(xr,$vr),e(xr,Et),g(sL,Et,null),e(Et,Ivr),e(Et,qbe),e(qbe,jvr),e(Et,Dvr),e(Et,Hc),e(Hc,Nvr),e(Hc,Obe),e(Obe,qvr),e(Hc,Ovr),e(Hc,Gbe),e(Gbe,Gvr),e(Hc,Xvr),e(Et,Vvr),e(Et,Xbe),e(Xbe,zvr),e(Et,Wvr),g(nL,Et,null),e(xr,Qvr),e(xr,yo),g(lL,yo,null),e(yo,Hvr),e(yo,Vbe),e(Vbe,Uvr),e(yo,Jvr),e(yo,ws),e(ws,Yvr),e(ws,zbe),e(zbe,Kvr),e(ws,Zvr),e(ws,Wbe),e(Wbe,eTr),e(ws,oTr),e(ws,Qbe),e(Qbe,rTr),e(ws,tTr),e(yo,aTr),e(yo,Hbe),e(Hbe,V4),e(V4,Ube),e(Ube,sTr),e(V4,nTr),e(V4,$X),e($X,lTr),e(V4,iTr),e(yo,dTr),e(yo,Jbe),e(Jbe,cTr),e(yo,mTr),g(iL,yo,null),b(c,Yke,_),b(c,Uc,_),e(Uc,z4),e(z4,Ybe),g(dL,Ybe,null),e(Uc,fTr),e(Uc,Kbe),e(Kbe,gTr),b(c,Kke,_),b(c,kr,_),g(cL,kr,null),e(kr,hTr),e(kr,Jc),e(Jc,uTr),e(Jc,Zbe),e(Zbe,pTr),e(Jc,_Tr),e(Jc,e2e),e(e2e,bTr),e(Jc,vTr),e(kr,TTr),e(kr,mL),e(mL,FTr),e(mL,o2e),e(o2e,CTr),e(mL,MTr),e(kr,ETr),e(kr,yt),g(fL,yt,null),e(yt,yTr),e(yt,r2e),e(r2e,wTr),e(yt,ATr),e(yt,Yc),e(Yc,LTr),e(Yc,t2e),e(t2e,BTr),e(Yc,xTr),e(Yc,a2e),e(a2e,kTr),e(Yc,RTr),e(yt,STr),e(yt,s2e),e(s2e,PTr),e(yt,$Tr),g(gL,yt,null),e(kr,ITr),e(kr,wo),g(hL,wo,null),e(wo,jTr),e(wo,n2e),e(n2e,DTr),e(wo,NTr),e(wo,As),e(As,qTr),e(As,l2e),e(l2e,OTr),e(As,GTr),e(As,i2e),e(i2e,XTr),e(As,VTr),e(As,d2e),e(d2e,zTr),e(As,WTr),e(wo,QTr),e(wo,c2e),e(c2e,W4),e(W4,m2e),e(m2e,HTr),e(W4,UTr),e(W4,IX),e(IX,JTr),e(W4,YTr),e(wo,KTr),e(wo,f2e),e(f2e,ZTr),e(wo,e1r),g(uL,wo,null),b(c,Zke,_),b(c,Kc,_),e(Kc,Q4),e(Q4,g2e),g(pL,g2e,null),e(Kc,o1r),e(Kc,h2e),e(h2e,r1r),b(c,eRe,_),b(c,Rr,_),g(_L,Rr,null),e(Rr,t1r),e(Rr,Zc),e(Zc,a1r),e(Zc,u2e),e(u2e,s1r),e(Zc,n1r),e(Zc,p2e),e(p2e,l1r),e(Zc,i1r),e(Rr,d1r),e(Rr,bL),e(bL,c1r),e(bL,_2e),e(_2e,m1r),e(bL,f1r),e(Rr,g1r),e(Rr,wt),g(vL,wt,null),e(wt,h1r),e(wt,b2e),e(b2e,u1r),e(wt,p1r),e(wt,em),e(em,_1r),e(em,v2e),e(v2e,b1r),e(em,v1r),e(em,T2e),e(T2e,T1r),e(em,F1r),e(wt,C1r),e(wt,F2e),e(F2e,M1r),e(wt,E1r),g(TL,wt,null),e(Rr,y1r),e(Rr,Ao),g(FL,Ao,null),e(Ao,w1r),e(Ao,C2e),e(C2e,A1r),e(Ao,L1r),e(Ao,Ls),e(Ls,B1r),e(Ls,M2e),e(M2e,x1r),e(Ls,k1r),e(Ls,E2e),e(E2e,R1r),e(Ls,S1r),e(Ls,y2e),e(y2e,P1r),e(Ls,$1r),e(Ao,I1r),e(Ao,z),e(z,H4),e(H4,w2e),e(w2e,j1r),e(H4,D1r),e(H4,jX),e(jX,N1r),e(H4,q1r),e(z,O1r),e(z,U4),e(U4,A2e),e(A2e,G1r),e(U4,X1r),e(U4,DX),e(DX,V1r),e(U4,z1r),e(z,W1r),e(z,J4),e(J4,L2e),e(L2e,Q1r),e(J4,H1r),e(J4,NX),e(NX,U1r),e(J4,J1r),e(z,Y1r),e(z,Y4),e(Y4,B2e),e(B2e,K1r),e(Y4,Z1r),e(Y4,qX),e(qX,eFr),e(Y4,oFr),e(z,rFr),e(z,K4),e(K4,x2e),e(x2e,tFr),e(K4,aFr),e(K4,OX),e(OX,sFr),e(K4,nFr),e(z,lFr),e(z,Z4),e(Z4,k2e),e(k2e,iFr),e(Z4,dFr),e(Z4,GX),e(GX,cFr),e(Z4,mFr),e(z,fFr),e(z,eE),e(eE,R2e),e(R2e,gFr),e(eE,hFr),e(eE,XX),e(XX,uFr),e(eE,pFr),e(z,_Fr),e(z,oE),e(oE,S2e),e(S2e,bFr),e(oE,vFr),e(oE,VX),e(VX,TFr),e(oE,FFr),e(z,CFr),e(z,rE),e(rE,P2e),e(P2e,MFr),e(rE,EFr),e(rE,zX),e(zX,yFr),e(rE,wFr),e(z,AFr),e(z,tE),e(tE,$2e),e($2e,LFr),e(tE,BFr),e(tE,WX),e(WX,xFr),e(tE,kFr),e(z,RFr),e(z,aE),e(aE,I2e),e(I2e,SFr),e(aE,PFr),e(aE,QX),e(QX,$Fr),e(aE,IFr),e(z,jFr),e(z,sE),e(sE,j2e),e(j2e,DFr),e(sE,NFr),e(sE,HX),e(HX,qFr),e(sE,OFr),e(z,GFr),e(z,nE),e(nE,D2e),e(D2e,XFr),e(nE,VFr),e(nE,UX),e(UX,zFr),e(nE,WFr),e(z,QFr),e(z,lE),e(lE,N2e),e(N2e,HFr),e(lE,UFr),e(lE,JX),e(JX,JFr),e(lE,YFr),e(z,KFr),e(z,iE),e(iE,q2e),e(q2e,ZFr),e(iE,eCr),e(iE,YX),e(YX,oCr),e(iE,rCr),e(z,tCr),e(z,dE),e(dE,O2e),e(O2e,aCr),e(dE,sCr),e(dE,KX),e(KX,nCr),e(dE,lCr),e(z,iCr),e(z,cE),e(cE,G2e),e(G2e,dCr),e(cE,cCr),e(cE,ZX),e(ZX,mCr),e(cE,fCr),e(z,gCr),e(z,mE),e(mE,X2e),e(X2e,hCr),e(mE,uCr),e(mE,eV),e(eV,pCr),e(mE,_Cr),e(z,bCr),e(z,fE),e(fE,V2e),e(V2e,vCr),e(fE,TCr),e(fE,oV),e(oV,FCr),e(fE,CCr),e(z,MCr),e(z,gE),e(gE,z2e),e(z2e,ECr),e(gE,yCr),e(gE,rV),e(rV,wCr),e(gE,ACr),e(z,LCr),e(z,hE),e(hE,W2e),e(W2e,BCr),e(hE,xCr),e(hE,tV),e(tV,kCr),e(hE,RCr),e(z,SCr),e(z,uE),e(uE,Q2e),e(Q2e,PCr),e(uE,$Cr),e(uE,aV),e(aV,ICr),e(uE,jCr),e(z,DCr),e(z,pE),e(pE,H2e),e(H2e,NCr),e(pE,qCr),e(pE,sV),e(sV,OCr),e(pE,GCr),e(z,XCr),e(z,_E),e(_E,U2e),e(U2e,VCr),e(_E,zCr),e(_E,nV),e(nV,WCr),e(_E,QCr),e(z,HCr),e(z,bE),e(bE,J2e),e(J2e,UCr),e(bE,JCr),e(bE,lV),e(lV,YCr),e(bE,KCr),e(Ao,ZCr),e(Ao,Y2e),e(Y2e,eMr),e(Ao,oMr),g(CL,Ao,null),b(c,oRe,_),b(c,om,_),e(om,vE),e(vE,K2e),g(ML,K2e,null),e(om,rMr),e(om,Z2e),e(Z2e,tMr),b(c,rRe,_),b(c,Sr,_),g(EL,Sr,null),e(Sr,aMr),e(Sr,rm),e(rm,sMr),e(rm,eve),e(eve,nMr),e(rm,lMr),e(rm,ove),e(ove,iMr),e(rm,dMr),e(Sr,cMr),e(Sr,yL),e(yL,mMr),e(yL,rve),e(rve,fMr),e(yL,gMr),e(Sr,hMr),e(Sr,At),g(wL,At,null),e(At,uMr),e(At,tve),e(tve,pMr),e(At,_Mr),e(At,tm),e(tm,bMr),e(tm,ave),e(ave,vMr),e(tm,TMr),e(tm,sve),e(sve,FMr),e(tm,CMr),e(At,MMr),e(At,nve),e(nve,EMr),e(At,yMr),g(AL,At,null),e(Sr,wMr),e(Sr,Lo),g(LL,Lo,null),e(Lo,AMr),e(Lo,lve),e(lve,LMr),e(Lo,BMr),e(Lo,Bs),e(Bs,xMr),e(Bs,ive),e(ive,kMr),e(Bs,RMr),e(Bs,dve),e(dve,SMr),e(Bs,PMr),e(Bs,cve),e(cve,$Mr),e(Bs,IMr),e(Lo,jMr),e(Lo,ca),e(ca,TE),e(TE,mve),e(mve,DMr),e(TE,NMr),e(TE,iV),e(iV,qMr),e(TE,OMr),e(ca,GMr),e(ca,FE),e(FE,fve),e(fve,XMr),e(FE,VMr),e(FE,dV),e(dV,zMr),e(FE,WMr),e(ca,QMr),e(ca,CE),e(CE,gve),e(gve,HMr),e(CE,UMr),e(CE,cV),e(cV,JMr),e(CE,YMr),e(ca,KMr),e(ca,ME),e(ME,hve),e(hve,ZMr),e(ME,e4r),e(ME,mV),e(mV,o4r),e(ME,r4r),e(ca,t4r),e(ca,EE),e(EE,uve),e(uve,a4r),e(EE,s4r),e(EE,fV),e(fV,n4r),e(EE,l4r),e(Lo,i4r),e(Lo,pve),e(pve,d4r),e(Lo,c4r),g(BL,Lo,null),b(c,tRe,_),b(c,am,_),e(am,yE),e(yE,_ve),g(xL,_ve,null),e(am,m4r),e(am,bve),e(bve,f4r),b(c,aRe,_),b(c,Pr,_),g(kL,Pr,null),e(Pr,g4r),e(Pr,sm),e(sm,h4r),e(sm,vve),e(vve,u4r),e(sm,p4r),e(sm,Tve),e(Tve,_4r),e(sm,b4r),e(Pr,v4r),e(Pr,RL),e(RL,T4r),e(RL,Fve),e(Fve,F4r),e(RL,C4r),e(Pr,M4r),e(Pr,Lt),g(SL,Lt,null),e(Lt,E4r),e(Lt,Cve),e(Cve,y4r),e(Lt,w4r),e(Lt,nm),e(nm,A4r),e(nm,Mve),e(Mve,L4r),e(nm,B4r),e(nm,Eve),e(Eve,x4r),e(nm,k4r),e(Lt,R4r),e(Lt,yve),e(yve,S4r),e(Lt,P4r),g(PL,Lt,null),e(Pr,$4r),e(Pr,Bo),g($L,Bo,null),e(Bo,I4r),e(Bo,wve),e(wve,j4r),e(Bo,D4r),e(Bo,xs),e(xs,N4r),e(xs,Ave),e(Ave,q4r),e(xs,O4r),e(xs,Lve),e(Lve,G4r),e(xs,X4r),e(xs,Bve),e(Bve,V4r),e(xs,z4r),e(Bo,W4r),e(Bo,ce),e(ce,wE),e(wE,xve),e(xve,Q4r),e(wE,H4r),e(wE,gV),e(gV,U4r),e(wE,J4r),e(ce,Y4r),e(ce,AE),e(AE,kve),e(kve,K4r),e(AE,Z4r),e(AE,hV),e(hV,eEr),e(AE,oEr),e(ce,rEr),e(ce,LE),e(LE,Rve),e(Rve,tEr),e(LE,aEr),e(LE,uV),e(uV,sEr),e(LE,nEr),e(ce,lEr),e(ce,BE),e(BE,Sve),e(Sve,iEr),e(BE,dEr),e(BE,pV),e(pV,cEr),e(BE,mEr),e(ce,fEr),e(ce,xE),e(xE,Pve),e(Pve,gEr),e(xE,hEr),e(xE,_V),e(_V,uEr),e(xE,pEr),e(ce,_Er),e(ce,kE),e(kE,$ve),e($ve,bEr),e(kE,vEr),e(kE,bV),e(bV,TEr),e(kE,FEr),e(ce,CEr),e(ce,RE),e(RE,Ive),e(Ive,MEr),e(RE,EEr),e(RE,vV),e(vV,yEr),e(RE,wEr),e(ce,AEr),e(ce,SE),e(SE,jve),e(jve,LEr),e(SE,BEr),e(SE,TV),e(TV,xEr),e(SE,kEr),e(ce,REr),e(ce,PE),e(PE,Dve),e(Dve,SEr),e(PE,PEr),e(PE,FV),e(FV,$Er),e(PE,IEr),e(ce,jEr),e(ce,$E),e($E,Nve),e(Nve,DEr),e($E,NEr),e($E,CV),e(CV,qEr),e($E,OEr),e(ce,GEr),e(ce,IE),e(IE,qve),e(qve,XEr),e(IE,VEr),e(IE,MV),e(MV,zEr),e(IE,WEr),e(ce,QEr),e(ce,jE),e(jE,Ove),e(Ove,HEr),e(jE,UEr),e(jE,EV),e(EV,JEr),e(jE,YEr),e(Bo,KEr),e(Bo,Gve),e(Gve,ZEr),e(Bo,e3r),g(IL,Bo,null),b(c,sRe,_),b(c,lm,_),e(lm,DE),e(DE,Xve),g(jL,Xve,null),e(lm,o3r),e(lm,Vve),e(Vve,r3r),b(c,nRe,_),b(c,$r,_),g(DL,$r,null),e($r,t3r),e($r,im),e(im,a3r),e(im,zve),e(zve,s3r),e(im,n3r),e(im,Wve),e(Wve,l3r),e(im,i3r),e($r,d3r),e($r,NL),e(NL,c3r),e(NL,Qve),e(Qve,m3r),e(NL,f3r),e($r,g3r),e($r,Bt),g(qL,Bt,null),e(Bt,h3r),e(Bt,Hve),e(Hve,u3r),e(Bt,p3r),e(Bt,dm),e(dm,_3r),e(dm,Uve),e(Uve,b3r),e(dm,v3r),e(dm,Jve),e(Jve,T3r),e(dm,F3r),e(Bt,C3r),e(Bt,Yve),e(Yve,M3r),e(Bt,E3r),g(OL,Bt,null),e($r,y3r),e($r,xo),g(GL,xo,null),e(xo,w3r),e(xo,Kve),e(Kve,A3r),e(xo,L3r),e(xo,ks),e(ks,B3r),e(ks,Zve),e(Zve,x3r),e(ks,k3r),e(ks,eTe),e(eTe,R3r),e(ks,S3r),e(ks,oTe),e(oTe,P3r),e(ks,$3r),e(xo,I3r),e(xo,be),e(be,NE),e(NE,rTe),e(rTe,j3r),e(NE,D3r),e(NE,yV),e(yV,N3r),e(NE,q3r),e(be,O3r),e(be,qE),e(qE,tTe),e(tTe,G3r),e(qE,X3r),e(qE,wV),e(wV,V3r),e(qE,z3r),e(be,W3r),e(be,OE),e(OE,aTe),e(aTe,Q3r),e(OE,H3r),e(OE,AV),e(AV,U3r),e(OE,J3r),e(be,Y3r),e(be,GE),e(GE,sTe),e(sTe,K3r),e(GE,Z3r),e(GE,LV),e(LV,e5r),e(GE,o5r),e(be,r5r),e(be,XE),e(XE,nTe),e(nTe,t5r),e(XE,a5r),e(XE,BV),e(BV,s5r),e(XE,n5r),e(be,l5r),e(be,VE),e(VE,lTe),e(lTe,i5r),e(VE,d5r),e(VE,xV),e(xV,c5r),e(VE,m5r),e(be,f5r),e(be,zE),e(zE,iTe),e(iTe,g5r),e(zE,h5r),e(zE,kV),e(kV,u5r),e(zE,p5r),e(be,_5r),e(be,WE),e(WE,dTe),e(dTe,b5r),e(WE,v5r),e(WE,RV),e(RV,T5r),e(WE,F5r),e(be,C5r),e(be,QE),e(QE,cTe),e(cTe,M5r),e(QE,E5r),e(QE,SV),e(SV,y5r),e(QE,w5r),e(be,A5r),e(be,HE),e(HE,mTe),e(mTe,L5r),e(HE,B5r),e(HE,PV),e(PV,x5r),e(HE,k5r),e(xo,R5r),e(xo,fTe),e(fTe,S5r),e(xo,P5r),g(XL,xo,null),b(c,lRe,_),b(c,cm,_),e(cm,UE),e(UE,gTe),g(VL,gTe,null),e(cm,$5r),e(cm,hTe),e(hTe,I5r),b(c,iRe,_),b(c,Ir,_),g(zL,Ir,null),e(Ir,j5r),e(Ir,mm),e(mm,D5r),e(mm,uTe),e(uTe,N5r),e(mm,q5r),e(mm,pTe),e(pTe,O5r),e(mm,G5r),e(Ir,X5r),e(Ir,WL),e(WL,V5r),e(WL,_Te),e(_Te,z5r),e(WL,W5r),e(Ir,Q5r),e(Ir,xt),g(QL,xt,null),e(xt,H5r),e(xt,bTe),e(bTe,U5r),e(xt,J5r),e(xt,fm),e(fm,Y5r),e(fm,vTe),e(vTe,K5r),e(fm,Z5r),e(fm,TTe),e(TTe,eyr),e(fm,oyr),e(xt,ryr),e(xt,FTe),e(FTe,tyr),e(xt,ayr),g(HL,xt,null),e(Ir,syr),e(Ir,ko),g(UL,ko,null),e(ko,nyr),e(ko,CTe),e(CTe,lyr),e(ko,iyr),e(ko,Rs),e(Rs,dyr),e(Rs,MTe),e(MTe,cyr),e(Rs,myr),e(Rs,ETe),e(ETe,fyr),e(Rs,gyr),e(Rs,yTe),e(yTe,hyr),e(Rs,uyr),e(ko,pyr),e(ko,Me),e(Me,JE),e(JE,wTe),e(wTe,_yr),e(JE,byr),e(JE,$V),e($V,vyr),e(JE,Tyr),e(Me,Fyr),e(Me,YE),e(YE,ATe),e(ATe,Cyr),e(YE,Myr),e(YE,IV),e(IV,Eyr),e(YE,yyr),e(Me,wyr),e(Me,KE),e(KE,LTe),e(LTe,Ayr),e(KE,Lyr),e(KE,jV),e(jV,Byr),e(KE,xyr),e(Me,kyr),e(Me,ZE),e(ZE,BTe),e(BTe,Ryr),e(ZE,Syr),e(ZE,DV),e(DV,Pyr),e(ZE,$yr),e(Me,Iyr),e(Me,e3),e(e3,xTe),e(xTe,jyr),e(e3,Dyr),e(e3,NV),e(NV,Nyr),e(e3,qyr),e(Me,Oyr),e(Me,o3),e(o3,kTe),e(kTe,Gyr),e(o3,Xyr),e(o3,qV),e(qV,Vyr),e(o3,zyr),e(Me,Wyr),e(Me,r3),e(r3,RTe),e(RTe,Qyr),e(r3,Hyr),e(r3,OV),e(OV,Uyr),e(r3,Jyr),e(Me,Yyr),e(Me,t3),e(t3,STe),e(STe,Kyr),e(t3,Zyr),e(t3,GV),e(GV,ewr),e(t3,owr),e(Me,rwr),e(Me,a3),e(a3,PTe),e(PTe,twr),e(a3,awr),e(a3,XV),e(XV,swr),e(a3,nwr),e(ko,lwr),e(ko,$Te),e($Te,iwr),e(ko,dwr),g(JL,ko,null),b(c,dRe,_),b(c,gm,_),e(gm,s3),e(s3,ITe),g(YL,ITe,null),e(gm,cwr),e(gm,jTe),e(jTe,mwr),b(c,cRe,_),b(c,jr,_),g(KL,jr,null),e(jr,fwr),e(jr,hm),e(hm,gwr),e(hm,DTe),e(DTe,hwr),e(hm,uwr),e(hm,NTe),e(NTe,pwr),e(hm,_wr),e(jr,bwr),e(jr,ZL),e(ZL,vwr),e(ZL,qTe),e(qTe,Twr),e(ZL,Fwr),e(jr,Cwr),e(jr,kt),g(e7,kt,null),e(kt,Mwr),e(kt,OTe),e(OTe,Ewr),e(kt,ywr),e(kt,um),e(um,wwr),e(um,GTe),e(GTe,Awr),e(um,Lwr),e(um,XTe),e(XTe,Bwr),e(um,xwr),e(kt,kwr),e(kt,VTe),e(VTe,Rwr),e(kt,Swr),g(o7,kt,null),e(jr,Pwr),e(jr,Ro),g(r7,Ro,null),e(Ro,$wr),e(Ro,zTe),e(zTe,Iwr),e(Ro,jwr),e(Ro,Ss),e(Ss,Dwr),e(Ss,WTe),e(WTe,Nwr),e(Ss,qwr),e(Ss,QTe),e(QTe,Owr),e(Ss,Gwr),e(Ss,HTe),e(HTe,Xwr),e(Ss,Vwr),e(Ro,zwr),e(Ro,ve),e(ve,n3),e(n3,UTe),e(UTe,Wwr),e(n3,Qwr),e(n3,VV),e(VV,Hwr),e(n3,Uwr),e(ve,Jwr),e(ve,l3),e(l3,JTe),e(JTe,Ywr),e(l3,Kwr),e(l3,zV),e(zV,Zwr),e(l3,e6r),e(ve,o6r),e(ve,i3),e(i3,YTe),e(YTe,r6r),e(i3,t6r),e(i3,WV),e(WV,a6r),e(i3,s6r),e(ve,n6r),e(ve,d3),e(d3,KTe),e(KTe,l6r),e(d3,i6r),e(d3,QV),e(QV,d6r),e(d3,c6r),e(ve,m6r),e(ve,c3),e(c3,ZTe),e(ZTe,f6r),e(c3,g6r),e(c3,HV),e(HV,h6r),e(c3,u6r),e(ve,p6r),e(ve,m3),e(m3,e1e),e(e1e,_6r),e(m3,b6r),e(m3,UV),e(UV,v6r),e(m3,T6r),e(ve,F6r),e(ve,f3),e(f3,o1e),e(o1e,C6r),e(f3,M6r),e(f3,JV),e(JV,E6r),e(f3,y6r),e(ve,w6r),e(ve,g3),e(g3,r1e),e(r1e,A6r),e(g3,L6r),e(g3,YV),e(YV,B6r),e(g3,x6r),e(ve,k6r),e(ve,h3),e(h3,t1e),e(t1e,R6r),e(h3,S6r),e(h3,KV),e(KV,P6r),e(h3,$6r),e(ve,I6r),e(ve,u3),e(u3,a1e),e(a1e,j6r),e(u3,D6r),e(u3,ZV),e(ZV,N6r),e(u3,q6r),e(Ro,O6r),e(Ro,s1e),e(s1e,G6r),e(Ro,X6r),g(t7,Ro,null),b(c,mRe,_),b(c,pm,_),e(pm,p3),e(p3,n1e),g(a7,n1e,null),e(pm,V6r),e(pm,l1e),e(l1e,z6r),b(c,fRe,_),b(c,Dr,_),g(s7,Dr,null),e(Dr,W6r),e(Dr,_m),e(_m,Q6r),e(_m,i1e),e(i1e,H6r),e(_m,U6r),e(_m,d1e),e(d1e,J6r),e(_m,Y6r),e(Dr,K6r),e(Dr,n7),e(n7,Z6r),e(n7,c1e),e(c1e,eAr),e(n7,oAr),e(Dr,rAr),e(Dr,Rt),g(l7,Rt,null),e(Rt,tAr),e(Rt,m1e),e(m1e,aAr),e(Rt,sAr),e(Rt,bm),e(bm,nAr),e(bm,f1e),e(f1e,lAr),e(bm,iAr),e(bm,g1e),e(g1e,dAr),e(bm,cAr),e(Rt,mAr),e(Rt,h1e),e(h1e,fAr),e(Rt,gAr),g(i7,Rt,null),e(Dr,hAr),e(Dr,So),g(d7,So,null),e(So,uAr),e(So,u1e),e(u1e,pAr),e(So,_Ar),e(So,Ps),e(Ps,bAr),e(Ps,p1e),e(p1e,vAr),e(Ps,TAr),e(Ps,_1e),e(_1e,FAr),e(Ps,CAr),e(Ps,b1e),e(b1e,MAr),e(Ps,EAr),e(So,yAr),e(So,Te),e(Te,_3),e(_3,v1e),e(v1e,wAr),e(_3,AAr),e(_3,ez),e(ez,LAr),e(_3,BAr),e(Te,xAr),e(Te,b3),e(b3,T1e),e(T1e,kAr),e(b3,RAr),e(b3,oz),e(oz,SAr),e(b3,PAr),e(Te,$Ar),e(Te,v3),e(v3,F1e),e(F1e,IAr),e(v3,jAr),e(v3,rz),e(rz,DAr),e(v3,NAr),e(Te,qAr),e(Te,T3),e(T3,C1e),e(C1e,OAr),e(T3,GAr),e(T3,tz),e(tz,XAr),e(T3,VAr),e(Te,zAr),e(Te,F3),e(F3,M1e),e(M1e,WAr),e(F3,QAr),e(F3,az),e(az,HAr),e(F3,UAr),e(Te,JAr),e(Te,C3),e(C3,E1e),e(E1e,YAr),e(C3,KAr),e(C3,sz),e(sz,ZAr),e(C3,e0r),e(Te,o0r),e(Te,M3),e(M3,y1e),e(y1e,r0r),e(M3,t0r),e(M3,nz),e(nz,a0r),e(M3,s0r),e(Te,n0r),e(Te,E3),e(E3,w1e),e(w1e,l0r),e(E3,i0r),e(E3,lz),e(lz,d0r),e(E3,c0r),e(Te,m0r),e(Te,y3),e(y3,A1e),e(A1e,f0r),e(y3,g0r),e(y3,iz),e(iz,h0r),e(y3,u0r),e(Te,p0r),e(Te,w3),e(w3,L1e),e(L1e,_0r),e(w3,b0r),e(w3,dz),e(dz,v0r),e(w3,T0r),e(So,F0r),e(So,B1e),e(B1e,C0r),e(So,M0r),g(c7,So,null),b(c,gRe,_),b(c,vm,_),e(vm,A3),e(A3,x1e),g(m7,x1e,null),e(vm,E0r),e(vm,k1e),e(k1e,y0r),b(c,hRe,_),b(c,Nr,_),g(f7,Nr,null),e(Nr,w0r),e(Nr,Tm),e(Tm,A0r),e(Tm,R1e),e(R1e,L0r),e(Tm,B0r),e(Tm,S1e),e(S1e,x0r),e(Tm,k0r),e(Nr,R0r),e(Nr,g7),e(g7,S0r),e(g7,P1e),e(P1e,P0r),e(g7,$0r),e(Nr,I0r),e(Nr,St),g(h7,St,null),e(St,j0r),e(St,$1e),e($1e,D0r),e(St,N0r),e(St,Fm),e(Fm,q0r),e(Fm,I1e),e(I1e,O0r),e(Fm,G0r),e(Fm,j1e),e(j1e,X0r),e(Fm,V0r),e(St,z0r),e(St,D1e),e(D1e,W0r),e(St,Q0r),g(u7,St,null),e(Nr,H0r),e(Nr,Po),g(p7,Po,null),e(Po,U0r),e(Po,N1e),e(N1e,J0r),e(Po,Y0r),e(Po,$s),e($s,K0r),e($s,q1e),e(q1e,Z0r),e($s,eLr),e($s,O1e),e(O1e,oLr),e($s,rLr),e($s,G1e),e(G1e,tLr),e($s,aLr),e(Po,sLr),e(Po,Se),e(Se,L3),e(L3,X1e),e(X1e,nLr),e(L3,lLr),e(L3,cz),e(cz,iLr),e(L3,dLr),e(Se,cLr),e(Se,B3),e(B3,V1e),e(V1e,mLr),e(B3,fLr),e(B3,mz),e(mz,gLr),e(B3,hLr),e(Se,uLr),e(Se,x3),e(x3,z1e),e(z1e,pLr),e(x3,_Lr),e(x3,fz),e(fz,bLr),e(x3,vLr),e(Se,TLr),e(Se,k3),e(k3,W1e),e(W1e,FLr),e(k3,CLr),e(k3,gz),e(gz,MLr),e(k3,ELr),e(Se,yLr),e(Se,R3),e(R3,Q1e),e(Q1e,wLr),e(R3,ALr),e(R3,hz),e(hz,LLr),e(R3,BLr),e(Se,xLr),e(Se,S3),e(S3,H1e),e(H1e,kLr),e(S3,RLr),e(S3,uz),e(uz,SLr),e(S3,PLr),e(Se,$Lr),e(Se,P3),e(P3,U1e),e(U1e,ILr),e(P3,jLr),e(P3,pz),e(pz,DLr),e(P3,NLr),e(Se,qLr),e(Se,$3),e($3,J1e),e(J1e,OLr),e($3,GLr),e($3,_z),e(_z,XLr),e($3,VLr),e(Po,zLr),e(Po,Y1e),e(Y1e,WLr),e(Po,QLr),g(_7,Po,null),b(c,uRe,_),b(c,Cm,_),e(Cm,I3),e(I3,K1e),g(b7,K1e,null),e(Cm,HLr),e(Cm,Z1e),e(Z1e,ULr),b(c,pRe,_),b(c,qr,_),g(v7,qr,null),e(qr,JLr),e(qr,Mm),e(Mm,YLr),e(Mm,eFe),e(eFe,KLr),e(Mm,ZLr),e(Mm,oFe),e(oFe,e7r),e(Mm,o7r),e(qr,r7r),e(qr,T7),e(T7,t7r),e(T7,rFe),e(rFe,a7r),e(T7,s7r),e(qr,n7r),e(qr,Pt),g(F7,Pt,null),e(Pt,l7r),e(Pt,tFe),e(tFe,i7r),e(Pt,d7r),e(Pt,Em),e(Em,c7r),e(Em,aFe),e(aFe,m7r),e(Em,f7r),e(Em,sFe),e(sFe,g7r),e(Em,h7r),e(Pt,u7r),e(Pt,nFe),e(nFe,p7r),e(Pt,_7r),g(C7,Pt,null),e(qr,b7r),e(qr,$o),g(M7,$o,null),e($o,v7r),e($o,lFe),e(lFe,T7r),e($o,F7r),e($o,Is),e(Is,C7r),e(Is,iFe),e(iFe,M7r),e(Is,E7r),e(Is,dFe),e(dFe,y7r),e(Is,w7r),e(Is,cFe),e(cFe,A7r),e(Is,L7r),e($o,B7r),e($o,Pe),e(Pe,j3),e(j3,mFe),e(mFe,x7r),e(j3,k7r),e(j3,bz),e(bz,R7r),e(j3,S7r),e(Pe,P7r),e(Pe,D3),e(D3,fFe),e(fFe,$7r),e(D3,I7r),e(D3,vz),e(vz,j7r),e(D3,D7r),e(Pe,N7r),e(Pe,N3),e(N3,gFe),e(gFe,q7r),e(N3,O7r),e(N3,Tz),e(Tz,G7r),e(N3,X7r),e(Pe,V7r),e(Pe,q3),e(q3,hFe),e(hFe,z7r),e(q3,W7r),e(q3,Fz),e(Fz,Q7r),e(q3,H7r),e(Pe,U7r),e(Pe,O3),e(O3,uFe),e(uFe,J7r),e(O3,Y7r),e(O3,Cz),e(Cz,K7r),e(O3,Z7r),e(Pe,e8r),e(Pe,G3),e(G3,pFe),e(pFe,o8r),e(G3,r8r),e(G3,Mz),e(Mz,t8r),e(G3,a8r),e(Pe,s8r),e(Pe,X3),e(X3,_Fe),e(_Fe,n8r),e(X3,l8r),e(X3,Ez),e(Ez,i8r),e(X3,d8r),e(Pe,c8r),e(Pe,V3),e(V3,bFe),e(bFe,m8r),e(V3,f8r),e(V3,yz),e(yz,g8r),e(V3,h8r),e($o,u8r),e($o,vFe),e(vFe,p8r),e($o,_8r),g(E7,$o,null),b(c,_Re,_),b(c,ym,_),e(ym,z3),e(z3,TFe),g(y7,TFe,null),e(ym,b8r),e(ym,FFe),e(FFe,v8r),b(c,bRe,_),b(c,Or,_),g(w7,Or,null),e(Or,T8r),e(Or,wm),e(wm,F8r),e(wm,CFe),e(CFe,C8r),e(wm,M8r),e(wm,MFe),e(MFe,E8r),e(wm,y8r),e(Or,w8r),e(Or,A7),e(A7,A8r),e(A7,EFe),e(EFe,L8r),e(A7,B8r),e(Or,x8r),e(Or,$t),g(L7,$t,null),e($t,k8r),e($t,yFe),e(yFe,R8r),e($t,S8r),e($t,Am),e(Am,P8r),e(Am,wFe),e(wFe,$8r),e(Am,I8r),e(Am,AFe),e(AFe,j8r),e(Am,D8r),e($t,N8r),e($t,LFe),e(LFe,q8r),e($t,O8r),g(B7,$t,null),e(Or,G8r),e(Or,Io),g(x7,Io,null),e(Io,X8r),e(Io,BFe),e(BFe,V8r),e(Io,z8r),e(Io,js),e(js,W8r),e(js,xFe),e(xFe,Q8r),e(js,H8r),e(js,kFe),e(kFe,U8r),e(js,J8r),e(js,RFe),e(RFe,Y8r),e(js,K8r),e(Io,Z8r),e(Io,SFe),e(SFe,W3),e(W3,PFe),e(PFe,e9r),e(W3,o9r),e(W3,wz),e(wz,r9r),e(W3,t9r),e(Io,a9r),e(Io,$Fe),e($Fe,s9r),e(Io,n9r),g(k7,Io,null),b(c,vRe,_),b(c,Lm,_),e(Lm,Q3),e(Q3,IFe),g(R7,IFe,null),e(Lm,l9r),e(Lm,jFe),e(jFe,i9r),b(c,TRe,_),b(c,Gr,_),g(S7,Gr,null),e(Gr,d9r),e(Gr,Bm),e(Bm,c9r),e(Bm,DFe),e(DFe,m9r),e(Bm,f9r),e(Bm,NFe),e(NFe,g9r),e(Bm,h9r),e(Gr,u9r),e(Gr,P7),e(P7,p9r),e(P7,qFe),e(qFe,_9r),e(P7,b9r),e(Gr,v9r),e(Gr,It),g($7,It,null),e(It,T9r),e(It,OFe),e(OFe,F9r),e(It,C9r),e(It,xm),e(xm,M9r),e(xm,GFe),e(GFe,E9r),e(xm,y9r),e(xm,XFe),e(XFe,w9r),e(xm,A9r),e(It,L9r),e(It,VFe),e(VFe,B9r),e(It,x9r),g(I7,It,null),e(Gr,k9r),e(Gr,jo),g(j7,jo,null),e(jo,R9r),e(jo,zFe),e(zFe,S9r),e(jo,P9r),e(jo,Ds),e(Ds,$9r),e(Ds,WFe),e(WFe,I9r),e(Ds,j9r),e(Ds,QFe),e(QFe,D9r),e(Ds,N9r),e(Ds,HFe),e(HFe,q9r),e(Ds,O9r),e(jo,G9r),e(jo,D7),e(D7,H3),e(H3,UFe),e(UFe,X9r),e(H3,V9r),e(H3,Az),e(Az,z9r),e(H3,W9r),e(D7,Q9r),e(D7,U3),e(U3,JFe),e(JFe,H9r),e(U3,U9r),e(U3,Lz),e(Lz,J9r),e(U3,Y9r),e(jo,K9r),e(jo,YFe),e(YFe,Z9r),e(jo,eBr),g(N7,jo,null),b(c,FRe,_),b(c,km,_),e(km,J3),e(J3,KFe),g(q7,KFe,null),e(km,oBr),e(km,ZFe),e(ZFe,rBr),b(c,CRe,_),b(c,Xr,_),g(O7,Xr,null),e(Xr,tBr),e(Xr,Rm),e(Rm,aBr),e(Rm,eCe),e(eCe,sBr),e(Rm,nBr),e(Rm,oCe),e(oCe,lBr),e(Rm,iBr),e(Xr,dBr),e(Xr,G7),e(G7,cBr),e(G7,rCe),e(rCe,mBr),e(G7,fBr),e(Xr,gBr),e(Xr,jt),g(X7,jt,null),e(jt,hBr),e(jt,tCe),e(tCe,uBr),e(jt,pBr),e(jt,Sm),e(Sm,_Br),e(Sm,aCe),e(aCe,bBr),e(Sm,vBr),e(Sm,sCe),e(sCe,TBr),e(Sm,FBr),e(jt,CBr),e(jt,nCe),e(nCe,MBr),e(jt,EBr),g(V7,jt,null),e(Xr,yBr),e(Xr,Do),g(z7,Do,null),e(Do,wBr),e(Do,lCe),e(lCe,ABr),e(Do,LBr),e(Do,Ns),e(Ns,BBr),e(Ns,iCe),e(iCe,xBr),e(Ns,kBr),e(Ns,dCe),e(dCe,RBr),e(Ns,SBr),e(Ns,cCe),e(cCe,PBr),e(Ns,$Br),e(Do,IBr),e(Do,mCe),e(mCe,Y3),e(Y3,fCe),e(fCe,jBr),e(Y3,DBr),e(Y3,Bz),e(Bz,NBr),e(Y3,qBr),e(Do,OBr),e(Do,gCe),e(gCe,GBr),e(Do,XBr),g(W7,Do,null),MRe=!0},p(c,[_]){const Q7={};_&2&&(Q7.$$scope={dirty:_,ctx:c}),qm.$set(Q7);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:c}),wh.$set(hCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:c}),jh.$set(uCe)},i(c){MRe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(qm.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(wh.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(jh.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(Oy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(nw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(uw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(s6.$$.fragment,c),h(n6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(c6.$$.fragment,c),h(m6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(u0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(N0.$$.fragment,c),h(q0.$$.fragment,c),h(O0.$$.fragment,c),h(G0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(sL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(OL.$$.fragment,c),h(GL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(f7.$$.fragment,c),h(h7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(y7.$$.fragment,c),h(w7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(S7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(j7.$$.fragment,c),h(N7.$$.fragment,c),h(q7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(W7.$$.fragment,c),MRe=!0)},o(c){u(me.$$.fragment,c),u(qa.$$.fragment,c),u(oy.$$.fragment,c),u(ry.$$.fragment,c),u(qm.$$.fragment,c),u(ty.$$.fragment,c),u(ay.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(my.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(by.$$.fragment,c),u(Fy.$$.fragment,c),u(wh.$$.fragment,c),u(Cy.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(yy.$$.fragment,c),u(Ly.$$.fragment,c),u(jh.$$.fragment,c),u(By.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Ry.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(jy.$$.fragment,c),u(Dy.$$.fragment,c),u(Ny.$$.fragment,c),u(Oy.$$.fragment,c),u(Gy.$$.fragment,c),u(Xy.$$.fragment,c),u(Vy.$$.fragment,c),u(zy.$$.fragment,c),u(Wy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(Zy.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(sw.$$.fragment,c),u(nw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(mw.$$.fragment,c),u(fw.$$.fragment,c),u(gw.$$.fragment,c),u(uw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(vw.$$.fragment,c),u(Tw.$$.fragment,c),u(Cw.$$.fragment,c),u(Mw.$$.fragment,c),u(Ew.$$.fragment,c),u(yw.$$.fragment,c),u(ww.$$.fragment,c),u(Aw.$$.fragment,c),u(Bw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Rw.$$.fragment,c),u(Sw.$$.fragment,c),u(Pw.$$.fragment,c),u(Iw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Nw.$$.fragment,c),u(qw.$$.fragment,c),u(Ow.$$.fragment,c),u(Xw.$$.fragment,c),u(Vw.$$.fragment,c),u(zw.$$.fragment,c),u(Ww.$$.fragment,c),u(Qw.$$.fragment,c),u(Hw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(o6.$$.fragment,c),u(t6.$$.fragment,c),u(a6.$$.fragment,c),u(s6.$$.fragment,c),u(n6.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(c6.$$.fragment,c),u(m6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(_6.$$.fragment,c),u(b6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(F6.$$.fragment,c),u(C6.$$.fragment,c),u(E6.$$.fragment,c),u(y6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(L6.$$.fragment,c),u(B6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(S6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(D6.$$.fragment,c),u(N6.$$.fragment,c),u(q6.$$.fragment,c),u(G6.$$.fragment,c),u(X6.$$.fragment,c),u(V6.$$.fragment,c),u(W6.$$.fragment,c),u(Q6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(Z6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(TA.$$.fragment,c),u(FA.$$.fragment,c),u(CA.$$.fragment,c),u(EA.$$.fragment,c),u(yA.$$.fragment,c),u(wA.$$.fragment,c),u(LA.$$.fragment,c),u(BA.$$.fragment,c),u(xA.$$.fragment,c),u(kA.$$.fragment,c),u(RA.$$.fragment,c),u(SA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(jA.$$.fragment,c),u(DA.$$.fragment,c),u(NA.$$.fragment,c),u(qA.$$.fragment,c),u(GA.$$.fragment,c),u(XA.$$.fragment,c),u(VA.$$.fragment,c),u(zA.$$.fragment,c),u(WA.$$.fragment,c),u(QA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(l0.$$.fragment,c),u(i0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(h0.$$.fragment,c),u(u0.$$.fragment,c),u(_0.$$.fragment,c),u(b0.$$.fragment,c),u(v0.$$.fragment,c),u(T0.$$.fragment,c),u(F0.$$.fragment,c),u(C0.$$.fragment,c),u(E0.$$.fragment,c),u(y0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(L0.$$.fragment,c),u(B0.$$.fragment,c),u(k0.$$.fragment,c),u(R0.$$.fragment,c),u(S0.$$.fragment,c),u(P0.$$.fragment,c),u($0.$$.fragment,c),u(I0.$$.fragment,c),u(D0.$$.fragment,c),u(N0.$$.fragment,c),u(q0.$$.fragment,c),u(O0.$$.fragment,c),u(G0.$$.fragment,c),u(X0.$$.fragment,c),u(z0.$$.fragment,c),u(W0.$$.fragment,c),u(Q0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(J0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(tL.$$.fragment,c),u(sL.$$.fragment,c),u(nL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(_L.$$.fragment,c),u(vL.$$.fragment,c),u(TL.$$.fragment,c),u(FL.$$.fragment,c),u(CL.$$.fragment,c),u(ML.$$.fragment,c),u(EL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(LL.$$.fragment,c),u(BL.$$.fragment,c),u(xL.$$.fragment,c),u(kL.$$.fragment,c),u(SL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(jL.$$.fragment,c),u(DL.$$.fragment,c),u(qL.$$.fragment,c),u(OL.$$.fragment,c),u(GL.$$.fragment,c),u(XL.$$.fragment,c),u(VL.$$.fragment,c),u(zL.$$.fragment,c),u(QL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(KL.$$.fragment,c),u(e7.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(m7.$$.fragment,c),u(f7.$$.fragment,c),u(h7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(b7.$$.fragment,c),u(v7.$$.fragment,c),u(F7.$$.fragment,c),u(C7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),u(y7.$$.fragment,c),u(w7.$$.fragment,c),u(L7.$$.fragment,c),u(B7.$$.fragment,c),u(x7.$$.fragment,c),u(k7.$$.fragment,c),u(R7.$$.fragment,c),u(S7.$$.fragment,c),u($7.$$.fragment,c),u(I7.$$.fragment,c),u(j7.$$.fragment,c),u(N7.$$.fragment,c),u(q7.$$.fragment,c),u(O7.$$.fragment,c),u(X7.$$.fragment,c),u(V7.$$.fragment,c),u(z7.$$.fragment,c),u(W7.$$.fragment,c),MRe=!1},d(c){t(J),c&&t($e),c&&t(de),p(me),c&&t($m),c&&t(ma),c&&t(Be),c&&t(co),c&&t(jm),p(qa,c),c&&t(mo),c&&t(ue),c&&t(zo),c&&t(Oa),c&&t(Cxe),c&&t(Vi),p(oy),c&&t(Mxe),c&&t(Vs),c&&t(Exe),p(ry,c),c&&t(yxe),c&&t(U8),c&&t(wxe),p(qm,c),c&&t(Axe),c&&t(zi),p(ty),c&&t(Lxe),c&&t(Wo),p(ay),p(ly),p(iy),p(dy),c&&t(Bxe),c&&t(Qi),p(cy),c&&t(xxe),c&&t(Qo),p(my),p(hy),p(uy),p(py),c&&t(kxe),c&&t(Hi),p(_y),c&&t(Rxe),c&&t(Ho),p(by),p(Fy),p(wh),p(Cy),p(My),c&&t(Sxe),c&&t(Ui),p(Ey),c&&t(Pxe),c&&t(Uo),p(yy),p(Ly),p(jh),p(By),p(xy),c&&t($xe),c&&t(Yi),p(ky),c&&t(Ixe),c&&t(Jo),p(Ry),p(Py),p($y),p(Iy),p(jy),c&&t(jxe),c&&t(ed),p(Dy),c&&t(Dxe),c&&t(Yo),p(Ny),p(Oy),p(Gy),p(Xy),p(Vy),c&&t(Nxe),c&&t(td),p(zy),c&&t(qxe),c&&t(Ko),p(Wy),p(Hy),p(Uy),p(Jy),p(Yy),c&&t(Oxe),c&&t(nd),p(Ky),c&&t(Gxe),c&&t(Zo),p(Zy),p(ow),p(rw),p(tw),p(aw),c&&t(Xxe),c&&t(dd),p(sw),c&&t(Vxe),c&&t(er),p(nw),p(iw),p(dw),p(cw),p(mw),c&&t(zxe),c&&t(fd),p(fw),c&&t(Wxe),c&&t(or),p(gw),p(uw),p(pw),p(_w),p(bw),c&&t(Qxe),c&&t(ud),p(vw),c&&t(Hxe),c&&t(rr),p(Tw),p(Cw),p(Mw),p(Ew),p(yw),c&&t(Uxe),c&&t(bd),p(ww),c&&t(Jxe),c&&t(tr),p(Aw),p(Bw),p(xw),p(kw),p(Rw),c&&t(Yxe),c&&t(Fd),p(Sw),c&&t(Kxe),c&&t(ar),p(Pw),p(Iw),p(jw),p(Dw),p(Nw),c&&t(Zxe),c&&t(Ed),p(qw),c&&t(eke),c&&t(sr),p(Ow),p(Xw),p(Vw),p(zw),p(Ww),c&&t(oke),c&&t(Ad),p(Qw),c&&t(rke),c&&t(nr),p(Hw),p(Jw),p(Yw),p(Kw),p(Zw),c&&t(tke),c&&t(xd),p(e6),c&&t(ake),c&&t(lr),p(o6),p(t6),p(a6),p(s6),p(n6),c&&t(ske),c&&t(Sd),p(l6),c&&t(nke),c&&t(ir),p(i6),p(c6),p(m6),p(f6),p(g6),c&&t(lke),c&&t(Id),p(h6),c&&t(ike),c&&t(dr),p(u6),p(_6),p(b6),p(v6),p(T6),c&&t(dke),c&&t(Nd),p(F6),c&&t(cke),c&&t(cr),p(C6),p(E6),p(y6),p(w6),p(A6),c&&t(mke),c&&t(Gd),p(L6),c&&t(fke),c&&t(mr),p(B6),p(k6),p(R6),p(S6),p(P6),c&&t(gke),c&&t(zd),p($6),c&&t(hke),c&&t(fr),p(I6),p(D6),p(N6),p(q6),p(G6),c&&t(uke),c&&t(Hd),p(X6),c&&t(pke),c&&t(gr),p(V6),p(W6),p(Q6),p(H6),p(U6),c&&t(_ke),c&&t(Yd),p(J6),c&&t(bke),c&&t(hr),p(Y6),p(Z6),p(eA),p(oA),p(rA),c&&t(vke),c&&t(oc),p(tA),c&&t(Tke),c&&t(ur),p(aA),p(nA),p(lA),p(iA),p(dA),c&&t(Fke),c&&t(ac),p(cA),c&&t(Cke),c&&t(pr),p(mA),p(gA),p(hA),p(uA),p(pA),c&&t(Mke),c&&t(lc),p(_A),c&&t(Eke),c&&t(_r),p(bA),p(TA),p(FA),p(CA),p(EA),c&&t(yke),c&&t(cc),p(yA),c&&t(wke),c&&t(br),p(wA),p(LA),p(BA),p(xA),p(kA),c&&t(Ake),c&&t(gc),p(RA),c&&t(Lke),c&&t(vr),p(SA),p($A),p(IA),p(jA),p(DA),c&&t(Bke),c&&t(pc),p(NA),c&&t(xke),c&&t(Tr),p(qA),p(GA),p(XA),p(VA),p(zA),c&&t(kke),c&&t(vc),p(WA),c&&t(Rke),c&&t(Fr),p(QA),p(UA),p(JA),p(YA),p(KA),c&&t(Ske),c&&t(Cc),p(ZA),c&&t(Pke),c&&t(Cr),p(e0),p(r0),p(t0),p(a0),p(n0),c&&t($ke),c&&t(yc),p(l0),c&&t(Ike),c&&t(Mr),p(i0),p(c0),p(m0),p(f0),p(g0),c&&t(jke),c&&t(Lc),p(h0),c&&t(Dke),c&&t(Er),p(u0),p(_0),p(b0),p(v0),p(T0),c&&t(Nke),c&&t(kc),p(F0),c&&t(qke),c&&t(yr),p(C0),p(E0),p(y0),p(w0),p(A0),c&&t(Oke),c&&t(Pc),p(L0),c&&t(Gke),c&&t(wr),p(B0),p(k0),p(R0),p(S0),p(P0),c&&t(Xke),c&&t(jc),p($0),c&&t(Vke),c&&t(Ar),p(I0),p(D0),p(N0),p(q0),p(O0),c&&t(zke),c&&t(qc),p(G0),c&&t(Wke),c&&t(Lr),p(X0),p(z0),p(W0),p(Q0),p(H0),c&&t(Qke),c&&t(Xc),p(U0),c&&t(Hke),c&&t(Br),p(J0),p(K0),p(Z0),p(eL),p(oL),c&&t(Uke),c&&t(Wc),p(rL),c&&t(Jke),c&&t(xr),p(tL),p(sL),p(nL),p(lL),p(iL),c&&t(Yke),c&&t(Uc),p(dL),c&&t(Kke),c&&t(kr),p(cL),p(fL),p(gL),p(hL),p(uL),c&&t(Zke),c&&t(Kc),p(pL),c&&t(eRe),c&&t(Rr),p(_L),p(vL),p(TL),p(FL),p(CL),c&&t(oRe),c&&t(om),p(ML),c&&t(rRe),c&&t(Sr),p(EL),p(wL),p(AL),p(LL),p(BL),c&&t(tRe),c&&t(am),p(xL),c&&t(aRe),c&&t(Pr),p(kL),p(SL),p(PL),p($L),p(IL),c&&t(sRe),c&&t(lm),p(jL),c&&t(nRe),c&&t($r),p(DL),p(qL),p(OL),p(GL),p(XL),c&&t(lRe),c&&t(cm),p(VL),c&&t(iRe),c&&t(Ir),p(zL),p(QL),p(HL),p(UL),p(JL),c&&t(dRe),c&&t(gm),p(YL),c&&t(cRe),c&&t(jr),p(KL),p(e7),p(o7),p(r7),p(t7),c&&t(mRe),c&&t(pm),p(a7),c&&t(fRe),c&&t(Dr),p(s7),p(l7),p(i7),p(d7),p(c7),c&&t(gRe),c&&t(vm),p(m7),c&&t(hRe),c&&t(Nr),p(f7),p(h7),p(u7),p(p7),p(_7),c&&t(uRe),c&&t(Cm),p(b7),c&&t(pRe),c&&t(qr),p(v7),p(F7),p(C7),p(M7),p(E7),c&&t(_Re),c&&t(ym),p(y7),c&&t(bRe),c&&t(Or),p(w7),p(L7),p(B7),p(x7),p(k7),c&&t(vRe),c&&t(Lm),p(R7),c&&t(TRe),c&&t(Gr),p(S7),p($7),p(I7),p(j7),p(N7),c&&t(FRe),c&&t(km),p(q7),c&&t(CRe),c&&t(Xr),p(O7),p(X7),p(V7),p(z7),p(W7)}}}const SMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function PMt(Ii,J,$e){let{fw:de}=J;return Ii.$$set=he=>{"fw"in he&&$e(0,de=he.fw)},[de]}class OMt extends yMt{constructor(J){super();wMt(this,J,PMt,RMt,AMt,{fw:0})}}export{OMt as default,SMt as metadata};
