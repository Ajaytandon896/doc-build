import{S as cvt,i as mvt,s as fvt,e as a,k as l,w as m,t as o,M as gvt,c as s,d as t,m as i,a as n,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as wLr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function hvt(Ai){let J,Be,ie,fe,so,ce,_e,Go,Li,Mm,na,Bi,xi,C5,Em,ye,io,ki,$s,M5,Is,Ds,E5,Ri,js,y5,Si,ym,$a;return{c(){J=a("p"),Be=o("If your "),ie=a("code"),fe=o("NewModelConfig"),so=o(" is a subclass of "),ce=a("code"),_e=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Mm=o("model_type"),na=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),C5=o(")."),Em=l(),ye=a("p"),io=o("Likewise, if your "),ki=a("code"),$s=o("NewModel"),M5=o(" is a subclass of "),Is=a("a"),Ds=o("PreTrainedModel"),E5=o(`, make sure its
`),Ri=a("code"),js=o("config_class"),y5=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),ym=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=s(co,"P",{});var ge=n(J);Be=r(ge,"If your "),ie=s(ge,"CODE",{});var l7=n(ie);fe=r(l7,"NewModelConfig"),l7.forEach(t),so=r(ge," is a subclass of "),ce=s(ge,"CODE",{});var Pi=n(ce);_e=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=s(ge,"CODE",{});var i7=n(Li);Mm=r(i7,"model_type"),i7.forEach(t),na=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=s(ge,"CODE",{});var d7=n(Bi);xi=r(d7,'"new-model"'),d7.forEach(t),C5=r(ge,")."),ge.forEach(t),Em=i(co),ye=s(co,"P",{});var Oo=n(ye);io=r(Oo,"Likewise, if your "),ki=s(Oo,"CODE",{});var Ia=n(ki);$s=r(Ia,"NewModel"),Ia.forEach(t),M5=r(Oo," is a subclass of "),Is=s(Oo,"A",{href:!0});var c7=n(Is);Ds=r(c7,"PreTrainedModel"),c7.forEach(t),E5=r(Oo,`, make sure its
`),Ri=s(Oo,"CODE",{});var wm=n(Ri);js=r(wm,"config_class"),wm.forEach(t),y5=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=s(Oo,"CODE",{});var m7=n(Si);ym=r(m7,"NewModelConfig"),m7.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Is,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Be),e(J,ie),e(ie,fe),e(J,so),e(J,ce),e(ce,_e),e(J,Go),e(J,Li),e(Li,Mm),e(J,na),e(J,Bi),e(Bi,xi),e(J,C5),b(co,Em,ge),b(co,ye,ge),e(ye,io),e(ye,ki),e(ki,$s),e(ye,M5),e(ye,Is),e(Is,Ds),e(ye,E5),e(ye,Ri),e(Ri,js),e(ye,y5),e(ye,Si),e(Si,ym),e(ye,$a)},d(co){co&&t(J),co&&t(Em),co&&t(ye)}}}function uvt(Ai){let J,Be,ie,fe,so;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),fe=o("use_auth_token=True"),so=o(" is required when you want to use a private model.")},l(ce){J=s(ce,"P",{});var _e=n(J);Be=r(_e,"Passing "),ie=s(_e,"CODE",{});var Go=n(ie);fe=r(Go,"use_auth_token=True"),Go.forEach(t),so=r(_e," is required when you want to use a private model."),_e.forEach(t)},m(ce,_e){b(ce,J,_e),e(J,Be),e(J,ie),e(ie,fe),e(J,so)},d(ce){ce&&t(J)}}}function pvt(Ai){let J,Be,ie,fe,so;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),fe=o("use_auth_token=True"),so=o(" is required when you want to use a private model.")},l(ce){J=s(ce,"P",{});var _e=n(J);Be=r(_e,"Passing "),ie=s(_e,"CODE",{});var Go=n(ie);fe=r(Go,"use_auth_token=True"),Go.forEach(t),so=r(_e," is required when you want to use a private model."),_e.forEach(t)},m(ce,_e){b(ce,J,_e),e(J,Be),e(J,ie),e(ie,fe),e(J,so)},d(ce){ce&&t(J)}}}function _vt(Ai){let J,Be,ie,fe,so,ce,_e,Go,Li,Mm,na,Bi,xi,C5,Em,ye,io,ki,$s,M5,Is,Ds,E5,Ri,js,y5,Si,ym,$a,co,ge,l7,Pi,i7,d7,Oo,Ia,c7,wm,m7,$Re,y9e,$i,Am,TW,w5,IRe,FW,DRe,w9e,Ns,jRe,CW,NRe,qRe,MW,GRe,ORe,A9e,A5,L9e,f7,XRe,B9e,Lm,x9e,Ii,Bm,EW,L5,VRe,yW,zRe,k9e,Xo,B5,WRe,x5,QRe,g7,HRe,URe,JRe,k5,YRe,wW,KRe,ZRe,eSe,mo,R5,oSe,AW,rSe,tSe,Di,aSe,LW,sSe,nSe,BW,lSe,iSe,dSe,v,xm,xW,cSe,mSe,h7,fSe,gSe,hSe,km,kW,uSe,pSe,u7,_Se,bSe,vSe,Rm,RW,TSe,FSe,p7,CSe,MSe,ESe,Sm,SW,ySe,wSe,_7,ASe,LSe,BSe,Pm,PW,xSe,kSe,b7,RSe,SSe,PSe,$m,$W,$Se,ISe,v7,DSe,jSe,NSe,Im,IW,qSe,GSe,T7,OSe,XSe,VSe,Dm,DW,zSe,WSe,F7,QSe,HSe,USe,jm,jW,JSe,YSe,C7,KSe,ZSe,ePe,Nm,NW,oPe,rPe,M7,tPe,aPe,sPe,qm,qW,nPe,lPe,E7,iPe,dPe,cPe,Gm,GW,mPe,fPe,y7,gPe,hPe,uPe,Om,OW,pPe,_Pe,w7,bPe,vPe,TPe,Xm,XW,FPe,CPe,A7,MPe,EPe,yPe,Vm,VW,wPe,APe,L7,LPe,BPe,xPe,zm,zW,kPe,RPe,B7,SPe,PPe,$Pe,Wm,WW,IPe,DPe,x7,jPe,NPe,qPe,Qm,QW,GPe,OPe,k7,XPe,VPe,zPe,Hm,HW,WPe,QPe,R7,HPe,UPe,JPe,Um,UW,YPe,KPe,S7,ZPe,e$e,o$e,Jm,JW,r$e,t$e,P7,a$e,s$e,n$e,Ym,YW,l$e,i$e,$7,d$e,c$e,m$e,Km,KW,f$e,g$e,I7,h$e,u$e,p$e,Zm,ZW,_$e,b$e,D7,v$e,T$e,F$e,ef,eQ,C$e,M$e,j7,E$e,y$e,w$e,of,oQ,A$e,L$e,N7,B$e,x$e,k$e,rf,rQ,R$e,S$e,q7,P$e,$$e,I$e,tf,tQ,D$e,j$e,G7,N$e,q$e,G$e,af,aQ,O$e,X$e,O7,V$e,z$e,W$e,sf,sQ,Q$e,H$e,X7,U$e,J$e,Y$e,nf,nQ,K$e,Z$e,V7,eIe,oIe,rIe,lf,lQ,tIe,aIe,z7,sIe,nIe,lIe,df,iQ,iIe,dIe,W7,cIe,mIe,fIe,cf,dQ,gIe,hIe,Q7,uIe,pIe,_Ie,mf,cQ,bIe,vIe,H7,TIe,FIe,CIe,ff,mQ,MIe,EIe,U7,yIe,wIe,AIe,gf,fQ,LIe,BIe,J7,xIe,kIe,RIe,hf,gQ,SIe,PIe,Y7,$Ie,IIe,DIe,uf,hQ,jIe,NIe,K7,qIe,GIe,OIe,pf,uQ,XIe,VIe,Z7,zIe,WIe,QIe,_f,pQ,HIe,UIe,e9,JIe,YIe,KIe,bf,_Q,ZIe,eDe,o9,oDe,rDe,tDe,vf,bQ,aDe,sDe,r9,nDe,lDe,iDe,Tf,vQ,dDe,cDe,t9,mDe,fDe,gDe,Ff,TQ,hDe,uDe,a9,pDe,_De,bDe,Cf,FQ,vDe,TDe,s9,FDe,CDe,MDe,Mf,CQ,EDe,yDe,n9,wDe,ADe,LDe,Ef,MQ,BDe,xDe,l9,kDe,RDe,SDe,yf,EQ,PDe,$De,i9,IDe,DDe,jDe,wf,yQ,NDe,qDe,d9,GDe,ODe,XDe,Af,wQ,VDe,zDe,c9,WDe,QDe,HDe,Lf,AQ,UDe,JDe,m9,YDe,KDe,ZDe,Bf,LQ,eje,oje,f9,rje,tje,aje,xf,BQ,sje,nje,g9,lje,ije,dje,kf,xQ,cje,mje,h9,fje,gje,hje,Rf,kQ,uje,pje,u9,_je,bje,vje,Sf,RQ,Tje,Fje,p9,Cje,Mje,Eje,Pf,SQ,yje,wje,_9,Aje,Lje,Bje,$f,PQ,xje,kje,b9,Rje,Sje,Pje,If,$Q,$je,Ije,v9,Dje,jje,Nje,Df,IQ,qje,Gje,T9,Oje,Xje,Vje,jf,DQ,zje,Wje,F9,Qje,Hje,Uje,Nf,jQ,Jje,Yje,C9,Kje,Zje,eNe,qf,NQ,oNe,rNe,M9,tNe,aNe,sNe,Gf,qQ,nNe,lNe,E9,iNe,dNe,cNe,Of,GQ,mNe,fNe,y9,gNe,hNe,uNe,Xf,OQ,pNe,_Ne,w9,bNe,vNe,TNe,Vf,XQ,FNe,CNe,A9,MNe,ENe,yNe,zf,VQ,wNe,ANe,L9,LNe,BNe,xNe,Wf,zQ,kNe,RNe,B9,SNe,PNe,$Ne,Qf,WQ,INe,DNe,x9,jNe,NNe,qNe,Hf,QQ,GNe,ONe,k9,XNe,VNe,zNe,Uf,HQ,WNe,QNe,R9,HNe,UNe,JNe,Jf,UQ,YNe,KNe,S9,ZNe,eqe,oqe,Yf,JQ,rqe,tqe,P9,aqe,sqe,nqe,Kf,YQ,lqe,iqe,$9,dqe,cqe,mqe,Zf,KQ,fqe,gqe,I9,hqe,uqe,pqe,eg,ZQ,_qe,bqe,D9,vqe,Tqe,Fqe,og,eH,Cqe,Mqe,j9,Eqe,yqe,wqe,rg,oH,Aqe,Lqe,N9,Bqe,xqe,kqe,tg,rH,Rqe,Sqe,q9,Pqe,$qe,Iqe,ag,tH,Dqe,jqe,G9,Nqe,qqe,Gqe,sg,aH,Oqe,Xqe,O9,Vqe,zqe,Wqe,ng,sH,Qqe,Hqe,X9,Uqe,Jqe,Yqe,lg,nH,Kqe,Zqe,V9,eGe,oGe,rGe,ig,lH,tGe,aGe,z9,sGe,nGe,lGe,dg,iH,iGe,dGe,W9,cGe,mGe,fGe,cg,dH,gGe,hGe,Q9,uGe,pGe,_Ge,mg,cH,bGe,vGe,H9,TGe,FGe,CGe,fg,mH,MGe,EGe,U9,yGe,wGe,AGe,gg,fH,LGe,BGe,J9,xGe,kGe,RGe,hg,gH,SGe,PGe,Y9,$Ge,IGe,DGe,ug,hH,jGe,NGe,K9,qGe,GGe,OGe,pg,uH,XGe,VGe,Z9,zGe,WGe,QGe,pH,HGe,UGe,S5,JGe,_g,P5,YGe,_H,KGe,R9e,ji,bg,bH,$5,ZGe,vH,eOe,S9e,Vo,I5,oOe,D5,rOe,eB,tOe,aOe,sOe,j5,nOe,TH,lOe,iOe,dOe,fo,N5,cOe,FH,mOe,fOe,Da,gOe,CH,hOe,uOe,MH,pOe,_Oe,EH,bOe,vOe,TOe,M,qs,yH,FOe,COe,oB,MOe,EOe,rB,yOe,wOe,AOe,Gs,wH,LOe,BOe,tB,xOe,kOe,aB,ROe,SOe,POe,Os,AH,$Oe,IOe,sB,DOe,jOe,nB,NOe,qOe,GOe,vg,LH,OOe,XOe,lB,VOe,zOe,WOe,Xs,BH,QOe,HOe,iB,UOe,JOe,dB,YOe,KOe,ZOe,Tg,xH,eXe,oXe,cB,rXe,tXe,aXe,Fg,kH,sXe,nXe,mB,lXe,iXe,dXe,Cg,RH,cXe,mXe,fB,fXe,gXe,hXe,Vs,SH,uXe,pXe,gB,_Xe,bXe,hB,vXe,TXe,FXe,zs,PH,CXe,MXe,uB,EXe,yXe,pB,wXe,AXe,LXe,Ws,$H,BXe,xXe,_B,kXe,RXe,bB,SXe,PXe,$Xe,Mg,IH,IXe,DXe,vB,jXe,NXe,qXe,Eg,DH,GXe,OXe,TB,XXe,VXe,zXe,Qs,jH,WXe,QXe,FB,HXe,UXe,CB,JXe,YXe,KXe,yg,NH,ZXe,eVe,MB,oVe,rVe,tVe,Hs,qH,aVe,sVe,EB,nVe,lVe,yB,iVe,dVe,cVe,Us,GH,mVe,fVe,wB,gVe,hVe,AB,uVe,pVe,_Ve,Js,OH,bVe,vVe,LB,TVe,FVe,XH,CVe,MVe,EVe,wg,VH,yVe,wVe,BB,AVe,LVe,BVe,Ys,zH,xVe,kVe,xB,RVe,SVe,kB,PVe,$Ve,IVe,Ag,WH,DVe,jVe,RB,NVe,qVe,GVe,Ks,QH,OVe,XVe,SB,VVe,zVe,PB,WVe,QVe,HVe,Zs,HH,UVe,JVe,$B,YVe,KVe,IB,ZVe,eze,oze,en,UH,rze,tze,DB,aze,sze,jB,nze,lze,ize,Lg,JH,dze,cze,NB,mze,fze,gze,on,YH,hze,uze,qB,pze,_ze,GB,bze,vze,Tze,Bg,KH,Fze,Cze,OB,Mze,Eze,yze,rn,ZH,wze,Aze,XB,Lze,Bze,VB,xze,kze,Rze,tn,eU,Sze,Pze,zB,$ze,Ize,WB,Dze,jze,Nze,an,oU,qze,Gze,QB,Oze,Xze,HB,Vze,zze,Wze,sn,rU,Qze,Hze,UB,Uze,Jze,JB,Yze,Kze,Zze,xg,tU,eWe,oWe,YB,rWe,tWe,aWe,nn,aU,sWe,nWe,KB,lWe,iWe,ZB,dWe,cWe,mWe,ln,sU,fWe,gWe,ex,hWe,uWe,ox,pWe,_We,bWe,dn,nU,vWe,TWe,rx,FWe,CWe,tx,MWe,EWe,yWe,cn,lU,wWe,AWe,ax,LWe,BWe,sx,xWe,kWe,RWe,mn,iU,SWe,PWe,nx,$We,IWe,lx,DWe,jWe,NWe,fn,dU,qWe,GWe,ix,OWe,XWe,dx,VWe,zWe,WWe,kg,cU,QWe,HWe,cx,UWe,JWe,YWe,gn,mU,KWe,ZWe,mx,eQe,oQe,fx,rQe,tQe,aQe,Rg,fU,sQe,nQe,gx,lQe,iQe,dQe,Sg,gU,cQe,mQe,hx,fQe,gQe,hQe,hn,hU,uQe,pQe,ux,_Qe,bQe,px,vQe,TQe,FQe,un,uU,CQe,MQe,_x,EQe,yQe,bx,wQe,AQe,LQe,Pg,pU,BQe,xQe,vx,kQe,RQe,SQe,pn,_U,PQe,$Qe,Tx,IQe,DQe,Fx,jQe,NQe,qQe,_n,bU,GQe,OQe,Cx,XQe,VQe,Mx,zQe,WQe,QQe,bn,vU,HQe,UQe,Ex,JQe,YQe,yx,KQe,ZQe,eHe,vn,TU,oHe,rHe,wx,tHe,aHe,Ax,sHe,nHe,lHe,Tn,FU,iHe,dHe,Lx,cHe,mHe,Bx,fHe,gHe,hHe,$g,CU,uHe,pHe,xx,_He,bHe,vHe,Ig,MU,THe,FHe,kx,CHe,MHe,EHe,Dg,EU,yHe,wHe,Rx,AHe,LHe,BHe,jg,yU,xHe,kHe,Sx,RHe,SHe,PHe,Fn,wU,$He,IHe,Px,DHe,jHe,$x,NHe,qHe,GHe,Ng,AU,OHe,XHe,Ix,VHe,zHe,WHe,Cn,LU,QHe,HHe,Dx,UHe,JHe,jx,YHe,KHe,ZHe,Mn,BU,eUe,oUe,Nx,rUe,tUe,qx,aUe,sUe,nUe,En,xU,lUe,iUe,Gx,dUe,cUe,Ox,mUe,fUe,gUe,yn,kU,hUe,uUe,Xx,pUe,_Ue,Vx,bUe,vUe,TUe,wn,RU,FUe,CUe,zx,MUe,EUe,Wx,yUe,wUe,AUe,qg,SU,LUe,BUe,Qx,xUe,kUe,RUe,Gg,PU,SUe,PUe,Hx,$Ue,IUe,DUe,An,$U,jUe,NUe,Ux,qUe,GUe,Jx,OUe,XUe,VUe,Ln,IU,zUe,WUe,Yx,QUe,HUe,Kx,UUe,JUe,YUe,Bn,DU,KUe,ZUe,Zx,eJe,oJe,ek,rJe,tJe,aJe,Og,jU,sJe,nJe,ok,lJe,iJe,dJe,Xg,NU,cJe,mJe,rk,fJe,gJe,hJe,Vg,qU,uJe,pJe,tk,_Je,bJe,vJe,zg,GU,TJe,FJe,ak,CJe,MJe,EJe,xn,OU,yJe,wJe,sk,AJe,LJe,nk,BJe,xJe,kJe,Wg,XU,RJe,SJe,lk,PJe,$Je,IJe,Qg,VU,DJe,jJe,ik,NJe,qJe,GJe,kn,zU,OJe,XJe,dk,VJe,zJe,ck,WJe,QJe,HJe,Rn,WU,UJe,JJe,mk,YJe,KJe,fk,ZJe,eYe,oYe,QU,rYe,tYe,q5,aYe,Hg,G5,sYe,HU,nYe,P9e,Ni,Ug,UU,O5,lYe,JU,iYe,$9e,zo,X5,dYe,V5,cYe,gk,mYe,fYe,gYe,z5,hYe,YU,uYe,pYe,_Ye,xe,W5,bYe,KU,vYe,TYe,ja,FYe,ZU,CYe,MYe,eJ,EYe,yYe,oJ,wYe,AYe,LYe,ne,Jg,rJ,BYe,xYe,hk,kYe,RYe,SYe,Yg,tJ,PYe,$Ye,uk,IYe,DYe,jYe,Kg,aJ,NYe,qYe,pk,GYe,OYe,XYe,Zg,sJ,VYe,zYe,_k,WYe,QYe,HYe,eh,nJ,UYe,JYe,bk,YYe,KYe,ZYe,oh,lJ,eKe,oKe,vk,rKe,tKe,aKe,rh,iJ,sKe,nKe,Tk,lKe,iKe,dKe,th,dJ,cKe,mKe,Fk,fKe,gKe,hKe,ah,cJ,uKe,pKe,Ck,_Ke,bKe,vKe,sh,mJ,TKe,FKe,Mk,CKe,MKe,EKe,nh,fJ,yKe,wKe,Ek,AKe,LKe,BKe,lh,gJ,xKe,kKe,yk,RKe,SKe,PKe,ih,hJ,$Ke,IKe,wk,DKe,jKe,NKe,dh,uJ,qKe,GKe,Ak,OKe,XKe,VKe,ch,pJ,zKe,WKe,Lk,QKe,HKe,UKe,mh,JKe,_J,YKe,KKe,Q5,ZKe,fh,H5,eZe,bJ,oZe,I9e,qi,gh,vJ,U5,rZe,TJ,tZe,D9e,Wo,J5,aZe,Y5,sZe,Bk,nZe,lZe,iZe,K5,dZe,FJ,cZe,mZe,fZe,ke,Z5,gZe,CJ,hZe,uZe,Gi,pZe,MJ,_Ze,bZe,EJ,vZe,TZe,FZe,we,hh,yJ,CZe,MZe,xk,EZe,yZe,wZe,uh,wJ,AZe,LZe,kk,BZe,xZe,kZe,ph,AJ,RZe,SZe,Rk,PZe,$Ze,IZe,_h,LJ,DZe,jZe,Sk,NZe,qZe,GZe,bh,BJ,OZe,XZe,Pk,VZe,zZe,WZe,vh,xJ,QZe,HZe,$k,UZe,JZe,YZe,Th,kJ,KZe,ZZe,Ik,eeo,oeo,reo,Fh,RJ,teo,aeo,Dk,seo,neo,leo,Ch,ieo,SJ,deo,ceo,ey,meo,Mh,oy,feo,PJ,geo,j9e,Oi,Eh,$J,ry,heo,IJ,ueo,N9e,Qo,ty,peo,Xi,_eo,DJ,beo,veo,jJ,Teo,Feo,Ceo,ay,Meo,NJ,Eeo,yeo,weo,qr,sy,Aeo,qJ,Leo,Beo,Vi,xeo,GJ,keo,Reo,OJ,Seo,Peo,$eo,XJ,Ieo,Deo,ny,jeo,Re,ly,Neo,VJ,qeo,Geo,Na,Oeo,zJ,Xeo,Veo,WJ,zeo,Weo,QJ,Qeo,Heo,Ueo,F,yh,HJ,Jeo,Yeo,jk,Keo,Zeo,eoo,wh,UJ,ooo,roo,Nk,too,aoo,soo,Ah,JJ,noo,loo,qk,ioo,doo,coo,Lh,YJ,moo,foo,Gk,goo,hoo,uoo,Bh,KJ,poo,_oo,Ok,boo,voo,Too,xh,ZJ,Foo,Coo,Xk,Moo,Eoo,yoo,kh,eY,woo,Aoo,Vk,Loo,Boo,xoo,Rh,oY,koo,Roo,zk,Soo,Poo,$oo,Sh,rY,Ioo,Doo,Wk,joo,Noo,qoo,Ph,tY,Goo,Ooo,Qk,Xoo,Voo,zoo,$h,aY,Woo,Qoo,Hk,Hoo,Uoo,Joo,Ih,sY,Yoo,Koo,Uk,Zoo,ero,oro,Dh,nY,rro,tro,Jk,aro,sro,nro,jh,lY,lro,iro,Yk,dro,cro,mro,Nh,iY,fro,gro,Kk,hro,uro,pro,qh,dY,_ro,bro,Zk,vro,Tro,Fro,Gh,cY,Cro,Mro,eR,Ero,yro,wro,Oh,mY,Aro,Lro,oR,Bro,xro,kro,Xh,fY,Rro,Sro,rR,Pro,$ro,Iro,Vh,gY,Dro,jro,tR,Nro,qro,Gro,zh,hY,Oro,Xro,aR,Vro,zro,Wro,Wh,uY,Qro,Hro,sR,Uro,Jro,Yro,Qh,pY,Kro,Zro,nR,eto,oto,rto,Hh,_Y,tto,ato,lR,sto,nto,lto,Uh,bY,ito,dto,iR,cto,mto,fto,Jh,vY,gto,hto,dR,uto,pto,_to,Yh,TY,bto,vto,cR,Tto,Fto,Cto,Sn,FY,Mto,Eto,mR,yto,wto,fR,Ato,Lto,Bto,Kh,CY,xto,kto,gR,Rto,Sto,Pto,Zh,MY,$to,Ito,hR,Dto,jto,Nto,eu,EY,qto,Gto,uR,Oto,Xto,Vto,ou,yY,zto,Wto,pR,Qto,Hto,Uto,ru,wY,Jto,Yto,_R,Kto,Zto,eao,tu,AY,oao,rao,bR,tao,aao,sao,au,LY,nao,lao,vR,iao,dao,cao,su,BY,mao,fao,TR,gao,hao,uao,nu,xY,pao,_ao,FR,bao,vao,Tao,lu,kY,Fao,Cao,CR,Mao,Eao,yao,iu,RY,wao,Aao,MR,Lao,Bao,xao,du,SY,kao,Rao,ER,Sao,Pao,$ao,cu,PY,Iao,Dao,yR,jao,Nao,qao,mu,$Y,Gao,Oao,wR,Xao,Vao,zao,fu,IY,Wao,Qao,AR,Hao,Uao,Jao,gu,DY,Yao,Kao,LR,Zao,eso,oso,hu,jY,rso,tso,BR,aso,sso,nso,uu,NY,lso,iso,xR,dso,cso,mso,pu,qY,fso,gso,kR,hso,uso,pso,_u,GY,_so,bso,RR,vso,Tso,Fso,bu,OY,Cso,Mso,SR,Eso,yso,wso,vu,XY,Aso,Lso,PR,Bso,xso,kso,Tu,VY,Rso,Sso,$R,Pso,$so,Iso,Fu,zY,Dso,jso,IR,Nso,qso,Gso,Cu,WY,Oso,Xso,DR,Vso,zso,Wso,Mu,QY,Qso,Hso,jR,Uso,Jso,Yso,Eu,HY,Kso,Zso,NR,eno,ono,rno,yu,UY,tno,ano,qR,sno,nno,lno,wu,JY,ino,dno,GR,cno,mno,fno,Au,YY,gno,hno,OR,uno,pno,_no,Lu,KY,bno,vno,XR,Tno,Fno,Cno,Bu,ZY,Mno,Eno,VR,yno,wno,Ano,xu,eK,Lno,Bno,zR,xno,kno,Rno,ku,oK,Sno,Pno,WR,$no,Ino,Dno,Ru,rK,jno,Nno,QR,qno,Gno,Ono,Su,tK,Xno,Vno,HR,zno,Wno,Qno,Pu,aK,Hno,Uno,UR,Jno,Yno,Kno,$u,sK,Zno,elo,JR,olo,rlo,tlo,Iu,nK,alo,slo,YR,nlo,llo,ilo,Du,lK,dlo,clo,KR,mlo,flo,glo,ju,iK,hlo,ulo,ZR,plo,_lo,blo,Nu,dK,vlo,Tlo,eS,Flo,Clo,Mlo,qu,cK,Elo,ylo,oS,wlo,Alo,Llo,Gu,mK,Blo,xlo,rS,klo,Rlo,Slo,Ou,fK,Plo,$lo,tS,Ilo,Dlo,jlo,Xu,gK,Nlo,qlo,aS,Glo,Olo,Xlo,Vu,hK,Vlo,zlo,sS,Wlo,Qlo,Hlo,zu,uK,Ulo,Jlo,nS,Ylo,Klo,Zlo,Wu,pK,eio,oio,lS,rio,tio,aio,Qu,_K,sio,nio,iS,lio,iio,dio,Hu,bK,cio,mio,dS,fio,gio,hio,Uu,vK,uio,pio,cS,_io,bio,vio,Ju,TK,Tio,Fio,mS,Cio,Mio,Eio,Yu,FK,yio,wio,fS,Aio,Lio,Bio,Ku,CK,xio,kio,gS,Rio,Sio,Pio,Zu,MK,$io,Iio,hS,Dio,jio,Nio,ep,EK,qio,Gio,uS,Oio,Xio,Vio,op,yK,zio,Wio,pS,Qio,Hio,Uio,rp,wK,Jio,Yio,_S,Kio,Zio,edo,tp,odo,AK,rdo,tdo,LK,ado,sdo,BK,ndo,ldo,iy,q9e,zi,ap,xK,dy,ido,kK,ddo,G9e,Ho,cy,cdo,Wi,mdo,RK,fdo,gdo,SK,hdo,udo,pdo,my,_do,PK,bdo,vdo,Tdo,Gr,fy,Fdo,$K,Cdo,Mdo,Qi,Edo,IK,ydo,wdo,DK,Ado,Ldo,Bdo,jK,xdo,kdo,gy,Rdo,Se,hy,Sdo,NK,Pdo,$do,qa,Ido,qK,Ddo,jdo,GK,Ndo,qdo,OK,Gdo,Odo,Xdo,k,sp,XK,Vdo,zdo,bS,Wdo,Qdo,Hdo,np,VK,Udo,Jdo,vS,Ydo,Kdo,Zdo,lp,zK,eco,oco,TS,rco,tco,aco,ip,WK,sco,nco,FS,lco,ico,dco,dp,QK,cco,mco,CS,fco,gco,hco,cp,HK,uco,pco,MS,_co,bco,vco,mp,UK,Tco,Fco,ES,Cco,Mco,Eco,fp,JK,yco,wco,yS,Aco,Lco,Bco,gp,YK,xco,kco,wS,Rco,Sco,Pco,hp,KK,$co,Ico,AS,Dco,jco,Nco,up,ZK,qco,Gco,LS,Oco,Xco,Vco,pp,eZ,zco,Wco,BS,Qco,Hco,Uco,_p,oZ,Jco,Yco,xS,Kco,Zco,emo,bp,rZ,omo,rmo,kS,tmo,amo,smo,vp,tZ,nmo,lmo,RS,imo,dmo,cmo,Tp,aZ,mmo,fmo,SS,gmo,hmo,umo,Fp,sZ,pmo,_mo,PS,bmo,vmo,Tmo,Cp,nZ,Fmo,Cmo,$S,Mmo,Emo,ymo,Mp,lZ,wmo,Amo,IS,Lmo,Bmo,xmo,Ep,iZ,kmo,Rmo,DS,Smo,Pmo,$mo,yp,dZ,Imo,Dmo,jS,jmo,Nmo,qmo,wp,cZ,Gmo,Omo,NS,Xmo,Vmo,zmo,Ap,mZ,Wmo,Qmo,qS,Hmo,Umo,Jmo,Lp,fZ,Ymo,Kmo,GS,Zmo,efo,ofo,Bp,gZ,rfo,tfo,OS,afo,sfo,nfo,xp,hZ,lfo,ifo,XS,dfo,cfo,mfo,kp,uZ,ffo,gfo,VS,hfo,ufo,pfo,Rp,pZ,_fo,bfo,zS,vfo,Tfo,Ffo,Sp,_Z,Cfo,Mfo,WS,Efo,yfo,wfo,Pp,bZ,Afo,Lfo,QS,Bfo,xfo,kfo,$p,vZ,Rfo,Sfo,HS,Pfo,$fo,Ifo,Ip,TZ,Dfo,jfo,US,Nfo,qfo,Gfo,Dp,FZ,Ofo,Xfo,JS,Vfo,zfo,Wfo,jp,CZ,Qfo,Hfo,YS,Ufo,Jfo,Yfo,Np,MZ,Kfo,Zfo,KS,ego,ogo,rgo,qp,EZ,tgo,ago,ZS,sgo,ngo,lgo,Gp,yZ,igo,dgo,eP,cgo,mgo,fgo,Op,wZ,ggo,hgo,oP,ugo,pgo,_go,Xp,AZ,bgo,vgo,rP,Tgo,Fgo,Cgo,Vp,Mgo,LZ,Ego,ygo,BZ,wgo,Ago,xZ,Lgo,Bgo,uy,O9e,Hi,zp,kZ,py,xgo,RZ,kgo,X9e,Uo,_y,Rgo,Ui,Sgo,SZ,Pgo,$go,PZ,Igo,Dgo,jgo,by,Ngo,$Z,qgo,Ggo,Ogo,Or,vy,Xgo,IZ,Vgo,zgo,Ji,Wgo,DZ,Qgo,Hgo,jZ,Ugo,Jgo,Ygo,NZ,Kgo,Zgo,Ty,eho,Pe,Fy,oho,qZ,rho,tho,Ga,aho,GZ,sho,nho,OZ,lho,iho,XZ,dho,cho,mho,$,Wp,VZ,fho,gho,tP,hho,uho,pho,Qp,zZ,_ho,bho,aP,vho,Tho,Fho,Hp,WZ,Cho,Mho,sP,Eho,yho,who,Up,QZ,Aho,Lho,nP,Bho,xho,kho,Jp,HZ,Rho,Sho,lP,Pho,$ho,Iho,Yp,UZ,Dho,jho,iP,Nho,qho,Gho,Kp,JZ,Oho,Xho,dP,Vho,zho,Who,Zp,YZ,Qho,Hho,cP,Uho,Jho,Yho,e_,KZ,Kho,Zho,mP,euo,ouo,ruo,o_,ZZ,tuo,auo,fP,suo,nuo,luo,r_,eee,iuo,duo,gP,cuo,muo,fuo,t_,oee,guo,huo,hP,uuo,puo,_uo,a_,ree,buo,vuo,uP,Tuo,Fuo,Cuo,s_,tee,Muo,Euo,pP,yuo,wuo,Auo,n_,aee,Luo,Buo,_P,xuo,kuo,Ruo,l_,see,Suo,Puo,bP,$uo,Iuo,Duo,i_,nee,juo,Nuo,vP,quo,Guo,Ouo,d_,lee,Xuo,Vuo,TP,zuo,Wuo,Quo,c_,iee,Huo,Uuo,FP,Juo,Yuo,Kuo,m_,dee,Zuo,epo,CP,opo,rpo,tpo,f_,cee,apo,spo,MP,npo,lpo,ipo,g_,mee,dpo,cpo,EP,mpo,fpo,gpo,h_,fee,hpo,upo,yP,ppo,_po,bpo,u_,gee,vpo,Tpo,wP,Fpo,Cpo,Mpo,p_,hee,Epo,ypo,AP,wpo,Apo,Lpo,__,uee,Bpo,xpo,LP,kpo,Rpo,Spo,b_,pee,Ppo,$po,BP,Ipo,Dpo,jpo,v_,_ee,Npo,qpo,xP,Gpo,Opo,Xpo,T_,bee,Vpo,zpo,kP,Wpo,Qpo,Hpo,F_,vee,Upo,Jpo,RP,Ypo,Kpo,Zpo,C_,Tee,e_o,o_o,SP,r_o,t_o,a_o,M_,Fee,s_o,n_o,PP,l_o,i_o,d_o,E_,Cee,c_o,m_o,$P,f_o,g_o,h_o,y_,Mee,u_o,p_o,IP,__o,b_o,v_o,w_,Eee,T_o,F_o,DP,C_o,M_o,E_o,A_,y_o,yee,w_o,A_o,wee,L_o,B_o,Aee,x_o,k_o,Cy,V9e,Yi,L_,Lee,My,R_o,Bee,S_o,z9e,Jo,Ey,P_o,Ki,$_o,xee,I_o,D_o,kee,j_o,N_o,q_o,yy,G_o,Ree,O_o,X_o,V_o,Xr,wy,z_o,See,W_o,Q_o,Zi,H_o,Pee,U_o,J_o,$ee,Y_o,K_o,Z_o,Iee,ebo,obo,Ay,rbo,$e,Ly,tbo,Dee,abo,sbo,Oa,nbo,jee,lbo,ibo,Nee,dbo,cbo,qee,mbo,fbo,gbo,I,B_,Gee,hbo,ubo,jP,pbo,_bo,bbo,x_,Oee,vbo,Tbo,NP,Fbo,Cbo,Mbo,k_,Xee,Ebo,ybo,qP,wbo,Abo,Lbo,R_,Vee,Bbo,xbo,GP,kbo,Rbo,Sbo,S_,zee,Pbo,$bo,OP,Ibo,Dbo,jbo,P_,Wee,Nbo,qbo,XP,Gbo,Obo,Xbo,$_,Qee,Vbo,zbo,VP,Wbo,Qbo,Hbo,I_,Hee,Ubo,Jbo,zP,Ybo,Kbo,Zbo,D_,Uee,e2o,o2o,WP,r2o,t2o,a2o,j_,Jee,s2o,n2o,QP,l2o,i2o,d2o,N_,Yee,c2o,m2o,HP,f2o,g2o,h2o,q_,Kee,u2o,p2o,UP,_2o,b2o,v2o,G_,Zee,T2o,F2o,JP,C2o,M2o,E2o,O_,eoe,y2o,w2o,YP,A2o,L2o,B2o,X_,ooe,x2o,k2o,KP,R2o,S2o,P2o,V_,roe,$2o,I2o,ZP,D2o,j2o,N2o,z_,toe,q2o,G2o,e$,O2o,X2o,V2o,W_,aoe,z2o,W2o,o$,Q2o,H2o,U2o,Q_,soe,J2o,Y2o,r$,K2o,Z2o,evo,H_,noe,ovo,rvo,t$,tvo,avo,svo,U_,loe,nvo,lvo,a$,ivo,dvo,cvo,J_,ioe,mvo,fvo,s$,gvo,hvo,uvo,Y_,doe,pvo,_vo,n$,bvo,vvo,Tvo,K_,coe,Fvo,Cvo,l$,Mvo,Evo,yvo,Z_,moe,wvo,Avo,i$,Lvo,Bvo,xvo,eb,foe,kvo,Rvo,d$,Svo,Pvo,$vo,ob,goe,Ivo,Dvo,c$,jvo,Nvo,qvo,rb,hoe,Gvo,Ovo,m$,Xvo,Vvo,zvo,tb,uoe,Wvo,Qvo,f$,Hvo,Uvo,Jvo,ab,poe,Yvo,Kvo,g$,Zvo,eTo,oTo,sb,_oe,rTo,tTo,boe,aTo,sTo,nTo,nb,voe,lTo,iTo,h$,dTo,cTo,mTo,lb,Toe,fTo,gTo,u$,hTo,uTo,pTo,ib,Foe,_To,bTo,p$,vTo,TTo,FTo,db,Coe,CTo,MTo,_$,ETo,yTo,wTo,cb,ATo,Moe,LTo,BTo,Eoe,xTo,kTo,yoe,RTo,STo,By,W9e,ed,mb,woe,xy,PTo,Aoe,$To,Q9e,Yo,ky,ITo,od,DTo,Loe,jTo,NTo,Boe,qTo,GTo,OTo,Ry,XTo,xoe,VTo,zTo,WTo,Vr,Sy,QTo,koe,HTo,UTo,rd,JTo,Roe,YTo,KTo,Soe,ZTo,e1o,o1o,Poe,r1o,t1o,Py,a1o,Ie,$y,s1o,$oe,n1o,l1o,Xa,i1o,Ioe,d1o,c1o,Doe,m1o,f1o,joe,g1o,h1o,u1o,ae,fb,Noe,p1o,_1o,b$,b1o,v1o,T1o,gb,qoe,F1o,C1o,v$,M1o,E1o,y1o,hb,Goe,w1o,A1o,T$,L1o,B1o,x1o,ub,Ooe,k1o,R1o,F$,S1o,P1o,$1o,pb,Xoe,I1o,D1o,C$,j1o,N1o,q1o,_b,Voe,G1o,O1o,M$,X1o,V1o,z1o,bb,zoe,W1o,Q1o,E$,H1o,U1o,J1o,vb,Woe,Y1o,K1o,y$,Z1o,eFo,oFo,Tb,Qoe,rFo,tFo,w$,aFo,sFo,nFo,Fb,Hoe,lFo,iFo,A$,dFo,cFo,mFo,Cb,Uoe,fFo,gFo,L$,hFo,uFo,pFo,Mb,Joe,_Fo,bFo,B$,vFo,TFo,FFo,Eb,Yoe,CFo,MFo,x$,EFo,yFo,wFo,yb,Koe,AFo,LFo,k$,BFo,xFo,kFo,wb,Zoe,RFo,SFo,R$,PFo,$Fo,IFo,Ab,ere,DFo,jFo,S$,NFo,qFo,GFo,Lb,OFo,ore,XFo,VFo,rre,zFo,WFo,tre,QFo,HFo,Iy,H9e,td,Bb,are,Dy,UFo,sre,JFo,U9e,Ko,jy,YFo,ad,KFo,nre,ZFo,eCo,lre,oCo,rCo,tCo,Ny,aCo,ire,sCo,nCo,lCo,zr,qy,iCo,dre,dCo,cCo,sd,mCo,cre,fCo,gCo,mre,hCo,uCo,pCo,fre,_Co,bCo,Gy,vCo,De,Oy,TCo,gre,FCo,CCo,Va,MCo,hre,ECo,yCo,ure,wCo,ACo,pre,LCo,BCo,xCo,A,xb,_re,kCo,RCo,P$,SCo,PCo,$Co,kb,bre,ICo,DCo,$$,jCo,NCo,qCo,Rb,vre,GCo,OCo,I$,XCo,VCo,zCo,Sb,Tre,WCo,QCo,D$,HCo,UCo,JCo,Pb,Fre,YCo,KCo,j$,ZCo,e4o,o4o,$b,Cre,r4o,t4o,N$,a4o,s4o,n4o,Ib,Mre,l4o,i4o,q$,d4o,c4o,m4o,Db,Ere,f4o,g4o,G$,h4o,u4o,p4o,jb,yre,_4o,b4o,O$,v4o,T4o,F4o,Nb,wre,C4o,M4o,X$,E4o,y4o,w4o,qb,Are,A4o,L4o,V$,B4o,x4o,k4o,Gb,Lre,R4o,S4o,z$,P4o,$4o,I4o,Ob,Bre,D4o,j4o,W$,N4o,q4o,G4o,Xb,xre,O4o,X4o,Q$,V4o,z4o,W4o,Vb,kre,Q4o,H4o,H$,U4o,J4o,Y4o,zb,Rre,K4o,Z4o,U$,eMo,oMo,rMo,Wb,Sre,tMo,aMo,J$,sMo,nMo,lMo,Qb,Pre,iMo,dMo,Y$,cMo,mMo,fMo,Hb,$re,gMo,hMo,K$,uMo,pMo,_Mo,Ub,Ire,bMo,vMo,Z$,TMo,FMo,CMo,Jb,Dre,MMo,EMo,eI,yMo,wMo,AMo,Yb,jre,LMo,BMo,oI,xMo,kMo,RMo,Kb,Nre,SMo,PMo,rI,$Mo,IMo,DMo,Zb,qre,jMo,NMo,tI,qMo,GMo,OMo,e2,Gre,XMo,VMo,aI,zMo,WMo,QMo,o2,Ore,HMo,UMo,sI,JMo,YMo,KMo,r2,Xre,ZMo,eEo,nI,oEo,rEo,tEo,t2,Vre,aEo,sEo,lI,nEo,lEo,iEo,a2,zre,dEo,cEo,iI,mEo,fEo,gEo,s2,Wre,hEo,uEo,dI,pEo,_Eo,bEo,n2,Qre,vEo,TEo,cI,FEo,CEo,MEo,l2,Hre,EEo,yEo,mI,wEo,AEo,LEo,i2,Ure,BEo,xEo,fI,kEo,REo,SEo,d2,Jre,PEo,$Eo,gI,IEo,DEo,jEo,c2,Yre,NEo,qEo,hI,GEo,OEo,XEo,m2,Kre,VEo,zEo,uI,WEo,QEo,HEo,f2,Zre,UEo,JEo,pI,YEo,KEo,ZEo,g2,ete,e3o,o3o,_I,r3o,t3o,a3o,h2,ote,s3o,n3o,bI,l3o,i3o,d3o,u2,rte,c3o,m3o,vI,f3o,g3o,h3o,p2,tte,u3o,p3o,TI,_3o,b3o,v3o,_2,ate,T3o,F3o,FI,C3o,M3o,E3o,b2,ste,y3o,w3o,CI,A3o,L3o,B3o,v2,nte,x3o,k3o,MI,R3o,S3o,P3o,T2,lte,$3o,I3o,EI,D3o,j3o,N3o,F2,ite,q3o,G3o,yI,O3o,X3o,V3o,C2,z3o,dte,W3o,Q3o,cte,H3o,U3o,mte,J3o,Y3o,Xy,J9e,nd,M2,fte,Vy,K3o,gte,Z3o,Y9e,Zo,zy,e5o,ld,o5o,hte,r5o,t5o,ute,a5o,s5o,n5o,Wy,l5o,pte,i5o,d5o,c5o,Wr,Qy,m5o,_te,f5o,g5o,id,h5o,bte,u5o,p5o,vte,_5o,b5o,v5o,Tte,T5o,F5o,Hy,C5o,je,Uy,M5o,Fte,E5o,y5o,za,w5o,Cte,A5o,L5o,Mte,B5o,x5o,Ete,k5o,R5o,S5o,G,E2,yte,P5o,$5o,wI,I5o,D5o,j5o,y2,wte,N5o,q5o,AI,G5o,O5o,X5o,w2,Ate,V5o,z5o,LI,W5o,Q5o,H5o,A2,Lte,U5o,J5o,BI,Y5o,K5o,Z5o,L2,Bte,eyo,oyo,xI,ryo,tyo,ayo,B2,xte,syo,nyo,kI,lyo,iyo,dyo,x2,kte,cyo,myo,RI,fyo,gyo,hyo,k2,Rte,uyo,pyo,SI,_yo,byo,vyo,R2,Ste,Tyo,Fyo,PI,Cyo,Myo,Eyo,S2,Pte,yyo,wyo,$I,Ayo,Lyo,Byo,P2,$te,xyo,kyo,II,Ryo,Syo,Pyo,$2,Ite,$yo,Iyo,DI,Dyo,jyo,Nyo,I2,Dte,qyo,Gyo,jI,Oyo,Xyo,Vyo,D2,jte,zyo,Wyo,NI,Qyo,Hyo,Uyo,j2,Nte,Jyo,Yyo,qI,Kyo,Zyo,ewo,N2,qte,owo,rwo,GI,two,awo,swo,q2,Gte,nwo,lwo,OI,iwo,dwo,cwo,G2,Ote,mwo,fwo,XI,gwo,hwo,uwo,O2,Xte,pwo,_wo,VI,bwo,vwo,Two,X2,Vte,Fwo,Cwo,zI,Mwo,Ewo,ywo,V2,zte,wwo,Awo,WI,Lwo,Bwo,xwo,z2,Wte,kwo,Rwo,QI,Swo,Pwo,$wo,W2,Qte,Iwo,Dwo,HI,jwo,Nwo,qwo,Q2,Hte,Gwo,Owo,UI,Xwo,Vwo,zwo,H2,Ute,Wwo,Qwo,JI,Hwo,Uwo,Jwo,U2,Jte,Ywo,Kwo,YI,Zwo,e6o,o6o,J2,Yte,r6o,t6o,KI,a6o,s6o,n6o,Y2,Kte,l6o,i6o,ZI,d6o,c6o,m6o,K2,f6o,Zte,g6o,h6o,eae,u6o,p6o,oae,_6o,b6o,Jy,K9e,dd,Z2,rae,Yy,v6o,tae,T6o,Z9e,er,Ky,F6o,cd,C6o,aae,M6o,E6o,sae,y6o,w6o,A6o,Zy,L6o,nae,B6o,x6o,k6o,Qr,ew,R6o,lae,S6o,P6o,md,$6o,iae,I6o,D6o,dae,j6o,N6o,q6o,cae,G6o,O6o,ow,X6o,Ne,rw,V6o,mae,z6o,W6o,Wa,Q6o,fae,H6o,U6o,gae,J6o,Y6o,hae,K6o,Z6o,eAo,sa,ev,uae,oAo,rAo,eD,tAo,aAo,sAo,ov,pae,nAo,lAo,oD,iAo,dAo,cAo,rv,_ae,mAo,fAo,rD,gAo,hAo,uAo,tv,bae,pAo,_Ao,tD,bAo,vAo,TAo,av,vae,FAo,CAo,aD,MAo,EAo,yAo,sv,wAo,Tae,AAo,LAo,Fae,BAo,xAo,Cae,kAo,RAo,tw,eBe,fd,nv,Mae,aw,SAo,Eae,PAo,oBe,or,sw,$Ao,gd,IAo,yae,DAo,jAo,wae,NAo,qAo,GAo,nw,OAo,Aae,XAo,VAo,zAo,Hr,lw,WAo,Lae,QAo,HAo,hd,UAo,Bae,JAo,YAo,xae,KAo,ZAo,e0o,kae,o0o,r0o,iw,t0o,qe,dw,a0o,Rae,s0o,n0o,Qa,l0o,Sae,i0o,d0o,Pae,c0o,m0o,$ae,f0o,g0o,h0o,N,lv,Iae,u0o,p0o,sD,_0o,b0o,v0o,iv,Dae,T0o,F0o,nD,C0o,M0o,E0o,dv,jae,y0o,w0o,lD,A0o,L0o,B0o,cv,Nae,x0o,k0o,iD,R0o,S0o,P0o,mv,qae,$0o,I0o,dD,D0o,j0o,N0o,fv,Gae,q0o,G0o,cD,O0o,X0o,V0o,gv,Oae,z0o,W0o,mD,Q0o,H0o,U0o,hv,Xae,J0o,Y0o,fD,K0o,Z0o,eLo,uv,Vae,oLo,rLo,gD,tLo,aLo,sLo,pv,zae,nLo,lLo,hD,iLo,dLo,cLo,_v,Wae,mLo,fLo,uD,gLo,hLo,uLo,bv,Qae,pLo,_Lo,pD,bLo,vLo,TLo,vv,Hae,FLo,CLo,_D,MLo,ELo,yLo,Tv,Uae,wLo,ALo,bD,LLo,BLo,xLo,Fv,Jae,kLo,RLo,vD,SLo,PLo,$Lo,Cv,Yae,ILo,DLo,TD,jLo,NLo,qLo,Mv,Kae,GLo,OLo,FD,XLo,VLo,zLo,Ev,Zae,WLo,QLo,CD,HLo,ULo,JLo,yv,ese,YLo,KLo,MD,ZLo,e8o,o8o,wv,ose,r8o,t8o,ED,a8o,s8o,n8o,Av,rse,l8o,i8o,yD,d8o,c8o,m8o,Lv,tse,f8o,g8o,wD,h8o,u8o,p8o,Bv,ase,_8o,b8o,AD,v8o,T8o,F8o,xv,sse,C8o,M8o,LD,E8o,y8o,w8o,kv,nse,A8o,L8o,BD,B8o,x8o,k8o,Rv,lse,R8o,S8o,xD,P8o,$8o,I8o,Sv,ise,D8o,j8o,kD,N8o,q8o,G8o,Pv,dse,O8o,X8o,RD,V8o,z8o,W8o,$v,cse,Q8o,H8o,SD,U8o,J8o,Y8o,Iv,mse,K8o,Z8o,PD,e7o,o7o,r7o,Dv,fse,t7o,a7o,$D,s7o,n7o,l7o,jv,gse,i7o,d7o,ID,c7o,m7o,f7o,Nv,hse,g7o,h7o,DD,u7o,p7o,_7o,qv,b7o,use,v7o,T7o,pse,F7o,C7o,_se,M7o,E7o,cw,rBe,ud,Gv,bse,mw,y7o,vse,w7o,tBe,rr,fw,A7o,pd,L7o,Tse,B7o,x7o,Fse,k7o,R7o,S7o,gw,P7o,Cse,$7o,I7o,D7o,Ur,hw,j7o,Mse,N7o,q7o,_d,G7o,Ese,O7o,X7o,yse,V7o,z7o,W7o,wse,Q7o,H7o,uw,U7o,Ge,pw,J7o,Ase,Y7o,K7o,Ha,Z7o,Lse,e9o,o9o,Bse,r9o,t9o,xse,a9o,s9o,n9o,R,Ov,kse,l9o,i9o,jD,d9o,c9o,m9o,Xv,Rse,f9o,g9o,ND,h9o,u9o,p9o,Vv,Sse,_9o,b9o,qD,v9o,T9o,F9o,zv,Pse,C9o,M9o,GD,E9o,y9o,w9o,Wv,$se,A9o,L9o,OD,B9o,x9o,k9o,Qv,Ise,R9o,S9o,XD,P9o,$9o,I9o,Hv,Dse,D9o,j9o,VD,N9o,q9o,G9o,Uv,jse,O9o,X9o,zD,V9o,z9o,W9o,Jv,Nse,Q9o,H9o,WD,U9o,J9o,Y9o,Yv,qse,K9o,Z9o,QD,eBo,oBo,rBo,Kv,Gse,tBo,aBo,HD,sBo,nBo,lBo,Zv,Ose,iBo,dBo,UD,cBo,mBo,fBo,eT,Xse,gBo,hBo,JD,uBo,pBo,_Bo,oT,Vse,bBo,vBo,YD,TBo,FBo,CBo,rT,zse,MBo,EBo,KD,yBo,wBo,ABo,tT,Wse,LBo,BBo,ZD,xBo,kBo,RBo,aT,Qse,SBo,PBo,ej,$Bo,IBo,DBo,sT,Hse,jBo,NBo,oj,qBo,GBo,OBo,nT,Use,XBo,VBo,rj,zBo,WBo,QBo,lT,Jse,HBo,UBo,tj,JBo,YBo,KBo,iT,Yse,ZBo,exo,aj,oxo,rxo,txo,dT,Kse,axo,sxo,sj,nxo,lxo,ixo,cT,Zse,dxo,cxo,nj,mxo,fxo,gxo,mT,ene,hxo,uxo,lj,pxo,_xo,bxo,fT,one,vxo,Txo,ij,Fxo,Cxo,Mxo,gT,rne,Exo,yxo,dj,wxo,Axo,Lxo,hT,tne,Bxo,xxo,cj,kxo,Rxo,Sxo,uT,ane,Pxo,$xo,mj,Ixo,Dxo,jxo,pT,sne,Nxo,qxo,fj,Gxo,Oxo,Xxo,_T,nne,Vxo,zxo,gj,Wxo,Qxo,Hxo,bT,lne,Uxo,Jxo,hj,Yxo,Kxo,Zxo,vT,ine,eko,oko,uj,rko,tko,ako,TT,dne,sko,nko,pj,lko,iko,dko,FT,cne,cko,mko,_j,fko,gko,hko,CT,mne,uko,pko,bj,_ko,bko,vko,MT,fne,Tko,Fko,vj,Cko,Mko,Eko,ET,gne,yko,wko,Tj,Ako,Lko,Bko,yT,hne,xko,kko,Fj,Rko,Sko,Pko,wT,une,$ko,Iko,Cj,Dko,jko,Nko,AT,qko,pne,Gko,Oko,_ne,Xko,Vko,bne,zko,Wko,_w,aBe,bd,LT,vne,bw,Qko,Tne,Hko,sBe,tr,vw,Uko,vd,Jko,Fne,Yko,Kko,Cne,Zko,eRo,oRo,Tw,rRo,Mne,tRo,aRo,sRo,Jr,Fw,nRo,Ene,lRo,iRo,Td,dRo,yne,cRo,mRo,wne,fRo,gRo,hRo,Ane,uRo,pRo,Cw,_Ro,Oe,Mw,bRo,Lne,vRo,TRo,Ua,FRo,Bne,CRo,MRo,xne,ERo,yRo,kne,wRo,ARo,LRo,Rne,BT,Sne,BRo,xRo,Mj,kRo,RRo,SRo,xT,PRo,Pne,$Ro,IRo,$ne,DRo,jRo,Ine,NRo,qRo,Ew,nBe,Fd,kT,Dne,yw,GRo,jne,ORo,lBe,ar,ww,XRo,Cd,VRo,Nne,zRo,WRo,qne,QRo,HRo,URo,Aw,JRo,Gne,YRo,KRo,ZRo,Yr,Lw,eSo,One,oSo,rSo,Md,tSo,Xne,aSo,sSo,Vne,nSo,lSo,iSo,zne,dSo,cSo,Bw,mSo,Xe,xw,fSo,Wne,gSo,hSo,Ja,uSo,Qne,pSo,_So,Hne,bSo,vSo,Une,TSo,FSo,CSo,be,RT,Jne,MSo,ESo,Ej,ySo,wSo,ASo,ST,Yne,LSo,BSo,yj,xSo,kSo,RSo,Pn,Kne,SSo,PSo,wj,$So,ISo,Aj,DSo,jSo,NSo,PT,Zne,qSo,GSo,Lj,OSo,XSo,VSo,la,ele,zSo,WSo,Bj,QSo,HSo,xj,USo,JSo,kj,YSo,KSo,ZSo,$T,ole,ePo,oPo,Rj,rPo,tPo,aPo,IT,rle,sPo,nPo,Sj,lPo,iPo,dPo,DT,tle,cPo,mPo,Pj,fPo,gPo,hPo,jT,ale,uPo,pPo,$j,_Po,bPo,vPo,NT,TPo,sle,FPo,CPo,nle,MPo,EPo,lle,yPo,wPo,kw,iBe,Ed,qT,ile,Rw,APo,dle,LPo,dBe,sr,Sw,BPo,yd,xPo,cle,kPo,RPo,mle,SPo,PPo,$Po,Pw,IPo,fle,DPo,jPo,NPo,Kr,$w,qPo,gle,GPo,OPo,wd,XPo,hle,VPo,zPo,ule,WPo,QPo,HPo,ple,UPo,JPo,Iw,YPo,Ve,Dw,KPo,_le,ZPo,e$o,Ya,o$o,ble,r$o,t$o,vle,a$o,s$o,Tle,n$o,l$o,i$o,Fle,GT,Cle,d$o,c$o,Ij,m$o,f$o,g$o,OT,h$o,Mle,u$o,p$o,Ele,_$o,b$o,yle,v$o,T$o,jw,cBe,Ad,XT,wle,Nw,F$o,Ale,C$o,mBe,nr,qw,M$o,Ld,E$o,Lle,y$o,w$o,Ble,A$o,L$o,B$o,Gw,x$o,xle,k$o,R$o,S$o,Zr,Ow,P$o,kle,$$o,I$o,Bd,D$o,Rle,j$o,N$o,Sle,q$o,G$o,O$o,Ple,X$o,V$o,Xw,z$o,ze,Vw,W$o,$le,Q$o,H$o,Ka,U$o,Ile,J$o,Y$o,Dle,K$o,Z$o,jle,eIo,oIo,rIo,Ae,VT,Nle,tIo,aIo,Dj,sIo,nIo,lIo,zT,qle,iIo,dIo,jj,cIo,mIo,fIo,WT,Gle,gIo,hIo,Nj,uIo,pIo,_Io,QT,Ole,bIo,vIo,qj,TIo,FIo,CIo,HT,Xle,MIo,EIo,Gj,yIo,wIo,AIo,UT,Vle,LIo,BIo,Oj,xIo,kIo,RIo,JT,zle,SIo,PIo,Xj,$Io,IIo,DIo,YT,Wle,jIo,NIo,Vj,qIo,GIo,OIo,KT,XIo,Qle,VIo,zIo,Hle,WIo,QIo,Ule,HIo,UIo,zw,fBe,xd,ZT,Jle,Ww,JIo,Yle,YIo,gBe,lr,Qw,KIo,kd,ZIo,Kle,eDo,oDo,Zle,rDo,tDo,aDo,Hw,sDo,eie,nDo,lDo,iDo,et,Uw,dDo,oie,cDo,mDo,Rd,fDo,rie,gDo,hDo,tie,uDo,pDo,_Do,aie,bDo,vDo,Jw,TDo,We,Yw,FDo,sie,CDo,MDo,Za,EDo,nie,yDo,wDo,lie,ADo,LDo,iie,BDo,xDo,kDo,es,e1,die,RDo,SDo,zj,PDo,$Do,IDo,o1,cie,DDo,jDo,Wj,NDo,qDo,GDo,r1,mie,ODo,XDo,Qj,VDo,zDo,WDo,t1,fie,QDo,HDo,Hj,UDo,JDo,YDo,a1,KDo,gie,ZDo,ejo,hie,ojo,rjo,uie,tjo,ajo,Kw,hBe,Sd,s1,pie,Zw,sjo,_ie,njo,uBe,ir,e6,ljo,Pd,ijo,bie,djo,cjo,vie,mjo,fjo,gjo,o6,hjo,Tie,ujo,pjo,_jo,ot,r6,bjo,Fie,vjo,Tjo,$d,Fjo,Cie,Cjo,Mjo,Mie,Ejo,yjo,wjo,Eie,Ajo,Ljo,t6,Bjo,Qe,a6,xjo,yie,kjo,Rjo,os,Sjo,wie,Pjo,$jo,Aie,Ijo,Djo,Lie,jjo,Njo,qjo,Le,n1,Bie,Gjo,Ojo,Uj,Xjo,Vjo,zjo,l1,xie,Wjo,Qjo,Jj,Hjo,Ujo,Jjo,i1,kie,Yjo,Kjo,Yj,Zjo,eNo,oNo,d1,Rie,rNo,tNo,Kj,aNo,sNo,nNo,c1,Sie,lNo,iNo,Zj,dNo,cNo,mNo,m1,Pie,fNo,gNo,eN,hNo,uNo,pNo,f1,$ie,_No,bNo,oN,vNo,TNo,FNo,g1,Iie,CNo,MNo,rN,ENo,yNo,wNo,h1,ANo,Die,LNo,BNo,jie,xNo,kNo,Nie,RNo,SNo,s6,pBe,Id,u1,qie,n6,PNo,Gie,$No,_Be,dr,l6,INo,Dd,DNo,Oie,jNo,NNo,Xie,qNo,GNo,ONo,i6,XNo,Vie,VNo,zNo,WNo,rt,d6,QNo,zie,HNo,UNo,jd,JNo,Wie,YNo,KNo,Qie,ZNo,eqo,oqo,Hie,rqo,tqo,c6,aqo,He,m6,sqo,Uie,nqo,lqo,rs,iqo,Jie,dqo,cqo,Yie,mqo,fqo,Kie,gqo,hqo,uqo,f6,p1,Zie,pqo,_qo,tN,bqo,vqo,Tqo,_1,ede,Fqo,Cqo,aN,Mqo,Eqo,yqo,b1,wqo,ode,Aqo,Lqo,rde,Bqo,xqo,tde,kqo,Rqo,g6,bBe,Nd,v1,ade,h6,Sqo,sde,Pqo,vBe,cr,u6,$qo,qd,Iqo,nde,Dqo,jqo,lde,Nqo,qqo,Gqo,p6,Oqo,ide,Xqo,Vqo,zqo,tt,_6,Wqo,dde,Qqo,Hqo,Gd,Uqo,cde,Jqo,Yqo,mde,Kqo,Zqo,eGo,fde,oGo,rGo,b6,tGo,Ue,v6,aGo,gde,sGo,nGo,ts,lGo,hde,iGo,dGo,ude,cGo,mGo,pde,fGo,gGo,hGo,as,T1,_de,uGo,pGo,sN,_Go,bGo,vGo,F1,bde,TGo,FGo,nN,CGo,MGo,EGo,C1,vde,yGo,wGo,lN,AGo,LGo,BGo,M1,Tde,xGo,kGo,iN,RGo,SGo,PGo,E1,$Go,Fde,IGo,DGo,Cde,jGo,NGo,Mde,qGo,GGo,T6,TBe,Od,y1,Ede,F6,OGo,yde,XGo,FBe,mr,C6,VGo,Xd,zGo,wde,WGo,QGo,Ade,HGo,UGo,JGo,M6,YGo,Lde,KGo,ZGo,eOo,at,E6,oOo,Bde,rOo,tOo,Vd,aOo,xde,sOo,nOo,kde,lOo,iOo,dOo,Rde,cOo,mOo,y6,fOo,Je,w6,gOo,Sde,hOo,uOo,ss,pOo,Pde,_Oo,bOo,$de,vOo,TOo,Ide,FOo,COo,MOo,zd,w1,Dde,EOo,yOo,dN,wOo,AOo,LOo,A1,jde,BOo,xOo,cN,kOo,ROo,SOo,L1,Nde,POo,$Oo,mN,IOo,DOo,jOo,B1,NOo,qde,qOo,GOo,Gde,OOo,XOo,Ode,VOo,zOo,A6,CBe,Wd,x1,Xde,L6,WOo,Vde,QOo,MBe,fr,B6,HOo,Qd,UOo,zde,JOo,YOo,Wde,KOo,ZOo,eXo,x6,oXo,Qde,rXo,tXo,aXo,st,k6,sXo,Hde,nXo,lXo,Hd,iXo,Ude,dXo,cXo,Jde,mXo,fXo,gXo,Yde,hXo,uXo,R6,pXo,Ye,S6,_Xo,Kde,bXo,vXo,ns,TXo,Zde,FXo,CXo,ece,MXo,EXo,oce,yXo,wXo,AXo,rce,k1,tce,LXo,BXo,fN,xXo,kXo,RXo,R1,SXo,ace,PXo,$Xo,sce,IXo,DXo,nce,jXo,NXo,P6,EBe,Ud,S1,lce,$6,qXo,ice,GXo,yBe,gr,I6,OXo,Jd,XXo,dce,VXo,zXo,cce,WXo,QXo,HXo,D6,UXo,mce,JXo,YXo,KXo,nt,j6,ZXo,fce,eVo,oVo,Yd,rVo,gce,tVo,aVo,hce,sVo,nVo,lVo,uce,iVo,dVo,N6,cVo,Ke,q6,mVo,pce,fVo,gVo,ls,hVo,_ce,uVo,pVo,bce,_Vo,bVo,vce,vVo,TVo,FVo,Tce,P1,Fce,CVo,MVo,gN,EVo,yVo,wVo,$1,AVo,Cce,LVo,BVo,Mce,xVo,kVo,Ece,RVo,SVo,G6,wBe,Kd,I1,yce,O6,PVo,wce,$Vo,ABe,hr,X6,IVo,Zd,DVo,Ace,jVo,NVo,Lce,qVo,GVo,OVo,V6,XVo,Bce,VVo,zVo,WVo,lt,z6,QVo,xce,HVo,UVo,ec,JVo,kce,YVo,KVo,Rce,ZVo,ezo,ozo,Sce,rzo,tzo,W6,azo,Ze,Q6,szo,Pce,nzo,lzo,is,izo,$ce,dzo,czo,Ice,mzo,fzo,Dce,gzo,hzo,uzo,H6,D1,jce,pzo,_zo,hN,bzo,vzo,Tzo,j1,Nce,Fzo,Czo,uN,Mzo,Ezo,yzo,N1,wzo,qce,Azo,Lzo,Gce,Bzo,xzo,Oce,kzo,Rzo,U6,LBe,oc,q1,Xce,J6,Szo,Vce,Pzo,BBe,ur,Y6,$zo,rc,Izo,zce,Dzo,jzo,Wce,Nzo,qzo,Gzo,K6,Ozo,Qce,Xzo,Vzo,zzo,it,Z6,Wzo,Hce,Qzo,Hzo,tc,Uzo,Uce,Jzo,Yzo,Jce,Kzo,Zzo,eWo,Yce,oWo,rWo,eA,tWo,go,oA,aWo,Kce,sWo,nWo,ds,lWo,Zce,iWo,dWo,eme,cWo,mWo,ome,fWo,gWo,hWo,B,G1,rme,uWo,pWo,pN,_Wo,bWo,vWo,O1,tme,TWo,FWo,_N,CWo,MWo,EWo,X1,ame,yWo,wWo,bN,AWo,LWo,BWo,V1,sme,xWo,kWo,vN,RWo,SWo,PWo,z1,nme,$Wo,IWo,TN,DWo,jWo,NWo,W1,lme,qWo,GWo,FN,OWo,XWo,VWo,Q1,ime,zWo,WWo,CN,QWo,HWo,UWo,H1,dme,JWo,YWo,MN,KWo,ZWo,eQo,U1,cme,oQo,rQo,EN,tQo,aQo,sQo,J1,mme,nQo,lQo,yN,iQo,dQo,cQo,Y1,fme,mQo,fQo,wN,gQo,hQo,uQo,K1,gme,pQo,_Qo,AN,bQo,vQo,TQo,Z1,hme,FQo,CQo,LN,MQo,EQo,yQo,eF,ume,wQo,AQo,BN,LQo,BQo,xQo,oF,pme,kQo,RQo,xN,SQo,PQo,$Qo,rF,_me,IQo,DQo,kN,jQo,NQo,qQo,$n,bme,GQo,OQo,RN,XQo,VQo,SN,zQo,WQo,QQo,tF,vme,HQo,UQo,PN,JQo,YQo,KQo,aF,Tme,ZQo,eHo,$N,oHo,rHo,tHo,sF,Fme,aHo,sHo,IN,nHo,lHo,iHo,nF,Cme,dHo,cHo,DN,mHo,fHo,gHo,lF,Mme,hHo,uHo,jN,pHo,_Ho,bHo,iF,Eme,vHo,THo,NN,FHo,CHo,MHo,dF,yme,EHo,yHo,qN,wHo,AHo,LHo,cF,wme,BHo,xHo,GN,kHo,RHo,SHo,mF,Ame,PHo,$Ho,ON,IHo,DHo,jHo,fF,Lme,NHo,qHo,XN,GHo,OHo,XHo,gF,Bme,VHo,zHo,VN,WHo,QHo,HHo,hF,xme,UHo,JHo,zN,YHo,KHo,ZHo,uF,kme,eUo,oUo,WN,rUo,tUo,aUo,pF,Rme,sUo,nUo,QN,lUo,iUo,dUo,_F,Sme,cUo,mUo,HN,fUo,gUo,hUo,bF,Pme,uUo,pUo,UN,_Uo,bUo,vUo,vF,$me,TUo,FUo,JN,CUo,MUo,EUo,TF,Ime,yUo,wUo,YN,AUo,LUo,BUo,FF,Dme,xUo,kUo,KN,RUo,SUo,PUo,CF,jme,$Uo,IUo,ZN,DUo,jUo,NUo,MF,Nme,qUo,GUo,eq,OUo,XUo,VUo,EF,qme,zUo,WUo,oq,QUo,HUo,UUo,yF,Gme,JUo,YUo,rq,KUo,ZUo,eJo,wF,Ome,oJo,rJo,tq,tJo,aJo,sJo,AF,Xme,nJo,lJo,aq,iJo,dJo,cJo,Vme,mJo,fJo,rA,xBe,ac,LF,zme,tA,gJo,Wme,hJo,kBe,pr,aA,uJo,sc,pJo,Qme,_Jo,bJo,Hme,vJo,TJo,FJo,sA,CJo,Ume,MJo,EJo,yJo,dt,nA,wJo,Jme,AJo,LJo,nc,BJo,Yme,xJo,kJo,Kme,RJo,SJo,PJo,Zme,$Jo,IJo,lA,DJo,ho,iA,jJo,efe,NJo,qJo,cs,GJo,ofe,OJo,XJo,rfe,VJo,zJo,tfe,WJo,QJo,HJo,H,BF,afe,UJo,JJo,sq,YJo,KJo,ZJo,xF,sfe,eYo,oYo,nq,rYo,tYo,aYo,kF,nfe,sYo,nYo,lq,lYo,iYo,dYo,RF,lfe,cYo,mYo,iq,fYo,gYo,hYo,SF,ife,uYo,pYo,dq,_Yo,bYo,vYo,PF,dfe,TYo,FYo,cq,CYo,MYo,EYo,$F,cfe,yYo,wYo,mq,AYo,LYo,BYo,IF,mfe,xYo,kYo,fq,RYo,SYo,PYo,DF,ffe,$Yo,IYo,gq,DYo,jYo,NYo,jF,gfe,qYo,GYo,hq,OYo,XYo,VYo,NF,hfe,zYo,WYo,uq,QYo,HYo,UYo,qF,ufe,JYo,YYo,pq,KYo,ZYo,eKo,GF,pfe,oKo,rKo,_q,tKo,aKo,sKo,OF,_fe,nKo,lKo,bq,iKo,dKo,cKo,XF,bfe,mKo,fKo,vq,gKo,hKo,uKo,VF,vfe,pKo,_Ko,Tq,bKo,vKo,TKo,zF,Tfe,FKo,CKo,Fq,MKo,EKo,yKo,WF,Ffe,wKo,AKo,Cq,LKo,BKo,xKo,QF,Cfe,kKo,RKo,Mq,SKo,PKo,$Ko,HF,Mfe,IKo,DKo,Eq,jKo,NKo,qKo,UF,Efe,GKo,OKo,yq,XKo,VKo,zKo,JF,yfe,WKo,QKo,wq,HKo,UKo,JKo,wfe,YKo,KKo,dA,RBe,lc,YF,Afe,cA,ZKo,Lfe,eZo,SBe,_r,mA,oZo,ic,rZo,Bfe,tZo,aZo,xfe,sZo,nZo,lZo,fA,iZo,kfe,dZo,cZo,mZo,ct,gA,fZo,Rfe,gZo,hZo,dc,uZo,Sfe,pZo,_Zo,Pfe,bZo,vZo,TZo,$fe,FZo,CZo,hA,MZo,uo,uA,EZo,Ife,yZo,wZo,ms,AZo,Dfe,LZo,BZo,jfe,xZo,kZo,Nfe,RZo,SZo,PZo,he,KF,qfe,$Zo,IZo,Aq,DZo,jZo,NZo,ZF,Gfe,qZo,GZo,Lq,OZo,XZo,VZo,eC,Ofe,zZo,WZo,Bq,QZo,HZo,UZo,oC,Xfe,JZo,YZo,xq,KZo,ZZo,eer,rC,Vfe,oer,rer,kq,ter,aer,ser,tC,zfe,ner,ler,Rq,ier,der,cer,aC,Wfe,mer,fer,Sq,ger,her,uer,sC,Qfe,per,_er,Pq,ber,ver,Ter,nC,Hfe,Fer,Cer,$q,Mer,Eer,yer,lC,Ufe,wer,Aer,Iq,Ler,Ber,xer,Jfe,ker,Rer,pA,PBe,cc,iC,Yfe,_A,Ser,Kfe,Per,$Be,br,bA,$er,mc,Ier,Zfe,Der,jer,ege,Ner,qer,Ger,vA,Oer,oge,Xer,Ver,zer,mt,TA,Wer,rge,Qer,Her,fc,Uer,tge,Jer,Yer,age,Ker,Zer,eor,sge,oor,ror,FA,tor,po,CA,aor,nge,sor,nor,fs,lor,lge,ior,dor,ige,cor,mor,dge,gor,hor,uor,MA,dC,cge,por,_or,Dq,bor,vor,Tor,cC,mge,For,Cor,jq,Mor,Eor,yor,fge,wor,Aor,EA,IBe,gc,mC,gge,yA,Lor,hge,Bor,DBe,vr,wA,xor,hc,kor,uge,Ror,Sor,pge,Por,$or,Ior,AA,Dor,_ge,jor,Nor,qor,ft,LA,Gor,bge,Oor,Xor,uc,Vor,vge,zor,Wor,Tge,Qor,Hor,Uor,Fge,Jor,Yor,BA,Kor,_o,xA,Zor,Cge,err,orr,gs,rrr,Mge,trr,arr,Ege,srr,nrr,yge,lrr,irr,drr,Y,fC,wge,crr,mrr,Nq,frr,grr,hrr,gC,Age,urr,prr,qq,_rr,brr,vrr,hC,Lge,Trr,Frr,Gq,Crr,Mrr,Err,uC,Bge,yrr,wrr,Oq,Arr,Lrr,Brr,pC,xge,xrr,krr,Xq,Rrr,Srr,Prr,_C,kge,$rr,Irr,Vq,Drr,jrr,Nrr,bC,Rge,qrr,Grr,zq,Orr,Xrr,Vrr,vC,Sge,zrr,Wrr,Wq,Qrr,Hrr,Urr,TC,Pge,Jrr,Yrr,Qq,Krr,Zrr,etr,FC,$ge,otr,rtr,Hq,ttr,atr,str,CC,Ige,ntr,ltr,Uq,itr,dtr,ctr,MC,Dge,mtr,ftr,Jq,gtr,htr,utr,EC,jge,ptr,_tr,Yq,btr,vtr,Ttr,yC,Nge,Ftr,Ctr,Kq,Mtr,Etr,ytr,wC,qge,wtr,Atr,Zq,Ltr,Btr,xtr,AC,Gge,ktr,Rtr,eG,Str,Ptr,$tr,LC,Oge,Itr,Dtr,oG,jtr,Ntr,qtr,BC,Xge,Gtr,Otr,rG,Xtr,Vtr,ztr,xC,Vge,Wtr,Qtr,tG,Htr,Utr,Jtr,kC,zge,Ytr,Ktr,aG,Ztr,ear,oar,Wge,rar,tar,kA,jBe,pc,RC,Qge,RA,aar,Hge,sar,NBe,Tr,SA,nar,_c,lar,Uge,iar,dar,Jge,car,mar,far,PA,gar,Yge,har,uar,par,gt,$A,_ar,Kge,bar,Tar,bc,Far,Zge,Car,Mar,ehe,Ear,yar,war,ohe,Aar,Lar,IA,Bar,bo,DA,xar,rhe,kar,Rar,hs,Sar,the,Par,$ar,ahe,Iar,Dar,she,jar,Nar,qar,ue,SC,nhe,Gar,Oar,sG,Xar,Var,zar,PC,lhe,War,Qar,nG,Har,Uar,Jar,$C,ihe,Yar,Kar,lG,Zar,esr,osr,IC,dhe,rsr,tsr,iG,asr,ssr,nsr,DC,che,lsr,isr,dG,dsr,csr,msr,jC,mhe,fsr,gsr,cG,hsr,usr,psr,NC,fhe,_sr,bsr,mG,vsr,Tsr,Fsr,qC,ghe,Csr,Msr,fG,Esr,ysr,wsr,GC,hhe,Asr,Lsr,gG,Bsr,xsr,ksr,OC,uhe,Rsr,Ssr,hG,Psr,$sr,Isr,phe,Dsr,jsr,jA,qBe,vc,XC,_he,NA,Nsr,bhe,qsr,GBe,Fr,qA,Gsr,Tc,Osr,vhe,Xsr,Vsr,The,zsr,Wsr,Qsr,GA,Hsr,Fhe,Usr,Jsr,Ysr,ht,OA,Ksr,Che,Zsr,enr,Fc,onr,Mhe,rnr,tnr,Ehe,anr,snr,nnr,yhe,lnr,inr,XA,dnr,vo,VA,cnr,whe,mnr,fnr,us,gnr,Ahe,hnr,unr,Lhe,pnr,_nr,Bhe,bnr,vnr,Tnr,X,VC,xhe,Fnr,Cnr,uG,Mnr,Enr,ynr,zC,khe,wnr,Anr,pG,Lnr,Bnr,xnr,WC,Rhe,knr,Rnr,_G,Snr,Pnr,$nr,QC,She,Inr,Dnr,bG,jnr,Nnr,qnr,HC,Phe,Gnr,Onr,vG,Xnr,Vnr,znr,UC,$he,Wnr,Qnr,TG,Hnr,Unr,Jnr,JC,Ihe,Ynr,Knr,FG,Znr,elr,olr,YC,Dhe,rlr,tlr,CG,alr,slr,nlr,KC,jhe,llr,ilr,MG,dlr,clr,mlr,ZC,Nhe,flr,glr,EG,hlr,ulr,plr,e4,qhe,_lr,blr,yG,vlr,Tlr,Flr,o4,Ghe,Clr,Mlr,wG,Elr,ylr,wlr,r4,Ohe,Alr,Llr,AG,Blr,xlr,klr,t4,Xhe,Rlr,Slr,LG,Plr,$lr,Ilr,a4,Vhe,Dlr,jlr,BG,Nlr,qlr,Glr,s4,zhe,Olr,Xlr,xG,Vlr,zlr,Wlr,n4,Whe,Qlr,Hlr,kG,Ulr,Jlr,Ylr,l4,Qhe,Klr,Zlr,RG,eir,oir,rir,i4,Hhe,tir,air,SG,sir,nir,lir,d4,Uhe,iir,dir,PG,cir,mir,fir,c4,Jhe,gir,hir,$G,uir,pir,_ir,m4,Yhe,bir,vir,IG,Tir,Fir,Cir,f4,Khe,Mir,Eir,DG,yir,wir,Air,g4,Zhe,Lir,Bir,jG,xir,kir,Rir,h4,eue,Sir,Pir,NG,$ir,Iir,Dir,oue,jir,Nir,zA,OBe,Cc,u4,rue,WA,qir,tue,Gir,XBe,Cr,QA,Oir,Mc,Xir,aue,Vir,zir,sue,Wir,Qir,Hir,HA,Uir,nue,Jir,Yir,Kir,ut,UA,Zir,lue,edr,odr,Ec,rdr,iue,tdr,adr,due,sdr,ndr,ldr,cue,idr,ddr,JA,cdr,To,YA,mdr,mue,fdr,gdr,ps,hdr,fue,udr,pdr,gue,_dr,bdr,hue,vdr,Tdr,Fdr,te,p4,uue,Cdr,Mdr,qG,Edr,ydr,wdr,_4,pue,Adr,Ldr,GG,Bdr,xdr,kdr,b4,_ue,Rdr,Sdr,OG,Pdr,$dr,Idr,v4,bue,Ddr,jdr,XG,Ndr,qdr,Gdr,T4,vue,Odr,Xdr,VG,Vdr,zdr,Wdr,F4,Tue,Qdr,Hdr,zG,Udr,Jdr,Ydr,C4,Fue,Kdr,Zdr,WG,ecr,ocr,rcr,M4,Cue,tcr,acr,QG,scr,ncr,lcr,E4,Mue,icr,dcr,HG,ccr,mcr,fcr,y4,Eue,gcr,hcr,UG,ucr,pcr,_cr,w4,yue,bcr,vcr,JG,Tcr,Fcr,Ccr,A4,wue,Mcr,Ecr,YG,ycr,wcr,Acr,L4,Aue,Lcr,Bcr,KG,xcr,kcr,Rcr,B4,Lue,Scr,Pcr,ZG,$cr,Icr,Dcr,x4,Bue,jcr,Ncr,eO,qcr,Gcr,Ocr,k4,xue,Xcr,Vcr,oO,zcr,Wcr,Qcr,R4,kue,Hcr,Ucr,rO,Jcr,Ycr,Kcr,Rue,Zcr,emr,KA,VBe,yc,S4,Sue,ZA,omr,Pue,rmr,zBe,Mr,e0,tmr,wc,amr,$ue,smr,nmr,Iue,lmr,imr,dmr,o0,cmr,Due,mmr,fmr,gmr,pt,r0,hmr,jue,umr,pmr,Ac,_mr,Nue,bmr,vmr,que,Tmr,Fmr,Cmr,Gue,Mmr,Emr,t0,ymr,Fo,a0,wmr,Oue,Amr,Lmr,_s,Bmr,Xue,xmr,kmr,Vue,Rmr,Smr,zue,Pmr,$mr,Imr,Wue,P4,Que,Dmr,jmr,tO,Nmr,qmr,Gmr,Hue,Omr,Xmr,s0,WBe,Lc,$4,Uue,n0,Vmr,Jue,zmr,QBe,Er,l0,Wmr,Bc,Qmr,Yue,Hmr,Umr,Kue,Jmr,Ymr,Kmr,i0,Zmr,Zue,efr,ofr,rfr,_t,d0,tfr,epe,afr,sfr,xc,nfr,ope,lfr,ifr,rpe,dfr,cfr,mfr,tpe,ffr,gfr,c0,hfr,Co,m0,ufr,ape,pfr,_fr,bs,bfr,spe,vfr,Tfr,npe,Ffr,Cfr,lpe,Mfr,Efr,yfr,K,I4,ipe,wfr,Afr,aO,Lfr,Bfr,xfr,D4,dpe,kfr,Rfr,sO,Sfr,Pfr,$fr,j4,cpe,Ifr,Dfr,nO,jfr,Nfr,qfr,N4,mpe,Gfr,Ofr,lO,Xfr,Vfr,zfr,q4,fpe,Wfr,Qfr,iO,Hfr,Ufr,Jfr,G4,gpe,Yfr,Kfr,dO,Zfr,egr,ogr,O4,hpe,rgr,tgr,cO,agr,sgr,ngr,X4,upe,lgr,igr,mO,dgr,cgr,mgr,V4,ppe,fgr,ggr,fO,hgr,ugr,pgr,z4,_pe,_gr,bgr,gO,vgr,Tgr,Fgr,W4,bpe,Cgr,Mgr,hO,Egr,ygr,wgr,Q4,vpe,Agr,Lgr,uO,Bgr,xgr,kgr,H4,Tpe,Rgr,Sgr,pO,Pgr,$gr,Igr,U4,Fpe,Dgr,jgr,_O,Ngr,qgr,Ggr,J4,Cpe,Ogr,Xgr,bO,Vgr,zgr,Wgr,Y4,Mpe,Qgr,Hgr,vO,Ugr,Jgr,Ygr,K4,Epe,Kgr,Zgr,TO,ehr,ohr,rhr,Z4,ype,thr,ahr,FO,shr,nhr,lhr,eM,wpe,ihr,dhr,CO,chr,mhr,fhr,oM,Ape,ghr,hhr,MO,uhr,phr,_hr,Lpe,bhr,vhr,f0,HBe,kc,rM,Bpe,g0,Thr,xpe,Fhr,UBe,yr,h0,Chr,Rc,Mhr,kpe,Ehr,yhr,Rpe,whr,Ahr,Lhr,u0,Bhr,Spe,xhr,khr,Rhr,bt,p0,Shr,Ppe,Phr,$hr,Sc,Ihr,$pe,Dhr,jhr,Ipe,Nhr,qhr,Ghr,Dpe,Ohr,Xhr,_0,Vhr,Mo,b0,zhr,jpe,Whr,Qhr,vs,Hhr,Npe,Uhr,Jhr,qpe,Yhr,Khr,Gpe,Zhr,eur,our,Z,tM,Ope,rur,tur,EO,aur,sur,nur,aM,Xpe,lur,iur,yO,dur,cur,mur,sM,Vpe,fur,gur,wO,hur,uur,pur,nM,zpe,_ur,bur,AO,vur,Tur,Fur,lM,Wpe,Cur,Mur,LO,Eur,yur,wur,iM,Qpe,Aur,Lur,BO,Bur,xur,kur,dM,Hpe,Rur,Sur,xO,Pur,$ur,Iur,cM,Upe,Dur,jur,kO,Nur,qur,Gur,mM,Jpe,Our,Xur,RO,Vur,zur,Wur,fM,Ype,Qur,Hur,SO,Uur,Jur,Yur,gM,Kpe,Kur,Zur,PO,epr,opr,rpr,hM,Zpe,tpr,apr,$O,spr,npr,lpr,uM,e_e,ipr,dpr,IO,cpr,mpr,fpr,pM,o_e,gpr,hpr,DO,upr,ppr,_pr,_M,r_e,bpr,vpr,jO,Tpr,Fpr,Cpr,bM,t_e,Mpr,Epr,NO,ypr,wpr,Apr,vM,a_e,Lpr,Bpr,qO,xpr,kpr,Rpr,TM,s_e,Spr,Ppr,GO,$pr,Ipr,Dpr,FM,n_e,jpr,Npr,OO,qpr,Gpr,Opr,l_e,Xpr,Vpr,v0,JBe,Pc,CM,i_e,T0,zpr,d_e,Wpr,YBe,wr,F0,Qpr,$c,Hpr,c_e,Upr,Jpr,m_e,Ypr,Kpr,Zpr,C0,e_r,f_e,o_r,r_r,t_r,vt,M0,a_r,g_e,s_r,n_r,Ic,l_r,h_e,i_r,d_r,u_e,c_r,m_r,f_r,p_e,g_r,h_r,E0,u_r,Eo,y0,p_r,__e,__r,b_r,Ts,v_r,b_e,T_r,F_r,v_e,C_r,M_r,T_e,E_r,y_r,w_r,F_e,MM,C_e,A_r,L_r,XO,B_r,x_r,k_r,M_e,R_r,S_r,w0,KBe,Dc,EM,E_e,A0,P_r,y_e,$_r,ZBe,Ar,L0,I_r,jc,D_r,w_e,j_r,N_r,A_e,q_r,G_r,O_r,B0,X_r,L_e,V_r,z_r,W_r,Tt,x0,Q_r,B_e,H_r,U_r,Nc,J_r,x_e,Y_r,K_r,k_e,Z_r,ebr,obr,R_e,rbr,tbr,k0,abr,yo,R0,sbr,S_e,nbr,lbr,Fs,ibr,P_e,dbr,cbr,$_e,mbr,fbr,I_e,gbr,hbr,ubr,D_e,yM,j_e,pbr,_br,VO,bbr,vbr,Tbr,N_e,Fbr,Cbr,S0,exe,qc,wM,q_e,P0,Mbr,G_e,Ebr,oxe,Lr,$0,ybr,Gc,wbr,O_e,Abr,Lbr,X_e,Bbr,xbr,kbr,I0,Rbr,V_e,Sbr,Pbr,$br,Ft,D0,Ibr,z_e,Dbr,jbr,Oc,Nbr,W_e,qbr,Gbr,Q_e,Obr,Xbr,Vbr,H_e,zbr,Wbr,j0,Qbr,wo,N0,Hbr,U_e,Ubr,Jbr,Cs,Ybr,J_e,Kbr,Zbr,Y_e,e2r,o2r,K_e,r2r,t2r,a2r,z,AM,Z_e,s2r,n2r,zO,l2r,i2r,d2r,LM,ebe,c2r,m2r,WO,f2r,g2r,h2r,BM,obe,u2r,p2r,QO,_2r,b2r,v2r,xM,rbe,T2r,F2r,HO,C2r,M2r,E2r,kM,tbe,y2r,w2r,UO,A2r,L2r,B2r,RM,abe,x2r,k2r,JO,R2r,S2r,P2r,SM,sbe,$2r,I2r,YO,D2r,j2r,N2r,PM,nbe,q2r,G2r,KO,O2r,X2r,V2r,$M,lbe,z2r,W2r,ZO,Q2r,H2r,U2r,IM,ibe,J2r,Y2r,eX,K2r,Z2r,evr,DM,dbe,ovr,rvr,oX,tvr,avr,svr,jM,cbe,nvr,lvr,rX,ivr,dvr,cvr,NM,mbe,mvr,fvr,tX,gvr,hvr,uvr,qM,fbe,pvr,_vr,aX,bvr,vvr,Tvr,GM,gbe,Fvr,Cvr,sX,Mvr,Evr,yvr,OM,hbe,wvr,Avr,nX,Lvr,Bvr,xvr,XM,ube,kvr,Rvr,lX,Svr,Pvr,$vr,VM,pbe,Ivr,Dvr,iX,jvr,Nvr,qvr,zM,_be,Gvr,Ovr,dX,Xvr,Vvr,zvr,WM,bbe,Wvr,Qvr,cX,Hvr,Uvr,Jvr,QM,vbe,Yvr,Kvr,mX,Zvr,eTr,oTr,HM,Tbe,rTr,tTr,fX,aTr,sTr,nTr,UM,Fbe,lTr,iTr,gX,dTr,cTr,mTr,JM,Cbe,fTr,gTr,hX,hTr,uTr,pTr,Mbe,_Tr,bTr,q0,rxe,Xc,YM,Ebe,G0,vTr,ybe,TTr,txe,Br,O0,FTr,Vc,CTr,wbe,MTr,ETr,Abe,yTr,wTr,ATr,X0,LTr,Lbe,BTr,xTr,kTr,Ct,V0,RTr,Bbe,STr,PTr,zc,$Tr,xbe,ITr,DTr,kbe,jTr,NTr,qTr,Rbe,GTr,OTr,z0,XTr,Ao,W0,VTr,Sbe,zTr,WTr,Ms,QTr,Pbe,HTr,UTr,$be,JTr,YTr,Ibe,KTr,ZTr,e1r,Es,KM,Dbe,o1r,r1r,uX,t1r,a1r,s1r,ZM,jbe,n1r,l1r,pX,i1r,d1r,c1r,eE,Nbe,m1r,f1r,_X,g1r,h1r,u1r,oE,qbe,p1r,_1r,bX,b1r,v1r,T1r,Gbe,F1r,C1r,Q0,axe,Wc,rE,Obe,H0,M1r,Xbe,E1r,sxe,xr,U0,y1r,Qc,w1r,Vbe,A1r,L1r,zbe,B1r,x1r,k1r,J0,R1r,Wbe,S1r,P1r,$1r,Mt,Y0,I1r,Qbe,D1r,j1r,Hc,N1r,Hbe,q1r,G1r,Ube,O1r,X1r,V1r,Jbe,z1r,W1r,K0,Q1r,Lo,Z0,H1r,Ybe,U1r,J1r,ys,Y1r,Kbe,K1r,Z1r,Zbe,eFr,oFr,e2e,rFr,tFr,aFr,me,tE,o2e,sFr,nFr,vX,lFr,iFr,dFr,aE,r2e,cFr,mFr,TX,fFr,gFr,hFr,sE,t2e,uFr,pFr,FX,_Fr,bFr,vFr,nE,a2e,TFr,FFr,CX,CFr,MFr,EFr,lE,s2e,yFr,wFr,MX,AFr,LFr,BFr,iE,n2e,xFr,kFr,EX,RFr,SFr,PFr,dE,l2e,$Fr,IFr,yX,DFr,jFr,NFr,cE,i2e,qFr,GFr,wX,OFr,XFr,VFr,mE,d2e,zFr,WFr,AX,QFr,HFr,UFr,fE,c2e,JFr,YFr,LX,KFr,ZFr,eCr,gE,m2e,oCr,rCr,BX,tCr,aCr,sCr,f2e,nCr,lCr,eL,nxe,Uc,hE,g2e,oL,iCr,h2e,dCr,lxe,kr,rL,cCr,Jc,mCr,u2e,fCr,gCr,p2e,hCr,uCr,pCr,tL,_Cr,_2e,bCr,vCr,TCr,Et,aL,FCr,b2e,CCr,MCr,Yc,ECr,v2e,yCr,wCr,T2e,ACr,LCr,BCr,F2e,xCr,kCr,sL,RCr,Bo,nL,SCr,C2e,PCr,$Cr,ws,ICr,M2e,DCr,jCr,E2e,NCr,qCr,y2e,GCr,OCr,XCr,ve,uE,w2e,VCr,zCr,xX,WCr,QCr,HCr,pE,A2e,UCr,JCr,kX,YCr,KCr,ZCr,_E,L2e,e4r,o4r,RX,r4r,t4r,a4r,bE,B2e,s4r,n4r,SX,l4r,i4r,d4r,vE,x2e,c4r,m4r,PX,f4r,g4r,h4r,TE,k2e,u4r,p4r,$X,_4r,b4r,v4r,FE,R2e,T4r,F4r,IX,C4r,M4r,E4r,CE,S2e,y4r,w4r,DX,A4r,L4r,B4r,ME,P2e,x4r,k4r,jX,R4r,S4r,P4r,$2e,$4r,I4r,lL,ixe,Kc,EE,I2e,iL,D4r,D2e,j4r,dxe,Rr,dL,N4r,Zc,q4r,j2e,G4r,O4r,N2e,X4r,V4r,z4r,cL,W4r,q2e,Q4r,H4r,U4r,yt,mL,J4r,G2e,Y4r,K4r,em,Z4r,O2e,eMr,oMr,X2e,rMr,tMr,aMr,V2e,sMr,nMr,fL,lMr,xo,gL,iMr,z2e,dMr,cMr,As,mMr,W2e,fMr,gMr,Q2e,hMr,uMr,H2e,pMr,_Mr,bMr,Te,yE,U2e,vMr,TMr,NX,FMr,CMr,MMr,wE,J2e,EMr,yMr,qX,wMr,AMr,LMr,AE,Y2e,BMr,xMr,GX,kMr,RMr,SMr,LE,K2e,PMr,$Mr,OX,IMr,DMr,jMr,BE,Z2e,NMr,qMr,XX,GMr,OMr,XMr,xE,eve,VMr,zMr,VX,WMr,QMr,HMr,kE,ove,UMr,JMr,zX,YMr,KMr,ZMr,RE,rve,eEr,oEr,WX,rEr,tEr,aEr,SE,tve,sEr,nEr,QX,lEr,iEr,dEr,ave,cEr,mEr,hL,cxe,om,PE,sve,uL,fEr,nve,gEr,mxe,Sr,pL,hEr,rm,uEr,lve,pEr,_Er,ive,bEr,vEr,TEr,_L,FEr,dve,CEr,MEr,EEr,wt,bL,yEr,cve,wEr,AEr,tm,LEr,mve,BEr,xEr,fve,kEr,REr,SEr,gve,PEr,$Er,vL,IEr,ko,TL,DEr,hve,jEr,NEr,Ls,qEr,uve,GEr,OEr,pve,XEr,VEr,_ve,zEr,WEr,QEr,Fe,$E,bve,HEr,UEr,HX,JEr,YEr,KEr,IE,vve,ZEr,e3r,UX,o3r,r3r,t3r,DE,Tve,a3r,s3r,JX,n3r,l3r,i3r,jE,Fve,d3r,c3r,YX,m3r,f3r,g3r,NE,Cve,h3r,u3r,KX,p3r,_3r,b3r,qE,Mve,v3r,T3r,ZX,F3r,C3r,M3r,GE,Eve,E3r,y3r,eV,w3r,A3r,L3r,OE,yve,B3r,x3r,oV,k3r,R3r,S3r,XE,wve,P3r,$3r,rV,I3r,D3r,j3r,Ave,N3r,q3r,FL,fxe,am,VE,Lve,CL,G3r,Bve,O3r,gxe,Pr,ML,X3r,sm,V3r,xve,z3r,W3r,kve,Q3r,H3r,U3r,EL,J3r,Rve,Y3r,K3r,Z3r,At,yL,e5r,Sve,o5r,r5r,nm,t5r,Pve,a5r,s5r,$ve,n5r,l5r,i5r,Ive,d5r,c5r,wL,m5r,Ro,AL,f5r,Dve,g5r,h5r,Bs,u5r,jve,p5r,_5r,Nve,b5r,v5r,qve,T5r,F5r,C5r,Ce,zE,Gve,M5r,E5r,tV,y5r,w5r,A5r,WE,Ove,L5r,B5r,aV,x5r,k5r,R5r,QE,Xve,S5r,P5r,sV,$5r,I5r,D5r,HE,Vve,j5r,N5r,nV,q5r,G5r,O5r,UE,zve,X5r,V5r,lV,z5r,W5r,Q5r,JE,Wve,H5r,U5r,iV,J5r,Y5r,K5r,YE,Qve,Z5r,eyr,dV,oyr,ryr,tyr,KE,Hve,ayr,syr,cV,nyr,lyr,iyr,ZE,Uve,dyr,cyr,mV,myr,fyr,gyr,Jve,hyr,uyr,LL,hxe,lm,e3,Yve,BL,pyr,Kve,_yr,uxe,$r,xL,byr,im,vyr,Zve,Tyr,Fyr,eTe,Cyr,Myr,Eyr,kL,yyr,oTe,wyr,Ayr,Lyr,Lt,RL,Byr,rTe,xyr,kyr,dm,Ryr,tTe,Syr,Pyr,aTe,$yr,Iyr,Dyr,sTe,jyr,Nyr,SL,qyr,So,PL,Gyr,nTe,Oyr,Xyr,xs,Vyr,lTe,zyr,Wyr,iTe,Qyr,Hyr,dTe,Uyr,Jyr,Yyr,no,o3,cTe,Kyr,Zyr,fV,ewr,owr,rwr,r3,mTe,twr,awr,gV,swr,nwr,lwr,t3,fTe,iwr,dwr,hV,cwr,mwr,fwr,a3,gTe,gwr,hwr,uV,uwr,pwr,_wr,s3,hTe,bwr,vwr,pV,Twr,Fwr,Cwr,n3,uTe,Mwr,Ewr,_V,ywr,wwr,Awr,l3,pTe,Lwr,Bwr,bV,xwr,kwr,Rwr,_Te,Swr,Pwr,$L,pxe,cm,i3,bTe,IL,$wr,vTe,Iwr,_xe,Ir,DL,Dwr,mm,jwr,TTe,Nwr,qwr,FTe,Gwr,Owr,Xwr,jL,Vwr,CTe,zwr,Wwr,Qwr,Bt,NL,Hwr,MTe,Uwr,Jwr,fm,Ywr,ETe,Kwr,Zwr,yTe,e6r,o6r,r6r,wTe,t6r,a6r,qL,s6r,Po,GL,n6r,ATe,l6r,i6r,ks,d6r,LTe,c6r,m6r,BTe,f6r,g6r,xTe,h6r,u6r,p6r,lo,d3,kTe,_6r,b6r,vV,v6r,T6r,F6r,c3,RTe,C6r,M6r,TV,E6r,y6r,w6r,m3,STe,A6r,L6r,FV,B6r,x6r,k6r,f3,PTe,R6r,S6r,CV,P6r,$6r,I6r,g3,$Te,D6r,j6r,MV,N6r,q6r,G6r,h3,ITe,O6r,X6r,EV,V6r,z6r,W6r,u3,DTe,Q6r,H6r,yV,U6r,J6r,Y6r,jTe,K6r,Z6r,OL,bxe,gm,p3,NTe,XL,eAr,qTe,oAr,vxe,Dr,VL,rAr,hm,tAr,GTe,aAr,sAr,OTe,nAr,lAr,iAr,zL,dAr,XTe,cAr,mAr,fAr,xt,WL,gAr,VTe,hAr,uAr,um,pAr,zTe,_Ar,bAr,WTe,vAr,TAr,FAr,QTe,CAr,MAr,QL,EAr,$o,HL,yAr,HTe,wAr,AAr,Rs,LAr,UTe,BAr,xAr,JTe,kAr,RAr,YTe,SAr,PAr,$Ar,KTe,_3,ZTe,IAr,DAr,wV,jAr,NAr,qAr,e1e,GAr,OAr,UL,Txe,pm,b3,o1e,JL,XAr,r1e,VAr,Fxe,jr,YL,zAr,_m,WAr,t1e,QAr,HAr,a1e,UAr,JAr,YAr,KL,KAr,s1e,ZAr,e0r,o0r,kt,ZL,r0r,n1e,t0r,a0r,bm,s0r,l1e,n0r,l0r,i1e,i0r,d0r,c0r,d1e,m0r,f0r,e8,g0r,Io,o8,h0r,c1e,u0r,p0r,Ss,_0r,m1e,b0r,v0r,f1e,T0r,F0r,g1e,C0r,M0r,E0r,r8,v3,h1e,y0r,w0r,AV,A0r,L0r,B0r,T3,u1e,x0r,k0r,LV,R0r,S0r,P0r,p1e,$0r,I0r,t8,Cxe,vm,F3,_1e,a8,D0r,b1e,j0r,Mxe,Nr,s8,N0r,Tm,q0r,v1e,G0r,O0r,T1e,X0r,V0r,z0r,n8,W0r,F1e,Q0r,H0r,U0r,Rt,l8,J0r,C1e,Y0r,K0r,Fm,Z0r,M1e,eLr,oLr,E1e,rLr,tLr,aLr,y1e,sLr,nLr,i8,lLr,Do,d8,iLr,w1e,dLr,cLr,Ps,mLr,A1e,fLr,gLr,L1e,hLr,uLr,B1e,pLr,_Lr,bLr,x1e,C3,k1e,vLr,TLr,BV,FLr,CLr,MLr,R1e,ELr,yLr,c8,Exe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),w5=new V({}),A5=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Lm=new wLr({props:{warning:"&lcub;true}",$$slots:{default:[hvt]},$$scope:{ctx:Ai}}}),L5=new V({}),B5=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L526"}}),R5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),S5=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),P5=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),$5=new V({}),I5=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L351"}}),N5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),q5=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),G5=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),O5=new V({}),X5=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),W5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),mh=new wLr({props:{$$slots:{default:[uvt]},$$scope:{ctx:Ai}}}),Q5=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),H5=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),U5=new V({}),J5=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L71"}}),Z5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ch=new wLr({props:{$$slots:{default:[pvt]},$$scope:{ctx:Ai}}}),ey=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),oy=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),ry=new V({}),ty=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L687"}}),sy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),ly=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new V({}),cy=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L694"}}),fy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),hy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new V({}),_y=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L709"}}),vy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new V({}),Ey=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L716"}}),wy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Ly=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new V({}),ky=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L723"}}),Sy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),$y=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new V({}),jy=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L732"}}),qy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Oy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new V({}),zy=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L766"}}),Qy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Uy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new V({}),Ky=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L773"}}),ew=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),rw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new V({}),sw=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L759"}}),lw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),dw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new V({}),fw=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L741"}}),hw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),pw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new V({}),vw=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L748"}}),Fw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Mw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new V({}),ww=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L782"}}),Lw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),xw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new V({}),Sw=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L812"}}),$w=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Dw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new V({}),qw=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L819"}}),Ow=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Vw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new V({}),Qw=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L842"}}),Uw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new V({}),e6=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L826"}}),r6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),a6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n6=new V({}),l6=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L833"}}),d6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),m6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h6=new V({}),u6=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L851"}}),_6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),v6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F6=new V({}),C6=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L858"}}),E6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),w6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L6=new V({}),B6=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L805"}}),k6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),S6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$6=new V({}),I6=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L789"}}),j6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),q6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O6=new V({}),X6=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L796"}}),z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),W6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Q6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new V({}),Y6=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),oA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new V({}),aA=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),nA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),iA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new V({}),mA=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),gA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),uA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new V({}),bA=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),TA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new V({}),wA=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),LA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),xA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new V({}),SA=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),$A=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),DA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new V({}),qA=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),OA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),VA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new V({}),QA=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),UA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),YA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new V({}),e0=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),r0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),a0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new V({}),l0=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),d0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),m0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new V({}),h0=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),p0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),b0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new V({}),F0=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),M0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),y0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new V({}),L0=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),x0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),R0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new V({}),$0=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),D0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),N0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new V({}),O0=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),V0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),W0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new V({}),U0=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),Y0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Z0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new V({}),rL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),aL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),nL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new V({}),dL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),mL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),gL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new V({}),pL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),bL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),TL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new V({}),ML=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),yL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),AL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new V({}),xL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),RL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),PL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new V({}),DL=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),NL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),GL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new V({}),VL=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),WL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),HL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new V({}),YL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),ZL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),e8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),o8=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new V({}),s8=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),l8=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),i8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),d8=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),ie=a("h1"),fe=a("a"),so=a("span"),m(ce.$$.fragment),_e=l(),Go=a("span"),Li=o("Auto Classes"),Mm=l(),na=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),C5=o("from_pretrained()"),Em=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),ki=o("Instantiating one of "),$s=a("a"),M5=o("AutoConfig"),Is=o(", "),Ds=a("a"),E5=o("AutoModel"),Ri=o(`, and
`),js=a("a"),y5=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),ym=l(),m($a.$$.fragment),co=l(),ge=a("p"),l7=o("will create a model that is an instance of "),Pi=a("a"),i7=o("BertModel"),d7=o("."),Oo=l(),Ia=a("p"),c7=o("There is one class of "),wm=a("code"),m7=o("AutoModel"),$Re=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),y9e=l(),$i=a("h2"),Am=a("a"),TW=a("span"),m(w5.$$.fragment),IRe=l(),FW=a("span"),DRe=o("Extending the Auto Classes"),w9e=l(),Ns=a("p"),jRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CW=a("code"),NRe=o("NewModel"),qRe=o(", make sure you have a "),MW=a("code"),GRe=o("NewModelConfig"),ORe=o(` then you can add those to the auto
classes like this:`),A9e=l(),m(A5.$$.fragment),L9e=l(),f7=a("p"),XRe=o("You will then be able to use the auto classes like you would usually do!"),B9e=l(),m(Lm.$$.fragment),x9e=l(),Ii=a("h2"),Bm=a("a"),EW=a("span"),m(L5.$$.fragment),VRe=l(),yW=a("span"),zRe=o("AutoConfig"),k9e=l(),Xo=a("div"),m(B5.$$.fragment),WRe=l(),x5=a("p"),QRe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g7=a("a"),HRe=o("from_pretrained()"),URe=o(" class method."),JRe=l(),k5=a("p"),YRe=o("This class cannot be instantiated directly using "),wW=a("code"),KRe=o("__init__()"),ZRe=o(" (throws an error)."),eSe=l(),mo=a("div"),m(R5.$$.fragment),oSe=l(),AW=a("p"),rSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),tSe=l(),Di=a("p"),aSe=o("The configuration class to instantiate is selected based on the "),LW=a("code"),sSe=o("model_type"),nSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BW=a("code"),lSe=o("pretrained_model_name_or_path"),iSe=o(":"),dSe=l(),v=a("ul"),xm=a("li"),xW=a("strong"),cSe=o("albert"),mSe=o(" \u2014 "),h7=a("a"),fSe=o("AlbertConfig"),gSe=o(" (ALBERT model)"),hSe=l(),km=a("li"),kW=a("strong"),uSe=o("bart"),pSe=o(" \u2014 "),u7=a("a"),_Se=o("BartConfig"),bSe=o(" (BART model)"),vSe=l(),Rm=a("li"),RW=a("strong"),TSe=o("beit"),FSe=o(" \u2014 "),p7=a("a"),CSe=o("BeitConfig"),MSe=o(" (BEiT model)"),ESe=l(),Sm=a("li"),SW=a("strong"),ySe=o("bert"),wSe=o(" \u2014 "),_7=a("a"),ASe=o("BertConfig"),LSe=o(" (BERT model)"),BSe=l(),Pm=a("li"),PW=a("strong"),xSe=o("bert-generation"),kSe=o(" \u2014 "),b7=a("a"),RSe=o("BertGenerationConfig"),SSe=o(" (Bert Generation model)"),PSe=l(),$m=a("li"),$W=a("strong"),$Se=o("big_bird"),ISe=o(" \u2014 "),v7=a("a"),DSe=o("BigBirdConfig"),jSe=o(" (BigBird model)"),NSe=l(),Im=a("li"),IW=a("strong"),qSe=o("bigbird_pegasus"),GSe=o(" \u2014 "),T7=a("a"),OSe=o("BigBirdPegasusConfig"),XSe=o(" (BigBirdPegasus model)"),VSe=l(),Dm=a("li"),DW=a("strong"),zSe=o("blenderbot"),WSe=o(" \u2014 "),F7=a("a"),QSe=o("BlenderbotConfig"),HSe=o(" (Blenderbot model)"),USe=l(),jm=a("li"),jW=a("strong"),JSe=o("blenderbot-small"),YSe=o(" \u2014 "),C7=a("a"),KSe=o("BlenderbotSmallConfig"),ZSe=o(" (BlenderbotSmall model)"),ePe=l(),Nm=a("li"),NW=a("strong"),oPe=o("camembert"),rPe=o(" \u2014 "),M7=a("a"),tPe=o("CamembertConfig"),aPe=o(" (CamemBERT model)"),sPe=l(),qm=a("li"),qW=a("strong"),nPe=o("canine"),lPe=o(" \u2014 "),E7=a("a"),iPe=o("CanineConfig"),dPe=o(" (Canine model)"),cPe=l(),Gm=a("li"),GW=a("strong"),mPe=o("clip"),fPe=o(" \u2014 "),y7=a("a"),gPe=o("CLIPConfig"),hPe=o(" (CLIP model)"),uPe=l(),Om=a("li"),OW=a("strong"),pPe=o("convbert"),_Pe=o(" \u2014 "),w7=a("a"),bPe=o("ConvBertConfig"),vPe=o(" (ConvBERT model)"),TPe=l(),Xm=a("li"),XW=a("strong"),FPe=o("convnext"),CPe=o(" \u2014 "),A7=a("a"),MPe=o("ConvNextConfig"),EPe=o(" (ConvNext model)"),yPe=l(),Vm=a("li"),VW=a("strong"),wPe=o("ctrl"),APe=o(" \u2014 "),L7=a("a"),LPe=o("CTRLConfig"),BPe=o(" (CTRL model)"),xPe=l(),zm=a("li"),zW=a("strong"),kPe=o("data2vec-audio"),RPe=o(" \u2014 "),B7=a("a"),SPe=o("Data2VecAudioConfig"),PPe=o(" (Data2VecAudio model)"),$Pe=l(),Wm=a("li"),WW=a("strong"),IPe=o("data2vec-text"),DPe=o(" \u2014 "),x7=a("a"),jPe=o("Data2VecTextConfig"),NPe=o(" (Data2VecText model)"),qPe=l(),Qm=a("li"),QW=a("strong"),GPe=o("deberta"),OPe=o(" \u2014 "),k7=a("a"),XPe=o("DebertaConfig"),VPe=o(" (DeBERTa model)"),zPe=l(),Hm=a("li"),HW=a("strong"),WPe=o("deberta-v2"),QPe=o(" \u2014 "),R7=a("a"),HPe=o("DebertaV2Config"),UPe=o(" (DeBERTa-v2 model)"),JPe=l(),Um=a("li"),UW=a("strong"),YPe=o("deit"),KPe=o(" \u2014 "),S7=a("a"),ZPe=o("DeiTConfig"),e$e=o(" (DeiT model)"),o$e=l(),Jm=a("li"),JW=a("strong"),r$e=o("detr"),t$e=o(" \u2014 "),P7=a("a"),a$e=o("DetrConfig"),s$e=o(" (DETR model)"),n$e=l(),Ym=a("li"),YW=a("strong"),l$e=o("distilbert"),i$e=o(" \u2014 "),$7=a("a"),d$e=o("DistilBertConfig"),c$e=o(" (DistilBERT model)"),m$e=l(),Km=a("li"),KW=a("strong"),f$e=o("dpr"),g$e=o(" \u2014 "),I7=a("a"),h$e=o("DPRConfig"),u$e=o(" (DPR model)"),p$e=l(),Zm=a("li"),ZW=a("strong"),_$e=o("electra"),b$e=o(" \u2014 "),D7=a("a"),v$e=o("ElectraConfig"),T$e=o(" (ELECTRA model)"),F$e=l(),ef=a("li"),eQ=a("strong"),C$e=o("encoder-decoder"),M$e=o(" \u2014 "),j7=a("a"),E$e=o("EncoderDecoderConfig"),y$e=o(" (Encoder decoder model)"),w$e=l(),of=a("li"),oQ=a("strong"),A$e=o("flaubert"),L$e=o(" \u2014 "),N7=a("a"),B$e=o("FlaubertConfig"),x$e=o(" (FlauBERT model)"),k$e=l(),rf=a("li"),rQ=a("strong"),R$e=o("fnet"),S$e=o(" \u2014 "),q7=a("a"),P$e=o("FNetConfig"),$$e=o(" (FNet model)"),I$e=l(),tf=a("li"),tQ=a("strong"),D$e=o("fsmt"),j$e=o(" \u2014 "),G7=a("a"),N$e=o("FSMTConfig"),q$e=o(" (FairSeq Machine-Translation model)"),G$e=l(),af=a("li"),aQ=a("strong"),O$e=o("funnel"),X$e=o(" \u2014 "),O7=a("a"),V$e=o("FunnelConfig"),z$e=o(" (Funnel Transformer model)"),W$e=l(),sf=a("li"),sQ=a("strong"),Q$e=o("gpt2"),H$e=o(" \u2014 "),X7=a("a"),U$e=o("GPT2Config"),J$e=o(" (OpenAI GPT-2 model)"),Y$e=l(),nf=a("li"),nQ=a("strong"),K$e=o("gpt_neo"),Z$e=o(" \u2014 "),V7=a("a"),eIe=o("GPTNeoConfig"),oIe=o(" (GPT Neo model)"),rIe=l(),lf=a("li"),lQ=a("strong"),tIe=o("gptj"),aIe=o(" \u2014 "),z7=a("a"),sIe=o("GPTJConfig"),nIe=o(" (GPT-J model)"),lIe=l(),df=a("li"),iQ=a("strong"),iIe=o("hubert"),dIe=o(" \u2014 "),W7=a("a"),cIe=o("HubertConfig"),mIe=o(" (Hubert model)"),fIe=l(),cf=a("li"),dQ=a("strong"),gIe=o("ibert"),hIe=o(" \u2014 "),Q7=a("a"),uIe=o("IBertConfig"),pIe=o(" (I-BERT model)"),_Ie=l(),mf=a("li"),cQ=a("strong"),bIe=o("imagegpt"),vIe=o(" \u2014 "),H7=a("a"),TIe=o("ImageGPTConfig"),FIe=o(" (ImageGPT model)"),CIe=l(),ff=a("li"),mQ=a("strong"),MIe=o("layoutlm"),EIe=o(" \u2014 "),U7=a("a"),yIe=o("LayoutLMConfig"),wIe=o(" (LayoutLM model)"),AIe=l(),gf=a("li"),fQ=a("strong"),LIe=o("layoutlmv2"),BIe=o(" \u2014 "),J7=a("a"),xIe=o("LayoutLMv2Config"),kIe=o(" (LayoutLMv2 model)"),RIe=l(),hf=a("li"),gQ=a("strong"),SIe=o("led"),PIe=o(" \u2014 "),Y7=a("a"),$Ie=o("LEDConfig"),IIe=o(" (LED model)"),DIe=l(),uf=a("li"),hQ=a("strong"),jIe=o("longformer"),NIe=o(" \u2014 "),K7=a("a"),qIe=o("LongformerConfig"),GIe=o(" (Longformer model)"),OIe=l(),pf=a("li"),uQ=a("strong"),XIe=o("luke"),VIe=o(" \u2014 "),Z7=a("a"),zIe=o("LukeConfig"),WIe=o(" (LUKE model)"),QIe=l(),_f=a("li"),pQ=a("strong"),HIe=o("lxmert"),UIe=o(" \u2014 "),e9=a("a"),JIe=o("LxmertConfig"),YIe=o(" (LXMERT model)"),KIe=l(),bf=a("li"),_Q=a("strong"),ZIe=o("m2m_100"),eDe=o(" \u2014 "),o9=a("a"),oDe=o("M2M100Config"),rDe=o(" (M2M100 model)"),tDe=l(),vf=a("li"),bQ=a("strong"),aDe=o("marian"),sDe=o(" \u2014 "),r9=a("a"),nDe=o("MarianConfig"),lDe=o(" (Marian model)"),iDe=l(),Tf=a("li"),vQ=a("strong"),dDe=o("maskformer"),cDe=o(" \u2014 "),t9=a("a"),mDe=o("MaskFormerConfig"),fDe=o(" (MaskFormer model)"),gDe=l(),Ff=a("li"),TQ=a("strong"),hDe=o("mbart"),uDe=o(" \u2014 "),a9=a("a"),pDe=o("MBartConfig"),_De=o(" (mBART model)"),bDe=l(),Cf=a("li"),FQ=a("strong"),vDe=o("megatron-bert"),TDe=o(" \u2014 "),s9=a("a"),FDe=o("MegatronBertConfig"),CDe=o(" (MegatronBert model)"),MDe=l(),Mf=a("li"),CQ=a("strong"),EDe=o("mobilebert"),yDe=o(" \u2014 "),n9=a("a"),wDe=o("MobileBertConfig"),ADe=o(" (MobileBERT model)"),LDe=l(),Ef=a("li"),MQ=a("strong"),BDe=o("mpnet"),xDe=o(" \u2014 "),l9=a("a"),kDe=o("MPNetConfig"),RDe=o(" (MPNet model)"),SDe=l(),yf=a("li"),EQ=a("strong"),PDe=o("mt5"),$De=o(" \u2014 "),i9=a("a"),IDe=o("MT5Config"),DDe=o(" (mT5 model)"),jDe=l(),wf=a("li"),yQ=a("strong"),NDe=o("nystromformer"),qDe=o(" \u2014 "),d9=a("a"),GDe=o("NystromformerConfig"),ODe=o(" (Nystromformer model)"),XDe=l(),Af=a("li"),wQ=a("strong"),VDe=o("openai-gpt"),zDe=o(" \u2014 "),c9=a("a"),WDe=o("OpenAIGPTConfig"),QDe=o(" (OpenAI GPT model)"),HDe=l(),Lf=a("li"),AQ=a("strong"),UDe=o("pegasus"),JDe=o(" \u2014 "),m9=a("a"),YDe=o("PegasusConfig"),KDe=o(" (Pegasus model)"),ZDe=l(),Bf=a("li"),LQ=a("strong"),eje=o("perceiver"),oje=o(" \u2014 "),f9=a("a"),rje=o("PerceiverConfig"),tje=o(" (Perceiver model)"),aje=l(),xf=a("li"),BQ=a("strong"),sje=o("plbart"),nje=o(" \u2014 "),g9=a("a"),lje=o("PLBartConfig"),ije=o(" (PLBart model)"),dje=l(),kf=a("li"),xQ=a("strong"),cje=o("poolformer"),mje=o(" \u2014 "),h9=a("a"),fje=o("PoolFormerConfig"),gje=o(" (PoolFormer model)"),hje=l(),Rf=a("li"),kQ=a("strong"),uje=o("prophetnet"),pje=o(" \u2014 "),u9=a("a"),_je=o("ProphetNetConfig"),bje=o(" (ProphetNet model)"),vje=l(),Sf=a("li"),RQ=a("strong"),Tje=o("qdqbert"),Fje=o(" \u2014 "),p9=a("a"),Cje=o("QDQBertConfig"),Mje=o(" (QDQBert model)"),Eje=l(),Pf=a("li"),SQ=a("strong"),yje=o("rag"),wje=o(" \u2014 "),_9=a("a"),Aje=o("RagConfig"),Lje=o(" (RAG model)"),Bje=l(),$f=a("li"),PQ=a("strong"),xje=o("realm"),kje=o(" \u2014 "),b9=a("a"),Rje=o("RealmConfig"),Sje=o(" (Realm model)"),Pje=l(),If=a("li"),$Q=a("strong"),$je=o("reformer"),Ije=o(" \u2014 "),v9=a("a"),Dje=o("ReformerConfig"),jje=o(" (Reformer model)"),Nje=l(),Df=a("li"),IQ=a("strong"),qje=o("rembert"),Gje=o(" \u2014 "),T9=a("a"),Oje=o("RemBertConfig"),Xje=o(" (RemBERT model)"),Vje=l(),jf=a("li"),DQ=a("strong"),zje=o("retribert"),Wje=o(" \u2014 "),F9=a("a"),Qje=o("RetriBertConfig"),Hje=o(" (RetriBERT model)"),Uje=l(),Nf=a("li"),jQ=a("strong"),Jje=o("roberta"),Yje=o(" \u2014 "),C9=a("a"),Kje=o("RobertaConfig"),Zje=o(" (RoBERTa model)"),eNe=l(),qf=a("li"),NQ=a("strong"),oNe=o("roformer"),rNe=o(" \u2014 "),M9=a("a"),tNe=o("RoFormerConfig"),aNe=o(" (RoFormer model)"),sNe=l(),Gf=a("li"),qQ=a("strong"),nNe=o("segformer"),lNe=o(" \u2014 "),E9=a("a"),iNe=o("SegformerConfig"),dNe=o(" (SegFormer model)"),cNe=l(),Of=a("li"),GQ=a("strong"),mNe=o("sew"),fNe=o(" \u2014 "),y9=a("a"),gNe=o("SEWConfig"),hNe=o(" (SEW model)"),uNe=l(),Xf=a("li"),OQ=a("strong"),pNe=o("sew-d"),_Ne=o(" \u2014 "),w9=a("a"),bNe=o("SEWDConfig"),vNe=o(" (SEW-D model)"),TNe=l(),Vf=a("li"),XQ=a("strong"),FNe=o("speech-encoder-decoder"),CNe=o(" \u2014 "),A9=a("a"),MNe=o("SpeechEncoderDecoderConfig"),ENe=o(" (Speech Encoder decoder model)"),yNe=l(),zf=a("li"),VQ=a("strong"),wNe=o("speech_to_text"),ANe=o(" \u2014 "),L9=a("a"),LNe=o("Speech2TextConfig"),BNe=o(" (Speech2Text model)"),xNe=l(),Wf=a("li"),zQ=a("strong"),kNe=o("speech_to_text_2"),RNe=o(" \u2014 "),B9=a("a"),SNe=o("Speech2Text2Config"),PNe=o(" (Speech2Text2 model)"),$Ne=l(),Qf=a("li"),WQ=a("strong"),INe=o("splinter"),DNe=o(" \u2014 "),x9=a("a"),jNe=o("SplinterConfig"),NNe=o(" (Splinter model)"),qNe=l(),Hf=a("li"),QQ=a("strong"),GNe=o("squeezebert"),ONe=o(" \u2014 "),k9=a("a"),XNe=o("SqueezeBertConfig"),VNe=o(" (SqueezeBERT model)"),zNe=l(),Uf=a("li"),HQ=a("strong"),WNe=o("swin"),QNe=o(" \u2014 "),R9=a("a"),HNe=o("SwinConfig"),UNe=o(" (Swin model)"),JNe=l(),Jf=a("li"),UQ=a("strong"),YNe=o("t5"),KNe=o(" \u2014 "),S9=a("a"),ZNe=o("T5Config"),eqe=o(" (T5 model)"),oqe=l(),Yf=a("li"),JQ=a("strong"),rqe=o("tapas"),tqe=o(" \u2014 "),P9=a("a"),aqe=o("TapasConfig"),sqe=o(" (TAPAS model)"),nqe=l(),Kf=a("li"),YQ=a("strong"),lqe=o("transfo-xl"),iqe=o(" \u2014 "),$9=a("a"),dqe=o("TransfoXLConfig"),cqe=o(" (Transformer-XL model)"),mqe=l(),Zf=a("li"),KQ=a("strong"),fqe=o("trocr"),gqe=o(" \u2014 "),I9=a("a"),hqe=o("TrOCRConfig"),uqe=o(" (TrOCR model)"),pqe=l(),eg=a("li"),ZQ=a("strong"),_qe=o("unispeech"),bqe=o(" \u2014 "),D9=a("a"),vqe=o("UniSpeechConfig"),Tqe=o(" (UniSpeech model)"),Fqe=l(),og=a("li"),eH=a("strong"),Cqe=o("unispeech-sat"),Mqe=o(" \u2014 "),j9=a("a"),Eqe=o("UniSpeechSatConfig"),yqe=o(" (UniSpeechSat model)"),wqe=l(),rg=a("li"),oH=a("strong"),Aqe=o("vilt"),Lqe=o(" \u2014 "),N9=a("a"),Bqe=o("ViltConfig"),xqe=o(" (ViLT model)"),kqe=l(),tg=a("li"),rH=a("strong"),Rqe=o("vision-encoder-decoder"),Sqe=o(" \u2014 "),q9=a("a"),Pqe=o("VisionEncoderDecoderConfig"),$qe=o(" (Vision Encoder decoder model)"),Iqe=l(),ag=a("li"),tH=a("strong"),Dqe=o("vision-text-dual-encoder"),jqe=o(" \u2014 "),G9=a("a"),Nqe=o("VisionTextDualEncoderConfig"),qqe=o(" (VisionTextDualEncoder model)"),Gqe=l(),sg=a("li"),aH=a("strong"),Oqe=o("visual_bert"),Xqe=o(" \u2014 "),O9=a("a"),Vqe=o("VisualBertConfig"),zqe=o(" (VisualBert model)"),Wqe=l(),ng=a("li"),sH=a("strong"),Qqe=o("vit"),Hqe=o(" \u2014 "),X9=a("a"),Uqe=o("ViTConfig"),Jqe=o(" (ViT model)"),Yqe=l(),lg=a("li"),nH=a("strong"),Kqe=o("vit_mae"),Zqe=o(" \u2014 "),V9=a("a"),eGe=o("ViTMAEConfig"),oGe=o(" (ViTMAE model)"),rGe=l(),ig=a("li"),lH=a("strong"),tGe=o("wav2vec2"),aGe=o(" \u2014 "),z9=a("a"),sGe=o("Wav2Vec2Config"),nGe=o(" (Wav2Vec2 model)"),lGe=l(),dg=a("li"),iH=a("strong"),iGe=o("wavlm"),dGe=o(" \u2014 "),W9=a("a"),cGe=o("WavLMConfig"),mGe=o(" (WavLM model)"),fGe=l(),cg=a("li"),dH=a("strong"),gGe=o("xglm"),hGe=o(" \u2014 "),Q9=a("a"),uGe=o("XGLMConfig"),pGe=o(" (XGLM model)"),_Ge=l(),mg=a("li"),cH=a("strong"),bGe=o("xlm"),vGe=o(" \u2014 "),H9=a("a"),TGe=o("XLMConfig"),FGe=o(" (XLM model)"),CGe=l(),fg=a("li"),mH=a("strong"),MGe=o("xlm-prophetnet"),EGe=o(" \u2014 "),U9=a("a"),yGe=o("XLMProphetNetConfig"),wGe=o(" (XLMProphetNet model)"),AGe=l(),gg=a("li"),fH=a("strong"),LGe=o("xlm-roberta"),BGe=o(" \u2014 "),J9=a("a"),xGe=o("XLMRobertaConfig"),kGe=o(" (XLM-RoBERTa model)"),RGe=l(),hg=a("li"),gH=a("strong"),SGe=o("xlm-roberta-xl"),PGe=o(" \u2014 "),Y9=a("a"),$Ge=o("XLMRobertaXLConfig"),IGe=o(" (XLM-RoBERTa-XL model)"),DGe=l(),ug=a("li"),hH=a("strong"),jGe=o("xlnet"),NGe=o(" \u2014 "),K9=a("a"),qGe=o("XLNetConfig"),GGe=o(" (XLNet model)"),OGe=l(),pg=a("li"),uH=a("strong"),XGe=o("yoso"),VGe=o(" \u2014 "),Z9=a("a"),zGe=o("YosoConfig"),WGe=o(" (YOSO model)"),QGe=l(),pH=a("p"),HGe=o("Examples:"),UGe=l(),m(S5.$$.fragment),JGe=l(),_g=a("div"),m(P5.$$.fragment),YGe=l(),_H=a("p"),KGe=o("Register a new configuration for this class."),R9e=l(),ji=a("h2"),bg=a("a"),bH=a("span"),m($5.$$.fragment),ZGe=l(),vH=a("span"),eOe=o("AutoTokenizer"),S9e=l(),Vo=a("div"),m(I5.$$.fragment),oOe=l(),D5=a("p"),rOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),tOe=o("AutoTokenizer.from_pretrained()"),aOe=o(" class method."),sOe=l(),j5=a("p"),nOe=o("This class cannot be instantiated directly using "),TH=a("code"),lOe=o("__init__()"),iOe=o(" (throws an error)."),dOe=l(),fo=a("div"),m(N5.$$.fragment),cOe=l(),FH=a("p"),mOe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fOe=l(),Da=a("p"),gOe=o("The tokenizer class to instantiate is selected based on the "),CH=a("code"),hOe=o("model_type"),uOe=o(` property of the config object (either
passed as an argument or loaded from `),MH=a("code"),pOe=o("pretrained_model_name_or_path"),_Oe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EH=a("code"),bOe=o("pretrained_model_name_or_path"),vOe=o(":"),TOe=l(),M=a("ul"),qs=a("li"),yH=a("strong"),FOe=o("albert"),COe=o(" \u2014 "),oB=a("a"),MOe=o("AlbertTokenizer"),EOe=o(" or "),rB=a("a"),yOe=o("AlbertTokenizerFast"),wOe=o(" (ALBERT model)"),AOe=l(),Gs=a("li"),wH=a("strong"),LOe=o("bart"),BOe=o(" \u2014 "),tB=a("a"),xOe=o("BartTokenizer"),kOe=o(" or "),aB=a("a"),ROe=o("BartTokenizerFast"),SOe=o(" (BART model)"),POe=l(),Os=a("li"),AH=a("strong"),$Oe=o("barthez"),IOe=o(" \u2014 "),sB=a("a"),DOe=o("BarthezTokenizer"),jOe=o(" or "),nB=a("a"),NOe=o("BarthezTokenizerFast"),qOe=o(" (BARThez model)"),GOe=l(),vg=a("li"),LH=a("strong"),OOe=o("bartpho"),XOe=o(" \u2014 "),lB=a("a"),VOe=o("BartphoTokenizer"),zOe=o(" (BARTpho model)"),WOe=l(),Xs=a("li"),BH=a("strong"),QOe=o("bert"),HOe=o(" \u2014 "),iB=a("a"),UOe=o("BertTokenizer"),JOe=o(" or "),dB=a("a"),YOe=o("BertTokenizerFast"),KOe=o(" (BERT model)"),ZOe=l(),Tg=a("li"),xH=a("strong"),eXe=o("bert-generation"),oXe=o(" \u2014 "),cB=a("a"),rXe=o("BertGenerationTokenizer"),tXe=o(" (Bert Generation model)"),aXe=l(),Fg=a("li"),kH=a("strong"),sXe=o("bert-japanese"),nXe=o(" \u2014 "),mB=a("a"),lXe=o("BertJapaneseTokenizer"),iXe=o(" (BertJapanese model)"),dXe=l(),Cg=a("li"),RH=a("strong"),cXe=o("bertweet"),mXe=o(" \u2014 "),fB=a("a"),fXe=o("BertweetTokenizer"),gXe=o(" (Bertweet model)"),hXe=l(),Vs=a("li"),SH=a("strong"),uXe=o("big_bird"),pXe=o(" \u2014 "),gB=a("a"),_Xe=o("BigBirdTokenizer"),bXe=o(" or "),hB=a("a"),vXe=o("BigBirdTokenizerFast"),TXe=o(" (BigBird model)"),FXe=l(),zs=a("li"),PH=a("strong"),CXe=o("bigbird_pegasus"),MXe=o(" \u2014 "),uB=a("a"),EXe=o("PegasusTokenizer"),yXe=o(" or "),pB=a("a"),wXe=o("PegasusTokenizerFast"),AXe=o(" (BigBirdPegasus model)"),LXe=l(),Ws=a("li"),$H=a("strong"),BXe=o("blenderbot"),xXe=o(" \u2014 "),_B=a("a"),kXe=o("BlenderbotTokenizer"),RXe=o(" or "),bB=a("a"),SXe=o("BlenderbotTokenizerFast"),PXe=o(" (Blenderbot model)"),$Xe=l(),Mg=a("li"),IH=a("strong"),IXe=o("blenderbot-small"),DXe=o(" \u2014 "),vB=a("a"),jXe=o("BlenderbotSmallTokenizer"),NXe=o(" (BlenderbotSmall model)"),qXe=l(),Eg=a("li"),DH=a("strong"),GXe=o("byt5"),OXe=o(" \u2014 "),TB=a("a"),XXe=o("ByT5Tokenizer"),VXe=o(" (ByT5 model)"),zXe=l(),Qs=a("li"),jH=a("strong"),WXe=o("camembert"),QXe=o(" \u2014 "),FB=a("a"),HXe=o("CamembertTokenizer"),UXe=o(" or "),CB=a("a"),JXe=o("CamembertTokenizerFast"),YXe=o(" (CamemBERT model)"),KXe=l(),yg=a("li"),NH=a("strong"),ZXe=o("canine"),eVe=o(" \u2014 "),MB=a("a"),oVe=o("CanineTokenizer"),rVe=o(" (Canine model)"),tVe=l(),Hs=a("li"),qH=a("strong"),aVe=o("clip"),sVe=o(" \u2014 "),EB=a("a"),nVe=o("CLIPTokenizer"),lVe=o(" or "),yB=a("a"),iVe=o("CLIPTokenizerFast"),dVe=o(" (CLIP model)"),cVe=l(),Us=a("li"),GH=a("strong"),mVe=o("convbert"),fVe=o(" \u2014 "),wB=a("a"),gVe=o("ConvBertTokenizer"),hVe=o(" or "),AB=a("a"),uVe=o("ConvBertTokenizerFast"),pVe=o(" (ConvBERT model)"),_Ve=l(),Js=a("li"),OH=a("strong"),bVe=o("cpm"),vVe=o(" \u2014 "),LB=a("a"),TVe=o("CpmTokenizer"),FVe=o(" or "),XH=a("code"),CVe=o("CpmTokenizerFast"),MVe=o(" (CPM model)"),EVe=l(),wg=a("li"),VH=a("strong"),yVe=o("ctrl"),wVe=o(" \u2014 "),BB=a("a"),AVe=o("CTRLTokenizer"),LVe=o(" (CTRL model)"),BVe=l(),Ys=a("li"),zH=a("strong"),xVe=o("deberta"),kVe=o(" \u2014 "),xB=a("a"),RVe=o("DebertaTokenizer"),SVe=o(" or "),kB=a("a"),PVe=o("DebertaTokenizerFast"),$Ve=o(" (DeBERTa model)"),IVe=l(),Ag=a("li"),WH=a("strong"),DVe=o("deberta-v2"),jVe=o(" \u2014 "),RB=a("a"),NVe=o("DebertaV2Tokenizer"),qVe=o(" (DeBERTa-v2 model)"),GVe=l(),Ks=a("li"),QH=a("strong"),OVe=o("distilbert"),XVe=o(" \u2014 "),SB=a("a"),VVe=o("DistilBertTokenizer"),zVe=o(" or "),PB=a("a"),WVe=o("DistilBertTokenizerFast"),QVe=o(" (DistilBERT model)"),HVe=l(),Zs=a("li"),HH=a("strong"),UVe=o("dpr"),JVe=o(" \u2014 "),$B=a("a"),YVe=o("DPRQuestionEncoderTokenizer"),KVe=o(" or "),IB=a("a"),ZVe=o("DPRQuestionEncoderTokenizerFast"),eze=o(" (DPR model)"),oze=l(),en=a("li"),UH=a("strong"),rze=o("electra"),tze=o(" \u2014 "),DB=a("a"),aze=o("ElectraTokenizer"),sze=o(" or "),jB=a("a"),nze=o("ElectraTokenizerFast"),lze=o(" (ELECTRA model)"),ize=l(),Lg=a("li"),JH=a("strong"),dze=o("flaubert"),cze=o(" \u2014 "),NB=a("a"),mze=o("FlaubertTokenizer"),fze=o(" (FlauBERT model)"),gze=l(),on=a("li"),YH=a("strong"),hze=o("fnet"),uze=o(" \u2014 "),qB=a("a"),pze=o("FNetTokenizer"),_ze=o(" or "),GB=a("a"),bze=o("FNetTokenizerFast"),vze=o(" (FNet model)"),Tze=l(),Bg=a("li"),KH=a("strong"),Fze=o("fsmt"),Cze=o(" \u2014 "),OB=a("a"),Mze=o("FSMTTokenizer"),Eze=o(" (FairSeq Machine-Translation model)"),yze=l(),rn=a("li"),ZH=a("strong"),wze=o("funnel"),Aze=o(" \u2014 "),XB=a("a"),Lze=o("FunnelTokenizer"),Bze=o(" or "),VB=a("a"),xze=o("FunnelTokenizerFast"),kze=o(" (Funnel Transformer model)"),Rze=l(),tn=a("li"),eU=a("strong"),Sze=o("gpt2"),Pze=o(" \u2014 "),zB=a("a"),$ze=o("GPT2Tokenizer"),Ize=o(" or "),WB=a("a"),Dze=o("GPT2TokenizerFast"),jze=o(" (OpenAI GPT-2 model)"),Nze=l(),an=a("li"),oU=a("strong"),qze=o("gpt_neo"),Gze=o(" \u2014 "),QB=a("a"),Oze=o("GPT2Tokenizer"),Xze=o(" or "),HB=a("a"),Vze=o("GPT2TokenizerFast"),zze=o(" (GPT Neo model)"),Wze=l(),sn=a("li"),rU=a("strong"),Qze=o("herbert"),Hze=o(" \u2014 "),UB=a("a"),Uze=o("HerbertTokenizer"),Jze=o(" or "),JB=a("a"),Yze=o("HerbertTokenizerFast"),Kze=o(" (HerBERT model)"),Zze=l(),xg=a("li"),tU=a("strong"),eWe=o("hubert"),oWe=o(" \u2014 "),YB=a("a"),rWe=o("Wav2Vec2CTCTokenizer"),tWe=o(" (Hubert model)"),aWe=l(),nn=a("li"),aU=a("strong"),sWe=o("ibert"),nWe=o(" \u2014 "),KB=a("a"),lWe=o("RobertaTokenizer"),iWe=o(" or "),ZB=a("a"),dWe=o("RobertaTokenizerFast"),cWe=o(" (I-BERT model)"),mWe=l(),ln=a("li"),sU=a("strong"),fWe=o("layoutlm"),gWe=o(" \u2014 "),ex=a("a"),hWe=o("LayoutLMTokenizer"),uWe=o(" or "),ox=a("a"),pWe=o("LayoutLMTokenizerFast"),_We=o(" (LayoutLM model)"),bWe=l(),dn=a("li"),nU=a("strong"),vWe=o("layoutlmv2"),TWe=o(" \u2014 "),rx=a("a"),FWe=o("LayoutLMv2Tokenizer"),CWe=o(" or "),tx=a("a"),MWe=o("LayoutLMv2TokenizerFast"),EWe=o(" (LayoutLMv2 model)"),yWe=l(),cn=a("li"),lU=a("strong"),wWe=o("layoutxlm"),AWe=o(" \u2014 "),ax=a("a"),LWe=o("LayoutXLMTokenizer"),BWe=o(" or "),sx=a("a"),xWe=o("LayoutXLMTokenizerFast"),kWe=o(" (LayoutXLM model)"),RWe=l(),mn=a("li"),iU=a("strong"),SWe=o("led"),PWe=o(" \u2014 "),nx=a("a"),$We=o("LEDTokenizer"),IWe=o(" or "),lx=a("a"),DWe=o("LEDTokenizerFast"),jWe=o(" (LED model)"),NWe=l(),fn=a("li"),dU=a("strong"),qWe=o("longformer"),GWe=o(" \u2014 "),ix=a("a"),OWe=o("LongformerTokenizer"),XWe=o(" or "),dx=a("a"),VWe=o("LongformerTokenizerFast"),zWe=o(" (Longformer model)"),WWe=l(),kg=a("li"),cU=a("strong"),QWe=o("luke"),HWe=o(" \u2014 "),cx=a("a"),UWe=o("LukeTokenizer"),JWe=o(" (LUKE model)"),YWe=l(),gn=a("li"),mU=a("strong"),KWe=o("lxmert"),ZWe=o(" \u2014 "),mx=a("a"),eQe=o("LxmertTokenizer"),oQe=o(" or "),fx=a("a"),rQe=o("LxmertTokenizerFast"),tQe=o(" (LXMERT model)"),aQe=l(),Rg=a("li"),fU=a("strong"),sQe=o("m2m_100"),nQe=o(" \u2014 "),gx=a("a"),lQe=o("M2M100Tokenizer"),iQe=o(" (M2M100 model)"),dQe=l(),Sg=a("li"),gU=a("strong"),cQe=o("marian"),mQe=o(" \u2014 "),hx=a("a"),fQe=o("MarianTokenizer"),gQe=o(" (Marian model)"),hQe=l(),hn=a("li"),hU=a("strong"),uQe=o("mbart"),pQe=o(" \u2014 "),ux=a("a"),_Qe=o("MBartTokenizer"),bQe=o(" or "),px=a("a"),vQe=o("MBartTokenizerFast"),TQe=o(" (mBART model)"),FQe=l(),un=a("li"),uU=a("strong"),CQe=o("mbart50"),MQe=o(" \u2014 "),_x=a("a"),EQe=o("MBart50Tokenizer"),yQe=o(" or "),bx=a("a"),wQe=o("MBart50TokenizerFast"),AQe=o(" (mBART-50 model)"),LQe=l(),Pg=a("li"),pU=a("strong"),BQe=o("mluke"),xQe=o(" \u2014 "),vx=a("a"),kQe=o("MLukeTokenizer"),RQe=o(" (mLUKE model)"),SQe=l(),pn=a("li"),_U=a("strong"),PQe=o("mobilebert"),$Qe=o(" \u2014 "),Tx=a("a"),IQe=o("MobileBertTokenizer"),DQe=o(" or "),Fx=a("a"),jQe=o("MobileBertTokenizerFast"),NQe=o(" (MobileBERT model)"),qQe=l(),_n=a("li"),bU=a("strong"),GQe=o("mpnet"),OQe=o(" \u2014 "),Cx=a("a"),XQe=o("MPNetTokenizer"),VQe=o(" or "),Mx=a("a"),zQe=o("MPNetTokenizerFast"),WQe=o(" (MPNet model)"),QQe=l(),bn=a("li"),vU=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),Ex=a("a"),JQe=o("MT5Tokenizer"),YQe=o(" or "),yx=a("a"),KQe=o("MT5TokenizerFast"),ZQe=o(" (mT5 model)"),eHe=l(),vn=a("li"),TU=a("strong"),oHe=o("openai-gpt"),rHe=o(" \u2014 "),wx=a("a"),tHe=o("OpenAIGPTTokenizer"),aHe=o(" or "),Ax=a("a"),sHe=o("OpenAIGPTTokenizerFast"),nHe=o(" (OpenAI GPT model)"),lHe=l(),Tn=a("li"),FU=a("strong"),iHe=o("pegasus"),dHe=o(" \u2014 "),Lx=a("a"),cHe=o("PegasusTokenizer"),mHe=o(" or "),Bx=a("a"),fHe=o("PegasusTokenizerFast"),gHe=o(" (Pegasus model)"),hHe=l(),$g=a("li"),CU=a("strong"),uHe=o("perceiver"),pHe=o(" \u2014 "),xx=a("a"),_He=o("PerceiverTokenizer"),bHe=o(" (Perceiver model)"),vHe=l(),Ig=a("li"),MU=a("strong"),THe=o("phobert"),FHe=o(" \u2014 "),kx=a("a"),CHe=o("PhobertTokenizer"),MHe=o(" (PhoBERT model)"),EHe=l(),Dg=a("li"),EU=a("strong"),yHe=o("plbart"),wHe=o(" \u2014 "),Rx=a("a"),AHe=o("PLBartTokenizer"),LHe=o(" (PLBart model)"),BHe=l(),jg=a("li"),yU=a("strong"),xHe=o("prophetnet"),kHe=o(" \u2014 "),Sx=a("a"),RHe=o("ProphetNetTokenizer"),SHe=o(" (ProphetNet model)"),PHe=l(),Fn=a("li"),wU=a("strong"),$He=o("qdqbert"),IHe=o(" \u2014 "),Px=a("a"),DHe=o("BertTokenizer"),jHe=o(" or "),$x=a("a"),NHe=o("BertTokenizerFast"),qHe=o(" (QDQBert model)"),GHe=l(),Ng=a("li"),AU=a("strong"),OHe=o("rag"),XHe=o(" \u2014 "),Ix=a("a"),VHe=o("RagTokenizer"),zHe=o(" (RAG model)"),WHe=l(),Cn=a("li"),LU=a("strong"),QHe=o("reformer"),HHe=o(" \u2014 "),Dx=a("a"),UHe=o("ReformerTokenizer"),JHe=o(" or "),jx=a("a"),YHe=o("ReformerTokenizerFast"),KHe=o(" (Reformer model)"),ZHe=l(),Mn=a("li"),BU=a("strong"),eUe=o("rembert"),oUe=o(" \u2014 "),Nx=a("a"),rUe=o("RemBertTokenizer"),tUe=o(" or "),qx=a("a"),aUe=o("RemBertTokenizerFast"),sUe=o(" (RemBERT model)"),nUe=l(),En=a("li"),xU=a("strong"),lUe=o("retribert"),iUe=o(" \u2014 "),Gx=a("a"),dUe=o("RetriBertTokenizer"),cUe=o(" or "),Ox=a("a"),mUe=o("RetriBertTokenizerFast"),fUe=o(" (RetriBERT model)"),gUe=l(),yn=a("li"),kU=a("strong"),hUe=o("roberta"),uUe=o(" \u2014 "),Xx=a("a"),pUe=o("RobertaTokenizer"),_Ue=o(" or "),Vx=a("a"),bUe=o("RobertaTokenizerFast"),vUe=o(" (RoBERTa model)"),TUe=l(),wn=a("li"),RU=a("strong"),FUe=o("roformer"),CUe=o(" \u2014 "),zx=a("a"),MUe=o("RoFormerTokenizer"),EUe=o(" or "),Wx=a("a"),yUe=o("RoFormerTokenizerFast"),wUe=o(" (RoFormer model)"),AUe=l(),qg=a("li"),SU=a("strong"),LUe=o("speech_to_text"),BUe=o(" \u2014 "),Qx=a("a"),xUe=o("Speech2TextTokenizer"),kUe=o(" (Speech2Text model)"),RUe=l(),Gg=a("li"),PU=a("strong"),SUe=o("speech_to_text_2"),PUe=o(" \u2014 "),Hx=a("a"),$Ue=o("Speech2Text2Tokenizer"),IUe=o(" (Speech2Text2 model)"),DUe=l(),An=a("li"),$U=a("strong"),jUe=o("splinter"),NUe=o(" \u2014 "),Ux=a("a"),qUe=o("SplinterTokenizer"),GUe=o(" or "),Jx=a("a"),OUe=o("SplinterTokenizerFast"),XUe=o(" (Splinter model)"),VUe=l(),Ln=a("li"),IU=a("strong"),zUe=o("squeezebert"),WUe=o(" \u2014 "),Yx=a("a"),QUe=o("SqueezeBertTokenizer"),HUe=o(" or "),Kx=a("a"),UUe=o("SqueezeBertTokenizerFast"),JUe=o(" (SqueezeBERT model)"),YUe=l(),Bn=a("li"),DU=a("strong"),KUe=o("t5"),ZUe=o(" \u2014 "),Zx=a("a"),eJe=o("T5Tokenizer"),oJe=o(" or "),ek=a("a"),rJe=o("T5TokenizerFast"),tJe=o(" (T5 model)"),aJe=l(),Og=a("li"),jU=a("strong"),sJe=o("tapas"),nJe=o(" \u2014 "),ok=a("a"),lJe=o("TapasTokenizer"),iJe=o(" (TAPAS model)"),dJe=l(),Xg=a("li"),NU=a("strong"),cJe=o("transfo-xl"),mJe=o(" \u2014 "),rk=a("a"),fJe=o("TransfoXLTokenizer"),gJe=o(" (Transformer-XL model)"),hJe=l(),Vg=a("li"),qU=a("strong"),uJe=o("wav2vec2"),pJe=o(" \u2014 "),tk=a("a"),_Je=o("Wav2Vec2CTCTokenizer"),bJe=o(" (Wav2Vec2 model)"),vJe=l(),zg=a("li"),GU=a("strong"),TJe=o("wav2vec2_phoneme"),FJe=o(" \u2014 "),ak=a("a"),CJe=o("Wav2Vec2PhonemeCTCTokenizer"),MJe=o(" (Wav2Vec2Phoneme model)"),EJe=l(),xn=a("li"),OU=a("strong"),yJe=o("xglm"),wJe=o(" \u2014 "),sk=a("a"),AJe=o("XGLMTokenizer"),LJe=o(" or "),nk=a("a"),BJe=o("XGLMTokenizerFast"),xJe=o(" (XGLM model)"),kJe=l(),Wg=a("li"),XU=a("strong"),RJe=o("xlm"),SJe=o(" \u2014 "),lk=a("a"),PJe=o("XLMTokenizer"),$Je=o(" (XLM model)"),IJe=l(),Qg=a("li"),VU=a("strong"),DJe=o("xlm-prophetnet"),jJe=o(" \u2014 "),ik=a("a"),NJe=o("XLMProphetNetTokenizer"),qJe=o(" (XLMProphetNet model)"),GJe=l(),kn=a("li"),zU=a("strong"),OJe=o("xlm-roberta"),XJe=o(" \u2014 "),dk=a("a"),VJe=o("XLMRobertaTokenizer"),zJe=o(" or "),ck=a("a"),WJe=o("XLMRobertaTokenizerFast"),QJe=o(" (XLM-RoBERTa model)"),HJe=l(),Rn=a("li"),WU=a("strong"),UJe=o("xlnet"),JJe=o(" \u2014 "),mk=a("a"),YJe=o("XLNetTokenizer"),KJe=o(" or "),fk=a("a"),ZJe=o("XLNetTokenizerFast"),eYe=o(" (XLNet model)"),oYe=l(),QU=a("p"),rYe=o("Examples:"),tYe=l(),m(q5.$$.fragment),aYe=l(),Hg=a("div"),m(G5.$$.fragment),sYe=l(),HU=a("p"),nYe=o("Register a new tokenizer in this mapping."),P9e=l(),Ni=a("h2"),Ug=a("a"),UU=a("span"),m(O5.$$.fragment),lYe=l(),JU=a("span"),iYe=o("AutoFeatureExtractor"),$9e=l(),zo=a("div"),m(X5.$$.fragment),dYe=l(),V5=a("p"),cYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gk=a("a"),mYe=o("AutoFeatureExtractor.from_pretrained()"),fYe=o(" class method."),gYe=l(),z5=a("p"),hYe=o("This class cannot be instantiated directly using "),YU=a("code"),uYe=o("__init__()"),pYe=o(" (throws an error)."),_Ye=l(),xe=a("div"),m(W5.$$.fragment),bYe=l(),KU=a("p"),vYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),TYe=l(),ja=a("p"),FYe=o("The feature extractor class to instantiate is selected based on the "),ZU=a("code"),CYe=o("model_type"),MYe=o(` property of the config object
(either passed as an argument or loaded from `),eJ=a("code"),EYe=o("pretrained_model_name_or_path"),yYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oJ=a("code"),wYe=o("pretrained_model_name_or_path"),AYe=o(":"),LYe=l(),ne=a("ul"),Jg=a("li"),rJ=a("strong"),BYe=o("beit"),xYe=o(" \u2014 "),hk=a("a"),kYe=o("BeitFeatureExtractor"),RYe=o(" (BEiT model)"),SYe=l(),Yg=a("li"),tJ=a("strong"),PYe=o("clip"),$Ye=o(" \u2014 "),uk=a("a"),IYe=o("CLIPFeatureExtractor"),DYe=o(" (CLIP model)"),jYe=l(),Kg=a("li"),aJ=a("strong"),NYe=o("convnext"),qYe=o(" \u2014 "),pk=a("a"),GYe=o("ConvNextFeatureExtractor"),OYe=o(" (ConvNext model)"),XYe=l(),Zg=a("li"),sJ=a("strong"),VYe=o("deit"),zYe=o(" \u2014 "),_k=a("a"),WYe=o("DeiTFeatureExtractor"),QYe=o(" (DeiT model)"),HYe=l(),eh=a("li"),nJ=a("strong"),UYe=o("detr"),JYe=o(" \u2014 "),bk=a("a"),YYe=o("DetrFeatureExtractor"),KYe=o(" (DETR model)"),ZYe=l(),oh=a("li"),lJ=a("strong"),eKe=o("hubert"),oKe=o(" \u2014 "),vk=a("a"),rKe=o("Wav2Vec2FeatureExtractor"),tKe=o(" (Hubert model)"),aKe=l(),rh=a("li"),iJ=a("strong"),sKe=o("layoutlmv2"),nKe=o(" \u2014 "),Tk=a("a"),lKe=o("LayoutLMv2FeatureExtractor"),iKe=o(" (LayoutLMv2 model)"),dKe=l(),th=a("li"),dJ=a("strong"),cKe=o("perceiver"),mKe=o(" \u2014 "),Fk=a("a"),fKe=o("PerceiverFeatureExtractor"),gKe=o(" (Perceiver model)"),hKe=l(),ah=a("li"),cJ=a("strong"),uKe=o("poolformer"),pKe=o(" \u2014 "),Ck=a("a"),_Ke=o("PoolFormerFeatureExtractor"),bKe=o(" (PoolFormer model)"),vKe=l(),sh=a("li"),mJ=a("strong"),TKe=o("segformer"),FKe=o(" \u2014 "),Mk=a("a"),CKe=o("SegformerFeatureExtractor"),MKe=o(" (SegFormer model)"),EKe=l(),nh=a("li"),fJ=a("strong"),yKe=o("speech_to_text"),wKe=o(" \u2014 "),Ek=a("a"),AKe=o("Speech2TextFeatureExtractor"),LKe=o(" (Speech2Text model)"),BKe=l(),lh=a("li"),gJ=a("strong"),xKe=o("swin"),kKe=o(" \u2014 "),yk=a("a"),RKe=o("ViTFeatureExtractor"),SKe=o(" (Swin model)"),PKe=l(),ih=a("li"),hJ=a("strong"),$Ke=o("vit"),IKe=o(" \u2014 "),wk=a("a"),DKe=o("ViTFeatureExtractor"),jKe=o(" (ViT model)"),NKe=l(),dh=a("li"),uJ=a("strong"),qKe=o("vit_mae"),GKe=o(" \u2014 "),Ak=a("a"),OKe=o("ViTFeatureExtractor"),XKe=o(" (ViTMAE model)"),VKe=l(),ch=a("li"),pJ=a("strong"),zKe=o("wav2vec2"),WKe=o(" \u2014 "),Lk=a("a"),QKe=o("Wav2Vec2FeatureExtractor"),HKe=o(" (Wav2Vec2 model)"),UKe=l(),m(mh.$$.fragment),JKe=l(),_J=a("p"),YKe=o("Examples:"),KKe=l(),m(Q5.$$.fragment),ZKe=l(),fh=a("div"),m(H5.$$.fragment),eZe=l(),bJ=a("p"),oZe=o("Register a new feature extractor for this class."),I9e=l(),qi=a("h2"),gh=a("a"),vJ=a("span"),m(U5.$$.fragment),rZe=l(),TJ=a("span"),tZe=o("AutoProcessor"),D9e=l(),Wo=a("div"),m(J5.$$.fragment),aZe=l(),Y5=a("p"),sZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bk=a("a"),nZe=o("AutoProcessor.from_pretrained()"),lZe=o(" class method."),iZe=l(),K5=a("p"),dZe=o("This class cannot be instantiated directly using "),FJ=a("code"),cZe=o("__init__()"),mZe=o(" (throws an error)."),fZe=l(),ke=a("div"),m(Z5.$$.fragment),gZe=l(),CJ=a("p"),hZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uZe=l(),Gi=a("p"),pZe=o("The processor class to instantiate is selected based on the "),MJ=a("code"),_Ze=o("model_type"),bZe=o(` property of the config object (either
passed as an argument or loaded from `),EJ=a("code"),vZe=o("pretrained_model_name_or_path"),TZe=o(" if possible):"),FZe=l(),we=a("ul"),hh=a("li"),yJ=a("strong"),CZe=o("clip"),MZe=o(" \u2014 "),xk=a("a"),EZe=o("CLIPProcessor"),yZe=o(" (CLIP model)"),wZe=l(),uh=a("li"),wJ=a("strong"),AZe=o("layoutlmv2"),LZe=o(" \u2014 "),kk=a("a"),BZe=o("LayoutLMv2Processor"),xZe=o(" (LayoutLMv2 model)"),kZe=l(),ph=a("li"),AJ=a("strong"),RZe=o("layoutxlm"),SZe=o(" \u2014 "),Rk=a("a"),PZe=o("LayoutXLMProcessor"),$Ze=o(" (LayoutXLM model)"),IZe=l(),_h=a("li"),LJ=a("strong"),DZe=o("speech_to_text"),jZe=o(" \u2014 "),Sk=a("a"),NZe=o("Speech2TextProcessor"),qZe=o(" (Speech2Text model)"),GZe=l(),bh=a("li"),BJ=a("strong"),OZe=o("speech_to_text_2"),XZe=o(" \u2014 "),Pk=a("a"),VZe=o("Speech2Text2Processor"),zZe=o(" (Speech2Text2 model)"),WZe=l(),vh=a("li"),xJ=a("strong"),QZe=o("trocr"),HZe=o(" \u2014 "),$k=a("a"),UZe=o("TrOCRProcessor"),JZe=o(" (TrOCR model)"),YZe=l(),Th=a("li"),kJ=a("strong"),KZe=o("vision-text-dual-encoder"),ZZe=o(" \u2014 "),Ik=a("a"),eeo=o("VisionTextDualEncoderProcessor"),oeo=o(" (VisionTextDualEncoder model)"),reo=l(),Fh=a("li"),RJ=a("strong"),teo=o("wav2vec2"),aeo=o(" \u2014 "),Dk=a("a"),seo=o("Wav2Vec2Processor"),neo=o(" (Wav2Vec2 model)"),leo=l(),m(Ch.$$.fragment),ieo=l(),SJ=a("p"),deo=o("Examples:"),ceo=l(),m(ey.$$.fragment),meo=l(),Mh=a("div"),m(oy.$$.fragment),feo=l(),PJ=a("p"),geo=o("Register a new processor for this class."),j9e=l(),Oi=a("h2"),Eh=a("a"),$J=a("span"),m(ry.$$.fragment),heo=l(),IJ=a("span"),ueo=o("AutoModel"),N9e=l(),Qo=a("div"),m(ty.$$.fragment),peo=l(),Xi=a("p"),_eo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DJ=a("code"),beo=o("from_pretrained()"),veo=o("class method or the "),jJ=a("code"),Teo=o("from_config()"),Feo=o(`class
method.`),Ceo=l(),ay=a("p"),Meo=o("This class cannot be instantiated directly using "),NJ=a("code"),Eeo=o("__init__()"),yeo=o(" (throws an error)."),weo=l(),qr=a("div"),m(sy.$$.fragment),Aeo=l(),qJ=a("p"),Leo=o("Instantiates one of the base model classes of the library from a configuration."),Beo=l(),Vi=a("p"),xeo=o(`Note:
Loading a model from its configuration file does `),GJ=a("strong"),keo=o("not"),Reo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("code"),Seo=o("from_pretrained()"),Peo=o("to load the model weights."),$eo=l(),XJ=a("p"),Ieo=o("Examples:"),Deo=l(),m(ny.$$.fragment),jeo=l(),Re=a("div"),m(ly.$$.fragment),Neo=l(),VJ=a("p"),qeo=o("Instantiate one of the base model classes of the library from a pretrained model."),Geo=l(),Na=a("p"),Oeo=o("The model class to instantiate is selected based on the "),zJ=a("code"),Xeo=o("model_type"),Veo=o(` property of the config object (either
passed as an argument or loaded from `),WJ=a("code"),zeo=o("pretrained_model_name_or_path"),Weo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QJ=a("code"),Qeo=o("pretrained_model_name_or_path"),Heo=o(":"),Ueo=l(),F=a("ul"),yh=a("li"),HJ=a("strong"),Jeo=o("albert"),Yeo=o(" \u2014 "),jk=a("a"),Keo=o("AlbertModel"),Zeo=o(" (ALBERT model)"),eoo=l(),wh=a("li"),UJ=a("strong"),ooo=o("bart"),roo=o(" \u2014 "),Nk=a("a"),too=o("BartModel"),aoo=o(" (BART model)"),soo=l(),Ah=a("li"),JJ=a("strong"),noo=o("beit"),loo=o(" \u2014 "),qk=a("a"),ioo=o("BeitModel"),doo=o(" (BEiT model)"),coo=l(),Lh=a("li"),YJ=a("strong"),moo=o("bert"),foo=o(" \u2014 "),Gk=a("a"),goo=o("BertModel"),hoo=o(" (BERT model)"),uoo=l(),Bh=a("li"),KJ=a("strong"),poo=o("bert-generation"),_oo=o(" \u2014 "),Ok=a("a"),boo=o("BertGenerationEncoder"),voo=o(" (Bert Generation model)"),Too=l(),xh=a("li"),ZJ=a("strong"),Foo=o("big_bird"),Coo=o(" \u2014 "),Xk=a("a"),Moo=o("BigBirdModel"),Eoo=o(" (BigBird model)"),yoo=l(),kh=a("li"),eY=a("strong"),woo=o("bigbird_pegasus"),Aoo=o(" \u2014 "),Vk=a("a"),Loo=o("BigBirdPegasusModel"),Boo=o(" (BigBirdPegasus model)"),xoo=l(),Rh=a("li"),oY=a("strong"),koo=o("blenderbot"),Roo=o(" \u2014 "),zk=a("a"),Soo=o("BlenderbotModel"),Poo=o(" (Blenderbot model)"),$oo=l(),Sh=a("li"),rY=a("strong"),Ioo=o("blenderbot-small"),Doo=o(" \u2014 "),Wk=a("a"),joo=o("BlenderbotSmallModel"),Noo=o(" (BlenderbotSmall model)"),qoo=l(),Ph=a("li"),tY=a("strong"),Goo=o("camembert"),Ooo=o(" \u2014 "),Qk=a("a"),Xoo=o("CamembertModel"),Voo=o(" (CamemBERT model)"),zoo=l(),$h=a("li"),aY=a("strong"),Woo=o("canine"),Qoo=o(" \u2014 "),Hk=a("a"),Hoo=o("CanineModel"),Uoo=o(" (Canine model)"),Joo=l(),Ih=a("li"),sY=a("strong"),Yoo=o("clip"),Koo=o(" \u2014 "),Uk=a("a"),Zoo=o("CLIPModel"),ero=o(" (CLIP model)"),oro=l(),Dh=a("li"),nY=a("strong"),rro=o("convbert"),tro=o(" \u2014 "),Jk=a("a"),aro=o("ConvBertModel"),sro=o(" (ConvBERT model)"),nro=l(),jh=a("li"),lY=a("strong"),lro=o("convnext"),iro=o(" \u2014 "),Yk=a("a"),dro=o("ConvNextModel"),cro=o(" (ConvNext model)"),mro=l(),Nh=a("li"),iY=a("strong"),fro=o("ctrl"),gro=o(" \u2014 "),Kk=a("a"),hro=o("CTRLModel"),uro=o(" (CTRL model)"),pro=l(),qh=a("li"),dY=a("strong"),_ro=o("data2vec-audio"),bro=o(" \u2014 "),Zk=a("a"),vro=o("Data2VecAudioModel"),Tro=o(" (Data2VecAudio model)"),Fro=l(),Gh=a("li"),cY=a("strong"),Cro=o("data2vec-text"),Mro=o(" \u2014 "),eR=a("a"),Ero=o("Data2VecTextModel"),yro=o(" (Data2VecText model)"),wro=l(),Oh=a("li"),mY=a("strong"),Aro=o("deberta"),Lro=o(" \u2014 "),oR=a("a"),Bro=o("DebertaModel"),xro=o(" (DeBERTa model)"),kro=l(),Xh=a("li"),fY=a("strong"),Rro=o("deberta-v2"),Sro=o(" \u2014 "),rR=a("a"),Pro=o("DebertaV2Model"),$ro=o(" (DeBERTa-v2 model)"),Iro=l(),Vh=a("li"),gY=a("strong"),Dro=o("deit"),jro=o(" \u2014 "),tR=a("a"),Nro=o("DeiTModel"),qro=o(" (DeiT model)"),Gro=l(),zh=a("li"),hY=a("strong"),Oro=o("detr"),Xro=o(" \u2014 "),aR=a("a"),Vro=o("DetrModel"),zro=o(" (DETR model)"),Wro=l(),Wh=a("li"),uY=a("strong"),Qro=o("distilbert"),Hro=o(" \u2014 "),sR=a("a"),Uro=o("DistilBertModel"),Jro=o(" (DistilBERT model)"),Yro=l(),Qh=a("li"),pY=a("strong"),Kro=o("dpr"),Zro=o(" \u2014 "),nR=a("a"),eto=o("DPRQuestionEncoder"),oto=o(" (DPR model)"),rto=l(),Hh=a("li"),_Y=a("strong"),tto=o("electra"),ato=o(" \u2014 "),lR=a("a"),sto=o("ElectraModel"),nto=o(" (ELECTRA model)"),lto=l(),Uh=a("li"),bY=a("strong"),ito=o("flaubert"),dto=o(" \u2014 "),iR=a("a"),cto=o("FlaubertModel"),mto=o(" (FlauBERT model)"),fto=l(),Jh=a("li"),vY=a("strong"),gto=o("fnet"),hto=o(" \u2014 "),dR=a("a"),uto=o("FNetModel"),pto=o(" (FNet model)"),_to=l(),Yh=a("li"),TY=a("strong"),bto=o("fsmt"),vto=o(" \u2014 "),cR=a("a"),Tto=o("FSMTModel"),Fto=o(" (FairSeq Machine-Translation model)"),Cto=l(),Sn=a("li"),FY=a("strong"),Mto=o("funnel"),Eto=o(" \u2014 "),mR=a("a"),yto=o("FunnelModel"),wto=o(" or "),fR=a("a"),Ato=o("FunnelBaseModel"),Lto=o(" (Funnel Transformer model)"),Bto=l(),Kh=a("li"),CY=a("strong"),xto=o("gpt2"),kto=o(" \u2014 "),gR=a("a"),Rto=o("GPT2Model"),Sto=o(" (OpenAI GPT-2 model)"),Pto=l(),Zh=a("li"),MY=a("strong"),$to=o("gpt_neo"),Ito=o(" \u2014 "),hR=a("a"),Dto=o("GPTNeoModel"),jto=o(" (GPT Neo model)"),Nto=l(),eu=a("li"),EY=a("strong"),qto=o("gptj"),Gto=o(" \u2014 "),uR=a("a"),Oto=o("GPTJModel"),Xto=o(" (GPT-J model)"),Vto=l(),ou=a("li"),yY=a("strong"),zto=o("hubert"),Wto=o(" \u2014 "),pR=a("a"),Qto=o("HubertModel"),Hto=o(" (Hubert model)"),Uto=l(),ru=a("li"),wY=a("strong"),Jto=o("ibert"),Yto=o(" \u2014 "),_R=a("a"),Kto=o("IBertModel"),Zto=o(" (I-BERT model)"),eao=l(),tu=a("li"),AY=a("strong"),oao=o("imagegpt"),rao=o(" \u2014 "),bR=a("a"),tao=o("ImageGPTModel"),aao=o(" (ImageGPT model)"),sao=l(),au=a("li"),LY=a("strong"),nao=o("layoutlm"),lao=o(" \u2014 "),vR=a("a"),iao=o("LayoutLMModel"),dao=o(" (LayoutLM model)"),cao=l(),su=a("li"),BY=a("strong"),mao=o("layoutlmv2"),fao=o(" \u2014 "),TR=a("a"),gao=o("LayoutLMv2Model"),hao=o(" (LayoutLMv2 model)"),uao=l(),nu=a("li"),xY=a("strong"),pao=o("led"),_ao=o(" \u2014 "),FR=a("a"),bao=o("LEDModel"),vao=o(" (LED model)"),Tao=l(),lu=a("li"),kY=a("strong"),Fao=o("longformer"),Cao=o(" \u2014 "),CR=a("a"),Mao=o("LongformerModel"),Eao=o(" (Longformer model)"),yao=l(),iu=a("li"),RY=a("strong"),wao=o("luke"),Aao=o(" \u2014 "),MR=a("a"),Lao=o("LukeModel"),Bao=o(" (LUKE model)"),xao=l(),du=a("li"),SY=a("strong"),kao=o("lxmert"),Rao=o(" \u2014 "),ER=a("a"),Sao=o("LxmertModel"),Pao=o(" (LXMERT model)"),$ao=l(),cu=a("li"),PY=a("strong"),Iao=o("m2m_100"),Dao=o(" \u2014 "),yR=a("a"),jao=o("M2M100Model"),Nao=o(" (M2M100 model)"),qao=l(),mu=a("li"),$Y=a("strong"),Gao=o("marian"),Oao=o(" \u2014 "),wR=a("a"),Xao=o("MarianModel"),Vao=o(" (Marian model)"),zao=l(),fu=a("li"),IY=a("strong"),Wao=o("maskformer"),Qao=o(" \u2014 "),AR=a("a"),Hao=o("MaskFormerModel"),Uao=o(" (MaskFormer model)"),Jao=l(),gu=a("li"),DY=a("strong"),Yao=o("mbart"),Kao=o(" \u2014 "),LR=a("a"),Zao=o("MBartModel"),eso=o(" (mBART model)"),oso=l(),hu=a("li"),jY=a("strong"),rso=o("megatron-bert"),tso=o(" \u2014 "),BR=a("a"),aso=o("MegatronBertModel"),sso=o(" (MegatronBert model)"),nso=l(),uu=a("li"),NY=a("strong"),lso=o("mobilebert"),iso=o(" \u2014 "),xR=a("a"),dso=o("MobileBertModel"),cso=o(" (MobileBERT model)"),mso=l(),pu=a("li"),qY=a("strong"),fso=o("mpnet"),gso=o(" \u2014 "),kR=a("a"),hso=o("MPNetModel"),uso=o(" (MPNet model)"),pso=l(),_u=a("li"),GY=a("strong"),_so=o("mt5"),bso=o(" \u2014 "),RR=a("a"),vso=o("MT5Model"),Tso=o(" (mT5 model)"),Fso=l(),bu=a("li"),OY=a("strong"),Cso=o("nystromformer"),Mso=o(" \u2014 "),SR=a("a"),Eso=o("NystromformerModel"),yso=o(" (Nystromformer model)"),wso=l(),vu=a("li"),XY=a("strong"),Aso=o("openai-gpt"),Lso=o(" \u2014 "),PR=a("a"),Bso=o("OpenAIGPTModel"),xso=o(" (OpenAI GPT model)"),kso=l(),Tu=a("li"),VY=a("strong"),Rso=o("pegasus"),Sso=o(" \u2014 "),$R=a("a"),Pso=o("PegasusModel"),$so=o(" (Pegasus model)"),Iso=l(),Fu=a("li"),zY=a("strong"),Dso=o("perceiver"),jso=o(" \u2014 "),IR=a("a"),Nso=o("PerceiverModel"),qso=o(" (Perceiver model)"),Gso=l(),Cu=a("li"),WY=a("strong"),Oso=o("plbart"),Xso=o(" \u2014 "),DR=a("a"),Vso=o("PLBartModel"),zso=o(" (PLBart model)"),Wso=l(),Mu=a("li"),QY=a("strong"),Qso=o("poolformer"),Hso=o(" \u2014 "),jR=a("a"),Uso=o("PoolFormerModel"),Jso=o(" (PoolFormer model)"),Yso=l(),Eu=a("li"),HY=a("strong"),Kso=o("prophetnet"),Zso=o(" \u2014 "),NR=a("a"),eno=o("ProphetNetModel"),ono=o(" (ProphetNet model)"),rno=l(),yu=a("li"),UY=a("strong"),tno=o("qdqbert"),ano=o(" \u2014 "),qR=a("a"),sno=o("QDQBertModel"),nno=o(" (QDQBert model)"),lno=l(),wu=a("li"),JY=a("strong"),ino=o("reformer"),dno=o(" \u2014 "),GR=a("a"),cno=o("ReformerModel"),mno=o(" (Reformer model)"),fno=l(),Au=a("li"),YY=a("strong"),gno=o("rembert"),hno=o(" \u2014 "),OR=a("a"),uno=o("RemBertModel"),pno=o(" (RemBERT model)"),_no=l(),Lu=a("li"),KY=a("strong"),bno=o("retribert"),vno=o(" \u2014 "),XR=a("a"),Tno=o("RetriBertModel"),Fno=o(" (RetriBERT model)"),Cno=l(),Bu=a("li"),ZY=a("strong"),Mno=o("roberta"),Eno=o(" \u2014 "),VR=a("a"),yno=o("RobertaModel"),wno=o(" (RoBERTa model)"),Ano=l(),xu=a("li"),eK=a("strong"),Lno=o("roformer"),Bno=o(" \u2014 "),zR=a("a"),xno=o("RoFormerModel"),kno=o(" (RoFormer model)"),Rno=l(),ku=a("li"),oK=a("strong"),Sno=o("segformer"),Pno=o(" \u2014 "),WR=a("a"),$no=o("SegformerModel"),Ino=o(" (SegFormer model)"),Dno=l(),Ru=a("li"),rK=a("strong"),jno=o("sew"),Nno=o(" \u2014 "),QR=a("a"),qno=o("SEWModel"),Gno=o(" (SEW model)"),Ono=l(),Su=a("li"),tK=a("strong"),Xno=o("sew-d"),Vno=o(" \u2014 "),HR=a("a"),zno=o("SEWDModel"),Wno=o(" (SEW-D model)"),Qno=l(),Pu=a("li"),aK=a("strong"),Hno=o("speech_to_text"),Uno=o(" \u2014 "),UR=a("a"),Jno=o("Speech2TextModel"),Yno=o(" (Speech2Text model)"),Kno=l(),$u=a("li"),sK=a("strong"),Zno=o("splinter"),elo=o(" \u2014 "),JR=a("a"),olo=o("SplinterModel"),rlo=o(" (Splinter model)"),tlo=l(),Iu=a("li"),nK=a("strong"),alo=o("squeezebert"),slo=o(" \u2014 "),YR=a("a"),nlo=o("SqueezeBertModel"),llo=o(" (SqueezeBERT model)"),ilo=l(),Du=a("li"),lK=a("strong"),dlo=o("swin"),clo=o(" \u2014 "),KR=a("a"),mlo=o("SwinModel"),flo=o(" (Swin model)"),glo=l(),ju=a("li"),iK=a("strong"),hlo=o("t5"),ulo=o(" \u2014 "),ZR=a("a"),plo=o("T5Model"),_lo=o(" (T5 model)"),blo=l(),Nu=a("li"),dK=a("strong"),vlo=o("tapas"),Tlo=o(" \u2014 "),eS=a("a"),Flo=o("TapasModel"),Clo=o(" (TAPAS model)"),Mlo=l(),qu=a("li"),cK=a("strong"),Elo=o("transfo-xl"),ylo=o(" \u2014 "),oS=a("a"),wlo=o("TransfoXLModel"),Alo=o(" (Transformer-XL model)"),Llo=l(),Gu=a("li"),mK=a("strong"),Blo=o("unispeech"),xlo=o(" \u2014 "),rS=a("a"),klo=o("UniSpeechModel"),Rlo=o(" (UniSpeech model)"),Slo=l(),Ou=a("li"),fK=a("strong"),Plo=o("unispeech-sat"),$lo=o(" \u2014 "),tS=a("a"),Ilo=o("UniSpeechSatModel"),Dlo=o(" (UniSpeechSat model)"),jlo=l(),Xu=a("li"),gK=a("strong"),Nlo=o("vilt"),qlo=o(" \u2014 "),aS=a("a"),Glo=o("ViltModel"),Olo=o(" (ViLT model)"),Xlo=l(),Vu=a("li"),hK=a("strong"),Vlo=o("vision-text-dual-encoder"),zlo=o(" \u2014 "),sS=a("a"),Wlo=o("VisionTextDualEncoderModel"),Qlo=o(" (VisionTextDualEncoder model)"),Hlo=l(),zu=a("li"),uK=a("strong"),Ulo=o("visual_bert"),Jlo=o(" \u2014 "),nS=a("a"),Ylo=o("VisualBertModel"),Klo=o(" (VisualBert model)"),Zlo=l(),Wu=a("li"),pK=a("strong"),eio=o("vit"),oio=o(" \u2014 "),lS=a("a"),rio=o("ViTModel"),tio=o(" (ViT model)"),aio=l(),Qu=a("li"),_K=a("strong"),sio=o("vit_mae"),nio=o(" \u2014 "),iS=a("a"),lio=o("ViTMAEModel"),iio=o(" (ViTMAE model)"),dio=l(),Hu=a("li"),bK=a("strong"),cio=o("wav2vec2"),mio=o(" \u2014 "),dS=a("a"),fio=o("Wav2Vec2Model"),gio=o(" (Wav2Vec2 model)"),hio=l(),Uu=a("li"),vK=a("strong"),uio=o("wavlm"),pio=o(" \u2014 "),cS=a("a"),_io=o("WavLMModel"),bio=o(" (WavLM model)"),vio=l(),Ju=a("li"),TK=a("strong"),Tio=o("xglm"),Fio=o(" \u2014 "),mS=a("a"),Cio=o("XGLMModel"),Mio=o(" (XGLM model)"),Eio=l(),Yu=a("li"),FK=a("strong"),yio=o("xlm"),wio=o(" \u2014 "),fS=a("a"),Aio=o("XLMModel"),Lio=o(" (XLM model)"),Bio=l(),Ku=a("li"),CK=a("strong"),xio=o("xlm-prophetnet"),kio=o(" \u2014 "),gS=a("a"),Rio=o("XLMProphetNetModel"),Sio=o(" (XLMProphetNet model)"),Pio=l(),Zu=a("li"),MK=a("strong"),$io=o("xlm-roberta"),Iio=o(" \u2014 "),hS=a("a"),Dio=o("XLMRobertaModel"),jio=o(" (XLM-RoBERTa model)"),Nio=l(),ep=a("li"),EK=a("strong"),qio=o("xlm-roberta-xl"),Gio=o(" \u2014 "),uS=a("a"),Oio=o("XLMRobertaXLModel"),Xio=o(" (XLM-RoBERTa-XL model)"),Vio=l(),op=a("li"),yK=a("strong"),zio=o("xlnet"),Wio=o(" \u2014 "),pS=a("a"),Qio=o("XLNetModel"),Hio=o(" (XLNet model)"),Uio=l(),rp=a("li"),wK=a("strong"),Jio=o("yoso"),Yio=o(" \u2014 "),_S=a("a"),Kio=o("YosoModel"),Zio=o(" (YOSO model)"),edo=l(),tp=a("p"),odo=o("The model is set in evaluation mode by default using "),AK=a("code"),rdo=o("model.eval()"),tdo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=a("code"),ado=o("model.train()"),sdo=l(),BK=a("p"),ndo=o("Examples:"),ldo=l(),m(iy.$$.fragment),q9e=l(),zi=a("h2"),ap=a("a"),xK=a("span"),m(dy.$$.fragment),ido=l(),kK=a("span"),ddo=o("AutoModelForPreTraining"),G9e=l(),Ho=a("div"),m(cy.$$.fragment),cdo=l(),Wi=a("p"),mdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RK=a("code"),fdo=o("from_pretrained()"),gdo=o("class method or the "),SK=a("code"),hdo=o("from_config()"),udo=o(`class
method.`),pdo=l(),my=a("p"),_do=o("This class cannot be instantiated directly using "),PK=a("code"),bdo=o("__init__()"),vdo=o(" (throws an error)."),Tdo=l(),Gr=a("div"),m(fy.$$.fragment),Fdo=l(),$K=a("p"),Cdo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mdo=l(),Qi=a("p"),Edo=o(`Note:
Loading a model from its configuration file does `),IK=a("strong"),ydo=o("not"),wdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("code"),Ado=o("from_pretrained()"),Ldo=o("to load the model weights."),Bdo=l(),jK=a("p"),xdo=o("Examples:"),kdo=l(),m(gy.$$.fragment),Rdo=l(),Se=a("div"),m(hy.$$.fragment),Sdo=l(),NK=a("p"),Pdo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$do=l(),qa=a("p"),Ido=o("The model class to instantiate is selected based on the "),qK=a("code"),Ddo=o("model_type"),jdo=o(` property of the config object (either
passed as an argument or loaded from `),GK=a("code"),Ndo=o("pretrained_model_name_or_path"),qdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=a("code"),Gdo=o("pretrained_model_name_or_path"),Odo=o(":"),Xdo=l(),k=a("ul"),sp=a("li"),XK=a("strong"),Vdo=o("albert"),zdo=o(" \u2014 "),bS=a("a"),Wdo=o("AlbertForPreTraining"),Qdo=o(" (ALBERT model)"),Hdo=l(),np=a("li"),VK=a("strong"),Udo=o("bart"),Jdo=o(" \u2014 "),vS=a("a"),Ydo=o("BartForConditionalGeneration"),Kdo=o(" (BART model)"),Zdo=l(),lp=a("li"),zK=a("strong"),eco=o("bert"),oco=o(" \u2014 "),TS=a("a"),rco=o("BertForPreTraining"),tco=o(" (BERT model)"),aco=l(),ip=a("li"),WK=a("strong"),sco=o("big_bird"),nco=o(" \u2014 "),FS=a("a"),lco=o("BigBirdForPreTraining"),ico=o(" (BigBird model)"),dco=l(),dp=a("li"),QK=a("strong"),cco=o("camembert"),mco=o(" \u2014 "),CS=a("a"),fco=o("CamembertForMaskedLM"),gco=o(" (CamemBERT model)"),hco=l(),cp=a("li"),HK=a("strong"),uco=o("ctrl"),pco=o(" \u2014 "),MS=a("a"),_co=o("CTRLLMHeadModel"),bco=o(" (CTRL model)"),vco=l(),mp=a("li"),UK=a("strong"),Tco=o("data2vec-text"),Fco=o(" \u2014 "),ES=a("a"),Cco=o("Data2VecTextForMaskedLM"),Mco=o(" (Data2VecText model)"),Eco=l(),fp=a("li"),JK=a("strong"),yco=o("deberta"),wco=o(" \u2014 "),yS=a("a"),Aco=o("DebertaForMaskedLM"),Lco=o(" (DeBERTa model)"),Bco=l(),gp=a("li"),YK=a("strong"),xco=o("deberta-v2"),kco=o(" \u2014 "),wS=a("a"),Rco=o("DebertaV2ForMaskedLM"),Sco=o(" (DeBERTa-v2 model)"),Pco=l(),hp=a("li"),KK=a("strong"),$co=o("distilbert"),Ico=o(" \u2014 "),AS=a("a"),Dco=o("DistilBertForMaskedLM"),jco=o(" (DistilBERT model)"),Nco=l(),up=a("li"),ZK=a("strong"),qco=o("electra"),Gco=o(" \u2014 "),LS=a("a"),Oco=o("ElectraForPreTraining"),Xco=o(" (ELECTRA model)"),Vco=l(),pp=a("li"),eZ=a("strong"),zco=o("flaubert"),Wco=o(" \u2014 "),BS=a("a"),Qco=o("FlaubertWithLMHeadModel"),Hco=o(" (FlauBERT model)"),Uco=l(),_p=a("li"),oZ=a("strong"),Jco=o("fnet"),Yco=o(" \u2014 "),xS=a("a"),Kco=o("FNetForPreTraining"),Zco=o(" (FNet model)"),emo=l(),bp=a("li"),rZ=a("strong"),omo=o("fsmt"),rmo=o(" \u2014 "),kS=a("a"),tmo=o("FSMTForConditionalGeneration"),amo=o(" (FairSeq Machine-Translation model)"),smo=l(),vp=a("li"),tZ=a("strong"),nmo=o("funnel"),lmo=o(" \u2014 "),RS=a("a"),imo=o("FunnelForPreTraining"),dmo=o(" (Funnel Transformer model)"),cmo=l(),Tp=a("li"),aZ=a("strong"),mmo=o("gpt2"),fmo=o(" \u2014 "),SS=a("a"),gmo=o("GPT2LMHeadModel"),hmo=o(" (OpenAI GPT-2 model)"),umo=l(),Fp=a("li"),sZ=a("strong"),pmo=o("ibert"),_mo=o(" \u2014 "),PS=a("a"),bmo=o("IBertForMaskedLM"),vmo=o(" (I-BERT model)"),Tmo=l(),Cp=a("li"),nZ=a("strong"),Fmo=o("layoutlm"),Cmo=o(" \u2014 "),$S=a("a"),Mmo=o("LayoutLMForMaskedLM"),Emo=o(" (LayoutLM model)"),ymo=l(),Mp=a("li"),lZ=a("strong"),wmo=o("longformer"),Amo=o(" \u2014 "),IS=a("a"),Lmo=o("LongformerForMaskedLM"),Bmo=o(" (Longformer model)"),xmo=l(),Ep=a("li"),iZ=a("strong"),kmo=o("lxmert"),Rmo=o(" \u2014 "),DS=a("a"),Smo=o("LxmertForPreTraining"),Pmo=o(" (LXMERT model)"),$mo=l(),yp=a("li"),dZ=a("strong"),Imo=o("megatron-bert"),Dmo=o(" \u2014 "),jS=a("a"),jmo=o("MegatronBertForPreTraining"),Nmo=o(" (MegatronBert model)"),qmo=l(),wp=a("li"),cZ=a("strong"),Gmo=o("mobilebert"),Omo=o(" \u2014 "),NS=a("a"),Xmo=o("MobileBertForPreTraining"),Vmo=o(" (MobileBERT model)"),zmo=l(),Ap=a("li"),mZ=a("strong"),Wmo=o("mpnet"),Qmo=o(" \u2014 "),qS=a("a"),Hmo=o("MPNetForMaskedLM"),Umo=o(" (MPNet model)"),Jmo=l(),Lp=a("li"),fZ=a("strong"),Ymo=o("openai-gpt"),Kmo=o(" \u2014 "),GS=a("a"),Zmo=o("OpenAIGPTLMHeadModel"),efo=o(" (OpenAI GPT model)"),ofo=l(),Bp=a("li"),gZ=a("strong"),rfo=o("retribert"),tfo=o(" \u2014 "),OS=a("a"),afo=o("RetriBertModel"),sfo=o(" (RetriBERT model)"),nfo=l(),xp=a("li"),hZ=a("strong"),lfo=o("roberta"),ifo=o(" \u2014 "),XS=a("a"),dfo=o("RobertaForMaskedLM"),cfo=o(" (RoBERTa model)"),mfo=l(),kp=a("li"),uZ=a("strong"),ffo=o("squeezebert"),gfo=o(" \u2014 "),VS=a("a"),hfo=o("SqueezeBertForMaskedLM"),ufo=o(" (SqueezeBERT model)"),pfo=l(),Rp=a("li"),pZ=a("strong"),_fo=o("t5"),bfo=o(" \u2014 "),zS=a("a"),vfo=o("T5ForConditionalGeneration"),Tfo=o(" (T5 model)"),Ffo=l(),Sp=a("li"),_Z=a("strong"),Cfo=o("tapas"),Mfo=o(" \u2014 "),WS=a("a"),Efo=o("TapasForMaskedLM"),yfo=o(" (TAPAS model)"),wfo=l(),Pp=a("li"),bZ=a("strong"),Afo=o("transfo-xl"),Lfo=o(" \u2014 "),QS=a("a"),Bfo=o("TransfoXLLMHeadModel"),xfo=o(" (Transformer-XL model)"),kfo=l(),$p=a("li"),vZ=a("strong"),Rfo=o("unispeech"),Sfo=o(" \u2014 "),HS=a("a"),Pfo=o("UniSpeechForPreTraining"),$fo=o(" (UniSpeech model)"),Ifo=l(),Ip=a("li"),TZ=a("strong"),Dfo=o("unispeech-sat"),jfo=o(" \u2014 "),US=a("a"),Nfo=o("UniSpeechSatForPreTraining"),qfo=o(" (UniSpeechSat model)"),Gfo=l(),Dp=a("li"),FZ=a("strong"),Ofo=o("visual_bert"),Xfo=o(" \u2014 "),JS=a("a"),Vfo=o("VisualBertForPreTraining"),zfo=o(" (VisualBert model)"),Wfo=l(),jp=a("li"),CZ=a("strong"),Qfo=o("vit_mae"),Hfo=o(" \u2014 "),YS=a("a"),Ufo=o("ViTMAEForPreTraining"),Jfo=o(" (ViTMAE model)"),Yfo=l(),Np=a("li"),MZ=a("strong"),Kfo=o("wav2vec2"),Zfo=o(" \u2014 "),KS=a("a"),ego=o("Wav2Vec2ForPreTraining"),ogo=o(" (Wav2Vec2 model)"),rgo=l(),qp=a("li"),EZ=a("strong"),tgo=o("xlm"),ago=o(" \u2014 "),ZS=a("a"),sgo=o("XLMWithLMHeadModel"),ngo=o(" (XLM model)"),lgo=l(),Gp=a("li"),yZ=a("strong"),igo=o("xlm-roberta"),dgo=o(" \u2014 "),eP=a("a"),cgo=o("XLMRobertaForMaskedLM"),mgo=o(" (XLM-RoBERTa model)"),fgo=l(),Op=a("li"),wZ=a("strong"),ggo=o("xlm-roberta-xl"),hgo=o(" \u2014 "),oP=a("a"),ugo=o("XLMRobertaXLForMaskedLM"),pgo=o(" (XLM-RoBERTa-XL model)"),_go=l(),Xp=a("li"),AZ=a("strong"),bgo=o("xlnet"),vgo=o(" \u2014 "),rP=a("a"),Tgo=o("XLNetLMHeadModel"),Fgo=o(" (XLNet model)"),Cgo=l(),Vp=a("p"),Mgo=o("The model is set in evaluation mode by default using "),LZ=a("code"),Ego=o("model.eval()"),ygo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BZ=a("code"),wgo=o("model.train()"),Ago=l(),xZ=a("p"),Lgo=o("Examples:"),Bgo=l(),m(uy.$$.fragment),O9e=l(),Hi=a("h2"),zp=a("a"),kZ=a("span"),m(py.$$.fragment),xgo=l(),RZ=a("span"),kgo=o("AutoModelForCausalLM"),X9e=l(),Uo=a("div"),m(_y.$$.fragment),Rgo=l(),Ui=a("p"),Sgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=a("code"),Pgo=o("from_pretrained()"),$go=o("class method or the "),PZ=a("code"),Igo=o("from_config()"),Dgo=o(`class
method.`),jgo=l(),by=a("p"),Ngo=o("This class cannot be instantiated directly using "),$Z=a("code"),qgo=o("__init__()"),Ggo=o(" (throws an error)."),Ogo=l(),Or=a("div"),m(vy.$$.fragment),Xgo=l(),IZ=a("p"),Vgo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zgo=l(),Ji=a("p"),Wgo=o(`Note:
Loading a model from its configuration file does `),DZ=a("strong"),Qgo=o("not"),Hgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("code"),Ugo=o("from_pretrained()"),Jgo=o("to load the model weights."),Ygo=l(),NZ=a("p"),Kgo=o("Examples:"),Zgo=l(),m(Ty.$$.fragment),eho=l(),Pe=a("div"),m(Fy.$$.fragment),oho=l(),qZ=a("p"),rho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tho=l(),Ga=a("p"),aho=o("The model class to instantiate is selected based on the "),GZ=a("code"),sho=o("model_type"),nho=o(` property of the config object (either
passed as an argument or loaded from `),OZ=a("code"),lho=o("pretrained_model_name_or_path"),iho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XZ=a("code"),dho=o("pretrained_model_name_or_path"),cho=o(":"),mho=l(),$=a("ul"),Wp=a("li"),VZ=a("strong"),fho=o("bart"),gho=o(" \u2014 "),tP=a("a"),hho=o("BartForCausalLM"),uho=o(" (BART model)"),pho=l(),Qp=a("li"),zZ=a("strong"),_ho=o("bert"),bho=o(" \u2014 "),aP=a("a"),vho=o("BertLMHeadModel"),Tho=o(" (BERT model)"),Fho=l(),Hp=a("li"),WZ=a("strong"),Cho=o("bert-generation"),Mho=o(" \u2014 "),sP=a("a"),Eho=o("BertGenerationDecoder"),yho=o(" (Bert Generation model)"),who=l(),Up=a("li"),QZ=a("strong"),Aho=o("big_bird"),Lho=o(" \u2014 "),nP=a("a"),Bho=o("BigBirdForCausalLM"),xho=o(" (BigBird model)"),kho=l(),Jp=a("li"),HZ=a("strong"),Rho=o("bigbird_pegasus"),Sho=o(" \u2014 "),lP=a("a"),Pho=o("BigBirdPegasusForCausalLM"),$ho=o(" (BigBirdPegasus model)"),Iho=l(),Yp=a("li"),UZ=a("strong"),Dho=o("blenderbot"),jho=o(" \u2014 "),iP=a("a"),Nho=o("BlenderbotForCausalLM"),qho=o(" (Blenderbot model)"),Gho=l(),Kp=a("li"),JZ=a("strong"),Oho=o("blenderbot-small"),Xho=o(" \u2014 "),dP=a("a"),Vho=o("BlenderbotSmallForCausalLM"),zho=o(" (BlenderbotSmall model)"),Who=l(),Zp=a("li"),YZ=a("strong"),Qho=o("camembert"),Hho=o(" \u2014 "),cP=a("a"),Uho=o("CamembertForCausalLM"),Jho=o(" (CamemBERT model)"),Yho=l(),e_=a("li"),KZ=a("strong"),Kho=o("ctrl"),Zho=o(" \u2014 "),mP=a("a"),euo=o("CTRLLMHeadModel"),ouo=o(" (CTRL model)"),ruo=l(),o_=a("li"),ZZ=a("strong"),tuo=o("data2vec-text"),auo=o(" \u2014 "),fP=a("a"),suo=o("Data2VecTextForCausalLM"),nuo=o(" (Data2VecText model)"),luo=l(),r_=a("li"),eee=a("strong"),iuo=o("electra"),duo=o(" \u2014 "),gP=a("a"),cuo=o("ElectraForCausalLM"),muo=o(" (ELECTRA model)"),fuo=l(),t_=a("li"),oee=a("strong"),guo=o("gpt2"),huo=o(" \u2014 "),hP=a("a"),uuo=o("GPT2LMHeadModel"),puo=o(" (OpenAI GPT-2 model)"),_uo=l(),a_=a("li"),ree=a("strong"),buo=o("gpt_neo"),vuo=o(" \u2014 "),uP=a("a"),Tuo=o("GPTNeoForCausalLM"),Fuo=o(" (GPT Neo model)"),Cuo=l(),s_=a("li"),tee=a("strong"),Muo=o("gptj"),Euo=o(" \u2014 "),pP=a("a"),yuo=o("GPTJForCausalLM"),wuo=o(" (GPT-J model)"),Auo=l(),n_=a("li"),aee=a("strong"),Luo=o("marian"),Buo=o(" \u2014 "),_P=a("a"),xuo=o("MarianForCausalLM"),kuo=o(" (Marian model)"),Ruo=l(),l_=a("li"),see=a("strong"),Suo=o("mbart"),Puo=o(" \u2014 "),bP=a("a"),$uo=o("MBartForCausalLM"),Iuo=o(" (mBART model)"),Duo=l(),i_=a("li"),nee=a("strong"),juo=o("megatron-bert"),Nuo=o(" \u2014 "),vP=a("a"),quo=o("MegatronBertForCausalLM"),Guo=o(" (MegatronBert model)"),Ouo=l(),d_=a("li"),lee=a("strong"),Xuo=o("openai-gpt"),Vuo=o(" \u2014 "),TP=a("a"),zuo=o("OpenAIGPTLMHeadModel"),Wuo=o(" (OpenAI GPT model)"),Quo=l(),c_=a("li"),iee=a("strong"),Huo=o("pegasus"),Uuo=o(" \u2014 "),FP=a("a"),Juo=o("PegasusForCausalLM"),Yuo=o(" (Pegasus model)"),Kuo=l(),m_=a("li"),dee=a("strong"),Zuo=o("plbart"),epo=o(" \u2014 "),CP=a("a"),opo=o("PLBartForCausalLM"),rpo=o(" (PLBart model)"),tpo=l(),f_=a("li"),cee=a("strong"),apo=o("prophetnet"),spo=o(" \u2014 "),MP=a("a"),npo=o("ProphetNetForCausalLM"),lpo=o(" (ProphetNet model)"),ipo=l(),g_=a("li"),mee=a("strong"),dpo=o("qdqbert"),cpo=o(" \u2014 "),EP=a("a"),mpo=o("QDQBertLMHeadModel"),fpo=o(" (QDQBert model)"),gpo=l(),h_=a("li"),fee=a("strong"),hpo=o("reformer"),upo=o(" \u2014 "),yP=a("a"),ppo=o("ReformerModelWithLMHead"),_po=o(" (Reformer model)"),bpo=l(),u_=a("li"),gee=a("strong"),vpo=o("rembert"),Tpo=o(" \u2014 "),wP=a("a"),Fpo=o("RemBertForCausalLM"),Cpo=o(" (RemBERT model)"),Mpo=l(),p_=a("li"),hee=a("strong"),Epo=o("roberta"),ypo=o(" \u2014 "),AP=a("a"),wpo=o("RobertaForCausalLM"),Apo=o(" (RoBERTa model)"),Lpo=l(),__=a("li"),uee=a("strong"),Bpo=o("roformer"),xpo=o(" \u2014 "),LP=a("a"),kpo=o("RoFormerForCausalLM"),Rpo=o(" (RoFormer model)"),Spo=l(),b_=a("li"),pee=a("strong"),Ppo=o("speech_to_text_2"),$po=o(" \u2014 "),BP=a("a"),Ipo=o("Speech2Text2ForCausalLM"),Dpo=o(" (Speech2Text2 model)"),jpo=l(),v_=a("li"),_ee=a("strong"),Npo=o("transfo-xl"),qpo=o(" \u2014 "),xP=a("a"),Gpo=o("TransfoXLLMHeadModel"),Opo=o(" (Transformer-XL model)"),Xpo=l(),T_=a("li"),bee=a("strong"),Vpo=o("trocr"),zpo=o(" \u2014 "),kP=a("a"),Wpo=o("TrOCRForCausalLM"),Qpo=o(" (TrOCR model)"),Hpo=l(),F_=a("li"),vee=a("strong"),Upo=o("xglm"),Jpo=o(" \u2014 "),RP=a("a"),Ypo=o("XGLMForCausalLM"),Kpo=o(" (XGLM model)"),Zpo=l(),C_=a("li"),Tee=a("strong"),e_o=o("xlm"),o_o=o(" \u2014 "),SP=a("a"),r_o=o("XLMWithLMHeadModel"),t_o=o(" (XLM model)"),a_o=l(),M_=a("li"),Fee=a("strong"),s_o=o("xlm-prophetnet"),n_o=o(" \u2014 "),PP=a("a"),l_o=o("XLMProphetNetForCausalLM"),i_o=o(" (XLMProphetNet model)"),d_o=l(),E_=a("li"),Cee=a("strong"),c_o=o("xlm-roberta"),m_o=o(" \u2014 "),$P=a("a"),f_o=o("XLMRobertaForCausalLM"),g_o=o(" (XLM-RoBERTa model)"),h_o=l(),y_=a("li"),Mee=a("strong"),u_o=o("xlm-roberta-xl"),p_o=o(" \u2014 "),IP=a("a"),__o=o("XLMRobertaXLForCausalLM"),b_o=o(" (XLM-RoBERTa-XL model)"),v_o=l(),w_=a("li"),Eee=a("strong"),T_o=o("xlnet"),F_o=o(" \u2014 "),DP=a("a"),C_o=o("XLNetLMHeadModel"),M_o=o(" (XLNet model)"),E_o=l(),A_=a("p"),y_o=o("The model is set in evaluation mode by default using "),yee=a("code"),w_o=o("model.eval()"),A_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wee=a("code"),L_o=o("model.train()"),B_o=l(),Aee=a("p"),x_o=o("Examples:"),k_o=l(),m(Cy.$$.fragment),V9e=l(),Yi=a("h2"),L_=a("a"),Lee=a("span"),m(My.$$.fragment),R_o=l(),Bee=a("span"),S_o=o("AutoModelForMaskedLM"),z9e=l(),Jo=a("div"),m(Ey.$$.fragment),P_o=l(),Ki=a("p"),$_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xee=a("code"),I_o=o("from_pretrained()"),D_o=o("class method or the "),kee=a("code"),j_o=o("from_config()"),N_o=o(`class
method.`),q_o=l(),yy=a("p"),G_o=o("This class cannot be instantiated directly using "),Ree=a("code"),O_o=o("__init__()"),X_o=o(" (throws an error)."),V_o=l(),Xr=a("div"),m(wy.$$.fragment),z_o=l(),See=a("p"),W_o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q_o=l(),Zi=a("p"),H_o=o(`Note:
Loading a model from its configuration file does `),Pee=a("strong"),U_o=o("not"),J_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("code"),Y_o=o("from_pretrained()"),K_o=o("to load the model weights."),Z_o=l(),Iee=a("p"),ebo=o("Examples:"),obo=l(),m(Ay.$$.fragment),rbo=l(),$e=a("div"),m(Ly.$$.fragment),tbo=l(),Dee=a("p"),abo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sbo=l(),Oa=a("p"),nbo=o("The model class to instantiate is selected based on the "),jee=a("code"),lbo=o("model_type"),ibo=o(` property of the config object (either
passed as an argument or loaded from `),Nee=a("code"),dbo=o("pretrained_model_name_or_path"),cbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qee=a("code"),mbo=o("pretrained_model_name_or_path"),fbo=o(":"),gbo=l(),I=a("ul"),B_=a("li"),Gee=a("strong"),hbo=o("albert"),ubo=o(" \u2014 "),jP=a("a"),pbo=o("AlbertForMaskedLM"),_bo=o(" (ALBERT model)"),bbo=l(),x_=a("li"),Oee=a("strong"),vbo=o("bart"),Tbo=o(" \u2014 "),NP=a("a"),Fbo=o("BartForConditionalGeneration"),Cbo=o(" (BART model)"),Mbo=l(),k_=a("li"),Xee=a("strong"),Ebo=o("bert"),ybo=o(" \u2014 "),qP=a("a"),wbo=o("BertForMaskedLM"),Abo=o(" (BERT model)"),Lbo=l(),R_=a("li"),Vee=a("strong"),Bbo=o("big_bird"),xbo=o(" \u2014 "),GP=a("a"),kbo=o("BigBirdForMaskedLM"),Rbo=o(" (BigBird model)"),Sbo=l(),S_=a("li"),zee=a("strong"),Pbo=o("camembert"),$bo=o(" \u2014 "),OP=a("a"),Ibo=o("CamembertForMaskedLM"),Dbo=o(" (CamemBERT model)"),jbo=l(),P_=a("li"),Wee=a("strong"),Nbo=o("convbert"),qbo=o(" \u2014 "),XP=a("a"),Gbo=o("ConvBertForMaskedLM"),Obo=o(" (ConvBERT model)"),Xbo=l(),$_=a("li"),Qee=a("strong"),Vbo=o("data2vec-text"),zbo=o(" \u2014 "),VP=a("a"),Wbo=o("Data2VecTextForMaskedLM"),Qbo=o(" (Data2VecText model)"),Hbo=l(),I_=a("li"),Hee=a("strong"),Ubo=o("deberta"),Jbo=o(" \u2014 "),zP=a("a"),Ybo=o("DebertaForMaskedLM"),Kbo=o(" (DeBERTa model)"),Zbo=l(),D_=a("li"),Uee=a("strong"),e2o=o("deberta-v2"),o2o=o(" \u2014 "),WP=a("a"),r2o=o("DebertaV2ForMaskedLM"),t2o=o(" (DeBERTa-v2 model)"),a2o=l(),j_=a("li"),Jee=a("strong"),s2o=o("distilbert"),n2o=o(" \u2014 "),QP=a("a"),l2o=o("DistilBertForMaskedLM"),i2o=o(" (DistilBERT model)"),d2o=l(),N_=a("li"),Yee=a("strong"),c2o=o("electra"),m2o=o(" \u2014 "),HP=a("a"),f2o=o("ElectraForMaskedLM"),g2o=o(" (ELECTRA model)"),h2o=l(),q_=a("li"),Kee=a("strong"),u2o=o("flaubert"),p2o=o(" \u2014 "),UP=a("a"),_2o=o("FlaubertWithLMHeadModel"),b2o=o(" (FlauBERT model)"),v2o=l(),G_=a("li"),Zee=a("strong"),T2o=o("fnet"),F2o=o(" \u2014 "),JP=a("a"),C2o=o("FNetForMaskedLM"),M2o=o(" (FNet model)"),E2o=l(),O_=a("li"),eoe=a("strong"),y2o=o("funnel"),w2o=o(" \u2014 "),YP=a("a"),A2o=o("FunnelForMaskedLM"),L2o=o(" (Funnel Transformer model)"),B2o=l(),X_=a("li"),ooe=a("strong"),x2o=o("ibert"),k2o=o(" \u2014 "),KP=a("a"),R2o=o("IBertForMaskedLM"),S2o=o(" (I-BERT model)"),P2o=l(),V_=a("li"),roe=a("strong"),$2o=o("layoutlm"),I2o=o(" \u2014 "),ZP=a("a"),D2o=o("LayoutLMForMaskedLM"),j2o=o(" (LayoutLM model)"),N2o=l(),z_=a("li"),toe=a("strong"),q2o=o("longformer"),G2o=o(" \u2014 "),e$=a("a"),O2o=o("LongformerForMaskedLM"),X2o=o(" (Longformer model)"),V2o=l(),W_=a("li"),aoe=a("strong"),z2o=o("mbart"),W2o=o(" \u2014 "),o$=a("a"),Q2o=o("MBartForConditionalGeneration"),H2o=o(" (mBART model)"),U2o=l(),Q_=a("li"),soe=a("strong"),J2o=o("megatron-bert"),Y2o=o(" \u2014 "),r$=a("a"),K2o=o("MegatronBertForMaskedLM"),Z2o=o(" (MegatronBert model)"),evo=l(),H_=a("li"),noe=a("strong"),ovo=o("mobilebert"),rvo=o(" \u2014 "),t$=a("a"),tvo=o("MobileBertForMaskedLM"),avo=o(" (MobileBERT model)"),svo=l(),U_=a("li"),loe=a("strong"),nvo=o("mpnet"),lvo=o(" \u2014 "),a$=a("a"),ivo=o("MPNetForMaskedLM"),dvo=o(" (MPNet model)"),cvo=l(),J_=a("li"),ioe=a("strong"),mvo=o("nystromformer"),fvo=o(" \u2014 "),s$=a("a"),gvo=o("NystromformerForMaskedLM"),hvo=o(" (Nystromformer model)"),uvo=l(),Y_=a("li"),doe=a("strong"),pvo=o("perceiver"),_vo=o(" \u2014 "),n$=a("a"),bvo=o("PerceiverForMaskedLM"),vvo=o(" (Perceiver model)"),Tvo=l(),K_=a("li"),coe=a("strong"),Fvo=o("qdqbert"),Cvo=o(" \u2014 "),l$=a("a"),Mvo=o("QDQBertForMaskedLM"),Evo=o(" (QDQBert model)"),yvo=l(),Z_=a("li"),moe=a("strong"),wvo=o("reformer"),Avo=o(" \u2014 "),i$=a("a"),Lvo=o("ReformerForMaskedLM"),Bvo=o(" (Reformer model)"),xvo=l(),eb=a("li"),foe=a("strong"),kvo=o("rembert"),Rvo=o(" \u2014 "),d$=a("a"),Svo=o("RemBertForMaskedLM"),Pvo=o(" (RemBERT model)"),$vo=l(),ob=a("li"),goe=a("strong"),Ivo=o("roberta"),Dvo=o(" \u2014 "),c$=a("a"),jvo=o("RobertaForMaskedLM"),Nvo=o(" (RoBERTa model)"),qvo=l(),rb=a("li"),hoe=a("strong"),Gvo=o("roformer"),Ovo=o(" \u2014 "),m$=a("a"),Xvo=o("RoFormerForMaskedLM"),Vvo=o(" (RoFormer model)"),zvo=l(),tb=a("li"),uoe=a("strong"),Wvo=o("squeezebert"),Qvo=o(" \u2014 "),f$=a("a"),Hvo=o("SqueezeBertForMaskedLM"),Uvo=o(" (SqueezeBERT model)"),Jvo=l(),ab=a("li"),poe=a("strong"),Yvo=o("tapas"),Kvo=o(" \u2014 "),g$=a("a"),Zvo=o("TapasForMaskedLM"),eTo=o(" (TAPAS model)"),oTo=l(),sb=a("li"),_oe=a("strong"),rTo=o("wav2vec2"),tTo=o(" \u2014 "),boe=a("code"),aTo=o("Wav2Vec2ForMaskedLM"),sTo=o("(Wav2Vec2 model)"),nTo=l(),nb=a("li"),voe=a("strong"),lTo=o("xlm"),iTo=o(" \u2014 "),h$=a("a"),dTo=o("XLMWithLMHeadModel"),cTo=o(" (XLM model)"),mTo=l(),lb=a("li"),Toe=a("strong"),fTo=o("xlm-roberta"),gTo=o(" \u2014 "),u$=a("a"),hTo=o("XLMRobertaForMaskedLM"),uTo=o(" (XLM-RoBERTa model)"),pTo=l(),ib=a("li"),Foe=a("strong"),_To=o("xlm-roberta-xl"),bTo=o(" \u2014 "),p$=a("a"),vTo=o("XLMRobertaXLForMaskedLM"),TTo=o(" (XLM-RoBERTa-XL model)"),FTo=l(),db=a("li"),Coe=a("strong"),CTo=o("yoso"),MTo=o(" \u2014 "),_$=a("a"),ETo=o("YosoForMaskedLM"),yTo=o(" (YOSO model)"),wTo=l(),cb=a("p"),ATo=o("The model is set in evaluation mode by default using "),Moe=a("code"),LTo=o("model.eval()"),BTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eoe=a("code"),xTo=o("model.train()"),kTo=l(),yoe=a("p"),RTo=o("Examples:"),STo=l(),m(By.$$.fragment),W9e=l(),ed=a("h2"),mb=a("a"),woe=a("span"),m(xy.$$.fragment),PTo=l(),Aoe=a("span"),$To=o("AutoModelForSeq2SeqLM"),Q9e=l(),Yo=a("div"),m(ky.$$.fragment),ITo=l(),od=a("p"),DTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Loe=a("code"),jTo=o("from_pretrained()"),NTo=o("class method or the "),Boe=a("code"),qTo=o("from_config()"),GTo=o(`class
method.`),OTo=l(),Ry=a("p"),XTo=o("This class cannot be instantiated directly using "),xoe=a("code"),VTo=o("__init__()"),zTo=o(" (throws an error)."),WTo=l(),Vr=a("div"),m(Sy.$$.fragment),QTo=l(),koe=a("p"),HTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UTo=l(),rd=a("p"),JTo=o(`Note:
Loading a model from its configuration file does `),Roe=a("strong"),YTo=o("not"),KTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("code"),ZTo=o("from_pretrained()"),e1o=o("to load the model weights."),o1o=l(),Poe=a("p"),r1o=o("Examples:"),t1o=l(),m(Py.$$.fragment),a1o=l(),Ie=a("div"),m($y.$$.fragment),s1o=l(),$oe=a("p"),n1o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),l1o=l(),Xa=a("p"),i1o=o("The model class to instantiate is selected based on the "),Ioe=a("code"),d1o=o("model_type"),c1o=o(` property of the config object (either
passed as an argument or loaded from `),Doe=a("code"),m1o=o("pretrained_model_name_or_path"),f1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=a("code"),g1o=o("pretrained_model_name_or_path"),h1o=o(":"),u1o=l(),ae=a("ul"),fb=a("li"),Noe=a("strong"),p1o=o("bart"),_1o=o(" \u2014 "),b$=a("a"),b1o=o("BartForConditionalGeneration"),v1o=o(" (BART model)"),T1o=l(),gb=a("li"),qoe=a("strong"),F1o=o("bigbird_pegasus"),C1o=o(" \u2014 "),v$=a("a"),M1o=o("BigBirdPegasusForConditionalGeneration"),E1o=o(" (BigBirdPegasus model)"),y1o=l(),hb=a("li"),Goe=a("strong"),w1o=o("blenderbot"),A1o=o(" \u2014 "),T$=a("a"),L1o=o("BlenderbotForConditionalGeneration"),B1o=o(" (Blenderbot model)"),x1o=l(),ub=a("li"),Ooe=a("strong"),k1o=o("blenderbot-small"),R1o=o(" \u2014 "),F$=a("a"),S1o=o("BlenderbotSmallForConditionalGeneration"),P1o=o(" (BlenderbotSmall model)"),$1o=l(),pb=a("li"),Xoe=a("strong"),I1o=o("encoder-decoder"),D1o=o(" \u2014 "),C$=a("a"),j1o=o("EncoderDecoderModel"),N1o=o(" (Encoder decoder model)"),q1o=l(),_b=a("li"),Voe=a("strong"),G1o=o("fsmt"),O1o=o(" \u2014 "),M$=a("a"),X1o=o("FSMTForConditionalGeneration"),V1o=o(" (FairSeq Machine-Translation model)"),z1o=l(),bb=a("li"),zoe=a("strong"),W1o=o("led"),Q1o=o(" \u2014 "),E$=a("a"),H1o=o("LEDForConditionalGeneration"),U1o=o(" (LED model)"),J1o=l(),vb=a("li"),Woe=a("strong"),Y1o=o("m2m_100"),K1o=o(" \u2014 "),y$=a("a"),Z1o=o("M2M100ForConditionalGeneration"),eFo=o(" (M2M100 model)"),oFo=l(),Tb=a("li"),Qoe=a("strong"),rFo=o("marian"),tFo=o(" \u2014 "),w$=a("a"),aFo=o("MarianMTModel"),sFo=o(" (Marian model)"),nFo=l(),Fb=a("li"),Hoe=a("strong"),lFo=o("mbart"),iFo=o(" \u2014 "),A$=a("a"),dFo=o("MBartForConditionalGeneration"),cFo=o(" (mBART model)"),mFo=l(),Cb=a("li"),Uoe=a("strong"),fFo=o("mt5"),gFo=o(" \u2014 "),L$=a("a"),hFo=o("MT5ForConditionalGeneration"),uFo=o(" (mT5 model)"),pFo=l(),Mb=a("li"),Joe=a("strong"),_Fo=o("pegasus"),bFo=o(" \u2014 "),B$=a("a"),vFo=o("PegasusForConditionalGeneration"),TFo=o(" (Pegasus model)"),FFo=l(),Eb=a("li"),Yoe=a("strong"),CFo=o("plbart"),MFo=o(" \u2014 "),x$=a("a"),EFo=o("PLBartForConditionalGeneration"),yFo=o(" (PLBart model)"),wFo=l(),yb=a("li"),Koe=a("strong"),AFo=o("prophetnet"),LFo=o(" \u2014 "),k$=a("a"),BFo=o("ProphetNetForConditionalGeneration"),xFo=o(" (ProphetNet model)"),kFo=l(),wb=a("li"),Zoe=a("strong"),RFo=o("t5"),SFo=o(" \u2014 "),R$=a("a"),PFo=o("T5ForConditionalGeneration"),$Fo=o(" (T5 model)"),IFo=l(),Ab=a("li"),ere=a("strong"),DFo=o("xlm-prophetnet"),jFo=o(" \u2014 "),S$=a("a"),NFo=o("XLMProphetNetForConditionalGeneration"),qFo=o(" (XLMProphetNet model)"),GFo=l(),Lb=a("p"),OFo=o("The model is set in evaluation mode by default using "),ore=a("code"),XFo=o("model.eval()"),VFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),zFo=o("model.train()"),WFo=l(),tre=a("p"),QFo=o("Examples:"),HFo=l(),m(Iy.$$.fragment),H9e=l(),td=a("h2"),Bb=a("a"),are=a("span"),m(Dy.$$.fragment),UFo=l(),sre=a("span"),JFo=o("AutoModelForSequenceClassification"),U9e=l(),Ko=a("div"),m(jy.$$.fragment),YFo=l(),ad=a("p"),KFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nre=a("code"),ZFo=o("from_pretrained()"),eCo=o("class method or the "),lre=a("code"),oCo=o("from_config()"),rCo=o(`class
method.`),tCo=l(),Ny=a("p"),aCo=o("This class cannot be instantiated directly using "),ire=a("code"),sCo=o("__init__()"),nCo=o(" (throws an error)."),lCo=l(),zr=a("div"),m(qy.$$.fragment),iCo=l(),dre=a("p"),dCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cCo=l(),sd=a("p"),mCo=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),fCo=o("not"),gCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("code"),hCo=o("from_pretrained()"),uCo=o("to load the model weights."),pCo=l(),fre=a("p"),_Co=o("Examples:"),bCo=l(),m(Gy.$$.fragment),vCo=l(),De=a("div"),m(Oy.$$.fragment),TCo=l(),gre=a("p"),FCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CCo=l(),Va=a("p"),MCo=o("The model class to instantiate is selected based on the "),hre=a("code"),ECo=o("model_type"),yCo=o(` property of the config object (either
passed as an argument or loaded from `),ure=a("code"),wCo=o("pretrained_model_name_or_path"),ACo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=a("code"),LCo=o("pretrained_model_name_or_path"),BCo=o(":"),xCo=l(),A=a("ul"),xb=a("li"),_re=a("strong"),kCo=o("albert"),RCo=o(" \u2014 "),P$=a("a"),SCo=o("AlbertForSequenceClassification"),PCo=o(" (ALBERT model)"),$Co=l(),kb=a("li"),bre=a("strong"),ICo=o("bart"),DCo=o(" \u2014 "),$$=a("a"),jCo=o("BartForSequenceClassification"),NCo=o(" (BART model)"),qCo=l(),Rb=a("li"),vre=a("strong"),GCo=o("bert"),OCo=o(" \u2014 "),I$=a("a"),XCo=o("BertForSequenceClassification"),VCo=o(" (BERT model)"),zCo=l(),Sb=a("li"),Tre=a("strong"),WCo=o("big_bird"),QCo=o(" \u2014 "),D$=a("a"),HCo=o("BigBirdForSequenceClassification"),UCo=o(" (BigBird model)"),JCo=l(),Pb=a("li"),Fre=a("strong"),YCo=o("bigbird_pegasus"),KCo=o(" \u2014 "),j$=a("a"),ZCo=o("BigBirdPegasusForSequenceClassification"),e4o=o(" (BigBirdPegasus model)"),o4o=l(),$b=a("li"),Cre=a("strong"),r4o=o("camembert"),t4o=o(" \u2014 "),N$=a("a"),a4o=o("CamembertForSequenceClassification"),s4o=o(" (CamemBERT model)"),n4o=l(),Ib=a("li"),Mre=a("strong"),l4o=o("canine"),i4o=o(" \u2014 "),q$=a("a"),d4o=o("CanineForSequenceClassification"),c4o=o(" (Canine model)"),m4o=l(),Db=a("li"),Ere=a("strong"),f4o=o("convbert"),g4o=o(" \u2014 "),G$=a("a"),h4o=o("ConvBertForSequenceClassification"),u4o=o(" (ConvBERT model)"),p4o=l(),jb=a("li"),yre=a("strong"),_4o=o("ctrl"),b4o=o(" \u2014 "),O$=a("a"),v4o=o("CTRLForSequenceClassification"),T4o=o(" (CTRL model)"),F4o=l(),Nb=a("li"),wre=a("strong"),C4o=o("data2vec-text"),M4o=o(" \u2014 "),X$=a("a"),E4o=o("Data2VecTextForSequenceClassification"),y4o=o(" (Data2VecText model)"),w4o=l(),qb=a("li"),Are=a("strong"),A4o=o("deberta"),L4o=o(" \u2014 "),V$=a("a"),B4o=o("DebertaForSequenceClassification"),x4o=o(" (DeBERTa model)"),k4o=l(),Gb=a("li"),Lre=a("strong"),R4o=o("deberta-v2"),S4o=o(" \u2014 "),z$=a("a"),P4o=o("DebertaV2ForSequenceClassification"),$4o=o(" (DeBERTa-v2 model)"),I4o=l(),Ob=a("li"),Bre=a("strong"),D4o=o("distilbert"),j4o=o(" \u2014 "),W$=a("a"),N4o=o("DistilBertForSequenceClassification"),q4o=o(" (DistilBERT model)"),G4o=l(),Xb=a("li"),xre=a("strong"),O4o=o("electra"),X4o=o(" \u2014 "),Q$=a("a"),V4o=o("ElectraForSequenceClassification"),z4o=o(" (ELECTRA model)"),W4o=l(),Vb=a("li"),kre=a("strong"),Q4o=o("flaubert"),H4o=o(" \u2014 "),H$=a("a"),U4o=o("FlaubertForSequenceClassification"),J4o=o(" (FlauBERT model)"),Y4o=l(),zb=a("li"),Rre=a("strong"),K4o=o("fnet"),Z4o=o(" \u2014 "),U$=a("a"),eMo=o("FNetForSequenceClassification"),oMo=o(" (FNet model)"),rMo=l(),Wb=a("li"),Sre=a("strong"),tMo=o("funnel"),aMo=o(" \u2014 "),J$=a("a"),sMo=o("FunnelForSequenceClassification"),nMo=o(" (Funnel Transformer model)"),lMo=l(),Qb=a("li"),Pre=a("strong"),iMo=o("gpt2"),dMo=o(" \u2014 "),Y$=a("a"),cMo=o("GPT2ForSequenceClassification"),mMo=o(" (OpenAI GPT-2 model)"),fMo=l(),Hb=a("li"),$re=a("strong"),gMo=o("gpt_neo"),hMo=o(" \u2014 "),K$=a("a"),uMo=o("GPTNeoForSequenceClassification"),pMo=o(" (GPT Neo model)"),_Mo=l(),Ub=a("li"),Ire=a("strong"),bMo=o("gptj"),vMo=o(" \u2014 "),Z$=a("a"),TMo=o("GPTJForSequenceClassification"),FMo=o(" (GPT-J model)"),CMo=l(),Jb=a("li"),Dre=a("strong"),MMo=o("ibert"),EMo=o(" \u2014 "),eI=a("a"),yMo=o("IBertForSequenceClassification"),wMo=o(" (I-BERT model)"),AMo=l(),Yb=a("li"),jre=a("strong"),LMo=o("layoutlm"),BMo=o(" \u2014 "),oI=a("a"),xMo=o("LayoutLMForSequenceClassification"),kMo=o(" (LayoutLM model)"),RMo=l(),Kb=a("li"),Nre=a("strong"),SMo=o("layoutlmv2"),PMo=o(" \u2014 "),rI=a("a"),$Mo=o("LayoutLMv2ForSequenceClassification"),IMo=o(" (LayoutLMv2 model)"),DMo=l(),Zb=a("li"),qre=a("strong"),jMo=o("led"),NMo=o(" \u2014 "),tI=a("a"),qMo=o("LEDForSequenceClassification"),GMo=o(" (LED model)"),OMo=l(),e2=a("li"),Gre=a("strong"),XMo=o("longformer"),VMo=o(" \u2014 "),aI=a("a"),zMo=o("LongformerForSequenceClassification"),WMo=o(" (Longformer model)"),QMo=l(),o2=a("li"),Ore=a("strong"),HMo=o("mbart"),UMo=o(" \u2014 "),sI=a("a"),JMo=o("MBartForSequenceClassification"),YMo=o(" (mBART model)"),KMo=l(),r2=a("li"),Xre=a("strong"),ZMo=o("megatron-bert"),eEo=o(" \u2014 "),nI=a("a"),oEo=o("MegatronBertForSequenceClassification"),rEo=o(" (MegatronBert model)"),tEo=l(),t2=a("li"),Vre=a("strong"),aEo=o("mobilebert"),sEo=o(" \u2014 "),lI=a("a"),nEo=o("MobileBertForSequenceClassification"),lEo=o(" (MobileBERT model)"),iEo=l(),a2=a("li"),zre=a("strong"),dEo=o("mpnet"),cEo=o(" \u2014 "),iI=a("a"),mEo=o("MPNetForSequenceClassification"),fEo=o(" (MPNet model)"),gEo=l(),s2=a("li"),Wre=a("strong"),hEo=o("nystromformer"),uEo=o(" \u2014 "),dI=a("a"),pEo=o("NystromformerForSequenceClassification"),_Eo=o(" (Nystromformer model)"),bEo=l(),n2=a("li"),Qre=a("strong"),vEo=o("openai-gpt"),TEo=o(" \u2014 "),cI=a("a"),FEo=o("OpenAIGPTForSequenceClassification"),CEo=o(" (OpenAI GPT model)"),MEo=l(),l2=a("li"),Hre=a("strong"),EEo=o("perceiver"),yEo=o(" \u2014 "),mI=a("a"),wEo=o("PerceiverForSequenceClassification"),AEo=o(" (Perceiver model)"),LEo=l(),i2=a("li"),Ure=a("strong"),BEo=o("plbart"),xEo=o(" \u2014 "),fI=a("a"),kEo=o("PLBartForSequenceClassification"),REo=o(" (PLBart model)"),SEo=l(),d2=a("li"),Jre=a("strong"),PEo=o("qdqbert"),$Eo=o(" \u2014 "),gI=a("a"),IEo=o("QDQBertForSequenceClassification"),DEo=o(" (QDQBert model)"),jEo=l(),c2=a("li"),Yre=a("strong"),NEo=o("reformer"),qEo=o(" \u2014 "),hI=a("a"),GEo=o("ReformerForSequenceClassification"),OEo=o(" (Reformer model)"),XEo=l(),m2=a("li"),Kre=a("strong"),VEo=o("rembert"),zEo=o(" \u2014 "),uI=a("a"),WEo=o("RemBertForSequenceClassification"),QEo=o(" (RemBERT model)"),HEo=l(),f2=a("li"),Zre=a("strong"),UEo=o("roberta"),JEo=o(" \u2014 "),pI=a("a"),YEo=o("RobertaForSequenceClassification"),KEo=o(" (RoBERTa model)"),ZEo=l(),g2=a("li"),ete=a("strong"),e3o=o("roformer"),o3o=o(" \u2014 "),_I=a("a"),r3o=o("RoFormerForSequenceClassification"),t3o=o(" (RoFormer model)"),a3o=l(),h2=a("li"),ote=a("strong"),s3o=o("squeezebert"),n3o=o(" \u2014 "),bI=a("a"),l3o=o("SqueezeBertForSequenceClassification"),i3o=o(" (SqueezeBERT model)"),d3o=l(),u2=a("li"),rte=a("strong"),c3o=o("tapas"),m3o=o(" \u2014 "),vI=a("a"),f3o=o("TapasForSequenceClassification"),g3o=o(" (TAPAS model)"),h3o=l(),p2=a("li"),tte=a("strong"),u3o=o("transfo-xl"),p3o=o(" \u2014 "),TI=a("a"),_3o=o("TransfoXLForSequenceClassification"),b3o=o(" (Transformer-XL model)"),v3o=l(),_2=a("li"),ate=a("strong"),T3o=o("xlm"),F3o=o(" \u2014 "),FI=a("a"),C3o=o("XLMForSequenceClassification"),M3o=o(" (XLM model)"),E3o=l(),b2=a("li"),ste=a("strong"),y3o=o("xlm-roberta"),w3o=o(" \u2014 "),CI=a("a"),A3o=o("XLMRobertaForSequenceClassification"),L3o=o(" (XLM-RoBERTa model)"),B3o=l(),v2=a("li"),nte=a("strong"),x3o=o("xlm-roberta-xl"),k3o=o(" \u2014 "),MI=a("a"),R3o=o("XLMRobertaXLForSequenceClassification"),S3o=o(" (XLM-RoBERTa-XL model)"),P3o=l(),T2=a("li"),lte=a("strong"),$3o=o("xlnet"),I3o=o(" \u2014 "),EI=a("a"),D3o=o("XLNetForSequenceClassification"),j3o=o(" (XLNet model)"),N3o=l(),F2=a("li"),ite=a("strong"),q3o=o("yoso"),G3o=o(" \u2014 "),yI=a("a"),O3o=o("YosoForSequenceClassification"),X3o=o(" (YOSO model)"),V3o=l(),C2=a("p"),z3o=o("The model is set in evaluation mode by default using "),dte=a("code"),W3o=o("model.eval()"),Q3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cte=a("code"),H3o=o("model.train()"),U3o=l(),mte=a("p"),J3o=o("Examples:"),Y3o=l(),m(Xy.$$.fragment),J9e=l(),nd=a("h2"),M2=a("a"),fte=a("span"),m(Vy.$$.fragment),K3o=l(),gte=a("span"),Z3o=o("AutoModelForMultipleChoice"),Y9e=l(),Zo=a("div"),m(zy.$$.fragment),e5o=l(),ld=a("p"),o5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hte=a("code"),r5o=o("from_pretrained()"),t5o=o("class method or the "),ute=a("code"),a5o=o("from_config()"),s5o=o(`class
method.`),n5o=l(),Wy=a("p"),l5o=o("This class cannot be instantiated directly using "),pte=a("code"),i5o=o("__init__()"),d5o=o(" (throws an error)."),c5o=l(),Wr=a("div"),m(Qy.$$.fragment),m5o=l(),_te=a("p"),f5o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g5o=l(),id=a("p"),h5o=o(`Note:
Loading a model from its configuration file does `),bte=a("strong"),u5o=o("not"),p5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vte=a("code"),_5o=o("from_pretrained()"),b5o=o("to load the model weights."),v5o=l(),Tte=a("p"),T5o=o("Examples:"),F5o=l(),m(Hy.$$.fragment),C5o=l(),je=a("div"),m(Uy.$$.fragment),M5o=l(),Fte=a("p"),E5o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y5o=l(),za=a("p"),w5o=o("The model class to instantiate is selected based on the "),Cte=a("code"),A5o=o("model_type"),L5o=o(` property of the config object (either
passed as an argument or loaded from `),Mte=a("code"),B5o=o("pretrained_model_name_or_path"),x5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ete=a("code"),k5o=o("pretrained_model_name_or_path"),R5o=o(":"),S5o=l(),G=a("ul"),E2=a("li"),yte=a("strong"),P5o=o("albert"),$5o=o(" \u2014 "),wI=a("a"),I5o=o("AlbertForMultipleChoice"),D5o=o(" (ALBERT model)"),j5o=l(),y2=a("li"),wte=a("strong"),N5o=o("bert"),q5o=o(" \u2014 "),AI=a("a"),G5o=o("BertForMultipleChoice"),O5o=o(" (BERT model)"),X5o=l(),w2=a("li"),Ate=a("strong"),V5o=o("big_bird"),z5o=o(" \u2014 "),LI=a("a"),W5o=o("BigBirdForMultipleChoice"),Q5o=o(" (BigBird model)"),H5o=l(),A2=a("li"),Lte=a("strong"),U5o=o("camembert"),J5o=o(" \u2014 "),BI=a("a"),Y5o=o("CamembertForMultipleChoice"),K5o=o(" (CamemBERT model)"),Z5o=l(),L2=a("li"),Bte=a("strong"),eyo=o("canine"),oyo=o(" \u2014 "),xI=a("a"),ryo=o("CanineForMultipleChoice"),tyo=o(" (Canine model)"),ayo=l(),B2=a("li"),xte=a("strong"),syo=o("convbert"),nyo=o(" \u2014 "),kI=a("a"),lyo=o("ConvBertForMultipleChoice"),iyo=o(" (ConvBERT model)"),dyo=l(),x2=a("li"),kte=a("strong"),cyo=o("data2vec-text"),myo=o(" \u2014 "),RI=a("a"),fyo=o("Data2VecTextForMultipleChoice"),gyo=o(" (Data2VecText model)"),hyo=l(),k2=a("li"),Rte=a("strong"),uyo=o("distilbert"),pyo=o(" \u2014 "),SI=a("a"),_yo=o("DistilBertForMultipleChoice"),byo=o(" (DistilBERT model)"),vyo=l(),R2=a("li"),Ste=a("strong"),Tyo=o("electra"),Fyo=o(" \u2014 "),PI=a("a"),Cyo=o("ElectraForMultipleChoice"),Myo=o(" (ELECTRA model)"),Eyo=l(),S2=a("li"),Pte=a("strong"),yyo=o("flaubert"),wyo=o(" \u2014 "),$I=a("a"),Ayo=o("FlaubertForMultipleChoice"),Lyo=o(" (FlauBERT model)"),Byo=l(),P2=a("li"),$te=a("strong"),xyo=o("fnet"),kyo=o(" \u2014 "),II=a("a"),Ryo=o("FNetForMultipleChoice"),Syo=o(" (FNet model)"),Pyo=l(),$2=a("li"),Ite=a("strong"),$yo=o("funnel"),Iyo=o(" \u2014 "),DI=a("a"),Dyo=o("FunnelForMultipleChoice"),jyo=o(" (Funnel Transformer model)"),Nyo=l(),I2=a("li"),Dte=a("strong"),qyo=o("ibert"),Gyo=o(" \u2014 "),jI=a("a"),Oyo=o("IBertForMultipleChoice"),Xyo=o(" (I-BERT model)"),Vyo=l(),D2=a("li"),jte=a("strong"),zyo=o("longformer"),Wyo=o(" \u2014 "),NI=a("a"),Qyo=o("LongformerForMultipleChoice"),Hyo=o(" (Longformer model)"),Uyo=l(),j2=a("li"),Nte=a("strong"),Jyo=o("megatron-bert"),Yyo=o(" \u2014 "),qI=a("a"),Kyo=o("MegatronBertForMultipleChoice"),Zyo=o(" (MegatronBert model)"),ewo=l(),N2=a("li"),qte=a("strong"),owo=o("mobilebert"),rwo=o(" \u2014 "),GI=a("a"),two=o("MobileBertForMultipleChoice"),awo=o(" (MobileBERT model)"),swo=l(),q2=a("li"),Gte=a("strong"),nwo=o("mpnet"),lwo=o(" \u2014 "),OI=a("a"),iwo=o("MPNetForMultipleChoice"),dwo=o(" (MPNet model)"),cwo=l(),G2=a("li"),Ote=a("strong"),mwo=o("nystromformer"),fwo=o(" \u2014 "),XI=a("a"),gwo=o("NystromformerForMultipleChoice"),hwo=o(" (Nystromformer model)"),uwo=l(),O2=a("li"),Xte=a("strong"),pwo=o("qdqbert"),_wo=o(" \u2014 "),VI=a("a"),bwo=o("QDQBertForMultipleChoice"),vwo=o(" (QDQBert model)"),Two=l(),X2=a("li"),Vte=a("strong"),Fwo=o("rembert"),Cwo=o(" \u2014 "),zI=a("a"),Mwo=o("RemBertForMultipleChoice"),Ewo=o(" (RemBERT model)"),ywo=l(),V2=a("li"),zte=a("strong"),wwo=o("roberta"),Awo=o(" \u2014 "),WI=a("a"),Lwo=o("RobertaForMultipleChoice"),Bwo=o(" (RoBERTa model)"),xwo=l(),z2=a("li"),Wte=a("strong"),kwo=o("roformer"),Rwo=o(" \u2014 "),QI=a("a"),Swo=o("RoFormerForMultipleChoice"),Pwo=o(" (RoFormer model)"),$wo=l(),W2=a("li"),Qte=a("strong"),Iwo=o("squeezebert"),Dwo=o(" \u2014 "),HI=a("a"),jwo=o("SqueezeBertForMultipleChoice"),Nwo=o(" (SqueezeBERT model)"),qwo=l(),Q2=a("li"),Hte=a("strong"),Gwo=o("xlm"),Owo=o(" \u2014 "),UI=a("a"),Xwo=o("XLMForMultipleChoice"),Vwo=o(" (XLM model)"),zwo=l(),H2=a("li"),Ute=a("strong"),Wwo=o("xlm-roberta"),Qwo=o(" \u2014 "),JI=a("a"),Hwo=o("XLMRobertaForMultipleChoice"),Uwo=o(" (XLM-RoBERTa model)"),Jwo=l(),U2=a("li"),Jte=a("strong"),Ywo=o("xlm-roberta-xl"),Kwo=o(" \u2014 "),YI=a("a"),Zwo=o("XLMRobertaXLForMultipleChoice"),e6o=o(" (XLM-RoBERTa-XL model)"),o6o=l(),J2=a("li"),Yte=a("strong"),r6o=o("xlnet"),t6o=o(" \u2014 "),KI=a("a"),a6o=o("XLNetForMultipleChoice"),s6o=o(" (XLNet model)"),n6o=l(),Y2=a("li"),Kte=a("strong"),l6o=o("yoso"),i6o=o(" \u2014 "),ZI=a("a"),d6o=o("YosoForMultipleChoice"),c6o=o(" (YOSO model)"),m6o=l(),K2=a("p"),f6o=o("The model is set in evaluation mode by default using "),Zte=a("code"),g6o=o("model.eval()"),h6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eae=a("code"),u6o=o("model.train()"),p6o=l(),oae=a("p"),_6o=o("Examples:"),b6o=l(),m(Jy.$$.fragment),K9e=l(),dd=a("h2"),Z2=a("a"),rae=a("span"),m(Yy.$$.fragment),v6o=l(),tae=a("span"),T6o=o("AutoModelForNextSentencePrediction"),Z9e=l(),er=a("div"),m(Ky.$$.fragment),F6o=l(),cd=a("p"),C6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aae=a("code"),M6o=o("from_pretrained()"),E6o=o("class method or the "),sae=a("code"),y6o=o("from_config()"),w6o=o(`class
method.`),A6o=l(),Zy=a("p"),L6o=o("This class cannot be instantiated directly using "),nae=a("code"),B6o=o("__init__()"),x6o=o(" (throws an error)."),k6o=l(),Qr=a("div"),m(ew.$$.fragment),R6o=l(),lae=a("p"),S6o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P6o=l(),md=a("p"),$6o=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),I6o=o("not"),D6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("code"),j6o=o("from_pretrained()"),N6o=o("to load the model weights."),q6o=l(),cae=a("p"),G6o=o("Examples:"),O6o=l(),m(ow.$$.fragment),X6o=l(),Ne=a("div"),m(rw.$$.fragment),V6o=l(),mae=a("p"),z6o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),W6o=l(),Wa=a("p"),Q6o=o("The model class to instantiate is selected based on the "),fae=a("code"),H6o=o("model_type"),U6o=o(` property of the config object (either
passed as an argument or loaded from `),gae=a("code"),J6o=o("pretrained_model_name_or_path"),Y6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hae=a("code"),K6o=o("pretrained_model_name_or_path"),Z6o=o(":"),eAo=l(),sa=a("ul"),ev=a("li"),uae=a("strong"),oAo=o("bert"),rAo=o(" \u2014 "),eD=a("a"),tAo=o("BertForNextSentencePrediction"),aAo=o(" (BERT model)"),sAo=l(),ov=a("li"),pae=a("strong"),nAo=o("fnet"),lAo=o(" \u2014 "),oD=a("a"),iAo=o("FNetForNextSentencePrediction"),dAo=o(" (FNet model)"),cAo=l(),rv=a("li"),_ae=a("strong"),mAo=o("megatron-bert"),fAo=o(" \u2014 "),rD=a("a"),gAo=o("MegatronBertForNextSentencePrediction"),hAo=o(" (MegatronBert model)"),uAo=l(),tv=a("li"),bae=a("strong"),pAo=o("mobilebert"),_Ao=o(" \u2014 "),tD=a("a"),bAo=o("MobileBertForNextSentencePrediction"),vAo=o(" (MobileBERT model)"),TAo=l(),av=a("li"),vae=a("strong"),FAo=o("qdqbert"),CAo=o(" \u2014 "),aD=a("a"),MAo=o("QDQBertForNextSentencePrediction"),EAo=o(" (QDQBert model)"),yAo=l(),sv=a("p"),wAo=o("The model is set in evaluation mode by default using "),Tae=a("code"),AAo=o("model.eval()"),LAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fae=a("code"),BAo=o("model.train()"),xAo=l(),Cae=a("p"),kAo=o("Examples:"),RAo=l(),m(tw.$$.fragment),eBe=l(),fd=a("h2"),nv=a("a"),Mae=a("span"),m(aw.$$.fragment),SAo=l(),Eae=a("span"),PAo=o("AutoModelForTokenClassification"),oBe=l(),or=a("div"),m(sw.$$.fragment),$Ao=l(),gd=a("p"),IAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=a("code"),DAo=o("from_pretrained()"),jAo=o("class method or the "),wae=a("code"),NAo=o("from_config()"),qAo=o(`class
method.`),GAo=l(),nw=a("p"),OAo=o("This class cannot be instantiated directly using "),Aae=a("code"),XAo=o("__init__()"),VAo=o(" (throws an error)."),zAo=l(),Hr=a("div"),m(lw.$$.fragment),WAo=l(),Lae=a("p"),QAo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HAo=l(),hd=a("p"),UAo=o(`Note:
Loading a model from its configuration file does `),Bae=a("strong"),JAo=o("not"),YAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("code"),KAo=o("from_pretrained()"),ZAo=o("to load the model weights."),e0o=l(),kae=a("p"),o0o=o("Examples:"),r0o=l(),m(iw.$$.fragment),t0o=l(),qe=a("div"),m(dw.$$.fragment),a0o=l(),Rae=a("p"),s0o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n0o=l(),Qa=a("p"),l0o=o("The model class to instantiate is selected based on the "),Sae=a("code"),i0o=o("model_type"),d0o=o(` property of the config object (either
passed as an argument or loaded from `),Pae=a("code"),c0o=o("pretrained_model_name_or_path"),m0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ae=a("code"),f0o=o("pretrained_model_name_or_path"),g0o=o(":"),h0o=l(),N=a("ul"),lv=a("li"),Iae=a("strong"),u0o=o("albert"),p0o=o(" \u2014 "),sD=a("a"),_0o=o("AlbertForTokenClassification"),b0o=o(" (ALBERT model)"),v0o=l(),iv=a("li"),Dae=a("strong"),T0o=o("bert"),F0o=o(" \u2014 "),nD=a("a"),C0o=o("BertForTokenClassification"),M0o=o(" (BERT model)"),E0o=l(),dv=a("li"),jae=a("strong"),y0o=o("big_bird"),w0o=o(" \u2014 "),lD=a("a"),A0o=o("BigBirdForTokenClassification"),L0o=o(" (BigBird model)"),B0o=l(),cv=a("li"),Nae=a("strong"),x0o=o("camembert"),k0o=o(" \u2014 "),iD=a("a"),R0o=o("CamembertForTokenClassification"),S0o=o(" (CamemBERT model)"),P0o=l(),mv=a("li"),qae=a("strong"),$0o=o("canine"),I0o=o(" \u2014 "),dD=a("a"),D0o=o("CanineForTokenClassification"),j0o=o(" (Canine model)"),N0o=l(),fv=a("li"),Gae=a("strong"),q0o=o("convbert"),G0o=o(" \u2014 "),cD=a("a"),O0o=o("ConvBertForTokenClassification"),X0o=o(" (ConvBERT model)"),V0o=l(),gv=a("li"),Oae=a("strong"),z0o=o("data2vec-text"),W0o=o(" \u2014 "),mD=a("a"),Q0o=o("Data2VecTextForTokenClassification"),H0o=o(" (Data2VecText model)"),U0o=l(),hv=a("li"),Xae=a("strong"),J0o=o("deberta"),Y0o=o(" \u2014 "),fD=a("a"),K0o=o("DebertaForTokenClassification"),Z0o=o(" (DeBERTa model)"),eLo=l(),uv=a("li"),Vae=a("strong"),oLo=o("deberta-v2"),rLo=o(" \u2014 "),gD=a("a"),tLo=o("DebertaV2ForTokenClassification"),aLo=o(" (DeBERTa-v2 model)"),sLo=l(),pv=a("li"),zae=a("strong"),nLo=o("distilbert"),lLo=o(" \u2014 "),hD=a("a"),iLo=o("DistilBertForTokenClassification"),dLo=o(" (DistilBERT model)"),cLo=l(),_v=a("li"),Wae=a("strong"),mLo=o("electra"),fLo=o(" \u2014 "),uD=a("a"),gLo=o("ElectraForTokenClassification"),hLo=o(" (ELECTRA model)"),uLo=l(),bv=a("li"),Qae=a("strong"),pLo=o("flaubert"),_Lo=o(" \u2014 "),pD=a("a"),bLo=o("FlaubertForTokenClassification"),vLo=o(" (FlauBERT model)"),TLo=l(),vv=a("li"),Hae=a("strong"),FLo=o("fnet"),CLo=o(" \u2014 "),_D=a("a"),MLo=o("FNetForTokenClassification"),ELo=o(" (FNet model)"),yLo=l(),Tv=a("li"),Uae=a("strong"),wLo=o("funnel"),ALo=o(" \u2014 "),bD=a("a"),LLo=o("FunnelForTokenClassification"),BLo=o(" (Funnel Transformer model)"),xLo=l(),Fv=a("li"),Jae=a("strong"),kLo=o("gpt2"),RLo=o(" \u2014 "),vD=a("a"),SLo=o("GPT2ForTokenClassification"),PLo=o(" (OpenAI GPT-2 model)"),$Lo=l(),Cv=a("li"),Yae=a("strong"),ILo=o("ibert"),DLo=o(" \u2014 "),TD=a("a"),jLo=o("IBertForTokenClassification"),NLo=o(" (I-BERT model)"),qLo=l(),Mv=a("li"),Kae=a("strong"),GLo=o("layoutlm"),OLo=o(" \u2014 "),FD=a("a"),XLo=o("LayoutLMForTokenClassification"),VLo=o(" (LayoutLM model)"),zLo=l(),Ev=a("li"),Zae=a("strong"),WLo=o("layoutlmv2"),QLo=o(" \u2014 "),CD=a("a"),HLo=o("LayoutLMv2ForTokenClassification"),ULo=o(" (LayoutLMv2 model)"),JLo=l(),yv=a("li"),ese=a("strong"),YLo=o("longformer"),KLo=o(" \u2014 "),MD=a("a"),ZLo=o("LongformerForTokenClassification"),e8o=o(" (Longformer model)"),o8o=l(),wv=a("li"),ose=a("strong"),r8o=o("megatron-bert"),t8o=o(" \u2014 "),ED=a("a"),a8o=o("MegatronBertForTokenClassification"),s8o=o(" (MegatronBert model)"),n8o=l(),Av=a("li"),rse=a("strong"),l8o=o("mobilebert"),i8o=o(" \u2014 "),yD=a("a"),d8o=o("MobileBertForTokenClassification"),c8o=o(" (MobileBERT model)"),m8o=l(),Lv=a("li"),tse=a("strong"),f8o=o("mpnet"),g8o=o(" \u2014 "),wD=a("a"),h8o=o("MPNetForTokenClassification"),u8o=o(" (MPNet model)"),p8o=l(),Bv=a("li"),ase=a("strong"),_8o=o("nystromformer"),b8o=o(" \u2014 "),AD=a("a"),v8o=o("NystromformerForTokenClassification"),T8o=o(" (Nystromformer model)"),F8o=l(),xv=a("li"),sse=a("strong"),C8o=o("qdqbert"),M8o=o(" \u2014 "),LD=a("a"),E8o=o("QDQBertForTokenClassification"),y8o=o(" (QDQBert model)"),w8o=l(),kv=a("li"),nse=a("strong"),A8o=o("rembert"),L8o=o(" \u2014 "),BD=a("a"),B8o=o("RemBertForTokenClassification"),x8o=o(" (RemBERT model)"),k8o=l(),Rv=a("li"),lse=a("strong"),R8o=o("roberta"),S8o=o(" \u2014 "),xD=a("a"),P8o=o("RobertaForTokenClassification"),$8o=o(" (RoBERTa model)"),I8o=l(),Sv=a("li"),ise=a("strong"),D8o=o("roformer"),j8o=o(" \u2014 "),kD=a("a"),N8o=o("RoFormerForTokenClassification"),q8o=o(" (RoFormer model)"),G8o=l(),Pv=a("li"),dse=a("strong"),O8o=o("squeezebert"),X8o=o(" \u2014 "),RD=a("a"),V8o=o("SqueezeBertForTokenClassification"),z8o=o(" (SqueezeBERT model)"),W8o=l(),$v=a("li"),cse=a("strong"),Q8o=o("xlm"),H8o=o(" \u2014 "),SD=a("a"),U8o=o("XLMForTokenClassification"),J8o=o(" (XLM model)"),Y8o=l(),Iv=a("li"),mse=a("strong"),K8o=o("xlm-roberta"),Z8o=o(" \u2014 "),PD=a("a"),e7o=o("XLMRobertaForTokenClassification"),o7o=o(" (XLM-RoBERTa model)"),r7o=l(),Dv=a("li"),fse=a("strong"),t7o=o("xlm-roberta-xl"),a7o=o(" \u2014 "),$D=a("a"),s7o=o("XLMRobertaXLForTokenClassification"),n7o=o(" (XLM-RoBERTa-XL model)"),l7o=l(),jv=a("li"),gse=a("strong"),i7o=o("xlnet"),d7o=o(" \u2014 "),ID=a("a"),c7o=o("XLNetForTokenClassification"),m7o=o(" (XLNet model)"),f7o=l(),Nv=a("li"),hse=a("strong"),g7o=o("yoso"),h7o=o(" \u2014 "),DD=a("a"),u7o=o("YosoForTokenClassification"),p7o=o(" (YOSO model)"),_7o=l(),qv=a("p"),b7o=o("The model is set in evaluation mode by default using "),use=a("code"),v7o=o("model.eval()"),T7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=a("code"),F7o=o("model.train()"),C7o=l(),_se=a("p"),M7o=o("Examples:"),E7o=l(),m(cw.$$.fragment),rBe=l(),ud=a("h2"),Gv=a("a"),bse=a("span"),m(mw.$$.fragment),y7o=l(),vse=a("span"),w7o=o("AutoModelForQuestionAnswering"),tBe=l(),rr=a("div"),m(fw.$$.fragment),A7o=l(),pd=a("p"),L7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tse=a("code"),B7o=o("from_pretrained()"),x7o=o("class method or the "),Fse=a("code"),k7o=o("from_config()"),R7o=o(`class
method.`),S7o=l(),gw=a("p"),P7o=o("This class cannot be instantiated directly using "),Cse=a("code"),$7o=o("__init__()"),I7o=o(" (throws an error)."),D7o=l(),Ur=a("div"),m(hw.$$.fragment),j7o=l(),Mse=a("p"),N7o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q7o=l(),_d=a("p"),G7o=o(`Note:
Loading a model from its configuration file does `),Ese=a("strong"),O7o=o("not"),X7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yse=a("code"),V7o=o("from_pretrained()"),z7o=o("to load the model weights."),W7o=l(),wse=a("p"),Q7o=o("Examples:"),H7o=l(),m(uw.$$.fragment),U7o=l(),Ge=a("div"),m(pw.$$.fragment),J7o=l(),Ase=a("p"),Y7o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K7o=l(),Ha=a("p"),Z7o=o("The model class to instantiate is selected based on the "),Lse=a("code"),e9o=o("model_type"),o9o=o(` property of the config object (either
passed as an argument or loaded from `),Bse=a("code"),r9o=o("pretrained_model_name_or_path"),t9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xse=a("code"),a9o=o("pretrained_model_name_or_path"),s9o=o(":"),n9o=l(),R=a("ul"),Ov=a("li"),kse=a("strong"),l9o=o("albert"),i9o=o(" \u2014 "),jD=a("a"),d9o=o("AlbertForQuestionAnswering"),c9o=o(" (ALBERT model)"),m9o=l(),Xv=a("li"),Rse=a("strong"),f9o=o("bart"),g9o=o(" \u2014 "),ND=a("a"),h9o=o("BartForQuestionAnswering"),u9o=o(" (BART model)"),p9o=l(),Vv=a("li"),Sse=a("strong"),_9o=o("bert"),b9o=o(" \u2014 "),qD=a("a"),v9o=o("BertForQuestionAnswering"),T9o=o(" (BERT model)"),F9o=l(),zv=a("li"),Pse=a("strong"),C9o=o("big_bird"),M9o=o(" \u2014 "),GD=a("a"),E9o=o("BigBirdForQuestionAnswering"),y9o=o(" (BigBird model)"),w9o=l(),Wv=a("li"),$se=a("strong"),A9o=o("bigbird_pegasus"),L9o=o(" \u2014 "),OD=a("a"),B9o=o("BigBirdPegasusForQuestionAnswering"),x9o=o(" (BigBirdPegasus model)"),k9o=l(),Qv=a("li"),Ise=a("strong"),R9o=o("camembert"),S9o=o(" \u2014 "),XD=a("a"),P9o=o("CamembertForQuestionAnswering"),$9o=o(" (CamemBERT model)"),I9o=l(),Hv=a("li"),Dse=a("strong"),D9o=o("canine"),j9o=o(" \u2014 "),VD=a("a"),N9o=o("CanineForQuestionAnswering"),q9o=o(" (Canine model)"),G9o=l(),Uv=a("li"),jse=a("strong"),O9o=o("convbert"),X9o=o(" \u2014 "),zD=a("a"),V9o=o("ConvBertForQuestionAnswering"),z9o=o(" (ConvBERT model)"),W9o=l(),Jv=a("li"),Nse=a("strong"),Q9o=o("data2vec-text"),H9o=o(" \u2014 "),WD=a("a"),U9o=o("Data2VecTextForQuestionAnswering"),J9o=o(" (Data2VecText model)"),Y9o=l(),Yv=a("li"),qse=a("strong"),K9o=o("deberta"),Z9o=o(" \u2014 "),QD=a("a"),eBo=o("DebertaForQuestionAnswering"),oBo=o(" (DeBERTa model)"),rBo=l(),Kv=a("li"),Gse=a("strong"),tBo=o("deberta-v2"),aBo=o(" \u2014 "),HD=a("a"),sBo=o("DebertaV2ForQuestionAnswering"),nBo=o(" (DeBERTa-v2 model)"),lBo=l(),Zv=a("li"),Ose=a("strong"),iBo=o("distilbert"),dBo=o(" \u2014 "),UD=a("a"),cBo=o("DistilBertForQuestionAnswering"),mBo=o(" (DistilBERT model)"),fBo=l(),eT=a("li"),Xse=a("strong"),gBo=o("electra"),hBo=o(" \u2014 "),JD=a("a"),uBo=o("ElectraForQuestionAnswering"),pBo=o(" (ELECTRA model)"),_Bo=l(),oT=a("li"),Vse=a("strong"),bBo=o("flaubert"),vBo=o(" \u2014 "),YD=a("a"),TBo=o("FlaubertForQuestionAnsweringSimple"),FBo=o(" (FlauBERT model)"),CBo=l(),rT=a("li"),zse=a("strong"),MBo=o("fnet"),EBo=o(" \u2014 "),KD=a("a"),yBo=o("FNetForQuestionAnswering"),wBo=o(" (FNet model)"),ABo=l(),tT=a("li"),Wse=a("strong"),LBo=o("funnel"),BBo=o(" \u2014 "),ZD=a("a"),xBo=o("FunnelForQuestionAnswering"),kBo=o(" (Funnel Transformer model)"),RBo=l(),aT=a("li"),Qse=a("strong"),SBo=o("gptj"),PBo=o(" \u2014 "),ej=a("a"),$Bo=o("GPTJForQuestionAnswering"),IBo=o(" (GPT-J model)"),DBo=l(),sT=a("li"),Hse=a("strong"),jBo=o("ibert"),NBo=o(" \u2014 "),oj=a("a"),qBo=o("IBertForQuestionAnswering"),GBo=o(" (I-BERT model)"),OBo=l(),nT=a("li"),Use=a("strong"),XBo=o("layoutlmv2"),VBo=o(" \u2014 "),rj=a("a"),zBo=o("LayoutLMv2ForQuestionAnswering"),WBo=o(" (LayoutLMv2 model)"),QBo=l(),lT=a("li"),Jse=a("strong"),HBo=o("led"),UBo=o(" \u2014 "),tj=a("a"),JBo=o("LEDForQuestionAnswering"),YBo=o(" (LED model)"),KBo=l(),iT=a("li"),Yse=a("strong"),ZBo=o("longformer"),exo=o(" \u2014 "),aj=a("a"),oxo=o("LongformerForQuestionAnswering"),rxo=o(" (Longformer model)"),txo=l(),dT=a("li"),Kse=a("strong"),axo=o("lxmert"),sxo=o(" \u2014 "),sj=a("a"),nxo=o("LxmertForQuestionAnswering"),lxo=o(" (LXMERT model)"),ixo=l(),cT=a("li"),Zse=a("strong"),dxo=o("mbart"),cxo=o(" \u2014 "),nj=a("a"),mxo=o("MBartForQuestionAnswering"),fxo=o(" (mBART model)"),gxo=l(),mT=a("li"),ene=a("strong"),hxo=o("megatron-bert"),uxo=o(" \u2014 "),lj=a("a"),pxo=o("MegatronBertForQuestionAnswering"),_xo=o(" (MegatronBert model)"),bxo=l(),fT=a("li"),one=a("strong"),vxo=o("mobilebert"),Txo=o(" \u2014 "),ij=a("a"),Fxo=o("MobileBertForQuestionAnswering"),Cxo=o(" (MobileBERT model)"),Mxo=l(),gT=a("li"),rne=a("strong"),Exo=o("mpnet"),yxo=o(" \u2014 "),dj=a("a"),wxo=o("MPNetForQuestionAnswering"),Axo=o(" (MPNet model)"),Lxo=l(),hT=a("li"),tne=a("strong"),Bxo=o("nystromformer"),xxo=o(" \u2014 "),cj=a("a"),kxo=o("NystromformerForQuestionAnswering"),Rxo=o(" (Nystromformer model)"),Sxo=l(),uT=a("li"),ane=a("strong"),Pxo=o("qdqbert"),$xo=o(" \u2014 "),mj=a("a"),Ixo=o("QDQBertForQuestionAnswering"),Dxo=o(" (QDQBert model)"),jxo=l(),pT=a("li"),sne=a("strong"),Nxo=o("reformer"),qxo=o(" \u2014 "),fj=a("a"),Gxo=o("ReformerForQuestionAnswering"),Oxo=o(" (Reformer model)"),Xxo=l(),_T=a("li"),nne=a("strong"),Vxo=o("rembert"),zxo=o(" \u2014 "),gj=a("a"),Wxo=o("RemBertForQuestionAnswering"),Qxo=o(" (RemBERT model)"),Hxo=l(),bT=a("li"),lne=a("strong"),Uxo=o("roberta"),Jxo=o(" \u2014 "),hj=a("a"),Yxo=o("RobertaForQuestionAnswering"),Kxo=o(" (RoBERTa model)"),Zxo=l(),vT=a("li"),ine=a("strong"),eko=o("roformer"),oko=o(" \u2014 "),uj=a("a"),rko=o("RoFormerForQuestionAnswering"),tko=o(" (RoFormer model)"),ako=l(),TT=a("li"),dne=a("strong"),sko=o("splinter"),nko=o(" \u2014 "),pj=a("a"),lko=o("SplinterForQuestionAnswering"),iko=o(" (Splinter model)"),dko=l(),FT=a("li"),cne=a("strong"),cko=o("squeezebert"),mko=o(" \u2014 "),_j=a("a"),fko=o("SqueezeBertForQuestionAnswering"),gko=o(" (SqueezeBERT model)"),hko=l(),CT=a("li"),mne=a("strong"),uko=o("xlm"),pko=o(" \u2014 "),bj=a("a"),_ko=o("XLMForQuestionAnsweringSimple"),bko=o(" (XLM model)"),vko=l(),MT=a("li"),fne=a("strong"),Tko=o("xlm-roberta"),Fko=o(" \u2014 "),vj=a("a"),Cko=o("XLMRobertaForQuestionAnswering"),Mko=o(" (XLM-RoBERTa model)"),Eko=l(),ET=a("li"),gne=a("strong"),yko=o("xlm-roberta-xl"),wko=o(" \u2014 "),Tj=a("a"),Ako=o("XLMRobertaXLForQuestionAnswering"),Lko=o(" (XLM-RoBERTa-XL model)"),Bko=l(),yT=a("li"),hne=a("strong"),xko=o("xlnet"),kko=o(" \u2014 "),Fj=a("a"),Rko=o("XLNetForQuestionAnsweringSimple"),Sko=o(" (XLNet model)"),Pko=l(),wT=a("li"),une=a("strong"),$ko=o("yoso"),Iko=o(" \u2014 "),Cj=a("a"),Dko=o("YosoForQuestionAnswering"),jko=o(" (YOSO model)"),Nko=l(),AT=a("p"),qko=o("The model is set in evaluation mode by default using "),pne=a("code"),Gko=o("model.eval()"),Oko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ne=a("code"),Xko=o("model.train()"),Vko=l(),bne=a("p"),zko=o("Examples:"),Wko=l(),m(_w.$$.fragment),aBe=l(),bd=a("h2"),LT=a("a"),vne=a("span"),m(bw.$$.fragment),Qko=l(),Tne=a("span"),Hko=o("AutoModelForTableQuestionAnswering"),sBe=l(),tr=a("div"),m(vw.$$.fragment),Uko=l(),vd=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fne=a("code"),Yko=o("from_pretrained()"),Kko=o("class method or the "),Cne=a("code"),Zko=o("from_config()"),eRo=o(`class
method.`),oRo=l(),Tw=a("p"),rRo=o("This class cannot be instantiated directly using "),Mne=a("code"),tRo=o("__init__()"),aRo=o(" (throws an error)."),sRo=l(),Jr=a("div"),m(Fw.$$.fragment),nRo=l(),Ene=a("p"),lRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iRo=l(),Td=a("p"),dRo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),cRo=o("not"),mRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=a("code"),fRo=o("from_pretrained()"),gRo=o("to load the model weights."),hRo=l(),Ane=a("p"),uRo=o("Examples:"),pRo=l(),m(Cw.$$.fragment),_Ro=l(),Oe=a("div"),m(Mw.$$.fragment),bRo=l(),Lne=a("p"),vRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TRo=l(),Ua=a("p"),FRo=o("The model class to instantiate is selected based on the "),Bne=a("code"),CRo=o("model_type"),MRo=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),ERo=o("pretrained_model_name_or_path"),yRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(":"),LRo=l(),Rne=a("ul"),BT=a("li"),Sne=a("strong"),BRo=o("tapas"),xRo=o(" \u2014 "),Mj=a("a"),kRo=o("TapasForQuestionAnswering"),RRo=o(" (TAPAS model)"),SRo=l(),xT=a("p"),PRo=o("The model is set in evaluation mode by default using "),Pne=a("code"),$Ro=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ne=a("code"),DRo=o("model.train()"),jRo=l(),Ine=a("p"),NRo=o("Examples:"),qRo=l(),m(Ew.$$.fragment),nBe=l(),Fd=a("h2"),kT=a("a"),Dne=a("span"),m(yw.$$.fragment),GRo=l(),jne=a("span"),ORo=o("AutoModelForImageClassification"),lBe=l(),ar=a("div"),m(ww.$$.fragment),XRo=l(),Cd=a("p"),VRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nne=a("code"),zRo=o("from_pretrained()"),WRo=o("class method or the "),qne=a("code"),QRo=o("from_config()"),HRo=o(`class
method.`),URo=l(),Aw=a("p"),JRo=o("This class cannot be instantiated directly using "),Gne=a("code"),YRo=o("__init__()"),KRo=o(" (throws an error)."),ZRo=l(),Yr=a("div"),m(Lw.$$.fragment),eSo=l(),One=a("p"),oSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rSo=l(),Md=a("p"),tSo=o(`Note:
Loading a model from its configuration file does `),Xne=a("strong"),aSo=o("not"),sSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vne=a("code"),nSo=o("from_pretrained()"),lSo=o("to load the model weights."),iSo=l(),zne=a("p"),dSo=o("Examples:"),cSo=l(),m(Bw.$$.fragment),mSo=l(),Xe=a("div"),m(xw.$$.fragment),fSo=l(),Wne=a("p"),gSo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hSo=l(),Ja=a("p"),uSo=o("The model class to instantiate is selected based on the "),Qne=a("code"),pSo=o("model_type"),_So=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),bSo=o("pretrained_model_name_or_path"),vSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=a("code"),TSo=o("pretrained_model_name_or_path"),FSo=o(":"),CSo=l(),be=a("ul"),RT=a("li"),Jne=a("strong"),MSo=o("beit"),ESo=o(" \u2014 "),Ej=a("a"),ySo=o("BeitForImageClassification"),wSo=o(" (BEiT model)"),ASo=l(),ST=a("li"),Yne=a("strong"),LSo=o("convnext"),BSo=o(" \u2014 "),yj=a("a"),xSo=o("ConvNextForImageClassification"),kSo=o(" (ConvNext model)"),RSo=l(),Pn=a("li"),Kne=a("strong"),SSo=o("deit"),PSo=o(" \u2014 "),wj=a("a"),$So=o("DeiTForImageClassification"),ISo=o(" or "),Aj=a("a"),DSo=o("DeiTForImageClassificationWithTeacher"),jSo=o(" (DeiT model)"),NSo=l(),PT=a("li"),Zne=a("strong"),qSo=o("imagegpt"),GSo=o(" \u2014 "),Lj=a("a"),OSo=o("ImageGPTForImageClassification"),XSo=o(" (ImageGPT model)"),VSo=l(),la=a("li"),ele=a("strong"),zSo=o("perceiver"),WSo=o(" \u2014 "),Bj=a("a"),QSo=o("PerceiverForImageClassificationLearned"),HSo=o(" or "),xj=a("a"),USo=o("PerceiverForImageClassificationFourier"),JSo=o(" or "),kj=a("a"),YSo=o("PerceiverForImageClassificationConvProcessing"),KSo=o(" (Perceiver model)"),ZSo=l(),$T=a("li"),ole=a("strong"),ePo=o("poolformer"),oPo=o(" \u2014 "),Rj=a("a"),rPo=o("PoolFormerForImageClassification"),tPo=o(" (PoolFormer model)"),aPo=l(),IT=a("li"),rle=a("strong"),sPo=o("segformer"),nPo=o(" \u2014 "),Sj=a("a"),lPo=o("SegformerForImageClassification"),iPo=o(" (SegFormer model)"),dPo=l(),DT=a("li"),tle=a("strong"),cPo=o("swin"),mPo=o(" \u2014 "),Pj=a("a"),fPo=o("SwinForImageClassification"),gPo=o(" (Swin model)"),hPo=l(),jT=a("li"),ale=a("strong"),uPo=o("vit"),pPo=o(" \u2014 "),$j=a("a"),_Po=o("ViTForImageClassification"),bPo=o(" (ViT model)"),vPo=l(),NT=a("p"),TPo=o("The model is set in evaluation mode by default using "),sle=a("code"),FPo=o("model.eval()"),CPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=a("code"),MPo=o("model.train()"),EPo=l(),lle=a("p"),yPo=o("Examples:"),wPo=l(),m(kw.$$.fragment),iBe=l(),Ed=a("h2"),qT=a("a"),ile=a("span"),m(Rw.$$.fragment),APo=l(),dle=a("span"),LPo=o("AutoModelForVision2Seq"),dBe=l(),sr=a("div"),m(Sw.$$.fragment),BPo=l(),yd=a("p"),xPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cle=a("code"),kPo=o("from_pretrained()"),RPo=o("class method or the "),mle=a("code"),SPo=o("from_config()"),PPo=o(`class
method.`),$Po=l(),Pw=a("p"),IPo=o("This class cannot be instantiated directly using "),fle=a("code"),DPo=o("__init__()"),jPo=o(" (throws an error)."),NPo=l(),Kr=a("div"),m($w.$$.fragment),qPo=l(),gle=a("p"),GPo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OPo=l(),wd=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),VPo=o("not"),zPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=a("code"),WPo=o("from_pretrained()"),QPo=o("to load the model weights."),HPo=l(),ple=a("p"),UPo=o("Examples:"),JPo=l(),m(Iw.$$.fragment),YPo=l(),Ve=a("div"),m(Dw.$$.fragment),KPo=l(),_le=a("p"),ZPo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e$o=l(),Ya=a("p"),o$o=o("The model class to instantiate is selected based on the "),ble=a("code"),r$o=o("model_type"),t$o=o(` property of the config object (either
passed as an argument or loaded from `),vle=a("code"),a$o=o("pretrained_model_name_or_path"),s$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),n$o=o("pretrained_model_name_or_path"),l$o=o(":"),i$o=l(),Fle=a("ul"),GT=a("li"),Cle=a("strong"),d$o=o("vision-encoder-decoder"),c$o=o(" \u2014 "),Ij=a("a"),m$o=o("VisionEncoderDecoderModel"),f$o=o(" (Vision Encoder decoder model)"),g$o=l(),OT=a("p"),h$o=o("The model is set in evaluation mode by default using "),Mle=a("code"),u$o=o("model.eval()"),p$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=a("code"),_$o=o("model.train()"),b$o=l(),yle=a("p"),v$o=o("Examples:"),T$o=l(),m(jw.$$.fragment),cBe=l(),Ad=a("h2"),XT=a("a"),wle=a("span"),m(Nw.$$.fragment),F$o=l(),Ale=a("span"),C$o=o("AutoModelForAudioClassification"),mBe=l(),nr=a("div"),m(qw.$$.fragment),M$o=l(),Ld=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Lle=a("code"),y$o=o("from_pretrained()"),w$o=o("class method or the "),Ble=a("code"),A$o=o("from_config()"),L$o=o(`class
method.`),B$o=l(),Gw=a("p"),x$o=o("This class cannot be instantiated directly using "),xle=a("code"),k$o=o("__init__()"),R$o=o(" (throws an error)."),S$o=l(),Zr=a("div"),m(Ow.$$.fragment),P$o=l(),kle=a("p"),$$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),I$o=l(),Bd=a("p"),D$o=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),j$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=a("code"),q$o=o("from_pretrained()"),G$o=o("to load the model weights."),O$o=l(),Ple=a("p"),X$o=o("Examples:"),V$o=l(),m(Xw.$$.fragment),z$o=l(),ze=a("div"),m(Vw.$$.fragment),W$o=l(),$le=a("p"),Q$o=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),H$o=l(),Ka=a("p"),U$o=o("The model class to instantiate is selected based on the "),Ile=a("code"),J$o=o("model_type"),Y$o=o(` property of the config object (either
passed as an argument or loaded from `),Dle=a("code"),K$o=o("pretrained_model_name_or_path"),Z$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(":"),rIo=l(),Ae=a("ul"),VT=a("li"),Nle=a("strong"),tIo=o("data2vec-audio"),aIo=o(" \u2014 "),Dj=a("a"),sIo=o("Data2VecAudioForSequenceClassification"),nIo=o(" (Data2VecAudio model)"),lIo=l(),zT=a("li"),qle=a("strong"),iIo=o("hubert"),dIo=o(" \u2014 "),jj=a("a"),cIo=o("HubertForSequenceClassification"),mIo=o(" (Hubert model)"),fIo=l(),WT=a("li"),Gle=a("strong"),gIo=o("sew"),hIo=o(" \u2014 "),Nj=a("a"),uIo=o("SEWForSequenceClassification"),pIo=o(" (SEW model)"),_Io=l(),QT=a("li"),Ole=a("strong"),bIo=o("sew-d"),vIo=o(" \u2014 "),qj=a("a"),TIo=o("SEWDForSequenceClassification"),FIo=o(" (SEW-D model)"),CIo=l(),HT=a("li"),Xle=a("strong"),MIo=o("unispeech"),EIo=o(" \u2014 "),Gj=a("a"),yIo=o("UniSpeechForSequenceClassification"),wIo=o(" (UniSpeech model)"),AIo=l(),UT=a("li"),Vle=a("strong"),LIo=o("unispeech-sat"),BIo=o(" \u2014 "),Oj=a("a"),xIo=o("UniSpeechSatForSequenceClassification"),kIo=o(" (UniSpeechSat model)"),RIo=l(),JT=a("li"),zle=a("strong"),SIo=o("wav2vec2"),PIo=o(" \u2014 "),Xj=a("a"),$Io=o("Wav2Vec2ForSequenceClassification"),IIo=o(" (Wav2Vec2 model)"),DIo=l(),YT=a("li"),Wle=a("strong"),jIo=o("wavlm"),NIo=o(" \u2014 "),Vj=a("a"),qIo=o("WavLMForSequenceClassification"),GIo=o(" (WavLM model)"),OIo=l(),KT=a("p"),XIo=o("The model is set in evaluation mode by default using "),Qle=a("code"),VIo=o("model.eval()"),zIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),WIo=o("model.train()"),QIo=l(),Ule=a("p"),HIo=o("Examples:"),UIo=l(),m(zw.$$.fragment),fBe=l(),xd=a("h2"),ZT=a("a"),Jle=a("span"),m(Ww.$$.fragment),JIo=l(),Yle=a("span"),YIo=o("AutoModelForAudioFrameClassification"),gBe=l(),lr=a("div"),m(Qw.$$.fragment),KIo=l(),kd=a("p"),ZIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Kle=a("code"),eDo=o("from_pretrained()"),oDo=o("class method or the "),Zle=a("code"),rDo=o("from_config()"),tDo=o(`class
method.`),aDo=l(),Hw=a("p"),sDo=o("This class cannot be instantiated directly using "),eie=a("code"),nDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),et=a("div"),m(Uw.$$.fragment),dDo=l(),oie=a("p"),cDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mDo=l(),Rd=a("p"),fDo=o(`Note:
Loading a model from its configuration file does `),rie=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=a("code"),uDo=o("from_pretrained()"),pDo=o("to load the model weights."),_Do=l(),aie=a("p"),bDo=o("Examples:"),vDo=l(),m(Jw.$$.fragment),TDo=l(),We=a("div"),m(Yw.$$.fragment),FDo=l(),sie=a("p"),CDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MDo=l(),Za=a("p"),EDo=o("The model class to instantiate is selected based on the "),nie=a("code"),yDo=o("model_type"),wDo=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=a("code"),BDo=o("pretrained_model_name_or_path"),xDo=o(":"),kDo=l(),es=a("ul"),e1=a("li"),die=a("strong"),RDo=o("data2vec-audio"),SDo=o(" \u2014 "),zj=a("a"),PDo=o("Data2VecAudioForAudioFrameClassification"),$Do=o(" (Data2VecAudio model)"),IDo=l(),o1=a("li"),cie=a("strong"),DDo=o("unispeech-sat"),jDo=o(" \u2014 "),Wj=a("a"),NDo=o("UniSpeechSatForAudioFrameClassification"),qDo=o(" (UniSpeechSat model)"),GDo=l(),r1=a("li"),mie=a("strong"),ODo=o("wav2vec2"),XDo=o(" \u2014 "),Qj=a("a"),VDo=o("Wav2Vec2ForAudioFrameClassification"),zDo=o(" (Wav2Vec2 model)"),WDo=l(),t1=a("li"),fie=a("strong"),QDo=o("wavlm"),HDo=o(" \u2014 "),Hj=a("a"),UDo=o("WavLMForAudioFrameClassification"),JDo=o(" (WavLM model)"),YDo=l(),a1=a("p"),KDo=o("The model is set in evaluation mode by default using "),gie=a("code"),ZDo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),ojo=o("model.train()"),rjo=l(),uie=a("p"),tjo=o("Examples:"),ajo=l(),m(Kw.$$.fragment),hBe=l(),Sd=a("h2"),s1=a("a"),pie=a("span"),m(Zw.$$.fragment),sjo=l(),_ie=a("span"),njo=o("AutoModelForCTC"),uBe=l(),ir=a("div"),m(e6.$$.fragment),ljo=l(),Pd=a("p"),ijo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bie=a("code"),djo=o("from_pretrained()"),cjo=o("class method or the "),vie=a("code"),mjo=o("from_config()"),fjo=o(`class
method.`),gjo=l(),o6=a("p"),hjo=o("This class cannot be instantiated directly using "),Tie=a("code"),ujo=o("__init__()"),pjo=o(" (throws an error)."),_jo=l(),ot=a("div"),m(r6.$$.fragment),bjo=l(),Fie=a("p"),vjo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tjo=l(),$d=a("p"),Fjo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),Cjo=o("not"),Mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),Ejo=o("from_pretrained()"),yjo=o("to load the model weights."),wjo=l(),Eie=a("p"),Ajo=o("Examples:"),Ljo=l(),m(t6.$$.fragment),Bjo=l(),Qe=a("div"),m(a6.$$.fragment),xjo=l(),yie=a("p"),kjo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rjo=l(),os=a("p"),Sjo=o("The model class to instantiate is selected based on the "),wie=a("code"),Pjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),Ijo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),jjo=o("pretrained_model_name_or_path"),Njo=o(":"),qjo=l(),Le=a("ul"),n1=a("li"),Bie=a("strong"),Gjo=o("data2vec-audio"),Ojo=o(" \u2014 "),Uj=a("a"),Xjo=o("Data2VecAudioForCTC"),Vjo=o(" (Data2VecAudio model)"),zjo=l(),l1=a("li"),xie=a("strong"),Wjo=o("hubert"),Qjo=o(" \u2014 "),Jj=a("a"),Hjo=o("HubertForCTC"),Ujo=o(" (Hubert model)"),Jjo=l(),i1=a("li"),kie=a("strong"),Yjo=o("sew"),Kjo=o(" \u2014 "),Yj=a("a"),Zjo=o("SEWForCTC"),eNo=o(" (SEW model)"),oNo=l(),d1=a("li"),Rie=a("strong"),rNo=o("sew-d"),tNo=o(" \u2014 "),Kj=a("a"),aNo=o("SEWDForCTC"),sNo=o(" (SEW-D model)"),nNo=l(),c1=a("li"),Sie=a("strong"),lNo=o("unispeech"),iNo=o(" \u2014 "),Zj=a("a"),dNo=o("UniSpeechForCTC"),cNo=o(" (UniSpeech model)"),mNo=l(),m1=a("li"),Pie=a("strong"),fNo=o("unispeech-sat"),gNo=o(" \u2014 "),eN=a("a"),hNo=o("UniSpeechSatForCTC"),uNo=o(" (UniSpeechSat model)"),pNo=l(),f1=a("li"),$ie=a("strong"),_No=o("wav2vec2"),bNo=o(" \u2014 "),oN=a("a"),vNo=o("Wav2Vec2ForCTC"),TNo=o(" (Wav2Vec2 model)"),FNo=l(),g1=a("li"),Iie=a("strong"),CNo=o("wavlm"),MNo=o(" \u2014 "),rN=a("a"),ENo=o("WavLMForCTC"),yNo=o(" (WavLM model)"),wNo=l(),h1=a("p"),ANo=o("The model is set in evaluation mode by default using "),Die=a("code"),LNo=o("model.eval()"),BNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),xNo=o("model.train()"),kNo=l(),Nie=a("p"),RNo=o("Examples:"),SNo=l(),m(s6.$$.fragment),pBe=l(),Id=a("h2"),u1=a("a"),qie=a("span"),m(n6.$$.fragment),PNo=l(),Gie=a("span"),$No=o("AutoModelForSpeechSeq2Seq"),_Be=l(),dr=a("div"),m(l6.$$.fragment),INo=l(),Dd=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Oie=a("code"),jNo=o("from_pretrained()"),NNo=o("class method or the "),Xie=a("code"),qNo=o("from_config()"),GNo=o(`class
method.`),ONo=l(),i6=a("p"),XNo=o("This class cannot be instantiated directly using "),Vie=a("code"),VNo=o("__init__()"),zNo=o(" (throws an error)."),WNo=l(),rt=a("div"),m(d6.$$.fragment),QNo=l(),zie=a("p"),HNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UNo=l(),jd=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=a("code"),ZNo=o("from_pretrained()"),eqo=o("to load the model weights."),oqo=l(),Hie=a("p"),rqo=o("Examples:"),tqo=l(),m(c6.$$.fragment),aqo=l(),He=a("div"),m(m6.$$.fragment),sqo=l(),Uie=a("p"),nqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lqo=l(),rs=a("p"),iqo=o("The model class to instantiate is selected based on the "),Jie=a("code"),dqo=o("model_type"),cqo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),mqo=o("pretrained_model_name_or_path"),fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(":"),uqo=l(),f6=a("ul"),p1=a("li"),Zie=a("strong"),pqo=o("speech-encoder-decoder"),_qo=o(" \u2014 "),tN=a("a"),bqo=o("SpeechEncoderDecoderModel"),vqo=o(" (Speech Encoder decoder model)"),Tqo=l(),_1=a("li"),ede=a("strong"),Fqo=o("speech_to_text"),Cqo=o(" \u2014 "),aN=a("a"),Mqo=o("Speech2TextForConditionalGeneration"),Eqo=o(" (Speech2Text model)"),yqo=l(),b1=a("p"),wqo=o("The model is set in evaluation mode by default using "),ode=a("code"),Aqo=o("model.eval()"),Lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),Bqo=o("model.train()"),xqo=l(),tde=a("p"),kqo=o("Examples:"),Rqo=l(),m(g6.$$.fragment),bBe=l(),Nd=a("h2"),v1=a("a"),ade=a("span"),m(h6.$$.fragment),Sqo=l(),sde=a("span"),Pqo=o("AutoModelForAudioXVector"),vBe=l(),cr=a("div"),m(u6.$$.fragment),$qo=l(),qd=a("p"),Iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nde=a("code"),Dqo=o("from_pretrained()"),jqo=o("class method or the "),lde=a("code"),Nqo=o("from_config()"),qqo=o(`class
method.`),Gqo=l(),p6=a("p"),Oqo=o("This class cannot be instantiated directly using "),ide=a("code"),Xqo=o("__init__()"),Vqo=o(" (throws an error)."),zqo=l(),tt=a("div"),m(_6.$$.fragment),Wqo=l(),dde=a("p"),Qqo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hqo=l(),Gd=a("p"),Uqo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),Jqo=o("not"),Yqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=a("code"),Kqo=o("from_pretrained()"),Zqo=o("to load the model weights."),eGo=l(),fde=a("p"),oGo=o("Examples:"),rGo=l(),m(b6.$$.fragment),tGo=l(),Ue=a("div"),m(v6.$$.fragment),aGo=l(),gde=a("p"),sGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nGo=l(),ts=a("p"),lGo=o("The model class to instantiate is selected based on the "),hde=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),cGo=o("pretrained_model_name_or_path"),mGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),fGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),as=a("ul"),T1=a("li"),_de=a("strong"),uGo=o("data2vec-audio"),pGo=o(" \u2014 "),sN=a("a"),_Go=o("Data2VecAudioForXVector"),bGo=o(" (Data2VecAudio model)"),vGo=l(),F1=a("li"),bde=a("strong"),TGo=o("unispeech-sat"),FGo=o(" \u2014 "),nN=a("a"),CGo=o("UniSpeechSatForXVector"),MGo=o(" (UniSpeechSat model)"),EGo=l(),C1=a("li"),vde=a("strong"),yGo=o("wav2vec2"),wGo=o(" \u2014 "),lN=a("a"),AGo=o("Wav2Vec2ForXVector"),LGo=o(" (Wav2Vec2 model)"),BGo=l(),M1=a("li"),Tde=a("strong"),xGo=o("wavlm"),kGo=o(" \u2014 "),iN=a("a"),RGo=o("WavLMForXVector"),SGo=o(" (WavLM model)"),PGo=l(),E1=a("p"),$Go=o("The model is set in evaluation mode by default using "),Fde=a("code"),IGo=o("model.eval()"),DGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),jGo=o("model.train()"),NGo=l(),Mde=a("p"),qGo=o("Examples:"),GGo=l(),m(T6.$$.fragment),TBe=l(),Od=a("h2"),y1=a("a"),Ede=a("span"),m(F6.$$.fragment),OGo=l(),yde=a("span"),XGo=o("AutoModelForMaskedImageModeling"),FBe=l(),mr=a("div"),m(C6.$$.fragment),VGo=l(),Xd=a("p"),zGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wde=a("code"),WGo=o("from_pretrained()"),QGo=o("class method or the "),Ade=a("code"),HGo=o("from_config()"),UGo=o(`class
method.`),JGo=l(),M6=a("p"),YGo=o("This class cannot be instantiated directly using "),Lde=a("code"),KGo=o("__init__()"),ZGo=o(" (throws an error)."),eOo=l(),at=a("div"),m(E6.$$.fragment),oOo=l(),Bde=a("p"),rOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tOo=l(),Vd=a("p"),aOo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),sOo=o("not"),nOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),lOo=o("from_pretrained()"),iOo=o("to load the model weights."),dOo=l(),Rde=a("p"),cOo=o("Examples:"),mOo=l(),m(y6.$$.fragment),fOo=l(),Je=a("div"),m(w6.$$.fragment),gOo=l(),Sde=a("p"),hOo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uOo=l(),ss=a("p"),pOo=o("The model class to instantiate is selected based on the "),Pde=a("code"),_Oo=o("model_type"),bOo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),vOo=o("pretrained_model_name_or_path"),TOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),FOo=o("pretrained_model_name_or_path"),COo=o(":"),MOo=l(),zd=a("ul"),w1=a("li"),Dde=a("strong"),EOo=o("deit"),yOo=o(" \u2014 "),dN=a("a"),wOo=o("DeiTForMaskedImageModeling"),AOo=o(" (DeiT model)"),LOo=l(),A1=a("li"),jde=a("strong"),BOo=o("swin"),xOo=o(" \u2014 "),cN=a("a"),kOo=o("SwinForMaskedImageModeling"),ROo=o(" (Swin model)"),SOo=l(),L1=a("li"),Nde=a("strong"),POo=o("vit"),$Oo=o(" \u2014 "),mN=a("a"),IOo=o("ViTForMaskedImageModeling"),DOo=o(" (ViT model)"),jOo=l(),B1=a("p"),NOo=o("The model is set in evaluation mode by default using "),qde=a("code"),qOo=o("model.eval()"),GOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=a("code"),OOo=o("model.train()"),XOo=l(),Ode=a("p"),VOo=o("Examples:"),zOo=l(),m(A6.$$.fragment),CBe=l(),Wd=a("h2"),x1=a("a"),Xde=a("span"),m(L6.$$.fragment),WOo=l(),Vde=a("span"),QOo=o("AutoModelForObjectDetection"),MBe=l(),fr=a("div"),m(B6.$$.fragment),HOo=l(),Qd=a("p"),UOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zde=a("code"),JOo=o("from_pretrained()"),YOo=o("class method or the "),Wde=a("code"),KOo=o("from_config()"),ZOo=o(`class
method.`),eXo=l(),x6=a("p"),oXo=o("This class cannot be instantiated directly using "),Qde=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),st=a("div"),m(k6.$$.fragment),sXo=l(),Hde=a("p"),nXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lXo=l(),Hd=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=a("code"),mXo=o("from_pretrained()"),fXo=o("to load the model weights."),gXo=l(),Yde=a("p"),hXo=o("Examples:"),uXo=l(),m(R6.$$.fragment),pXo=l(),Ye=a("div"),m(S6.$$.fragment),_Xo=l(),Kde=a("p"),bXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vXo=l(),ns=a("p"),TXo=o("The model class to instantiate is selected based on the "),Zde=a("code"),FXo=o("model_type"),CXo=o(` property of the config object (either
passed as an argument or loaded from `),ece=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=a("code"),yXo=o("pretrained_model_name_or_path"),wXo=o(":"),AXo=l(),rce=a("ul"),k1=a("li"),tce=a("strong"),LXo=o("detr"),BXo=o(" \u2014 "),fN=a("a"),xXo=o("DetrForObjectDetection"),kXo=o(" (DETR model)"),RXo=l(),R1=a("p"),SXo=o("The model is set in evaluation mode by default using "),ace=a("code"),PXo=o("model.eval()"),$Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sce=a("code"),IXo=o("model.train()"),DXo=l(),nce=a("p"),jXo=o("Examples:"),NXo=l(),m(P6.$$.fragment),EBe=l(),Ud=a("h2"),S1=a("a"),lce=a("span"),m($6.$$.fragment),qXo=l(),ice=a("span"),GXo=o("AutoModelForImageSegmentation"),yBe=l(),gr=a("div"),m(I6.$$.fragment),OXo=l(),Jd=a("p"),XXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dce=a("code"),VXo=o("from_pretrained()"),zXo=o("class method or the "),cce=a("code"),WXo=o("from_config()"),QXo=o(`class
method.`),HXo=l(),D6=a("p"),UXo=o("This class cannot be instantiated directly using "),mce=a("code"),JXo=o("__init__()"),YXo=o(" (throws an error)."),KXo=l(),nt=a("div"),m(j6.$$.fragment),ZXo=l(),fce=a("p"),eVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),oVo=l(),Yd=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hce=a("code"),sVo=o("from_pretrained()"),nVo=o("to load the model weights."),lVo=l(),uce=a("p"),iVo=o("Examples:"),dVo=l(),m(N6.$$.fragment),cVo=l(),Ke=a("div"),m(q6.$$.fragment),mVo=l(),pce=a("p"),fVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gVo=l(),ls=a("p"),hVo=o("The model class to instantiate is selected based on the "),_ce=a("code"),uVo=o("model_type"),pVo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),_Vo=o("pretrained_model_name_or_path"),bVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),vVo=o("pretrained_model_name_or_path"),TVo=o(":"),FVo=l(),Tce=a("ul"),P1=a("li"),Fce=a("strong"),CVo=o("detr"),MVo=o(" \u2014 "),gN=a("a"),EVo=o("DetrForSegmentation"),yVo=o(" (DETR model)"),wVo=l(),$1=a("p"),AVo=o("The model is set in evaluation mode by default using "),Cce=a("code"),LVo=o("model.eval()"),BVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),xVo=o("model.train()"),kVo=l(),Ece=a("p"),RVo=o("Examples:"),SVo=l(),m(G6.$$.fragment),wBe=l(),Kd=a("h2"),I1=a("a"),yce=a("span"),m(O6.$$.fragment),PVo=l(),wce=a("span"),$Vo=o("AutoModelForSemanticSegmentation"),ABe=l(),hr=a("div"),m(X6.$$.fragment),IVo=l(),Zd=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ace=a("code"),jVo=o("from_pretrained()"),NVo=o("class method or the "),Lce=a("code"),qVo=o("from_config()"),GVo=o(`class
method.`),OVo=l(),V6=a("p"),XVo=o("This class cannot be instantiated directly using "),Bce=a("code"),VVo=o("__init__()"),zVo=o(" (throws an error)."),WVo=l(),lt=a("div"),m(z6.$$.fragment),QVo=l(),xce=a("p"),HVo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),UVo=l(),ec=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rce=a("code"),ZVo=o("from_pretrained()"),ezo=o("to load the model weights."),ozo=l(),Sce=a("p"),rzo=o("Examples:"),tzo=l(),m(W6.$$.fragment),azo=l(),Ze=a("div"),m(Q6.$$.fragment),szo=l(),Pce=a("p"),nzo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lzo=l(),is=a("p"),izo=o("The model class to instantiate is selected based on the "),$ce=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),mzo=o("pretrained_model_name_or_path"),fzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),uzo=l(),H6=a("ul"),D1=a("li"),jce=a("strong"),pzo=o("beit"),_zo=o(" \u2014 "),hN=a("a"),bzo=o("BeitForSemanticSegmentation"),vzo=o(" (BEiT model)"),Tzo=l(),j1=a("li"),Nce=a("strong"),Fzo=o("segformer"),Czo=o(" \u2014 "),uN=a("a"),Mzo=o("SegformerForSemanticSegmentation"),Ezo=o(" (SegFormer model)"),yzo=l(),N1=a("p"),wzo=o("The model is set in evaluation mode by default using "),qce=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),Bzo=o("model.train()"),xzo=l(),Oce=a("p"),kzo=o("Examples:"),Rzo=l(),m(U6.$$.fragment),LBe=l(),oc=a("h2"),q1=a("a"),Xce=a("span"),m(J6.$$.fragment),Szo=l(),Vce=a("span"),Pzo=o("TFAutoModel"),BBe=l(),ur=a("div"),m(Y6.$$.fragment),$zo=l(),rc=a("p"),Izo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zce=a("code"),Dzo=o("from_pretrained()"),jzo=o("class method or the "),Wce=a("code"),Nzo=o("from_config()"),qzo=o(`class
method.`),Gzo=l(),K6=a("p"),Ozo=o("This class cannot be instantiated directly using "),Qce=a("code"),Xzo=o("__init__()"),Vzo=o(" (throws an error)."),zzo=l(),it=a("div"),m(Z6.$$.fragment),Wzo=l(),Hce=a("p"),Qzo=o("Instantiates one of the base model classes of the library from a configuration."),Hzo=l(),tc=a("p"),Uzo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),Jzo=o("not"),Yzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jce=a("code"),Kzo=o("from_pretrained()"),Zzo=o("to load the model weights."),eWo=l(),Yce=a("p"),oWo=o("Examples:"),rWo=l(),m(eA.$$.fragment),tWo=l(),go=a("div"),m(oA.$$.fragment),aWo=l(),Kce=a("p"),sWo=o("Instantiate one of the base model classes of the library from a pretrained model."),nWo=l(),ds=a("p"),lWo=o("The model class to instantiate is selected based on the "),Zce=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),cWo=o("pretrained_model_name_or_path"),mWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),fWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),B=a("ul"),G1=a("li"),rme=a("strong"),uWo=o("albert"),pWo=o(" \u2014 "),pN=a("a"),_Wo=o("TFAlbertModel"),bWo=o(" (ALBERT model)"),vWo=l(),O1=a("li"),tme=a("strong"),TWo=o("bart"),FWo=o(" \u2014 "),_N=a("a"),CWo=o("TFBartModel"),MWo=o(" (BART model)"),EWo=l(),X1=a("li"),ame=a("strong"),yWo=o("bert"),wWo=o(" \u2014 "),bN=a("a"),AWo=o("TFBertModel"),LWo=o(" (BERT model)"),BWo=l(),V1=a("li"),sme=a("strong"),xWo=o("blenderbot"),kWo=o(" \u2014 "),vN=a("a"),RWo=o("TFBlenderbotModel"),SWo=o(" (Blenderbot model)"),PWo=l(),z1=a("li"),nme=a("strong"),$Wo=o("blenderbot-small"),IWo=o(" \u2014 "),TN=a("a"),DWo=o("TFBlenderbotSmallModel"),jWo=o(" (BlenderbotSmall model)"),NWo=l(),W1=a("li"),lme=a("strong"),qWo=o("camembert"),GWo=o(" \u2014 "),FN=a("a"),OWo=o("TFCamembertModel"),XWo=o(" (CamemBERT model)"),VWo=l(),Q1=a("li"),ime=a("strong"),zWo=o("clip"),WWo=o(" \u2014 "),CN=a("a"),QWo=o("TFCLIPModel"),HWo=o(" (CLIP model)"),UWo=l(),H1=a("li"),dme=a("strong"),JWo=o("convbert"),YWo=o(" \u2014 "),MN=a("a"),KWo=o("TFConvBertModel"),ZWo=o(" (ConvBERT model)"),eQo=l(),U1=a("li"),cme=a("strong"),oQo=o("convnext"),rQo=o(" \u2014 "),EN=a("a"),tQo=o("TFConvNextModel"),aQo=o(" (ConvNext model)"),sQo=l(),J1=a("li"),mme=a("strong"),nQo=o("ctrl"),lQo=o(" \u2014 "),yN=a("a"),iQo=o("TFCTRLModel"),dQo=o(" (CTRL model)"),cQo=l(),Y1=a("li"),fme=a("strong"),mQo=o("deberta"),fQo=o(" \u2014 "),wN=a("a"),gQo=o("TFDebertaModel"),hQo=o(" (DeBERTa model)"),uQo=l(),K1=a("li"),gme=a("strong"),pQo=o("deberta-v2"),_Qo=o(" \u2014 "),AN=a("a"),bQo=o("TFDebertaV2Model"),vQo=o(" (DeBERTa-v2 model)"),TQo=l(),Z1=a("li"),hme=a("strong"),FQo=o("distilbert"),CQo=o(" \u2014 "),LN=a("a"),MQo=o("TFDistilBertModel"),EQo=o(" (DistilBERT model)"),yQo=l(),eF=a("li"),ume=a("strong"),wQo=o("dpr"),AQo=o(" \u2014 "),BN=a("a"),LQo=o("TFDPRQuestionEncoder"),BQo=o(" (DPR model)"),xQo=l(),oF=a("li"),pme=a("strong"),kQo=o("electra"),RQo=o(" \u2014 "),xN=a("a"),SQo=o("TFElectraModel"),PQo=o(" (ELECTRA model)"),$Qo=l(),rF=a("li"),_me=a("strong"),IQo=o("flaubert"),DQo=o(" \u2014 "),kN=a("a"),jQo=o("TFFlaubertModel"),NQo=o(" (FlauBERT model)"),qQo=l(),$n=a("li"),bme=a("strong"),GQo=o("funnel"),OQo=o(" \u2014 "),RN=a("a"),XQo=o("TFFunnelModel"),VQo=o(" or "),SN=a("a"),zQo=o("TFFunnelBaseModel"),WQo=o(" (Funnel Transformer model)"),QQo=l(),tF=a("li"),vme=a("strong"),HQo=o("gpt2"),UQo=o(" \u2014 "),PN=a("a"),JQo=o("TFGPT2Model"),YQo=o(" (OpenAI GPT-2 model)"),KQo=l(),aF=a("li"),Tme=a("strong"),ZQo=o("hubert"),eHo=o(" \u2014 "),$N=a("a"),oHo=o("TFHubertModel"),rHo=o(" (Hubert model)"),tHo=l(),sF=a("li"),Fme=a("strong"),aHo=o("layoutlm"),sHo=o(" \u2014 "),IN=a("a"),nHo=o("TFLayoutLMModel"),lHo=o(" (LayoutLM model)"),iHo=l(),nF=a("li"),Cme=a("strong"),dHo=o("led"),cHo=o(" \u2014 "),DN=a("a"),mHo=o("TFLEDModel"),fHo=o(" (LED model)"),gHo=l(),lF=a("li"),Mme=a("strong"),hHo=o("longformer"),uHo=o(" \u2014 "),jN=a("a"),pHo=o("TFLongformerModel"),_Ho=o(" (Longformer model)"),bHo=l(),iF=a("li"),Eme=a("strong"),vHo=o("lxmert"),THo=o(" \u2014 "),NN=a("a"),FHo=o("TFLxmertModel"),CHo=o(" (LXMERT model)"),MHo=l(),dF=a("li"),yme=a("strong"),EHo=o("marian"),yHo=o(" \u2014 "),qN=a("a"),wHo=o("TFMarianModel"),AHo=o(" (Marian model)"),LHo=l(),cF=a("li"),wme=a("strong"),BHo=o("mbart"),xHo=o(" \u2014 "),GN=a("a"),kHo=o("TFMBartModel"),RHo=o(" (mBART model)"),SHo=l(),mF=a("li"),Ame=a("strong"),PHo=o("mobilebert"),$Ho=o(" \u2014 "),ON=a("a"),IHo=o("TFMobileBertModel"),DHo=o(" (MobileBERT model)"),jHo=l(),fF=a("li"),Lme=a("strong"),NHo=o("mpnet"),qHo=o(" \u2014 "),XN=a("a"),GHo=o("TFMPNetModel"),OHo=o(" (MPNet model)"),XHo=l(),gF=a("li"),Bme=a("strong"),VHo=o("mt5"),zHo=o(" \u2014 "),VN=a("a"),WHo=o("TFMT5Model"),QHo=o(" (mT5 model)"),HHo=l(),hF=a("li"),xme=a("strong"),UHo=o("openai-gpt"),JHo=o(" \u2014 "),zN=a("a"),YHo=o("TFOpenAIGPTModel"),KHo=o(" (OpenAI GPT model)"),ZHo=l(),uF=a("li"),kme=a("strong"),eUo=o("pegasus"),oUo=o(" \u2014 "),WN=a("a"),rUo=o("TFPegasusModel"),tUo=o(" (Pegasus model)"),aUo=l(),pF=a("li"),Rme=a("strong"),sUo=o("rembert"),nUo=o(" \u2014 "),QN=a("a"),lUo=o("TFRemBertModel"),iUo=o(" (RemBERT model)"),dUo=l(),_F=a("li"),Sme=a("strong"),cUo=o("roberta"),mUo=o(" \u2014 "),HN=a("a"),fUo=o("TFRobertaModel"),gUo=o(" (RoBERTa model)"),hUo=l(),bF=a("li"),Pme=a("strong"),uUo=o("roformer"),pUo=o(" \u2014 "),UN=a("a"),_Uo=o("TFRoFormerModel"),bUo=o(" (RoFormer model)"),vUo=l(),vF=a("li"),$me=a("strong"),TUo=o("speech_to_text"),FUo=o(" \u2014 "),JN=a("a"),CUo=o("TFSpeech2TextModel"),MUo=o(" (Speech2Text model)"),EUo=l(),TF=a("li"),Ime=a("strong"),yUo=o("t5"),wUo=o(" \u2014 "),YN=a("a"),AUo=o("TFT5Model"),LUo=o(" (T5 model)"),BUo=l(),FF=a("li"),Dme=a("strong"),xUo=o("tapas"),kUo=o(" \u2014 "),KN=a("a"),RUo=o("TFTapasModel"),SUo=o(" (TAPAS model)"),PUo=l(),CF=a("li"),jme=a("strong"),$Uo=o("transfo-xl"),IUo=o(" \u2014 "),ZN=a("a"),DUo=o("TFTransfoXLModel"),jUo=o(" (Transformer-XL model)"),NUo=l(),MF=a("li"),Nme=a("strong"),qUo=o("vit"),GUo=o(" \u2014 "),eq=a("a"),OUo=o("TFViTModel"),XUo=o(" (ViT model)"),VUo=l(),EF=a("li"),qme=a("strong"),zUo=o("wav2vec2"),WUo=o(" \u2014 "),oq=a("a"),QUo=o("TFWav2Vec2Model"),HUo=o(" (Wav2Vec2 model)"),UUo=l(),yF=a("li"),Gme=a("strong"),JUo=o("xlm"),YUo=o(" \u2014 "),rq=a("a"),KUo=o("TFXLMModel"),ZUo=o(" (XLM model)"),eJo=l(),wF=a("li"),Ome=a("strong"),oJo=o("xlm-roberta"),rJo=o(" \u2014 "),tq=a("a"),tJo=o("TFXLMRobertaModel"),aJo=o(" (XLM-RoBERTa model)"),sJo=l(),AF=a("li"),Xme=a("strong"),nJo=o("xlnet"),lJo=o(" \u2014 "),aq=a("a"),iJo=o("TFXLNetModel"),dJo=o(" (XLNet model)"),cJo=l(),Vme=a("p"),mJo=o("Examples:"),fJo=l(),m(rA.$$.fragment),xBe=l(),ac=a("h2"),LF=a("a"),zme=a("span"),m(tA.$$.fragment),gJo=l(),Wme=a("span"),hJo=o("TFAutoModelForPreTraining"),kBe=l(),pr=a("div"),m(aA.$$.fragment),uJo=l(),sc=a("p"),pJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qme=a("code"),_Jo=o("from_pretrained()"),bJo=o("class method or the "),Hme=a("code"),vJo=o("from_config()"),TJo=o(`class
method.`),FJo=l(),sA=a("p"),CJo=o("This class cannot be instantiated directly using "),Ume=a("code"),MJo=o("__init__()"),EJo=o(" (throws an error)."),yJo=l(),dt=a("div"),m(nA.$$.fragment),wJo=l(),Jme=a("p"),AJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LJo=l(),nc=a("p"),BJo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),xJo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kme=a("code"),RJo=o("from_pretrained()"),SJo=o("to load the model weights."),PJo=l(),Zme=a("p"),$Jo=o("Examples:"),IJo=l(),m(lA.$$.fragment),DJo=l(),ho=a("div"),m(iA.$$.fragment),jJo=l(),efe=a("p"),NJo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qJo=l(),cs=a("p"),GJo=o("The model class to instantiate is selected based on the "),ofe=a("code"),OJo=o("model_type"),XJo=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),VJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),WJo=o("pretrained_model_name_or_path"),QJo=o(":"),HJo=l(),H=a("ul"),BF=a("li"),afe=a("strong"),UJo=o("albert"),JJo=o(" \u2014 "),sq=a("a"),YJo=o("TFAlbertForPreTraining"),KJo=o(" (ALBERT model)"),ZJo=l(),xF=a("li"),sfe=a("strong"),eYo=o("bart"),oYo=o(" \u2014 "),nq=a("a"),rYo=o("TFBartForConditionalGeneration"),tYo=o(" (BART model)"),aYo=l(),kF=a("li"),nfe=a("strong"),sYo=o("bert"),nYo=o(" \u2014 "),lq=a("a"),lYo=o("TFBertForPreTraining"),iYo=o(" (BERT model)"),dYo=l(),RF=a("li"),lfe=a("strong"),cYo=o("camembert"),mYo=o(" \u2014 "),iq=a("a"),fYo=o("TFCamembertForMaskedLM"),gYo=o(" (CamemBERT model)"),hYo=l(),SF=a("li"),ife=a("strong"),uYo=o("ctrl"),pYo=o(" \u2014 "),dq=a("a"),_Yo=o("TFCTRLLMHeadModel"),bYo=o(" (CTRL model)"),vYo=l(),PF=a("li"),dfe=a("strong"),TYo=o("distilbert"),FYo=o(" \u2014 "),cq=a("a"),CYo=o("TFDistilBertForMaskedLM"),MYo=o(" (DistilBERT model)"),EYo=l(),$F=a("li"),cfe=a("strong"),yYo=o("electra"),wYo=o(" \u2014 "),mq=a("a"),AYo=o("TFElectraForPreTraining"),LYo=o(" (ELECTRA model)"),BYo=l(),IF=a("li"),mfe=a("strong"),xYo=o("flaubert"),kYo=o(" \u2014 "),fq=a("a"),RYo=o("TFFlaubertWithLMHeadModel"),SYo=o(" (FlauBERT model)"),PYo=l(),DF=a("li"),ffe=a("strong"),$Yo=o("funnel"),IYo=o(" \u2014 "),gq=a("a"),DYo=o("TFFunnelForPreTraining"),jYo=o(" (Funnel Transformer model)"),NYo=l(),jF=a("li"),gfe=a("strong"),qYo=o("gpt2"),GYo=o(" \u2014 "),hq=a("a"),OYo=o("TFGPT2LMHeadModel"),XYo=o(" (OpenAI GPT-2 model)"),VYo=l(),NF=a("li"),hfe=a("strong"),zYo=o("layoutlm"),WYo=o(" \u2014 "),uq=a("a"),QYo=o("TFLayoutLMForMaskedLM"),HYo=o(" (LayoutLM model)"),UYo=l(),qF=a("li"),ufe=a("strong"),JYo=o("lxmert"),YYo=o(" \u2014 "),pq=a("a"),KYo=o("TFLxmertForPreTraining"),ZYo=o(" (LXMERT model)"),eKo=l(),GF=a("li"),pfe=a("strong"),oKo=o("mobilebert"),rKo=o(" \u2014 "),_q=a("a"),tKo=o("TFMobileBertForPreTraining"),aKo=o(" (MobileBERT model)"),sKo=l(),OF=a("li"),_fe=a("strong"),nKo=o("mpnet"),lKo=o(" \u2014 "),bq=a("a"),iKo=o("TFMPNetForMaskedLM"),dKo=o(" (MPNet model)"),cKo=l(),XF=a("li"),bfe=a("strong"),mKo=o("openai-gpt"),fKo=o(" \u2014 "),vq=a("a"),gKo=o("TFOpenAIGPTLMHeadModel"),hKo=o(" (OpenAI GPT model)"),uKo=l(),VF=a("li"),vfe=a("strong"),pKo=o("roberta"),_Ko=o(" \u2014 "),Tq=a("a"),bKo=o("TFRobertaForMaskedLM"),vKo=o(" (RoBERTa model)"),TKo=l(),zF=a("li"),Tfe=a("strong"),FKo=o("t5"),CKo=o(" \u2014 "),Fq=a("a"),MKo=o("TFT5ForConditionalGeneration"),EKo=o(" (T5 model)"),yKo=l(),WF=a("li"),Ffe=a("strong"),wKo=o("tapas"),AKo=o(" \u2014 "),Cq=a("a"),LKo=o("TFTapasForMaskedLM"),BKo=o(" (TAPAS model)"),xKo=l(),QF=a("li"),Cfe=a("strong"),kKo=o("transfo-xl"),RKo=o(" \u2014 "),Mq=a("a"),SKo=o("TFTransfoXLLMHeadModel"),PKo=o(" (Transformer-XL model)"),$Ko=l(),HF=a("li"),Mfe=a("strong"),IKo=o("xlm"),DKo=o(" \u2014 "),Eq=a("a"),jKo=o("TFXLMWithLMHeadModel"),NKo=o(" (XLM model)"),qKo=l(),UF=a("li"),Efe=a("strong"),GKo=o("xlm-roberta"),OKo=o(" \u2014 "),yq=a("a"),XKo=o("TFXLMRobertaForMaskedLM"),VKo=o(" (XLM-RoBERTa model)"),zKo=l(),JF=a("li"),yfe=a("strong"),WKo=o("xlnet"),QKo=o(" \u2014 "),wq=a("a"),HKo=o("TFXLNetLMHeadModel"),UKo=o(" (XLNet model)"),JKo=l(),wfe=a("p"),YKo=o("Examples:"),KKo=l(),m(dA.$$.fragment),RBe=l(),lc=a("h2"),YF=a("a"),Afe=a("span"),m(cA.$$.fragment),ZKo=l(),Lfe=a("span"),eZo=o("TFAutoModelForCausalLM"),SBe=l(),_r=a("div"),m(mA.$$.fragment),oZo=l(),ic=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bfe=a("code"),tZo=o("from_pretrained()"),aZo=o("class method or the "),xfe=a("code"),sZo=o("from_config()"),nZo=o(`class
method.`),lZo=l(),fA=a("p"),iZo=o("This class cannot be instantiated directly using "),kfe=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),mZo=l(),ct=a("div"),m(gA.$$.fragment),fZo=l(),Rfe=a("p"),gZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hZo=l(),dc=a("p"),uZo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),pZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=a("code"),bZo=o("from_pretrained()"),vZo=o("to load the model weights."),TZo=l(),$fe=a("p"),FZo=o("Examples:"),CZo=l(),m(hA.$$.fragment),MZo=l(),uo=a("div"),m(uA.$$.fragment),EZo=l(),Ife=a("p"),yZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wZo=l(),ms=a("p"),AZo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),LZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),xZo=o("pretrained_model_name_or_path"),kZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),RZo=o("pretrained_model_name_or_path"),SZo=o(":"),PZo=l(),he=a("ul"),KF=a("li"),qfe=a("strong"),$Zo=o("bert"),IZo=o(" \u2014 "),Aq=a("a"),DZo=o("TFBertLMHeadModel"),jZo=o(" (BERT model)"),NZo=l(),ZF=a("li"),Gfe=a("strong"),qZo=o("ctrl"),GZo=o(" \u2014 "),Lq=a("a"),OZo=o("TFCTRLLMHeadModel"),XZo=o(" (CTRL model)"),VZo=l(),eC=a("li"),Ofe=a("strong"),zZo=o("gpt2"),WZo=o(" \u2014 "),Bq=a("a"),QZo=o("TFGPT2LMHeadModel"),HZo=o(" (OpenAI GPT-2 model)"),UZo=l(),oC=a("li"),Xfe=a("strong"),JZo=o("openai-gpt"),YZo=o(" \u2014 "),xq=a("a"),KZo=o("TFOpenAIGPTLMHeadModel"),ZZo=o(" (OpenAI GPT model)"),eer=l(),rC=a("li"),Vfe=a("strong"),oer=o("rembert"),rer=o(" \u2014 "),kq=a("a"),ter=o("TFRemBertForCausalLM"),aer=o(" (RemBERT model)"),ser=l(),tC=a("li"),zfe=a("strong"),ner=o("roberta"),ler=o(" \u2014 "),Rq=a("a"),ier=o("TFRobertaForCausalLM"),der=o(" (RoBERTa model)"),cer=l(),aC=a("li"),Wfe=a("strong"),mer=o("roformer"),fer=o(" \u2014 "),Sq=a("a"),ger=o("TFRoFormerForCausalLM"),her=o(" (RoFormer model)"),uer=l(),sC=a("li"),Qfe=a("strong"),per=o("transfo-xl"),_er=o(" \u2014 "),Pq=a("a"),ber=o("TFTransfoXLLMHeadModel"),ver=o(" (Transformer-XL model)"),Ter=l(),nC=a("li"),Hfe=a("strong"),Fer=o("xlm"),Cer=o(" \u2014 "),$q=a("a"),Mer=o("TFXLMWithLMHeadModel"),Eer=o(" (XLM model)"),yer=l(),lC=a("li"),Ufe=a("strong"),wer=o("xlnet"),Aer=o(" \u2014 "),Iq=a("a"),Ler=o("TFXLNetLMHeadModel"),Ber=o(" (XLNet model)"),xer=l(),Jfe=a("p"),ker=o("Examples:"),Rer=l(),m(pA.$$.fragment),PBe=l(),cc=a("h2"),iC=a("a"),Yfe=a("span"),m(_A.$$.fragment),Ser=l(),Kfe=a("span"),Per=o("TFAutoModelForImageClassification"),$Be=l(),br=a("div"),m(bA.$$.fragment),$er=l(),mc=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zfe=a("code"),Der=o("from_pretrained()"),jer=o("class method or the "),ege=a("code"),Ner=o("from_config()"),qer=o(`class
method.`),Ger=l(),vA=a("p"),Oer=o("This class cannot be instantiated directly using "),oge=a("code"),Xer=o("__init__()"),Ver=o(" (throws an error)."),zer=l(),mt=a("div"),m(TA.$$.fragment),Wer=l(),rge=a("p"),Qer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Her=l(),fc=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),age=a("code"),Ker=o("from_pretrained()"),Zer=o("to load the model weights."),eor=l(),sge=a("p"),oor=o("Examples:"),ror=l(),m(FA.$$.fragment),tor=l(),po=a("div"),m(CA.$$.fragment),aor=l(),nge=a("p"),sor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nor=l(),fs=a("p"),lor=o("The model class to instantiate is selected based on the "),lge=a("code"),ior=o("model_type"),dor=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(":"),uor=l(),MA=a("ul"),dC=a("li"),cge=a("strong"),por=o("convnext"),_or=o(" \u2014 "),Dq=a("a"),bor=o("TFConvNextForImageClassification"),vor=o(" (ConvNext model)"),Tor=l(),cC=a("li"),mge=a("strong"),For=o("vit"),Cor=o(" \u2014 "),jq=a("a"),Mor=o("TFViTForImageClassification"),Eor=o(" (ViT model)"),yor=l(),fge=a("p"),wor=o("Examples:"),Aor=l(),m(EA.$$.fragment),IBe=l(),gc=a("h2"),mC=a("a"),gge=a("span"),m(yA.$$.fragment),Lor=l(),hge=a("span"),Bor=o("TFAutoModelForMaskedLM"),DBe=l(),vr=a("div"),m(wA.$$.fragment),xor=l(),hc=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uge=a("code"),Ror=o("from_pretrained()"),Sor=o("class method or the "),pge=a("code"),Por=o("from_config()"),$or=o(`class
method.`),Ior=l(),AA=a("p"),Dor=o("This class cannot be instantiated directly using "),_ge=a("code"),jor=o("__init__()"),Nor=o(" (throws an error)."),qor=l(),ft=a("div"),m(LA.$$.fragment),Gor=l(),bge=a("p"),Oor=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xor=l(),uc=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),zor=o("not"),Wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tge=a("code"),Qor=o("from_pretrained()"),Hor=o("to load the model weights."),Uor=l(),Fge=a("p"),Jor=o("Examples:"),Yor=l(),m(BA.$$.fragment),Kor=l(),_o=a("div"),m(xA.$$.fragment),Zor=l(),Cge=a("p"),err=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),orr=l(),gs=a("p"),rrr=o("The model class to instantiate is selected based on the "),Mge=a("code"),trr=o("model_type"),arr=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),srr=o("pretrained_model_name_or_path"),nrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(":"),drr=l(),Y=a("ul"),fC=a("li"),wge=a("strong"),crr=o("albert"),mrr=o(" \u2014 "),Nq=a("a"),frr=o("TFAlbertForMaskedLM"),grr=o(" (ALBERT model)"),hrr=l(),gC=a("li"),Age=a("strong"),urr=o("bert"),prr=o(" \u2014 "),qq=a("a"),_rr=o("TFBertForMaskedLM"),brr=o(" (BERT model)"),vrr=l(),hC=a("li"),Lge=a("strong"),Trr=o("camembert"),Frr=o(" \u2014 "),Gq=a("a"),Crr=o("TFCamembertForMaskedLM"),Mrr=o(" (CamemBERT model)"),Err=l(),uC=a("li"),Bge=a("strong"),yrr=o("convbert"),wrr=o(" \u2014 "),Oq=a("a"),Arr=o("TFConvBertForMaskedLM"),Lrr=o(" (ConvBERT model)"),Brr=l(),pC=a("li"),xge=a("strong"),xrr=o("deberta"),krr=o(" \u2014 "),Xq=a("a"),Rrr=o("TFDebertaForMaskedLM"),Srr=o(" (DeBERTa model)"),Prr=l(),_C=a("li"),kge=a("strong"),$rr=o("deberta-v2"),Irr=o(" \u2014 "),Vq=a("a"),Drr=o("TFDebertaV2ForMaskedLM"),jrr=o(" (DeBERTa-v2 model)"),Nrr=l(),bC=a("li"),Rge=a("strong"),qrr=o("distilbert"),Grr=o(" \u2014 "),zq=a("a"),Orr=o("TFDistilBertForMaskedLM"),Xrr=o(" (DistilBERT model)"),Vrr=l(),vC=a("li"),Sge=a("strong"),zrr=o("electra"),Wrr=o(" \u2014 "),Wq=a("a"),Qrr=o("TFElectraForMaskedLM"),Hrr=o(" (ELECTRA model)"),Urr=l(),TC=a("li"),Pge=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),Qq=a("a"),Krr=o("TFFlaubertWithLMHeadModel"),Zrr=o(" (FlauBERT model)"),etr=l(),FC=a("li"),$ge=a("strong"),otr=o("funnel"),rtr=o(" \u2014 "),Hq=a("a"),ttr=o("TFFunnelForMaskedLM"),atr=o(" (Funnel Transformer model)"),str=l(),CC=a("li"),Ige=a("strong"),ntr=o("layoutlm"),ltr=o(" \u2014 "),Uq=a("a"),itr=o("TFLayoutLMForMaskedLM"),dtr=o(" (LayoutLM model)"),ctr=l(),MC=a("li"),Dge=a("strong"),mtr=o("longformer"),ftr=o(" \u2014 "),Jq=a("a"),gtr=o("TFLongformerForMaskedLM"),htr=o(" (Longformer model)"),utr=l(),EC=a("li"),jge=a("strong"),ptr=o("mobilebert"),_tr=o(" \u2014 "),Yq=a("a"),btr=o("TFMobileBertForMaskedLM"),vtr=o(" (MobileBERT model)"),Ttr=l(),yC=a("li"),Nge=a("strong"),Ftr=o("mpnet"),Ctr=o(" \u2014 "),Kq=a("a"),Mtr=o("TFMPNetForMaskedLM"),Etr=o(" (MPNet model)"),ytr=l(),wC=a("li"),qge=a("strong"),wtr=o("rembert"),Atr=o(" \u2014 "),Zq=a("a"),Ltr=o("TFRemBertForMaskedLM"),Btr=o(" (RemBERT model)"),xtr=l(),AC=a("li"),Gge=a("strong"),ktr=o("roberta"),Rtr=o(" \u2014 "),eG=a("a"),Str=o("TFRobertaForMaskedLM"),Ptr=o(" (RoBERTa model)"),$tr=l(),LC=a("li"),Oge=a("strong"),Itr=o("roformer"),Dtr=o(" \u2014 "),oG=a("a"),jtr=o("TFRoFormerForMaskedLM"),Ntr=o(" (RoFormer model)"),qtr=l(),BC=a("li"),Xge=a("strong"),Gtr=o("tapas"),Otr=o(" \u2014 "),rG=a("a"),Xtr=o("TFTapasForMaskedLM"),Vtr=o(" (TAPAS model)"),ztr=l(),xC=a("li"),Vge=a("strong"),Wtr=o("xlm"),Qtr=o(" \u2014 "),tG=a("a"),Htr=o("TFXLMWithLMHeadModel"),Utr=o(" (XLM model)"),Jtr=l(),kC=a("li"),zge=a("strong"),Ytr=o("xlm-roberta"),Ktr=o(" \u2014 "),aG=a("a"),Ztr=o("TFXLMRobertaForMaskedLM"),ear=o(" (XLM-RoBERTa model)"),oar=l(),Wge=a("p"),rar=o("Examples:"),tar=l(),m(kA.$$.fragment),jBe=l(),pc=a("h2"),RC=a("a"),Qge=a("span"),m(RA.$$.fragment),aar=l(),Hge=a("span"),sar=o("TFAutoModelForSeq2SeqLM"),NBe=l(),Tr=a("div"),m(SA.$$.fragment),nar=l(),_c=a("p"),lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uge=a("code"),iar=o("from_pretrained()"),dar=o("class method or the "),Jge=a("code"),car=o("from_config()"),mar=o(`class
method.`),far=l(),PA=a("p"),gar=o("This class cannot be instantiated directly using "),Yge=a("code"),har=o("__init__()"),uar=o(" (throws an error)."),par=l(),gt=a("div"),m($A.$$.fragment),_ar=l(),Kge=a("p"),bar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tar=l(),bc=a("p"),Far=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),Car=o("not"),Mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=a("code"),Ear=o("from_pretrained()"),yar=o("to load the model weights."),war=l(),ohe=a("p"),Aar=o("Examples:"),Lar=l(),m(IA.$$.fragment),Bar=l(),bo=a("div"),m(DA.$$.fragment),xar=l(),rhe=a("p"),kar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rar=l(),hs=a("p"),Sar=o("The model class to instantiate is selected based on the "),the=a("code"),Par=o("model_type"),$ar=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),Iar=o("pretrained_model_name_or_path"),Dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),jar=o("pretrained_model_name_or_path"),Nar=o(":"),qar=l(),ue=a("ul"),SC=a("li"),nhe=a("strong"),Gar=o("bart"),Oar=o(" \u2014 "),sG=a("a"),Xar=o("TFBartForConditionalGeneration"),Var=o(" (BART model)"),zar=l(),PC=a("li"),lhe=a("strong"),War=o("blenderbot"),Qar=o(" \u2014 "),nG=a("a"),Har=o("TFBlenderbotForConditionalGeneration"),Uar=o(" (Blenderbot model)"),Jar=l(),$C=a("li"),ihe=a("strong"),Yar=o("blenderbot-small"),Kar=o(" \u2014 "),lG=a("a"),Zar=o("TFBlenderbotSmallForConditionalGeneration"),esr=o(" (BlenderbotSmall model)"),osr=l(),IC=a("li"),dhe=a("strong"),rsr=o("encoder-decoder"),tsr=o(" \u2014 "),iG=a("a"),asr=o("TFEncoderDecoderModel"),ssr=o(" (Encoder decoder model)"),nsr=l(),DC=a("li"),che=a("strong"),lsr=o("led"),isr=o(" \u2014 "),dG=a("a"),dsr=o("TFLEDForConditionalGeneration"),csr=o(" (LED model)"),msr=l(),jC=a("li"),mhe=a("strong"),fsr=o("marian"),gsr=o(" \u2014 "),cG=a("a"),hsr=o("TFMarianMTModel"),usr=o(" (Marian model)"),psr=l(),NC=a("li"),fhe=a("strong"),_sr=o("mbart"),bsr=o(" \u2014 "),mG=a("a"),vsr=o("TFMBartForConditionalGeneration"),Tsr=o(" (mBART model)"),Fsr=l(),qC=a("li"),ghe=a("strong"),Csr=o("mt5"),Msr=o(" \u2014 "),fG=a("a"),Esr=o("TFMT5ForConditionalGeneration"),ysr=o(" (mT5 model)"),wsr=l(),GC=a("li"),hhe=a("strong"),Asr=o("pegasus"),Lsr=o(" \u2014 "),gG=a("a"),Bsr=o("TFPegasusForConditionalGeneration"),xsr=o(" (Pegasus model)"),ksr=l(),OC=a("li"),uhe=a("strong"),Rsr=o("t5"),Ssr=o(" \u2014 "),hG=a("a"),Psr=o("TFT5ForConditionalGeneration"),$sr=o(" (T5 model)"),Isr=l(),phe=a("p"),Dsr=o("Examples:"),jsr=l(),m(jA.$$.fragment),qBe=l(),vc=a("h2"),XC=a("a"),_he=a("span"),m(NA.$$.fragment),Nsr=l(),bhe=a("span"),qsr=o("TFAutoModelForSequenceClassification"),GBe=l(),Fr=a("div"),m(qA.$$.fragment),Gsr=l(),Tc=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vhe=a("code"),Xsr=o("from_pretrained()"),Vsr=o("class method or the "),The=a("code"),zsr=o("from_config()"),Wsr=o(`class
method.`),Qsr=l(),GA=a("p"),Hsr=o("This class cannot be instantiated directly using "),Fhe=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),ht=a("div"),m(OA.$$.fragment),Ksr=l(),Che=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),enr=l(),Fc=a("p"),onr=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),rnr=o("not"),tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=a("code"),anr=o("from_pretrained()"),snr=o("to load the model weights."),nnr=l(),yhe=a("p"),lnr=o("Examples:"),inr=l(),m(XA.$$.fragment),dnr=l(),vo=a("div"),m(VA.$$.fragment),cnr=l(),whe=a("p"),mnr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fnr=l(),us=a("p"),gnr=o("The model class to instantiate is selected based on the "),Ahe=a("code"),hnr=o("model_type"),unr=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),bnr=o("pretrained_model_name_or_path"),vnr=o(":"),Tnr=l(),X=a("ul"),VC=a("li"),xhe=a("strong"),Fnr=o("albert"),Cnr=o(" \u2014 "),uG=a("a"),Mnr=o("TFAlbertForSequenceClassification"),Enr=o(" (ALBERT model)"),ynr=l(),zC=a("li"),khe=a("strong"),wnr=o("bert"),Anr=o(" \u2014 "),pG=a("a"),Lnr=o("TFBertForSequenceClassification"),Bnr=o(" (BERT model)"),xnr=l(),WC=a("li"),Rhe=a("strong"),knr=o("camembert"),Rnr=o(" \u2014 "),_G=a("a"),Snr=o("TFCamembertForSequenceClassification"),Pnr=o(" (CamemBERT model)"),$nr=l(),QC=a("li"),She=a("strong"),Inr=o("convbert"),Dnr=o(" \u2014 "),bG=a("a"),jnr=o("TFConvBertForSequenceClassification"),Nnr=o(" (ConvBERT model)"),qnr=l(),HC=a("li"),Phe=a("strong"),Gnr=o("ctrl"),Onr=o(" \u2014 "),vG=a("a"),Xnr=o("TFCTRLForSequenceClassification"),Vnr=o(" (CTRL model)"),znr=l(),UC=a("li"),$he=a("strong"),Wnr=o("deberta"),Qnr=o(" \u2014 "),TG=a("a"),Hnr=o("TFDebertaForSequenceClassification"),Unr=o(" (DeBERTa model)"),Jnr=l(),JC=a("li"),Ihe=a("strong"),Ynr=o("deberta-v2"),Knr=o(" \u2014 "),FG=a("a"),Znr=o("TFDebertaV2ForSequenceClassification"),elr=o(" (DeBERTa-v2 model)"),olr=l(),YC=a("li"),Dhe=a("strong"),rlr=o("distilbert"),tlr=o(" \u2014 "),CG=a("a"),alr=o("TFDistilBertForSequenceClassification"),slr=o(" (DistilBERT model)"),nlr=l(),KC=a("li"),jhe=a("strong"),llr=o("electra"),ilr=o(" \u2014 "),MG=a("a"),dlr=o("TFElectraForSequenceClassification"),clr=o(" (ELECTRA model)"),mlr=l(),ZC=a("li"),Nhe=a("strong"),flr=o("flaubert"),glr=o(" \u2014 "),EG=a("a"),hlr=o("TFFlaubertForSequenceClassification"),ulr=o(" (FlauBERT model)"),plr=l(),e4=a("li"),qhe=a("strong"),_lr=o("funnel"),blr=o(" \u2014 "),yG=a("a"),vlr=o("TFFunnelForSequenceClassification"),Tlr=o(" (Funnel Transformer model)"),Flr=l(),o4=a("li"),Ghe=a("strong"),Clr=o("gpt2"),Mlr=o(" \u2014 "),wG=a("a"),Elr=o("TFGPT2ForSequenceClassification"),ylr=o(" (OpenAI GPT-2 model)"),wlr=l(),r4=a("li"),Ohe=a("strong"),Alr=o("layoutlm"),Llr=o(" \u2014 "),AG=a("a"),Blr=o("TFLayoutLMForSequenceClassification"),xlr=o(" (LayoutLM model)"),klr=l(),t4=a("li"),Xhe=a("strong"),Rlr=o("longformer"),Slr=o(" \u2014 "),LG=a("a"),Plr=o("TFLongformerForSequenceClassification"),$lr=o(" (Longformer model)"),Ilr=l(),a4=a("li"),Vhe=a("strong"),Dlr=o("mobilebert"),jlr=o(" \u2014 "),BG=a("a"),Nlr=o("TFMobileBertForSequenceClassification"),qlr=o(" (MobileBERT model)"),Glr=l(),s4=a("li"),zhe=a("strong"),Olr=o("mpnet"),Xlr=o(" \u2014 "),xG=a("a"),Vlr=o("TFMPNetForSequenceClassification"),zlr=o(" (MPNet model)"),Wlr=l(),n4=a("li"),Whe=a("strong"),Qlr=o("openai-gpt"),Hlr=o(" \u2014 "),kG=a("a"),Ulr=o("TFOpenAIGPTForSequenceClassification"),Jlr=o(" (OpenAI GPT model)"),Ylr=l(),l4=a("li"),Qhe=a("strong"),Klr=o("rembert"),Zlr=o(" \u2014 "),RG=a("a"),eir=o("TFRemBertForSequenceClassification"),oir=o(" (RemBERT model)"),rir=l(),i4=a("li"),Hhe=a("strong"),tir=o("roberta"),air=o(" \u2014 "),SG=a("a"),sir=o("TFRobertaForSequenceClassification"),nir=o(" (RoBERTa model)"),lir=l(),d4=a("li"),Uhe=a("strong"),iir=o("roformer"),dir=o(" \u2014 "),PG=a("a"),cir=o("TFRoFormerForSequenceClassification"),mir=o(" (RoFormer model)"),fir=l(),c4=a("li"),Jhe=a("strong"),gir=o("tapas"),hir=o(" \u2014 "),$G=a("a"),uir=o("TFTapasForSequenceClassification"),pir=o(" (TAPAS model)"),_ir=l(),m4=a("li"),Yhe=a("strong"),bir=o("transfo-xl"),vir=o(" \u2014 "),IG=a("a"),Tir=o("TFTransfoXLForSequenceClassification"),Fir=o(" (Transformer-XL model)"),Cir=l(),f4=a("li"),Khe=a("strong"),Mir=o("xlm"),Eir=o(" \u2014 "),DG=a("a"),yir=o("TFXLMForSequenceClassification"),wir=o(" (XLM model)"),Air=l(),g4=a("li"),Zhe=a("strong"),Lir=o("xlm-roberta"),Bir=o(" \u2014 "),jG=a("a"),xir=o("TFXLMRobertaForSequenceClassification"),kir=o(" (XLM-RoBERTa model)"),Rir=l(),h4=a("li"),eue=a("strong"),Sir=o("xlnet"),Pir=o(" \u2014 "),NG=a("a"),$ir=o("TFXLNetForSequenceClassification"),Iir=o(" (XLNet model)"),Dir=l(),oue=a("p"),jir=o("Examples:"),Nir=l(),m(zA.$$.fragment),OBe=l(),Cc=a("h2"),u4=a("a"),rue=a("span"),m(WA.$$.fragment),qir=l(),tue=a("span"),Gir=o("TFAutoModelForMultipleChoice"),XBe=l(),Cr=a("div"),m(QA.$$.fragment),Oir=l(),Mc=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aue=a("code"),Vir=o("from_pretrained()"),zir=o("class method or the "),sue=a("code"),Wir=o("from_config()"),Qir=o(`class
method.`),Hir=l(),HA=a("p"),Uir=o("This class cannot be instantiated directly using "),nue=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),ut=a("div"),m(UA.$$.fragment),Zir=l(),lue=a("p"),edr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),odr=l(),Ec=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),due=a("code"),sdr=o("from_pretrained()"),ndr=o("to load the model weights."),ldr=l(),cue=a("p"),idr=o("Examples:"),ddr=l(),m(JA.$$.fragment),cdr=l(),To=a("div"),m(YA.$$.fragment),mdr=l(),mue=a("p"),fdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gdr=l(),ps=a("p"),hdr=o("The model class to instantiate is selected based on the "),fue=a("code"),udr=o("model_type"),pdr=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),_dr=o("pretrained_model_name_or_path"),bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),vdr=o("pretrained_model_name_or_path"),Tdr=o(":"),Fdr=l(),te=a("ul"),p4=a("li"),uue=a("strong"),Cdr=o("albert"),Mdr=o(" \u2014 "),qG=a("a"),Edr=o("TFAlbertForMultipleChoice"),ydr=o(" (ALBERT model)"),wdr=l(),_4=a("li"),pue=a("strong"),Adr=o("bert"),Ldr=o(" \u2014 "),GG=a("a"),Bdr=o("TFBertForMultipleChoice"),xdr=o(" (BERT model)"),kdr=l(),b4=a("li"),_ue=a("strong"),Rdr=o("camembert"),Sdr=o(" \u2014 "),OG=a("a"),Pdr=o("TFCamembertForMultipleChoice"),$dr=o(" (CamemBERT model)"),Idr=l(),v4=a("li"),bue=a("strong"),Ddr=o("convbert"),jdr=o(" \u2014 "),XG=a("a"),Ndr=o("TFConvBertForMultipleChoice"),qdr=o(" (ConvBERT model)"),Gdr=l(),T4=a("li"),vue=a("strong"),Odr=o("distilbert"),Xdr=o(" \u2014 "),VG=a("a"),Vdr=o("TFDistilBertForMultipleChoice"),zdr=o(" (DistilBERT model)"),Wdr=l(),F4=a("li"),Tue=a("strong"),Qdr=o("electra"),Hdr=o(" \u2014 "),zG=a("a"),Udr=o("TFElectraForMultipleChoice"),Jdr=o(" (ELECTRA model)"),Ydr=l(),C4=a("li"),Fue=a("strong"),Kdr=o("flaubert"),Zdr=o(" \u2014 "),WG=a("a"),ecr=o("TFFlaubertForMultipleChoice"),ocr=o(" (FlauBERT model)"),rcr=l(),M4=a("li"),Cue=a("strong"),tcr=o("funnel"),acr=o(" \u2014 "),QG=a("a"),scr=o("TFFunnelForMultipleChoice"),ncr=o(" (Funnel Transformer model)"),lcr=l(),E4=a("li"),Mue=a("strong"),icr=o("longformer"),dcr=o(" \u2014 "),HG=a("a"),ccr=o("TFLongformerForMultipleChoice"),mcr=o(" (Longformer model)"),fcr=l(),y4=a("li"),Eue=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),UG=a("a"),ucr=o("TFMobileBertForMultipleChoice"),pcr=o(" (MobileBERT model)"),_cr=l(),w4=a("li"),yue=a("strong"),bcr=o("mpnet"),vcr=o(" \u2014 "),JG=a("a"),Tcr=o("TFMPNetForMultipleChoice"),Fcr=o(" (MPNet model)"),Ccr=l(),A4=a("li"),wue=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),YG=a("a"),ycr=o("TFRemBertForMultipleChoice"),wcr=o(" (RemBERT model)"),Acr=l(),L4=a("li"),Aue=a("strong"),Lcr=o("roberta"),Bcr=o(" \u2014 "),KG=a("a"),xcr=o("TFRobertaForMultipleChoice"),kcr=o(" (RoBERTa model)"),Rcr=l(),B4=a("li"),Lue=a("strong"),Scr=o("roformer"),Pcr=o(" \u2014 "),ZG=a("a"),$cr=o("TFRoFormerForMultipleChoice"),Icr=o(" (RoFormer model)"),Dcr=l(),x4=a("li"),Bue=a("strong"),jcr=o("xlm"),Ncr=o(" \u2014 "),eO=a("a"),qcr=o("TFXLMForMultipleChoice"),Gcr=o(" (XLM model)"),Ocr=l(),k4=a("li"),xue=a("strong"),Xcr=o("xlm-roberta"),Vcr=o(" \u2014 "),oO=a("a"),zcr=o("TFXLMRobertaForMultipleChoice"),Wcr=o(" (XLM-RoBERTa model)"),Qcr=l(),R4=a("li"),kue=a("strong"),Hcr=o("xlnet"),Ucr=o(" \u2014 "),rO=a("a"),Jcr=o("TFXLNetForMultipleChoice"),Ycr=o(" (XLNet model)"),Kcr=l(),Rue=a("p"),Zcr=o("Examples:"),emr=l(),m(KA.$$.fragment),VBe=l(),yc=a("h2"),S4=a("a"),Sue=a("span"),m(ZA.$$.fragment),omr=l(),Pue=a("span"),rmr=o("TFAutoModelForTableQuestionAnswering"),zBe=l(),Mr=a("div"),m(e0.$$.fragment),tmr=l(),wc=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$ue=a("code"),smr=o("from_pretrained()"),nmr=o("class method or the "),Iue=a("code"),lmr=o("from_config()"),imr=o(`class
method.`),dmr=l(),o0=a("p"),cmr=o("This class cannot be instantiated directly using "),Due=a("code"),mmr=o("__init__()"),fmr=o(" (throws an error)."),gmr=l(),pt=a("div"),m(r0.$$.fragment),hmr=l(),jue=a("p"),umr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pmr=l(),Ac=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),bmr=o("not"),vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),que=a("code"),Tmr=o("from_pretrained()"),Fmr=o("to load the model weights."),Cmr=l(),Gue=a("p"),Mmr=o("Examples:"),Emr=l(),m(t0.$$.fragment),ymr=l(),Fo=a("div"),m(a0.$$.fragment),wmr=l(),Oue=a("p"),Amr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lmr=l(),_s=a("p"),Bmr=o("The model class to instantiate is selected based on the "),Xue=a("code"),xmr=o("model_type"),kmr=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),Rmr=o("pretrained_model_name_or_path"),Smr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),Pmr=o("pretrained_model_name_or_path"),$mr=o(":"),Imr=l(),Wue=a("ul"),P4=a("li"),Que=a("strong"),Dmr=o("tapas"),jmr=o(" \u2014 "),tO=a("a"),Nmr=o("TFTapasForQuestionAnswering"),qmr=o(" (TAPAS model)"),Gmr=l(),Hue=a("p"),Omr=o("Examples:"),Xmr=l(),m(s0.$$.fragment),WBe=l(),Lc=a("h2"),$4=a("a"),Uue=a("span"),m(n0.$$.fragment),Vmr=l(),Jue=a("span"),zmr=o("TFAutoModelForTokenClassification"),QBe=l(),Er=a("div"),m(l0.$$.fragment),Wmr=l(),Bc=a("p"),Qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yue=a("code"),Hmr=o("from_pretrained()"),Umr=o("class method or the "),Kue=a("code"),Jmr=o("from_config()"),Ymr=o(`class
method.`),Kmr=l(),i0=a("p"),Zmr=o("This class cannot be instantiated directly using "),Zue=a("code"),efr=o("__init__()"),ofr=o(" (throws an error)."),rfr=l(),_t=a("div"),m(d0.$$.fragment),tfr=l(),epe=a("p"),afr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sfr=l(),xc=a("p"),nfr=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),lfr=o("not"),ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rpe=a("code"),dfr=o("from_pretrained()"),cfr=o("to load the model weights."),mfr=l(),tpe=a("p"),ffr=o("Examples:"),gfr=l(),m(c0.$$.fragment),hfr=l(),Co=a("div"),m(m0.$$.fragment),ufr=l(),ape=a("p"),pfr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_fr=l(),bs=a("p"),bfr=o("The model class to instantiate is selected based on the "),spe=a("code"),vfr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),Ffr=o("pretrained_model_name_or_path"),Cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),yfr=l(),K=a("ul"),I4=a("li"),ipe=a("strong"),wfr=o("albert"),Afr=o(" \u2014 "),aO=a("a"),Lfr=o("TFAlbertForTokenClassification"),Bfr=o(" (ALBERT model)"),xfr=l(),D4=a("li"),dpe=a("strong"),kfr=o("bert"),Rfr=o(" \u2014 "),sO=a("a"),Sfr=o("TFBertForTokenClassification"),Pfr=o(" (BERT model)"),$fr=l(),j4=a("li"),cpe=a("strong"),Ifr=o("camembert"),Dfr=o(" \u2014 "),nO=a("a"),jfr=o("TFCamembertForTokenClassification"),Nfr=o(" (CamemBERT model)"),qfr=l(),N4=a("li"),mpe=a("strong"),Gfr=o("convbert"),Ofr=o(" \u2014 "),lO=a("a"),Xfr=o("TFConvBertForTokenClassification"),Vfr=o(" (ConvBERT model)"),zfr=l(),q4=a("li"),fpe=a("strong"),Wfr=o("deberta"),Qfr=o(" \u2014 "),iO=a("a"),Hfr=o("TFDebertaForTokenClassification"),Ufr=o(" (DeBERTa model)"),Jfr=l(),G4=a("li"),gpe=a("strong"),Yfr=o("deberta-v2"),Kfr=o(" \u2014 "),dO=a("a"),Zfr=o("TFDebertaV2ForTokenClassification"),egr=o(" (DeBERTa-v2 model)"),ogr=l(),O4=a("li"),hpe=a("strong"),rgr=o("distilbert"),tgr=o(" \u2014 "),cO=a("a"),agr=o("TFDistilBertForTokenClassification"),sgr=o(" (DistilBERT model)"),ngr=l(),X4=a("li"),upe=a("strong"),lgr=o("electra"),igr=o(" \u2014 "),mO=a("a"),dgr=o("TFElectraForTokenClassification"),cgr=o(" (ELECTRA model)"),mgr=l(),V4=a("li"),ppe=a("strong"),fgr=o("flaubert"),ggr=o(" \u2014 "),fO=a("a"),hgr=o("TFFlaubertForTokenClassification"),ugr=o(" (FlauBERT model)"),pgr=l(),z4=a("li"),_pe=a("strong"),_gr=o("funnel"),bgr=o(" \u2014 "),gO=a("a"),vgr=o("TFFunnelForTokenClassification"),Tgr=o(" (Funnel Transformer model)"),Fgr=l(),W4=a("li"),bpe=a("strong"),Cgr=o("layoutlm"),Mgr=o(" \u2014 "),hO=a("a"),Egr=o("TFLayoutLMForTokenClassification"),ygr=o(" (LayoutLM model)"),wgr=l(),Q4=a("li"),vpe=a("strong"),Agr=o("longformer"),Lgr=o(" \u2014 "),uO=a("a"),Bgr=o("TFLongformerForTokenClassification"),xgr=o(" (Longformer model)"),kgr=l(),H4=a("li"),Tpe=a("strong"),Rgr=o("mobilebert"),Sgr=o(" \u2014 "),pO=a("a"),Pgr=o("TFMobileBertForTokenClassification"),$gr=o(" (MobileBERT model)"),Igr=l(),U4=a("li"),Fpe=a("strong"),Dgr=o("mpnet"),jgr=o(" \u2014 "),_O=a("a"),Ngr=o("TFMPNetForTokenClassification"),qgr=o(" (MPNet model)"),Ggr=l(),J4=a("li"),Cpe=a("strong"),Ogr=o("rembert"),Xgr=o(" \u2014 "),bO=a("a"),Vgr=o("TFRemBertForTokenClassification"),zgr=o(" (RemBERT model)"),Wgr=l(),Y4=a("li"),Mpe=a("strong"),Qgr=o("roberta"),Hgr=o(" \u2014 "),vO=a("a"),Ugr=o("TFRobertaForTokenClassification"),Jgr=o(" (RoBERTa model)"),Ygr=l(),K4=a("li"),Epe=a("strong"),Kgr=o("roformer"),Zgr=o(" \u2014 "),TO=a("a"),ehr=o("TFRoFormerForTokenClassification"),ohr=o(" (RoFormer model)"),rhr=l(),Z4=a("li"),ype=a("strong"),thr=o("xlm"),ahr=o(" \u2014 "),FO=a("a"),shr=o("TFXLMForTokenClassification"),nhr=o(" (XLM model)"),lhr=l(),eM=a("li"),wpe=a("strong"),ihr=o("xlm-roberta"),dhr=o(" \u2014 "),CO=a("a"),chr=o("TFXLMRobertaForTokenClassification"),mhr=o(" (XLM-RoBERTa model)"),fhr=l(),oM=a("li"),Ape=a("strong"),ghr=o("xlnet"),hhr=o(" \u2014 "),MO=a("a"),uhr=o("TFXLNetForTokenClassification"),phr=o(" (XLNet model)"),_hr=l(),Lpe=a("p"),bhr=o("Examples:"),vhr=l(),m(f0.$$.fragment),HBe=l(),kc=a("h2"),rM=a("a"),Bpe=a("span"),m(g0.$$.fragment),Thr=l(),xpe=a("span"),Fhr=o("TFAutoModelForQuestionAnswering"),UBe=l(),yr=a("div"),m(h0.$$.fragment),Chr=l(),Rc=a("p"),Mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kpe=a("code"),Ehr=o("from_pretrained()"),yhr=o("class method or the "),Rpe=a("code"),whr=o("from_config()"),Ahr=o(`class
method.`),Lhr=l(),u0=a("p"),Bhr=o("This class cannot be instantiated directly using "),Spe=a("code"),xhr=o("__init__()"),khr=o(" (throws an error)."),Rhr=l(),bt=a("div"),m(p0.$$.fragment),Shr=l(),Ppe=a("p"),Phr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$hr=l(),Sc=a("p"),Ihr=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),Dhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=a("code"),Nhr=o("from_pretrained()"),qhr=o("to load the model weights."),Ghr=l(),Dpe=a("p"),Ohr=o("Examples:"),Xhr=l(),m(_0.$$.fragment),Vhr=l(),Mo=a("div"),m(b0.$$.fragment),zhr=l(),jpe=a("p"),Whr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qhr=l(),vs=a("p"),Hhr=o("The model class to instantiate is selected based on the "),Npe=a("code"),Uhr=o("model_type"),Jhr=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),Zhr=o("pretrained_model_name_or_path"),eur=o(":"),our=l(),Z=a("ul"),tM=a("li"),Ope=a("strong"),rur=o("albert"),tur=o(" \u2014 "),EO=a("a"),aur=o("TFAlbertForQuestionAnswering"),sur=o(" (ALBERT model)"),nur=l(),aM=a("li"),Xpe=a("strong"),lur=o("bert"),iur=o(" \u2014 "),yO=a("a"),dur=o("TFBertForQuestionAnswering"),cur=o(" (BERT model)"),mur=l(),sM=a("li"),Vpe=a("strong"),fur=o("camembert"),gur=o(" \u2014 "),wO=a("a"),hur=o("TFCamembertForQuestionAnswering"),uur=o(" (CamemBERT model)"),pur=l(),nM=a("li"),zpe=a("strong"),_ur=o("convbert"),bur=o(" \u2014 "),AO=a("a"),vur=o("TFConvBertForQuestionAnswering"),Tur=o(" (ConvBERT model)"),Fur=l(),lM=a("li"),Wpe=a("strong"),Cur=o("deberta"),Mur=o(" \u2014 "),LO=a("a"),Eur=o("TFDebertaForQuestionAnswering"),yur=o(" (DeBERTa model)"),wur=l(),iM=a("li"),Qpe=a("strong"),Aur=o("deberta-v2"),Lur=o(" \u2014 "),BO=a("a"),Bur=o("TFDebertaV2ForQuestionAnswering"),xur=o(" (DeBERTa-v2 model)"),kur=l(),dM=a("li"),Hpe=a("strong"),Rur=o("distilbert"),Sur=o(" \u2014 "),xO=a("a"),Pur=o("TFDistilBertForQuestionAnswering"),$ur=o(" (DistilBERT model)"),Iur=l(),cM=a("li"),Upe=a("strong"),Dur=o("electra"),jur=o(" \u2014 "),kO=a("a"),Nur=o("TFElectraForQuestionAnswering"),qur=o(" (ELECTRA model)"),Gur=l(),mM=a("li"),Jpe=a("strong"),Our=o("flaubert"),Xur=o(" \u2014 "),RO=a("a"),Vur=o("TFFlaubertForQuestionAnsweringSimple"),zur=o(" (FlauBERT model)"),Wur=l(),fM=a("li"),Ype=a("strong"),Qur=o("funnel"),Hur=o(" \u2014 "),SO=a("a"),Uur=o("TFFunnelForQuestionAnswering"),Jur=o(" (Funnel Transformer model)"),Yur=l(),gM=a("li"),Kpe=a("strong"),Kur=o("longformer"),Zur=o(" \u2014 "),PO=a("a"),epr=o("TFLongformerForQuestionAnswering"),opr=o(" (Longformer model)"),rpr=l(),hM=a("li"),Zpe=a("strong"),tpr=o("mobilebert"),apr=o(" \u2014 "),$O=a("a"),spr=o("TFMobileBertForQuestionAnswering"),npr=o(" (MobileBERT model)"),lpr=l(),uM=a("li"),e_e=a("strong"),ipr=o("mpnet"),dpr=o(" \u2014 "),IO=a("a"),cpr=o("TFMPNetForQuestionAnswering"),mpr=o(" (MPNet model)"),fpr=l(),pM=a("li"),o_e=a("strong"),gpr=o("rembert"),hpr=o(" \u2014 "),DO=a("a"),upr=o("TFRemBertForQuestionAnswering"),ppr=o(" (RemBERT model)"),_pr=l(),_M=a("li"),r_e=a("strong"),bpr=o("roberta"),vpr=o(" \u2014 "),jO=a("a"),Tpr=o("TFRobertaForQuestionAnswering"),Fpr=o(" (RoBERTa model)"),Cpr=l(),bM=a("li"),t_e=a("strong"),Mpr=o("roformer"),Epr=o(" \u2014 "),NO=a("a"),ypr=o("TFRoFormerForQuestionAnswering"),wpr=o(" (RoFormer model)"),Apr=l(),vM=a("li"),a_e=a("strong"),Lpr=o("xlm"),Bpr=o(" \u2014 "),qO=a("a"),xpr=o("TFXLMForQuestionAnsweringSimple"),kpr=o(" (XLM model)"),Rpr=l(),TM=a("li"),s_e=a("strong"),Spr=o("xlm-roberta"),Ppr=o(" \u2014 "),GO=a("a"),$pr=o("TFXLMRobertaForQuestionAnswering"),Ipr=o(" (XLM-RoBERTa model)"),Dpr=l(),FM=a("li"),n_e=a("strong"),jpr=o("xlnet"),Npr=o(" \u2014 "),OO=a("a"),qpr=o("TFXLNetForQuestionAnsweringSimple"),Gpr=o(" (XLNet model)"),Opr=l(),l_e=a("p"),Xpr=o("Examples:"),Vpr=l(),m(v0.$$.fragment),JBe=l(),Pc=a("h2"),CM=a("a"),i_e=a("span"),m(T0.$$.fragment),zpr=l(),d_e=a("span"),Wpr=o("TFAutoModelForVision2Seq"),YBe=l(),wr=a("div"),m(F0.$$.fragment),Qpr=l(),$c=a("p"),Hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),c_e=a("code"),Upr=o("from_pretrained()"),Jpr=o("class method or the "),m_e=a("code"),Ypr=o("from_config()"),Kpr=o(`class
method.`),Zpr=l(),C0=a("p"),e_r=o("This class cannot be instantiated directly using "),f_e=a("code"),o_r=o("__init__()"),r_r=o(" (throws an error)."),t_r=l(),vt=a("div"),m(M0.$$.fragment),a_r=l(),g_e=a("p"),s_r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),n_r=l(),Ic=a("p"),l_r=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),i_r=o("not"),d_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=a("code"),c_r=o("from_pretrained()"),m_r=o("to load the model weights."),f_r=l(),p_e=a("p"),g_r=o("Examples:"),h_r=l(),m(E0.$$.fragment),u_r=l(),Eo=a("div"),m(y0.$$.fragment),p_r=l(),__e=a("p"),__r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b_r=l(),Ts=a("p"),v_r=o("The model class to instantiate is selected based on the "),b_e=a("code"),T_r=o("model_type"),F_r=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),C_r=o("pretrained_model_name_or_path"),M_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),E_r=o("pretrained_model_name_or_path"),y_r=o(":"),w_r=l(),F_e=a("ul"),MM=a("li"),C_e=a("strong"),A_r=o("vision-encoder-decoder"),L_r=o(" \u2014 "),XO=a("a"),B_r=o("TFVisionEncoderDecoderModel"),x_r=o(" (Vision Encoder decoder model)"),k_r=l(),M_e=a("p"),R_r=o("Examples:"),S_r=l(),m(w0.$$.fragment),KBe=l(),Dc=a("h2"),EM=a("a"),E_e=a("span"),m(A0.$$.fragment),P_r=l(),y_e=a("span"),$_r=o("TFAutoModelForSpeechSeq2Seq"),ZBe=l(),Ar=a("div"),m(L0.$$.fragment),I_r=l(),jc=a("p"),D_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),w_e=a("code"),j_r=o("from_pretrained()"),N_r=o("class method or the "),A_e=a("code"),q_r=o("from_config()"),G_r=o(`class
method.`),O_r=l(),B0=a("p"),X_r=o("This class cannot be instantiated directly using "),L_e=a("code"),V_r=o("__init__()"),z_r=o(" (throws an error)."),W_r=l(),Tt=a("div"),m(x0.$$.fragment),Q_r=l(),B_e=a("p"),H_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),U_r=l(),Nc=a("p"),J_r=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),Y_r=o("not"),K_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=a("code"),Z_r=o("from_pretrained()"),ebr=o("to load the model weights."),obr=l(),R_e=a("p"),rbr=o("Examples:"),tbr=l(),m(k0.$$.fragment),abr=l(),yo=a("div"),m(R0.$$.fragment),sbr=l(),S_e=a("p"),nbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lbr=l(),Fs=a("p"),ibr=o("The model class to instantiate is selected based on the "),P_e=a("code"),dbr=o("model_type"),cbr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),mbr=o("pretrained_model_name_or_path"),fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),gbr=o("pretrained_model_name_or_path"),hbr=o(":"),ubr=l(),D_e=a("ul"),yM=a("li"),j_e=a("strong"),pbr=o("speech_to_text"),_br=o(" \u2014 "),VO=a("a"),bbr=o("TFSpeech2TextForConditionalGeneration"),vbr=o(" (Speech2Text model)"),Tbr=l(),N_e=a("p"),Fbr=o("Examples:"),Cbr=l(),m(S0.$$.fragment),exe=l(),qc=a("h2"),wM=a("a"),q_e=a("span"),m(P0.$$.fragment),Mbr=l(),G_e=a("span"),Ebr=o("FlaxAutoModel"),oxe=l(),Lr=a("div"),m($0.$$.fragment),ybr=l(),Gc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),O_e=a("code"),Abr=o("from_pretrained()"),Lbr=o("class method or the "),X_e=a("code"),Bbr=o("from_config()"),xbr=o(`class
method.`),kbr=l(),I0=a("p"),Rbr=o("This class cannot be instantiated directly using "),V_e=a("code"),Sbr=o("__init__()"),Pbr=o(" (throws an error)."),$br=l(),Ft=a("div"),m(D0.$$.fragment),Ibr=l(),z_e=a("p"),Dbr=o("Instantiates one of the base model classes of the library from a configuration."),jbr=l(),Oc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),qbr=o("not"),Gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q_e=a("code"),Obr=o("from_pretrained()"),Xbr=o("to load the model weights."),Vbr=l(),H_e=a("p"),zbr=o("Examples:"),Wbr=l(),m(j0.$$.fragment),Qbr=l(),wo=a("div"),m(N0.$$.fragment),Hbr=l(),U_e=a("p"),Ubr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jbr=l(),Cs=a("p"),Ybr=o("The model class to instantiate is selected based on the "),J_e=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),r2r=o("pretrained_model_name_or_path"),t2r=o(":"),a2r=l(),z=a("ul"),AM=a("li"),Z_e=a("strong"),s2r=o("albert"),n2r=o(" \u2014 "),zO=a("a"),l2r=o("FlaxAlbertModel"),i2r=o(" (ALBERT model)"),d2r=l(),LM=a("li"),ebe=a("strong"),c2r=o("bart"),m2r=o(" \u2014 "),WO=a("a"),f2r=o("FlaxBartModel"),g2r=o(" (BART model)"),h2r=l(),BM=a("li"),obe=a("strong"),u2r=o("beit"),p2r=o(" \u2014 "),QO=a("a"),_2r=o("FlaxBeitModel"),b2r=o(" (BEiT model)"),v2r=l(),xM=a("li"),rbe=a("strong"),T2r=o("bert"),F2r=o(" \u2014 "),HO=a("a"),C2r=o("FlaxBertModel"),M2r=o(" (BERT model)"),E2r=l(),kM=a("li"),tbe=a("strong"),y2r=o("big_bird"),w2r=o(" \u2014 "),UO=a("a"),A2r=o("FlaxBigBirdModel"),L2r=o(" (BigBird model)"),B2r=l(),RM=a("li"),abe=a("strong"),x2r=o("blenderbot"),k2r=o(" \u2014 "),JO=a("a"),R2r=o("FlaxBlenderbotModel"),S2r=o(" (Blenderbot model)"),P2r=l(),SM=a("li"),sbe=a("strong"),$2r=o("blenderbot-small"),I2r=o(" \u2014 "),YO=a("a"),D2r=o("FlaxBlenderbotSmallModel"),j2r=o(" (BlenderbotSmall model)"),N2r=l(),PM=a("li"),nbe=a("strong"),q2r=o("clip"),G2r=o(" \u2014 "),KO=a("a"),O2r=o("FlaxCLIPModel"),X2r=o(" (CLIP model)"),V2r=l(),$M=a("li"),lbe=a("strong"),z2r=o("distilbert"),W2r=o(" \u2014 "),ZO=a("a"),Q2r=o("FlaxDistilBertModel"),H2r=o(" (DistilBERT model)"),U2r=l(),IM=a("li"),ibe=a("strong"),J2r=o("electra"),Y2r=o(" \u2014 "),eX=a("a"),K2r=o("FlaxElectraModel"),Z2r=o(" (ELECTRA model)"),evr=l(),DM=a("li"),dbe=a("strong"),ovr=o("gpt2"),rvr=o(" \u2014 "),oX=a("a"),tvr=o("FlaxGPT2Model"),avr=o(" (OpenAI GPT-2 model)"),svr=l(),jM=a("li"),cbe=a("strong"),nvr=o("gpt_neo"),lvr=o(" \u2014 "),rX=a("a"),ivr=o("FlaxGPTNeoModel"),dvr=o(" (GPT Neo model)"),cvr=l(),NM=a("li"),mbe=a("strong"),mvr=o("gptj"),fvr=o(" \u2014 "),tX=a("a"),gvr=o("FlaxGPTJModel"),hvr=o(" (GPT-J model)"),uvr=l(),qM=a("li"),fbe=a("strong"),pvr=o("marian"),_vr=o(" \u2014 "),aX=a("a"),bvr=o("FlaxMarianModel"),vvr=o(" (Marian model)"),Tvr=l(),GM=a("li"),gbe=a("strong"),Fvr=o("mbart"),Cvr=o(" \u2014 "),sX=a("a"),Mvr=o("FlaxMBartModel"),Evr=o(" (mBART model)"),yvr=l(),OM=a("li"),hbe=a("strong"),wvr=o("mt5"),Avr=o(" \u2014 "),nX=a("a"),Lvr=o("FlaxMT5Model"),Bvr=o(" (mT5 model)"),xvr=l(),XM=a("li"),ube=a("strong"),kvr=o("pegasus"),Rvr=o(" \u2014 "),lX=a("a"),Svr=o("FlaxPegasusModel"),Pvr=o(" (Pegasus model)"),$vr=l(),VM=a("li"),pbe=a("strong"),Ivr=o("roberta"),Dvr=o(" \u2014 "),iX=a("a"),jvr=o("FlaxRobertaModel"),Nvr=o(" (RoBERTa model)"),qvr=l(),zM=a("li"),_be=a("strong"),Gvr=o("roformer"),Ovr=o(" \u2014 "),dX=a("a"),Xvr=o("FlaxRoFormerModel"),Vvr=o(" (RoFormer model)"),zvr=l(),WM=a("li"),bbe=a("strong"),Wvr=o("t5"),Qvr=o(" \u2014 "),cX=a("a"),Hvr=o("FlaxT5Model"),Uvr=o(" (T5 model)"),Jvr=l(),QM=a("li"),vbe=a("strong"),Yvr=o("vision-text-dual-encoder"),Kvr=o(" \u2014 "),mX=a("a"),Zvr=o("FlaxVisionTextDualEncoderModel"),eTr=o(" (VisionTextDualEncoder model)"),oTr=l(),HM=a("li"),Tbe=a("strong"),rTr=o("vit"),tTr=o(" \u2014 "),fX=a("a"),aTr=o("FlaxViTModel"),sTr=o(" (ViT model)"),nTr=l(),UM=a("li"),Fbe=a("strong"),lTr=o("wav2vec2"),iTr=o(" \u2014 "),gX=a("a"),dTr=o("FlaxWav2Vec2Model"),cTr=o(" (Wav2Vec2 model)"),mTr=l(),JM=a("li"),Cbe=a("strong"),fTr=o("xglm"),gTr=o(" \u2014 "),hX=a("a"),hTr=o("FlaxXGLMModel"),uTr=o(" (XGLM model)"),pTr=l(),Mbe=a("p"),_Tr=o("Examples:"),bTr=l(),m(q0.$$.fragment),rxe=l(),Xc=a("h2"),YM=a("a"),Ebe=a("span"),m(G0.$$.fragment),vTr=l(),ybe=a("span"),TTr=o("FlaxAutoModelForCausalLM"),txe=l(),Br=a("div"),m(O0.$$.fragment),FTr=l(),Vc=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wbe=a("code"),MTr=o("from_pretrained()"),ETr=o("class method or the "),Abe=a("code"),yTr=o("from_config()"),wTr=o(`class
method.`),ATr=l(),X0=a("p"),LTr=o("This class cannot be instantiated directly using "),Lbe=a("code"),BTr=o("__init__()"),xTr=o(" (throws an error)."),kTr=l(),Ct=a("div"),m(V0.$$.fragment),RTr=l(),Bbe=a("p"),STr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PTr=l(),zc=a("p"),$Tr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),ITr=o("not"),DTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kbe=a("code"),jTr=o("from_pretrained()"),NTr=o("to load the model weights."),qTr=l(),Rbe=a("p"),GTr=o("Examples:"),OTr=l(),m(z0.$$.fragment),XTr=l(),Ao=a("div"),m(W0.$$.fragment),VTr=l(),Sbe=a("p"),zTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WTr=l(),Ms=a("p"),QTr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),HTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(":"),e1r=l(),Es=a("ul"),KM=a("li"),Dbe=a("strong"),o1r=o("gpt2"),r1r=o(" \u2014 "),uX=a("a"),t1r=o("FlaxGPT2LMHeadModel"),a1r=o(" (OpenAI GPT-2 model)"),s1r=l(),ZM=a("li"),jbe=a("strong"),n1r=o("gpt_neo"),l1r=o(" \u2014 "),pX=a("a"),i1r=o("FlaxGPTNeoForCausalLM"),d1r=o(" (GPT Neo model)"),c1r=l(),eE=a("li"),Nbe=a("strong"),m1r=o("gptj"),f1r=o(" \u2014 "),_X=a("a"),g1r=o("FlaxGPTJForCausalLM"),h1r=o(" (GPT-J model)"),u1r=l(),oE=a("li"),qbe=a("strong"),p1r=o("xglm"),_1r=o(" \u2014 "),bX=a("a"),b1r=o("FlaxXGLMForCausalLM"),v1r=o(" (XGLM model)"),T1r=l(),Gbe=a("p"),F1r=o("Examples:"),C1r=l(),m(Q0.$$.fragment),axe=l(),Wc=a("h2"),rE=a("a"),Obe=a("span"),m(H0.$$.fragment),M1r=l(),Xbe=a("span"),E1r=o("FlaxAutoModelForPreTraining"),sxe=l(),xr=a("div"),m(U0.$$.fragment),y1r=l(),Qc=a("p"),w1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vbe=a("code"),A1r=o("from_pretrained()"),L1r=o("class method or the "),zbe=a("code"),B1r=o("from_config()"),x1r=o(`class
method.`),k1r=l(),J0=a("p"),R1r=o("This class cannot be instantiated directly using "),Wbe=a("code"),S1r=o("__init__()"),P1r=o(" (throws an error)."),$1r=l(),Mt=a("div"),m(Y0.$$.fragment),I1r=l(),Qbe=a("p"),D1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),j1r=l(),Hc=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),q1r=o("not"),G1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ube=a("code"),O1r=o("from_pretrained()"),X1r=o("to load the model weights."),V1r=l(),Jbe=a("p"),z1r=o("Examples:"),W1r=l(),m(K0.$$.fragment),Q1r=l(),Lo=a("div"),m(Z0.$$.fragment),H1r=l(),Ybe=a("p"),U1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J1r=l(),ys=a("p"),Y1r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),me=a("ul"),tE=a("li"),o2e=a("strong"),sFr=o("albert"),nFr=o(" \u2014 "),vX=a("a"),lFr=o("FlaxAlbertForPreTraining"),iFr=o(" (ALBERT model)"),dFr=l(),aE=a("li"),r2e=a("strong"),cFr=o("bart"),mFr=o(" \u2014 "),TX=a("a"),fFr=o("FlaxBartForConditionalGeneration"),gFr=o(" (BART model)"),hFr=l(),sE=a("li"),t2e=a("strong"),uFr=o("bert"),pFr=o(" \u2014 "),FX=a("a"),_Fr=o("FlaxBertForPreTraining"),bFr=o(" (BERT model)"),vFr=l(),nE=a("li"),a2e=a("strong"),TFr=o("big_bird"),FFr=o(" \u2014 "),CX=a("a"),CFr=o("FlaxBigBirdForPreTraining"),MFr=o(" (BigBird model)"),EFr=l(),lE=a("li"),s2e=a("strong"),yFr=o("electra"),wFr=o(" \u2014 "),MX=a("a"),AFr=o("FlaxElectraForPreTraining"),LFr=o(" (ELECTRA model)"),BFr=l(),iE=a("li"),n2e=a("strong"),xFr=o("mbart"),kFr=o(" \u2014 "),EX=a("a"),RFr=o("FlaxMBartForConditionalGeneration"),SFr=o(" (mBART model)"),PFr=l(),dE=a("li"),l2e=a("strong"),$Fr=o("mt5"),IFr=o(" \u2014 "),yX=a("a"),DFr=o("FlaxMT5ForConditionalGeneration"),jFr=o(" (mT5 model)"),NFr=l(),cE=a("li"),i2e=a("strong"),qFr=o("roberta"),GFr=o(" \u2014 "),wX=a("a"),OFr=o("FlaxRobertaForMaskedLM"),XFr=o(" (RoBERTa model)"),VFr=l(),mE=a("li"),d2e=a("strong"),zFr=o("roformer"),WFr=o(" \u2014 "),AX=a("a"),QFr=o("FlaxRoFormerForMaskedLM"),HFr=o(" (RoFormer model)"),UFr=l(),fE=a("li"),c2e=a("strong"),JFr=o("t5"),YFr=o(" \u2014 "),LX=a("a"),KFr=o("FlaxT5ForConditionalGeneration"),ZFr=o(" (T5 model)"),eCr=l(),gE=a("li"),m2e=a("strong"),oCr=o("wav2vec2"),rCr=o(" \u2014 "),BX=a("a"),tCr=o("FlaxWav2Vec2ForPreTraining"),aCr=o(" (Wav2Vec2 model)"),sCr=l(),f2e=a("p"),nCr=o("Examples:"),lCr=l(),m(eL.$$.fragment),nxe=l(),Uc=a("h2"),hE=a("a"),g2e=a("span"),m(oL.$$.fragment),iCr=l(),h2e=a("span"),dCr=o("FlaxAutoModelForMaskedLM"),lxe=l(),kr=a("div"),m(rL.$$.fragment),cCr=l(),Jc=a("p"),mCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),u2e=a("code"),fCr=o("from_pretrained()"),gCr=o("class method or the "),p2e=a("code"),hCr=o("from_config()"),uCr=o(`class
method.`),pCr=l(),tL=a("p"),_Cr=o("This class cannot be instantiated directly using "),_2e=a("code"),bCr=o("__init__()"),vCr=o(" (throws an error)."),TCr=l(),Et=a("div"),m(aL.$$.fragment),FCr=l(),b2e=a("p"),CCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MCr=l(),Yc=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),yCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=a("code"),ACr=o("from_pretrained()"),LCr=o("to load the model weights."),BCr=l(),F2e=a("p"),xCr=o("Examples:"),kCr=l(),m(sL.$$.fragment),RCr=l(),Bo=a("div"),m(nL.$$.fragment),SCr=l(),C2e=a("p"),PCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Cr=l(),ws=a("p"),ICr=o("The model class to instantiate is selected based on the "),M2e=a("code"),DCr=o("model_type"),jCr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),NCr=o("pretrained_model_name_or_path"),qCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),GCr=o("pretrained_model_name_or_path"),OCr=o(":"),XCr=l(),ve=a("ul"),uE=a("li"),w2e=a("strong"),VCr=o("albert"),zCr=o(" \u2014 "),xX=a("a"),WCr=o("FlaxAlbertForMaskedLM"),QCr=o(" (ALBERT model)"),HCr=l(),pE=a("li"),A2e=a("strong"),UCr=o("bart"),JCr=o(" \u2014 "),kX=a("a"),YCr=o("FlaxBartForConditionalGeneration"),KCr=o(" (BART model)"),ZCr=l(),_E=a("li"),L2e=a("strong"),e4r=o("bert"),o4r=o(" \u2014 "),RX=a("a"),r4r=o("FlaxBertForMaskedLM"),t4r=o(" (BERT model)"),a4r=l(),bE=a("li"),B2e=a("strong"),s4r=o("big_bird"),n4r=o(" \u2014 "),SX=a("a"),l4r=o("FlaxBigBirdForMaskedLM"),i4r=o(" (BigBird model)"),d4r=l(),vE=a("li"),x2e=a("strong"),c4r=o("distilbert"),m4r=o(" \u2014 "),PX=a("a"),f4r=o("FlaxDistilBertForMaskedLM"),g4r=o(" (DistilBERT model)"),h4r=l(),TE=a("li"),k2e=a("strong"),u4r=o("electra"),p4r=o(" \u2014 "),$X=a("a"),_4r=o("FlaxElectraForMaskedLM"),b4r=o(" (ELECTRA model)"),v4r=l(),FE=a("li"),R2e=a("strong"),T4r=o("mbart"),F4r=o(" \u2014 "),IX=a("a"),C4r=o("FlaxMBartForConditionalGeneration"),M4r=o(" (mBART model)"),E4r=l(),CE=a("li"),S2e=a("strong"),y4r=o("roberta"),w4r=o(" \u2014 "),DX=a("a"),A4r=o("FlaxRobertaForMaskedLM"),L4r=o(" (RoBERTa model)"),B4r=l(),ME=a("li"),P2e=a("strong"),x4r=o("roformer"),k4r=o(" \u2014 "),jX=a("a"),R4r=o("FlaxRoFormerForMaskedLM"),S4r=o(" (RoFormer model)"),P4r=l(),$2e=a("p"),$4r=o("Examples:"),I4r=l(),m(lL.$$.fragment),ixe=l(),Kc=a("h2"),EE=a("a"),I2e=a("span"),m(iL.$$.fragment),D4r=l(),D2e=a("span"),j4r=o("FlaxAutoModelForSeq2SeqLM"),dxe=l(),Rr=a("div"),m(dL.$$.fragment),N4r=l(),Zc=a("p"),q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),j2e=a("code"),G4r=o("from_pretrained()"),O4r=o("class method or the "),N2e=a("code"),X4r=o("from_config()"),V4r=o(`class
method.`),z4r=l(),cL=a("p"),W4r=o("This class cannot be instantiated directly using "),q2e=a("code"),Q4r=o("__init__()"),H4r=o(" (throws an error)."),U4r=l(),yt=a("div"),m(mL.$$.fragment),J4r=l(),G2e=a("p"),Y4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K4r=l(),em=a("p"),Z4r=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),eMr=o("not"),oMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=a("code"),rMr=o("from_pretrained()"),tMr=o("to load the model weights."),aMr=l(),V2e=a("p"),sMr=o("Examples:"),nMr=l(),m(fL.$$.fragment),lMr=l(),xo=a("div"),m(gL.$$.fragment),iMr=l(),z2e=a("p"),dMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cMr=l(),As=a("p"),mMr=o("The model class to instantiate is selected based on the "),W2e=a("code"),fMr=o("model_type"),gMr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),hMr=o("pretrained_model_name_or_path"),uMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(":"),bMr=l(),Te=a("ul"),yE=a("li"),U2e=a("strong"),vMr=o("bart"),TMr=o(" \u2014 "),NX=a("a"),FMr=o("FlaxBartForConditionalGeneration"),CMr=o(" (BART model)"),MMr=l(),wE=a("li"),J2e=a("strong"),EMr=o("blenderbot"),yMr=o(" \u2014 "),qX=a("a"),wMr=o("FlaxBlenderbotForConditionalGeneration"),AMr=o(" (Blenderbot model)"),LMr=l(),AE=a("li"),Y2e=a("strong"),BMr=o("blenderbot-small"),xMr=o(" \u2014 "),GX=a("a"),kMr=o("FlaxBlenderbotSmallForConditionalGeneration"),RMr=o(" (BlenderbotSmall model)"),SMr=l(),LE=a("li"),K2e=a("strong"),PMr=o("encoder-decoder"),$Mr=o(" \u2014 "),OX=a("a"),IMr=o("FlaxEncoderDecoderModel"),DMr=o(" (Encoder decoder model)"),jMr=l(),BE=a("li"),Z2e=a("strong"),NMr=o("marian"),qMr=o(" \u2014 "),XX=a("a"),GMr=o("FlaxMarianMTModel"),OMr=o(" (Marian model)"),XMr=l(),xE=a("li"),eve=a("strong"),VMr=o("mbart"),zMr=o(" \u2014 "),VX=a("a"),WMr=o("FlaxMBartForConditionalGeneration"),QMr=o(" (mBART model)"),HMr=l(),kE=a("li"),ove=a("strong"),UMr=o("mt5"),JMr=o(" \u2014 "),zX=a("a"),YMr=o("FlaxMT5ForConditionalGeneration"),KMr=o(" (mT5 model)"),ZMr=l(),RE=a("li"),rve=a("strong"),eEr=o("pegasus"),oEr=o(" \u2014 "),WX=a("a"),rEr=o("FlaxPegasusForConditionalGeneration"),tEr=o(" (Pegasus model)"),aEr=l(),SE=a("li"),tve=a("strong"),sEr=o("t5"),nEr=o(" \u2014 "),QX=a("a"),lEr=o("FlaxT5ForConditionalGeneration"),iEr=o(" (T5 model)"),dEr=l(),ave=a("p"),cEr=o("Examples:"),mEr=l(),m(hL.$$.fragment),cxe=l(),om=a("h2"),PE=a("a"),sve=a("span"),m(uL.$$.fragment),fEr=l(),nve=a("span"),gEr=o("FlaxAutoModelForSequenceClassification"),mxe=l(),Sr=a("div"),m(pL.$$.fragment),hEr=l(),rm=a("p"),uEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lve=a("code"),pEr=o("from_pretrained()"),_Er=o("class method or the "),ive=a("code"),bEr=o("from_config()"),vEr=o(`class
method.`),TEr=l(),_L=a("p"),FEr=o("This class cannot be instantiated directly using "),dve=a("code"),CEr=o("__init__()"),MEr=o(" (throws an error)."),EEr=l(),wt=a("div"),m(bL.$$.fragment),yEr=l(),cve=a("p"),wEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AEr=l(),tm=a("p"),LEr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),BEr=o("not"),xEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fve=a("code"),kEr=o("from_pretrained()"),REr=o("to load the model weights."),SEr=l(),gve=a("p"),PEr=o("Examples:"),$Er=l(),m(vL.$$.fragment),IEr=l(),ko=a("div"),m(TL.$$.fragment),DEr=l(),hve=a("p"),jEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NEr=l(),Ls=a("p"),qEr=o("The model class to instantiate is selected based on the "),uve=a("code"),GEr=o("model_type"),OEr=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),XEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),zEr=o("pretrained_model_name_or_path"),WEr=o(":"),QEr=l(),Fe=a("ul"),$E=a("li"),bve=a("strong"),HEr=o("albert"),UEr=o(" \u2014 "),HX=a("a"),JEr=o("FlaxAlbertForSequenceClassification"),YEr=o(" (ALBERT model)"),KEr=l(),IE=a("li"),vve=a("strong"),ZEr=o("bart"),e3r=o(" \u2014 "),UX=a("a"),o3r=o("FlaxBartForSequenceClassification"),r3r=o(" (BART model)"),t3r=l(),DE=a("li"),Tve=a("strong"),a3r=o("bert"),s3r=o(" \u2014 "),JX=a("a"),n3r=o("FlaxBertForSequenceClassification"),l3r=o(" (BERT model)"),i3r=l(),jE=a("li"),Fve=a("strong"),d3r=o("big_bird"),c3r=o(" \u2014 "),YX=a("a"),m3r=o("FlaxBigBirdForSequenceClassification"),f3r=o(" (BigBird model)"),g3r=l(),NE=a("li"),Cve=a("strong"),h3r=o("distilbert"),u3r=o(" \u2014 "),KX=a("a"),p3r=o("FlaxDistilBertForSequenceClassification"),_3r=o(" (DistilBERT model)"),b3r=l(),qE=a("li"),Mve=a("strong"),v3r=o("electra"),T3r=o(" \u2014 "),ZX=a("a"),F3r=o("FlaxElectraForSequenceClassification"),C3r=o(" (ELECTRA model)"),M3r=l(),GE=a("li"),Eve=a("strong"),E3r=o("mbart"),y3r=o(" \u2014 "),eV=a("a"),w3r=o("FlaxMBartForSequenceClassification"),A3r=o(" (mBART model)"),L3r=l(),OE=a("li"),yve=a("strong"),B3r=o("roberta"),x3r=o(" \u2014 "),oV=a("a"),k3r=o("FlaxRobertaForSequenceClassification"),R3r=o(" (RoBERTa model)"),S3r=l(),XE=a("li"),wve=a("strong"),P3r=o("roformer"),$3r=o(" \u2014 "),rV=a("a"),I3r=o("FlaxRoFormerForSequenceClassification"),D3r=o(" (RoFormer model)"),j3r=l(),Ave=a("p"),N3r=o("Examples:"),q3r=l(),m(FL.$$.fragment),fxe=l(),am=a("h2"),VE=a("a"),Lve=a("span"),m(CL.$$.fragment),G3r=l(),Bve=a("span"),O3r=o("FlaxAutoModelForQuestionAnswering"),gxe=l(),Pr=a("div"),m(ML.$$.fragment),X3r=l(),sm=a("p"),V3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xve=a("code"),z3r=o("from_pretrained()"),W3r=o("class method or the "),kve=a("code"),Q3r=o("from_config()"),H3r=o(`class
method.`),U3r=l(),EL=a("p"),J3r=o("This class cannot be instantiated directly using "),Rve=a("code"),Y3r=o("__init__()"),K3r=o(" (throws an error)."),Z3r=l(),At=a("div"),m(yL.$$.fragment),e5r=l(),Sve=a("p"),o5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r5r=l(),nm=a("p"),t5r=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),a5r=o("not"),s5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=a("code"),n5r=o("from_pretrained()"),l5r=o("to load the model weights."),i5r=l(),Ive=a("p"),d5r=o("Examples:"),c5r=l(),m(wL.$$.fragment),m5r=l(),Ro=a("div"),m(AL.$$.fragment),f5r=l(),Dve=a("p"),g5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h5r=l(),Bs=a("p"),u5r=o("The model class to instantiate is selected based on the "),jve=a("code"),p5r=o("model_type"),_5r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),T5r=o("pretrained_model_name_or_path"),F5r=o(":"),C5r=l(),Ce=a("ul"),zE=a("li"),Gve=a("strong"),M5r=o("albert"),E5r=o(" \u2014 "),tV=a("a"),y5r=o("FlaxAlbertForQuestionAnswering"),w5r=o(" (ALBERT model)"),A5r=l(),WE=a("li"),Ove=a("strong"),L5r=o("bart"),B5r=o(" \u2014 "),aV=a("a"),x5r=o("FlaxBartForQuestionAnswering"),k5r=o(" (BART model)"),R5r=l(),QE=a("li"),Xve=a("strong"),S5r=o("bert"),P5r=o(" \u2014 "),sV=a("a"),$5r=o("FlaxBertForQuestionAnswering"),I5r=o(" (BERT model)"),D5r=l(),HE=a("li"),Vve=a("strong"),j5r=o("big_bird"),N5r=o(" \u2014 "),nV=a("a"),q5r=o("FlaxBigBirdForQuestionAnswering"),G5r=o(" (BigBird model)"),O5r=l(),UE=a("li"),zve=a("strong"),X5r=o("distilbert"),V5r=o(" \u2014 "),lV=a("a"),z5r=o("FlaxDistilBertForQuestionAnswering"),W5r=o(" (DistilBERT model)"),Q5r=l(),JE=a("li"),Wve=a("strong"),H5r=o("electra"),U5r=o(" \u2014 "),iV=a("a"),J5r=o("FlaxElectraForQuestionAnswering"),Y5r=o(" (ELECTRA model)"),K5r=l(),YE=a("li"),Qve=a("strong"),Z5r=o("mbart"),eyr=o(" \u2014 "),dV=a("a"),oyr=o("FlaxMBartForQuestionAnswering"),ryr=o(" (mBART model)"),tyr=l(),KE=a("li"),Hve=a("strong"),ayr=o("roberta"),syr=o(" \u2014 "),cV=a("a"),nyr=o("FlaxRobertaForQuestionAnswering"),lyr=o(" (RoBERTa model)"),iyr=l(),ZE=a("li"),Uve=a("strong"),dyr=o("roformer"),cyr=o(" \u2014 "),mV=a("a"),myr=o("FlaxRoFormerForQuestionAnswering"),fyr=o(" (RoFormer model)"),gyr=l(),Jve=a("p"),hyr=o("Examples:"),uyr=l(),m(LL.$$.fragment),hxe=l(),lm=a("h2"),e3=a("a"),Yve=a("span"),m(BL.$$.fragment),pyr=l(),Kve=a("span"),_yr=o("FlaxAutoModelForTokenClassification"),uxe=l(),$r=a("div"),m(xL.$$.fragment),byr=l(),im=a("p"),vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zve=a("code"),Tyr=o("from_pretrained()"),Fyr=o("class method or the "),eTe=a("code"),Cyr=o("from_config()"),Myr=o(`class
method.`),Eyr=l(),kL=a("p"),yyr=o("This class cannot be instantiated directly using "),oTe=a("code"),wyr=o("__init__()"),Ayr=o(" (throws an error)."),Lyr=l(),Lt=a("div"),m(RL.$$.fragment),Byr=l(),rTe=a("p"),xyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kyr=l(),dm=a("p"),Ryr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),Syr=o("not"),Pyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aTe=a("code"),$yr=o("from_pretrained()"),Iyr=o("to load the model weights."),Dyr=l(),sTe=a("p"),jyr=o("Examples:"),Nyr=l(),m(SL.$$.fragment),qyr=l(),So=a("div"),m(PL.$$.fragment),Gyr=l(),nTe=a("p"),Oyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xyr=l(),xs=a("p"),Vyr=o("The model class to instantiate is selected based on the "),lTe=a("code"),zyr=o("model_type"),Wyr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),Qyr=o("pretrained_model_name_or_path"),Hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),Uyr=o("pretrained_model_name_or_path"),Jyr=o(":"),Yyr=l(),no=a("ul"),o3=a("li"),cTe=a("strong"),Kyr=o("albert"),Zyr=o(" \u2014 "),fV=a("a"),ewr=o("FlaxAlbertForTokenClassification"),owr=o(" (ALBERT model)"),rwr=l(),r3=a("li"),mTe=a("strong"),twr=o("bert"),awr=o(" \u2014 "),gV=a("a"),swr=o("FlaxBertForTokenClassification"),nwr=o(" (BERT model)"),lwr=l(),t3=a("li"),fTe=a("strong"),iwr=o("big_bird"),dwr=o(" \u2014 "),hV=a("a"),cwr=o("FlaxBigBirdForTokenClassification"),mwr=o(" (BigBird model)"),fwr=l(),a3=a("li"),gTe=a("strong"),gwr=o("distilbert"),hwr=o(" \u2014 "),uV=a("a"),uwr=o("FlaxDistilBertForTokenClassification"),pwr=o(" (DistilBERT model)"),_wr=l(),s3=a("li"),hTe=a("strong"),bwr=o("electra"),vwr=o(" \u2014 "),pV=a("a"),Twr=o("FlaxElectraForTokenClassification"),Fwr=o(" (ELECTRA model)"),Cwr=l(),n3=a("li"),uTe=a("strong"),Mwr=o("roberta"),Ewr=o(" \u2014 "),_V=a("a"),ywr=o("FlaxRobertaForTokenClassification"),wwr=o(" (RoBERTa model)"),Awr=l(),l3=a("li"),pTe=a("strong"),Lwr=o("roformer"),Bwr=o(" \u2014 "),bV=a("a"),xwr=o("FlaxRoFormerForTokenClassification"),kwr=o(" (RoFormer model)"),Rwr=l(),_Te=a("p"),Swr=o("Examples:"),Pwr=l(),m($L.$$.fragment),pxe=l(),cm=a("h2"),i3=a("a"),bTe=a("span"),m(IL.$$.fragment),$wr=l(),vTe=a("span"),Iwr=o("FlaxAutoModelForMultipleChoice"),_xe=l(),Ir=a("div"),m(DL.$$.fragment),Dwr=l(),mm=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TTe=a("code"),Nwr=o("from_pretrained()"),qwr=o("class method or the "),FTe=a("code"),Gwr=o("from_config()"),Owr=o(`class
method.`),Xwr=l(),jL=a("p"),Vwr=o("This class cannot be instantiated directly using "),CTe=a("code"),zwr=o("__init__()"),Wwr=o(" (throws an error)."),Qwr=l(),Bt=a("div"),m(NL.$$.fragment),Hwr=l(),MTe=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jwr=l(),fm=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yTe=a("code"),e6r=o("from_pretrained()"),o6r=o("to load the model weights."),r6r=l(),wTe=a("p"),t6r=o("Examples:"),a6r=l(),m(qL.$$.fragment),s6r=l(),Po=a("div"),m(GL.$$.fragment),n6r=l(),ATe=a("p"),l6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i6r=l(),ks=a("p"),d6r=o("The model class to instantiate is selected based on the "),LTe=a("code"),c6r=o("model_type"),m6r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),f6r=o("pretrained_model_name_or_path"),g6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),h6r=o("pretrained_model_name_or_path"),u6r=o(":"),p6r=l(),lo=a("ul"),d3=a("li"),kTe=a("strong"),_6r=o("albert"),b6r=o(" \u2014 "),vV=a("a"),v6r=o("FlaxAlbertForMultipleChoice"),T6r=o(" (ALBERT model)"),F6r=l(),c3=a("li"),RTe=a("strong"),C6r=o("bert"),M6r=o(" \u2014 "),TV=a("a"),E6r=o("FlaxBertForMultipleChoice"),y6r=o(" (BERT model)"),w6r=l(),m3=a("li"),STe=a("strong"),A6r=o("big_bird"),L6r=o(" \u2014 "),FV=a("a"),B6r=o("FlaxBigBirdForMultipleChoice"),x6r=o(" (BigBird model)"),k6r=l(),f3=a("li"),PTe=a("strong"),R6r=o("distilbert"),S6r=o(" \u2014 "),CV=a("a"),P6r=o("FlaxDistilBertForMultipleChoice"),$6r=o(" (DistilBERT model)"),I6r=l(),g3=a("li"),$Te=a("strong"),D6r=o("electra"),j6r=o(" \u2014 "),MV=a("a"),N6r=o("FlaxElectraForMultipleChoice"),q6r=o(" (ELECTRA model)"),G6r=l(),h3=a("li"),ITe=a("strong"),O6r=o("roberta"),X6r=o(" \u2014 "),EV=a("a"),V6r=o("FlaxRobertaForMultipleChoice"),z6r=o(" (RoBERTa model)"),W6r=l(),u3=a("li"),DTe=a("strong"),Q6r=o("roformer"),H6r=o(" \u2014 "),yV=a("a"),U6r=o("FlaxRoFormerForMultipleChoice"),J6r=o(" (RoFormer model)"),Y6r=l(),jTe=a("p"),K6r=o("Examples:"),Z6r=l(),m(OL.$$.fragment),bxe=l(),gm=a("h2"),p3=a("a"),NTe=a("span"),m(XL.$$.fragment),eAr=l(),qTe=a("span"),oAr=o("FlaxAutoModelForNextSentencePrediction"),vxe=l(),Dr=a("div"),m(VL.$$.fragment),rAr=l(),hm=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GTe=a("code"),aAr=o("from_pretrained()"),sAr=o("class method or the "),OTe=a("code"),nAr=o("from_config()"),lAr=o(`class
method.`),iAr=l(),zL=a("p"),dAr=o("This class cannot be instantiated directly using "),XTe=a("code"),cAr=o("__init__()"),mAr=o(" (throws an error)."),fAr=l(),xt=a("div"),m(WL.$$.fragment),gAr=l(),VTe=a("p"),hAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uAr=l(),um=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),_Ar=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WTe=a("code"),vAr=o("from_pretrained()"),TAr=o("to load the model weights."),FAr=l(),QTe=a("p"),CAr=o("Examples:"),MAr=l(),m(QL.$$.fragment),EAr=l(),$o=a("div"),m(HL.$$.fragment),yAr=l(),HTe=a("p"),wAr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AAr=l(),Rs=a("p"),LAr=o("The model class to instantiate is selected based on the "),UTe=a("code"),BAr=o("model_type"),xAr=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),kAr=o("pretrained_model_name_or_path"),RAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),SAr=o("pretrained_model_name_or_path"),PAr=o(":"),$Ar=l(),KTe=a("ul"),_3=a("li"),ZTe=a("strong"),IAr=o("bert"),DAr=o(" \u2014 "),wV=a("a"),jAr=o("FlaxBertForNextSentencePrediction"),NAr=o(" (BERT model)"),qAr=l(),e1e=a("p"),GAr=o("Examples:"),OAr=l(),m(UL.$$.fragment),Txe=l(),pm=a("h2"),b3=a("a"),o1e=a("span"),m(JL.$$.fragment),XAr=l(),r1e=a("span"),VAr=o("FlaxAutoModelForImageClassification"),Fxe=l(),jr=a("div"),m(YL.$$.fragment),zAr=l(),_m=a("p"),WAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),t1e=a("code"),QAr=o("from_pretrained()"),HAr=o("class method or the "),a1e=a("code"),UAr=o("from_config()"),JAr=o(`class
method.`),YAr=l(),KL=a("p"),KAr=o("This class cannot be instantiated directly using "),s1e=a("code"),ZAr=o("__init__()"),e0r=o(" (throws an error)."),o0r=l(),kt=a("div"),m(ZL.$$.fragment),r0r=l(),n1e=a("p"),t0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a0r=l(),bm=a("p"),s0r=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),n0r=o("not"),l0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=a("code"),i0r=o("from_pretrained()"),d0r=o("to load the model weights."),c0r=l(),d1e=a("p"),m0r=o("Examples:"),f0r=l(),m(e8.$$.fragment),g0r=l(),Io=a("div"),m(o8.$$.fragment),h0r=l(),c1e=a("p"),u0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p0r=l(),Ss=a("p"),_0r=o("The model class to instantiate is selected based on the "),m1e=a("code"),b0r=o("model_type"),v0r=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),T0r=o("pretrained_model_name_or_path"),F0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),C0r=o("pretrained_model_name_or_path"),M0r=o(":"),E0r=l(),r8=a("ul"),v3=a("li"),h1e=a("strong"),y0r=o("beit"),w0r=o(" \u2014 "),AV=a("a"),A0r=o("FlaxBeitForImageClassification"),L0r=o(" (BEiT model)"),B0r=l(),T3=a("li"),u1e=a("strong"),x0r=o("vit"),k0r=o(" \u2014 "),LV=a("a"),R0r=o("FlaxViTForImageClassification"),S0r=o(" (ViT model)"),P0r=l(),p1e=a("p"),$0r=o("Examples:"),I0r=l(),m(t8.$$.fragment),Cxe=l(),vm=a("h2"),F3=a("a"),_1e=a("span"),m(a8.$$.fragment),D0r=l(),b1e=a("span"),j0r=o("FlaxAutoModelForVision2Seq"),Mxe=l(),Nr=a("div"),m(s8.$$.fragment),N0r=l(),Tm=a("p"),q0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v1e=a("code"),G0r=o("from_pretrained()"),O0r=o("class method or the "),T1e=a("code"),X0r=o("from_config()"),V0r=o(`class
method.`),z0r=l(),n8=a("p"),W0r=o("This class cannot be instantiated directly using "),F1e=a("code"),Q0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),Rt=a("div"),m(l8.$$.fragment),J0r=l(),C1e=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K0r=l(),Fm=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),eLr=o("not"),oLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E1e=a("code"),rLr=o("from_pretrained()"),tLr=o("to load the model weights."),aLr=l(),y1e=a("p"),sLr=o("Examples:"),nLr=l(),m(i8.$$.fragment),lLr=l(),Do=a("div"),m(d8.$$.fragment),iLr=l(),w1e=a("p"),dLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cLr=l(),Ps=a("p"),mLr=o("The model class to instantiate is selected based on the "),A1e=a("code"),fLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),L1e=a("code"),hLr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),pLr=o("pretrained_model_name_or_path"),_Lr=o(":"),bLr=l(),x1e=a("ul"),C3=a("li"),k1e=a("strong"),vLr=o("vision-encoder-decoder"),TLr=o(" \u2014 "),BV=a("a"),FLr=o("FlaxVisionEncoderDecoderModel"),CLr=o(" (Vision Encoder decoder model)"),MLr=l(),R1e=a("p"),ELr=o("Examples:"),yLr=l(),m(c8.$$.fragment),this.h()},l(c){const _=gvt('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(t),Be=i(c),ie=s(c,"H1",{class:!0});var m8=n(ie);fe=s(m8,"A",{id:!0,class:!0,href:!0});var S1e=n(fe);so=s(S1e,"SPAN",{});var P1e=n(so);f(ce.$$.fragment,P1e),P1e.forEach(t),S1e.forEach(t),_e=i(m8),Go=s(m8,"SPAN",{});var ALr=n(Go);Li=r(ALr,"Auto Classes"),ALr.forEach(t),m8.forEach(t),Mm=i(c),na=s(c,"P",{});var yxe=n(na);Bi=r(yxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=s(yxe,"CODE",{});var LLr=n(xi);C5=r(LLr,"from_pretrained()"),LLr.forEach(t),Em=r(yxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),yxe.forEach(t),ye=i(c),io=s(c,"P",{});var M3=n(io);ki=r(M3,"Instantiating one of "),$s=s(M3,"A",{href:!0});var BLr=n($s);M5=r(BLr,"AutoConfig"),BLr.forEach(t),Is=r(M3,", "),Ds=s(M3,"A",{href:!0});var xLr=n(Ds);E5=r(xLr,"AutoModel"),xLr.forEach(t),Ri=r(M3,`, and
`),js=s(M3,"A",{href:!0});var kLr=n(js);y5=r(kLr,"AutoTokenizer"),kLr.forEach(t),Si=r(M3," will directly create a class of the relevant architecture. For instance"),M3.forEach(t),ym=i(c),f($a.$$.fragment,c),co=i(c),ge=s(c,"P",{});var wxe=n(ge);l7=r(wxe,"will create a model that is an instance of "),Pi=s(wxe,"A",{href:!0});var RLr=n(Pi);i7=r(RLr,"BertModel"),RLr.forEach(t),d7=r(wxe,"."),wxe.forEach(t),Oo=i(c),Ia=s(c,"P",{});var Axe=n(Ia);c7=r(Axe,"There is one class of "),wm=s(Axe,"CODE",{});var SLr=n(wm);m7=r(SLr,"AutoModel"),SLr.forEach(t),$Re=r(Axe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Axe.forEach(t),y9e=i(c),$i=s(c,"H2",{class:!0});var Lxe=n($i);Am=s(Lxe,"A",{id:!0,class:!0,href:!0});var PLr=n(Am);TW=s(PLr,"SPAN",{});var $Lr=n(TW);f(w5.$$.fragment,$Lr),$Lr.forEach(t),PLr.forEach(t),IRe=i(Lxe),FW=s(Lxe,"SPAN",{});var ILr=n(FW);DRe=r(ILr,"Extending the Auto Classes"),ILr.forEach(t),Lxe.forEach(t),w9e=i(c),Ns=s(c,"P",{});var xV=n(Ns);jRe=r(xV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CW=s(xV,"CODE",{});var DLr=n(CW);NRe=r(DLr,"NewModel"),DLr.forEach(t),qRe=r(xV,", make sure you have a "),MW=s(xV,"CODE",{});var jLr=n(MW);GRe=r(jLr,"NewModelConfig"),jLr.forEach(t),ORe=r(xV,` then you can add those to the auto
classes like this:`),xV.forEach(t),A9e=i(c),f(A5.$$.fragment,c),L9e=i(c),f7=s(c,"P",{});var NLr=n(f7);XRe=r(NLr,"You will then be able to use the auto classes like you would usually do!"),NLr.forEach(t),B9e=i(c),f(Lm.$$.fragment,c),x9e=i(c),Ii=s(c,"H2",{class:!0});var Bxe=n(Ii);Bm=s(Bxe,"A",{id:!0,class:!0,href:!0});var qLr=n(Bm);EW=s(qLr,"SPAN",{});var GLr=n(EW);f(L5.$$.fragment,GLr),GLr.forEach(t),qLr.forEach(t),VRe=i(Bxe),yW=s(Bxe,"SPAN",{});var OLr=n(yW);zRe=r(OLr,"AutoConfig"),OLr.forEach(t),Bxe.forEach(t),k9e=i(c),Xo=s(c,"DIV",{class:!0});var In=n(Xo);f(B5.$$.fragment,In),WRe=i(In),x5=s(In,"P",{});var xxe=n(x5);QRe=r(xxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g7=s(xxe,"A",{href:!0});var XLr=n(g7);HRe=r(XLr,"from_pretrained()"),XLr.forEach(t),URe=r(xxe," class method."),xxe.forEach(t),JRe=i(In),k5=s(In,"P",{});var kxe=n(k5);YRe=r(kxe,"This class cannot be instantiated directly using "),wW=s(kxe,"CODE",{});var VLr=n(wW);KRe=r(VLr,"__init__()"),VLr.forEach(t),ZRe=r(kxe," (throws an error)."),kxe.forEach(t),eSe=i(In),mo=s(In,"DIV",{class:!0});var ia=n(mo);f(R5.$$.fragment,ia),oSe=i(ia),AW=s(ia,"P",{});var zLr=n(AW);rSe=r(zLr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zLr.forEach(t),tSe=i(ia),Di=s(ia,"P",{});var kV=n(Di);aSe=r(kV,"The configuration class to instantiate is selected based on the "),LW=s(kV,"CODE",{});var WLr=n(LW);sSe=r(WLr,"model_type"),WLr.forEach(t),nSe=r(kV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BW=s(kV,"CODE",{});var QLr=n(BW);lSe=r(QLr,"pretrained_model_name_or_path"),QLr.forEach(t),iSe=r(kV,":"),kV.forEach(t),dSe=i(ia),v=s(ia,"UL",{});var T=n(v);xm=s(T,"LI",{});var $1e=n(xm);xW=s($1e,"STRONG",{});var HLr=n(xW);cSe=r(HLr,"albert"),HLr.forEach(t),mSe=r($1e," \u2014 "),h7=s($1e,"A",{href:!0});var ULr=n(h7);fSe=r(ULr,"AlbertConfig"),ULr.forEach(t),gSe=r($1e," (ALBERT model)"),$1e.forEach(t),hSe=i(T),km=s(T,"LI",{});var I1e=n(km);kW=s(I1e,"STRONG",{});var JLr=n(kW);uSe=r(JLr,"bart"),JLr.forEach(t),pSe=r(I1e," \u2014 "),u7=s(I1e,"A",{href:!0});var YLr=n(u7);_Se=r(YLr,"BartConfig"),YLr.forEach(t),bSe=r(I1e," (BART model)"),I1e.forEach(t),vSe=i(T),Rm=s(T,"LI",{});var D1e=n(Rm);RW=s(D1e,"STRONG",{});var KLr=n(RW);TSe=r(KLr,"beit"),KLr.forEach(t),FSe=r(D1e," \u2014 "),p7=s(D1e,"A",{href:!0});var ZLr=n(p7);CSe=r(ZLr,"BeitConfig"),ZLr.forEach(t),MSe=r(D1e," (BEiT model)"),D1e.forEach(t),ESe=i(T),Sm=s(T,"LI",{});var j1e=n(Sm);SW=s(j1e,"STRONG",{});var e8r=n(SW);ySe=r(e8r,"bert"),e8r.forEach(t),wSe=r(j1e," \u2014 "),_7=s(j1e,"A",{href:!0});var o8r=n(_7);ASe=r(o8r,"BertConfig"),o8r.forEach(t),LSe=r(j1e," (BERT model)"),j1e.forEach(t),BSe=i(T),Pm=s(T,"LI",{});var N1e=n(Pm);PW=s(N1e,"STRONG",{});var r8r=n(PW);xSe=r(r8r,"bert-generation"),r8r.forEach(t),kSe=r(N1e," \u2014 "),b7=s(N1e,"A",{href:!0});var t8r=n(b7);RSe=r(t8r,"BertGenerationConfig"),t8r.forEach(t),SSe=r(N1e," (Bert Generation model)"),N1e.forEach(t),PSe=i(T),$m=s(T,"LI",{});var q1e=n($m);$W=s(q1e,"STRONG",{});var a8r=n($W);$Se=r(a8r,"big_bird"),a8r.forEach(t),ISe=r(q1e," \u2014 "),v7=s(q1e,"A",{href:!0});var s8r=n(v7);DSe=r(s8r,"BigBirdConfig"),s8r.forEach(t),jSe=r(q1e," (BigBird model)"),q1e.forEach(t),NSe=i(T),Im=s(T,"LI",{});var G1e=n(Im);IW=s(G1e,"STRONG",{});var n8r=n(IW);qSe=r(n8r,"bigbird_pegasus"),n8r.forEach(t),GSe=r(G1e," \u2014 "),T7=s(G1e,"A",{href:!0});var l8r=n(T7);OSe=r(l8r,"BigBirdPegasusConfig"),l8r.forEach(t),XSe=r(G1e," (BigBirdPegasus model)"),G1e.forEach(t),VSe=i(T),Dm=s(T,"LI",{});var O1e=n(Dm);DW=s(O1e,"STRONG",{});var i8r=n(DW);zSe=r(i8r,"blenderbot"),i8r.forEach(t),WSe=r(O1e," \u2014 "),F7=s(O1e,"A",{href:!0});var d8r=n(F7);QSe=r(d8r,"BlenderbotConfig"),d8r.forEach(t),HSe=r(O1e," (Blenderbot model)"),O1e.forEach(t),USe=i(T),jm=s(T,"LI",{});var X1e=n(jm);jW=s(X1e,"STRONG",{});var c8r=n(jW);JSe=r(c8r,"blenderbot-small"),c8r.forEach(t),YSe=r(X1e," \u2014 "),C7=s(X1e,"A",{href:!0});var m8r=n(C7);KSe=r(m8r,"BlenderbotSmallConfig"),m8r.forEach(t),ZSe=r(X1e," (BlenderbotSmall model)"),X1e.forEach(t),ePe=i(T),Nm=s(T,"LI",{});var V1e=n(Nm);NW=s(V1e,"STRONG",{});var f8r=n(NW);oPe=r(f8r,"camembert"),f8r.forEach(t),rPe=r(V1e," \u2014 "),M7=s(V1e,"A",{href:!0});var g8r=n(M7);tPe=r(g8r,"CamembertConfig"),g8r.forEach(t),aPe=r(V1e," (CamemBERT model)"),V1e.forEach(t),sPe=i(T),qm=s(T,"LI",{});var z1e=n(qm);qW=s(z1e,"STRONG",{});var h8r=n(qW);nPe=r(h8r,"canine"),h8r.forEach(t),lPe=r(z1e," \u2014 "),E7=s(z1e,"A",{href:!0});var u8r=n(E7);iPe=r(u8r,"CanineConfig"),u8r.forEach(t),dPe=r(z1e," (Canine model)"),z1e.forEach(t),cPe=i(T),Gm=s(T,"LI",{});var W1e=n(Gm);GW=s(W1e,"STRONG",{});var p8r=n(GW);mPe=r(p8r,"clip"),p8r.forEach(t),fPe=r(W1e," \u2014 "),y7=s(W1e,"A",{href:!0});var _8r=n(y7);gPe=r(_8r,"CLIPConfig"),_8r.forEach(t),hPe=r(W1e," (CLIP model)"),W1e.forEach(t),uPe=i(T),Om=s(T,"LI",{});var Q1e=n(Om);OW=s(Q1e,"STRONG",{});var b8r=n(OW);pPe=r(b8r,"convbert"),b8r.forEach(t),_Pe=r(Q1e," \u2014 "),w7=s(Q1e,"A",{href:!0});var v8r=n(w7);bPe=r(v8r,"ConvBertConfig"),v8r.forEach(t),vPe=r(Q1e," (ConvBERT model)"),Q1e.forEach(t),TPe=i(T),Xm=s(T,"LI",{});var H1e=n(Xm);XW=s(H1e,"STRONG",{});var T8r=n(XW);FPe=r(T8r,"convnext"),T8r.forEach(t),CPe=r(H1e," \u2014 "),A7=s(H1e,"A",{href:!0});var F8r=n(A7);MPe=r(F8r,"ConvNextConfig"),F8r.forEach(t),EPe=r(H1e," (ConvNext model)"),H1e.forEach(t),yPe=i(T),Vm=s(T,"LI",{});var U1e=n(Vm);VW=s(U1e,"STRONG",{});var C8r=n(VW);wPe=r(C8r,"ctrl"),C8r.forEach(t),APe=r(U1e," \u2014 "),L7=s(U1e,"A",{href:!0});var M8r=n(L7);LPe=r(M8r,"CTRLConfig"),M8r.forEach(t),BPe=r(U1e," (CTRL model)"),U1e.forEach(t),xPe=i(T),zm=s(T,"LI",{});var J1e=n(zm);zW=s(J1e,"STRONG",{});var E8r=n(zW);kPe=r(E8r,"data2vec-audio"),E8r.forEach(t),RPe=r(J1e," \u2014 "),B7=s(J1e,"A",{href:!0});var y8r=n(B7);SPe=r(y8r,"Data2VecAudioConfig"),y8r.forEach(t),PPe=r(J1e," (Data2VecAudio model)"),J1e.forEach(t),$Pe=i(T),Wm=s(T,"LI",{});var Y1e=n(Wm);WW=s(Y1e,"STRONG",{});var w8r=n(WW);IPe=r(w8r,"data2vec-text"),w8r.forEach(t),DPe=r(Y1e," \u2014 "),x7=s(Y1e,"A",{href:!0});var A8r=n(x7);jPe=r(A8r,"Data2VecTextConfig"),A8r.forEach(t),NPe=r(Y1e," (Data2VecText model)"),Y1e.forEach(t),qPe=i(T),Qm=s(T,"LI",{});var K1e=n(Qm);QW=s(K1e,"STRONG",{});var L8r=n(QW);GPe=r(L8r,"deberta"),L8r.forEach(t),OPe=r(K1e," \u2014 "),k7=s(K1e,"A",{href:!0});var B8r=n(k7);XPe=r(B8r,"DebertaConfig"),B8r.forEach(t),VPe=r(K1e," (DeBERTa model)"),K1e.forEach(t),zPe=i(T),Hm=s(T,"LI",{});var Z1e=n(Hm);HW=s(Z1e,"STRONG",{});var x8r=n(HW);WPe=r(x8r,"deberta-v2"),x8r.forEach(t),QPe=r(Z1e," \u2014 "),R7=s(Z1e,"A",{href:!0});var k8r=n(R7);HPe=r(k8r,"DebertaV2Config"),k8r.forEach(t),UPe=r(Z1e," (DeBERTa-v2 model)"),Z1e.forEach(t),JPe=i(T),Um=s(T,"LI",{});var eFe=n(Um);UW=s(eFe,"STRONG",{});var R8r=n(UW);YPe=r(R8r,"deit"),R8r.forEach(t),KPe=r(eFe," \u2014 "),S7=s(eFe,"A",{href:!0});var S8r=n(S7);ZPe=r(S8r,"DeiTConfig"),S8r.forEach(t),e$e=r(eFe," (DeiT model)"),eFe.forEach(t),o$e=i(T),Jm=s(T,"LI",{});var oFe=n(Jm);JW=s(oFe,"STRONG",{});var P8r=n(JW);r$e=r(P8r,"detr"),P8r.forEach(t),t$e=r(oFe," \u2014 "),P7=s(oFe,"A",{href:!0});var $8r=n(P7);a$e=r($8r,"DetrConfig"),$8r.forEach(t),s$e=r(oFe," (DETR model)"),oFe.forEach(t),n$e=i(T),Ym=s(T,"LI",{});var rFe=n(Ym);YW=s(rFe,"STRONG",{});var I8r=n(YW);l$e=r(I8r,"distilbert"),I8r.forEach(t),i$e=r(rFe," \u2014 "),$7=s(rFe,"A",{href:!0});var D8r=n($7);d$e=r(D8r,"DistilBertConfig"),D8r.forEach(t),c$e=r(rFe," (DistilBERT model)"),rFe.forEach(t),m$e=i(T),Km=s(T,"LI",{});var tFe=n(Km);KW=s(tFe,"STRONG",{});var j8r=n(KW);f$e=r(j8r,"dpr"),j8r.forEach(t),g$e=r(tFe," \u2014 "),I7=s(tFe,"A",{href:!0});var N8r=n(I7);h$e=r(N8r,"DPRConfig"),N8r.forEach(t),u$e=r(tFe," (DPR model)"),tFe.forEach(t),p$e=i(T),Zm=s(T,"LI",{});var aFe=n(Zm);ZW=s(aFe,"STRONG",{});var q8r=n(ZW);_$e=r(q8r,"electra"),q8r.forEach(t),b$e=r(aFe," \u2014 "),D7=s(aFe,"A",{href:!0});var G8r=n(D7);v$e=r(G8r,"ElectraConfig"),G8r.forEach(t),T$e=r(aFe," (ELECTRA model)"),aFe.forEach(t),F$e=i(T),ef=s(T,"LI",{});var sFe=n(ef);eQ=s(sFe,"STRONG",{});var O8r=n(eQ);C$e=r(O8r,"encoder-decoder"),O8r.forEach(t),M$e=r(sFe," \u2014 "),j7=s(sFe,"A",{href:!0});var X8r=n(j7);E$e=r(X8r,"EncoderDecoderConfig"),X8r.forEach(t),y$e=r(sFe," (Encoder decoder model)"),sFe.forEach(t),w$e=i(T),of=s(T,"LI",{});var nFe=n(of);oQ=s(nFe,"STRONG",{});var V8r=n(oQ);A$e=r(V8r,"flaubert"),V8r.forEach(t),L$e=r(nFe," \u2014 "),N7=s(nFe,"A",{href:!0});var z8r=n(N7);B$e=r(z8r,"FlaubertConfig"),z8r.forEach(t),x$e=r(nFe," (FlauBERT model)"),nFe.forEach(t),k$e=i(T),rf=s(T,"LI",{});var lFe=n(rf);rQ=s(lFe,"STRONG",{});var W8r=n(rQ);R$e=r(W8r,"fnet"),W8r.forEach(t),S$e=r(lFe," \u2014 "),q7=s(lFe,"A",{href:!0});var Q8r=n(q7);P$e=r(Q8r,"FNetConfig"),Q8r.forEach(t),$$e=r(lFe," (FNet model)"),lFe.forEach(t),I$e=i(T),tf=s(T,"LI",{});var iFe=n(tf);tQ=s(iFe,"STRONG",{});var H8r=n(tQ);D$e=r(H8r,"fsmt"),H8r.forEach(t),j$e=r(iFe," \u2014 "),G7=s(iFe,"A",{href:!0});var U8r=n(G7);N$e=r(U8r,"FSMTConfig"),U8r.forEach(t),q$e=r(iFe," (FairSeq Machine-Translation model)"),iFe.forEach(t),G$e=i(T),af=s(T,"LI",{});var dFe=n(af);aQ=s(dFe,"STRONG",{});var J8r=n(aQ);O$e=r(J8r,"funnel"),J8r.forEach(t),X$e=r(dFe," \u2014 "),O7=s(dFe,"A",{href:!0});var Y8r=n(O7);V$e=r(Y8r,"FunnelConfig"),Y8r.forEach(t),z$e=r(dFe," (Funnel Transformer model)"),dFe.forEach(t),W$e=i(T),sf=s(T,"LI",{});var cFe=n(sf);sQ=s(cFe,"STRONG",{});var K8r=n(sQ);Q$e=r(K8r,"gpt2"),K8r.forEach(t),H$e=r(cFe," \u2014 "),X7=s(cFe,"A",{href:!0});var Z8r=n(X7);U$e=r(Z8r,"GPT2Config"),Z8r.forEach(t),J$e=r(cFe," (OpenAI GPT-2 model)"),cFe.forEach(t),Y$e=i(T),nf=s(T,"LI",{});var mFe=n(nf);nQ=s(mFe,"STRONG",{});var e7r=n(nQ);K$e=r(e7r,"gpt_neo"),e7r.forEach(t),Z$e=r(mFe," \u2014 "),V7=s(mFe,"A",{href:!0});var o7r=n(V7);eIe=r(o7r,"GPTNeoConfig"),o7r.forEach(t),oIe=r(mFe," (GPT Neo model)"),mFe.forEach(t),rIe=i(T),lf=s(T,"LI",{});var fFe=n(lf);lQ=s(fFe,"STRONG",{});var r7r=n(lQ);tIe=r(r7r,"gptj"),r7r.forEach(t),aIe=r(fFe," \u2014 "),z7=s(fFe,"A",{href:!0});var t7r=n(z7);sIe=r(t7r,"GPTJConfig"),t7r.forEach(t),nIe=r(fFe," (GPT-J model)"),fFe.forEach(t),lIe=i(T),df=s(T,"LI",{});var gFe=n(df);iQ=s(gFe,"STRONG",{});var a7r=n(iQ);iIe=r(a7r,"hubert"),a7r.forEach(t),dIe=r(gFe," \u2014 "),W7=s(gFe,"A",{href:!0});var s7r=n(W7);cIe=r(s7r,"HubertConfig"),s7r.forEach(t),mIe=r(gFe," (Hubert model)"),gFe.forEach(t),fIe=i(T),cf=s(T,"LI",{});var hFe=n(cf);dQ=s(hFe,"STRONG",{});var n7r=n(dQ);gIe=r(n7r,"ibert"),n7r.forEach(t),hIe=r(hFe," \u2014 "),Q7=s(hFe,"A",{href:!0});var l7r=n(Q7);uIe=r(l7r,"IBertConfig"),l7r.forEach(t),pIe=r(hFe," (I-BERT model)"),hFe.forEach(t),_Ie=i(T),mf=s(T,"LI",{});var uFe=n(mf);cQ=s(uFe,"STRONG",{});var i7r=n(cQ);bIe=r(i7r,"imagegpt"),i7r.forEach(t),vIe=r(uFe," \u2014 "),H7=s(uFe,"A",{href:!0});var d7r=n(H7);TIe=r(d7r,"ImageGPTConfig"),d7r.forEach(t),FIe=r(uFe," (ImageGPT model)"),uFe.forEach(t),CIe=i(T),ff=s(T,"LI",{});var pFe=n(ff);mQ=s(pFe,"STRONG",{});var c7r=n(mQ);MIe=r(c7r,"layoutlm"),c7r.forEach(t),EIe=r(pFe," \u2014 "),U7=s(pFe,"A",{href:!0});var m7r=n(U7);yIe=r(m7r,"LayoutLMConfig"),m7r.forEach(t),wIe=r(pFe," (LayoutLM model)"),pFe.forEach(t),AIe=i(T),gf=s(T,"LI",{});var _Fe=n(gf);fQ=s(_Fe,"STRONG",{});var f7r=n(fQ);LIe=r(f7r,"layoutlmv2"),f7r.forEach(t),BIe=r(_Fe," \u2014 "),J7=s(_Fe,"A",{href:!0});var g7r=n(J7);xIe=r(g7r,"LayoutLMv2Config"),g7r.forEach(t),kIe=r(_Fe," (LayoutLMv2 model)"),_Fe.forEach(t),RIe=i(T),hf=s(T,"LI",{});var bFe=n(hf);gQ=s(bFe,"STRONG",{});var h7r=n(gQ);SIe=r(h7r,"led"),h7r.forEach(t),PIe=r(bFe," \u2014 "),Y7=s(bFe,"A",{href:!0});var u7r=n(Y7);$Ie=r(u7r,"LEDConfig"),u7r.forEach(t),IIe=r(bFe," (LED model)"),bFe.forEach(t),DIe=i(T),uf=s(T,"LI",{});var vFe=n(uf);hQ=s(vFe,"STRONG",{});var p7r=n(hQ);jIe=r(p7r,"longformer"),p7r.forEach(t),NIe=r(vFe," \u2014 "),K7=s(vFe,"A",{href:!0});var _7r=n(K7);qIe=r(_7r,"LongformerConfig"),_7r.forEach(t),GIe=r(vFe," (Longformer model)"),vFe.forEach(t),OIe=i(T),pf=s(T,"LI",{});var TFe=n(pf);uQ=s(TFe,"STRONG",{});var b7r=n(uQ);XIe=r(b7r,"luke"),b7r.forEach(t),VIe=r(TFe," \u2014 "),Z7=s(TFe,"A",{href:!0});var v7r=n(Z7);zIe=r(v7r,"LukeConfig"),v7r.forEach(t),WIe=r(TFe," (LUKE model)"),TFe.forEach(t),QIe=i(T),_f=s(T,"LI",{});var FFe=n(_f);pQ=s(FFe,"STRONG",{});var T7r=n(pQ);HIe=r(T7r,"lxmert"),T7r.forEach(t),UIe=r(FFe," \u2014 "),e9=s(FFe,"A",{href:!0});var F7r=n(e9);JIe=r(F7r,"LxmertConfig"),F7r.forEach(t),YIe=r(FFe," (LXMERT model)"),FFe.forEach(t),KIe=i(T),bf=s(T,"LI",{});var CFe=n(bf);_Q=s(CFe,"STRONG",{});var C7r=n(_Q);ZIe=r(C7r,"m2m_100"),C7r.forEach(t),eDe=r(CFe," \u2014 "),o9=s(CFe,"A",{href:!0});var M7r=n(o9);oDe=r(M7r,"M2M100Config"),M7r.forEach(t),rDe=r(CFe," (M2M100 model)"),CFe.forEach(t),tDe=i(T),vf=s(T,"LI",{});var MFe=n(vf);bQ=s(MFe,"STRONG",{});var E7r=n(bQ);aDe=r(E7r,"marian"),E7r.forEach(t),sDe=r(MFe," \u2014 "),r9=s(MFe,"A",{href:!0});var y7r=n(r9);nDe=r(y7r,"MarianConfig"),y7r.forEach(t),lDe=r(MFe," (Marian model)"),MFe.forEach(t),iDe=i(T),Tf=s(T,"LI",{});var EFe=n(Tf);vQ=s(EFe,"STRONG",{});var w7r=n(vQ);dDe=r(w7r,"maskformer"),w7r.forEach(t),cDe=r(EFe," \u2014 "),t9=s(EFe,"A",{href:!0});var A7r=n(t9);mDe=r(A7r,"MaskFormerConfig"),A7r.forEach(t),fDe=r(EFe," (MaskFormer model)"),EFe.forEach(t),gDe=i(T),Ff=s(T,"LI",{});var yFe=n(Ff);TQ=s(yFe,"STRONG",{});var L7r=n(TQ);hDe=r(L7r,"mbart"),L7r.forEach(t),uDe=r(yFe," \u2014 "),a9=s(yFe,"A",{href:!0});var B7r=n(a9);pDe=r(B7r,"MBartConfig"),B7r.forEach(t),_De=r(yFe," (mBART model)"),yFe.forEach(t),bDe=i(T),Cf=s(T,"LI",{});var wFe=n(Cf);FQ=s(wFe,"STRONG",{});var x7r=n(FQ);vDe=r(x7r,"megatron-bert"),x7r.forEach(t),TDe=r(wFe," \u2014 "),s9=s(wFe,"A",{href:!0});var k7r=n(s9);FDe=r(k7r,"MegatronBertConfig"),k7r.forEach(t),CDe=r(wFe," (MegatronBert model)"),wFe.forEach(t),MDe=i(T),Mf=s(T,"LI",{});var AFe=n(Mf);CQ=s(AFe,"STRONG",{});var R7r=n(CQ);EDe=r(R7r,"mobilebert"),R7r.forEach(t),yDe=r(AFe," \u2014 "),n9=s(AFe,"A",{href:!0});var S7r=n(n9);wDe=r(S7r,"MobileBertConfig"),S7r.forEach(t),ADe=r(AFe," (MobileBERT model)"),AFe.forEach(t),LDe=i(T),Ef=s(T,"LI",{});var LFe=n(Ef);MQ=s(LFe,"STRONG",{});var P7r=n(MQ);BDe=r(P7r,"mpnet"),P7r.forEach(t),xDe=r(LFe," \u2014 "),l9=s(LFe,"A",{href:!0});var $7r=n(l9);kDe=r($7r,"MPNetConfig"),$7r.forEach(t),RDe=r(LFe," (MPNet model)"),LFe.forEach(t),SDe=i(T),yf=s(T,"LI",{});var BFe=n(yf);EQ=s(BFe,"STRONG",{});var I7r=n(EQ);PDe=r(I7r,"mt5"),I7r.forEach(t),$De=r(BFe," \u2014 "),i9=s(BFe,"A",{href:!0});var D7r=n(i9);IDe=r(D7r,"MT5Config"),D7r.forEach(t),DDe=r(BFe," (mT5 model)"),BFe.forEach(t),jDe=i(T),wf=s(T,"LI",{});var xFe=n(wf);yQ=s(xFe,"STRONG",{});var j7r=n(yQ);NDe=r(j7r,"nystromformer"),j7r.forEach(t),qDe=r(xFe," \u2014 "),d9=s(xFe,"A",{href:!0});var N7r=n(d9);GDe=r(N7r,"NystromformerConfig"),N7r.forEach(t),ODe=r(xFe," (Nystromformer model)"),xFe.forEach(t),XDe=i(T),Af=s(T,"LI",{});var kFe=n(Af);wQ=s(kFe,"STRONG",{});var q7r=n(wQ);VDe=r(q7r,"openai-gpt"),q7r.forEach(t),zDe=r(kFe," \u2014 "),c9=s(kFe,"A",{href:!0});var G7r=n(c9);WDe=r(G7r,"OpenAIGPTConfig"),G7r.forEach(t),QDe=r(kFe," (OpenAI GPT model)"),kFe.forEach(t),HDe=i(T),Lf=s(T,"LI",{});var RFe=n(Lf);AQ=s(RFe,"STRONG",{});var O7r=n(AQ);UDe=r(O7r,"pegasus"),O7r.forEach(t),JDe=r(RFe," \u2014 "),m9=s(RFe,"A",{href:!0});var X7r=n(m9);YDe=r(X7r,"PegasusConfig"),X7r.forEach(t),KDe=r(RFe," (Pegasus model)"),RFe.forEach(t),ZDe=i(T),Bf=s(T,"LI",{});var SFe=n(Bf);LQ=s(SFe,"STRONG",{});var V7r=n(LQ);eje=r(V7r,"perceiver"),V7r.forEach(t),oje=r(SFe," \u2014 "),f9=s(SFe,"A",{href:!0});var z7r=n(f9);rje=r(z7r,"PerceiverConfig"),z7r.forEach(t),tje=r(SFe," (Perceiver model)"),SFe.forEach(t),aje=i(T),xf=s(T,"LI",{});var PFe=n(xf);BQ=s(PFe,"STRONG",{});var W7r=n(BQ);sje=r(W7r,"plbart"),W7r.forEach(t),nje=r(PFe," \u2014 "),g9=s(PFe,"A",{href:!0});var Q7r=n(g9);lje=r(Q7r,"PLBartConfig"),Q7r.forEach(t),ije=r(PFe," (PLBart model)"),PFe.forEach(t),dje=i(T),kf=s(T,"LI",{});var $Fe=n(kf);xQ=s($Fe,"STRONG",{});var H7r=n(xQ);cje=r(H7r,"poolformer"),H7r.forEach(t),mje=r($Fe," \u2014 "),h9=s($Fe,"A",{href:!0});var U7r=n(h9);fje=r(U7r,"PoolFormerConfig"),U7r.forEach(t),gje=r($Fe," (PoolFormer model)"),$Fe.forEach(t),hje=i(T),Rf=s(T,"LI",{});var IFe=n(Rf);kQ=s(IFe,"STRONG",{});var J7r=n(kQ);uje=r(J7r,"prophetnet"),J7r.forEach(t),pje=r(IFe," \u2014 "),u9=s(IFe,"A",{href:!0});var Y7r=n(u9);_je=r(Y7r,"ProphetNetConfig"),Y7r.forEach(t),bje=r(IFe," (ProphetNet model)"),IFe.forEach(t),vje=i(T),Sf=s(T,"LI",{});var DFe=n(Sf);RQ=s(DFe,"STRONG",{});var K7r=n(RQ);Tje=r(K7r,"qdqbert"),K7r.forEach(t),Fje=r(DFe," \u2014 "),p9=s(DFe,"A",{href:!0});var Z7r=n(p9);Cje=r(Z7r,"QDQBertConfig"),Z7r.forEach(t),Mje=r(DFe," (QDQBert model)"),DFe.forEach(t),Eje=i(T),Pf=s(T,"LI",{});var jFe=n(Pf);SQ=s(jFe,"STRONG",{});var e9r=n(SQ);yje=r(e9r,"rag"),e9r.forEach(t),wje=r(jFe," \u2014 "),_9=s(jFe,"A",{href:!0});var o9r=n(_9);Aje=r(o9r,"RagConfig"),o9r.forEach(t),Lje=r(jFe," (RAG model)"),jFe.forEach(t),Bje=i(T),$f=s(T,"LI",{});var NFe=n($f);PQ=s(NFe,"STRONG",{});var r9r=n(PQ);xje=r(r9r,"realm"),r9r.forEach(t),kje=r(NFe," \u2014 "),b9=s(NFe,"A",{href:!0});var t9r=n(b9);Rje=r(t9r,"RealmConfig"),t9r.forEach(t),Sje=r(NFe," (Realm model)"),NFe.forEach(t),Pje=i(T),If=s(T,"LI",{});var qFe=n(If);$Q=s(qFe,"STRONG",{});var a9r=n($Q);$je=r(a9r,"reformer"),a9r.forEach(t),Ije=r(qFe," \u2014 "),v9=s(qFe,"A",{href:!0});var s9r=n(v9);Dje=r(s9r,"ReformerConfig"),s9r.forEach(t),jje=r(qFe," (Reformer model)"),qFe.forEach(t),Nje=i(T),Df=s(T,"LI",{});var GFe=n(Df);IQ=s(GFe,"STRONG",{});var n9r=n(IQ);qje=r(n9r,"rembert"),n9r.forEach(t),Gje=r(GFe," \u2014 "),T9=s(GFe,"A",{href:!0});var l9r=n(T9);Oje=r(l9r,"RemBertConfig"),l9r.forEach(t),Xje=r(GFe," (RemBERT model)"),GFe.forEach(t),Vje=i(T),jf=s(T,"LI",{});var OFe=n(jf);DQ=s(OFe,"STRONG",{});var i9r=n(DQ);zje=r(i9r,"retribert"),i9r.forEach(t),Wje=r(OFe," \u2014 "),F9=s(OFe,"A",{href:!0});var d9r=n(F9);Qje=r(d9r,"RetriBertConfig"),d9r.forEach(t),Hje=r(OFe," (RetriBERT model)"),OFe.forEach(t),Uje=i(T),Nf=s(T,"LI",{});var XFe=n(Nf);jQ=s(XFe,"STRONG",{});var c9r=n(jQ);Jje=r(c9r,"roberta"),c9r.forEach(t),Yje=r(XFe," \u2014 "),C9=s(XFe,"A",{href:!0});var m9r=n(C9);Kje=r(m9r,"RobertaConfig"),m9r.forEach(t),Zje=r(XFe," (RoBERTa model)"),XFe.forEach(t),eNe=i(T),qf=s(T,"LI",{});var VFe=n(qf);NQ=s(VFe,"STRONG",{});var f9r=n(NQ);oNe=r(f9r,"roformer"),f9r.forEach(t),rNe=r(VFe," \u2014 "),M9=s(VFe,"A",{href:!0});var g9r=n(M9);tNe=r(g9r,"RoFormerConfig"),g9r.forEach(t),aNe=r(VFe," (RoFormer model)"),VFe.forEach(t),sNe=i(T),Gf=s(T,"LI",{});var zFe=n(Gf);qQ=s(zFe,"STRONG",{});var h9r=n(qQ);nNe=r(h9r,"segformer"),h9r.forEach(t),lNe=r(zFe," \u2014 "),E9=s(zFe,"A",{href:!0});var u9r=n(E9);iNe=r(u9r,"SegformerConfig"),u9r.forEach(t),dNe=r(zFe," (SegFormer model)"),zFe.forEach(t),cNe=i(T),Of=s(T,"LI",{});var WFe=n(Of);GQ=s(WFe,"STRONG",{});var p9r=n(GQ);mNe=r(p9r,"sew"),p9r.forEach(t),fNe=r(WFe," \u2014 "),y9=s(WFe,"A",{href:!0});var _9r=n(y9);gNe=r(_9r,"SEWConfig"),_9r.forEach(t),hNe=r(WFe," (SEW model)"),WFe.forEach(t),uNe=i(T),Xf=s(T,"LI",{});var QFe=n(Xf);OQ=s(QFe,"STRONG",{});var b9r=n(OQ);pNe=r(b9r,"sew-d"),b9r.forEach(t),_Ne=r(QFe," \u2014 "),w9=s(QFe,"A",{href:!0});var v9r=n(w9);bNe=r(v9r,"SEWDConfig"),v9r.forEach(t),vNe=r(QFe," (SEW-D model)"),QFe.forEach(t),TNe=i(T),Vf=s(T,"LI",{});var HFe=n(Vf);XQ=s(HFe,"STRONG",{});var T9r=n(XQ);FNe=r(T9r,"speech-encoder-decoder"),T9r.forEach(t),CNe=r(HFe," \u2014 "),A9=s(HFe,"A",{href:!0});var F9r=n(A9);MNe=r(F9r,"SpeechEncoderDecoderConfig"),F9r.forEach(t),ENe=r(HFe," (Speech Encoder decoder model)"),HFe.forEach(t),yNe=i(T),zf=s(T,"LI",{});var UFe=n(zf);VQ=s(UFe,"STRONG",{});var C9r=n(VQ);wNe=r(C9r,"speech_to_text"),C9r.forEach(t),ANe=r(UFe," \u2014 "),L9=s(UFe,"A",{href:!0});var M9r=n(L9);LNe=r(M9r,"Speech2TextConfig"),M9r.forEach(t),BNe=r(UFe," (Speech2Text model)"),UFe.forEach(t),xNe=i(T),Wf=s(T,"LI",{});var JFe=n(Wf);zQ=s(JFe,"STRONG",{});var E9r=n(zQ);kNe=r(E9r,"speech_to_text_2"),E9r.forEach(t),RNe=r(JFe," \u2014 "),B9=s(JFe,"A",{href:!0});var y9r=n(B9);SNe=r(y9r,"Speech2Text2Config"),y9r.forEach(t),PNe=r(JFe," (Speech2Text2 model)"),JFe.forEach(t),$Ne=i(T),Qf=s(T,"LI",{});var YFe=n(Qf);WQ=s(YFe,"STRONG",{});var w9r=n(WQ);INe=r(w9r,"splinter"),w9r.forEach(t),DNe=r(YFe," \u2014 "),x9=s(YFe,"A",{href:!0});var A9r=n(x9);jNe=r(A9r,"SplinterConfig"),A9r.forEach(t),NNe=r(YFe," (Splinter model)"),YFe.forEach(t),qNe=i(T),Hf=s(T,"LI",{});var KFe=n(Hf);QQ=s(KFe,"STRONG",{});var L9r=n(QQ);GNe=r(L9r,"squeezebert"),L9r.forEach(t),ONe=r(KFe," \u2014 "),k9=s(KFe,"A",{href:!0});var B9r=n(k9);XNe=r(B9r,"SqueezeBertConfig"),B9r.forEach(t),VNe=r(KFe," (SqueezeBERT model)"),KFe.forEach(t),zNe=i(T),Uf=s(T,"LI",{});var ZFe=n(Uf);HQ=s(ZFe,"STRONG",{});var x9r=n(HQ);WNe=r(x9r,"swin"),x9r.forEach(t),QNe=r(ZFe," \u2014 "),R9=s(ZFe,"A",{href:!0});var k9r=n(R9);HNe=r(k9r,"SwinConfig"),k9r.forEach(t),UNe=r(ZFe," (Swin model)"),ZFe.forEach(t),JNe=i(T),Jf=s(T,"LI",{});var eCe=n(Jf);UQ=s(eCe,"STRONG",{});var R9r=n(UQ);YNe=r(R9r,"t5"),R9r.forEach(t),KNe=r(eCe," \u2014 "),S9=s(eCe,"A",{href:!0});var S9r=n(S9);ZNe=r(S9r,"T5Config"),S9r.forEach(t),eqe=r(eCe," (T5 model)"),eCe.forEach(t),oqe=i(T),Yf=s(T,"LI",{});var oCe=n(Yf);JQ=s(oCe,"STRONG",{});var P9r=n(JQ);rqe=r(P9r,"tapas"),P9r.forEach(t),tqe=r(oCe," \u2014 "),P9=s(oCe,"A",{href:!0});var $9r=n(P9);aqe=r($9r,"TapasConfig"),$9r.forEach(t),sqe=r(oCe," (TAPAS model)"),oCe.forEach(t),nqe=i(T),Kf=s(T,"LI",{});var rCe=n(Kf);YQ=s(rCe,"STRONG",{});var I9r=n(YQ);lqe=r(I9r,"transfo-xl"),I9r.forEach(t),iqe=r(rCe," \u2014 "),$9=s(rCe,"A",{href:!0});var D9r=n($9);dqe=r(D9r,"TransfoXLConfig"),D9r.forEach(t),cqe=r(rCe," (Transformer-XL model)"),rCe.forEach(t),mqe=i(T),Zf=s(T,"LI",{});var tCe=n(Zf);KQ=s(tCe,"STRONG",{});var j9r=n(KQ);fqe=r(j9r,"trocr"),j9r.forEach(t),gqe=r(tCe," \u2014 "),I9=s(tCe,"A",{href:!0});var N9r=n(I9);hqe=r(N9r,"TrOCRConfig"),N9r.forEach(t),uqe=r(tCe," (TrOCR model)"),tCe.forEach(t),pqe=i(T),eg=s(T,"LI",{});var aCe=n(eg);ZQ=s(aCe,"STRONG",{});var q9r=n(ZQ);_qe=r(q9r,"unispeech"),q9r.forEach(t),bqe=r(aCe," \u2014 "),D9=s(aCe,"A",{href:!0});var G9r=n(D9);vqe=r(G9r,"UniSpeechConfig"),G9r.forEach(t),Tqe=r(aCe," (UniSpeech model)"),aCe.forEach(t),Fqe=i(T),og=s(T,"LI",{});var sCe=n(og);eH=s(sCe,"STRONG",{});var O9r=n(eH);Cqe=r(O9r,"unispeech-sat"),O9r.forEach(t),Mqe=r(sCe," \u2014 "),j9=s(sCe,"A",{href:!0});var X9r=n(j9);Eqe=r(X9r,"UniSpeechSatConfig"),X9r.forEach(t),yqe=r(sCe," (UniSpeechSat model)"),sCe.forEach(t),wqe=i(T),rg=s(T,"LI",{});var nCe=n(rg);oH=s(nCe,"STRONG",{});var V9r=n(oH);Aqe=r(V9r,"vilt"),V9r.forEach(t),Lqe=r(nCe," \u2014 "),N9=s(nCe,"A",{href:!0});var z9r=n(N9);Bqe=r(z9r,"ViltConfig"),z9r.forEach(t),xqe=r(nCe," (ViLT model)"),nCe.forEach(t),kqe=i(T),tg=s(T,"LI",{});var lCe=n(tg);rH=s(lCe,"STRONG",{});var W9r=n(rH);Rqe=r(W9r,"vision-encoder-decoder"),W9r.forEach(t),Sqe=r(lCe," \u2014 "),q9=s(lCe,"A",{href:!0});var Q9r=n(q9);Pqe=r(Q9r,"VisionEncoderDecoderConfig"),Q9r.forEach(t),$qe=r(lCe," (Vision Encoder decoder model)"),lCe.forEach(t),Iqe=i(T),ag=s(T,"LI",{});var iCe=n(ag);tH=s(iCe,"STRONG",{});var H9r=n(tH);Dqe=r(H9r,"vision-text-dual-encoder"),H9r.forEach(t),jqe=r(iCe," \u2014 "),G9=s(iCe,"A",{href:!0});var U9r=n(G9);Nqe=r(U9r,"VisionTextDualEncoderConfig"),U9r.forEach(t),qqe=r(iCe," (VisionTextDualEncoder model)"),iCe.forEach(t),Gqe=i(T),sg=s(T,"LI",{});var dCe=n(sg);aH=s(dCe,"STRONG",{});var J9r=n(aH);Oqe=r(J9r,"visual_bert"),J9r.forEach(t),Xqe=r(dCe," \u2014 "),O9=s(dCe,"A",{href:!0});var Y9r=n(O9);Vqe=r(Y9r,"VisualBertConfig"),Y9r.forEach(t),zqe=r(dCe," (VisualBert model)"),dCe.forEach(t),Wqe=i(T),ng=s(T,"LI",{});var cCe=n(ng);sH=s(cCe,"STRONG",{});var K9r=n(sH);Qqe=r(K9r,"vit"),K9r.forEach(t),Hqe=r(cCe," \u2014 "),X9=s(cCe,"A",{href:!0});var Z9r=n(X9);Uqe=r(Z9r,"ViTConfig"),Z9r.forEach(t),Jqe=r(cCe," (ViT model)"),cCe.forEach(t),Yqe=i(T),lg=s(T,"LI",{});var mCe=n(lg);nH=s(mCe,"STRONG",{});var eBr=n(nH);Kqe=r(eBr,"vit_mae"),eBr.forEach(t),Zqe=r(mCe," \u2014 "),V9=s(mCe,"A",{href:!0});var oBr=n(V9);eGe=r(oBr,"ViTMAEConfig"),oBr.forEach(t),oGe=r(mCe," (ViTMAE model)"),mCe.forEach(t),rGe=i(T),ig=s(T,"LI",{});var fCe=n(ig);lH=s(fCe,"STRONG",{});var rBr=n(lH);tGe=r(rBr,"wav2vec2"),rBr.forEach(t),aGe=r(fCe," \u2014 "),z9=s(fCe,"A",{href:!0});var tBr=n(z9);sGe=r(tBr,"Wav2Vec2Config"),tBr.forEach(t),nGe=r(fCe," (Wav2Vec2 model)"),fCe.forEach(t),lGe=i(T),dg=s(T,"LI",{});var gCe=n(dg);iH=s(gCe,"STRONG",{});var aBr=n(iH);iGe=r(aBr,"wavlm"),aBr.forEach(t),dGe=r(gCe," \u2014 "),W9=s(gCe,"A",{href:!0});var sBr=n(W9);cGe=r(sBr,"WavLMConfig"),sBr.forEach(t),mGe=r(gCe," (WavLM model)"),gCe.forEach(t),fGe=i(T),cg=s(T,"LI",{});var hCe=n(cg);dH=s(hCe,"STRONG",{});var nBr=n(dH);gGe=r(nBr,"xglm"),nBr.forEach(t),hGe=r(hCe," \u2014 "),Q9=s(hCe,"A",{href:!0});var lBr=n(Q9);uGe=r(lBr,"XGLMConfig"),lBr.forEach(t),pGe=r(hCe," (XGLM model)"),hCe.forEach(t),_Ge=i(T),mg=s(T,"LI",{});var uCe=n(mg);cH=s(uCe,"STRONG",{});var iBr=n(cH);bGe=r(iBr,"xlm"),iBr.forEach(t),vGe=r(uCe," \u2014 "),H9=s(uCe,"A",{href:!0});var dBr=n(H9);TGe=r(dBr,"XLMConfig"),dBr.forEach(t),FGe=r(uCe," (XLM model)"),uCe.forEach(t),CGe=i(T),fg=s(T,"LI",{});var pCe=n(fg);mH=s(pCe,"STRONG",{});var cBr=n(mH);MGe=r(cBr,"xlm-prophetnet"),cBr.forEach(t),EGe=r(pCe," \u2014 "),U9=s(pCe,"A",{href:!0});var mBr=n(U9);yGe=r(mBr,"XLMProphetNetConfig"),mBr.forEach(t),wGe=r(pCe," (XLMProphetNet model)"),pCe.forEach(t),AGe=i(T),gg=s(T,"LI",{});var _Ce=n(gg);fH=s(_Ce,"STRONG",{});var fBr=n(fH);LGe=r(fBr,"xlm-roberta"),fBr.forEach(t),BGe=r(_Ce," \u2014 "),J9=s(_Ce,"A",{href:!0});var gBr=n(J9);xGe=r(gBr,"XLMRobertaConfig"),gBr.forEach(t),kGe=r(_Ce," (XLM-RoBERTa model)"),_Ce.forEach(t),RGe=i(T),hg=s(T,"LI",{});var bCe=n(hg);gH=s(bCe,"STRONG",{});var hBr=n(gH);SGe=r(hBr,"xlm-roberta-xl"),hBr.forEach(t),PGe=r(bCe," \u2014 "),Y9=s(bCe,"A",{href:!0});var uBr=n(Y9);$Ge=r(uBr,"XLMRobertaXLConfig"),uBr.forEach(t),IGe=r(bCe," (XLM-RoBERTa-XL model)"),bCe.forEach(t),DGe=i(T),ug=s(T,"LI",{});var vCe=n(ug);hH=s(vCe,"STRONG",{});var pBr=n(hH);jGe=r(pBr,"xlnet"),pBr.forEach(t),NGe=r(vCe," \u2014 "),K9=s(vCe,"A",{href:!0});var _Br=n(K9);qGe=r(_Br,"XLNetConfig"),_Br.forEach(t),GGe=r(vCe," (XLNet model)"),vCe.forEach(t),OGe=i(T),pg=s(T,"LI",{});var TCe=n(pg);uH=s(TCe,"STRONG",{});var bBr=n(uH);XGe=r(bBr,"yoso"),bBr.forEach(t),VGe=r(TCe," \u2014 "),Z9=s(TCe,"A",{href:!0});var vBr=n(Z9);zGe=r(vBr,"YosoConfig"),vBr.forEach(t),WGe=r(TCe," (YOSO model)"),TCe.forEach(t),T.forEach(t),QGe=i(ia),pH=s(ia,"P",{});var TBr=n(pH);HGe=r(TBr,"Examples:"),TBr.forEach(t),UGe=i(ia),f(S5.$$.fragment,ia),ia.forEach(t),JGe=i(In),_g=s(In,"DIV",{class:!0});var Rxe=n(_g);f(P5.$$.fragment,Rxe),YGe=i(Rxe),_H=s(Rxe,"P",{});var FBr=n(_H);KGe=r(FBr,"Register a new configuration for this class."),FBr.forEach(t),Rxe.forEach(t),In.forEach(t),R9e=i(c),ji=s(c,"H2",{class:!0});var Sxe=n(ji);bg=s(Sxe,"A",{id:!0,class:!0,href:!0});var CBr=n(bg);bH=s(CBr,"SPAN",{});var MBr=n(bH);f($5.$$.fragment,MBr),MBr.forEach(t),CBr.forEach(t),ZGe=i(Sxe),vH=s(Sxe,"SPAN",{});var EBr=n(vH);eOe=r(EBr,"AutoTokenizer"),EBr.forEach(t),Sxe.forEach(t),S9e=i(c),Vo=s(c,"DIV",{class:!0});var Dn=n(Vo);f(I5.$$.fragment,Dn),oOe=i(Dn),D5=s(Dn,"P",{});var Pxe=n(D5);rOe=r(Pxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=s(Pxe,"A",{href:!0});var yBr=n(eB);tOe=r(yBr,"AutoTokenizer.from_pretrained()"),yBr.forEach(t),aOe=r(Pxe," class method."),Pxe.forEach(t),sOe=i(Dn),j5=s(Dn,"P",{});var $xe=n(j5);nOe=r($xe,"This class cannot be instantiated directly using "),TH=s($xe,"CODE",{});var wBr=n(TH);lOe=r(wBr,"__init__()"),wBr.forEach(t),iOe=r($xe," (throws an error)."),$xe.forEach(t),dOe=i(Dn),fo=s(Dn,"DIV",{class:!0});var da=n(fo);f(N5.$$.fragment,da),cOe=i(da),FH=s(da,"P",{});var ABr=n(FH);mOe=r(ABr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ABr.forEach(t),fOe=i(da),Da=s(da,"P",{});var E3=n(Da);gOe=r(E3,"The tokenizer class to instantiate is selected based on the "),CH=s(E3,"CODE",{});var LBr=n(CH);hOe=r(LBr,"model_type"),LBr.forEach(t),uOe=r(E3,` property of the config object (either
passed as an argument or loaded from `),MH=s(E3,"CODE",{});var BBr=n(MH);pOe=r(BBr,"pretrained_model_name_or_path"),BBr.forEach(t),_Oe=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EH=s(E3,"CODE",{});var xBr=n(EH);bOe=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),vOe=r(E3,":"),E3.forEach(t),TOe=i(da),M=s(da,"UL",{});var y=n(M);qs=s(y,"LI",{});var f8=n(qs);yH=s(f8,"STRONG",{});var kBr=n(yH);FOe=r(kBr,"albert"),kBr.forEach(t),COe=r(f8," \u2014 "),oB=s(f8,"A",{href:!0});var RBr=n(oB);MOe=r(RBr,"AlbertTokenizer"),RBr.forEach(t),EOe=r(f8," or "),rB=s(f8,"A",{href:!0});var SBr=n(rB);yOe=r(SBr,"AlbertTokenizerFast"),SBr.forEach(t),wOe=r(f8," (ALBERT model)"),f8.forEach(t),AOe=i(y),Gs=s(y,"LI",{});var g8=n(Gs);wH=s(g8,"STRONG",{});var PBr=n(wH);LOe=r(PBr,"bart"),PBr.forEach(t),BOe=r(g8," \u2014 "),tB=s(g8,"A",{href:!0});var $Br=n(tB);xOe=r($Br,"BartTokenizer"),$Br.forEach(t),kOe=r(g8," or "),aB=s(g8,"A",{href:!0});var IBr=n(aB);ROe=r(IBr,"BartTokenizerFast"),IBr.forEach(t),SOe=r(g8," (BART model)"),g8.forEach(t),POe=i(y),Os=s(y,"LI",{});var h8=n(Os);AH=s(h8,"STRONG",{});var DBr=n(AH);$Oe=r(DBr,"barthez"),DBr.forEach(t),IOe=r(h8," \u2014 "),sB=s(h8,"A",{href:!0});var jBr=n(sB);DOe=r(jBr,"BarthezTokenizer"),jBr.forEach(t),jOe=r(h8," or "),nB=s(h8,"A",{href:!0});var NBr=n(nB);NOe=r(NBr,"BarthezTokenizerFast"),NBr.forEach(t),qOe=r(h8," (BARThez model)"),h8.forEach(t),GOe=i(y),vg=s(y,"LI",{});var FCe=n(vg);LH=s(FCe,"STRONG",{});var qBr=n(LH);OOe=r(qBr,"bartpho"),qBr.forEach(t),XOe=r(FCe," \u2014 "),lB=s(FCe,"A",{href:!0});var GBr=n(lB);VOe=r(GBr,"BartphoTokenizer"),GBr.forEach(t),zOe=r(FCe," (BARTpho model)"),FCe.forEach(t),WOe=i(y),Xs=s(y,"LI",{});var u8=n(Xs);BH=s(u8,"STRONG",{});var OBr=n(BH);QOe=r(OBr,"bert"),OBr.forEach(t),HOe=r(u8," \u2014 "),iB=s(u8,"A",{href:!0});var XBr=n(iB);UOe=r(XBr,"BertTokenizer"),XBr.forEach(t),JOe=r(u8," or "),dB=s(u8,"A",{href:!0});var VBr=n(dB);YOe=r(VBr,"BertTokenizerFast"),VBr.forEach(t),KOe=r(u8," (BERT model)"),u8.forEach(t),ZOe=i(y),Tg=s(y,"LI",{});var CCe=n(Tg);xH=s(CCe,"STRONG",{});var zBr=n(xH);eXe=r(zBr,"bert-generation"),zBr.forEach(t),oXe=r(CCe," \u2014 "),cB=s(CCe,"A",{href:!0});var WBr=n(cB);rXe=r(WBr,"BertGenerationTokenizer"),WBr.forEach(t),tXe=r(CCe," (Bert Generation model)"),CCe.forEach(t),aXe=i(y),Fg=s(y,"LI",{});var MCe=n(Fg);kH=s(MCe,"STRONG",{});var QBr=n(kH);sXe=r(QBr,"bert-japanese"),QBr.forEach(t),nXe=r(MCe," \u2014 "),mB=s(MCe,"A",{href:!0});var HBr=n(mB);lXe=r(HBr,"BertJapaneseTokenizer"),HBr.forEach(t),iXe=r(MCe," (BertJapanese model)"),MCe.forEach(t),dXe=i(y),Cg=s(y,"LI",{});var ECe=n(Cg);RH=s(ECe,"STRONG",{});var UBr=n(RH);cXe=r(UBr,"bertweet"),UBr.forEach(t),mXe=r(ECe," \u2014 "),fB=s(ECe,"A",{href:!0});var JBr=n(fB);fXe=r(JBr,"BertweetTokenizer"),JBr.forEach(t),gXe=r(ECe," (Bertweet model)"),ECe.forEach(t),hXe=i(y),Vs=s(y,"LI",{});var p8=n(Vs);SH=s(p8,"STRONG",{});var YBr=n(SH);uXe=r(YBr,"big_bird"),YBr.forEach(t),pXe=r(p8," \u2014 "),gB=s(p8,"A",{href:!0});var KBr=n(gB);_Xe=r(KBr,"BigBirdTokenizer"),KBr.forEach(t),bXe=r(p8," or "),hB=s(p8,"A",{href:!0});var ZBr=n(hB);vXe=r(ZBr,"BigBirdTokenizerFast"),ZBr.forEach(t),TXe=r(p8," (BigBird model)"),p8.forEach(t),FXe=i(y),zs=s(y,"LI",{});var _8=n(zs);PH=s(_8,"STRONG",{});var exr=n(PH);CXe=r(exr,"bigbird_pegasus"),exr.forEach(t),MXe=r(_8," \u2014 "),uB=s(_8,"A",{href:!0});var oxr=n(uB);EXe=r(oxr,"PegasusTokenizer"),oxr.forEach(t),yXe=r(_8," or "),pB=s(_8,"A",{href:!0});var rxr=n(pB);wXe=r(rxr,"PegasusTokenizerFast"),rxr.forEach(t),AXe=r(_8," (BigBirdPegasus model)"),_8.forEach(t),LXe=i(y),Ws=s(y,"LI",{});var b8=n(Ws);$H=s(b8,"STRONG",{});var txr=n($H);BXe=r(txr,"blenderbot"),txr.forEach(t),xXe=r(b8," \u2014 "),_B=s(b8,"A",{href:!0});var axr=n(_B);kXe=r(axr,"BlenderbotTokenizer"),axr.forEach(t),RXe=r(b8," or "),bB=s(b8,"A",{href:!0});var sxr=n(bB);SXe=r(sxr,"BlenderbotTokenizerFast"),sxr.forEach(t),PXe=r(b8," (Blenderbot model)"),b8.forEach(t),$Xe=i(y),Mg=s(y,"LI",{});var yCe=n(Mg);IH=s(yCe,"STRONG",{});var nxr=n(IH);IXe=r(nxr,"blenderbot-small"),nxr.forEach(t),DXe=r(yCe," \u2014 "),vB=s(yCe,"A",{href:!0});var lxr=n(vB);jXe=r(lxr,"BlenderbotSmallTokenizer"),lxr.forEach(t),NXe=r(yCe," (BlenderbotSmall model)"),yCe.forEach(t),qXe=i(y),Eg=s(y,"LI",{});var wCe=n(Eg);DH=s(wCe,"STRONG",{});var ixr=n(DH);GXe=r(ixr,"byt5"),ixr.forEach(t),OXe=r(wCe," \u2014 "),TB=s(wCe,"A",{href:!0});var dxr=n(TB);XXe=r(dxr,"ByT5Tokenizer"),dxr.forEach(t),VXe=r(wCe," (ByT5 model)"),wCe.forEach(t),zXe=i(y),Qs=s(y,"LI",{});var v8=n(Qs);jH=s(v8,"STRONG",{});var cxr=n(jH);WXe=r(cxr,"camembert"),cxr.forEach(t),QXe=r(v8," \u2014 "),FB=s(v8,"A",{href:!0});var mxr=n(FB);HXe=r(mxr,"CamembertTokenizer"),mxr.forEach(t),UXe=r(v8," or "),CB=s(v8,"A",{href:!0});var fxr=n(CB);JXe=r(fxr,"CamembertTokenizerFast"),fxr.forEach(t),YXe=r(v8," (CamemBERT model)"),v8.forEach(t),KXe=i(y),yg=s(y,"LI",{});var ACe=n(yg);NH=s(ACe,"STRONG",{});var gxr=n(NH);ZXe=r(gxr,"canine"),gxr.forEach(t),eVe=r(ACe," \u2014 "),MB=s(ACe,"A",{href:!0});var hxr=n(MB);oVe=r(hxr,"CanineTokenizer"),hxr.forEach(t),rVe=r(ACe," (Canine model)"),ACe.forEach(t),tVe=i(y),Hs=s(y,"LI",{});var T8=n(Hs);qH=s(T8,"STRONG",{});var uxr=n(qH);aVe=r(uxr,"clip"),uxr.forEach(t),sVe=r(T8," \u2014 "),EB=s(T8,"A",{href:!0});var pxr=n(EB);nVe=r(pxr,"CLIPTokenizer"),pxr.forEach(t),lVe=r(T8," or "),yB=s(T8,"A",{href:!0});var _xr=n(yB);iVe=r(_xr,"CLIPTokenizerFast"),_xr.forEach(t),dVe=r(T8," (CLIP model)"),T8.forEach(t),cVe=i(y),Us=s(y,"LI",{});var F8=n(Us);GH=s(F8,"STRONG",{});var bxr=n(GH);mVe=r(bxr,"convbert"),bxr.forEach(t),fVe=r(F8," \u2014 "),wB=s(F8,"A",{href:!0});var vxr=n(wB);gVe=r(vxr,"ConvBertTokenizer"),vxr.forEach(t),hVe=r(F8," or "),AB=s(F8,"A",{href:!0});var Txr=n(AB);uVe=r(Txr,"ConvBertTokenizerFast"),Txr.forEach(t),pVe=r(F8," (ConvBERT model)"),F8.forEach(t),_Ve=i(y),Js=s(y,"LI",{});var C8=n(Js);OH=s(C8,"STRONG",{});var Fxr=n(OH);bVe=r(Fxr,"cpm"),Fxr.forEach(t),vVe=r(C8," \u2014 "),LB=s(C8,"A",{href:!0});var Cxr=n(LB);TVe=r(Cxr,"CpmTokenizer"),Cxr.forEach(t),FVe=r(C8," or "),XH=s(C8,"CODE",{});var Mxr=n(XH);CVe=r(Mxr,"CpmTokenizerFast"),Mxr.forEach(t),MVe=r(C8," (CPM model)"),C8.forEach(t),EVe=i(y),wg=s(y,"LI",{});var LCe=n(wg);VH=s(LCe,"STRONG",{});var Exr=n(VH);yVe=r(Exr,"ctrl"),Exr.forEach(t),wVe=r(LCe," \u2014 "),BB=s(LCe,"A",{href:!0});var yxr=n(BB);AVe=r(yxr,"CTRLTokenizer"),yxr.forEach(t),LVe=r(LCe," (CTRL model)"),LCe.forEach(t),BVe=i(y),Ys=s(y,"LI",{});var M8=n(Ys);zH=s(M8,"STRONG",{});var wxr=n(zH);xVe=r(wxr,"deberta"),wxr.forEach(t),kVe=r(M8," \u2014 "),xB=s(M8,"A",{href:!0});var Axr=n(xB);RVe=r(Axr,"DebertaTokenizer"),Axr.forEach(t),SVe=r(M8," or "),kB=s(M8,"A",{href:!0});var Lxr=n(kB);PVe=r(Lxr,"DebertaTokenizerFast"),Lxr.forEach(t),$Ve=r(M8," (DeBERTa model)"),M8.forEach(t),IVe=i(y),Ag=s(y,"LI",{});var BCe=n(Ag);WH=s(BCe,"STRONG",{});var Bxr=n(WH);DVe=r(Bxr,"deberta-v2"),Bxr.forEach(t),jVe=r(BCe," \u2014 "),RB=s(BCe,"A",{href:!0});var xxr=n(RB);NVe=r(xxr,"DebertaV2Tokenizer"),xxr.forEach(t),qVe=r(BCe," (DeBERTa-v2 model)"),BCe.forEach(t),GVe=i(y),Ks=s(y,"LI",{});var E8=n(Ks);QH=s(E8,"STRONG",{});var kxr=n(QH);OVe=r(kxr,"distilbert"),kxr.forEach(t),XVe=r(E8," \u2014 "),SB=s(E8,"A",{href:!0});var Rxr=n(SB);VVe=r(Rxr,"DistilBertTokenizer"),Rxr.forEach(t),zVe=r(E8," or "),PB=s(E8,"A",{href:!0});var Sxr=n(PB);WVe=r(Sxr,"DistilBertTokenizerFast"),Sxr.forEach(t),QVe=r(E8," (DistilBERT model)"),E8.forEach(t),HVe=i(y),Zs=s(y,"LI",{});var y8=n(Zs);HH=s(y8,"STRONG",{});var Pxr=n(HH);UVe=r(Pxr,"dpr"),Pxr.forEach(t),JVe=r(y8," \u2014 "),$B=s(y8,"A",{href:!0});var $xr=n($B);YVe=r($xr,"DPRQuestionEncoderTokenizer"),$xr.forEach(t),KVe=r(y8," or "),IB=s(y8,"A",{href:!0});var Ixr=n(IB);ZVe=r(Ixr,"DPRQuestionEncoderTokenizerFast"),Ixr.forEach(t),eze=r(y8," (DPR model)"),y8.forEach(t),oze=i(y),en=s(y,"LI",{});var w8=n(en);UH=s(w8,"STRONG",{});var Dxr=n(UH);rze=r(Dxr,"electra"),Dxr.forEach(t),tze=r(w8," \u2014 "),DB=s(w8,"A",{href:!0});var jxr=n(DB);aze=r(jxr,"ElectraTokenizer"),jxr.forEach(t),sze=r(w8," or "),jB=s(w8,"A",{href:!0});var Nxr=n(jB);nze=r(Nxr,"ElectraTokenizerFast"),Nxr.forEach(t),lze=r(w8," (ELECTRA model)"),w8.forEach(t),ize=i(y),Lg=s(y,"LI",{});var xCe=n(Lg);JH=s(xCe,"STRONG",{});var qxr=n(JH);dze=r(qxr,"flaubert"),qxr.forEach(t),cze=r(xCe," \u2014 "),NB=s(xCe,"A",{href:!0});var Gxr=n(NB);mze=r(Gxr,"FlaubertTokenizer"),Gxr.forEach(t),fze=r(xCe," (FlauBERT model)"),xCe.forEach(t),gze=i(y),on=s(y,"LI",{});var A8=n(on);YH=s(A8,"STRONG",{});var Oxr=n(YH);hze=r(Oxr,"fnet"),Oxr.forEach(t),uze=r(A8," \u2014 "),qB=s(A8,"A",{href:!0});var Xxr=n(qB);pze=r(Xxr,"FNetTokenizer"),Xxr.forEach(t),_ze=r(A8," or "),GB=s(A8,"A",{href:!0});var Vxr=n(GB);bze=r(Vxr,"FNetTokenizerFast"),Vxr.forEach(t),vze=r(A8," (FNet model)"),A8.forEach(t),Tze=i(y),Bg=s(y,"LI",{});var kCe=n(Bg);KH=s(kCe,"STRONG",{});var zxr=n(KH);Fze=r(zxr,"fsmt"),zxr.forEach(t),Cze=r(kCe," \u2014 "),OB=s(kCe,"A",{href:!0});var Wxr=n(OB);Mze=r(Wxr,"FSMTTokenizer"),Wxr.forEach(t),Eze=r(kCe," (FairSeq Machine-Translation model)"),kCe.forEach(t),yze=i(y),rn=s(y,"LI",{});var L8=n(rn);ZH=s(L8,"STRONG",{});var Qxr=n(ZH);wze=r(Qxr,"funnel"),Qxr.forEach(t),Aze=r(L8," \u2014 "),XB=s(L8,"A",{href:!0});var Hxr=n(XB);Lze=r(Hxr,"FunnelTokenizer"),Hxr.forEach(t),Bze=r(L8," or "),VB=s(L8,"A",{href:!0});var Uxr=n(VB);xze=r(Uxr,"FunnelTokenizerFast"),Uxr.forEach(t),kze=r(L8," (Funnel Transformer model)"),L8.forEach(t),Rze=i(y),tn=s(y,"LI",{});var B8=n(tn);eU=s(B8,"STRONG",{});var Jxr=n(eU);Sze=r(Jxr,"gpt2"),Jxr.forEach(t),Pze=r(B8," \u2014 "),zB=s(B8,"A",{href:!0});var Yxr=n(zB);$ze=r(Yxr,"GPT2Tokenizer"),Yxr.forEach(t),Ize=r(B8," or "),WB=s(B8,"A",{href:!0});var Kxr=n(WB);Dze=r(Kxr,"GPT2TokenizerFast"),Kxr.forEach(t),jze=r(B8," (OpenAI GPT-2 model)"),B8.forEach(t),Nze=i(y),an=s(y,"LI",{});var x8=n(an);oU=s(x8,"STRONG",{});var Zxr=n(oU);qze=r(Zxr,"gpt_neo"),Zxr.forEach(t),Gze=r(x8," \u2014 "),QB=s(x8,"A",{href:!0});var ekr=n(QB);Oze=r(ekr,"GPT2Tokenizer"),ekr.forEach(t),Xze=r(x8," or "),HB=s(x8,"A",{href:!0});var okr=n(HB);Vze=r(okr,"GPT2TokenizerFast"),okr.forEach(t),zze=r(x8," (GPT Neo model)"),x8.forEach(t),Wze=i(y),sn=s(y,"LI",{});var k8=n(sn);rU=s(k8,"STRONG",{});var rkr=n(rU);Qze=r(rkr,"herbert"),rkr.forEach(t),Hze=r(k8," \u2014 "),UB=s(k8,"A",{href:!0});var tkr=n(UB);Uze=r(tkr,"HerbertTokenizer"),tkr.forEach(t),Jze=r(k8," or "),JB=s(k8,"A",{href:!0});var akr=n(JB);Yze=r(akr,"HerbertTokenizerFast"),akr.forEach(t),Kze=r(k8," (HerBERT model)"),k8.forEach(t),Zze=i(y),xg=s(y,"LI",{});var RCe=n(xg);tU=s(RCe,"STRONG",{});var skr=n(tU);eWe=r(skr,"hubert"),skr.forEach(t),oWe=r(RCe," \u2014 "),YB=s(RCe,"A",{href:!0});var nkr=n(YB);rWe=r(nkr,"Wav2Vec2CTCTokenizer"),nkr.forEach(t),tWe=r(RCe," (Hubert model)"),RCe.forEach(t),aWe=i(y),nn=s(y,"LI",{});var R8=n(nn);aU=s(R8,"STRONG",{});var lkr=n(aU);sWe=r(lkr,"ibert"),lkr.forEach(t),nWe=r(R8," \u2014 "),KB=s(R8,"A",{href:!0});var ikr=n(KB);lWe=r(ikr,"RobertaTokenizer"),ikr.forEach(t),iWe=r(R8," or "),ZB=s(R8,"A",{href:!0});var dkr=n(ZB);dWe=r(dkr,"RobertaTokenizerFast"),dkr.forEach(t),cWe=r(R8," (I-BERT model)"),R8.forEach(t),mWe=i(y),ln=s(y,"LI",{});var S8=n(ln);sU=s(S8,"STRONG",{});var ckr=n(sU);fWe=r(ckr,"layoutlm"),ckr.forEach(t),gWe=r(S8," \u2014 "),ex=s(S8,"A",{href:!0});var mkr=n(ex);hWe=r(mkr,"LayoutLMTokenizer"),mkr.forEach(t),uWe=r(S8," or "),ox=s(S8,"A",{href:!0});var fkr=n(ox);pWe=r(fkr,"LayoutLMTokenizerFast"),fkr.forEach(t),_We=r(S8," (LayoutLM model)"),S8.forEach(t),bWe=i(y),dn=s(y,"LI",{});var P8=n(dn);nU=s(P8,"STRONG",{});var gkr=n(nU);vWe=r(gkr,"layoutlmv2"),gkr.forEach(t),TWe=r(P8," \u2014 "),rx=s(P8,"A",{href:!0});var hkr=n(rx);FWe=r(hkr,"LayoutLMv2Tokenizer"),hkr.forEach(t),CWe=r(P8," or "),tx=s(P8,"A",{href:!0});var ukr=n(tx);MWe=r(ukr,"LayoutLMv2TokenizerFast"),ukr.forEach(t),EWe=r(P8," (LayoutLMv2 model)"),P8.forEach(t),yWe=i(y),cn=s(y,"LI",{});var $8=n(cn);lU=s($8,"STRONG",{});var pkr=n(lU);wWe=r(pkr,"layoutxlm"),pkr.forEach(t),AWe=r($8," \u2014 "),ax=s($8,"A",{href:!0});var _kr=n(ax);LWe=r(_kr,"LayoutXLMTokenizer"),_kr.forEach(t),BWe=r($8," or "),sx=s($8,"A",{href:!0});var bkr=n(sx);xWe=r(bkr,"LayoutXLMTokenizerFast"),bkr.forEach(t),kWe=r($8," (LayoutXLM model)"),$8.forEach(t),RWe=i(y),mn=s(y,"LI",{});var I8=n(mn);iU=s(I8,"STRONG",{});var vkr=n(iU);SWe=r(vkr,"led"),vkr.forEach(t),PWe=r(I8," \u2014 "),nx=s(I8,"A",{href:!0});var Tkr=n(nx);$We=r(Tkr,"LEDTokenizer"),Tkr.forEach(t),IWe=r(I8," or "),lx=s(I8,"A",{href:!0});var Fkr=n(lx);DWe=r(Fkr,"LEDTokenizerFast"),Fkr.forEach(t),jWe=r(I8," (LED model)"),I8.forEach(t),NWe=i(y),fn=s(y,"LI",{});var D8=n(fn);dU=s(D8,"STRONG",{});var Ckr=n(dU);qWe=r(Ckr,"longformer"),Ckr.forEach(t),GWe=r(D8," \u2014 "),ix=s(D8,"A",{href:!0});var Mkr=n(ix);OWe=r(Mkr,"LongformerTokenizer"),Mkr.forEach(t),XWe=r(D8," or "),dx=s(D8,"A",{href:!0});var Ekr=n(dx);VWe=r(Ekr,"LongformerTokenizerFast"),Ekr.forEach(t),zWe=r(D8," (Longformer model)"),D8.forEach(t),WWe=i(y),kg=s(y,"LI",{});var SCe=n(kg);cU=s(SCe,"STRONG",{});var ykr=n(cU);QWe=r(ykr,"luke"),ykr.forEach(t),HWe=r(SCe," \u2014 "),cx=s(SCe,"A",{href:!0});var wkr=n(cx);UWe=r(wkr,"LukeTokenizer"),wkr.forEach(t),JWe=r(SCe," (LUKE model)"),SCe.forEach(t),YWe=i(y),gn=s(y,"LI",{});var j8=n(gn);mU=s(j8,"STRONG",{});var Akr=n(mU);KWe=r(Akr,"lxmert"),Akr.forEach(t),ZWe=r(j8," \u2014 "),mx=s(j8,"A",{href:!0});var Lkr=n(mx);eQe=r(Lkr,"LxmertTokenizer"),Lkr.forEach(t),oQe=r(j8," or "),fx=s(j8,"A",{href:!0});var Bkr=n(fx);rQe=r(Bkr,"LxmertTokenizerFast"),Bkr.forEach(t),tQe=r(j8," (LXMERT model)"),j8.forEach(t),aQe=i(y),Rg=s(y,"LI",{});var PCe=n(Rg);fU=s(PCe,"STRONG",{});var xkr=n(fU);sQe=r(xkr,"m2m_100"),xkr.forEach(t),nQe=r(PCe," \u2014 "),gx=s(PCe,"A",{href:!0});var kkr=n(gx);lQe=r(kkr,"M2M100Tokenizer"),kkr.forEach(t),iQe=r(PCe," (M2M100 model)"),PCe.forEach(t),dQe=i(y),Sg=s(y,"LI",{});var $Ce=n(Sg);gU=s($Ce,"STRONG",{});var Rkr=n(gU);cQe=r(Rkr,"marian"),Rkr.forEach(t),mQe=r($Ce," \u2014 "),hx=s($Ce,"A",{href:!0});var Skr=n(hx);fQe=r(Skr,"MarianTokenizer"),Skr.forEach(t),gQe=r($Ce," (Marian model)"),$Ce.forEach(t),hQe=i(y),hn=s(y,"LI",{});var N8=n(hn);hU=s(N8,"STRONG",{});var Pkr=n(hU);uQe=r(Pkr,"mbart"),Pkr.forEach(t),pQe=r(N8," \u2014 "),ux=s(N8,"A",{href:!0});var $kr=n(ux);_Qe=r($kr,"MBartTokenizer"),$kr.forEach(t),bQe=r(N8," or "),px=s(N8,"A",{href:!0});var Ikr=n(px);vQe=r(Ikr,"MBartTokenizerFast"),Ikr.forEach(t),TQe=r(N8," (mBART model)"),N8.forEach(t),FQe=i(y),un=s(y,"LI",{});var q8=n(un);uU=s(q8,"STRONG",{});var Dkr=n(uU);CQe=r(Dkr,"mbart50"),Dkr.forEach(t),MQe=r(q8," \u2014 "),_x=s(q8,"A",{href:!0});var jkr=n(_x);EQe=r(jkr,"MBart50Tokenizer"),jkr.forEach(t),yQe=r(q8," or "),bx=s(q8,"A",{href:!0});var Nkr=n(bx);wQe=r(Nkr,"MBart50TokenizerFast"),Nkr.forEach(t),AQe=r(q8," (mBART-50 model)"),q8.forEach(t),LQe=i(y),Pg=s(y,"LI",{});var ICe=n(Pg);pU=s(ICe,"STRONG",{});var qkr=n(pU);BQe=r(qkr,"mluke"),qkr.forEach(t),xQe=r(ICe," \u2014 "),vx=s(ICe,"A",{href:!0});var Gkr=n(vx);kQe=r(Gkr,"MLukeTokenizer"),Gkr.forEach(t),RQe=r(ICe," (mLUKE model)"),ICe.forEach(t),SQe=i(y),pn=s(y,"LI",{});var G8=n(pn);_U=s(G8,"STRONG",{});var Okr=n(_U);PQe=r(Okr,"mobilebert"),Okr.forEach(t),$Qe=r(G8," \u2014 "),Tx=s(G8,"A",{href:!0});var Xkr=n(Tx);IQe=r(Xkr,"MobileBertTokenizer"),Xkr.forEach(t),DQe=r(G8," or "),Fx=s(G8,"A",{href:!0});var Vkr=n(Fx);jQe=r(Vkr,"MobileBertTokenizerFast"),Vkr.forEach(t),NQe=r(G8," (MobileBERT model)"),G8.forEach(t),qQe=i(y),_n=s(y,"LI",{});var O8=n(_n);bU=s(O8,"STRONG",{});var zkr=n(bU);GQe=r(zkr,"mpnet"),zkr.forEach(t),OQe=r(O8," \u2014 "),Cx=s(O8,"A",{href:!0});var Wkr=n(Cx);XQe=r(Wkr,"MPNetTokenizer"),Wkr.forEach(t),VQe=r(O8," or "),Mx=s(O8,"A",{href:!0});var Qkr=n(Mx);zQe=r(Qkr,"MPNetTokenizerFast"),Qkr.forEach(t),WQe=r(O8," (MPNet model)"),O8.forEach(t),QQe=i(y),bn=s(y,"LI",{});var X8=n(bn);vU=s(X8,"STRONG",{});var Hkr=n(vU);HQe=r(Hkr,"mt5"),Hkr.forEach(t),UQe=r(X8," \u2014 "),Ex=s(X8,"A",{href:!0});var Ukr=n(Ex);JQe=r(Ukr,"MT5Tokenizer"),Ukr.forEach(t),YQe=r(X8," or "),yx=s(X8,"A",{href:!0});var Jkr=n(yx);KQe=r(Jkr,"MT5TokenizerFast"),Jkr.forEach(t),ZQe=r(X8," (mT5 model)"),X8.forEach(t),eHe=i(y),vn=s(y,"LI",{});var V8=n(vn);TU=s(V8,"STRONG",{});var Ykr=n(TU);oHe=r(Ykr,"openai-gpt"),Ykr.forEach(t),rHe=r(V8," \u2014 "),wx=s(V8,"A",{href:!0});var Kkr=n(wx);tHe=r(Kkr,"OpenAIGPTTokenizer"),Kkr.forEach(t),aHe=r(V8," or "),Ax=s(V8,"A",{href:!0});var Zkr=n(Ax);sHe=r(Zkr,"OpenAIGPTTokenizerFast"),Zkr.forEach(t),nHe=r(V8," (OpenAI GPT model)"),V8.forEach(t),lHe=i(y),Tn=s(y,"LI",{});var z8=n(Tn);FU=s(z8,"STRONG",{});var eRr=n(FU);iHe=r(eRr,"pegasus"),eRr.forEach(t),dHe=r(z8," \u2014 "),Lx=s(z8,"A",{href:!0});var oRr=n(Lx);cHe=r(oRr,"PegasusTokenizer"),oRr.forEach(t),mHe=r(z8," or "),Bx=s(z8,"A",{href:!0});var rRr=n(Bx);fHe=r(rRr,"PegasusTokenizerFast"),rRr.forEach(t),gHe=r(z8," (Pegasus model)"),z8.forEach(t),hHe=i(y),$g=s(y,"LI",{});var DCe=n($g);CU=s(DCe,"STRONG",{});var tRr=n(CU);uHe=r(tRr,"perceiver"),tRr.forEach(t),pHe=r(DCe," \u2014 "),xx=s(DCe,"A",{href:!0});var aRr=n(xx);_He=r(aRr,"PerceiverTokenizer"),aRr.forEach(t),bHe=r(DCe," (Perceiver model)"),DCe.forEach(t),vHe=i(y),Ig=s(y,"LI",{});var jCe=n(Ig);MU=s(jCe,"STRONG",{});var sRr=n(MU);THe=r(sRr,"phobert"),sRr.forEach(t),FHe=r(jCe," \u2014 "),kx=s(jCe,"A",{href:!0});var nRr=n(kx);CHe=r(nRr,"PhobertTokenizer"),nRr.forEach(t),MHe=r(jCe," (PhoBERT model)"),jCe.forEach(t),EHe=i(y),Dg=s(y,"LI",{});var NCe=n(Dg);EU=s(NCe,"STRONG",{});var lRr=n(EU);yHe=r(lRr,"plbart"),lRr.forEach(t),wHe=r(NCe," \u2014 "),Rx=s(NCe,"A",{href:!0});var iRr=n(Rx);AHe=r(iRr,"PLBartTokenizer"),iRr.forEach(t),LHe=r(NCe," (PLBart model)"),NCe.forEach(t),BHe=i(y),jg=s(y,"LI",{});var qCe=n(jg);yU=s(qCe,"STRONG",{});var dRr=n(yU);xHe=r(dRr,"prophetnet"),dRr.forEach(t),kHe=r(qCe," \u2014 "),Sx=s(qCe,"A",{href:!0});var cRr=n(Sx);RHe=r(cRr,"ProphetNetTokenizer"),cRr.forEach(t),SHe=r(qCe," (ProphetNet model)"),qCe.forEach(t),PHe=i(y),Fn=s(y,"LI",{});var W8=n(Fn);wU=s(W8,"STRONG",{});var mRr=n(wU);$He=r(mRr,"qdqbert"),mRr.forEach(t),IHe=r(W8," \u2014 "),Px=s(W8,"A",{href:!0});var fRr=n(Px);DHe=r(fRr,"BertTokenizer"),fRr.forEach(t),jHe=r(W8," or "),$x=s(W8,"A",{href:!0});var gRr=n($x);NHe=r(gRr,"BertTokenizerFast"),gRr.forEach(t),qHe=r(W8," (QDQBert model)"),W8.forEach(t),GHe=i(y),Ng=s(y,"LI",{});var GCe=n(Ng);AU=s(GCe,"STRONG",{});var hRr=n(AU);OHe=r(hRr,"rag"),hRr.forEach(t),XHe=r(GCe," \u2014 "),Ix=s(GCe,"A",{href:!0});var uRr=n(Ix);VHe=r(uRr,"RagTokenizer"),uRr.forEach(t),zHe=r(GCe," (RAG model)"),GCe.forEach(t),WHe=i(y),Cn=s(y,"LI",{});var Q8=n(Cn);LU=s(Q8,"STRONG",{});var pRr=n(LU);QHe=r(pRr,"reformer"),pRr.forEach(t),HHe=r(Q8," \u2014 "),Dx=s(Q8,"A",{href:!0});var _Rr=n(Dx);UHe=r(_Rr,"ReformerTokenizer"),_Rr.forEach(t),JHe=r(Q8," or "),jx=s(Q8,"A",{href:!0});var bRr=n(jx);YHe=r(bRr,"ReformerTokenizerFast"),bRr.forEach(t),KHe=r(Q8," (Reformer model)"),Q8.forEach(t),ZHe=i(y),Mn=s(y,"LI",{});var H8=n(Mn);BU=s(H8,"STRONG",{});var vRr=n(BU);eUe=r(vRr,"rembert"),vRr.forEach(t),oUe=r(H8," \u2014 "),Nx=s(H8,"A",{href:!0});var TRr=n(Nx);rUe=r(TRr,"RemBertTokenizer"),TRr.forEach(t),tUe=r(H8," or "),qx=s(H8,"A",{href:!0});var FRr=n(qx);aUe=r(FRr,"RemBertTokenizerFast"),FRr.forEach(t),sUe=r(H8," (RemBERT model)"),H8.forEach(t),nUe=i(y),En=s(y,"LI",{});var U8=n(En);xU=s(U8,"STRONG",{});var CRr=n(xU);lUe=r(CRr,"retribert"),CRr.forEach(t),iUe=r(U8," \u2014 "),Gx=s(U8,"A",{href:!0});var MRr=n(Gx);dUe=r(MRr,"RetriBertTokenizer"),MRr.forEach(t),cUe=r(U8," or "),Ox=s(U8,"A",{href:!0});var ERr=n(Ox);mUe=r(ERr,"RetriBertTokenizerFast"),ERr.forEach(t),fUe=r(U8," (RetriBERT model)"),U8.forEach(t),gUe=i(y),yn=s(y,"LI",{});var J8=n(yn);kU=s(J8,"STRONG",{});var yRr=n(kU);hUe=r(yRr,"roberta"),yRr.forEach(t),uUe=r(J8," \u2014 "),Xx=s(J8,"A",{href:!0});var wRr=n(Xx);pUe=r(wRr,"RobertaTokenizer"),wRr.forEach(t),_Ue=r(J8," or "),Vx=s(J8,"A",{href:!0});var ARr=n(Vx);bUe=r(ARr,"RobertaTokenizerFast"),ARr.forEach(t),vUe=r(J8," (RoBERTa model)"),J8.forEach(t),TUe=i(y),wn=s(y,"LI",{});var Y8=n(wn);RU=s(Y8,"STRONG",{});var LRr=n(RU);FUe=r(LRr,"roformer"),LRr.forEach(t),CUe=r(Y8," \u2014 "),zx=s(Y8,"A",{href:!0});var BRr=n(zx);MUe=r(BRr,"RoFormerTokenizer"),BRr.forEach(t),EUe=r(Y8," or "),Wx=s(Y8,"A",{href:!0});var xRr=n(Wx);yUe=r(xRr,"RoFormerTokenizerFast"),xRr.forEach(t),wUe=r(Y8," (RoFormer model)"),Y8.forEach(t),AUe=i(y),qg=s(y,"LI",{});var OCe=n(qg);SU=s(OCe,"STRONG",{});var kRr=n(SU);LUe=r(kRr,"speech_to_text"),kRr.forEach(t),BUe=r(OCe," \u2014 "),Qx=s(OCe,"A",{href:!0});var RRr=n(Qx);xUe=r(RRr,"Speech2TextTokenizer"),RRr.forEach(t),kUe=r(OCe," (Speech2Text model)"),OCe.forEach(t),RUe=i(y),Gg=s(y,"LI",{});var XCe=n(Gg);PU=s(XCe,"STRONG",{});var SRr=n(PU);SUe=r(SRr,"speech_to_text_2"),SRr.forEach(t),PUe=r(XCe," \u2014 "),Hx=s(XCe,"A",{href:!0});var PRr=n(Hx);$Ue=r(PRr,"Speech2Text2Tokenizer"),PRr.forEach(t),IUe=r(XCe," (Speech2Text2 model)"),XCe.forEach(t),DUe=i(y),An=s(y,"LI",{});var K8=n(An);$U=s(K8,"STRONG",{});var $Rr=n($U);jUe=r($Rr,"splinter"),$Rr.forEach(t),NUe=r(K8," \u2014 "),Ux=s(K8,"A",{href:!0});var IRr=n(Ux);qUe=r(IRr,"SplinterTokenizer"),IRr.forEach(t),GUe=r(K8," or "),Jx=s(K8,"A",{href:!0});var DRr=n(Jx);OUe=r(DRr,"SplinterTokenizerFast"),DRr.forEach(t),XUe=r(K8," (Splinter model)"),K8.forEach(t),VUe=i(y),Ln=s(y,"LI",{});var Z8=n(Ln);IU=s(Z8,"STRONG",{});var jRr=n(IU);zUe=r(jRr,"squeezebert"),jRr.forEach(t),WUe=r(Z8," \u2014 "),Yx=s(Z8,"A",{href:!0});var NRr=n(Yx);QUe=r(NRr,"SqueezeBertTokenizer"),NRr.forEach(t),HUe=r(Z8," or "),Kx=s(Z8,"A",{href:!0});var qRr=n(Kx);UUe=r(qRr,"SqueezeBertTokenizerFast"),qRr.forEach(t),JUe=r(Z8," (SqueezeBERT model)"),Z8.forEach(t),YUe=i(y),Bn=s(y,"LI",{});var e7=n(Bn);DU=s(e7,"STRONG",{});var GRr=n(DU);KUe=r(GRr,"t5"),GRr.forEach(t),ZUe=r(e7," \u2014 "),Zx=s(e7,"A",{href:!0});var ORr=n(Zx);eJe=r(ORr,"T5Tokenizer"),ORr.forEach(t),oJe=r(e7," or "),ek=s(e7,"A",{href:!0});var XRr=n(ek);rJe=r(XRr,"T5TokenizerFast"),XRr.forEach(t),tJe=r(e7," (T5 model)"),e7.forEach(t),aJe=i(y),Og=s(y,"LI",{});var VCe=n(Og);jU=s(VCe,"STRONG",{});var VRr=n(jU);sJe=r(VRr,"tapas"),VRr.forEach(t),nJe=r(VCe," \u2014 "),ok=s(VCe,"A",{href:!0});var zRr=n(ok);lJe=r(zRr,"TapasTokenizer"),zRr.forEach(t),iJe=r(VCe," (TAPAS model)"),VCe.forEach(t),dJe=i(y),Xg=s(y,"LI",{});var zCe=n(Xg);NU=s(zCe,"STRONG",{});var WRr=n(NU);cJe=r(WRr,"transfo-xl"),WRr.forEach(t),mJe=r(zCe," \u2014 "),rk=s(zCe,"A",{href:!0});var QRr=n(rk);fJe=r(QRr,"TransfoXLTokenizer"),QRr.forEach(t),gJe=r(zCe," (Transformer-XL model)"),zCe.forEach(t),hJe=i(y),Vg=s(y,"LI",{});var WCe=n(Vg);qU=s(WCe,"STRONG",{});var HRr=n(qU);uJe=r(HRr,"wav2vec2"),HRr.forEach(t),pJe=r(WCe," \u2014 "),tk=s(WCe,"A",{href:!0});var URr=n(tk);_Je=r(URr,"Wav2Vec2CTCTokenizer"),URr.forEach(t),bJe=r(WCe," (Wav2Vec2 model)"),WCe.forEach(t),vJe=i(y),zg=s(y,"LI",{});var QCe=n(zg);GU=s(QCe,"STRONG",{});var JRr=n(GU);TJe=r(JRr,"wav2vec2_phoneme"),JRr.forEach(t),FJe=r(QCe," \u2014 "),ak=s(QCe,"A",{href:!0});var YRr=n(ak);CJe=r(YRr,"Wav2Vec2PhonemeCTCTokenizer"),YRr.forEach(t),MJe=r(QCe," (Wav2Vec2Phoneme model)"),QCe.forEach(t),EJe=i(y),xn=s(y,"LI",{});var o7=n(xn);OU=s(o7,"STRONG",{});var KRr=n(OU);yJe=r(KRr,"xglm"),KRr.forEach(t),wJe=r(o7," \u2014 "),sk=s(o7,"A",{href:!0});var ZRr=n(sk);AJe=r(ZRr,"XGLMTokenizer"),ZRr.forEach(t),LJe=r(o7," or "),nk=s(o7,"A",{href:!0});var eSr=n(nk);BJe=r(eSr,"XGLMTokenizerFast"),eSr.forEach(t),xJe=r(o7," (XGLM model)"),o7.forEach(t),kJe=i(y),Wg=s(y,"LI",{});var HCe=n(Wg);XU=s(HCe,"STRONG",{});var oSr=n(XU);RJe=r(oSr,"xlm"),oSr.forEach(t),SJe=r(HCe," \u2014 "),lk=s(HCe,"A",{href:!0});var rSr=n(lk);PJe=r(rSr,"XLMTokenizer"),rSr.forEach(t),$Je=r(HCe," (XLM model)"),HCe.forEach(t),IJe=i(y),Qg=s(y,"LI",{});var UCe=n(Qg);VU=s(UCe,"STRONG",{});var tSr=n(VU);DJe=r(tSr,"xlm-prophetnet"),tSr.forEach(t),jJe=r(UCe," \u2014 "),ik=s(UCe,"A",{href:!0});var aSr=n(ik);NJe=r(aSr,"XLMProphetNetTokenizer"),aSr.forEach(t),qJe=r(UCe," (XLMProphetNet model)"),UCe.forEach(t),GJe=i(y),kn=s(y,"LI",{});var r7=n(kn);zU=s(r7,"STRONG",{});var sSr=n(zU);OJe=r(sSr,"xlm-roberta"),sSr.forEach(t),XJe=r(r7," \u2014 "),dk=s(r7,"A",{href:!0});var nSr=n(dk);VJe=r(nSr,"XLMRobertaTokenizer"),nSr.forEach(t),zJe=r(r7," or "),ck=s(r7,"A",{href:!0});var lSr=n(ck);WJe=r(lSr,"XLMRobertaTokenizerFast"),lSr.forEach(t),QJe=r(r7," (XLM-RoBERTa model)"),r7.forEach(t),HJe=i(y),Rn=s(y,"LI",{});var t7=n(Rn);WU=s(t7,"STRONG",{});var iSr=n(WU);UJe=r(iSr,"xlnet"),iSr.forEach(t),JJe=r(t7," \u2014 "),mk=s(t7,"A",{href:!0});var dSr=n(mk);YJe=r(dSr,"XLNetTokenizer"),dSr.forEach(t),KJe=r(t7," or "),fk=s(t7,"A",{href:!0});var cSr=n(fk);ZJe=r(cSr,"XLNetTokenizerFast"),cSr.forEach(t),eYe=r(t7," (XLNet model)"),t7.forEach(t),y.forEach(t),oYe=i(da),QU=s(da,"P",{});var mSr=n(QU);rYe=r(mSr,"Examples:"),mSr.forEach(t),tYe=i(da),f(q5.$$.fragment,da),da.forEach(t),aYe=i(Dn),Hg=s(Dn,"DIV",{class:!0});var Ixe=n(Hg);f(G5.$$.fragment,Ixe),sYe=i(Ixe),HU=s(Ixe,"P",{});var fSr=n(HU);nYe=r(fSr,"Register a new tokenizer in this mapping."),fSr.forEach(t),Ixe.forEach(t),Dn.forEach(t),P9e=i(c),Ni=s(c,"H2",{class:!0});var Dxe=n(Ni);Ug=s(Dxe,"A",{id:!0,class:!0,href:!0});var gSr=n(Ug);UU=s(gSr,"SPAN",{});var hSr=n(UU);f(O5.$$.fragment,hSr),hSr.forEach(t),gSr.forEach(t),lYe=i(Dxe),JU=s(Dxe,"SPAN",{});var uSr=n(JU);iYe=r(uSr,"AutoFeatureExtractor"),uSr.forEach(t),Dxe.forEach(t),$9e=i(c),zo=s(c,"DIV",{class:!0});var jn=n(zo);f(X5.$$.fragment,jn),dYe=i(jn),V5=s(jn,"P",{});var jxe=n(V5);cYe=r(jxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gk=s(jxe,"A",{href:!0});var pSr=n(gk);mYe=r(pSr,"AutoFeatureExtractor.from_pretrained()"),pSr.forEach(t),fYe=r(jxe," class method."),jxe.forEach(t),gYe=i(jn),z5=s(jn,"P",{});var Nxe=n(z5);hYe=r(Nxe,"This class cannot be instantiated directly using "),YU=s(Nxe,"CODE",{});var _Sr=n(YU);uYe=r(_Sr,"__init__()"),_Sr.forEach(t),pYe=r(Nxe," (throws an error)."),Nxe.forEach(t),_Ye=i(jn),xe=s(jn,"DIV",{class:!0});var St=n(xe);f(W5.$$.fragment,St),bYe=i(St),KU=s(St,"P",{});var bSr=n(KU);vYe=r(bSr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bSr.forEach(t),TYe=i(St),ja=s(St,"P",{});var y3=n(ja);FYe=r(y3,"The feature extractor class to instantiate is selected based on the "),ZU=s(y3,"CODE",{});var vSr=n(ZU);CYe=r(vSr,"model_type"),vSr.forEach(t),MYe=r(y3,` property of the config object
(either passed as an argument or loaded from `),eJ=s(y3,"CODE",{});var TSr=n(eJ);EYe=r(TSr,"pretrained_model_name_or_path"),TSr.forEach(t),yYe=r(y3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oJ=s(y3,"CODE",{});var FSr=n(oJ);wYe=r(FSr,"pretrained_model_name_or_path"),FSr.forEach(t),AYe=r(y3,":"),y3.forEach(t),LYe=i(St),ne=s(St,"UL",{});var de=n(ne);Jg=s(de,"LI",{});var JCe=n(Jg);rJ=s(JCe,"STRONG",{});var CSr=n(rJ);BYe=r(CSr,"beit"),CSr.forEach(t),xYe=r(JCe," \u2014 "),hk=s(JCe,"A",{href:!0});var MSr=n(hk);kYe=r(MSr,"BeitFeatureExtractor"),MSr.forEach(t),RYe=r(JCe," (BEiT model)"),JCe.forEach(t),SYe=i(de),Yg=s(de,"LI",{});var YCe=n(Yg);tJ=s(YCe,"STRONG",{});var ESr=n(tJ);PYe=r(ESr,"clip"),ESr.forEach(t),$Ye=r(YCe," \u2014 "),uk=s(YCe,"A",{href:!0});var ySr=n(uk);IYe=r(ySr,"CLIPFeatureExtractor"),ySr.forEach(t),DYe=r(YCe," (CLIP model)"),YCe.forEach(t),jYe=i(de),Kg=s(de,"LI",{});var KCe=n(Kg);aJ=s(KCe,"STRONG",{});var wSr=n(aJ);NYe=r(wSr,"convnext"),wSr.forEach(t),qYe=r(KCe," \u2014 "),pk=s(KCe,"A",{href:!0});var ASr=n(pk);GYe=r(ASr,"ConvNextFeatureExtractor"),ASr.forEach(t),OYe=r(KCe," (ConvNext model)"),KCe.forEach(t),XYe=i(de),Zg=s(de,"LI",{});var ZCe=n(Zg);sJ=s(ZCe,"STRONG",{});var LSr=n(sJ);VYe=r(LSr,"deit"),LSr.forEach(t),zYe=r(ZCe," \u2014 "),_k=s(ZCe,"A",{href:!0});var BSr=n(_k);WYe=r(BSr,"DeiTFeatureExtractor"),BSr.forEach(t),QYe=r(ZCe," (DeiT model)"),ZCe.forEach(t),HYe=i(de),eh=s(de,"LI",{});var e4e=n(eh);nJ=s(e4e,"STRONG",{});var xSr=n(nJ);UYe=r(xSr,"detr"),xSr.forEach(t),JYe=r(e4e," \u2014 "),bk=s(e4e,"A",{href:!0});var kSr=n(bk);YYe=r(kSr,"DetrFeatureExtractor"),kSr.forEach(t),KYe=r(e4e," (DETR model)"),e4e.forEach(t),ZYe=i(de),oh=s(de,"LI",{});var o4e=n(oh);lJ=s(o4e,"STRONG",{});var RSr=n(lJ);eKe=r(RSr,"hubert"),RSr.forEach(t),oKe=r(o4e," \u2014 "),vk=s(o4e,"A",{href:!0});var SSr=n(vk);rKe=r(SSr,"Wav2Vec2FeatureExtractor"),SSr.forEach(t),tKe=r(o4e," (Hubert model)"),o4e.forEach(t),aKe=i(de),rh=s(de,"LI",{});var r4e=n(rh);iJ=s(r4e,"STRONG",{});var PSr=n(iJ);sKe=r(PSr,"layoutlmv2"),PSr.forEach(t),nKe=r(r4e," \u2014 "),Tk=s(r4e,"A",{href:!0});var $Sr=n(Tk);lKe=r($Sr,"LayoutLMv2FeatureExtractor"),$Sr.forEach(t),iKe=r(r4e," (LayoutLMv2 model)"),r4e.forEach(t),dKe=i(de),th=s(de,"LI",{});var t4e=n(th);dJ=s(t4e,"STRONG",{});var ISr=n(dJ);cKe=r(ISr,"perceiver"),ISr.forEach(t),mKe=r(t4e," \u2014 "),Fk=s(t4e,"A",{href:!0});var DSr=n(Fk);fKe=r(DSr,"PerceiverFeatureExtractor"),DSr.forEach(t),gKe=r(t4e," (Perceiver model)"),t4e.forEach(t),hKe=i(de),ah=s(de,"LI",{});var a4e=n(ah);cJ=s(a4e,"STRONG",{});var jSr=n(cJ);uKe=r(jSr,"poolformer"),jSr.forEach(t),pKe=r(a4e," \u2014 "),Ck=s(a4e,"A",{href:!0});var NSr=n(Ck);_Ke=r(NSr,"PoolFormerFeatureExtractor"),NSr.forEach(t),bKe=r(a4e," (PoolFormer model)"),a4e.forEach(t),vKe=i(de),sh=s(de,"LI",{});var s4e=n(sh);mJ=s(s4e,"STRONG",{});var qSr=n(mJ);TKe=r(qSr,"segformer"),qSr.forEach(t),FKe=r(s4e," \u2014 "),Mk=s(s4e,"A",{href:!0});var GSr=n(Mk);CKe=r(GSr,"SegformerFeatureExtractor"),GSr.forEach(t),MKe=r(s4e," (SegFormer model)"),s4e.forEach(t),EKe=i(de),nh=s(de,"LI",{});var n4e=n(nh);fJ=s(n4e,"STRONG",{});var OSr=n(fJ);yKe=r(OSr,"speech_to_text"),OSr.forEach(t),wKe=r(n4e," \u2014 "),Ek=s(n4e,"A",{href:!0});var XSr=n(Ek);AKe=r(XSr,"Speech2TextFeatureExtractor"),XSr.forEach(t),LKe=r(n4e," (Speech2Text model)"),n4e.forEach(t),BKe=i(de),lh=s(de,"LI",{});var l4e=n(lh);gJ=s(l4e,"STRONG",{});var VSr=n(gJ);xKe=r(VSr,"swin"),VSr.forEach(t),kKe=r(l4e," \u2014 "),yk=s(l4e,"A",{href:!0});var zSr=n(yk);RKe=r(zSr,"ViTFeatureExtractor"),zSr.forEach(t),SKe=r(l4e," (Swin model)"),l4e.forEach(t),PKe=i(de),ih=s(de,"LI",{});var i4e=n(ih);hJ=s(i4e,"STRONG",{});var WSr=n(hJ);$Ke=r(WSr,"vit"),WSr.forEach(t),IKe=r(i4e," \u2014 "),wk=s(i4e,"A",{href:!0});var QSr=n(wk);DKe=r(QSr,"ViTFeatureExtractor"),QSr.forEach(t),jKe=r(i4e," (ViT model)"),i4e.forEach(t),NKe=i(de),dh=s(de,"LI",{});var d4e=n(dh);uJ=s(d4e,"STRONG",{});var HSr=n(uJ);qKe=r(HSr,"vit_mae"),HSr.forEach(t),GKe=r(d4e," \u2014 "),Ak=s(d4e,"A",{href:!0});var USr=n(Ak);OKe=r(USr,"ViTFeatureExtractor"),USr.forEach(t),XKe=r(d4e," (ViTMAE model)"),d4e.forEach(t),VKe=i(de),ch=s(de,"LI",{});var c4e=n(ch);pJ=s(c4e,"STRONG",{});var JSr=n(pJ);zKe=r(JSr,"wav2vec2"),JSr.forEach(t),WKe=r(c4e," \u2014 "),Lk=s(c4e,"A",{href:!0});var YSr=n(Lk);QKe=r(YSr,"Wav2Vec2FeatureExtractor"),YSr.forEach(t),HKe=r(c4e," (Wav2Vec2 model)"),c4e.forEach(t),de.forEach(t),UKe=i(St),f(mh.$$.fragment,St),JKe=i(St),_J=s(St,"P",{});var KSr=n(_J);YKe=r(KSr,"Examples:"),KSr.forEach(t),KKe=i(St),f(Q5.$$.fragment,St),St.forEach(t),ZKe=i(jn),fh=s(jn,"DIV",{class:!0});var qxe=n(fh);f(H5.$$.fragment,qxe),eZe=i(qxe),bJ=s(qxe,"P",{});var ZSr=n(bJ);oZe=r(ZSr,"Register a new feature extractor for this class."),ZSr.forEach(t),qxe.forEach(t),jn.forEach(t),I9e=i(c),qi=s(c,"H2",{class:!0});var Gxe=n(qi);gh=s(Gxe,"A",{id:!0,class:!0,href:!0});var ePr=n(gh);vJ=s(ePr,"SPAN",{});var oPr=n(vJ);f(U5.$$.fragment,oPr),oPr.forEach(t),ePr.forEach(t),rZe=i(Gxe),TJ=s(Gxe,"SPAN",{});var rPr=n(TJ);tZe=r(rPr,"AutoProcessor"),rPr.forEach(t),Gxe.forEach(t),D9e=i(c),Wo=s(c,"DIV",{class:!0});var Nn=n(Wo);f(J5.$$.fragment,Nn),aZe=i(Nn),Y5=s(Nn,"P",{});var Oxe=n(Y5);sZe=r(Oxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bk=s(Oxe,"A",{href:!0});var tPr=n(Bk);nZe=r(tPr,"AutoProcessor.from_pretrained()"),tPr.forEach(t),lZe=r(Oxe," class method."),Oxe.forEach(t),iZe=i(Nn),K5=s(Nn,"P",{});var Xxe=n(K5);dZe=r(Xxe,"This class cannot be instantiated directly using "),FJ=s(Xxe,"CODE",{});var aPr=n(FJ);cZe=r(aPr,"__init__()"),aPr.forEach(t),mZe=r(Xxe," (throws an error)."),Xxe.forEach(t),fZe=i(Nn),ke=s(Nn,"DIV",{class:!0});var Pt=n(ke);f(Z5.$$.fragment,Pt),gZe=i(Pt),CJ=s(Pt,"P",{});var sPr=n(CJ);hZe=r(sPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sPr.forEach(t),uZe=i(Pt),Gi=s(Pt,"P",{});var RV=n(Gi);pZe=r(RV,"The processor class to instantiate is selected based on the "),MJ=s(RV,"CODE",{});var nPr=n(MJ);_Ze=r(nPr,"model_type"),nPr.forEach(t),bZe=r(RV,` property of the config object (either
passed as an argument or loaded from `),EJ=s(RV,"CODE",{});var lPr=n(EJ);vZe=r(lPr,"pretrained_model_name_or_path"),lPr.forEach(t),TZe=r(RV," if possible):"),RV.forEach(t),FZe=i(Pt),we=s(Pt,"UL",{});var jo=n(we);hh=s(jo,"LI",{});var m4e=n(hh);yJ=s(m4e,"STRONG",{});var iPr=n(yJ);CZe=r(iPr,"clip"),iPr.forEach(t),MZe=r(m4e," \u2014 "),xk=s(m4e,"A",{href:!0});var dPr=n(xk);EZe=r(dPr,"CLIPProcessor"),dPr.forEach(t),yZe=r(m4e," (CLIP model)"),m4e.forEach(t),wZe=i(jo),uh=s(jo,"LI",{});var f4e=n(uh);wJ=s(f4e,"STRONG",{});var cPr=n(wJ);AZe=r(cPr,"layoutlmv2"),cPr.forEach(t),LZe=r(f4e," \u2014 "),kk=s(f4e,"A",{href:!0});var mPr=n(kk);BZe=r(mPr,"LayoutLMv2Processor"),mPr.forEach(t),xZe=r(f4e," (LayoutLMv2 model)"),f4e.forEach(t),kZe=i(jo),ph=s(jo,"LI",{});var g4e=n(ph);AJ=s(g4e,"STRONG",{});var fPr=n(AJ);RZe=r(fPr,"layoutxlm"),fPr.forEach(t),SZe=r(g4e," \u2014 "),Rk=s(g4e,"A",{href:!0});var gPr=n(Rk);PZe=r(gPr,"LayoutXLMProcessor"),gPr.forEach(t),$Ze=r(g4e," (LayoutXLM model)"),g4e.forEach(t),IZe=i(jo),_h=s(jo,"LI",{});var h4e=n(_h);LJ=s(h4e,"STRONG",{});var hPr=n(LJ);DZe=r(hPr,"speech_to_text"),hPr.forEach(t),jZe=r(h4e," \u2014 "),Sk=s(h4e,"A",{href:!0});var uPr=n(Sk);NZe=r(uPr,"Speech2TextProcessor"),uPr.forEach(t),qZe=r(h4e," (Speech2Text model)"),h4e.forEach(t),GZe=i(jo),bh=s(jo,"LI",{});var u4e=n(bh);BJ=s(u4e,"STRONG",{});var pPr=n(BJ);OZe=r(pPr,"speech_to_text_2"),pPr.forEach(t),XZe=r(u4e," \u2014 "),Pk=s(u4e,"A",{href:!0});var _Pr=n(Pk);VZe=r(_Pr,"Speech2Text2Processor"),_Pr.forEach(t),zZe=r(u4e," (Speech2Text2 model)"),u4e.forEach(t),WZe=i(jo),vh=s(jo,"LI",{});var p4e=n(vh);xJ=s(p4e,"STRONG",{});var bPr=n(xJ);QZe=r(bPr,"trocr"),bPr.forEach(t),HZe=r(p4e," \u2014 "),$k=s(p4e,"A",{href:!0});var vPr=n($k);UZe=r(vPr,"TrOCRProcessor"),vPr.forEach(t),JZe=r(p4e," (TrOCR model)"),p4e.forEach(t),YZe=i(jo),Th=s(jo,"LI",{});var _4e=n(Th);kJ=s(_4e,"STRONG",{});var TPr=n(kJ);KZe=r(TPr,"vision-text-dual-encoder"),TPr.forEach(t),ZZe=r(_4e," \u2014 "),Ik=s(_4e,"A",{href:!0});var FPr=n(Ik);eeo=r(FPr,"VisionTextDualEncoderProcessor"),FPr.forEach(t),oeo=r(_4e," (VisionTextDualEncoder model)"),_4e.forEach(t),reo=i(jo),Fh=s(jo,"LI",{});var b4e=n(Fh);RJ=s(b4e,"STRONG",{});var CPr=n(RJ);teo=r(CPr,"wav2vec2"),CPr.forEach(t),aeo=r(b4e," \u2014 "),Dk=s(b4e,"A",{href:!0});var MPr=n(Dk);seo=r(MPr,"Wav2Vec2Processor"),MPr.forEach(t),neo=r(b4e," (Wav2Vec2 model)"),b4e.forEach(t),jo.forEach(t),leo=i(Pt),f(Ch.$$.fragment,Pt),ieo=i(Pt),SJ=s(Pt,"P",{});var EPr=n(SJ);deo=r(EPr,"Examples:"),EPr.forEach(t),ceo=i(Pt),f(ey.$$.fragment,Pt),Pt.forEach(t),meo=i(Nn),Mh=s(Nn,"DIV",{class:!0});var Vxe=n(Mh);f(oy.$$.fragment,Vxe),feo=i(Vxe),PJ=s(Vxe,"P",{});var yPr=n(PJ);geo=r(yPr,"Register a new processor for this class."),yPr.forEach(t),Vxe.forEach(t),Nn.forEach(t),j9e=i(c),Oi=s(c,"H2",{class:!0});var zxe=n(Oi);Eh=s(zxe,"A",{id:!0,class:!0,href:!0});var wPr=n(Eh);$J=s(wPr,"SPAN",{});var APr=n($J);f(ry.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),heo=i(zxe),IJ=s(zxe,"SPAN",{});var LPr=n(IJ);ueo=r(LPr,"AutoModel"),LPr.forEach(t),zxe.forEach(t),N9e=i(c),Qo=s(c,"DIV",{class:!0});var qn=n(Qo);f(ty.$$.fragment,qn),peo=i(qn),Xi=s(qn,"P",{});var SV=n(Xi);_eo=r(SV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DJ=s(SV,"CODE",{});var BPr=n(DJ);beo=r(BPr,"from_pretrained()"),BPr.forEach(t),veo=r(SV,"class method or the "),jJ=s(SV,"CODE",{});var xPr=n(jJ);Teo=r(xPr,"from_config()"),xPr.forEach(t),Feo=r(SV,`class
method.`),SV.forEach(t),Ceo=i(qn),ay=s(qn,"P",{});var Wxe=n(ay);Meo=r(Wxe,"This class cannot be instantiated directly using "),NJ=s(Wxe,"CODE",{});var kPr=n(NJ);Eeo=r(kPr,"__init__()"),kPr.forEach(t),yeo=r(Wxe," (throws an error)."),Wxe.forEach(t),weo=i(qn),qr=s(qn,"DIV",{class:!0});var Gn=n(qr);f(sy.$$.fragment,Gn),Aeo=i(Gn),qJ=s(Gn,"P",{});var RPr=n(qJ);Leo=r(RPr,"Instantiates one of the base model classes of the library from a configuration."),RPr.forEach(t),Beo=i(Gn),Vi=s(Gn,"P",{});var PV=n(Vi);xeo=r(PV,`Note:
Loading a model from its configuration file does `),GJ=s(PV,"STRONG",{});var SPr=n(GJ);keo=r(SPr,"not"),SPr.forEach(t),Reo=r(PV,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=s(PV,"CODE",{});var PPr=n(OJ);Seo=r(PPr,"from_pretrained()"),PPr.forEach(t),Peo=r(PV,"to load the model weights."),PV.forEach(t),$eo=i(Gn),XJ=s(Gn,"P",{});var $Pr=n(XJ);Ieo=r($Pr,"Examples:"),$Pr.forEach(t),Deo=i(Gn),f(ny.$$.fragment,Gn),Gn.forEach(t),jeo=i(qn),Re=s(qn,"DIV",{class:!0});var $t=n(Re);f(ly.$$.fragment,$t),Neo=i($t),VJ=s($t,"P",{});var IPr=n(VJ);qeo=r(IPr,"Instantiate one of the base model classes of the library from a pretrained model."),IPr.forEach(t),Geo=i($t),Na=s($t,"P",{});var w3=n(Na);Oeo=r(w3,"The model class to instantiate is selected based on the "),zJ=s(w3,"CODE",{});var DPr=n(zJ);Xeo=r(DPr,"model_type"),DPr.forEach(t),Veo=r(w3,` property of the config object (either
passed as an argument or loaded from `),WJ=s(w3,"CODE",{});var jPr=n(WJ);zeo=r(jPr,"pretrained_model_name_or_path"),jPr.forEach(t),Weo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QJ=s(w3,"CODE",{});var NPr=n(QJ);Qeo=r(NPr,"pretrained_model_name_or_path"),NPr.forEach(t),Heo=r(w3,":"),w3.forEach(t),Ueo=i($t),F=s($t,"UL",{});var C=n(F);yh=s(C,"LI",{});var v4e=n(yh);HJ=s(v4e,"STRONG",{});var qPr=n(HJ);Jeo=r(qPr,"albert"),qPr.forEach(t),Yeo=r(v4e," \u2014 "),jk=s(v4e,"A",{href:!0});var GPr=n(jk);Keo=r(GPr,"AlbertModel"),GPr.forEach(t),Zeo=r(v4e," (ALBERT model)"),v4e.forEach(t),eoo=i(C),wh=s(C,"LI",{});var T4e=n(wh);UJ=s(T4e,"STRONG",{});var OPr=n(UJ);ooo=r(OPr,"bart"),OPr.forEach(t),roo=r(T4e," \u2014 "),Nk=s(T4e,"A",{href:!0});var XPr=n(Nk);too=r(XPr,"BartModel"),XPr.forEach(t),aoo=r(T4e," (BART model)"),T4e.forEach(t),soo=i(C),Ah=s(C,"LI",{});var F4e=n(Ah);JJ=s(F4e,"STRONG",{});var VPr=n(JJ);noo=r(VPr,"beit"),VPr.forEach(t),loo=r(F4e," \u2014 "),qk=s(F4e,"A",{href:!0});var zPr=n(qk);ioo=r(zPr,"BeitModel"),zPr.forEach(t),doo=r(F4e," (BEiT model)"),F4e.forEach(t),coo=i(C),Lh=s(C,"LI",{});var C4e=n(Lh);YJ=s(C4e,"STRONG",{});var WPr=n(YJ);moo=r(WPr,"bert"),WPr.forEach(t),foo=r(C4e," \u2014 "),Gk=s(C4e,"A",{href:!0});var QPr=n(Gk);goo=r(QPr,"BertModel"),QPr.forEach(t),hoo=r(C4e," (BERT model)"),C4e.forEach(t),uoo=i(C),Bh=s(C,"LI",{});var M4e=n(Bh);KJ=s(M4e,"STRONG",{});var HPr=n(KJ);poo=r(HPr,"bert-generation"),HPr.forEach(t),_oo=r(M4e," \u2014 "),Ok=s(M4e,"A",{href:!0});var UPr=n(Ok);boo=r(UPr,"BertGenerationEncoder"),UPr.forEach(t),voo=r(M4e," (Bert Generation model)"),M4e.forEach(t),Too=i(C),xh=s(C,"LI",{});var E4e=n(xh);ZJ=s(E4e,"STRONG",{});var JPr=n(ZJ);Foo=r(JPr,"big_bird"),JPr.forEach(t),Coo=r(E4e," \u2014 "),Xk=s(E4e,"A",{href:!0});var YPr=n(Xk);Moo=r(YPr,"BigBirdModel"),YPr.forEach(t),Eoo=r(E4e," (BigBird model)"),E4e.forEach(t),yoo=i(C),kh=s(C,"LI",{});var y4e=n(kh);eY=s(y4e,"STRONG",{});var KPr=n(eY);woo=r(KPr,"bigbird_pegasus"),KPr.forEach(t),Aoo=r(y4e," \u2014 "),Vk=s(y4e,"A",{href:!0});var ZPr=n(Vk);Loo=r(ZPr,"BigBirdPegasusModel"),ZPr.forEach(t),Boo=r(y4e," (BigBirdPegasus model)"),y4e.forEach(t),xoo=i(C),Rh=s(C,"LI",{});var w4e=n(Rh);oY=s(w4e,"STRONG",{});var e$r=n(oY);koo=r(e$r,"blenderbot"),e$r.forEach(t),Roo=r(w4e," \u2014 "),zk=s(w4e,"A",{href:!0});var o$r=n(zk);Soo=r(o$r,"BlenderbotModel"),o$r.forEach(t),Poo=r(w4e," (Blenderbot model)"),w4e.forEach(t),$oo=i(C),Sh=s(C,"LI",{});var A4e=n(Sh);rY=s(A4e,"STRONG",{});var r$r=n(rY);Ioo=r(r$r,"blenderbot-small"),r$r.forEach(t),Doo=r(A4e," \u2014 "),Wk=s(A4e,"A",{href:!0});var t$r=n(Wk);joo=r(t$r,"BlenderbotSmallModel"),t$r.forEach(t),Noo=r(A4e," (BlenderbotSmall model)"),A4e.forEach(t),qoo=i(C),Ph=s(C,"LI",{});var L4e=n(Ph);tY=s(L4e,"STRONG",{});var a$r=n(tY);Goo=r(a$r,"camembert"),a$r.forEach(t),Ooo=r(L4e," \u2014 "),Qk=s(L4e,"A",{href:!0});var s$r=n(Qk);Xoo=r(s$r,"CamembertModel"),s$r.forEach(t),Voo=r(L4e," (CamemBERT model)"),L4e.forEach(t),zoo=i(C),$h=s(C,"LI",{});var B4e=n($h);aY=s(B4e,"STRONG",{});var n$r=n(aY);Woo=r(n$r,"canine"),n$r.forEach(t),Qoo=r(B4e," \u2014 "),Hk=s(B4e,"A",{href:!0});var l$r=n(Hk);Hoo=r(l$r,"CanineModel"),l$r.forEach(t),Uoo=r(B4e," (Canine model)"),B4e.forEach(t),Joo=i(C),Ih=s(C,"LI",{});var x4e=n(Ih);sY=s(x4e,"STRONG",{});var i$r=n(sY);Yoo=r(i$r,"clip"),i$r.forEach(t),Koo=r(x4e," \u2014 "),Uk=s(x4e,"A",{href:!0});var d$r=n(Uk);Zoo=r(d$r,"CLIPModel"),d$r.forEach(t),ero=r(x4e," (CLIP model)"),x4e.forEach(t),oro=i(C),Dh=s(C,"LI",{});var k4e=n(Dh);nY=s(k4e,"STRONG",{});var c$r=n(nY);rro=r(c$r,"convbert"),c$r.forEach(t),tro=r(k4e," \u2014 "),Jk=s(k4e,"A",{href:!0});var m$r=n(Jk);aro=r(m$r,"ConvBertModel"),m$r.forEach(t),sro=r(k4e," (ConvBERT model)"),k4e.forEach(t),nro=i(C),jh=s(C,"LI",{});var R4e=n(jh);lY=s(R4e,"STRONG",{});var f$r=n(lY);lro=r(f$r,"convnext"),f$r.forEach(t),iro=r(R4e," \u2014 "),Yk=s(R4e,"A",{href:!0});var g$r=n(Yk);dro=r(g$r,"ConvNextModel"),g$r.forEach(t),cro=r(R4e," (ConvNext model)"),R4e.forEach(t),mro=i(C),Nh=s(C,"LI",{});var S4e=n(Nh);iY=s(S4e,"STRONG",{});var h$r=n(iY);fro=r(h$r,"ctrl"),h$r.forEach(t),gro=r(S4e," \u2014 "),Kk=s(S4e,"A",{href:!0});var u$r=n(Kk);hro=r(u$r,"CTRLModel"),u$r.forEach(t),uro=r(S4e," (CTRL model)"),S4e.forEach(t),pro=i(C),qh=s(C,"LI",{});var P4e=n(qh);dY=s(P4e,"STRONG",{});var p$r=n(dY);_ro=r(p$r,"data2vec-audio"),p$r.forEach(t),bro=r(P4e," \u2014 "),Zk=s(P4e,"A",{href:!0});var _$r=n(Zk);vro=r(_$r,"Data2VecAudioModel"),_$r.forEach(t),Tro=r(P4e," (Data2VecAudio model)"),P4e.forEach(t),Fro=i(C),Gh=s(C,"LI",{});var $4e=n(Gh);cY=s($4e,"STRONG",{});var b$r=n(cY);Cro=r(b$r,"data2vec-text"),b$r.forEach(t),Mro=r($4e," \u2014 "),eR=s($4e,"A",{href:!0});var v$r=n(eR);Ero=r(v$r,"Data2VecTextModel"),v$r.forEach(t),yro=r($4e," (Data2VecText model)"),$4e.forEach(t),wro=i(C),Oh=s(C,"LI",{});var I4e=n(Oh);mY=s(I4e,"STRONG",{});var T$r=n(mY);Aro=r(T$r,"deberta"),T$r.forEach(t),Lro=r(I4e," \u2014 "),oR=s(I4e,"A",{href:!0});var F$r=n(oR);Bro=r(F$r,"DebertaModel"),F$r.forEach(t),xro=r(I4e," (DeBERTa model)"),I4e.forEach(t),kro=i(C),Xh=s(C,"LI",{});var D4e=n(Xh);fY=s(D4e,"STRONG",{});var C$r=n(fY);Rro=r(C$r,"deberta-v2"),C$r.forEach(t),Sro=r(D4e," \u2014 "),rR=s(D4e,"A",{href:!0});var M$r=n(rR);Pro=r(M$r,"DebertaV2Model"),M$r.forEach(t),$ro=r(D4e," (DeBERTa-v2 model)"),D4e.forEach(t),Iro=i(C),Vh=s(C,"LI",{});var j4e=n(Vh);gY=s(j4e,"STRONG",{});var E$r=n(gY);Dro=r(E$r,"deit"),E$r.forEach(t),jro=r(j4e," \u2014 "),tR=s(j4e,"A",{href:!0});var y$r=n(tR);Nro=r(y$r,"DeiTModel"),y$r.forEach(t),qro=r(j4e," (DeiT model)"),j4e.forEach(t),Gro=i(C),zh=s(C,"LI",{});var N4e=n(zh);hY=s(N4e,"STRONG",{});var w$r=n(hY);Oro=r(w$r,"detr"),w$r.forEach(t),Xro=r(N4e," \u2014 "),aR=s(N4e,"A",{href:!0});var A$r=n(aR);Vro=r(A$r,"DetrModel"),A$r.forEach(t),zro=r(N4e," (DETR model)"),N4e.forEach(t),Wro=i(C),Wh=s(C,"LI",{});var q4e=n(Wh);uY=s(q4e,"STRONG",{});var L$r=n(uY);Qro=r(L$r,"distilbert"),L$r.forEach(t),Hro=r(q4e," \u2014 "),sR=s(q4e,"A",{href:!0});var B$r=n(sR);Uro=r(B$r,"DistilBertModel"),B$r.forEach(t),Jro=r(q4e," (DistilBERT model)"),q4e.forEach(t),Yro=i(C),Qh=s(C,"LI",{});var G4e=n(Qh);pY=s(G4e,"STRONG",{});var x$r=n(pY);Kro=r(x$r,"dpr"),x$r.forEach(t),Zro=r(G4e," \u2014 "),nR=s(G4e,"A",{href:!0});var k$r=n(nR);eto=r(k$r,"DPRQuestionEncoder"),k$r.forEach(t),oto=r(G4e," (DPR model)"),G4e.forEach(t),rto=i(C),Hh=s(C,"LI",{});var O4e=n(Hh);_Y=s(O4e,"STRONG",{});var R$r=n(_Y);tto=r(R$r,"electra"),R$r.forEach(t),ato=r(O4e," \u2014 "),lR=s(O4e,"A",{href:!0});var S$r=n(lR);sto=r(S$r,"ElectraModel"),S$r.forEach(t),nto=r(O4e," (ELECTRA model)"),O4e.forEach(t),lto=i(C),Uh=s(C,"LI",{});var X4e=n(Uh);bY=s(X4e,"STRONG",{});var P$r=n(bY);ito=r(P$r,"flaubert"),P$r.forEach(t),dto=r(X4e," \u2014 "),iR=s(X4e,"A",{href:!0});var $$r=n(iR);cto=r($$r,"FlaubertModel"),$$r.forEach(t),mto=r(X4e," (FlauBERT model)"),X4e.forEach(t),fto=i(C),Jh=s(C,"LI",{});var V4e=n(Jh);vY=s(V4e,"STRONG",{});var I$r=n(vY);gto=r(I$r,"fnet"),I$r.forEach(t),hto=r(V4e," \u2014 "),dR=s(V4e,"A",{href:!0});var D$r=n(dR);uto=r(D$r,"FNetModel"),D$r.forEach(t),pto=r(V4e," (FNet model)"),V4e.forEach(t),_to=i(C),Yh=s(C,"LI",{});var z4e=n(Yh);TY=s(z4e,"STRONG",{});var j$r=n(TY);bto=r(j$r,"fsmt"),j$r.forEach(t),vto=r(z4e," \u2014 "),cR=s(z4e,"A",{href:!0});var N$r=n(cR);Tto=r(N$r,"FSMTModel"),N$r.forEach(t),Fto=r(z4e," (FairSeq Machine-Translation model)"),z4e.forEach(t),Cto=i(C),Sn=s(C,"LI",{});var a7=n(Sn);FY=s(a7,"STRONG",{});var q$r=n(FY);Mto=r(q$r,"funnel"),q$r.forEach(t),Eto=r(a7," \u2014 "),mR=s(a7,"A",{href:!0});var G$r=n(mR);yto=r(G$r,"FunnelModel"),G$r.forEach(t),wto=r(a7," or "),fR=s(a7,"A",{href:!0});var O$r=n(fR);Ato=r(O$r,"FunnelBaseModel"),O$r.forEach(t),Lto=r(a7," (Funnel Transformer model)"),a7.forEach(t),Bto=i(C),Kh=s(C,"LI",{});var W4e=n(Kh);CY=s(W4e,"STRONG",{});var X$r=n(CY);xto=r(X$r,"gpt2"),X$r.forEach(t),kto=r(W4e," \u2014 "),gR=s(W4e,"A",{href:!0});var V$r=n(gR);Rto=r(V$r,"GPT2Model"),V$r.forEach(t),Sto=r(W4e," (OpenAI GPT-2 model)"),W4e.forEach(t),Pto=i(C),Zh=s(C,"LI",{});var Q4e=n(Zh);MY=s(Q4e,"STRONG",{});var z$r=n(MY);$to=r(z$r,"gpt_neo"),z$r.forEach(t),Ito=r(Q4e," \u2014 "),hR=s(Q4e,"A",{href:!0});var W$r=n(hR);Dto=r(W$r,"GPTNeoModel"),W$r.forEach(t),jto=r(Q4e," (GPT Neo model)"),Q4e.forEach(t),Nto=i(C),eu=s(C,"LI",{});var H4e=n(eu);EY=s(H4e,"STRONG",{});var Q$r=n(EY);qto=r(Q$r,"gptj"),Q$r.forEach(t),Gto=r(H4e," \u2014 "),uR=s(H4e,"A",{href:!0});var H$r=n(uR);Oto=r(H$r,"GPTJModel"),H$r.forEach(t),Xto=r(H4e," (GPT-J model)"),H4e.forEach(t),Vto=i(C),ou=s(C,"LI",{});var U4e=n(ou);yY=s(U4e,"STRONG",{});var U$r=n(yY);zto=r(U$r,"hubert"),U$r.forEach(t),Wto=r(U4e," \u2014 "),pR=s(U4e,"A",{href:!0});var J$r=n(pR);Qto=r(J$r,"HubertModel"),J$r.forEach(t),Hto=r(U4e," (Hubert model)"),U4e.forEach(t),Uto=i(C),ru=s(C,"LI",{});var J4e=n(ru);wY=s(J4e,"STRONG",{});var Y$r=n(wY);Jto=r(Y$r,"ibert"),Y$r.forEach(t),Yto=r(J4e," \u2014 "),_R=s(J4e,"A",{href:!0});var K$r=n(_R);Kto=r(K$r,"IBertModel"),K$r.forEach(t),Zto=r(J4e," (I-BERT model)"),J4e.forEach(t),eao=i(C),tu=s(C,"LI",{});var Y4e=n(tu);AY=s(Y4e,"STRONG",{});var Z$r=n(AY);oao=r(Z$r,"imagegpt"),Z$r.forEach(t),rao=r(Y4e," \u2014 "),bR=s(Y4e,"A",{href:!0});var eIr=n(bR);tao=r(eIr,"ImageGPTModel"),eIr.forEach(t),aao=r(Y4e," (ImageGPT model)"),Y4e.forEach(t),sao=i(C),au=s(C,"LI",{});var K4e=n(au);LY=s(K4e,"STRONG",{});var oIr=n(LY);nao=r(oIr,"layoutlm"),oIr.forEach(t),lao=r(K4e," \u2014 "),vR=s(K4e,"A",{href:!0});var rIr=n(vR);iao=r(rIr,"LayoutLMModel"),rIr.forEach(t),dao=r(K4e," (LayoutLM model)"),K4e.forEach(t),cao=i(C),su=s(C,"LI",{});var Z4e=n(su);BY=s(Z4e,"STRONG",{});var tIr=n(BY);mao=r(tIr,"layoutlmv2"),tIr.forEach(t),fao=r(Z4e," \u2014 "),TR=s(Z4e,"A",{href:!0});var aIr=n(TR);gao=r(aIr,"LayoutLMv2Model"),aIr.forEach(t),hao=r(Z4e," (LayoutLMv2 model)"),Z4e.forEach(t),uao=i(C),nu=s(C,"LI",{});var eMe=n(nu);xY=s(eMe,"STRONG",{});var sIr=n(xY);pao=r(sIr,"led"),sIr.forEach(t),_ao=r(eMe," \u2014 "),FR=s(eMe,"A",{href:!0});var nIr=n(FR);bao=r(nIr,"LEDModel"),nIr.forEach(t),vao=r(eMe," (LED model)"),eMe.forEach(t),Tao=i(C),lu=s(C,"LI",{});var oMe=n(lu);kY=s(oMe,"STRONG",{});var lIr=n(kY);Fao=r(lIr,"longformer"),lIr.forEach(t),Cao=r(oMe," \u2014 "),CR=s(oMe,"A",{href:!0});var iIr=n(CR);Mao=r(iIr,"LongformerModel"),iIr.forEach(t),Eao=r(oMe," (Longformer model)"),oMe.forEach(t),yao=i(C),iu=s(C,"LI",{});var rMe=n(iu);RY=s(rMe,"STRONG",{});var dIr=n(RY);wao=r(dIr,"luke"),dIr.forEach(t),Aao=r(rMe," \u2014 "),MR=s(rMe,"A",{href:!0});var cIr=n(MR);Lao=r(cIr,"LukeModel"),cIr.forEach(t),Bao=r(rMe," (LUKE model)"),rMe.forEach(t),xao=i(C),du=s(C,"LI",{});var tMe=n(du);SY=s(tMe,"STRONG",{});var mIr=n(SY);kao=r(mIr,"lxmert"),mIr.forEach(t),Rao=r(tMe," \u2014 "),ER=s(tMe,"A",{href:!0});var fIr=n(ER);Sao=r(fIr,"LxmertModel"),fIr.forEach(t),Pao=r(tMe," (LXMERT model)"),tMe.forEach(t),$ao=i(C),cu=s(C,"LI",{});var aMe=n(cu);PY=s(aMe,"STRONG",{});var gIr=n(PY);Iao=r(gIr,"m2m_100"),gIr.forEach(t),Dao=r(aMe," \u2014 "),yR=s(aMe,"A",{href:!0});var hIr=n(yR);jao=r(hIr,"M2M100Model"),hIr.forEach(t),Nao=r(aMe," (M2M100 model)"),aMe.forEach(t),qao=i(C),mu=s(C,"LI",{});var sMe=n(mu);$Y=s(sMe,"STRONG",{});var uIr=n($Y);Gao=r(uIr,"marian"),uIr.forEach(t),Oao=r(sMe," \u2014 "),wR=s(sMe,"A",{href:!0});var pIr=n(wR);Xao=r(pIr,"MarianModel"),pIr.forEach(t),Vao=r(sMe," (Marian model)"),sMe.forEach(t),zao=i(C),fu=s(C,"LI",{});var nMe=n(fu);IY=s(nMe,"STRONG",{});var _Ir=n(IY);Wao=r(_Ir,"maskformer"),_Ir.forEach(t),Qao=r(nMe," \u2014 "),AR=s(nMe,"A",{href:!0});var bIr=n(AR);Hao=r(bIr,"MaskFormerModel"),bIr.forEach(t),Uao=r(nMe," (MaskFormer model)"),nMe.forEach(t),Jao=i(C),gu=s(C,"LI",{});var lMe=n(gu);DY=s(lMe,"STRONG",{});var vIr=n(DY);Yao=r(vIr,"mbart"),vIr.forEach(t),Kao=r(lMe," \u2014 "),LR=s(lMe,"A",{href:!0});var TIr=n(LR);Zao=r(TIr,"MBartModel"),TIr.forEach(t),eso=r(lMe," (mBART model)"),lMe.forEach(t),oso=i(C),hu=s(C,"LI",{});var iMe=n(hu);jY=s(iMe,"STRONG",{});var FIr=n(jY);rso=r(FIr,"megatron-bert"),FIr.forEach(t),tso=r(iMe," \u2014 "),BR=s(iMe,"A",{href:!0});var CIr=n(BR);aso=r(CIr,"MegatronBertModel"),CIr.forEach(t),sso=r(iMe," (MegatronBert model)"),iMe.forEach(t),nso=i(C),uu=s(C,"LI",{});var dMe=n(uu);NY=s(dMe,"STRONG",{});var MIr=n(NY);lso=r(MIr,"mobilebert"),MIr.forEach(t),iso=r(dMe," \u2014 "),xR=s(dMe,"A",{href:!0});var EIr=n(xR);dso=r(EIr,"MobileBertModel"),EIr.forEach(t),cso=r(dMe," (MobileBERT model)"),dMe.forEach(t),mso=i(C),pu=s(C,"LI",{});var cMe=n(pu);qY=s(cMe,"STRONG",{});var yIr=n(qY);fso=r(yIr,"mpnet"),yIr.forEach(t),gso=r(cMe," \u2014 "),kR=s(cMe,"A",{href:!0});var wIr=n(kR);hso=r(wIr,"MPNetModel"),wIr.forEach(t),uso=r(cMe," (MPNet model)"),cMe.forEach(t),pso=i(C),_u=s(C,"LI",{});var mMe=n(_u);GY=s(mMe,"STRONG",{});var AIr=n(GY);_so=r(AIr,"mt5"),AIr.forEach(t),bso=r(mMe," \u2014 "),RR=s(mMe,"A",{href:!0});var LIr=n(RR);vso=r(LIr,"MT5Model"),LIr.forEach(t),Tso=r(mMe," (mT5 model)"),mMe.forEach(t),Fso=i(C),bu=s(C,"LI",{});var fMe=n(bu);OY=s(fMe,"STRONG",{});var BIr=n(OY);Cso=r(BIr,"nystromformer"),BIr.forEach(t),Mso=r(fMe," \u2014 "),SR=s(fMe,"A",{href:!0});var xIr=n(SR);Eso=r(xIr,"NystromformerModel"),xIr.forEach(t),yso=r(fMe," (Nystromformer model)"),fMe.forEach(t),wso=i(C),vu=s(C,"LI",{});var gMe=n(vu);XY=s(gMe,"STRONG",{});var kIr=n(XY);Aso=r(kIr,"openai-gpt"),kIr.forEach(t),Lso=r(gMe," \u2014 "),PR=s(gMe,"A",{href:!0});var RIr=n(PR);Bso=r(RIr,"OpenAIGPTModel"),RIr.forEach(t),xso=r(gMe," (OpenAI GPT model)"),gMe.forEach(t),kso=i(C),Tu=s(C,"LI",{});var hMe=n(Tu);VY=s(hMe,"STRONG",{});var SIr=n(VY);Rso=r(SIr,"pegasus"),SIr.forEach(t),Sso=r(hMe," \u2014 "),$R=s(hMe,"A",{href:!0});var PIr=n($R);Pso=r(PIr,"PegasusModel"),PIr.forEach(t),$so=r(hMe," (Pegasus model)"),hMe.forEach(t),Iso=i(C),Fu=s(C,"LI",{});var uMe=n(Fu);zY=s(uMe,"STRONG",{});var $Ir=n(zY);Dso=r($Ir,"perceiver"),$Ir.forEach(t),jso=r(uMe," \u2014 "),IR=s(uMe,"A",{href:!0});var IIr=n(IR);Nso=r(IIr,"PerceiverModel"),IIr.forEach(t),qso=r(uMe," (Perceiver model)"),uMe.forEach(t),Gso=i(C),Cu=s(C,"LI",{});var pMe=n(Cu);WY=s(pMe,"STRONG",{});var DIr=n(WY);Oso=r(DIr,"plbart"),DIr.forEach(t),Xso=r(pMe," \u2014 "),DR=s(pMe,"A",{href:!0});var jIr=n(DR);Vso=r(jIr,"PLBartModel"),jIr.forEach(t),zso=r(pMe," (PLBart model)"),pMe.forEach(t),Wso=i(C),Mu=s(C,"LI",{});var _Me=n(Mu);QY=s(_Me,"STRONG",{});var NIr=n(QY);Qso=r(NIr,"poolformer"),NIr.forEach(t),Hso=r(_Me," \u2014 "),jR=s(_Me,"A",{href:!0});var qIr=n(jR);Uso=r(qIr,"PoolFormerModel"),qIr.forEach(t),Jso=r(_Me," (PoolFormer model)"),_Me.forEach(t),Yso=i(C),Eu=s(C,"LI",{});var bMe=n(Eu);HY=s(bMe,"STRONG",{});var GIr=n(HY);Kso=r(GIr,"prophetnet"),GIr.forEach(t),Zso=r(bMe," \u2014 "),NR=s(bMe,"A",{href:!0});var OIr=n(NR);eno=r(OIr,"ProphetNetModel"),OIr.forEach(t),ono=r(bMe," (ProphetNet model)"),bMe.forEach(t),rno=i(C),yu=s(C,"LI",{});var vMe=n(yu);UY=s(vMe,"STRONG",{});var XIr=n(UY);tno=r(XIr,"qdqbert"),XIr.forEach(t),ano=r(vMe," \u2014 "),qR=s(vMe,"A",{href:!0});var VIr=n(qR);sno=r(VIr,"QDQBertModel"),VIr.forEach(t),nno=r(vMe," (QDQBert model)"),vMe.forEach(t),lno=i(C),wu=s(C,"LI",{});var TMe=n(wu);JY=s(TMe,"STRONG",{});var zIr=n(JY);ino=r(zIr,"reformer"),zIr.forEach(t),dno=r(TMe," \u2014 "),GR=s(TMe,"A",{href:!0});var WIr=n(GR);cno=r(WIr,"ReformerModel"),WIr.forEach(t),mno=r(TMe," (Reformer model)"),TMe.forEach(t),fno=i(C),Au=s(C,"LI",{});var FMe=n(Au);YY=s(FMe,"STRONG",{});var QIr=n(YY);gno=r(QIr,"rembert"),QIr.forEach(t),hno=r(FMe," \u2014 "),OR=s(FMe,"A",{href:!0});var HIr=n(OR);uno=r(HIr,"RemBertModel"),HIr.forEach(t),pno=r(FMe," (RemBERT model)"),FMe.forEach(t),_no=i(C),Lu=s(C,"LI",{});var CMe=n(Lu);KY=s(CMe,"STRONG",{});var UIr=n(KY);bno=r(UIr,"retribert"),UIr.forEach(t),vno=r(CMe," \u2014 "),XR=s(CMe,"A",{href:!0});var JIr=n(XR);Tno=r(JIr,"RetriBertModel"),JIr.forEach(t),Fno=r(CMe," (RetriBERT model)"),CMe.forEach(t),Cno=i(C),Bu=s(C,"LI",{});var MMe=n(Bu);ZY=s(MMe,"STRONG",{});var YIr=n(ZY);Mno=r(YIr,"roberta"),YIr.forEach(t),Eno=r(MMe," \u2014 "),VR=s(MMe,"A",{href:!0});var KIr=n(VR);yno=r(KIr,"RobertaModel"),KIr.forEach(t),wno=r(MMe," (RoBERTa model)"),MMe.forEach(t),Ano=i(C),xu=s(C,"LI",{});var EMe=n(xu);eK=s(EMe,"STRONG",{});var ZIr=n(eK);Lno=r(ZIr,"roformer"),ZIr.forEach(t),Bno=r(EMe," \u2014 "),zR=s(EMe,"A",{href:!0});var eDr=n(zR);xno=r(eDr,"RoFormerModel"),eDr.forEach(t),kno=r(EMe," (RoFormer model)"),EMe.forEach(t),Rno=i(C),ku=s(C,"LI",{});var yMe=n(ku);oK=s(yMe,"STRONG",{});var oDr=n(oK);Sno=r(oDr,"segformer"),oDr.forEach(t),Pno=r(yMe," \u2014 "),WR=s(yMe,"A",{href:!0});var rDr=n(WR);$no=r(rDr,"SegformerModel"),rDr.forEach(t),Ino=r(yMe," (SegFormer model)"),yMe.forEach(t),Dno=i(C),Ru=s(C,"LI",{});var wMe=n(Ru);rK=s(wMe,"STRONG",{});var tDr=n(rK);jno=r(tDr,"sew"),tDr.forEach(t),Nno=r(wMe," \u2014 "),QR=s(wMe,"A",{href:!0});var aDr=n(QR);qno=r(aDr,"SEWModel"),aDr.forEach(t),Gno=r(wMe," (SEW model)"),wMe.forEach(t),Ono=i(C),Su=s(C,"LI",{});var AMe=n(Su);tK=s(AMe,"STRONG",{});var sDr=n(tK);Xno=r(sDr,"sew-d"),sDr.forEach(t),Vno=r(AMe," \u2014 "),HR=s(AMe,"A",{href:!0});var nDr=n(HR);zno=r(nDr,"SEWDModel"),nDr.forEach(t),Wno=r(AMe," (SEW-D model)"),AMe.forEach(t),Qno=i(C),Pu=s(C,"LI",{});var LMe=n(Pu);aK=s(LMe,"STRONG",{});var lDr=n(aK);Hno=r(lDr,"speech_to_text"),lDr.forEach(t),Uno=r(LMe," \u2014 "),UR=s(LMe,"A",{href:!0});var iDr=n(UR);Jno=r(iDr,"Speech2TextModel"),iDr.forEach(t),Yno=r(LMe," (Speech2Text model)"),LMe.forEach(t),Kno=i(C),$u=s(C,"LI",{});var BMe=n($u);sK=s(BMe,"STRONG",{});var dDr=n(sK);Zno=r(dDr,"splinter"),dDr.forEach(t),elo=r(BMe," \u2014 "),JR=s(BMe,"A",{href:!0});var cDr=n(JR);olo=r(cDr,"SplinterModel"),cDr.forEach(t),rlo=r(BMe," (Splinter model)"),BMe.forEach(t),tlo=i(C),Iu=s(C,"LI",{});var xMe=n(Iu);nK=s(xMe,"STRONG",{});var mDr=n(nK);alo=r(mDr,"squeezebert"),mDr.forEach(t),slo=r(xMe," \u2014 "),YR=s(xMe,"A",{href:!0});var fDr=n(YR);nlo=r(fDr,"SqueezeBertModel"),fDr.forEach(t),llo=r(xMe," (SqueezeBERT model)"),xMe.forEach(t),ilo=i(C),Du=s(C,"LI",{});var kMe=n(Du);lK=s(kMe,"STRONG",{});var gDr=n(lK);dlo=r(gDr,"swin"),gDr.forEach(t),clo=r(kMe," \u2014 "),KR=s(kMe,"A",{href:!0});var hDr=n(KR);mlo=r(hDr,"SwinModel"),hDr.forEach(t),flo=r(kMe," (Swin model)"),kMe.forEach(t),glo=i(C),ju=s(C,"LI",{});var RMe=n(ju);iK=s(RMe,"STRONG",{});var uDr=n(iK);hlo=r(uDr,"t5"),uDr.forEach(t),ulo=r(RMe," \u2014 "),ZR=s(RMe,"A",{href:!0});var pDr=n(ZR);plo=r(pDr,"T5Model"),pDr.forEach(t),_lo=r(RMe," (T5 model)"),RMe.forEach(t),blo=i(C),Nu=s(C,"LI",{});var SMe=n(Nu);dK=s(SMe,"STRONG",{});var _Dr=n(dK);vlo=r(_Dr,"tapas"),_Dr.forEach(t),Tlo=r(SMe," \u2014 "),eS=s(SMe,"A",{href:!0});var bDr=n(eS);Flo=r(bDr,"TapasModel"),bDr.forEach(t),Clo=r(SMe," (TAPAS model)"),SMe.forEach(t),Mlo=i(C),qu=s(C,"LI",{});var PMe=n(qu);cK=s(PMe,"STRONG",{});var vDr=n(cK);Elo=r(vDr,"transfo-xl"),vDr.forEach(t),ylo=r(PMe," \u2014 "),oS=s(PMe,"A",{href:!0});var TDr=n(oS);wlo=r(TDr,"TransfoXLModel"),TDr.forEach(t),Alo=r(PMe," (Transformer-XL model)"),PMe.forEach(t),Llo=i(C),Gu=s(C,"LI",{});var $Me=n(Gu);mK=s($Me,"STRONG",{});var FDr=n(mK);Blo=r(FDr,"unispeech"),FDr.forEach(t),xlo=r($Me," \u2014 "),rS=s($Me,"A",{href:!0});var CDr=n(rS);klo=r(CDr,"UniSpeechModel"),CDr.forEach(t),Rlo=r($Me," (UniSpeech model)"),$Me.forEach(t),Slo=i(C),Ou=s(C,"LI",{});var IMe=n(Ou);fK=s(IMe,"STRONG",{});var MDr=n(fK);Plo=r(MDr,"unispeech-sat"),MDr.forEach(t),$lo=r(IMe," \u2014 "),tS=s(IMe,"A",{href:!0});var EDr=n(tS);Ilo=r(EDr,"UniSpeechSatModel"),EDr.forEach(t),Dlo=r(IMe," (UniSpeechSat model)"),IMe.forEach(t),jlo=i(C),Xu=s(C,"LI",{});var DMe=n(Xu);gK=s(DMe,"STRONG",{});var yDr=n(gK);Nlo=r(yDr,"vilt"),yDr.forEach(t),qlo=r(DMe," \u2014 "),aS=s(DMe,"A",{href:!0});var wDr=n(aS);Glo=r(wDr,"ViltModel"),wDr.forEach(t),Olo=r(DMe," (ViLT model)"),DMe.forEach(t),Xlo=i(C),Vu=s(C,"LI",{});var jMe=n(Vu);hK=s(jMe,"STRONG",{});var ADr=n(hK);Vlo=r(ADr,"vision-text-dual-encoder"),ADr.forEach(t),zlo=r(jMe," \u2014 "),sS=s(jMe,"A",{href:!0});var LDr=n(sS);Wlo=r(LDr,"VisionTextDualEncoderModel"),LDr.forEach(t),Qlo=r(jMe," (VisionTextDualEncoder model)"),jMe.forEach(t),Hlo=i(C),zu=s(C,"LI",{});var NMe=n(zu);uK=s(NMe,"STRONG",{});var BDr=n(uK);Ulo=r(BDr,"visual_bert"),BDr.forEach(t),Jlo=r(NMe," \u2014 "),nS=s(NMe,"A",{href:!0});var xDr=n(nS);Ylo=r(xDr,"VisualBertModel"),xDr.forEach(t),Klo=r(NMe," (VisualBert model)"),NMe.forEach(t),Zlo=i(C),Wu=s(C,"LI",{});var qMe=n(Wu);pK=s(qMe,"STRONG",{});var kDr=n(pK);eio=r(kDr,"vit"),kDr.forEach(t),oio=r(qMe," \u2014 "),lS=s(qMe,"A",{href:!0});var RDr=n(lS);rio=r(RDr,"ViTModel"),RDr.forEach(t),tio=r(qMe," (ViT model)"),qMe.forEach(t),aio=i(C),Qu=s(C,"LI",{});var GMe=n(Qu);_K=s(GMe,"STRONG",{});var SDr=n(_K);sio=r(SDr,"vit_mae"),SDr.forEach(t),nio=r(GMe," \u2014 "),iS=s(GMe,"A",{href:!0});var PDr=n(iS);lio=r(PDr,"ViTMAEModel"),PDr.forEach(t),iio=r(GMe," (ViTMAE model)"),GMe.forEach(t),dio=i(C),Hu=s(C,"LI",{});var OMe=n(Hu);bK=s(OMe,"STRONG",{});var $Dr=n(bK);cio=r($Dr,"wav2vec2"),$Dr.forEach(t),mio=r(OMe," \u2014 "),dS=s(OMe,"A",{href:!0});var IDr=n(dS);fio=r(IDr,"Wav2Vec2Model"),IDr.forEach(t),gio=r(OMe," (Wav2Vec2 model)"),OMe.forEach(t),hio=i(C),Uu=s(C,"LI",{});var XMe=n(Uu);vK=s(XMe,"STRONG",{});var DDr=n(vK);uio=r(DDr,"wavlm"),DDr.forEach(t),pio=r(XMe," \u2014 "),cS=s(XMe,"A",{href:!0});var jDr=n(cS);_io=r(jDr,"WavLMModel"),jDr.forEach(t),bio=r(XMe," (WavLM model)"),XMe.forEach(t),vio=i(C),Ju=s(C,"LI",{});var VMe=n(Ju);TK=s(VMe,"STRONG",{});var NDr=n(TK);Tio=r(NDr,"xglm"),NDr.forEach(t),Fio=r(VMe," \u2014 "),mS=s(VMe,"A",{href:!0});var qDr=n(mS);Cio=r(qDr,"XGLMModel"),qDr.forEach(t),Mio=r(VMe," (XGLM model)"),VMe.forEach(t),Eio=i(C),Yu=s(C,"LI",{});var zMe=n(Yu);FK=s(zMe,"STRONG",{});var GDr=n(FK);yio=r(GDr,"xlm"),GDr.forEach(t),wio=r(zMe," \u2014 "),fS=s(zMe,"A",{href:!0});var ODr=n(fS);Aio=r(ODr,"XLMModel"),ODr.forEach(t),Lio=r(zMe," (XLM model)"),zMe.forEach(t),Bio=i(C),Ku=s(C,"LI",{});var WMe=n(Ku);CK=s(WMe,"STRONG",{});var XDr=n(CK);xio=r(XDr,"xlm-prophetnet"),XDr.forEach(t),kio=r(WMe," \u2014 "),gS=s(WMe,"A",{href:!0});var VDr=n(gS);Rio=r(VDr,"XLMProphetNetModel"),VDr.forEach(t),Sio=r(WMe," (XLMProphetNet model)"),WMe.forEach(t),Pio=i(C),Zu=s(C,"LI",{});var QMe=n(Zu);MK=s(QMe,"STRONG",{});var zDr=n(MK);$io=r(zDr,"xlm-roberta"),zDr.forEach(t),Iio=r(QMe," \u2014 "),hS=s(QMe,"A",{href:!0});var WDr=n(hS);Dio=r(WDr,"XLMRobertaModel"),WDr.forEach(t),jio=r(QMe," (XLM-RoBERTa model)"),QMe.forEach(t),Nio=i(C),ep=s(C,"LI",{});var HMe=n(ep);EK=s(HMe,"STRONG",{});var QDr=n(EK);qio=r(QDr,"xlm-roberta-xl"),QDr.forEach(t),Gio=r(HMe," \u2014 "),uS=s(HMe,"A",{href:!0});var HDr=n(uS);Oio=r(HDr,"XLMRobertaXLModel"),HDr.forEach(t),Xio=r(HMe," (XLM-RoBERTa-XL model)"),HMe.forEach(t),Vio=i(C),op=s(C,"LI",{});var UMe=n(op);yK=s(UMe,"STRONG",{});var UDr=n(yK);zio=r(UDr,"xlnet"),UDr.forEach(t),Wio=r(UMe," \u2014 "),pS=s(UMe,"A",{href:!0});var JDr=n(pS);Qio=r(JDr,"XLNetModel"),JDr.forEach(t),Hio=r(UMe," (XLNet model)"),UMe.forEach(t),Uio=i(C),rp=s(C,"LI",{});var JMe=n(rp);wK=s(JMe,"STRONG",{});var YDr=n(wK);Jio=r(YDr,"yoso"),YDr.forEach(t),Yio=r(JMe," \u2014 "),_S=s(JMe,"A",{href:!0});var KDr=n(_S);Kio=r(KDr,"YosoModel"),KDr.forEach(t),Zio=r(JMe," (YOSO model)"),JMe.forEach(t),C.forEach(t),edo=i($t),tp=s($t,"P",{});var YMe=n(tp);odo=r(YMe,"The model is set in evaluation mode by default using "),AK=s(YMe,"CODE",{});var ZDr=n(AK);rdo=r(ZDr,"model.eval()"),ZDr.forEach(t),tdo=r(YMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=s(YMe,"CODE",{});var ejr=n(LK);ado=r(ejr,"model.train()"),ejr.forEach(t),YMe.forEach(t),sdo=i($t),BK=s($t,"P",{});var ojr=n(BK);ndo=r(ojr,"Examples:"),ojr.forEach(t),ldo=i($t),f(iy.$$.fragment,$t),$t.forEach(t),qn.forEach(t),q9e=i(c),zi=s(c,"H2",{class:!0});var Qxe=n(zi);ap=s(Qxe,"A",{id:!0,class:!0,href:!0});var rjr=n(ap);xK=s(rjr,"SPAN",{});var tjr=n(xK);f(dy.$$.fragment,tjr),tjr.forEach(t),rjr.forEach(t),ido=i(Qxe),kK=s(Qxe,"SPAN",{});var ajr=n(kK);ddo=r(ajr,"AutoModelForPreTraining"),ajr.forEach(t),Qxe.forEach(t),G9e=i(c),Ho=s(c,"DIV",{class:!0});var On=n(Ho);f(cy.$$.fragment,On),cdo=i(On),Wi=s(On,"P",{});var $V=n(Wi);mdo=r($V,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RK=s($V,"CODE",{});var sjr=n(RK);fdo=r(sjr,"from_pretrained()"),sjr.forEach(t),gdo=r($V,"class method or the "),SK=s($V,"CODE",{});var njr=n(SK);hdo=r(njr,"from_config()"),njr.forEach(t),udo=r($V,`class
method.`),$V.forEach(t),pdo=i(On),my=s(On,"P",{});var Hxe=n(my);_do=r(Hxe,"This class cannot be instantiated directly using "),PK=s(Hxe,"CODE",{});var ljr=n(PK);bdo=r(ljr,"__init__()"),ljr.forEach(t),vdo=r(Hxe," (throws an error)."),Hxe.forEach(t),Tdo=i(On),Gr=s(On,"DIV",{class:!0});var Xn=n(Gr);f(fy.$$.fragment,Xn),Fdo=i(Xn),$K=s(Xn,"P",{});var ijr=n($K);Cdo=r(ijr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ijr.forEach(t),Mdo=i(Xn),Qi=s(Xn,"P",{});var IV=n(Qi);Edo=r(IV,`Note:
Loading a model from its configuration file does `),IK=s(IV,"STRONG",{});var djr=n(IK);ydo=r(djr,"not"),djr.forEach(t),wdo=r(IV,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=s(IV,"CODE",{});var cjr=n(DK);Ado=r(cjr,"from_pretrained()"),cjr.forEach(t),Ldo=r(IV,"to load the model weights."),IV.forEach(t),Bdo=i(Xn),jK=s(Xn,"P",{});var mjr=n(jK);xdo=r(mjr,"Examples:"),mjr.forEach(t),kdo=i(Xn),f(gy.$$.fragment,Xn),Xn.forEach(t),Rdo=i(On),Se=s(On,"DIV",{class:!0});var It=n(Se);f(hy.$$.fragment,It),Sdo=i(It),NK=s(It,"P",{});var fjr=n(NK);Pdo=r(fjr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fjr.forEach(t),$do=i(It),qa=s(It,"P",{});var A3=n(qa);Ido=r(A3,"The model class to instantiate is selected based on the "),qK=s(A3,"CODE",{});var gjr=n(qK);Ddo=r(gjr,"model_type"),gjr.forEach(t),jdo=r(A3,` property of the config object (either
passed as an argument or loaded from `),GK=s(A3,"CODE",{});var hjr=n(GK);Ndo=r(hjr,"pretrained_model_name_or_path"),hjr.forEach(t),qdo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=s(A3,"CODE",{});var ujr=n(OK);Gdo=r(ujr,"pretrained_model_name_or_path"),ujr.forEach(t),Odo=r(A3,":"),A3.forEach(t),Xdo=i(It),k=s(It,"UL",{});var S=n(k);sp=s(S,"LI",{});var KMe=n(sp);XK=s(KMe,"STRONG",{});var pjr=n(XK);Vdo=r(pjr,"albert"),pjr.forEach(t),zdo=r(KMe," \u2014 "),bS=s(KMe,"A",{href:!0});var _jr=n(bS);Wdo=r(_jr,"AlbertForPreTraining"),_jr.forEach(t),Qdo=r(KMe," (ALBERT model)"),KMe.forEach(t),Hdo=i(S),np=s(S,"LI",{});var ZMe=n(np);VK=s(ZMe,"STRONG",{});var bjr=n(VK);Udo=r(bjr,"bart"),bjr.forEach(t),Jdo=r(ZMe," \u2014 "),vS=s(ZMe,"A",{href:!0});var vjr=n(vS);Ydo=r(vjr,"BartForConditionalGeneration"),vjr.forEach(t),Kdo=r(ZMe," (BART model)"),ZMe.forEach(t),Zdo=i(S),lp=s(S,"LI",{});var eEe=n(lp);zK=s(eEe,"STRONG",{});var Tjr=n(zK);eco=r(Tjr,"bert"),Tjr.forEach(t),oco=r(eEe," \u2014 "),TS=s(eEe,"A",{href:!0});var Fjr=n(TS);rco=r(Fjr,"BertForPreTraining"),Fjr.forEach(t),tco=r(eEe," (BERT model)"),eEe.forEach(t),aco=i(S),ip=s(S,"LI",{});var oEe=n(ip);WK=s(oEe,"STRONG",{});var Cjr=n(WK);sco=r(Cjr,"big_bird"),Cjr.forEach(t),nco=r(oEe," \u2014 "),FS=s(oEe,"A",{href:!0});var Mjr=n(FS);lco=r(Mjr,"BigBirdForPreTraining"),Mjr.forEach(t),ico=r(oEe," (BigBird model)"),oEe.forEach(t),dco=i(S),dp=s(S,"LI",{});var rEe=n(dp);QK=s(rEe,"STRONG",{});var Ejr=n(QK);cco=r(Ejr,"camembert"),Ejr.forEach(t),mco=r(rEe," \u2014 "),CS=s(rEe,"A",{href:!0});var yjr=n(CS);fco=r(yjr,"CamembertForMaskedLM"),yjr.forEach(t),gco=r(rEe," (CamemBERT model)"),rEe.forEach(t),hco=i(S),cp=s(S,"LI",{});var tEe=n(cp);HK=s(tEe,"STRONG",{});var wjr=n(HK);uco=r(wjr,"ctrl"),wjr.forEach(t),pco=r(tEe," \u2014 "),MS=s(tEe,"A",{href:!0});var Ajr=n(MS);_co=r(Ajr,"CTRLLMHeadModel"),Ajr.forEach(t),bco=r(tEe," (CTRL model)"),tEe.forEach(t),vco=i(S),mp=s(S,"LI",{});var aEe=n(mp);UK=s(aEe,"STRONG",{});var Ljr=n(UK);Tco=r(Ljr,"data2vec-text"),Ljr.forEach(t),Fco=r(aEe," \u2014 "),ES=s(aEe,"A",{href:!0});var Bjr=n(ES);Cco=r(Bjr,"Data2VecTextForMaskedLM"),Bjr.forEach(t),Mco=r(aEe," (Data2VecText model)"),aEe.forEach(t),Eco=i(S),fp=s(S,"LI",{});var sEe=n(fp);JK=s(sEe,"STRONG",{});var xjr=n(JK);yco=r(xjr,"deberta"),xjr.forEach(t),wco=r(sEe," \u2014 "),yS=s(sEe,"A",{href:!0});var kjr=n(yS);Aco=r(kjr,"DebertaForMaskedLM"),kjr.forEach(t),Lco=r(sEe," (DeBERTa model)"),sEe.forEach(t),Bco=i(S),gp=s(S,"LI",{});var nEe=n(gp);YK=s(nEe,"STRONG",{});var Rjr=n(YK);xco=r(Rjr,"deberta-v2"),Rjr.forEach(t),kco=r(nEe," \u2014 "),wS=s(nEe,"A",{href:!0});var Sjr=n(wS);Rco=r(Sjr,"DebertaV2ForMaskedLM"),Sjr.forEach(t),Sco=r(nEe," (DeBERTa-v2 model)"),nEe.forEach(t),Pco=i(S),hp=s(S,"LI",{});var lEe=n(hp);KK=s(lEe,"STRONG",{});var Pjr=n(KK);$co=r(Pjr,"distilbert"),Pjr.forEach(t),Ico=r(lEe," \u2014 "),AS=s(lEe,"A",{href:!0});var $jr=n(AS);Dco=r($jr,"DistilBertForMaskedLM"),$jr.forEach(t),jco=r(lEe," (DistilBERT model)"),lEe.forEach(t),Nco=i(S),up=s(S,"LI",{});var iEe=n(up);ZK=s(iEe,"STRONG",{});var Ijr=n(ZK);qco=r(Ijr,"electra"),Ijr.forEach(t),Gco=r(iEe," \u2014 "),LS=s(iEe,"A",{href:!0});var Djr=n(LS);Oco=r(Djr,"ElectraForPreTraining"),Djr.forEach(t),Xco=r(iEe," (ELECTRA model)"),iEe.forEach(t),Vco=i(S),pp=s(S,"LI",{});var dEe=n(pp);eZ=s(dEe,"STRONG",{});var jjr=n(eZ);zco=r(jjr,"flaubert"),jjr.forEach(t),Wco=r(dEe," \u2014 "),BS=s(dEe,"A",{href:!0});var Njr=n(BS);Qco=r(Njr,"FlaubertWithLMHeadModel"),Njr.forEach(t),Hco=r(dEe," (FlauBERT model)"),dEe.forEach(t),Uco=i(S),_p=s(S,"LI",{});var cEe=n(_p);oZ=s(cEe,"STRONG",{});var qjr=n(oZ);Jco=r(qjr,"fnet"),qjr.forEach(t),Yco=r(cEe," \u2014 "),xS=s(cEe,"A",{href:!0});var Gjr=n(xS);Kco=r(Gjr,"FNetForPreTraining"),Gjr.forEach(t),Zco=r(cEe," (FNet model)"),cEe.forEach(t),emo=i(S),bp=s(S,"LI",{});var mEe=n(bp);rZ=s(mEe,"STRONG",{});var Ojr=n(rZ);omo=r(Ojr,"fsmt"),Ojr.forEach(t),rmo=r(mEe," \u2014 "),kS=s(mEe,"A",{href:!0});var Xjr=n(kS);tmo=r(Xjr,"FSMTForConditionalGeneration"),Xjr.forEach(t),amo=r(mEe," (FairSeq Machine-Translation model)"),mEe.forEach(t),smo=i(S),vp=s(S,"LI",{});var fEe=n(vp);tZ=s(fEe,"STRONG",{});var Vjr=n(tZ);nmo=r(Vjr,"funnel"),Vjr.forEach(t),lmo=r(fEe," \u2014 "),RS=s(fEe,"A",{href:!0});var zjr=n(RS);imo=r(zjr,"FunnelForPreTraining"),zjr.forEach(t),dmo=r(fEe," (Funnel Transformer model)"),fEe.forEach(t),cmo=i(S),Tp=s(S,"LI",{});var gEe=n(Tp);aZ=s(gEe,"STRONG",{});var Wjr=n(aZ);mmo=r(Wjr,"gpt2"),Wjr.forEach(t),fmo=r(gEe," \u2014 "),SS=s(gEe,"A",{href:!0});var Qjr=n(SS);gmo=r(Qjr,"GPT2LMHeadModel"),Qjr.forEach(t),hmo=r(gEe," (OpenAI GPT-2 model)"),gEe.forEach(t),umo=i(S),Fp=s(S,"LI",{});var hEe=n(Fp);sZ=s(hEe,"STRONG",{});var Hjr=n(sZ);pmo=r(Hjr,"ibert"),Hjr.forEach(t),_mo=r(hEe," \u2014 "),PS=s(hEe,"A",{href:!0});var Ujr=n(PS);bmo=r(Ujr,"IBertForMaskedLM"),Ujr.forEach(t),vmo=r(hEe," (I-BERT model)"),hEe.forEach(t),Tmo=i(S),Cp=s(S,"LI",{});var uEe=n(Cp);nZ=s(uEe,"STRONG",{});var Jjr=n(nZ);Fmo=r(Jjr,"layoutlm"),Jjr.forEach(t),Cmo=r(uEe," \u2014 "),$S=s(uEe,"A",{href:!0});var Yjr=n($S);Mmo=r(Yjr,"LayoutLMForMaskedLM"),Yjr.forEach(t),Emo=r(uEe," (LayoutLM model)"),uEe.forEach(t),ymo=i(S),Mp=s(S,"LI",{});var pEe=n(Mp);lZ=s(pEe,"STRONG",{});var Kjr=n(lZ);wmo=r(Kjr,"longformer"),Kjr.forEach(t),Amo=r(pEe," \u2014 "),IS=s(pEe,"A",{href:!0});var Zjr=n(IS);Lmo=r(Zjr,"LongformerForMaskedLM"),Zjr.forEach(t),Bmo=r(pEe," (Longformer model)"),pEe.forEach(t),xmo=i(S),Ep=s(S,"LI",{});var _Ee=n(Ep);iZ=s(_Ee,"STRONG",{});var eNr=n(iZ);kmo=r(eNr,"lxmert"),eNr.forEach(t),Rmo=r(_Ee," \u2014 "),DS=s(_Ee,"A",{href:!0});var oNr=n(DS);Smo=r(oNr,"LxmertForPreTraining"),oNr.forEach(t),Pmo=r(_Ee," (LXMERT model)"),_Ee.forEach(t),$mo=i(S),yp=s(S,"LI",{});var bEe=n(yp);dZ=s(bEe,"STRONG",{});var rNr=n(dZ);Imo=r(rNr,"megatron-bert"),rNr.forEach(t),Dmo=r(bEe," \u2014 "),jS=s(bEe,"A",{href:!0});var tNr=n(jS);jmo=r(tNr,"MegatronBertForPreTraining"),tNr.forEach(t),Nmo=r(bEe," (MegatronBert model)"),bEe.forEach(t),qmo=i(S),wp=s(S,"LI",{});var vEe=n(wp);cZ=s(vEe,"STRONG",{});var aNr=n(cZ);Gmo=r(aNr,"mobilebert"),aNr.forEach(t),Omo=r(vEe," \u2014 "),NS=s(vEe,"A",{href:!0});var sNr=n(NS);Xmo=r(sNr,"MobileBertForPreTraining"),sNr.forEach(t),Vmo=r(vEe," (MobileBERT model)"),vEe.forEach(t),zmo=i(S),Ap=s(S,"LI",{});var TEe=n(Ap);mZ=s(TEe,"STRONG",{});var nNr=n(mZ);Wmo=r(nNr,"mpnet"),nNr.forEach(t),Qmo=r(TEe," \u2014 "),qS=s(TEe,"A",{href:!0});var lNr=n(qS);Hmo=r(lNr,"MPNetForMaskedLM"),lNr.forEach(t),Umo=r(TEe," (MPNet model)"),TEe.forEach(t),Jmo=i(S),Lp=s(S,"LI",{});var FEe=n(Lp);fZ=s(FEe,"STRONG",{});var iNr=n(fZ);Ymo=r(iNr,"openai-gpt"),iNr.forEach(t),Kmo=r(FEe," \u2014 "),GS=s(FEe,"A",{href:!0});var dNr=n(GS);Zmo=r(dNr,"OpenAIGPTLMHeadModel"),dNr.forEach(t),efo=r(FEe," (OpenAI GPT model)"),FEe.forEach(t),ofo=i(S),Bp=s(S,"LI",{});var CEe=n(Bp);gZ=s(CEe,"STRONG",{});var cNr=n(gZ);rfo=r(cNr,"retribert"),cNr.forEach(t),tfo=r(CEe," \u2014 "),OS=s(CEe,"A",{href:!0});var mNr=n(OS);afo=r(mNr,"RetriBertModel"),mNr.forEach(t),sfo=r(CEe," (RetriBERT model)"),CEe.forEach(t),nfo=i(S),xp=s(S,"LI",{});var MEe=n(xp);hZ=s(MEe,"STRONG",{});var fNr=n(hZ);lfo=r(fNr,"roberta"),fNr.forEach(t),ifo=r(MEe," \u2014 "),XS=s(MEe,"A",{href:!0});var gNr=n(XS);dfo=r(gNr,"RobertaForMaskedLM"),gNr.forEach(t),cfo=r(MEe," (RoBERTa model)"),MEe.forEach(t),mfo=i(S),kp=s(S,"LI",{});var EEe=n(kp);uZ=s(EEe,"STRONG",{});var hNr=n(uZ);ffo=r(hNr,"squeezebert"),hNr.forEach(t),gfo=r(EEe," \u2014 "),VS=s(EEe,"A",{href:!0});var uNr=n(VS);hfo=r(uNr,"SqueezeBertForMaskedLM"),uNr.forEach(t),ufo=r(EEe," (SqueezeBERT model)"),EEe.forEach(t),pfo=i(S),Rp=s(S,"LI",{});var yEe=n(Rp);pZ=s(yEe,"STRONG",{});var pNr=n(pZ);_fo=r(pNr,"t5"),pNr.forEach(t),bfo=r(yEe," \u2014 "),zS=s(yEe,"A",{href:!0});var _Nr=n(zS);vfo=r(_Nr,"T5ForConditionalGeneration"),_Nr.forEach(t),Tfo=r(yEe," (T5 model)"),yEe.forEach(t),Ffo=i(S),Sp=s(S,"LI",{});var wEe=n(Sp);_Z=s(wEe,"STRONG",{});var bNr=n(_Z);Cfo=r(bNr,"tapas"),bNr.forEach(t),Mfo=r(wEe," \u2014 "),WS=s(wEe,"A",{href:!0});var vNr=n(WS);Efo=r(vNr,"TapasForMaskedLM"),vNr.forEach(t),yfo=r(wEe," (TAPAS model)"),wEe.forEach(t),wfo=i(S),Pp=s(S,"LI",{});var AEe=n(Pp);bZ=s(AEe,"STRONG",{});var TNr=n(bZ);Afo=r(TNr,"transfo-xl"),TNr.forEach(t),Lfo=r(AEe," \u2014 "),QS=s(AEe,"A",{href:!0});var FNr=n(QS);Bfo=r(FNr,"TransfoXLLMHeadModel"),FNr.forEach(t),xfo=r(AEe," (Transformer-XL model)"),AEe.forEach(t),kfo=i(S),$p=s(S,"LI",{});var LEe=n($p);vZ=s(LEe,"STRONG",{});var CNr=n(vZ);Rfo=r(CNr,"unispeech"),CNr.forEach(t),Sfo=r(LEe," \u2014 "),HS=s(LEe,"A",{href:!0});var MNr=n(HS);Pfo=r(MNr,"UniSpeechForPreTraining"),MNr.forEach(t),$fo=r(LEe," (UniSpeech model)"),LEe.forEach(t),Ifo=i(S),Ip=s(S,"LI",{});var BEe=n(Ip);TZ=s(BEe,"STRONG",{});var ENr=n(TZ);Dfo=r(ENr,"unispeech-sat"),ENr.forEach(t),jfo=r(BEe," \u2014 "),US=s(BEe,"A",{href:!0});var yNr=n(US);Nfo=r(yNr,"UniSpeechSatForPreTraining"),yNr.forEach(t),qfo=r(BEe," (UniSpeechSat model)"),BEe.forEach(t),Gfo=i(S),Dp=s(S,"LI",{});var xEe=n(Dp);FZ=s(xEe,"STRONG",{});var wNr=n(FZ);Ofo=r(wNr,"visual_bert"),wNr.forEach(t),Xfo=r(xEe," \u2014 "),JS=s(xEe,"A",{href:!0});var ANr=n(JS);Vfo=r(ANr,"VisualBertForPreTraining"),ANr.forEach(t),zfo=r(xEe," (VisualBert model)"),xEe.forEach(t),Wfo=i(S),jp=s(S,"LI",{});var kEe=n(jp);CZ=s(kEe,"STRONG",{});var LNr=n(CZ);Qfo=r(LNr,"vit_mae"),LNr.forEach(t),Hfo=r(kEe," \u2014 "),YS=s(kEe,"A",{href:!0});var BNr=n(YS);Ufo=r(BNr,"ViTMAEForPreTraining"),BNr.forEach(t),Jfo=r(kEe," (ViTMAE model)"),kEe.forEach(t),Yfo=i(S),Np=s(S,"LI",{});var REe=n(Np);MZ=s(REe,"STRONG",{});var xNr=n(MZ);Kfo=r(xNr,"wav2vec2"),xNr.forEach(t),Zfo=r(REe," \u2014 "),KS=s(REe,"A",{href:!0});var kNr=n(KS);ego=r(kNr,"Wav2Vec2ForPreTraining"),kNr.forEach(t),ogo=r(REe," (Wav2Vec2 model)"),REe.forEach(t),rgo=i(S),qp=s(S,"LI",{});var SEe=n(qp);EZ=s(SEe,"STRONG",{});var RNr=n(EZ);tgo=r(RNr,"xlm"),RNr.forEach(t),ago=r(SEe," \u2014 "),ZS=s(SEe,"A",{href:!0});var SNr=n(ZS);sgo=r(SNr,"XLMWithLMHeadModel"),SNr.forEach(t),ngo=r(SEe," (XLM model)"),SEe.forEach(t),lgo=i(S),Gp=s(S,"LI",{});var PEe=n(Gp);yZ=s(PEe,"STRONG",{});var PNr=n(yZ);igo=r(PNr,"xlm-roberta"),PNr.forEach(t),dgo=r(PEe," \u2014 "),eP=s(PEe,"A",{href:!0});var $Nr=n(eP);cgo=r($Nr,"XLMRobertaForMaskedLM"),$Nr.forEach(t),mgo=r(PEe," (XLM-RoBERTa model)"),PEe.forEach(t),fgo=i(S),Op=s(S,"LI",{});var $Ee=n(Op);wZ=s($Ee,"STRONG",{});var INr=n(wZ);ggo=r(INr,"xlm-roberta-xl"),INr.forEach(t),hgo=r($Ee," \u2014 "),oP=s($Ee,"A",{href:!0});var DNr=n(oP);ugo=r(DNr,"XLMRobertaXLForMaskedLM"),DNr.forEach(t),pgo=r($Ee," (XLM-RoBERTa-XL model)"),$Ee.forEach(t),_go=i(S),Xp=s(S,"LI",{});var IEe=n(Xp);AZ=s(IEe,"STRONG",{});var jNr=n(AZ);bgo=r(jNr,"xlnet"),jNr.forEach(t),vgo=r(IEe," \u2014 "),rP=s(IEe,"A",{href:!0});var NNr=n(rP);Tgo=r(NNr,"XLNetLMHeadModel"),NNr.forEach(t),Fgo=r(IEe," (XLNet model)"),IEe.forEach(t),S.forEach(t),Cgo=i(It),Vp=s(It,"P",{});var DEe=n(Vp);Mgo=r(DEe,"The model is set in evaluation mode by default using "),LZ=s(DEe,"CODE",{});var qNr=n(LZ);Ego=r(qNr,"model.eval()"),qNr.forEach(t),ygo=r(DEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BZ=s(DEe,"CODE",{});var GNr=n(BZ);wgo=r(GNr,"model.train()"),GNr.forEach(t),DEe.forEach(t),Ago=i(It),xZ=s(It,"P",{});var ONr=n(xZ);Lgo=r(ONr,"Examples:"),ONr.forEach(t),Bgo=i(It),f(uy.$$.fragment,It),It.forEach(t),On.forEach(t),O9e=i(c),Hi=s(c,"H2",{class:!0});var Uxe=n(Hi);zp=s(Uxe,"A",{id:!0,class:!0,href:!0});var XNr=n(zp);kZ=s(XNr,"SPAN",{});var VNr=n(kZ);f(py.$$.fragment,VNr),VNr.forEach(t),XNr.forEach(t),xgo=i(Uxe),RZ=s(Uxe,"SPAN",{});var zNr=n(RZ);kgo=r(zNr,"AutoModelForCausalLM"),zNr.forEach(t),Uxe.forEach(t),X9e=i(c),Uo=s(c,"DIV",{class:!0});var Vn=n(Uo);f(_y.$$.fragment,Vn),Rgo=i(Vn),Ui=s(Vn,"P",{});var DV=n(Ui);Sgo=r(DV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=s(DV,"CODE",{});var WNr=n(SZ);Pgo=r(WNr,"from_pretrained()"),WNr.forEach(t),$go=r(DV,"class method or the "),PZ=s(DV,"CODE",{});var QNr=n(PZ);Igo=r(QNr,"from_config()"),QNr.forEach(t),Dgo=r(DV,`class
method.`),DV.forEach(t),jgo=i(Vn),by=s(Vn,"P",{});var Jxe=n(by);Ngo=r(Jxe,"This class cannot be instantiated directly using "),$Z=s(Jxe,"CODE",{});var HNr=n($Z);qgo=r(HNr,"__init__()"),HNr.forEach(t),Ggo=r(Jxe," (throws an error)."),Jxe.forEach(t),Ogo=i(Vn),Or=s(Vn,"DIV",{class:!0});var zn=n(Or);f(vy.$$.fragment,zn),Xgo=i(zn),IZ=s(zn,"P",{});var UNr=n(IZ);Vgo=r(UNr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UNr.forEach(t),zgo=i(zn),Ji=s(zn,"P",{});var jV=n(Ji);Wgo=r(jV,`Note:
Loading a model from its configuration file does `),DZ=s(jV,"STRONG",{});var JNr=n(DZ);Qgo=r(JNr,"not"),JNr.forEach(t),Hgo=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=s(jV,"CODE",{});var YNr=n(jZ);Ugo=r(YNr,"from_pretrained()"),YNr.forEach(t),Jgo=r(jV,"to load the model weights."),jV.forEach(t),Ygo=i(zn),NZ=s(zn,"P",{});var KNr=n(NZ);Kgo=r(KNr,"Examples:"),KNr.forEach(t),Zgo=i(zn),f(Ty.$$.fragment,zn),zn.forEach(t),eho=i(Vn),Pe=s(Vn,"DIV",{class:!0});var Dt=n(Pe);f(Fy.$$.fragment,Dt),oho=i(Dt),qZ=s(Dt,"P",{});var ZNr=n(qZ);rho=r(ZNr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZNr.forEach(t),tho=i(Dt),Ga=s(Dt,"P",{});var L3=n(Ga);aho=r(L3,"The model class to instantiate is selected based on the "),GZ=s(L3,"CODE",{});var eqr=n(GZ);sho=r(eqr,"model_type"),eqr.forEach(t),nho=r(L3,` property of the config object (either
passed as an argument or loaded from `),OZ=s(L3,"CODE",{});var oqr=n(OZ);lho=r(oqr,"pretrained_model_name_or_path"),oqr.forEach(t),iho=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XZ=s(L3,"CODE",{});var rqr=n(XZ);dho=r(rqr,"pretrained_model_name_or_path"),rqr.forEach(t),cho=r(L3,":"),L3.forEach(t),mho=i(Dt),$=s(Dt,"UL",{});var D=n($);Wp=s(D,"LI",{});var jEe=n(Wp);VZ=s(jEe,"STRONG",{});var tqr=n(VZ);fho=r(tqr,"bart"),tqr.forEach(t),gho=r(jEe," \u2014 "),tP=s(jEe,"A",{href:!0});var aqr=n(tP);hho=r(aqr,"BartForCausalLM"),aqr.forEach(t),uho=r(jEe," (BART model)"),jEe.forEach(t),pho=i(D),Qp=s(D,"LI",{});var NEe=n(Qp);zZ=s(NEe,"STRONG",{});var sqr=n(zZ);_ho=r(sqr,"bert"),sqr.forEach(t),bho=r(NEe," \u2014 "),aP=s(NEe,"A",{href:!0});var nqr=n(aP);vho=r(nqr,"BertLMHeadModel"),nqr.forEach(t),Tho=r(NEe," (BERT model)"),NEe.forEach(t),Fho=i(D),Hp=s(D,"LI",{});var qEe=n(Hp);WZ=s(qEe,"STRONG",{});var lqr=n(WZ);Cho=r(lqr,"bert-generation"),lqr.forEach(t),Mho=r(qEe," \u2014 "),sP=s(qEe,"A",{href:!0});var iqr=n(sP);Eho=r(iqr,"BertGenerationDecoder"),iqr.forEach(t),yho=r(qEe," (Bert Generation model)"),qEe.forEach(t),who=i(D),Up=s(D,"LI",{});var GEe=n(Up);QZ=s(GEe,"STRONG",{});var dqr=n(QZ);Aho=r(dqr,"big_bird"),dqr.forEach(t),Lho=r(GEe," \u2014 "),nP=s(GEe,"A",{href:!0});var cqr=n(nP);Bho=r(cqr,"BigBirdForCausalLM"),cqr.forEach(t),xho=r(GEe," (BigBird model)"),GEe.forEach(t),kho=i(D),Jp=s(D,"LI",{});var OEe=n(Jp);HZ=s(OEe,"STRONG",{});var mqr=n(HZ);Rho=r(mqr,"bigbird_pegasus"),mqr.forEach(t),Sho=r(OEe," \u2014 "),lP=s(OEe,"A",{href:!0});var fqr=n(lP);Pho=r(fqr,"BigBirdPegasusForCausalLM"),fqr.forEach(t),$ho=r(OEe," (BigBirdPegasus model)"),OEe.forEach(t),Iho=i(D),Yp=s(D,"LI",{});var XEe=n(Yp);UZ=s(XEe,"STRONG",{});var gqr=n(UZ);Dho=r(gqr,"blenderbot"),gqr.forEach(t),jho=r(XEe," \u2014 "),iP=s(XEe,"A",{href:!0});var hqr=n(iP);Nho=r(hqr,"BlenderbotForCausalLM"),hqr.forEach(t),qho=r(XEe," (Blenderbot model)"),XEe.forEach(t),Gho=i(D),Kp=s(D,"LI",{});var VEe=n(Kp);JZ=s(VEe,"STRONG",{});var uqr=n(JZ);Oho=r(uqr,"blenderbot-small"),uqr.forEach(t),Xho=r(VEe," \u2014 "),dP=s(VEe,"A",{href:!0});var pqr=n(dP);Vho=r(pqr,"BlenderbotSmallForCausalLM"),pqr.forEach(t),zho=r(VEe," (BlenderbotSmall model)"),VEe.forEach(t),Who=i(D),Zp=s(D,"LI",{});var zEe=n(Zp);YZ=s(zEe,"STRONG",{});var _qr=n(YZ);Qho=r(_qr,"camembert"),_qr.forEach(t),Hho=r(zEe," \u2014 "),cP=s(zEe,"A",{href:!0});var bqr=n(cP);Uho=r(bqr,"CamembertForCausalLM"),bqr.forEach(t),Jho=r(zEe," (CamemBERT model)"),zEe.forEach(t),Yho=i(D),e_=s(D,"LI",{});var WEe=n(e_);KZ=s(WEe,"STRONG",{});var vqr=n(KZ);Kho=r(vqr,"ctrl"),vqr.forEach(t),Zho=r(WEe," \u2014 "),mP=s(WEe,"A",{href:!0});var Tqr=n(mP);euo=r(Tqr,"CTRLLMHeadModel"),Tqr.forEach(t),ouo=r(WEe," (CTRL model)"),WEe.forEach(t),ruo=i(D),o_=s(D,"LI",{});var QEe=n(o_);ZZ=s(QEe,"STRONG",{});var Fqr=n(ZZ);tuo=r(Fqr,"data2vec-text"),Fqr.forEach(t),auo=r(QEe," \u2014 "),fP=s(QEe,"A",{href:!0});var Cqr=n(fP);suo=r(Cqr,"Data2VecTextForCausalLM"),Cqr.forEach(t),nuo=r(QEe," (Data2VecText model)"),QEe.forEach(t),luo=i(D),r_=s(D,"LI",{});var HEe=n(r_);eee=s(HEe,"STRONG",{});var Mqr=n(eee);iuo=r(Mqr,"electra"),Mqr.forEach(t),duo=r(HEe," \u2014 "),gP=s(HEe,"A",{href:!0});var Eqr=n(gP);cuo=r(Eqr,"ElectraForCausalLM"),Eqr.forEach(t),muo=r(HEe," (ELECTRA model)"),HEe.forEach(t),fuo=i(D),t_=s(D,"LI",{});var UEe=n(t_);oee=s(UEe,"STRONG",{});var yqr=n(oee);guo=r(yqr,"gpt2"),yqr.forEach(t),huo=r(UEe," \u2014 "),hP=s(UEe,"A",{href:!0});var wqr=n(hP);uuo=r(wqr,"GPT2LMHeadModel"),wqr.forEach(t),puo=r(UEe," (OpenAI GPT-2 model)"),UEe.forEach(t),_uo=i(D),a_=s(D,"LI",{});var JEe=n(a_);ree=s(JEe,"STRONG",{});var Aqr=n(ree);buo=r(Aqr,"gpt_neo"),Aqr.forEach(t),vuo=r(JEe," \u2014 "),uP=s(JEe,"A",{href:!0});var Lqr=n(uP);Tuo=r(Lqr,"GPTNeoForCausalLM"),Lqr.forEach(t),Fuo=r(JEe," (GPT Neo model)"),JEe.forEach(t),Cuo=i(D),s_=s(D,"LI",{});var YEe=n(s_);tee=s(YEe,"STRONG",{});var Bqr=n(tee);Muo=r(Bqr,"gptj"),Bqr.forEach(t),Euo=r(YEe," \u2014 "),pP=s(YEe,"A",{href:!0});var xqr=n(pP);yuo=r(xqr,"GPTJForCausalLM"),xqr.forEach(t),wuo=r(YEe," (GPT-J model)"),YEe.forEach(t),Auo=i(D),n_=s(D,"LI",{});var KEe=n(n_);aee=s(KEe,"STRONG",{});var kqr=n(aee);Luo=r(kqr,"marian"),kqr.forEach(t),Buo=r(KEe," \u2014 "),_P=s(KEe,"A",{href:!0});var Rqr=n(_P);xuo=r(Rqr,"MarianForCausalLM"),Rqr.forEach(t),kuo=r(KEe," (Marian model)"),KEe.forEach(t),Ruo=i(D),l_=s(D,"LI",{});var ZEe=n(l_);see=s(ZEe,"STRONG",{});var Sqr=n(see);Suo=r(Sqr,"mbart"),Sqr.forEach(t),Puo=r(ZEe," \u2014 "),bP=s(ZEe,"A",{href:!0});var Pqr=n(bP);$uo=r(Pqr,"MBartForCausalLM"),Pqr.forEach(t),Iuo=r(ZEe," (mBART model)"),ZEe.forEach(t),Duo=i(D),i_=s(D,"LI",{});var e3e=n(i_);nee=s(e3e,"STRONG",{});var $qr=n(nee);juo=r($qr,"megatron-bert"),$qr.forEach(t),Nuo=r(e3e," \u2014 "),vP=s(e3e,"A",{href:!0});var Iqr=n(vP);quo=r(Iqr,"MegatronBertForCausalLM"),Iqr.forEach(t),Guo=r(e3e," (MegatronBert model)"),e3e.forEach(t),Ouo=i(D),d_=s(D,"LI",{});var o3e=n(d_);lee=s(o3e,"STRONG",{});var Dqr=n(lee);Xuo=r(Dqr,"openai-gpt"),Dqr.forEach(t),Vuo=r(o3e," \u2014 "),TP=s(o3e,"A",{href:!0});var jqr=n(TP);zuo=r(jqr,"OpenAIGPTLMHeadModel"),jqr.forEach(t),Wuo=r(o3e," (OpenAI GPT model)"),o3e.forEach(t),Quo=i(D),c_=s(D,"LI",{});var r3e=n(c_);iee=s(r3e,"STRONG",{});var Nqr=n(iee);Huo=r(Nqr,"pegasus"),Nqr.forEach(t),Uuo=r(r3e," \u2014 "),FP=s(r3e,"A",{href:!0});var qqr=n(FP);Juo=r(qqr,"PegasusForCausalLM"),qqr.forEach(t),Yuo=r(r3e," (Pegasus model)"),r3e.forEach(t),Kuo=i(D),m_=s(D,"LI",{});var t3e=n(m_);dee=s(t3e,"STRONG",{});var Gqr=n(dee);Zuo=r(Gqr,"plbart"),Gqr.forEach(t),epo=r(t3e," \u2014 "),CP=s(t3e,"A",{href:!0});var Oqr=n(CP);opo=r(Oqr,"PLBartForCausalLM"),Oqr.forEach(t),rpo=r(t3e," (PLBart model)"),t3e.forEach(t),tpo=i(D),f_=s(D,"LI",{});var a3e=n(f_);cee=s(a3e,"STRONG",{});var Xqr=n(cee);apo=r(Xqr,"prophetnet"),Xqr.forEach(t),spo=r(a3e," \u2014 "),MP=s(a3e,"A",{href:!0});var Vqr=n(MP);npo=r(Vqr,"ProphetNetForCausalLM"),Vqr.forEach(t),lpo=r(a3e," (ProphetNet model)"),a3e.forEach(t),ipo=i(D),g_=s(D,"LI",{});var s3e=n(g_);mee=s(s3e,"STRONG",{});var zqr=n(mee);dpo=r(zqr,"qdqbert"),zqr.forEach(t),cpo=r(s3e," \u2014 "),EP=s(s3e,"A",{href:!0});var Wqr=n(EP);mpo=r(Wqr,"QDQBertLMHeadModel"),Wqr.forEach(t),fpo=r(s3e," (QDQBert model)"),s3e.forEach(t),gpo=i(D),h_=s(D,"LI",{});var n3e=n(h_);fee=s(n3e,"STRONG",{});var Qqr=n(fee);hpo=r(Qqr,"reformer"),Qqr.forEach(t),upo=r(n3e," \u2014 "),yP=s(n3e,"A",{href:!0});var Hqr=n(yP);ppo=r(Hqr,"ReformerModelWithLMHead"),Hqr.forEach(t),_po=r(n3e," (Reformer model)"),n3e.forEach(t),bpo=i(D),u_=s(D,"LI",{});var l3e=n(u_);gee=s(l3e,"STRONG",{});var Uqr=n(gee);vpo=r(Uqr,"rembert"),Uqr.forEach(t),Tpo=r(l3e," \u2014 "),wP=s(l3e,"A",{href:!0});var Jqr=n(wP);Fpo=r(Jqr,"RemBertForCausalLM"),Jqr.forEach(t),Cpo=r(l3e," (RemBERT model)"),l3e.forEach(t),Mpo=i(D),p_=s(D,"LI",{});var i3e=n(p_);hee=s(i3e,"STRONG",{});var Yqr=n(hee);Epo=r(Yqr,"roberta"),Yqr.forEach(t),ypo=r(i3e," \u2014 "),AP=s(i3e,"A",{href:!0});var Kqr=n(AP);wpo=r(Kqr,"RobertaForCausalLM"),Kqr.forEach(t),Apo=r(i3e," (RoBERTa model)"),i3e.forEach(t),Lpo=i(D),__=s(D,"LI",{});var d3e=n(__);uee=s(d3e,"STRONG",{});var Zqr=n(uee);Bpo=r(Zqr,"roformer"),Zqr.forEach(t),xpo=r(d3e," \u2014 "),LP=s(d3e,"A",{href:!0});var eGr=n(LP);kpo=r(eGr,"RoFormerForCausalLM"),eGr.forEach(t),Rpo=r(d3e," (RoFormer model)"),d3e.forEach(t),Spo=i(D),b_=s(D,"LI",{});var c3e=n(b_);pee=s(c3e,"STRONG",{});var oGr=n(pee);Ppo=r(oGr,"speech_to_text_2"),oGr.forEach(t),$po=r(c3e," \u2014 "),BP=s(c3e,"A",{href:!0});var rGr=n(BP);Ipo=r(rGr,"Speech2Text2ForCausalLM"),rGr.forEach(t),Dpo=r(c3e," (Speech2Text2 model)"),c3e.forEach(t),jpo=i(D),v_=s(D,"LI",{});var m3e=n(v_);_ee=s(m3e,"STRONG",{});var tGr=n(_ee);Npo=r(tGr,"transfo-xl"),tGr.forEach(t),qpo=r(m3e," \u2014 "),xP=s(m3e,"A",{href:!0});var aGr=n(xP);Gpo=r(aGr,"TransfoXLLMHeadModel"),aGr.forEach(t),Opo=r(m3e," (Transformer-XL model)"),m3e.forEach(t),Xpo=i(D),T_=s(D,"LI",{});var f3e=n(T_);bee=s(f3e,"STRONG",{});var sGr=n(bee);Vpo=r(sGr,"trocr"),sGr.forEach(t),zpo=r(f3e," \u2014 "),kP=s(f3e,"A",{href:!0});var nGr=n(kP);Wpo=r(nGr,"TrOCRForCausalLM"),nGr.forEach(t),Qpo=r(f3e," (TrOCR model)"),f3e.forEach(t),Hpo=i(D),F_=s(D,"LI",{});var g3e=n(F_);vee=s(g3e,"STRONG",{});var lGr=n(vee);Upo=r(lGr,"xglm"),lGr.forEach(t),Jpo=r(g3e," \u2014 "),RP=s(g3e,"A",{href:!0});var iGr=n(RP);Ypo=r(iGr,"XGLMForCausalLM"),iGr.forEach(t),Kpo=r(g3e," (XGLM model)"),g3e.forEach(t),Zpo=i(D),C_=s(D,"LI",{});var h3e=n(C_);Tee=s(h3e,"STRONG",{});var dGr=n(Tee);e_o=r(dGr,"xlm"),dGr.forEach(t),o_o=r(h3e," \u2014 "),SP=s(h3e,"A",{href:!0});var cGr=n(SP);r_o=r(cGr,"XLMWithLMHeadModel"),cGr.forEach(t),t_o=r(h3e," (XLM model)"),h3e.forEach(t),a_o=i(D),M_=s(D,"LI",{});var u3e=n(M_);Fee=s(u3e,"STRONG",{});var mGr=n(Fee);s_o=r(mGr,"xlm-prophetnet"),mGr.forEach(t),n_o=r(u3e," \u2014 "),PP=s(u3e,"A",{href:!0});var fGr=n(PP);l_o=r(fGr,"XLMProphetNetForCausalLM"),fGr.forEach(t),i_o=r(u3e," (XLMProphetNet model)"),u3e.forEach(t),d_o=i(D),E_=s(D,"LI",{});var p3e=n(E_);Cee=s(p3e,"STRONG",{});var gGr=n(Cee);c_o=r(gGr,"xlm-roberta"),gGr.forEach(t),m_o=r(p3e," \u2014 "),$P=s(p3e,"A",{href:!0});var hGr=n($P);f_o=r(hGr,"XLMRobertaForCausalLM"),hGr.forEach(t),g_o=r(p3e," (XLM-RoBERTa model)"),p3e.forEach(t),h_o=i(D),y_=s(D,"LI",{});var _3e=n(y_);Mee=s(_3e,"STRONG",{});var uGr=n(Mee);u_o=r(uGr,"xlm-roberta-xl"),uGr.forEach(t),p_o=r(_3e," \u2014 "),IP=s(_3e,"A",{href:!0});var pGr=n(IP);__o=r(pGr,"XLMRobertaXLForCausalLM"),pGr.forEach(t),b_o=r(_3e," (XLM-RoBERTa-XL model)"),_3e.forEach(t),v_o=i(D),w_=s(D,"LI",{});var b3e=n(w_);Eee=s(b3e,"STRONG",{});var _Gr=n(Eee);T_o=r(_Gr,"xlnet"),_Gr.forEach(t),F_o=r(b3e," \u2014 "),DP=s(b3e,"A",{href:!0});var bGr=n(DP);C_o=r(bGr,"XLNetLMHeadModel"),bGr.forEach(t),M_o=r(b3e," (XLNet model)"),b3e.forEach(t),D.forEach(t),E_o=i(Dt),A_=s(Dt,"P",{});var v3e=n(A_);y_o=r(v3e,"The model is set in evaluation mode by default using "),yee=s(v3e,"CODE",{});var vGr=n(yee);w_o=r(vGr,"model.eval()"),vGr.forEach(t),A_o=r(v3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wee=s(v3e,"CODE",{});var TGr=n(wee);L_o=r(TGr,"model.train()"),TGr.forEach(t),v3e.forEach(t),B_o=i(Dt),Aee=s(Dt,"P",{});var FGr=n(Aee);x_o=r(FGr,"Examples:"),FGr.forEach(t),k_o=i(Dt),f(Cy.$$.fragment,Dt),Dt.forEach(t),Vn.forEach(t),V9e=i(c),Yi=s(c,"H2",{class:!0});var Yxe=n(Yi);L_=s(Yxe,"A",{id:!0,class:!0,href:!0});var CGr=n(L_);Lee=s(CGr,"SPAN",{});var MGr=n(Lee);f(My.$$.fragment,MGr),MGr.forEach(t),CGr.forEach(t),R_o=i(Yxe),Bee=s(Yxe,"SPAN",{});var EGr=n(Bee);S_o=r(EGr,"AutoModelForMaskedLM"),EGr.forEach(t),Yxe.forEach(t),z9e=i(c),Jo=s(c,"DIV",{class:!0});var Wn=n(Jo);f(Ey.$$.fragment,Wn),P_o=i(Wn),Ki=s(Wn,"P",{});var NV=n(Ki);$_o=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xee=s(NV,"CODE",{});var yGr=n(xee);I_o=r(yGr,"from_pretrained()"),yGr.forEach(t),D_o=r(NV,"class method or the "),kee=s(NV,"CODE",{});var wGr=n(kee);j_o=r(wGr,"from_config()"),wGr.forEach(t),N_o=r(NV,`class
method.`),NV.forEach(t),q_o=i(Wn),yy=s(Wn,"P",{});var Kxe=n(yy);G_o=r(Kxe,"This class cannot be instantiated directly using "),Ree=s(Kxe,"CODE",{});var AGr=n(Ree);O_o=r(AGr,"__init__()"),AGr.forEach(t),X_o=r(Kxe," (throws an error)."),Kxe.forEach(t),V_o=i(Wn),Xr=s(Wn,"DIV",{class:!0});var Qn=n(Xr);f(wy.$$.fragment,Qn),z_o=i(Qn),See=s(Qn,"P",{});var LGr=n(See);W_o=r(LGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LGr.forEach(t),Q_o=i(Qn),Zi=s(Qn,"P",{});var qV=n(Zi);H_o=r(qV,`Note:
Loading a model from its configuration file does `),Pee=s(qV,"STRONG",{});var BGr=n(Pee);U_o=r(BGr,"not"),BGr.forEach(t),J_o=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=s(qV,"CODE",{});var xGr=n($ee);Y_o=r(xGr,"from_pretrained()"),xGr.forEach(t),K_o=r(qV,"to load the model weights."),qV.forEach(t),Z_o=i(Qn),Iee=s(Qn,"P",{});var kGr=n(Iee);ebo=r(kGr,"Examples:"),kGr.forEach(t),obo=i(Qn),f(Ay.$$.fragment,Qn),Qn.forEach(t),rbo=i(Wn),$e=s(Wn,"DIV",{class:!0});var jt=n($e);f(Ly.$$.fragment,jt),tbo=i(jt),Dee=s(jt,"P",{});var RGr=n(Dee);abo=r(RGr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RGr.forEach(t),sbo=i(jt),Oa=s(jt,"P",{});var B3=n(Oa);nbo=r(B3,"The model class to instantiate is selected based on the "),jee=s(B3,"CODE",{});var SGr=n(jee);lbo=r(SGr,"model_type"),SGr.forEach(t),ibo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Nee=s(B3,"CODE",{});var PGr=n(Nee);dbo=r(PGr,"pretrained_model_name_or_path"),PGr.forEach(t),cbo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qee=s(B3,"CODE",{});var $Gr=n(qee);mbo=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),fbo=r(B3,":"),B3.forEach(t),gbo=i(jt),I=s(jt,"UL",{});var j=n(I);B_=s(j,"LI",{});var T3e=n(B_);Gee=s(T3e,"STRONG",{});var IGr=n(Gee);hbo=r(IGr,"albert"),IGr.forEach(t),ubo=r(T3e," \u2014 "),jP=s(T3e,"A",{href:!0});var DGr=n(jP);pbo=r(DGr,"AlbertForMaskedLM"),DGr.forEach(t),_bo=r(T3e," (ALBERT model)"),T3e.forEach(t),bbo=i(j),x_=s(j,"LI",{});var F3e=n(x_);Oee=s(F3e,"STRONG",{});var jGr=n(Oee);vbo=r(jGr,"bart"),jGr.forEach(t),Tbo=r(F3e," \u2014 "),NP=s(F3e,"A",{href:!0});var NGr=n(NP);Fbo=r(NGr,"BartForConditionalGeneration"),NGr.forEach(t),Cbo=r(F3e," (BART model)"),F3e.forEach(t),Mbo=i(j),k_=s(j,"LI",{});var C3e=n(k_);Xee=s(C3e,"STRONG",{});var qGr=n(Xee);Ebo=r(qGr,"bert"),qGr.forEach(t),ybo=r(C3e," \u2014 "),qP=s(C3e,"A",{href:!0});var GGr=n(qP);wbo=r(GGr,"BertForMaskedLM"),GGr.forEach(t),Abo=r(C3e," (BERT model)"),C3e.forEach(t),Lbo=i(j),R_=s(j,"LI",{});var M3e=n(R_);Vee=s(M3e,"STRONG",{});var OGr=n(Vee);Bbo=r(OGr,"big_bird"),OGr.forEach(t),xbo=r(M3e," \u2014 "),GP=s(M3e,"A",{href:!0});var XGr=n(GP);kbo=r(XGr,"BigBirdForMaskedLM"),XGr.forEach(t),Rbo=r(M3e," (BigBird model)"),M3e.forEach(t),Sbo=i(j),S_=s(j,"LI",{});var E3e=n(S_);zee=s(E3e,"STRONG",{});var VGr=n(zee);Pbo=r(VGr,"camembert"),VGr.forEach(t),$bo=r(E3e," \u2014 "),OP=s(E3e,"A",{href:!0});var zGr=n(OP);Ibo=r(zGr,"CamembertForMaskedLM"),zGr.forEach(t),Dbo=r(E3e," (CamemBERT model)"),E3e.forEach(t),jbo=i(j),P_=s(j,"LI",{});var y3e=n(P_);Wee=s(y3e,"STRONG",{});var WGr=n(Wee);Nbo=r(WGr,"convbert"),WGr.forEach(t),qbo=r(y3e," \u2014 "),XP=s(y3e,"A",{href:!0});var QGr=n(XP);Gbo=r(QGr,"ConvBertForMaskedLM"),QGr.forEach(t),Obo=r(y3e," (ConvBERT model)"),y3e.forEach(t),Xbo=i(j),$_=s(j,"LI",{});var w3e=n($_);Qee=s(w3e,"STRONG",{});var HGr=n(Qee);Vbo=r(HGr,"data2vec-text"),HGr.forEach(t),zbo=r(w3e," \u2014 "),VP=s(w3e,"A",{href:!0});var UGr=n(VP);Wbo=r(UGr,"Data2VecTextForMaskedLM"),UGr.forEach(t),Qbo=r(w3e," (Data2VecText model)"),w3e.forEach(t),Hbo=i(j),I_=s(j,"LI",{});var A3e=n(I_);Hee=s(A3e,"STRONG",{});var JGr=n(Hee);Ubo=r(JGr,"deberta"),JGr.forEach(t),Jbo=r(A3e," \u2014 "),zP=s(A3e,"A",{href:!0});var YGr=n(zP);Ybo=r(YGr,"DebertaForMaskedLM"),YGr.forEach(t),Kbo=r(A3e," (DeBERTa model)"),A3e.forEach(t),Zbo=i(j),D_=s(j,"LI",{});var L3e=n(D_);Uee=s(L3e,"STRONG",{});var KGr=n(Uee);e2o=r(KGr,"deberta-v2"),KGr.forEach(t),o2o=r(L3e," \u2014 "),WP=s(L3e,"A",{href:!0});var ZGr=n(WP);r2o=r(ZGr,"DebertaV2ForMaskedLM"),ZGr.forEach(t),t2o=r(L3e," (DeBERTa-v2 model)"),L3e.forEach(t),a2o=i(j),j_=s(j,"LI",{});var B3e=n(j_);Jee=s(B3e,"STRONG",{});var eOr=n(Jee);s2o=r(eOr,"distilbert"),eOr.forEach(t),n2o=r(B3e," \u2014 "),QP=s(B3e,"A",{href:!0});var oOr=n(QP);l2o=r(oOr,"DistilBertForMaskedLM"),oOr.forEach(t),i2o=r(B3e," (DistilBERT model)"),B3e.forEach(t),d2o=i(j),N_=s(j,"LI",{});var x3e=n(N_);Yee=s(x3e,"STRONG",{});var rOr=n(Yee);c2o=r(rOr,"electra"),rOr.forEach(t),m2o=r(x3e," \u2014 "),HP=s(x3e,"A",{href:!0});var tOr=n(HP);f2o=r(tOr,"ElectraForMaskedLM"),tOr.forEach(t),g2o=r(x3e," (ELECTRA model)"),x3e.forEach(t),h2o=i(j),q_=s(j,"LI",{});var k3e=n(q_);Kee=s(k3e,"STRONG",{});var aOr=n(Kee);u2o=r(aOr,"flaubert"),aOr.forEach(t),p2o=r(k3e," \u2014 "),UP=s(k3e,"A",{href:!0});var sOr=n(UP);_2o=r(sOr,"FlaubertWithLMHeadModel"),sOr.forEach(t),b2o=r(k3e," (FlauBERT model)"),k3e.forEach(t),v2o=i(j),G_=s(j,"LI",{});var R3e=n(G_);Zee=s(R3e,"STRONG",{});var nOr=n(Zee);T2o=r(nOr,"fnet"),nOr.forEach(t),F2o=r(R3e," \u2014 "),JP=s(R3e,"A",{href:!0});var lOr=n(JP);C2o=r(lOr,"FNetForMaskedLM"),lOr.forEach(t),M2o=r(R3e," (FNet model)"),R3e.forEach(t),E2o=i(j),O_=s(j,"LI",{});var S3e=n(O_);eoe=s(S3e,"STRONG",{});var iOr=n(eoe);y2o=r(iOr,"funnel"),iOr.forEach(t),w2o=r(S3e," \u2014 "),YP=s(S3e,"A",{href:!0});var dOr=n(YP);A2o=r(dOr,"FunnelForMaskedLM"),dOr.forEach(t),L2o=r(S3e," (Funnel Transformer model)"),S3e.forEach(t),B2o=i(j),X_=s(j,"LI",{});var P3e=n(X_);ooe=s(P3e,"STRONG",{});var cOr=n(ooe);x2o=r(cOr,"ibert"),cOr.forEach(t),k2o=r(P3e," \u2014 "),KP=s(P3e,"A",{href:!0});var mOr=n(KP);R2o=r(mOr,"IBertForMaskedLM"),mOr.forEach(t),S2o=r(P3e," (I-BERT model)"),P3e.forEach(t),P2o=i(j),V_=s(j,"LI",{});var $3e=n(V_);roe=s($3e,"STRONG",{});var fOr=n(roe);$2o=r(fOr,"layoutlm"),fOr.forEach(t),I2o=r($3e," \u2014 "),ZP=s($3e,"A",{href:!0});var gOr=n(ZP);D2o=r(gOr,"LayoutLMForMaskedLM"),gOr.forEach(t),j2o=r($3e," (LayoutLM model)"),$3e.forEach(t),N2o=i(j),z_=s(j,"LI",{});var I3e=n(z_);toe=s(I3e,"STRONG",{});var hOr=n(toe);q2o=r(hOr,"longformer"),hOr.forEach(t),G2o=r(I3e," \u2014 "),e$=s(I3e,"A",{href:!0});var uOr=n(e$);O2o=r(uOr,"LongformerForMaskedLM"),uOr.forEach(t),X2o=r(I3e," (Longformer model)"),I3e.forEach(t),V2o=i(j),W_=s(j,"LI",{});var D3e=n(W_);aoe=s(D3e,"STRONG",{});var pOr=n(aoe);z2o=r(pOr,"mbart"),pOr.forEach(t),W2o=r(D3e," \u2014 "),o$=s(D3e,"A",{href:!0});var _Or=n(o$);Q2o=r(_Or,"MBartForConditionalGeneration"),_Or.forEach(t),H2o=r(D3e," (mBART model)"),D3e.forEach(t),U2o=i(j),Q_=s(j,"LI",{});var j3e=n(Q_);soe=s(j3e,"STRONG",{});var bOr=n(soe);J2o=r(bOr,"megatron-bert"),bOr.forEach(t),Y2o=r(j3e," \u2014 "),r$=s(j3e,"A",{href:!0});var vOr=n(r$);K2o=r(vOr,"MegatronBertForMaskedLM"),vOr.forEach(t),Z2o=r(j3e," (MegatronBert model)"),j3e.forEach(t),evo=i(j),H_=s(j,"LI",{});var N3e=n(H_);noe=s(N3e,"STRONG",{});var TOr=n(noe);ovo=r(TOr,"mobilebert"),TOr.forEach(t),rvo=r(N3e," \u2014 "),t$=s(N3e,"A",{href:!0});var FOr=n(t$);tvo=r(FOr,"MobileBertForMaskedLM"),FOr.forEach(t),avo=r(N3e," (MobileBERT model)"),N3e.forEach(t),svo=i(j),U_=s(j,"LI",{});var q3e=n(U_);loe=s(q3e,"STRONG",{});var COr=n(loe);nvo=r(COr,"mpnet"),COr.forEach(t),lvo=r(q3e," \u2014 "),a$=s(q3e,"A",{href:!0});var MOr=n(a$);ivo=r(MOr,"MPNetForMaskedLM"),MOr.forEach(t),dvo=r(q3e," (MPNet model)"),q3e.forEach(t),cvo=i(j),J_=s(j,"LI",{});var G3e=n(J_);ioe=s(G3e,"STRONG",{});var EOr=n(ioe);mvo=r(EOr,"nystromformer"),EOr.forEach(t),fvo=r(G3e," \u2014 "),s$=s(G3e,"A",{href:!0});var yOr=n(s$);gvo=r(yOr,"NystromformerForMaskedLM"),yOr.forEach(t),hvo=r(G3e," (Nystromformer model)"),G3e.forEach(t),uvo=i(j),Y_=s(j,"LI",{});var O3e=n(Y_);doe=s(O3e,"STRONG",{});var wOr=n(doe);pvo=r(wOr,"perceiver"),wOr.forEach(t),_vo=r(O3e," \u2014 "),n$=s(O3e,"A",{href:!0});var AOr=n(n$);bvo=r(AOr,"PerceiverForMaskedLM"),AOr.forEach(t),vvo=r(O3e," (Perceiver model)"),O3e.forEach(t),Tvo=i(j),K_=s(j,"LI",{});var X3e=n(K_);coe=s(X3e,"STRONG",{});var LOr=n(coe);Fvo=r(LOr,"qdqbert"),LOr.forEach(t),Cvo=r(X3e," \u2014 "),l$=s(X3e,"A",{href:!0});var BOr=n(l$);Mvo=r(BOr,"QDQBertForMaskedLM"),BOr.forEach(t),Evo=r(X3e," (QDQBert model)"),X3e.forEach(t),yvo=i(j),Z_=s(j,"LI",{});var V3e=n(Z_);moe=s(V3e,"STRONG",{});var xOr=n(moe);wvo=r(xOr,"reformer"),xOr.forEach(t),Avo=r(V3e," \u2014 "),i$=s(V3e,"A",{href:!0});var kOr=n(i$);Lvo=r(kOr,"ReformerForMaskedLM"),kOr.forEach(t),Bvo=r(V3e," (Reformer model)"),V3e.forEach(t),xvo=i(j),eb=s(j,"LI",{});var z3e=n(eb);foe=s(z3e,"STRONG",{});var ROr=n(foe);kvo=r(ROr,"rembert"),ROr.forEach(t),Rvo=r(z3e," \u2014 "),d$=s(z3e,"A",{href:!0});var SOr=n(d$);Svo=r(SOr,"RemBertForMaskedLM"),SOr.forEach(t),Pvo=r(z3e," (RemBERT model)"),z3e.forEach(t),$vo=i(j),ob=s(j,"LI",{});var W3e=n(ob);goe=s(W3e,"STRONG",{});var POr=n(goe);Ivo=r(POr,"roberta"),POr.forEach(t),Dvo=r(W3e," \u2014 "),c$=s(W3e,"A",{href:!0});var $Or=n(c$);jvo=r($Or,"RobertaForMaskedLM"),$Or.forEach(t),Nvo=r(W3e," (RoBERTa model)"),W3e.forEach(t),qvo=i(j),rb=s(j,"LI",{});var Q3e=n(rb);hoe=s(Q3e,"STRONG",{});var IOr=n(hoe);Gvo=r(IOr,"roformer"),IOr.forEach(t),Ovo=r(Q3e," \u2014 "),m$=s(Q3e,"A",{href:!0});var DOr=n(m$);Xvo=r(DOr,"RoFormerForMaskedLM"),DOr.forEach(t),Vvo=r(Q3e," (RoFormer model)"),Q3e.forEach(t),zvo=i(j),tb=s(j,"LI",{});var H3e=n(tb);uoe=s(H3e,"STRONG",{});var jOr=n(uoe);Wvo=r(jOr,"squeezebert"),jOr.forEach(t),Qvo=r(H3e," \u2014 "),f$=s(H3e,"A",{href:!0});var NOr=n(f$);Hvo=r(NOr,"SqueezeBertForMaskedLM"),NOr.forEach(t),Uvo=r(H3e," (SqueezeBERT model)"),H3e.forEach(t),Jvo=i(j),ab=s(j,"LI",{});var U3e=n(ab);poe=s(U3e,"STRONG",{});var qOr=n(poe);Yvo=r(qOr,"tapas"),qOr.forEach(t),Kvo=r(U3e," \u2014 "),g$=s(U3e,"A",{href:!0});var GOr=n(g$);Zvo=r(GOr,"TapasForMaskedLM"),GOr.forEach(t),eTo=r(U3e," (TAPAS model)"),U3e.forEach(t),oTo=i(j),sb=s(j,"LI",{});var J3e=n(sb);_oe=s(J3e,"STRONG",{});var OOr=n(_oe);rTo=r(OOr,"wav2vec2"),OOr.forEach(t),tTo=r(J3e," \u2014 "),boe=s(J3e,"CODE",{});var XOr=n(boe);aTo=r(XOr,"Wav2Vec2ForMaskedLM"),XOr.forEach(t),sTo=r(J3e,"(Wav2Vec2 model)"),J3e.forEach(t),nTo=i(j),nb=s(j,"LI",{});var Y3e=n(nb);voe=s(Y3e,"STRONG",{});var VOr=n(voe);lTo=r(VOr,"xlm"),VOr.forEach(t),iTo=r(Y3e," \u2014 "),h$=s(Y3e,"A",{href:!0});var zOr=n(h$);dTo=r(zOr,"XLMWithLMHeadModel"),zOr.forEach(t),cTo=r(Y3e," (XLM model)"),Y3e.forEach(t),mTo=i(j),lb=s(j,"LI",{});var K3e=n(lb);Toe=s(K3e,"STRONG",{});var WOr=n(Toe);fTo=r(WOr,"xlm-roberta"),WOr.forEach(t),gTo=r(K3e," \u2014 "),u$=s(K3e,"A",{href:!0});var QOr=n(u$);hTo=r(QOr,"XLMRobertaForMaskedLM"),QOr.forEach(t),uTo=r(K3e," (XLM-RoBERTa model)"),K3e.forEach(t),pTo=i(j),ib=s(j,"LI",{});var Z3e=n(ib);Foe=s(Z3e,"STRONG",{});var HOr=n(Foe);_To=r(HOr,"xlm-roberta-xl"),HOr.forEach(t),bTo=r(Z3e," \u2014 "),p$=s(Z3e,"A",{href:!0});var UOr=n(p$);vTo=r(UOr,"XLMRobertaXLForMaskedLM"),UOr.forEach(t),TTo=r(Z3e," (XLM-RoBERTa-XL model)"),Z3e.forEach(t),FTo=i(j),db=s(j,"LI",{});var e5e=n(db);Coe=s(e5e,"STRONG",{});var JOr=n(Coe);CTo=r(JOr,"yoso"),JOr.forEach(t),MTo=r(e5e," \u2014 "),_$=s(e5e,"A",{href:!0});var YOr=n(_$);ETo=r(YOr,"YosoForMaskedLM"),YOr.forEach(t),yTo=r(e5e," (YOSO model)"),e5e.forEach(t),j.forEach(t),wTo=i(jt),cb=s(jt,"P",{});var o5e=n(cb);ATo=r(o5e,"The model is set in evaluation mode by default using "),Moe=s(o5e,"CODE",{});var KOr=n(Moe);LTo=r(KOr,"model.eval()"),KOr.forEach(t),BTo=r(o5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eoe=s(o5e,"CODE",{});var ZOr=n(Eoe);xTo=r(ZOr,"model.train()"),ZOr.forEach(t),o5e.forEach(t),kTo=i(jt),yoe=s(jt,"P",{});var eXr=n(yoe);RTo=r(eXr,"Examples:"),eXr.forEach(t),STo=i(jt),f(By.$$.fragment,jt),jt.forEach(t),Wn.forEach(t),W9e=i(c),ed=s(c,"H2",{class:!0});var Zxe=n(ed);mb=s(Zxe,"A",{id:!0,class:!0,href:!0});var oXr=n(mb);woe=s(oXr,"SPAN",{});var rXr=n(woe);f(xy.$$.fragment,rXr),rXr.forEach(t),oXr.forEach(t),PTo=i(Zxe),Aoe=s(Zxe,"SPAN",{});var tXr=n(Aoe);$To=r(tXr,"AutoModelForSeq2SeqLM"),tXr.forEach(t),Zxe.forEach(t),Q9e=i(c),Yo=s(c,"DIV",{class:!0});var Hn=n(Yo);f(ky.$$.fragment,Hn),ITo=i(Hn),od=s(Hn,"P",{});var GV=n(od);DTo=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Loe=s(GV,"CODE",{});var aXr=n(Loe);jTo=r(aXr,"from_pretrained()"),aXr.forEach(t),NTo=r(GV,"class method or the "),Boe=s(GV,"CODE",{});var sXr=n(Boe);qTo=r(sXr,"from_config()"),sXr.forEach(t),GTo=r(GV,`class
method.`),GV.forEach(t),OTo=i(Hn),Ry=s(Hn,"P",{});var eke=n(Ry);XTo=r(eke,"This class cannot be instantiated directly using "),xoe=s(eke,"CODE",{});var nXr=n(xoe);VTo=r(nXr,"__init__()"),nXr.forEach(t),zTo=r(eke," (throws an error)."),eke.forEach(t),WTo=i(Hn),Vr=s(Hn,"DIV",{class:!0});var Un=n(Vr);f(Sy.$$.fragment,Un),QTo=i(Un),koe=s(Un,"P",{});var lXr=n(koe);HTo=r(lXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lXr.forEach(t),UTo=i(Un),rd=s(Un,"P",{});var OV=n(rd);JTo=r(OV,`Note:
Loading a model from its configuration file does `),Roe=s(OV,"STRONG",{});var iXr=n(Roe);YTo=r(iXr,"not"),iXr.forEach(t),KTo=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=s(OV,"CODE",{});var dXr=n(Soe);ZTo=r(dXr,"from_pretrained()"),dXr.forEach(t),e1o=r(OV,"to load the model weights."),OV.forEach(t),o1o=i(Un),Poe=s(Un,"P",{});var cXr=n(Poe);r1o=r(cXr,"Examples:"),cXr.forEach(t),t1o=i(Un),f(Py.$$.fragment,Un),Un.forEach(t),a1o=i(Hn),Ie=s(Hn,"DIV",{class:!0});var Nt=n(Ie);f($y.$$.fragment,Nt),s1o=i(Nt),$oe=s(Nt,"P",{});var mXr=n($oe);n1o=r(mXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mXr.forEach(t),l1o=i(Nt),Xa=s(Nt,"P",{});var x3=n(Xa);i1o=r(x3,"The model class to instantiate is selected based on the "),Ioe=s(x3,"CODE",{});var fXr=n(Ioe);d1o=r(fXr,"model_type"),fXr.forEach(t),c1o=r(x3,` property of the config object (either
passed as an argument or loaded from `),Doe=s(x3,"CODE",{});var gXr=n(Doe);m1o=r(gXr,"pretrained_model_name_or_path"),gXr.forEach(t),f1o=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=s(x3,"CODE",{});var hXr=n(joe);g1o=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),h1o=r(x3,":"),x3.forEach(t),u1o=i(Nt),ae=s(Nt,"UL",{});var le=n(ae);fb=s(le,"LI",{});var r5e=n(fb);Noe=s(r5e,"STRONG",{});var uXr=n(Noe);p1o=r(uXr,"bart"),uXr.forEach(t),_1o=r(r5e," \u2014 "),b$=s(r5e,"A",{href:!0});var pXr=n(b$);b1o=r(pXr,"BartForConditionalGeneration"),pXr.forEach(t),v1o=r(r5e," (BART model)"),r5e.forEach(t),T1o=i(le),gb=s(le,"LI",{});var t5e=n(gb);qoe=s(t5e,"STRONG",{});var _Xr=n(qoe);F1o=r(_Xr,"bigbird_pegasus"),_Xr.forEach(t),C1o=r(t5e," \u2014 "),v$=s(t5e,"A",{href:!0});var bXr=n(v$);M1o=r(bXr,"BigBirdPegasusForConditionalGeneration"),bXr.forEach(t),E1o=r(t5e," (BigBirdPegasus model)"),t5e.forEach(t),y1o=i(le),hb=s(le,"LI",{});var a5e=n(hb);Goe=s(a5e,"STRONG",{});var vXr=n(Goe);w1o=r(vXr,"blenderbot"),vXr.forEach(t),A1o=r(a5e," \u2014 "),T$=s(a5e,"A",{href:!0});var TXr=n(T$);L1o=r(TXr,"BlenderbotForConditionalGeneration"),TXr.forEach(t),B1o=r(a5e," (Blenderbot model)"),a5e.forEach(t),x1o=i(le),ub=s(le,"LI",{});var s5e=n(ub);Ooe=s(s5e,"STRONG",{});var FXr=n(Ooe);k1o=r(FXr,"blenderbot-small"),FXr.forEach(t),R1o=r(s5e," \u2014 "),F$=s(s5e,"A",{href:!0});var CXr=n(F$);S1o=r(CXr,"BlenderbotSmallForConditionalGeneration"),CXr.forEach(t),P1o=r(s5e," (BlenderbotSmall model)"),s5e.forEach(t),$1o=i(le),pb=s(le,"LI",{});var n5e=n(pb);Xoe=s(n5e,"STRONG",{});var MXr=n(Xoe);I1o=r(MXr,"encoder-decoder"),MXr.forEach(t),D1o=r(n5e," \u2014 "),C$=s(n5e,"A",{href:!0});var EXr=n(C$);j1o=r(EXr,"EncoderDecoderModel"),EXr.forEach(t),N1o=r(n5e," (Encoder decoder model)"),n5e.forEach(t),q1o=i(le),_b=s(le,"LI",{});var l5e=n(_b);Voe=s(l5e,"STRONG",{});var yXr=n(Voe);G1o=r(yXr,"fsmt"),yXr.forEach(t),O1o=r(l5e," \u2014 "),M$=s(l5e,"A",{href:!0});var wXr=n(M$);X1o=r(wXr,"FSMTForConditionalGeneration"),wXr.forEach(t),V1o=r(l5e," (FairSeq Machine-Translation model)"),l5e.forEach(t),z1o=i(le),bb=s(le,"LI",{});var i5e=n(bb);zoe=s(i5e,"STRONG",{});var AXr=n(zoe);W1o=r(AXr,"led"),AXr.forEach(t),Q1o=r(i5e," \u2014 "),E$=s(i5e,"A",{href:!0});var LXr=n(E$);H1o=r(LXr,"LEDForConditionalGeneration"),LXr.forEach(t),U1o=r(i5e," (LED model)"),i5e.forEach(t),J1o=i(le),vb=s(le,"LI",{});var d5e=n(vb);Woe=s(d5e,"STRONG",{});var BXr=n(Woe);Y1o=r(BXr,"m2m_100"),BXr.forEach(t),K1o=r(d5e," \u2014 "),y$=s(d5e,"A",{href:!0});var xXr=n(y$);Z1o=r(xXr,"M2M100ForConditionalGeneration"),xXr.forEach(t),eFo=r(d5e," (M2M100 model)"),d5e.forEach(t),oFo=i(le),Tb=s(le,"LI",{});var c5e=n(Tb);Qoe=s(c5e,"STRONG",{});var kXr=n(Qoe);rFo=r(kXr,"marian"),kXr.forEach(t),tFo=r(c5e," \u2014 "),w$=s(c5e,"A",{href:!0});var RXr=n(w$);aFo=r(RXr,"MarianMTModel"),RXr.forEach(t),sFo=r(c5e," (Marian model)"),c5e.forEach(t),nFo=i(le),Fb=s(le,"LI",{});var m5e=n(Fb);Hoe=s(m5e,"STRONG",{});var SXr=n(Hoe);lFo=r(SXr,"mbart"),SXr.forEach(t),iFo=r(m5e," \u2014 "),A$=s(m5e,"A",{href:!0});var PXr=n(A$);dFo=r(PXr,"MBartForConditionalGeneration"),PXr.forEach(t),cFo=r(m5e," (mBART model)"),m5e.forEach(t),mFo=i(le),Cb=s(le,"LI",{});var f5e=n(Cb);Uoe=s(f5e,"STRONG",{});var $Xr=n(Uoe);fFo=r($Xr,"mt5"),$Xr.forEach(t),gFo=r(f5e," \u2014 "),L$=s(f5e,"A",{href:!0});var IXr=n(L$);hFo=r(IXr,"MT5ForConditionalGeneration"),IXr.forEach(t),uFo=r(f5e," (mT5 model)"),f5e.forEach(t),pFo=i(le),Mb=s(le,"LI",{});var g5e=n(Mb);Joe=s(g5e,"STRONG",{});var DXr=n(Joe);_Fo=r(DXr,"pegasus"),DXr.forEach(t),bFo=r(g5e," \u2014 "),B$=s(g5e,"A",{href:!0});var jXr=n(B$);vFo=r(jXr,"PegasusForConditionalGeneration"),jXr.forEach(t),TFo=r(g5e," (Pegasus model)"),g5e.forEach(t),FFo=i(le),Eb=s(le,"LI",{});var h5e=n(Eb);Yoe=s(h5e,"STRONG",{});var NXr=n(Yoe);CFo=r(NXr,"plbart"),NXr.forEach(t),MFo=r(h5e," \u2014 "),x$=s(h5e,"A",{href:!0});var qXr=n(x$);EFo=r(qXr,"PLBartForConditionalGeneration"),qXr.forEach(t),yFo=r(h5e," (PLBart model)"),h5e.forEach(t),wFo=i(le),yb=s(le,"LI",{});var u5e=n(yb);Koe=s(u5e,"STRONG",{});var GXr=n(Koe);AFo=r(GXr,"prophetnet"),GXr.forEach(t),LFo=r(u5e," \u2014 "),k$=s(u5e,"A",{href:!0});var OXr=n(k$);BFo=r(OXr,"ProphetNetForConditionalGeneration"),OXr.forEach(t),xFo=r(u5e," (ProphetNet model)"),u5e.forEach(t),kFo=i(le),wb=s(le,"LI",{});var p5e=n(wb);Zoe=s(p5e,"STRONG",{});var XXr=n(Zoe);RFo=r(XXr,"t5"),XXr.forEach(t),SFo=r(p5e," \u2014 "),R$=s(p5e,"A",{href:!0});var VXr=n(R$);PFo=r(VXr,"T5ForConditionalGeneration"),VXr.forEach(t),$Fo=r(p5e," (T5 model)"),p5e.forEach(t),IFo=i(le),Ab=s(le,"LI",{});var _5e=n(Ab);ere=s(_5e,"STRONG",{});var zXr=n(ere);DFo=r(zXr,"xlm-prophetnet"),zXr.forEach(t),jFo=r(_5e," \u2014 "),S$=s(_5e,"A",{href:!0});var WXr=n(S$);NFo=r(WXr,"XLMProphetNetForConditionalGeneration"),WXr.forEach(t),qFo=r(_5e," (XLMProphetNet model)"),_5e.forEach(t),le.forEach(t),GFo=i(Nt),Lb=s(Nt,"P",{});var b5e=n(Lb);OFo=r(b5e,"The model is set in evaluation mode by default using "),ore=s(b5e,"CODE",{});var QXr=n(ore);XFo=r(QXr,"model.eval()"),QXr.forEach(t),VFo=r(b5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=s(b5e,"CODE",{});var HXr=n(rre);zFo=r(HXr,"model.train()"),HXr.forEach(t),b5e.forEach(t),WFo=i(Nt),tre=s(Nt,"P",{});var UXr=n(tre);QFo=r(UXr,"Examples:"),UXr.forEach(t),HFo=i(Nt),f(Iy.$$.fragment,Nt),Nt.forEach(t),Hn.forEach(t),H9e=i(c),td=s(c,"H2",{class:!0});var oke=n(td);Bb=s(oke,"A",{id:!0,class:!0,href:!0});var JXr=n(Bb);are=s(JXr,"SPAN",{});var YXr=n(are);f(Dy.$$.fragment,YXr),YXr.forEach(t),JXr.forEach(t),UFo=i(oke),sre=s(oke,"SPAN",{});var KXr=n(sre);JFo=r(KXr,"AutoModelForSequenceClassification"),KXr.forEach(t),oke.forEach(t),U9e=i(c),Ko=s(c,"DIV",{class:!0});var Jn=n(Ko);f(jy.$$.fragment,Jn),YFo=i(Jn),ad=s(Jn,"P",{});var XV=n(ad);KFo=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nre=s(XV,"CODE",{});var ZXr=n(nre);ZFo=r(ZXr,"from_pretrained()"),ZXr.forEach(t),eCo=r(XV,"class method or the "),lre=s(XV,"CODE",{});var eVr=n(lre);oCo=r(eVr,"from_config()"),eVr.forEach(t),rCo=r(XV,`class
method.`),XV.forEach(t),tCo=i(Jn),Ny=s(Jn,"P",{});var rke=n(Ny);aCo=r(rke,"This class cannot be instantiated directly using "),ire=s(rke,"CODE",{});var oVr=n(ire);sCo=r(oVr,"__init__()"),oVr.forEach(t),nCo=r(rke," (throws an error)."),rke.forEach(t),lCo=i(Jn),zr=s(Jn,"DIV",{class:!0});var Yn=n(zr);f(qy.$$.fragment,Yn),iCo=i(Yn),dre=s(Yn,"P",{});var rVr=n(dre);dCo=r(rVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rVr.forEach(t),cCo=i(Yn),sd=s(Yn,"P",{});var VV=n(sd);mCo=r(VV,`Note:
Loading a model from its configuration file does `),cre=s(VV,"STRONG",{});var tVr=n(cre);fCo=r(tVr,"not"),tVr.forEach(t),gCo=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=s(VV,"CODE",{});var aVr=n(mre);hCo=r(aVr,"from_pretrained()"),aVr.forEach(t),uCo=r(VV,"to load the model weights."),VV.forEach(t),pCo=i(Yn),fre=s(Yn,"P",{});var sVr=n(fre);_Co=r(sVr,"Examples:"),sVr.forEach(t),bCo=i(Yn),f(Gy.$$.fragment,Yn),Yn.forEach(t),vCo=i(Jn),De=s(Jn,"DIV",{class:!0});var qt=n(De);f(Oy.$$.fragment,qt),TCo=i(qt),gre=s(qt,"P",{});var nVr=n(gre);FCo=r(nVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nVr.forEach(t),CCo=i(qt),Va=s(qt,"P",{});var k3=n(Va);MCo=r(k3,"The model class to instantiate is selected based on the "),hre=s(k3,"CODE",{});var lVr=n(hre);ECo=r(lVr,"model_type"),lVr.forEach(t),yCo=r(k3,` property of the config object (either
passed as an argument or loaded from `),ure=s(k3,"CODE",{});var iVr=n(ure);wCo=r(iVr,"pretrained_model_name_or_path"),iVr.forEach(t),ACo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=s(k3,"CODE",{});var dVr=n(pre);LCo=r(dVr,"pretrained_model_name_or_path"),dVr.forEach(t),BCo=r(k3,":"),k3.forEach(t),xCo=i(qt),A=s(qt,"UL",{});var L=n(A);xb=s(L,"LI",{});var v5e=n(xb);_re=s(v5e,"STRONG",{});var cVr=n(_re);kCo=r(cVr,"albert"),cVr.forEach(t),RCo=r(v5e," \u2014 "),P$=s(v5e,"A",{href:!0});var mVr=n(P$);SCo=r(mVr,"AlbertForSequenceClassification"),mVr.forEach(t),PCo=r(v5e," (ALBERT model)"),v5e.forEach(t),$Co=i(L),kb=s(L,"LI",{});var T5e=n(kb);bre=s(T5e,"STRONG",{});var fVr=n(bre);ICo=r(fVr,"bart"),fVr.forEach(t),DCo=r(T5e," \u2014 "),$$=s(T5e,"A",{href:!0});var gVr=n($$);jCo=r(gVr,"BartForSequenceClassification"),gVr.forEach(t),NCo=r(T5e," (BART model)"),T5e.forEach(t),qCo=i(L),Rb=s(L,"LI",{});var F5e=n(Rb);vre=s(F5e,"STRONG",{});var hVr=n(vre);GCo=r(hVr,"bert"),hVr.forEach(t),OCo=r(F5e," \u2014 "),I$=s(F5e,"A",{href:!0});var uVr=n(I$);XCo=r(uVr,"BertForSequenceClassification"),uVr.forEach(t),VCo=r(F5e," (BERT model)"),F5e.forEach(t),zCo=i(L),Sb=s(L,"LI",{});var C5e=n(Sb);Tre=s(C5e,"STRONG",{});var pVr=n(Tre);WCo=r(pVr,"big_bird"),pVr.forEach(t),QCo=r(C5e," \u2014 "),D$=s(C5e,"A",{href:!0});var _Vr=n(D$);HCo=r(_Vr,"BigBirdForSequenceClassification"),_Vr.forEach(t),UCo=r(C5e," (BigBird model)"),C5e.forEach(t),JCo=i(L),Pb=s(L,"LI",{});var M5e=n(Pb);Fre=s(M5e,"STRONG",{});var bVr=n(Fre);YCo=r(bVr,"bigbird_pegasus"),bVr.forEach(t),KCo=r(M5e," \u2014 "),j$=s(M5e,"A",{href:!0});var vVr=n(j$);ZCo=r(vVr,"BigBirdPegasusForSequenceClassification"),vVr.forEach(t),e4o=r(M5e," (BigBirdPegasus model)"),M5e.forEach(t),o4o=i(L),$b=s(L,"LI",{});var E5e=n($b);Cre=s(E5e,"STRONG",{});var TVr=n(Cre);r4o=r(TVr,"camembert"),TVr.forEach(t),t4o=r(E5e," \u2014 "),N$=s(E5e,"A",{href:!0});var FVr=n(N$);a4o=r(FVr,"CamembertForSequenceClassification"),FVr.forEach(t),s4o=r(E5e," (CamemBERT model)"),E5e.forEach(t),n4o=i(L),Ib=s(L,"LI",{});var y5e=n(Ib);Mre=s(y5e,"STRONG",{});var CVr=n(Mre);l4o=r(CVr,"canine"),CVr.forEach(t),i4o=r(y5e," \u2014 "),q$=s(y5e,"A",{href:!0});var MVr=n(q$);d4o=r(MVr,"CanineForSequenceClassification"),MVr.forEach(t),c4o=r(y5e," (Canine model)"),y5e.forEach(t),m4o=i(L),Db=s(L,"LI",{});var w5e=n(Db);Ere=s(w5e,"STRONG",{});var EVr=n(Ere);f4o=r(EVr,"convbert"),EVr.forEach(t),g4o=r(w5e," \u2014 "),G$=s(w5e,"A",{href:!0});var yVr=n(G$);h4o=r(yVr,"ConvBertForSequenceClassification"),yVr.forEach(t),u4o=r(w5e," (ConvBERT model)"),w5e.forEach(t),p4o=i(L),jb=s(L,"LI",{});var A5e=n(jb);yre=s(A5e,"STRONG",{});var wVr=n(yre);_4o=r(wVr,"ctrl"),wVr.forEach(t),b4o=r(A5e," \u2014 "),O$=s(A5e,"A",{href:!0});var AVr=n(O$);v4o=r(AVr,"CTRLForSequenceClassification"),AVr.forEach(t),T4o=r(A5e," (CTRL model)"),A5e.forEach(t),F4o=i(L),Nb=s(L,"LI",{});var L5e=n(Nb);wre=s(L5e,"STRONG",{});var LVr=n(wre);C4o=r(LVr,"data2vec-text"),LVr.forEach(t),M4o=r(L5e," \u2014 "),X$=s(L5e,"A",{href:!0});var BVr=n(X$);E4o=r(BVr,"Data2VecTextForSequenceClassification"),BVr.forEach(t),y4o=r(L5e," (Data2VecText model)"),L5e.forEach(t),w4o=i(L),qb=s(L,"LI",{});var B5e=n(qb);Are=s(B5e,"STRONG",{});var xVr=n(Are);A4o=r(xVr,"deberta"),xVr.forEach(t),L4o=r(B5e," \u2014 "),V$=s(B5e,"A",{href:!0});var kVr=n(V$);B4o=r(kVr,"DebertaForSequenceClassification"),kVr.forEach(t),x4o=r(B5e," (DeBERTa model)"),B5e.forEach(t),k4o=i(L),Gb=s(L,"LI",{});var x5e=n(Gb);Lre=s(x5e,"STRONG",{});var RVr=n(Lre);R4o=r(RVr,"deberta-v2"),RVr.forEach(t),S4o=r(x5e," \u2014 "),z$=s(x5e,"A",{href:!0});var SVr=n(z$);P4o=r(SVr,"DebertaV2ForSequenceClassification"),SVr.forEach(t),$4o=r(x5e," (DeBERTa-v2 model)"),x5e.forEach(t),I4o=i(L),Ob=s(L,"LI",{});var k5e=n(Ob);Bre=s(k5e,"STRONG",{});var PVr=n(Bre);D4o=r(PVr,"distilbert"),PVr.forEach(t),j4o=r(k5e," \u2014 "),W$=s(k5e,"A",{href:!0});var $Vr=n(W$);N4o=r($Vr,"DistilBertForSequenceClassification"),$Vr.forEach(t),q4o=r(k5e," (DistilBERT model)"),k5e.forEach(t),G4o=i(L),Xb=s(L,"LI",{});var R5e=n(Xb);xre=s(R5e,"STRONG",{});var IVr=n(xre);O4o=r(IVr,"electra"),IVr.forEach(t),X4o=r(R5e," \u2014 "),Q$=s(R5e,"A",{href:!0});var DVr=n(Q$);V4o=r(DVr,"ElectraForSequenceClassification"),DVr.forEach(t),z4o=r(R5e," (ELECTRA model)"),R5e.forEach(t),W4o=i(L),Vb=s(L,"LI",{});var S5e=n(Vb);kre=s(S5e,"STRONG",{});var jVr=n(kre);Q4o=r(jVr,"flaubert"),jVr.forEach(t),H4o=r(S5e," \u2014 "),H$=s(S5e,"A",{href:!0});var NVr=n(H$);U4o=r(NVr,"FlaubertForSequenceClassification"),NVr.forEach(t),J4o=r(S5e," (FlauBERT model)"),S5e.forEach(t),Y4o=i(L),zb=s(L,"LI",{});var P5e=n(zb);Rre=s(P5e,"STRONG",{});var qVr=n(Rre);K4o=r(qVr,"fnet"),qVr.forEach(t),Z4o=r(P5e," \u2014 "),U$=s(P5e,"A",{href:!0});var GVr=n(U$);eMo=r(GVr,"FNetForSequenceClassification"),GVr.forEach(t),oMo=r(P5e," (FNet model)"),P5e.forEach(t),rMo=i(L),Wb=s(L,"LI",{});var $5e=n(Wb);Sre=s($5e,"STRONG",{});var OVr=n(Sre);tMo=r(OVr,"funnel"),OVr.forEach(t),aMo=r($5e," \u2014 "),J$=s($5e,"A",{href:!0});var XVr=n(J$);sMo=r(XVr,"FunnelForSequenceClassification"),XVr.forEach(t),nMo=r($5e," (Funnel Transformer model)"),$5e.forEach(t),lMo=i(L),Qb=s(L,"LI",{});var I5e=n(Qb);Pre=s(I5e,"STRONG",{});var VVr=n(Pre);iMo=r(VVr,"gpt2"),VVr.forEach(t),dMo=r(I5e," \u2014 "),Y$=s(I5e,"A",{href:!0});var zVr=n(Y$);cMo=r(zVr,"GPT2ForSequenceClassification"),zVr.forEach(t),mMo=r(I5e," (OpenAI GPT-2 model)"),I5e.forEach(t),fMo=i(L),Hb=s(L,"LI",{});var D5e=n(Hb);$re=s(D5e,"STRONG",{});var WVr=n($re);gMo=r(WVr,"gpt_neo"),WVr.forEach(t),hMo=r(D5e," \u2014 "),K$=s(D5e,"A",{href:!0});var QVr=n(K$);uMo=r(QVr,"GPTNeoForSequenceClassification"),QVr.forEach(t),pMo=r(D5e," (GPT Neo model)"),D5e.forEach(t),_Mo=i(L),Ub=s(L,"LI",{});var j5e=n(Ub);Ire=s(j5e,"STRONG",{});var HVr=n(Ire);bMo=r(HVr,"gptj"),HVr.forEach(t),vMo=r(j5e," \u2014 "),Z$=s(j5e,"A",{href:!0});var UVr=n(Z$);TMo=r(UVr,"GPTJForSequenceClassification"),UVr.forEach(t),FMo=r(j5e," (GPT-J model)"),j5e.forEach(t),CMo=i(L),Jb=s(L,"LI",{});var N5e=n(Jb);Dre=s(N5e,"STRONG",{});var JVr=n(Dre);MMo=r(JVr,"ibert"),JVr.forEach(t),EMo=r(N5e," \u2014 "),eI=s(N5e,"A",{href:!0});var YVr=n(eI);yMo=r(YVr,"IBertForSequenceClassification"),YVr.forEach(t),wMo=r(N5e," (I-BERT model)"),N5e.forEach(t),AMo=i(L),Yb=s(L,"LI",{});var q5e=n(Yb);jre=s(q5e,"STRONG",{});var KVr=n(jre);LMo=r(KVr,"layoutlm"),KVr.forEach(t),BMo=r(q5e," \u2014 "),oI=s(q5e,"A",{href:!0});var ZVr=n(oI);xMo=r(ZVr,"LayoutLMForSequenceClassification"),ZVr.forEach(t),kMo=r(q5e," (LayoutLM model)"),q5e.forEach(t),RMo=i(L),Kb=s(L,"LI",{});var G5e=n(Kb);Nre=s(G5e,"STRONG",{});var ezr=n(Nre);SMo=r(ezr,"layoutlmv2"),ezr.forEach(t),PMo=r(G5e," \u2014 "),rI=s(G5e,"A",{href:!0});var ozr=n(rI);$Mo=r(ozr,"LayoutLMv2ForSequenceClassification"),ozr.forEach(t),IMo=r(G5e," (LayoutLMv2 model)"),G5e.forEach(t),DMo=i(L),Zb=s(L,"LI",{});var O5e=n(Zb);qre=s(O5e,"STRONG",{});var rzr=n(qre);jMo=r(rzr,"led"),rzr.forEach(t),NMo=r(O5e," \u2014 "),tI=s(O5e,"A",{href:!0});var tzr=n(tI);qMo=r(tzr,"LEDForSequenceClassification"),tzr.forEach(t),GMo=r(O5e," (LED model)"),O5e.forEach(t),OMo=i(L),e2=s(L,"LI",{});var X5e=n(e2);Gre=s(X5e,"STRONG",{});var azr=n(Gre);XMo=r(azr,"longformer"),azr.forEach(t),VMo=r(X5e," \u2014 "),aI=s(X5e,"A",{href:!0});var szr=n(aI);zMo=r(szr,"LongformerForSequenceClassification"),szr.forEach(t),WMo=r(X5e," (Longformer model)"),X5e.forEach(t),QMo=i(L),o2=s(L,"LI",{});var V5e=n(o2);Ore=s(V5e,"STRONG",{});var nzr=n(Ore);HMo=r(nzr,"mbart"),nzr.forEach(t),UMo=r(V5e," \u2014 "),sI=s(V5e,"A",{href:!0});var lzr=n(sI);JMo=r(lzr,"MBartForSequenceClassification"),lzr.forEach(t),YMo=r(V5e," (mBART model)"),V5e.forEach(t),KMo=i(L),r2=s(L,"LI",{});var z5e=n(r2);Xre=s(z5e,"STRONG",{});var izr=n(Xre);ZMo=r(izr,"megatron-bert"),izr.forEach(t),eEo=r(z5e," \u2014 "),nI=s(z5e,"A",{href:!0});var dzr=n(nI);oEo=r(dzr,"MegatronBertForSequenceClassification"),dzr.forEach(t),rEo=r(z5e," (MegatronBert model)"),z5e.forEach(t),tEo=i(L),t2=s(L,"LI",{});var W5e=n(t2);Vre=s(W5e,"STRONG",{});var czr=n(Vre);aEo=r(czr,"mobilebert"),czr.forEach(t),sEo=r(W5e," \u2014 "),lI=s(W5e,"A",{href:!0});var mzr=n(lI);nEo=r(mzr,"MobileBertForSequenceClassification"),mzr.forEach(t),lEo=r(W5e," (MobileBERT model)"),W5e.forEach(t),iEo=i(L),a2=s(L,"LI",{});var Q5e=n(a2);zre=s(Q5e,"STRONG",{});var fzr=n(zre);dEo=r(fzr,"mpnet"),fzr.forEach(t),cEo=r(Q5e," \u2014 "),iI=s(Q5e,"A",{href:!0});var gzr=n(iI);mEo=r(gzr,"MPNetForSequenceClassification"),gzr.forEach(t),fEo=r(Q5e," (MPNet model)"),Q5e.forEach(t),gEo=i(L),s2=s(L,"LI",{});var H5e=n(s2);Wre=s(H5e,"STRONG",{});var hzr=n(Wre);hEo=r(hzr,"nystromformer"),hzr.forEach(t),uEo=r(H5e," \u2014 "),dI=s(H5e,"A",{href:!0});var uzr=n(dI);pEo=r(uzr,"NystromformerForSequenceClassification"),uzr.forEach(t),_Eo=r(H5e," (Nystromformer model)"),H5e.forEach(t),bEo=i(L),n2=s(L,"LI",{});var U5e=n(n2);Qre=s(U5e,"STRONG",{});var pzr=n(Qre);vEo=r(pzr,"openai-gpt"),pzr.forEach(t),TEo=r(U5e," \u2014 "),cI=s(U5e,"A",{href:!0});var _zr=n(cI);FEo=r(_zr,"OpenAIGPTForSequenceClassification"),_zr.forEach(t),CEo=r(U5e," (OpenAI GPT model)"),U5e.forEach(t),MEo=i(L),l2=s(L,"LI",{});var J5e=n(l2);Hre=s(J5e,"STRONG",{});var bzr=n(Hre);EEo=r(bzr,"perceiver"),bzr.forEach(t),yEo=r(J5e," \u2014 "),mI=s(J5e,"A",{href:!0});var vzr=n(mI);wEo=r(vzr,"PerceiverForSequenceClassification"),vzr.forEach(t),AEo=r(J5e," (Perceiver model)"),J5e.forEach(t),LEo=i(L),i2=s(L,"LI",{});var Y5e=n(i2);Ure=s(Y5e,"STRONG",{});var Tzr=n(Ure);BEo=r(Tzr,"plbart"),Tzr.forEach(t),xEo=r(Y5e," \u2014 "),fI=s(Y5e,"A",{href:!0});var Fzr=n(fI);kEo=r(Fzr,"PLBartForSequenceClassification"),Fzr.forEach(t),REo=r(Y5e," (PLBart model)"),Y5e.forEach(t),SEo=i(L),d2=s(L,"LI",{});var K5e=n(d2);Jre=s(K5e,"STRONG",{});var Czr=n(Jre);PEo=r(Czr,"qdqbert"),Czr.forEach(t),$Eo=r(K5e," \u2014 "),gI=s(K5e,"A",{href:!0});var Mzr=n(gI);IEo=r(Mzr,"QDQBertForSequenceClassification"),Mzr.forEach(t),DEo=r(K5e," (QDQBert model)"),K5e.forEach(t),jEo=i(L),c2=s(L,"LI",{});var Z5e=n(c2);Yre=s(Z5e,"STRONG",{});var Ezr=n(Yre);NEo=r(Ezr,"reformer"),Ezr.forEach(t),qEo=r(Z5e," \u2014 "),hI=s(Z5e,"A",{href:!0});var yzr=n(hI);GEo=r(yzr,"ReformerForSequenceClassification"),yzr.forEach(t),OEo=r(Z5e," (Reformer model)"),Z5e.forEach(t),XEo=i(L),m2=s(L,"LI",{});var eye=n(m2);Kre=s(eye,"STRONG",{});var wzr=n(Kre);VEo=r(wzr,"rembert"),wzr.forEach(t),zEo=r(eye," \u2014 "),uI=s(eye,"A",{href:!0});var Azr=n(uI);WEo=r(Azr,"RemBertForSequenceClassification"),Azr.forEach(t),QEo=r(eye," (RemBERT model)"),eye.forEach(t),HEo=i(L),f2=s(L,"LI",{});var oye=n(f2);Zre=s(oye,"STRONG",{});var Lzr=n(Zre);UEo=r(Lzr,"roberta"),Lzr.forEach(t),JEo=r(oye," \u2014 "),pI=s(oye,"A",{href:!0});var Bzr=n(pI);YEo=r(Bzr,"RobertaForSequenceClassification"),Bzr.forEach(t),KEo=r(oye," (RoBERTa model)"),oye.forEach(t),ZEo=i(L),g2=s(L,"LI",{});var rye=n(g2);ete=s(rye,"STRONG",{});var xzr=n(ete);e3o=r(xzr,"roformer"),xzr.forEach(t),o3o=r(rye," \u2014 "),_I=s(rye,"A",{href:!0});var kzr=n(_I);r3o=r(kzr,"RoFormerForSequenceClassification"),kzr.forEach(t),t3o=r(rye," (RoFormer model)"),rye.forEach(t),a3o=i(L),h2=s(L,"LI",{});var tye=n(h2);ote=s(tye,"STRONG",{});var Rzr=n(ote);s3o=r(Rzr,"squeezebert"),Rzr.forEach(t),n3o=r(tye," \u2014 "),bI=s(tye,"A",{href:!0});var Szr=n(bI);l3o=r(Szr,"SqueezeBertForSequenceClassification"),Szr.forEach(t),i3o=r(tye," (SqueezeBERT model)"),tye.forEach(t),d3o=i(L),u2=s(L,"LI",{});var aye=n(u2);rte=s(aye,"STRONG",{});var Pzr=n(rte);c3o=r(Pzr,"tapas"),Pzr.forEach(t),m3o=r(aye," \u2014 "),vI=s(aye,"A",{href:!0});var $zr=n(vI);f3o=r($zr,"TapasForSequenceClassification"),$zr.forEach(t),g3o=r(aye," (TAPAS model)"),aye.forEach(t),h3o=i(L),p2=s(L,"LI",{});var sye=n(p2);tte=s(sye,"STRONG",{});var Izr=n(tte);u3o=r(Izr,"transfo-xl"),Izr.forEach(t),p3o=r(sye," \u2014 "),TI=s(sye,"A",{href:!0});var Dzr=n(TI);_3o=r(Dzr,"TransfoXLForSequenceClassification"),Dzr.forEach(t),b3o=r(sye," (Transformer-XL model)"),sye.forEach(t),v3o=i(L),_2=s(L,"LI",{});var nye=n(_2);ate=s(nye,"STRONG",{});var jzr=n(ate);T3o=r(jzr,"xlm"),jzr.forEach(t),F3o=r(nye," \u2014 "),FI=s(nye,"A",{href:!0});var Nzr=n(FI);C3o=r(Nzr,"XLMForSequenceClassification"),Nzr.forEach(t),M3o=r(nye," (XLM model)"),nye.forEach(t),E3o=i(L),b2=s(L,"LI",{});var lye=n(b2);ste=s(lye,"STRONG",{});var qzr=n(ste);y3o=r(qzr,"xlm-roberta"),qzr.forEach(t),w3o=r(lye," \u2014 "),CI=s(lye,"A",{href:!0});var Gzr=n(CI);A3o=r(Gzr,"XLMRobertaForSequenceClassification"),Gzr.forEach(t),L3o=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),B3o=i(L),v2=s(L,"LI",{});var iye=n(v2);nte=s(iye,"STRONG",{});var Ozr=n(nte);x3o=r(Ozr,"xlm-roberta-xl"),Ozr.forEach(t),k3o=r(iye," \u2014 "),MI=s(iye,"A",{href:!0});var Xzr=n(MI);R3o=r(Xzr,"XLMRobertaXLForSequenceClassification"),Xzr.forEach(t),S3o=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),P3o=i(L),T2=s(L,"LI",{});var dye=n(T2);lte=s(dye,"STRONG",{});var Vzr=n(lte);$3o=r(Vzr,"xlnet"),Vzr.forEach(t),I3o=r(dye," \u2014 "),EI=s(dye,"A",{href:!0});var zzr=n(EI);D3o=r(zzr,"XLNetForSequenceClassification"),zzr.forEach(t),j3o=r(dye," (XLNet model)"),dye.forEach(t),N3o=i(L),F2=s(L,"LI",{});var cye=n(F2);ite=s(cye,"STRONG",{});var Wzr=n(ite);q3o=r(Wzr,"yoso"),Wzr.forEach(t),G3o=r(cye," \u2014 "),yI=s(cye,"A",{href:!0});var Qzr=n(yI);O3o=r(Qzr,"YosoForSequenceClassification"),Qzr.forEach(t),X3o=r(cye," (YOSO model)"),cye.forEach(t),L.forEach(t),V3o=i(qt),C2=s(qt,"P",{});var mye=n(C2);z3o=r(mye,"The model is set in evaluation mode by default using "),dte=s(mye,"CODE",{});var Hzr=n(dte);W3o=r(Hzr,"model.eval()"),Hzr.forEach(t),Q3o=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cte=s(mye,"CODE",{});var Uzr=n(cte);H3o=r(Uzr,"model.train()"),Uzr.forEach(t),mye.forEach(t),U3o=i(qt),mte=s(qt,"P",{});var Jzr=n(mte);J3o=r(Jzr,"Examples:"),Jzr.forEach(t),Y3o=i(qt),f(Xy.$$.fragment,qt),qt.forEach(t),Jn.forEach(t),J9e=i(c),nd=s(c,"H2",{class:!0});var tke=n(nd);M2=s(tke,"A",{id:!0,class:!0,href:!0});var Yzr=n(M2);fte=s(Yzr,"SPAN",{});var Kzr=n(fte);f(Vy.$$.fragment,Kzr),Kzr.forEach(t),Yzr.forEach(t),K3o=i(tke),gte=s(tke,"SPAN",{});var Zzr=n(gte);Z3o=r(Zzr,"AutoModelForMultipleChoice"),Zzr.forEach(t),tke.forEach(t),Y9e=i(c),Zo=s(c,"DIV",{class:!0});var Kn=n(Zo);f(zy.$$.fragment,Kn),e5o=i(Kn),ld=s(Kn,"P",{});var zV=n(ld);o5o=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hte=s(zV,"CODE",{});var eWr=n(hte);r5o=r(eWr,"from_pretrained()"),eWr.forEach(t),t5o=r(zV,"class method or the "),ute=s(zV,"CODE",{});var oWr=n(ute);a5o=r(oWr,"from_config()"),oWr.forEach(t),s5o=r(zV,`class
method.`),zV.forEach(t),n5o=i(Kn),Wy=s(Kn,"P",{});var ake=n(Wy);l5o=r(ake,"This class cannot be instantiated directly using "),pte=s(ake,"CODE",{});var rWr=n(pte);i5o=r(rWr,"__init__()"),rWr.forEach(t),d5o=r(ake," (throws an error)."),ake.forEach(t),c5o=i(Kn),Wr=s(Kn,"DIV",{class:!0});var Zn=n(Wr);f(Qy.$$.fragment,Zn),m5o=i(Zn),_te=s(Zn,"P",{});var tWr=n(_te);f5o=r(tWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tWr.forEach(t),g5o=i(Zn),id=s(Zn,"P",{});var WV=n(id);h5o=r(WV,`Note:
Loading a model from its configuration file does `),bte=s(WV,"STRONG",{});var aWr=n(bte);u5o=r(aWr,"not"),aWr.forEach(t),p5o=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),vte=s(WV,"CODE",{});var sWr=n(vte);_5o=r(sWr,"from_pretrained()"),sWr.forEach(t),b5o=r(WV,"to load the model weights."),WV.forEach(t),v5o=i(Zn),Tte=s(Zn,"P",{});var nWr=n(Tte);T5o=r(nWr,"Examples:"),nWr.forEach(t),F5o=i(Zn),f(Hy.$$.fragment,Zn),Zn.forEach(t),C5o=i(Kn),je=s(Kn,"DIV",{class:!0});var Gt=n(je);f(Uy.$$.fragment,Gt),M5o=i(Gt),Fte=s(Gt,"P",{});var lWr=n(Fte);E5o=r(lWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lWr.forEach(t),y5o=i(Gt),za=s(Gt,"P",{});var R3=n(za);w5o=r(R3,"The model class to instantiate is selected based on the "),Cte=s(R3,"CODE",{});var iWr=n(Cte);A5o=r(iWr,"model_type"),iWr.forEach(t),L5o=r(R3,` property of the config object (either
passed as an argument or loaded from `),Mte=s(R3,"CODE",{});var dWr=n(Mte);B5o=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),x5o=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ete=s(R3,"CODE",{});var cWr=n(Ete);k5o=r(cWr,"pretrained_model_name_or_path"),cWr.forEach(t),R5o=r(R3,":"),R3.forEach(t),S5o=i(Gt),G=s(Gt,"UL",{});var O=n(G);E2=s(O,"LI",{});var fye=n(E2);yte=s(fye,"STRONG",{});var mWr=n(yte);P5o=r(mWr,"albert"),mWr.forEach(t),$5o=r(fye," \u2014 "),wI=s(fye,"A",{href:!0});var fWr=n(wI);I5o=r(fWr,"AlbertForMultipleChoice"),fWr.forEach(t),D5o=r(fye," (ALBERT model)"),fye.forEach(t),j5o=i(O),y2=s(O,"LI",{});var gye=n(y2);wte=s(gye,"STRONG",{});var gWr=n(wte);N5o=r(gWr,"bert"),gWr.forEach(t),q5o=r(gye," \u2014 "),AI=s(gye,"A",{href:!0});var hWr=n(AI);G5o=r(hWr,"BertForMultipleChoice"),hWr.forEach(t),O5o=r(gye," (BERT model)"),gye.forEach(t),X5o=i(O),w2=s(O,"LI",{});var hye=n(w2);Ate=s(hye,"STRONG",{});var uWr=n(Ate);V5o=r(uWr,"big_bird"),uWr.forEach(t),z5o=r(hye," \u2014 "),LI=s(hye,"A",{href:!0});var pWr=n(LI);W5o=r(pWr,"BigBirdForMultipleChoice"),pWr.forEach(t),Q5o=r(hye," (BigBird model)"),hye.forEach(t),H5o=i(O),A2=s(O,"LI",{});var uye=n(A2);Lte=s(uye,"STRONG",{});var _Wr=n(Lte);U5o=r(_Wr,"camembert"),_Wr.forEach(t),J5o=r(uye," \u2014 "),BI=s(uye,"A",{href:!0});var bWr=n(BI);Y5o=r(bWr,"CamembertForMultipleChoice"),bWr.forEach(t),K5o=r(uye," (CamemBERT model)"),uye.forEach(t),Z5o=i(O),L2=s(O,"LI",{});var pye=n(L2);Bte=s(pye,"STRONG",{});var vWr=n(Bte);eyo=r(vWr,"canine"),vWr.forEach(t),oyo=r(pye," \u2014 "),xI=s(pye,"A",{href:!0});var TWr=n(xI);ryo=r(TWr,"CanineForMultipleChoice"),TWr.forEach(t),tyo=r(pye," (Canine model)"),pye.forEach(t),ayo=i(O),B2=s(O,"LI",{});var _ye=n(B2);xte=s(_ye,"STRONG",{});var FWr=n(xte);syo=r(FWr,"convbert"),FWr.forEach(t),nyo=r(_ye," \u2014 "),kI=s(_ye,"A",{href:!0});var CWr=n(kI);lyo=r(CWr,"ConvBertForMultipleChoice"),CWr.forEach(t),iyo=r(_ye," (ConvBERT model)"),_ye.forEach(t),dyo=i(O),x2=s(O,"LI",{});var bye=n(x2);kte=s(bye,"STRONG",{});var MWr=n(kte);cyo=r(MWr,"data2vec-text"),MWr.forEach(t),myo=r(bye," \u2014 "),RI=s(bye,"A",{href:!0});var EWr=n(RI);fyo=r(EWr,"Data2VecTextForMultipleChoice"),EWr.forEach(t),gyo=r(bye," (Data2VecText model)"),bye.forEach(t),hyo=i(O),k2=s(O,"LI",{});var vye=n(k2);Rte=s(vye,"STRONG",{});var yWr=n(Rte);uyo=r(yWr,"distilbert"),yWr.forEach(t),pyo=r(vye," \u2014 "),SI=s(vye,"A",{href:!0});var wWr=n(SI);_yo=r(wWr,"DistilBertForMultipleChoice"),wWr.forEach(t),byo=r(vye," (DistilBERT model)"),vye.forEach(t),vyo=i(O),R2=s(O,"LI",{});var Tye=n(R2);Ste=s(Tye,"STRONG",{});var AWr=n(Ste);Tyo=r(AWr,"electra"),AWr.forEach(t),Fyo=r(Tye," \u2014 "),PI=s(Tye,"A",{href:!0});var LWr=n(PI);Cyo=r(LWr,"ElectraForMultipleChoice"),LWr.forEach(t),Myo=r(Tye," (ELECTRA model)"),Tye.forEach(t),Eyo=i(O),S2=s(O,"LI",{});var Fye=n(S2);Pte=s(Fye,"STRONG",{});var BWr=n(Pte);yyo=r(BWr,"flaubert"),BWr.forEach(t),wyo=r(Fye," \u2014 "),$I=s(Fye,"A",{href:!0});var xWr=n($I);Ayo=r(xWr,"FlaubertForMultipleChoice"),xWr.forEach(t),Lyo=r(Fye," (FlauBERT model)"),Fye.forEach(t),Byo=i(O),P2=s(O,"LI",{});var Cye=n(P2);$te=s(Cye,"STRONG",{});var kWr=n($te);xyo=r(kWr,"fnet"),kWr.forEach(t),kyo=r(Cye," \u2014 "),II=s(Cye,"A",{href:!0});var RWr=n(II);Ryo=r(RWr,"FNetForMultipleChoice"),RWr.forEach(t),Syo=r(Cye," (FNet model)"),Cye.forEach(t),Pyo=i(O),$2=s(O,"LI",{});var Mye=n($2);Ite=s(Mye,"STRONG",{});var SWr=n(Ite);$yo=r(SWr,"funnel"),SWr.forEach(t),Iyo=r(Mye," \u2014 "),DI=s(Mye,"A",{href:!0});var PWr=n(DI);Dyo=r(PWr,"FunnelForMultipleChoice"),PWr.forEach(t),jyo=r(Mye," (Funnel Transformer model)"),Mye.forEach(t),Nyo=i(O),I2=s(O,"LI",{});var Eye=n(I2);Dte=s(Eye,"STRONG",{});var $Wr=n(Dte);qyo=r($Wr,"ibert"),$Wr.forEach(t),Gyo=r(Eye," \u2014 "),jI=s(Eye,"A",{href:!0});var IWr=n(jI);Oyo=r(IWr,"IBertForMultipleChoice"),IWr.forEach(t),Xyo=r(Eye," (I-BERT model)"),Eye.forEach(t),Vyo=i(O),D2=s(O,"LI",{});var yye=n(D2);jte=s(yye,"STRONG",{});var DWr=n(jte);zyo=r(DWr,"longformer"),DWr.forEach(t),Wyo=r(yye," \u2014 "),NI=s(yye,"A",{href:!0});var jWr=n(NI);Qyo=r(jWr,"LongformerForMultipleChoice"),jWr.forEach(t),Hyo=r(yye," (Longformer model)"),yye.forEach(t),Uyo=i(O),j2=s(O,"LI",{});var wye=n(j2);Nte=s(wye,"STRONG",{});var NWr=n(Nte);Jyo=r(NWr,"megatron-bert"),NWr.forEach(t),Yyo=r(wye," \u2014 "),qI=s(wye,"A",{href:!0});var qWr=n(qI);Kyo=r(qWr,"MegatronBertForMultipleChoice"),qWr.forEach(t),Zyo=r(wye," (MegatronBert model)"),wye.forEach(t),ewo=i(O),N2=s(O,"LI",{});var Aye=n(N2);qte=s(Aye,"STRONG",{});var GWr=n(qte);owo=r(GWr,"mobilebert"),GWr.forEach(t),rwo=r(Aye," \u2014 "),GI=s(Aye,"A",{href:!0});var OWr=n(GI);two=r(OWr,"MobileBertForMultipleChoice"),OWr.forEach(t),awo=r(Aye," (MobileBERT model)"),Aye.forEach(t),swo=i(O),q2=s(O,"LI",{});var Lye=n(q2);Gte=s(Lye,"STRONG",{});var XWr=n(Gte);nwo=r(XWr,"mpnet"),XWr.forEach(t),lwo=r(Lye," \u2014 "),OI=s(Lye,"A",{href:!0});var VWr=n(OI);iwo=r(VWr,"MPNetForMultipleChoice"),VWr.forEach(t),dwo=r(Lye," (MPNet model)"),Lye.forEach(t),cwo=i(O),G2=s(O,"LI",{});var Bye=n(G2);Ote=s(Bye,"STRONG",{});var zWr=n(Ote);mwo=r(zWr,"nystromformer"),zWr.forEach(t),fwo=r(Bye," \u2014 "),XI=s(Bye,"A",{href:!0});var WWr=n(XI);gwo=r(WWr,"NystromformerForMultipleChoice"),WWr.forEach(t),hwo=r(Bye," (Nystromformer model)"),Bye.forEach(t),uwo=i(O),O2=s(O,"LI",{});var xye=n(O2);Xte=s(xye,"STRONG",{});var QWr=n(Xte);pwo=r(QWr,"qdqbert"),QWr.forEach(t),_wo=r(xye," \u2014 "),VI=s(xye,"A",{href:!0});var HWr=n(VI);bwo=r(HWr,"QDQBertForMultipleChoice"),HWr.forEach(t),vwo=r(xye," (QDQBert model)"),xye.forEach(t),Two=i(O),X2=s(O,"LI",{});var kye=n(X2);Vte=s(kye,"STRONG",{});var UWr=n(Vte);Fwo=r(UWr,"rembert"),UWr.forEach(t),Cwo=r(kye," \u2014 "),zI=s(kye,"A",{href:!0});var JWr=n(zI);Mwo=r(JWr,"RemBertForMultipleChoice"),JWr.forEach(t),Ewo=r(kye," (RemBERT model)"),kye.forEach(t),ywo=i(O),V2=s(O,"LI",{});var Rye=n(V2);zte=s(Rye,"STRONG",{});var YWr=n(zte);wwo=r(YWr,"roberta"),YWr.forEach(t),Awo=r(Rye," \u2014 "),WI=s(Rye,"A",{href:!0});var KWr=n(WI);Lwo=r(KWr,"RobertaForMultipleChoice"),KWr.forEach(t),Bwo=r(Rye," (RoBERTa model)"),Rye.forEach(t),xwo=i(O),z2=s(O,"LI",{});var Sye=n(z2);Wte=s(Sye,"STRONG",{});var ZWr=n(Wte);kwo=r(ZWr,"roformer"),ZWr.forEach(t),Rwo=r(Sye," \u2014 "),QI=s(Sye,"A",{href:!0});var eQr=n(QI);Swo=r(eQr,"RoFormerForMultipleChoice"),eQr.forEach(t),Pwo=r(Sye," (RoFormer model)"),Sye.forEach(t),$wo=i(O),W2=s(O,"LI",{});var Pye=n(W2);Qte=s(Pye,"STRONG",{});var oQr=n(Qte);Iwo=r(oQr,"squeezebert"),oQr.forEach(t),Dwo=r(Pye," \u2014 "),HI=s(Pye,"A",{href:!0});var rQr=n(HI);jwo=r(rQr,"SqueezeBertForMultipleChoice"),rQr.forEach(t),Nwo=r(Pye," (SqueezeBERT model)"),Pye.forEach(t),qwo=i(O),Q2=s(O,"LI",{});var $ye=n(Q2);Hte=s($ye,"STRONG",{});var tQr=n(Hte);Gwo=r(tQr,"xlm"),tQr.forEach(t),Owo=r($ye," \u2014 "),UI=s($ye,"A",{href:!0});var aQr=n(UI);Xwo=r(aQr,"XLMForMultipleChoice"),aQr.forEach(t),Vwo=r($ye," (XLM model)"),$ye.forEach(t),zwo=i(O),H2=s(O,"LI",{});var Iye=n(H2);Ute=s(Iye,"STRONG",{});var sQr=n(Ute);Wwo=r(sQr,"xlm-roberta"),sQr.forEach(t),Qwo=r(Iye," \u2014 "),JI=s(Iye,"A",{href:!0});var nQr=n(JI);Hwo=r(nQr,"XLMRobertaForMultipleChoice"),nQr.forEach(t),Uwo=r(Iye," (XLM-RoBERTa model)"),Iye.forEach(t),Jwo=i(O),U2=s(O,"LI",{});var Dye=n(U2);Jte=s(Dye,"STRONG",{});var lQr=n(Jte);Ywo=r(lQr,"xlm-roberta-xl"),lQr.forEach(t),Kwo=r(Dye," \u2014 "),YI=s(Dye,"A",{href:!0});var iQr=n(YI);Zwo=r(iQr,"XLMRobertaXLForMultipleChoice"),iQr.forEach(t),e6o=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),o6o=i(O),J2=s(O,"LI",{});var jye=n(J2);Yte=s(jye,"STRONG",{});var dQr=n(Yte);r6o=r(dQr,"xlnet"),dQr.forEach(t),t6o=r(jye," \u2014 "),KI=s(jye,"A",{href:!0});var cQr=n(KI);a6o=r(cQr,"XLNetForMultipleChoice"),cQr.forEach(t),s6o=r(jye," (XLNet model)"),jye.forEach(t),n6o=i(O),Y2=s(O,"LI",{});var Nye=n(Y2);Kte=s(Nye,"STRONG",{});var mQr=n(Kte);l6o=r(mQr,"yoso"),mQr.forEach(t),i6o=r(Nye," \u2014 "),ZI=s(Nye,"A",{href:!0});var fQr=n(ZI);d6o=r(fQr,"YosoForMultipleChoice"),fQr.forEach(t),c6o=r(Nye," (YOSO model)"),Nye.forEach(t),O.forEach(t),m6o=i(Gt),K2=s(Gt,"P",{});var qye=n(K2);f6o=r(qye,"The model is set in evaluation mode by default using "),Zte=s(qye,"CODE",{});var gQr=n(Zte);g6o=r(gQr,"model.eval()"),gQr.forEach(t),h6o=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eae=s(qye,"CODE",{});var hQr=n(eae);u6o=r(hQr,"model.train()"),hQr.forEach(t),qye.forEach(t),p6o=i(Gt),oae=s(Gt,"P",{});var uQr=n(oae);_6o=r(uQr,"Examples:"),uQr.forEach(t),b6o=i(Gt),f(Jy.$$.fragment,Gt),Gt.forEach(t),Kn.forEach(t),K9e=i(c),dd=s(c,"H2",{class:!0});var ske=n(dd);Z2=s(ske,"A",{id:!0,class:!0,href:!0});var pQr=n(Z2);rae=s(pQr,"SPAN",{});var _Qr=n(rae);f(Yy.$$.fragment,_Qr),_Qr.forEach(t),pQr.forEach(t),v6o=i(ske),tae=s(ske,"SPAN",{});var bQr=n(tae);T6o=r(bQr,"AutoModelForNextSentencePrediction"),bQr.forEach(t),ske.forEach(t),Z9e=i(c),er=s(c,"DIV",{class:!0});var el=n(er);f(Ky.$$.fragment,el),F6o=i(el),cd=s(el,"P",{});var QV=n(cd);C6o=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aae=s(QV,"CODE",{});var vQr=n(aae);M6o=r(vQr,"from_pretrained()"),vQr.forEach(t),E6o=r(QV,"class method or the "),sae=s(QV,"CODE",{});var TQr=n(sae);y6o=r(TQr,"from_config()"),TQr.forEach(t),w6o=r(QV,`class
method.`),QV.forEach(t),A6o=i(el),Zy=s(el,"P",{});var nke=n(Zy);L6o=r(nke,"This class cannot be instantiated directly using "),nae=s(nke,"CODE",{});var FQr=n(nae);B6o=r(FQr,"__init__()"),FQr.forEach(t),x6o=r(nke," (throws an error)."),nke.forEach(t),k6o=i(el),Qr=s(el,"DIV",{class:!0});var ol=n(Qr);f(ew.$$.fragment,ol),R6o=i(ol),lae=s(ol,"P",{});var CQr=n(lae);S6o=r(CQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CQr.forEach(t),P6o=i(ol),md=s(ol,"P",{});var HV=n(md);$6o=r(HV,`Note:
Loading a model from its configuration file does `),iae=s(HV,"STRONG",{});var MQr=n(iae);I6o=r(MQr,"not"),MQr.forEach(t),D6o=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=s(HV,"CODE",{});var EQr=n(dae);j6o=r(EQr,"from_pretrained()"),EQr.forEach(t),N6o=r(HV,"to load the model weights."),HV.forEach(t),q6o=i(ol),cae=s(ol,"P",{});var yQr=n(cae);G6o=r(yQr,"Examples:"),yQr.forEach(t),O6o=i(ol),f(ow.$$.fragment,ol),ol.forEach(t),X6o=i(el),Ne=s(el,"DIV",{class:!0});var Ot=n(Ne);f(rw.$$.fragment,Ot),V6o=i(Ot),mae=s(Ot,"P",{});var wQr=n(mae);z6o=r(wQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wQr.forEach(t),W6o=i(Ot),Wa=s(Ot,"P",{});var S3=n(Wa);Q6o=r(S3,"The model class to instantiate is selected based on the "),fae=s(S3,"CODE",{});var AQr=n(fae);H6o=r(AQr,"model_type"),AQr.forEach(t),U6o=r(S3,` property of the config object (either
passed as an argument or loaded from `),gae=s(S3,"CODE",{});var LQr=n(gae);J6o=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),Y6o=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hae=s(S3,"CODE",{});var BQr=n(hae);K6o=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Z6o=r(S3,":"),S3.forEach(t),eAo=i(Ot),sa=s(Ot,"UL",{});var rl=n(sa);ev=s(rl,"LI",{});var Gye=n(ev);uae=s(Gye,"STRONG",{});var xQr=n(uae);oAo=r(xQr,"bert"),xQr.forEach(t),rAo=r(Gye," \u2014 "),eD=s(Gye,"A",{href:!0});var kQr=n(eD);tAo=r(kQr,"BertForNextSentencePrediction"),kQr.forEach(t),aAo=r(Gye," (BERT model)"),Gye.forEach(t),sAo=i(rl),ov=s(rl,"LI",{});var Oye=n(ov);pae=s(Oye,"STRONG",{});var RQr=n(pae);nAo=r(RQr,"fnet"),RQr.forEach(t),lAo=r(Oye," \u2014 "),oD=s(Oye,"A",{href:!0});var SQr=n(oD);iAo=r(SQr,"FNetForNextSentencePrediction"),SQr.forEach(t),dAo=r(Oye," (FNet model)"),Oye.forEach(t),cAo=i(rl),rv=s(rl,"LI",{});var Xye=n(rv);_ae=s(Xye,"STRONG",{});var PQr=n(_ae);mAo=r(PQr,"megatron-bert"),PQr.forEach(t),fAo=r(Xye," \u2014 "),rD=s(Xye,"A",{href:!0});var $Qr=n(rD);gAo=r($Qr,"MegatronBertForNextSentencePrediction"),$Qr.forEach(t),hAo=r(Xye," (MegatronBert model)"),Xye.forEach(t),uAo=i(rl),tv=s(rl,"LI",{});var Vye=n(tv);bae=s(Vye,"STRONG",{});var IQr=n(bae);pAo=r(IQr,"mobilebert"),IQr.forEach(t),_Ao=r(Vye," \u2014 "),tD=s(Vye,"A",{href:!0});var DQr=n(tD);bAo=r(DQr,"MobileBertForNextSentencePrediction"),DQr.forEach(t),vAo=r(Vye," (MobileBERT model)"),Vye.forEach(t),TAo=i(rl),av=s(rl,"LI",{});var zye=n(av);vae=s(zye,"STRONG",{});var jQr=n(vae);FAo=r(jQr,"qdqbert"),jQr.forEach(t),CAo=r(zye," \u2014 "),aD=s(zye,"A",{href:!0});var NQr=n(aD);MAo=r(NQr,"QDQBertForNextSentencePrediction"),NQr.forEach(t),EAo=r(zye," (QDQBert model)"),zye.forEach(t),rl.forEach(t),yAo=i(Ot),sv=s(Ot,"P",{});var Wye=n(sv);wAo=r(Wye,"The model is set in evaluation mode by default using "),Tae=s(Wye,"CODE",{});var qQr=n(Tae);AAo=r(qQr,"model.eval()"),qQr.forEach(t),LAo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fae=s(Wye,"CODE",{});var GQr=n(Fae);BAo=r(GQr,"model.train()"),GQr.forEach(t),Wye.forEach(t),xAo=i(Ot),Cae=s(Ot,"P",{});var OQr=n(Cae);kAo=r(OQr,"Examples:"),OQr.forEach(t),RAo=i(Ot),f(tw.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),eBe=i(c),fd=s(c,"H2",{class:!0});var lke=n(fd);nv=s(lke,"A",{id:!0,class:!0,href:!0});var XQr=n(nv);Mae=s(XQr,"SPAN",{});var VQr=n(Mae);f(aw.$$.fragment,VQr),VQr.forEach(t),XQr.forEach(t),SAo=i(lke),Eae=s(lke,"SPAN",{});var zQr=n(Eae);PAo=r(zQr,"AutoModelForTokenClassification"),zQr.forEach(t),lke.forEach(t),oBe=i(c),or=s(c,"DIV",{class:!0});var tl=n(or);f(sw.$$.fragment,tl),$Ao=i(tl),gd=s(tl,"P",{});var UV=n(gd);IAo=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=s(UV,"CODE",{});var WQr=n(yae);DAo=r(WQr,"from_pretrained()"),WQr.forEach(t),jAo=r(UV,"class method or the "),wae=s(UV,"CODE",{});var QQr=n(wae);NAo=r(QQr,"from_config()"),QQr.forEach(t),qAo=r(UV,`class
method.`),UV.forEach(t),GAo=i(tl),nw=s(tl,"P",{});var ike=n(nw);OAo=r(ike,"This class cannot be instantiated directly using "),Aae=s(ike,"CODE",{});var HQr=n(Aae);XAo=r(HQr,"__init__()"),HQr.forEach(t),VAo=r(ike," (throws an error)."),ike.forEach(t),zAo=i(tl),Hr=s(tl,"DIV",{class:!0});var al=n(Hr);f(lw.$$.fragment,al),WAo=i(al),Lae=s(al,"P",{});var UQr=n(Lae);QAo=r(UQr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UQr.forEach(t),HAo=i(al),hd=s(al,"P",{});var JV=n(hd);UAo=r(JV,`Note:
Loading a model from its configuration file does `),Bae=s(JV,"STRONG",{});var JQr=n(Bae);JAo=r(JQr,"not"),JQr.forEach(t),YAo=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=s(JV,"CODE",{});var YQr=n(xae);KAo=r(YQr,"from_pretrained()"),YQr.forEach(t),ZAo=r(JV,"to load the model weights."),JV.forEach(t),e0o=i(al),kae=s(al,"P",{});var KQr=n(kae);o0o=r(KQr,"Examples:"),KQr.forEach(t),r0o=i(al),f(iw.$$.fragment,al),al.forEach(t),t0o=i(tl),qe=s(tl,"DIV",{class:!0});var Xt=n(qe);f(dw.$$.fragment,Xt),a0o=i(Xt),Rae=s(Xt,"P",{});var ZQr=n(Rae);s0o=r(ZQr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZQr.forEach(t),n0o=i(Xt),Qa=s(Xt,"P",{});var P3=n(Qa);l0o=r(P3,"The model class to instantiate is selected based on the "),Sae=s(P3,"CODE",{});var eHr=n(Sae);i0o=r(eHr,"model_type"),eHr.forEach(t),d0o=r(P3,` property of the config object (either
passed as an argument or loaded from `),Pae=s(P3,"CODE",{});var oHr=n(Pae);c0o=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),m0o=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ae=s(P3,"CODE",{});var rHr=n($ae);f0o=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),g0o=r(P3,":"),P3.forEach(t),h0o=i(Xt),N=s(Xt,"UL",{});var q=n(N);lv=s(q,"LI",{});var Qye=n(lv);Iae=s(Qye,"STRONG",{});var tHr=n(Iae);u0o=r(tHr,"albert"),tHr.forEach(t),p0o=r(Qye," \u2014 "),sD=s(Qye,"A",{href:!0});var aHr=n(sD);_0o=r(aHr,"AlbertForTokenClassification"),aHr.forEach(t),b0o=r(Qye," (ALBERT model)"),Qye.forEach(t),v0o=i(q),iv=s(q,"LI",{});var Hye=n(iv);Dae=s(Hye,"STRONG",{});var sHr=n(Dae);T0o=r(sHr,"bert"),sHr.forEach(t),F0o=r(Hye," \u2014 "),nD=s(Hye,"A",{href:!0});var nHr=n(nD);C0o=r(nHr,"BertForTokenClassification"),nHr.forEach(t),M0o=r(Hye," (BERT model)"),Hye.forEach(t),E0o=i(q),dv=s(q,"LI",{});var Uye=n(dv);jae=s(Uye,"STRONG",{});var lHr=n(jae);y0o=r(lHr,"big_bird"),lHr.forEach(t),w0o=r(Uye," \u2014 "),lD=s(Uye,"A",{href:!0});var iHr=n(lD);A0o=r(iHr,"BigBirdForTokenClassification"),iHr.forEach(t),L0o=r(Uye," (BigBird model)"),Uye.forEach(t),B0o=i(q),cv=s(q,"LI",{});var Jye=n(cv);Nae=s(Jye,"STRONG",{});var dHr=n(Nae);x0o=r(dHr,"camembert"),dHr.forEach(t),k0o=r(Jye," \u2014 "),iD=s(Jye,"A",{href:!0});var cHr=n(iD);R0o=r(cHr,"CamembertForTokenClassification"),cHr.forEach(t),S0o=r(Jye," (CamemBERT model)"),Jye.forEach(t),P0o=i(q),mv=s(q,"LI",{});var Yye=n(mv);qae=s(Yye,"STRONG",{});var mHr=n(qae);$0o=r(mHr,"canine"),mHr.forEach(t),I0o=r(Yye," \u2014 "),dD=s(Yye,"A",{href:!0});var fHr=n(dD);D0o=r(fHr,"CanineForTokenClassification"),fHr.forEach(t),j0o=r(Yye," (Canine model)"),Yye.forEach(t),N0o=i(q),fv=s(q,"LI",{});var Kye=n(fv);Gae=s(Kye,"STRONG",{});var gHr=n(Gae);q0o=r(gHr,"convbert"),gHr.forEach(t),G0o=r(Kye," \u2014 "),cD=s(Kye,"A",{href:!0});var hHr=n(cD);O0o=r(hHr,"ConvBertForTokenClassification"),hHr.forEach(t),X0o=r(Kye," (ConvBERT model)"),Kye.forEach(t),V0o=i(q),gv=s(q,"LI",{});var Zye=n(gv);Oae=s(Zye,"STRONG",{});var uHr=n(Oae);z0o=r(uHr,"data2vec-text"),uHr.forEach(t),W0o=r(Zye," \u2014 "),mD=s(Zye,"A",{href:!0});var pHr=n(mD);Q0o=r(pHr,"Data2VecTextForTokenClassification"),pHr.forEach(t),H0o=r(Zye," (Data2VecText model)"),Zye.forEach(t),U0o=i(q),hv=s(q,"LI",{});var ewe=n(hv);Xae=s(ewe,"STRONG",{});var _Hr=n(Xae);J0o=r(_Hr,"deberta"),_Hr.forEach(t),Y0o=r(ewe," \u2014 "),fD=s(ewe,"A",{href:!0});var bHr=n(fD);K0o=r(bHr,"DebertaForTokenClassification"),bHr.forEach(t),Z0o=r(ewe," (DeBERTa model)"),ewe.forEach(t),eLo=i(q),uv=s(q,"LI",{});var owe=n(uv);Vae=s(owe,"STRONG",{});var vHr=n(Vae);oLo=r(vHr,"deberta-v2"),vHr.forEach(t),rLo=r(owe," \u2014 "),gD=s(owe,"A",{href:!0});var THr=n(gD);tLo=r(THr,"DebertaV2ForTokenClassification"),THr.forEach(t),aLo=r(owe," (DeBERTa-v2 model)"),owe.forEach(t),sLo=i(q),pv=s(q,"LI",{});var rwe=n(pv);zae=s(rwe,"STRONG",{});var FHr=n(zae);nLo=r(FHr,"distilbert"),FHr.forEach(t),lLo=r(rwe," \u2014 "),hD=s(rwe,"A",{href:!0});var CHr=n(hD);iLo=r(CHr,"DistilBertForTokenClassification"),CHr.forEach(t),dLo=r(rwe," (DistilBERT model)"),rwe.forEach(t),cLo=i(q),_v=s(q,"LI",{});var twe=n(_v);Wae=s(twe,"STRONG",{});var MHr=n(Wae);mLo=r(MHr,"electra"),MHr.forEach(t),fLo=r(twe," \u2014 "),uD=s(twe,"A",{href:!0});var EHr=n(uD);gLo=r(EHr,"ElectraForTokenClassification"),EHr.forEach(t),hLo=r(twe," (ELECTRA model)"),twe.forEach(t),uLo=i(q),bv=s(q,"LI",{});var awe=n(bv);Qae=s(awe,"STRONG",{});var yHr=n(Qae);pLo=r(yHr,"flaubert"),yHr.forEach(t),_Lo=r(awe," \u2014 "),pD=s(awe,"A",{href:!0});var wHr=n(pD);bLo=r(wHr,"FlaubertForTokenClassification"),wHr.forEach(t),vLo=r(awe," (FlauBERT model)"),awe.forEach(t),TLo=i(q),vv=s(q,"LI",{});var swe=n(vv);Hae=s(swe,"STRONG",{});var AHr=n(Hae);FLo=r(AHr,"fnet"),AHr.forEach(t),CLo=r(swe," \u2014 "),_D=s(swe,"A",{href:!0});var LHr=n(_D);MLo=r(LHr,"FNetForTokenClassification"),LHr.forEach(t),ELo=r(swe," (FNet model)"),swe.forEach(t),yLo=i(q),Tv=s(q,"LI",{});var nwe=n(Tv);Uae=s(nwe,"STRONG",{});var BHr=n(Uae);wLo=r(BHr,"funnel"),BHr.forEach(t),ALo=r(nwe," \u2014 "),bD=s(nwe,"A",{href:!0});var xHr=n(bD);LLo=r(xHr,"FunnelForTokenClassification"),xHr.forEach(t),BLo=r(nwe," (Funnel Transformer model)"),nwe.forEach(t),xLo=i(q),Fv=s(q,"LI",{});var lwe=n(Fv);Jae=s(lwe,"STRONG",{});var kHr=n(Jae);kLo=r(kHr,"gpt2"),kHr.forEach(t),RLo=r(lwe," \u2014 "),vD=s(lwe,"A",{href:!0});var RHr=n(vD);SLo=r(RHr,"GPT2ForTokenClassification"),RHr.forEach(t),PLo=r(lwe," (OpenAI GPT-2 model)"),lwe.forEach(t),$Lo=i(q),Cv=s(q,"LI",{});var iwe=n(Cv);Yae=s(iwe,"STRONG",{});var SHr=n(Yae);ILo=r(SHr,"ibert"),SHr.forEach(t),DLo=r(iwe," \u2014 "),TD=s(iwe,"A",{href:!0});var PHr=n(TD);jLo=r(PHr,"IBertForTokenClassification"),PHr.forEach(t),NLo=r(iwe," (I-BERT model)"),iwe.forEach(t),qLo=i(q),Mv=s(q,"LI",{});var dwe=n(Mv);Kae=s(dwe,"STRONG",{});var $Hr=n(Kae);GLo=r($Hr,"layoutlm"),$Hr.forEach(t),OLo=r(dwe," \u2014 "),FD=s(dwe,"A",{href:!0});var IHr=n(FD);XLo=r(IHr,"LayoutLMForTokenClassification"),IHr.forEach(t),VLo=r(dwe," (LayoutLM model)"),dwe.forEach(t),zLo=i(q),Ev=s(q,"LI",{});var cwe=n(Ev);Zae=s(cwe,"STRONG",{});var DHr=n(Zae);WLo=r(DHr,"layoutlmv2"),DHr.forEach(t),QLo=r(cwe," \u2014 "),CD=s(cwe,"A",{href:!0});var jHr=n(CD);HLo=r(jHr,"LayoutLMv2ForTokenClassification"),jHr.forEach(t),ULo=r(cwe," (LayoutLMv2 model)"),cwe.forEach(t),JLo=i(q),yv=s(q,"LI",{});var mwe=n(yv);ese=s(mwe,"STRONG",{});var NHr=n(ese);YLo=r(NHr,"longformer"),NHr.forEach(t),KLo=r(mwe," \u2014 "),MD=s(mwe,"A",{href:!0});var qHr=n(MD);ZLo=r(qHr,"LongformerForTokenClassification"),qHr.forEach(t),e8o=r(mwe," (Longformer model)"),mwe.forEach(t),o8o=i(q),wv=s(q,"LI",{});var fwe=n(wv);ose=s(fwe,"STRONG",{});var GHr=n(ose);r8o=r(GHr,"megatron-bert"),GHr.forEach(t),t8o=r(fwe," \u2014 "),ED=s(fwe,"A",{href:!0});var OHr=n(ED);a8o=r(OHr,"MegatronBertForTokenClassification"),OHr.forEach(t),s8o=r(fwe," (MegatronBert model)"),fwe.forEach(t),n8o=i(q),Av=s(q,"LI",{});var gwe=n(Av);rse=s(gwe,"STRONG",{});var XHr=n(rse);l8o=r(XHr,"mobilebert"),XHr.forEach(t),i8o=r(gwe," \u2014 "),yD=s(gwe,"A",{href:!0});var VHr=n(yD);d8o=r(VHr,"MobileBertForTokenClassification"),VHr.forEach(t),c8o=r(gwe," (MobileBERT model)"),gwe.forEach(t),m8o=i(q),Lv=s(q,"LI",{});var hwe=n(Lv);tse=s(hwe,"STRONG",{});var zHr=n(tse);f8o=r(zHr,"mpnet"),zHr.forEach(t),g8o=r(hwe," \u2014 "),wD=s(hwe,"A",{href:!0});var WHr=n(wD);h8o=r(WHr,"MPNetForTokenClassification"),WHr.forEach(t),u8o=r(hwe," (MPNet model)"),hwe.forEach(t),p8o=i(q),Bv=s(q,"LI",{});var uwe=n(Bv);ase=s(uwe,"STRONG",{});var QHr=n(ase);_8o=r(QHr,"nystromformer"),QHr.forEach(t),b8o=r(uwe," \u2014 "),AD=s(uwe,"A",{href:!0});var HHr=n(AD);v8o=r(HHr,"NystromformerForTokenClassification"),HHr.forEach(t),T8o=r(uwe," (Nystromformer model)"),uwe.forEach(t),F8o=i(q),xv=s(q,"LI",{});var pwe=n(xv);sse=s(pwe,"STRONG",{});var UHr=n(sse);C8o=r(UHr,"qdqbert"),UHr.forEach(t),M8o=r(pwe," \u2014 "),LD=s(pwe,"A",{href:!0});var JHr=n(LD);E8o=r(JHr,"QDQBertForTokenClassification"),JHr.forEach(t),y8o=r(pwe," (QDQBert model)"),pwe.forEach(t),w8o=i(q),kv=s(q,"LI",{});var _we=n(kv);nse=s(_we,"STRONG",{});var YHr=n(nse);A8o=r(YHr,"rembert"),YHr.forEach(t),L8o=r(_we," \u2014 "),BD=s(_we,"A",{href:!0});var KHr=n(BD);B8o=r(KHr,"RemBertForTokenClassification"),KHr.forEach(t),x8o=r(_we," (RemBERT model)"),_we.forEach(t),k8o=i(q),Rv=s(q,"LI",{});var bwe=n(Rv);lse=s(bwe,"STRONG",{});var ZHr=n(lse);R8o=r(ZHr,"roberta"),ZHr.forEach(t),S8o=r(bwe," \u2014 "),xD=s(bwe,"A",{href:!0});var eUr=n(xD);P8o=r(eUr,"RobertaForTokenClassification"),eUr.forEach(t),$8o=r(bwe," (RoBERTa model)"),bwe.forEach(t),I8o=i(q),Sv=s(q,"LI",{});var vwe=n(Sv);ise=s(vwe,"STRONG",{});var oUr=n(ise);D8o=r(oUr,"roformer"),oUr.forEach(t),j8o=r(vwe," \u2014 "),kD=s(vwe,"A",{href:!0});var rUr=n(kD);N8o=r(rUr,"RoFormerForTokenClassification"),rUr.forEach(t),q8o=r(vwe," (RoFormer model)"),vwe.forEach(t),G8o=i(q),Pv=s(q,"LI",{});var Twe=n(Pv);dse=s(Twe,"STRONG",{});var tUr=n(dse);O8o=r(tUr,"squeezebert"),tUr.forEach(t),X8o=r(Twe," \u2014 "),RD=s(Twe,"A",{href:!0});var aUr=n(RD);V8o=r(aUr,"SqueezeBertForTokenClassification"),aUr.forEach(t),z8o=r(Twe," (SqueezeBERT model)"),Twe.forEach(t),W8o=i(q),$v=s(q,"LI",{});var Fwe=n($v);cse=s(Fwe,"STRONG",{});var sUr=n(cse);Q8o=r(sUr,"xlm"),sUr.forEach(t),H8o=r(Fwe," \u2014 "),SD=s(Fwe,"A",{href:!0});var nUr=n(SD);U8o=r(nUr,"XLMForTokenClassification"),nUr.forEach(t),J8o=r(Fwe," (XLM model)"),Fwe.forEach(t),Y8o=i(q),Iv=s(q,"LI",{});var Cwe=n(Iv);mse=s(Cwe,"STRONG",{});var lUr=n(mse);K8o=r(lUr,"xlm-roberta"),lUr.forEach(t),Z8o=r(Cwe," \u2014 "),PD=s(Cwe,"A",{href:!0});var iUr=n(PD);e7o=r(iUr,"XLMRobertaForTokenClassification"),iUr.forEach(t),o7o=r(Cwe," (XLM-RoBERTa model)"),Cwe.forEach(t),r7o=i(q),Dv=s(q,"LI",{});var Mwe=n(Dv);fse=s(Mwe,"STRONG",{});var dUr=n(fse);t7o=r(dUr,"xlm-roberta-xl"),dUr.forEach(t),a7o=r(Mwe," \u2014 "),$D=s(Mwe,"A",{href:!0});var cUr=n($D);s7o=r(cUr,"XLMRobertaXLForTokenClassification"),cUr.forEach(t),n7o=r(Mwe," (XLM-RoBERTa-XL model)"),Mwe.forEach(t),l7o=i(q),jv=s(q,"LI",{});var Ewe=n(jv);gse=s(Ewe,"STRONG",{});var mUr=n(gse);i7o=r(mUr,"xlnet"),mUr.forEach(t),d7o=r(Ewe," \u2014 "),ID=s(Ewe,"A",{href:!0});var fUr=n(ID);c7o=r(fUr,"XLNetForTokenClassification"),fUr.forEach(t),m7o=r(Ewe," (XLNet model)"),Ewe.forEach(t),f7o=i(q),Nv=s(q,"LI",{});var ywe=n(Nv);hse=s(ywe,"STRONG",{});var gUr=n(hse);g7o=r(gUr,"yoso"),gUr.forEach(t),h7o=r(ywe," \u2014 "),DD=s(ywe,"A",{href:!0});var hUr=n(DD);u7o=r(hUr,"YosoForTokenClassification"),hUr.forEach(t),p7o=r(ywe," (YOSO model)"),ywe.forEach(t),q.forEach(t),_7o=i(Xt),qv=s(Xt,"P",{});var wwe=n(qv);b7o=r(wwe,"The model is set in evaluation mode by default using "),use=s(wwe,"CODE",{});var uUr=n(use);v7o=r(uUr,"model.eval()"),uUr.forEach(t),T7o=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=s(wwe,"CODE",{});var pUr=n(pse);F7o=r(pUr,"model.train()"),pUr.forEach(t),wwe.forEach(t),C7o=i(Xt),_se=s(Xt,"P",{});var _Ur=n(_se);M7o=r(_Ur,"Examples:"),_Ur.forEach(t),E7o=i(Xt),f(cw.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),rBe=i(c),ud=s(c,"H2",{class:!0});var dke=n(ud);Gv=s(dke,"A",{id:!0,class:!0,href:!0});var bUr=n(Gv);bse=s(bUr,"SPAN",{});var vUr=n(bse);f(mw.$$.fragment,vUr),vUr.forEach(t),bUr.forEach(t),y7o=i(dke),vse=s(dke,"SPAN",{});var TUr=n(vse);w7o=r(TUr,"AutoModelForQuestionAnswering"),TUr.forEach(t),dke.forEach(t),tBe=i(c),rr=s(c,"DIV",{class:!0});var sl=n(rr);f(fw.$$.fragment,sl),A7o=i(sl),pd=s(sl,"P",{});var YV=n(pd);L7o=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tse=s(YV,"CODE",{});var FUr=n(Tse);B7o=r(FUr,"from_pretrained()"),FUr.forEach(t),x7o=r(YV,"class method or the "),Fse=s(YV,"CODE",{});var CUr=n(Fse);k7o=r(CUr,"from_config()"),CUr.forEach(t),R7o=r(YV,`class
method.`),YV.forEach(t),S7o=i(sl),gw=s(sl,"P",{});var cke=n(gw);P7o=r(cke,"This class cannot be instantiated directly using "),Cse=s(cke,"CODE",{});var MUr=n(Cse);$7o=r(MUr,"__init__()"),MUr.forEach(t),I7o=r(cke," (throws an error)."),cke.forEach(t),D7o=i(sl),Ur=s(sl,"DIV",{class:!0});var nl=n(Ur);f(hw.$$.fragment,nl),j7o=i(nl),Mse=s(nl,"P",{});var EUr=n(Mse);N7o=r(EUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),EUr.forEach(t),q7o=i(nl),_d=s(nl,"P",{});var KV=n(_d);G7o=r(KV,`Note:
Loading a model from its configuration file does `),Ese=s(KV,"STRONG",{});var yUr=n(Ese);O7o=r(yUr,"not"),yUr.forEach(t),X7o=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),yse=s(KV,"CODE",{});var wUr=n(yse);V7o=r(wUr,"from_pretrained()"),wUr.forEach(t),z7o=r(KV,"to load the model weights."),KV.forEach(t),W7o=i(nl),wse=s(nl,"P",{});var AUr=n(wse);Q7o=r(AUr,"Examples:"),AUr.forEach(t),H7o=i(nl),f(uw.$$.fragment,nl),nl.forEach(t),U7o=i(sl),Ge=s(sl,"DIV",{class:!0});var Vt=n(Ge);f(pw.$$.fragment,Vt),J7o=i(Vt),Ase=s(Vt,"P",{});var LUr=n(Ase);Y7o=r(LUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LUr.forEach(t),K7o=i(Vt),Ha=s(Vt,"P",{});var $3=n(Ha);Z7o=r($3,"The model class to instantiate is selected based on the "),Lse=s($3,"CODE",{});var BUr=n(Lse);e9o=r(BUr,"model_type"),BUr.forEach(t),o9o=r($3,` property of the config object (either
passed as an argument or loaded from `),Bse=s($3,"CODE",{});var xUr=n(Bse);r9o=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),t9o=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xse=s($3,"CODE",{});var kUr=n(xse);a9o=r(kUr,"pretrained_model_name_or_path"),kUr.forEach(t),s9o=r($3,":"),$3.forEach(t),n9o=i(Vt),R=s(Vt,"UL",{});var P=n(R);Ov=s(P,"LI",{});var Awe=n(Ov);kse=s(Awe,"STRONG",{});var RUr=n(kse);l9o=r(RUr,"albert"),RUr.forEach(t),i9o=r(Awe," \u2014 "),jD=s(Awe,"A",{href:!0});var SUr=n(jD);d9o=r(SUr,"AlbertForQuestionAnswering"),SUr.forEach(t),c9o=r(Awe," (ALBERT model)"),Awe.forEach(t),m9o=i(P),Xv=s(P,"LI",{});var Lwe=n(Xv);Rse=s(Lwe,"STRONG",{});var PUr=n(Rse);f9o=r(PUr,"bart"),PUr.forEach(t),g9o=r(Lwe," \u2014 "),ND=s(Lwe,"A",{href:!0});var $Ur=n(ND);h9o=r($Ur,"BartForQuestionAnswering"),$Ur.forEach(t),u9o=r(Lwe," (BART model)"),Lwe.forEach(t),p9o=i(P),Vv=s(P,"LI",{});var Bwe=n(Vv);Sse=s(Bwe,"STRONG",{});var IUr=n(Sse);_9o=r(IUr,"bert"),IUr.forEach(t),b9o=r(Bwe," \u2014 "),qD=s(Bwe,"A",{href:!0});var DUr=n(qD);v9o=r(DUr,"BertForQuestionAnswering"),DUr.forEach(t),T9o=r(Bwe," (BERT model)"),Bwe.forEach(t),F9o=i(P),zv=s(P,"LI",{});var xwe=n(zv);Pse=s(xwe,"STRONG",{});var jUr=n(Pse);C9o=r(jUr,"big_bird"),jUr.forEach(t),M9o=r(xwe," \u2014 "),GD=s(xwe,"A",{href:!0});var NUr=n(GD);E9o=r(NUr,"BigBirdForQuestionAnswering"),NUr.forEach(t),y9o=r(xwe," (BigBird model)"),xwe.forEach(t),w9o=i(P),Wv=s(P,"LI",{});var kwe=n(Wv);$se=s(kwe,"STRONG",{});var qUr=n($se);A9o=r(qUr,"bigbird_pegasus"),qUr.forEach(t),L9o=r(kwe," \u2014 "),OD=s(kwe,"A",{href:!0});var GUr=n(OD);B9o=r(GUr,"BigBirdPegasusForQuestionAnswering"),GUr.forEach(t),x9o=r(kwe," (BigBirdPegasus model)"),kwe.forEach(t),k9o=i(P),Qv=s(P,"LI",{});var Rwe=n(Qv);Ise=s(Rwe,"STRONG",{});var OUr=n(Ise);R9o=r(OUr,"camembert"),OUr.forEach(t),S9o=r(Rwe," \u2014 "),XD=s(Rwe,"A",{href:!0});var XUr=n(XD);P9o=r(XUr,"CamembertForQuestionAnswering"),XUr.forEach(t),$9o=r(Rwe," (CamemBERT model)"),Rwe.forEach(t),I9o=i(P),Hv=s(P,"LI",{});var Swe=n(Hv);Dse=s(Swe,"STRONG",{});var VUr=n(Dse);D9o=r(VUr,"canine"),VUr.forEach(t),j9o=r(Swe," \u2014 "),VD=s(Swe,"A",{href:!0});var zUr=n(VD);N9o=r(zUr,"CanineForQuestionAnswering"),zUr.forEach(t),q9o=r(Swe," (Canine model)"),Swe.forEach(t),G9o=i(P),Uv=s(P,"LI",{});var Pwe=n(Uv);jse=s(Pwe,"STRONG",{});var WUr=n(jse);O9o=r(WUr,"convbert"),WUr.forEach(t),X9o=r(Pwe," \u2014 "),zD=s(Pwe,"A",{href:!0});var QUr=n(zD);V9o=r(QUr,"ConvBertForQuestionAnswering"),QUr.forEach(t),z9o=r(Pwe," (ConvBERT model)"),Pwe.forEach(t),W9o=i(P),Jv=s(P,"LI",{});var $we=n(Jv);Nse=s($we,"STRONG",{});var HUr=n(Nse);Q9o=r(HUr,"data2vec-text"),HUr.forEach(t),H9o=r($we," \u2014 "),WD=s($we,"A",{href:!0});var UUr=n(WD);U9o=r(UUr,"Data2VecTextForQuestionAnswering"),UUr.forEach(t),J9o=r($we," (Data2VecText model)"),$we.forEach(t),Y9o=i(P),Yv=s(P,"LI",{});var Iwe=n(Yv);qse=s(Iwe,"STRONG",{});var JUr=n(qse);K9o=r(JUr,"deberta"),JUr.forEach(t),Z9o=r(Iwe," \u2014 "),QD=s(Iwe,"A",{href:!0});var YUr=n(QD);eBo=r(YUr,"DebertaForQuestionAnswering"),YUr.forEach(t),oBo=r(Iwe," (DeBERTa model)"),Iwe.forEach(t),rBo=i(P),Kv=s(P,"LI",{});var Dwe=n(Kv);Gse=s(Dwe,"STRONG",{});var KUr=n(Gse);tBo=r(KUr,"deberta-v2"),KUr.forEach(t),aBo=r(Dwe," \u2014 "),HD=s(Dwe,"A",{href:!0});var ZUr=n(HD);sBo=r(ZUr,"DebertaV2ForQuestionAnswering"),ZUr.forEach(t),nBo=r(Dwe," (DeBERTa-v2 model)"),Dwe.forEach(t),lBo=i(P),Zv=s(P,"LI",{});var jwe=n(Zv);Ose=s(jwe,"STRONG",{});var eJr=n(Ose);iBo=r(eJr,"distilbert"),eJr.forEach(t),dBo=r(jwe," \u2014 "),UD=s(jwe,"A",{href:!0});var oJr=n(UD);cBo=r(oJr,"DistilBertForQuestionAnswering"),oJr.forEach(t),mBo=r(jwe," (DistilBERT model)"),jwe.forEach(t),fBo=i(P),eT=s(P,"LI",{});var Nwe=n(eT);Xse=s(Nwe,"STRONG",{});var rJr=n(Xse);gBo=r(rJr,"electra"),rJr.forEach(t),hBo=r(Nwe," \u2014 "),JD=s(Nwe,"A",{href:!0});var tJr=n(JD);uBo=r(tJr,"ElectraForQuestionAnswering"),tJr.forEach(t),pBo=r(Nwe," (ELECTRA model)"),Nwe.forEach(t),_Bo=i(P),oT=s(P,"LI",{});var qwe=n(oT);Vse=s(qwe,"STRONG",{});var aJr=n(Vse);bBo=r(aJr,"flaubert"),aJr.forEach(t),vBo=r(qwe," \u2014 "),YD=s(qwe,"A",{href:!0});var sJr=n(YD);TBo=r(sJr,"FlaubertForQuestionAnsweringSimple"),sJr.forEach(t),FBo=r(qwe," (FlauBERT model)"),qwe.forEach(t),CBo=i(P),rT=s(P,"LI",{});var Gwe=n(rT);zse=s(Gwe,"STRONG",{});var nJr=n(zse);MBo=r(nJr,"fnet"),nJr.forEach(t),EBo=r(Gwe," \u2014 "),KD=s(Gwe,"A",{href:!0});var lJr=n(KD);yBo=r(lJr,"FNetForQuestionAnswering"),lJr.forEach(t),wBo=r(Gwe," (FNet model)"),Gwe.forEach(t),ABo=i(P),tT=s(P,"LI",{});var Owe=n(tT);Wse=s(Owe,"STRONG",{});var iJr=n(Wse);LBo=r(iJr,"funnel"),iJr.forEach(t),BBo=r(Owe," \u2014 "),ZD=s(Owe,"A",{href:!0});var dJr=n(ZD);xBo=r(dJr,"FunnelForQuestionAnswering"),dJr.forEach(t),kBo=r(Owe," (Funnel Transformer model)"),Owe.forEach(t),RBo=i(P),aT=s(P,"LI",{});var Xwe=n(aT);Qse=s(Xwe,"STRONG",{});var cJr=n(Qse);SBo=r(cJr,"gptj"),cJr.forEach(t),PBo=r(Xwe," \u2014 "),ej=s(Xwe,"A",{href:!0});var mJr=n(ej);$Bo=r(mJr,"GPTJForQuestionAnswering"),mJr.forEach(t),IBo=r(Xwe," (GPT-J model)"),Xwe.forEach(t),DBo=i(P),sT=s(P,"LI",{});var Vwe=n(sT);Hse=s(Vwe,"STRONG",{});var fJr=n(Hse);jBo=r(fJr,"ibert"),fJr.forEach(t),NBo=r(Vwe," \u2014 "),oj=s(Vwe,"A",{href:!0});var gJr=n(oj);qBo=r(gJr,"IBertForQuestionAnswering"),gJr.forEach(t),GBo=r(Vwe," (I-BERT model)"),Vwe.forEach(t),OBo=i(P),nT=s(P,"LI",{});var zwe=n(nT);Use=s(zwe,"STRONG",{});var hJr=n(Use);XBo=r(hJr,"layoutlmv2"),hJr.forEach(t),VBo=r(zwe," \u2014 "),rj=s(zwe,"A",{href:!0});var uJr=n(rj);zBo=r(uJr,"LayoutLMv2ForQuestionAnswering"),uJr.forEach(t),WBo=r(zwe," (LayoutLMv2 model)"),zwe.forEach(t),QBo=i(P),lT=s(P,"LI",{});var Wwe=n(lT);Jse=s(Wwe,"STRONG",{});var pJr=n(Jse);HBo=r(pJr,"led"),pJr.forEach(t),UBo=r(Wwe," \u2014 "),tj=s(Wwe,"A",{href:!0});var _Jr=n(tj);JBo=r(_Jr,"LEDForQuestionAnswering"),_Jr.forEach(t),YBo=r(Wwe," (LED model)"),Wwe.forEach(t),KBo=i(P),iT=s(P,"LI",{});var Qwe=n(iT);Yse=s(Qwe,"STRONG",{});var bJr=n(Yse);ZBo=r(bJr,"longformer"),bJr.forEach(t),exo=r(Qwe," \u2014 "),aj=s(Qwe,"A",{href:!0});var vJr=n(aj);oxo=r(vJr,"LongformerForQuestionAnswering"),vJr.forEach(t),rxo=r(Qwe," (Longformer model)"),Qwe.forEach(t),txo=i(P),dT=s(P,"LI",{});var Hwe=n(dT);Kse=s(Hwe,"STRONG",{});var TJr=n(Kse);axo=r(TJr,"lxmert"),TJr.forEach(t),sxo=r(Hwe," \u2014 "),sj=s(Hwe,"A",{href:!0});var FJr=n(sj);nxo=r(FJr,"LxmertForQuestionAnswering"),FJr.forEach(t),lxo=r(Hwe," (LXMERT model)"),Hwe.forEach(t),ixo=i(P),cT=s(P,"LI",{});var Uwe=n(cT);Zse=s(Uwe,"STRONG",{});var CJr=n(Zse);dxo=r(CJr,"mbart"),CJr.forEach(t),cxo=r(Uwe," \u2014 "),nj=s(Uwe,"A",{href:!0});var MJr=n(nj);mxo=r(MJr,"MBartForQuestionAnswering"),MJr.forEach(t),fxo=r(Uwe," (mBART model)"),Uwe.forEach(t),gxo=i(P),mT=s(P,"LI",{});var Jwe=n(mT);ene=s(Jwe,"STRONG",{});var EJr=n(ene);hxo=r(EJr,"megatron-bert"),EJr.forEach(t),uxo=r(Jwe," \u2014 "),lj=s(Jwe,"A",{href:!0});var yJr=n(lj);pxo=r(yJr,"MegatronBertForQuestionAnswering"),yJr.forEach(t),_xo=r(Jwe," (MegatronBert model)"),Jwe.forEach(t),bxo=i(P),fT=s(P,"LI",{});var Ywe=n(fT);one=s(Ywe,"STRONG",{});var wJr=n(one);vxo=r(wJr,"mobilebert"),wJr.forEach(t),Txo=r(Ywe," \u2014 "),ij=s(Ywe,"A",{href:!0});var AJr=n(ij);Fxo=r(AJr,"MobileBertForQuestionAnswering"),AJr.forEach(t),Cxo=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),Mxo=i(P),gT=s(P,"LI",{});var Kwe=n(gT);rne=s(Kwe,"STRONG",{});var LJr=n(rne);Exo=r(LJr,"mpnet"),LJr.forEach(t),yxo=r(Kwe," \u2014 "),dj=s(Kwe,"A",{href:!0});var BJr=n(dj);wxo=r(BJr,"MPNetForQuestionAnswering"),BJr.forEach(t),Axo=r(Kwe," (MPNet model)"),Kwe.forEach(t),Lxo=i(P),hT=s(P,"LI",{});var Zwe=n(hT);tne=s(Zwe,"STRONG",{});var xJr=n(tne);Bxo=r(xJr,"nystromformer"),xJr.forEach(t),xxo=r(Zwe," \u2014 "),cj=s(Zwe,"A",{href:!0});var kJr=n(cj);kxo=r(kJr,"NystromformerForQuestionAnswering"),kJr.forEach(t),Rxo=r(Zwe," (Nystromformer model)"),Zwe.forEach(t),Sxo=i(P),uT=s(P,"LI",{});var e6e=n(uT);ane=s(e6e,"STRONG",{});var RJr=n(ane);Pxo=r(RJr,"qdqbert"),RJr.forEach(t),$xo=r(e6e," \u2014 "),mj=s(e6e,"A",{href:!0});var SJr=n(mj);Ixo=r(SJr,"QDQBertForQuestionAnswering"),SJr.forEach(t),Dxo=r(e6e," (QDQBert model)"),e6e.forEach(t),jxo=i(P),pT=s(P,"LI",{});var o6e=n(pT);sne=s(o6e,"STRONG",{});var PJr=n(sne);Nxo=r(PJr,"reformer"),PJr.forEach(t),qxo=r(o6e," \u2014 "),fj=s(o6e,"A",{href:!0});var $Jr=n(fj);Gxo=r($Jr,"ReformerForQuestionAnswering"),$Jr.forEach(t),Oxo=r(o6e," (Reformer model)"),o6e.forEach(t),Xxo=i(P),_T=s(P,"LI",{});var r6e=n(_T);nne=s(r6e,"STRONG",{});var IJr=n(nne);Vxo=r(IJr,"rembert"),IJr.forEach(t),zxo=r(r6e," \u2014 "),gj=s(r6e,"A",{href:!0});var DJr=n(gj);Wxo=r(DJr,"RemBertForQuestionAnswering"),DJr.forEach(t),Qxo=r(r6e," (RemBERT model)"),r6e.forEach(t),Hxo=i(P),bT=s(P,"LI",{});var t6e=n(bT);lne=s(t6e,"STRONG",{});var jJr=n(lne);Uxo=r(jJr,"roberta"),jJr.forEach(t),Jxo=r(t6e," \u2014 "),hj=s(t6e,"A",{href:!0});var NJr=n(hj);Yxo=r(NJr,"RobertaForQuestionAnswering"),NJr.forEach(t),Kxo=r(t6e," (RoBERTa model)"),t6e.forEach(t),Zxo=i(P),vT=s(P,"LI",{});var a6e=n(vT);ine=s(a6e,"STRONG",{});var qJr=n(ine);eko=r(qJr,"roformer"),qJr.forEach(t),oko=r(a6e," \u2014 "),uj=s(a6e,"A",{href:!0});var GJr=n(uj);rko=r(GJr,"RoFormerForQuestionAnswering"),GJr.forEach(t),tko=r(a6e," (RoFormer model)"),a6e.forEach(t),ako=i(P),TT=s(P,"LI",{});var s6e=n(TT);dne=s(s6e,"STRONG",{});var OJr=n(dne);sko=r(OJr,"splinter"),OJr.forEach(t),nko=r(s6e," \u2014 "),pj=s(s6e,"A",{href:!0});var XJr=n(pj);lko=r(XJr,"SplinterForQuestionAnswering"),XJr.forEach(t),iko=r(s6e," (Splinter model)"),s6e.forEach(t),dko=i(P),FT=s(P,"LI",{});var n6e=n(FT);cne=s(n6e,"STRONG",{});var VJr=n(cne);cko=r(VJr,"squeezebert"),VJr.forEach(t),mko=r(n6e," \u2014 "),_j=s(n6e,"A",{href:!0});var zJr=n(_j);fko=r(zJr,"SqueezeBertForQuestionAnswering"),zJr.forEach(t),gko=r(n6e," (SqueezeBERT model)"),n6e.forEach(t),hko=i(P),CT=s(P,"LI",{});var l6e=n(CT);mne=s(l6e,"STRONG",{});var WJr=n(mne);uko=r(WJr,"xlm"),WJr.forEach(t),pko=r(l6e," \u2014 "),bj=s(l6e,"A",{href:!0});var QJr=n(bj);_ko=r(QJr,"XLMForQuestionAnsweringSimple"),QJr.forEach(t),bko=r(l6e," (XLM model)"),l6e.forEach(t),vko=i(P),MT=s(P,"LI",{});var i6e=n(MT);fne=s(i6e,"STRONG",{});var HJr=n(fne);Tko=r(HJr,"xlm-roberta"),HJr.forEach(t),Fko=r(i6e," \u2014 "),vj=s(i6e,"A",{href:!0});var UJr=n(vj);Cko=r(UJr,"XLMRobertaForQuestionAnswering"),UJr.forEach(t),Mko=r(i6e," (XLM-RoBERTa model)"),i6e.forEach(t),Eko=i(P),ET=s(P,"LI",{});var d6e=n(ET);gne=s(d6e,"STRONG",{});var JJr=n(gne);yko=r(JJr,"xlm-roberta-xl"),JJr.forEach(t),wko=r(d6e," \u2014 "),Tj=s(d6e,"A",{href:!0});var YJr=n(Tj);Ako=r(YJr,"XLMRobertaXLForQuestionAnswering"),YJr.forEach(t),Lko=r(d6e," (XLM-RoBERTa-XL model)"),d6e.forEach(t),Bko=i(P),yT=s(P,"LI",{});var c6e=n(yT);hne=s(c6e,"STRONG",{});var KJr=n(hne);xko=r(KJr,"xlnet"),KJr.forEach(t),kko=r(c6e," \u2014 "),Fj=s(c6e,"A",{href:!0});var ZJr=n(Fj);Rko=r(ZJr,"XLNetForQuestionAnsweringSimple"),ZJr.forEach(t),Sko=r(c6e," (XLNet model)"),c6e.forEach(t),Pko=i(P),wT=s(P,"LI",{});var m6e=n(wT);une=s(m6e,"STRONG",{});var eYr=n(une);$ko=r(eYr,"yoso"),eYr.forEach(t),Iko=r(m6e," \u2014 "),Cj=s(m6e,"A",{href:!0});var oYr=n(Cj);Dko=r(oYr,"YosoForQuestionAnswering"),oYr.forEach(t),jko=r(m6e," (YOSO model)"),m6e.forEach(t),P.forEach(t),Nko=i(Vt),AT=s(Vt,"P",{});var f6e=n(AT);qko=r(f6e,"The model is set in evaluation mode by default using "),pne=s(f6e,"CODE",{});var rYr=n(pne);Gko=r(rYr,"model.eval()"),rYr.forEach(t),Oko=r(f6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ne=s(f6e,"CODE",{});var tYr=n(_ne);Xko=r(tYr,"model.train()"),tYr.forEach(t),f6e.forEach(t),Vko=i(Vt),bne=s(Vt,"P",{});var aYr=n(bne);zko=r(aYr,"Examples:"),aYr.forEach(t),Wko=i(Vt),f(_w.$$.fragment,Vt),Vt.forEach(t),sl.forEach(t),aBe=i(c),bd=s(c,"H2",{class:!0});var mke=n(bd);LT=s(mke,"A",{id:!0,class:!0,href:!0});var sYr=n(LT);vne=s(sYr,"SPAN",{});var nYr=n(vne);f(bw.$$.fragment,nYr),nYr.forEach(t),sYr.forEach(t),Qko=i(mke),Tne=s(mke,"SPAN",{});var lYr=n(Tne);Hko=r(lYr,"AutoModelForTableQuestionAnswering"),lYr.forEach(t),mke.forEach(t),sBe=i(c),tr=s(c,"DIV",{class:!0});var ll=n(tr);f(vw.$$.fragment,ll),Uko=i(ll),vd=s(ll,"P",{});var ZV=n(vd);Jko=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fne=s(ZV,"CODE",{});var iYr=n(Fne);Yko=r(iYr,"from_pretrained()"),iYr.forEach(t),Kko=r(ZV,"class method or the "),Cne=s(ZV,"CODE",{});var dYr=n(Cne);Zko=r(dYr,"from_config()"),dYr.forEach(t),eRo=r(ZV,`class
method.`),ZV.forEach(t),oRo=i(ll),Tw=s(ll,"P",{});var fke=n(Tw);rRo=r(fke,"This class cannot be instantiated directly using "),Mne=s(fke,"CODE",{});var cYr=n(Mne);tRo=r(cYr,"__init__()"),cYr.forEach(t),aRo=r(fke," (throws an error)."),fke.forEach(t),sRo=i(ll),Jr=s(ll,"DIV",{class:!0});var il=n(Jr);f(Fw.$$.fragment,il),nRo=i(il),Ene=s(il,"P",{});var mYr=n(Ene);lRo=r(mYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mYr.forEach(t),iRo=i(il),Td=s(il,"P",{});var ez=n(Td);dRo=r(ez,`Note:
Loading a model from its configuration file does `),yne=s(ez,"STRONG",{});var fYr=n(yne);cRo=r(fYr,"not"),fYr.forEach(t),mRo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=s(ez,"CODE",{});var gYr=n(wne);fRo=r(gYr,"from_pretrained()"),gYr.forEach(t),gRo=r(ez,"to load the model weights."),ez.forEach(t),hRo=i(il),Ane=s(il,"P",{});var hYr=n(Ane);uRo=r(hYr,"Examples:"),hYr.forEach(t),pRo=i(il),f(Cw.$$.fragment,il),il.forEach(t),_Ro=i(ll),Oe=s(ll,"DIV",{class:!0});var zt=n(Oe);f(Mw.$$.fragment,zt),bRo=i(zt),Lne=s(zt,"P",{});var uYr=n(Lne);vRo=r(uYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uYr.forEach(t),TRo=i(zt),Ua=s(zt,"P",{});var I3=n(Ua);FRo=r(I3,"The model class to instantiate is selected based on the "),Bne=s(I3,"CODE",{});var pYr=n(Bne);CRo=r(pYr,"model_type"),pYr.forEach(t),MRo=r(I3,` property of the config object (either
passed as an argument or loaded from `),xne=s(I3,"CODE",{});var _Yr=n(xne);ERo=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),yRo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=s(I3,"CODE",{});var bYr=n(kne);wRo=r(bYr,"pretrained_model_name_or_path"),bYr.forEach(t),ARo=r(I3,":"),I3.forEach(t),LRo=i(zt),Rne=s(zt,"UL",{});var vYr=n(Rne);BT=s(vYr,"LI",{});var g6e=n(BT);Sne=s(g6e,"STRONG",{});var TYr=n(Sne);BRo=r(TYr,"tapas"),TYr.forEach(t),xRo=r(g6e," \u2014 "),Mj=s(g6e,"A",{href:!0});var FYr=n(Mj);kRo=r(FYr,"TapasForQuestionAnswering"),FYr.forEach(t),RRo=r(g6e," (TAPAS model)"),g6e.forEach(t),vYr.forEach(t),SRo=i(zt),xT=s(zt,"P",{});var h6e=n(xT);PRo=r(h6e,"The model is set in evaluation mode by default using "),Pne=s(h6e,"CODE",{});var CYr=n(Pne);$Ro=r(CYr,"model.eval()"),CYr.forEach(t),IRo=r(h6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ne=s(h6e,"CODE",{});var MYr=n($ne);DRo=r(MYr,"model.train()"),MYr.forEach(t),h6e.forEach(t),jRo=i(zt),Ine=s(zt,"P",{});var EYr=n(Ine);NRo=r(EYr,"Examples:"),EYr.forEach(t),qRo=i(zt),f(Ew.$$.fragment,zt),zt.forEach(t),ll.forEach(t),nBe=i(c),Fd=s(c,"H2",{class:!0});var gke=n(Fd);kT=s(gke,"A",{id:!0,class:!0,href:!0});var yYr=n(kT);Dne=s(yYr,"SPAN",{});var wYr=n(Dne);f(yw.$$.fragment,wYr),wYr.forEach(t),yYr.forEach(t),GRo=i(gke),jne=s(gke,"SPAN",{});var AYr=n(jne);ORo=r(AYr,"AutoModelForImageClassification"),AYr.forEach(t),gke.forEach(t),lBe=i(c),ar=s(c,"DIV",{class:!0});var dl=n(ar);f(ww.$$.fragment,dl),XRo=i(dl),Cd=s(dl,"P",{});var oz=n(Cd);VRo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nne=s(oz,"CODE",{});var LYr=n(Nne);zRo=r(LYr,"from_pretrained()"),LYr.forEach(t),WRo=r(oz,"class method or the "),qne=s(oz,"CODE",{});var BYr=n(qne);QRo=r(BYr,"from_config()"),BYr.forEach(t),HRo=r(oz,`class
method.`),oz.forEach(t),URo=i(dl),Aw=s(dl,"P",{});var hke=n(Aw);JRo=r(hke,"This class cannot be instantiated directly using "),Gne=s(hke,"CODE",{});var xYr=n(Gne);YRo=r(xYr,"__init__()"),xYr.forEach(t),KRo=r(hke," (throws an error)."),hke.forEach(t),ZRo=i(dl),Yr=s(dl,"DIV",{class:!0});var cl=n(Yr);f(Lw.$$.fragment,cl),eSo=i(cl),One=s(cl,"P",{});var kYr=n(One);oSo=r(kYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kYr.forEach(t),rSo=i(cl),Md=s(cl,"P",{});var rz=n(Md);tSo=r(rz,`Note:
Loading a model from its configuration file does `),Xne=s(rz,"STRONG",{});var RYr=n(Xne);aSo=r(RYr,"not"),RYr.forEach(t),sSo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vne=s(rz,"CODE",{});var SYr=n(Vne);nSo=r(SYr,"from_pretrained()"),SYr.forEach(t),lSo=r(rz,"to load the model weights."),rz.forEach(t),iSo=i(cl),zne=s(cl,"P",{});var PYr=n(zne);dSo=r(PYr,"Examples:"),PYr.forEach(t),cSo=i(cl),f(Bw.$$.fragment,cl),cl.forEach(t),mSo=i(dl),Xe=s(dl,"DIV",{class:!0});var Wt=n(Xe);f(xw.$$.fragment,Wt),fSo=i(Wt),Wne=s(Wt,"P",{});var $Yr=n(Wne);gSo=r($Yr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Yr.forEach(t),hSo=i(Wt),Ja=s(Wt,"P",{});var D3=n(Ja);uSo=r(D3,"The model class to instantiate is selected based on the "),Qne=s(D3,"CODE",{});var IYr=n(Qne);pSo=r(IYr,"model_type"),IYr.forEach(t),_So=r(D3,` property of the config object (either
passed as an argument or loaded from `),Hne=s(D3,"CODE",{});var DYr=n(Hne);bSo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),vSo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=s(D3,"CODE",{});var jYr=n(Une);TSo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),FSo=r(D3,":"),D3.forEach(t),CSo=i(Wt),be=s(Wt,"UL",{});var eo=n(be);RT=s(eo,"LI",{});var u6e=n(RT);Jne=s(u6e,"STRONG",{});var NYr=n(Jne);MSo=r(NYr,"beit"),NYr.forEach(t),ESo=r(u6e," \u2014 "),Ej=s(u6e,"A",{href:!0});var qYr=n(Ej);ySo=r(qYr,"BeitForImageClassification"),qYr.forEach(t),wSo=r(u6e," (BEiT model)"),u6e.forEach(t),ASo=i(eo),ST=s(eo,"LI",{});var p6e=n(ST);Yne=s(p6e,"STRONG",{});var GYr=n(Yne);LSo=r(GYr,"convnext"),GYr.forEach(t),BSo=r(p6e," \u2014 "),yj=s(p6e,"A",{href:!0});var OYr=n(yj);xSo=r(OYr,"ConvNextForImageClassification"),OYr.forEach(t),kSo=r(p6e," (ConvNext model)"),p6e.forEach(t),RSo=i(eo),Pn=s(eo,"LI",{});var s7=n(Pn);Kne=s(s7,"STRONG",{});var XYr=n(Kne);SSo=r(XYr,"deit"),XYr.forEach(t),PSo=r(s7," \u2014 "),wj=s(s7,"A",{href:!0});var VYr=n(wj);$So=r(VYr,"DeiTForImageClassification"),VYr.forEach(t),ISo=r(s7," or "),Aj=s(s7,"A",{href:!0});var zYr=n(Aj);DSo=r(zYr,"DeiTForImageClassificationWithTeacher"),zYr.forEach(t),jSo=r(s7," (DeiT model)"),s7.forEach(t),NSo=i(eo),PT=s(eo,"LI",{});var _6e=n(PT);Zne=s(_6e,"STRONG",{});var WYr=n(Zne);qSo=r(WYr,"imagegpt"),WYr.forEach(t),GSo=r(_6e," \u2014 "),Lj=s(_6e,"A",{href:!0});var QYr=n(Lj);OSo=r(QYr,"ImageGPTForImageClassification"),QYr.forEach(t),XSo=r(_6e," (ImageGPT model)"),_6e.forEach(t),VSo=i(eo),la=s(eo,"LI",{});var Cm=n(la);ele=s(Cm,"STRONG",{});var HYr=n(ele);zSo=r(HYr,"perceiver"),HYr.forEach(t),WSo=r(Cm," \u2014 "),Bj=s(Cm,"A",{href:!0});var UYr=n(Bj);QSo=r(UYr,"PerceiverForImageClassificationLearned"),UYr.forEach(t),HSo=r(Cm," or "),xj=s(Cm,"A",{href:!0});var JYr=n(xj);USo=r(JYr,"PerceiverForImageClassificationFourier"),JYr.forEach(t),JSo=r(Cm," or "),kj=s(Cm,"A",{href:!0});var YYr=n(kj);YSo=r(YYr,"PerceiverForImageClassificationConvProcessing"),YYr.forEach(t),KSo=r(Cm," (Perceiver model)"),Cm.forEach(t),ZSo=i(eo),$T=s(eo,"LI",{});var b6e=n($T);ole=s(b6e,"STRONG",{});var KYr=n(ole);ePo=r(KYr,"poolformer"),KYr.forEach(t),oPo=r(b6e," \u2014 "),Rj=s(b6e,"A",{href:!0});var ZYr=n(Rj);rPo=r(ZYr,"PoolFormerForImageClassification"),ZYr.forEach(t),tPo=r(b6e," (PoolFormer model)"),b6e.forEach(t),aPo=i(eo),IT=s(eo,"LI",{});var v6e=n(IT);rle=s(v6e,"STRONG",{});var eKr=n(rle);sPo=r(eKr,"segformer"),eKr.forEach(t),nPo=r(v6e," \u2014 "),Sj=s(v6e,"A",{href:!0});var oKr=n(Sj);lPo=r(oKr,"SegformerForImageClassification"),oKr.forEach(t),iPo=r(v6e," (SegFormer model)"),v6e.forEach(t),dPo=i(eo),DT=s(eo,"LI",{});var T6e=n(DT);tle=s(T6e,"STRONG",{});var rKr=n(tle);cPo=r(rKr,"swin"),rKr.forEach(t),mPo=r(T6e," \u2014 "),Pj=s(T6e,"A",{href:!0});var tKr=n(Pj);fPo=r(tKr,"SwinForImageClassification"),tKr.forEach(t),gPo=r(T6e," (Swin model)"),T6e.forEach(t),hPo=i(eo),jT=s(eo,"LI",{});var F6e=n(jT);ale=s(F6e,"STRONG",{});var aKr=n(ale);uPo=r(aKr,"vit"),aKr.forEach(t),pPo=r(F6e," \u2014 "),$j=s(F6e,"A",{href:!0});var sKr=n($j);_Po=r(sKr,"ViTForImageClassification"),sKr.forEach(t),bPo=r(F6e," (ViT model)"),F6e.forEach(t),eo.forEach(t),vPo=i(Wt),NT=s(Wt,"P",{});var C6e=n(NT);TPo=r(C6e,"The model is set in evaluation mode by default using "),sle=s(C6e,"CODE",{});var nKr=n(sle);FPo=r(nKr,"model.eval()"),nKr.forEach(t),CPo=r(C6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=s(C6e,"CODE",{});var lKr=n(nle);MPo=r(lKr,"model.train()"),lKr.forEach(t),C6e.forEach(t),EPo=i(Wt),lle=s(Wt,"P",{});var iKr=n(lle);yPo=r(iKr,"Examples:"),iKr.forEach(t),wPo=i(Wt),f(kw.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),iBe=i(c),Ed=s(c,"H2",{class:!0});var uke=n(Ed);qT=s(uke,"A",{id:!0,class:!0,href:!0});var dKr=n(qT);ile=s(dKr,"SPAN",{});var cKr=n(ile);f(Rw.$$.fragment,cKr),cKr.forEach(t),dKr.forEach(t),APo=i(uke),dle=s(uke,"SPAN",{});var mKr=n(dle);LPo=r(mKr,"AutoModelForVision2Seq"),mKr.forEach(t),uke.forEach(t),dBe=i(c),sr=s(c,"DIV",{class:!0});var ml=n(sr);f(Sw.$$.fragment,ml),BPo=i(ml),yd=s(ml,"P",{});var tz=n(yd);xPo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cle=s(tz,"CODE",{});var fKr=n(cle);kPo=r(fKr,"from_pretrained()"),fKr.forEach(t),RPo=r(tz,"class method or the "),mle=s(tz,"CODE",{});var gKr=n(mle);SPo=r(gKr,"from_config()"),gKr.forEach(t),PPo=r(tz,`class
method.`),tz.forEach(t),$Po=i(ml),Pw=s(ml,"P",{});var pke=n(Pw);IPo=r(pke,"This class cannot be instantiated directly using "),fle=s(pke,"CODE",{});var hKr=n(fle);DPo=r(hKr,"__init__()"),hKr.forEach(t),jPo=r(pke," (throws an error)."),pke.forEach(t),NPo=i(ml),Kr=s(ml,"DIV",{class:!0});var fl=n(Kr);f($w.$$.fragment,fl),qPo=i(fl),gle=s(fl,"P",{});var uKr=n(gle);GPo=r(uKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uKr.forEach(t),OPo=i(fl),wd=s(fl,"P",{});var az=n(wd);XPo=r(az,`Note:
Loading a model from its configuration file does `),hle=s(az,"STRONG",{});var pKr=n(hle);VPo=r(pKr,"not"),pKr.forEach(t),zPo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=s(az,"CODE",{});var _Kr=n(ule);WPo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),QPo=r(az,"to load the model weights."),az.forEach(t),HPo=i(fl),ple=s(fl,"P",{});var bKr=n(ple);UPo=r(bKr,"Examples:"),bKr.forEach(t),JPo=i(fl),f(Iw.$$.fragment,fl),fl.forEach(t),YPo=i(ml),Ve=s(ml,"DIV",{class:!0});var Qt=n(Ve);f(Dw.$$.fragment,Qt),KPo=i(Qt),_le=s(Qt,"P",{});var vKr=n(_le);ZPo=r(vKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vKr.forEach(t),e$o=i(Qt),Ya=s(Qt,"P",{});var j3=n(Ya);o$o=r(j3,"The model class to instantiate is selected based on the "),ble=s(j3,"CODE",{});var TKr=n(ble);r$o=r(TKr,"model_type"),TKr.forEach(t),t$o=r(j3,` property of the config object (either
passed as an argument or loaded from `),vle=s(j3,"CODE",{});var FKr=n(vle);a$o=r(FKr,"pretrained_model_name_or_path"),FKr.forEach(t),s$o=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=s(j3,"CODE",{});var CKr=n(Tle);n$o=r(CKr,"pretrained_model_name_or_path"),CKr.forEach(t),l$o=r(j3,":"),j3.forEach(t),i$o=i(Qt),Fle=s(Qt,"UL",{});var MKr=n(Fle);GT=s(MKr,"LI",{});var M6e=n(GT);Cle=s(M6e,"STRONG",{});var EKr=n(Cle);d$o=r(EKr,"vision-encoder-decoder"),EKr.forEach(t),c$o=r(M6e," \u2014 "),Ij=s(M6e,"A",{href:!0});var yKr=n(Ij);m$o=r(yKr,"VisionEncoderDecoderModel"),yKr.forEach(t),f$o=r(M6e," (Vision Encoder decoder model)"),M6e.forEach(t),MKr.forEach(t),g$o=i(Qt),OT=s(Qt,"P",{});var E6e=n(OT);h$o=r(E6e,"The model is set in evaluation mode by default using "),Mle=s(E6e,"CODE",{});var wKr=n(Mle);u$o=r(wKr,"model.eval()"),wKr.forEach(t),p$o=r(E6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=s(E6e,"CODE",{});var AKr=n(Ele);_$o=r(AKr,"model.train()"),AKr.forEach(t),E6e.forEach(t),b$o=i(Qt),yle=s(Qt,"P",{});var LKr=n(yle);v$o=r(LKr,"Examples:"),LKr.forEach(t),T$o=i(Qt),f(jw.$$.fragment,Qt),Qt.forEach(t),ml.forEach(t),cBe=i(c),Ad=s(c,"H2",{class:!0});var _ke=n(Ad);XT=s(_ke,"A",{id:!0,class:!0,href:!0});var BKr=n(XT);wle=s(BKr,"SPAN",{});var xKr=n(wle);f(Nw.$$.fragment,xKr),xKr.forEach(t),BKr.forEach(t),F$o=i(_ke),Ale=s(_ke,"SPAN",{});var kKr=n(Ale);C$o=r(kKr,"AutoModelForAudioClassification"),kKr.forEach(t),_ke.forEach(t),mBe=i(c),nr=s(c,"DIV",{class:!0});var gl=n(nr);f(qw.$$.fragment,gl),M$o=i(gl),Ld=s(gl,"P",{});var sz=n(Ld);E$o=r(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Lle=s(sz,"CODE",{});var RKr=n(Lle);y$o=r(RKr,"from_pretrained()"),RKr.forEach(t),w$o=r(sz,"class method or the "),Ble=s(sz,"CODE",{});var SKr=n(Ble);A$o=r(SKr,"from_config()"),SKr.forEach(t),L$o=r(sz,`class
method.`),sz.forEach(t),B$o=i(gl),Gw=s(gl,"P",{});var bke=n(Gw);x$o=r(bke,"This class cannot be instantiated directly using "),xle=s(bke,"CODE",{});var PKr=n(xle);k$o=r(PKr,"__init__()"),PKr.forEach(t),R$o=r(bke," (throws an error)."),bke.forEach(t),S$o=i(gl),Zr=s(gl,"DIV",{class:!0});var hl=n(Zr);f(Ow.$$.fragment,hl),P$o=i(hl),kle=s(hl,"P",{});var $Kr=n(kle);$$o=r($Kr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$Kr.forEach(t),I$o=i(hl),Bd=s(hl,"P",{});var nz=n(Bd);D$o=r(nz,`Note:
Loading a model from its configuration file does `),Rle=s(nz,"STRONG",{});var IKr=n(Rle);j$o=r(IKr,"not"),IKr.forEach(t),N$o=r(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=s(nz,"CODE",{});var DKr=n(Sle);q$o=r(DKr,"from_pretrained()"),DKr.forEach(t),G$o=r(nz,"to load the model weights."),nz.forEach(t),O$o=i(hl),Ple=s(hl,"P",{});var jKr=n(Ple);X$o=r(jKr,"Examples:"),jKr.forEach(t),V$o=i(hl),f(Xw.$$.fragment,hl),hl.forEach(t),z$o=i(gl),ze=s(gl,"DIV",{class:!0});var Ht=n(ze);f(Vw.$$.fragment,Ht),W$o=i(Ht),$le=s(Ht,"P",{});var NKr=n($le);Q$o=r(NKr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NKr.forEach(t),H$o=i(Ht),Ka=s(Ht,"P",{});var N3=n(Ka);U$o=r(N3,"The model class to instantiate is selected based on the "),Ile=s(N3,"CODE",{});var qKr=n(Ile);J$o=r(qKr,"model_type"),qKr.forEach(t),Y$o=r(N3,` property of the config object (either
passed as an argument or loaded from `),Dle=s(N3,"CODE",{});var GKr=n(Dle);K$o=r(GKr,"pretrained_model_name_or_path"),GKr.forEach(t),Z$o=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=s(N3,"CODE",{});var OKr=n(jle);eIo=r(OKr,"pretrained_model_name_or_path"),OKr.forEach(t),oIo=r(N3,":"),N3.forEach(t),rIo=i(Ht),Ae=s(Ht,"UL",{});var No=n(Ae);VT=s(No,"LI",{});var y6e=n(VT);Nle=s(y6e,"STRONG",{});var XKr=n(Nle);tIo=r(XKr,"data2vec-audio"),XKr.forEach(t),aIo=r(y6e," \u2014 "),Dj=s(y6e,"A",{href:!0});var VKr=n(Dj);sIo=r(VKr,"Data2VecAudioForSequenceClassification"),VKr.forEach(t),nIo=r(y6e," (Data2VecAudio model)"),y6e.forEach(t),lIo=i(No),zT=s(No,"LI",{});var w6e=n(zT);qle=s(w6e,"STRONG",{});var zKr=n(qle);iIo=r(zKr,"hubert"),zKr.forEach(t),dIo=r(w6e," \u2014 "),jj=s(w6e,"A",{href:!0});var WKr=n(jj);cIo=r(WKr,"HubertForSequenceClassification"),WKr.forEach(t),mIo=r(w6e," (Hubert model)"),w6e.forEach(t),fIo=i(No),WT=s(No,"LI",{});var A6e=n(WT);Gle=s(A6e,"STRONG",{});var QKr=n(Gle);gIo=r(QKr,"sew"),QKr.forEach(t),hIo=r(A6e," \u2014 "),Nj=s(A6e,"A",{href:!0});var HKr=n(Nj);uIo=r(HKr,"SEWForSequenceClassification"),HKr.forEach(t),pIo=r(A6e," (SEW model)"),A6e.forEach(t),_Io=i(No),QT=s(No,"LI",{});var L6e=n(QT);Ole=s(L6e,"STRONG",{});var UKr=n(Ole);bIo=r(UKr,"sew-d"),UKr.forEach(t),vIo=r(L6e," \u2014 "),qj=s(L6e,"A",{href:!0});var JKr=n(qj);TIo=r(JKr,"SEWDForSequenceClassification"),JKr.forEach(t),FIo=r(L6e," (SEW-D model)"),L6e.forEach(t),CIo=i(No),HT=s(No,"LI",{});var B6e=n(HT);Xle=s(B6e,"STRONG",{});var YKr=n(Xle);MIo=r(YKr,"unispeech"),YKr.forEach(t),EIo=r(B6e," \u2014 "),Gj=s(B6e,"A",{href:!0});var KKr=n(Gj);yIo=r(KKr,"UniSpeechForSequenceClassification"),KKr.forEach(t),wIo=r(B6e," (UniSpeech model)"),B6e.forEach(t),AIo=i(No),UT=s(No,"LI",{});var x6e=n(UT);Vle=s(x6e,"STRONG",{});var ZKr=n(Vle);LIo=r(ZKr,"unispeech-sat"),ZKr.forEach(t),BIo=r(x6e," \u2014 "),Oj=s(x6e,"A",{href:!0});var eZr=n(Oj);xIo=r(eZr,"UniSpeechSatForSequenceClassification"),eZr.forEach(t),kIo=r(x6e," (UniSpeechSat model)"),x6e.forEach(t),RIo=i(No),JT=s(No,"LI",{});var k6e=n(JT);zle=s(k6e,"STRONG",{});var oZr=n(zle);SIo=r(oZr,"wav2vec2"),oZr.forEach(t),PIo=r(k6e," \u2014 "),Xj=s(k6e,"A",{href:!0});var rZr=n(Xj);$Io=r(rZr,"Wav2Vec2ForSequenceClassification"),rZr.forEach(t),IIo=r(k6e," (Wav2Vec2 model)"),k6e.forEach(t),DIo=i(No),YT=s(No,"LI",{});var R6e=n(YT);Wle=s(R6e,"STRONG",{});var tZr=n(Wle);jIo=r(tZr,"wavlm"),tZr.forEach(t),NIo=r(R6e," \u2014 "),Vj=s(R6e,"A",{href:!0});var aZr=n(Vj);qIo=r(aZr,"WavLMForSequenceClassification"),aZr.forEach(t),GIo=r(R6e," (WavLM model)"),R6e.forEach(t),No.forEach(t),OIo=i(Ht),KT=s(Ht,"P",{});var S6e=n(KT);XIo=r(S6e,"The model is set in evaluation mode by default using "),Qle=s(S6e,"CODE",{});var sZr=n(Qle);VIo=r(sZr,"model.eval()"),sZr.forEach(t),zIo=r(S6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=s(S6e,"CODE",{});var nZr=n(Hle);WIo=r(nZr,"model.train()"),nZr.forEach(t),S6e.forEach(t),QIo=i(Ht),Ule=s(Ht,"P",{});var lZr=n(Ule);HIo=r(lZr,"Examples:"),lZr.forEach(t),UIo=i(Ht),f(zw.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),fBe=i(c),xd=s(c,"H2",{class:!0});var vke=n(xd);ZT=s(vke,"A",{id:!0,class:!0,href:!0});var iZr=n(ZT);Jle=s(iZr,"SPAN",{});var dZr=n(Jle);f(Ww.$$.fragment,dZr),dZr.forEach(t),iZr.forEach(t),JIo=i(vke),Yle=s(vke,"SPAN",{});var cZr=n(Yle);YIo=r(cZr,"AutoModelForAudioFrameClassification"),cZr.forEach(t),vke.forEach(t),gBe=i(c),lr=s(c,"DIV",{class:!0});var ul=n(lr);f(Qw.$$.fragment,ul),KIo=i(ul),kd=s(ul,"P",{});var lz=n(kd);ZIo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Kle=s(lz,"CODE",{});var mZr=n(Kle);eDo=r(mZr,"from_pretrained()"),mZr.forEach(t),oDo=r(lz,"class method or the "),Zle=s(lz,"CODE",{});var fZr=n(Zle);rDo=r(fZr,"from_config()"),fZr.forEach(t),tDo=r(lz,`class
method.`),lz.forEach(t),aDo=i(ul),Hw=s(ul,"P",{});var Tke=n(Hw);sDo=r(Tke,"This class cannot be instantiated directly using "),eie=s(Tke,"CODE",{});var gZr=n(eie);nDo=r(gZr,"__init__()"),gZr.forEach(t),lDo=r(Tke," (throws an error)."),Tke.forEach(t),iDo=i(ul),et=s(ul,"DIV",{class:!0});var pl=n(et);f(Uw.$$.fragment,pl),dDo=i(pl),oie=s(pl,"P",{});var hZr=n(oie);cDo=r(hZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hZr.forEach(t),mDo=i(pl),Rd=s(pl,"P",{});var iz=n(Rd);fDo=r(iz,`Note:
Loading a model from its configuration file does `),rie=s(iz,"STRONG",{});var uZr=n(rie);gDo=r(uZr,"not"),uZr.forEach(t),hDo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=s(iz,"CODE",{});var pZr=n(tie);uDo=r(pZr,"from_pretrained()"),pZr.forEach(t),pDo=r(iz,"to load the model weights."),iz.forEach(t),_Do=i(pl),aie=s(pl,"P",{});var _Zr=n(aie);bDo=r(_Zr,"Examples:"),_Zr.forEach(t),vDo=i(pl),f(Jw.$$.fragment,pl),pl.forEach(t),TDo=i(ul),We=s(ul,"DIV",{class:!0});var Ut=n(We);f(Yw.$$.fragment,Ut),FDo=i(Ut),sie=s(Ut,"P",{});var bZr=n(sie);CDo=r(bZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bZr.forEach(t),MDo=i(Ut),Za=s(Ut,"P",{});var q3=n(Za);EDo=r(q3,"The model class to instantiate is selected based on the "),nie=s(q3,"CODE",{});var vZr=n(nie);yDo=r(vZr,"model_type"),vZr.forEach(t),wDo=r(q3,` property of the config object (either
passed as an argument or loaded from `),lie=s(q3,"CODE",{});var TZr=n(lie);ADo=r(TZr,"pretrained_model_name_or_path"),TZr.forEach(t),LDo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=s(q3,"CODE",{});var FZr=n(iie);BDo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),xDo=r(q3,":"),q3.forEach(t),kDo=i(Ut),es=s(Ut,"UL",{});var G3=n(es);e1=s(G3,"LI",{});var P6e=n(e1);die=s(P6e,"STRONG",{});var CZr=n(die);RDo=r(CZr,"data2vec-audio"),CZr.forEach(t),SDo=r(P6e," \u2014 "),zj=s(P6e,"A",{href:!0});var MZr=n(zj);PDo=r(MZr,"Data2VecAudioForAudioFrameClassification"),MZr.forEach(t),$Do=r(P6e," (Data2VecAudio model)"),P6e.forEach(t),IDo=i(G3),o1=s(G3,"LI",{});var $6e=n(o1);cie=s($6e,"STRONG",{});var EZr=n(cie);DDo=r(EZr,"unispeech-sat"),EZr.forEach(t),jDo=r($6e," \u2014 "),Wj=s($6e,"A",{href:!0});var yZr=n(Wj);NDo=r(yZr,"UniSpeechSatForAudioFrameClassification"),yZr.forEach(t),qDo=r($6e," (UniSpeechSat model)"),$6e.forEach(t),GDo=i(G3),r1=s(G3,"LI",{});var I6e=n(r1);mie=s(I6e,"STRONG",{});var wZr=n(mie);ODo=r(wZr,"wav2vec2"),wZr.forEach(t),XDo=r(I6e," \u2014 "),Qj=s(I6e,"A",{href:!0});var AZr=n(Qj);VDo=r(AZr,"Wav2Vec2ForAudioFrameClassification"),AZr.forEach(t),zDo=r(I6e," (Wav2Vec2 model)"),I6e.forEach(t),WDo=i(G3),t1=s(G3,"LI",{});var D6e=n(t1);fie=s(D6e,"STRONG",{});var LZr=n(fie);QDo=r(LZr,"wavlm"),LZr.forEach(t),HDo=r(D6e," \u2014 "),Hj=s(D6e,"A",{href:!0});var BZr=n(Hj);UDo=r(BZr,"WavLMForAudioFrameClassification"),BZr.forEach(t),JDo=r(D6e," (WavLM model)"),D6e.forEach(t),G3.forEach(t),YDo=i(Ut),a1=s(Ut,"P",{});var j6e=n(a1);KDo=r(j6e,"The model is set in evaluation mode by default using "),gie=s(j6e,"CODE",{});var xZr=n(gie);ZDo=r(xZr,"model.eval()"),xZr.forEach(t),ejo=r(j6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=s(j6e,"CODE",{});var kZr=n(hie);ojo=r(kZr,"model.train()"),kZr.forEach(t),j6e.forEach(t),rjo=i(Ut),uie=s(Ut,"P",{});var RZr=n(uie);tjo=r(RZr,"Examples:"),RZr.forEach(t),ajo=i(Ut),f(Kw.$$.fragment,Ut),Ut.forEach(t),ul.forEach(t),hBe=i(c),Sd=s(c,"H2",{class:!0});var Fke=n(Sd);s1=s(Fke,"A",{id:!0,class:!0,href:!0});var SZr=n(s1);pie=s(SZr,"SPAN",{});var PZr=n(pie);f(Zw.$$.fragment,PZr),PZr.forEach(t),SZr.forEach(t),sjo=i(Fke),_ie=s(Fke,"SPAN",{});var $Zr=n(_ie);njo=r($Zr,"AutoModelForCTC"),$Zr.forEach(t),Fke.forEach(t),uBe=i(c),ir=s(c,"DIV",{class:!0});var _l=n(ir);f(e6.$$.fragment,_l),ljo=i(_l),Pd=s(_l,"P",{});var dz=n(Pd);ijo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bie=s(dz,"CODE",{});var IZr=n(bie);djo=r(IZr,"from_pretrained()"),IZr.forEach(t),cjo=r(dz,"class method or the "),vie=s(dz,"CODE",{});var DZr=n(vie);mjo=r(DZr,"from_config()"),DZr.forEach(t),fjo=r(dz,`class
method.`),dz.forEach(t),gjo=i(_l),o6=s(_l,"P",{});var Cke=n(o6);hjo=r(Cke,"This class cannot be instantiated directly using "),Tie=s(Cke,"CODE",{});var jZr=n(Tie);ujo=r(jZr,"__init__()"),jZr.forEach(t),pjo=r(Cke," (throws an error)."),Cke.forEach(t),_jo=i(_l),ot=s(_l,"DIV",{class:!0});var bl=n(ot);f(r6.$$.fragment,bl),bjo=i(bl),Fie=s(bl,"P",{});var NZr=n(Fie);vjo=r(NZr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NZr.forEach(t),Tjo=i(bl),$d=s(bl,"P",{});var cz=n($d);Fjo=r(cz,`Note:
Loading a model from its configuration file does `),Cie=s(cz,"STRONG",{});var qZr=n(Cie);Cjo=r(qZr,"not"),qZr.forEach(t),Mjo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=s(cz,"CODE",{});var GZr=n(Mie);Ejo=r(GZr,"from_pretrained()"),GZr.forEach(t),yjo=r(cz,"to load the model weights."),cz.forEach(t),wjo=i(bl),Eie=s(bl,"P",{});var OZr=n(Eie);Ajo=r(OZr,"Examples:"),OZr.forEach(t),Ljo=i(bl),f(t6.$$.fragment,bl),bl.forEach(t),Bjo=i(_l),Qe=s(_l,"DIV",{class:!0});var Jt=n(Qe);f(a6.$$.fragment,Jt),xjo=i(Jt),yie=s(Jt,"P",{});var XZr=n(yie);kjo=r(XZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),XZr.forEach(t),Rjo=i(Jt),os=s(Jt,"P",{});var O3=n(os);Sjo=r(O3,"The model class to instantiate is selected based on the "),wie=s(O3,"CODE",{});var VZr=n(wie);Pjo=r(VZr,"model_type"),VZr.forEach(t),$jo=r(O3,` property of the config object (either
passed as an argument or loaded from `),Aie=s(O3,"CODE",{});var zZr=n(Aie);Ijo=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),Djo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=s(O3,"CODE",{});var WZr=n(Lie);jjo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),Njo=r(O3,":"),O3.forEach(t),qjo=i(Jt),Le=s(Jt,"UL",{});var qo=n(Le);n1=s(qo,"LI",{});var N6e=n(n1);Bie=s(N6e,"STRONG",{});var QZr=n(Bie);Gjo=r(QZr,"data2vec-audio"),QZr.forEach(t),Ojo=r(N6e," \u2014 "),Uj=s(N6e,"A",{href:!0});var HZr=n(Uj);Xjo=r(HZr,"Data2VecAudioForCTC"),HZr.forEach(t),Vjo=r(N6e," (Data2VecAudio model)"),N6e.forEach(t),zjo=i(qo),l1=s(qo,"LI",{});var q6e=n(l1);xie=s(q6e,"STRONG",{});var UZr=n(xie);Wjo=r(UZr,"hubert"),UZr.forEach(t),Qjo=r(q6e," \u2014 "),Jj=s(q6e,"A",{href:!0});var JZr=n(Jj);Hjo=r(JZr,"HubertForCTC"),JZr.forEach(t),Ujo=r(q6e," (Hubert model)"),q6e.forEach(t),Jjo=i(qo),i1=s(qo,"LI",{});var G6e=n(i1);kie=s(G6e,"STRONG",{});var YZr=n(kie);Yjo=r(YZr,"sew"),YZr.forEach(t),Kjo=r(G6e," \u2014 "),Yj=s(G6e,"A",{href:!0});var KZr=n(Yj);Zjo=r(KZr,"SEWForCTC"),KZr.forEach(t),eNo=r(G6e," (SEW model)"),G6e.forEach(t),oNo=i(qo),d1=s(qo,"LI",{});var O6e=n(d1);Rie=s(O6e,"STRONG",{});var ZZr=n(Rie);rNo=r(ZZr,"sew-d"),ZZr.forEach(t),tNo=r(O6e," \u2014 "),Kj=s(O6e,"A",{href:!0});var eet=n(Kj);aNo=r(eet,"SEWDForCTC"),eet.forEach(t),sNo=r(O6e," (SEW-D model)"),O6e.forEach(t),nNo=i(qo),c1=s(qo,"LI",{});var X6e=n(c1);Sie=s(X6e,"STRONG",{});var oet=n(Sie);lNo=r(oet,"unispeech"),oet.forEach(t),iNo=r(X6e," \u2014 "),Zj=s(X6e,"A",{href:!0});var ret=n(Zj);dNo=r(ret,"UniSpeechForCTC"),ret.forEach(t),cNo=r(X6e," (UniSpeech model)"),X6e.forEach(t),mNo=i(qo),m1=s(qo,"LI",{});var V6e=n(m1);Pie=s(V6e,"STRONG",{});var tet=n(Pie);fNo=r(tet,"unispeech-sat"),tet.forEach(t),gNo=r(V6e," \u2014 "),eN=s(V6e,"A",{href:!0});var aet=n(eN);hNo=r(aet,"UniSpeechSatForCTC"),aet.forEach(t),uNo=r(V6e," (UniSpeechSat model)"),V6e.forEach(t),pNo=i(qo),f1=s(qo,"LI",{});var z6e=n(f1);$ie=s(z6e,"STRONG",{});var set=n($ie);_No=r(set,"wav2vec2"),set.forEach(t),bNo=r(z6e," \u2014 "),oN=s(z6e,"A",{href:!0});var net=n(oN);vNo=r(net,"Wav2Vec2ForCTC"),net.forEach(t),TNo=r(z6e," (Wav2Vec2 model)"),z6e.forEach(t),FNo=i(qo),g1=s(qo,"LI",{});var W6e=n(g1);Iie=s(W6e,"STRONG",{});var iet=n(Iie);CNo=r(iet,"wavlm"),iet.forEach(t),MNo=r(W6e," \u2014 "),rN=s(W6e,"A",{href:!0});var det=n(rN);ENo=r(det,"WavLMForCTC"),det.forEach(t),yNo=r(W6e," (WavLM model)"),W6e.forEach(t),qo.forEach(t),wNo=i(Jt),h1=s(Jt,"P",{});var Q6e=n(h1);ANo=r(Q6e,"The model is set in evaluation mode by default using "),Die=s(Q6e,"CODE",{});var cet=n(Die);LNo=r(cet,"model.eval()"),cet.forEach(t),BNo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=s(Q6e,"CODE",{});var met=n(jie);xNo=r(met,"model.train()"),met.forEach(t),Q6e.forEach(t),kNo=i(Jt),Nie=s(Jt,"P",{});var fet=n(Nie);RNo=r(fet,"Examples:"),fet.forEach(t),SNo=i(Jt),f(s6.$$.fragment,Jt),Jt.forEach(t),_l.forEach(t),pBe=i(c),Id=s(c,"H2",{class:!0});var Mke=n(Id);u1=s(Mke,"A",{id:!0,class:!0,href:!0});var get=n(u1);qie=s(get,"SPAN",{});var het=n(qie);f(n6.$$.fragment,het),het.forEach(t),get.forEach(t),PNo=i(Mke),Gie=s(Mke,"SPAN",{});var uet=n(Gie);$No=r(uet,"AutoModelForSpeechSeq2Seq"),uet.forEach(t),Mke.forEach(t),_Be=i(c),dr=s(c,"DIV",{class:!0});var vl=n(dr);f(l6.$$.fragment,vl),INo=i(vl),Dd=s(vl,"P",{});var mz=n(Dd);DNo=r(mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Oie=s(mz,"CODE",{});var pet=n(Oie);jNo=r(pet,"from_pretrained()"),pet.forEach(t),NNo=r(mz,"class method or the "),Xie=s(mz,"CODE",{});var _et=n(Xie);qNo=r(_et,"from_config()"),_et.forEach(t),GNo=r(mz,`class
method.`),mz.forEach(t),ONo=i(vl),i6=s(vl,"P",{});var Eke=n(i6);XNo=r(Eke,"This class cannot be instantiated directly using "),Vie=s(Eke,"CODE",{});var bet=n(Vie);VNo=r(bet,"__init__()"),bet.forEach(t),zNo=r(Eke," (throws an error)."),Eke.forEach(t),WNo=i(vl),rt=s(vl,"DIV",{class:!0});var Tl=n(rt);f(d6.$$.fragment,Tl),QNo=i(Tl),zie=s(Tl,"P",{});var vet=n(zie);HNo=r(vet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vet.forEach(t),UNo=i(Tl),jd=s(Tl,"P",{});var fz=n(jd);JNo=r(fz,`Note:
Loading a model from its configuration file does `),Wie=s(fz,"STRONG",{});var Tet=n(Wie);YNo=r(Tet,"not"),Tet.forEach(t),KNo=r(fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=s(fz,"CODE",{});var Fet=n(Qie);ZNo=r(Fet,"from_pretrained()"),Fet.forEach(t),eqo=r(fz,"to load the model weights."),fz.forEach(t),oqo=i(Tl),Hie=s(Tl,"P",{});var Cet=n(Hie);rqo=r(Cet,"Examples:"),Cet.forEach(t),tqo=i(Tl),f(c6.$$.fragment,Tl),Tl.forEach(t),aqo=i(vl),He=s(vl,"DIV",{class:!0});var Yt=n(He);f(m6.$$.fragment,Yt),sqo=i(Yt),Uie=s(Yt,"P",{});var Met=n(Uie);nqo=r(Met,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Met.forEach(t),lqo=i(Yt),rs=s(Yt,"P",{});var X3=n(rs);iqo=r(X3,"The model class to instantiate is selected based on the "),Jie=s(X3,"CODE",{});var Eet=n(Jie);dqo=r(Eet,"model_type"),Eet.forEach(t),cqo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Yie=s(X3,"CODE",{});var yet=n(Yie);mqo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),fqo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=s(X3,"CODE",{});var wet=n(Kie);gqo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),hqo=r(X3,":"),X3.forEach(t),uqo=i(Yt),f6=s(Yt,"UL",{});var yke=n(f6);p1=s(yke,"LI",{});var H6e=n(p1);Zie=s(H6e,"STRONG",{});var Aet=n(Zie);pqo=r(Aet,"speech-encoder-decoder"),Aet.forEach(t),_qo=r(H6e," \u2014 "),tN=s(H6e,"A",{href:!0});var Let=n(tN);bqo=r(Let,"SpeechEncoderDecoderModel"),Let.forEach(t),vqo=r(H6e," (Speech Encoder decoder model)"),H6e.forEach(t),Tqo=i(yke),_1=s(yke,"LI",{});var U6e=n(_1);ede=s(U6e,"STRONG",{});var Bet=n(ede);Fqo=r(Bet,"speech_to_text"),Bet.forEach(t),Cqo=r(U6e," \u2014 "),aN=s(U6e,"A",{href:!0});var xet=n(aN);Mqo=r(xet,"Speech2TextForConditionalGeneration"),xet.forEach(t),Eqo=r(U6e," (Speech2Text model)"),U6e.forEach(t),yke.forEach(t),yqo=i(Yt),b1=s(Yt,"P",{});var J6e=n(b1);wqo=r(J6e,"The model is set in evaluation mode by default using "),ode=s(J6e,"CODE",{});var ket=n(ode);Aqo=r(ket,"model.eval()"),ket.forEach(t),Lqo=r(J6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=s(J6e,"CODE",{});var Ret=n(rde);Bqo=r(Ret,"model.train()"),Ret.forEach(t),J6e.forEach(t),xqo=i(Yt),tde=s(Yt,"P",{});var Set=n(tde);kqo=r(Set,"Examples:"),Set.forEach(t),Rqo=i(Yt),f(g6.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),bBe=i(c),Nd=s(c,"H2",{class:!0});var wke=n(Nd);v1=s(wke,"A",{id:!0,class:!0,href:!0});var Pet=n(v1);ade=s(Pet,"SPAN",{});var $et=n(ade);f(h6.$$.fragment,$et),$et.forEach(t),Pet.forEach(t),Sqo=i(wke),sde=s(wke,"SPAN",{});var Iet=n(sde);Pqo=r(Iet,"AutoModelForAudioXVector"),Iet.forEach(t),wke.forEach(t),vBe=i(c),cr=s(c,"DIV",{class:!0});var Fl=n(cr);f(u6.$$.fragment,Fl),$qo=i(Fl),qd=s(Fl,"P",{});var gz=n(qd);Iqo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nde=s(gz,"CODE",{});var Det=n(nde);Dqo=r(Det,"from_pretrained()"),Det.forEach(t),jqo=r(gz,"class method or the "),lde=s(gz,"CODE",{});var jet=n(lde);Nqo=r(jet,"from_config()"),jet.forEach(t),qqo=r(gz,`class
method.`),gz.forEach(t),Gqo=i(Fl),p6=s(Fl,"P",{});var Ake=n(p6);Oqo=r(Ake,"This class cannot be instantiated directly using "),ide=s(Ake,"CODE",{});var Net=n(ide);Xqo=r(Net,"__init__()"),Net.forEach(t),Vqo=r(Ake," (throws an error)."),Ake.forEach(t),zqo=i(Fl),tt=s(Fl,"DIV",{class:!0});var Cl=n(tt);f(_6.$$.fragment,Cl),Wqo=i(Cl),dde=s(Cl,"P",{});var qet=n(dde);Qqo=r(qet,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qet.forEach(t),Hqo=i(Cl),Gd=s(Cl,"P",{});var hz=n(Gd);Uqo=r(hz,`Note:
Loading a model from its configuration file does `),cde=s(hz,"STRONG",{});var Get=n(cde);Jqo=r(Get,"not"),Get.forEach(t),Yqo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=s(hz,"CODE",{});var Oet=n(mde);Kqo=r(Oet,"from_pretrained()"),Oet.forEach(t),Zqo=r(hz,"to load the model weights."),hz.forEach(t),eGo=i(Cl),fde=s(Cl,"P",{});var Xet=n(fde);oGo=r(Xet,"Examples:"),Xet.forEach(t),rGo=i(Cl),f(b6.$$.fragment,Cl),Cl.forEach(t),tGo=i(Fl),Ue=s(Fl,"DIV",{class:!0});var Kt=n(Ue);f(v6.$$.fragment,Kt),aGo=i(Kt),gde=s(Kt,"P",{});var Vet=n(gde);sGo=r(Vet,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vet.forEach(t),nGo=i(Kt),ts=s(Kt,"P",{});var V3=n(ts);lGo=r(V3,"The model class to instantiate is selected based on the "),hde=s(V3,"CODE",{});var zet=n(hde);iGo=r(zet,"model_type"),zet.forEach(t),dGo=r(V3,` property of the config object (either
passed as an argument or loaded from `),ude=s(V3,"CODE",{});var Wet=n(ude);cGo=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),mGo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=s(V3,"CODE",{});var Qet=n(pde);fGo=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),gGo=r(V3,":"),V3.forEach(t),hGo=i(Kt),as=s(Kt,"UL",{});var z3=n(as);T1=s(z3,"LI",{});var Y6e=n(T1);_de=s(Y6e,"STRONG",{});var Het=n(_de);uGo=r(Het,"data2vec-audio"),Het.forEach(t),pGo=r(Y6e," \u2014 "),sN=s(Y6e,"A",{href:!0});var Uet=n(sN);_Go=r(Uet,"Data2VecAudioForXVector"),Uet.forEach(t),bGo=r(Y6e," (Data2VecAudio model)"),Y6e.forEach(t),vGo=i(z3),F1=s(z3,"LI",{});var K6e=n(F1);bde=s(K6e,"STRONG",{});var Jet=n(bde);TGo=r(Jet,"unispeech-sat"),Jet.forEach(t),FGo=r(K6e," \u2014 "),nN=s(K6e,"A",{href:!0});var Yet=n(nN);CGo=r(Yet,"UniSpeechSatForXVector"),Yet.forEach(t),MGo=r(K6e," (UniSpeechSat model)"),K6e.forEach(t),EGo=i(z3),C1=s(z3,"LI",{});var Z6e=n(C1);vde=s(Z6e,"STRONG",{});var Ket=n(vde);yGo=r(Ket,"wav2vec2"),Ket.forEach(t),wGo=r(Z6e," \u2014 "),lN=s(Z6e,"A",{href:!0});var Zet=n(lN);AGo=r(Zet,"Wav2Vec2ForXVector"),Zet.forEach(t),LGo=r(Z6e," (Wav2Vec2 model)"),Z6e.forEach(t),BGo=i(z3),M1=s(z3,"LI",{});var eAe=n(M1);Tde=s(eAe,"STRONG",{});var eot=n(Tde);xGo=r(eot,"wavlm"),eot.forEach(t),kGo=r(eAe," \u2014 "),iN=s(eAe,"A",{href:!0});var oot=n(iN);RGo=r(oot,"WavLMForXVector"),oot.forEach(t),SGo=r(eAe," (WavLM model)"),eAe.forEach(t),z3.forEach(t),PGo=i(Kt),E1=s(Kt,"P",{});var oAe=n(E1);$Go=r(oAe,"The model is set in evaluation mode by default using "),Fde=s(oAe,"CODE",{});var rot=n(Fde);IGo=r(rot,"model.eval()"),rot.forEach(t),DGo=r(oAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=s(oAe,"CODE",{});var tot=n(Cde);jGo=r(tot,"model.train()"),tot.forEach(t),oAe.forEach(t),NGo=i(Kt),Mde=s(Kt,"P",{});var aot=n(Mde);qGo=r(aot,"Examples:"),aot.forEach(t),GGo=i(Kt),f(T6.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),TBe=i(c),Od=s(c,"H2",{class:!0});var Lke=n(Od);y1=s(Lke,"A",{id:!0,class:!0,href:!0});var sot=n(y1);Ede=s(sot,"SPAN",{});var not=n(Ede);f(F6.$$.fragment,not),not.forEach(t),sot.forEach(t),OGo=i(Lke),yde=s(Lke,"SPAN",{});var lot=n(yde);XGo=r(lot,"AutoModelForMaskedImageModeling"),lot.forEach(t),Lke.forEach(t),FBe=i(c),mr=s(c,"DIV",{class:!0});var Ml=n(mr);f(C6.$$.fragment,Ml),VGo=i(Ml),Xd=s(Ml,"P",{});var uz=n(Xd);zGo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wde=s(uz,"CODE",{});var iot=n(wde);WGo=r(iot,"from_pretrained()"),iot.forEach(t),QGo=r(uz,"class method or the "),Ade=s(uz,"CODE",{});var dot=n(Ade);HGo=r(dot,"from_config()"),dot.forEach(t),UGo=r(uz,`class
method.`),uz.forEach(t),JGo=i(Ml),M6=s(Ml,"P",{});var Bke=n(M6);YGo=r(Bke,"This class cannot be instantiated directly using "),Lde=s(Bke,"CODE",{});var cot=n(Lde);KGo=r(cot,"__init__()"),cot.forEach(t),ZGo=r(Bke," (throws an error)."),Bke.forEach(t),eOo=i(Ml),at=s(Ml,"DIV",{class:!0});var El=n(at);f(E6.$$.fragment,El),oOo=i(El),Bde=s(El,"P",{});var mot=n(Bde);rOo=r(mot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mot.forEach(t),tOo=i(El),Vd=s(El,"P",{});var pz=n(Vd);aOo=r(pz,`Note:
Loading a model from its configuration file does `),xde=s(pz,"STRONG",{});var fot=n(xde);sOo=r(fot,"not"),fot.forEach(t),nOo=r(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=s(pz,"CODE",{});var got=n(kde);lOo=r(got,"from_pretrained()"),got.forEach(t),iOo=r(pz,"to load the model weights."),pz.forEach(t),dOo=i(El),Rde=s(El,"P",{});var hot=n(Rde);cOo=r(hot,"Examples:"),hot.forEach(t),mOo=i(El),f(y6.$$.fragment,El),El.forEach(t),fOo=i(Ml),Je=s(Ml,"DIV",{class:!0});var Zt=n(Je);f(w6.$$.fragment,Zt),gOo=i(Zt),Sde=s(Zt,"P",{});var uot=n(Sde);hOo=r(uot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uot.forEach(t),uOo=i(Zt),ss=s(Zt,"P",{});var W3=n(ss);pOo=r(W3,"The model class to instantiate is selected based on the "),Pde=s(W3,"CODE",{});var pot=n(Pde);_Oo=r(pot,"model_type"),pot.forEach(t),bOo=r(W3,` property of the config object (either
passed as an argument or loaded from `),$de=s(W3,"CODE",{});var _ot=n($de);vOo=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),TOo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=s(W3,"CODE",{});var bot=n(Ide);FOo=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),COo=r(W3,":"),W3.forEach(t),MOo=i(Zt),zd=s(Zt,"UL",{});var _z=n(zd);w1=s(_z,"LI",{});var rAe=n(w1);Dde=s(rAe,"STRONG",{});var vot=n(Dde);EOo=r(vot,"deit"),vot.forEach(t),yOo=r(rAe," \u2014 "),dN=s(rAe,"A",{href:!0});var Tot=n(dN);wOo=r(Tot,"DeiTForMaskedImageModeling"),Tot.forEach(t),AOo=r(rAe," (DeiT model)"),rAe.forEach(t),LOo=i(_z),A1=s(_z,"LI",{});var tAe=n(A1);jde=s(tAe,"STRONG",{});var Fot=n(jde);BOo=r(Fot,"swin"),Fot.forEach(t),xOo=r(tAe," \u2014 "),cN=s(tAe,"A",{href:!0});var Cot=n(cN);kOo=r(Cot,"SwinForMaskedImageModeling"),Cot.forEach(t),ROo=r(tAe," (Swin model)"),tAe.forEach(t),SOo=i(_z),L1=s(_z,"LI",{});var aAe=n(L1);Nde=s(aAe,"STRONG",{});var Mot=n(Nde);POo=r(Mot,"vit"),Mot.forEach(t),$Oo=r(aAe," \u2014 "),mN=s(aAe,"A",{href:!0});var Eot=n(mN);IOo=r(Eot,"ViTForMaskedImageModeling"),Eot.forEach(t),DOo=r(aAe," (ViT model)"),aAe.forEach(t),_z.forEach(t),jOo=i(Zt),B1=s(Zt,"P",{});var sAe=n(B1);NOo=r(sAe,"The model is set in evaluation mode by default using "),qde=s(sAe,"CODE",{});var yot=n(qde);qOo=r(yot,"model.eval()"),yot.forEach(t),GOo=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=s(sAe,"CODE",{});var wot=n(Gde);OOo=r(wot,"model.train()"),wot.forEach(t),sAe.forEach(t),XOo=i(Zt),Ode=s(Zt,"P",{});var Aot=n(Ode);VOo=r(Aot,"Examples:"),Aot.forEach(t),zOo=i(Zt),f(A6.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),CBe=i(c),Wd=s(c,"H2",{class:!0});var xke=n(Wd);x1=s(xke,"A",{id:!0,class:!0,href:!0});var Lot=n(x1);Xde=s(Lot,"SPAN",{});var Bot=n(Xde);f(L6.$$.fragment,Bot),Bot.forEach(t),Lot.forEach(t),WOo=i(xke),Vde=s(xke,"SPAN",{});var xot=n(Vde);QOo=r(xot,"AutoModelForObjectDetection"),xot.forEach(t),xke.forEach(t),MBe=i(c),fr=s(c,"DIV",{class:!0});var yl=n(fr);f(B6.$$.fragment,yl),HOo=i(yl),Qd=s(yl,"P",{});var bz=n(Qd);UOo=r(bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zde=s(bz,"CODE",{});var kot=n(zde);JOo=r(kot,"from_pretrained()"),kot.forEach(t),YOo=r(bz,"class method or the "),Wde=s(bz,"CODE",{});var Rot=n(Wde);KOo=r(Rot,"from_config()"),Rot.forEach(t),ZOo=r(bz,`class
method.`),bz.forEach(t),eXo=i(yl),x6=s(yl,"P",{});var kke=n(x6);oXo=r(kke,"This class cannot be instantiated directly using "),Qde=s(kke,"CODE",{});var Sot=n(Qde);rXo=r(Sot,"__init__()"),Sot.forEach(t),tXo=r(kke," (throws an error)."),kke.forEach(t),aXo=i(yl),st=s(yl,"DIV",{class:!0});var wl=n(st);f(k6.$$.fragment,wl),sXo=i(wl),Hde=s(wl,"P",{});var Pot=n(Hde);nXo=r(Pot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pot.forEach(t),lXo=i(wl),Hd=s(wl,"P",{});var vz=n(Hd);iXo=r(vz,`Note:
Loading a model from its configuration file does `),Ude=s(vz,"STRONG",{});var $ot=n(Ude);dXo=r($ot,"not"),$ot.forEach(t),cXo=r(vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=s(vz,"CODE",{});var Iot=n(Jde);mXo=r(Iot,"from_pretrained()"),Iot.forEach(t),fXo=r(vz,"to load the model weights."),vz.forEach(t),gXo=i(wl),Yde=s(wl,"P",{});var Dot=n(Yde);hXo=r(Dot,"Examples:"),Dot.forEach(t),uXo=i(wl),f(R6.$$.fragment,wl),wl.forEach(t),pXo=i(yl),Ye=s(yl,"DIV",{class:!0});var ea=n(Ye);f(S6.$$.fragment,ea),_Xo=i(ea),Kde=s(ea,"P",{});var jot=n(Kde);bXo=r(jot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jot.forEach(t),vXo=i(ea),ns=s(ea,"P",{});var Q3=n(ns);TXo=r(Q3,"The model class to instantiate is selected based on the "),Zde=s(Q3,"CODE",{});var Not=n(Zde);FXo=r(Not,"model_type"),Not.forEach(t),CXo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),ece=s(Q3,"CODE",{});var qot=n(ece);MXo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),EXo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=s(Q3,"CODE",{});var Got=n(oce);yXo=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),wXo=r(Q3,":"),Q3.forEach(t),AXo=i(ea),rce=s(ea,"UL",{});var Oot=n(rce);k1=s(Oot,"LI",{});var nAe=n(k1);tce=s(nAe,"STRONG",{});var Xot=n(tce);LXo=r(Xot,"detr"),Xot.forEach(t),BXo=r(nAe," \u2014 "),fN=s(nAe,"A",{href:!0});var Vot=n(fN);xXo=r(Vot,"DetrForObjectDetection"),Vot.forEach(t),kXo=r(nAe," (DETR model)"),nAe.forEach(t),Oot.forEach(t),RXo=i(ea),R1=s(ea,"P",{});var lAe=n(R1);SXo=r(lAe,"The model is set in evaluation mode by default using "),ace=s(lAe,"CODE",{});var zot=n(ace);PXo=r(zot,"model.eval()"),zot.forEach(t),$Xo=r(lAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sce=s(lAe,"CODE",{});var Wot=n(sce);IXo=r(Wot,"model.train()"),Wot.forEach(t),lAe.forEach(t),DXo=i(ea),nce=s(ea,"P",{});var Qot=n(nce);jXo=r(Qot,"Examples:"),Qot.forEach(t),NXo=i(ea),f(P6.$$.fragment,ea),ea.forEach(t),yl.forEach(t),EBe=i(c),Ud=s(c,"H2",{class:!0});var Rke=n(Ud);S1=s(Rke,"A",{id:!0,class:!0,href:!0});var Hot=n(S1);lce=s(Hot,"SPAN",{});var Uot=n(lce);f($6.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),qXo=i(Rke),ice=s(Rke,"SPAN",{});var Jot=n(ice);GXo=r(Jot,"AutoModelForImageSegmentation"),Jot.forEach(t),Rke.forEach(t),yBe=i(c),gr=s(c,"DIV",{class:!0});var Al=n(gr);f(I6.$$.fragment,Al),OXo=i(Al),Jd=s(Al,"P",{});var Tz=n(Jd);XXo=r(Tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dce=s(Tz,"CODE",{});var Yot=n(dce);VXo=r(Yot,"from_pretrained()"),Yot.forEach(t),zXo=r(Tz,"class method or the "),cce=s(Tz,"CODE",{});var Kot=n(cce);WXo=r(Kot,"from_config()"),Kot.forEach(t),QXo=r(Tz,`class
method.`),Tz.forEach(t),HXo=i(Al),D6=s(Al,"P",{});var Ske=n(D6);UXo=r(Ske,"This class cannot be instantiated directly using "),mce=s(Ske,"CODE",{});var Zot=n(mce);JXo=r(Zot,"__init__()"),Zot.forEach(t),YXo=r(Ske," (throws an error)."),Ske.forEach(t),KXo=i(Al),nt=s(Al,"DIV",{class:!0});var Ll=n(nt);f(j6.$$.fragment,Ll),ZXo=i(Ll),fce=s(Ll,"P",{});var ert=n(fce);eVo=r(ert,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ert.forEach(t),oVo=i(Ll),Yd=s(Ll,"P",{});var Fz=n(Yd);rVo=r(Fz,`Note:
Loading a model from its configuration file does `),gce=s(Fz,"STRONG",{});var ort=n(gce);tVo=r(ort,"not"),ort.forEach(t),aVo=r(Fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hce=s(Fz,"CODE",{});var rrt=n(hce);sVo=r(rrt,"from_pretrained()"),rrt.forEach(t),nVo=r(Fz,"to load the model weights."),Fz.forEach(t),lVo=i(Ll),uce=s(Ll,"P",{});var trt=n(uce);iVo=r(trt,"Examples:"),trt.forEach(t),dVo=i(Ll),f(N6.$$.fragment,Ll),Ll.forEach(t),cVo=i(Al),Ke=s(Al,"DIV",{class:!0});var oa=n(Ke);f(q6.$$.fragment,oa),mVo=i(oa),pce=s(oa,"P",{});var art=n(pce);fVo=r(art,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),art.forEach(t),gVo=i(oa),ls=s(oa,"P",{});var H3=n(ls);hVo=r(H3,"The model class to instantiate is selected based on the "),_ce=s(H3,"CODE",{});var srt=n(_ce);uVo=r(srt,"model_type"),srt.forEach(t),pVo=r(H3,` property of the config object (either
passed as an argument or loaded from `),bce=s(H3,"CODE",{});var nrt=n(bce);_Vo=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),bVo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=s(H3,"CODE",{});var lrt=n(vce);vVo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),TVo=r(H3,":"),H3.forEach(t),FVo=i(oa),Tce=s(oa,"UL",{});var irt=n(Tce);P1=s(irt,"LI",{});var iAe=n(P1);Fce=s(iAe,"STRONG",{});var drt=n(Fce);CVo=r(drt,"detr"),drt.forEach(t),MVo=r(iAe," \u2014 "),gN=s(iAe,"A",{href:!0});var crt=n(gN);EVo=r(crt,"DetrForSegmentation"),crt.forEach(t),yVo=r(iAe," (DETR model)"),iAe.forEach(t),irt.forEach(t),wVo=i(oa),$1=s(oa,"P",{});var dAe=n($1);AVo=r(dAe,"The model is set in evaluation mode by default using "),Cce=s(dAe,"CODE",{});var mrt=n(Cce);LVo=r(mrt,"model.eval()"),mrt.forEach(t),BVo=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=s(dAe,"CODE",{});var frt=n(Mce);xVo=r(frt,"model.train()"),frt.forEach(t),dAe.forEach(t),kVo=i(oa),Ece=s(oa,"P",{});var grt=n(Ece);RVo=r(grt,"Examples:"),grt.forEach(t),SVo=i(oa),f(G6.$$.fragment,oa),oa.forEach(t),Al.forEach(t),wBe=i(c),Kd=s(c,"H2",{class:!0});var Pke=n(Kd);I1=s(Pke,"A",{id:!0,class:!0,href:!0});var hrt=n(I1);yce=s(hrt,"SPAN",{});var urt=n(yce);f(O6.$$.fragment,urt),urt.forEach(t),hrt.forEach(t),PVo=i(Pke),wce=s(Pke,"SPAN",{});var prt=n(wce);$Vo=r(prt,"AutoModelForSemanticSegmentation"),prt.forEach(t),Pke.forEach(t),ABe=i(c),hr=s(c,"DIV",{class:!0});var Bl=n(hr);f(X6.$$.fragment,Bl),IVo=i(Bl),Zd=s(Bl,"P",{});var Cz=n(Zd);DVo=r(Cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ace=s(Cz,"CODE",{});var _rt=n(Ace);jVo=r(_rt,"from_pretrained()"),_rt.forEach(t),NVo=r(Cz,"class method or the "),Lce=s(Cz,"CODE",{});var brt=n(Lce);qVo=r(brt,"from_config()"),brt.forEach(t),GVo=r(Cz,`class
method.`),Cz.forEach(t),OVo=i(Bl),V6=s(Bl,"P",{});var $ke=n(V6);XVo=r($ke,"This class cannot be instantiated directly using "),Bce=s($ke,"CODE",{});var vrt=n(Bce);VVo=r(vrt,"__init__()"),vrt.forEach(t),zVo=r($ke," (throws an error)."),$ke.forEach(t),WVo=i(Bl),lt=s(Bl,"DIV",{class:!0});var xl=n(lt);f(z6.$$.fragment,xl),QVo=i(xl),xce=s(xl,"P",{});var Trt=n(xce);HVo=r(Trt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Trt.forEach(t),UVo=i(xl),ec=s(xl,"P",{});var Mz=n(ec);JVo=r(Mz,`Note:
Loading a model from its configuration file does `),kce=s(Mz,"STRONG",{});var Frt=n(kce);YVo=r(Frt,"not"),Frt.forEach(t),KVo=r(Mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rce=s(Mz,"CODE",{});var Crt=n(Rce);ZVo=r(Crt,"from_pretrained()"),Crt.forEach(t),ezo=r(Mz,"to load the model weights."),Mz.forEach(t),ozo=i(xl),Sce=s(xl,"P",{});var Mrt=n(Sce);rzo=r(Mrt,"Examples:"),Mrt.forEach(t),tzo=i(xl),f(W6.$$.fragment,xl),xl.forEach(t),azo=i(Bl),Ze=s(Bl,"DIV",{class:!0});var ra=n(Ze);f(Q6.$$.fragment,ra),szo=i(ra),Pce=s(ra,"P",{});var Ert=n(Pce);nzo=r(Ert,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ert.forEach(t),lzo=i(ra),is=s(ra,"P",{});var U3=n(is);izo=r(U3,"The model class to instantiate is selected based on the "),$ce=s(U3,"CODE",{});var yrt=n($ce);dzo=r(yrt,"model_type"),yrt.forEach(t),czo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Ice=s(U3,"CODE",{});var wrt=n(Ice);mzo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),fzo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=s(U3,"CODE",{});var Art=n(Dce);gzo=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),hzo=r(U3,":"),U3.forEach(t),uzo=i(ra),H6=s(ra,"UL",{});var Ike=n(H6);D1=s(Ike,"LI",{});var cAe=n(D1);jce=s(cAe,"STRONG",{});var Lrt=n(jce);pzo=r(Lrt,"beit"),Lrt.forEach(t),_zo=r(cAe," \u2014 "),hN=s(cAe,"A",{href:!0});var Brt=n(hN);bzo=r(Brt,"BeitForSemanticSegmentation"),Brt.forEach(t),vzo=r(cAe," (BEiT model)"),cAe.forEach(t),Tzo=i(Ike),j1=s(Ike,"LI",{});var mAe=n(j1);Nce=s(mAe,"STRONG",{});var xrt=n(Nce);Fzo=r(xrt,"segformer"),xrt.forEach(t),Czo=r(mAe," \u2014 "),uN=s(mAe,"A",{href:!0});var krt=n(uN);Mzo=r(krt,"SegformerForSemanticSegmentation"),krt.forEach(t),Ezo=r(mAe," (SegFormer model)"),mAe.forEach(t),Ike.forEach(t),yzo=i(ra),N1=s(ra,"P",{});var fAe=n(N1);wzo=r(fAe,"The model is set in evaluation mode by default using "),qce=s(fAe,"CODE",{});var Rrt=n(qce);Azo=r(Rrt,"model.eval()"),Rrt.forEach(t),Lzo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=s(fAe,"CODE",{});var Srt=n(Gce);Bzo=r(Srt,"model.train()"),Srt.forEach(t),fAe.forEach(t),xzo=i(ra),Oce=s(ra,"P",{});var Prt=n(Oce);kzo=r(Prt,"Examples:"),Prt.forEach(t),Rzo=i(ra),f(U6.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),LBe=i(c),oc=s(c,"H2",{class:!0});var Dke=n(oc);q1=s(Dke,"A",{id:!0,class:!0,href:!0});var $rt=n(q1);Xce=s($rt,"SPAN",{});var Irt=n(Xce);f(J6.$$.fragment,Irt),Irt.forEach(t),$rt.forEach(t),Szo=i(Dke),Vce=s(Dke,"SPAN",{});var Drt=n(Vce);Pzo=r(Drt,"TFAutoModel"),Drt.forEach(t),Dke.forEach(t),BBe=i(c),ur=s(c,"DIV",{class:!0});var kl=n(ur);f(Y6.$$.fragment,kl),$zo=i(kl),rc=s(kl,"P",{});var Ez=n(rc);Izo=r(Ez,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zce=s(Ez,"CODE",{});var jrt=n(zce);Dzo=r(jrt,"from_pretrained()"),jrt.forEach(t),jzo=r(Ez,"class method or the "),Wce=s(Ez,"CODE",{});var Nrt=n(Wce);Nzo=r(Nrt,"from_config()"),Nrt.forEach(t),qzo=r(Ez,`class
method.`),Ez.forEach(t),Gzo=i(kl),K6=s(kl,"P",{});var jke=n(K6);Ozo=r(jke,"This class cannot be instantiated directly using "),Qce=s(jke,"CODE",{});var qrt=n(Qce);Xzo=r(qrt,"__init__()"),qrt.forEach(t),Vzo=r(jke," (throws an error)."),jke.forEach(t),zzo=i(kl),it=s(kl,"DIV",{class:!0});var Rl=n(it);f(Z6.$$.fragment,Rl),Wzo=i(Rl),Hce=s(Rl,"P",{});var Grt=n(Hce);Qzo=r(Grt,"Instantiates one of the base model classes of the library from a configuration."),Grt.forEach(t),Hzo=i(Rl),tc=s(Rl,"P",{});var yz=n(tc);Uzo=r(yz,`Note:
Loading a model from its configuration file does `),Uce=s(yz,"STRONG",{});var Ort=n(Uce);Jzo=r(Ort,"not"),Ort.forEach(t),Yzo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jce=s(yz,"CODE",{});var Xrt=n(Jce);Kzo=r(Xrt,"from_pretrained()"),Xrt.forEach(t),Zzo=r(yz,"to load the model weights."),yz.forEach(t),eWo=i(Rl),Yce=s(Rl,"P",{});var Vrt=n(Yce);oWo=r(Vrt,"Examples:"),Vrt.forEach(t),rWo=i(Rl),f(eA.$$.fragment,Rl),Rl.forEach(t),tWo=i(kl),go=s(kl,"DIV",{class:!0});var ca=n(go);f(oA.$$.fragment,ca),aWo=i(ca),Kce=s(ca,"P",{});var zrt=n(Kce);sWo=r(zrt,"Instantiate one of the base model classes of the library from a pretrained model."),zrt.forEach(t),nWo=i(ca),ds=s(ca,"P",{});var J3=n(ds);lWo=r(J3,"The model class to instantiate is selected based on the "),Zce=s(J3,"CODE",{});var Wrt=n(Zce);iWo=r(Wrt,"model_type"),Wrt.forEach(t),dWo=r(J3,` property of the config object (either
passed as an argument or loaded from `),eme=s(J3,"CODE",{});var Qrt=n(eme);cWo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),mWo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=s(J3,"CODE",{});var Hrt=n(ome);fWo=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),gWo=r(J3,":"),J3.forEach(t),hWo=i(ca),B=s(ca,"UL",{});var x=n(B);G1=s(x,"LI",{});var gAe=n(G1);rme=s(gAe,"STRONG",{});var Urt=n(rme);uWo=r(Urt,"albert"),Urt.forEach(t),pWo=r(gAe," \u2014 "),pN=s(gAe,"A",{href:!0});var Jrt=n(pN);_Wo=r(Jrt,"TFAlbertModel"),Jrt.forEach(t),bWo=r(gAe," (ALBERT model)"),gAe.forEach(t),vWo=i(x),O1=s(x,"LI",{});var hAe=n(O1);tme=s(hAe,"STRONG",{});var Yrt=n(tme);TWo=r(Yrt,"bart"),Yrt.forEach(t),FWo=r(hAe," \u2014 "),_N=s(hAe,"A",{href:!0});var Krt=n(_N);CWo=r(Krt,"TFBartModel"),Krt.forEach(t),MWo=r(hAe," (BART model)"),hAe.forEach(t),EWo=i(x),X1=s(x,"LI",{});var uAe=n(X1);ame=s(uAe,"STRONG",{});var Zrt=n(ame);yWo=r(Zrt,"bert"),Zrt.forEach(t),wWo=r(uAe," \u2014 "),bN=s(uAe,"A",{href:!0});var ett=n(bN);AWo=r(ett,"TFBertModel"),ett.forEach(t),LWo=r(uAe," (BERT model)"),uAe.forEach(t),BWo=i(x),V1=s(x,"LI",{});var pAe=n(V1);sme=s(pAe,"STRONG",{});var ott=n(sme);xWo=r(ott,"blenderbot"),ott.forEach(t),kWo=r(pAe," \u2014 "),vN=s(pAe,"A",{href:!0});var rtt=n(vN);RWo=r(rtt,"TFBlenderbotModel"),rtt.forEach(t),SWo=r(pAe," (Blenderbot model)"),pAe.forEach(t),PWo=i(x),z1=s(x,"LI",{});var _Ae=n(z1);nme=s(_Ae,"STRONG",{});var ttt=n(nme);$Wo=r(ttt,"blenderbot-small"),ttt.forEach(t),IWo=r(_Ae," \u2014 "),TN=s(_Ae,"A",{href:!0});var att=n(TN);DWo=r(att,"TFBlenderbotSmallModel"),att.forEach(t),jWo=r(_Ae," (BlenderbotSmall model)"),_Ae.forEach(t),NWo=i(x),W1=s(x,"LI",{});var bAe=n(W1);lme=s(bAe,"STRONG",{});var stt=n(lme);qWo=r(stt,"camembert"),stt.forEach(t),GWo=r(bAe," \u2014 "),FN=s(bAe,"A",{href:!0});var ntt=n(FN);OWo=r(ntt,"TFCamembertModel"),ntt.forEach(t),XWo=r(bAe," (CamemBERT model)"),bAe.forEach(t),VWo=i(x),Q1=s(x,"LI",{});var vAe=n(Q1);ime=s(vAe,"STRONG",{});var ltt=n(ime);zWo=r(ltt,"clip"),ltt.forEach(t),WWo=r(vAe," \u2014 "),CN=s(vAe,"A",{href:!0});var itt=n(CN);QWo=r(itt,"TFCLIPModel"),itt.forEach(t),HWo=r(vAe," (CLIP model)"),vAe.forEach(t),UWo=i(x),H1=s(x,"LI",{});var TAe=n(H1);dme=s(TAe,"STRONG",{});var dtt=n(dme);JWo=r(dtt,"convbert"),dtt.forEach(t),YWo=r(TAe," \u2014 "),MN=s(TAe,"A",{href:!0});var ctt=n(MN);KWo=r(ctt,"TFConvBertModel"),ctt.forEach(t),ZWo=r(TAe," (ConvBERT model)"),TAe.forEach(t),eQo=i(x),U1=s(x,"LI",{});var FAe=n(U1);cme=s(FAe,"STRONG",{});var mtt=n(cme);oQo=r(mtt,"convnext"),mtt.forEach(t),rQo=r(FAe," \u2014 "),EN=s(FAe,"A",{href:!0});var ftt=n(EN);tQo=r(ftt,"TFConvNextModel"),ftt.forEach(t),aQo=r(FAe," (ConvNext model)"),FAe.forEach(t),sQo=i(x),J1=s(x,"LI",{});var CAe=n(J1);mme=s(CAe,"STRONG",{});var gtt=n(mme);nQo=r(gtt,"ctrl"),gtt.forEach(t),lQo=r(CAe," \u2014 "),yN=s(CAe,"A",{href:!0});var htt=n(yN);iQo=r(htt,"TFCTRLModel"),htt.forEach(t),dQo=r(CAe," (CTRL model)"),CAe.forEach(t),cQo=i(x),Y1=s(x,"LI",{});var MAe=n(Y1);fme=s(MAe,"STRONG",{});var utt=n(fme);mQo=r(utt,"deberta"),utt.forEach(t),fQo=r(MAe," \u2014 "),wN=s(MAe,"A",{href:!0});var ptt=n(wN);gQo=r(ptt,"TFDebertaModel"),ptt.forEach(t),hQo=r(MAe," (DeBERTa model)"),MAe.forEach(t),uQo=i(x),K1=s(x,"LI",{});var EAe=n(K1);gme=s(EAe,"STRONG",{});var _tt=n(gme);pQo=r(_tt,"deberta-v2"),_tt.forEach(t),_Qo=r(EAe," \u2014 "),AN=s(EAe,"A",{href:!0});var btt=n(AN);bQo=r(btt,"TFDebertaV2Model"),btt.forEach(t),vQo=r(EAe," (DeBERTa-v2 model)"),EAe.forEach(t),TQo=i(x),Z1=s(x,"LI",{});var yAe=n(Z1);hme=s(yAe,"STRONG",{});var vtt=n(hme);FQo=r(vtt,"distilbert"),vtt.forEach(t),CQo=r(yAe," \u2014 "),LN=s(yAe,"A",{href:!0});var Ttt=n(LN);MQo=r(Ttt,"TFDistilBertModel"),Ttt.forEach(t),EQo=r(yAe," (DistilBERT model)"),yAe.forEach(t),yQo=i(x),eF=s(x,"LI",{});var wAe=n(eF);ume=s(wAe,"STRONG",{});var Ftt=n(ume);wQo=r(Ftt,"dpr"),Ftt.forEach(t),AQo=r(wAe," \u2014 "),BN=s(wAe,"A",{href:!0});var Ctt=n(BN);LQo=r(Ctt,"TFDPRQuestionEncoder"),Ctt.forEach(t),BQo=r(wAe," (DPR model)"),wAe.forEach(t),xQo=i(x),oF=s(x,"LI",{});var AAe=n(oF);pme=s(AAe,"STRONG",{});var Mtt=n(pme);kQo=r(Mtt,"electra"),Mtt.forEach(t),RQo=r(AAe," \u2014 "),xN=s(AAe,"A",{href:!0});var Ett=n(xN);SQo=r(Ett,"TFElectraModel"),Ett.forEach(t),PQo=r(AAe," (ELECTRA model)"),AAe.forEach(t),$Qo=i(x),rF=s(x,"LI",{});var LAe=n(rF);_me=s(LAe,"STRONG",{});var ytt=n(_me);IQo=r(ytt,"flaubert"),ytt.forEach(t),DQo=r(LAe," \u2014 "),kN=s(LAe,"A",{href:!0});var wtt=n(kN);jQo=r(wtt,"TFFlaubertModel"),wtt.forEach(t),NQo=r(LAe," (FlauBERT model)"),LAe.forEach(t),qQo=i(x),$n=s(x,"LI",{});var n7=n($n);bme=s(n7,"STRONG",{});var Att=n(bme);GQo=r(Att,"funnel"),Att.forEach(t),OQo=r(n7," \u2014 "),RN=s(n7,"A",{href:!0});var Ltt=n(RN);XQo=r(Ltt,"TFFunnelModel"),Ltt.forEach(t),VQo=r(n7," or "),SN=s(n7,"A",{href:!0});var Btt=n(SN);zQo=r(Btt,"TFFunnelBaseModel"),Btt.forEach(t),WQo=r(n7," (Funnel Transformer model)"),n7.forEach(t),QQo=i(x),tF=s(x,"LI",{});var BAe=n(tF);vme=s(BAe,"STRONG",{});var xtt=n(vme);HQo=r(xtt,"gpt2"),xtt.forEach(t),UQo=r(BAe," \u2014 "),PN=s(BAe,"A",{href:!0});var ktt=n(PN);JQo=r(ktt,"TFGPT2Model"),ktt.forEach(t),YQo=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),KQo=i(x),aF=s(x,"LI",{});var xAe=n(aF);Tme=s(xAe,"STRONG",{});var Rtt=n(Tme);ZQo=r(Rtt,"hubert"),Rtt.forEach(t),eHo=r(xAe," \u2014 "),$N=s(xAe,"A",{href:!0});var Stt=n($N);oHo=r(Stt,"TFHubertModel"),Stt.forEach(t),rHo=r(xAe," (Hubert model)"),xAe.forEach(t),tHo=i(x),sF=s(x,"LI",{});var kAe=n(sF);Fme=s(kAe,"STRONG",{});var Ptt=n(Fme);aHo=r(Ptt,"layoutlm"),Ptt.forEach(t),sHo=r(kAe," \u2014 "),IN=s(kAe,"A",{href:!0});var $tt=n(IN);nHo=r($tt,"TFLayoutLMModel"),$tt.forEach(t),lHo=r(kAe," (LayoutLM model)"),kAe.forEach(t),iHo=i(x),nF=s(x,"LI",{});var RAe=n(nF);Cme=s(RAe,"STRONG",{});var Itt=n(Cme);dHo=r(Itt,"led"),Itt.forEach(t),cHo=r(RAe," \u2014 "),DN=s(RAe,"A",{href:!0});var Dtt=n(DN);mHo=r(Dtt,"TFLEDModel"),Dtt.forEach(t),fHo=r(RAe," (LED model)"),RAe.forEach(t),gHo=i(x),lF=s(x,"LI",{});var SAe=n(lF);Mme=s(SAe,"STRONG",{});var jtt=n(Mme);hHo=r(jtt,"longformer"),jtt.forEach(t),uHo=r(SAe," \u2014 "),jN=s(SAe,"A",{href:!0});var Ntt=n(jN);pHo=r(Ntt,"TFLongformerModel"),Ntt.forEach(t),_Ho=r(SAe," (Longformer model)"),SAe.forEach(t),bHo=i(x),iF=s(x,"LI",{});var PAe=n(iF);Eme=s(PAe,"STRONG",{});var qtt=n(Eme);vHo=r(qtt,"lxmert"),qtt.forEach(t),THo=r(PAe," \u2014 "),NN=s(PAe,"A",{href:!0});var Gtt=n(NN);FHo=r(Gtt,"TFLxmertModel"),Gtt.forEach(t),CHo=r(PAe," (LXMERT model)"),PAe.forEach(t),MHo=i(x),dF=s(x,"LI",{});var $Ae=n(dF);yme=s($Ae,"STRONG",{});var Ott=n(yme);EHo=r(Ott,"marian"),Ott.forEach(t),yHo=r($Ae," \u2014 "),qN=s($Ae,"A",{href:!0});var Xtt=n(qN);wHo=r(Xtt,"TFMarianModel"),Xtt.forEach(t),AHo=r($Ae," (Marian model)"),$Ae.forEach(t),LHo=i(x),cF=s(x,"LI",{});var IAe=n(cF);wme=s(IAe,"STRONG",{});var Vtt=n(wme);BHo=r(Vtt,"mbart"),Vtt.forEach(t),xHo=r(IAe," \u2014 "),GN=s(IAe,"A",{href:!0});var ztt=n(GN);kHo=r(ztt,"TFMBartModel"),ztt.forEach(t),RHo=r(IAe," (mBART model)"),IAe.forEach(t),SHo=i(x),mF=s(x,"LI",{});var DAe=n(mF);Ame=s(DAe,"STRONG",{});var Wtt=n(Ame);PHo=r(Wtt,"mobilebert"),Wtt.forEach(t),$Ho=r(DAe," \u2014 "),ON=s(DAe,"A",{href:!0});var Qtt=n(ON);IHo=r(Qtt,"TFMobileBertModel"),Qtt.forEach(t),DHo=r(DAe," (MobileBERT model)"),DAe.forEach(t),jHo=i(x),fF=s(x,"LI",{});var jAe=n(fF);Lme=s(jAe,"STRONG",{});var Htt=n(Lme);NHo=r(Htt,"mpnet"),Htt.forEach(t),qHo=r(jAe," \u2014 "),XN=s(jAe,"A",{href:!0});var Utt=n(XN);GHo=r(Utt,"TFMPNetModel"),Utt.forEach(t),OHo=r(jAe," (MPNet model)"),jAe.forEach(t),XHo=i(x),gF=s(x,"LI",{});var NAe=n(gF);Bme=s(NAe,"STRONG",{});var Jtt=n(Bme);VHo=r(Jtt,"mt5"),Jtt.forEach(t),zHo=r(NAe," \u2014 "),VN=s(NAe,"A",{href:!0});var Ytt=n(VN);WHo=r(Ytt,"TFMT5Model"),Ytt.forEach(t),QHo=r(NAe," (mT5 model)"),NAe.forEach(t),HHo=i(x),hF=s(x,"LI",{});var qAe=n(hF);xme=s(qAe,"STRONG",{});var Ktt=n(xme);UHo=r(Ktt,"openai-gpt"),Ktt.forEach(t),JHo=r(qAe," \u2014 "),zN=s(qAe,"A",{href:!0});var Ztt=n(zN);YHo=r(Ztt,"TFOpenAIGPTModel"),Ztt.forEach(t),KHo=r(qAe," (OpenAI GPT model)"),qAe.forEach(t),ZHo=i(x),uF=s(x,"LI",{});var GAe=n(uF);kme=s(GAe,"STRONG",{});var eat=n(kme);eUo=r(eat,"pegasus"),eat.forEach(t),oUo=r(GAe," \u2014 "),WN=s(GAe,"A",{href:!0});var oat=n(WN);rUo=r(oat,"TFPegasusModel"),oat.forEach(t),tUo=r(GAe," (Pegasus model)"),GAe.forEach(t),aUo=i(x),pF=s(x,"LI",{});var OAe=n(pF);Rme=s(OAe,"STRONG",{});var rat=n(Rme);sUo=r(rat,"rembert"),rat.forEach(t),nUo=r(OAe," \u2014 "),QN=s(OAe,"A",{href:!0});var tat=n(QN);lUo=r(tat,"TFRemBertModel"),tat.forEach(t),iUo=r(OAe," (RemBERT model)"),OAe.forEach(t),dUo=i(x),_F=s(x,"LI",{});var XAe=n(_F);Sme=s(XAe,"STRONG",{});var aat=n(Sme);cUo=r(aat,"roberta"),aat.forEach(t),mUo=r(XAe," \u2014 "),HN=s(XAe,"A",{href:!0});var sat=n(HN);fUo=r(sat,"TFRobertaModel"),sat.forEach(t),gUo=r(XAe," (RoBERTa model)"),XAe.forEach(t),hUo=i(x),bF=s(x,"LI",{});var VAe=n(bF);Pme=s(VAe,"STRONG",{});var nat=n(Pme);uUo=r(nat,"roformer"),nat.forEach(t),pUo=r(VAe," \u2014 "),UN=s(VAe,"A",{href:!0});var lat=n(UN);_Uo=r(lat,"TFRoFormerModel"),lat.forEach(t),bUo=r(VAe," (RoFormer model)"),VAe.forEach(t),vUo=i(x),vF=s(x,"LI",{});var zAe=n(vF);$me=s(zAe,"STRONG",{});var iat=n($me);TUo=r(iat,"speech_to_text"),iat.forEach(t),FUo=r(zAe," \u2014 "),JN=s(zAe,"A",{href:!0});var dat=n(JN);CUo=r(dat,"TFSpeech2TextModel"),dat.forEach(t),MUo=r(zAe," (Speech2Text model)"),zAe.forEach(t),EUo=i(x),TF=s(x,"LI",{});var WAe=n(TF);Ime=s(WAe,"STRONG",{});var cat=n(Ime);yUo=r(cat,"t5"),cat.forEach(t),wUo=r(WAe," \u2014 "),YN=s(WAe,"A",{href:!0});var mat=n(YN);AUo=r(mat,"TFT5Model"),mat.forEach(t),LUo=r(WAe," (T5 model)"),WAe.forEach(t),BUo=i(x),FF=s(x,"LI",{});var QAe=n(FF);Dme=s(QAe,"STRONG",{});var fat=n(Dme);xUo=r(fat,"tapas"),fat.forEach(t),kUo=r(QAe," \u2014 "),KN=s(QAe,"A",{href:!0});var gat=n(KN);RUo=r(gat,"TFTapasModel"),gat.forEach(t),SUo=r(QAe," (TAPAS model)"),QAe.forEach(t),PUo=i(x),CF=s(x,"LI",{});var HAe=n(CF);jme=s(HAe,"STRONG",{});var hat=n(jme);$Uo=r(hat,"transfo-xl"),hat.forEach(t),IUo=r(HAe," \u2014 "),ZN=s(HAe,"A",{href:!0});var uat=n(ZN);DUo=r(uat,"TFTransfoXLModel"),uat.forEach(t),jUo=r(HAe," (Transformer-XL model)"),HAe.forEach(t),NUo=i(x),MF=s(x,"LI",{});var UAe=n(MF);Nme=s(UAe,"STRONG",{});var pat=n(Nme);qUo=r(pat,"vit"),pat.forEach(t),GUo=r(UAe," \u2014 "),eq=s(UAe,"A",{href:!0});var _at=n(eq);OUo=r(_at,"TFViTModel"),_at.forEach(t),XUo=r(UAe," (ViT model)"),UAe.forEach(t),VUo=i(x),EF=s(x,"LI",{});var JAe=n(EF);qme=s(JAe,"STRONG",{});var bat=n(qme);zUo=r(bat,"wav2vec2"),bat.forEach(t),WUo=r(JAe," \u2014 "),oq=s(JAe,"A",{href:!0});var vat=n(oq);QUo=r(vat,"TFWav2Vec2Model"),vat.forEach(t),HUo=r(JAe," (Wav2Vec2 model)"),JAe.forEach(t),UUo=i(x),yF=s(x,"LI",{});var YAe=n(yF);Gme=s(YAe,"STRONG",{});var Tat=n(Gme);JUo=r(Tat,"xlm"),Tat.forEach(t),YUo=r(YAe," \u2014 "),rq=s(YAe,"A",{href:!0});var Fat=n(rq);KUo=r(Fat,"TFXLMModel"),Fat.forEach(t),ZUo=r(YAe," (XLM model)"),YAe.forEach(t),eJo=i(x),wF=s(x,"LI",{});var KAe=n(wF);Ome=s(KAe,"STRONG",{});var Cat=n(Ome);oJo=r(Cat,"xlm-roberta"),Cat.forEach(t),rJo=r(KAe," \u2014 "),tq=s(KAe,"A",{href:!0});var Mat=n(tq);tJo=r(Mat,"TFXLMRobertaModel"),Mat.forEach(t),aJo=r(KAe," (XLM-RoBERTa model)"),KAe.forEach(t),sJo=i(x),AF=s(x,"LI",{});var ZAe=n(AF);Xme=s(ZAe,"STRONG",{});var Eat=n(Xme);nJo=r(Eat,"xlnet"),Eat.forEach(t),lJo=r(ZAe," \u2014 "),aq=s(ZAe,"A",{href:!0});var yat=n(aq);iJo=r(yat,"TFXLNetModel"),yat.forEach(t),dJo=r(ZAe," (XLNet model)"),ZAe.forEach(t),x.forEach(t),cJo=i(ca),Vme=s(ca,"P",{});var wat=n(Vme);mJo=r(wat,"Examples:"),wat.forEach(t),fJo=i(ca),f(rA.$$.fragment,ca),ca.forEach(t),kl.forEach(t),xBe=i(c),ac=s(c,"H2",{class:!0});var Nke=n(ac);LF=s(Nke,"A",{id:!0,class:!0,href:!0});var Aat=n(LF);zme=s(Aat,"SPAN",{});var Lat=n(zme);f(tA.$$.fragment,Lat),Lat.forEach(t),Aat.forEach(t),gJo=i(Nke),Wme=s(Nke,"SPAN",{});var Bat=n(Wme);hJo=r(Bat,"TFAutoModelForPreTraining"),Bat.forEach(t),Nke.forEach(t),kBe=i(c),pr=s(c,"DIV",{class:!0});var Sl=n(pr);f(aA.$$.fragment,Sl),uJo=i(Sl),sc=s(Sl,"P",{});var wz=n(sc);pJo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qme=s(wz,"CODE",{});var xat=n(Qme);_Jo=r(xat,"from_pretrained()"),xat.forEach(t),bJo=r(wz,"class method or the "),Hme=s(wz,"CODE",{});var kat=n(Hme);vJo=r(kat,"from_config()"),kat.forEach(t),TJo=r(wz,`class
method.`),wz.forEach(t),FJo=i(Sl),sA=s(Sl,"P",{});var qke=n(sA);CJo=r(qke,"This class cannot be instantiated directly using "),Ume=s(qke,"CODE",{});var Rat=n(Ume);MJo=r(Rat,"__init__()"),Rat.forEach(t),EJo=r(qke," (throws an error)."),qke.forEach(t),yJo=i(Sl),dt=s(Sl,"DIV",{class:!0});var Pl=n(dt);f(nA.$$.fragment,Pl),wJo=i(Pl),Jme=s(Pl,"P",{});var Sat=n(Jme);AJo=r(Sat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sat.forEach(t),LJo=i(Pl),nc=s(Pl,"P",{});var Az=n(nc);BJo=r(Az,`Note:
Loading a model from its configuration file does `),Yme=s(Az,"STRONG",{});var Pat=n(Yme);xJo=r(Pat,"not"),Pat.forEach(t),kJo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kme=s(Az,"CODE",{});var $at=n(Kme);RJo=r($at,"from_pretrained()"),$at.forEach(t),SJo=r(Az,"to load the model weights."),Az.forEach(t),PJo=i(Pl),Zme=s(Pl,"P",{});var Iat=n(Zme);$Jo=r(Iat,"Examples:"),Iat.forEach(t),IJo=i(Pl),f(lA.$$.fragment,Pl),Pl.forEach(t),DJo=i(Sl),ho=s(Sl,"DIV",{class:!0});var ma=n(ho);f(iA.$$.fragment,ma),jJo=i(ma),efe=s(ma,"P",{});var Dat=n(efe);NJo=r(Dat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dat.forEach(t),qJo=i(ma),cs=s(ma,"P",{});var Y3=n(cs);GJo=r(Y3,"The model class to instantiate is selected based on the "),ofe=s(Y3,"CODE",{});var jat=n(ofe);OJo=r(jat,"model_type"),jat.forEach(t),XJo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),rfe=s(Y3,"CODE",{});var Nat=n(rfe);VJo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),zJo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=s(Y3,"CODE",{});var qat=n(tfe);WJo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),QJo=r(Y3,":"),Y3.forEach(t),HJo=i(ma),H=s(ma,"UL",{});var U=n(H);BF=s(U,"LI",{});var e0e=n(BF);afe=s(e0e,"STRONG",{});var Gat=n(afe);UJo=r(Gat,"albert"),Gat.forEach(t),JJo=r(e0e," \u2014 "),sq=s(e0e,"A",{href:!0});var Oat=n(sq);YJo=r(Oat,"TFAlbertForPreTraining"),Oat.forEach(t),KJo=r(e0e," (ALBERT model)"),e0e.forEach(t),ZJo=i(U),xF=s(U,"LI",{});var o0e=n(xF);sfe=s(o0e,"STRONG",{});var Xat=n(sfe);eYo=r(Xat,"bart"),Xat.forEach(t),oYo=r(o0e," \u2014 "),nq=s(o0e,"A",{href:!0});var Vat=n(nq);rYo=r(Vat,"TFBartForConditionalGeneration"),Vat.forEach(t),tYo=r(o0e," (BART model)"),o0e.forEach(t),aYo=i(U),kF=s(U,"LI",{});var r0e=n(kF);nfe=s(r0e,"STRONG",{});var zat=n(nfe);sYo=r(zat,"bert"),zat.forEach(t),nYo=r(r0e," \u2014 "),lq=s(r0e,"A",{href:!0});var Wat=n(lq);lYo=r(Wat,"TFBertForPreTraining"),Wat.forEach(t),iYo=r(r0e," (BERT model)"),r0e.forEach(t),dYo=i(U),RF=s(U,"LI",{});var t0e=n(RF);lfe=s(t0e,"STRONG",{});var Qat=n(lfe);cYo=r(Qat,"camembert"),Qat.forEach(t),mYo=r(t0e," \u2014 "),iq=s(t0e,"A",{href:!0});var Hat=n(iq);fYo=r(Hat,"TFCamembertForMaskedLM"),Hat.forEach(t),gYo=r(t0e," (CamemBERT model)"),t0e.forEach(t),hYo=i(U),SF=s(U,"LI",{});var a0e=n(SF);ife=s(a0e,"STRONG",{});var Uat=n(ife);uYo=r(Uat,"ctrl"),Uat.forEach(t),pYo=r(a0e," \u2014 "),dq=s(a0e,"A",{href:!0});var Jat=n(dq);_Yo=r(Jat,"TFCTRLLMHeadModel"),Jat.forEach(t),bYo=r(a0e," (CTRL model)"),a0e.forEach(t),vYo=i(U),PF=s(U,"LI",{});var s0e=n(PF);dfe=s(s0e,"STRONG",{});var Yat=n(dfe);TYo=r(Yat,"distilbert"),Yat.forEach(t),FYo=r(s0e," \u2014 "),cq=s(s0e,"A",{href:!0});var Kat=n(cq);CYo=r(Kat,"TFDistilBertForMaskedLM"),Kat.forEach(t),MYo=r(s0e," (DistilBERT model)"),s0e.forEach(t),EYo=i(U),$F=s(U,"LI",{});var n0e=n($F);cfe=s(n0e,"STRONG",{});var Zat=n(cfe);yYo=r(Zat,"electra"),Zat.forEach(t),wYo=r(n0e," \u2014 "),mq=s(n0e,"A",{href:!0});var est=n(mq);AYo=r(est,"TFElectraForPreTraining"),est.forEach(t),LYo=r(n0e," (ELECTRA model)"),n0e.forEach(t),BYo=i(U),IF=s(U,"LI",{});var l0e=n(IF);mfe=s(l0e,"STRONG",{});var ost=n(mfe);xYo=r(ost,"flaubert"),ost.forEach(t),kYo=r(l0e," \u2014 "),fq=s(l0e,"A",{href:!0});var rst=n(fq);RYo=r(rst,"TFFlaubertWithLMHeadModel"),rst.forEach(t),SYo=r(l0e," (FlauBERT model)"),l0e.forEach(t),PYo=i(U),DF=s(U,"LI",{});var i0e=n(DF);ffe=s(i0e,"STRONG",{});var tst=n(ffe);$Yo=r(tst,"funnel"),tst.forEach(t),IYo=r(i0e," \u2014 "),gq=s(i0e,"A",{href:!0});var ast=n(gq);DYo=r(ast,"TFFunnelForPreTraining"),ast.forEach(t),jYo=r(i0e," (Funnel Transformer model)"),i0e.forEach(t),NYo=i(U),jF=s(U,"LI",{});var d0e=n(jF);gfe=s(d0e,"STRONG",{});var sst=n(gfe);qYo=r(sst,"gpt2"),sst.forEach(t),GYo=r(d0e," \u2014 "),hq=s(d0e,"A",{href:!0});var nst=n(hq);OYo=r(nst,"TFGPT2LMHeadModel"),nst.forEach(t),XYo=r(d0e," (OpenAI GPT-2 model)"),d0e.forEach(t),VYo=i(U),NF=s(U,"LI",{});var c0e=n(NF);hfe=s(c0e,"STRONG",{});var lst=n(hfe);zYo=r(lst,"layoutlm"),lst.forEach(t),WYo=r(c0e," \u2014 "),uq=s(c0e,"A",{href:!0});var ist=n(uq);QYo=r(ist,"TFLayoutLMForMaskedLM"),ist.forEach(t),HYo=r(c0e," (LayoutLM model)"),c0e.forEach(t),UYo=i(U),qF=s(U,"LI",{});var m0e=n(qF);ufe=s(m0e,"STRONG",{});var dst=n(ufe);JYo=r(dst,"lxmert"),dst.forEach(t),YYo=r(m0e," \u2014 "),pq=s(m0e,"A",{href:!0});var cst=n(pq);KYo=r(cst,"TFLxmertForPreTraining"),cst.forEach(t),ZYo=r(m0e," (LXMERT model)"),m0e.forEach(t),eKo=i(U),GF=s(U,"LI",{});var f0e=n(GF);pfe=s(f0e,"STRONG",{});var mst=n(pfe);oKo=r(mst,"mobilebert"),mst.forEach(t),rKo=r(f0e," \u2014 "),_q=s(f0e,"A",{href:!0});var fst=n(_q);tKo=r(fst,"TFMobileBertForPreTraining"),fst.forEach(t),aKo=r(f0e," (MobileBERT model)"),f0e.forEach(t),sKo=i(U),OF=s(U,"LI",{});var g0e=n(OF);_fe=s(g0e,"STRONG",{});var gst=n(_fe);nKo=r(gst,"mpnet"),gst.forEach(t),lKo=r(g0e," \u2014 "),bq=s(g0e,"A",{href:!0});var hst=n(bq);iKo=r(hst,"TFMPNetForMaskedLM"),hst.forEach(t),dKo=r(g0e," (MPNet model)"),g0e.forEach(t),cKo=i(U),XF=s(U,"LI",{});var h0e=n(XF);bfe=s(h0e,"STRONG",{});var ust=n(bfe);mKo=r(ust,"openai-gpt"),ust.forEach(t),fKo=r(h0e," \u2014 "),vq=s(h0e,"A",{href:!0});var pst=n(vq);gKo=r(pst,"TFOpenAIGPTLMHeadModel"),pst.forEach(t),hKo=r(h0e," (OpenAI GPT model)"),h0e.forEach(t),uKo=i(U),VF=s(U,"LI",{});var u0e=n(VF);vfe=s(u0e,"STRONG",{});var _st=n(vfe);pKo=r(_st,"roberta"),_st.forEach(t),_Ko=r(u0e," \u2014 "),Tq=s(u0e,"A",{href:!0});var bst=n(Tq);bKo=r(bst,"TFRobertaForMaskedLM"),bst.forEach(t),vKo=r(u0e," (RoBERTa model)"),u0e.forEach(t),TKo=i(U),zF=s(U,"LI",{});var p0e=n(zF);Tfe=s(p0e,"STRONG",{});var vst=n(Tfe);FKo=r(vst,"t5"),vst.forEach(t),CKo=r(p0e," \u2014 "),Fq=s(p0e,"A",{href:!0});var Tst=n(Fq);MKo=r(Tst,"TFT5ForConditionalGeneration"),Tst.forEach(t),EKo=r(p0e," (T5 model)"),p0e.forEach(t),yKo=i(U),WF=s(U,"LI",{});var _0e=n(WF);Ffe=s(_0e,"STRONG",{});var Fst=n(Ffe);wKo=r(Fst,"tapas"),Fst.forEach(t),AKo=r(_0e," \u2014 "),Cq=s(_0e,"A",{href:!0});var Cst=n(Cq);LKo=r(Cst,"TFTapasForMaskedLM"),Cst.forEach(t),BKo=r(_0e," (TAPAS model)"),_0e.forEach(t),xKo=i(U),QF=s(U,"LI",{});var b0e=n(QF);Cfe=s(b0e,"STRONG",{});var Mst=n(Cfe);kKo=r(Mst,"transfo-xl"),Mst.forEach(t),RKo=r(b0e," \u2014 "),Mq=s(b0e,"A",{href:!0});var Est=n(Mq);SKo=r(Est,"TFTransfoXLLMHeadModel"),Est.forEach(t),PKo=r(b0e," (Transformer-XL model)"),b0e.forEach(t),$Ko=i(U),HF=s(U,"LI",{});var v0e=n(HF);Mfe=s(v0e,"STRONG",{});var yst=n(Mfe);IKo=r(yst,"xlm"),yst.forEach(t),DKo=r(v0e," \u2014 "),Eq=s(v0e,"A",{href:!0});var wst=n(Eq);jKo=r(wst,"TFXLMWithLMHeadModel"),wst.forEach(t),NKo=r(v0e," (XLM model)"),v0e.forEach(t),qKo=i(U),UF=s(U,"LI",{});var T0e=n(UF);Efe=s(T0e,"STRONG",{});var Ast=n(Efe);GKo=r(Ast,"xlm-roberta"),Ast.forEach(t),OKo=r(T0e," \u2014 "),yq=s(T0e,"A",{href:!0});var Lst=n(yq);XKo=r(Lst,"TFXLMRobertaForMaskedLM"),Lst.forEach(t),VKo=r(T0e," (XLM-RoBERTa model)"),T0e.forEach(t),zKo=i(U),JF=s(U,"LI",{});var F0e=n(JF);yfe=s(F0e,"STRONG",{});var Bst=n(yfe);WKo=r(Bst,"xlnet"),Bst.forEach(t),QKo=r(F0e," \u2014 "),wq=s(F0e,"A",{href:!0});var xst=n(wq);HKo=r(xst,"TFXLNetLMHeadModel"),xst.forEach(t),UKo=r(F0e," (XLNet model)"),F0e.forEach(t),U.forEach(t),JKo=i(ma),wfe=s(ma,"P",{});var kst=n(wfe);YKo=r(kst,"Examples:"),kst.forEach(t),KKo=i(ma),f(dA.$$.fragment,ma),ma.forEach(t),Sl.forEach(t),RBe=i(c),lc=s(c,"H2",{class:!0});var Gke=n(lc);YF=s(Gke,"A",{id:!0,class:!0,href:!0});var Rst=n(YF);Afe=s(Rst,"SPAN",{});var Sst=n(Afe);f(cA.$$.fragment,Sst),Sst.forEach(t),Rst.forEach(t),ZKo=i(Gke),Lfe=s(Gke,"SPAN",{});var Pst=n(Lfe);eZo=r(Pst,"TFAutoModelForCausalLM"),Pst.forEach(t),Gke.forEach(t),SBe=i(c),_r=s(c,"DIV",{class:!0});var $l=n(_r);f(mA.$$.fragment,$l),oZo=i($l),ic=s($l,"P",{});var Lz=n(ic);rZo=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bfe=s(Lz,"CODE",{});var $st=n(Bfe);tZo=r($st,"from_pretrained()"),$st.forEach(t),aZo=r(Lz,"class method or the "),xfe=s(Lz,"CODE",{});var Ist=n(xfe);sZo=r(Ist,"from_config()"),Ist.forEach(t),nZo=r(Lz,`class
method.`),Lz.forEach(t),lZo=i($l),fA=s($l,"P",{});var Oke=n(fA);iZo=r(Oke,"This class cannot be instantiated directly using "),kfe=s(Oke,"CODE",{});var Dst=n(kfe);dZo=r(Dst,"__init__()"),Dst.forEach(t),cZo=r(Oke," (throws an error)."),Oke.forEach(t),mZo=i($l),ct=s($l,"DIV",{class:!0});var Il=n(ct);f(gA.$$.fragment,Il),fZo=i(Il),Rfe=s(Il,"P",{});var jst=n(Rfe);gZo=r(jst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jst.forEach(t),hZo=i(Il),dc=s(Il,"P",{});var Bz=n(dc);uZo=r(Bz,`Note:
Loading a model from its configuration file does `),Sfe=s(Bz,"STRONG",{});var Nst=n(Sfe);pZo=r(Nst,"not"),Nst.forEach(t),_Zo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=s(Bz,"CODE",{});var qst=n(Pfe);bZo=r(qst,"from_pretrained()"),qst.forEach(t),vZo=r(Bz,"to load the model weights."),Bz.forEach(t),TZo=i(Il),$fe=s(Il,"P",{});var Gst=n($fe);FZo=r(Gst,"Examples:"),Gst.forEach(t),CZo=i(Il),f(hA.$$.fragment,Il),Il.forEach(t),MZo=i($l),uo=s($l,"DIV",{class:!0});var fa=n(uo);f(uA.$$.fragment,fa),EZo=i(fa),Ife=s(fa,"P",{});var Ost=n(Ife);yZo=r(Ost,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ost.forEach(t),wZo=i(fa),ms=s(fa,"P",{});var K3=n(ms);AZo=r(K3,"The model class to instantiate is selected based on the "),Dfe=s(K3,"CODE",{});var Xst=n(Dfe);LZo=r(Xst,"model_type"),Xst.forEach(t),BZo=r(K3,` property of the config object (either
passed as an argument or loaded from `),jfe=s(K3,"CODE",{});var Vst=n(jfe);xZo=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),kZo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=s(K3,"CODE",{});var zst=n(Nfe);RZo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),SZo=r(K3,":"),K3.forEach(t),PZo=i(fa),he=s(fa,"UL",{});var Me=n(he);KF=s(Me,"LI",{});var C0e=n(KF);qfe=s(C0e,"STRONG",{});var Wst=n(qfe);$Zo=r(Wst,"bert"),Wst.forEach(t),IZo=r(C0e," \u2014 "),Aq=s(C0e,"A",{href:!0});var Qst=n(Aq);DZo=r(Qst,"TFBertLMHeadModel"),Qst.forEach(t),jZo=r(C0e," (BERT model)"),C0e.forEach(t),NZo=i(Me),ZF=s(Me,"LI",{});var M0e=n(ZF);Gfe=s(M0e,"STRONG",{});var Hst=n(Gfe);qZo=r(Hst,"ctrl"),Hst.forEach(t),GZo=r(M0e," \u2014 "),Lq=s(M0e,"A",{href:!0});var Ust=n(Lq);OZo=r(Ust,"TFCTRLLMHeadModel"),Ust.forEach(t),XZo=r(M0e," (CTRL model)"),M0e.forEach(t),VZo=i(Me),eC=s(Me,"LI",{});var E0e=n(eC);Ofe=s(E0e,"STRONG",{});var Jst=n(Ofe);zZo=r(Jst,"gpt2"),Jst.forEach(t),WZo=r(E0e," \u2014 "),Bq=s(E0e,"A",{href:!0});var Yst=n(Bq);QZo=r(Yst,"TFGPT2LMHeadModel"),Yst.forEach(t),HZo=r(E0e," (OpenAI GPT-2 model)"),E0e.forEach(t),UZo=i(Me),oC=s(Me,"LI",{});var y0e=n(oC);Xfe=s(y0e,"STRONG",{});var Kst=n(Xfe);JZo=r(Kst,"openai-gpt"),Kst.forEach(t),YZo=r(y0e," \u2014 "),xq=s(y0e,"A",{href:!0});var Zst=n(xq);KZo=r(Zst,"TFOpenAIGPTLMHeadModel"),Zst.forEach(t),ZZo=r(y0e," (OpenAI GPT model)"),y0e.forEach(t),eer=i(Me),rC=s(Me,"LI",{});var w0e=n(rC);Vfe=s(w0e,"STRONG",{});var ent=n(Vfe);oer=r(ent,"rembert"),ent.forEach(t),rer=r(w0e," \u2014 "),kq=s(w0e,"A",{href:!0});var ont=n(kq);ter=r(ont,"TFRemBertForCausalLM"),ont.forEach(t),aer=r(w0e," (RemBERT model)"),w0e.forEach(t),ser=i(Me),tC=s(Me,"LI",{});var A0e=n(tC);zfe=s(A0e,"STRONG",{});var rnt=n(zfe);ner=r(rnt,"roberta"),rnt.forEach(t),ler=r(A0e," \u2014 "),Rq=s(A0e,"A",{href:!0});var tnt=n(Rq);ier=r(tnt,"TFRobertaForCausalLM"),tnt.forEach(t),der=r(A0e," (RoBERTa model)"),A0e.forEach(t),cer=i(Me),aC=s(Me,"LI",{});var L0e=n(aC);Wfe=s(L0e,"STRONG",{});var ant=n(Wfe);mer=r(ant,"roformer"),ant.forEach(t),fer=r(L0e," \u2014 "),Sq=s(L0e,"A",{href:!0});var snt=n(Sq);ger=r(snt,"TFRoFormerForCausalLM"),snt.forEach(t),her=r(L0e," (RoFormer model)"),L0e.forEach(t),uer=i(Me),sC=s(Me,"LI",{});var B0e=n(sC);Qfe=s(B0e,"STRONG",{});var nnt=n(Qfe);per=r(nnt,"transfo-xl"),nnt.forEach(t),_er=r(B0e," \u2014 "),Pq=s(B0e,"A",{href:!0});var lnt=n(Pq);ber=r(lnt,"TFTransfoXLLMHeadModel"),lnt.forEach(t),ver=r(B0e," (Transformer-XL model)"),B0e.forEach(t),Ter=i(Me),nC=s(Me,"LI",{});var x0e=n(nC);Hfe=s(x0e,"STRONG",{});var int=n(Hfe);Fer=r(int,"xlm"),int.forEach(t),Cer=r(x0e," \u2014 "),$q=s(x0e,"A",{href:!0});var dnt=n($q);Mer=r(dnt,"TFXLMWithLMHeadModel"),dnt.forEach(t),Eer=r(x0e," (XLM model)"),x0e.forEach(t),yer=i(Me),lC=s(Me,"LI",{});var k0e=n(lC);Ufe=s(k0e,"STRONG",{});var cnt=n(Ufe);wer=r(cnt,"xlnet"),cnt.forEach(t),Aer=r(k0e," \u2014 "),Iq=s(k0e,"A",{href:!0});var mnt=n(Iq);Ler=r(mnt,"TFXLNetLMHeadModel"),mnt.forEach(t),Ber=r(k0e," (XLNet model)"),k0e.forEach(t),Me.forEach(t),xer=i(fa),Jfe=s(fa,"P",{});var fnt=n(Jfe);ker=r(fnt,"Examples:"),fnt.forEach(t),Rer=i(fa),f(pA.$$.fragment,fa),fa.forEach(t),$l.forEach(t),PBe=i(c),cc=s(c,"H2",{class:!0});var Xke=n(cc);iC=s(Xke,"A",{id:!0,class:!0,href:!0});var gnt=n(iC);Yfe=s(gnt,"SPAN",{});var hnt=n(Yfe);f(_A.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),Ser=i(Xke),Kfe=s(Xke,"SPAN",{});var unt=n(Kfe);Per=r(unt,"TFAutoModelForImageClassification"),unt.forEach(t),Xke.forEach(t),$Be=i(c),br=s(c,"DIV",{class:!0});var Dl=n(br);f(bA.$$.fragment,Dl),$er=i(Dl),mc=s(Dl,"P",{});var xz=n(mc);Ier=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zfe=s(xz,"CODE",{});var pnt=n(Zfe);Der=r(pnt,"from_pretrained()"),pnt.forEach(t),jer=r(xz,"class method or the "),ege=s(xz,"CODE",{});var _nt=n(ege);Ner=r(_nt,"from_config()"),_nt.forEach(t),qer=r(xz,`class
method.`),xz.forEach(t),Ger=i(Dl),vA=s(Dl,"P",{});var Vke=n(vA);Oer=r(Vke,"This class cannot be instantiated directly using "),oge=s(Vke,"CODE",{});var bnt=n(oge);Xer=r(bnt,"__init__()"),bnt.forEach(t),Ver=r(Vke," (throws an error)."),Vke.forEach(t),zer=i(Dl),mt=s(Dl,"DIV",{class:!0});var jl=n(mt);f(TA.$$.fragment,jl),Wer=i(jl),rge=s(jl,"P",{});var vnt=n(rge);Qer=r(vnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vnt.forEach(t),Her=i(jl),fc=s(jl,"P",{});var kz=n(fc);Uer=r(kz,`Note:
Loading a model from its configuration file does `),tge=s(kz,"STRONG",{});var Tnt=n(tge);Jer=r(Tnt,"not"),Tnt.forEach(t),Yer=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),age=s(kz,"CODE",{});var Fnt=n(age);Ker=r(Fnt,"from_pretrained()"),Fnt.forEach(t),Zer=r(kz,"to load the model weights."),kz.forEach(t),eor=i(jl),sge=s(jl,"P",{});var Cnt=n(sge);oor=r(Cnt,"Examples:"),Cnt.forEach(t),ror=i(jl),f(FA.$$.fragment,jl),jl.forEach(t),tor=i(Dl),po=s(Dl,"DIV",{class:!0});var ga=n(po);f(CA.$$.fragment,ga),aor=i(ga),nge=s(ga,"P",{});var Mnt=n(nge);sor=r(Mnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mnt.forEach(t),nor=i(ga),fs=s(ga,"P",{});var Z3=n(fs);lor=r(Z3,"The model class to instantiate is selected based on the "),lge=s(Z3,"CODE",{});var Ent=n(lge);ior=r(Ent,"model_type"),Ent.forEach(t),dor=r(Z3,` property of the config object (either
passed as an argument or loaded from `),ige=s(Z3,"CODE",{});var ynt=n(ige);cor=r(ynt,"pretrained_model_name_or_path"),ynt.forEach(t),mor=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=s(Z3,"CODE",{});var wnt=n(dge);gor=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),hor=r(Z3,":"),Z3.forEach(t),uor=i(ga),MA=s(ga,"UL",{});var zke=n(MA);dC=s(zke,"LI",{});var R0e=n(dC);cge=s(R0e,"STRONG",{});var Ant=n(cge);por=r(Ant,"convnext"),Ant.forEach(t),_or=r(R0e," \u2014 "),Dq=s(R0e,"A",{href:!0});var Lnt=n(Dq);bor=r(Lnt,"TFConvNextForImageClassification"),Lnt.forEach(t),vor=r(R0e," (ConvNext model)"),R0e.forEach(t),Tor=i(zke),cC=s(zke,"LI",{});var S0e=n(cC);mge=s(S0e,"STRONG",{});var Bnt=n(mge);For=r(Bnt,"vit"),Bnt.forEach(t),Cor=r(S0e," \u2014 "),jq=s(S0e,"A",{href:!0});var xnt=n(jq);Mor=r(xnt,"TFViTForImageClassification"),xnt.forEach(t),Eor=r(S0e," (ViT model)"),S0e.forEach(t),zke.forEach(t),yor=i(ga),fge=s(ga,"P",{});var knt=n(fge);wor=r(knt,"Examples:"),knt.forEach(t),Aor=i(ga),f(EA.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),IBe=i(c),gc=s(c,"H2",{class:!0});var Wke=n(gc);mC=s(Wke,"A",{id:!0,class:!0,href:!0});var Rnt=n(mC);gge=s(Rnt,"SPAN",{});var Snt=n(gge);f(yA.$$.fragment,Snt),Snt.forEach(t),Rnt.forEach(t),Lor=i(Wke),hge=s(Wke,"SPAN",{});var Pnt=n(hge);Bor=r(Pnt,"TFAutoModelForMaskedLM"),Pnt.forEach(t),Wke.forEach(t),DBe=i(c),vr=s(c,"DIV",{class:!0});var Nl=n(vr);f(wA.$$.fragment,Nl),xor=i(Nl),hc=s(Nl,"P",{});var Rz=n(hc);kor=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uge=s(Rz,"CODE",{});var $nt=n(uge);Ror=r($nt,"from_pretrained()"),$nt.forEach(t),Sor=r(Rz,"class method or the "),pge=s(Rz,"CODE",{});var Int=n(pge);Por=r(Int,"from_config()"),Int.forEach(t),$or=r(Rz,`class
method.`),Rz.forEach(t),Ior=i(Nl),AA=s(Nl,"P",{});var Qke=n(AA);Dor=r(Qke,"This class cannot be instantiated directly using "),_ge=s(Qke,"CODE",{});var Dnt=n(_ge);jor=r(Dnt,"__init__()"),Dnt.forEach(t),Nor=r(Qke," (throws an error)."),Qke.forEach(t),qor=i(Nl),ft=s(Nl,"DIV",{class:!0});var ql=n(ft);f(LA.$$.fragment,ql),Gor=i(ql),bge=s(ql,"P",{});var jnt=n(bge);Oor=r(jnt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jnt.forEach(t),Xor=i(ql),uc=s(ql,"P",{});var Sz=n(uc);Vor=r(Sz,`Note:
Loading a model from its configuration file does `),vge=s(Sz,"STRONG",{});var Nnt=n(vge);zor=r(Nnt,"not"),Nnt.forEach(t),Wor=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tge=s(Sz,"CODE",{});var qnt=n(Tge);Qor=r(qnt,"from_pretrained()"),qnt.forEach(t),Hor=r(Sz,"to load the model weights."),Sz.forEach(t),Uor=i(ql),Fge=s(ql,"P",{});var Gnt=n(Fge);Jor=r(Gnt,"Examples:"),Gnt.forEach(t),Yor=i(ql),f(BA.$$.fragment,ql),ql.forEach(t),Kor=i(Nl),_o=s(Nl,"DIV",{class:!0});var ha=n(_o);f(xA.$$.fragment,ha),Zor=i(ha),Cge=s(ha,"P",{});var Ont=n(Cge);err=r(Ont,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ont.forEach(t),orr=i(ha),gs=s(ha,"P",{});var e5=n(gs);rrr=r(e5,"The model class to instantiate is selected based on the "),Mge=s(e5,"CODE",{});var Xnt=n(Mge);trr=r(Xnt,"model_type"),Xnt.forEach(t),arr=r(e5,` property of the config object (either
passed as an argument or loaded from `),Ege=s(e5,"CODE",{});var Vnt=n(Ege);srr=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),nrr=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=s(e5,"CODE",{});var znt=n(yge);lrr=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),irr=r(e5,":"),e5.forEach(t),drr=i(ha),Y=s(ha,"UL",{});var ee=n(Y);fC=s(ee,"LI",{});var P0e=n(fC);wge=s(P0e,"STRONG",{});var Wnt=n(wge);crr=r(Wnt,"albert"),Wnt.forEach(t),mrr=r(P0e," \u2014 "),Nq=s(P0e,"A",{href:!0});var Qnt=n(Nq);frr=r(Qnt,"TFAlbertForMaskedLM"),Qnt.forEach(t),grr=r(P0e," (ALBERT model)"),P0e.forEach(t),hrr=i(ee),gC=s(ee,"LI",{});var $0e=n(gC);Age=s($0e,"STRONG",{});var Hnt=n(Age);urr=r(Hnt,"bert"),Hnt.forEach(t),prr=r($0e," \u2014 "),qq=s($0e,"A",{href:!0});var Unt=n(qq);_rr=r(Unt,"TFBertForMaskedLM"),Unt.forEach(t),brr=r($0e," (BERT model)"),$0e.forEach(t),vrr=i(ee),hC=s(ee,"LI",{});var I0e=n(hC);Lge=s(I0e,"STRONG",{});var Jnt=n(Lge);Trr=r(Jnt,"camembert"),Jnt.forEach(t),Frr=r(I0e," \u2014 "),Gq=s(I0e,"A",{href:!0});var Ynt=n(Gq);Crr=r(Ynt,"TFCamembertForMaskedLM"),Ynt.forEach(t),Mrr=r(I0e," (CamemBERT model)"),I0e.forEach(t),Err=i(ee),uC=s(ee,"LI",{});var D0e=n(uC);Bge=s(D0e,"STRONG",{});var Knt=n(Bge);yrr=r(Knt,"convbert"),Knt.forEach(t),wrr=r(D0e," \u2014 "),Oq=s(D0e,"A",{href:!0});var Znt=n(Oq);Arr=r(Znt,"TFConvBertForMaskedLM"),Znt.forEach(t),Lrr=r(D0e," (ConvBERT model)"),D0e.forEach(t),Brr=i(ee),pC=s(ee,"LI",{});var j0e=n(pC);xge=s(j0e,"STRONG",{});var elt=n(xge);xrr=r(elt,"deberta"),elt.forEach(t),krr=r(j0e," \u2014 "),Xq=s(j0e,"A",{href:!0});var olt=n(Xq);Rrr=r(olt,"TFDebertaForMaskedLM"),olt.forEach(t),Srr=r(j0e," (DeBERTa model)"),j0e.forEach(t),Prr=i(ee),_C=s(ee,"LI",{});var N0e=n(_C);kge=s(N0e,"STRONG",{});var rlt=n(kge);$rr=r(rlt,"deberta-v2"),rlt.forEach(t),Irr=r(N0e," \u2014 "),Vq=s(N0e,"A",{href:!0});var tlt=n(Vq);Drr=r(tlt,"TFDebertaV2ForMaskedLM"),tlt.forEach(t),jrr=r(N0e," (DeBERTa-v2 model)"),N0e.forEach(t),Nrr=i(ee),bC=s(ee,"LI",{});var q0e=n(bC);Rge=s(q0e,"STRONG",{});var alt=n(Rge);qrr=r(alt,"distilbert"),alt.forEach(t),Grr=r(q0e," \u2014 "),zq=s(q0e,"A",{href:!0});var slt=n(zq);Orr=r(slt,"TFDistilBertForMaskedLM"),slt.forEach(t),Xrr=r(q0e," (DistilBERT model)"),q0e.forEach(t),Vrr=i(ee),vC=s(ee,"LI",{});var G0e=n(vC);Sge=s(G0e,"STRONG",{});var nlt=n(Sge);zrr=r(nlt,"electra"),nlt.forEach(t),Wrr=r(G0e," \u2014 "),Wq=s(G0e,"A",{href:!0});var llt=n(Wq);Qrr=r(llt,"TFElectraForMaskedLM"),llt.forEach(t),Hrr=r(G0e," (ELECTRA model)"),G0e.forEach(t),Urr=i(ee),TC=s(ee,"LI",{});var O0e=n(TC);Pge=s(O0e,"STRONG",{});var ilt=n(Pge);Jrr=r(ilt,"flaubert"),ilt.forEach(t),Yrr=r(O0e," \u2014 "),Qq=s(O0e,"A",{href:!0});var dlt=n(Qq);Krr=r(dlt,"TFFlaubertWithLMHeadModel"),dlt.forEach(t),Zrr=r(O0e," (FlauBERT model)"),O0e.forEach(t),etr=i(ee),FC=s(ee,"LI",{});var X0e=n(FC);$ge=s(X0e,"STRONG",{});var clt=n($ge);otr=r(clt,"funnel"),clt.forEach(t),rtr=r(X0e," \u2014 "),Hq=s(X0e,"A",{href:!0});var mlt=n(Hq);ttr=r(mlt,"TFFunnelForMaskedLM"),mlt.forEach(t),atr=r(X0e," (Funnel Transformer model)"),X0e.forEach(t),str=i(ee),CC=s(ee,"LI",{});var V0e=n(CC);Ige=s(V0e,"STRONG",{});var flt=n(Ige);ntr=r(flt,"layoutlm"),flt.forEach(t),ltr=r(V0e," \u2014 "),Uq=s(V0e,"A",{href:!0});var glt=n(Uq);itr=r(glt,"TFLayoutLMForMaskedLM"),glt.forEach(t),dtr=r(V0e," (LayoutLM model)"),V0e.forEach(t),ctr=i(ee),MC=s(ee,"LI",{});var z0e=n(MC);Dge=s(z0e,"STRONG",{});var hlt=n(Dge);mtr=r(hlt,"longformer"),hlt.forEach(t),ftr=r(z0e," \u2014 "),Jq=s(z0e,"A",{href:!0});var ult=n(Jq);gtr=r(ult,"TFLongformerForMaskedLM"),ult.forEach(t),htr=r(z0e," (Longformer model)"),z0e.forEach(t),utr=i(ee),EC=s(ee,"LI",{});var W0e=n(EC);jge=s(W0e,"STRONG",{});var plt=n(jge);ptr=r(plt,"mobilebert"),plt.forEach(t),_tr=r(W0e," \u2014 "),Yq=s(W0e,"A",{href:!0});var _lt=n(Yq);btr=r(_lt,"TFMobileBertForMaskedLM"),_lt.forEach(t),vtr=r(W0e," (MobileBERT model)"),W0e.forEach(t),Ttr=i(ee),yC=s(ee,"LI",{});var Q0e=n(yC);Nge=s(Q0e,"STRONG",{});var blt=n(Nge);Ftr=r(blt,"mpnet"),blt.forEach(t),Ctr=r(Q0e," \u2014 "),Kq=s(Q0e,"A",{href:!0});var vlt=n(Kq);Mtr=r(vlt,"TFMPNetForMaskedLM"),vlt.forEach(t),Etr=r(Q0e," (MPNet model)"),Q0e.forEach(t),ytr=i(ee),wC=s(ee,"LI",{});var H0e=n(wC);qge=s(H0e,"STRONG",{});var Tlt=n(qge);wtr=r(Tlt,"rembert"),Tlt.forEach(t),Atr=r(H0e," \u2014 "),Zq=s(H0e,"A",{href:!0});var Flt=n(Zq);Ltr=r(Flt,"TFRemBertForMaskedLM"),Flt.forEach(t),Btr=r(H0e," (RemBERT model)"),H0e.forEach(t),xtr=i(ee),AC=s(ee,"LI",{});var U0e=n(AC);Gge=s(U0e,"STRONG",{});var Clt=n(Gge);ktr=r(Clt,"roberta"),Clt.forEach(t),Rtr=r(U0e," \u2014 "),eG=s(U0e,"A",{href:!0});var Mlt=n(eG);Str=r(Mlt,"TFRobertaForMaskedLM"),Mlt.forEach(t),Ptr=r(U0e," (RoBERTa model)"),U0e.forEach(t),$tr=i(ee),LC=s(ee,"LI",{});var J0e=n(LC);Oge=s(J0e,"STRONG",{});var Elt=n(Oge);Itr=r(Elt,"roformer"),Elt.forEach(t),Dtr=r(J0e," \u2014 "),oG=s(J0e,"A",{href:!0});var ylt=n(oG);jtr=r(ylt,"TFRoFormerForMaskedLM"),ylt.forEach(t),Ntr=r(J0e," (RoFormer model)"),J0e.forEach(t),qtr=i(ee),BC=s(ee,"LI",{});var Y0e=n(BC);Xge=s(Y0e,"STRONG",{});var wlt=n(Xge);Gtr=r(wlt,"tapas"),wlt.forEach(t),Otr=r(Y0e," \u2014 "),rG=s(Y0e,"A",{href:!0});var Alt=n(rG);Xtr=r(Alt,"TFTapasForMaskedLM"),Alt.forEach(t),Vtr=r(Y0e," (TAPAS model)"),Y0e.forEach(t),ztr=i(ee),xC=s(ee,"LI",{});var K0e=n(xC);Vge=s(K0e,"STRONG",{});var Llt=n(Vge);Wtr=r(Llt,"xlm"),Llt.forEach(t),Qtr=r(K0e," \u2014 "),tG=s(K0e,"A",{href:!0});var Blt=n(tG);Htr=r(Blt,"TFXLMWithLMHeadModel"),Blt.forEach(t),Utr=r(K0e," (XLM model)"),K0e.forEach(t),Jtr=i(ee),kC=s(ee,"LI",{});var Z0e=n(kC);zge=s(Z0e,"STRONG",{});var xlt=n(zge);Ytr=r(xlt,"xlm-roberta"),xlt.forEach(t),Ktr=r(Z0e," \u2014 "),aG=s(Z0e,"A",{href:!0});var klt=n(aG);Ztr=r(klt,"TFXLMRobertaForMaskedLM"),klt.forEach(t),ear=r(Z0e," (XLM-RoBERTa model)"),Z0e.forEach(t),ee.forEach(t),oar=i(ha),Wge=s(ha,"P",{});var Rlt=n(Wge);rar=r(Rlt,"Examples:"),Rlt.forEach(t),tar=i(ha),f(kA.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),jBe=i(c),pc=s(c,"H2",{class:!0});var Hke=n(pc);RC=s(Hke,"A",{id:!0,class:!0,href:!0});var Slt=n(RC);Qge=s(Slt,"SPAN",{});var Plt=n(Qge);f(RA.$$.fragment,Plt),Plt.forEach(t),Slt.forEach(t),aar=i(Hke),Hge=s(Hke,"SPAN",{});var $lt=n(Hge);sar=r($lt,"TFAutoModelForSeq2SeqLM"),$lt.forEach(t),Hke.forEach(t),NBe=i(c),Tr=s(c,"DIV",{class:!0});var Gl=n(Tr);f(SA.$$.fragment,Gl),nar=i(Gl),_c=s(Gl,"P",{});var Pz=n(_c);lar=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uge=s(Pz,"CODE",{});var Ilt=n(Uge);iar=r(Ilt,"from_pretrained()"),Ilt.forEach(t),dar=r(Pz,"class method or the "),Jge=s(Pz,"CODE",{});var Dlt=n(Jge);car=r(Dlt,"from_config()"),Dlt.forEach(t),mar=r(Pz,`class
method.`),Pz.forEach(t),far=i(Gl),PA=s(Gl,"P",{});var Uke=n(PA);gar=r(Uke,"This class cannot be instantiated directly using "),Yge=s(Uke,"CODE",{});var jlt=n(Yge);har=r(jlt,"__init__()"),jlt.forEach(t),uar=r(Uke," (throws an error)."),Uke.forEach(t),par=i(Gl),gt=s(Gl,"DIV",{class:!0});var Ol=n(gt);f($A.$$.fragment,Ol),_ar=i(Ol),Kge=s(Ol,"P",{});var Nlt=n(Kge);bar=r(Nlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nlt.forEach(t),Tar=i(Ol),bc=s(Ol,"P",{});var $z=n(bc);Far=r($z,`Note:
Loading a model from its configuration file does `),Zge=s($z,"STRONG",{});var qlt=n(Zge);Car=r(qlt,"not"),qlt.forEach(t),Mar=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=s($z,"CODE",{});var Glt=n(ehe);Ear=r(Glt,"from_pretrained()"),Glt.forEach(t),yar=r($z,"to load the model weights."),$z.forEach(t),war=i(Ol),ohe=s(Ol,"P",{});var Olt=n(ohe);Aar=r(Olt,"Examples:"),Olt.forEach(t),Lar=i(Ol),f(IA.$$.fragment,Ol),Ol.forEach(t),Bar=i(Gl),bo=s(Gl,"DIV",{class:!0});var ua=n(bo);f(DA.$$.fragment,ua),xar=i(ua),rhe=s(ua,"P",{});var Xlt=n(rhe);kar=r(Xlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xlt.forEach(t),Rar=i(ua),hs=s(ua,"P",{});var o5=n(hs);Sar=r(o5,"The model class to instantiate is selected based on the "),the=s(o5,"CODE",{});var Vlt=n(the);Par=r(Vlt,"model_type"),Vlt.forEach(t),$ar=r(o5,` property of the config object (either
passed as an argument or loaded from `),ahe=s(o5,"CODE",{});var zlt=n(ahe);Iar=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Dar=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=s(o5,"CODE",{});var Wlt=n(she);jar=r(Wlt,"pretrained_model_name_or_path"),Wlt.forEach(t),Nar=r(o5,":"),o5.forEach(t),qar=i(ua),ue=s(ua,"UL",{});var Ee=n(ue);SC=s(Ee,"LI",{});var eLe=n(SC);nhe=s(eLe,"STRONG",{});var Qlt=n(nhe);Gar=r(Qlt,"bart"),Qlt.forEach(t),Oar=r(eLe," \u2014 "),sG=s(eLe,"A",{href:!0});var Hlt=n(sG);Xar=r(Hlt,"TFBartForConditionalGeneration"),Hlt.forEach(t),Var=r(eLe," (BART model)"),eLe.forEach(t),zar=i(Ee),PC=s(Ee,"LI",{});var oLe=n(PC);lhe=s(oLe,"STRONG",{});var Ult=n(lhe);War=r(Ult,"blenderbot"),Ult.forEach(t),Qar=r(oLe," \u2014 "),nG=s(oLe,"A",{href:!0});var Jlt=n(nG);Har=r(Jlt,"TFBlenderbotForConditionalGeneration"),Jlt.forEach(t),Uar=r(oLe," (Blenderbot model)"),oLe.forEach(t),Jar=i(Ee),$C=s(Ee,"LI",{});var rLe=n($C);ihe=s(rLe,"STRONG",{});var Ylt=n(ihe);Yar=r(Ylt,"blenderbot-small"),Ylt.forEach(t),Kar=r(rLe," \u2014 "),lG=s(rLe,"A",{href:!0});var Klt=n(lG);Zar=r(Klt,"TFBlenderbotSmallForConditionalGeneration"),Klt.forEach(t),esr=r(rLe," (BlenderbotSmall model)"),rLe.forEach(t),osr=i(Ee),IC=s(Ee,"LI",{});var tLe=n(IC);dhe=s(tLe,"STRONG",{});var Zlt=n(dhe);rsr=r(Zlt,"encoder-decoder"),Zlt.forEach(t),tsr=r(tLe," \u2014 "),iG=s(tLe,"A",{href:!0});var eit=n(iG);asr=r(eit,"TFEncoderDecoderModel"),eit.forEach(t),ssr=r(tLe," (Encoder decoder model)"),tLe.forEach(t),nsr=i(Ee),DC=s(Ee,"LI",{});var aLe=n(DC);che=s(aLe,"STRONG",{});var oit=n(che);lsr=r(oit,"led"),oit.forEach(t),isr=r(aLe," \u2014 "),dG=s(aLe,"A",{href:!0});var rit=n(dG);dsr=r(rit,"TFLEDForConditionalGeneration"),rit.forEach(t),csr=r(aLe," (LED model)"),aLe.forEach(t),msr=i(Ee),jC=s(Ee,"LI",{});var sLe=n(jC);mhe=s(sLe,"STRONG",{});var tit=n(mhe);fsr=r(tit,"marian"),tit.forEach(t),gsr=r(sLe," \u2014 "),cG=s(sLe,"A",{href:!0});var ait=n(cG);hsr=r(ait,"TFMarianMTModel"),ait.forEach(t),usr=r(sLe," (Marian model)"),sLe.forEach(t),psr=i(Ee),NC=s(Ee,"LI",{});var nLe=n(NC);fhe=s(nLe,"STRONG",{});var sit=n(fhe);_sr=r(sit,"mbart"),sit.forEach(t),bsr=r(nLe," \u2014 "),mG=s(nLe,"A",{href:!0});var nit=n(mG);vsr=r(nit,"TFMBartForConditionalGeneration"),nit.forEach(t),Tsr=r(nLe," (mBART model)"),nLe.forEach(t),Fsr=i(Ee),qC=s(Ee,"LI",{});var lLe=n(qC);ghe=s(lLe,"STRONG",{});var lit=n(ghe);Csr=r(lit,"mt5"),lit.forEach(t),Msr=r(lLe," \u2014 "),fG=s(lLe,"A",{href:!0});var iit=n(fG);Esr=r(iit,"TFMT5ForConditionalGeneration"),iit.forEach(t),ysr=r(lLe," (mT5 model)"),lLe.forEach(t),wsr=i(Ee),GC=s(Ee,"LI",{});var iLe=n(GC);hhe=s(iLe,"STRONG",{});var dit=n(hhe);Asr=r(dit,"pegasus"),dit.forEach(t),Lsr=r(iLe," \u2014 "),gG=s(iLe,"A",{href:!0});var cit=n(gG);Bsr=r(cit,"TFPegasusForConditionalGeneration"),cit.forEach(t),xsr=r(iLe," (Pegasus model)"),iLe.forEach(t),ksr=i(Ee),OC=s(Ee,"LI",{});var dLe=n(OC);uhe=s(dLe,"STRONG",{});var mit=n(uhe);Rsr=r(mit,"t5"),mit.forEach(t),Ssr=r(dLe," \u2014 "),hG=s(dLe,"A",{href:!0});var fit=n(hG);Psr=r(fit,"TFT5ForConditionalGeneration"),fit.forEach(t),$sr=r(dLe," (T5 model)"),dLe.forEach(t),Ee.forEach(t),Isr=i(ua),phe=s(ua,"P",{});var git=n(phe);Dsr=r(git,"Examples:"),git.forEach(t),jsr=i(ua),f(jA.$$.fragment,ua),ua.forEach(t),Gl.forEach(t),qBe=i(c),vc=s(c,"H2",{class:!0});var Jke=n(vc);XC=s(Jke,"A",{id:!0,class:!0,href:!0});var hit=n(XC);_he=s(hit,"SPAN",{});var uit=n(_he);f(NA.$$.fragment,uit),uit.forEach(t),hit.forEach(t),Nsr=i(Jke),bhe=s(Jke,"SPAN",{});var pit=n(bhe);qsr=r(pit,"TFAutoModelForSequenceClassification"),pit.forEach(t),Jke.forEach(t),GBe=i(c),Fr=s(c,"DIV",{class:!0});var Xl=n(Fr);f(qA.$$.fragment,Xl),Gsr=i(Xl),Tc=s(Xl,"P",{});var Iz=n(Tc);Osr=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vhe=s(Iz,"CODE",{});var _it=n(vhe);Xsr=r(_it,"from_pretrained()"),_it.forEach(t),Vsr=r(Iz,"class method or the "),The=s(Iz,"CODE",{});var bit=n(The);zsr=r(bit,"from_config()"),bit.forEach(t),Wsr=r(Iz,`class
method.`),Iz.forEach(t),Qsr=i(Xl),GA=s(Xl,"P",{});var Yke=n(GA);Hsr=r(Yke,"This class cannot be instantiated directly using "),Fhe=s(Yke,"CODE",{});var vit=n(Fhe);Usr=r(vit,"__init__()"),vit.forEach(t),Jsr=r(Yke," (throws an error)."),Yke.forEach(t),Ysr=i(Xl),ht=s(Xl,"DIV",{class:!0});var Vl=n(ht);f(OA.$$.fragment,Vl),Ksr=i(Vl),Che=s(Vl,"P",{});var Tit=n(Che);Zsr=r(Tit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tit.forEach(t),enr=i(Vl),Fc=s(Vl,"P",{});var Dz=n(Fc);onr=r(Dz,`Note:
Loading a model from its configuration file does `),Mhe=s(Dz,"STRONG",{});var Fit=n(Mhe);rnr=r(Fit,"not"),Fit.forEach(t),tnr=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=s(Dz,"CODE",{});var Cit=n(Ehe);anr=r(Cit,"from_pretrained()"),Cit.forEach(t),snr=r(Dz,"to load the model weights."),Dz.forEach(t),nnr=i(Vl),yhe=s(Vl,"P",{});var Mit=n(yhe);lnr=r(Mit,"Examples:"),Mit.forEach(t),inr=i(Vl),f(XA.$$.fragment,Vl),Vl.forEach(t),dnr=i(Xl),vo=s(Xl,"DIV",{class:!0});var pa=n(vo);f(VA.$$.fragment,pa),cnr=i(pa),whe=s(pa,"P",{});var Eit=n(whe);mnr=r(Eit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eit.forEach(t),fnr=i(pa),us=s(pa,"P",{});var r5=n(us);gnr=r(r5,"The model class to instantiate is selected based on the "),Ahe=s(r5,"CODE",{});var yit=n(Ahe);hnr=r(yit,"model_type"),yit.forEach(t),unr=r(r5,` property of the config object (either
passed as an argument or loaded from `),Lhe=s(r5,"CODE",{});var wit=n(Lhe);pnr=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),_nr=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=s(r5,"CODE",{});var Ait=n(Bhe);bnr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),vnr=r(r5,":"),r5.forEach(t),Tnr=i(pa),X=s(pa,"UL",{});var W=n(X);VC=s(W,"LI",{});var cLe=n(VC);xhe=s(cLe,"STRONG",{});var Lit=n(xhe);Fnr=r(Lit,"albert"),Lit.forEach(t),Cnr=r(cLe," \u2014 "),uG=s(cLe,"A",{href:!0});var Bit=n(uG);Mnr=r(Bit,"TFAlbertForSequenceClassification"),Bit.forEach(t),Enr=r(cLe," (ALBERT model)"),cLe.forEach(t),ynr=i(W),zC=s(W,"LI",{});var mLe=n(zC);khe=s(mLe,"STRONG",{});var xit=n(khe);wnr=r(xit,"bert"),xit.forEach(t),Anr=r(mLe," \u2014 "),pG=s(mLe,"A",{href:!0});var kit=n(pG);Lnr=r(kit,"TFBertForSequenceClassification"),kit.forEach(t),Bnr=r(mLe," (BERT model)"),mLe.forEach(t),xnr=i(W),WC=s(W,"LI",{});var fLe=n(WC);Rhe=s(fLe,"STRONG",{});var Rit=n(Rhe);knr=r(Rit,"camembert"),Rit.forEach(t),Rnr=r(fLe," \u2014 "),_G=s(fLe,"A",{href:!0});var Sit=n(_G);Snr=r(Sit,"TFCamembertForSequenceClassification"),Sit.forEach(t),Pnr=r(fLe," (CamemBERT model)"),fLe.forEach(t),$nr=i(W),QC=s(W,"LI",{});var gLe=n(QC);She=s(gLe,"STRONG",{});var Pit=n(She);Inr=r(Pit,"convbert"),Pit.forEach(t),Dnr=r(gLe," \u2014 "),bG=s(gLe,"A",{href:!0});var $it=n(bG);jnr=r($it,"TFConvBertForSequenceClassification"),$it.forEach(t),Nnr=r(gLe," (ConvBERT model)"),gLe.forEach(t),qnr=i(W),HC=s(W,"LI",{});var hLe=n(HC);Phe=s(hLe,"STRONG",{});var Iit=n(Phe);Gnr=r(Iit,"ctrl"),Iit.forEach(t),Onr=r(hLe," \u2014 "),vG=s(hLe,"A",{href:!0});var Dit=n(vG);Xnr=r(Dit,"TFCTRLForSequenceClassification"),Dit.forEach(t),Vnr=r(hLe," (CTRL model)"),hLe.forEach(t),znr=i(W),UC=s(W,"LI",{});var uLe=n(UC);$he=s(uLe,"STRONG",{});var jit=n($he);Wnr=r(jit,"deberta"),jit.forEach(t),Qnr=r(uLe," \u2014 "),TG=s(uLe,"A",{href:!0});var Nit=n(TG);Hnr=r(Nit,"TFDebertaForSequenceClassification"),Nit.forEach(t),Unr=r(uLe," (DeBERTa model)"),uLe.forEach(t),Jnr=i(W),JC=s(W,"LI",{});var pLe=n(JC);Ihe=s(pLe,"STRONG",{});var qit=n(Ihe);Ynr=r(qit,"deberta-v2"),qit.forEach(t),Knr=r(pLe," \u2014 "),FG=s(pLe,"A",{href:!0});var Git=n(FG);Znr=r(Git,"TFDebertaV2ForSequenceClassification"),Git.forEach(t),elr=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),olr=i(W),YC=s(W,"LI",{});var _Le=n(YC);Dhe=s(_Le,"STRONG",{});var Oit=n(Dhe);rlr=r(Oit,"distilbert"),Oit.forEach(t),tlr=r(_Le," \u2014 "),CG=s(_Le,"A",{href:!0});var Xit=n(CG);alr=r(Xit,"TFDistilBertForSequenceClassification"),Xit.forEach(t),slr=r(_Le," (DistilBERT model)"),_Le.forEach(t),nlr=i(W),KC=s(W,"LI",{});var bLe=n(KC);jhe=s(bLe,"STRONG",{});var Vit=n(jhe);llr=r(Vit,"electra"),Vit.forEach(t),ilr=r(bLe," \u2014 "),MG=s(bLe,"A",{href:!0});var zit=n(MG);dlr=r(zit,"TFElectraForSequenceClassification"),zit.forEach(t),clr=r(bLe," (ELECTRA model)"),bLe.forEach(t),mlr=i(W),ZC=s(W,"LI",{});var vLe=n(ZC);Nhe=s(vLe,"STRONG",{});var Wit=n(Nhe);flr=r(Wit,"flaubert"),Wit.forEach(t),glr=r(vLe," \u2014 "),EG=s(vLe,"A",{href:!0});var Qit=n(EG);hlr=r(Qit,"TFFlaubertForSequenceClassification"),Qit.forEach(t),ulr=r(vLe," (FlauBERT model)"),vLe.forEach(t),plr=i(W),e4=s(W,"LI",{});var TLe=n(e4);qhe=s(TLe,"STRONG",{});var Hit=n(qhe);_lr=r(Hit,"funnel"),Hit.forEach(t),blr=r(TLe," \u2014 "),yG=s(TLe,"A",{href:!0});var Uit=n(yG);vlr=r(Uit,"TFFunnelForSequenceClassification"),Uit.forEach(t),Tlr=r(TLe," (Funnel Transformer model)"),TLe.forEach(t),Flr=i(W),o4=s(W,"LI",{});var FLe=n(o4);Ghe=s(FLe,"STRONG",{});var Jit=n(Ghe);Clr=r(Jit,"gpt2"),Jit.forEach(t),Mlr=r(FLe," \u2014 "),wG=s(FLe,"A",{href:!0});var Yit=n(wG);Elr=r(Yit,"TFGPT2ForSequenceClassification"),Yit.forEach(t),ylr=r(FLe," (OpenAI GPT-2 model)"),FLe.forEach(t),wlr=i(W),r4=s(W,"LI",{});var CLe=n(r4);Ohe=s(CLe,"STRONG",{});var Kit=n(Ohe);Alr=r(Kit,"layoutlm"),Kit.forEach(t),Llr=r(CLe," \u2014 "),AG=s(CLe,"A",{href:!0});var Zit=n(AG);Blr=r(Zit,"TFLayoutLMForSequenceClassification"),Zit.forEach(t),xlr=r(CLe," (LayoutLM model)"),CLe.forEach(t),klr=i(W),t4=s(W,"LI",{});var MLe=n(t4);Xhe=s(MLe,"STRONG",{});var edt=n(Xhe);Rlr=r(edt,"longformer"),edt.forEach(t),Slr=r(MLe," \u2014 "),LG=s(MLe,"A",{href:!0});var odt=n(LG);Plr=r(odt,"TFLongformerForSequenceClassification"),odt.forEach(t),$lr=r(MLe," (Longformer model)"),MLe.forEach(t),Ilr=i(W),a4=s(W,"LI",{});var ELe=n(a4);Vhe=s(ELe,"STRONG",{});var rdt=n(Vhe);Dlr=r(rdt,"mobilebert"),rdt.forEach(t),jlr=r(ELe," \u2014 "),BG=s(ELe,"A",{href:!0});var tdt=n(BG);Nlr=r(tdt,"TFMobileBertForSequenceClassification"),tdt.forEach(t),qlr=r(ELe," (MobileBERT model)"),ELe.forEach(t),Glr=i(W),s4=s(W,"LI",{});var yLe=n(s4);zhe=s(yLe,"STRONG",{});var adt=n(zhe);Olr=r(adt,"mpnet"),adt.forEach(t),Xlr=r(yLe," \u2014 "),xG=s(yLe,"A",{href:!0});var sdt=n(xG);Vlr=r(sdt,"TFMPNetForSequenceClassification"),sdt.forEach(t),zlr=r(yLe," (MPNet model)"),yLe.forEach(t),Wlr=i(W),n4=s(W,"LI",{});var wLe=n(n4);Whe=s(wLe,"STRONG",{});var ndt=n(Whe);Qlr=r(ndt,"openai-gpt"),ndt.forEach(t),Hlr=r(wLe," \u2014 "),kG=s(wLe,"A",{href:!0});var ldt=n(kG);Ulr=r(ldt,"TFOpenAIGPTForSequenceClassification"),ldt.forEach(t),Jlr=r(wLe," (OpenAI GPT model)"),wLe.forEach(t),Ylr=i(W),l4=s(W,"LI",{});var ALe=n(l4);Qhe=s(ALe,"STRONG",{});var idt=n(Qhe);Klr=r(idt,"rembert"),idt.forEach(t),Zlr=r(ALe," \u2014 "),RG=s(ALe,"A",{href:!0});var ddt=n(RG);eir=r(ddt,"TFRemBertForSequenceClassification"),ddt.forEach(t),oir=r(ALe," (RemBERT model)"),ALe.forEach(t),rir=i(W),i4=s(W,"LI",{});var LLe=n(i4);Hhe=s(LLe,"STRONG",{});var cdt=n(Hhe);tir=r(cdt,"roberta"),cdt.forEach(t),air=r(LLe," \u2014 "),SG=s(LLe,"A",{href:!0});var mdt=n(SG);sir=r(mdt,"TFRobertaForSequenceClassification"),mdt.forEach(t),nir=r(LLe," (RoBERTa model)"),LLe.forEach(t),lir=i(W),d4=s(W,"LI",{});var BLe=n(d4);Uhe=s(BLe,"STRONG",{});var fdt=n(Uhe);iir=r(fdt,"roformer"),fdt.forEach(t),dir=r(BLe," \u2014 "),PG=s(BLe,"A",{href:!0});var gdt=n(PG);cir=r(gdt,"TFRoFormerForSequenceClassification"),gdt.forEach(t),mir=r(BLe," (RoFormer model)"),BLe.forEach(t),fir=i(W),c4=s(W,"LI",{});var xLe=n(c4);Jhe=s(xLe,"STRONG",{});var hdt=n(Jhe);gir=r(hdt,"tapas"),hdt.forEach(t),hir=r(xLe," \u2014 "),$G=s(xLe,"A",{href:!0});var udt=n($G);uir=r(udt,"TFTapasForSequenceClassification"),udt.forEach(t),pir=r(xLe," (TAPAS model)"),xLe.forEach(t),_ir=i(W),m4=s(W,"LI",{});var kLe=n(m4);Yhe=s(kLe,"STRONG",{});var pdt=n(Yhe);bir=r(pdt,"transfo-xl"),pdt.forEach(t),vir=r(kLe," \u2014 "),IG=s(kLe,"A",{href:!0});var _dt=n(IG);Tir=r(_dt,"TFTransfoXLForSequenceClassification"),_dt.forEach(t),Fir=r(kLe," (Transformer-XL model)"),kLe.forEach(t),Cir=i(W),f4=s(W,"LI",{});var RLe=n(f4);Khe=s(RLe,"STRONG",{});var bdt=n(Khe);Mir=r(bdt,"xlm"),bdt.forEach(t),Eir=r(RLe," \u2014 "),DG=s(RLe,"A",{href:!0});var vdt=n(DG);yir=r(vdt,"TFXLMForSequenceClassification"),vdt.forEach(t),wir=r(RLe," (XLM model)"),RLe.forEach(t),Air=i(W),g4=s(W,"LI",{});var SLe=n(g4);Zhe=s(SLe,"STRONG",{});var Tdt=n(Zhe);Lir=r(Tdt,"xlm-roberta"),Tdt.forEach(t),Bir=r(SLe," \u2014 "),jG=s(SLe,"A",{href:!0});var Fdt=n(jG);xir=r(Fdt,"TFXLMRobertaForSequenceClassification"),Fdt.forEach(t),kir=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),Rir=i(W),h4=s(W,"LI",{});var PLe=n(h4);eue=s(PLe,"STRONG",{});var Cdt=n(eue);Sir=r(Cdt,"xlnet"),Cdt.forEach(t),Pir=r(PLe," \u2014 "),NG=s(PLe,"A",{href:!0});var Mdt=n(NG);$ir=r(Mdt,"TFXLNetForSequenceClassification"),Mdt.forEach(t),Iir=r(PLe," (XLNet model)"),PLe.forEach(t),W.forEach(t),Dir=i(pa),oue=s(pa,"P",{});var Edt=n(oue);jir=r(Edt,"Examples:"),Edt.forEach(t),Nir=i(pa),f(zA.$$.fragment,pa),pa.forEach(t),Xl.forEach(t),OBe=i(c),Cc=s(c,"H2",{class:!0});var Kke=n(Cc);u4=s(Kke,"A",{id:!0,class:!0,href:!0});var ydt=n(u4);rue=s(ydt,"SPAN",{});var wdt=n(rue);f(WA.$$.fragment,wdt),wdt.forEach(t),ydt.forEach(t),qir=i(Kke),tue=s(Kke,"SPAN",{});var Adt=n(tue);Gir=r(Adt,"TFAutoModelForMultipleChoice"),Adt.forEach(t),Kke.forEach(t),XBe=i(c),Cr=s(c,"DIV",{class:!0});var zl=n(Cr);f(QA.$$.fragment,zl),Oir=i(zl),Mc=s(zl,"P",{});var jz=n(Mc);Xir=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aue=s(jz,"CODE",{});var Ldt=n(aue);Vir=r(Ldt,"from_pretrained()"),Ldt.forEach(t),zir=r(jz,"class method or the "),sue=s(jz,"CODE",{});var Bdt=n(sue);Wir=r(Bdt,"from_config()"),Bdt.forEach(t),Qir=r(jz,`class
method.`),jz.forEach(t),Hir=i(zl),HA=s(zl,"P",{});var Zke=n(HA);Uir=r(Zke,"This class cannot be instantiated directly using "),nue=s(Zke,"CODE",{});var xdt=n(nue);Jir=r(xdt,"__init__()"),xdt.forEach(t),Yir=r(Zke," (throws an error)."),Zke.forEach(t),Kir=i(zl),ut=s(zl,"DIV",{class:!0});var Wl=n(ut);f(UA.$$.fragment,Wl),Zir=i(Wl),lue=s(Wl,"P",{});var kdt=n(lue);edr=r(kdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kdt.forEach(t),odr=i(Wl),Ec=s(Wl,"P",{});var Nz=n(Ec);rdr=r(Nz,`Note:
Loading a model from its configuration file does `),iue=s(Nz,"STRONG",{});var Rdt=n(iue);tdr=r(Rdt,"not"),Rdt.forEach(t),adr=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),due=s(Nz,"CODE",{});var Sdt=n(due);sdr=r(Sdt,"from_pretrained()"),Sdt.forEach(t),ndr=r(Nz,"to load the model weights."),Nz.forEach(t),ldr=i(Wl),cue=s(Wl,"P",{});var Pdt=n(cue);idr=r(Pdt,"Examples:"),Pdt.forEach(t),ddr=i(Wl),f(JA.$$.fragment,Wl),Wl.forEach(t),cdr=i(zl),To=s(zl,"DIV",{class:!0});var _a=n(To);f(YA.$$.fragment,_a),mdr=i(_a),mue=s(_a,"P",{});var $dt=n(mue);fdr=r($dt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$dt.forEach(t),gdr=i(_a),ps=s(_a,"P",{});var t5=n(ps);hdr=r(t5,"The model class to instantiate is selected based on the "),fue=s(t5,"CODE",{});var Idt=n(fue);udr=r(Idt,"model_type"),Idt.forEach(t),pdr=r(t5,` property of the config object (either
passed as an argument or loaded from `),gue=s(t5,"CODE",{});var Ddt=n(gue);_dr=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),bdr=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=s(t5,"CODE",{});var jdt=n(hue);vdr=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),Tdr=r(t5,":"),t5.forEach(t),Fdr=i(_a),te=s(_a,"UL",{});var se=n(te);p4=s(se,"LI",{});var $Le=n(p4);uue=s($Le,"STRONG",{});var Ndt=n(uue);Cdr=r(Ndt,"albert"),Ndt.forEach(t),Mdr=r($Le," \u2014 "),qG=s($Le,"A",{href:!0});var qdt=n(qG);Edr=r(qdt,"TFAlbertForMultipleChoice"),qdt.forEach(t),ydr=r($Le," (ALBERT model)"),$Le.forEach(t),wdr=i(se),_4=s(se,"LI",{});var ILe=n(_4);pue=s(ILe,"STRONG",{});var Gdt=n(pue);Adr=r(Gdt,"bert"),Gdt.forEach(t),Ldr=r(ILe," \u2014 "),GG=s(ILe,"A",{href:!0});var Odt=n(GG);Bdr=r(Odt,"TFBertForMultipleChoice"),Odt.forEach(t),xdr=r(ILe," (BERT model)"),ILe.forEach(t),kdr=i(se),b4=s(se,"LI",{});var DLe=n(b4);_ue=s(DLe,"STRONG",{});var Xdt=n(_ue);Rdr=r(Xdt,"camembert"),Xdt.forEach(t),Sdr=r(DLe," \u2014 "),OG=s(DLe,"A",{href:!0});var Vdt=n(OG);Pdr=r(Vdt,"TFCamembertForMultipleChoice"),Vdt.forEach(t),$dr=r(DLe," (CamemBERT model)"),DLe.forEach(t),Idr=i(se),v4=s(se,"LI",{});var jLe=n(v4);bue=s(jLe,"STRONG",{});var zdt=n(bue);Ddr=r(zdt,"convbert"),zdt.forEach(t),jdr=r(jLe," \u2014 "),XG=s(jLe,"A",{href:!0});var Wdt=n(XG);Ndr=r(Wdt,"TFConvBertForMultipleChoice"),Wdt.forEach(t),qdr=r(jLe," (ConvBERT model)"),jLe.forEach(t),Gdr=i(se),T4=s(se,"LI",{});var NLe=n(T4);vue=s(NLe,"STRONG",{});var Qdt=n(vue);Odr=r(Qdt,"distilbert"),Qdt.forEach(t),Xdr=r(NLe," \u2014 "),VG=s(NLe,"A",{href:!0});var Hdt=n(VG);Vdr=r(Hdt,"TFDistilBertForMultipleChoice"),Hdt.forEach(t),zdr=r(NLe," (DistilBERT model)"),NLe.forEach(t),Wdr=i(se),F4=s(se,"LI",{});var qLe=n(F4);Tue=s(qLe,"STRONG",{});var Udt=n(Tue);Qdr=r(Udt,"electra"),Udt.forEach(t),Hdr=r(qLe," \u2014 "),zG=s(qLe,"A",{href:!0});var Jdt=n(zG);Udr=r(Jdt,"TFElectraForMultipleChoice"),Jdt.forEach(t),Jdr=r(qLe," (ELECTRA model)"),qLe.forEach(t),Ydr=i(se),C4=s(se,"LI",{});var GLe=n(C4);Fue=s(GLe,"STRONG",{});var Ydt=n(Fue);Kdr=r(Ydt,"flaubert"),Ydt.forEach(t),Zdr=r(GLe," \u2014 "),WG=s(GLe,"A",{href:!0});var Kdt=n(WG);ecr=r(Kdt,"TFFlaubertForMultipleChoice"),Kdt.forEach(t),ocr=r(GLe," (FlauBERT model)"),GLe.forEach(t),rcr=i(se),M4=s(se,"LI",{});var OLe=n(M4);Cue=s(OLe,"STRONG",{});var Zdt=n(Cue);tcr=r(Zdt,"funnel"),Zdt.forEach(t),acr=r(OLe," \u2014 "),QG=s(OLe,"A",{href:!0});var ect=n(QG);scr=r(ect,"TFFunnelForMultipleChoice"),ect.forEach(t),ncr=r(OLe," (Funnel Transformer model)"),OLe.forEach(t),lcr=i(se),E4=s(se,"LI",{});var XLe=n(E4);Mue=s(XLe,"STRONG",{});var oct=n(Mue);icr=r(oct,"longformer"),oct.forEach(t),dcr=r(XLe," \u2014 "),HG=s(XLe,"A",{href:!0});var rct=n(HG);ccr=r(rct,"TFLongformerForMultipleChoice"),rct.forEach(t),mcr=r(XLe," (Longformer model)"),XLe.forEach(t),fcr=i(se),y4=s(se,"LI",{});var VLe=n(y4);Eue=s(VLe,"STRONG",{});var tct=n(Eue);gcr=r(tct,"mobilebert"),tct.forEach(t),hcr=r(VLe," \u2014 "),UG=s(VLe,"A",{href:!0});var act=n(UG);ucr=r(act,"TFMobileBertForMultipleChoice"),act.forEach(t),pcr=r(VLe," (MobileBERT model)"),VLe.forEach(t),_cr=i(se),w4=s(se,"LI",{});var zLe=n(w4);yue=s(zLe,"STRONG",{});var sct=n(yue);bcr=r(sct,"mpnet"),sct.forEach(t),vcr=r(zLe," \u2014 "),JG=s(zLe,"A",{href:!0});var nct=n(JG);Tcr=r(nct,"TFMPNetForMultipleChoice"),nct.forEach(t),Fcr=r(zLe," (MPNet model)"),zLe.forEach(t),Ccr=i(se),A4=s(se,"LI",{});var WLe=n(A4);wue=s(WLe,"STRONG",{});var lct=n(wue);Mcr=r(lct,"rembert"),lct.forEach(t),Ecr=r(WLe," \u2014 "),YG=s(WLe,"A",{href:!0});var ict=n(YG);ycr=r(ict,"TFRemBertForMultipleChoice"),ict.forEach(t),wcr=r(WLe," (RemBERT model)"),WLe.forEach(t),Acr=i(se),L4=s(se,"LI",{});var QLe=n(L4);Aue=s(QLe,"STRONG",{});var dct=n(Aue);Lcr=r(dct,"roberta"),dct.forEach(t),Bcr=r(QLe," \u2014 "),KG=s(QLe,"A",{href:!0});var cct=n(KG);xcr=r(cct,"TFRobertaForMultipleChoice"),cct.forEach(t),kcr=r(QLe," (RoBERTa model)"),QLe.forEach(t),Rcr=i(se),B4=s(se,"LI",{});var HLe=n(B4);Lue=s(HLe,"STRONG",{});var mct=n(Lue);Scr=r(mct,"roformer"),mct.forEach(t),Pcr=r(HLe," \u2014 "),ZG=s(HLe,"A",{href:!0});var fct=n(ZG);$cr=r(fct,"TFRoFormerForMultipleChoice"),fct.forEach(t),Icr=r(HLe," (RoFormer model)"),HLe.forEach(t),Dcr=i(se),x4=s(se,"LI",{});var ULe=n(x4);Bue=s(ULe,"STRONG",{});var gct=n(Bue);jcr=r(gct,"xlm"),gct.forEach(t),Ncr=r(ULe," \u2014 "),eO=s(ULe,"A",{href:!0});var hct=n(eO);qcr=r(hct,"TFXLMForMultipleChoice"),hct.forEach(t),Gcr=r(ULe," (XLM model)"),ULe.forEach(t),Ocr=i(se),k4=s(se,"LI",{});var JLe=n(k4);xue=s(JLe,"STRONG",{});var uct=n(xue);Xcr=r(uct,"xlm-roberta"),uct.forEach(t),Vcr=r(JLe," \u2014 "),oO=s(JLe,"A",{href:!0});var pct=n(oO);zcr=r(pct,"TFXLMRobertaForMultipleChoice"),pct.forEach(t),Wcr=r(JLe," (XLM-RoBERTa model)"),JLe.forEach(t),Qcr=i(se),R4=s(se,"LI",{});var YLe=n(R4);kue=s(YLe,"STRONG",{});var _ct=n(kue);Hcr=r(_ct,"xlnet"),_ct.forEach(t),Ucr=r(YLe," \u2014 "),rO=s(YLe,"A",{href:!0});var bct=n(rO);Jcr=r(bct,"TFXLNetForMultipleChoice"),bct.forEach(t),Ycr=r(YLe," (XLNet model)"),YLe.forEach(t),se.forEach(t),Kcr=i(_a),Rue=s(_a,"P",{});var vct=n(Rue);Zcr=r(vct,"Examples:"),vct.forEach(t),emr=i(_a),f(KA.$$.fragment,_a),_a.forEach(t),zl.forEach(t),VBe=i(c),yc=s(c,"H2",{class:!0});var eRe=n(yc);S4=s(eRe,"A",{id:!0,class:!0,href:!0});var Tct=n(S4);Sue=s(Tct,"SPAN",{});var Fct=n(Sue);f(ZA.$$.fragment,Fct),Fct.forEach(t),Tct.forEach(t),omr=i(eRe),Pue=s(eRe,"SPAN",{});var Cct=n(Pue);rmr=r(Cct,"TFAutoModelForTableQuestionAnswering"),Cct.forEach(t),eRe.forEach(t),zBe=i(c),Mr=s(c,"DIV",{class:!0});var Ql=n(Mr);f(e0.$$.fragment,Ql),tmr=i(Ql),wc=s(Ql,"P",{});var qz=n(wc);amr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$ue=s(qz,"CODE",{});var Mct=n($ue);smr=r(Mct,"from_pretrained()"),Mct.forEach(t),nmr=r(qz,"class method or the "),Iue=s(qz,"CODE",{});var Ect=n(Iue);lmr=r(Ect,"from_config()"),Ect.forEach(t),imr=r(qz,`class
method.`),qz.forEach(t),dmr=i(Ql),o0=s(Ql,"P",{});var oRe=n(o0);cmr=r(oRe,"This class cannot be instantiated directly using "),Due=s(oRe,"CODE",{});var yct=n(Due);mmr=r(yct,"__init__()"),yct.forEach(t),fmr=r(oRe," (throws an error)."),oRe.forEach(t),gmr=i(Ql),pt=s(Ql,"DIV",{class:!0});var Hl=n(pt);f(r0.$$.fragment,Hl),hmr=i(Hl),jue=s(Hl,"P",{});var wct=n(jue);umr=r(wct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wct.forEach(t),pmr=i(Hl),Ac=s(Hl,"P",{});var Gz=n(Ac);_mr=r(Gz,`Note:
Loading a model from its configuration file does `),Nue=s(Gz,"STRONG",{});var Act=n(Nue);bmr=r(Act,"not"),Act.forEach(t),vmr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),que=s(Gz,"CODE",{});var Lct=n(que);Tmr=r(Lct,"from_pretrained()"),Lct.forEach(t),Fmr=r(Gz,"to load the model weights."),Gz.forEach(t),Cmr=i(Hl),Gue=s(Hl,"P",{});var Bct=n(Gue);Mmr=r(Bct,"Examples:"),Bct.forEach(t),Emr=i(Hl),f(t0.$$.fragment,Hl),Hl.forEach(t),ymr=i(Ql),Fo=s(Ql,"DIV",{class:!0});var ba=n(Fo);f(a0.$$.fragment,ba),wmr=i(ba),Oue=s(ba,"P",{});var xct=n(Oue);Amr=r(xct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xct.forEach(t),Lmr=i(ba),_s=s(ba,"P",{});var a5=n(_s);Bmr=r(a5,"The model class to instantiate is selected based on the "),Xue=s(a5,"CODE",{});var kct=n(Xue);xmr=r(kct,"model_type"),kct.forEach(t),kmr=r(a5,` property of the config object (either
passed as an argument or loaded from `),Vue=s(a5,"CODE",{});var Rct=n(Vue);Rmr=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),Smr=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=s(a5,"CODE",{});var Sct=n(zue);Pmr=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),$mr=r(a5,":"),a5.forEach(t),Imr=i(ba),Wue=s(ba,"UL",{});var Pct=n(Wue);P4=s(Pct,"LI",{});var KLe=n(P4);Que=s(KLe,"STRONG",{});var $ct=n(Que);Dmr=r($ct,"tapas"),$ct.forEach(t),jmr=r(KLe," \u2014 "),tO=s(KLe,"A",{href:!0});var Ict=n(tO);Nmr=r(Ict,"TFTapasForQuestionAnswering"),Ict.forEach(t),qmr=r(KLe," (TAPAS model)"),KLe.forEach(t),Pct.forEach(t),Gmr=i(ba),Hue=s(ba,"P",{});var Dct=n(Hue);Omr=r(Dct,"Examples:"),Dct.forEach(t),Xmr=i(ba),f(s0.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),WBe=i(c),Lc=s(c,"H2",{class:!0});var rRe=n(Lc);$4=s(rRe,"A",{id:!0,class:!0,href:!0});var jct=n($4);Uue=s(jct,"SPAN",{});var Nct=n(Uue);f(n0.$$.fragment,Nct),Nct.forEach(t),jct.forEach(t),Vmr=i(rRe),Jue=s(rRe,"SPAN",{});var qct=n(Jue);zmr=r(qct,"TFAutoModelForTokenClassification"),qct.forEach(t),rRe.forEach(t),QBe=i(c),Er=s(c,"DIV",{class:!0});var Ul=n(Er);f(l0.$$.fragment,Ul),Wmr=i(Ul),Bc=s(Ul,"P",{});var Oz=n(Bc);Qmr=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yue=s(Oz,"CODE",{});var Gct=n(Yue);Hmr=r(Gct,"from_pretrained()"),Gct.forEach(t),Umr=r(Oz,"class method or the "),Kue=s(Oz,"CODE",{});var Oct=n(Kue);Jmr=r(Oct,"from_config()"),Oct.forEach(t),Ymr=r(Oz,`class
method.`),Oz.forEach(t),Kmr=i(Ul),i0=s(Ul,"P",{});var tRe=n(i0);Zmr=r(tRe,"This class cannot be instantiated directly using "),Zue=s(tRe,"CODE",{});var Xct=n(Zue);efr=r(Xct,"__init__()"),Xct.forEach(t),ofr=r(tRe," (throws an error)."),tRe.forEach(t),rfr=i(Ul),_t=s(Ul,"DIV",{class:!0});var Jl=n(_t);f(d0.$$.fragment,Jl),tfr=i(Jl),epe=s(Jl,"P",{});var Vct=n(epe);afr=r(Vct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vct.forEach(t),sfr=i(Jl),xc=s(Jl,"P",{});var Xz=n(xc);nfr=r(Xz,`Note:
Loading a model from its configuration file does `),ope=s(Xz,"STRONG",{});var zct=n(ope);lfr=r(zct,"not"),zct.forEach(t),ifr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),rpe=s(Xz,"CODE",{});var Wct=n(rpe);dfr=r(Wct,"from_pretrained()"),Wct.forEach(t),cfr=r(Xz,"to load the model weights."),Xz.forEach(t),mfr=i(Jl),tpe=s(Jl,"P",{});var Qct=n(tpe);ffr=r(Qct,"Examples:"),Qct.forEach(t),gfr=i(Jl),f(c0.$$.fragment,Jl),Jl.forEach(t),hfr=i(Ul),Co=s(Ul,"DIV",{class:!0});var va=n(Co);f(m0.$$.fragment,va),ufr=i(va),ape=s(va,"P",{});var Hct=n(ape);pfr=r(Hct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hct.forEach(t),_fr=i(va),bs=s(va,"P",{});var s5=n(bs);bfr=r(s5,"The model class to instantiate is selected based on the "),spe=s(s5,"CODE",{});var Uct=n(spe);vfr=r(Uct,"model_type"),Uct.forEach(t),Tfr=r(s5,` property of the config object (either
passed as an argument or loaded from `),npe=s(s5,"CODE",{});var Jct=n(npe);Ffr=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),Cfr=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=s(s5,"CODE",{});var Yct=n(lpe);Mfr=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),Efr=r(s5,":"),s5.forEach(t),yfr=i(va),K=s(va,"UL",{});var oe=n(K);I4=s(oe,"LI",{});var ZLe=n(I4);ipe=s(ZLe,"STRONG",{});var Kct=n(ipe);wfr=r(Kct,"albert"),Kct.forEach(t),Afr=r(ZLe," \u2014 "),aO=s(ZLe,"A",{href:!0});var Zct=n(aO);Lfr=r(Zct,"TFAlbertForTokenClassification"),Zct.forEach(t),Bfr=r(ZLe," (ALBERT model)"),ZLe.forEach(t),xfr=i(oe),D4=s(oe,"LI",{});var e8e=n(D4);dpe=s(e8e,"STRONG",{});var emt=n(dpe);kfr=r(emt,"bert"),emt.forEach(t),Rfr=r(e8e," \u2014 "),sO=s(e8e,"A",{href:!0});var omt=n(sO);Sfr=r(omt,"TFBertForTokenClassification"),omt.forEach(t),Pfr=r(e8e," (BERT model)"),e8e.forEach(t),$fr=i(oe),j4=s(oe,"LI",{});var o8e=n(j4);cpe=s(o8e,"STRONG",{});var rmt=n(cpe);Ifr=r(rmt,"camembert"),rmt.forEach(t),Dfr=r(o8e," \u2014 "),nO=s(o8e,"A",{href:!0});var tmt=n(nO);jfr=r(tmt,"TFCamembertForTokenClassification"),tmt.forEach(t),Nfr=r(o8e," (CamemBERT model)"),o8e.forEach(t),qfr=i(oe),N4=s(oe,"LI",{});var r8e=n(N4);mpe=s(r8e,"STRONG",{});var amt=n(mpe);Gfr=r(amt,"convbert"),amt.forEach(t),Ofr=r(r8e," \u2014 "),lO=s(r8e,"A",{href:!0});var smt=n(lO);Xfr=r(smt,"TFConvBertForTokenClassification"),smt.forEach(t),Vfr=r(r8e," (ConvBERT model)"),r8e.forEach(t),zfr=i(oe),q4=s(oe,"LI",{});var t8e=n(q4);fpe=s(t8e,"STRONG",{});var nmt=n(fpe);Wfr=r(nmt,"deberta"),nmt.forEach(t),Qfr=r(t8e," \u2014 "),iO=s(t8e,"A",{href:!0});var lmt=n(iO);Hfr=r(lmt,"TFDebertaForTokenClassification"),lmt.forEach(t),Ufr=r(t8e," (DeBERTa model)"),t8e.forEach(t),Jfr=i(oe),G4=s(oe,"LI",{});var a8e=n(G4);gpe=s(a8e,"STRONG",{});var imt=n(gpe);Yfr=r(imt,"deberta-v2"),imt.forEach(t),Kfr=r(a8e," \u2014 "),dO=s(a8e,"A",{href:!0});var dmt=n(dO);Zfr=r(dmt,"TFDebertaV2ForTokenClassification"),dmt.forEach(t),egr=r(a8e," (DeBERTa-v2 model)"),a8e.forEach(t),ogr=i(oe),O4=s(oe,"LI",{});var s8e=n(O4);hpe=s(s8e,"STRONG",{});var cmt=n(hpe);rgr=r(cmt,"distilbert"),cmt.forEach(t),tgr=r(s8e," \u2014 "),cO=s(s8e,"A",{href:!0});var mmt=n(cO);agr=r(mmt,"TFDistilBertForTokenClassification"),mmt.forEach(t),sgr=r(s8e," (DistilBERT model)"),s8e.forEach(t),ngr=i(oe),X4=s(oe,"LI",{});var n8e=n(X4);upe=s(n8e,"STRONG",{});var fmt=n(upe);lgr=r(fmt,"electra"),fmt.forEach(t),igr=r(n8e," \u2014 "),mO=s(n8e,"A",{href:!0});var gmt=n(mO);dgr=r(gmt,"TFElectraForTokenClassification"),gmt.forEach(t),cgr=r(n8e," (ELECTRA model)"),n8e.forEach(t),mgr=i(oe),V4=s(oe,"LI",{});var l8e=n(V4);ppe=s(l8e,"STRONG",{});var hmt=n(ppe);fgr=r(hmt,"flaubert"),hmt.forEach(t),ggr=r(l8e," \u2014 "),fO=s(l8e,"A",{href:!0});var umt=n(fO);hgr=r(umt,"TFFlaubertForTokenClassification"),umt.forEach(t),ugr=r(l8e," (FlauBERT model)"),l8e.forEach(t),pgr=i(oe),z4=s(oe,"LI",{});var i8e=n(z4);_pe=s(i8e,"STRONG",{});var pmt=n(_pe);_gr=r(pmt,"funnel"),pmt.forEach(t),bgr=r(i8e," \u2014 "),gO=s(i8e,"A",{href:!0});var _mt=n(gO);vgr=r(_mt,"TFFunnelForTokenClassification"),_mt.forEach(t),Tgr=r(i8e," (Funnel Transformer model)"),i8e.forEach(t),Fgr=i(oe),W4=s(oe,"LI",{});var d8e=n(W4);bpe=s(d8e,"STRONG",{});var bmt=n(bpe);Cgr=r(bmt,"layoutlm"),bmt.forEach(t),Mgr=r(d8e," \u2014 "),hO=s(d8e,"A",{href:!0});var vmt=n(hO);Egr=r(vmt,"TFLayoutLMForTokenClassification"),vmt.forEach(t),ygr=r(d8e," (LayoutLM model)"),d8e.forEach(t),wgr=i(oe),Q4=s(oe,"LI",{});var c8e=n(Q4);vpe=s(c8e,"STRONG",{});var Tmt=n(vpe);Agr=r(Tmt,"longformer"),Tmt.forEach(t),Lgr=r(c8e," \u2014 "),uO=s(c8e,"A",{href:!0});var Fmt=n(uO);Bgr=r(Fmt,"TFLongformerForTokenClassification"),Fmt.forEach(t),xgr=r(c8e," (Longformer model)"),c8e.forEach(t),kgr=i(oe),H4=s(oe,"LI",{});var m8e=n(H4);Tpe=s(m8e,"STRONG",{});var Cmt=n(Tpe);Rgr=r(Cmt,"mobilebert"),Cmt.forEach(t),Sgr=r(m8e," \u2014 "),pO=s(m8e,"A",{href:!0});var Mmt=n(pO);Pgr=r(Mmt,"TFMobileBertForTokenClassification"),Mmt.forEach(t),$gr=r(m8e," (MobileBERT model)"),m8e.forEach(t),Igr=i(oe),U4=s(oe,"LI",{});var f8e=n(U4);Fpe=s(f8e,"STRONG",{});var Emt=n(Fpe);Dgr=r(Emt,"mpnet"),Emt.forEach(t),jgr=r(f8e," \u2014 "),_O=s(f8e,"A",{href:!0});var ymt=n(_O);Ngr=r(ymt,"TFMPNetForTokenClassification"),ymt.forEach(t),qgr=r(f8e," (MPNet model)"),f8e.forEach(t),Ggr=i(oe),J4=s(oe,"LI",{});var g8e=n(J4);Cpe=s(g8e,"STRONG",{});var wmt=n(Cpe);Ogr=r(wmt,"rembert"),wmt.forEach(t),Xgr=r(g8e," \u2014 "),bO=s(g8e,"A",{href:!0});var Amt=n(bO);Vgr=r(Amt,"TFRemBertForTokenClassification"),Amt.forEach(t),zgr=r(g8e," (RemBERT model)"),g8e.forEach(t),Wgr=i(oe),Y4=s(oe,"LI",{});var h8e=n(Y4);Mpe=s(h8e,"STRONG",{});var Lmt=n(Mpe);Qgr=r(Lmt,"roberta"),Lmt.forEach(t),Hgr=r(h8e," \u2014 "),vO=s(h8e,"A",{href:!0});var Bmt=n(vO);Ugr=r(Bmt,"TFRobertaForTokenClassification"),Bmt.forEach(t),Jgr=r(h8e," (RoBERTa model)"),h8e.forEach(t),Ygr=i(oe),K4=s(oe,"LI",{});var u8e=n(K4);Epe=s(u8e,"STRONG",{});var xmt=n(Epe);Kgr=r(xmt,"roformer"),xmt.forEach(t),Zgr=r(u8e," \u2014 "),TO=s(u8e,"A",{href:!0});var kmt=n(TO);ehr=r(kmt,"TFRoFormerForTokenClassification"),kmt.forEach(t),ohr=r(u8e," (RoFormer model)"),u8e.forEach(t),rhr=i(oe),Z4=s(oe,"LI",{});var p8e=n(Z4);ype=s(p8e,"STRONG",{});var Rmt=n(ype);thr=r(Rmt,"xlm"),Rmt.forEach(t),ahr=r(p8e," \u2014 "),FO=s(p8e,"A",{href:!0});var Smt=n(FO);shr=r(Smt,"TFXLMForTokenClassification"),Smt.forEach(t),nhr=r(p8e," (XLM model)"),p8e.forEach(t),lhr=i(oe),eM=s(oe,"LI",{});var _8e=n(eM);wpe=s(_8e,"STRONG",{});var Pmt=n(wpe);ihr=r(Pmt,"xlm-roberta"),Pmt.forEach(t),dhr=r(_8e," \u2014 "),CO=s(_8e,"A",{href:!0});var $mt=n(CO);chr=r($mt,"TFXLMRobertaForTokenClassification"),$mt.forEach(t),mhr=r(_8e," (XLM-RoBERTa model)"),_8e.forEach(t),fhr=i(oe),oM=s(oe,"LI",{});var b8e=n(oM);Ape=s(b8e,"STRONG",{});var Imt=n(Ape);ghr=r(Imt,"xlnet"),Imt.forEach(t),hhr=r(b8e," \u2014 "),MO=s(b8e,"A",{href:!0});var Dmt=n(MO);uhr=r(Dmt,"TFXLNetForTokenClassification"),Dmt.forEach(t),phr=r(b8e," (XLNet model)"),b8e.forEach(t),oe.forEach(t),_hr=i(va),Lpe=s(va,"P",{});var jmt=n(Lpe);bhr=r(jmt,"Examples:"),jmt.forEach(t),vhr=i(va),f(f0.$$.fragment,va),va.forEach(t),Ul.forEach(t),HBe=i(c),kc=s(c,"H2",{class:!0});var aRe=n(kc);rM=s(aRe,"A",{id:!0,class:!0,href:!0});var Nmt=n(rM);Bpe=s(Nmt,"SPAN",{});var qmt=n(Bpe);f(g0.$$.fragment,qmt),qmt.forEach(t),Nmt.forEach(t),Thr=i(aRe),xpe=s(aRe,"SPAN",{});var Gmt=n(xpe);Fhr=r(Gmt,"TFAutoModelForQuestionAnswering"),Gmt.forEach(t),aRe.forEach(t),UBe=i(c),yr=s(c,"DIV",{class:!0});var Yl=n(yr);f(h0.$$.fragment,Yl),Chr=i(Yl),Rc=s(Yl,"P",{});var Vz=n(Rc);Mhr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kpe=s(Vz,"CODE",{});var Omt=n(kpe);Ehr=r(Omt,"from_pretrained()"),Omt.forEach(t),yhr=r(Vz,"class method or the "),Rpe=s(Vz,"CODE",{});var Xmt=n(Rpe);whr=r(Xmt,"from_config()"),Xmt.forEach(t),Ahr=r(Vz,`class
method.`),Vz.forEach(t),Lhr=i(Yl),u0=s(Yl,"P",{});var sRe=n(u0);Bhr=r(sRe,"This class cannot be instantiated directly using "),Spe=s(sRe,"CODE",{});var Vmt=n(Spe);xhr=r(Vmt,"__init__()"),Vmt.forEach(t),khr=r(sRe," (throws an error)."),sRe.forEach(t),Rhr=i(Yl),bt=s(Yl,"DIV",{class:!0});var Kl=n(bt);f(p0.$$.fragment,Kl),Shr=i(Kl),Ppe=s(Kl,"P",{});var zmt=n(Ppe);Phr=r(zmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zmt.forEach(t),$hr=i(Kl),Sc=s(Kl,"P",{});var zz=n(Sc);Ihr=r(zz,`Note:
Loading a model from its configuration file does `),$pe=s(zz,"STRONG",{});var Wmt=n($pe);Dhr=r(Wmt,"not"),Wmt.forEach(t),jhr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=s(zz,"CODE",{});var Qmt=n(Ipe);Nhr=r(Qmt,"from_pretrained()"),Qmt.forEach(t),qhr=r(zz,"to load the model weights."),zz.forEach(t),Ghr=i(Kl),Dpe=s(Kl,"P",{});var Hmt=n(Dpe);Ohr=r(Hmt,"Examples:"),Hmt.forEach(t),Xhr=i(Kl),f(_0.$$.fragment,Kl),Kl.forEach(t),Vhr=i(Yl),Mo=s(Yl,"DIV",{class:!0});var Ta=n(Mo);f(b0.$$.fragment,Ta),zhr=i(Ta),jpe=s(Ta,"P",{});var Umt=n(jpe);Whr=r(Umt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Umt.forEach(t),Qhr=i(Ta),vs=s(Ta,"P",{});var n5=n(vs);Hhr=r(n5,"The model class to instantiate is selected based on the "),Npe=s(n5,"CODE",{});var Jmt=n(Npe);Uhr=r(Jmt,"model_type"),Jmt.forEach(t),Jhr=r(n5,` property of the config object (either
passed as an argument or loaded from `),qpe=s(n5,"CODE",{});var Ymt=n(qpe);Yhr=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),Khr=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=s(n5,"CODE",{});var Kmt=n(Gpe);Zhr=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),eur=r(n5,":"),n5.forEach(t),our=i(Ta),Z=s(Ta,"UL",{});var re=n(Z);tM=s(re,"LI",{});var v8e=n(tM);Ope=s(v8e,"STRONG",{});var Zmt=n(Ope);rur=r(Zmt,"albert"),Zmt.forEach(t),tur=r(v8e," \u2014 "),EO=s(v8e,"A",{href:!0});var eft=n(EO);aur=r(eft,"TFAlbertForQuestionAnswering"),eft.forEach(t),sur=r(v8e," (ALBERT model)"),v8e.forEach(t),nur=i(re),aM=s(re,"LI",{});var T8e=n(aM);Xpe=s(T8e,"STRONG",{});var oft=n(Xpe);lur=r(oft,"bert"),oft.forEach(t),iur=r(T8e," \u2014 "),yO=s(T8e,"A",{href:!0});var rft=n(yO);dur=r(rft,"TFBertForQuestionAnswering"),rft.forEach(t),cur=r(T8e," (BERT model)"),T8e.forEach(t),mur=i(re),sM=s(re,"LI",{});var F8e=n(sM);Vpe=s(F8e,"STRONG",{});var tft=n(Vpe);fur=r(tft,"camembert"),tft.forEach(t),gur=r(F8e," \u2014 "),wO=s(F8e,"A",{href:!0});var aft=n(wO);hur=r(aft,"TFCamembertForQuestionAnswering"),aft.forEach(t),uur=r(F8e," (CamemBERT model)"),F8e.forEach(t),pur=i(re),nM=s(re,"LI",{});var C8e=n(nM);zpe=s(C8e,"STRONG",{});var sft=n(zpe);_ur=r(sft,"convbert"),sft.forEach(t),bur=r(C8e," \u2014 "),AO=s(C8e,"A",{href:!0});var nft=n(AO);vur=r(nft,"TFConvBertForQuestionAnswering"),nft.forEach(t),Tur=r(C8e," (ConvBERT model)"),C8e.forEach(t),Fur=i(re),lM=s(re,"LI",{});var M8e=n(lM);Wpe=s(M8e,"STRONG",{});var lft=n(Wpe);Cur=r(lft,"deberta"),lft.forEach(t),Mur=r(M8e," \u2014 "),LO=s(M8e,"A",{href:!0});var ift=n(LO);Eur=r(ift,"TFDebertaForQuestionAnswering"),ift.forEach(t),yur=r(M8e," (DeBERTa model)"),M8e.forEach(t),wur=i(re),iM=s(re,"LI",{});var E8e=n(iM);Qpe=s(E8e,"STRONG",{});var dft=n(Qpe);Aur=r(dft,"deberta-v2"),dft.forEach(t),Lur=r(E8e," \u2014 "),BO=s(E8e,"A",{href:!0});var cft=n(BO);Bur=r(cft,"TFDebertaV2ForQuestionAnswering"),cft.forEach(t),xur=r(E8e," (DeBERTa-v2 model)"),E8e.forEach(t),kur=i(re),dM=s(re,"LI",{});var y8e=n(dM);Hpe=s(y8e,"STRONG",{});var mft=n(Hpe);Rur=r(mft,"distilbert"),mft.forEach(t),Sur=r(y8e," \u2014 "),xO=s(y8e,"A",{href:!0});var fft=n(xO);Pur=r(fft,"TFDistilBertForQuestionAnswering"),fft.forEach(t),$ur=r(y8e," (DistilBERT model)"),y8e.forEach(t),Iur=i(re),cM=s(re,"LI",{});var w8e=n(cM);Upe=s(w8e,"STRONG",{});var gft=n(Upe);Dur=r(gft,"electra"),gft.forEach(t),jur=r(w8e," \u2014 "),kO=s(w8e,"A",{href:!0});var hft=n(kO);Nur=r(hft,"TFElectraForQuestionAnswering"),hft.forEach(t),qur=r(w8e," (ELECTRA model)"),w8e.forEach(t),Gur=i(re),mM=s(re,"LI",{});var A8e=n(mM);Jpe=s(A8e,"STRONG",{});var uft=n(Jpe);Our=r(uft,"flaubert"),uft.forEach(t),Xur=r(A8e," \u2014 "),RO=s(A8e,"A",{href:!0});var pft=n(RO);Vur=r(pft,"TFFlaubertForQuestionAnsweringSimple"),pft.forEach(t),zur=r(A8e," (FlauBERT model)"),A8e.forEach(t),Wur=i(re),fM=s(re,"LI",{});var L8e=n(fM);Ype=s(L8e,"STRONG",{});var _ft=n(Ype);Qur=r(_ft,"funnel"),_ft.forEach(t),Hur=r(L8e," \u2014 "),SO=s(L8e,"A",{href:!0});var bft=n(SO);Uur=r(bft,"TFFunnelForQuestionAnswering"),bft.forEach(t),Jur=r(L8e," (Funnel Transformer model)"),L8e.forEach(t),Yur=i(re),gM=s(re,"LI",{});var B8e=n(gM);Kpe=s(B8e,"STRONG",{});var vft=n(Kpe);Kur=r(vft,"longformer"),vft.forEach(t),Zur=r(B8e," \u2014 "),PO=s(B8e,"A",{href:!0});var Tft=n(PO);epr=r(Tft,"TFLongformerForQuestionAnswering"),Tft.forEach(t),opr=r(B8e," (Longformer model)"),B8e.forEach(t),rpr=i(re),hM=s(re,"LI",{});var x8e=n(hM);Zpe=s(x8e,"STRONG",{});var Fft=n(Zpe);tpr=r(Fft,"mobilebert"),Fft.forEach(t),apr=r(x8e," \u2014 "),$O=s(x8e,"A",{href:!0});var Cft=n($O);spr=r(Cft,"TFMobileBertForQuestionAnswering"),Cft.forEach(t),npr=r(x8e," (MobileBERT model)"),x8e.forEach(t),lpr=i(re),uM=s(re,"LI",{});var k8e=n(uM);e_e=s(k8e,"STRONG",{});var Mft=n(e_e);ipr=r(Mft,"mpnet"),Mft.forEach(t),dpr=r(k8e," \u2014 "),IO=s(k8e,"A",{href:!0});var Eft=n(IO);cpr=r(Eft,"TFMPNetForQuestionAnswering"),Eft.forEach(t),mpr=r(k8e," (MPNet model)"),k8e.forEach(t),fpr=i(re),pM=s(re,"LI",{});var R8e=n(pM);o_e=s(R8e,"STRONG",{});var yft=n(o_e);gpr=r(yft,"rembert"),yft.forEach(t),hpr=r(R8e," \u2014 "),DO=s(R8e,"A",{href:!0});var wft=n(DO);upr=r(wft,"TFRemBertForQuestionAnswering"),wft.forEach(t),ppr=r(R8e," (RemBERT model)"),R8e.forEach(t),_pr=i(re),_M=s(re,"LI",{});var S8e=n(_M);r_e=s(S8e,"STRONG",{});var Aft=n(r_e);bpr=r(Aft,"roberta"),Aft.forEach(t),vpr=r(S8e," \u2014 "),jO=s(S8e,"A",{href:!0});var Lft=n(jO);Tpr=r(Lft,"TFRobertaForQuestionAnswering"),Lft.forEach(t),Fpr=r(S8e," (RoBERTa model)"),S8e.forEach(t),Cpr=i(re),bM=s(re,"LI",{});var P8e=n(bM);t_e=s(P8e,"STRONG",{});var Bft=n(t_e);Mpr=r(Bft,"roformer"),Bft.forEach(t),Epr=r(P8e," \u2014 "),NO=s(P8e,"A",{href:!0});var xft=n(NO);ypr=r(xft,"TFRoFormerForQuestionAnswering"),xft.forEach(t),wpr=r(P8e," (RoFormer model)"),P8e.forEach(t),Apr=i(re),vM=s(re,"LI",{});var $8e=n(vM);a_e=s($8e,"STRONG",{});var kft=n(a_e);Lpr=r(kft,"xlm"),kft.forEach(t),Bpr=r($8e," \u2014 "),qO=s($8e,"A",{href:!0});var Rft=n(qO);xpr=r(Rft,"TFXLMForQuestionAnsweringSimple"),Rft.forEach(t),kpr=r($8e," (XLM model)"),$8e.forEach(t),Rpr=i(re),TM=s(re,"LI",{});var I8e=n(TM);s_e=s(I8e,"STRONG",{});var Sft=n(s_e);Spr=r(Sft,"xlm-roberta"),Sft.forEach(t),Ppr=r(I8e," \u2014 "),GO=s(I8e,"A",{href:!0});var Pft=n(GO);$pr=r(Pft,"TFXLMRobertaForQuestionAnswering"),Pft.forEach(t),Ipr=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),Dpr=i(re),FM=s(re,"LI",{});var D8e=n(FM);n_e=s(D8e,"STRONG",{});var $ft=n(n_e);jpr=r($ft,"xlnet"),$ft.forEach(t),Npr=r(D8e," \u2014 "),OO=s(D8e,"A",{href:!0});var Ift=n(OO);qpr=r(Ift,"TFXLNetForQuestionAnsweringSimple"),Ift.forEach(t),Gpr=r(D8e," (XLNet model)"),D8e.forEach(t),re.forEach(t),Opr=i(Ta),l_e=s(Ta,"P",{});var Dft=n(l_e);Xpr=r(Dft,"Examples:"),Dft.forEach(t),Vpr=i(Ta),f(v0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),JBe=i(c),Pc=s(c,"H2",{class:!0});var nRe=n(Pc);CM=s(nRe,"A",{id:!0,class:!0,href:!0});var jft=n(CM);i_e=s(jft,"SPAN",{});var Nft=n(i_e);f(T0.$$.fragment,Nft),Nft.forEach(t),jft.forEach(t),zpr=i(nRe),d_e=s(nRe,"SPAN",{});var qft=n(d_e);Wpr=r(qft,"TFAutoModelForVision2Seq"),qft.forEach(t),nRe.forEach(t),YBe=i(c),wr=s(c,"DIV",{class:!0});var Zl=n(wr);f(F0.$$.fragment,Zl),Qpr=i(Zl),$c=s(Zl,"P",{});var Wz=n($c);Hpr=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),c_e=s(Wz,"CODE",{});var Gft=n(c_e);Upr=r(Gft,"from_pretrained()"),Gft.forEach(t),Jpr=r(Wz,"class method or the "),m_e=s(Wz,"CODE",{});var Oft=n(m_e);Ypr=r(Oft,"from_config()"),Oft.forEach(t),Kpr=r(Wz,`class
method.`),Wz.forEach(t),Zpr=i(Zl),C0=s(Zl,"P",{});var lRe=n(C0);e_r=r(lRe,"This class cannot be instantiated directly using "),f_e=s(lRe,"CODE",{});var Xft=n(f_e);o_r=r(Xft,"__init__()"),Xft.forEach(t),r_r=r(lRe," (throws an error)."),lRe.forEach(t),t_r=i(Zl),vt=s(Zl,"DIV",{class:!0});var ei=n(vt);f(M0.$$.fragment,ei),a_r=i(ei),g_e=s(ei,"P",{});var Vft=n(g_e);s_r=r(Vft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vft.forEach(t),n_r=i(ei),Ic=s(ei,"P",{});var Qz=n(Ic);l_r=r(Qz,`Note:
Loading a model from its configuration file does `),h_e=s(Qz,"STRONG",{});var zft=n(h_e);i_r=r(zft,"not"),zft.forEach(t),d_r=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=s(Qz,"CODE",{});var Wft=n(u_e);c_r=r(Wft,"from_pretrained()"),Wft.forEach(t),m_r=r(Qz,"to load the model weights."),Qz.forEach(t),f_r=i(ei),p_e=s(ei,"P",{});var Qft=n(p_e);g_r=r(Qft,"Examples:"),Qft.forEach(t),h_r=i(ei),f(E0.$$.fragment,ei),ei.forEach(t),u_r=i(Zl),Eo=s(Zl,"DIV",{class:!0});var Fa=n(Eo);f(y0.$$.fragment,Fa),p_r=i(Fa),__e=s(Fa,"P",{});var Hft=n(__e);__r=r(Hft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hft.forEach(t),b_r=i(Fa),Ts=s(Fa,"P",{});var l5=n(Ts);v_r=r(l5,"The model class to instantiate is selected based on the "),b_e=s(l5,"CODE",{});var Uft=n(b_e);T_r=r(Uft,"model_type"),Uft.forEach(t),F_r=r(l5,` property of the config object (either
passed as an argument or loaded from `),v_e=s(l5,"CODE",{});var Jft=n(v_e);C_r=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),M_r=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=s(l5,"CODE",{});var Yft=n(T_e);E_r=r(Yft,"pretrained_model_name_or_path"),Yft.forEach(t),y_r=r(l5,":"),l5.forEach(t),w_r=i(Fa),F_e=s(Fa,"UL",{});var Kft=n(F_e);MM=s(Kft,"LI",{});var j8e=n(MM);C_e=s(j8e,"STRONG",{});var Zft=n(C_e);A_r=r(Zft,"vision-encoder-decoder"),Zft.forEach(t),L_r=r(j8e," \u2014 "),XO=s(j8e,"A",{href:!0});var egt=n(XO);B_r=r(egt,"TFVisionEncoderDecoderModel"),egt.forEach(t),x_r=r(j8e," (Vision Encoder decoder model)"),j8e.forEach(t),Kft.forEach(t),k_r=i(Fa),M_e=s(Fa,"P",{});var ogt=n(M_e);R_r=r(ogt,"Examples:"),ogt.forEach(t),S_r=i(Fa),f(w0.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),KBe=i(c),Dc=s(c,"H2",{class:!0});var iRe=n(Dc);EM=s(iRe,"A",{id:!0,class:!0,href:!0});var rgt=n(EM);E_e=s(rgt,"SPAN",{});var tgt=n(E_e);f(A0.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),P_r=i(iRe),y_e=s(iRe,"SPAN",{});var agt=n(y_e);$_r=r(agt,"TFAutoModelForSpeechSeq2Seq"),agt.forEach(t),iRe.forEach(t),ZBe=i(c),Ar=s(c,"DIV",{class:!0});var oi=n(Ar);f(L0.$$.fragment,oi),I_r=i(oi),jc=s(oi,"P",{});var Hz=n(jc);D_r=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),w_e=s(Hz,"CODE",{});var sgt=n(w_e);j_r=r(sgt,"from_pretrained()"),sgt.forEach(t),N_r=r(Hz,"class method or the "),A_e=s(Hz,"CODE",{});var ngt=n(A_e);q_r=r(ngt,"from_config()"),ngt.forEach(t),G_r=r(Hz,`class
method.`),Hz.forEach(t),O_r=i(oi),B0=s(oi,"P",{});var dRe=n(B0);X_r=r(dRe,"This class cannot be instantiated directly using "),L_e=s(dRe,"CODE",{});var lgt=n(L_e);V_r=r(lgt,"__init__()"),lgt.forEach(t),z_r=r(dRe," (throws an error)."),dRe.forEach(t),W_r=i(oi),Tt=s(oi,"DIV",{class:!0});var ri=n(Tt);f(x0.$$.fragment,ri),Q_r=i(ri),B_e=s(ri,"P",{});var igt=n(B_e);H_r=r(igt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),igt.forEach(t),U_r=i(ri),Nc=s(ri,"P",{});var Uz=n(Nc);J_r=r(Uz,`Note:
Loading a model from its configuration file does `),x_e=s(Uz,"STRONG",{});var dgt=n(x_e);Y_r=r(dgt,"not"),dgt.forEach(t),K_r=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=s(Uz,"CODE",{});var cgt=n(k_e);Z_r=r(cgt,"from_pretrained()"),cgt.forEach(t),ebr=r(Uz,"to load the model weights."),Uz.forEach(t),obr=i(ri),R_e=s(ri,"P",{});var mgt=n(R_e);rbr=r(mgt,"Examples:"),mgt.forEach(t),tbr=i(ri),f(k0.$$.fragment,ri),ri.forEach(t),abr=i(oi),yo=s(oi,"DIV",{class:!0});var Ca=n(yo);f(R0.$$.fragment,Ca),sbr=i(Ca),S_e=s(Ca,"P",{});var fgt=n(S_e);nbr=r(fgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fgt.forEach(t),lbr=i(Ca),Fs=s(Ca,"P",{});var i5=n(Fs);ibr=r(i5,"The model class to instantiate is selected based on the "),P_e=s(i5,"CODE",{});var ggt=n(P_e);dbr=r(ggt,"model_type"),ggt.forEach(t),cbr=r(i5,` property of the config object (either
passed as an argument or loaded from `),$_e=s(i5,"CODE",{});var hgt=n($_e);mbr=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),fbr=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=s(i5,"CODE",{});var ugt=n(I_e);gbr=r(ugt,"pretrained_model_name_or_path"),ugt.forEach(t),hbr=r(i5,":"),i5.forEach(t),ubr=i(Ca),D_e=s(Ca,"UL",{});var pgt=n(D_e);yM=s(pgt,"LI",{});var N8e=n(yM);j_e=s(N8e,"STRONG",{});var _gt=n(j_e);pbr=r(_gt,"speech_to_text"),_gt.forEach(t),_br=r(N8e," \u2014 "),VO=s(N8e,"A",{href:!0});var bgt=n(VO);bbr=r(bgt,"TFSpeech2TextForConditionalGeneration"),bgt.forEach(t),vbr=r(N8e," (Speech2Text model)"),N8e.forEach(t),pgt.forEach(t),Tbr=i(Ca),N_e=s(Ca,"P",{});var vgt=n(N_e);Fbr=r(vgt,"Examples:"),vgt.forEach(t),Cbr=i(Ca),f(S0.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),exe=i(c),qc=s(c,"H2",{class:!0});var cRe=n(qc);wM=s(cRe,"A",{id:!0,class:!0,href:!0});var Tgt=n(wM);q_e=s(Tgt,"SPAN",{});var Fgt=n(q_e);f(P0.$$.fragment,Fgt),Fgt.forEach(t),Tgt.forEach(t),Mbr=i(cRe),G_e=s(cRe,"SPAN",{});var Cgt=n(G_e);Ebr=r(Cgt,"FlaxAutoModel"),Cgt.forEach(t),cRe.forEach(t),oxe=i(c),Lr=s(c,"DIV",{class:!0});var ti=n(Lr);f($0.$$.fragment,ti),ybr=i(ti),Gc=s(ti,"P",{});var Jz=n(Gc);wbr=r(Jz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),O_e=s(Jz,"CODE",{});var Mgt=n(O_e);Abr=r(Mgt,"from_pretrained()"),Mgt.forEach(t),Lbr=r(Jz,"class method or the "),X_e=s(Jz,"CODE",{});var Egt=n(X_e);Bbr=r(Egt,"from_config()"),Egt.forEach(t),xbr=r(Jz,`class
method.`),Jz.forEach(t),kbr=i(ti),I0=s(ti,"P",{});var mRe=n(I0);Rbr=r(mRe,"This class cannot be instantiated directly using "),V_e=s(mRe,"CODE",{});var ygt=n(V_e);Sbr=r(ygt,"__init__()"),ygt.forEach(t),Pbr=r(mRe," (throws an error)."),mRe.forEach(t),$br=i(ti),Ft=s(ti,"DIV",{class:!0});var ai=n(Ft);f(D0.$$.fragment,ai),Ibr=i(ai),z_e=s(ai,"P",{});var wgt=n(z_e);Dbr=r(wgt,"Instantiates one of the base model classes of the library from a configuration."),wgt.forEach(t),jbr=i(ai),Oc=s(ai,"P",{});var Yz=n(Oc);Nbr=r(Yz,`Note:
Loading a model from its configuration file does `),W_e=s(Yz,"STRONG",{});var Agt=n(W_e);qbr=r(Agt,"not"),Agt.forEach(t),Gbr=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q_e=s(Yz,"CODE",{});var Lgt=n(Q_e);Obr=r(Lgt,"from_pretrained()"),Lgt.forEach(t),Xbr=r(Yz,"to load the model weights."),Yz.forEach(t),Vbr=i(ai),H_e=s(ai,"P",{});var Bgt=n(H_e);zbr=r(Bgt,"Examples:"),Bgt.forEach(t),Wbr=i(ai),f(j0.$$.fragment,ai),ai.forEach(t),Qbr=i(ti),wo=s(ti,"DIV",{class:!0});var Ma=n(wo);f(N0.$$.fragment,Ma),Hbr=i(Ma),U_e=s(Ma,"P",{});var xgt=n(U_e);Ubr=r(xgt,"Instantiate one of the base model classes of the library from a pretrained model."),xgt.forEach(t),Jbr=i(Ma),Cs=s(Ma,"P",{});var d5=n(Cs);Ybr=r(d5,"The model class to instantiate is selected based on the "),J_e=s(d5,"CODE",{});var kgt=n(J_e);Kbr=r(kgt,"model_type"),kgt.forEach(t),Zbr=r(d5,` property of the config object (either
passed as an argument or loaded from `),Y_e=s(d5,"CODE",{});var Rgt=n(Y_e);e2r=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),o2r=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=s(d5,"CODE",{});var Sgt=n(K_e);r2r=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),t2r=r(d5,":"),d5.forEach(t),a2r=i(Ma),z=s(Ma,"UL",{});var Q=n(z);AM=s(Q,"LI",{});var q8e=n(AM);Z_e=s(q8e,"STRONG",{});var Pgt=n(Z_e);s2r=r(Pgt,"albert"),Pgt.forEach(t),n2r=r(q8e," \u2014 "),zO=s(q8e,"A",{href:!0});var $gt=n(zO);l2r=r($gt,"FlaxAlbertModel"),$gt.forEach(t),i2r=r(q8e," (ALBERT model)"),q8e.forEach(t),d2r=i(Q),LM=s(Q,"LI",{});var G8e=n(LM);ebe=s(G8e,"STRONG",{});var Igt=n(ebe);c2r=r(Igt,"bart"),Igt.forEach(t),m2r=r(G8e," \u2014 "),WO=s(G8e,"A",{href:!0});var Dgt=n(WO);f2r=r(Dgt,"FlaxBartModel"),Dgt.forEach(t),g2r=r(G8e," (BART model)"),G8e.forEach(t),h2r=i(Q),BM=s(Q,"LI",{});var O8e=n(BM);obe=s(O8e,"STRONG",{});var jgt=n(obe);u2r=r(jgt,"beit"),jgt.forEach(t),p2r=r(O8e," \u2014 "),QO=s(O8e,"A",{href:!0});var Ngt=n(QO);_2r=r(Ngt,"FlaxBeitModel"),Ngt.forEach(t),b2r=r(O8e," (BEiT model)"),O8e.forEach(t),v2r=i(Q),xM=s(Q,"LI",{});var X8e=n(xM);rbe=s(X8e,"STRONG",{});var qgt=n(rbe);T2r=r(qgt,"bert"),qgt.forEach(t),F2r=r(X8e," \u2014 "),HO=s(X8e,"A",{href:!0});var Ggt=n(HO);C2r=r(Ggt,"FlaxBertModel"),Ggt.forEach(t),M2r=r(X8e," (BERT model)"),X8e.forEach(t),E2r=i(Q),kM=s(Q,"LI",{});var V8e=n(kM);tbe=s(V8e,"STRONG",{});var Ogt=n(tbe);y2r=r(Ogt,"big_bird"),Ogt.forEach(t),w2r=r(V8e," \u2014 "),UO=s(V8e,"A",{href:!0});var Xgt=n(UO);A2r=r(Xgt,"FlaxBigBirdModel"),Xgt.forEach(t),L2r=r(V8e," (BigBird model)"),V8e.forEach(t),B2r=i(Q),RM=s(Q,"LI",{});var z8e=n(RM);abe=s(z8e,"STRONG",{});var Vgt=n(abe);x2r=r(Vgt,"blenderbot"),Vgt.forEach(t),k2r=r(z8e," \u2014 "),JO=s(z8e,"A",{href:!0});var zgt=n(JO);R2r=r(zgt,"FlaxBlenderbotModel"),zgt.forEach(t),S2r=r(z8e," (Blenderbot model)"),z8e.forEach(t),P2r=i(Q),SM=s(Q,"LI",{});var W8e=n(SM);sbe=s(W8e,"STRONG",{});var Wgt=n(sbe);$2r=r(Wgt,"blenderbot-small"),Wgt.forEach(t),I2r=r(W8e," \u2014 "),YO=s(W8e,"A",{href:!0});var Qgt=n(YO);D2r=r(Qgt,"FlaxBlenderbotSmallModel"),Qgt.forEach(t),j2r=r(W8e," (BlenderbotSmall model)"),W8e.forEach(t),N2r=i(Q),PM=s(Q,"LI",{});var Q8e=n(PM);nbe=s(Q8e,"STRONG",{});var Hgt=n(nbe);q2r=r(Hgt,"clip"),Hgt.forEach(t),G2r=r(Q8e," \u2014 "),KO=s(Q8e,"A",{href:!0});var Ugt=n(KO);O2r=r(Ugt,"FlaxCLIPModel"),Ugt.forEach(t),X2r=r(Q8e," (CLIP model)"),Q8e.forEach(t),V2r=i(Q),$M=s(Q,"LI",{});var H8e=n($M);lbe=s(H8e,"STRONG",{});var Jgt=n(lbe);z2r=r(Jgt,"distilbert"),Jgt.forEach(t),W2r=r(H8e," \u2014 "),ZO=s(H8e,"A",{href:!0});var Ygt=n(ZO);Q2r=r(Ygt,"FlaxDistilBertModel"),Ygt.forEach(t),H2r=r(H8e," (DistilBERT model)"),H8e.forEach(t),U2r=i(Q),IM=s(Q,"LI",{});var U8e=n(IM);ibe=s(U8e,"STRONG",{});var Kgt=n(ibe);J2r=r(Kgt,"electra"),Kgt.forEach(t),Y2r=r(U8e," \u2014 "),eX=s(U8e,"A",{href:!0});var Zgt=n(eX);K2r=r(Zgt,"FlaxElectraModel"),Zgt.forEach(t),Z2r=r(U8e," (ELECTRA model)"),U8e.forEach(t),evr=i(Q),DM=s(Q,"LI",{});var J8e=n(DM);dbe=s(J8e,"STRONG",{});var eht=n(dbe);ovr=r(eht,"gpt2"),eht.forEach(t),rvr=r(J8e," \u2014 "),oX=s(J8e,"A",{href:!0});var oht=n(oX);tvr=r(oht,"FlaxGPT2Model"),oht.forEach(t),avr=r(J8e," (OpenAI GPT-2 model)"),J8e.forEach(t),svr=i(Q),jM=s(Q,"LI",{});var Y8e=n(jM);cbe=s(Y8e,"STRONG",{});var rht=n(cbe);nvr=r(rht,"gpt_neo"),rht.forEach(t),lvr=r(Y8e," \u2014 "),rX=s(Y8e,"A",{href:!0});var tht=n(rX);ivr=r(tht,"FlaxGPTNeoModel"),tht.forEach(t),dvr=r(Y8e," (GPT Neo model)"),Y8e.forEach(t),cvr=i(Q),NM=s(Q,"LI",{});var K8e=n(NM);mbe=s(K8e,"STRONG",{});var aht=n(mbe);mvr=r(aht,"gptj"),aht.forEach(t),fvr=r(K8e," \u2014 "),tX=s(K8e,"A",{href:!0});var sht=n(tX);gvr=r(sht,"FlaxGPTJModel"),sht.forEach(t),hvr=r(K8e," (GPT-J model)"),K8e.forEach(t),uvr=i(Q),qM=s(Q,"LI",{});var Z8e=n(qM);fbe=s(Z8e,"STRONG",{});var nht=n(fbe);pvr=r(nht,"marian"),nht.forEach(t),_vr=r(Z8e," \u2014 "),aX=s(Z8e,"A",{href:!0});var lht=n(aX);bvr=r(lht,"FlaxMarianModel"),lht.forEach(t),vvr=r(Z8e," (Marian model)"),Z8e.forEach(t),Tvr=i(Q),GM=s(Q,"LI",{});var e7e=n(GM);gbe=s(e7e,"STRONG",{});var iht=n(gbe);Fvr=r(iht,"mbart"),iht.forEach(t),Cvr=r(e7e," \u2014 "),sX=s(e7e,"A",{href:!0});var dht=n(sX);Mvr=r(dht,"FlaxMBartModel"),dht.forEach(t),Evr=r(e7e," (mBART model)"),e7e.forEach(t),yvr=i(Q),OM=s(Q,"LI",{});var o7e=n(OM);hbe=s(o7e,"STRONG",{});var cht=n(hbe);wvr=r(cht,"mt5"),cht.forEach(t),Avr=r(o7e," \u2014 "),nX=s(o7e,"A",{href:!0});var mht=n(nX);Lvr=r(mht,"FlaxMT5Model"),mht.forEach(t),Bvr=r(o7e," (mT5 model)"),o7e.forEach(t),xvr=i(Q),XM=s(Q,"LI",{});var r7e=n(XM);ube=s(r7e,"STRONG",{});var fht=n(ube);kvr=r(fht,"pegasus"),fht.forEach(t),Rvr=r(r7e," \u2014 "),lX=s(r7e,"A",{href:!0});var ght=n(lX);Svr=r(ght,"FlaxPegasusModel"),ght.forEach(t),Pvr=r(r7e," (Pegasus model)"),r7e.forEach(t),$vr=i(Q),VM=s(Q,"LI",{});var t7e=n(VM);pbe=s(t7e,"STRONG",{});var hht=n(pbe);Ivr=r(hht,"roberta"),hht.forEach(t),Dvr=r(t7e," \u2014 "),iX=s(t7e,"A",{href:!0});var uht=n(iX);jvr=r(uht,"FlaxRobertaModel"),uht.forEach(t),Nvr=r(t7e," (RoBERTa model)"),t7e.forEach(t),qvr=i(Q),zM=s(Q,"LI",{});var a7e=n(zM);_be=s(a7e,"STRONG",{});var pht=n(_be);Gvr=r(pht,"roformer"),pht.forEach(t),Ovr=r(a7e," \u2014 "),dX=s(a7e,"A",{href:!0});var _ht=n(dX);Xvr=r(_ht,"FlaxRoFormerModel"),_ht.forEach(t),Vvr=r(a7e," (RoFormer model)"),a7e.forEach(t),zvr=i(Q),WM=s(Q,"LI",{});var s7e=n(WM);bbe=s(s7e,"STRONG",{});var bht=n(bbe);Wvr=r(bht,"t5"),bht.forEach(t),Qvr=r(s7e," \u2014 "),cX=s(s7e,"A",{href:!0});var vht=n(cX);Hvr=r(vht,"FlaxT5Model"),vht.forEach(t),Uvr=r(s7e," (T5 model)"),s7e.forEach(t),Jvr=i(Q),QM=s(Q,"LI",{});var n7e=n(QM);vbe=s(n7e,"STRONG",{});var Tht=n(vbe);Yvr=r(Tht,"vision-text-dual-encoder"),Tht.forEach(t),Kvr=r(n7e," \u2014 "),mX=s(n7e,"A",{href:!0});var Fht=n(mX);Zvr=r(Fht,"FlaxVisionTextDualEncoderModel"),Fht.forEach(t),eTr=r(n7e," (VisionTextDualEncoder model)"),n7e.forEach(t),oTr=i(Q),HM=s(Q,"LI",{});var l7e=n(HM);Tbe=s(l7e,"STRONG",{});var Cht=n(Tbe);rTr=r(Cht,"vit"),Cht.forEach(t),tTr=r(l7e," \u2014 "),fX=s(l7e,"A",{href:!0});var Mht=n(fX);aTr=r(Mht,"FlaxViTModel"),Mht.forEach(t),sTr=r(l7e," (ViT model)"),l7e.forEach(t),nTr=i(Q),UM=s(Q,"LI",{});var i7e=n(UM);Fbe=s(i7e,"STRONG",{});var Eht=n(Fbe);lTr=r(Eht,"wav2vec2"),Eht.forEach(t),iTr=r(i7e," \u2014 "),gX=s(i7e,"A",{href:!0});var yht=n(gX);dTr=r(yht,"FlaxWav2Vec2Model"),yht.forEach(t),cTr=r(i7e," (Wav2Vec2 model)"),i7e.forEach(t),mTr=i(Q),JM=s(Q,"LI",{});var d7e=n(JM);Cbe=s(d7e,"STRONG",{});var wht=n(Cbe);fTr=r(wht,"xglm"),wht.forEach(t),gTr=r(d7e," \u2014 "),hX=s(d7e,"A",{href:!0});var Aht=n(hX);hTr=r(Aht,"FlaxXGLMModel"),Aht.forEach(t),uTr=r(d7e," (XGLM model)"),d7e.forEach(t),Q.forEach(t),pTr=i(Ma),Mbe=s(Ma,"P",{});var Lht=n(Mbe);_Tr=r(Lht,"Examples:"),Lht.forEach(t),bTr=i(Ma),f(q0.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),rxe=i(c),Xc=s(c,"H2",{class:!0});var fRe=n(Xc);YM=s(fRe,"A",{id:!0,class:!0,href:!0});var Bht=n(YM);Ebe=s(Bht,"SPAN",{});var xht=n(Ebe);f(G0.$$.fragment,xht),xht.forEach(t),Bht.forEach(t),vTr=i(fRe),ybe=s(fRe,"SPAN",{});var kht=n(ybe);TTr=r(kht,"FlaxAutoModelForCausalLM"),kht.forEach(t),fRe.forEach(t),txe=i(c),Br=s(c,"DIV",{class:!0});var si=n(Br);f(O0.$$.fragment,si),FTr=i(si),Vc=s(si,"P",{});var Kz=n(Vc);CTr=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wbe=s(Kz,"CODE",{});var Rht=n(wbe);MTr=r(Rht,"from_pretrained()"),Rht.forEach(t),ETr=r(Kz,"class method or the "),Abe=s(Kz,"CODE",{});var Sht=n(Abe);yTr=r(Sht,"from_config()"),Sht.forEach(t),wTr=r(Kz,`class
method.`),Kz.forEach(t),ATr=i(si),X0=s(si,"P",{});var gRe=n(X0);LTr=r(gRe,"This class cannot be instantiated directly using "),Lbe=s(gRe,"CODE",{});var Pht=n(Lbe);BTr=r(Pht,"__init__()"),Pht.forEach(t),xTr=r(gRe," (throws an error)."),gRe.forEach(t),kTr=i(si),Ct=s(si,"DIV",{class:!0});var ni=n(Ct);f(V0.$$.fragment,ni),RTr=i(ni),Bbe=s(ni,"P",{});var $ht=n(Bbe);STr=r($ht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$ht.forEach(t),PTr=i(ni),zc=s(ni,"P",{});var Zz=n(zc);$Tr=r(Zz,`Note:
Loading a model from its configuration file does `),xbe=s(Zz,"STRONG",{});var Iht=n(xbe);ITr=r(Iht,"not"),Iht.forEach(t),DTr=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kbe=s(Zz,"CODE",{});var Dht=n(kbe);jTr=r(Dht,"from_pretrained()"),Dht.forEach(t),NTr=r(Zz,"to load the model weights."),Zz.forEach(t),qTr=i(ni),Rbe=s(ni,"P",{});var jht=n(Rbe);GTr=r(jht,"Examples:"),jht.forEach(t),OTr=i(ni),f(z0.$$.fragment,ni),ni.forEach(t),XTr=i(si),Ao=s(si,"DIV",{class:!0});var Ea=n(Ao);f(W0.$$.fragment,Ea),VTr=i(Ea),Sbe=s(Ea,"P",{});var Nht=n(Sbe);zTr=r(Nht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nht.forEach(t),WTr=i(Ea),Ms=s(Ea,"P",{});var c5=n(Ms);QTr=r(c5,"The model class to instantiate is selected based on the "),Pbe=s(c5,"CODE",{});var qht=n(Pbe);HTr=r(qht,"model_type"),qht.forEach(t),UTr=r(c5,` property of the config object (either
passed as an argument or loaded from `),$be=s(c5,"CODE",{});var Ght=n($be);JTr=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),YTr=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=s(c5,"CODE",{});var Oht=n(Ibe);KTr=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),ZTr=r(c5,":"),c5.forEach(t),e1r=i(Ea),Es=s(Ea,"UL",{});var m5=n(Es);KM=s(m5,"LI",{});var c7e=n(KM);Dbe=s(c7e,"STRONG",{});var Xht=n(Dbe);o1r=r(Xht,"gpt2"),Xht.forEach(t),r1r=r(c7e," \u2014 "),uX=s(c7e,"A",{href:!0});var Vht=n(uX);t1r=r(Vht,"FlaxGPT2LMHeadModel"),Vht.forEach(t),a1r=r(c7e," (OpenAI GPT-2 model)"),c7e.forEach(t),s1r=i(m5),ZM=s(m5,"LI",{});var m7e=n(ZM);jbe=s(m7e,"STRONG",{});var zht=n(jbe);n1r=r(zht,"gpt_neo"),zht.forEach(t),l1r=r(m7e," \u2014 "),pX=s(m7e,"A",{href:!0});var Wht=n(pX);i1r=r(Wht,"FlaxGPTNeoForCausalLM"),Wht.forEach(t),d1r=r(m7e," (GPT Neo model)"),m7e.forEach(t),c1r=i(m5),eE=s(m5,"LI",{});var f7e=n(eE);Nbe=s(f7e,"STRONG",{});var Qht=n(Nbe);m1r=r(Qht,"gptj"),Qht.forEach(t),f1r=r(f7e," \u2014 "),_X=s(f7e,"A",{href:!0});var Hht=n(_X);g1r=r(Hht,"FlaxGPTJForCausalLM"),Hht.forEach(t),h1r=r(f7e," (GPT-J model)"),f7e.forEach(t),u1r=i(m5),oE=s(m5,"LI",{});var g7e=n(oE);qbe=s(g7e,"STRONG",{});var Uht=n(qbe);p1r=r(Uht,"xglm"),Uht.forEach(t),_1r=r(g7e," \u2014 "),bX=s(g7e,"A",{href:!0});var Jht=n(bX);b1r=r(Jht,"FlaxXGLMForCausalLM"),Jht.forEach(t),v1r=r(g7e," (XGLM model)"),g7e.forEach(t),m5.forEach(t),T1r=i(Ea),Gbe=s(Ea,"P",{});var Yht=n(Gbe);F1r=r(Yht,"Examples:"),Yht.forEach(t),C1r=i(Ea),f(Q0.$$.fragment,Ea),Ea.forEach(t),si.forEach(t),axe=i(c),Wc=s(c,"H2",{class:!0});var hRe=n(Wc);rE=s(hRe,"A",{id:!0,class:!0,href:!0});var Kht=n(rE);Obe=s(Kht,"SPAN",{});var Zht=n(Obe);f(H0.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),M1r=i(hRe),Xbe=s(hRe,"SPAN",{});var eut=n(Xbe);E1r=r(eut,"FlaxAutoModelForPreTraining"),eut.forEach(t),hRe.forEach(t),sxe=i(c),xr=s(c,"DIV",{class:!0});var li=n(xr);f(U0.$$.fragment,li),y1r=i(li),Qc=s(li,"P",{});var eW=n(Qc);w1r=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vbe=s(eW,"CODE",{});var out=n(Vbe);A1r=r(out,"from_pretrained()"),out.forEach(t),L1r=r(eW,"class method or the "),zbe=s(eW,"CODE",{});var rut=n(zbe);B1r=r(rut,"from_config()"),rut.forEach(t),x1r=r(eW,`class
method.`),eW.forEach(t),k1r=i(li),J0=s(li,"P",{});var uRe=n(J0);R1r=r(uRe,"This class cannot be instantiated directly using "),Wbe=s(uRe,"CODE",{});var tut=n(Wbe);S1r=r(tut,"__init__()"),tut.forEach(t),P1r=r(uRe," (throws an error)."),uRe.forEach(t),$1r=i(li),Mt=s(li,"DIV",{class:!0});var ii=n(Mt);f(Y0.$$.fragment,ii),I1r=i(ii),Qbe=s(ii,"P",{});var aut=n(Qbe);D1r=r(aut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aut.forEach(t),j1r=i(ii),Hc=s(ii,"P",{});var oW=n(Hc);N1r=r(oW,`Note:
Loading a model from its configuration file does `),Hbe=s(oW,"STRONG",{});var sut=n(Hbe);q1r=r(sut,"not"),sut.forEach(t),G1r=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ube=s(oW,"CODE",{});var nut=n(Ube);O1r=r(nut,"from_pretrained()"),nut.forEach(t),X1r=r(oW,"to load the model weights."),oW.forEach(t),V1r=i(ii),Jbe=s(ii,"P",{});var lut=n(Jbe);z1r=r(lut,"Examples:"),lut.forEach(t),W1r=i(ii),f(K0.$$.fragment,ii),ii.forEach(t),Q1r=i(li),Lo=s(li,"DIV",{class:!0});var ya=n(Lo);f(Z0.$$.fragment,ya),H1r=i(ya),Ybe=s(ya,"P",{});var iut=n(Ybe);U1r=r(iut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iut.forEach(t),J1r=i(ya),ys=s(ya,"P",{});var f5=n(ys);Y1r=r(f5,"The model class to instantiate is selected based on the "),Kbe=s(f5,"CODE",{});var dut=n(Kbe);K1r=r(dut,"model_type"),dut.forEach(t),Z1r=r(f5,` property of the config object (either
passed as an argument or loaded from `),Zbe=s(f5,"CODE",{});var cut=n(Zbe);eFr=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),oFr=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=s(f5,"CODE",{});var mut=n(e2e);rFr=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),tFr=r(f5,":"),f5.forEach(t),aFr=i(ya),me=s(ya,"UL",{});var pe=n(me);tE=s(pe,"LI",{});var h7e=n(tE);o2e=s(h7e,"STRONG",{});var fut=n(o2e);sFr=r(fut,"albert"),fut.forEach(t),nFr=r(h7e," \u2014 "),vX=s(h7e,"A",{href:!0});var gut=n(vX);lFr=r(gut,"FlaxAlbertForPreTraining"),gut.forEach(t),iFr=r(h7e," (ALBERT model)"),h7e.forEach(t),dFr=i(pe),aE=s(pe,"LI",{});var u7e=n(aE);r2e=s(u7e,"STRONG",{});var hut=n(r2e);cFr=r(hut,"bart"),hut.forEach(t),mFr=r(u7e," \u2014 "),TX=s(u7e,"A",{href:!0});var uut=n(TX);fFr=r(uut,"FlaxBartForConditionalGeneration"),uut.forEach(t),gFr=r(u7e," (BART model)"),u7e.forEach(t),hFr=i(pe),sE=s(pe,"LI",{});var p7e=n(sE);t2e=s(p7e,"STRONG",{});var put=n(t2e);uFr=r(put,"bert"),put.forEach(t),pFr=r(p7e," \u2014 "),FX=s(p7e,"A",{href:!0});var _ut=n(FX);_Fr=r(_ut,"FlaxBertForPreTraining"),_ut.forEach(t),bFr=r(p7e," (BERT model)"),p7e.forEach(t),vFr=i(pe),nE=s(pe,"LI",{});var _7e=n(nE);a2e=s(_7e,"STRONG",{});var but=n(a2e);TFr=r(but,"big_bird"),but.forEach(t),FFr=r(_7e," \u2014 "),CX=s(_7e,"A",{href:!0});var vut=n(CX);CFr=r(vut,"FlaxBigBirdForPreTraining"),vut.forEach(t),MFr=r(_7e," (BigBird model)"),_7e.forEach(t),EFr=i(pe),lE=s(pe,"LI",{});var b7e=n(lE);s2e=s(b7e,"STRONG",{});var Tut=n(s2e);yFr=r(Tut,"electra"),Tut.forEach(t),wFr=r(b7e," \u2014 "),MX=s(b7e,"A",{href:!0});var Fut=n(MX);AFr=r(Fut,"FlaxElectraForPreTraining"),Fut.forEach(t),LFr=r(b7e," (ELECTRA model)"),b7e.forEach(t),BFr=i(pe),iE=s(pe,"LI",{});var v7e=n(iE);n2e=s(v7e,"STRONG",{});var Cut=n(n2e);xFr=r(Cut,"mbart"),Cut.forEach(t),kFr=r(v7e," \u2014 "),EX=s(v7e,"A",{href:!0});var Mut=n(EX);RFr=r(Mut,"FlaxMBartForConditionalGeneration"),Mut.forEach(t),SFr=r(v7e," (mBART model)"),v7e.forEach(t),PFr=i(pe),dE=s(pe,"LI",{});var T7e=n(dE);l2e=s(T7e,"STRONG",{});var Eut=n(l2e);$Fr=r(Eut,"mt5"),Eut.forEach(t),IFr=r(T7e," \u2014 "),yX=s(T7e,"A",{href:!0});var yut=n(yX);DFr=r(yut,"FlaxMT5ForConditionalGeneration"),yut.forEach(t),jFr=r(T7e," (mT5 model)"),T7e.forEach(t),NFr=i(pe),cE=s(pe,"LI",{});var F7e=n(cE);i2e=s(F7e,"STRONG",{});var wut=n(i2e);qFr=r(wut,"roberta"),wut.forEach(t),GFr=r(F7e," \u2014 "),wX=s(F7e,"A",{href:!0});var Aut=n(wX);OFr=r(Aut,"FlaxRobertaForMaskedLM"),Aut.forEach(t),XFr=r(F7e," (RoBERTa model)"),F7e.forEach(t),VFr=i(pe),mE=s(pe,"LI",{});var C7e=n(mE);d2e=s(C7e,"STRONG",{});var Lut=n(d2e);zFr=r(Lut,"roformer"),Lut.forEach(t),WFr=r(C7e," \u2014 "),AX=s(C7e,"A",{href:!0});var But=n(AX);QFr=r(But,"FlaxRoFormerForMaskedLM"),But.forEach(t),HFr=r(C7e," (RoFormer model)"),C7e.forEach(t),UFr=i(pe),fE=s(pe,"LI",{});var M7e=n(fE);c2e=s(M7e,"STRONG",{});var xut=n(c2e);JFr=r(xut,"t5"),xut.forEach(t),YFr=r(M7e," \u2014 "),LX=s(M7e,"A",{href:!0});var kut=n(LX);KFr=r(kut,"FlaxT5ForConditionalGeneration"),kut.forEach(t),ZFr=r(M7e," (T5 model)"),M7e.forEach(t),eCr=i(pe),gE=s(pe,"LI",{});var E7e=n(gE);m2e=s(E7e,"STRONG",{});var Rut=n(m2e);oCr=r(Rut,"wav2vec2"),Rut.forEach(t),rCr=r(E7e," \u2014 "),BX=s(E7e,"A",{href:!0});var Sut=n(BX);tCr=r(Sut,"FlaxWav2Vec2ForPreTraining"),Sut.forEach(t),aCr=r(E7e," (Wav2Vec2 model)"),E7e.forEach(t),pe.forEach(t),sCr=i(ya),f2e=s(ya,"P",{});var Put=n(f2e);nCr=r(Put,"Examples:"),Put.forEach(t),lCr=i(ya),f(eL.$$.fragment,ya),ya.forEach(t),li.forEach(t),nxe=i(c),Uc=s(c,"H2",{class:!0});var pRe=n(Uc);hE=s(pRe,"A",{id:!0,class:!0,href:!0});var $ut=n(hE);g2e=s($ut,"SPAN",{});var Iut=n(g2e);f(oL.$$.fragment,Iut),Iut.forEach(t),$ut.forEach(t),iCr=i(pRe),h2e=s(pRe,"SPAN",{});var Dut=n(h2e);dCr=r(Dut,"FlaxAutoModelForMaskedLM"),Dut.forEach(t),pRe.forEach(t),lxe=i(c),kr=s(c,"DIV",{class:!0});var di=n(kr);f(rL.$$.fragment,di),cCr=i(di),Jc=s(di,"P",{});var rW=n(Jc);mCr=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),u2e=s(rW,"CODE",{});var jut=n(u2e);fCr=r(jut,"from_pretrained()"),jut.forEach(t),gCr=r(rW,"class method or the "),p2e=s(rW,"CODE",{});var Nut=n(p2e);hCr=r(Nut,"from_config()"),Nut.forEach(t),uCr=r(rW,`class
method.`),rW.forEach(t),pCr=i(di),tL=s(di,"P",{});var _Re=n(tL);_Cr=r(_Re,"This class cannot be instantiated directly using "),_2e=s(_Re,"CODE",{});var qut=n(_2e);bCr=r(qut,"__init__()"),qut.forEach(t),vCr=r(_Re," (throws an error)."),_Re.forEach(t),TCr=i(di),Et=s(di,"DIV",{class:!0});var ci=n(Et);f(aL.$$.fragment,ci),FCr=i(ci),b2e=s(ci,"P",{});var Gut=n(b2e);CCr=r(Gut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gut.forEach(t),MCr=i(ci),Yc=s(ci,"P",{});var tW=n(Yc);ECr=r(tW,`Note:
Loading a model from its configuration file does `),v2e=s(tW,"STRONG",{});var Out=n(v2e);yCr=r(Out,"not"),Out.forEach(t),wCr=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=s(tW,"CODE",{});var Xut=n(T2e);ACr=r(Xut,"from_pretrained()"),Xut.forEach(t),LCr=r(tW,"to load the model weights."),tW.forEach(t),BCr=i(ci),F2e=s(ci,"P",{});var Vut=n(F2e);xCr=r(Vut,"Examples:"),Vut.forEach(t),kCr=i(ci),f(sL.$$.fragment,ci),ci.forEach(t),RCr=i(di),Bo=s(di,"DIV",{class:!0});var wa=n(Bo);f(nL.$$.fragment,wa),SCr=i(wa),C2e=s(wa,"P",{});var zut=n(C2e);PCr=r(zut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zut.forEach(t),$Cr=i(wa),ws=s(wa,"P",{});var g5=n(ws);ICr=r(g5,"The model class to instantiate is selected based on the "),M2e=s(g5,"CODE",{});var Wut=n(M2e);DCr=r(Wut,"model_type"),Wut.forEach(t),jCr=r(g5,` property of the config object (either
passed as an argument or loaded from `),E2e=s(g5,"CODE",{});var Qut=n(E2e);NCr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),qCr=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=s(g5,"CODE",{});var Hut=n(y2e);GCr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),OCr=r(g5,":"),g5.forEach(t),XCr=i(wa),ve=s(wa,"UL",{});var oo=n(ve);uE=s(oo,"LI",{});var y7e=n(uE);w2e=s(y7e,"STRONG",{});var Uut=n(w2e);VCr=r(Uut,"albert"),Uut.forEach(t),zCr=r(y7e," \u2014 "),xX=s(y7e,"A",{href:!0});var Jut=n(xX);WCr=r(Jut,"FlaxAlbertForMaskedLM"),Jut.forEach(t),QCr=r(y7e," (ALBERT model)"),y7e.forEach(t),HCr=i(oo),pE=s(oo,"LI",{});var w7e=n(pE);A2e=s(w7e,"STRONG",{});var Yut=n(A2e);UCr=r(Yut,"bart"),Yut.forEach(t),JCr=r(w7e," \u2014 "),kX=s(w7e,"A",{href:!0});var Kut=n(kX);YCr=r(Kut,"FlaxBartForConditionalGeneration"),Kut.forEach(t),KCr=r(w7e," (BART model)"),w7e.forEach(t),ZCr=i(oo),_E=s(oo,"LI",{});var A7e=n(_E);L2e=s(A7e,"STRONG",{});var Zut=n(L2e);e4r=r(Zut,"bert"),Zut.forEach(t),o4r=r(A7e," \u2014 "),RX=s(A7e,"A",{href:!0});var ept=n(RX);r4r=r(ept,"FlaxBertForMaskedLM"),ept.forEach(t),t4r=r(A7e," (BERT model)"),A7e.forEach(t),a4r=i(oo),bE=s(oo,"LI",{});var L7e=n(bE);B2e=s(L7e,"STRONG",{});var opt=n(B2e);s4r=r(opt,"big_bird"),opt.forEach(t),n4r=r(L7e," \u2014 "),SX=s(L7e,"A",{href:!0});var rpt=n(SX);l4r=r(rpt,"FlaxBigBirdForMaskedLM"),rpt.forEach(t),i4r=r(L7e," (BigBird model)"),L7e.forEach(t),d4r=i(oo),vE=s(oo,"LI",{});var B7e=n(vE);x2e=s(B7e,"STRONG",{});var tpt=n(x2e);c4r=r(tpt,"distilbert"),tpt.forEach(t),m4r=r(B7e," \u2014 "),PX=s(B7e,"A",{href:!0});var apt=n(PX);f4r=r(apt,"FlaxDistilBertForMaskedLM"),apt.forEach(t),g4r=r(B7e," (DistilBERT model)"),B7e.forEach(t),h4r=i(oo),TE=s(oo,"LI",{});var x7e=n(TE);k2e=s(x7e,"STRONG",{});var spt=n(k2e);u4r=r(spt,"electra"),spt.forEach(t),p4r=r(x7e," \u2014 "),$X=s(x7e,"A",{href:!0});var npt=n($X);_4r=r(npt,"FlaxElectraForMaskedLM"),npt.forEach(t),b4r=r(x7e," (ELECTRA model)"),x7e.forEach(t),v4r=i(oo),FE=s(oo,"LI",{});var k7e=n(FE);R2e=s(k7e,"STRONG",{});var lpt=n(R2e);T4r=r(lpt,"mbart"),lpt.forEach(t),F4r=r(k7e," \u2014 "),IX=s(k7e,"A",{href:!0});var ipt=n(IX);C4r=r(ipt,"FlaxMBartForConditionalGeneration"),ipt.forEach(t),M4r=r(k7e," (mBART model)"),k7e.forEach(t),E4r=i(oo),CE=s(oo,"LI",{});var R7e=n(CE);S2e=s(R7e,"STRONG",{});var dpt=n(S2e);y4r=r(dpt,"roberta"),dpt.forEach(t),w4r=r(R7e," \u2014 "),DX=s(R7e,"A",{href:!0});var cpt=n(DX);A4r=r(cpt,"FlaxRobertaForMaskedLM"),cpt.forEach(t),L4r=r(R7e," (RoBERTa model)"),R7e.forEach(t),B4r=i(oo),ME=s(oo,"LI",{});var S7e=n(ME);P2e=s(S7e,"STRONG",{});var mpt=n(P2e);x4r=r(mpt,"roformer"),mpt.forEach(t),k4r=r(S7e," \u2014 "),jX=s(S7e,"A",{href:!0});var fpt=n(jX);R4r=r(fpt,"FlaxRoFormerForMaskedLM"),fpt.forEach(t),S4r=r(S7e," (RoFormer model)"),S7e.forEach(t),oo.forEach(t),P4r=i(wa),$2e=s(wa,"P",{});var gpt=n($2e);$4r=r(gpt,"Examples:"),gpt.forEach(t),I4r=i(wa),f(lL.$$.fragment,wa),wa.forEach(t),di.forEach(t),ixe=i(c),Kc=s(c,"H2",{class:!0});var bRe=n(Kc);EE=s(bRe,"A",{id:!0,class:!0,href:!0});var hpt=n(EE);I2e=s(hpt,"SPAN",{});var upt=n(I2e);f(iL.$$.fragment,upt),upt.forEach(t),hpt.forEach(t),D4r=i(bRe),D2e=s(bRe,"SPAN",{});var ppt=n(D2e);j4r=r(ppt,"FlaxAutoModelForSeq2SeqLM"),ppt.forEach(t),bRe.forEach(t),dxe=i(c),Rr=s(c,"DIV",{class:!0});var mi=n(Rr);f(dL.$$.fragment,mi),N4r=i(mi),Zc=s(mi,"P",{});var aW=n(Zc);q4r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),j2e=s(aW,"CODE",{});var _pt=n(j2e);G4r=r(_pt,"from_pretrained()"),_pt.forEach(t),O4r=r(aW,"class method or the "),N2e=s(aW,"CODE",{});var bpt=n(N2e);X4r=r(bpt,"from_config()"),bpt.forEach(t),V4r=r(aW,`class
method.`),aW.forEach(t),z4r=i(mi),cL=s(mi,"P",{});var vRe=n(cL);W4r=r(vRe,"This class cannot be instantiated directly using "),q2e=s(vRe,"CODE",{});var vpt=n(q2e);Q4r=r(vpt,"__init__()"),vpt.forEach(t),H4r=r(vRe," (throws an error)."),vRe.forEach(t),U4r=i(mi),yt=s(mi,"DIV",{class:!0});var fi=n(yt);f(mL.$$.fragment,fi),J4r=i(fi),G2e=s(fi,"P",{});var Tpt=n(G2e);Y4r=r(Tpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tpt.forEach(t),K4r=i(fi),em=s(fi,"P",{});var sW=n(em);Z4r=r(sW,`Note:
Loading a model from its configuration file does `),O2e=s(sW,"STRONG",{});var Fpt=n(O2e);eMr=r(Fpt,"not"),Fpt.forEach(t),oMr=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=s(sW,"CODE",{});var Cpt=n(X2e);rMr=r(Cpt,"from_pretrained()"),Cpt.forEach(t),tMr=r(sW,"to load the model weights."),sW.forEach(t),aMr=i(fi),V2e=s(fi,"P",{});var Mpt=n(V2e);sMr=r(Mpt,"Examples:"),Mpt.forEach(t),nMr=i(fi),f(fL.$$.fragment,fi),fi.forEach(t),lMr=i(mi),xo=s(mi,"DIV",{class:!0});var Aa=n(xo);f(gL.$$.fragment,Aa),iMr=i(Aa),z2e=s(Aa,"P",{});var Ept=n(z2e);dMr=r(Ept,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ept.forEach(t),cMr=i(Aa),As=s(Aa,"P",{});var h5=n(As);mMr=r(h5,"The model class to instantiate is selected based on the "),W2e=s(h5,"CODE",{});var ypt=n(W2e);fMr=r(ypt,"model_type"),ypt.forEach(t),gMr=r(h5,` property of the config object (either
passed as an argument or loaded from `),Q2e=s(h5,"CODE",{});var wpt=n(Q2e);hMr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),uMr=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=s(h5,"CODE",{});var Apt=n(H2e);pMr=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),_Mr=r(h5,":"),h5.forEach(t),bMr=i(Aa),Te=s(Aa,"UL",{});var ro=n(Te);yE=s(ro,"LI",{});var P7e=n(yE);U2e=s(P7e,"STRONG",{});var Lpt=n(U2e);vMr=r(Lpt,"bart"),Lpt.forEach(t),TMr=r(P7e," \u2014 "),NX=s(P7e,"A",{href:!0});var Bpt=n(NX);FMr=r(Bpt,"FlaxBartForConditionalGeneration"),Bpt.forEach(t),CMr=r(P7e," (BART model)"),P7e.forEach(t),MMr=i(ro),wE=s(ro,"LI",{});var $7e=n(wE);J2e=s($7e,"STRONG",{});var xpt=n(J2e);EMr=r(xpt,"blenderbot"),xpt.forEach(t),yMr=r($7e," \u2014 "),qX=s($7e,"A",{href:!0});var kpt=n(qX);wMr=r(kpt,"FlaxBlenderbotForConditionalGeneration"),kpt.forEach(t),AMr=r($7e," (Blenderbot model)"),$7e.forEach(t),LMr=i(ro),AE=s(ro,"LI",{});var I7e=n(AE);Y2e=s(I7e,"STRONG",{});var Rpt=n(Y2e);BMr=r(Rpt,"blenderbot-small"),Rpt.forEach(t),xMr=r(I7e," \u2014 "),GX=s(I7e,"A",{href:!0});var Spt=n(GX);kMr=r(Spt,"FlaxBlenderbotSmallForConditionalGeneration"),Spt.forEach(t),RMr=r(I7e," (BlenderbotSmall model)"),I7e.forEach(t),SMr=i(ro),LE=s(ro,"LI",{});var D7e=n(LE);K2e=s(D7e,"STRONG",{});var Ppt=n(K2e);PMr=r(Ppt,"encoder-decoder"),Ppt.forEach(t),$Mr=r(D7e," \u2014 "),OX=s(D7e,"A",{href:!0});var $pt=n(OX);IMr=r($pt,"FlaxEncoderDecoderModel"),$pt.forEach(t),DMr=r(D7e," (Encoder decoder model)"),D7e.forEach(t),jMr=i(ro),BE=s(ro,"LI",{});var j7e=n(BE);Z2e=s(j7e,"STRONG",{});var Ipt=n(Z2e);NMr=r(Ipt,"marian"),Ipt.forEach(t),qMr=r(j7e," \u2014 "),XX=s(j7e,"A",{href:!0});var Dpt=n(XX);GMr=r(Dpt,"FlaxMarianMTModel"),Dpt.forEach(t),OMr=r(j7e," (Marian model)"),j7e.forEach(t),XMr=i(ro),xE=s(ro,"LI",{});var N7e=n(xE);eve=s(N7e,"STRONG",{});var jpt=n(eve);VMr=r(jpt,"mbart"),jpt.forEach(t),zMr=r(N7e," \u2014 "),VX=s(N7e,"A",{href:!0});var Npt=n(VX);WMr=r(Npt,"FlaxMBartForConditionalGeneration"),Npt.forEach(t),QMr=r(N7e," (mBART model)"),N7e.forEach(t),HMr=i(ro),kE=s(ro,"LI",{});var q7e=n(kE);ove=s(q7e,"STRONG",{});var qpt=n(ove);UMr=r(qpt,"mt5"),qpt.forEach(t),JMr=r(q7e," \u2014 "),zX=s(q7e,"A",{href:!0});var Gpt=n(zX);YMr=r(Gpt,"FlaxMT5ForConditionalGeneration"),Gpt.forEach(t),KMr=r(q7e," (mT5 model)"),q7e.forEach(t),ZMr=i(ro),RE=s(ro,"LI",{});var G7e=n(RE);rve=s(G7e,"STRONG",{});var Opt=n(rve);eEr=r(Opt,"pegasus"),Opt.forEach(t),oEr=r(G7e," \u2014 "),WX=s(G7e,"A",{href:!0});var Xpt=n(WX);rEr=r(Xpt,"FlaxPegasusForConditionalGeneration"),Xpt.forEach(t),tEr=r(G7e," (Pegasus model)"),G7e.forEach(t),aEr=i(ro),SE=s(ro,"LI",{});var O7e=n(SE);tve=s(O7e,"STRONG",{});var Vpt=n(tve);sEr=r(Vpt,"t5"),Vpt.forEach(t),nEr=r(O7e," \u2014 "),QX=s(O7e,"A",{href:!0});var zpt=n(QX);lEr=r(zpt,"FlaxT5ForConditionalGeneration"),zpt.forEach(t),iEr=r(O7e," (T5 model)"),O7e.forEach(t),ro.forEach(t),dEr=i(Aa),ave=s(Aa,"P",{});var Wpt=n(ave);cEr=r(Wpt,"Examples:"),Wpt.forEach(t),mEr=i(Aa),f(hL.$$.fragment,Aa),Aa.forEach(t),mi.forEach(t),cxe=i(c),om=s(c,"H2",{class:!0});var TRe=n(om);PE=s(TRe,"A",{id:!0,class:!0,href:!0});var Qpt=n(PE);sve=s(Qpt,"SPAN",{});var Hpt=n(sve);f(uL.$$.fragment,Hpt),Hpt.forEach(t),Qpt.forEach(t),fEr=i(TRe),nve=s(TRe,"SPAN",{});var Upt=n(nve);gEr=r(Upt,"FlaxAutoModelForSequenceClassification"),Upt.forEach(t),TRe.forEach(t),mxe=i(c),Sr=s(c,"DIV",{class:!0});var gi=n(Sr);f(pL.$$.fragment,gi),hEr=i(gi),rm=s(gi,"P",{});var nW=n(rm);uEr=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lve=s(nW,"CODE",{});var Jpt=n(lve);pEr=r(Jpt,"from_pretrained()"),Jpt.forEach(t),_Er=r(nW,"class method or the "),ive=s(nW,"CODE",{});var Ypt=n(ive);bEr=r(Ypt,"from_config()"),Ypt.forEach(t),vEr=r(nW,`class
method.`),nW.forEach(t),TEr=i(gi),_L=s(gi,"P",{});var FRe=n(_L);FEr=r(FRe,"This class cannot be instantiated directly using "),dve=s(FRe,"CODE",{});var Kpt=n(dve);CEr=r(Kpt,"__init__()"),Kpt.forEach(t),MEr=r(FRe," (throws an error)."),FRe.forEach(t),EEr=i(gi),wt=s(gi,"DIV",{class:!0});var hi=n(wt);f(bL.$$.fragment,hi),yEr=i(hi),cve=s(hi,"P",{});var Zpt=n(cve);wEr=r(Zpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zpt.forEach(t),AEr=i(hi),tm=s(hi,"P",{});var lW=n(tm);LEr=r(lW,`Note:
Loading a model from its configuration file does `),mve=s(lW,"STRONG",{});var e_t=n(mve);BEr=r(e_t,"not"),e_t.forEach(t),xEr=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fve=s(lW,"CODE",{});var o_t=n(fve);kEr=r(o_t,"from_pretrained()"),o_t.forEach(t),REr=r(lW,"to load the model weights."),lW.forEach(t),SEr=i(hi),gve=s(hi,"P",{});var r_t=n(gve);PEr=r(r_t,"Examples:"),r_t.forEach(t),$Er=i(hi),f(vL.$$.fragment,hi),hi.forEach(t),IEr=i(gi),ko=s(gi,"DIV",{class:!0});var La=n(ko);f(TL.$$.fragment,La),DEr=i(La),hve=s(La,"P",{});var t_t=n(hve);jEr=r(t_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t_t.forEach(t),NEr=i(La),Ls=s(La,"P",{});var u5=n(Ls);qEr=r(u5,"The model class to instantiate is selected based on the "),uve=s(u5,"CODE",{});var a_t=n(uve);GEr=r(a_t,"model_type"),a_t.forEach(t),OEr=r(u5,` property of the config object (either
passed as an argument or loaded from `),pve=s(u5,"CODE",{});var s_t=n(pve);XEr=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),VEr=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=s(u5,"CODE",{});var n_t=n(_ve);zEr=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),WEr=r(u5,":"),u5.forEach(t),QEr=i(La),Fe=s(La,"UL",{});var to=n(Fe);$E=s(to,"LI",{});var X7e=n($E);bve=s(X7e,"STRONG",{});var l_t=n(bve);HEr=r(l_t,"albert"),l_t.forEach(t),UEr=r(X7e," \u2014 "),HX=s(X7e,"A",{href:!0});var i_t=n(HX);JEr=r(i_t,"FlaxAlbertForSequenceClassification"),i_t.forEach(t),YEr=r(X7e," (ALBERT model)"),X7e.forEach(t),KEr=i(to),IE=s(to,"LI",{});var V7e=n(IE);vve=s(V7e,"STRONG",{});var d_t=n(vve);ZEr=r(d_t,"bart"),d_t.forEach(t),e3r=r(V7e," \u2014 "),UX=s(V7e,"A",{href:!0});var c_t=n(UX);o3r=r(c_t,"FlaxBartForSequenceClassification"),c_t.forEach(t),r3r=r(V7e," (BART model)"),V7e.forEach(t),t3r=i(to),DE=s(to,"LI",{});var z7e=n(DE);Tve=s(z7e,"STRONG",{});var m_t=n(Tve);a3r=r(m_t,"bert"),m_t.forEach(t),s3r=r(z7e," \u2014 "),JX=s(z7e,"A",{href:!0});var f_t=n(JX);n3r=r(f_t,"FlaxBertForSequenceClassification"),f_t.forEach(t),l3r=r(z7e," (BERT model)"),z7e.forEach(t),i3r=i(to),jE=s(to,"LI",{});var W7e=n(jE);Fve=s(W7e,"STRONG",{});var g_t=n(Fve);d3r=r(g_t,"big_bird"),g_t.forEach(t),c3r=r(W7e," \u2014 "),YX=s(W7e,"A",{href:!0});var h_t=n(YX);m3r=r(h_t,"FlaxBigBirdForSequenceClassification"),h_t.forEach(t),f3r=r(W7e," (BigBird model)"),W7e.forEach(t),g3r=i(to),NE=s(to,"LI",{});var Q7e=n(NE);Cve=s(Q7e,"STRONG",{});var u_t=n(Cve);h3r=r(u_t,"distilbert"),u_t.forEach(t),u3r=r(Q7e," \u2014 "),KX=s(Q7e,"A",{href:!0});var p_t=n(KX);p3r=r(p_t,"FlaxDistilBertForSequenceClassification"),p_t.forEach(t),_3r=r(Q7e," (DistilBERT model)"),Q7e.forEach(t),b3r=i(to),qE=s(to,"LI",{});var H7e=n(qE);Mve=s(H7e,"STRONG",{});var __t=n(Mve);v3r=r(__t,"electra"),__t.forEach(t),T3r=r(H7e," \u2014 "),ZX=s(H7e,"A",{href:!0});var b_t=n(ZX);F3r=r(b_t,"FlaxElectraForSequenceClassification"),b_t.forEach(t),C3r=r(H7e," (ELECTRA model)"),H7e.forEach(t),M3r=i(to),GE=s(to,"LI",{});var U7e=n(GE);Eve=s(U7e,"STRONG",{});var v_t=n(Eve);E3r=r(v_t,"mbart"),v_t.forEach(t),y3r=r(U7e," \u2014 "),eV=s(U7e,"A",{href:!0});var T_t=n(eV);w3r=r(T_t,"FlaxMBartForSequenceClassification"),T_t.forEach(t),A3r=r(U7e," (mBART model)"),U7e.forEach(t),L3r=i(to),OE=s(to,"LI",{});var J7e=n(OE);yve=s(J7e,"STRONG",{});var F_t=n(yve);B3r=r(F_t,"roberta"),F_t.forEach(t),x3r=r(J7e," \u2014 "),oV=s(J7e,"A",{href:!0});var C_t=n(oV);k3r=r(C_t,"FlaxRobertaForSequenceClassification"),C_t.forEach(t),R3r=r(J7e," (RoBERTa model)"),J7e.forEach(t),S3r=i(to),XE=s(to,"LI",{});var Y7e=n(XE);wve=s(Y7e,"STRONG",{});var M_t=n(wve);P3r=r(M_t,"roformer"),M_t.forEach(t),$3r=r(Y7e," \u2014 "),rV=s(Y7e,"A",{href:!0});var E_t=n(rV);I3r=r(E_t,"FlaxRoFormerForSequenceClassification"),E_t.forEach(t),D3r=r(Y7e," (RoFormer model)"),Y7e.forEach(t),to.forEach(t),j3r=i(La),Ave=s(La,"P",{});var y_t=n(Ave);N3r=r(y_t,"Examples:"),y_t.forEach(t),q3r=i(La),f(FL.$$.fragment,La),La.forEach(t),gi.forEach(t),fxe=i(c),am=s(c,"H2",{class:!0});var CRe=n(am);VE=s(CRe,"A",{id:!0,class:!0,href:!0});var w_t=n(VE);Lve=s(w_t,"SPAN",{});var A_t=n(Lve);f(CL.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),G3r=i(CRe),Bve=s(CRe,"SPAN",{});var L_t=n(Bve);O3r=r(L_t,"FlaxAutoModelForQuestionAnswering"),L_t.forEach(t),CRe.forEach(t),gxe=i(c),Pr=s(c,"DIV",{class:!0});var ui=n(Pr);f(ML.$$.fragment,ui),X3r=i(ui),sm=s(ui,"P",{});var iW=n(sm);V3r=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xve=s(iW,"CODE",{});var B_t=n(xve);z3r=r(B_t,"from_pretrained()"),B_t.forEach(t),W3r=r(iW,"class method or the "),kve=s(iW,"CODE",{});var x_t=n(kve);Q3r=r(x_t,"from_config()"),x_t.forEach(t),H3r=r(iW,`class
method.`),iW.forEach(t),U3r=i(ui),EL=s(ui,"P",{});var MRe=n(EL);J3r=r(MRe,"This class cannot be instantiated directly using "),Rve=s(MRe,"CODE",{});var k_t=n(Rve);Y3r=r(k_t,"__init__()"),k_t.forEach(t),K3r=r(MRe," (throws an error)."),MRe.forEach(t),Z3r=i(ui),At=s(ui,"DIV",{class:!0});var pi=n(At);f(yL.$$.fragment,pi),e5r=i(pi),Sve=s(pi,"P",{});var R_t=n(Sve);o5r=r(R_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R_t.forEach(t),r5r=i(pi),nm=s(pi,"P",{});var dW=n(nm);t5r=r(dW,`Note:
Loading a model from its configuration file does `),Pve=s(dW,"STRONG",{});var S_t=n(Pve);a5r=r(S_t,"not"),S_t.forEach(t),s5r=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=s(dW,"CODE",{});var P_t=n($ve);n5r=r(P_t,"from_pretrained()"),P_t.forEach(t),l5r=r(dW,"to load the model weights."),dW.forEach(t),i5r=i(pi),Ive=s(pi,"P",{});var $_t=n(Ive);d5r=r($_t,"Examples:"),$_t.forEach(t),c5r=i(pi),f(wL.$$.fragment,pi),pi.forEach(t),m5r=i(ui),Ro=s(ui,"DIV",{class:!0});var Ba=n(Ro);f(AL.$$.fragment,Ba),f5r=i(Ba),Dve=s(Ba,"P",{});var I_t=n(Dve);g5r=r(I_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I_t.forEach(t),h5r=i(Ba),Bs=s(Ba,"P",{});var p5=n(Bs);u5r=r(p5,"The model class to instantiate is selected based on the "),jve=s(p5,"CODE",{});var D_t=n(jve);p5r=r(D_t,"model_type"),D_t.forEach(t),_5r=r(p5,` property of the config object (either
passed as an argument or loaded from `),Nve=s(p5,"CODE",{});var j_t=n(Nve);b5r=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),v5r=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=s(p5,"CODE",{});var N_t=n(qve);T5r=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),F5r=r(p5,":"),p5.forEach(t),C5r=i(Ba),Ce=s(Ba,"UL",{});var ao=n(Ce);zE=s(ao,"LI",{});var K7e=n(zE);Gve=s(K7e,"STRONG",{});var q_t=n(Gve);M5r=r(q_t,"albert"),q_t.forEach(t),E5r=r(K7e," \u2014 "),tV=s(K7e,"A",{href:!0});var G_t=n(tV);y5r=r(G_t,"FlaxAlbertForQuestionAnswering"),G_t.forEach(t),w5r=r(K7e," (ALBERT model)"),K7e.forEach(t),A5r=i(ao),WE=s(ao,"LI",{});var Z7e=n(WE);Ove=s(Z7e,"STRONG",{});var O_t=n(Ove);L5r=r(O_t,"bart"),O_t.forEach(t),B5r=r(Z7e," \u2014 "),aV=s(Z7e,"A",{href:!0});var X_t=n(aV);x5r=r(X_t,"FlaxBartForQuestionAnswering"),X_t.forEach(t),k5r=r(Z7e," (BART model)"),Z7e.forEach(t),R5r=i(ao),QE=s(ao,"LI",{});var e9e=n(QE);Xve=s(e9e,"STRONG",{});var V_t=n(Xve);S5r=r(V_t,"bert"),V_t.forEach(t),P5r=r(e9e," \u2014 "),sV=s(e9e,"A",{href:!0});var z_t=n(sV);$5r=r(z_t,"FlaxBertForQuestionAnswering"),z_t.forEach(t),I5r=r(e9e," (BERT model)"),e9e.forEach(t),D5r=i(ao),HE=s(ao,"LI",{});var o9e=n(HE);Vve=s(o9e,"STRONG",{});var W_t=n(Vve);j5r=r(W_t,"big_bird"),W_t.forEach(t),N5r=r(o9e," \u2014 "),nV=s(o9e,"A",{href:!0});var Q_t=n(nV);q5r=r(Q_t,"FlaxBigBirdForQuestionAnswering"),Q_t.forEach(t),G5r=r(o9e," (BigBird model)"),o9e.forEach(t),O5r=i(ao),UE=s(ao,"LI",{});var r9e=n(UE);zve=s(r9e,"STRONG",{});var H_t=n(zve);X5r=r(H_t,"distilbert"),H_t.forEach(t),V5r=r(r9e," \u2014 "),lV=s(r9e,"A",{href:!0});var U_t=n(lV);z5r=r(U_t,"FlaxDistilBertForQuestionAnswering"),U_t.forEach(t),W5r=r(r9e," (DistilBERT model)"),r9e.forEach(t),Q5r=i(ao),JE=s(ao,"LI",{});var t9e=n(JE);Wve=s(t9e,"STRONG",{});var J_t=n(Wve);H5r=r(J_t,"electra"),J_t.forEach(t),U5r=r(t9e," \u2014 "),iV=s(t9e,"A",{href:!0});var Y_t=n(iV);J5r=r(Y_t,"FlaxElectraForQuestionAnswering"),Y_t.forEach(t),Y5r=r(t9e," (ELECTRA model)"),t9e.forEach(t),K5r=i(ao),YE=s(ao,"LI",{});var a9e=n(YE);Qve=s(a9e,"STRONG",{});var K_t=n(Qve);Z5r=r(K_t,"mbart"),K_t.forEach(t),eyr=r(a9e," \u2014 "),dV=s(a9e,"A",{href:!0});var Z_t=n(dV);oyr=r(Z_t,"FlaxMBartForQuestionAnswering"),Z_t.forEach(t),ryr=r(a9e," (mBART model)"),a9e.forEach(t),tyr=i(ao),KE=s(ao,"LI",{});var s9e=n(KE);Hve=s(s9e,"STRONG",{});var ebt=n(Hve);ayr=r(ebt,"roberta"),ebt.forEach(t),syr=r(s9e," \u2014 "),cV=s(s9e,"A",{href:!0});var obt=n(cV);nyr=r(obt,"FlaxRobertaForQuestionAnswering"),obt.forEach(t),lyr=r(s9e," (RoBERTa model)"),s9e.forEach(t),iyr=i(ao),ZE=s(ao,"LI",{});var n9e=n(ZE);Uve=s(n9e,"STRONG",{});var rbt=n(Uve);dyr=r(rbt,"roformer"),rbt.forEach(t),cyr=r(n9e," \u2014 "),mV=s(n9e,"A",{href:!0});var tbt=n(mV);myr=r(tbt,"FlaxRoFormerForQuestionAnswering"),tbt.forEach(t),fyr=r(n9e," (RoFormer model)"),n9e.forEach(t),ao.forEach(t),gyr=i(Ba),Jve=s(Ba,"P",{});var abt=n(Jve);hyr=r(abt,"Examples:"),abt.forEach(t),uyr=i(Ba),f(LL.$$.fragment,Ba),Ba.forEach(t),ui.forEach(t),hxe=i(c),lm=s(c,"H2",{class:!0});var ERe=n(lm);e3=s(ERe,"A",{id:!0,class:!0,href:!0});var sbt=n(e3);Yve=s(sbt,"SPAN",{});var nbt=n(Yve);f(BL.$$.fragment,nbt),nbt.forEach(t),sbt.forEach(t),pyr=i(ERe),Kve=s(ERe,"SPAN",{});var lbt=n(Kve);_yr=r(lbt,"FlaxAutoModelForTokenClassification"),lbt.forEach(t),ERe.forEach(t),uxe=i(c),$r=s(c,"DIV",{class:!0});var _i=n($r);f(xL.$$.fragment,_i),byr=i(_i),im=s(_i,"P",{});var cW=n(im);vyr=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zve=s(cW,"CODE",{});var ibt=n(Zve);Tyr=r(ibt,"from_pretrained()"),ibt.forEach(t),Fyr=r(cW,"class method or the "),eTe=s(cW,"CODE",{});var dbt=n(eTe);Cyr=r(dbt,"from_config()"),dbt.forEach(t),Myr=r(cW,`class
method.`),cW.forEach(t),Eyr=i(_i),kL=s(_i,"P",{});var yRe=n(kL);yyr=r(yRe,"This class cannot be instantiated directly using "),oTe=s(yRe,"CODE",{});var cbt=n(oTe);wyr=r(cbt,"__init__()"),cbt.forEach(t),Ayr=r(yRe," (throws an error)."),yRe.forEach(t),Lyr=i(_i),Lt=s(_i,"DIV",{class:!0});var bi=n(Lt);f(RL.$$.fragment,bi),Byr=i(bi),rTe=s(bi,"P",{});var mbt=n(rTe);xyr=r(mbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mbt.forEach(t),kyr=i(bi),dm=s(bi,"P",{});var mW=n(dm);Ryr=r(mW,`Note:
Loading a model from its configuration file does `),tTe=s(mW,"STRONG",{});var fbt=n(tTe);Syr=r(fbt,"not"),fbt.forEach(t),Pyr=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),aTe=s(mW,"CODE",{});var gbt=n(aTe);$yr=r(gbt,"from_pretrained()"),gbt.forEach(t),Iyr=r(mW,"to load the model weights."),mW.forEach(t),Dyr=i(bi),sTe=s(bi,"P",{});var hbt=n(sTe);jyr=r(hbt,"Examples:"),hbt.forEach(t),Nyr=i(bi),f(SL.$$.fragment,bi),bi.forEach(t),qyr=i(_i),So=s(_i,"DIV",{class:!0});var xa=n(So);f(PL.$$.fragment,xa),Gyr=i(xa),nTe=s(xa,"P",{});var ubt=n(nTe);Oyr=r(ubt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ubt.forEach(t),Xyr=i(xa),xs=s(xa,"P",{});var _5=n(xs);Vyr=r(_5,"The model class to instantiate is selected based on the "),lTe=s(_5,"CODE",{});var pbt=n(lTe);zyr=r(pbt,"model_type"),pbt.forEach(t),Wyr=r(_5,` property of the config object (either
passed as an argument or loaded from `),iTe=s(_5,"CODE",{});var _bt=n(iTe);Qyr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),Hyr=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=s(_5,"CODE",{});var bbt=n(dTe);Uyr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Jyr=r(_5,":"),_5.forEach(t),Yyr=i(xa),no=s(xa,"UL",{});var ta=n(no);o3=s(ta,"LI",{});var l9e=n(o3);cTe=s(l9e,"STRONG",{});var vbt=n(cTe);Kyr=r(vbt,"albert"),vbt.forEach(t),Zyr=r(l9e," \u2014 "),fV=s(l9e,"A",{href:!0});var Tbt=n(fV);ewr=r(Tbt,"FlaxAlbertForTokenClassification"),Tbt.forEach(t),owr=r(l9e," (ALBERT model)"),l9e.forEach(t),rwr=i(ta),r3=s(ta,"LI",{});var i9e=n(r3);mTe=s(i9e,"STRONG",{});var Fbt=n(mTe);twr=r(Fbt,"bert"),Fbt.forEach(t),awr=r(i9e," \u2014 "),gV=s(i9e,"A",{href:!0});var Cbt=n(gV);swr=r(Cbt,"FlaxBertForTokenClassification"),Cbt.forEach(t),nwr=r(i9e," (BERT model)"),i9e.forEach(t),lwr=i(ta),t3=s(ta,"LI",{});var d9e=n(t3);fTe=s(d9e,"STRONG",{});var Mbt=n(fTe);iwr=r(Mbt,"big_bird"),Mbt.forEach(t),dwr=r(d9e," \u2014 "),hV=s(d9e,"A",{href:!0});var Ebt=n(hV);cwr=r(Ebt,"FlaxBigBirdForTokenClassification"),Ebt.forEach(t),mwr=r(d9e," (BigBird model)"),d9e.forEach(t),fwr=i(ta),a3=s(ta,"LI",{});var c9e=n(a3);gTe=s(c9e,"STRONG",{});var ybt=n(gTe);gwr=r(ybt,"distilbert"),ybt.forEach(t),hwr=r(c9e," \u2014 "),uV=s(c9e,"A",{href:!0});var wbt=n(uV);uwr=r(wbt,"FlaxDistilBertForTokenClassification"),wbt.forEach(t),pwr=r(c9e," (DistilBERT model)"),c9e.forEach(t),_wr=i(ta),s3=s(ta,"LI",{});var m9e=n(s3);hTe=s(m9e,"STRONG",{});var Abt=n(hTe);bwr=r(Abt,"electra"),Abt.forEach(t),vwr=r(m9e," \u2014 "),pV=s(m9e,"A",{href:!0});var Lbt=n(pV);Twr=r(Lbt,"FlaxElectraForTokenClassification"),Lbt.forEach(t),Fwr=r(m9e," (ELECTRA model)"),m9e.forEach(t),Cwr=i(ta),n3=s(ta,"LI",{});var f9e=n(n3);uTe=s(f9e,"STRONG",{});var Bbt=n(uTe);Mwr=r(Bbt,"roberta"),Bbt.forEach(t),Ewr=r(f9e," \u2014 "),_V=s(f9e,"A",{href:!0});var xbt=n(_V);ywr=r(xbt,"FlaxRobertaForTokenClassification"),xbt.forEach(t),wwr=r(f9e," (RoBERTa model)"),f9e.forEach(t),Awr=i(ta),l3=s(ta,"LI",{});var g9e=n(l3);pTe=s(g9e,"STRONG",{});var kbt=n(pTe);Lwr=r(kbt,"roformer"),kbt.forEach(t),Bwr=r(g9e," \u2014 "),bV=s(g9e,"A",{href:!0});var Rbt=n(bV);xwr=r(Rbt,"FlaxRoFormerForTokenClassification"),Rbt.forEach(t),kwr=r(g9e," (RoFormer model)"),g9e.forEach(t),ta.forEach(t),Rwr=i(xa),_Te=s(xa,"P",{});var Sbt=n(_Te);Swr=r(Sbt,"Examples:"),Sbt.forEach(t),Pwr=i(xa),f($L.$$.fragment,xa),xa.forEach(t),_i.forEach(t),pxe=i(c),cm=s(c,"H2",{class:!0});var wRe=n(cm);i3=s(wRe,"A",{id:!0,class:!0,href:!0});var Pbt=n(i3);bTe=s(Pbt,"SPAN",{});var $bt=n(bTe);f(IL.$$.fragment,$bt),$bt.forEach(t),Pbt.forEach(t),$wr=i(wRe),vTe=s(wRe,"SPAN",{});var Ibt=n(vTe);Iwr=r(Ibt,"FlaxAutoModelForMultipleChoice"),Ibt.forEach(t),wRe.forEach(t),_xe=i(c),Ir=s(c,"DIV",{class:!0});var vi=n(Ir);f(DL.$$.fragment,vi),Dwr=i(vi),mm=s(vi,"P",{});var fW=n(mm);jwr=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TTe=s(fW,"CODE",{});var Dbt=n(TTe);Nwr=r(Dbt,"from_pretrained()"),Dbt.forEach(t),qwr=r(fW,"class method or the "),FTe=s(fW,"CODE",{});var jbt=n(FTe);Gwr=r(jbt,"from_config()"),jbt.forEach(t),Owr=r(fW,`class
method.`),fW.forEach(t),Xwr=i(vi),jL=s(vi,"P",{});var ARe=n(jL);Vwr=r(ARe,"This class cannot be instantiated directly using "),CTe=s(ARe,"CODE",{});var Nbt=n(CTe);zwr=r(Nbt,"__init__()"),Nbt.forEach(t),Wwr=r(ARe," (throws an error)."),ARe.forEach(t),Qwr=i(vi),Bt=s(vi,"DIV",{class:!0});var Ti=n(Bt);f(NL.$$.fragment,Ti),Hwr=i(Ti),MTe=s(Ti,"P",{});var qbt=n(MTe);Uwr=r(qbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qbt.forEach(t),Jwr=i(Ti),fm=s(Ti,"P",{});var gW=n(fm);Ywr=r(gW,`Note:
Loading a model from its configuration file does `),ETe=s(gW,"STRONG",{});var Gbt=n(ETe);Kwr=r(Gbt,"not"),Gbt.forEach(t),Zwr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yTe=s(gW,"CODE",{});var Obt=n(yTe);e6r=r(Obt,"from_pretrained()"),Obt.forEach(t),o6r=r(gW,"to load the model weights."),gW.forEach(t),r6r=i(Ti),wTe=s(Ti,"P",{});var Xbt=n(wTe);t6r=r(Xbt,"Examples:"),Xbt.forEach(t),a6r=i(Ti),f(qL.$$.fragment,Ti),Ti.forEach(t),s6r=i(vi),Po=s(vi,"DIV",{class:!0});var ka=n(Po);f(GL.$$.fragment,ka),n6r=i(ka),ATe=s(ka,"P",{});var Vbt=n(ATe);l6r=r(Vbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vbt.forEach(t),i6r=i(ka),ks=s(ka,"P",{});var b5=n(ks);d6r=r(b5,"The model class to instantiate is selected based on the "),LTe=s(b5,"CODE",{});var zbt=n(LTe);c6r=r(zbt,"model_type"),zbt.forEach(t),m6r=r(b5,` property of the config object (either
passed as an argument or loaded from `),BTe=s(b5,"CODE",{});var Wbt=n(BTe);f6r=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),g6r=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=s(b5,"CODE",{});var Qbt=n(xTe);h6r=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),u6r=r(b5,":"),b5.forEach(t),p6r=i(ka),lo=s(ka,"UL",{});var aa=n(lo);d3=s(aa,"LI",{});var h9e=n(d3);kTe=s(h9e,"STRONG",{});var Hbt=n(kTe);_6r=r(Hbt,"albert"),Hbt.forEach(t),b6r=r(h9e," \u2014 "),vV=s(h9e,"A",{href:!0});var Ubt=n(vV);v6r=r(Ubt,"FlaxAlbertForMultipleChoice"),Ubt.forEach(t),T6r=r(h9e," (ALBERT model)"),h9e.forEach(t),F6r=i(aa),c3=s(aa,"LI",{});var u9e=n(c3);RTe=s(u9e,"STRONG",{});var Jbt=n(RTe);C6r=r(Jbt,"bert"),Jbt.forEach(t),M6r=r(u9e," \u2014 "),TV=s(u9e,"A",{href:!0});var Ybt=n(TV);E6r=r(Ybt,"FlaxBertForMultipleChoice"),Ybt.forEach(t),y6r=r(u9e," (BERT model)"),u9e.forEach(t),w6r=i(aa),m3=s(aa,"LI",{});var p9e=n(m3);STe=s(p9e,"STRONG",{});var Kbt=n(STe);A6r=r(Kbt,"big_bird"),Kbt.forEach(t),L6r=r(p9e," \u2014 "),FV=s(p9e,"A",{href:!0});var Zbt=n(FV);B6r=r(Zbt,"FlaxBigBirdForMultipleChoice"),Zbt.forEach(t),x6r=r(p9e," (BigBird model)"),p9e.forEach(t),k6r=i(aa),f3=s(aa,"LI",{});var _9e=n(f3);PTe=s(_9e,"STRONG",{});var e2t=n(PTe);R6r=r(e2t,"distilbert"),e2t.forEach(t),S6r=r(_9e," \u2014 "),CV=s(_9e,"A",{href:!0});var o2t=n(CV);P6r=r(o2t,"FlaxDistilBertForMultipleChoice"),o2t.forEach(t),$6r=r(_9e," (DistilBERT model)"),_9e.forEach(t),I6r=i(aa),g3=s(aa,"LI",{});var b9e=n(g3);$Te=s(b9e,"STRONG",{});var r2t=n($Te);D6r=r(r2t,"electra"),r2t.forEach(t),j6r=r(b9e," \u2014 "),MV=s(b9e,"A",{href:!0});var t2t=n(MV);N6r=r(t2t,"FlaxElectraForMultipleChoice"),t2t.forEach(t),q6r=r(b9e," (ELECTRA model)"),b9e.forEach(t),G6r=i(aa),h3=s(aa,"LI",{});var v9e=n(h3);ITe=s(v9e,"STRONG",{});var a2t=n(ITe);O6r=r(a2t,"roberta"),a2t.forEach(t),X6r=r(v9e," \u2014 "),EV=s(v9e,"A",{href:!0});var s2t=n(EV);V6r=r(s2t,"FlaxRobertaForMultipleChoice"),s2t.forEach(t),z6r=r(v9e," (RoBERTa model)"),v9e.forEach(t),W6r=i(aa),u3=s(aa,"LI",{});var T9e=n(u3);DTe=s(T9e,"STRONG",{});var n2t=n(DTe);Q6r=r(n2t,"roformer"),n2t.forEach(t),H6r=r(T9e," \u2014 "),yV=s(T9e,"A",{href:!0});var l2t=n(yV);U6r=r(l2t,"FlaxRoFormerForMultipleChoice"),l2t.forEach(t),J6r=r(T9e," (RoFormer model)"),T9e.forEach(t),aa.forEach(t),Y6r=i(ka),jTe=s(ka,"P",{});var i2t=n(jTe);K6r=r(i2t,"Examples:"),i2t.forEach(t),Z6r=i(ka),f(OL.$$.fragment,ka),ka.forEach(t),vi.forEach(t),bxe=i(c),gm=s(c,"H2",{class:!0});var LRe=n(gm);p3=s(LRe,"A",{id:!0,class:!0,href:!0});var d2t=n(p3);NTe=s(d2t,"SPAN",{});var c2t=n(NTe);f(XL.$$.fragment,c2t),c2t.forEach(t),d2t.forEach(t),eAr=i(LRe),qTe=s(LRe,"SPAN",{});var m2t=n(qTe);oAr=r(m2t,"FlaxAutoModelForNextSentencePrediction"),m2t.forEach(t),LRe.forEach(t),vxe=i(c),Dr=s(c,"DIV",{class:!0});var Fi=n(Dr);f(VL.$$.fragment,Fi),rAr=i(Fi),hm=s(Fi,"P",{});var hW=n(hm);tAr=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GTe=s(hW,"CODE",{});var f2t=n(GTe);aAr=r(f2t,"from_pretrained()"),f2t.forEach(t),sAr=r(hW,"class method or the "),OTe=s(hW,"CODE",{});var g2t=n(OTe);nAr=r(g2t,"from_config()"),g2t.forEach(t),lAr=r(hW,`class
method.`),hW.forEach(t),iAr=i(Fi),zL=s(Fi,"P",{});var BRe=n(zL);dAr=r(BRe,"This class cannot be instantiated directly using "),XTe=s(BRe,"CODE",{});var h2t=n(XTe);cAr=r(h2t,"__init__()"),h2t.forEach(t),mAr=r(BRe," (throws an error)."),BRe.forEach(t),fAr=i(Fi),xt=s(Fi,"DIV",{class:!0});var Ci=n(xt);f(WL.$$.fragment,Ci),gAr=i(Ci),VTe=s(Ci,"P",{});var u2t=n(VTe);hAr=r(u2t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u2t.forEach(t),uAr=i(Ci),um=s(Ci,"P",{});var uW=n(um);pAr=r(uW,`Note:
Loading a model from its configuration file does `),zTe=s(uW,"STRONG",{});var p2t=n(zTe);_Ar=r(p2t,"not"),p2t.forEach(t),bAr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),WTe=s(uW,"CODE",{});var _2t=n(WTe);vAr=r(_2t,"from_pretrained()"),_2t.forEach(t),TAr=r(uW,"to load the model weights."),uW.forEach(t),FAr=i(Ci),QTe=s(Ci,"P",{});var b2t=n(QTe);CAr=r(b2t,"Examples:"),b2t.forEach(t),MAr=i(Ci),f(QL.$$.fragment,Ci),Ci.forEach(t),EAr=i(Fi),$o=s(Fi,"DIV",{class:!0});var Ra=n($o);f(HL.$$.fragment,Ra),yAr=i(Ra),HTe=s(Ra,"P",{});var v2t=n(HTe);wAr=r(v2t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v2t.forEach(t),AAr=i(Ra),Rs=s(Ra,"P",{});var v5=n(Rs);LAr=r(v5,"The model class to instantiate is selected based on the "),UTe=s(v5,"CODE",{});var T2t=n(UTe);BAr=r(T2t,"model_type"),T2t.forEach(t),xAr=r(v5,` property of the config object (either
passed as an argument or loaded from `),JTe=s(v5,"CODE",{});var F2t=n(JTe);kAr=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),RAr=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=s(v5,"CODE",{});var C2t=n(YTe);SAr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),PAr=r(v5,":"),v5.forEach(t),$Ar=i(Ra),KTe=s(Ra,"UL",{});var M2t=n(KTe);_3=s(M2t,"LI",{});var F9e=n(_3);ZTe=s(F9e,"STRONG",{});var E2t=n(ZTe);IAr=r(E2t,"bert"),E2t.forEach(t),DAr=r(F9e," \u2014 "),wV=s(F9e,"A",{href:!0});var y2t=n(wV);jAr=r(y2t,"FlaxBertForNextSentencePrediction"),y2t.forEach(t),NAr=r(F9e," (BERT model)"),F9e.forEach(t),M2t.forEach(t),qAr=i(Ra),e1e=s(Ra,"P",{});var w2t=n(e1e);GAr=r(w2t,"Examples:"),w2t.forEach(t),OAr=i(Ra),f(UL.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Txe=i(c),pm=s(c,"H2",{class:!0});var xRe=n(pm);b3=s(xRe,"A",{id:!0,class:!0,href:!0});var A2t=n(b3);o1e=s(A2t,"SPAN",{});var L2t=n(o1e);f(JL.$$.fragment,L2t),L2t.forEach(t),A2t.forEach(t),XAr=i(xRe),r1e=s(xRe,"SPAN",{});var B2t=n(r1e);VAr=r(B2t,"FlaxAutoModelForImageClassification"),B2t.forEach(t),xRe.forEach(t),Fxe=i(c),jr=s(c,"DIV",{class:!0});var Mi=n(jr);f(YL.$$.fragment,Mi),zAr=i(Mi),_m=s(Mi,"P",{});var pW=n(_m);WAr=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),t1e=s(pW,"CODE",{});var x2t=n(t1e);QAr=r(x2t,"from_pretrained()"),x2t.forEach(t),HAr=r(pW,"class method or the "),a1e=s(pW,"CODE",{});var k2t=n(a1e);UAr=r(k2t,"from_config()"),k2t.forEach(t),JAr=r(pW,`class
method.`),pW.forEach(t),YAr=i(Mi),KL=s(Mi,"P",{});var kRe=n(KL);KAr=r(kRe,"This class cannot be instantiated directly using "),s1e=s(kRe,"CODE",{});var R2t=n(s1e);ZAr=r(R2t,"__init__()"),R2t.forEach(t),e0r=r(kRe," (throws an error)."),kRe.forEach(t),o0r=i(Mi),kt=s(Mi,"DIV",{class:!0});var Ei=n(kt);f(ZL.$$.fragment,Ei),r0r=i(Ei),n1e=s(Ei,"P",{});var S2t=n(n1e);t0r=r(S2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S2t.forEach(t),a0r=i(Ei),bm=s(Ei,"P",{});var _W=n(bm);s0r=r(_W,`Note:
Loading a model from its configuration file does `),l1e=s(_W,"STRONG",{});var P2t=n(l1e);n0r=r(P2t,"not"),P2t.forEach(t),l0r=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=s(_W,"CODE",{});var $2t=n(i1e);i0r=r($2t,"from_pretrained()"),$2t.forEach(t),d0r=r(_W,"to load the model weights."),_W.forEach(t),c0r=i(Ei),d1e=s(Ei,"P",{});var I2t=n(d1e);m0r=r(I2t,"Examples:"),I2t.forEach(t),f0r=i(Ei),f(e8.$$.fragment,Ei),Ei.forEach(t),g0r=i(Mi),Io=s(Mi,"DIV",{class:!0});var Sa=n(Io);f(o8.$$.fragment,Sa),h0r=i(Sa),c1e=s(Sa,"P",{});var D2t=n(c1e);u0r=r(D2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),D2t.forEach(t),p0r=i(Sa),Ss=s(Sa,"P",{});var T5=n(Ss);_0r=r(T5,"The model class to instantiate is selected based on the "),m1e=s(T5,"CODE",{});var j2t=n(m1e);b0r=r(j2t,"model_type"),j2t.forEach(t),v0r=r(T5,` property of the config object (either
passed as an argument or loaded from `),f1e=s(T5,"CODE",{});var N2t=n(f1e);T0r=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),F0r=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=s(T5,"CODE",{});var q2t=n(g1e);C0r=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),M0r=r(T5,":"),T5.forEach(t),E0r=i(Sa),r8=s(Sa,"UL",{});var RRe=n(r8);v3=s(RRe,"LI",{});var C9e=n(v3);h1e=s(C9e,"STRONG",{});var G2t=n(h1e);y0r=r(G2t,"beit"),G2t.forEach(t),w0r=r(C9e," \u2014 "),AV=s(C9e,"A",{href:!0});var O2t=n(AV);A0r=r(O2t,"FlaxBeitForImageClassification"),O2t.forEach(t),L0r=r(C9e," (BEiT model)"),C9e.forEach(t),B0r=i(RRe),T3=s(RRe,"LI",{});var M9e=n(T3);u1e=s(M9e,"STRONG",{});var X2t=n(u1e);x0r=r(X2t,"vit"),X2t.forEach(t),k0r=r(M9e," \u2014 "),LV=s(M9e,"A",{href:!0});var V2t=n(LV);R0r=r(V2t,"FlaxViTForImageClassification"),V2t.forEach(t),S0r=r(M9e," (ViT model)"),M9e.forEach(t),RRe.forEach(t),P0r=i(Sa),p1e=s(Sa,"P",{});var z2t=n(p1e);$0r=r(z2t,"Examples:"),z2t.forEach(t),I0r=i(Sa),f(t8.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),Cxe=i(c),vm=s(c,"H2",{class:!0});var SRe=n(vm);F3=s(SRe,"A",{id:!0,class:!0,href:!0});var W2t=n(F3);_1e=s(W2t,"SPAN",{});var Q2t=n(_1e);f(a8.$$.fragment,Q2t),Q2t.forEach(t),W2t.forEach(t),D0r=i(SRe),b1e=s(SRe,"SPAN",{});var H2t=n(b1e);j0r=r(H2t,"FlaxAutoModelForVision2Seq"),H2t.forEach(t),SRe.forEach(t),Mxe=i(c),Nr=s(c,"DIV",{class:!0});var yi=n(Nr);f(s8.$$.fragment,yi),N0r=i(yi),Tm=s(yi,"P",{});var bW=n(Tm);q0r=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v1e=s(bW,"CODE",{});var U2t=n(v1e);G0r=r(U2t,"from_pretrained()"),U2t.forEach(t),O0r=r(bW,"class method or the "),T1e=s(bW,"CODE",{});var J2t=n(T1e);X0r=r(J2t,"from_config()"),J2t.forEach(t),V0r=r(bW,`class
method.`),bW.forEach(t),z0r=i(yi),n8=s(yi,"P",{});var PRe=n(n8);W0r=r(PRe,"This class cannot be instantiated directly using "),F1e=s(PRe,"CODE",{});var Y2t=n(F1e);Q0r=r(Y2t,"__init__()"),Y2t.forEach(t),H0r=r(PRe," (throws an error)."),PRe.forEach(t),U0r=i(yi),Rt=s(yi,"DIV",{class:!0});var wi=n(Rt);f(l8.$$.fragment,wi),J0r=i(wi),C1e=s(wi,"P",{});var K2t=n(C1e);Y0r=r(K2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K2t.forEach(t),K0r=i(wi),Fm=s(wi,"P",{});var vW=n(Fm);Z0r=r(vW,`Note:
Loading a model from its configuration file does `),M1e=s(vW,"STRONG",{});var Z2t=n(M1e);eLr=r(Z2t,"not"),Z2t.forEach(t),oLr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),E1e=s(vW,"CODE",{});var evt=n(E1e);rLr=r(evt,"from_pretrained()"),evt.forEach(t),tLr=r(vW,"to load the model weights."),vW.forEach(t),aLr=i(wi),y1e=s(wi,"P",{});var ovt=n(y1e);sLr=r(ovt,"Examples:"),ovt.forEach(t),nLr=i(wi),f(i8.$$.fragment,wi),wi.forEach(t),lLr=i(yi),Do=s(yi,"DIV",{class:!0});var Pa=n(Do);f(d8.$$.fragment,Pa),iLr=i(Pa),w1e=s(Pa,"P",{});var rvt=n(w1e);dLr=r(rvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rvt.forEach(t),cLr=i(Pa),Ps=s(Pa,"P",{});var F5=n(Ps);mLr=r(F5,"The model class to instantiate is selected based on the "),A1e=s(F5,"CODE",{});var tvt=n(A1e);fLr=r(tvt,"model_type"),tvt.forEach(t),gLr=r(F5,` property of the config object (either
passed as an argument or loaded from `),L1e=s(F5,"CODE",{});var avt=n(L1e);hLr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),uLr=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=s(F5,"CODE",{});var svt=n(B1e);pLr=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),_Lr=r(F5,":"),F5.forEach(t),bLr=i(Pa),x1e=s(Pa,"UL",{});var nvt=n(x1e);C3=s(nvt,"LI",{});var E9e=n(C3);k1e=s(E9e,"STRONG",{});var lvt=n(k1e);vLr=r(lvt,"vision-encoder-decoder"),lvt.forEach(t),TLr=r(E9e," \u2014 "),BV=s(E9e,"A",{href:!0});var ivt=n(BV);FLr=r(ivt,"FlaxVisionEncoderDecoderModel"),ivt.forEach(t),CLr=r(E9e," (Vision Encoder decoder model)"),E9e.forEach(t),nvt.forEach(t),MLr=i(Pa),R1e=s(Pa,"P",{});var dvt=n(R1e);ELr=r(dvt,"Examples:"),dvt.forEach(t),yLr=i(Pa),f(c8.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(bvt)),d(fe,"id","auto-classes"),d(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fe,"href","#auto-classes"),d(ie,"class","relative group"),d($s,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig"),d(Ds,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),d(js,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),d(Pi,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),d(Am,"id","extending-the-auto-classes"),d(Am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Am,"href","#extending-the-auto-classes"),d($i,"class","relative group"),d(Bm,"id","transformers.AutoConfig"),d(Bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bm,"href","#transformers.AutoConfig"),d(Ii,"class","relative group"),d(g7,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(h7,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig"),d(u7,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartConfig"),d(p7,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig"),d(_7,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertConfig"),d(b7,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(v7,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig"),d(T7,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(F7,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(C7,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(M7,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig"),d(E7,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig"),d(y7,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig"),d(w7,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig"),d(A7,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig"),d(L7,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig"),d(B7,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(x7,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(k7,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig"),d(R7,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(S7,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig"),d(P7,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig"),d($7,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),d(I7,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig"),d(D7,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig"),d(j7,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(N7,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig"),d(q7,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig"),d(G7,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig"),d(O7,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig"),d(X7,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config"),d(V7,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(z7,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig"),d(W7,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig"),d(Q7,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig"),d(H7,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(U7,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(J7,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Y7,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDConfig"),d(K7,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig"),d(Z7,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig"),d(e9,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig"),d(o9,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config"),d(r9,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig"),d(t9,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(a9,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig"),d(s9,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(n9,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(l9,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig"),d(i9,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config"),d(d9,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(c9,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(m9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig"),d(f9,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig"),d(g9,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig"),d(h9,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(u9,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(p9,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(_9,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagConfig"),d(b9,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmConfig"),d(v9,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig"),d(T9,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig"),d(F9,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig"),d(C9,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig"),d(M9,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig"),d(E9,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig"),d(y9,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig"),d(w9,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig"),d(A9,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(L9,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(B9,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(x9,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig"),d(k9,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(R9,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig"),d(S9,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Config"),d(P9,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig"),d($9,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(I9,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"),d(D9,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(j9,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(N9,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig"),d(q9,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(G9,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(O9,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(X9,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig"),d(V9,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(z9,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(W9,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig"),d(Q9,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig"),d(H9,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig"),d(U9,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(J9,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Y9,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(K9,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig"),d(Z9,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(_g,"class","docstring"),d(Xo,"class","docstring"),d(bg,"id","transformers.AutoTokenizer"),d(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bg,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(eB,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(oB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizer"),d(rB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(tB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),d(aB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizerFast"),d(sB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizer"),d(nB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(lB,"href","/docs/transformers/master/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(iB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),d(dB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),d(cB,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(mB,"href","/docs/transformers/master/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(fB,"href","/docs/transformers/master/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(gB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(hB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(uB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(pB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(_B,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(bB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(vB,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(TB,"href","/docs/transformers/master/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(FB,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),d(CB,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(MB,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineTokenizer"),d(EB,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizer"),d(yB,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(wB,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(AB,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(LB,"href","/docs/transformers/master/en/model_doc/cpm#transformers.CpmTokenizer"),d(BB,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(xB,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizer"),d(kB,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(RB,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(SB,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(PB,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d($B,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(IB,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(DB,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizer"),d(jB,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(NB,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(qB,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizer"),d(GB,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(OB,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(XB,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizer"),d(VB,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(zB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(WB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(QB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(HB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(UB,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizer"),d(JB,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(YB,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(KB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ZB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ex,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ox,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(rx,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(tx,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ax,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(sx,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(nx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizer"),d(lx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizerFast"),d(ix,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizer"),d(dx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(cx,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeTokenizer"),d(mx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(fx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(gx,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(hx,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianTokenizer"),d(ux,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizer"),d(px,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(_x,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(bx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(vx,"href","/docs/transformers/master/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Tx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Fx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Cx,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Mx,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ex,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),d(yx,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wx,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ax,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Lx,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Bx,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xx,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(kx,"href","/docs/transformers/master/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Rx,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Sx,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Px,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),d($x,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),d(Ix,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagTokenizer"),d(Dx,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizer"),d(jx,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Nx,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizer"),d(qx,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Gx,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Ox,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Xx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Vx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(zx,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Wx,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Qx,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Hx,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Ux,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Jx,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Yx,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Kx,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Zx,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),d(ek,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ok,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasTokenizer"),d(rk,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(tk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ak,"href","/docs/transformers/master/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(sk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizer"),d(nk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(lk,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMTokenizer"),d(ik,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(dk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(ck,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(mk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(fk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(fo,"class","docstring"),d(Hg,"class","docstring"),d(Vo,"class","docstring"),d(Ug,"id","transformers.AutoFeatureExtractor"),d(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ug,"href","#transformers.AutoFeatureExtractor"),d(Ni,"class","relative group"),d(gk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(hk,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(uk,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(pk,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(_k,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(bk,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(vk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Tk,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Fk,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Ck,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Mk,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Ek,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(yk,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(wk,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Ak,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Lk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xe,"class","docstring"),d(fh,"class","docstring"),d(zo,"class","docstring"),d(gh,"id","transformers.AutoProcessor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoProcessor"),d(qi,"class","relative group"),d(Bk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(xk,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPProcessor"),d(kk,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Rk,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Sk,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(Pk,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d($k,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Ik,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Dk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ke,"class","docstring"),d(Mh,"class","docstring"),d(Wo,"class","docstring"),d(Eh,"id","transformers.AutoModel"),d(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eh,"href","#transformers.AutoModel"),d(Oi,"class","relative group"),d(qr,"class","docstring"),d(jk,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel"),d(Nk,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartModel"),d(qk,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitModel"),d(Gk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),d(Ok,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Xk,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel"),d(Vk,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(zk,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Wk,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Qk,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel"),d(Hk,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineModel"),d(Uk,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel"),d(Jk,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel"),d(Yk,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel"),d(Kk,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel"),d(Zk,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(eR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(oR,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel"),d(rR,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(tR,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel"),d(aR,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrModel"),d(sR,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel"),d(nR,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(lR,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel"),d(iR,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel"),d(dR,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel"),d(cR,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel"),d(mR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel"),d(fR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel"),d(gR,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model"),d(hR,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(uR,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel"),d(pR,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel"),d(_R,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel"),d(bR,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(vR,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(TR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(FR,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDModel"),d(CR,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel"),d(MR,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeModel"),d(ER,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel"),d(yR,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model"),d(wR,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianModel"),d(AR,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel"),d(LR,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel"),d(BR,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(xR,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel"),d(kR,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel"),d(RR,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model"),d(SR,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel"),d(PR,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d($R,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel"),d(IR,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel"),d(DR,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel"),d(jR,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel"),d(NR,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(qR,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel"),d(GR,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel"),d(OR,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel"),d(XR,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),d(VR,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel"),d(zR,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel"),d(WR,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel"),d(QR,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWModel"),d(HR,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel"),d(UR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(JR,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel"),d(YR,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(KR,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinModel"),d(ZR,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Model"),d(eS,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel"),d(oS,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(rS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel"),d(tS,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(aS,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel"),d(sS,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(nS,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel"),d(lS,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTModel"),d(iS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(dS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(cS,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel"),d(mS,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel"),d(fS,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel"),d(gS,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(hS,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(uS,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(pS,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel"),d(_S,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel"),d(Re,"class","docstring"),d(Qo,"class","docstring"),d(ap,"id","transformers.AutoModelForPreTraining"),d(ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ap,"href","#transformers.AutoModelForPreTraining"),d(zi,"class","relative group"),d(Gr,"class","docstring"),d(bS,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining"),d(vS,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(TS,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining"),d(FS,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(CS,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(MS,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(ES,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(yS,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(wS,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(AS,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(LS,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining"),d(BS,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(xS,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining"),d(kS,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RS,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(SS,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PS,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),d($S,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(IS,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(DS,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(jS,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(NS,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(qS,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(GS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OS,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),d(XS,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(VS,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(zS,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WS,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(QS,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(HS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(US,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(JS,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(YS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(KS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(ZS,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(oP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(rP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Se,"class","docstring"),d(Ho,"class","docstring"),d(zp,"id","transformers.AutoModelForCausalLM"),d(zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zp,"href","#transformers.AutoModelForCausalLM"),d(Hi,"class","relative group"),d(Or,"class","docstring"),d(tP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM"),d(aP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel"),d(sP,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(nP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(lP,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(iP,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(dP,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(cP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(mP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(fP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(gP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM"),d(hP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(uP,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(pP,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(_P,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM"),d(bP,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM"),d(vP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(TP,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(FP,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(CP,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(MP,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(EP,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(yP,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(wP,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(AP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(LP,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(BP,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(xP,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(kP,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(RP,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(SP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(PP,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d($P,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(IP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(DP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Uo,"class","docstring"),d(L_,"id","transformers.AutoModelForMaskedLM"),d(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L_,"href","#transformers.AutoModelForMaskedLM"),d(Yi,"class","relative group"),d(Xr,"class","docstring"),d(jP,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(NP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(qP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM"),d(GP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(OP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XP,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(VP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(zP,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WP,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QP,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(HP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(UP,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(JP,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(YP,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(KP,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(ZP,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(e$,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(o$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(r$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(t$,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(a$,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(s$,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(n$,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(l$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(i$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(d$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(c$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(m$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(f$,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(g$,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(h$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(u$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(p$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_$,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM"),d($e,"class","docstring"),d(Jo,"class","docstring"),d(mb,"id","transformers.AutoModelForSeq2SeqLM"),d(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mb,"href","#transformers.AutoModelForSeq2SeqLM"),d(ed,"class","relative group"),d(Vr,"class","docstring"),d(b$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(v$,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(T$,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(F$,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(C$,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(M$,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(E$,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(y$,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(w$,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel"),d(A$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(L$,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(B$,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(x$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(k$,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(R$,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(S$,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(Bb,"id","transformers.AutoModelForSequenceClassification"),d(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bb,"href","#transformers.AutoModelForSequenceClassification"),d(td,"class","relative group"),d(zr,"class","docstring"),d(P$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification"),d(I$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification"),d(D$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(j$,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(N$,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(q$,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(G$,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(O$,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(X$,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(V$,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(z$,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(W$,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Q$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(H$,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(U$,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(J$,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Y$,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(K$,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Z$,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eI,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oI,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rI,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(sI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(nI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cI,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(mI,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(fI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hI,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(uI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_I,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(bI,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vI,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(TI,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(FI,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(CI,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(MI,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(EI,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(yI,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(M2,"id","transformers.AutoModelForMultipleChoice"),d(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M2,"href","#transformers.AutoModelForMultipleChoice"),d(nd,"class","relative group"),d(Wr,"class","docstring"),d(wI,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AI,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice"),d(LI,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(RI,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(SI,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(PI,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($I,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(II,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(DI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jI,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(NI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(GI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(OI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(XI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(WI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QI,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(HI,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(UI,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(JI,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(YI,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(KI,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ZI,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(je,"class","docstring"),d(Zo,"class","docstring"),d(Z2,"id","transformers.AutoModelForNextSentencePrediction"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForNextSentencePrediction"),d(dd,"class","relative group"),d(Qr,"class","docstring"),d(eD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ne,"class","docstring"),d(er,"class","docstring"),d(nv,"id","transformers.AutoModelForTokenClassification"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForTokenClassification"),d(fd,"class","relative group"),d(Hr,"class","docstring"),d(sD,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(nD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification"),d(lD,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(iD,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(dD,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification"),d(cD,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(mD,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(fD,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(gD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(hD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(uD,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(pD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(_D,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(bD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(vD,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(TD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(FD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(CD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(MD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(ED,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(yD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(wD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(AD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(LD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(BD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(xD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(kD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(RD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(SD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(PD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d($D,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(ID,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(DD,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(qe,"class","docstring"),d(or,"class","docstring"),d(Gv,"id","transformers.AutoModelForQuestionAnswering"),d(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gv,"href","#transformers.AutoModelForQuestionAnswering"),d(ud,"class","relative group"),d(Ur,"class","docstring"),d(jD,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(ND,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(qD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(GD,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(OD,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(XD,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(VD,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(zD,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(WD,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(QD,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(HD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(UD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(JD,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(YD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(KD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(ZD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(ej,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(oj,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(rj,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(tj,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(aj,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(sj,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(nj,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(lj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(ij,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(dj,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(cj,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(mj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(fj,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(gj,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(hj,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(uj,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(pj,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(_j,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(bj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(vj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Tj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Fj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Cj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Ge,"class","docstring"),d(rr,"class","docstring"),d(LT,"id","transformers.AutoModelForTableQuestionAnswering"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(bd,"class","relative group"),d(Jr,"class","docstring"),d(Mj,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Oe,"class","docstring"),d(tr,"class","docstring"),d(kT,"id","transformers.AutoModelForImageClassification"),d(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kT,"href","#transformers.AutoModelForImageClassification"),d(Fd,"class","relative group"),d(Yr,"class","docstring"),d(Ej,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification"),d(yj,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wj,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Aj,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Lj,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Bj,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xj,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kj,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Rj,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Sj,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Pj,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification"),d($j,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(qT,"id","transformers.AutoModelForVision2Seq"),d(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qT,"href","#transformers.AutoModelForVision2Seq"),d(Ed,"class","relative group"),d(Kr,"class","docstring"),d(Ij,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ve,"class","docstring"),d(sr,"class","docstring"),d(XT,"id","transformers.AutoModelForAudioClassification"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.AutoModelForAudioClassification"),d(Ad,"class","relative group"),d(Zr,"class","docstring"),d(Dj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(jj,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Nj,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(qj,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Gj,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Oj,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Xj,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Vj,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(ze,"class","docstring"),d(nr,"class","docstring"),d(ZT,"id","transformers.AutoModelForAudioFrameClassification"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.AutoModelForAudioFrameClassification"),d(xd,"class","relative group"),d(et,"class","docstring"),d(zj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Wj,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Qj,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Hj,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(We,"class","docstring"),d(lr,"class","docstring"),d(s1,"id","transformers.AutoModelForCTC"),d(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s1,"href","#transformers.AutoModelForCTC"),d(Sd,"class","relative group"),d(ot,"class","docstring"),d(Uj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(Jj,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC"),d(Yj,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC"),d(Kj,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC"),d(Zj,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(eN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(oN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(rN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Qe,"class","docstring"),d(ir,"class","docstring"),d(u1,"id","transformers.AutoModelForSpeechSeq2Seq"),d(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u1,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Id,"class","relative group"),d(rt,"class","docstring"),d(tN,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(aN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(He,"class","docstring"),d(dr,"class","docstring"),d(v1,"id","transformers.AutoModelForAudioXVector"),d(v1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v1,"href","#transformers.AutoModelForAudioXVector"),d(Nd,"class","relative group"),d(tt,"class","docstring"),d(sN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(nN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(lN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(iN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Ue,"class","docstring"),d(cr,"class","docstring"),d(y1,"id","transformers.AutoModelForMaskedImageModeling"),d(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y1,"href","#transformers.AutoModelForMaskedImageModeling"),d(Od,"class","relative group"),d(at,"class","docstring"),d(dN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(cN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(mN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Je,"class","docstring"),d(mr,"class","docstring"),d(x1,"id","transformers.AutoModelForObjectDetection"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForObjectDetection"),d(Wd,"class","relative group"),d(st,"class","docstring"),d(fN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ye,"class","docstring"),d(fr,"class","docstring"),d(S1,"id","transformers.AutoModelForImageSegmentation"),d(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S1,"href","#transformers.AutoModelForImageSegmentation"),d(Ud,"class","relative group"),d(nt,"class","docstring"),d(gN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ke,"class","docstring"),d(gr,"class","docstring"),d(I1,"id","transformers.AutoModelForSemanticSegmentation"),d(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I1,"href","#transformers.AutoModelForSemanticSegmentation"),d(Kd,"class","relative group"),d(lt,"class","docstring"),d(hN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(uN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Ze,"class","docstring"),d(hr,"class","docstring"),d(q1,"id","transformers.TFAutoModel"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.TFAutoModel"),d(oc,"class","relative group"),d(it,"class","docstring"),d(pN,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel"),d(_N,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel"),d(bN,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel"),d(vN,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(TN,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(FN,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel"),d(CN,"href","/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel"),d(MN,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel"),d(EN,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel"),d(yN,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel"),d(wN,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel"),d(AN,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(LN,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(BN,"href","/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(xN,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel"),d(kN,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(RN,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel"),d(SN,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(PN,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model"),d($N,"href","/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel"),d(IN,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(DN,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel"),d(jN,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel"),d(NN,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel"),d(qN,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel"),d(GN,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel"),d(ON,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(XN,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel"),d(VN,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model"),d(zN,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(WN,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel"),d(QN,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel"),d(HN,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel"),d(UN,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel"),d(JN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(YN,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model"),d(KN,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel"),d(ZN,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(eq,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel"),d(oq,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(rq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel"),d(tq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(aq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(ur,"class","docstring"),d(LF,"id","transformers.TFAutoModelForPreTraining"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.TFAutoModelForPreTraining"),d(ac,"class","relative group"),d(dt,"class","docstring"),d(sq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(nq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(lq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining"),d(iq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(dq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(cq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(fq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(gq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(hq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(uq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(pq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(_q,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(bq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(vq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Tq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Fq,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Mq,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Eq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(yq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(wq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(pr,"class","docstring"),d(YF,"id","transformers.TFAutoModelForCausalLM"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.TFAutoModelForCausalLM"),d(lc,"class","relative group"),d(ct,"class","docstring"),d(Aq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Lq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Bq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(kq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(Rq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Sq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(Pq,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($q,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Iq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(_r,"class","docstring"),d(iC,"id","transformers.TFAutoModelForImageClassification"),d(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iC,"href","#transformers.TFAutoModelForImageClassification"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Dq,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(jq,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification"),d(po,"class","docstring"),d(br,"class","docstring"),d(mC,"id","transformers.TFAutoModelForMaskedLM"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.TFAutoModelForMaskedLM"),d(gc,"class","relative group"),d(ft,"class","docstring"),d(Nq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(qq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(Gq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Oq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Xq,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Vq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Wq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Qq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Hq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(Uq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Jq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(Yq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(Kq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Zq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(_o,"class","docstring"),d(vr,"class","docstring"),d(RC,"id","transformers.TFAutoModelForSeq2SeqLM"),d(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RC,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(pc,"class","relative group"),d(gt,"class","docstring"),d(sG,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(nG,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lG,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iG,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dG,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cG,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel"),d(mG,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(fG,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gG,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hG,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(XC,"id","transformers.TFAutoModelForSequenceClassification"),d(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XC,"href","#transformers.TFAutoModelForSequenceClassification"),d(vc,"class","relative group"),d(ht,"class","docstring"),d(uG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(pG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(_G,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(bG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(vG,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(TG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(FG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(MG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(EG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(wG,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(AG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(LG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(BG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(xG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(kG,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(RG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(SG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(PG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d($G,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(IG,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(DG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(jG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(NG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(u4,"id","transformers.TFAutoModelForMultipleChoice"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.TFAutoModelForMultipleChoice"),d(Cc,"class","relative group"),d(ut,"class","docstring"),d(qG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(GG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(OG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(XG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(VG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(zG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(WG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(QG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(HG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(UG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(JG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(YG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(KG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(ZG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(eO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(oO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(rO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d(S4,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(yc,"class","relative group"),d(pt,"class","docstring"),d(tO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d($4,"id","transformers.TFAutoModelForTokenClassification"),d($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($4,"href","#transformers.TFAutoModelForTokenClassification"),d(Lc,"class","relative group"),d(_t,"class","docstring"),d(aO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(sO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(nO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(lO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(iO,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(dO,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(cO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(mO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(fO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(gO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(hO,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(uO,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(pO,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(_O,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(bO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(vO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(TO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(FO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(CO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(MO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(rM,"id","transformers.TFAutoModelForQuestionAnswering"),d(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(kc,"class","relative group"),d(bt,"class","docstring"),d(EO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(yO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(wO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(AO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(LO,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(BO,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(xO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(kO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(RO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(SO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(PO,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d($O,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(IO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(DO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(jO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(NO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(GO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(OO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(CM,"id","transformers.TFAutoModelForVision2Seq"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.TFAutoModelForVision2Seq"),d(Pc,"class","relative group"),d(vt,"class","docstring"),d(XO,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(EM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Dc,"class","relative group"),d(Tt,"class","docstring"),d(VO,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(wM,"id","transformers.FlaxAutoModel"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.FlaxAutoModel"),d(qc,"class","relative group"),d(Ft,"class","docstring"),d(zO,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel"),d(WO,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel"),d(QO,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel"),d(HO,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel"),d(UO,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JO,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YO,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KO,"href","/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel"),d(oX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tX,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel"),d(sX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel"),d(nX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model"),d(mX,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(fX,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel"),d(gX,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hX,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(YM,"id","transformers.FlaxAutoModelForCausalLM"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.FlaxAutoModelForCausalLM"),d(Xc,"class","relative group"),d(Ct,"class","docstring"),d(uX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(pX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(_X,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(bX,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(rE,"id","transformers.FlaxAutoModelForPreTraining"),d(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rE,"href","#transformers.FlaxAutoModelForPreTraining"),d(Wc,"class","relative group"),d(Mt,"class","docstring"),d(vX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(TX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(FX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(CX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(MX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(EX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(yX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(wX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(LX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(BX,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(hE,"id","transformers.FlaxAutoModelForMaskedLM"),d(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Uc,"class","relative group"),d(Et,"class","docstring"),d(xX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(kX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(RX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(SX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(PX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d($X,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(IX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(jX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(EE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Kc,"class","relative group"),d(yt,"class","docstring"),d(NX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qX,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(XX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(VX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(QX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(PE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(om,"class","relative group"),d(wt,"class","docstring"),d(HX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(UX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(JX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(YX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(KX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ZX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(eV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(oV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(rV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(VE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(am,"class","relative group"),d(At,"class","docstring"),d(tV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(aV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(sV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(nV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(lV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(iV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(dV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(cV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(mV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(e3,"id","transformers.FlaxAutoModelForTokenClassification"),d(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(lm,"class","relative group"),d(Lt,"class","docstring"),d(fV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(gV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(hV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(uV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(pV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(_V,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(bV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(i3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(cm,"class","relative group"),d(Bt,"class","docstring"),d(vV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(TV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(FV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(CV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(MV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(EV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(yV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(p3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(gm,"class","relative group"),d(xt,"class","docstring"),d(wV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(b3,"id","transformers.FlaxAutoModelForImageClassification"),d(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b3,"href","#transformers.FlaxAutoModelForImageClassification"),d(pm,"class","relative group"),d(kt,"class","docstring"),d(AV,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(LV,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(F3,"id","transformers.FlaxAutoModelForVision2Seq"),d(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(vm,"class","relative group"),d(Rt,"class","docstring"),d(BV,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,_){e(document.head,J),b(c,Be,_),b(c,ie,_),e(ie,fe),e(fe,so),g(ce,so,null),e(ie,_e),e(ie,Go),e(Go,Li),b(c,Mm,_),b(c,na,_),e(na,Bi),e(na,xi),e(xi,C5),e(na,Em),b(c,ye,_),b(c,io,_),e(io,ki),e(io,$s),e($s,M5),e(io,Is),e(io,Ds),e(Ds,E5),e(io,Ri),e(io,js),e(js,y5),e(io,Si),b(c,ym,_),g($a,c,_),b(c,co,_),b(c,ge,_),e(ge,l7),e(ge,Pi),e(Pi,i7),e(ge,d7),b(c,Oo,_),b(c,Ia,_),e(Ia,c7),e(Ia,wm),e(wm,m7),e(Ia,$Re),b(c,y9e,_),b(c,$i,_),e($i,Am),e(Am,TW),g(w5,TW,null),e($i,IRe),e($i,FW),e(FW,DRe),b(c,w9e,_),b(c,Ns,_),e(Ns,jRe),e(Ns,CW),e(CW,NRe),e(Ns,qRe),e(Ns,MW),e(MW,GRe),e(Ns,ORe),b(c,A9e,_),g(A5,c,_),b(c,L9e,_),b(c,f7,_),e(f7,XRe),b(c,B9e,_),g(Lm,c,_),b(c,x9e,_),b(c,Ii,_),e(Ii,Bm),e(Bm,EW),g(L5,EW,null),e(Ii,VRe),e(Ii,yW),e(yW,zRe),b(c,k9e,_),b(c,Xo,_),g(B5,Xo,null),e(Xo,WRe),e(Xo,x5),e(x5,QRe),e(x5,g7),e(g7,HRe),e(x5,URe),e(Xo,JRe),e(Xo,k5),e(k5,YRe),e(k5,wW),e(wW,KRe),e(k5,ZRe),e(Xo,eSe),e(Xo,mo),g(R5,mo,null),e(mo,oSe),e(mo,AW),e(AW,rSe),e(mo,tSe),e(mo,Di),e(Di,aSe),e(Di,LW),e(LW,sSe),e(Di,nSe),e(Di,BW),e(BW,lSe),e(Di,iSe),e(mo,dSe),e(mo,v),e(v,xm),e(xm,xW),e(xW,cSe),e(xm,mSe),e(xm,h7),e(h7,fSe),e(xm,gSe),e(v,hSe),e(v,km),e(km,kW),e(kW,uSe),e(km,pSe),e(km,u7),e(u7,_Se),e(km,bSe),e(v,vSe),e(v,Rm),e(Rm,RW),e(RW,TSe),e(Rm,FSe),e(Rm,p7),e(p7,CSe),e(Rm,MSe),e(v,ESe),e(v,Sm),e(Sm,SW),e(SW,ySe),e(Sm,wSe),e(Sm,_7),e(_7,ASe),e(Sm,LSe),e(v,BSe),e(v,Pm),e(Pm,PW),e(PW,xSe),e(Pm,kSe),e(Pm,b7),e(b7,RSe),e(Pm,SSe),e(v,PSe),e(v,$m),e($m,$W),e($W,$Se),e($m,ISe),e($m,v7),e(v7,DSe),e($m,jSe),e(v,NSe),e(v,Im),e(Im,IW),e(IW,qSe),e(Im,GSe),e(Im,T7),e(T7,OSe),e(Im,XSe),e(v,VSe),e(v,Dm),e(Dm,DW),e(DW,zSe),e(Dm,WSe),e(Dm,F7),e(F7,QSe),e(Dm,HSe),e(v,USe),e(v,jm),e(jm,jW),e(jW,JSe),e(jm,YSe),e(jm,C7),e(C7,KSe),e(jm,ZSe),e(v,ePe),e(v,Nm),e(Nm,NW),e(NW,oPe),e(Nm,rPe),e(Nm,M7),e(M7,tPe),e(Nm,aPe),e(v,sPe),e(v,qm),e(qm,qW),e(qW,nPe),e(qm,lPe),e(qm,E7),e(E7,iPe),e(qm,dPe),e(v,cPe),e(v,Gm),e(Gm,GW),e(GW,mPe),e(Gm,fPe),e(Gm,y7),e(y7,gPe),e(Gm,hPe),e(v,uPe),e(v,Om),e(Om,OW),e(OW,pPe),e(Om,_Pe),e(Om,w7),e(w7,bPe),e(Om,vPe),e(v,TPe),e(v,Xm),e(Xm,XW),e(XW,FPe),e(Xm,CPe),e(Xm,A7),e(A7,MPe),e(Xm,EPe),e(v,yPe),e(v,Vm),e(Vm,VW),e(VW,wPe),e(Vm,APe),e(Vm,L7),e(L7,LPe),e(Vm,BPe),e(v,xPe),e(v,zm),e(zm,zW),e(zW,kPe),e(zm,RPe),e(zm,B7),e(B7,SPe),e(zm,PPe),e(v,$Pe),e(v,Wm),e(Wm,WW),e(WW,IPe),e(Wm,DPe),e(Wm,x7),e(x7,jPe),e(Wm,NPe),e(v,qPe),e(v,Qm),e(Qm,QW),e(QW,GPe),e(Qm,OPe),e(Qm,k7),e(k7,XPe),e(Qm,VPe),e(v,zPe),e(v,Hm),e(Hm,HW),e(HW,WPe),e(Hm,QPe),e(Hm,R7),e(R7,HPe),e(Hm,UPe),e(v,JPe),e(v,Um),e(Um,UW),e(UW,YPe),e(Um,KPe),e(Um,S7),e(S7,ZPe),e(Um,e$e),e(v,o$e),e(v,Jm),e(Jm,JW),e(JW,r$e),e(Jm,t$e),e(Jm,P7),e(P7,a$e),e(Jm,s$e),e(v,n$e),e(v,Ym),e(Ym,YW),e(YW,l$e),e(Ym,i$e),e(Ym,$7),e($7,d$e),e(Ym,c$e),e(v,m$e),e(v,Km),e(Km,KW),e(KW,f$e),e(Km,g$e),e(Km,I7),e(I7,h$e),e(Km,u$e),e(v,p$e),e(v,Zm),e(Zm,ZW),e(ZW,_$e),e(Zm,b$e),e(Zm,D7),e(D7,v$e),e(Zm,T$e),e(v,F$e),e(v,ef),e(ef,eQ),e(eQ,C$e),e(ef,M$e),e(ef,j7),e(j7,E$e),e(ef,y$e),e(v,w$e),e(v,of),e(of,oQ),e(oQ,A$e),e(of,L$e),e(of,N7),e(N7,B$e),e(of,x$e),e(v,k$e),e(v,rf),e(rf,rQ),e(rQ,R$e),e(rf,S$e),e(rf,q7),e(q7,P$e),e(rf,$$e),e(v,I$e),e(v,tf),e(tf,tQ),e(tQ,D$e),e(tf,j$e),e(tf,G7),e(G7,N$e),e(tf,q$e),e(v,G$e),e(v,af),e(af,aQ),e(aQ,O$e),e(af,X$e),e(af,O7),e(O7,V$e),e(af,z$e),e(v,W$e),e(v,sf),e(sf,sQ),e(sQ,Q$e),e(sf,H$e),e(sf,X7),e(X7,U$e),e(sf,J$e),e(v,Y$e),e(v,nf),e(nf,nQ),e(nQ,K$e),e(nf,Z$e),e(nf,V7),e(V7,eIe),e(nf,oIe),e(v,rIe),e(v,lf),e(lf,lQ),e(lQ,tIe),e(lf,aIe),e(lf,z7),e(z7,sIe),e(lf,nIe),e(v,lIe),e(v,df),e(df,iQ),e(iQ,iIe),e(df,dIe),e(df,W7),e(W7,cIe),e(df,mIe),e(v,fIe),e(v,cf),e(cf,dQ),e(dQ,gIe),e(cf,hIe),e(cf,Q7),e(Q7,uIe),e(cf,pIe),e(v,_Ie),e(v,mf),e(mf,cQ),e(cQ,bIe),e(mf,vIe),e(mf,H7),e(H7,TIe),e(mf,FIe),e(v,CIe),e(v,ff),e(ff,mQ),e(mQ,MIe),e(ff,EIe),e(ff,U7),e(U7,yIe),e(ff,wIe),e(v,AIe),e(v,gf),e(gf,fQ),e(fQ,LIe),e(gf,BIe),e(gf,J7),e(J7,xIe),e(gf,kIe),e(v,RIe),e(v,hf),e(hf,gQ),e(gQ,SIe),e(hf,PIe),e(hf,Y7),e(Y7,$Ie),e(hf,IIe),e(v,DIe),e(v,uf),e(uf,hQ),e(hQ,jIe),e(uf,NIe),e(uf,K7),e(K7,qIe),e(uf,GIe),e(v,OIe),e(v,pf),e(pf,uQ),e(uQ,XIe),e(pf,VIe),e(pf,Z7),e(Z7,zIe),e(pf,WIe),e(v,QIe),e(v,_f),e(_f,pQ),e(pQ,HIe),e(_f,UIe),e(_f,e9),e(e9,JIe),e(_f,YIe),e(v,KIe),e(v,bf),e(bf,_Q),e(_Q,ZIe),e(bf,eDe),e(bf,o9),e(o9,oDe),e(bf,rDe),e(v,tDe),e(v,vf),e(vf,bQ),e(bQ,aDe),e(vf,sDe),e(vf,r9),e(r9,nDe),e(vf,lDe),e(v,iDe),e(v,Tf),e(Tf,vQ),e(vQ,dDe),e(Tf,cDe),e(Tf,t9),e(t9,mDe),e(Tf,fDe),e(v,gDe),e(v,Ff),e(Ff,TQ),e(TQ,hDe),e(Ff,uDe),e(Ff,a9),e(a9,pDe),e(Ff,_De),e(v,bDe),e(v,Cf),e(Cf,FQ),e(FQ,vDe),e(Cf,TDe),e(Cf,s9),e(s9,FDe),e(Cf,CDe),e(v,MDe),e(v,Mf),e(Mf,CQ),e(CQ,EDe),e(Mf,yDe),e(Mf,n9),e(n9,wDe),e(Mf,ADe),e(v,LDe),e(v,Ef),e(Ef,MQ),e(MQ,BDe),e(Ef,xDe),e(Ef,l9),e(l9,kDe),e(Ef,RDe),e(v,SDe),e(v,yf),e(yf,EQ),e(EQ,PDe),e(yf,$De),e(yf,i9),e(i9,IDe),e(yf,DDe),e(v,jDe),e(v,wf),e(wf,yQ),e(yQ,NDe),e(wf,qDe),e(wf,d9),e(d9,GDe),e(wf,ODe),e(v,XDe),e(v,Af),e(Af,wQ),e(wQ,VDe),e(Af,zDe),e(Af,c9),e(c9,WDe),e(Af,QDe),e(v,HDe),e(v,Lf),e(Lf,AQ),e(AQ,UDe),e(Lf,JDe),e(Lf,m9),e(m9,YDe),e(Lf,KDe),e(v,ZDe),e(v,Bf),e(Bf,LQ),e(LQ,eje),e(Bf,oje),e(Bf,f9),e(f9,rje),e(Bf,tje),e(v,aje),e(v,xf),e(xf,BQ),e(BQ,sje),e(xf,nje),e(xf,g9),e(g9,lje),e(xf,ije),e(v,dje),e(v,kf),e(kf,xQ),e(xQ,cje),e(kf,mje),e(kf,h9),e(h9,fje),e(kf,gje),e(v,hje),e(v,Rf),e(Rf,kQ),e(kQ,uje),e(Rf,pje),e(Rf,u9),e(u9,_je),e(Rf,bje),e(v,vje),e(v,Sf),e(Sf,RQ),e(RQ,Tje),e(Sf,Fje),e(Sf,p9),e(p9,Cje),e(Sf,Mje),e(v,Eje),e(v,Pf),e(Pf,SQ),e(SQ,yje),e(Pf,wje),e(Pf,_9),e(_9,Aje),e(Pf,Lje),e(v,Bje),e(v,$f),e($f,PQ),e(PQ,xje),e($f,kje),e($f,b9),e(b9,Rje),e($f,Sje),e(v,Pje),e(v,If),e(If,$Q),e($Q,$je),e(If,Ije),e(If,v9),e(v9,Dje),e(If,jje),e(v,Nje),e(v,Df),e(Df,IQ),e(IQ,qje),e(Df,Gje),e(Df,T9),e(T9,Oje),e(Df,Xje),e(v,Vje),e(v,jf),e(jf,DQ),e(DQ,zje),e(jf,Wje),e(jf,F9),e(F9,Qje),e(jf,Hje),e(v,Uje),e(v,Nf),e(Nf,jQ),e(jQ,Jje),e(Nf,Yje),e(Nf,C9),e(C9,Kje),e(Nf,Zje),e(v,eNe),e(v,qf),e(qf,NQ),e(NQ,oNe),e(qf,rNe),e(qf,M9),e(M9,tNe),e(qf,aNe),e(v,sNe),e(v,Gf),e(Gf,qQ),e(qQ,nNe),e(Gf,lNe),e(Gf,E9),e(E9,iNe),e(Gf,dNe),e(v,cNe),e(v,Of),e(Of,GQ),e(GQ,mNe),e(Of,fNe),e(Of,y9),e(y9,gNe),e(Of,hNe),e(v,uNe),e(v,Xf),e(Xf,OQ),e(OQ,pNe),e(Xf,_Ne),e(Xf,w9),e(w9,bNe),e(Xf,vNe),e(v,TNe),e(v,Vf),e(Vf,XQ),e(XQ,FNe),e(Vf,CNe),e(Vf,A9),e(A9,MNe),e(Vf,ENe),e(v,yNe),e(v,zf),e(zf,VQ),e(VQ,wNe),e(zf,ANe),e(zf,L9),e(L9,LNe),e(zf,BNe),e(v,xNe),e(v,Wf),e(Wf,zQ),e(zQ,kNe),e(Wf,RNe),e(Wf,B9),e(B9,SNe),e(Wf,PNe),e(v,$Ne),e(v,Qf),e(Qf,WQ),e(WQ,INe),e(Qf,DNe),e(Qf,x9),e(x9,jNe),e(Qf,NNe),e(v,qNe),e(v,Hf),e(Hf,QQ),e(QQ,GNe),e(Hf,ONe),e(Hf,k9),e(k9,XNe),e(Hf,VNe),e(v,zNe),e(v,Uf),e(Uf,HQ),e(HQ,WNe),e(Uf,QNe),e(Uf,R9),e(R9,HNe),e(Uf,UNe),e(v,JNe),e(v,Jf),e(Jf,UQ),e(UQ,YNe),e(Jf,KNe),e(Jf,S9),e(S9,ZNe),e(Jf,eqe),e(v,oqe),e(v,Yf),e(Yf,JQ),e(JQ,rqe),e(Yf,tqe),e(Yf,P9),e(P9,aqe),e(Yf,sqe),e(v,nqe),e(v,Kf),e(Kf,YQ),e(YQ,lqe),e(Kf,iqe),e(Kf,$9),e($9,dqe),e(Kf,cqe),e(v,mqe),e(v,Zf),e(Zf,KQ),e(KQ,fqe),e(Zf,gqe),e(Zf,I9),e(I9,hqe),e(Zf,uqe),e(v,pqe),e(v,eg),e(eg,ZQ),e(ZQ,_qe),e(eg,bqe),e(eg,D9),e(D9,vqe),e(eg,Tqe),e(v,Fqe),e(v,og),e(og,eH),e(eH,Cqe),e(og,Mqe),e(og,j9),e(j9,Eqe),e(og,yqe),e(v,wqe),e(v,rg),e(rg,oH),e(oH,Aqe),e(rg,Lqe),e(rg,N9),e(N9,Bqe),e(rg,xqe),e(v,kqe),e(v,tg),e(tg,rH),e(rH,Rqe),e(tg,Sqe),e(tg,q9),e(q9,Pqe),e(tg,$qe),e(v,Iqe),e(v,ag),e(ag,tH),e(tH,Dqe),e(ag,jqe),e(ag,G9),e(G9,Nqe),e(ag,qqe),e(v,Gqe),e(v,sg),e(sg,aH),e(aH,Oqe),e(sg,Xqe),e(sg,O9),e(O9,Vqe),e(sg,zqe),e(v,Wqe),e(v,ng),e(ng,sH),e(sH,Qqe),e(ng,Hqe),e(ng,X9),e(X9,Uqe),e(ng,Jqe),e(v,Yqe),e(v,lg),e(lg,nH),e(nH,Kqe),e(lg,Zqe),e(lg,V9),e(V9,eGe),e(lg,oGe),e(v,rGe),e(v,ig),e(ig,lH),e(lH,tGe),e(ig,aGe),e(ig,z9),e(z9,sGe),e(ig,nGe),e(v,lGe),e(v,dg),e(dg,iH),e(iH,iGe),e(dg,dGe),e(dg,W9),e(W9,cGe),e(dg,mGe),e(v,fGe),e(v,cg),e(cg,dH),e(dH,gGe),e(cg,hGe),e(cg,Q9),e(Q9,uGe),e(cg,pGe),e(v,_Ge),e(v,mg),e(mg,cH),e(cH,bGe),e(mg,vGe),e(mg,H9),e(H9,TGe),e(mg,FGe),e(v,CGe),e(v,fg),e(fg,mH),e(mH,MGe),e(fg,EGe),e(fg,U9),e(U9,yGe),e(fg,wGe),e(v,AGe),e(v,gg),e(gg,fH),e(fH,LGe),e(gg,BGe),e(gg,J9),e(J9,xGe),e(gg,kGe),e(v,RGe),e(v,hg),e(hg,gH),e(gH,SGe),e(hg,PGe),e(hg,Y9),e(Y9,$Ge),e(hg,IGe),e(v,DGe),e(v,ug),e(ug,hH),e(hH,jGe),e(ug,NGe),e(ug,K9),e(K9,qGe),e(ug,GGe),e(v,OGe),e(v,pg),e(pg,uH),e(uH,XGe),e(pg,VGe),e(pg,Z9),e(Z9,zGe),e(pg,WGe),e(mo,QGe),e(mo,pH),e(pH,HGe),e(mo,UGe),g(S5,mo,null),e(Xo,JGe),e(Xo,_g),g(P5,_g,null),e(_g,YGe),e(_g,_H),e(_H,KGe),b(c,R9e,_),b(c,ji,_),e(ji,bg),e(bg,bH),g($5,bH,null),e(ji,ZGe),e(ji,vH),e(vH,eOe),b(c,S9e,_),b(c,Vo,_),g(I5,Vo,null),e(Vo,oOe),e(Vo,D5),e(D5,rOe),e(D5,eB),e(eB,tOe),e(D5,aOe),e(Vo,sOe),e(Vo,j5),e(j5,nOe),e(j5,TH),e(TH,lOe),e(j5,iOe),e(Vo,dOe),e(Vo,fo),g(N5,fo,null),e(fo,cOe),e(fo,FH),e(FH,mOe),e(fo,fOe),e(fo,Da),e(Da,gOe),e(Da,CH),e(CH,hOe),e(Da,uOe),e(Da,MH),e(MH,pOe),e(Da,_Oe),e(Da,EH),e(EH,bOe),e(Da,vOe),e(fo,TOe),e(fo,M),e(M,qs),e(qs,yH),e(yH,FOe),e(qs,COe),e(qs,oB),e(oB,MOe),e(qs,EOe),e(qs,rB),e(rB,yOe),e(qs,wOe),e(M,AOe),e(M,Gs),e(Gs,wH),e(wH,LOe),e(Gs,BOe),e(Gs,tB),e(tB,xOe),e(Gs,kOe),e(Gs,aB),e(aB,ROe),e(Gs,SOe),e(M,POe),e(M,Os),e(Os,AH),e(AH,$Oe),e(Os,IOe),e(Os,sB),e(sB,DOe),e(Os,jOe),e(Os,nB),e(nB,NOe),e(Os,qOe),e(M,GOe),e(M,vg),e(vg,LH),e(LH,OOe),e(vg,XOe),e(vg,lB),e(lB,VOe),e(vg,zOe),e(M,WOe),e(M,Xs),e(Xs,BH),e(BH,QOe),e(Xs,HOe),e(Xs,iB),e(iB,UOe),e(Xs,JOe),e(Xs,dB),e(dB,YOe),e(Xs,KOe),e(M,ZOe),e(M,Tg),e(Tg,xH),e(xH,eXe),e(Tg,oXe),e(Tg,cB),e(cB,rXe),e(Tg,tXe),e(M,aXe),e(M,Fg),e(Fg,kH),e(kH,sXe),e(Fg,nXe),e(Fg,mB),e(mB,lXe),e(Fg,iXe),e(M,dXe),e(M,Cg),e(Cg,RH),e(RH,cXe),e(Cg,mXe),e(Cg,fB),e(fB,fXe),e(Cg,gXe),e(M,hXe),e(M,Vs),e(Vs,SH),e(SH,uXe),e(Vs,pXe),e(Vs,gB),e(gB,_Xe),e(Vs,bXe),e(Vs,hB),e(hB,vXe),e(Vs,TXe),e(M,FXe),e(M,zs),e(zs,PH),e(PH,CXe),e(zs,MXe),e(zs,uB),e(uB,EXe),e(zs,yXe),e(zs,pB),e(pB,wXe),e(zs,AXe),e(M,LXe),e(M,Ws),e(Ws,$H),e($H,BXe),e(Ws,xXe),e(Ws,_B),e(_B,kXe),e(Ws,RXe),e(Ws,bB),e(bB,SXe),e(Ws,PXe),e(M,$Xe),e(M,Mg),e(Mg,IH),e(IH,IXe),e(Mg,DXe),e(Mg,vB),e(vB,jXe),e(Mg,NXe),e(M,qXe),e(M,Eg),e(Eg,DH),e(DH,GXe),e(Eg,OXe),e(Eg,TB),e(TB,XXe),e(Eg,VXe),e(M,zXe),e(M,Qs),e(Qs,jH),e(jH,WXe),e(Qs,QXe),e(Qs,FB),e(FB,HXe),e(Qs,UXe),e(Qs,CB),e(CB,JXe),e(Qs,YXe),e(M,KXe),e(M,yg),e(yg,NH),e(NH,ZXe),e(yg,eVe),e(yg,MB),e(MB,oVe),e(yg,rVe),e(M,tVe),e(M,Hs),e(Hs,qH),e(qH,aVe),e(Hs,sVe),e(Hs,EB),e(EB,nVe),e(Hs,lVe),e(Hs,yB),e(yB,iVe),e(Hs,dVe),e(M,cVe),e(M,Us),e(Us,GH),e(GH,mVe),e(Us,fVe),e(Us,wB),e(wB,gVe),e(Us,hVe),e(Us,AB),e(AB,uVe),e(Us,pVe),e(M,_Ve),e(M,Js),e(Js,OH),e(OH,bVe),e(Js,vVe),e(Js,LB),e(LB,TVe),e(Js,FVe),e(Js,XH),e(XH,CVe),e(Js,MVe),e(M,EVe),e(M,wg),e(wg,VH),e(VH,yVe),e(wg,wVe),e(wg,BB),e(BB,AVe),e(wg,LVe),e(M,BVe),e(M,Ys),e(Ys,zH),e(zH,xVe),e(Ys,kVe),e(Ys,xB),e(xB,RVe),e(Ys,SVe),e(Ys,kB),e(kB,PVe),e(Ys,$Ve),e(M,IVe),e(M,Ag),e(Ag,WH),e(WH,DVe),e(Ag,jVe),e(Ag,RB),e(RB,NVe),e(Ag,qVe),e(M,GVe),e(M,Ks),e(Ks,QH),e(QH,OVe),e(Ks,XVe),e(Ks,SB),e(SB,VVe),e(Ks,zVe),e(Ks,PB),e(PB,WVe),e(Ks,QVe),e(M,HVe),e(M,Zs),e(Zs,HH),e(HH,UVe),e(Zs,JVe),e(Zs,$B),e($B,YVe),e(Zs,KVe),e(Zs,IB),e(IB,ZVe),e(Zs,eze),e(M,oze),e(M,en),e(en,UH),e(UH,rze),e(en,tze),e(en,DB),e(DB,aze),e(en,sze),e(en,jB),e(jB,nze),e(en,lze),e(M,ize),e(M,Lg),e(Lg,JH),e(JH,dze),e(Lg,cze),e(Lg,NB),e(NB,mze),e(Lg,fze),e(M,gze),e(M,on),e(on,YH),e(YH,hze),e(on,uze),e(on,qB),e(qB,pze),e(on,_ze),e(on,GB),e(GB,bze),e(on,vze),e(M,Tze),e(M,Bg),e(Bg,KH),e(KH,Fze),e(Bg,Cze),e(Bg,OB),e(OB,Mze),e(Bg,Eze),e(M,yze),e(M,rn),e(rn,ZH),e(ZH,wze),e(rn,Aze),e(rn,XB),e(XB,Lze),e(rn,Bze),e(rn,VB),e(VB,xze),e(rn,kze),e(M,Rze),e(M,tn),e(tn,eU),e(eU,Sze),e(tn,Pze),e(tn,zB),e(zB,$ze),e(tn,Ize),e(tn,WB),e(WB,Dze),e(tn,jze),e(M,Nze),e(M,an),e(an,oU),e(oU,qze),e(an,Gze),e(an,QB),e(QB,Oze),e(an,Xze),e(an,HB),e(HB,Vze),e(an,zze),e(M,Wze),e(M,sn),e(sn,rU),e(rU,Qze),e(sn,Hze),e(sn,UB),e(UB,Uze),e(sn,Jze),e(sn,JB),e(JB,Yze),e(sn,Kze),e(M,Zze),e(M,xg),e(xg,tU),e(tU,eWe),e(xg,oWe),e(xg,YB),e(YB,rWe),e(xg,tWe),e(M,aWe),e(M,nn),e(nn,aU),e(aU,sWe),e(nn,nWe),e(nn,KB),e(KB,lWe),e(nn,iWe),e(nn,ZB),e(ZB,dWe),e(nn,cWe),e(M,mWe),e(M,ln),e(ln,sU),e(sU,fWe),e(ln,gWe),e(ln,ex),e(ex,hWe),e(ln,uWe),e(ln,ox),e(ox,pWe),e(ln,_We),e(M,bWe),e(M,dn),e(dn,nU),e(nU,vWe),e(dn,TWe),e(dn,rx),e(rx,FWe),e(dn,CWe),e(dn,tx),e(tx,MWe),e(dn,EWe),e(M,yWe),e(M,cn),e(cn,lU),e(lU,wWe),e(cn,AWe),e(cn,ax),e(ax,LWe),e(cn,BWe),e(cn,sx),e(sx,xWe),e(cn,kWe),e(M,RWe),e(M,mn),e(mn,iU),e(iU,SWe),e(mn,PWe),e(mn,nx),e(nx,$We),e(mn,IWe),e(mn,lx),e(lx,DWe),e(mn,jWe),e(M,NWe),e(M,fn),e(fn,dU),e(dU,qWe),e(fn,GWe),e(fn,ix),e(ix,OWe),e(fn,XWe),e(fn,dx),e(dx,VWe),e(fn,zWe),e(M,WWe),e(M,kg),e(kg,cU),e(cU,QWe),e(kg,HWe),e(kg,cx),e(cx,UWe),e(kg,JWe),e(M,YWe),e(M,gn),e(gn,mU),e(mU,KWe),e(gn,ZWe),e(gn,mx),e(mx,eQe),e(gn,oQe),e(gn,fx),e(fx,rQe),e(gn,tQe),e(M,aQe),e(M,Rg),e(Rg,fU),e(fU,sQe),e(Rg,nQe),e(Rg,gx),e(gx,lQe),e(Rg,iQe),e(M,dQe),e(M,Sg),e(Sg,gU),e(gU,cQe),e(Sg,mQe),e(Sg,hx),e(hx,fQe),e(Sg,gQe),e(M,hQe),e(M,hn),e(hn,hU),e(hU,uQe),e(hn,pQe),e(hn,ux),e(ux,_Qe),e(hn,bQe),e(hn,px),e(px,vQe),e(hn,TQe),e(M,FQe),e(M,un),e(un,uU),e(uU,CQe),e(un,MQe),e(un,_x),e(_x,EQe),e(un,yQe),e(un,bx),e(bx,wQe),e(un,AQe),e(M,LQe),e(M,Pg),e(Pg,pU),e(pU,BQe),e(Pg,xQe),e(Pg,vx),e(vx,kQe),e(Pg,RQe),e(M,SQe),e(M,pn),e(pn,_U),e(_U,PQe),e(pn,$Qe),e(pn,Tx),e(Tx,IQe),e(pn,DQe),e(pn,Fx),e(Fx,jQe),e(pn,NQe),e(M,qQe),e(M,_n),e(_n,bU),e(bU,GQe),e(_n,OQe),e(_n,Cx),e(Cx,XQe),e(_n,VQe),e(_n,Mx),e(Mx,zQe),e(_n,WQe),e(M,QQe),e(M,bn),e(bn,vU),e(vU,HQe),e(bn,UQe),e(bn,Ex),e(Ex,JQe),e(bn,YQe),e(bn,yx),e(yx,KQe),e(bn,ZQe),e(M,eHe),e(M,vn),e(vn,TU),e(TU,oHe),e(vn,rHe),e(vn,wx),e(wx,tHe),e(vn,aHe),e(vn,Ax),e(Ax,sHe),e(vn,nHe),e(M,lHe),e(M,Tn),e(Tn,FU),e(FU,iHe),e(Tn,dHe),e(Tn,Lx),e(Lx,cHe),e(Tn,mHe),e(Tn,Bx),e(Bx,fHe),e(Tn,gHe),e(M,hHe),e(M,$g),e($g,CU),e(CU,uHe),e($g,pHe),e($g,xx),e(xx,_He),e($g,bHe),e(M,vHe),e(M,Ig),e(Ig,MU),e(MU,THe),e(Ig,FHe),e(Ig,kx),e(kx,CHe),e(Ig,MHe),e(M,EHe),e(M,Dg),e(Dg,EU),e(EU,yHe),e(Dg,wHe),e(Dg,Rx),e(Rx,AHe),e(Dg,LHe),e(M,BHe),e(M,jg),e(jg,yU),e(yU,xHe),e(jg,kHe),e(jg,Sx),e(Sx,RHe),e(jg,SHe),e(M,PHe),e(M,Fn),e(Fn,wU),e(wU,$He),e(Fn,IHe),e(Fn,Px),e(Px,DHe),e(Fn,jHe),e(Fn,$x),e($x,NHe),e(Fn,qHe),e(M,GHe),e(M,Ng),e(Ng,AU),e(AU,OHe),e(Ng,XHe),e(Ng,Ix),e(Ix,VHe),e(Ng,zHe),e(M,WHe),e(M,Cn),e(Cn,LU),e(LU,QHe),e(Cn,HHe),e(Cn,Dx),e(Dx,UHe),e(Cn,JHe),e(Cn,jx),e(jx,YHe),e(Cn,KHe),e(M,ZHe),e(M,Mn),e(Mn,BU),e(BU,eUe),e(Mn,oUe),e(Mn,Nx),e(Nx,rUe),e(Mn,tUe),e(Mn,qx),e(qx,aUe),e(Mn,sUe),e(M,nUe),e(M,En),e(En,xU),e(xU,lUe),e(En,iUe),e(En,Gx),e(Gx,dUe),e(En,cUe),e(En,Ox),e(Ox,mUe),e(En,fUe),e(M,gUe),e(M,yn),e(yn,kU),e(kU,hUe),e(yn,uUe),e(yn,Xx),e(Xx,pUe),e(yn,_Ue),e(yn,Vx),e(Vx,bUe),e(yn,vUe),e(M,TUe),e(M,wn),e(wn,RU),e(RU,FUe),e(wn,CUe),e(wn,zx),e(zx,MUe),e(wn,EUe),e(wn,Wx),e(Wx,yUe),e(wn,wUe),e(M,AUe),e(M,qg),e(qg,SU),e(SU,LUe),e(qg,BUe),e(qg,Qx),e(Qx,xUe),e(qg,kUe),e(M,RUe),e(M,Gg),e(Gg,PU),e(PU,SUe),e(Gg,PUe),e(Gg,Hx),e(Hx,$Ue),e(Gg,IUe),e(M,DUe),e(M,An),e(An,$U),e($U,jUe),e(An,NUe),e(An,Ux),e(Ux,qUe),e(An,GUe),e(An,Jx),e(Jx,OUe),e(An,XUe),e(M,VUe),e(M,Ln),e(Ln,IU),e(IU,zUe),e(Ln,WUe),e(Ln,Yx),e(Yx,QUe),e(Ln,HUe),e(Ln,Kx),e(Kx,UUe),e(Ln,JUe),e(M,YUe),e(M,Bn),e(Bn,DU),e(DU,KUe),e(Bn,ZUe),e(Bn,Zx),e(Zx,eJe),e(Bn,oJe),e(Bn,ek),e(ek,rJe),e(Bn,tJe),e(M,aJe),e(M,Og),e(Og,jU),e(jU,sJe),e(Og,nJe),e(Og,ok),e(ok,lJe),e(Og,iJe),e(M,dJe),e(M,Xg),e(Xg,NU),e(NU,cJe),e(Xg,mJe),e(Xg,rk),e(rk,fJe),e(Xg,gJe),e(M,hJe),e(M,Vg),e(Vg,qU),e(qU,uJe),e(Vg,pJe),e(Vg,tk),e(tk,_Je),e(Vg,bJe),e(M,vJe),e(M,zg),e(zg,GU),e(GU,TJe),e(zg,FJe),e(zg,ak),e(ak,CJe),e(zg,MJe),e(M,EJe),e(M,xn),e(xn,OU),e(OU,yJe),e(xn,wJe),e(xn,sk),e(sk,AJe),e(xn,LJe),e(xn,nk),e(nk,BJe),e(xn,xJe),e(M,kJe),e(M,Wg),e(Wg,XU),e(XU,RJe),e(Wg,SJe),e(Wg,lk),e(lk,PJe),e(Wg,$Je),e(M,IJe),e(M,Qg),e(Qg,VU),e(VU,DJe),e(Qg,jJe),e(Qg,ik),e(ik,NJe),e(Qg,qJe),e(M,GJe),e(M,kn),e(kn,zU),e(zU,OJe),e(kn,XJe),e(kn,dk),e(dk,VJe),e(kn,zJe),e(kn,ck),e(ck,WJe),e(kn,QJe),e(M,HJe),e(M,Rn),e(Rn,WU),e(WU,UJe),e(Rn,JJe),e(Rn,mk),e(mk,YJe),e(Rn,KJe),e(Rn,fk),e(fk,ZJe),e(Rn,eYe),e(fo,oYe),e(fo,QU),e(QU,rYe),e(fo,tYe),g(q5,fo,null),e(Vo,aYe),e(Vo,Hg),g(G5,Hg,null),e(Hg,sYe),e(Hg,HU),e(HU,nYe),b(c,P9e,_),b(c,Ni,_),e(Ni,Ug),e(Ug,UU),g(O5,UU,null),e(Ni,lYe),e(Ni,JU),e(JU,iYe),b(c,$9e,_),b(c,zo,_),g(X5,zo,null),e(zo,dYe),e(zo,V5),e(V5,cYe),e(V5,gk),e(gk,mYe),e(V5,fYe),e(zo,gYe),e(zo,z5),e(z5,hYe),e(z5,YU),e(YU,uYe),e(z5,pYe),e(zo,_Ye),e(zo,xe),g(W5,xe,null),e(xe,bYe),e(xe,KU),e(KU,vYe),e(xe,TYe),e(xe,ja),e(ja,FYe),e(ja,ZU),e(ZU,CYe),e(ja,MYe),e(ja,eJ),e(eJ,EYe),e(ja,yYe),e(ja,oJ),e(oJ,wYe),e(ja,AYe),e(xe,LYe),e(xe,ne),e(ne,Jg),e(Jg,rJ),e(rJ,BYe),e(Jg,xYe),e(Jg,hk),e(hk,kYe),e(Jg,RYe),e(ne,SYe),e(ne,Yg),e(Yg,tJ),e(tJ,PYe),e(Yg,$Ye),e(Yg,uk),e(uk,IYe),e(Yg,DYe),e(ne,jYe),e(ne,Kg),e(Kg,aJ),e(aJ,NYe),e(Kg,qYe),e(Kg,pk),e(pk,GYe),e(Kg,OYe),e(ne,XYe),e(ne,Zg),e(Zg,sJ),e(sJ,VYe),e(Zg,zYe),e(Zg,_k),e(_k,WYe),e(Zg,QYe),e(ne,HYe),e(ne,eh),e(eh,nJ),e(nJ,UYe),e(eh,JYe),e(eh,bk),e(bk,YYe),e(eh,KYe),e(ne,ZYe),e(ne,oh),e(oh,lJ),e(lJ,eKe),e(oh,oKe),e(oh,vk),e(vk,rKe),e(oh,tKe),e(ne,aKe),e(ne,rh),e(rh,iJ),e(iJ,sKe),e(rh,nKe),e(rh,Tk),e(Tk,lKe),e(rh,iKe),e(ne,dKe),e(ne,th),e(th,dJ),e(dJ,cKe),e(th,mKe),e(th,Fk),e(Fk,fKe),e(th,gKe),e(ne,hKe),e(ne,ah),e(ah,cJ),e(cJ,uKe),e(ah,pKe),e(ah,Ck),e(Ck,_Ke),e(ah,bKe),e(ne,vKe),e(ne,sh),e(sh,mJ),e(mJ,TKe),e(sh,FKe),e(sh,Mk),e(Mk,CKe),e(sh,MKe),e(ne,EKe),e(ne,nh),e(nh,fJ),e(fJ,yKe),e(nh,wKe),e(nh,Ek),e(Ek,AKe),e(nh,LKe),e(ne,BKe),e(ne,lh),e(lh,gJ),e(gJ,xKe),e(lh,kKe),e(lh,yk),e(yk,RKe),e(lh,SKe),e(ne,PKe),e(ne,ih),e(ih,hJ),e(hJ,$Ke),e(ih,IKe),e(ih,wk),e(wk,DKe),e(ih,jKe),e(ne,NKe),e(ne,dh),e(dh,uJ),e(uJ,qKe),e(dh,GKe),e(dh,Ak),e(Ak,OKe),e(dh,XKe),e(ne,VKe),e(ne,ch),e(ch,pJ),e(pJ,zKe),e(ch,WKe),e(ch,Lk),e(Lk,QKe),e(ch,HKe),e(xe,UKe),g(mh,xe,null),e(xe,JKe),e(xe,_J),e(_J,YKe),e(xe,KKe),g(Q5,xe,null),e(zo,ZKe),e(zo,fh),g(H5,fh,null),e(fh,eZe),e(fh,bJ),e(bJ,oZe),b(c,I9e,_),b(c,qi,_),e(qi,gh),e(gh,vJ),g(U5,vJ,null),e(qi,rZe),e(qi,TJ),e(TJ,tZe),b(c,D9e,_),b(c,Wo,_),g(J5,Wo,null),e(Wo,aZe),e(Wo,Y5),e(Y5,sZe),e(Y5,Bk),e(Bk,nZe),e(Y5,lZe),e(Wo,iZe),e(Wo,K5),e(K5,dZe),e(K5,FJ),e(FJ,cZe),e(K5,mZe),e(Wo,fZe),e(Wo,ke),g(Z5,ke,null),e(ke,gZe),e(ke,CJ),e(CJ,hZe),e(ke,uZe),e(ke,Gi),e(Gi,pZe),e(Gi,MJ),e(MJ,_Ze),e(Gi,bZe),e(Gi,EJ),e(EJ,vZe),e(Gi,TZe),e(ke,FZe),e(ke,we),e(we,hh),e(hh,yJ),e(yJ,CZe),e(hh,MZe),e(hh,xk),e(xk,EZe),e(hh,yZe),e(we,wZe),e(we,uh),e(uh,wJ),e(wJ,AZe),e(uh,LZe),e(uh,kk),e(kk,BZe),e(uh,xZe),e(we,kZe),e(we,ph),e(ph,AJ),e(AJ,RZe),e(ph,SZe),e(ph,Rk),e(Rk,PZe),e(ph,$Ze),e(we,IZe),e(we,_h),e(_h,LJ),e(LJ,DZe),e(_h,jZe),e(_h,Sk),e(Sk,NZe),e(_h,qZe),e(we,GZe),e(we,bh),e(bh,BJ),e(BJ,OZe),e(bh,XZe),e(bh,Pk),e(Pk,VZe),e(bh,zZe),e(we,WZe),e(we,vh),e(vh,xJ),e(xJ,QZe),e(vh,HZe),e(vh,$k),e($k,UZe),e(vh,JZe),e(we,YZe),e(we,Th),e(Th,kJ),e(kJ,KZe),e(Th,ZZe),e(Th,Ik),e(Ik,eeo),e(Th,oeo),e(we,reo),e(we,Fh),e(Fh,RJ),e(RJ,teo),e(Fh,aeo),e(Fh,Dk),e(Dk,seo),e(Fh,neo),e(ke,leo),g(Ch,ke,null),e(ke,ieo),e(ke,SJ),e(SJ,deo),e(ke,ceo),g(ey,ke,null),e(Wo,meo),e(Wo,Mh),g(oy,Mh,null),e(Mh,feo),e(Mh,PJ),e(PJ,geo),b(c,j9e,_),b(c,Oi,_),e(Oi,Eh),e(Eh,$J),g(ry,$J,null),e(Oi,heo),e(Oi,IJ),e(IJ,ueo),b(c,N9e,_),b(c,Qo,_),g(ty,Qo,null),e(Qo,peo),e(Qo,Xi),e(Xi,_eo),e(Xi,DJ),e(DJ,beo),e(Xi,veo),e(Xi,jJ),e(jJ,Teo),e(Xi,Feo),e(Qo,Ceo),e(Qo,ay),e(ay,Meo),e(ay,NJ),e(NJ,Eeo),e(ay,yeo),e(Qo,weo),e(Qo,qr),g(sy,qr,null),e(qr,Aeo),e(qr,qJ),e(qJ,Leo),e(qr,Beo),e(qr,Vi),e(Vi,xeo),e(Vi,GJ),e(GJ,keo),e(Vi,Reo),e(Vi,OJ),e(OJ,Seo),e(Vi,Peo),e(qr,$eo),e(qr,XJ),e(XJ,Ieo),e(qr,Deo),g(ny,qr,null),e(Qo,jeo),e(Qo,Re),g(ly,Re,null),e(Re,Neo),e(Re,VJ),e(VJ,qeo),e(Re,Geo),e(Re,Na),e(Na,Oeo),e(Na,zJ),e(zJ,Xeo),e(Na,Veo),e(Na,WJ),e(WJ,zeo),e(Na,Weo),e(Na,QJ),e(QJ,Qeo),e(Na,Heo),e(Re,Ueo),e(Re,F),e(F,yh),e(yh,HJ),e(HJ,Jeo),e(yh,Yeo),e(yh,jk),e(jk,Keo),e(yh,Zeo),e(F,eoo),e(F,wh),e(wh,UJ),e(UJ,ooo),e(wh,roo),e(wh,Nk),e(Nk,too),e(wh,aoo),e(F,soo),e(F,Ah),e(Ah,JJ),e(JJ,noo),e(Ah,loo),e(Ah,qk),e(qk,ioo),e(Ah,doo),e(F,coo),e(F,Lh),e(Lh,YJ),e(YJ,moo),e(Lh,foo),e(Lh,Gk),e(Gk,goo),e(Lh,hoo),e(F,uoo),e(F,Bh),e(Bh,KJ),e(KJ,poo),e(Bh,_oo),e(Bh,Ok),e(Ok,boo),e(Bh,voo),e(F,Too),e(F,xh),e(xh,ZJ),e(ZJ,Foo),e(xh,Coo),e(xh,Xk),e(Xk,Moo),e(xh,Eoo),e(F,yoo),e(F,kh),e(kh,eY),e(eY,woo),e(kh,Aoo),e(kh,Vk),e(Vk,Loo),e(kh,Boo),e(F,xoo),e(F,Rh),e(Rh,oY),e(oY,koo),e(Rh,Roo),e(Rh,zk),e(zk,Soo),e(Rh,Poo),e(F,$oo),e(F,Sh),e(Sh,rY),e(rY,Ioo),e(Sh,Doo),e(Sh,Wk),e(Wk,joo),e(Sh,Noo),e(F,qoo),e(F,Ph),e(Ph,tY),e(tY,Goo),e(Ph,Ooo),e(Ph,Qk),e(Qk,Xoo),e(Ph,Voo),e(F,zoo),e(F,$h),e($h,aY),e(aY,Woo),e($h,Qoo),e($h,Hk),e(Hk,Hoo),e($h,Uoo),e(F,Joo),e(F,Ih),e(Ih,sY),e(sY,Yoo),e(Ih,Koo),e(Ih,Uk),e(Uk,Zoo),e(Ih,ero),e(F,oro),e(F,Dh),e(Dh,nY),e(nY,rro),e(Dh,tro),e(Dh,Jk),e(Jk,aro),e(Dh,sro),e(F,nro),e(F,jh),e(jh,lY),e(lY,lro),e(jh,iro),e(jh,Yk),e(Yk,dro),e(jh,cro),e(F,mro),e(F,Nh),e(Nh,iY),e(iY,fro),e(Nh,gro),e(Nh,Kk),e(Kk,hro),e(Nh,uro),e(F,pro),e(F,qh),e(qh,dY),e(dY,_ro),e(qh,bro),e(qh,Zk),e(Zk,vro),e(qh,Tro),e(F,Fro),e(F,Gh),e(Gh,cY),e(cY,Cro),e(Gh,Mro),e(Gh,eR),e(eR,Ero),e(Gh,yro),e(F,wro),e(F,Oh),e(Oh,mY),e(mY,Aro),e(Oh,Lro),e(Oh,oR),e(oR,Bro),e(Oh,xro),e(F,kro),e(F,Xh),e(Xh,fY),e(fY,Rro),e(Xh,Sro),e(Xh,rR),e(rR,Pro),e(Xh,$ro),e(F,Iro),e(F,Vh),e(Vh,gY),e(gY,Dro),e(Vh,jro),e(Vh,tR),e(tR,Nro),e(Vh,qro),e(F,Gro),e(F,zh),e(zh,hY),e(hY,Oro),e(zh,Xro),e(zh,aR),e(aR,Vro),e(zh,zro),e(F,Wro),e(F,Wh),e(Wh,uY),e(uY,Qro),e(Wh,Hro),e(Wh,sR),e(sR,Uro),e(Wh,Jro),e(F,Yro),e(F,Qh),e(Qh,pY),e(pY,Kro),e(Qh,Zro),e(Qh,nR),e(nR,eto),e(Qh,oto),e(F,rto),e(F,Hh),e(Hh,_Y),e(_Y,tto),e(Hh,ato),e(Hh,lR),e(lR,sto),e(Hh,nto),e(F,lto),e(F,Uh),e(Uh,bY),e(bY,ito),e(Uh,dto),e(Uh,iR),e(iR,cto),e(Uh,mto),e(F,fto),e(F,Jh),e(Jh,vY),e(vY,gto),e(Jh,hto),e(Jh,dR),e(dR,uto),e(Jh,pto),e(F,_to),e(F,Yh),e(Yh,TY),e(TY,bto),e(Yh,vto),e(Yh,cR),e(cR,Tto),e(Yh,Fto),e(F,Cto),e(F,Sn),e(Sn,FY),e(FY,Mto),e(Sn,Eto),e(Sn,mR),e(mR,yto),e(Sn,wto),e(Sn,fR),e(fR,Ato),e(Sn,Lto),e(F,Bto),e(F,Kh),e(Kh,CY),e(CY,xto),e(Kh,kto),e(Kh,gR),e(gR,Rto),e(Kh,Sto),e(F,Pto),e(F,Zh),e(Zh,MY),e(MY,$to),e(Zh,Ito),e(Zh,hR),e(hR,Dto),e(Zh,jto),e(F,Nto),e(F,eu),e(eu,EY),e(EY,qto),e(eu,Gto),e(eu,uR),e(uR,Oto),e(eu,Xto),e(F,Vto),e(F,ou),e(ou,yY),e(yY,zto),e(ou,Wto),e(ou,pR),e(pR,Qto),e(ou,Hto),e(F,Uto),e(F,ru),e(ru,wY),e(wY,Jto),e(ru,Yto),e(ru,_R),e(_R,Kto),e(ru,Zto),e(F,eao),e(F,tu),e(tu,AY),e(AY,oao),e(tu,rao),e(tu,bR),e(bR,tao),e(tu,aao),e(F,sao),e(F,au),e(au,LY),e(LY,nao),e(au,lao),e(au,vR),e(vR,iao),e(au,dao),e(F,cao),e(F,su),e(su,BY),e(BY,mao),e(su,fao),e(su,TR),e(TR,gao),e(su,hao),e(F,uao),e(F,nu),e(nu,xY),e(xY,pao),e(nu,_ao),e(nu,FR),e(FR,bao),e(nu,vao),e(F,Tao),e(F,lu),e(lu,kY),e(kY,Fao),e(lu,Cao),e(lu,CR),e(CR,Mao),e(lu,Eao),e(F,yao),e(F,iu),e(iu,RY),e(RY,wao),e(iu,Aao),e(iu,MR),e(MR,Lao),e(iu,Bao),e(F,xao),e(F,du),e(du,SY),e(SY,kao),e(du,Rao),e(du,ER),e(ER,Sao),e(du,Pao),e(F,$ao),e(F,cu),e(cu,PY),e(PY,Iao),e(cu,Dao),e(cu,yR),e(yR,jao),e(cu,Nao),e(F,qao),e(F,mu),e(mu,$Y),e($Y,Gao),e(mu,Oao),e(mu,wR),e(wR,Xao),e(mu,Vao),e(F,zao),e(F,fu),e(fu,IY),e(IY,Wao),e(fu,Qao),e(fu,AR),e(AR,Hao),e(fu,Uao),e(F,Jao),e(F,gu),e(gu,DY),e(DY,Yao),e(gu,Kao),e(gu,LR),e(LR,Zao),e(gu,eso),e(F,oso),e(F,hu),e(hu,jY),e(jY,rso),e(hu,tso),e(hu,BR),e(BR,aso),e(hu,sso),e(F,nso),e(F,uu),e(uu,NY),e(NY,lso),e(uu,iso),e(uu,xR),e(xR,dso),e(uu,cso),e(F,mso),e(F,pu),e(pu,qY),e(qY,fso),e(pu,gso),e(pu,kR),e(kR,hso),e(pu,uso),e(F,pso),e(F,_u),e(_u,GY),e(GY,_so),e(_u,bso),e(_u,RR),e(RR,vso),e(_u,Tso),e(F,Fso),e(F,bu),e(bu,OY),e(OY,Cso),e(bu,Mso),e(bu,SR),e(SR,Eso),e(bu,yso),e(F,wso),e(F,vu),e(vu,XY),e(XY,Aso),e(vu,Lso),e(vu,PR),e(PR,Bso),e(vu,xso),e(F,kso),e(F,Tu),e(Tu,VY),e(VY,Rso),e(Tu,Sso),e(Tu,$R),e($R,Pso),e(Tu,$so),e(F,Iso),e(F,Fu),e(Fu,zY),e(zY,Dso),e(Fu,jso),e(Fu,IR),e(IR,Nso),e(Fu,qso),e(F,Gso),e(F,Cu),e(Cu,WY),e(WY,Oso),e(Cu,Xso),e(Cu,DR),e(DR,Vso),e(Cu,zso),e(F,Wso),e(F,Mu),e(Mu,QY),e(QY,Qso),e(Mu,Hso),e(Mu,jR),e(jR,Uso),e(Mu,Jso),e(F,Yso),e(F,Eu),e(Eu,HY),e(HY,Kso),e(Eu,Zso),e(Eu,NR),e(NR,eno),e(Eu,ono),e(F,rno),e(F,yu),e(yu,UY),e(UY,tno),e(yu,ano),e(yu,qR),e(qR,sno),e(yu,nno),e(F,lno),e(F,wu),e(wu,JY),e(JY,ino),e(wu,dno),e(wu,GR),e(GR,cno),e(wu,mno),e(F,fno),e(F,Au),e(Au,YY),e(YY,gno),e(Au,hno),e(Au,OR),e(OR,uno),e(Au,pno),e(F,_no),e(F,Lu),e(Lu,KY),e(KY,bno),e(Lu,vno),e(Lu,XR),e(XR,Tno),e(Lu,Fno),e(F,Cno),e(F,Bu),e(Bu,ZY),e(ZY,Mno),e(Bu,Eno),e(Bu,VR),e(VR,yno),e(Bu,wno),e(F,Ano),e(F,xu),e(xu,eK),e(eK,Lno),e(xu,Bno),e(xu,zR),e(zR,xno),e(xu,kno),e(F,Rno),e(F,ku),e(ku,oK),e(oK,Sno),e(ku,Pno),e(ku,WR),e(WR,$no),e(ku,Ino),e(F,Dno),e(F,Ru),e(Ru,rK),e(rK,jno),e(Ru,Nno),e(Ru,QR),e(QR,qno),e(Ru,Gno),e(F,Ono),e(F,Su),e(Su,tK),e(tK,Xno),e(Su,Vno),e(Su,HR),e(HR,zno),e(Su,Wno),e(F,Qno),e(F,Pu),e(Pu,aK),e(aK,Hno),e(Pu,Uno),e(Pu,UR),e(UR,Jno),e(Pu,Yno),e(F,Kno),e(F,$u),e($u,sK),e(sK,Zno),e($u,elo),e($u,JR),e(JR,olo),e($u,rlo),e(F,tlo),e(F,Iu),e(Iu,nK),e(nK,alo),e(Iu,slo),e(Iu,YR),e(YR,nlo),e(Iu,llo),e(F,ilo),e(F,Du),e(Du,lK),e(lK,dlo),e(Du,clo),e(Du,KR),e(KR,mlo),e(Du,flo),e(F,glo),e(F,ju),e(ju,iK),e(iK,hlo),e(ju,ulo),e(ju,ZR),e(ZR,plo),e(ju,_lo),e(F,blo),e(F,Nu),e(Nu,dK),e(dK,vlo),e(Nu,Tlo),e(Nu,eS),e(eS,Flo),e(Nu,Clo),e(F,Mlo),e(F,qu),e(qu,cK),e(cK,Elo),e(qu,ylo),e(qu,oS),e(oS,wlo),e(qu,Alo),e(F,Llo),e(F,Gu),e(Gu,mK),e(mK,Blo),e(Gu,xlo),e(Gu,rS),e(rS,klo),e(Gu,Rlo),e(F,Slo),e(F,Ou),e(Ou,fK),e(fK,Plo),e(Ou,$lo),e(Ou,tS),e(tS,Ilo),e(Ou,Dlo),e(F,jlo),e(F,Xu),e(Xu,gK),e(gK,Nlo),e(Xu,qlo),e(Xu,aS),e(aS,Glo),e(Xu,Olo),e(F,Xlo),e(F,Vu),e(Vu,hK),e(hK,Vlo),e(Vu,zlo),e(Vu,sS),e(sS,Wlo),e(Vu,Qlo),e(F,Hlo),e(F,zu),e(zu,uK),e(uK,Ulo),e(zu,Jlo),e(zu,nS),e(nS,Ylo),e(zu,Klo),e(F,Zlo),e(F,Wu),e(Wu,pK),e(pK,eio),e(Wu,oio),e(Wu,lS),e(lS,rio),e(Wu,tio),e(F,aio),e(F,Qu),e(Qu,_K),e(_K,sio),e(Qu,nio),e(Qu,iS),e(iS,lio),e(Qu,iio),e(F,dio),e(F,Hu),e(Hu,bK),e(bK,cio),e(Hu,mio),e(Hu,dS),e(dS,fio),e(Hu,gio),e(F,hio),e(F,Uu),e(Uu,vK),e(vK,uio),e(Uu,pio),e(Uu,cS),e(cS,_io),e(Uu,bio),e(F,vio),e(F,Ju),e(Ju,TK),e(TK,Tio),e(Ju,Fio),e(Ju,mS),e(mS,Cio),e(Ju,Mio),e(F,Eio),e(F,Yu),e(Yu,FK),e(FK,yio),e(Yu,wio),e(Yu,fS),e(fS,Aio),e(Yu,Lio),e(F,Bio),e(F,Ku),e(Ku,CK),e(CK,xio),e(Ku,kio),e(Ku,gS),e(gS,Rio),e(Ku,Sio),e(F,Pio),e(F,Zu),e(Zu,MK),e(MK,$io),e(Zu,Iio),e(Zu,hS),e(hS,Dio),e(Zu,jio),e(F,Nio),e(F,ep),e(ep,EK),e(EK,qio),e(ep,Gio),e(ep,uS),e(uS,Oio),e(ep,Xio),e(F,Vio),e(F,op),e(op,yK),e(yK,zio),e(op,Wio),e(op,pS),e(pS,Qio),e(op,Hio),e(F,Uio),e(F,rp),e(rp,wK),e(wK,Jio),e(rp,Yio),e(rp,_S),e(_S,Kio),e(rp,Zio),e(Re,edo),e(Re,tp),e(tp,odo),e(tp,AK),e(AK,rdo),e(tp,tdo),e(tp,LK),e(LK,ado),e(Re,sdo),e(Re,BK),e(BK,ndo),e(Re,ldo),g(iy,Re,null),b(c,q9e,_),b(c,zi,_),e(zi,ap),e(ap,xK),g(dy,xK,null),e(zi,ido),e(zi,kK),e(kK,ddo),b(c,G9e,_),b(c,Ho,_),g(cy,Ho,null),e(Ho,cdo),e(Ho,Wi),e(Wi,mdo),e(Wi,RK),e(RK,fdo),e(Wi,gdo),e(Wi,SK),e(SK,hdo),e(Wi,udo),e(Ho,pdo),e(Ho,my),e(my,_do),e(my,PK),e(PK,bdo),e(my,vdo),e(Ho,Tdo),e(Ho,Gr),g(fy,Gr,null),e(Gr,Fdo),e(Gr,$K),e($K,Cdo),e(Gr,Mdo),e(Gr,Qi),e(Qi,Edo),e(Qi,IK),e(IK,ydo),e(Qi,wdo),e(Qi,DK),e(DK,Ado),e(Qi,Ldo),e(Gr,Bdo),e(Gr,jK),e(jK,xdo),e(Gr,kdo),g(gy,Gr,null),e(Ho,Rdo),e(Ho,Se),g(hy,Se,null),e(Se,Sdo),e(Se,NK),e(NK,Pdo),e(Se,$do),e(Se,qa),e(qa,Ido),e(qa,qK),e(qK,Ddo),e(qa,jdo),e(qa,GK),e(GK,Ndo),e(qa,qdo),e(qa,OK),e(OK,Gdo),e(qa,Odo),e(Se,Xdo),e(Se,k),e(k,sp),e(sp,XK),e(XK,Vdo),e(sp,zdo),e(sp,bS),e(bS,Wdo),e(sp,Qdo),e(k,Hdo),e(k,np),e(np,VK),e(VK,Udo),e(np,Jdo),e(np,vS),e(vS,Ydo),e(np,Kdo),e(k,Zdo),e(k,lp),e(lp,zK),e(zK,eco),e(lp,oco),e(lp,TS),e(TS,rco),e(lp,tco),e(k,aco),e(k,ip),e(ip,WK),e(WK,sco),e(ip,nco),e(ip,FS),e(FS,lco),e(ip,ico),e(k,dco),e(k,dp),e(dp,QK),e(QK,cco),e(dp,mco),e(dp,CS),e(CS,fco),e(dp,gco),e(k,hco),e(k,cp),e(cp,HK),e(HK,uco),e(cp,pco),e(cp,MS),e(MS,_co),e(cp,bco),e(k,vco),e(k,mp),e(mp,UK),e(UK,Tco),e(mp,Fco),e(mp,ES),e(ES,Cco),e(mp,Mco),e(k,Eco),e(k,fp),e(fp,JK),e(JK,yco),e(fp,wco),e(fp,yS),e(yS,Aco),e(fp,Lco),e(k,Bco),e(k,gp),e(gp,YK),e(YK,xco),e(gp,kco),e(gp,wS),e(wS,Rco),e(gp,Sco),e(k,Pco),e(k,hp),e(hp,KK),e(KK,$co),e(hp,Ico),e(hp,AS),e(AS,Dco),e(hp,jco),e(k,Nco),e(k,up),e(up,ZK),e(ZK,qco),e(up,Gco),e(up,LS),e(LS,Oco),e(up,Xco),e(k,Vco),e(k,pp),e(pp,eZ),e(eZ,zco),e(pp,Wco),e(pp,BS),e(BS,Qco),e(pp,Hco),e(k,Uco),e(k,_p),e(_p,oZ),e(oZ,Jco),e(_p,Yco),e(_p,xS),e(xS,Kco),e(_p,Zco),e(k,emo),e(k,bp),e(bp,rZ),e(rZ,omo),e(bp,rmo),e(bp,kS),e(kS,tmo),e(bp,amo),e(k,smo),e(k,vp),e(vp,tZ),e(tZ,nmo),e(vp,lmo),e(vp,RS),e(RS,imo),e(vp,dmo),e(k,cmo),e(k,Tp),e(Tp,aZ),e(aZ,mmo),e(Tp,fmo),e(Tp,SS),e(SS,gmo),e(Tp,hmo),e(k,umo),e(k,Fp),e(Fp,sZ),e(sZ,pmo),e(Fp,_mo),e(Fp,PS),e(PS,bmo),e(Fp,vmo),e(k,Tmo),e(k,Cp),e(Cp,nZ),e(nZ,Fmo),e(Cp,Cmo),e(Cp,$S),e($S,Mmo),e(Cp,Emo),e(k,ymo),e(k,Mp),e(Mp,lZ),e(lZ,wmo),e(Mp,Amo),e(Mp,IS),e(IS,Lmo),e(Mp,Bmo),e(k,xmo),e(k,Ep),e(Ep,iZ),e(iZ,kmo),e(Ep,Rmo),e(Ep,DS),e(DS,Smo),e(Ep,Pmo),e(k,$mo),e(k,yp),e(yp,dZ),e(dZ,Imo),e(yp,Dmo),e(yp,jS),e(jS,jmo),e(yp,Nmo),e(k,qmo),e(k,wp),e(wp,cZ),e(cZ,Gmo),e(wp,Omo),e(wp,NS),e(NS,Xmo),e(wp,Vmo),e(k,zmo),e(k,Ap),e(Ap,mZ),e(mZ,Wmo),e(Ap,Qmo),e(Ap,qS),e(qS,Hmo),e(Ap,Umo),e(k,Jmo),e(k,Lp),e(Lp,fZ),e(fZ,Ymo),e(Lp,Kmo),e(Lp,GS),e(GS,Zmo),e(Lp,efo),e(k,ofo),e(k,Bp),e(Bp,gZ),e(gZ,rfo),e(Bp,tfo),e(Bp,OS),e(OS,afo),e(Bp,sfo),e(k,nfo),e(k,xp),e(xp,hZ),e(hZ,lfo),e(xp,ifo),e(xp,XS),e(XS,dfo),e(xp,cfo),e(k,mfo),e(k,kp),e(kp,uZ),e(uZ,ffo),e(kp,gfo),e(kp,VS),e(VS,hfo),e(kp,ufo),e(k,pfo),e(k,Rp),e(Rp,pZ),e(pZ,_fo),e(Rp,bfo),e(Rp,zS),e(zS,vfo),e(Rp,Tfo),e(k,Ffo),e(k,Sp),e(Sp,_Z),e(_Z,Cfo),e(Sp,Mfo),e(Sp,WS),e(WS,Efo),e(Sp,yfo),e(k,wfo),e(k,Pp),e(Pp,bZ),e(bZ,Afo),e(Pp,Lfo),e(Pp,QS),e(QS,Bfo),e(Pp,xfo),e(k,kfo),e(k,$p),e($p,vZ),e(vZ,Rfo),e($p,Sfo),e($p,HS),e(HS,Pfo),e($p,$fo),e(k,Ifo),e(k,Ip),e(Ip,TZ),e(TZ,Dfo),e(Ip,jfo),e(Ip,US),e(US,Nfo),e(Ip,qfo),e(k,Gfo),e(k,Dp),e(Dp,FZ),e(FZ,Ofo),e(Dp,Xfo),e(Dp,JS),e(JS,Vfo),e(Dp,zfo),e(k,Wfo),e(k,jp),e(jp,CZ),e(CZ,Qfo),e(jp,Hfo),e(jp,YS),e(YS,Ufo),e(jp,Jfo),e(k,Yfo),e(k,Np),e(Np,MZ),e(MZ,Kfo),e(Np,Zfo),e(Np,KS),e(KS,ego),e(Np,ogo),e(k,rgo),e(k,qp),e(qp,EZ),e(EZ,tgo),e(qp,ago),e(qp,ZS),e(ZS,sgo),e(qp,ngo),e(k,lgo),e(k,Gp),e(Gp,yZ),e(yZ,igo),e(Gp,dgo),e(Gp,eP),e(eP,cgo),e(Gp,mgo),e(k,fgo),e(k,Op),e(Op,wZ),e(wZ,ggo),e(Op,hgo),e(Op,oP),e(oP,ugo),e(Op,pgo),e(k,_go),e(k,Xp),e(Xp,AZ),e(AZ,bgo),e(Xp,vgo),e(Xp,rP),e(rP,Tgo),e(Xp,Fgo),e(Se,Cgo),e(Se,Vp),e(Vp,Mgo),e(Vp,LZ),e(LZ,Ego),e(Vp,ygo),e(Vp,BZ),e(BZ,wgo),e(Se,Ago),e(Se,xZ),e(xZ,Lgo),e(Se,Bgo),g(uy,Se,null),b(c,O9e,_),b(c,Hi,_),e(Hi,zp),e(zp,kZ),g(py,kZ,null),e(Hi,xgo),e(Hi,RZ),e(RZ,kgo),b(c,X9e,_),b(c,Uo,_),g(_y,Uo,null),e(Uo,Rgo),e(Uo,Ui),e(Ui,Sgo),e(Ui,SZ),e(SZ,Pgo),e(Ui,$go),e(Ui,PZ),e(PZ,Igo),e(Ui,Dgo),e(Uo,jgo),e(Uo,by),e(by,Ngo),e(by,$Z),e($Z,qgo),e(by,Ggo),e(Uo,Ogo),e(Uo,Or),g(vy,Or,null),e(Or,Xgo),e(Or,IZ),e(IZ,Vgo),e(Or,zgo),e(Or,Ji),e(Ji,Wgo),e(Ji,DZ),e(DZ,Qgo),e(Ji,Hgo),e(Ji,jZ),e(jZ,Ugo),e(Ji,Jgo),e(Or,Ygo),e(Or,NZ),e(NZ,Kgo),e(Or,Zgo),g(Ty,Or,null),e(Uo,eho),e(Uo,Pe),g(Fy,Pe,null),e(Pe,oho),e(Pe,qZ),e(qZ,rho),e(Pe,tho),e(Pe,Ga),e(Ga,aho),e(Ga,GZ),e(GZ,sho),e(Ga,nho),e(Ga,OZ),e(OZ,lho),e(Ga,iho),e(Ga,XZ),e(XZ,dho),e(Ga,cho),e(Pe,mho),e(Pe,$),e($,Wp),e(Wp,VZ),e(VZ,fho),e(Wp,gho),e(Wp,tP),e(tP,hho),e(Wp,uho),e($,pho),e($,Qp),e(Qp,zZ),e(zZ,_ho),e(Qp,bho),e(Qp,aP),e(aP,vho),e(Qp,Tho),e($,Fho),e($,Hp),e(Hp,WZ),e(WZ,Cho),e(Hp,Mho),e(Hp,sP),e(sP,Eho),e(Hp,yho),e($,who),e($,Up),e(Up,QZ),e(QZ,Aho),e(Up,Lho),e(Up,nP),e(nP,Bho),e(Up,xho),e($,kho),e($,Jp),e(Jp,HZ),e(HZ,Rho),e(Jp,Sho),e(Jp,lP),e(lP,Pho),e(Jp,$ho),e($,Iho),e($,Yp),e(Yp,UZ),e(UZ,Dho),e(Yp,jho),e(Yp,iP),e(iP,Nho),e(Yp,qho),e($,Gho),e($,Kp),e(Kp,JZ),e(JZ,Oho),e(Kp,Xho),e(Kp,dP),e(dP,Vho),e(Kp,zho),e($,Who),e($,Zp),e(Zp,YZ),e(YZ,Qho),e(Zp,Hho),e(Zp,cP),e(cP,Uho),e(Zp,Jho),e($,Yho),e($,e_),e(e_,KZ),e(KZ,Kho),e(e_,Zho),e(e_,mP),e(mP,euo),e(e_,ouo),e($,ruo),e($,o_),e(o_,ZZ),e(ZZ,tuo),e(o_,auo),e(o_,fP),e(fP,suo),e(o_,nuo),e($,luo),e($,r_),e(r_,eee),e(eee,iuo),e(r_,duo),e(r_,gP),e(gP,cuo),e(r_,muo),e($,fuo),e($,t_),e(t_,oee),e(oee,guo),e(t_,huo),e(t_,hP),e(hP,uuo),e(t_,puo),e($,_uo),e($,a_),e(a_,ree),e(ree,buo),e(a_,vuo),e(a_,uP),e(uP,Tuo),e(a_,Fuo),e($,Cuo),e($,s_),e(s_,tee),e(tee,Muo),e(s_,Euo),e(s_,pP),e(pP,yuo),e(s_,wuo),e($,Auo),e($,n_),e(n_,aee),e(aee,Luo),e(n_,Buo),e(n_,_P),e(_P,xuo),e(n_,kuo),e($,Ruo),e($,l_),e(l_,see),e(see,Suo),e(l_,Puo),e(l_,bP),e(bP,$uo),e(l_,Iuo),e($,Duo),e($,i_),e(i_,nee),e(nee,juo),e(i_,Nuo),e(i_,vP),e(vP,quo),e(i_,Guo),e($,Ouo),e($,d_),e(d_,lee),e(lee,Xuo),e(d_,Vuo),e(d_,TP),e(TP,zuo),e(d_,Wuo),e($,Quo),e($,c_),e(c_,iee),e(iee,Huo),e(c_,Uuo),e(c_,FP),e(FP,Juo),e(c_,Yuo),e($,Kuo),e($,m_),e(m_,dee),e(dee,Zuo),e(m_,epo),e(m_,CP),e(CP,opo),e(m_,rpo),e($,tpo),e($,f_),e(f_,cee),e(cee,apo),e(f_,spo),e(f_,MP),e(MP,npo),e(f_,lpo),e($,ipo),e($,g_),e(g_,mee),e(mee,dpo),e(g_,cpo),e(g_,EP),e(EP,mpo),e(g_,fpo),e($,gpo),e($,h_),e(h_,fee),e(fee,hpo),e(h_,upo),e(h_,yP),e(yP,ppo),e(h_,_po),e($,bpo),e($,u_),e(u_,gee),e(gee,vpo),e(u_,Tpo),e(u_,wP),e(wP,Fpo),e(u_,Cpo),e($,Mpo),e($,p_),e(p_,hee),e(hee,Epo),e(p_,ypo),e(p_,AP),e(AP,wpo),e(p_,Apo),e($,Lpo),e($,__),e(__,uee),e(uee,Bpo),e(__,xpo),e(__,LP),e(LP,kpo),e(__,Rpo),e($,Spo),e($,b_),e(b_,pee),e(pee,Ppo),e(b_,$po),e(b_,BP),e(BP,Ipo),e(b_,Dpo),e($,jpo),e($,v_),e(v_,_ee),e(_ee,Npo),e(v_,qpo),e(v_,xP),e(xP,Gpo),e(v_,Opo),e($,Xpo),e($,T_),e(T_,bee),e(bee,Vpo),e(T_,zpo),e(T_,kP),e(kP,Wpo),e(T_,Qpo),e($,Hpo),e($,F_),e(F_,vee),e(vee,Upo),e(F_,Jpo),e(F_,RP),e(RP,Ypo),e(F_,Kpo),e($,Zpo),e($,C_),e(C_,Tee),e(Tee,e_o),e(C_,o_o),e(C_,SP),e(SP,r_o),e(C_,t_o),e($,a_o),e($,M_),e(M_,Fee),e(Fee,s_o),e(M_,n_o),e(M_,PP),e(PP,l_o),e(M_,i_o),e($,d_o),e($,E_),e(E_,Cee),e(Cee,c_o),e(E_,m_o),e(E_,$P),e($P,f_o),e(E_,g_o),e($,h_o),e($,y_),e(y_,Mee),e(Mee,u_o),e(y_,p_o),e(y_,IP),e(IP,__o),e(y_,b_o),e($,v_o),e($,w_),e(w_,Eee),e(Eee,T_o),e(w_,F_o),e(w_,DP),e(DP,C_o),e(w_,M_o),e(Pe,E_o),e(Pe,A_),e(A_,y_o),e(A_,yee),e(yee,w_o),e(A_,A_o),e(A_,wee),e(wee,L_o),e(Pe,B_o),e(Pe,Aee),e(Aee,x_o),e(Pe,k_o),g(Cy,Pe,null),b(c,V9e,_),b(c,Yi,_),e(Yi,L_),e(L_,Lee),g(My,Lee,null),e(Yi,R_o),e(Yi,Bee),e(Bee,S_o),b(c,z9e,_),b(c,Jo,_),g(Ey,Jo,null),e(Jo,P_o),e(Jo,Ki),e(Ki,$_o),e(Ki,xee),e(xee,I_o),e(Ki,D_o),e(Ki,kee),e(kee,j_o),e(Ki,N_o),e(Jo,q_o),e(Jo,yy),e(yy,G_o),e(yy,Ree),e(Ree,O_o),e(yy,X_o),e(Jo,V_o),e(Jo,Xr),g(wy,Xr,null),e(Xr,z_o),e(Xr,See),e(See,W_o),e(Xr,Q_o),e(Xr,Zi),e(Zi,H_o),e(Zi,Pee),e(Pee,U_o),e(Zi,J_o),e(Zi,$ee),e($ee,Y_o),e(Zi,K_o),e(Xr,Z_o),e(Xr,Iee),e(Iee,ebo),e(Xr,obo),g(Ay,Xr,null),e(Jo,rbo),e(Jo,$e),g(Ly,$e,null),e($e,tbo),e($e,Dee),e(Dee,abo),e($e,sbo),e($e,Oa),e(Oa,nbo),e(Oa,jee),e(jee,lbo),e(Oa,ibo),e(Oa,Nee),e(Nee,dbo),e(Oa,cbo),e(Oa,qee),e(qee,mbo),e(Oa,fbo),e($e,gbo),e($e,I),e(I,B_),e(B_,Gee),e(Gee,hbo),e(B_,ubo),e(B_,jP),e(jP,pbo),e(B_,_bo),e(I,bbo),e(I,x_),e(x_,Oee),e(Oee,vbo),e(x_,Tbo),e(x_,NP),e(NP,Fbo),e(x_,Cbo),e(I,Mbo),e(I,k_),e(k_,Xee),e(Xee,Ebo),e(k_,ybo),e(k_,qP),e(qP,wbo),e(k_,Abo),e(I,Lbo),e(I,R_),e(R_,Vee),e(Vee,Bbo),e(R_,xbo),e(R_,GP),e(GP,kbo),e(R_,Rbo),e(I,Sbo),e(I,S_),e(S_,zee),e(zee,Pbo),e(S_,$bo),e(S_,OP),e(OP,Ibo),e(S_,Dbo),e(I,jbo),e(I,P_),e(P_,Wee),e(Wee,Nbo),e(P_,qbo),e(P_,XP),e(XP,Gbo),e(P_,Obo),e(I,Xbo),e(I,$_),e($_,Qee),e(Qee,Vbo),e($_,zbo),e($_,VP),e(VP,Wbo),e($_,Qbo),e(I,Hbo),e(I,I_),e(I_,Hee),e(Hee,Ubo),e(I_,Jbo),e(I_,zP),e(zP,Ybo),e(I_,Kbo),e(I,Zbo),e(I,D_),e(D_,Uee),e(Uee,e2o),e(D_,o2o),e(D_,WP),e(WP,r2o),e(D_,t2o),e(I,a2o),e(I,j_),e(j_,Jee),e(Jee,s2o),e(j_,n2o),e(j_,QP),e(QP,l2o),e(j_,i2o),e(I,d2o),e(I,N_),e(N_,Yee),e(Yee,c2o),e(N_,m2o),e(N_,HP),e(HP,f2o),e(N_,g2o),e(I,h2o),e(I,q_),e(q_,Kee),e(Kee,u2o),e(q_,p2o),e(q_,UP),e(UP,_2o),e(q_,b2o),e(I,v2o),e(I,G_),e(G_,Zee),e(Zee,T2o),e(G_,F2o),e(G_,JP),e(JP,C2o),e(G_,M2o),e(I,E2o),e(I,O_),e(O_,eoe),e(eoe,y2o),e(O_,w2o),e(O_,YP),e(YP,A2o),e(O_,L2o),e(I,B2o),e(I,X_),e(X_,ooe),e(ooe,x2o),e(X_,k2o),e(X_,KP),e(KP,R2o),e(X_,S2o),e(I,P2o),e(I,V_),e(V_,roe),e(roe,$2o),e(V_,I2o),e(V_,ZP),e(ZP,D2o),e(V_,j2o),e(I,N2o),e(I,z_),e(z_,toe),e(toe,q2o),e(z_,G2o),e(z_,e$),e(e$,O2o),e(z_,X2o),e(I,V2o),e(I,W_),e(W_,aoe),e(aoe,z2o),e(W_,W2o),e(W_,o$),e(o$,Q2o),e(W_,H2o),e(I,U2o),e(I,Q_),e(Q_,soe),e(soe,J2o),e(Q_,Y2o),e(Q_,r$),e(r$,K2o),e(Q_,Z2o),e(I,evo),e(I,H_),e(H_,noe),e(noe,ovo),e(H_,rvo),e(H_,t$),e(t$,tvo),e(H_,avo),e(I,svo),e(I,U_),e(U_,loe),e(loe,nvo),e(U_,lvo),e(U_,a$),e(a$,ivo),e(U_,dvo),e(I,cvo),e(I,J_),e(J_,ioe),e(ioe,mvo),e(J_,fvo),e(J_,s$),e(s$,gvo),e(J_,hvo),e(I,uvo),e(I,Y_),e(Y_,doe),e(doe,pvo),e(Y_,_vo),e(Y_,n$),e(n$,bvo),e(Y_,vvo),e(I,Tvo),e(I,K_),e(K_,coe),e(coe,Fvo),e(K_,Cvo),e(K_,l$),e(l$,Mvo),e(K_,Evo),e(I,yvo),e(I,Z_),e(Z_,moe),e(moe,wvo),e(Z_,Avo),e(Z_,i$),e(i$,Lvo),e(Z_,Bvo),e(I,xvo),e(I,eb),e(eb,foe),e(foe,kvo),e(eb,Rvo),e(eb,d$),e(d$,Svo),e(eb,Pvo),e(I,$vo),e(I,ob),e(ob,goe),e(goe,Ivo),e(ob,Dvo),e(ob,c$),e(c$,jvo),e(ob,Nvo),e(I,qvo),e(I,rb),e(rb,hoe),e(hoe,Gvo),e(rb,Ovo),e(rb,m$),e(m$,Xvo),e(rb,Vvo),e(I,zvo),e(I,tb),e(tb,uoe),e(uoe,Wvo),e(tb,Qvo),e(tb,f$),e(f$,Hvo),e(tb,Uvo),e(I,Jvo),e(I,ab),e(ab,poe),e(poe,Yvo),e(ab,Kvo),e(ab,g$),e(g$,Zvo),e(ab,eTo),e(I,oTo),e(I,sb),e(sb,_oe),e(_oe,rTo),e(sb,tTo),e(sb,boe),e(boe,aTo),e(sb,sTo),e(I,nTo),e(I,nb),e(nb,voe),e(voe,lTo),e(nb,iTo),e(nb,h$),e(h$,dTo),e(nb,cTo),e(I,mTo),e(I,lb),e(lb,Toe),e(Toe,fTo),e(lb,gTo),e(lb,u$),e(u$,hTo),e(lb,uTo),e(I,pTo),e(I,ib),e(ib,Foe),e(Foe,_To),e(ib,bTo),e(ib,p$),e(p$,vTo),e(ib,TTo),e(I,FTo),e(I,db),e(db,Coe),e(Coe,CTo),e(db,MTo),e(db,_$),e(_$,ETo),e(db,yTo),e($e,wTo),e($e,cb),e(cb,ATo),e(cb,Moe),e(Moe,LTo),e(cb,BTo),e(cb,Eoe),e(Eoe,xTo),e($e,kTo),e($e,yoe),e(yoe,RTo),e($e,STo),g(By,$e,null),b(c,W9e,_),b(c,ed,_),e(ed,mb),e(mb,woe),g(xy,woe,null),e(ed,PTo),e(ed,Aoe),e(Aoe,$To),b(c,Q9e,_),b(c,Yo,_),g(ky,Yo,null),e(Yo,ITo),e(Yo,od),e(od,DTo),e(od,Loe),e(Loe,jTo),e(od,NTo),e(od,Boe),e(Boe,qTo),e(od,GTo),e(Yo,OTo),e(Yo,Ry),e(Ry,XTo),e(Ry,xoe),e(xoe,VTo),e(Ry,zTo),e(Yo,WTo),e(Yo,Vr),g(Sy,Vr,null),e(Vr,QTo),e(Vr,koe),e(koe,HTo),e(Vr,UTo),e(Vr,rd),e(rd,JTo),e(rd,Roe),e(Roe,YTo),e(rd,KTo),e(rd,Soe),e(Soe,ZTo),e(rd,e1o),e(Vr,o1o),e(Vr,Poe),e(Poe,r1o),e(Vr,t1o),g(Py,Vr,null),e(Yo,a1o),e(Yo,Ie),g($y,Ie,null),e(Ie,s1o),e(Ie,$oe),e($oe,n1o),e(Ie,l1o),e(Ie,Xa),e(Xa,i1o),e(Xa,Ioe),e(Ioe,d1o),e(Xa,c1o),e(Xa,Doe),e(Doe,m1o),e(Xa,f1o),e(Xa,joe),e(joe,g1o),e(Xa,h1o),e(Ie,u1o),e(Ie,ae),e(ae,fb),e(fb,Noe),e(Noe,p1o),e(fb,_1o),e(fb,b$),e(b$,b1o),e(fb,v1o),e(ae,T1o),e(ae,gb),e(gb,qoe),e(qoe,F1o),e(gb,C1o),e(gb,v$),e(v$,M1o),e(gb,E1o),e(ae,y1o),e(ae,hb),e(hb,Goe),e(Goe,w1o),e(hb,A1o),e(hb,T$),e(T$,L1o),e(hb,B1o),e(ae,x1o),e(ae,ub),e(ub,Ooe),e(Ooe,k1o),e(ub,R1o),e(ub,F$),e(F$,S1o),e(ub,P1o),e(ae,$1o),e(ae,pb),e(pb,Xoe),e(Xoe,I1o),e(pb,D1o),e(pb,C$),e(C$,j1o),e(pb,N1o),e(ae,q1o),e(ae,_b),e(_b,Voe),e(Voe,G1o),e(_b,O1o),e(_b,M$),e(M$,X1o),e(_b,V1o),e(ae,z1o),e(ae,bb),e(bb,zoe),e(zoe,W1o),e(bb,Q1o),e(bb,E$),e(E$,H1o),e(bb,U1o),e(ae,J1o),e(ae,vb),e(vb,Woe),e(Woe,Y1o),e(vb,K1o),e(vb,y$),e(y$,Z1o),e(vb,eFo),e(ae,oFo),e(ae,Tb),e(Tb,Qoe),e(Qoe,rFo),e(Tb,tFo),e(Tb,w$),e(w$,aFo),e(Tb,sFo),e(ae,nFo),e(ae,Fb),e(Fb,Hoe),e(Hoe,lFo),e(Fb,iFo),e(Fb,A$),e(A$,dFo),e(Fb,cFo),e(ae,mFo),e(ae,Cb),e(Cb,Uoe),e(Uoe,fFo),e(Cb,gFo),e(Cb,L$),e(L$,hFo),e(Cb,uFo),e(ae,pFo),e(ae,Mb),e(Mb,Joe),e(Joe,_Fo),e(Mb,bFo),e(Mb,B$),e(B$,vFo),e(Mb,TFo),e(ae,FFo),e(ae,Eb),e(Eb,Yoe),e(Yoe,CFo),e(Eb,MFo),e(Eb,x$),e(x$,EFo),e(Eb,yFo),e(ae,wFo),e(ae,yb),e(yb,Koe),e(Koe,AFo),e(yb,LFo),e(yb,k$),e(k$,BFo),e(yb,xFo),e(ae,kFo),e(ae,wb),e(wb,Zoe),e(Zoe,RFo),e(wb,SFo),e(wb,R$),e(R$,PFo),e(wb,$Fo),e(ae,IFo),e(ae,Ab),e(Ab,ere),e(ere,DFo),e(Ab,jFo),e(Ab,S$),e(S$,NFo),e(Ab,qFo),e(Ie,GFo),e(Ie,Lb),e(Lb,OFo),e(Lb,ore),e(ore,XFo),e(Lb,VFo),e(Lb,rre),e(rre,zFo),e(Ie,WFo),e(Ie,tre),e(tre,QFo),e(Ie,HFo),g(Iy,Ie,null),b(c,H9e,_),b(c,td,_),e(td,Bb),e(Bb,are),g(Dy,are,null),e(td,UFo),e(td,sre),e(sre,JFo),b(c,U9e,_),b(c,Ko,_),g(jy,Ko,null),e(Ko,YFo),e(Ko,ad),e(ad,KFo),e(ad,nre),e(nre,ZFo),e(ad,eCo),e(ad,lre),e(lre,oCo),e(ad,rCo),e(Ko,tCo),e(Ko,Ny),e(Ny,aCo),e(Ny,ire),e(ire,sCo),e(Ny,nCo),e(Ko,lCo),e(Ko,zr),g(qy,zr,null),e(zr,iCo),e(zr,dre),e(dre,dCo),e(zr,cCo),e(zr,sd),e(sd,mCo),e(sd,cre),e(cre,fCo),e(sd,gCo),e(sd,mre),e(mre,hCo),e(sd,uCo),e(zr,pCo),e(zr,fre),e(fre,_Co),e(zr,bCo),g(Gy,zr,null),e(Ko,vCo),e(Ko,De),g(Oy,De,null),e(De,TCo),e(De,gre),e(gre,FCo),e(De,CCo),e(De,Va),e(Va,MCo),e(Va,hre),e(hre,ECo),e(Va,yCo),e(Va,ure),e(ure,wCo),e(Va,ACo),e(Va,pre),e(pre,LCo),e(Va,BCo),e(De,xCo),e(De,A),e(A,xb),e(xb,_re),e(_re,kCo),e(xb,RCo),e(xb,P$),e(P$,SCo),e(xb,PCo),e(A,$Co),e(A,kb),e(kb,bre),e(bre,ICo),e(kb,DCo),e(kb,$$),e($$,jCo),e(kb,NCo),e(A,qCo),e(A,Rb),e(Rb,vre),e(vre,GCo),e(Rb,OCo),e(Rb,I$),e(I$,XCo),e(Rb,VCo),e(A,zCo),e(A,Sb),e(Sb,Tre),e(Tre,WCo),e(Sb,QCo),e(Sb,D$),e(D$,HCo),e(Sb,UCo),e(A,JCo),e(A,Pb),e(Pb,Fre),e(Fre,YCo),e(Pb,KCo),e(Pb,j$),e(j$,ZCo),e(Pb,e4o),e(A,o4o),e(A,$b),e($b,Cre),e(Cre,r4o),e($b,t4o),e($b,N$),e(N$,a4o),e($b,s4o),e(A,n4o),e(A,Ib),e(Ib,Mre),e(Mre,l4o),e(Ib,i4o),e(Ib,q$),e(q$,d4o),e(Ib,c4o),e(A,m4o),e(A,Db),e(Db,Ere),e(Ere,f4o),e(Db,g4o),e(Db,G$),e(G$,h4o),e(Db,u4o),e(A,p4o),e(A,jb),e(jb,yre),e(yre,_4o),e(jb,b4o),e(jb,O$),e(O$,v4o),e(jb,T4o),e(A,F4o),e(A,Nb),e(Nb,wre),e(wre,C4o),e(Nb,M4o),e(Nb,X$),e(X$,E4o),e(Nb,y4o),e(A,w4o),e(A,qb),e(qb,Are),e(Are,A4o),e(qb,L4o),e(qb,V$),e(V$,B4o),e(qb,x4o),e(A,k4o),e(A,Gb),e(Gb,Lre),e(Lre,R4o),e(Gb,S4o),e(Gb,z$),e(z$,P4o),e(Gb,$4o),e(A,I4o),e(A,Ob),e(Ob,Bre),e(Bre,D4o),e(Ob,j4o),e(Ob,W$),e(W$,N4o),e(Ob,q4o),e(A,G4o),e(A,Xb),e(Xb,xre),e(xre,O4o),e(Xb,X4o),e(Xb,Q$),e(Q$,V4o),e(Xb,z4o),e(A,W4o),e(A,Vb),e(Vb,kre),e(kre,Q4o),e(Vb,H4o),e(Vb,H$),e(H$,U4o),e(Vb,J4o),e(A,Y4o),e(A,zb),e(zb,Rre),e(Rre,K4o),e(zb,Z4o),e(zb,U$),e(U$,eMo),e(zb,oMo),e(A,rMo),e(A,Wb),e(Wb,Sre),e(Sre,tMo),e(Wb,aMo),e(Wb,J$),e(J$,sMo),e(Wb,nMo),e(A,lMo),e(A,Qb),e(Qb,Pre),e(Pre,iMo),e(Qb,dMo),e(Qb,Y$),e(Y$,cMo),e(Qb,mMo),e(A,fMo),e(A,Hb),e(Hb,$re),e($re,gMo),e(Hb,hMo),e(Hb,K$),e(K$,uMo),e(Hb,pMo),e(A,_Mo),e(A,Ub),e(Ub,Ire),e(Ire,bMo),e(Ub,vMo),e(Ub,Z$),e(Z$,TMo),e(Ub,FMo),e(A,CMo),e(A,Jb),e(Jb,Dre),e(Dre,MMo),e(Jb,EMo),e(Jb,eI),e(eI,yMo),e(Jb,wMo),e(A,AMo),e(A,Yb),e(Yb,jre),e(jre,LMo),e(Yb,BMo),e(Yb,oI),e(oI,xMo),e(Yb,kMo),e(A,RMo),e(A,Kb),e(Kb,Nre),e(Nre,SMo),e(Kb,PMo),e(Kb,rI),e(rI,$Mo),e(Kb,IMo),e(A,DMo),e(A,Zb),e(Zb,qre),e(qre,jMo),e(Zb,NMo),e(Zb,tI),e(tI,qMo),e(Zb,GMo),e(A,OMo),e(A,e2),e(e2,Gre),e(Gre,XMo),e(e2,VMo),e(e2,aI),e(aI,zMo),e(e2,WMo),e(A,QMo),e(A,o2),e(o2,Ore),e(Ore,HMo),e(o2,UMo),e(o2,sI),e(sI,JMo),e(o2,YMo),e(A,KMo),e(A,r2),e(r2,Xre),e(Xre,ZMo),e(r2,eEo),e(r2,nI),e(nI,oEo),e(r2,rEo),e(A,tEo),e(A,t2),e(t2,Vre),e(Vre,aEo),e(t2,sEo),e(t2,lI),e(lI,nEo),e(t2,lEo),e(A,iEo),e(A,a2),e(a2,zre),e(zre,dEo),e(a2,cEo),e(a2,iI),e(iI,mEo),e(a2,fEo),e(A,gEo),e(A,s2),e(s2,Wre),e(Wre,hEo),e(s2,uEo),e(s2,dI),e(dI,pEo),e(s2,_Eo),e(A,bEo),e(A,n2),e(n2,Qre),e(Qre,vEo),e(n2,TEo),e(n2,cI),e(cI,FEo),e(n2,CEo),e(A,MEo),e(A,l2),e(l2,Hre),e(Hre,EEo),e(l2,yEo),e(l2,mI),e(mI,wEo),e(l2,AEo),e(A,LEo),e(A,i2),e(i2,Ure),e(Ure,BEo),e(i2,xEo),e(i2,fI),e(fI,kEo),e(i2,REo),e(A,SEo),e(A,d2),e(d2,Jre),e(Jre,PEo),e(d2,$Eo),e(d2,gI),e(gI,IEo),e(d2,DEo),e(A,jEo),e(A,c2),e(c2,Yre),e(Yre,NEo),e(c2,qEo),e(c2,hI),e(hI,GEo),e(c2,OEo),e(A,XEo),e(A,m2),e(m2,Kre),e(Kre,VEo),e(m2,zEo),e(m2,uI),e(uI,WEo),e(m2,QEo),e(A,HEo),e(A,f2),e(f2,Zre),e(Zre,UEo),e(f2,JEo),e(f2,pI),e(pI,YEo),e(f2,KEo),e(A,ZEo),e(A,g2),e(g2,ete),e(ete,e3o),e(g2,o3o),e(g2,_I),e(_I,r3o),e(g2,t3o),e(A,a3o),e(A,h2),e(h2,ote),e(ote,s3o),e(h2,n3o),e(h2,bI),e(bI,l3o),e(h2,i3o),e(A,d3o),e(A,u2),e(u2,rte),e(rte,c3o),e(u2,m3o),e(u2,vI),e(vI,f3o),e(u2,g3o),e(A,h3o),e(A,p2),e(p2,tte),e(tte,u3o),e(p2,p3o),e(p2,TI),e(TI,_3o),e(p2,b3o),e(A,v3o),e(A,_2),e(_2,ate),e(ate,T3o),e(_2,F3o),e(_2,FI),e(FI,C3o),e(_2,M3o),e(A,E3o),e(A,b2),e(b2,ste),e(ste,y3o),e(b2,w3o),e(b2,CI),e(CI,A3o),e(b2,L3o),e(A,B3o),e(A,v2),e(v2,nte),e(nte,x3o),e(v2,k3o),e(v2,MI),e(MI,R3o),e(v2,S3o),e(A,P3o),e(A,T2),e(T2,lte),e(lte,$3o),e(T2,I3o),e(T2,EI),e(EI,D3o),e(T2,j3o),e(A,N3o),e(A,F2),e(F2,ite),e(ite,q3o),e(F2,G3o),e(F2,yI),e(yI,O3o),e(F2,X3o),e(De,V3o),e(De,C2),e(C2,z3o),e(C2,dte),e(dte,W3o),e(C2,Q3o),e(C2,cte),e(cte,H3o),e(De,U3o),e(De,mte),e(mte,J3o),e(De,Y3o),g(Xy,De,null),b(c,J9e,_),b(c,nd,_),e(nd,M2),e(M2,fte),g(Vy,fte,null),e(nd,K3o),e(nd,gte),e(gte,Z3o),b(c,Y9e,_),b(c,Zo,_),g(zy,Zo,null),e(Zo,e5o),e(Zo,ld),e(ld,o5o),e(ld,hte),e(hte,r5o),e(ld,t5o),e(ld,ute),e(ute,a5o),e(ld,s5o),e(Zo,n5o),e(Zo,Wy),e(Wy,l5o),e(Wy,pte),e(pte,i5o),e(Wy,d5o),e(Zo,c5o),e(Zo,Wr),g(Qy,Wr,null),e(Wr,m5o),e(Wr,_te),e(_te,f5o),e(Wr,g5o),e(Wr,id),e(id,h5o),e(id,bte),e(bte,u5o),e(id,p5o),e(id,vte),e(vte,_5o),e(id,b5o),e(Wr,v5o),e(Wr,Tte),e(Tte,T5o),e(Wr,F5o),g(Hy,Wr,null),e(Zo,C5o),e(Zo,je),g(Uy,je,null),e(je,M5o),e(je,Fte),e(Fte,E5o),e(je,y5o),e(je,za),e(za,w5o),e(za,Cte),e(Cte,A5o),e(za,L5o),e(za,Mte),e(Mte,B5o),e(za,x5o),e(za,Ete),e(Ete,k5o),e(za,R5o),e(je,S5o),e(je,G),e(G,E2),e(E2,yte),e(yte,P5o),e(E2,$5o),e(E2,wI),e(wI,I5o),e(E2,D5o),e(G,j5o),e(G,y2),e(y2,wte),e(wte,N5o),e(y2,q5o),e(y2,AI),e(AI,G5o),e(y2,O5o),e(G,X5o),e(G,w2),e(w2,Ate),e(Ate,V5o),e(w2,z5o),e(w2,LI),e(LI,W5o),e(w2,Q5o),e(G,H5o),e(G,A2),e(A2,Lte),e(Lte,U5o),e(A2,J5o),e(A2,BI),e(BI,Y5o),e(A2,K5o),e(G,Z5o),e(G,L2),e(L2,Bte),e(Bte,eyo),e(L2,oyo),e(L2,xI),e(xI,ryo),e(L2,tyo),e(G,ayo),e(G,B2),e(B2,xte),e(xte,syo),e(B2,nyo),e(B2,kI),e(kI,lyo),e(B2,iyo),e(G,dyo),e(G,x2),e(x2,kte),e(kte,cyo),e(x2,myo),e(x2,RI),e(RI,fyo),e(x2,gyo),e(G,hyo),e(G,k2),e(k2,Rte),e(Rte,uyo),e(k2,pyo),e(k2,SI),e(SI,_yo),e(k2,byo),e(G,vyo),e(G,R2),e(R2,Ste),e(Ste,Tyo),e(R2,Fyo),e(R2,PI),e(PI,Cyo),e(R2,Myo),e(G,Eyo),e(G,S2),e(S2,Pte),e(Pte,yyo),e(S2,wyo),e(S2,$I),e($I,Ayo),e(S2,Lyo),e(G,Byo),e(G,P2),e(P2,$te),e($te,xyo),e(P2,kyo),e(P2,II),e(II,Ryo),e(P2,Syo),e(G,Pyo),e(G,$2),e($2,Ite),e(Ite,$yo),e($2,Iyo),e($2,DI),e(DI,Dyo),e($2,jyo),e(G,Nyo),e(G,I2),e(I2,Dte),e(Dte,qyo),e(I2,Gyo),e(I2,jI),e(jI,Oyo),e(I2,Xyo),e(G,Vyo),e(G,D2),e(D2,jte),e(jte,zyo),e(D2,Wyo),e(D2,NI),e(NI,Qyo),e(D2,Hyo),e(G,Uyo),e(G,j2),e(j2,Nte),e(Nte,Jyo),e(j2,Yyo),e(j2,qI),e(qI,Kyo),e(j2,Zyo),e(G,ewo),e(G,N2),e(N2,qte),e(qte,owo),e(N2,rwo),e(N2,GI),e(GI,two),e(N2,awo),e(G,swo),e(G,q2),e(q2,Gte),e(Gte,nwo),e(q2,lwo),e(q2,OI),e(OI,iwo),e(q2,dwo),e(G,cwo),e(G,G2),e(G2,Ote),e(Ote,mwo),e(G2,fwo),e(G2,XI),e(XI,gwo),e(G2,hwo),e(G,uwo),e(G,O2),e(O2,Xte),e(Xte,pwo),e(O2,_wo),e(O2,VI),e(VI,bwo),e(O2,vwo),e(G,Two),e(G,X2),e(X2,Vte),e(Vte,Fwo),e(X2,Cwo),e(X2,zI),e(zI,Mwo),e(X2,Ewo),e(G,ywo),e(G,V2),e(V2,zte),e(zte,wwo),e(V2,Awo),e(V2,WI),e(WI,Lwo),e(V2,Bwo),e(G,xwo),e(G,z2),e(z2,Wte),e(Wte,kwo),e(z2,Rwo),e(z2,QI),e(QI,Swo),e(z2,Pwo),e(G,$wo),e(G,W2),e(W2,Qte),e(Qte,Iwo),e(W2,Dwo),e(W2,HI),e(HI,jwo),e(W2,Nwo),e(G,qwo),e(G,Q2),e(Q2,Hte),e(Hte,Gwo),e(Q2,Owo),e(Q2,UI),e(UI,Xwo),e(Q2,Vwo),e(G,zwo),e(G,H2),e(H2,Ute),e(Ute,Wwo),e(H2,Qwo),e(H2,JI),e(JI,Hwo),e(H2,Uwo),e(G,Jwo),e(G,U2),e(U2,Jte),e(Jte,Ywo),e(U2,Kwo),e(U2,YI),e(YI,Zwo),e(U2,e6o),e(G,o6o),e(G,J2),e(J2,Yte),e(Yte,r6o),e(J2,t6o),e(J2,KI),e(KI,a6o),e(J2,s6o),e(G,n6o),e(G,Y2),e(Y2,Kte),e(Kte,l6o),e(Y2,i6o),e(Y2,ZI),e(ZI,d6o),e(Y2,c6o),e(je,m6o),e(je,K2),e(K2,f6o),e(K2,Zte),e(Zte,g6o),e(K2,h6o),e(K2,eae),e(eae,u6o),e(je,p6o),e(je,oae),e(oae,_6o),e(je,b6o),g(Jy,je,null),b(c,K9e,_),b(c,dd,_),e(dd,Z2),e(Z2,rae),g(Yy,rae,null),e(dd,v6o),e(dd,tae),e(tae,T6o),b(c,Z9e,_),b(c,er,_),g(Ky,er,null),e(er,F6o),e(er,cd),e(cd,C6o),e(cd,aae),e(aae,M6o),e(cd,E6o),e(cd,sae),e(sae,y6o),e(cd,w6o),e(er,A6o),e(er,Zy),e(Zy,L6o),e(Zy,nae),e(nae,B6o),e(Zy,x6o),e(er,k6o),e(er,Qr),g(ew,Qr,null),e(Qr,R6o),e(Qr,lae),e(lae,S6o),e(Qr,P6o),e(Qr,md),e(md,$6o),e(md,iae),e(iae,I6o),e(md,D6o),e(md,dae),e(dae,j6o),e(md,N6o),e(Qr,q6o),e(Qr,cae),e(cae,G6o),e(Qr,O6o),g(ow,Qr,null),e(er,X6o),e(er,Ne),g(rw,Ne,null),e(Ne,V6o),e(Ne,mae),e(mae,z6o),e(Ne,W6o),e(Ne,Wa),e(Wa,Q6o),e(Wa,fae),e(fae,H6o),e(Wa,U6o),e(Wa,gae),e(gae,J6o),e(Wa,Y6o),e(Wa,hae),e(hae,K6o),e(Wa,Z6o),e(Ne,eAo),e(Ne,sa),e(sa,ev),e(ev,uae),e(uae,oAo),e(ev,rAo),e(ev,eD),e(eD,tAo),e(ev,aAo),e(sa,sAo),e(sa,ov),e(ov,pae),e(pae,nAo),e(ov,lAo),e(ov,oD),e(oD,iAo),e(ov,dAo),e(sa,cAo),e(sa,rv),e(rv,_ae),e(_ae,mAo),e(rv,fAo),e(rv,rD),e(rD,gAo),e(rv,hAo),e(sa,uAo),e(sa,tv),e(tv,bae),e(bae,pAo),e(tv,_Ao),e(tv,tD),e(tD,bAo),e(tv,vAo),e(sa,TAo),e(sa,av),e(av,vae),e(vae,FAo),e(av,CAo),e(av,aD),e(aD,MAo),e(av,EAo),e(Ne,yAo),e(Ne,sv),e(sv,wAo),e(sv,Tae),e(Tae,AAo),e(sv,LAo),e(sv,Fae),e(Fae,BAo),e(Ne,xAo),e(Ne,Cae),e(Cae,kAo),e(Ne,RAo),g(tw,Ne,null),b(c,eBe,_),b(c,fd,_),e(fd,nv),e(nv,Mae),g(aw,Mae,null),e(fd,SAo),e(fd,Eae),e(Eae,PAo),b(c,oBe,_),b(c,or,_),g(sw,or,null),e(or,$Ao),e(or,gd),e(gd,IAo),e(gd,yae),e(yae,DAo),e(gd,jAo),e(gd,wae),e(wae,NAo),e(gd,qAo),e(or,GAo),e(or,nw),e(nw,OAo),e(nw,Aae),e(Aae,XAo),e(nw,VAo),e(or,zAo),e(or,Hr),g(lw,Hr,null),e(Hr,WAo),e(Hr,Lae),e(Lae,QAo),e(Hr,HAo),e(Hr,hd),e(hd,UAo),e(hd,Bae),e(Bae,JAo),e(hd,YAo),e(hd,xae),e(xae,KAo),e(hd,ZAo),e(Hr,e0o),e(Hr,kae),e(kae,o0o),e(Hr,r0o),g(iw,Hr,null),e(or,t0o),e(or,qe),g(dw,qe,null),e(qe,a0o),e(qe,Rae),e(Rae,s0o),e(qe,n0o),e(qe,Qa),e(Qa,l0o),e(Qa,Sae),e(Sae,i0o),e(Qa,d0o),e(Qa,Pae),e(Pae,c0o),e(Qa,m0o),e(Qa,$ae),e($ae,f0o),e(Qa,g0o),e(qe,h0o),e(qe,N),e(N,lv),e(lv,Iae),e(Iae,u0o),e(lv,p0o),e(lv,sD),e(sD,_0o),e(lv,b0o),e(N,v0o),e(N,iv),e(iv,Dae),e(Dae,T0o),e(iv,F0o),e(iv,nD),e(nD,C0o),e(iv,M0o),e(N,E0o),e(N,dv),e(dv,jae),e(jae,y0o),e(dv,w0o),e(dv,lD),e(lD,A0o),e(dv,L0o),e(N,B0o),e(N,cv),e(cv,Nae),e(Nae,x0o),e(cv,k0o),e(cv,iD),e(iD,R0o),e(cv,S0o),e(N,P0o),e(N,mv),e(mv,qae),e(qae,$0o),e(mv,I0o),e(mv,dD),e(dD,D0o),e(mv,j0o),e(N,N0o),e(N,fv),e(fv,Gae),e(Gae,q0o),e(fv,G0o),e(fv,cD),e(cD,O0o),e(fv,X0o),e(N,V0o),e(N,gv),e(gv,Oae),e(Oae,z0o),e(gv,W0o),e(gv,mD),e(mD,Q0o),e(gv,H0o),e(N,U0o),e(N,hv),e(hv,Xae),e(Xae,J0o),e(hv,Y0o),e(hv,fD),e(fD,K0o),e(hv,Z0o),e(N,eLo),e(N,uv),e(uv,Vae),e(Vae,oLo),e(uv,rLo),e(uv,gD),e(gD,tLo),e(uv,aLo),e(N,sLo),e(N,pv),e(pv,zae),e(zae,nLo),e(pv,lLo),e(pv,hD),e(hD,iLo),e(pv,dLo),e(N,cLo),e(N,_v),e(_v,Wae),e(Wae,mLo),e(_v,fLo),e(_v,uD),e(uD,gLo),e(_v,hLo),e(N,uLo),e(N,bv),e(bv,Qae),e(Qae,pLo),e(bv,_Lo),e(bv,pD),e(pD,bLo),e(bv,vLo),e(N,TLo),e(N,vv),e(vv,Hae),e(Hae,FLo),e(vv,CLo),e(vv,_D),e(_D,MLo),e(vv,ELo),e(N,yLo),e(N,Tv),e(Tv,Uae),e(Uae,wLo),e(Tv,ALo),e(Tv,bD),e(bD,LLo),e(Tv,BLo),e(N,xLo),e(N,Fv),e(Fv,Jae),e(Jae,kLo),e(Fv,RLo),e(Fv,vD),e(vD,SLo),e(Fv,PLo),e(N,$Lo),e(N,Cv),e(Cv,Yae),e(Yae,ILo),e(Cv,DLo),e(Cv,TD),e(TD,jLo),e(Cv,NLo),e(N,qLo),e(N,Mv),e(Mv,Kae),e(Kae,GLo),e(Mv,OLo),e(Mv,FD),e(FD,XLo),e(Mv,VLo),e(N,zLo),e(N,Ev),e(Ev,Zae),e(Zae,WLo),e(Ev,QLo),e(Ev,CD),e(CD,HLo),e(Ev,ULo),e(N,JLo),e(N,yv),e(yv,ese),e(ese,YLo),e(yv,KLo),e(yv,MD),e(MD,ZLo),e(yv,e8o),e(N,o8o),e(N,wv),e(wv,ose),e(ose,r8o),e(wv,t8o),e(wv,ED),e(ED,a8o),e(wv,s8o),e(N,n8o),e(N,Av),e(Av,rse),e(rse,l8o),e(Av,i8o),e(Av,yD),e(yD,d8o),e(Av,c8o),e(N,m8o),e(N,Lv),e(Lv,tse),e(tse,f8o),e(Lv,g8o),e(Lv,wD),e(wD,h8o),e(Lv,u8o),e(N,p8o),e(N,Bv),e(Bv,ase),e(ase,_8o),e(Bv,b8o),e(Bv,AD),e(AD,v8o),e(Bv,T8o),e(N,F8o),e(N,xv),e(xv,sse),e(sse,C8o),e(xv,M8o),e(xv,LD),e(LD,E8o),e(xv,y8o),e(N,w8o),e(N,kv),e(kv,nse),e(nse,A8o),e(kv,L8o),e(kv,BD),e(BD,B8o),e(kv,x8o),e(N,k8o),e(N,Rv),e(Rv,lse),e(lse,R8o),e(Rv,S8o),e(Rv,xD),e(xD,P8o),e(Rv,$8o),e(N,I8o),e(N,Sv),e(Sv,ise),e(ise,D8o),e(Sv,j8o),e(Sv,kD),e(kD,N8o),e(Sv,q8o),e(N,G8o),e(N,Pv),e(Pv,dse),e(dse,O8o),e(Pv,X8o),e(Pv,RD),e(RD,V8o),e(Pv,z8o),e(N,W8o),e(N,$v),e($v,cse),e(cse,Q8o),e($v,H8o),e($v,SD),e(SD,U8o),e($v,J8o),e(N,Y8o),e(N,Iv),e(Iv,mse),e(mse,K8o),e(Iv,Z8o),e(Iv,PD),e(PD,e7o),e(Iv,o7o),e(N,r7o),e(N,Dv),e(Dv,fse),e(fse,t7o),e(Dv,a7o),e(Dv,$D),e($D,s7o),e(Dv,n7o),e(N,l7o),e(N,jv),e(jv,gse),e(gse,i7o),e(jv,d7o),e(jv,ID),e(ID,c7o),e(jv,m7o),e(N,f7o),e(N,Nv),e(Nv,hse),e(hse,g7o),e(Nv,h7o),e(Nv,DD),e(DD,u7o),e(Nv,p7o),e(qe,_7o),e(qe,qv),e(qv,b7o),e(qv,use),e(use,v7o),e(qv,T7o),e(qv,pse),e(pse,F7o),e(qe,C7o),e(qe,_se),e(_se,M7o),e(qe,E7o),g(cw,qe,null),b(c,rBe,_),b(c,ud,_),e(ud,Gv),e(Gv,bse),g(mw,bse,null),e(ud,y7o),e(ud,vse),e(vse,w7o),b(c,tBe,_),b(c,rr,_),g(fw,rr,null),e(rr,A7o),e(rr,pd),e(pd,L7o),e(pd,Tse),e(Tse,B7o),e(pd,x7o),e(pd,Fse),e(Fse,k7o),e(pd,R7o),e(rr,S7o),e(rr,gw),e(gw,P7o),e(gw,Cse),e(Cse,$7o),e(gw,I7o),e(rr,D7o),e(rr,Ur),g(hw,Ur,null),e(Ur,j7o),e(Ur,Mse),e(Mse,N7o),e(Ur,q7o),e(Ur,_d),e(_d,G7o),e(_d,Ese),e(Ese,O7o),e(_d,X7o),e(_d,yse),e(yse,V7o),e(_d,z7o),e(Ur,W7o),e(Ur,wse),e(wse,Q7o),e(Ur,H7o),g(uw,Ur,null),e(rr,U7o),e(rr,Ge),g(pw,Ge,null),e(Ge,J7o),e(Ge,Ase),e(Ase,Y7o),e(Ge,K7o),e(Ge,Ha),e(Ha,Z7o),e(Ha,Lse),e(Lse,e9o),e(Ha,o9o),e(Ha,Bse),e(Bse,r9o),e(Ha,t9o),e(Ha,xse),e(xse,a9o),e(Ha,s9o),e(Ge,n9o),e(Ge,R),e(R,Ov),e(Ov,kse),e(kse,l9o),e(Ov,i9o),e(Ov,jD),e(jD,d9o),e(Ov,c9o),e(R,m9o),e(R,Xv),e(Xv,Rse),e(Rse,f9o),e(Xv,g9o),e(Xv,ND),e(ND,h9o),e(Xv,u9o),e(R,p9o),e(R,Vv),e(Vv,Sse),e(Sse,_9o),e(Vv,b9o),e(Vv,qD),e(qD,v9o),e(Vv,T9o),e(R,F9o),e(R,zv),e(zv,Pse),e(Pse,C9o),e(zv,M9o),e(zv,GD),e(GD,E9o),e(zv,y9o),e(R,w9o),e(R,Wv),e(Wv,$se),e($se,A9o),e(Wv,L9o),e(Wv,OD),e(OD,B9o),e(Wv,x9o),e(R,k9o),e(R,Qv),e(Qv,Ise),e(Ise,R9o),e(Qv,S9o),e(Qv,XD),e(XD,P9o),e(Qv,$9o),e(R,I9o),e(R,Hv),e(Hv,Dse),e(Dse,D9o),e(Hv,j9o),e(Hv,VD),e(VD,N9o),e(Hv,q9o),e(R,G9o),e(R,Uv),e(Uv,jse),e(jse,O9o),e(Uv,X9o),e(Uv,zD),e(zD,V9o),e(Uv,z9o),e(R,W9o),e(R,Jv),e(Jv,Nse),e(Nse,Q9o),e(Jv,H9o),e(Jv,WD),e(WD,U9o),e(Jv,J9o),e(R,Y9o),e(R,Yv),e(Yv,qse),e(qse,K9o),e(Yv,Z9o),e(Yv,QD),e(QD,eBo),e(Yv,oBo),e(R,rBo),e(R,Kv),e(Kv,Gse),e(Gse,tBo),e(Kv,aBo),e(Kv,HD),e(HD,sBo),e(Kv,nBo),e(R,lBo),e(R,Zv),e(Zv,Ose),e(Ose,iBo),e(Zv,dBo),e(Zv,UD),e(UD,cBo),e(Zv,mBo),e(R,fBo),e(R,eT),e(eT,Xse),e(Xse,gBo),e(eT,hBo),e(eT,JD),e(JD,uBo),e(eT,pBo),e(R,_Bo),e(R,oT),e(oT,Vse),e(Vse,bBo),e(oT,vBo),e(oT,YD),e(YD,TBo),e(oT,FBo),e(R,CBo),e(R,rT),e(rT,zse),e(zse,MBo),e(rT,EBo),e(rT,KD),e(KD,yBo),e(rT,wBo),e(R,ABo),e(R,tT),e(tT,Wse),e(Wse,LBo),e(tT,BBo),e(tT,ZD),e(ZD,xBo),e(tT,kBo),e(R,RBo),e(R,aT),e(aT,Qse),e(Qse,SBo),e(aT,PBo),e(aT,ej),e(ej,$Bo),e(aT,IBo),e(R,DBo),e(R,sT),e(sT,Hse),e(Hse,jBo),e(sT,NBo),e(sT,oj),e(oj,qBo),e(sT,GBo),e(R,OBo),e(R,nT),e(nT,Use),e(Use,XBo),e(nT,VBo),e(nT,rj),e(rj,zBo),e(nT,WBo),e(R,QBo),e(R,lT),e(lT,Jse),e(Jse,HBo),e(lT,UBo),e(lT,tj),e(tj,JBo),e(lT,YBo),e(R,KBo),e(R,iT),e(iT,Yse),e(Yse,ZBo),e(iT,exo),e(iT,aj),e(aj,oxo),e(iT,rxo),e(R,txo),e(R,dT),e(dT,Kse),e(Kse,axo),e(dT,sxo),e(dT,sj),e(sj,nxo),e(dT,lxo),e(R,ixo),e(R,cT),e(cT,Zse),e(Zse,dxo),e(cT,cxo),e(cT,nj),e(nj,mxo),e(cT,fxo),e(R,gxo),e(R,mT),e(mT,ene),e(ene,hxo),e(mT,uxo),e(mT,lj),e(lj,pxo),e(mT,_xo),e(R,bxo),e(R,fT),e(fT,one),e(one,vxo),e(fT,Txo),e(fT,ij),e(ij,Fxo),e(fT,Cxo),e(R,Mxo),e(R,gT),e(gT,rne),e(rne,Exo),e(gT,yxo),e(gT,dj),e(dj,wxo),e(gT,Axo),e(R,Lxo),e(R,hT),e(hT,tne),e(tne,Bxo),e(hT,xxo),e(hT,cj),e(cj,kxo),e(hT,Rxo),e(R,Sxo),e(R,uT),e(uT,ane),e(ane,Pxo),e(uT,$xo),e(uT,mj),e(mj,Ixo),e(uT,Dxo),e(R,jxo),e(R,pT),e(pT,sne),e(sne,Nxo),e(pT,qxo),e(pT,fj),e(fj,Gxo),e(pT,Oxo),e(R,Xxo),e(R,_T),e(_T,nne),e(nne,Vxo),e(_T,zxo),e(_T,gj),e(gj,Wxo),e(_T,Qxo),e(R,Hxo),e(R,bT),e(bT,lne),e(lne,Uxo),e(bT,Jxo),e(bT,hj),e(hj,Yxo),e(bT,Kxo),e(R,Zxo),e(R,vT),e(vT,ine),e(ine,eko),e(vT,oko),e(vT,uj),e(uj,rko),e(vT,tko),e(R,ako),e(R,TT),e(TT,dne),e(dne,sko),e(TT,nko),e(TT,pj),e(pj,lko),e(TT,iko),e(R,dko),e(R,FT),e(FT,cne),e(cne,cko),e(FT,mko),e(FT,_j),e(_j,fko),e(FT,gko),e(R,hko),e(R,CT),e(CT,mne),e(mne,uko),e(CT,pko),e(CT,bj),e(bj,_ko),e(CT,bko),e(R,vko),e(R,MT),e(MT,fne),e(fne,Tko),e(MT,Fko),e(MT,vj),e(vj,Cko),e(MT,Mko),e(R,Eko),e(R,ET),e(ET,gne),e(gne,yko),e(ET,wko),e(ET,Tj),e(Tj,Ako),e(ET,Lko),e(R,Bko),e(R,yT),e(yT,hne),e(hne,xko),e(yT,kko),e(yT,Fj),e(Fj,Rko),e(yT,Sko),e(R,Pko),e(R,wT),e(wT,une),e(une,$ko),e(wT,Iko),e(wT,Cj),e(Cj,Dko),e(wT,jko),e(Ge,Nko),e(Ge,AT),e(AT,qko),e(AT,pne),e(pne,Gko),e(AT,Oko),e(AT,_ne),e(_ne,Xko),e(Ge,Vko),e(Ge,bne),e(bne,zko),e(Ge,Wko),g(_w,Ge,null),b(c,aBe,_),b(c,bd,_),e(bd,LT),e(LT,vne),g(bw,vne,null),e(bd,Qko),e(bd,Tne),e(Tne,Hko),b(c,sBe,_),b(c,tr,_),g(vw,tr,null),e(tr,Uko),e(tr,vd),e(vd,Jko),e(vd,Fne),e(Fne,Yko),e(vd,Kko),e(vd,Cne),e(Cne,Zko),e(vd,eRo),e(tr,oRo),e(tr,Tw),e(Tw,rRo),e(Tw,Mne),e(Mne,tRo),e(Tw,aRo),e(tr,sRo),e(tr,Jr),g(Fw,Jr,null),e(Jr,nRo),e(Jr,Ene),e(Ene,lRo),e(Jr,iRo),e(Jr,Td),e(Td,dRo),e(Td,yne),e(yne,cRo),e(Td,mRo),e(Td,wne),e(wne,fRo),e(Td,gRo),e(Jr,hRo),e(Jr,Ane),e(Ane,uRo),e(Jr,pRo),g(Cw,Jr,null),e(tr,_Ro),e(tr,Oe),g(Mw,Oe,null),e(Oe,bRo),e(Oe,Lne),e(Lne,vRo),e(Oe,TRo),e(Oe,Ua),e(Ua,FRo),e(Ua,Bne),e(Bne,CRo),e(Ua,MRo),e(Ua,xne),e(xne,ERo),e(Ua,yRo),e(Ua,kne),e(kne,wRo),e(Ua,ARo),e(Oe,LRo),e(Oe,Rne),e(Rne,BT),e(BT,Sne),e(Sne,BRo),e(BT,xRo),e(BT,Mj),e(Mj,kRo),e(BT,RRo),e(Oe,SRo),e(Oe,xT),e(xT,PRo),e(xT,Pne),e(Pne,$Ro),e(xT,IRo),e(xT,$ne),e($ne,DRo),e(Oe,jRo),e(Oe,Ine),e(Ine,NRo),e(Oe,qRo),g(Ew,Oe,null),b(c,nBe,_),b(c,Fd,_),e(Fd,kT),e(kT,Dne),g(yw,Dne,null),e(Fd,GRo),e(Fd,jne),e(jne,ORo),b(c,lBe,_),b(c,ar,_),g(ww,ar,null),e(ar,XRo),e(ar,Cd),e(Cd,VRo),e(Cd,Nne),e(Nne,zRo),e(Cd,WRo),e(Cd,qne),e(qne,QRo),e(Cd,HRo),e(ar,URo),e(ar,Aw),e(Aw,JRo),e(Aw,Gne),e(Gne,YRo),e(Aw,KRo),e(ar,ZRo),e(ar,Yr),g(Lw,Yr,null),e(Yr,eSo),e(Yr,One),e(One,oSo),e(Yr,rSo),e(Yr,Md),e(Md,tSo),e(Md,Xne),e(Xne,aSo),e(Md,sSo),e(Md,Vne),e(Vne,nSo),e(Md,lSo),e(Yr,iSo),e(Yr,zne),e(zne,dSo),e(Yr,cSo),g(Bw,Yr,null),e(ar,mSo),e(ar,Xe),g(xw,Xe,null),e(Xe,fSo),e(Xe,Wne),e(Wne,gSo),e(Xe,hSo),e(Xe,Ja),e(Ja,uSo),e(Ja,Qne),e(Qne,pSo),e(Ja,_So),e(Ja,Hne),e(Hne,bSo),e(Ja,vSo),e(Ja,Une),e(Une,TSo),e(Ja,FSo),e(Xe,CSo),e(Xe,be),e(be,RT),e(RT,Jne),e(Jne,MSo),e(RT,ESo),e(RT,Ej),e(Ej,ySo),e(RT,wSo),e(be,ASo),e(be,ST),e(ST,Yne),e(Yne,LSo),e(ST,BSo),e(ST,yj),e(yj,xSo),e(ST,kSo),e(be,RSo),e(be,Pn),e(Pn,Kne),e(Kne,SSo),e(Pn,PSo),e(Pn,wj),e(wj,$So),e(Pn,ISo),e(Pn,Aj),e(Aj,DSo),e(Pn,jSo),e(be,NSo),e(be,PT),e(PT,Zne),e(Zne,qSo),e(PT,GSo),e(PT,Lj),e(Lj,OSo),e(PT,XSo),e(be,VSo),e(be,la),e(la,ele),e(ele,zSo),e(la,WSo),e(la,Bj),e(Bj,QSo),e(la,HSo),e(la,xj),e(xj,USo),e(la,JSo),e(la,kj),e(kj,YSo),e(la,KSo),e(be,ZSo),e(be,$T),e($T,ole),e(ole,ePo),e($T,oPo),e($T,Rj),e(Rj,rPo),e($T,tPo),e(be,aPo),e(be,IT),e(IT,rle),e(rle,sPo),e(IT,nPo),e(IT,Sj),e(Sj,lPo),e(IT,iPo),e(be,dPo),e(be,DT),e(DT,tle),e(tle,cPo),e(DT,mPo),e(DT,Pj),e(Pj,fPo),e(DT,gPo),e(be,hPo),e(be,jT),e(jT,ale),e(ale,uPo),e(jT,pPo),e(jT,$j),e($j,_Po),e(jT,bPo),e(Xe,vPo),e(Xe,NT),e(NT,TPo),e(NT,sle),e(sle,FPo),e(NT,CPo),e(NT,nle),e(nle,MPo),e(Xe,EPo),e(Xe,lle),e(lle,yPo),e(Xe,wPo),g(kw,Xe,null),b(c,iBe,_),b(c,Ed,_),e(Ed,qT),e(qT,ile),g(Rw,ile,null),e(Ed,APo),e(Ed,dle),e(dle,LPo),b(c,dBe,_),b(c,sr,_),g(Sw,sr,null),e(sr,BPo),e(sr,yd),e(yd,xPo),e(yd,cle),e(cle,kPo),e(yd,RPo),e(yd,mle),e(mle,SPo),e(yd,PPo),e(sr,$Po),e(sr,Pw),e(Pw,IPo),e(Pw,fle),e(fle,DPo),e(Pw,jPo),e(sr,NPo),e(sr,Kr),g($w,Kr,null),e(Kr,qPo),e(Kr,gle),e(gle,GPo),e(Kr,OPo),e(Kr,wd),e(wd,XPo),e(wd,hle),e(hle,VPo),e(wd,zPo),e(wd,ule),e(ule,WPo),e(wd,QPo),e(Kr,HPo),e(Kr,ple),e(ple,UPo),e(Kr,JPo),g(Iw,Kr,null),e(sr,YPo),e(sr,Ve),g(Dw,Ve,null),e(Ve,KPo),e(Ve,_le),e(_le,ZPo),e(Ve,e$o),e(Ve,Ya),e(Ya,o$o),e(Ya,ble),e(ble,r$o),e(Ya,t$o),e(Ya,vle),e(vle,a$o),e(Ya,s$o),e(Ya,Tle),e(Tle,n$o),e(Ya,l$o),e(Ve,i$o),e(Ve,Fle),e(Fle,GT),e(GT,Cle),e(Cle,d$o),e(GT,c$o),e(GT,Ij),e(Ij,m$o),e(GT,f$o),e(Ve,g$o),e(Ve,OT),e(OT,h$o),e(OT,Mle),e(Mle,u$o),e(OT,p$o),e(OT,Ele),e(Ele,_$o),e(Ve,b$o),e(Ve,yle),e(yle,v$o),e(Ve,T$o),g(jw,Ve,null),b(c,cBe,_),b(c,Ad,_),e(Ad,XT),e(XT,wle),g(Nw,wle,null),e(Ad,F$o),e(Ad,Ale),e(Ale,C$o),b(c,mBe,_),b(c,nr,_),g(qw,nr,null),e(nr,M$o),e(nr,Ld),e(Ld,E$o),e(Ld,Lle),e(Lle,y$o),e(Ld,w$o),e(Ld,Ble),e(Ble,A$o),e(Ld,L$o),e(nr,B$o),e(nr,Gw),e(Gw,x$o),e(Gw,xle),e(xle,k$o),e(Gw,R$o),e(nr,S$o),e(nr,Zr),g(Ow,Zr,null),e(Zr,P$o),e(Zr,kle),e(kle,$$o),e(Zr,I$o),e(Zr,Bd),e(Bd,D$o),e(Bd,Rle),e(Rle,j$o),e(Bd,N$o),e(Bd,Sle),e(Sle,q$o),e(Bd,G$o),e(Zr,O$o),e(Zr,Ple),e(Ple,X$o),e(Zr,V$o),g(Xw,Zr,null),e(nr,z$o),e(nr,ze),g(Vw,ze,null),e(ze,W$o),e(ze,$le),e($le,Q$o),e(ze,H$o),e(ze,Ka),e(Ka,U$o),e(Ka,Ile),e(Ile,J$o),e(Ka,Y$o),e(Ka,Dle),e(Dle,K$o),e(Ka,Z$o),e(Ka,jle),e(jle,eIo),e(Ka,oIo),e(ze,rIo),e(ze,Ae),e(Ae,VT),e(VT,Nle),e(Nle,tIo),e(VT,aIo),e(VT,Dj),e(Dj,sIo),e(VT,nIo),e(Ae,lIo),e(Ae,zT),e(zT,qle),e(qle,iIo),e(zT,dIo),e(zT,jj),e(jj,cIo),e(zT,mIo),e(Ae,fIo),e(Ae,WT),e(WT,Gle),e(Gle,gIo),e(WT,hIo),e(WT,Nj),e(Nj,uIo),e(WT,pIo),e(Ae,_Io),e(Ae,QT),e(QT,Ole),e(Ole,bIo),e(QT,vIo),e(QT,qj),e(qj,TIo),e(QT,FIo),e(Ae,CIo),e(Ae,HT),e(HT,Xle),e(Xle,MIo),e(HT,EIo),e(HT,Gj),e(Gj,yIo),e(HT,wIo),e(Ae,AIo),e(Ae,UT),e(UT,Vle),e(Vle,LIo),e(UT,BIo),e(UT,Oj),e(Oj,xIo),e(UT,kIo),e(Ae,RIo),e(Ae,JT),e(JT,zle),e(zle,SIo),e(JT,PIo),e(JT,Xj),e(Xj,$Io),e(JT,IIo),e(Ae,DIo),e(Ae,YT),e(YT,Wle),e(Wle,jIo),e(YT,NIo),e(YT,Vj),e(Vj,qIo),e(YT,GIo),e(ze,OIo),e(ze,KT),e(KT,XIo),e(KT,Qle),e(Qle,VIo),e(KT,zIo),e(KT,Hle),e(Hle,WIo),e(ze,QIo),e(ze,Ule),e(Ule,HIo),e(ze,UIo),g(zw,ze,null),b(c,fBe,_),b(c,xd,_),e(xd,ZT),e(ZT,Jle),g(Ww,Jle,null),e(xd,JIo),e(xd,Yle),e(Yle,YIo),b(c,gBe,_),b(c,lr,_),g(Qw,lr,null),e(lr,KIo),e(lr,kd),e(kd,ZIo),e(kd,Kle),e(Kle,eDo),e(kd,oDo),e(kd,Zle),e(Zle,rDo),e(kd,tDo),e(lr,aDo),e(lr,Hw),e(Hw,sDo),e(Hw,eie),e(eie,nDo),e(Hw,lDo),e(lr,iDo),e(lr,et),g(Uw,et,null),e(et,dDo),e(et,oie),e(oie,cDo),e(et,mDo),e(et,Rd),e(Rd,fDo),e(Rd,rie),e(rie,gDo),e(Rd,hDo),e(Rd,tie),e(tie,uDo),e(Rd,pDo),e(et,_Do),e(et,aie),e(aie,bDo),e(et,vDo),g(Jw,et,null),e(lr,TDo),e(lr,We),g(Yw,We,null),e(We,FDo),e(We,sie),e(sie,CDo),e(We,MDo),e(We,Za),e(Za,EDo),e(Za,nie),e(nie,yDo),e(Za,wDo),e(Za,lie),e(lie,ADo),e(Za,LDo),e(Za,iie),e(iie,BDo),e(Za,xDo),e(We,kDo),e(We,es),e(es,e1),e(e1,die),e(die,RDo),e(e1,SDo),e(e1,zj),e(zj,PDo),e(e1,$Do),e(es,IDo),e(es,o1),e(o1,cie),e(cie,DDo),e(o1,jDo),e(o1,Wj),e(Wj,NDo),e(o1,qDo),e(es,GDo),e(es,r1),e(r1,mie),e(mie,ODo),e(r1,XDo),e(r1,Qj),e(Qj,VDo),e(r1,zDo),e(es,WDo),e(es,t1),e(t1,fie),e(fie,QDo),e(t1,HDo),e(t1,Hj),e(Hj,UDo),e(t1,JDo),e(We,YDo),e(We,a1),e(a1,KDo),e(a1,gie),e(gie,ZDo),e(a1,ejo),e(a1,hie),e(hie,ojo),e(We,rjo),e(We,uie),e(uie,tjo),e(We,ajo),g(Kw,We,null),b(c,hBe,_),b(c,Sd,_),e(Sd,s1),e(s1,pie),g(Zw,pie,null),e(Sd,sjo),e(Sd,_ie),e(_ie,njo),b(c,uBe,_),b(c,ir,_),g(e6,ir,null),e(ir,ljo),e(ir,Pd),e(Pd,ijo),e(Pd,bie),e(bie,djo),e(Pd,cjo),e(Pd,vie),e(vie,mjo),e(Pd,fjo),e(ir,gjo),e(ir,o6),e(o6,hjo),e(o6,Tie),e(Tie,ujo),e(o6,pjo),e(ir,_jo),e(ir,ot),g(r6,ot,null),e(ot,bjo),e(ot,Fie),e(Fie,vjo),e(ot,Tjo),e(ot,$d),e($d,Fjo),e($d,Cie),e(Cie,Cjo),e($d,Mjo),e($d,Mie),e(Mie,Ejo),e($d,yjo),e(ot,wjo),e(ot,Eie),e(Eie,Ajo),e(ot,Ljo),g(t6,ot,null),e(ir,Bjo),e(ir,Qe),g(a6,Qe,null),e(Qe,xjo),e(Qe,yie),e(yie,kjo),e(Qe,Rjo),e(Qe,os),e(os,Sjo),e(os,wie),e(wie,Pjo),e(os,$jo),e(os,Aie),e(Aie,Ijo),e(os,Djo),e(os,Lie),e(Lie,jjo),e(os,Njo),e(Qe,qjo),e(Qe,Le),e(Le,n1),e(n1,Bie),e(Bie,Gjo),e(n1,Ojo),e(n1,Uj),e(Uj,Xjo),e(n1,Vjo),e(Le,zjo),e(Le,l1),e(l1,xie),e(xie,Wjo),e(l1,Qjo),e(l1,Jj),e(Jj,Hjo),e(l1,Ujo),e(Le,Jjo),e(Le,i1),e(i1,kie),e(kie,Yjo),e(i1,Kjo),e(i1,Yj),e(Yj,Zjo),e(i1,eNo),e(Le,oNo),e(Le,d1),e(d1,Rie),e(Rie,rNo),e(d1,tNo),e(d1,Kj),e(Kj,aNo),e(d1,sNo),e(Le,nNo),e(Le,c1),e(c1,Sie),e(Sie,lNo),e(c1,iNo),e(c1,Zj),e(Zj,dNo),e(c1,cNo),e(Le,mNo),e(Le,m1),e(m1,Pie),e(Pie,fNo),e(m1,gNo),e(m1,eN),e(eN,hNo),e(m1,uNo),e(Le,pNo),e(Le,f1),e(f1,$ie),e($ie,_No),e(f1,bNo),e(f1,oN),e(oN,vNo),e(f1,TNo),e(Le,FNo),e(Le,g1),e(g1,Iie),e(Iie,CNo),e(g1,MNo),e(g1,rN),e(rN,ENo),e(g1,yNo),e(Qe,wNo),e(Qe,h1),e(h1,ANo),e(h1,Die),e(Die,LNo),e(h1,BNo),e(h1,jie),e(jie,xNo),e(Qe,kNo),e(Qe,Nie),e(Nie,RNo),e(Qe,SNo),g(s6,Qe,null),b(c,pBe,_),b(c,Id,_),e(Id,u1),e(u1,qie),g(n6,qie,null),e(Id,PNo),e(Id,Gie),e(Gie,$No),b(c,_Be,_),b(c,dr,_),g(l6,dr,null),e(dr,INo),e(dr,Dd),e(Dd,DNo),e(Dd,Oie),e(Oie,jNo),e(Dd,NNo),e(Dd,Xie),e(Xie,qNo),e(Dd,GNo),e(dr,ONo),e(dr,i6),e(i6,XNo),e(i6,Vie),e(Vie,VNo),e(i6,zNo),e(dr,WNo),e(dr,rt),g(d6,rt,null),e(rt,QNo),e(rt,zie),e(zie,HNo),e(rt,UNo),e(rt,jd),e(jd,JNo),e(jd,Wie),e(Wie,YNo),e(jd,KNo),e(jd,Qie),e(Qie,ZNo),e(jd,eqo),e(rt,oqo),e(rt,Hie),e(Hie,rqo),e(rt,tqo),g(c6,rt,null),e(dr,aqo),e(dr,He),g(m6,He,null),e(He,sqo),e(He,Uie),e(Uie,nqo),e(He,lqo),e(He,rs),e(rs,iqo),e(rs,Jie),e(Jie,dqo),e(rs,cqo),e(rs,Yie),e(Yie,mqo),e(rs,fqo),e(rs,Kie),e(Kie,gqo),e(rs,hqo),e(He,uqo),e(He,f6),e(f6,p1),e(p1,Zie),e(Zie,pqo),e(p1,_qo),e(p1,tN),e(tN,bqo),e(p1,vqo),e(f6,Tqo),e(f6,_1),e(_1,ede),e(ede,Fqo),e(_1,Cqo),e(_1,aN),e(aN,Mqo),e(_1,Eqo),e(He,yqo),e(He,b1),e(b1,wqo),e(b1,ode),e(ode,Aqo),e(b1,Lqo),e(b1,rde),e(rde,Bqo),e(He,xqo),e(He,tde),e(tde,kqo),e(He,Rqo),g(g6,He,null),b(c,bBe,_),b(c,Nd,_),e(Nd,v1),e(v1,ade),g(h6,ade,null),e(Nd,Sqo),e(Nd,sde),e(sde,Pqo),b(c,vBe,_),b(c,cr,_),g(u6,cr,null),e(cr,$qo),e(cr,qd),e(qd,Iqo),e(qd,nde),e(nde,Dqo),e(qd,jqo),e(qd,lde),e(lde,Nqo),e(qd,qqo),e(cr,Gqo),e(cr,p6),e(p6,Oqo),e(p6,ide),e(ide,Xqo),e(p6,Vqo),e(cr,zqo),e(cr,tt),g(_6,tt,null),e(tt,Wqo),e(tt,dde),e(dde,Qqo),e(tt,Hqo),e(tt,Gd),e(Gd,Uqo),e(Gd,cde),e(cde,Jqo),e(Gd,Yqo),e(Gd,mde),e(mde,Kqo),e(Gd,Zqo),e(tt,eGo),e(tt,fde),e(fde,oGo),e(tt,rGo),g(b6,tt,null),e(cr,tGo),e(cr,Ue),g(v6,Ue,null),e(Ue,aGo),e(Ue,gde),e(gde,sGo),e(Ue,nGo),e(Ue,ts),e(ts,lGo),e(ts,hde),e(hde,iGo),e(ts,dGo),e(ts,ude),e(ude,cGo),e(ts,mGo),e(ts,pde),e(pde,fGo),e(ts,gGo),e(Ue,hGo),e(Ue,as),e(as,T1),e(T1,_de),e(_de,uGo),e(T1,pGo),e(T1,sN),e(sN,_Go),e(T1,bGo),e(as,vGo),e(as,F1),e(F1,bde),e(bde,TGo),e(F1,FGo),e(F1,nN),e(nN,CGo),e(F1,MGo),e(as,EGo),e(as,C1),e(C1,vde),e(vde,yGo),e(C1,wGo),e(C1,lN),e(lN,AGo),e(C1,LGo),e(as,BGo),e(as,M1),e(M1,Tde),e(Tde,xGo),e(M1,kGo),e(M1,iN),e(iN,RGo),e(M1,SGo),e(Ue,PGo),e(Ue,E1),e(E1,$Go),e(E1,Fde),e(Fde,IGo),e(E1,DGo),e(E1,Cde),e(Cde,jGo),e(Ue,NGo),e(Ue,Mde),e(Mde,qGo),e(Ue,GGo),g(T6,Ue,null),b(c,TBe,_),b(c,Od,_),e(Od,y1),e(y1,Ede),g(F6,Ede,null),e(Od,OGo),e(Od,yde),e(yde,XGo),b(c,FBe,_),b(c,mr,_),g(C6,mr,null),e(mr,VGo),e(mr,Xd),e(Xd,zGo),e(Xd,wde),e(wde,WGo),e(Xd,QGo),e(Xd,Ade),e(Ade,HGo),e(Xd,UGo),e(mr,JGo),e(mr,M6),e(M6,YGo),e(M6,Lde),e(Lde,KGo),e(M6,ZGo),e(mr,eOo),e(mr,at),g(E6,at,null),e(at,oOo),e(at,Bde),e(Bde,rOo),e(at,tOo),e(at,Vd),e(Vd,aOo),e(Vd,xde),e(xde,sOo),e(Vd,nOo),e(Vd,kde),e(kde,lOo),e(Vd,iOo),e(at,dOo),e(at,Rde),e(Rde,cOo),e(at,mOo),g(y6,at,null),e(mr,fOo),e(mr,Je),g(w6,Je,null),e(Je,gOo),e(Je,Sde),e(Sde,hOo),e(Je,uOo),e(Je,ss),e(ss,pOo),e(ss,Pde),e(Pde,_Oo),e(ss,bOo),e(ss,$de),e($de,vOo),e(ss,TOo),e(ss,Ide),e(Ide,FOo),e(ss,COo),e(Je,MOo),e(Je,zd),e(zd,w1),e(w1,Dde),e(Dde,EOo),e(w1,yOo),e(w1,dN),e(dN,wOo),e(w1,AOo),e(zd,LOo),e(zd,A1),e(A1,jde),e(jde,BOo),e(A1,xOo),e(A1,cN),e(cN,kOo),e(A1,ROo),e(zd,SOo),e(zd,L1),e(L1,Nde),e(Nde,POo),e(L1,$Oo),e(L1,mN),e(mN,IOo),e(L1,DOo),e(Je,jOo),e(Je,B1),e(B1,NOo),e(B1,qde),e(qde,qOo),e(B1,GOo),e(B1,Gde),e(Gde,OOo),e(Je,XOo),e(Je,Ode),e(Ode,VOo),e(Je,zOo),g(A6,Je,null),b(c,CBe,_),b(c,Wd,_),e(Wd,x1),e(x1,Xde),g(L6,Xde,null),e(Wd,WOo),e(Wd,Vde),e(Vde,QOo),b(c,MBe,_),b(c,fr,_),g(B6,fr,null),e(fr,HOo),e(fr,Qd),e(Qd,UOo),e(Qd,zde),e(zde,JOo),e(Qd,YOo),e(Qd,Wde),e(Wde,KOo),e(Qd,ZOo),e(fr,eXo),e(fr,x6),e(x6,oXo),e(x6,Qde),e(Qde,rXo),e(x6,tXo),e(fr,aXo),e(fr,st),g(k6,st,null),e(st,sXo),e(st,Hde),e(Hde,nXo),e(st,lXo),e(st,Hd),e(Hd,iXo),e(Hd,Ude),e(Ude,dXo),e(Hd,cXo),e(Hd,Jde),e(Jde,mXo),e(Hd,fXo),e(st,gXo),e(st,Yde),e(Yde,hXo),e(st,uXo),g(R6,st,null),e(fr,pXo),e(fr,Ye),g(S6,Ye,null),e(Ye,_Xo),e(Ye,Kde),e(Kde,bXo),e(Ye,vXo),e(Ye,ns),e(ns,TXo),e(ns,Zde),e(Zde,FXo),e(ns,CXo),e(ns,ece),e(ece,MXo),e(ns,EXo),e(ns,oce),e(oce,yXo),e(ns,wXo),e(Ye,AXo),e(Ye,rce),e(rce,k1),e(k1,tce),e(tce,LXo),e(k1,BXo),e(k1,fN),e(fN,xXo),e(k1,kXo),e(Ye,RXo),e(Ye,R1),e(R1,SXo),e(R1,ace),e(ace,PXo),e(R1,$Xo),e(R1,sce),e(sce,IXo),e(Ye,DXo),e(Ye,nce),e(nce,jXo),e(Ye,NXo),g(P6,Ye,null),b(c,EBe,_),b(c,Ud,_),e(Ud,S1),e(S1,lce),g($6,lce,null),e(Ud,qXo),e(Ud,ice),e(ice,GXo),b(c,yBe,_),b(c,gr,_),g(I6,gr,null),e(gr,OXo),e(gr,Jd),e(Jd,XXo),e(Jd,dce),e(dce,VXo),e(Jd,zXo),e(Jd,cce),e(cce,WXo),e(Jd,QXo),e(gr,HXo),e(gr,D6),e(D6,UXo),e(D6,mce),e(mce,JXo),e(D6,YXo),e(gr,KXo),e(gr,nt),g(j6,nt,null),e(nt,ZXo),e(nt,fce),e(fce,eVo),e(nt,oVo),e(nt,Yd),e(Yd,rVo),e(Yd,gce),e(gce,tVo),e(Yd,aVo),e(Yd,hce),e(hce,sVo),e(Yd,nVo),e(nt,lVo),e(nt,uce),e(uce,iVo),e(nt,dVo),g(N6,nt,null),e(gr,cVo),e(gr,Ke),g(q6,Ke,null),e(Ke,mVo),e(Ke,pce),e(pce,fVo),e(Ke,gVo),e(Ke,ls),e(ls,hVo),e(ls,_ce),e(_ce,uVo),e(ls,pVo),e(ls,bce),e(bce,_Vo),e(ls,bVo),e(ls,vce),e(vce,vVo),e(ls,TVo),e(Ke,FVo),e(Ke,Tce),e(Tce,P1),e(P1,Fce),e(Fce,CVo),e(P1,MVo),e(P1,gN),e(gN,EVo),e(P1,yVo),e(Ke,wVo),e(Ke,$1),e($1,AVo),e($1,Cce),e(Cce,LVo),e($1,BVo),e($1,Mce),e(Mce,xVo),e(Ke,kVo),e(Ke,Ece),e(Ece,RVo),e(Ke,SVo),g(G6,Ke,null),b(c,wBe,_),b(c,Kd,_),e(Kd,I1),e(I1,yce),g(O6,yce,null),e(Kd,PVo),e(Kd,wce),e(wce,$Vo),b(c,ABe,_),b(c,hr,_),g(X6,hr,null),e(hr,IVo),e(hr,Zd),e(Zd,DVo),e(Zd,Ace),e(Ace,jVo),e(Zd,NVo),e(Zd,Lce),e(Lce,qVo),e(Zd,GVo),e(hr,OVo),e(hr,V6),e(V6,XVo),e(V6,Bce),e(Bce,VVo),e(V6,zVo),e(hr,WVo),e(hr,lt),g(z6,lt,null),e(lt,QVo),e(lt,xce),e(xce,HVo),e(lt,UVo),e(lt,ec),e(ec,JVo),e(ec,kce),e(kce,YVo),e(ec,KVo),e(ec,Rce),e(Rce,ZVo),e(ec,ezo),e(lt,ozo),e(lt,Sce),e(Sce,rzo),e(lt,tzo),g(W6,lt,null),e(hr,azo),e(hr,Ze),g(Q6,Ze,null),e(Ze,szo),e(Ze,Pce),e(Pce,nzo),e(Ze,lzo),e(Ze,is),e(is,izo),e(is,$ce),e($ce,dzo),e(is,czo),e(is,Ice),e(Ice,mzo),e(is,fzo),e(is,Dce),e(Dce,gzo),e(is,hzo),e(Ze,uzo),e(Ze,H6),e(H6,D1),e(D1,jce),e(jce,pzo),e(D1,_zo),e(D1,hN),e(hN,bzo),e(D1,vzo),e(H6,Tzo),e(H6,j1),e(j1,Nce),e(Nce,Fzo),e(j1,Czo),e(j1,uN),e(uN,Mzo),e(j1,Ezo),e(Ze,yzo),e(Ze,N1),e(N1,wzo),e(N1,qce),e(qce,Azo),e(N1,Lzo),e(N1,Gce),e(Gce,Bzo),e(Ze,xzo),e(Ze,Oce),e(Oce,kzo),e(Ze,Rzo),g(U6,Ze,null),b(c,LBe,_),b(c,oc,_),e(oc,q1),e(q1,Xce),g(J6,Xce,null),e(oc,Szo),e(oc,Vce),e(Vce,Pzo),b(c,BBe,_),b(c,ur,_),g(Y6,ur,null),e(ur,$zo),e(ur,rc),e(rc,Izo),e(rc,zce),e(zce,Dzo),e(rc,jzo),e(rc,Wce),e(Wce,Nzo),e(rc,qzo),e(ur,Gzo),e(ur,K6),e(K6,Ozo),e(K6,Qce),e(Qce,Xzo),e(K6,Vzo),e(ur,zzo),e(ur,it),g(Z6,it,null),e(it,Wzo),e(it,Hce),e(Hce,Qzo),e(it,Hzo),e(it,tc),e(tc,Uzo),e(tc,Uce),e(Uce,Jzo),e(tc,Yzo),e(tc,Jce),e(Jce,Kzo),e(tc,Zzo),e(it,eWo),e(it,Yce),e(Yce,oWo),e(it,rWo),g(eA,it,null),e(ur,tWo),e(ur,go),g(oA,go,null),e(go,aWo),e(go,Kce),e(Kce,sWo),e(go,nWo),e(go,ds),e(ds,lWo),e(ds,Zce),e(Zce,iWo),e(ds,dWo),e(ds,eme),e(eme,cWo),e(ds,mWo),e(ds,ome),e(ome,fWo),e(ds,gWo),e(go,hWo),e(go,B),e(B,G1),e(G1,rme),e(rme,uWo),e(G1,pWo),e(G1,pN),e(pN,_Wo),e(G1,bWo),e(B,vWo),e(B,O1),e(O1,tme),e(tme,TWo),e(O1,FWo),e(O1,_N),e(_N,CWo),e(O1,MWo),e(B,EWo),e(B,X1),e(X1,ame),e(ame,yWo),e(X1,wWo),e(X1,bN),e(bN,AWo),e(X1,LWo),e(B,BWo),e(B,V1),e(V1,sme),e(sme,xWo),e(V1,kWo),e(V1,vN),e(vN,RWo),e(V1,SWo),e(B,PWo),e(B,z1),e(z1,nme),e(nme,$Wo),e(z1,IWo),e(z1,TN),e(TN,DWo),e(z1,jWo),e(B,NWo),e(B,W1),e(W1,lme),e(lme,qWo),e(W1,GWo),e(W1,FN),e(FN,OWo),e(W1,XWo),e(B,VWo),e(B,Q1),e(Q1,ime),e(ime,zWo),e(Q1,WWo),e(Q1,CN),e(CN,QWo),e(Q1,HWo),e(B,UWo),e(B,H1),e(H1,dme),e(dme,JWo),e(H1,YWo),e(H1,MN),e(MN,KWo),e(H1,ZWo),e(B,eQo),e(B,U1),e(U1,cme),e(cme,oQo),e(U1,rQo),e(U1,EN),e(EN,tQo),e(U1,aQo),e(B,sQo),e(B,J1),e(J1,mme),e(mme,nQo),e(J1,lQo),e(J1,yN),e(yN,iQo),e(J1,dQo),e(B,cQo),e(B,Y1),e(Y1,fme),e(fme,mQo),e(Y1,fQo),e(Y1,wN),e(wN,gQo),e(Y1,hQo),e(B,uQo),e(B,K1),e(K1,gme),e(gme,pQo),e(K1,_Qo),e(K1,AN),e(AN,bQo),e(K1,vQo),e(B,TQo),e(B,Z1),e(Z1,hme),e(hme,FQo),e(Z1,CQo),e(Z1,LN),e(LN,MQo),e(Z1,EQo),e(B,yQo),e(B,eF),e(eF,ume),e(ume,wQo),e(eF,AQo),e(eF,BN),e(BN,LQo),e(eF,BQo),e(B,xQo),e(B,oF),e(oF,pme),e(pme,kQo),e(oF,RQo),e(oF,xN),e(xN,SQo),e(oF,PQo),e(B,$Qo),e(B,rF),e(rF,_me),e(_me,IQo),e(rF,DQo),e(rF,kN),e(kN,jQo),e(rF,NQo),e(B,qQo),e(B,$n),e($n,bme),e(bme,GQo),e($n,OQo),e($n,RN),e(RN,XQo),e($n,VQo),e($n,SN),e(SN,zQo),e($n,WQo),e(B,QQo),e(B,tF),e(tF,vme),e(vme,HQo),e(tF,UQo),e(tF,PN),e(PN,JQo),e(tF,YQo),e(B,KQo),e(B,aF),e(aF,Tme),e(Tme,ZQo),e(aF,eHo),e(aF,$N),e($N,oHo),e(aF,rHo),e(B,tHo),e(B,sF),e(sF,Fme),e(Fme,aHo),e(sF,sHo),e(sF,IN),e(IN,nHo),e(sF,lHo),e(B,iHo),e(B,nF),e(nF,Cme),e(Cme,dHo),e(nF,cHo),e(nF,DN),e(DN,mHo),e(nF,fHo),e(B,gHo),e(B,lF),e(lF,Mme),e(Mme,hHo),e(lF,uHo),e(lF,jN),e(jN,pHo),e(lF,_Ho),e(B,bHo),e(B,iF),e(iF,Eme),e(Eme,vHo),e(iF,THo),e(iF,NN),e(NN,FHo),e(iF,CHo),e(B,MHo),e(B,dF),e(dF,yme),e(yme,EHo),e(dF,yHo),e(dF,qN),e(qN,wHo),e(dF,AHo),e(B,LHo),e(B,cF),e(cF,wme),e(wme,BHo),e(cF,xHo),e(cF,GN),e(GN,kHo),e(cF,RHo),e(B,SHo),e(B,mF),e(mF,Ame),e(Ame,PHo),e(mF,$Ho),e(mF,ON),e(ON,IHo),e(mF,DHo),e(B,jHo),e(B,fF),e(fF,Lme),e(Lme,NHo),e(fF,qHo),e(fF,XN),e(XN,GHo),e(fF,OHo),e(B,XHo),e(B,gF),e(gF,Bme),e(Bme,VHo),e(gF,zHo),e(gF,VN),e(VN,WHo),e(gF,QHo),e(B,HHo),e(B,hF),e(hF,xme),e(xme,UHo),e(hF,JHo),e(hF,zN),e(zN,YHo),e(hF,KHo),e(B,ZHo),e(B,uF),e(uF,kme),e(kme,eUo),e(uF,oUo),e(uF,WN),e(WN,rUo),e(uF,tUo),e(B,aUo),e(B,pF),e(pF,Rme),e(Rme,sUo),e(pF,nUo),e(pF,QN),e(QN,lUo),e(pF,iUo),e(B,dUo),e(B,_F),e(_F,Sme),e(Sme,cUo),e(_F,mUo),e(_F,HN),e(HN,fUo),e(_F,gUo),e(B,hUo),e(B,bF),e(bF,Pme),e(Pme,uUo),e(bF,pUo),e(bF,UN),e(UN,_Uo),e(bF,bUo),e(B,vUo),e(B,vF),e(vF,$me),e($me,TUo),e(vF,FUo),e(vF,JN),e(JN,CUo),e(vF,MUo),e(B,EUo),e(B,TF),e(TF,Ime),e(Ime,yUo),e(TF,wUo),e(TF,YN),e(YN,AUo),e(TF,LUo),e(B,BUo),e(B,FF),e(FF,Dme),e(Dme,xUo),e(FF,kUo),e(FF,KN),e(KN,RUo),e(FF,SUo),e(B,PUo),e(B,CF),e(CF,jme),e(jme,$Uo),e(CF,IUo),e(CF,ZN),e(ZN,DUo),e(CF,jUo),e(B,NUo),e(B,MF),e(MF,Nme),e(Nme,qUo),e(MF,GUo),e(MF,eq),e(eq,OUo),e(MF,XUo),e(B,VUo),e(B,EF),e(EF,qme),e(qme,zUo),e(EF,WUo),e(EF,oq),e(oq,QUo),e(EF,HUo),e(B,UUo),e(B,yF),e(yF,Gme),e(Gme,JUo),e(yF,YUo),e(yF,rq),e(rq,KUo),e(yF,ZUo),e(B,eJo),e(B,wF),e(wF,Ome),e(Ome,oJo),e(wF,rJo),e(wF,tq),e(tq,tJo),e(wF,aJo),e(B,sJo),e(B,AF),e(AF,Xme),e(Xme,nJo),e(AF,lJo),e(AF,aq),e(aq,iJo),e(AF,dJo),e(go,cJo),e(go,Vme),e(Vme,mJo),e(go,fJo),g(rA,go,null),b(c,xBe,_),b(c,ac,_),e(ac,LF),e(LF,zme),g(tA,zme,null),e(ac,gJo),e(ac,Wme),e(Wme,hJo),b(c,kBe,_),b(c,pr,_),g(aA,pr,null),e(pr,uJo),e(pr,sc),e(sc,pJo),e(sc,Qme),e(Qme,_Jo),e(sc,bJo),e(sc,Hme),e(Hme,vJo),e(sc,TJo),e(pr,FJo),e(pr,sA),e(sA,CJo),e(sA,Ume),e(Ume,MJo),e(sA,EJo),e(pr,yJo),e(pr,dt),g(nA,dt,null),e(dt,wJo),e(dt,Jme),e(Jme,AJo),e(dt,LJo),e(dt,nc),e(nc,BJo),e(nc,Yme),e(Yme,xJo),e(nc,kJo),e(nc,Kme),e(Kme,RJo),e(nc,SJo),e(dt,PJo),e(dt,Zme),e(Zme,$Jo),e(dt,IJo),g(lA,dt,null),e(pr,DJo),e(pr,ho),g(iA,ho,null),e(ho,jJo),e(ho,efe),e(efe,NJo),e(ho,qJo),e(ho,cs),e(cs,GJo),e(cs,ofe),e(ofe,OJo),e(cs,XJo),e(cs,rfe),e(rfe,VJo),e(cs,zJo),e(cs,tfe),e(tfe,WJo),e(cs,QJo),e(ho,HJo),e(ho,H),e(H,BF),e(BF,afe),e(afe,UJo),e(BF,JJo),e(BF,sq),e(sq,YJo),e(BF,KJo),e(H,ZJo),e(H,xF),e(xF,sfe),e(sfe,eYo),e(xF,oYo),e(xF,nq),e(nq,rYo),e(xF,tYo),e(H,aYo),e(H,kF),e(kF,nfe),e(nfe,sYo),e(kF,nYo),e(kF,lq),e(lq,lYo),e(kF,iYo),e(H,dYo),e(H,RF),e(RF,lfe),e(lfe,cYo),e(RF,mYo),e(RF,iq),e(iq,fYo),e(RF,gYo),e(H,hYo),e(H,SF),e(SF,ife),e(ife,uYo),e(SF,pYo),e(SF,dq),e(dq,_Yo),e(SF,bYo),e(H,vYo),e(H,PF),e(PF,dfe),e(dfe,TYo),e(PF,FYo),e(PF,cq),e(cq,CYo),e(PF,MYo),e(H,EYo),e(H,$F),e($F,cfe),e(cfe,yYo),e($F,wYo),e($F,mq),e(mq,AYo),e($F,LYo),e(H,BYo),e(H,IF),e(IF,mfe),e(mfe,xYo),e(IF,kYo),e(IF,fq),e(fq,RYo),e(IF,SYo),e(H,PYo),e(H,DF),e(DF,ffe),e(ffe,$Yo),e(DF,IYo),e(DF,gq),e(gq,DYo),e(DF,jYo),e(H,NYo),e(H,jF),e(jF,gfe),e(gfe,qYo),e(jF,GYo),e(jF,hq),e(hq,OYo),e(jF,XYo),e(H,VYo),e(H,NF),e(NF,hfe),e(hfe,zYo),e(NF,WYo),e(NF,uq),e(uq,QYo),e(NF,HYo),e(H,UYo),e(H,qF),e(qF,ufe),e(ufe,JYo),e(qF,YYo),e(qF,pq),e(pq,KYo),e(qF,ZYo),e(H,eKo),e(H,GF),e(GF,pfe),e(pfe,oKo),e(GF,rKo),e(GF,_q),e(_q,tKo),e(GF,aKo),e(H,sKo),e(H,OF),e(OF,_fe),e(_fe,nKo),e(OF,lKo),e(OF,bq),e(bq,iKo),e(OF,dKo),e(H,cKo),e(H,XF),e(XF,bfe),e(bfe,mKo),e(XF,fKo),e(XF,vq),e(vq,gKo),e(XF,hKo),e(H,uKo),e(H,VF),e(VF,vfe),e(vfe,pKo),e(VF,_Ko),e(VF,Tq),e(Tq,bKo),e(VF,vKo),e(H,TKo),e(H,zF),e(zF,Tfe),e(Tfe,FKo),e(zF,CKo),e(zF,Fq),e(Fq,MKo),e(zF,EKo),e(H,yKo),e(H,WF),e(WF,Ffe),e(Ffe,wKo),e(WF,AKo),e(WF,Cq),e(Cq,LKo),e(WF,BKo),e(H,xKo),e(H,QF),e(QF,Cfe),e(Cfe,kKo),e(QF,RKo),e(QF,Mq),e(Mq,SKo),e(QF,PKo),e(H,$Ko),e(H,HF),e(HF,Mfe),e(Mfe,IKo),e(HF,DKo),e(HF,Eq),e(Eq,jKo),e(HF,NKo),e(H,qKo),e(H,UF),e(UF,Efe),e(Efe,GKo),e(UF,OKo),e(UF,yq),e(yq,XKo),e(UF,VKo),e(H,zKo),e(H,JF),e(JF,yfe),e(yfe,WKo),e(JF,QKo),e(JF,wq),e(wq,HKo),e(JF,UKo),e(ho,JKo),e(ho,wfe),e(wfe,YKo),e(ho,KKo),g(dA,ho,null),b(c,RBe,_),b(c,lc,_),e(lc,YF),e(YF,Afe),g(cA,Afe,null),e(lc,ZKo),e(lc,Lfe),e(Lfe,eZo),b(c,SBe,_),b(c,_r,_),g(mA,_r,null),e(_r,oZo),e(_r,ic),e(ic,rZo),e(ic,Bfe),e(Bfe,tZo),e(ic,aZo),e(ic,xfe),e(xfe,sZo),e(ic,nZo),e(_r,lZo),e(_r,fA),e(fA,iZo),e(fA,kfe),e(kfe,dZo),e(fA,cZo),e(_r,mZo),e(_r,ct),g(gA,ct,null),e(ct,fZo),e(ct,Rfe),e(Rfe,gZo),e(ct,hZo),e(ct,dc),e(dc,uZo),e(dc,Sfe),e(Sfe,pZo),e(dc,_Zo),e(dc,Pfe),e(Pfe,bZo),e(dc,vZo),e(ct,TZo),e(ct,$fe),e($fe,FZo),e(ct,CZo),g(hA,ct,null),e(_r,MZo),e(_r,uo),g(uA,uo,null),e(uo,EZo),e(uo,Ife),e(Ife,yZo),e(uo,wZo),e(uo,ms),e(ms,AZo),e(ms,Dfe),e(Dfe,LZo),e(ms,BZo),e(ms,jfe),e(jfe,xZo),e(ms,kZo),e(ms,Nfe),e(Nfe,RZo),e(ms,SZo),e(uo,PZo),e(uo,he),e(he,KF),e(KF,qfe),e(qfe,$Zo),e(KF,IZo),e(KF,Aq),e(Aq,DZo),e(KF,jZo),e(he,NZo),e(he,ZF),e(ZF,Gfe),e(Gfe,qZo),e(ZF,GZo),e(ZF,Lq),e(Lq,OZo),e(ZF,XZo),e(he,VZo),e(he,eC),e(eC,Ofe),e(Ofe,zZo),e(eC,WZo),e(eC,Bq),e(Bq,QZo),e(eC,HZo),e(he,UZo),e(he,oC),e(oC,Xfe),e(Xfe,JZo),e(oC,YZo),e(oC,xq),e(xq,KZo),e(oC,ZZo),e(he,eer),e(he,rC),e(rC,Vfe),e(Vfe,oer),e(rC,rer),e(rC,kq),e(kq,ter),e(rC,aer),e(he,ser),e(he,tC),e(tC,zfe),e(zfe,ner),e(tC,ler),e(tC,Rq),e(Rq,ier),e(tC,der),e(he,cer),e(he,aC),e(aC,Wfe),e(Wfe,mer),e(aC,fer),e(aC,Sq),e(Sq,ger),e(aC,her),e(he,uer),e(he,sC),e(sC,Qfe),e(Qfe,per),e(sC,_er),e(sC,Pq),e(Pq,ber),e(sC,ver),e(he,Ter),e(he,nC),e(nC,Hfe),e(Hfe,Fer),e(nC,Cer),e(nC,$q),e($q,Mer),e(nC,Eer),e(he,yer),e(he,lC),e(lC,Ufe),e(Ufe,wer),e(lC,Aer),e(lC,Iq),e(Iq,Ler),e(lC,Ber),e(uo,xer),e(uo,Jfe),e(Jfe,ker),e(uo,Rer),g(pA,uo,null),b(c,PBe,_),b(c,cc,_),e(cc,iC),e(iC,Yfe),g(_A,Yfe,null),e(cc,Ser),e(cc,Kfe),e(Kfe,Per),b(c,$Be,_),b(c,br,_),g(bA,br,null),e(br,$er),e(br,mc),e(mc,Ier),e(mc,Zfe),e(Zfe,Der),e(mc,jer),e(mc,ege),e(ege,Ner),e(mc,qer),e(br,Ger),e(br,vA),e(vA,Oer),e(vA,oge),e(oge,Xer),e(vA,Ver),e(br,zer),e(br,mt),g(TA,mt,null),e(mt,Wer),e(mt,rge),e(rge,Qer),e(mt,Her),e(mt,fc),e(fc,Uer),e(fc,tge),e(tge,Jer),e(fc,Yer),e(fc,age),e(age,Ker),e(fc,Zer),e(mt,eor),e(mt,sge),e(sge,oor),e(mt,ror),g(FA,mt,null),e(br,tor),e(br,po),g(CA,po,null),e(po,aor),e(po,nge),e(nge,sor),e(po,nor),e(po,fs),e(fs,lor),e(fs,lge),e(lge,ior),e(fs,dor),e(fs,ige),e(ige,cor),e(fs,mor),e(fs,dge),e(dge,gor),e(fs,hor),e(po,uor),e(po,MA),e(MA,dC),e(dC,cge),e(cge,por),e(dC,_or),e(dC,Dq),e(Dq,bor),e(dC,vor),e(MA,Tor),e(MA,cC),e(cC,mge),e(mge,For),e(cC,Cor),e(cC,jq),e(jq,Mor),e(cC,Eor),e(po,yor),e(po,fge),e(fge,wor),e(po,Aor),g(EA,po,null),b(c,IBe,_),b(c,gc,_),e(gc,mC),e(mC,gge),g(yA,gge,null),e(gc,Lor),e(gc,hge),e(hge,Bor),b(c,DBe,_),b(c,vr,_),g(wA,vr,null),e(vr,xor),e(vr,hc),e(hc,kor),e(hc,uge),e(uge,Ror),e(hc,Sor),e(hc,pge),e(pge,Por),e(hc,$or),e(vr,Ior),e(vr,AA),e(AA,Dor),e(AA,_ge),e(_ge,jor),e(AA,Nor),e(vr,qor),e(vr,ft),g(LA,ft,null),e(ft,Gor),e(ft,bge),e(bge,Oor),e(ft,Xor),e(ft,uc),e(uc,Vor),e(uc,vge),e(vge,zor),e(uc,Wor),e(uc,Tge),e(Tge,Qor),e(uc,Hor),e(ft,Uor),e(ft,Fge),e(Fge,Jor),e(ft,Yor),g(BA,ft,null),e(vr,Kor),e(vr,_o),g(xA,_o,null),e(_o,Zor),e(_o,Cge),e(Cge,err),e(_o,orr),e(_o,gs),e(gs,rrr),e(gs,Mge),e(Mge,trr),e(gs,arr),e(gs,Ege),e(Ege,srr),e(gs,nrr),e(gs,yge),e(yge,lrr),e(gs,irr),e(_o,drr),e(_o,Y),e(Y,fC),e(fC,wge),e(wge,crr),e(fC,mrr),e(fC,Nq),e(Nq,frr),e(fC,grr),e(Y,hrr),e(Y,gC),e(gC,Age),e(Age,urr),e(gC,prr),e(gC,qq),e(qq,_rr),e(gC,brr),e(Y,vrr),e(Y,hC),e(hC,Lge),e(Lge,Trr),e(hC,Frr),e(hC,Gq),e(Gq,Crr),e(hC,Mrr),e(Y,Err),e(Y,uC),e(uC,Bge),e(Bge,yrr),e(uC,wrr),e(uC,Oq),e(Oq,Arr),e(uC,Lrr),e(Y,Brr),e(Y,pC),e(pC,xge),e(xge,xrr),e(pC,krr),e(pC,Xq),e(Xq,Rrr),e(pC,Srr),e(Y,Prr),e(Y,_C),e(_C,kge),e(kge,$rr),e(_C,Irr),e(_C,Vq),e(Vq,Drr),e(_C,jrr),e(Y,Nrr),e(Y,bC),e(bC,Rge),e(Rge,qrr),e(bC,Grr),e(bC,zq),e(zq,Orr),e(bC,Xrr),e(Y,Vrr),e(Y,vC),e(vC,Sge),e(Sge,zrr),e(vC,Wrr),e(vC,Wq),e(Wq,Qrr),e(vC,Hrr),e(Y,Urr),e(Y,TC),e(TC,Pge),e(Pge,Jrr),e(TC,Yrr),e(TC,Qq),e(Qq,Krr),e(TC,Zrr),e(Y,etr),e(Y,FC),e(FC,$ge),e($ge,otr),e(FC,rtr),e(FC,Hq),e(Hq,ttr),e(FC,atr),e(Y,str),e(Y,CC),e(CC,Ige),e(Ige,ntr),e(CC,ltr),e(CC,Uq),e(Uq,itr),e(CC,dtr),e(Y,ctr),e(Y,MC),e(MC,Dge),e(Dge,mtr),e(MC,ftr),e(MC,Jq),e(Jq,gtr),e(MC,htr),e(Y,utr),e(Y,EC),e(EC,jge),e(jge,ptr),e(EC,_tr),e(EC,Yq),e(Yq,btr),e(EC,vtr),e(Y,Ttr),e(Y,yC),e(yC,Nge),e(Nge,Ftr),e(yC,Ctr),e(yC,Kq),e(Kq,Mtr),e(yC,Etr),e(Y,ytr),e(Y,wC),e(wC,qge),e(qge,wtr),e(wC,Atr),e(wC,Zq),e(Zq,Ltr),e(wC,Btr),e(Y,xtr),e(Y,AC),e(AC,Gge),e(Gge,ktr),e(AC,Rtr),e(AC,eG),e(eG,Str),e(AC,Ptr),e(Y,$tr),e(Y,LC),e(LC,Oge),e(Oge,Itr),e(LC,Dtr),e(LC,oG),e(oG,jtr),e(LC,Ntr),e(Y,qtr),e(Y,BC),e(BC,Xge),e(Xge,Gtr),e(BC,Otr),e(BC,rG),e(rG,Xtr),e(BC,Vtr),e(Y,ztr),e(Y,xC),e(xC,Vge),e(Vge,Wtr),e(xC,Qtr),e(xC,tG),e(tG,Htr),e(xC,Utr),e(Y,Jtr),e(Y,kC),e(kC,zge),e(zge,Ytr),e(kC,Ktr),e(kC,aG),e(aG,Ztr),e(kC,ear),e(_o,oar),e(_o,Wge),e(Wge,rar),e(_o,tar),g(kA,_o,null),b(c,jBe,_),b(c,pc,_),e(pc,RC),e(RC,Qge),g(RA,Qge,null),e(pc,aar),e(pc,Hge),e(Hge,sar),b(c,NBe,_),b(c,Tr,_),g(SA,Tr,null),e(Tr,nar),e(Tr,_c),e(_c,lar),e(_c,Uge),e(Uge,iar),e(_c,dar),e(_c,Jge),e(Jge,car),e(_c,mar),e(Tr,far),e(Tr,PA),e(PA,gar),e(PA,Yge),e(Yge,har),e(PA,uar),e(Tr,par),e(Tr,gt),g($A,gt,null),e(gt,_ar),e(gt,Kge),e(Kge,bar),e(gt,Tar),e(gt,bc),e(bc,Far),e(bc,Zge),e(Zge,Car),e(bc,Mar),e(bc,ehe),e(ehe,Ear),e(bc,yar),e(gt,war),e(gt,ohe),e(ohe,Aar),e(gt,Lar),g(IA,gt,null),e(Tr,Bar),e(Tr,bo),g(DA,bo,null),e(bo,xar),e(bo,rhe),e(rhe,kar),e(bo,Rar),e(bo,hs),e(hs,Sar),e(hs,the),e(the,Par),e(hs,$ar),e(hs,ahe),e(ahe,Iar),e(hs,Dar),e(hs,she),e(she,jar),e(hs,Nar),e(bo,qar),e(bo,ue),e(ue,SC),e(SC,nhe),e(nhe,Gar),e(SC,Oar),e(SC,sG),e(sG,Xar),e(SC,Var),e(ue,zar),e(ue,PC),e(PC,lhe),e(lhe,War),e(PC,Qar),e(PC,nG),e(nG,Har),e(PC,Uar),e(ue,Jar),e(ue,$C),e($C,ihe),e(ihe,Yar),e($C,Kar),e($C,lG),e(lG,Zar),e($C,esr),e(ue,osr),e(ue,IC),e(IC,dhe),e(dhe,rsr),e(IC,tsr),e(IC,iG),e(iG,asr),e(IC,ssr),e(ue,nsr),e(ue,DC),e(DC,che),e(che,lsr),e(DC,isr),e(DC,dG),e(dG,dsr),e(DC,csr),e(ue,msr),e(ue,jC),e(jC,mhe),e(mhe,fsr),e(jC,gsr),e(jC,cG),e(cG,hsr),e(jC,usr),e(ue,psr),e(ue,NC),e(NC,fhe),e(fhe,_sr),e(NC,bsr),e(NC,mG),e(mG,vsr),e(NC,Tsr),e(ue,Fsr),e(ue,qC),e(qC,ghe),e(ghe,Csr),e(qC,Msr),e(qC,fG),e(fG,Esr),e(qC,ysr),e(ue,wsr),e(ue,GC),e(GC,hhe),e(hhe,Asr),e(GC,Lsr),e(GC,gG),e(gG,Bsr),e(GC,xsr),e(ue,ksr),e(ue,OC),e(OC,uhe),e(uhe,Rsr),e(OC,Ssr),e(OC,hG),e(hG,Psr),e(OC,$sr),e(bo,Isr),e(bo,phe),e(phe,Dsr),e(bo,jsr),g(jA,bo,null),b(c,qBe,_),b(c,vc,_),e(vc,XC),e(XC,_he),g(NA,_he,null),e(vc,Nsr),e(vc,bhe),e(bhe,qsr),b(c,GBe,_),b(c,Fr,_),g(qA,Fr,null),e(Fr,Gsr),e(Fr,Tc),e(Tc,Osr),e(Tc,vhe),e(vhe,Xsr),e(Tc,Vsr),e(Tc,The),e(The,zsr),e(Tc,Wsr),e(Fr,Qsr),e(Fr,GA),e(GA,Hsr),e(GA,Fhe),e(Fhe,Usr),e(GA,Jsr),e(Fr,Ysr),e(Fr,ht),g(OA,ht,null),e(ht,Ksr),e(ht,Che),e(Che,Zsr),e(ht,enr),e(ht,Fc),e(Fc,onr),e(Fc,Mhe),e(Mhe,rnr),e(Fc,tnr),e(Fc,Ehe),e(Ehe,anr),e(Fc,snr),e(ht,nnr),e(ht,yhe),e(yhe,lnr),e(ht,inr),g(XA,ht,null),e(Fr,dnr),e(Fr,vo),g(VA,vo,null),e(vo,cnr),e(vo,whe),e(whe,mnr),e(vo,fnr),e(vo,us),e(us,gnr),e(us,Ahe),e(Ahe,hnr),e(us,unr),e(us,Lhe),e(Lhe,pnr),e(us,_nr),e(us,Bhe),e(Bhe,bnr),e(us,vnr),e(vo,Tnr),e(vo,X),e(X,VC),e(VC,xhe),e(xhe,Fnr),e(VC,Cnr),e(VC,uG),e(uG,Mnr),e(VC,Enr),e(X,ynr),e(X,zC),e(zC,khe),e(khe,wnr),e(zC,Anr),e(zC,pG),e(pG,Lnr),e(zC,Bnr),e(X,xnr),e(X,WC),e(WC,Rhe),e(Rhe,knr),e(WC,Rnr),e(WC,_G),e(_G,Snr),e(WC,Pnr),e(X,$nr),e(X,QC),e(QC,She),e(She,Inr),e(QC,Dnr),e(QC,bG),e(bG,jnr),e(QC,Nnr),e(X,qnr),e(X,HC),e(HC,Phe),e(Phe,Gnr),e(HC,Onr),e(HC,vG),e(vG,Xnr),e(HC,Vnr),e(X,znr),e(X,UC),e(UC,$he),e($he,Wnr),e(UC,Qnr),e(UC,TG),e(TG,Hnr),e(UC,Unr),e(X,Jnr),e(X,JC),e(JC,Ihe),e(Ihe,Ynr),e(JC,Knr),e(JC,FG),e(FG,Znr),e(JC,elr),e(X,olr),e(X,YC),e(YC,Dhe),e(Dhe,rlr),e(YC,tlr),e(YC,CG),e(CG,alr),e(YC,slr),e(X,nlr),e(X,KC),e(KC,jhe),e(jhe,llr),e(KC,ilr),e(KC,MG),e(MG,dlr),e(KC,clr),e(X,mlr),e(X,ZC),e(ZC,Nhe),e(Nhe,flr),e(ZC,glr),e(ZC,EG),e(EG,hlr),e(ZC,ulr),e(X,plr),e(X,e4),e(e4,qhe),e(qhe,_lr),e(e4,blr),e(e4,yG),e(yG,vlr),e(e4,Tlr),e(X,Flr),e(X,o4),e(o4,Ghe),e(Ghe,Clr),e(o4,Mlr),e(o4,wG),e(wG,Elr),e(o4,ylr),e(X,wlr),e(X,r4),e(r4,Ohe),e(Ohe,Alr),e(r4,Llr),e(r4,AG),e(AG,Blr),e(r4,xlr),e(X,klr),e(X,t4),e(t4,Xhe),e(Xhe,Rlr),e(t4,Slr),e(t4,LG),e(LG,Plr),e(t4,$lr),e(X,Ilr),e(X,a4),e(a4,Vhe),e(Vhe,Dlr),e(a4,jlr),e(a4,BG),e(BG,Nlr),e(a4,qlr),e(X,Glr),e(X,s4),e(s4,zhe),e(zhe,Olr),e(s4,Xlr),e(s4,xG),e(xG,Vlr),e(s4,zlr),e(X,Wlr),e(X,n4),e(n4,Whe),e(Whe,Qlr),e(n4,Hlr),e(n4,kG),e(kG,Ulr),e(n4,Jlr),e(X,Ylr),e(X,l4),e(l4,Qhe),e(Qhe,Klr),e(l4,Zlr),e(l4,RG),e(RG,eir),e(l4,oir),e(X,rir),e(X,i4),e(i4,Hhe),e(Hhe,tir),e(i4,air),e(i4,SG),e(SG,sir),e(i4,nir),e(X,lir),e(X,d4),e(d4,Uhe),e(Uhe,iir),e(d4,dir),e(d4,PG),e(PG,cir),e(d4,mir),e(X,fir),e(X,c4),e(c4,Jhe),e(Jhe,gir),e(c4,hir),e(c4,$G),e($G,uir),e(c4,pir),e(X,_ir),e(X,m4),e(m4,Yhe),e(Yhe,bir),e(m4,vir),e(m4,IG),e(IG,Tir),e(m4,Fir),e(X,Cir),e(X,f4),e(f4,Khe),e(Khe,Mir),e(f4,Eir),e(f4,DG),e(DG,yir),e(f4,wir),e(X,Air),e(X,g4),e(g4,Zhe),e(Zhe,Lir),e(g4,Bir),e(g4,jG),e(jG,xir),e(g4,kir),e(X,Rir),e(X,h4),e(h4,eue),e(eue,Sir),e(h4,Pir),e(h4,NG),e(NG,$ir),e(h4,Iir),e(vo,Dir),e(vo,oue),e(oue,jir),e(vo,Nir),g(zA,vo,null),b(c,OBe,_),b(c,Cc,_),e(Cc,u4),e(u4,rue),g(WA,rue,null),e(Cc,qir),e(Cc,tue),e(tue,Gir),b(c,XBe,_),b(c,Cr,_),g(QA,Cr,null),e(Cr,Oir),e(Cr,Mc),e(Mc,Xir),e(Mc,aue),e(aue,Vir),e(Mc,zir),e(Mc,sue),e(sue,Wir),e(Mc,Qir),e(Cr,Hir),e(Cr,HA),e(HA,Uir),e(HA,nue),e(nue,Jir),e(HA,Yir),e(Cr,Kir),e(Cr,ut),g(UA,ut,null),e(ut,Zir),e(ut,lue),e(lue,edr),e(ut,odr),e(ut,Ec),e(Ec,rdr),e(Ec,iue),e(iue,tdr),e(Ec,adr),e(Ec,due),e(due,sdr),e(Ec,ndr),e(ut,ldr),e(ut,cue),e(cue,idr),e(ut,ddr),g(JA,ut,null),e(Cr,cdr),e(Cr,To),g(YA,To,null),e(To,mdr),e(To,mue),e(mue,fdr),e(To,gdr),e(To,ps),e(ps,hdr),e(ps,fue),e(fue,udr),e(ps,pdr),e(ps,gue),e(gue,_dr),e(ps,bdr),e(ps,hue),e(hue,vdr),e(ps,Tdr),e(To,Fdr),e(To,te),e(te,p4),e(p4,uue),e(uue,Cdr),e(p4,Mdr),e(p4,qG),e(qG,Edr),e(p4,ydr),e(te,wdr),e(te,_4),e(_4,pue),e(pue,Adr),e(_4,Ldr),e(_4,GG),e(GG,Bdr),e(_4,xdr),e(te,kdr),e(te,b4),e(b4,_ue),e(_ue,Rdr),e(b4,Sdr),e(b4,OG),e(OG,Pdr),e(b4,$dr),e(te,Idr),e(te,v4),e(v4,bue),e(bue,Ddr),e(v4,jdr),e(v4,XG),e(XG,Ndr),e(v4,qdr),e(te,Gdr),e(te,T4),e(T4,vue),e(vue,Odr),e(T4,Xdr),e(T4,VG),e(VG,Vdr),e(T4,zdr),e(te,Wdr),e(te,F4),e(F4,Tue),e(Tue,Qdr),e(F4,Hdr),e(F4,zG),e(zG,Udr),e(F4,Jdr),e(te,Ydr),e(te,C4),e(C4,Fue),e(Fue,Kdr),e(C4,Zdr),e(C4,WG),e(WG,ecr),e(C4,ocr),e(te,rcr),e(te,M4),e(M4,Cue),e(Cue,tcr),e(M4,acr),e(M4,QG),e(QG,scr),e(M4,ncr),e(te,lcr),e(te,E4),e(E4,Mue),e(Mue,icr),e(E4,dcr),e(E4,HG),e(HG,ccr),e(E4,mcr),e(te,fcr),e(te,y4),e(y4,Eue),e(Eue,gcr),e(y4,hcr),e(y4,UG),e(UG,ucr),e(y4,pcr),e(te,_cr),e(te,w4),e(w4,yue),e(yue,bcr),e(w4,vcr),e(w4,JG),e(JG,Tcr),e(w4,Fcr),e(te,Ccr),e(te,A4),e(A4,wue),e(wue,Mcr),e(A4,Ecr),e(A4,YG),e(YG,ycr),e(A4,wcr),e(te,Acr),e(te,L4),e(L4,Aue),e(Aue,Lcr),e(L4,Bcr),e(L4,KG),e(KG,xcr),e(L4,kcr),e(te,Rcr),e(te,B4),e(B4,Lue),e(Lue,Scr),e(B4,Pcr),e(B4,ZG),e(ZG,$cr),e(B4,Icr),e(te,Dcr),e(te,x4),e(x4,Bue),e(Bue,jcr),e(x4,Ncr),e(x4,eO),e(eO,qcr),e(x4,Gcr),e(te,Ocr),e(te,k4),e(k4,xue),e(xue,Xcr),e(k4,Vcr),e(k4,oO),e(oO,zcr),e(k4,Wcr),e(te,Qcr),e(te,R4),e(R4,kue),e(kue,Hcr),e(R4,Ucr),e(R4,rO),e(rO,Jcr),e(R4,Ycr),e(To,Kcr),e(To,Rue),e(Rue,Zcr),e(To,emr),g(KA,To,null),b(c,VBe,_),b(c,yc,_),e(yc,S4),e(S4,Sue),g(ZA,Sue,null),e(yc,omr),e(yc,Pue),e(Pue,rmr),b(c,zBe,_),b(c,Mr,_),g(e0,Mr,null),e(Mr,tmr),e(Mr,wc),e(wc,amr),e(wc,$ue),e($ue,smr),e(wc,nmr),e(wc,Iue),e(Iue,lmr),e(wc,imr),e(Mr,dmr),e(Mr,o0),e(o0,cmr),e(o0,Due),e(Due,mmr),e(o0,fmr),e(Mr,gmr),e(Mr,pt),g(r0,pt,null),e(pt,hmr),e(pt,jue),e(jue,umr),e(pt,pmr),e(pt,Ac),e(Ac,_mr),e(Ac,Nue),e(Nue,bmr),e(Ac,vmr),e(Ac,que),e(que,Tmr),e(Ac,Fmr),e(pt,Cmr),e(pt,Gue),e(Gue,Mmr),e(pt,Emr),g(t0,pt,null),e(Mr,ymr),e(Mr,Fo),g(a0,Fo,null),e(Fo,wmr),e(Fo,Oue),e(Oue,Amr),e(Fo,Lmr),e(Fo,_s),e(_s,Bmr),e(_s,Xue),e(Xue,xmr),e(_s,kmr),e(_s,Vue),e(Vue,Rmr),e(_s,Smr),e(_s,zue),e(zue,Pmr),e(_s,$mr),e(Fo,Imr),e(Fo,Wue),e(Wue,P4),e(P4,Que),e(Que,Dmr),e(P4,jmr),e(P4,tO),e(tO,Nmr),e(P4,qmr),e(Fo,Gmr),e(Fo,Hue),e(Hue,Omr),e(Fo,Xmr),g(s0,Fo,null),b(c,WBe,_),b(c,Lc,_),e(Lc,$4),e($4,Uue),g(n0,Uue,null),e(Lc,Vmr),e(Lc,Jue),e(Jue,zmr),b(c,QBe,_),b(c,Er,_),g(l0,Er,null),e(Er,Wmr),e(Er,Bc),e(Bc,Qmr),e(Bc,Yue),e(Yue,Hmr),e(Bc,Umr),e(Bc,Kue),e(Kue,Jmr),e(Bc,Ymr),e(Er,Kmr),e(Er,i0),e(i0,Zmr),e(i0,Zue),e(Zue,efr),e(i0,ofr),e(Er,rfr),e(Er,_t),g(d0,_t,null),e(_t,tfr),e(_t,epe),e(epe,afr),e(_t,sfr),e(_t,xc),e(xc,nfr),e(xc,ope),e(ope,lfr),e(xc,ifr),e(xc,rpe),e(rpe,dfr),e(xc,cfr),e(_t,mfr),e(_t,tpe),e(tpe,ffr),e(_t,gfr),g(c0,_t,null),e(Er,hfr),e(Er,Co),g(m0,Co,null),e(Co,ufr),e(Co,ape),e(ape,pfr),e(Co,_fr),e(Co,bs),e(bs,bfr),e(bs,spe),e(spe,vfr),e(bs,Tfr),e(bs,npe),e(npe,Ffr),e(bs,Cfr),e(bs,lpe),e(lpe,Mfr),e(bs,Efr),e(Co,yfr),e(Co,K),e(K,I4),e(I4,ipe),e(ipe,wfr),e(I4,Afr),e(I4,aO),e(aO,Lfr),e(I4,Bfr),e(K,xfr),e(K,D4),e(D4,dpe),e(dpe,kfr),e(D4,Rfr),e(D4,sO),e(sO,Sfr),e(D4,Pfr),e(K,$fr),e(K,j4),e(j4,cpe),e(cpe,Ifr),e(j4,Dfr),e(j4,nO),e(nO,jfr),e(j4,Nfr),e(K,qfr),e(K,N4),e(N4,mpe),e(mpe,Gfr),e(N4,Ofr),e(N4,lO),e(lO,Xfr),e(N4,Vfr),e(K,zfr),e(K,q4),e(q4,fpe),e(fpe,Wfr),e(q4,Qfr),e(q4,iO),e(iO,Hfr),e(q4,Ufr),e(K,Jfr),e(K,G4),e(G4,gpe),e(gpe,Yfr),e(G4,Kfr),e(G4,dO),e(dO,Zfr),e(G4,egr),e(K,ogr),e(K,O4),e(O4,hpe),e(hpe,rgr),e(O4,tgr),e(O4,cO),e(cO,agr),e(O4,sgr),e(K,ngr),e(K,X4),e(X4,upe),e(upe,lgr),e(X4,igr),e(X4,mO),e(mO,dgr),e(X4,cgr),e(K,mgr),e(K,V4),e(V4,ppe),e(ppe,fgr),e(V4,ggr),e(V4,fO),e(fO,hgr),e(V4,ugr),e(K,pgr),e(K,z4),e(z4,_pe),e(_pe,_gr),e(z4,bgr),e(z4,gO),e(gO,vgr),e(z4,Tgr),e(K,Fgr),e(K,W4),e(W4,bpe),e(bpe,Cgr),e(W4,Mgr),e(W4,hO),e(hO,Egr),e(W4,ygr),e(K,wgr),e(K,Q4),e(Q4,vpe),e(vpe,Agr),e(Q4,Lgr),e(Q4,uO),e(uO,Bgr),e(Q4,xgr),e(K,kgr),e(K,H4),e(H4,Tpe),e(Tpe,Rgr),e(H4,Sgr),e(H4,pO),e(pO,Pgr),e(H4,$gr),e(K,Igr),e(K,U4),e(U4,Fpe),e(Fpe,Dgr),e(U4,jgr),e(U4,_O),e(_O,Ngr),e(U4,qgr),e(K,Ggr),e(K,J4),e(J4,Cpe),e(Cpe,Ogr),e(J4,Xgr),e(J4,bO),e(bO,Vgr),e(J4,zgr),e(K,Wgr),e(K,Y4),e(Y4,Mpe),e(Mpe,Qgr),e(Y4,Hgr),e(Y4,vO),e(vO,Ugr),e(Y4,Jgr),e(K,Ygr),e(K,K4),e(K4,Epe),e(Epe,Kgr),e(K4,Zgr),e(K4,TO),e(TO,ehr),e(K4,ohr),e(K,rhr),e(K,Z4),e(Z4,ype),e(ype,thr),e(Z4,ahr),e(Z4,FO),e(FO,shr),e(Z4,nhr),e(K,lhr),e(K,eM),e(eM,wpe),e(wpe,ihr),e(eM,dhr),e(eM,CO),e(CO,chr),e(eM,mhr),e(K,fhr),e(K,oM),e(oM,Ape),e(Ape,ghr),e(oM,hhr),e(oM,MO),e(MO,uhr),e(oM,phr),e(Co,_hr),e(Co,Lpe),e(Lpe,bhr),e(Co,vhr),g(f0,Co,null),b(c,HBe,_),b(c,kc,_),e(kc,rM),e(rM,Bpe),g(g0,Bpe,null),e(kc,Thr),e(kc,xpe),e(xpe,Fhr),b(c,UBe,_),b(c,yr,_),g(h0,yr,null),e(yr,Chr),e(yr,Rc),e(Rc,Mhr),e(Rc,kpe),e(kpe,Ehr),e(Rc,yhr),e(Rc,Rpe),e(Rpe,whr),e(Rc,Ahr),e(yr,Lhr),e(yr,u0),e(u0,Bhr),e(u0,Spe),e(Spe,xhr),e(u0,khr),e(yr,Rhr),e(yr,bt),g(p0,bt,null),e(bt,Shr),e(bt,Ppe),e(Ppe,Phr),e(bt,$hr),e(bt,Sc),e(Sc,Ihr),e(Sc,$pe),e($pe,Dhr),e(Sc,jhr),e(Sc,Ipe),e(Ipe,Nhr),e(Sc,qhr),e(bt,Ghr),e(bt,Dpe),e(Dpe,Ohr),e(bt,Xhr),g(_0,bt,null),e(yr,Vhr),e(yr,Mo),g(b0,Mo,null),e(Mo,zhr),e(Mo,jpe),e(jpe,Whr),e(Mo,Qhr),e(Mo,vs),e(vs,Hhr),e(vs,Npe),e(Npe,Uhr),e(vs,Jhr),e(vs,qpe),e(qpe,Yhr),e(vs,Khr),e(vs,Gpe),e(Gpe,Zhr),e(vs,eur),e(Mo,our),e(Mo,Z),e(Z,tM),e(tM,Ope),e(Ope,rur),e(tM,tur),e(tM,EO),e(EO,aur),e(tM,sur),e(Z,nur),e(Z,aM),e(aM,Xpe),e(Xpe,lur),e(aM,iur),e(aM,yO),e(yO,dur),e(aM,cur),e(Z,mur),e(Z,sM),e(sM,Vpe),e(Vpe,fur),e(sM,gur),e(sM,wO),e(wO,hur),e(sM,uur),e(Z,pur),e(Z,nM),e(nM,zpe),e(zpe,_ur),e(nM,bur),e(nM,AO),e(AO,vur),e(nM,Tur),e(Z,Fur),e(Z,lM),e(lM,Wpe),e(Wpe,Cur),e(lM,Mur),e(lM,LO),e(LO,Eur),e(lM,yur),e(Z,wur),e(Z,iM),e(iM,Qpe),e(Qpe,Aur),e(iM,Lur),e(iM,BO),e(BO,Bur),e(iM,xur),e(Z,kur),e(Z,dM),e(dM,Hpe),e(Hpe,Rur),e(dM,Sur),e(dM,xO),e(xO,Pur),e(dM,$ur),e(Z,Iur),e(Z,cM),e(cM,Upe),e(Upe,Dur),e(cM,jur),e(cM,kO),e(kO,Nur),e(cM,qur),e(Z,Gur),e(Z,mM),e(mM,Jpe),e(Jpe,Our),e(mM,Xur),e(mM,RO),e(RO,Vur),e(mM,zur),e(Z,Wur),e(Z,fM),e(fM,Ype),e(Ype,Qur),e(fM,Hur),e(fM,SO),e(SO,Uur),e(fM,Jur),e(Z,Yur),e(Z,gM),e(gM,Kpe),e(Kpe,Kur),e(gM,Zur),e(gM,PO),e(PO,epr),e(gM,opr),e(Z,rpr),e(Z,hM),e(hM,Zpe),e(Zpe,tpr),e(hM,apr),e(hM,$O),e($O,spr),e(hM,npr),e(Z,lpr),e(Z,uM),e(uM,e_e),e(e_e,ipr),e(uM,dpr),e(uM,IO),e(IO,cpr),e(uM,mpr),e(Z,fpr),e(Z,pM),e(pM,o_e),e(o_e,gpr),e(pM,hpr),e(pM,DO),e(DO,upr),e(pM,ppr),e(Z,_pr),e(Z,_M),e(_M,r_e),e(r_e,bpr),e(_M,vpr),e(_M,jO),e(jO,Tpr),e(_M,Fpr),e(Z,Cpr),e(Z,bM),e(bM,t_e),e(t_e,Mpr),e(bM,Epr),e(bM,NO),e(NO,ypr),e(bM,wpr),e(Z,Apr),e(Z,vM),e(vM,a_e),e(a_e,Lpr),e(vM,Bpr),e(vM,qO),e(qO,xpr),e(vM,kpr),e(Z,Rpr),e(Z,TM),e(TM,s_e),e(s_e,Spr),e(TM,Ppr),e(TM,GO),e(GO,$pr),e(TM,Ipr),e(Z,Dpr),e(Z,FM),e(FM,n_e),e(n_e,jpr),e(FM,Npr),e(FM,OO),e(OO,qpr),e(FM,Gpr),e(Mo,Opr),e(Mo,l_e),e(l_e,Xpr),e(Mo,Vpr),g(v0,Mo,null),b(c,JBe,_),b(c,Pc,_),e(Pc,CM),e(CM,i_e),g(T0,i_e,null),e(Pc,zpr),e(Pc,d_e),e(d_e,Wpr),b(c,YBe,_),b(c,wr,_),g(F0,wr,null),e(wr,Qpr),e(wr,$c),e($c,Hpr),e($c,c_e),e(c_e,Upr),e($c,Jpr),e($c,m_e),e(m_e,Ypr),e($c,Kpr),e(wr,Zpr),e(wr,C0),e(C0,e_r),e(C0,f_e),e(f_e,o_r),e(C0,r_r),e(wr,t_r),e(wr,vt),g(M0,vt,null),e(vt,a_r),e(vt,g_e),e(g_e,s_r),e(vt,n_r),e(vt,Ic),e(Ic,l_r),e(Ic,h_e),e(h_e,i_r),e(Ic,d_r),e(Ic,u_e),e(u_e,c_r),e(Ic,m_r),e(vt,f_r),e(vt,p_e),e(p_e,g_r),e(vt,h_r),g(E0,vt,null),e(wr,u_r),e(wr,Eo),g(y0,Eo,null),e(Eo,p_r),e(Eo,__e),e(__e,__r),e(Eo,b_r),e(Eo,Ts),e(Ts,v_r),e(Ts,b_e),e(b_e,T_r),e(Ts,F_r),e(Ts,v_e),e(v_e,C_r),e(Ts,M_r),e(Ts,T_e),e(T_e,E_r),e(Ts,y_r),e(Eo,w_r),e(Eo,F_e),e(F_e,MM),e(MM,C_e),e(C_e,A_r),e(MM,L_r),e(MM,XO),e(XO,B_r),e(MM,x_r),e(Eo,k_r),e(Eo,M_e),e(M_e,R_r),e(Eo,S_r),g(w0,Eo,null),b(c,KBe,_),b(c,Dc,_),e(Dc,EM),e(EM,E_e),g(A0,E_e,null),e(Dc,P_r),e(Dc,y_e),e(y_e,$_r),b(c,ZBe,_),b(c,Ar,_),g(L0,Ar,null),e(Ar,I_r),e(Ar,jc),e(jc,D_r),e(jc,w_e),e(w_e,j_r),e(jc,N_r),e(jc,A_e),e(A_e,q_r),e(jc,G_r),e(Ar,O_r),e(Ar,B0),e(B0,X_r),e(B0,L_e),e(L_e,V_r),e(B0,z_r),e(Ar,W_r),e(Ar,Tt),g(x0,Tt,null),e(Tt,Q_r),e(Tt,B_e),e(B_e,H_r),e(Tt,U_r),e(Tt,Nc),e(Nc,J_r),e(Nc,x_e),e(x_e,Y_r),e(Nc,K_r),e(Nc,k_e),e(k_e,Z_r),e(Nc,ebr),e(Tt,obr),e(Tt,R_e),e(R_e,rbr),e(Tt,tbr),g(k0,Tt,null),e(Ar,abr),e(Ar,yo),g(R0,yo,null),e(yo,sbr),e(yo,S_e),e(S_e,nbr),e(yo,lbr),e(yo,Fs),e(Fs,ibr),e(Fs,P_e),e(P_e,dbr),e(Fs,cbr),e(Fs,$_e),e($_e,mbr),e(Fs,fbr),e(Fs,I_e),e(I_e,gbr),e(Fs,hbr),e(yo,ubr),e(yo,D_e),e(D_e,yM),e(yM,j_e),e(j_e,pbr),e(yM,_br),e(yM,VO),e(VO,bbr),e(yM,vbr),e(yo,Tbr),e(yo,N_e),e(N_e,Fbr),e(yo,Cbr),g(S0,yo,null),b(c,exe,_),b(c,qc,_),e(qc,wM),e(wM,q_e),g(P0,q_e,null),e(qc,Mbr),e(qc,G_e),e(G_e,Ebr),b(c,oxe,_),b(c,Lr,_),g($0,Lr,null),e(Lr,ybr),e(Lr,Gc),e(Gc,wbr),e(Gc,O_e),e(O_e,Abr),e(Gc,Lbr),e(Gc,X_e),e(X_e,Bbr),e(Gc,xbr),e(Lr,kbr),e(Lr,I0),e(I0,Rbr),e(I0,V_e),e(V_e,Sbr),e(I0,Pbr),e(Lr,$br),e(Lr,Ft),g(D0,Ft,null),e(Ft,Ibr),e(Ft,z_e),e(z_e,Dbr),e(Ft,jbr),e(Ft,Oc),e(Oc,Nbr),e(Oc,W_e),e(W_e,qbr),e(Oc,Gbr),e(Oc,Q_e),e(Q_e,Obr),e(Oc,Xbr),e(Ft,Vbr),e(Ft,H_e),e(H_e,zbr),e(Ft,Wbr),g(j0,Ft,null),e(Lr,Qbr),e(Lr,wo),g(N0,wo,null),e(wo,Hbr),e(wo,U_e),e(U_e,Ubr),e(wo,Jbr),e(wo,Cs),e(Cs,Ybr),e(Cs,J_e),e(J_e,Kbr),e(Cs,Zbr),e(Cs,Y_e),e(Y_e,e2r),e(Cs,o2r),e(Cs,K_e),e(K_e,r2r),e(Cs,t2r),e(wo,a2r),e(wo,z),e(z,AM),e(AM,Z_e),e(Z_e,s2r),e(AM,n2r),e(AM,zO),e(zO,l2r),e(AM,i2r),e(z,d2r),e(z,LM),e(LM,ebe),e(ebe,c2r),e(LM,m2r),e(LM,WO),e(WO,f2r),e(LM,g2r),e(z,h2r),e(z,BM),e(BM,obe),e(obe,u2r),e(BM,p2r),e(BM,QO),e(QO,_2r),e(BM,b2r),e(z,v2r),e(z,xM),e(xM,rbe),e(rbe,T2r),e(xM,F2r),e(xM,HO),e(HO,C2r),e(xM,M2r),e(z,E2r),e(z,kM),e(kM,tbe),e(tbe,y2r),e(kM,w2r),e(kM,UO),e(UO,A2r),e(kM,L2r),e(z,B2r),e(z,RM),e(RM,abe),e(abe,x2r),e(RM,k2r),e(RM,JO),e(JO,R2r),e(RM,S2r),e(z,P2r),e(z,SM),e(SM,sbe),e(sbe,$2r),e(SM,I2r),e(SM,YO),e(YO,D2r),e(SM,j2r),e(z,N2r),e(z,PM),e(PM,nbe),e(nbe,q2r),e(PM,G2r),e(PM,KO),e(KO,O2r),e(PM,X2r),e(z,V2r),e(z,$M),e($M,lbe),e(lbe,z2r),e($M,W2r),e($M,ZO),e(ZO,Q2r),e($M,H2r),e(z,U2r),e(z,IM),e(IM,ibe),e(ibe,J2r),e(IM,Y2r),e(IM,eX),e(eX,K2r),e(IM,Z2r),e(z,evr),e(z,DM),e(DM,dbe),e(dbe,ovr),e(DM,rvr),e(DM,oX),e(oX,tvr),e(DM,avr),e(z,svr),e(z,jM),e(jM,cbe),e(cbe,nvr),e(jM,lvr),e(jM,rX),e(rX,ivr),e(jM,dvr),e(z,cvr),e(z,NM),e(NM,mbe),e(mbe,mvr),e(NM,fvr),e(NM,tX),e(tX,gvr),e(NM,hvr),e(z,uvr),e(z,qM),e(qM,fbe),e(fbe,pvr),e(qM,_vr),e(qM,aX),e(aX,bvr),e(qM,vvr),e(z,Tvr),e(z,GM),e(GM,gbe),e(gbe,Fvr),e(GM,Cvr),e(GM,sX),e(sX,Mvr),e(GM,Evr),e(z,yvr),e(z,OM),e(OM,hbe),e(hbe,wvr),e(OM,Avr),e(OM,nX),e(nX,Lvr),e(OM,Bvr),e(z,xvr),e(z,XM),e(XM,ube),e(ube,kvr),e(XM,Rvr),e(XM,lX),e(lX,Svr),e(XM,Pvr),e(z,$vr),e(z,VM),e(VM,pbe),e(pbe,Ivr),e(VM,Dvr),e(VM,iX),e(iX,jvr),e(VM,Nvr),e(z,qvr),e(z,zM),e(zM,_be),e(_be,Gvr),e(zM,Ovr),e(zM,dX),e(dX,Xvr),e(zM,Vvr),e(z,zvr),e(z,WM),e(WM,bbe),e(bbe,Wvr),e(WM,Qvr),e(WM,cX),e(cX,Hvr),e(WM,Uvr),e(z,Jvr),e(z,QM),e(QM,vbe),e(vbe,Yvr),e(QM,Kvr),e(QM,mX),e(mX,Zvr),e(QM,eTr),e(z,oTr),e(z,HM),e(HM,Tbe),e(Tbe,rTr),e(HM,tTr),e(HM,fX),e(fX,aTr),e(HM,sTr),e(z,nTr),e(z,UM),e(UM,Fbe),e(Fbe,lTr),e(UM,iTr),e(UM,gX),e(gX,dTr),e(UM,cTr),e(z,mTr),e(z,JM),e(JM,Cbe),e(Cbe,fTr),e(JM,gTr),e(JM,hX),e(hX,hTr),e(JM,uTr),e(wo,pTr),e(wo,Mbe),e(Mbe,_Tr),e(wo,bTr),g(q0,wo,null),b(c,rxe,_),b(c,Xc,_),e(Xc,YM),e(YM,Ebe),g(G0,Ebe,null),e(Xc,vTr),e(Xc,ybe),e(ybe,TTr),b(c,txe,_),b(c,Br,_),g(O0,Br,null),e(Br,FTr),e(Br,Vc),e(Vc,CTr),e(Vc,wbe),e(wbe,MTr),e(Vc,ETr),e(Vc,Abe),e(Abe,yTr),e(Vc,wTr),e(Br,ATr),e(Br,X0),e(X0,LTr),e(X0,Lbe),e(Lbe,BTr),e(X0,xTr),e(Br,kTr),e(Br,Ct),g(V0,Ct,null),e(Ct,RTr),e(Ct,Bbe),e(Bbe,STr),e(Ct,PTr),e(Ct,zc),e(zc,$Tr),e(zc,xbe),e(xbe,ITr),e(zc,DTr),e(zc,kbe),e(kbe,jTr),e(zc,NTr),e(Ct,qTr),e(Ct,Rbe),e(Rbe,GTr),e(Ct,OTr),g(z0,Ct,null),e(Br,XTr),e(Br,Ao),g(W0,Ao,null),e(Ao,VTr),e(Ao,Sbe),e(Sbe,zTr),e(Ao,WTr),e(Ao,Ms),e(Ms,QTr),e(Ms,Pbe),e(Pbe,HTr),e(Ms,UTr),e(Ms,$be),e($be,JTr),e(Ms,YTr),e(Ms,Ibe),e(Ibe,KTr),e(Ms,ZTr),e(Ao,e1r),e(Ao,Es),e(Es,KM),e(KM,Dbe),e(Dbe,o1r),e(KM,r1r),e(KM,uX),e(uX,t1r),e(KM,a1r),e(Es,s1r),e(Es,ZM),e(ZM,jbe),e(jbe,n1r),e(ZM,l1r),e(ZM,pX),e(pX,i1r),e(ZM,d1r),e(Es,c1r),e(Es,eE),e(eE,Nbe),e(Nbe,m1r),e(eE,f1r),e(eE,_X),e(_X,g1r),e(eE,h1r),e(Es,u1r),e(Es,oE),e(oE,qbe),e(qbe,p1r),e(oE,_1r),e(oE,bX),e(bX,b1r),e(oE,v1r),e(Ao,T1r),e(Ao,Gbe),e(Gbe,F1r),e(Ao,C1r),g(Q0,Ao,null),b(c,axe,_),b(c,Wc,_),e(Wc,rE),e(rE,Obe),g(H0,Obe,null),e(Wc,M1r),e(Wc,Xbe),e(Xbe,E1r),b(c,sxe,_),b(c,xr,_),g(U0,xr,null),e(xr,y1r),e(xr,Qc),e(Qc,w1r),e(Qc,Vbe),e(Vbe,A1r),e(Qc,L1r),e(Qc,zbe),e(zbe,B1r),e(Qc,x1r),e(xr,k1r),e(xr,J0),e(J0,R1r),e(J0,Wbe),e(Wbe,S1r),e(J0,P1r),e(xr,$1r),e(xr,Mt),g(Y0,Mt,null),e(Mt,I1r),e(Mt,Qbe),e(Qbe,D1r),e(Mt,j1r),e(Mt,Hc),e(Hc,N1r),e(Hc,Hbe),e(Hbe,q1r),e(Hc,G1r),e(Hc,Ube),e(Ube,O1r),e(Hc,X1r),e(Mt,V1r),e(Mt,Jbe),e(Jbe,z1r),e(Mt,W1r),g(K0,Mt,null),e(xr,Q1r),e(xr,Lo),g(Z0,Lo,null),e(Lo,H1r),e(Lo,Ybe),e(Ybe,U1r),e(Lo,J1r),e(Lo,ys),e(ys,Y1r),e(ys,Kbe),e(Kbe,K1r),e(ys,Z1r),e(ys,Zbe),e(Zbe,eFr),e(ys,oFr),e(ys,e2e),e(e2e,rFr),e(ys,tFr),e(Lo,aFr),e(Lo,me),e(me,tE),e(tE,o2e),e(o2e,sFr),e(tE,nFr),e(tE,vX),e(vX,lFr),e(tE,iFr),e(me,dFr),e(me,aE),e(aE,r2e),e(r2e,cFr),e(aE,mFr),e(aE,TX),e(TX,fFr),e(aE,gFr),e(me,hFr),e(me,sE),e(sE,t2e),e(t2e,uFr),e(sE,pFr),e(sE,FX),e(FX,_Fr),e(sE,bFr),e(me,vFr),e(me,nE),e(nE,a2e),e(a2e,TFr),e(nE,FFr),e(nE,CX),e(CX,CFr),e(nE,MFr),e(me,EFr),e(me,lE),e(lE,s2e),e(s2e,yFr),e(lE,wFr),e(lE,MX),e(MX,AFr),e(lE,LFr),e(me,BFr),e(me,iE),e(iE,n2e),e(n2e,xFr),e(iE,kFr),e(iE,EX),e(EX,RFr),e(iE,SFr),e(me,PFr),e(me,dE),e(dE,l2e),e(l2e,$Fr),e(dE,IFr),e(dE,yX),e(yX,DFr),e(dE,jFr),e(me,NFr),e(me,cE),e(cE,i2e),e(i2e,qFr),e(cE,GFr),e(cE,wX),e(wX,OFr),e(cE,XFr),e(me,VFr),e(me,mE),e(mE,d2e),e(d2e,zFr),e(mE,WFr),e(mE,AX),e(AX,QFr),e(mE,HFr),e(me,UFr),e(me,fE),e(fE,c2e),e(c2e,JFr),e(fE,YFr),e(fE,LX),e(LX,KFr),e(fE,ZFr),e(me,eCr),e(me,gE),e(gE,m2e),e(m2e,oCr),e(gE,rCr),e(gE,BX),e(BX,tCr),e(gE,aCr),e(Lo,sCr),e(Lo,f2e),e(f2e,nCr),e(Lo,lCr),g(eL,Lo,null),b(c,nxe,_),b(c,Uc,_),e(Uc,hE),e(hE,g2e),g(oL,g2e,null),e(Uc,iCr),e(Uc,h2e),e(h2e,dCr),b(c,lxe,_),b(c,kr,_),g(rL,kr,null),e(kr,cCr),e(kr,Jc),e(Jc,mCr),e(Jc,u2e),e(u2e,fCr),e(Jc,gCr),e(Jc,p2e),e(p2e,hCr),e(Jc,uCr),e(kr,pCr),e(kr,tL),e(tL,_Cr),e(tL,_2e),e(_2e,bCr),e(tL,vCr),e(kr,TCr),e(kr,Et),g(aL,Et,null),e(Et,FCr),e(Et,b2e),e(b2e,CCr),e(Et,MCr),e(Et,Yc),e(Yc,ECr),e(Yc,v2e),e(v2e,yCr),e(Yc,wCr),e(Yc,T2e),e(T2e,ACr),e(Yc,LCr),e(Et,BCr),e(Et,F2e),e(F2e,xCr),e(Et,kCr),g(sL,Et,null),e(kr,RCr),e(kr,Bo),g(nL,Bo,null),e(Bo,SCr),e(Bo,C2e),e(C2e,PCr),e(Bo,$Cr),e(Bo,ws),e(ws,ICr),e(ws,M2e),e(M2e,DCr),e(ws,jCr),e(ws,E2e),e(E2e,NCr),e(ws,qCr),e(ws,y2e),e(y2e,GCr),e(ws,OCr),e(Bo,XCr),e(Bo,ve),e(ve,uE),e(uE,w2e),e(w2e,VCr),e(uE,zCr),e(uE,xX),e(xX,WCr),e(uE,QCr),e(ve,HCr),e(ve,pE),e(pE,A2e),e(A2e,UCr),e(pE,JCr),e(pE,kX),e(kX,YCr),e(pE,KCr),e(ve,ZCr),e(ve,_E),e(_E,L2e),e(L2e,e4r),e(_E,o4r),e(_E,RX),e(RX,r4r),e(_E,t4r),e(ve,a4r),e(ve,bE),e(bE,B2e),e(B2e,s4r),e(bE,n4r),e(bE,SX),e(SX,l4r),e(bE,i4r),e(ve,d4r),e(ve,vE),e(vE,x2e),e(x2e,c4r),e(vE,m4r),e(vE,PX),e(PX,f4r),e(vE,g4r),e(ve,h4r),e(ve,TE),e(TE,k2e),e(k2e,u4r),e(TE,p4r),e(TE,$X),e($X,_4r),e(TE,b4r),e(ve,v4r),e(ve,FE),e(FE,R2e),e(R2e,T4r),e(FE,F4r),e(FE,IX),e(IX,C4r),e(FE,M4r),e(ve,E4r),e(ve,CE),e(CE,S2e),e(S2e,y4r),e(CE,w4r),e(CE,DX),e(DX,A4r),e(CE,L4r),e(ve,B4r),e(ve,ME),e(ME,P2e),e(P2e,x4r),e(ME,k4r),e(ME,jX),e(jX,R4r),e(ME,S4r),e(Bo,P4r),e(Bo,$2e),e($2e,$4r),e(Bo,I4r),g(lL,Bo,null),b(c,ixe,_),b(c,Kc,_),e(Kc,EE),e(EE,I2e),g(iL,I2e,null),e(Kc,D4r),e(Kc,D2e),e(D2e,j4r),b(c,dxe,_),b(c,Rr,_),g(dL,Rr,null),e(Rr,N4r),e(Rr,Zc),e(Zc,q4r),e(Zc,j2e),e(j2e,G4r),e(Zc,O4r),e(Zc,N2e),e(N2e,X4r),e(Zc,V4r),e(Rr,z4r),e(Rr,cL),e(cL,W4r),e(cL,q2e),e(q2e,Q4r),e(cL,H4r),e(Rr,U4r),e(Rr,yt),g(mL,yt,null),e(yt,J4r),e(yt,G2e),e(G2e,Y4r),e(yt,K4r),e(yt,em),e(em,Z4r),e(em,O2e),e(O2e,eMr),e(em,oMr),e(em,X2e),e(X2e,rMr),e(em,tMr),e(yt,aMr),e(yt,V2e),e(V2e,sMr),e(yt,nMr),g(fL,yt,null),e(Rr,lMr),e(Rr,xo),g(gL,xo,null),e(xo,iMr),e(xo,z2e),e(z2e,dMr),e(xo,cMr),e(xo,As),e(As,mMr),e(As,W2e),e(W2e,fMr),e(As,gMr),e(As,Q2e),e(Q2e,hMr),e(As,uMr),e(As,H2e),e(H2e,pMr),e(As,_Mr),e(xo,bMr),e(xo,Te),e(Te,yE),e(yE,U2e),e(U2e,vMr),e(yE,TMr),e(yE,NX),e(NX,FMr),e(yE,CMr),e(Te,MMr),e(Te,wE),e(wE,J2e),e(J2e,EMr),e(wE,yMr),e(wE,qX),e(qX,wMr),e(wE,AMr),e(Te,LMr),e(Te,AE),e(AE,Y2e),e(Y2e,BMr),e(AE,xMr),e(AE,GX),e(GX,kMr),e(AE,RMr),e(Te,SMr),e(Te,LE),e(LE,K2e),e(K2e,PMr),e(LE,$Mr),e(LE,OX),e(OX,IMr),e(LE,DMr),e(Te,jMr),e(Te,BE),e(BE,Z2e),e(Z2e,NMr),e(BE,qMr),e(BE,XX),e(XX,GMr),e(BE,OMr),e(Te,XMr),e(Te,xE),e(xE,eve),e(eve,VMr),e(xE,zMr),e(xE,VX),e(VX,WMr),e(xE,QMr),e(Te,HMr),e(Te,kE),e(kE,ove),e(ove,UMr),e(kE,JMr),e(kE,zX),e(zX,YMr),e(kE,KMr),e(Te,ZMr),e(Te,RE),e(RE,rve),e(rve,eEr),e(RE,oEr),e(RE,WX),e(WX,rEr),e(RE,tEr),e(Te,aEr),e(Te,SE),e(SE,tve),e(tve,sEr),e(SE,nEr),e(SE,QX),e(QX,lEr),e(SE,iEr),e(xo,dEr),e(xo,ave),e(ave,cEr),e(xo,mEr),g(hL,xo,null),b(c,cxe,_),b(c,om,_),e(om,PE),e(PE,sve),g(uL,sve,null),e(om,fEr),e(om,nve),e(nve,gEr),b(c,mxe,_),b(c,Sr,_),g(pL,Sr,null),e(Sr,hEr),e(Sr,rm),e(rm,uEr),e(rm,lve),e(lve,pEr),e(rm,_Er),e(rm,ive),e(ive,bEr),e(rm,vEr),e(Sr,TEr),e(Sr,_L),e(_L,FEr),e(_L,dve),e(dve,CEr),e(_L,MEr),e(Sr,EEr),e(Sr,wt),g(bL,wt,null),e(wt,yEr),e(wt,cve),e(cve,wEr),e(wt,AEr),e(wt,tm),e(tm,LEr),e(tm,mve),e(mve,BEr),e(tm,xEr),e(tm,fve),e(fve,kEr),e(tm,REr),e(wt,SEr),e(wt,gve),e(gve,PEr),e(wt,$Er),g(vL,wt,null),e(Sr,IEr),e(Sr,ko),g(TL,ko,null),e(ko,DEr),e(ko,hve),e(hve,jEr),e(ko,NEr),e(ko,Ls),e(Ls,qEr),e(Ls,uve),e(uve,GEr),e(Ls,OEr),e(Ls,pve),e(pve,XEr),e(Ls,VEr),e(Ls,_ve),e(_ve,zEr),e(Ls,WEr),e(ko,QEr),e(ko,Fe),e(Fe,$E),e($E,bve),e(bve,HEr),e($E,UEr),e($E,HX),e(HX,JEr),e($E,YEr),e(Fe,KEr),e(Fe,IE),e(IE,vve),e(vve,ZEr),e(IE,e3r),e(IE,UX),e(UX,o3r),e(IE,r3r),e(Fe,t3r),e(Fe,DE),e(DE,Tve),e(Tve,a3r),e(DE,s3r),e(DE,JX),e(JX,n3r),e(DE,l3r),e(Fe,i3r),e(Fe,jE),e(jE,Fve),e(Fve,d3r),e(jE,c3r),e(jE,YX),e(YX,m3r),e(jE,f3r),e(Fe,g3r),e(Fe,NE),e(NE,Cve),e(Cve,h3r),e(NE,u3r),e(NE,KX),e(KX,p3r),e(NE,_3r),e(Fe,b3r),e(Fe,qE),e(qE,Mve),e(Mve,v3r),e(qE,T3r),e(qE,ZX),e(ZX,F3r),e(qE,C3r),e(Fe,M3r),e(Fe,GE),e(GE,Eve),e(Eve,E3r),e(GE,y3r),e(GE,eV),e(eV,w3r),e(GE,A3r),e(Fe,L3r),e(Fe,OE),e(OE,yve),e(yve,B3r),e(OE,x3r),e(OE,oV),e(oV,k3r),e(OE,R3r),e(Fe,S3r),e(Fe,XE),e(XE,wve),e(wve,P3r),e(XE,$3r),e(XE,rV),e(rV,I3r),e(XE,D3r),e(ko,j3r),e(ko,Ave),e(Ave,N3r),e(ko,q3r),g(FL,ko,null),b(c,fxe,_),b(c,am,_),e(am,VE),e(VE,Lve),g(CL,Lve,null),e(am,G3r),e(am,Bve),e(Bve,O3r),b(c,gxe,_),b(c,Pr,_),g(ML,Pr,null),e(Pr,X3r),e(Pr,sm),e(sm,V3r),e(sm,xve),e(xve,z3r),e(sm,W3r),e(sm,kve),e(kve,Q3r),e(sm,H3r),e(Pr,U3r),e(Pr,EL),e(EL,J3r),e(EL,Rve),e(Rve,Y3r),e(EL,K3r),e(Pr,Z3r),e(Pr,At),g(yL,At,null),e(At,e5r),e(At,Sve),e(Sve,o5r),e(At,r5r),e(At,nm),e(nm,t5r),e(nm,Pve),e(Pve,a5r),e(nm,s5r),e(nm,$ve),e($ve,n5r),e(nm,l5r),e(At,i5r),e(At,Ive),e(Ive,d5r),e(At,c5r),g(wL,At,null),e(Pr,m5r),e(Pr,Ro),g(AL,Ro,null),e(Ro,f5r),e(Ro,Dve),e(Dve,g5r),e(Ro,h5r),e(Ro,Bs),e(Bs,u5r),e(Bs,jve),e(jve,p5r),e(Bs,_5r),e(Bs,Nve),e(Nve,b5r),e(Bs,v5r),e(Bs,qve),e(qve,T5r),e(Bs,F5r),e(Ro,C5r),e(Ro,Ce),e(Ce,zE),e(zE,Gve),e(Gve,M5r),e(zE,E5r),e(zE,tV),e(tV,y5r),e(zE,w5r),e(Ce,A5r),e(Ce,WE),e(WE,Ove),e(Ove,L5r),e(WE,B5r),e(WE,aV),e(aV,x5r),e(WE,k5r),e(Ce,R5r),e(Ce,QE),e(QE,Xve),e(Xve,S5r),e(QE,P5r),e(QE,sV),e(sV,$5r),e(QE,I5r),e(Ce,D5r),e(Ce,HE),e(HE,Vve),e(Vve,j5r),e(HE,N5r),e(HE,nV),e(nV,q5r),e(HE,G5r),e(Ce,O5r),e(Ce,UE),e(UE,zve),e(zve,X5r),e(UE,V5r),e(UE,lV),e(lV,z5r),e(UE,W5r),e(Ce,Q5r),e(Ce,JE),e(JE,Wve),e(Wve,H5r),e(JE,U5r),e(JE,iV),e(iV,J5r),e(JE,Y5r),e(Ce,K5r),e(Ce,YE),e(YE,Qve),e(Qve,Z5r),e(YE,eyr),e(YE,dV),e(dV,oyr),e(YE,ryr),e(Ce,tyr),e(Ce,KE),e(KE,Hve),e(Hve,ayr),e(KE,syr),e(KE,cV),e(cV,nyr),e(KE,lyr),e(Ce,iyr),e(Ce,ZE),e(ZE,Uve),e(Uve,dyr),e(ZE,cyr),e(ZE,mV),e(mV,myr),e(ZE,fyr),e(Ro,gyr),e(Ro,Jve),e(Jve,hyr),e(Ro,uyr),g(LL,Ro,null),b(c,hxe,_),b(c,lm,_),e(lm,e3),e(e3,Yve),g(BL,Yve,null),e(lm,pyr),e(lm,Kve),e(Kve,_yr),b(c,uxe,_),b(c,$r,_),g(xL,$r,null),e($r,byr),e($r,im),e(im,vyr),e(im,Zve),e(Zve,Tyr),e(im,Fyr),e(im,eTe),e(eTe,Cyr),e(im,Myr),e($r,Eyr),e($r,kL),e(kL,yyr),e(kL,oTe),e(oTe,wyr),e(kL,Ayr),e($r,Lyr),e($r,Lt),g(RL,Lt,null),e(Lt,Byr),e(Lt,rTe),e(rTe,xyr),e(Lt,kyr),e(Lt,dm),e(dm,Ryr),e(dm,tTe),e(tTe,Syr),e(dm,Pyr),e(dm,aTe),e(aTe,$yr),e(dm,Iyr),e(Lt,Dyr),e(Lt,sTe),e(sTe,jyr),e(Lt,Nyr),g(SL,Lt,null),e($r,qyr),e($r,So),g(PL,So,null),e(So,Gyr),e(So,nTe),e(nTe,Oyr),e(So,Xyr),e(So,xs),e(xs,Vyr),e(xs,lTe),e(lTe,zyr),e(xs,Wyr),e(xs,iTe),e(iTe,Qyr),e(xs,Hyr),e(xs,dTe),e(dTe,Uyr),e(xs,Jyr),e(So,Yyr),e(So,no),e(no,o3),e(o3,cTe),e(cTe,Kyr),e(o3,Zyr),e(o3,fV),e(fV,ewr),e(o3,owr),e(no,rwr),e(no,r3),e(r3,mTe),e(mTe,twr),e(r3,awr),e(r3,gV),e(gV,swr),e(r3,nwr),e(no,lwr),e(no,t3),e(t3,fTe),e(fTe,iwr),e(t3,dwr),e(t3,hV),e(hV,cwr),e(t3,mwr),e(no,fwr),e(no,a3),e(a3,gTe),e(gTe,gwr),e(a3,hwr),e(a3,uV),e(uV,uwr),e(a3,pwr),e(no,_wr),e(no,s3),e(s3,hTe),e(hTe,bwr),e(s3,vwr),e(s3,pV),e(pV,Twr),e(s3,Fwr),e(no,Cwr),e(no,n3),e(n3,uTe),e(uTe,Mwr),e(n3,Ewr),e(n3,_V),e(_V,ywr),e(n3,wwr),e(no,Awr),e(no,l3),e(l3,pTe),e(pTe,Lwr),e(l3,Bwr),e(l3,bV),e(bV,xwr),e(l3,kwr),e(So,Rwr),e(So,_Te),e(_Te,Swr),e(So,Pwr),g($L,So,null),b(c,pxe,_),b(c,cm,_),e(cm,i3),e(i3,bTe),g(IL,bTe,null),e(cm,$wr),e(cm,vTe),e(vTe,Iwr),b(c,_xe,_),b(c,Ir,_),g(DL,Ir,null),e(Ir,Dwr),e(Ir,mm),e(mm,jwr),e(mm,TTe),e(TTe,Nwr),e(mm,qwr),e(mm,FTe),e(FTe,Gwr),e(mm,Owr),e(Ir,Xwr),e(Ir,jL),e(jL,Vwr),e(jL,CTe),e(CTe,zwr),e(jL,Wwr),e(Ir,Qwr),e(Ir,Bt),g(NL,Bt,null),e(Bt,Hwr),e(Bt,MTe),e(MTe,Uwr),e(Bt,Jwr),e(Bt,fm),e(fm,Ywr),e(fm,ETe),e(ETe,Kwr),e(fm,Zwr),e(fm,yTe),e(yTe,e6r),e(fm,o6r),e(Bt,r6r),e(Bt,wTe),e(wTe,t6r),e(Bt,a6r),g(qL,Bt,null),e(Ir,s6r),e(Ir,Po),g(GL,Po,null),e(Po,n6r),e(Po,ATe),e(ATe,l6r),e(Po,i6r),e(Po,ks),e(ks,d6r),e(ks,LTe),e(LTe,c6r),e(ks,m6r),e(ks,BTe),e(BTe,f6r),e(ks,g6r),e(ks,xTe),e(xTe,h6r),e(ks,u6r),e(Po,p6r),e(Po,lo),e(lo,d3),e(d3,kTe),e(kTe,_6r),e(d3,b6r),e(d3,vV),e(vV,v6r),e(d3,T6r),e(lo,F6r),e(lo,c3),e(c3,RTe),e(RTe,C6r),e(c3,M6r),e(c3,TV),e(TV,E6r),e(c3,y6r),e(lo,w6r),e(lo,m3),e(m3,STe),e(STe,A6r),e(m3,L6r),e(m3,FV),e(FV,B6r),e(m3,x6r),e(lo,k6r),e(lo,f3),e(f3,PTe),e(PTe,R6r),e(f3,S6r),e(f3,CV),e(CV,P6r),e(f3,$6r),e(lo,I6r),e(lo,g3),e(g3,$Te),e($Te,D6r),e(g3,j6r),e(g3,MV),e(MV,N6r),e(g3,q6r),e(lo,G6r),e(lo,h3),e(h3,ITe),e(ITe,O6r),e(h3,X6r),e(h3,EV),e(EV,V6r),e(h3,z6r),e(lo,W6r),e(lo,u3),e(u3,DTe),e(DTe,Q6r),e(u3,H6r),e(u3,yV),e(yV,U6r),e(u3,J6r),e(Po,Y6r),e(Po,jTe),e(jTe,K6r),e(Po,Z6r),g(OL,Po,null),b(c,bxe,_),b(c,gm,_),e(gm,p3),e(p3,NTe),g(XL,NTe,null),e(gm,eAr),e(gm,qTe),e(qTe,oAr),b(c,vxe,_),b(c,Dr,_),g(VL,Dr,null),e(Dr,rAr),e(Dr,hm),e(hm,tAr),e(hm,GTe),e(GTe,aAr),e(hm,sAr),e(hm,OTe),e(OTe,nAr),e(hm,lAr),e(Dr,iAr),e(Dr,zL),e(zL,dAr),e(zL,XTe),e(XTe,cAr),e(zL,mAr),e(Dr,fAr),e(Dr,xt),g(WL,xt,null),e(xt,gAr),e(xt,VTe),e(VTe,hAr),e(xt,uAr),e(xt,um),e(um,pAr),e(um,zTe),e(zTe,_Ar),e(um,bAr),e(um,WTe),e(WTe,vAr),e(um,TAr),e(xt,FAr),e(xt,QTe),e(QTe,CAr),e(xt,MAr),g(QL,xt,null),e(Dr,EAr),e(Dr,$o),g(HL,$o,null),e($o,yAr),e($o,HTe),e(HTe,wAr),e($o,AAr),e($o,Rs),e(Rs,LAr),e(Rs,UTe),e(UTe,BAr),e(Rs,xAr),e(Rs,JTe),e(JTe,kAr),e(Rs,RAr),e(Rs,YTe),e(YTe,SAr),e(Rs,PAr),e($o,$Ar),e($o,KTe),e(KTe,_3),e(_3,ZTe),e(ZTe,IAr),e(_3,DAr),e(_3,wV),e(wV,jAr),e(_3,NAr),e($o,qAr),e($o,e1e),e(e1e,GAr),e($o,OAr),g(UL,$o,null),b(c,Txe,_),b(c,pm,_),e(pm,b3),e(b3,o1e),g(JL,o1e,null),e(pm,XAr),e(pm,r1e),e(r1e,VAr),b(c,Fxe,_),b(c,jr,_),g(YL,jr,null),e(jr,zAr),e(jr,_m),e(_m,WAr),e(_m,t1e),e(t1e,QAr),e(_m,HAr),e(_m,a1e),e(a1e,UAr),e(_m,JAr),e(jr,YAr),e(jr,KL),e(KL,KAr),e(KL,s1e),e(s1e,ZAr),e(KL,e0r),e(jr,o0r),e(jr,kt),g(ZL,kt,null),e(kt,r0r),e(kt,n1e),e(n1e,t0r),e(kt,a0r),e(kt,bm),e(bm,s0r),e(bm,l1e),e(l1e,n0r),e(bm,l0r),e(bm,i1e),e(i1e,i0r),e(bm,d0r),e(kt,c0r),e(kt,d1e),e(d1e,m0r),e(kt,f0r),g(e8,kt,null),e(jr,g0r),e(jr,Io),g(o8,Io,null),e(Io,h0r),e(Io,c1e),e(c1e,u0r),e(Io,p0r),e(Io,Ss),e(Ss,_0r),e(Ss,m1e),e(m1e,b0r),e(Ss,v0r),e(Ss,f1e),e(f1e,T0r),e(Ss,F0r),e(Ss,g1e),e(g1e,C0r),e(Ss,M0r),e(Io,E0r),e(Io,r8),e(r8,v3),e(v3,h1e),e(h1e,y0r),e(v3,w0r),e(v3,AV),e(AV,A0r),e(v3,L0r),e(r8,B0r),e(r8,T3),e(T3,u1e),e(u1e,x0r),e(T3,k0r),e(T3,LV),e(LV,R0r),e(T3,S0r),e(Io,P0r),e(Io,p1e),e(p1e,$0r),e(Io,I0r),g(t8,Io,null),b(c,Cxe,_),b(c,vm,_),e(vm,F3),e(F3,_1e),g(a8,_1e,null),e(vm,D0r),e(vm,b1e),e(b1e,j0r),b(c,Mxe,_),b(c,Nr,_),g(s8,Nr,null),e(Nr,N0r),e(Nr,Tm),e(Tm,q0r),e(Tm,v1e),e(v1e,G0r),e(Tm,O0r),e(Tm,T1e),e(T1e,X0r),e(Tm,V0r),e(Nr,z0r),e(Nr,n8),e(n8,W0r),e(n8,F1e),e(F1e,Q0r),e(n8,H0r),e(Nr,U0r),e(Nr,Rt),g(l8,Rt,null),e(Rt,J0r),e(Rt,C1e),e(C1e,Y0r),e(Rt,K0r),e(Rt,Fm),e(Fm,Z0r),e(Fm,M1e),e(M1e,eLr),e(Fm,oLr),e(Fm,E1e),e(E1e,rLr),e(Fm,tLr),e(Rt,aLr),e(Rt,y1e),e(y1e,sLr),e(Rt,nLr),g(i8,Rt,null),e(Nr,lLr),e(Nr,Do),g(d8,Do,null),e(Do,iLr),e(Do,w1e),e(w1e,dLr),e(Do,cLr),e(Do,Ps),e(Ps,mLr),e(Ps,A1e),e(A1e,fLr),e(Ps,gLr),e(Ps,L1e),e(L1e,hLr),e(Ps,uLr),e(Ps,B1e),e(B1e,pLr),e(Ps,_Lr),e(Do,bLr),e(Do,x1e),e(x1e,C3),e(C3,k1e),e(k1e,vLr),e(C3,TLr),e(C3,BV),e(BV,FLr),e(C3,CLr),e(Do,MLr),e(Do,R1e),e(R1e,ELr),e(Do,yLr),g(c8,Do,null),Exe=!0},p(c,[_]){const m8={};_&2&&(m8.$$scope={dirty:_,ctx:c}),Lm.$set(m8);const S1e={};_&2&&(S1e.$$scope={dirty:_,ctx:c}),mh.$set(S1e);const P1e={};_&2&&(P1e.$$scope={dirty:_,ctx:c}),Ch.$set(P1e)},i(c){Exe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(Lm.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(N5.$$.fragment,c),h(q5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(W5.$$.fragment,c),h(mh.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Z5.$$.fragment,c),h(Ch.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(sy.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(fw.$$.fragment,c),h(hw.$$.fragment,c),h(uw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(s6.$$.fragment,c),h(n6.$$.fragment,c),h(l6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(N0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(mL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(DL.$$.fragment,c),h(NL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),Exe=!0)},o(c){u(ce.$$.fragment,c),u($a.$$.fragment,c),u(w5.$$.fragment,c),u(A5.$$.fragment,c),u(Lm.$$.fragment,c),u(L5.$$.fragment,c),u(B5.$$.fragment,c),u(R5.$$.fragment,c),u(S5.$$.fragment,c),u(P5.$$.fragment,c),u($5.$$.fragment,c),u(I5.$$.fragment,c),u(N5.$$.fragment,c),u(q5.$$.fragment,c),u(G5.$$.fragment,c),u(O5.$$.fragment,c),u(X5.$$.fragment,c),u(W5.$$.fragment,c),u(mh.$$.fragment,c),u(Q5.$$.fragment,c),u(H5.$$.fragment,c),u(U5.$$.fragment,c),u(J5.$$.fragment,c),u(Z5.$$.fragment,c),u(Ch.$$.fragment,c),u(ey.$$.fragment,c),u(oy.$$.fragment,c),u(ry.$$.fragment,c),u(ty.$$.fragment,c),u(sy.$$.fragment,c),u(ny.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(fy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(vy.$$.fragment,c),u(Ty.$$.fragment,c),u(Fy.$$.fragment,c),u(Cy.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(Ly.$$.fragment,c),u(By.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Sy.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(Dy.$$.fragment,c),u(jy.$$.fragment,c),u(qy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Xy.$$.fragment,c),u(Vy.$$.fragment,c),u(zy.$$.fragment,c),u(Qy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(ew.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(sw.$$.fragment,c),u(lw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(mw.$$.fragment,c),u(fw.$$.fragment,c),u(hw.$$.fragment,c),u(uw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(vw.$$.fragment,c),u(Fw.$$.fragment,c),u(Cw.$$.fragment,c),u(Mw.$$.fragment,c),u(Ew.$$.fragment,c),u(yw.$$.fragment,c),u(ww.$$.fragment,c),u(Lw.$$.fragment,c),u(Bw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Rw.$$.fragment,c),u(Sw.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(Dw.$$.fragment,c),u(jw.$$.fragment,c),u(Nw.$$.fragment,c),u(qw.$$.fragment,c),u(Ow.$$.fragment,c),u(Xw.$$.fragment,c),u(Vw.$$.fragment,c),u(zw.$$.fragment,c),u(Ww.$$.fragment,c),u(Qw.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(a6.$$.fragment,c),u(s6.$$.fragment,c),u(n6.$$.fragment,c),u(l6.$$.fragment,c),u(d6.$$.fragment,c),u(c6.$$.fragment,c),u(m6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(_6.$$.fragment,c),u(b6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(F6.$$.fragment,c),u(C6.$$.fragment,c),u(E6.$$.fragment,c),u(y6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(L6.$$.fragment,c),u(B6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(S6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(j6.$$.fragment,c),u(N6.$$.fragment,c),u(q6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(X6.$$.fragment,c),u(z6.$$.fragment,c),u(W6.$$.fragment,c),u(Q6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(Z6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(TA.$$.fragment,c),u(FA.$$.fragment,c),u(CA.$$.fragment,c),u(EA.$$.fragment,c),u(yA.$$.fragment,c),u(wA.$$.fragment,c),u(LA.$$.fragment,c),u(BA.$$.fragment,c),u(xA.$$.fragment,c),u(kA.$$.fragment,c),u(RA.$$.fragment,c),u(SA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(DA.$$.fragment,c),u(jA.$$.fragment,c),u(NA.$$.fragment,c),u(qA.$$.fragment,c),u(OA.$$.fragment,c),u(XA.$$.fragment,c),u(VA.$$.fragment,c),u(zA.$$.fragment,c),u(WA.$$.fragment,c),u(QA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(s0.$$.fragment,c),u(n0.$$.fragment,c),u(l0.$$.fragment,c),u(d0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(h0.$$.fragment,c),u(p0.$$.fragment,c),u(_0.$$.fragment,c),u(b0.$$.fragment,c),u(v0.$$.fragment,c),u(T0.$$.fragment,c),u(F0.$$.fragment,c),u(M0.$$.fragment,c),u(E0.$$.fragment,c),u(y0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(L0.$$.fragment,c),u(x0.$$.fragment,c),u(k0.$$.fragment,c),u(R0.$$.fragment,c),u(S0.$$.fragment,c),u(P0.$$.fragment,c),u($0.$$.fragment,c),u(D0.$$.fragment,c),u(j0.$$.fragment,c),u(N0.$$.fragment,c),u(q0.$$.fragment,c),u(G0.$$.fragment,c),u(O0.$$.fragment,c),u(V0.$$.fragment,c),u(z0.$$.fragment,c),u(W0.$$.fragment,c),u(Q0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(aL.$$.fragment,c),u(sL.$$.fragment,c),u(nL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(mL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(bL.$$.fragment,c),u(vL.$$.fragment,c),u(TL.$$.fragment,c),u(FL.$$.fragment,c),u(CL.$$.fragment,c),u(ML.$$.fragment,c),u(yL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(LL.$$.fragment,c),u(BL.$$.fragment,c),u(xL.$$.fragment,c),u(RL.$$.fragment,c),u(SL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(DL.$$.fragment,c),u(NL.$$.fragment,c),u(qL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(XL.$$.fragment,c),u(VL.$$.fragment,c),u(WL.$$.fragment,c),u(QL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(ZL.$$.fragment,c),u(e8.$$.fragment,c),u(o8.$$.fragment,c),u(t8.$$.fragment,c),u(a8.$$.fragment,c),u(s8.$$.fragment,c),u(l8.$$.fragment,c),u(i8.$$.fragment,c),u(d8.$$.fragment,c),u(c8.$$.fragment,c),Exe=!1},d(c){t(J),c&&t(Be),c&&t(ie),p(ce),c&&t(Mm),c&&t(na),c&&t(ye),c&&t(io),c&&t(ym),p($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(y9e),c&&t($i),p(w5),c&&t(w9e),c&&t(Ns),c&&t(A9e),p(A5,c),c&&t(L9e),c&&t(f7),c&&t(B9e),p(Lm,c),c&&t(x9e),c&&t(Ii),p(L5),c&&t(k9e),c&&t(Xo),p(B5),p(R5),p(S5),p(P5),c&&t(R9e),c&&t(ji),p($5),c&&t(S9e),c&&t(Vo),p(I5),p(N5),p(q5),p(G5),c&&t(P9e),c&&t(Ni),p(O5),c&&t($9e),c&&t(zo),p(X5),p(W5),p(mh),p(Q5),p(H5),c&&t(I9e),c&&t(qi),p(U5),c&&t(D9e),c&&t(Wo),p(J5),p(Z5),p(Ch),p(ey),p(oy),c&&t(j9e),c&&t(Oi),p(ry),c&&t(N9e),c&&t(Qo),p(ty),p(sy),p(ny),p(ly),p(iy),c&&t(q9e),c&&t(zi),p(dy),c&&t(G9e),c&&t(Ho),p(cy),p(fy),p(gy),p(hy),p(uy),c&&t(O9e),c&&t(Hi),p(py),c&&t(X9e),c&&t(Uo),p(_y),p(vy),p(Ty),p(Fy),p(Cy),c&&t(V9e),c&&t(Yi),p(My),c&&t(z9e),c&&t(Jo),p(Ey),p(wy),p(Ay),p(Ly),p(By),c&&t(W9e),c&&t(ed),p(xy),c&&t(Q9e),c&&t(Yo),p(ky),p(Sy),p(Py),p($y),p(Iy),c&&t(H9e),c&&t(td),p(Dy),c&&t(U9e),c&&t(Ko),p(jy),p(qy),p(Gy),p(Oy),p(Xy),c&&t(J9e),c&&t(nd),p(Vy),c&&t(Y9e),c&&t(Zo),p(zy),p(Qy),p(Hy),p(Uy),p(Jy),c&&t(K9e),c&&t(dd),p(Yy),c&&t(Z9e),c&&t(er),p(Ky),p(ew),p(ow),p(rw),p(tw),c&&t(eBe),c&&t(fd),p(aw),c&&t(oBe),c&&t(or),p(sw),p(lw),p(iw),p(dw),p(cw),c&&t(rBe),c&&t(ud),p(mw),c&&t(tBe),c&&t(rr),p(fw),p(hw),p(uw),p(pw),p(_w),c&&t(aBe),c&&t(bd),p(bw),c&&t(sBe),c&&t(tr),p(vw),p(Fw),p(Cw),p(Mw),p(Ew),c&&t(nBe),c&&t(Fd),p(yw),c&&t(lBe),c&&t(ar),p(ww),p(Lw),p(Bw),p(xw),p(kw),c&&t(iBe),c&&t(Ed),p(Rw),c&&t(dBe),c&&t(sr),p(Sw),p($w),p(Iw),p(Dw),p(jw),c&&t(cBe),c&&t(Ad),p(Nw),c&&t(mBe),c&&t(nr),p(qw),p(Ow),p(Xw),p(Vw),p(zw),c&&t(fBe),c&&t(xd),p(Ww),c&&t(gBe),c&&t(lr),p(Qw),p(Uw),p(Jw),p(Yw),p(Kw),c&&t(hBe),c&&t(Sd),p(Zw),c&&t(uBe),c&&t(ir),p(e6),p(r6),p(t6),p(a6),p(s6),c&&t(pBe),c&&t(Id),p(n6),c&&t(_Be),c&&t(dr),p(l6),p(d6),p(c6),p(m6),p(g6),c&&t(bBe),c&&t(Nd),p(h6),c&&t(vBe),c&&t(cr),p(u6),p(_6),p(b6),p(v6),p(T6),c&&t(TBe),c&&t(Od),p(F6),c&&t(FBe),c&&t(mr),p(C6),p(E6),p(y6),p(w6),p(A6),c&&t(CBe),c&&t(Wd),p(L6),c&&t(MBe),c&&t(fr),p(B6),p(k6),p(R6),p(S6),p(P6),c&&t(EBe),c&&t(Ud),p($6),c&&t(yBe),c&&t(gr),p(I6),p(j6),p(N6),p(q6),p(G6),c&&t(wBe),c&&t(Kd),p(O6),c&&t(ABe),c&&t(hr),p(X6),p(z6),p(W6),p(Q6),p(U6),c&&t(LBe),c&&t(oc),p(J6),c&&t(BBe),c&&t(ur),p(Y6),p(Z6),p(eA),p(oA),p(rA),c&&t(xBe),c&&t(ac),p(tA),c&&t(kBe),c&&t(pr),p(aA),p(nA),p(lA),p(iA),p(dA),c&&t(RBe),c&&t(lc),p(cA),c&&t(SBe),c&&t(_r),p(mA),p(gA),p(hA),p(uA),p(pA),c&&t(PBe),c&&t(cc),p(_A),c&&t($Be),c&&t(br),p(bA),p(TA),p(FA),p(CA),p(EA),c&&t(IBe),c&&t(gc),p(yA),c&&t(DBe),c&&t(vr),p(wA),p(LA),p(BA),p(xA),p(kA),c&&t(jBe),c&&t(pc),p(RA),c&&t(NBe),c&&t(Tr),p(SA),p($A),p(IA),p(DA),p(jA),c&&t(qBe),c&&t(vc),p(NA),c&&t(GBe),c&&t(Fr),p(qA),p(OA),p(XA),p(VA),p(zA),c&&t(OBe),c&&t(Cc),p(WA),c&&t(XBe),c&&t(Cr),p(QA),p(UA),p(JA),p(YA),p(KA),c&&t(VBe),c&&t(yc),p(ZA),c&&t(zBe),c&&t(Mr),p(e0),p(r0),p(t0),p(a0),p(s0),c&&t(WBe),c&&t(Lc),p(n0),c&&t(QBe),c&&t(Er),p(l0),p(d0),p(c0),p(m0),p(f0),c&&t(HBe),c&&t(kc),p(g0),c&&t(UBe),c&&t(yr),p(h0),p(p0),p(_0),p(b0),p(v0),c&&t(JBe),c&&t(Pc),p(T0),c&&t(YBe),c&&t(wr),p(F0),p(M0),p(E0),p(y0),p(w0),c&&t(KBe),c&&t(Dc),p(A0),c&&t(ZBe),c&&t(Ar),p(L0),p(x0),p(k0),p(R0),p(S0),c&&t(exe),c&&t(qc),p(P0),c&&t(oxe),c&&t(Lr),p($0),p(D0),p(j0),p(N0),p(q0),c&&t(rxe),c&&t(Xc),p(G0),c&&t(txe),c&&t(Br),p(O0),p(V0),p(z0),p(W0),p(Q0),c&&t(axe),c&&t(Wc),p(H0),c&&t(sxe),c&&t(xr),p(U0),p(Y0),p(K0),p(Z0),p(eL),c&&t(nxe),c&&t(Uc),p(oL),c&&t(lxe),c&&t(kr),p(rL),p(aL),p(sL),p(nL),p(lL),c&&t(ixe),c&&t(Kc),p(iL),c&&t(dxe),c&&t(Rr),p(dL),p(mL),p(fL),p(gL),p(hL),c&&t(cxe),c&&t(om),p(uL),c&&t(mxe),c&&t(Sr),p(pL),p(bL),p(vL),p(TL),p(FL),c&&t(fxe),c&&t(am),p(CL),c&&t(gxe),c&&t(Pr),p(ML),p(yL),p(wL),p(AL),p(LL),c&&t(hxe),c&&t(lm),p(BL),c&&t(uxe),c&&t($r),p(xL),p(RL),p(SL),p(PL),p($L),c&&t(pxe),c&&t(cm),p(IL),c&&t(_xe),c&&t(Ir),p(DL),p(NL),p(qL),p(GL),p(OL),c&&t(bxe),c&&t(gm),p(XL),c&&t(vxe),c&&t(Dr),p(VL),p(WL),p(QL),p(HL),p(UL),c&&t(Txe),c&&t(pm),p(JL),c&&t(Fxe),c&&t(jr),p(YL),p(ZL),p(e8),p(o8),p(t8),c&&t(Cxe),c&&t(vm),p(a8),c&&t(Mxe),c&&t(Nr),p(s8),p(l8),p(i8),p(d8),p(c8)}}}const bvt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vvt(Ai,J,Be){let{fw:ie}=J;return Ai.$$set=fe=>{"fw"in fe&&Be(0,ie=fe.fw)},[ie]}class wvt extends cvt{constructor(J){super();mvt(this,J,vvt,_vt,fvt,{fw:0})}}export{wvt as default,bvt as metadata};
