import{S as Dpt,i as qpt,s as Gpt,e as a,k as l,w as m,t as o,M as Opt,c as s,d as t,m as i,a as n,x as f,h as r,b as c,F as e,g as b,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as $Ar}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-90ffda97.js";import{I as z}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function Xpt(yi){let J,Ae,ie,fe,to,ce,_e,Do,wi,Mm,na,Ai,Li,t5,Em,ye,io,Bi,Ss,a5,Ps,$s,s5,xi,Is,n5,ki,ym,$a;return{c(){J=a("p"),Ae=o("If your "),ie=a("code"),fe=o("NewModelConfig"),to=o(" is a subclass of "),ce=a("code"),_e=o("PretrainedConfig"),Do=o(`, make sure its
`),wi=a("code"),Mm=o("model_type"),na=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),t5=o(")."),Em=l(),ye=a("p"),io=o("Likewise, if your "),Bi=a("code"),Ss=o("NewModel"),a5=o(" is a subclass of "),Ps=a("a"),$s=o("PreTrainedModel"),s5=o(`, make sure its
`),xi=a("code"),Is=o("config_class"),n5=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),ym=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=s(co,"P",{});var ge=n(J);Ae=r(ge,"If your "),ie=s(ge,"CODE",{});var O7=n(ie);fe=r(O7,"NewModelConfig"),O7.forEach(t),to=r(ge," is a subclass of "),ce=s(ge,"CODE",{});var Ri=n(ce);_e=r(Ri,"PretrainedConfig"),Ri.forEach(t),Do=r(ge,`, make sure its
`),wi=s(ge,"CODE",{});var X7=n(wi);Mm=r(X7,"model_type"),X7.forEach(t),na=r(ge," attribute is set to the same key you use when registering the config (here "),Ai=s(ge,"CODE",{});var z7=n(Ai);Li=r(z7,'"new-model"'),z7.forEach(t),t5=r(ge,")."),ge.forEach(t),Em=i(co),ye=s(co,"P",{});var qo=n(ye);io=r(qo,"Likewise, if your "),Bi=s(qo,"CODE",{});var Ia=n(Bi);Ss=r(Ia,"NewModel"),Ia.forEach(t),a5=r(qo," is a subclass of "),Ps=s(qo,"A",{href:!0});var V7=n(Ps);$s=r(V7,"PreTrainedModel"),V7.forEach(t),s5=r(qo,`, make sure its
`),xi=s(qo,"CODE",{});var wm=n(xi);Is=r(wm,"config_class"),wm.forEach(t),n5=r(qo,` attribute is set to the same class you use when registering the model (here
`),ki=s(qo,"CODE",{});var W7=n(ki);ym=r(W7,"NewModelConfig"),W7.forEach(t),$a=r(qo,")."),qo.forEach(t),this.h()},h(){c(Ps,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Ae),e(J,ie),e(ie,fe),e(J,to),e(J,ce),e(ce,_e),e(J,Do),e(J,wi),e(wi,Mm),e(J,na),e(J,Ai),e(Ai,Li),e(J,t5),b(co,Em,ge),b(co,ye,ge),e(ye,io),e(ye,Bi),e(Bi,Ss),e(ye,a5),e(ye,Ps),e(Ps,$s),e(ye,s5),e(ye,xi),e(xi,Is),e(ye,n5),e(ye,ki),e(ki,ym),e(ye,$a)},d(co){co&&t(J),co&&t(Em),co&&t(ye)}}}function zpt(yi){let J,Ae,ie,fe,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),fe=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=s(ce,"P",{});var _e=n(J);Ae=r(_e,"Passing "),ie=s(_e,"CODE",{});var Do=n(ie);fe=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(_e," is required when you want to use a private model."),_e.forEach(t)},m(ce,_e){b(ce,J,_e),e(J,Ae),e(J,ie),e(ie,fe),e(J,to)},d(ce){ce&&t(J)}}}function Vpt(yi){let J,Ae,ie,fe,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),fe=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=s(ce,"P",{});var _e=n(J);Ae=r(_e,"Passing "),ie=s(_e,"CODE",{});var Do=n(ie);fe=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(_e," is required when you want to use a private model."),_e.forEach(t)},m(ce,_e){b(ce,J,_e),e(J,Ae),e(J,ie),e(ie,fe),e(J,to)},d(ce){ce&&t(J)}}}function Wpt(yi){let J,Ae,ie,fe,to,ce,_e,Do,wi,Mm,na,Ai,Li,t5,Em,ye,io,Bi,Ss,a5,Ps,$s,s5,xi,Is,n5,ki,ym,$a,co,ge,O7,Ri,X7,z7,qo,Ia,V7,wm,W7,Fke,m8e,Si,Am,qV,l5,Cke,GV,Mke,f8e,js,Eke,OV,yke,wke,XV,Ake,Lke,g8e,i5,h8e,Q7,Bke,u8e,Lm,p8e,Pi,Bm,zV,d5,xke,VV,kke,_8e,Go,c5,Rke,m5,Ske,H7,Pke,$ke,Ike,f5,jke,WV,Nke,Dke,qke,mo,g5,Gke,QV,Oke,Xke,$i,zke,HV,Vke,Wke,UV,Qke,Hke,Uke,v,xm,JV,Jke,Yke,U7,Kke,Zke,eRe,km,YV,oRe,rRe,J7,tRe,aRe,sRe,Rm,KV,nRe,lRe,Y7,iRe,dRe,cRe,Sm,ZV,mRe,fRe,K7,gRe,hRe,uRe,Pm,eW,pRe,_Re,Z7,bRe,vRe,TRe,$m,oW,FRe,CRe,e8,MRe,ERe,yRe,Im,rW,wRe,ARe,o8,LRe,BRe,xRe,jm,tW,kRe,RRe,r8,SRe,PRe,$Re,Nm,aW,IRe,jRe,t8,NRe,DRe,qRe,Dm,sW,GRe,ORe,a8,XRe,zRe,VRe,qm,nW,WRe,QRe,s8,HRe,URe,JRe,Gm,lW,YRe,KRe,n8,ZRe,eSe,oSe,Om,iW,rSe,tSe,l8,aSe,sSe,nSe,Xm,dW,lSe,iSe,i8,dSe,cSe,mSe,zm,cW,fSe,gSe,d8,hSe,uSe,pSe,Vm,mW,_Se,bSe,c8,vSe,TSe,FSe,Wm,fW,CSe,MSe,m8,ESe,ySe,wSe,Qm,gW,ASe,LSe,f8,BSe,xSe,kSe,Hm,hW,RSe,SSe,g8,PSe,$Se,ISe,Um,uW,jSe,NSe,h8,DSe,qSe,GSe,Jm,pW,OSe,XSe,u8,zSe,VSe,WSe,Ym,_W,QSe,HSe,p8,USe,JSe,YSe,Km,bW,KSe,ZSe,_8,ePe,oPe,rPe,Zm,vW,tPe,aPe,b8,sPe,nPe,lPe,ef,TW,iPe,dPe,v8,cPe,mPe,fPe,of,FW,gPe,hPe,T8,uPe,pPe,_Pe,rf,CW,bPe,vPe,F8,TPe,FPe,CPe,tf,MW,MPe,EPe,C8,yPe,wPe,APe,af,EW,LPe,BPe,M8,xPe,kPe,RPe,sf,yW,SPe,PPe,E8,$Pe,IPe,jPe,nf,wW,NPe,DPe,y8,qPe,GPe,OPe,lf,AW,XPe,zPe,w8,VPe,WPe,QPe,df,LW,HPe,UPe,A8,JPe,YPe,KPe,cf,BW,ZPe,e$e,L8,o$e,r$e,t$e,mf,xW,a$e,s$e,B8,n$e,l$e,i$e,ff,kW,d$e,c$e,x8,m$e,f$e,g$e,gf,RW,h$e,u$e,k8,p$e,_$e,b$e,hf,SW,v$e,T$e,R8,F$e,C$e,M$e,uf,PW,E$e,y$e,S8,w$e,A$e,L$e,pf,$W,B$e,x$e,P8,k$e,R$e,S$e,_f,IW,P$e,$$e,$8,I$e,j$e,N$e,bf,jW,D$e,q$e,I8,G$e,O$e,X$e,vf,NW,z$e,V$e,j8,W$e,Q$e,H$e,Tf,DW,U$e,J$e,N8,Y$e,K$e,Z$e,Ff,qW,eIe,oIe,D8,rIe,tIe,aIe,Cf,GW,sIe,nIe,q8,lIe,iIe,dIe,Mf,OW,cIe,mIe,G8,fIe,gIe,hIe,Ef,XW,uIe,pIe,O8,_Ie,bIe,vIe,yf,zW,TIe,FIe,X8,CIe,MIe,EIe,wf,VW,yIe,wIe,z8,AIe,LIe,BIe,Af,WW,xIe,kIe,V8,RIe,SIe,PIe,Lf,QW,$Ie,IIe,W8,jIe,NIe,DIe,Bf,HW,qIe,GIe,Q8,OIe,XIe,zIe,xf,UW,VIe,WIe,H8,QIe,HIe,UIe,kf,JW,JIe,YIe,U8,KIe,ZIe,eje,Rf,YW,oje,rje,J8,tje,aje,sje,Sf,KW,nje,lje,Y8,ije,dje,cje,Pf,ZW,mje,fje,K8,gje,hje,uje,$f,eQ,pje,_je,Z8,bje,vje,Tje,If,oQ,Fje,Cje,e9,Mje,Eje,yje,jf,rQ,wje,Aje,o9,Lje,Bje,xje,Nf,tQ,kje,Rje,r9,Sje,Pje,$je,Df,aQ,Ije,jje,t9,Nje,Dje,qje,qf,sQ,Gje,Oje,a9,Xje,zje,Vje,Gf,nQ,Wje,Qje,s9,Hje,Uje,Jje,Of,lQ,Yje,Kje,n9,Zje,eNe,oNe,Xf,iQ,rNe,tNe,l9,aNe,sNe,nNe,zf,dQ,lNe,iNe,i9,dNe,cNe,mNe,Vf,cQ,fNe,gNe,d9,hNe,uNe,pNe,Wf,mQ,_Ne,bNe,c9,vNe,TNe,FNe,Qf,fQ,CNe,MNe,m9,ENe,yNe,wNe,Hf,gQ,ANe,LNe,f9,BNe,xNe,kNe,Uf,hQ,RNe,SNe,g9,PNe,$Ne,INe,Jf,uQ,jNe,NNe,h9,DNe,qNe,GNe,Yf,pQ,ONe,XNe,u9,zNe,VNe,WNe,Kf,_Q,QNe,HNe,p9,UNe,JNe,YNe,Zf,bQ,KNe,ZNe,_9,eDe,oDe,rDe,eg,vQ,tDe,aDe,b9,sDe,nDe,lDe,og,TQ,iDe,dDe,v9,cDe,mDe,fDe,rg,FQ,gDe,hDe,T9,uDe,pDe,_De,tg,CQ,bDe,vDe,F9,TDe,FDe,CDe,ag,MQ,MDe,EDe,C9,yDe,wDe,ADe,sg,EQ,LDe,BDe,M9,xDe,kDe,RDe,ng,yQ,SDe,PDe,E9,$De,IDe,jDe,lg,wQ,NDe,DDe,y9,qDe,GDe,ODe,ig,AQ,XDe,zDe,w9,VDe,WDe,QDe,dg,LQ,HDe,UDe,A9,JDe,YDe,KDe,cg,BQ,ZDe,eqe,L9,oqe,rqe,tqe,mg,xQ,aqe,sqe,B9,nqe,lqe,iqe,fg,kQ,dqe,cqe,x9,mqe,fqe,gqe,gg,RQ,hqe,uqe,k9,pqe,_qe,bqe,SQ,vqe,Tqe,h5,Fqe,hg,u5,Cqe,PQ,Mqe,b8e,Ii,ug,$Q,p5,Eqe,IQ,yqe,v8e,Oo,_5,wqe,b5,Aqe,R9,Lqe,Bqe,xqe,v5,kqe,jQ,Rqe,Sqe,Pqe,fo,T5,$qe,NQ,Iqe,jqe,ja,Nqe,DQ,Dqe,qqe,qQ,Gqe,Oqe,GQ,Xqe,zqe,Vqe,M,Ns,OQ,Wqe,Qqe,S9,Hqe,Uqe,P9,Jqe,Yqe,Kqe,Ds,XQ,Zqe,eGe,$9,oGe,rGe,I9,tGe,aGe,sGe,qs,zQ,nGe,lGe,j9,iGe,dGe,N9,cGe,mGe,fGe,pg,VQ,gGe,hGe,D9,uGe,pGe,_Ge,Gs,WQ,bGe,vGe,q9,TGe,FGe,G9,CGe,MGe,EGe,_g,QQ,yGe,wGe,O9,AGe,LGe,BGe,bg,HQ,xGe,kGe,X9,RGe,SGe,PGe,vg,UQ,$Ge,IGe,z9,jGe,NGe,DGe,Os,JQ,qGe,GGe,V9,OGe,XGe,W9,zGe,VGe,WGe,Xs,YQ,QGe,HGe,Q9,UGe,JGe,H9,YGe,KGe,ZGe,zs,KQ,eOe,oOe,U9,rOe,tOe,J9,aOe,sOe,nOe,Tg,ZQ,lOe,iOe,Y9,dOe,cOe,mOe,Fg,eH,fOe,gOe,K9,hOe,uOe,pOe,Vs,oH,_Oe,bOe,Z9,vOe,TOe,eB,FOe,COe,MOe,Cg,rH,EOe,yOe,oB,wOe,AOe,LOe,Ws,tH,BOe,xOe,rB,kOe,ROe,tB,SOe,POe,$Oe,Qs,aH,IOe,jOe,aB,NOe,DOe,sB,qOe,GOe,OOe,Hs,sH,XOe,zOe,nB,VOe,WOe,nH,QOe,HOe,UOe,Mg,lH,JOe,YOe,lB,KOe,ZOe,eXe,Us,iH,oXe,rXe,iB,tXe,aXe,dB,sXe,nXe,lXe,Eg,dH,iXe,dXe,cB,cXe,mXe,fXe,Js,cH,gXe,hXe,mB,uXe,pXe,fB,_Xe,bXe,vXe,Ys,mH,TXe,FXe,gB,CXe,MXe,hB,EXe,yXe,wXe,Ks,fH,AXe,LXe,uB,BXe,xXe,pB,kXe,RXe,SXe,yg,gH,PXe,$Xe,_B,IXe,jXe,NXe,Zs,hH,DXe,qXe,bB,GXe,OXe,vB,XXe,zXe,VXe,wg,uH,WXe,QXe,TB,HXe,UXe,JXe,en,pH,YXe,KXe,FB,ZXe,eze,CB,oze,rze,tze,on,_H,aze,sze,MB,nze,lze,EB,ize,dze,cze,rn,bH,mze,fze,yB,gze,hze,wB,uze,pze,_ze,tn,vH,bze,vze,AB,Tze,Fze,LB,Cze,Mze,Eze,Ag,TH,yze,wze,BB,Aze,Lze,Bze,an,FH,xze,kze,xB,Rze,Sze,kB,Pze,$ze,Ize,sn,CH,jze,Nze,RB,Dze,qze,SB,Gze,Oze,Xze,nn,MH,zze,Vze,PB,Wze,Qze,$B,Hze,Uze,Jze,ln,EH,Yze,Kze,IB,Zze,eVe,jB,oVe,rVe,tVe,dn,yH,aVe,sVe,NB,nVe,lVe,DB,iVe,dVe,cVe,cn,wH,mVe,fVe,qB,gVe,hVe,GB,uVe,pVe,_Ve,Lg,AH,bVe,vVe,OB,TVe,FVe,CVe,mn,LH,MVe,EVe,XB,yVe,wVe,zB,AVe,LVe,BVe,Bg,BH,xVe,kVe,VB,RVe,SVe,PVe,xg,xH,$Ve,IVe,WB,jVe,NVe,DVe,fn,kH,qVe,GVe,QB,OVe,XVe,HB,zVe,VVe,WVe,gn,RH,QVe,HVe,UB,UVe,JVe,JB,YVe,KVe,ZVe,kg,SH,eWe,oWe,YB,rWe,tWe,aWe,hn,PH,sWe,nWe,KB,lWe,iWe,ZB,dWe,cWe,mWe,un,$H,fWe,gWe,ex,hWe,uWe,ox,pWe,_We,bWe,pn,IH,vWe,TWe,rx,FWe,CWe,tx,MWe,EWe,yWe,_n,jH,wWe,AWe,ax,LWe,BWe,sx,xWe,kWe,RWe,bn,NH,SWe,PWe,nx,$We,IWe,lx,jWe,NWe,DWe,Rg,DH,qWe,GWe,ix,OWe,XWe,zWe,Sg,qH,VWe,WWe,dx,QWe,HWe,UWe,Pg,GH,JWe,YWe,cx,KWe,ZWe,eQe,$g,OH,oQe,rQe,mx,tQe,aQe,sQe,vn,XH,nQe,lQe,fx,iQe,dQe,gx,cQe,mQe,fQe,Ig,zH,gQe,hQe,hx,uQe,pQe,_Qe,Tn,VH,bQe,vQe,ux,TQe,FQe,px,CQe,MQe,EQe,Fn,WH,yQe,wQe,_x,AQe,LQe,bx,BQe,xQe,kQe,Cn,QH,RQe,SQe,vx,PQe,$Qe,Tx,IQe,jQe,NQe,Mn,HH,DQe,qQe,Fx,GQe,OQe,Cx,XQe,zQe,VQe,En,UH,WQe,QQe,Mx,HQe,UQe,Ex,JQe,YQe,KQe,jg,JH,ZQe,eHe,yx,oHe,rHe,tHe,Ng,YH,aHe,sHe,wx,nHe,lHe,iHe,yn,KH,dHe,cHe,Ax,mHe,fHe,Lx,gHe,hHe,uHe,wn,ZH,pHe,_He,Bx,bHe,vHe,xx,THe,FHe,CHe,An,eU,MHe,EHe,kx,yHe,wHe,Rx,AHe,LHe,BHe,Dg,oU,xHe,kHe,Sx,RHe,SHe,PHe,qg,rU,$He,IHe,Px,jHe,NHe,DHe,Gg,tU,qHe,GHe,$x,OHe,XHe,zHe,Og,aU,VHe,WHe,Ix,QHe,HHe,UHe,Ln,sU,JHe,YHe,jx,KHe,ZHe,Nx,eUe,oUe,rUe,Xg,nU,tUe,aUe,Dx,sUe,nUe,lUe,zg,lU,iUe,dUe,qx,cUe,mUe,fUe,Bn,iU,gUe,hUe,Gx,uUe,pUe,Ox,_Ue,bUe,vUe,xn,dU,TUe,FUe,Xx,CUe,MUe,zx,EUe,yUe,wUe,cU,AUe,LUe,F5,BUe,Vg,C5,xUe,mU,kUe,T8e,ji,Wg,fU,M5,RUe,gU,SUe,F8e,Xo,E5,PUe,y5,$Ue,Vx,IUe,jUe,NUe,w5,DUe,hU,qUe,GUe,OUe,Le,A5,XUe,uU,zUe,VUe,Na,WUe,pU,QUe,HUe,_U,UUe,JUe,bU,YUe,KUe,ZUe,ne,Qg,vU,eJe,oJe,Wx,rJe,tJe,aJe,Hg,TU,sJe,nJe,Qx,lJe,iJe,dJe,Ug,FU,cJe,mJe,Hx,fJe,gJe,hJe,Jg,CU,uJe,pJe,Ux,_Je,bJe,vJe,Yg,MU,TJe,FJe,Jx,CJe,MJe,EJe,Kg,EU,yJe,wJe,Yx,AJe,LJe,BJe,Zg,yU,xJe,kJe,Kx,RJe,SJe,PJe,eh,wU,$Je,IJe,Zx,jJe,NJe,DJe,oh,AU,qJe,GJe,ek,OJe,XJe,zJe,rh,LU,VJe,WJe,ok,QJe,HJe,UJe,th,BU,JJe,YJe,rk,KJe,ZJe,eYe,ah,xU,oYe,rYe,tk,tYe,aYe,sYe,sh,kU,nYe,lYe,ak,iYe,dYe,cYe,nh,RU,mYe,fYe,sk,gYe,hYe,uYe,lh,SU,pYe,_Ye,nk,bYe,vYe,TYe,ih,FYe,PU,CYe,MYe,L5,EYe,dh,B5,yYe,$U,wYe,C8e,Ni,ch,IU,x5,AYe,jU,LYe,M8e,zo,k5,BYe,R5,xYe,lk,kYe,RYe,SYe,S5,PYe,NU,$Ye,IYe,jYe,Be,P5,NYe,DU,DYe,qYe,Di,GYe,qU,OYe,XYe,GU,zYe,VYe,WYe,we,mh,OU,QYe,HYe,ik,UYe,JYe,YYe,fh,XU,KYe,ZYe,dk,eKe,oKe,rKe,gh,zU,tKe,aKe,ck,sKe,nKe,lKe,hh,VU,iKe,dKe,mk,cKe,mKe,fKe,uh,WU,gKe,hKe,fk,uKe,pKe,_Ke,ph,QU,bKe,vKe,gk,TKe,FKe,CKe,_h,HU,MKe,EKe,hk,yKe,wKe,AKe,bh,UU,LKe,BKe,uk,xKe,kKe,RKe,vh,SKe,JU,PKe,$Ke,$5,IKe,Th,I5,jKe,YU,NKe,E8e,qi,Fh,KU,j5,DKe,ZU,qKe,y8e,Vo,N5,GKe,Gi,OKe,eJ,XKe,zKe,oJ,VKe,WKe,QKe,D5,HKe,rJ,UKe,JKe,YKe,Nr,q5,KKe,tJ,ZKe,eZe,Oi,oZe,aJ,rZe,tZe,sJ,aZe,sZe,nZe,nJ,lZe,iZe,G5,dZe,xe,O5,cZe,lJ,mZe,fZe,Da,gZe,iJ,hZe,uZe,dJ,pZe,_Ze,cJ,bZe,vZe,TZe,F,Ch,mJ,FZe,CZe,pk,MZe,EZe,yZe,Mh,fJ,wZe,AZe,_k,LZe,BZe,xZe,Eh,gJ,kZe,RZe,bk,SZe,PZe,$Ze,yh,hJ,IZe,jZe,vk,NZe,DZe,qZe,wh,uJ,GZe,OZe,Tk,XZe,zZe,VZe,Ah,pJ,WZe,QZe,Fk,HZe,UZe,JZe,Lh,_J,YZe,KZe,Ck,ZZe,eeo,oeo,Bh,bJ,reo,teo,Mk,aeo,seo,neo,xh,vJ,leo,ieo,Ek,deo,ceo,meo,kh,TJ,feo,geo,yk,heo,ueo,peo,Rh,FJ,_eo,beo,wk,veo,Teo,Feo,Sh,CJ,Ceo,Meo,Ak,Eeo,yeo,weo,Ph,MJ,Aeo,Leo,Lk,Beo,xeo,keo,$h,EJ,Reo,Seo,Bk,Peo,$eo,Ieo,Ih,yJ,jeo,Neo,xk,Deo,qeo,Geo,jh,wJ,Oeo,Xeo,kk,zeo,Veo,Weo,Nh,AJ,Qeo,Heo,Rk,Ueo,Jeo,Yeo,Dh,LJ,Keo,Zeo,Sk,eoo,ooo,roo,qh,BJ,too,aoo,Pk,soo,noo,loo,Gh,xJ,ioo,doo,$k,coo,moo,foo,Oh,kJ,goo,hoo,Ik,uoo,poo,_oo,Xh,RJ,boo,voo,jk,Too,Foo,Coo,zh,SJ,Moo,Eoo,Nk,yoo,woo,Aoo,Vh,PJ,Loo,Boo,Dk,xoo,koo,Roo,Wh,$J,Soo,Poo,qk,$oo,Ioo,joo,kn,IJ,Noo,Doo,Gk,qoo,Goo,Ok,Ooo,Xoo,zoo,Qh,jJ,Voo,Woo,Xk,Qoo,Hoo,Uoo,Hh,NJ,Joo,Yoo,zk,Koo,Zoo,ero,Uh,DJ,oro,rro,Vk,tro,aro,sro,Jh,qJ,nro,lro,Wk,iro,dro,cro,Yh,GJ,mro,fro,Qk,gro,hro,uro,Kh,OJ,pro,_ro,Hk,bro,vro,Tro,Zh,XJ,Fro,Cro,Uk,Mro,Ero,yro,eu,zJ,wro,Aro,Jk,Lro,Bro,xro,ou,VJ,kro,Rro,Yk,Sro,Pro,$ro,ru,WJ,Iro,jro,Kk,Nro,Dro,qro,tu,QJ,Gro,Oro,Zk,Xro,zro,Vro,au,HJ,Wro,Qro,eR,Hro,Uro,Jro,su,UJ,Yro,Kro,oR,Zro,eto,oto,nu,JJ,rto,tto,rR,ato,sto,nto,lu,YJ,lto,ito,tR,dto,cto,mto,iu,KJ,fto,gto,aR,hto,uto,pto,du,ZJ,_to,bto,sR,vto,Tto,Fto,cu,eY,Cto,Mto,nR,Eto,yto,wto,mu,oY,Ato,Lto,lR,Bto,xto,kto,fu,rY,Rto,Sto,iR,Pto,$to,Ito,gu,tY,jto,Nto,dR,Dto,qto,Gto,hu,aY,Oto,Xto,cR,zto,Vto,Wto,uu,sY,Qto,Hto,mR,Uto,Jto,Yto,pu,nY,Kto,Zto,fR,eao,oao,rao,_u,lY,tao,aao,gR,sao,nao,lao,bu,iY,iao,dao,hR,cao,mao,fao,vu,dY,gao,hao,uR,uao,pao,_ao,Tu,cY,bao,vao,pR,Tao,Fao,Cao,Fu,mY,Mao,Eao,_R,yao,wao,Aao,Cu,fY,Lao,Bao,bR,xao,kao,Rao,Mu,gY,Sao,Pao,vR,$ao,Iao,jao,Eu,hY,Nao,Dao,TR,qao,Gao,Oao,yu,uY,Xao,zao,FR,Vao,Wao,Qao,wu,pY,Hao,Uao,CR,Jao,Yao,Kao,Au,_Y,Zao,eso,MR,oso,rso,tso,Lu,bY,aso,sso,ER,nso,lso,iso,Bu,vY,dso,cso,yR,mso,fso,gso,xu,TY,hso,uso,wR,pso,_so,bso,ku,FY,vso,Tso,AR,Fso,Cso,Mso,Ru,CY,Eso,yso,LR,wso,Aso,Lso,Su,MY,Bso,xso,BR,kso,Rso,Sso,Pu,EY,Pso,$so,xR,Iso,jso,Nso,$u,yY,Dso,qso,kR,Gso,Oso,Xso,Iu,wY,zso,Vso,RR,Wso,Qso,Hso,ju,AY,Uso,Jso,SR,Yso,Kso,Zso,Nu,LY,eno,ono,PR,rno,tno,ano,Du,BY,sno,nno,$R,lno,ino,dno,qu,xY,cno,mno,IR,fno,gno,hno,Gu,kY,uno,pno,jR,_no,bno,vno,Ou,RY,Tno,Fno,NR,Cno,Mno,Eno,Xu,SY,yno,wno,DR,Ano,Lno,Bno,zu,PY,xno,kno,qR,Rno,Sno,Pno,Vu,$Y,$no,Ino,GR,jno,Nno,Dno,Wu,IY,qno,Gno,OR,Ono,Xno,zno,Qu,jY,Vno,Wno,XR,Qno,Hno,Uno,Hu,NY,Jno,Yno,zR,Kno,Zno,elo,Uu,DY,olo,rlo,VR,tlo,alo,slo,Ju,qY,nlo,llo,WR,ilo,dlo,clo,Yu,mlo,GY,flo,glo,OY,hlo,ulo,XY,plo,_lo,X5,w8e,Xi,Ku,zY,z5,blo,VY,vlo,A8e,Wo,V5,Tlo,zi,Flo,WY,Clo,Mlo,QY,Elo,ylo,wlo,W5,Alo,HY,Llo,Blo,xlo,Dr,Q5,klo,UY,Rlo,Slo,Vi,Plo,JY,$lo,Ilo,YY,jlo,Nlo,Dlo,KY,qlo,Glo,H5,Olo,ke,U5,Xlo,ZY,zlo,Vlo,qa,Wlo,eK,Qlo,Hlo,oK,Ulo,Jlo,rK,Ylo,Klo,Zlo,k,Zu,tK,eio,oio,QR,rio,tio,aio,ep,aK,sio,nio,HR,lio,iio,dio,op,sK,cio,mio,UR,fio,gio,hio,rp,nK,uio,pio,JR,_io,bio,vio,tp,lK,Tio,Fio,YR,Cio,Mio,Eio,ap,iK,yio,wio,KR,Aio,Lio,Bio,sp,dK,xio,kio,ZR,Rio,Sio,Pio,np,cK,$io,Iio,eS,jio,Nio,Dio,lp,mK,qio,Gio,oS,Oio,Xio,zio,ip,fK,Vio,Wio,rS,Qio,Hio,Uio,dp,gK,Jio,Yio,tS,Kio,Zio,edo,cp,hK,odo,rdo,aS,tdo,ado,sdo,mp,uK,ndo,ldo,sS,ido,ddo,cdo,fp,pK,mdo,fdo,nS,gdo,hdo,udo,gp,_K,pdo,_do,lS,bdo,vdo,Tdo,hp,bK,Fdo,Cdo,iS,Mdo,Edo,ydo,up,vK,wdo,Ado,dS,Ldo,Bdo,xdo,pp,TK,kdo,Rdo,cS,Sdo,Pdo,$do,_p,FK,Ido,jdo,mS,Ndo,Ddo,qdo,bp,CK,Gdo,Odo,fS,Xdo,zdo,Vdo,vp,MK,Wdo,Qdo,gS,Hdo,Udo,Jdo,Tp,EK,Ydo,Kdo,hS,Zdo,eco,oco,Fp,yK,rco,tco,uS,aco,sco,nco,Cp,wK,lco,ico,pS,dco,cco,mco,Mp,AK,fco,gco,_S,hco,uco,pco,Ep,LK,_co,bco,bS,vco,Tco,Fco,yp,BK,Cco,Mco,vS,Eco,yco,wco,wp,xK,Aco,Lco,TS,Bco,xco,kco,Ap,kK,Rco,Sco,FS,Pco,$co,Ico,Lp,RK,jco,Nco,CS,Dco,qco,Gco,Bp,SK,Oco,Xco,MS,zco,Vco,Wco,xp,PK,Qco,Hco,ES,Uco,Jco,Yco,kp,$K,Kco,Zco,yS,emo,omo,rmo,Rp,IK,tmo,amo,wS,smo,nmo,lmo,Sp,jK,imo,dmo,AS,cmo,mmo,fmo,Pp,NK,gmo,hmo,LS,umo,pmo,_mo,$p,DK,bmo,vmo,BS,Tmo,Fmo,Cmo,Ip,qK,Mmo,Emo,xS,ymo,wmo,Amo,jp,Lmo,GK,Bmo,xmo,OK,kmo,Rmo,XK,Smo,Pmo,J5,L8e,Wi,Np,zK,Y5,$mo,VK,Imo,B8e,Qo,K5,jmo,Qi,Nmo,WK,Dmo,qmo,QK,Gmo,Omo,Xmo,Z5,zmo,HK,Vmo,Wmo,Qmo,qr,ey,Hmo,UK,Umo,Jmo,Hi,Ymo,JK,Kmo,Zmo,YK,efo,ofo,rfo,KK,tfo,afo,oy,sfo,Re,ry,nfo,ZK,lfo,ifo,Ga,dfo,eZ,cfo,mfo,oZ,ffo,gfo,rZ,hfo,ufo,pfo,$,Dp,tZ,_fo,bfo,kS,vfo,Tfo,Ffo,qp,aZ,Cfo,Mfo,RS,Efo,yfo,wfo,Gp,sZ,Afo,Lfo,SS,Bfo,xfo,kfo,Op,nZ,Rfo,Sfo,PS,Pfo,$fo,Ifo,Xp,lZ,jfo,Nfo,$S,Dfo,qfo,Gfo,zp,iZ,Ofo,Xfo,IS,zfo,Vfo,Wfo,Vp,dZ,Qfo,Hfo,jS,Ufo,Jfo,Yfo,Wp,cZ,Kfo,Zfo,NS,ego,ogo,rgo,Qp,mZ,tgo,ago,DS,sgo,ngo,lgo,Hp,fZ,igo,dgo,qS,cgo,mgo,fgo,Up,gZ,ggo,hgo,GS,ugo,pgo,_go,Jp,hZ,bgo,vgo,OS,Tgo,Fgo,Cgo,Yp,uZ,Mgo,Ego,XS,ygo,wgo,Ago,Kp,pZ,Lgo,Bgo,zS,xgo,kgo,Rgo,Zp,_Z,Sgo,Pgo,VS,$go,Igo,jgo,e_,bZ,Ngo,Dgo,WS,qgo,Ggo,Ogo,o_,vZ,Xgo,zgo,QS,Vgo,Wgo,Qgo,r_,TZ,Hgo,Ugo,HS,Jgo,Ygo,Kgo,t_,FZ,Zgo,eho,US,oho,rho,tho,a_,CZ,aho,sho,JS,nho,lho,iho,s_,MZ,dho,cho,YS,mho,fho,gho,n_,EZ,hho,uho,KS,pho,_ho,bho,l_,yZ,vho,Tho,ZS,Fho,Cho,Mho,i_,wZ,Eho,yho,eP,who,Aho,Lho,d_,AZ,Bho,xho,oP,kho,Rho,Sho,c_,LZ,Pho,$ho,rP,Iho,jho,Nho,m_,BZ,Dho,qho,tP,Gho,Oho,Xho,f_,xZ,zho,Vho,aP,Who,Qho,Hho,g_,kZ,Uho,Jho,sP,Yho,Kho,Zho,h_,RZ,euo,ouo,nP,ruo,tuo,auo,u_,SZ,suo,nuo,lP,luo,iuo,duo,p_,PZ,cuo,muo,iP,fuo,guo,huo,__,$Z,uuo,puo,dP,_uo,buo,vuo,b_,IZ,Tuo,Fuo,cP,Cuo,Muo,Euo,v_,yuo,jZ,wuo,Auo,NZ,Luo,Buo,DZ,xuo,kuo,ty,x8e,Ui,T_,qZ,ay,Ruo,GZ,Suo,k8e,Ho,sy,Puo,Ji,$uo,OZ,Iuo,juo,XZ,Nuo,Duo,quo,ny,Guo,zZ,Ouo,Xuo,zuo,Gr,ly,Vuo,VZ,Wuo,Quo,Yi,Huo,WZ,Uuo,Juo,QZ,Yuo,Kuo,Zuo,HZ,epo,opo,iy,rpo,Se,dy,tpo,UZ,apo,spo,Oa,npo,JZ,lpo,ipo,YZ,dpo,cpo,KZ,mpo,fpo,gpo,I,F_,ZZ,hpo,upo,mP,ppo,_po,bpo,C_,eee,vpo,Tpo,fP,Fpo,Cpo,Mpo,M_,oee,Epo,ypo,gP,wpo,Apo,Lpo,E_,ree,Bpo,xpo,hP,kpo,Rpo,Spo,y_,tee,Ppo,$po,uP,Ipo,jpo,Npo,w_,aee,Dpo,qpo,pP,Gpo,Opo,Xpo,A_,see,zpo,Vpo,_P,Wpo,Qpo,Hpo,L_,nee,Upo,Jpo,bP,Ypo,Kpo,Zpo,B_,lee,e_o,o_o,vP,r_o,t_o,a_o,x_,iee,s_o,n_o,TP,l_o,i_o,d_o,k_,dee,c_o,m_o,FP,f_o,g_o,h_o,R_,cee,u_o,p_o,CP,__o,b_o,v_o,S_,mee,T_o,F_o,MP,C_o,M_o,E_o,P_,fee,y_o,w_o,EP,A_o,L_o,B_o,$_,gee,x_o,k_o,yP,R_o,S_o,P_o,I_,hee,$_o,I_o,wP,j_o,N_o,D_o,j_,uee,q_o,G_o,AP,O_o,X_o,z_o,N_,pee,V_o,W_o,LP,Q_o,H_o,U_o,D_,_ee,J_o,Y_o,BP,K_o,Z_o,ebo,q_,bee,obo,rbo,xP,tbo,abo,sbo,G_,vee,nbo,lbo,kP,ibo,dbo,cbo,O_,Tee,mbo,fbo,RP,gbo,hbo,ubo,X_,Fee,pbo,_bo,SP,bbo,vbo,Tbo,z_,Cee,Fbo,Cbo,PP,Mbo,Ebo,ybo,V_,Mee,wbo,Abo,$P,Lbo,Bbo,xbo,W_,Eee,kbo,Rbo,IP,Sbo,Pbo,$bo,Q_,yee,Ibo,jbo,jP,Nbo,Dbo,qbo,H_,wee,Gbo,Obo,NP,Xbo,zbo,Vbo,U_,Aee,Wbo,Qbo,DP,Hbo,Ubo,Jbo,J_,Lee,Ybo,Kbo,Bee,Zbo,e2o,o2o,Y_,xee,r2o,t2o,qP,a2o,s2o,n2o,K_,kee,l2o,i2o,GP,d2o,c2o,m2o,Z_,Ree,f2o,g2o,OP,h2o,u2o,p2o,eb,See,_2o,b2o,XP,v2o,T2o,F2o,ob,C2o,Pee,M2o,E2o,$ee,y2o,w2o,Iee,A2o,L2o,cy,R8e,Ki,rb,jee,my,B2o,Nee,x2o,S8e,Uo,fy,k2o,Zi,R2o,Dee,S2o,P2o,qee,$2o,I2o,j2o,gy,N2o,Gee,D2o,q2o,G2o,Or,hy,O2o,Oee,X2o,z2o,ed,V2o,Xee,W2o,Q2o,zee,H2o,U2o,J2o,Vee,Y2o,K2o,uy,Z2o,Pe,py,evo,Wee,ovo,rvo,Xa,tvo,Qee,avo,svo,Hee,nvo,lvo,Uee,ivo,dvo,cvo,ae,tb,Jee,mvo,fvo,zP,gvo,hvo,uvo,ab,Yee,pvo,_vo,VP,bvo,vvo,Tvo,sb,Kee,Fvo,Cvo,WP,Mvo,Evo,yvo,nb,Zee,wvo,Avo,QP,Lvo,Bvo,xvo,lb,eoe,kvo,Rvo,HP,Svo,Pvo,$vo,ib,ooe,Ivo,jvo,UP,Nvo,Dvo,qvo,db,roe,Gvo,Ovo,JP,Xvo,zvo,Vvo,cb,toe,Wvo,Qvo,YP,Hvo,Uvo,Jvo,mb,aoe,Yvo,Kvo,KP,Zvo,eTo,oTo,fb,soe,rTo,tTo,ZP,aTo,sTo,nTo,gb,noe,lTo,iTo,e$,dTo,cTo,mTo,hb,loe,fTo,gTo,o$,hTo,uTo,pTo,ub,ioe,_To,bTo,r$,vTo,TTo,FTo,pb,doe,CTo,MTo,t$,ETo,yTo,wTo,_b,coe,ATo,LTo,a$,BTo,xTo,kTo,bb,moe,RTo,STo,s$,PTo,$To,ITo,vb,jTo,foe,NTo,DTo,goe,qTo,GTo,hoe,OTo,XTo,_y,P8e,od,Tb,uoe,by,zTo,poe,VTo,$8e,Jo,vy,WTo,rd,QTo,_oe,HTo,UTo,boe,JTo,YTo,KTo,Ty,ZTo,voe,e1o,o1o,r1o,Xr,Fy,t1o,Toe,a1o,s1o,td,n1o,Foe,l1o,i1o,Coe,d1o,c1o,m1o,Moe,f1o,g1o,Cy,h1o,$e,My,u1o,Eoe,p1o,_1o,za,b1o,yoe,v1o,T1o,woe,F1o,C1o,Aoe,M1o,E1o,y1o,A,Fb,Loe,w1o,A1o,n$,L1o,B1o,x1o,Cb,Boe,k1o,R1o,l$,S1o,P1o,$1o,Mb,xoe,I1o,j1o,i$,N1o,D1o,q1o,Eb,koe,G1o,O1o,d$,X1o,z1o,V1o,yb,Roe,W1o,Q1o,c$,H1o,U1o,J1o,wb,Soe,Y1o,K1o,m$,Z1o,eFo,oFo,Ab,Poe,rFo,tFo,f$,aFo,sFo,nFo,Lb,$oe,lFo,iFo,g$,dFo,cFo,mFo,Bb,Ioe,fFo,gFo,h$,hFo,uFo,pFo,xb,joe,_Fo,bFo,u$,vFo,TFo,FFo,kb,Noe,CFo,MFo,p$,EFo,yFo,wFo,Rb,Doe,AFo,LFo,_$,BFo,xFo,kFo,Sb,qoe,RFo,SFo,b$,PFo,$Fo,IFo,Pb,Goe,jFo,NFo,v$,DFo,qFo,GFo,$b,Ooe,OFo,XFo,T$,zFo,VFo,WFo,Ib,Xoe,QFo,HFo,F$,UFo,JFo,YFo,jb,zoe,KFo,ZFo,C$,eCo,oCo,rCo,Nb,Voe,tCo,aCo,M$,sCo,nCo,lCo,Db,Woe,iCo,dCo,E$,cCo,mCo,fCo,qb,Qoe,gCo,hCo,y$,uCo,pCo,_Co,Gb,Hoe,bCo,vCo,w$,TCo,FCo,CCo,Ob,Uoe,MCo,ECo,A$,yCo,wCo,ACo,Xb,Joe,LCo,BCo,L$,xCo,kCo,RCo,zb,Yoe,SCo,PCo,B$,$Co,ICo,jCo,Vb,Koe,NCo,DCo,x$,qCo,GCo,OCo,Wb,Zoe,XCo,zCo,k$,VCo,WCo,QCo,Qb,ere,HCo,UCo,R$,JCo,YCo,KCo,Hb,ore,ZCo,e4o,S$,o4o,r4o,t4o,Ub,rre,a4o,s4o,P$,n4o,l4o,i4o,Jb,tre,d4o,c4o,$$,m4o,f4o,g4o,Yb,are,h4o,u4o,I$,p4o,_4o,b4o,Kb,sre,v4o,T4o,j$,F4o,C4o,M4o,Zb,nre,E4o,y4o,N$,w4o,A4o,L4o,e2,lre,B4o,x4o,D$,k4o,R4o,S4o,o2,ire,P4o,$4o,q$,I4o,j4o,N4o,r2,dre,D4o,q4o,G$,G4o,O4o,X4o,t2,cre,z4o,V4o,O$,W4o,Q4o,H4o,a2,mre,U4o,J4o,X$,Y4o,K4o,Z4o,s2,fre,eMo,oMo,z$,rMo,tMo,aMo,n2,gre,sMo,nMo,V$,lMo,iMo,dMo,l2,hre,cMo,mMo,W$,fMo,gMo,hMo,i2,ure,uMo,pMo,Q$,_Mo,bMo,vMo,d2,pre,TMo,FMo,H$,CMo,MMo,EMo,c2,_re,yMo,wMo,U$,AMo,LMo,BMo,m2,bre,xMo,kMo,J$,RMo,SMo,PMo,f2,$Mo,vre,IMo,jMo,Tre,NMo,DMo,Fre,qMo,GMo,Ey,I8e,ad,g2,Cre,yy,OMo,Mre,XMo,j8e,Yo,wy,zMo,sd,VMo,Ere,WMo,QMo,yre,HMo,UMo,JMo,Ay,YMo,wre,KMo,ZMo,eEo,zr,Ly,oEo,Are,rEo,tEo,nd,aEo,Lre,sEo,nEo,Bre,lEo,iEo,dEo,xre,cEo,mEo,By,fEo,Ie,xy,gEo,kre,hEo,uEo,Va,pEo,Rre,_Eo,bEo,Sre,vEo,TEo,Pre,FEo,CEo,MEo,G,h2,$re,EEo,yEo,Y$,wEo,AEo,LEo,u2,Ire,BEo,xEo,K$,kEo,REo,SEo,p2,jre,PEo,$Eo,Z$,IEo,jEo,NEo,_2,Nre,DEo,qEo,eI,GEo,OEo,XEo,b2,Dre,zEo,VEo,oI,WEo,QEo,HEo,v2,qre,UEo,JEo,rI,YEo,KEo,ZEo,T2,Gre,e3o,o3o,tI,r3o,t3o,a3o,F2,Ore,s3o,n3o,aI,l3o,i3o,d3o,C2,Xre,c3o,m3o,sI,f3o,g3o,h3o,M2,zre,u3o,p3o,nI,_3o,b3o,v3o,E2,Vre,T3o,F3o,lI,C3o,M3o,E3o,y2,Wre,y3o,w3o,iI,A3o,L3o,B3o,w2,Qre,x3o,k3o,dI,R3o,S3o,P3o,A2,Hre,$3o,I3o,cI,j3o,N3o,D3o,L2,Ure,q3o,G3o,mI,O3o,X3o,z3o,B2,Jre,V3o,W3o,fI,Q3o,H3o,U3o,x2,Yre,J3o,Y3o,gI,K3o,Z3o,e5o,k2,Kre,o5o,r5o,hI,t5o,a5o,s5o,R2,Zre,n5o,l5o,uI,i5o,d5o,c5o,S2,ete,m5o,f5o,pI,g5o,h5o,u5o,P2,ote,p5o,_5o,_I,b5o,v5o,T5o,$2,rte,F5o,C5o,bI,M5o,E5o,y5o,I2,tte,w5o,A5o,vI,L5o,B5o,x5o,j2,ate,k5o,R5o,TI,S5o,P5o,$5o,N2,ste,I5o,j5o,FI,N5o,D5o,q5o,D2,nte,G5o,O5o,CI,X5o,z5o,V5o,q2,lte,W5o,Q5o,MI,H5o,U5o,J5o,G2,Y5o,ite,K5o,Z5o,dte,eyo,oyo,cte,ryo,tyo,ky,N8e,ld,O2,mte,Ry,ayo,fte,syo,D8e,Ko,Sy,nyo,id,lyo,gte,iyo,dyo,hte,cyo,myo,fyo,Py,gyo,ute,hyo,uyo,pyo,Vr,$y,_yo,pte,byo,vyo,dd,Tyo,_te,Fyo,Cyo,bte,Myo,Eyo,yyo,vte,wyo,Ayo,Iy,Lyo,je,jy,Byo,Tte,xyo,kyo,Wa,Ryo,Fte,Syo,Pyo,Cte,$yo,Iyo,Mte,jyo,Nyo,Dyo,sa,X2,Ete,qyo,Gyo,EI,Oyo,Xyo,zyo,z2,yte,Vyo,Wyo,yI,Qyo,Hyo,Uyo,V2,wte,Jyo,Yyo,wI,Kyo,Zyo,ewo,W2,Ate,owo,rwo,AI,two,awo,swo,Q2,Lte,nwo,lwo,LI,iwo,dwo,cwo,H2,mwo,Bte,fwo,gwo,xte,hwo,uwo,kte,pwo,_wo,Ny,q8e,cd,U2,Rte,Dy,bwo,Ste,vwo,G8e,Zo,qy,Two,md,Fwo,Pte,Cwo,Mwo,$te,Ewo,ywo,wwo,Gy,Awo,Ite,Lwo,Bwo,xwo,Wr,Oy,kwo,jte,Rwo,Swo,fd,Pwo,Nte,$wo,Iwo,Dte,jwo,Nwo,Dwo,qte,qwo,Gwo,Xy,Owo,Ne,zy,Xwo,Gte,zwo,Vwo,Qa,Wwo,Ote,Qwo,Hwo,Xte,Uwo,Jwo,zte,Ywo,Kwo,Zwo,D,J2,Vte,eAo,oAo,BI,rAo,tAo,aAo,Y2,Wte,sAo,nAo,xI,lAo,iAo,dAo,K2,Qte,cAo,mAo,kI,fAo,gAo,hAo,Z2,Hte,uAo,pAo,RI,_Ao,bAo,vAo,ev,Ute,TAo,FAo,SI,CAo,MAo,EAo,ov,Jte,yAo,wAo,PI,AAo,LAo,BAo,rv,Yte,xAo,kAo,$I,RAo,SAo,PAo,tv,Kte,$Ao,IAo,II,jAo,NAo,DAo,av,Zte,qAo,GAo,jI,OAo,XAo,zAo,sv,eae,VAo,WAo,NI,QAo,HAo,UAo,nv,oae,JAo,YAo,DI,KAo,ZAo,e6o,lv,rae,o6o,r6o,qI,t6o,a6o,s6o,iv,tae,n6o,l6o,GI,i6o,d6o,c6o,dv,aae,m6o,f6o,OI,g6o,h6o,u6o,cv,sae,p6o,_6o,XI,b6o,v6o,T6o,mv,nae,F6o,C6o,zI,M6o,E6o,y6o,fv,lae,w6o,A6o,VI,L6o,B6o,x6o,gv,iae,k6o,R6o,WI,S6o,P6o,$6o,hv,dae,I6o,j6o,QI,N6o,D6o,q6o,uv,cae,G6o,O6o,HI,X6o,z6o,V6o,pv,mae,W6o,Q6o,UI,H6o,U6o,J6o,_v,fae,Y6o,K6o,JI,Z6o,e0o,o0o,bv,gae,r0o,t0o,YI,a0o,s0o,n0o,vv,hae,l0o,i0o,KI,d0o,c0o,m0o,Tv,uae,f0o,g0o,ZI,h0o,u0o,p0o,Fv,pae,_0o,b0o,ej,v0o,T0o,F0o,Cv,_ae,C0o,M0o,oj,E0o,y0o,w0o,Mv,bae,A0o,L0o,rj,B0o,x0o,k0o,Ev,vae,R0o,S0o,tj,P0o,$0o,I0o,yv,Tae,j0o,N0o,aj,D0o,q0o,G0o,wv,Fae,O0o,X0o,sj,z0o,V0o,W0o,Av,Cae,Q0o,H0o,nj,U0o,J0o,Y0o,Lv,K0o,Mae,Z0o,eLo,Eae,oLo,rLo,yae,tLo,aLo,Vy,O8e,gd,Bv,wae,Wy,sLo,Aae,nLo,X8e,er,Qy,lLo,hd,iLo,Lae,dLo,cLo,Bae,mLo,fLo,gLo,Hy,hLo,xae,uLo,pLo,_Lo,Qr,Uy,bLo,kae,vLo,TLo,ud,FLo,Rae,CLo,MLo,Sae,ELo,yLo,wLo,Pae,ALo,LLo,Jy,BLo,De,Yy,xLo,$ae,kLo,RLo,Ha,SLo,Iae,PLo,$Lo,jae,ILo,jLo,Nae,NLo,DLo,qLo,R,xv,Dae,GLo,OLo,lj,XLo,zLo,VLo,kv,qae,WLo,QLo,ij,HLo,ULo,JLo,Rv,Gae,YLo,KLo,dj,ZLo,e7o,o7o,Sv,Oae,r7o,t7o,cj,a7o,s7o,n7o,Pv,Xae,l7o,i7o,mj,d7o,c7o,m7o,$v,zae,f7o,g7o,fj,h7o,u7o,p7o,Iv,Vae,_7o,b7o,gj,v7o,T7o,F7o,jv,Wae,C7o,M7o,hj,E7o,y7o,w7o,Nv,Qae,A7o,L7o,uj,B7o,x7o,k7o,Dv,Hae,R7o,S7o,pj,P7o,$7o,I7o,qv,Uae,j7o,N7o,_j,D7o,q7o,G7o,Gv,Jae,O7o,X7o,bj,z7o,V7o,W7o,Ov,Yae,Q7o,H7o,vj,U7o,J7o,Y7o,Xv,Kae,K7o,Z7o,Tj,e8o,o8o,r8o,zv,Zae,t8o,a8o,Fj,s8o,n8o,l8o,Vv,ese,i8o,d8o,Cj,c8o,m8o,f8o,Wv,ose,g8o,h8o,Mj,u8o,p8o,_8o,Qv,rse,b8o,v8o,Ej,T8o,F8o,C8o,Hv,tse,M8o,E8o,yj,y8o,w8o,A8o,Uv,ase,L8o,B8o,wj,x8o,k8o,R8o,Jv,sse,S8o,P8o,Aj,$8o,I8o,j8o,Yv,nse,N8o,D8o,Lj,q8o,G8o,O8o,Kv,lse,X8o,z8o,Bj,V8o,W8o,Q8o,Zv,ise,H8o,U8o,xj,J8o,Y8o,K8o,eT,dse,Z8o,e9o,kj,o9o,r9o,t9o,oT,cse,a9o,s9o,Rj,n9o,l9o,i9o,rT,mse,d9o,c9o,Sj,m9o,f9o,g9o,tT,fse,h9o,u9o,Pj,p9o,_9o,b9o,aT,gse,v9o,T9o,$j,F9o,C9o,M9o,sT,hse,E9o,y9o,Ij,w9o,A9o,L9o,nT,use,B9o,x9o,jj,k9o,R9o,S9o,lT,pse,P9o,$9o,Nj,I9o,j9o,N9o,iT,_se,D9o,q9o,Dj,G9o,O9o,X9o,dT,bse,z9o,V9o,qj,W9o,Q9o,H9o,cT,vse,U9o,J9o,Gj,Y9o,K9o,Z9o,mT,Tse,eBo,oBo,Oj,rBo,tBo,aBo,fT,Fse,sBo,nBo,Xj,lBo,iBo,dBo,gT,Cse,cBo,mBo,zj,fBo,gBo,hBo,hT,uBo,Mse,pBo,_Bo,Ese,bBo,vBo,yse,TBo,FBo,Ky,z8e,pd,uT,wse,Zy,CBo,Ase,MBo,V8e,or,ew,EBo,_d,yBo,Lse,wBo,ABo,Bse,LBo,BBo,xBo,ow,kBo,xse,RBo,SBo,PBo,Hr,rw,$Bo,kse,IBo,jBo,bd,NBo,Rse,DBo,qBo,Sse,GBo,OBo,XBo,Pse,zBo,VBo,tw,WBo,qe,aw,QBo,$se,HBo,UBo,Ua,JBo,Ise,YBo,KBo,jse,ZBo,exo,Nse,oxo,rxo,txo,Dse,pT,qse,axo,sxo,Vj,nxo,lxo,ixo,_T,dxo,Gse,cxo,mxo,Ose,fxo,gxo,Xse,hxo,uxo,sw,W8e,vd,bT,zse,nw,pxo,Vse,_xo,Q8e,rr,lw,bxo,Td,vxo,Wse,Txo,Fxo,Qse,Cxo,Mxo,Exo,iw,yxo,Hse,wxo,Axo,Lxo,Ur,dw,Bxo,Use,xxo,kxo,Fd,Rxo,Jse,Sxo,Pxo,Yse,$xo,Ixo,jxo,Kse,Nxo,Dxo,cw,qxo,Ge,mw,Gxo,Zse,Oxo,Xxo,Ja,zxo,ene,Vxo,Wxo,one,Qxo,Hxo,rne,Uxo,Jxo,Yxo,be,vT,tne,Kxo,Zxo,Wj,eko,oko,rko,TT,ane,tko,ako,Qj,sko,nko,lko,Rn,sne,iko,dko,Hj,cko,mko,Uj,fko,gko,hko,FT,nne,uko,pko,Jj,_ko,bko,vko,la,lne,Tko,Fko,Yj,Cko,Mko,Kj,Eko,yko,Zj,wko,Ako,Lko,CT,ine,Bko,xko,eN,kko,Rko,Sko,MT,dne,Pko,$ko,oN,Iko,jko,Nko,ET,cne,Dko,qko,rN,Gko,Oko,Xko,yT,mne,zko,Vko,tN,Wko,Qko,Hko,wT,Uko,fne,Jko,Yko,gne,Kko,Zko,hne,eRo,oRo,fw,H8e,Cd,AT,une,gw,rRo,pne,tRo,U8e,tr,hw,aRo,Md,sRo,_ne,nRo,lRo,bne,iRo,dRo,cRo,uw,mRo,vne,fRo,gRo,hRo,Jr,pw,uRo,Tne,pRo,_Ro,Ed,bRo,Fne,vRo,TRo,Cne,FRo,CRo,MRo,Mne,ERo,yRo,_w,wRo,Oe,bw,ARo,Ene,LRo,BRo,Ya,xRo,yne,kRo,RRo,wne,SRo,PRo,Ane,$Ro,IRo,jRo,Lne,LT,Bne,NRo,DRo,aN,qRo,GRo,ORo,BT,XRo,xne,zRo,VRo,kne,WRo,QRo,Rne,HRo,URo,vw,J8e,yd,xT,Sne,Tw,JRo,Pne,YRo,Y8e,ar,Fw,KRo,wd,ZRo,$ne,eSo,oSo,Ine,rSo,tSo,aSo,Cw,sSo,jne,nSo,lSo,iSo,Yr,Mw,dSo,Nne,cSo,mSo,Ad,fSo,Dne,gSo,hSo,qne,uSo,pSo,_So,Gne,bSo,vSo,Ew,TSo,Xe,yw,FSo,One,CSo,MSo,Ka,ESo,Xne,ySo,wSo,zne,ASo,LSo,Vne,BSo,xSo,kSo,ao,kT,Wne,RSo,SSo,sN,PSo,$So,ISo,RT,Qne,jSo,NSo,nN,DSo,qSo,GSo,ST,Hne,OSo,XSo,lN,zSo,VSo,WSo,PT,Une,QSo,HSo,iN,USo,JSo,YSo,$T,Jne,KSo,ZSo,dN,ePo,oPo,rPo,IT,Yne,tPo,aPo,cN,sPo,nPo,lPo,jT,Kne,iPo,dPo,mN,cPo,mPo,fPo,NT,gPo,Zne,hPo,uPo,ele,pPo,_Po,ole,bPo,vPo,ww,K8e,Ld,DT,rle,Aw,TPo,tle,FPo,Z8e,sr,Lw,CPo,Bd,MPo,ale,EPo,yPo,sle,wPo,APo,LPo,Bw,BPo,nle,xPo,kPo,RPo,Kr,xw,SPo,lle,PPo,$Po,xd,IPo,ile,jPo,NPo,dle,DPo,qPo,GPo,cle,OPo,XPo,kw,zPo,ze,Rw,VPo,mle,WPo,QPo,Za,HPo,fle,UPo,JPo,gle,YPo,KPo,hle,ZPo,e$o,o$o,kd,qT,ule,r$o,t$o,fN,a$o,s$o,n$o,GT,ple,l$o,i$o,gN,d$o,c$o,m$o,OT,_le,f$o,g$o,hN,h$o,u$o,p$o,XT,_$o,ble,b$o,v$o,vle,T$o,F$o,Tle,C$o,M$o,Sw,e9e,Rd,zT,Fle,Pw,E$o,Cle,y$o,o9e,nr,$w,w$o,Sd,A$o,Mle,L$o,B$o,Ele,x$o,k$o,R$o,Iw,S$o,yle,P$o,$$o,I$o,Zr,jw,j$o,wle,N$o,D$o,Pd,q$o,Ale,G$o,O$o,Lle,X$o,z$o,V$o,Ble,W$o,Q$o,Nw,H$o,Ve,Dw,U$o,xle,J$o,Y$o,es,K$o,kle,Z$o,eIo,Rle,oIo,rIo,Sle,tIo,aIo,sIo,so,VT,Ple,nIo,lIo,uN,iIo,dIo,cIo,WT,$le,mIo,fIo,pN,gIo,hIo,uIo,QT,Ile,pIo,_Io,_N,bIo,vIo,TIo,HT,jle,FIo,CIo,bN,MIo,EIo,yIo,UT,Nle,wIo,AIo,vN,LIo,BIo,xIo,JT,Dle,kIo,RIo,TN,SIo,PIo,$Io,YT,qle,IIo,jIo,FN,NIo,DIo,qIo,KT,GIo,Gle,OIo,XIo,Ole,zIo,VIo,Xle,WIo,QIo,qw,r9e,$d,ZT,zle,Gw,HIo,Vle,UIo,t9e,lr,Ow,JIo,Id,YIo,Wle,KIo,ZIo,Qle,ejo,ojo,rjo,Xw,tjo,Hle,ajo,sjo,njo,et,zw,ljo,Ule,ijo,djo,jd,cjo,Jle,mjo,fjo,Yle,gjo,hjo,ujo,Kle,pjo,_jo,Vw,bjo,We,Ww,vjo,Zle,Tjo,Fjo,os,Cjo,eie,Mjo,Ejo,oie,yjo,wjo,rie,Ajo,Ljo,Bjo,Qw,e1,tie,xjo,kjo,CN,Rjo,Sjo,Pjo,o1,aie,$jo,Ijo,MN,jjo,Njo,Djo,r1,qjo,sie,Gjo,Ojo,nie,Xjo,zjo,lie,Vjo,Wjo,Hw,a9e,Nd,t1,iie,Uw,Qjo,die,Hjo,s9e,ir,Jw,Ujo,Dd,Jjo,cie,Yjo,Kjo,mie,Zjo,eNo,oNo,Yw,rNo,fie,tNo,aNo,sNo,ot,Kw,nNo,gie,lNo,iNo,qd,dNo,hie,cNo,mNo,uie,fNo,gNo,hNo,pie,uNo,pNo,Zw,_No,Qe,eA,bNo,_ie,vNo,TNo,rs,FNo,bie,CNo,MNo,vie,ENo,yNo,Tie,wNo,ANo,LNo,Gd,a1,Fie,BNo,xNo,EN,kNo,RNo,SNo,s1,Cie,PNo,$No,yN,INo,jNo,NNo,n1,Mie,DNo,qNo,wN,GNo,ONo,XNo,l1,zNo,Eie,VNo,WNo,yie,QNo,HNo,wie,UNo,JNo,oA,n9e,Od,i1,Aie,rA,YNo,Lie,KNo,l9e,dr,tA,ZNo,Xd,eDo,Bie,oDo,rDo,xie,tDo,aDo,sDo,aA,nDo,kie,lDo,iDo,dDo,rt,sA,cDo,Rie,mDo,fDo,zd,gDo,Sie,hDo,uDo,Pie,pDo,_Do,bDo,$ie,vDo,TDo,nA,FDo,He,lA,CDo,Iie,MDo,EDo,ts,yDo,jie,wDo,ADo,Nie,LDo,BDo,Die,xDo,kDo,RDo,Vd,d1,qie,SDo,PDo,AN,$Do,IDo,jDo,c1,Gie,NDo,DDo,LN,qDo,GDo,ODo,m1,Oie,XDo,zDo,BN,VDo,WDo,QDo,f1,HDo,Xie,UDo,JDo,zie,YDo,KDo,Vie,ZDo,eqo,iA,i9e,Wd,g1,Wie,dA,oqo,Qie,rqo,d9e,cr,cA,tqo,Qd,aqo,Hie,sqo,nqo,Uie,lqo,iqo,dqo,mA,cqo,Jie,mqo,fqo,gqo,tt,fA,hqo,Yie,uqo,pqo,Hd,_qo,Kie,bqo,vqo,Zie,Tqo,Fqo,Cqo,ede,Mqo,Eqo,gA,yqo,Ue,hA,wqo,ode,Aqo,Lqo,as,Bqo,rde,xqo,kqo,tde,Rqo,Sqo,ade,Pqo,$qo,Iqo,sde,h1,nde,jqo,Nqo,xN,Dqo,qqo,Gqo,u1,Oqo,lde,Xqo,zqo,ide,Vqo,Wqo,dde,Qqo,Hqo,uA,c9e,Ud,p1,cde,pA,Uqo,mde,Jqo,m9e,mr,_A,Yqo,Jd,Kqo,fde,Zqo,eGo,gde,oGo,rGo,tGo,bA,aGo,hde,sGo,nGo,lGo,at,vA,iGo,ude,dGo,cGo,Yd,mGo,pde,fGo,gGo,_de,hGo,uGo,pGo,bde,_Go,bGo,TA,vGo,Je,FA,TGo,vde,FGo,CGo,ss,MGo,Tde,EGo,yGo,Fde,wGo,AGo,Cde,LGo,BGo,xGo,Mde,_1,Ede,kGo,RGo,kN,SGo,PGo,$Go,b1,IGo,yde,jGo,NGo,wde,DGo,qGo,Ade,GGo,OGo,CA,f9e,Kd,v1,Lde,MA,XGo,Bde,zGo,g9e,fr,EA,VGo,Zd,WGo,xde,QGo,HGo,kde,UGo,JGo,YGo,yA,KGo,Rde,ZGo,eOo,oOo,st,wA,rOo,Sde,tOo,aOo,ec,sOo,Pde,nOo,lOo,$de,iOo,dOo,cOo,Ide,mOo,fOo,AA,gOo,Ye,LA,hOo,jde,uOo,pOo,ns,_Oo,Nde,bOo,vOo,Dde,TOo,FOo,qde,COo,MOo,EOo,BA,T1,Gde,yOo,wOo,RN,AOo,LOo,BOo,F1,Ode,xOo,kOo,SN,ROo,SOo,POo,C1,$Oo,Xde,IOo,jOo,zde,NOo,DOo,Vde,qOo,GOo,xA,h9e,oc,M1,Wde,kA,OOo,Qde,XOo,u9e,gr,RA,zOo,rc,VOo,Hde,WOo,QOo,Ude,HOo,UOo,JOo,SA,YOo,Jde,KOo,ZOo,eXo,nt,PA,oXo,Yde,rXo,tXo,tc,aXo,Kde,sXo,nXo,Zde,lXo,iXo,dXo,ece,cXo,mXo,$A,fXo,go,IA,gXo,oce,hXo,uXo,ls,pXo,rce,_Xo,bXo,tce,vXo,TXo,ace,FXo,CXo,MXo,B,E1,sce,EXo,yXo,PN,wXo,AXo,LXo,y1,nce,BXo,xXo,$N,kXo,RXo,SXo,w1,lce,PXo,$Xo,IN,IXo,jXo,NXo,A1,ice,DXo,qXo,jN,GXo,OXo,XXo,L1,dce,zXo,VXo,NN,WXo,QXo,HXo,B1,cce,UXo,JXo,DN,YXo,KXo,ZXo,x1,mce,ezo,ozo,qN,rzo,tzo,azo,k1,fce,szo,nzo,GN,lzo,izo,dzo,R1,gce,czo,mzo,ON,fzo,gzo,hzo,S1,hce,uzo,pzo,XN,_zo,bzo,vzo,P1,uce,Tzo,Fzo,zN,Czo,Mzo,Ezo,$1,pce,yzo,wzo,VN,Azo,Lzo,Bzo,I1,_ce,xzo,kzo,WN,Rzo,Szo,Pzo,j1,bce,$zo,Izo,QN,jzo,Nzo,Dzo,N1,vce,qzo,Gzo,HN,Ozo,Xzo,zzo,D1,Tce,Vzo,Wzo,UN,Qzo,Hzo,Uzo,Sn,Fce,Jzo,Yzo,JN,Kzo,Zzo,YN,eVo,oVo,rVo,q1,Cce,tVo,aVo,KN,sVo,nVo,lVo,G1,Mce,iVo,dVo,ZN,cVo,mVo,fVo,O1,Ece,gVo,hVo,eD,uVo,pVo,_Vo,X1,yce,bVo,vVo,oD,TVo,FVo,CVo,z1,wce,MVo,EVo,rD,yVo,wVo,AVo,V1,Ace,LVo,BVo,tD,xVo,kVo,RVo,W1,Lce,SVo,PVo,aD,$Vo,IVo,jVo,Q1,Bce,NVo,DVo,sD,qVo,GVo,OVo,H1,xce,XVo,zVo,nD,VVo,WVo,QVo,U1,kce,HVo,UVo,lD,JVo,YVo,KVo,J1,Rce,ZVo,eWo,iD,oWo,rWo,tWo,Y1,Sce,aWo,sWo,dD,nWo,lWo,iWo,K1,Pce,dWo,cWo,cD,mWo,fWo,gWo,Z1,$ce,hWo,uWo,mD,pWo,_Wo,bWo,eF,Ice,vWo,TWo,fD,FWo,CWo,MWo,oF,jce,EWo,yWo,gD,wWo,AWo,LWo,rF,Nce,BWo,xWo,hD,kWo,RWo,SWo,tF,Dce,PWo,$Wo,uD,IWo,jWo,NWo,aF,qce,DWo,qWo,pD,GWo,OWo,XWo,sF,Gce,zWo,VWo,_D,WWo,QWo,HWo,nF,Oce,UWo,JWo,bD,YWo,KWo,ZWo,lF,Xce,eQo,oQo,vD,rQo,tQo,aQo,iF,zce,sQo,nQo,TD,lQo,iQo,dQo,dF,Vce,cQo,mQo,FD,fQo,gQo,hQo,cF,Wce,uQo,pQo,CD,_Qo,bQo,vQo,Qce,TQo,FQo,jA,p9e,ac,mF,Hce,NA,CQo,Uce,MQo,_9e,hr,DA,EQo,sc,yQo,Jce,wQo,AQo,Yce,LQo,BQo,xQo,qA,kQo,Kce,RQo,SQo,PQo,lt,GA,$Qo,Zce,IQo,jQo,nc,NQo,eme,DQo,qQo,ome,GQo,OQo,XQo,rme,zQo,VQo,OA,WQo,ho,XA,QQo,tme,HQo,UQo,is,JQo,ame,YQo,KQo,sme,ZQo,eHo,nme,oHo,rHo,tHo,H,fF,lme,aHo,sHo,MD,nHo,lHo,iHo,gF,ime,dHo,cHo,ED,mHo,fHo,gHo,hF,dme,hHo,uHo,yD,pHo,_Ho,bHo,uF,cme,vHo,THo,wD,FHo,CHo,MHo,pF,mme,EHo,yHo,AD,wHo,AHo,LHo,_F,fme,BHo,xHo,LD,kHo,RHo,SHo,bF,gme,PHo,$Ho,BD,IHo,jHo,NHo,vF,hme,DHo,qHo,xD,GHo,OHo,XHo,TF,ume,zHo,VHo,kD,WHo,QHo,HHo,FF,pme,UHo,JHo,RD,YHo,KHo,ZHo,CF,_me,eUo,oUo,SD,rUo,tUo,aUo,MF,bme,sUo,nUo,PD,lUo,iUo,dUo,EF,vme,cUo,mUo,$D,fUo,gUo,hUo,yF,Tme,uUo,pUo,ID,_Uo,bUo,vUo,wF,Fme,TUo,FUo,jD,CUo,MUo,EUo,AF,Cme,yUo,wUo,ND,AUo,LUo,BUo,LF,Mme,xUo,kUo,DD,RUo,SUo,PUo,BF,Eme,$Uo,IUo,qD,jUo,NUo,DUo,xF,yme,qUo,GUo,GD,OUo,XUo,zUo,kF,wme,VUo,WUo,OD,QUo,HUo,UUo,RF,Ame,JUo,YUo,XD,KUo,ZUo,eJo,SF,Lme,oJo,rJo,zD,tJo,aJo,sJo,Bme,nJo,lJo,zA,b9e,lc,PF,xme,VA,iJo,kme,dJo,v9e,ur,WA,cJo,ic,mJo,Rme,fJo,gJo,Sme,hJo,uJo,pJo,QA,_Jo,Pme,bJo,vJo,TJo,it,HA,FJo,$me,CJo,MJo,dc,EJo,Ime,yJo,wJo,jme,AJo,LJo,BJo,Nme,xJo,kJo,UA,RJo,uo,JA,SJo,Dme,PJo,$Jo,ds,IJo,qme,jJo,NJo,Gme,DJo,qJo,Ome,GJo,OJo,XJo,he,$F,Xme,zJo,VJo,VD,WJo,QJo,HJo,IF,zme,UJo,JJo,WD,YJo,KJo,ZJo,jF,Vme,eYo,oYo,QD,rYo,tYo,aYo,NF,Wme,sYo,nYo,HD,lYo,iYo,dYo,DF,Qme,cYo,mYo,UD,fYo,gYo,hYo,qF,Hme,uYo,pYo,JD,_Yo,bYo,vYo,GF,Ume,TYo,FYo,YD,CYo,MYo,EYo,OF,Jme,yYo,wYo,KD,AYo,LYo,BYo,XF,Yme,xYo,kYo,ZD,RYo,SYo,PYo,zF,Kme,$Yo,IYo,eq,jYo,NYo,DYo,Zme,qYo,GYo,YA,T9e,cc,VF,efe,KA,OYo,ofe,XYo,F9e,pr,ZA,zYo,mc,VYo,rfe,WYo,QYo,tfe,HYo,UYo,JYo,e6,YYo,afe,KYo,ZYo,eKo,dt,o6,oKo,sfe,rKo,tKo,fc,aKo,nfe,sKo,nKo,lfe,lKo,iKo,dKo,ife,cKo,mKo,r6,fKo,po,t6,gKo,dfe,hKo,uKo,cs,pKo,cfe,_Ko,bKo,mfe,vKo,TKo,ffe,FKo,CKo,MKo,a6,WF,gfe,EKo,yKo,oq,wKo,AKo,LKo,QF,hfe,BKo,xKo,rq,kKo,RKo,SKo,ufe,PKo,$Ko,s6,C9e,gc,HF,pfe,n6,IKo,_fe,jKo,M9e,_r,l6,NKo,hc,DKo,bfe,qKo,GKo,vfe,OKo,XKo,zKo,i6,VKo,Tfe,WKo,QKo,HKo,ct,d6,UKo,Ffe,JKo,YKo,uc,KKo,Cfe,ZKo,eZo,Mfe,oZo,rZo,tZo,Efe,aZo,sZo,c6,nZo,_o,m6,lZo,yfe,iZo,dZo,ms,cZo,wfe,mZo,fZo,Afe,gZo,hZo,Lfe,uZo,pZo,_Zo,Y,UF,Bfe,bZo,vZo,tq,TZo,FZo,CZo,JF,xfe,MZo,EZo,aq,yZo,wZo,AZo,YF,kfe,LZo,BZo,sq,xZo,kZo,RZo,KF,Rfe,SZo,PZo,nq,$Zo,IZo,jZo,ZF,Sfe,NZo,DZo,lq,qZo,GZo,OZo,eC,Pfe,XZo,zZo,iq,VZo,WZo,QZo,oC,$fe,HZo,UZo,dq,JZo,YZo,KZo,rC,Ife,ZZo,eer,cq,oer,rer,ter,tC,jfe,aer,ser,mq,ner,ler,ier,aC,Nfe,der,cer,fq,mer,fer,ger,sC,Dfe,her,uer,gq,per,_er,ber,nC,qfe,ver,Ter,hq,Fer,Cer,Mer,lC,Gfe,Eer,yer,uq,wer,Aer,Ler,iC,Ofe,Ber,xer,pq,ker,Rer,Ser,dC,Xfe,Per,$er,_q,Ier,jer,Ner,cC,zfe,Der,qer,bq,Ger,Oer,Xer,mC,Vfe,zer,Ver,vq,Wer,Qer,Her,fC,Wfe,Uer,Jer,Tq,Yer,Ker,Zer,gC,Qfe,eor,oor,Fq,ror,tor,aor,hC,Hfe,sor,nor,Cq,lor,ior,dor,Ufe,cor,mor,f6,E9e,pc,uC,Jfe,g6,gor,Yfe,hor,y9e,br,h6,uor,_c,por,Kfe,_or,bor,Zfe,vor,Tor,For,u6,Cor,ege,Mor,Eor,yor,mt,p6,wor,oge,Aor,Lor,bc,Bor,rge,xor,kor,tge,Ror,Sor,Por,age,$or,Ior,_6,jor,bo,b6,Nor,sge,Dor,qor,fs,Gor,nge,Oor,Xor,lge,zor,Vor,ige,Wor,Qor,Hor,ue,pC,dge,Uor,Jor,Mq,Yor,Kor,Zor,_C,cge,err,orr,Eq,rrr,trr,arr,bC,mge,srr,nrr,yq,lrr,irr,drr,vC,fge,crr,mrr,wq,frr,grr,hrr,TC,gge,urr,prr,Aq,_rr,brr,vrr,FC,hge,Trr,Frr,Lq,Crr,Mrr,Err,CC,uge,yrr,wrr,Bq,Arr,Lrr,Brr,MC,pge,xrr,krr,xq,Rrr,Srr,Prr,EC,_ge,$rr,Irr,kq,jrr,Nrr,Drr,yC,bge,qrr,Grr,Rq,Orr,Xrr,zrr,vge,Vrr,Wrr,v6,w9e,vc,wC,Tge,T6,Qrr,Fge,Hrr,A9e,vr,F6,Urr,Tc,Jrr,Cge,Yrr,Krr,Mge,Zrr,etr,otr,C6,rtr,Ege,ttr,atr,str,ft,M6,ntr,yge,ltr,itr,Fc,dtr,wge,ctr,mtr,Age,ftr,gtr,htr,Lge,utr,ptr,E6,_tr,vo,y6,btr,Bge,vtr,Ttr,gs,Ftr,xge,Ctr,Mtr,kge,Etr,ytr,Rge,wtr,Atr,Ltr,X,AC,Sge,Btr,xtr,Sq,ktr,Rtr,Str,LC,Pge,Ptr,$tr,Pq,Itr,jtr,Ntr,BC,$ge,Dtr,qtr,$q,Gtr,Otr,Xtr,xC,Ige,ztr,Vtr,Iq,Wtr,Qtr,Htr,kC,jge,Utr,Jtr,jq,Ytr,Ktr,Ztr,RC,Nge,ear,oar,Nq,rar,tar,aar,SC,Dge,sar,nar,Dq,lar,iar,dar,PC,qge,car,mar,qq,far,gar,har,$C,Gge,uar,par,Gq,_ar,bar,Tar,IC,Oge,Far,Car,Oq,Mar,Ear,yar,jC,Xge,war,Aar,Xq,Lar,Bar,xar,NC,zge,kar,Rar,zq,Sar,Par,$ar,DC,Vge,Iar,jar,Vq,Nar,Dar,qar,qC,Wge,Gar,Oar,Wq,Xar,zar,Var,GC,Qge,War,Qar,Qq,Har,Uar,Jar,OC,Hge,Yar,Kar,Hq,Zar,esr,osr,XC,Uge,rsr,tsr,Uq,asr,ssr,nsr,zC,Jge,lsr,isr,Jq,dsr,csr,msr,VC,Yge,fsr,gsr,Yq,hsr,usr,psr,WC,Kge,_sr,bsr,Kq,vsr,Tsr,Fsr,QC,Zge,Csr,Msr,Zq,Esr,ysr,wsr,HC,ehe,Asr,Lsr,eG,Bsr,xsr,ksr,UC,ohe,Rsr,Ssr,oG,Psr,$sr,Isr,JC,rhe,jsr,Nsr,rG,Dsr,qsr,Gsr,YC,the,Osr,Xsr,tG,zsr,Vsr,Wsr,ahe,Qsr,Hsr,w6,L9e,Cc,KC,she,A6,Usr,nhe,Jsr,B9e,Tr,L6,Ysr,Mc,Ksr,lhe,Zsr,enr,ihe,onr,rnr,tnr,B6,anr,dhe,snr,nnr,lnr,gt,x6,inr,che,dnr,cnr,Ec,mnr,mhe,fnr,gnr,fhe,hnr,unr,pnr,ghe,_nr,bnr,k6,vnr,To,R6,Tnr,hhe,Fnr,Cnr,hs,Mnr,uhe,Enr,ynr,phe,wnr,Anr,_he,Lnr,Bnr,xnr,te,ZC,bhe,knr,Rnr,aG,Snr,Pnr,$nr,e4,vhe,Inr,jnr,sG,Nnr,Dnr,qnr,o4,The,Gnr,Onr,nG,Xnr,znr,Vnr,r4,Fhe,Wnr,Qnr,lG,Hnr,Unr,Jnr,t4,Che,Ynr,Knr,iG,Znr,elr,olr,a4,Mhe,rlr,tlr,dG,alr,slr,nlr,s4,Ehe,llr,ilr,cG,dlr,clr,mlr,n4,yhe,flr,glr,mG,hlr,ulr,plr,l4,whe,_lr,blr,fG,vlr,Tlr,Flr,i4,Ahe,Clr,Mlr,gG,Elr,ylr,wlr,d4,Lhe,Alr,Llr,hG,Blr,xlr,klr,c4,Bhe,Rlr,Slr,uG,Plr,$lr,Ilr,m4,xhe,jlr,Nlr,pG,Dlr,qlr,Glr,f4,khe,Olr,Xlr,_G,zlr,Vlr,Wlr,g4,Rhe,Qlr,Hlr,bG,Ulr,Jlr,Ylr,h4,She,Klr,Zlr,vG,eir,oir,rir,u4,Phe,tir,air,TG,sir,nir,lir,$he,iir,dir,S6,x9e,yc,p4,Ihe,P6,cir,jhe,mir,k9e,Fr,$6,fir,wc,gir,Nhe,hir,uir,Dhe,pir,_ir,bir,I6,vir,qhe,Tir,Fir,Cir,ht,j6,Mir,Ghe,Eir,yir,Ac,wir,Ohe,Air,Lir,Xhe,Bir,xir,kir,zhe,Rir,Sir,N6,Pir,Fo,D6,$ir,Vhe,Iir,jir,us,Nir,Whe,Dir,qir,Qhe,Gir,Oir,Hhe,Xir,zir,Vir,Uhe,_4,Jhe,Wir,Qir,FG,Hir,Uir,Jir,Yhe,Yir,Kir,q6,R9e,Lc,b4,Khe,G6,Zir,Zhe,edr,S9e,Cr,O6,odr,Bc,rdr,eue,tdr,adr,oue,sdr,ndr,ldr,X6,idr,rue,ddr,cdr,mdr,ut,z6,fdr,tue,gdr,hdr,xc,udr,aue,pdr,_dr,sue,bdr,vdr,Tdr,nue,Fdr,Cdr,V6,Mdr,Co,W6,Edr,lue,ydr,wdr,ps,Adr,iue,Ldr,Bdr,due,xdr,kdr,cue,Rdr,Sdr,Pdr,K,v4,mue,$dr,Idr,CG,jdr,Ndr,Ddr,T4,fue,qdr,Gdr,MG,Odr,Xdr,zdr,F4,gue,Vdr,Wdr,EG,Qdr,Hdr,Udr,C4,hue,Jdr,Ydr,yG,Kdr,Zdr,ecr,M4,uue,ocr,rcr,wG,tcr,acr,scr,E4,pue,ncr,lcr,AG,icr,dcr,ccr,y4,_ue,mcr,fcr,LG,gcr,hcr,ucr,w4,bue,pcr,_cr,BG,bcr,vcr,Tcr,A4,vue,Fcr,Ccr,xG,Mcr,Ecr,ycr,L4,Tue,wcr,Acr,kG,Lcr,Bcr,xcr,B4,Fue,kcr,Rcr,RG,Scr,Pcr,$cr,x4,Cue,Icr,jcr,SG,Ncr,Dcr,qcr,k4,Mue,Gcr,Ocr,PG,Xcr,zcr,Vcr,R4,Eue,Wcr,Qcr,$G,Hcr,Ucr,Jcr,S4,yue,Ycr,Kcr,IG,Zcr,emr,omr,P4,wue,rmr,tmr,jG,amr,smr,nmr,$4,Aue,lmr,imr,NG,dmr,cmr,mmr,I4,Lue,fmr,gmr,DG,hmr,umr,pmr,j4,Bue,_mr,bmr,qG,vmr,Tmr,Fmr,N4,xue,Cmr,Mmr,GG,Emr,ymr,wmr,kue,Amr,Lmr,Q6,P9e,kc,D4,Rue,H6,Bmr,Sue,xmr,$9e,Mr,U6,kmr,Rc,Rmr,Pue,Smr,Pmr,$ue,$mr,Imr,jmr,J6,Nmr,Iue,Dmr,qmr,Gmr,pt,Y6,Omr,jue,Xmr,zmr,Sc,Vmr,Nue,Wmr,Qmr,Due,Hmr,Umr,Jmr,que,Ymr,Kmr,K6,Zmr,Mo,Z6,efr,Gue,ofr,rfr,_s,tfr,Oue,afr,sfr,Xue,nfr,lfr,zue,ifr,dfr,cfr,Z,q4,Vue,mfr,ffr,OG,gfr,hfr,ufr,G4,Wue,pfr,_fr,XG,bfr,vfr,Tfr,O4,Que,Ffr,Cfr,zG,Mfr,Efr,yfr,X4,Hue,wfr,Afr,VG,Lfr,Bfr,xfr,z4,Uue,kfr,Rfr,WG,Sfr,Pfr,$fr,V4,Jue,Ifr,jfr,QG,Nfr,Dfr,qfr,W4,Yue,Gfr,Ofr,HG,Xfr,zfr,Vfr,Q4,Kue,Wfr,Qfr,UG,Hfr,Ufr,Jfr,H4,Zue,Yfr,Kfr,JG,Zfr,egr,ogr,U4,epe,rgr,tgr,YG,agr,sgr,ngr,J4,ope,lgr,igr,KG,dgr,cgr,mgr,Y4,rpe,fgr,ggr,ZG,hgr,ugr,pgr,K4,tpe,_gr,bgr,eO,vgr,Tgr,Fgr,Z4,ape,Cgr,Mgr,oO,Egr,ygr,wgr,eM,spe,Agr,Lgr,rO,Bgr,xgr,kgr,oM,npe,Rgr,Sgr,tO,Pgr,$gr,Igr,rM,lpe,jgr,Ngr,aO,Dgr,qgr,Ggr,tM,ipe,Ogr,Xgr,sO,zgr,Vgr,Wgr,aM,dpe,Qgr,Hgr,nO,Ugr,Jgr,Ygr,cpe,Kgr,Zgr,e0,I9e,Pc,sM,mpe,o0,ehr,fpe,ohr,j9e,Er,r0,rhr,$c,thr,gpe,ahr,shr,hpe,nhr,lhr,ihr,t0,dhr,upe,chr,mhr,fhr,_t,a0,ghr,ppe,hhr,uhr,Ic,phr,_pe,_hr,bhr,bpe,vhr,Thr,Fhr,vpe,Chr,Mhr,s0,Ehr,Eo,n0,yhr,Tpe,whr,Ahr,bs,Lhr,Fpe,Bhr,xhr,Cpe,khr,Rhr,Mpe,Shr,Phr,$hr,Epe,nM,ype,Ihr,jhr,lO,Nhr,Dhr,qhr,wpe,Ghr,Ohr,l0,N9e,jc,lM,Ape,i0,Xhr,Lpe,zhr,D9e,yr,d0,Vhr,Nc,Whr,Bpe,Qhr,Hhr,xpe,Uhr,Jhr,Yhr,c0,Khr,kpe,Zhr,eur,our,bt,m0,rur,Rpe,tur,aur,Dc,sur,Spe,nur,lur,Ppe,iur,dur,cur,$pe,mur,fur,f0,gur,yo,g0,hur,Ipe,uur,pur,vs,_ur,jpe,bur,vur,Npe,Tur,Fur,Dpe,Cur,Mur,Eur,qpe,iM,Gpe,yur,wur,iO,Aur,Lur,Bur,Ope,xur,kur,h0,q9e,qc,dM,Xpe,u0,Rur,zpe,Sur,G9e,wr,p0,Pur,Gc,$ur,Vpe,Iur,jur,Wpe,Nur,Dur,qur,_0,Gur,Qpe,Our,Xur,zur,vt,b0,Vur,Hpe,Wur,Qur,Oc,Hur,Upe,Uur,Jur,Jpe,Yur,Kur,Zur,Ype,epr,opr,v0,rpr,wo,T0,tpr,Kpe,apr,spr,Ts,npr,Zpe,lpr,ipr,e_e,dpr,cpr,o_e,mpr,fpr,gpr,V,cM,r_e,hpr,upr,dO,ppr,_pr,bpr,mM,t_e,vpr,Tpr,cO,Fpr,Cpr,Mpr,fM,a_e,Epr,ypr,mO,wpr,Apr,Lpr,gM,s_e,Bpr,xpr,fO,kpr,Rpr,Spr,hM,n_e,Ppr,$pr,gO,Ipr,jpr,Npr,uM,l_e,Dpr,qpr,hO,Gpr,Opr,Xpr,pM,i_e,zpr,Vpr,uO,Wpr,Qpr,Hpr,_M,d_e,Upr,Jpr,pO,Ypr,Kpr,Zpr,bM,c_e,e_r,o_r,_O,r_r,t_r,a_r,vM,m_e,s_r,n_r,bO,l_r,i_r,d_r,TM,f_e,c_r,m_r,vO,f_r,g_r,h_r,FM,g_e,u_r,p_r,TO,__r,b_r,v_r,CM,h_e,T_r,F_r,FO,C_r,M_r,E_r,MM,u_e,y_r,w_r,CO,A_r,L_r,B_r,EM,p_e,x_r,k_r,MO,R_r,S_r,P_r,yM,__e,$_r,I_r,EO,j_r,N_r,D_r,wM,b_e,q_r,G_r,yO,O_r,X_r,z_r,AM,v_e,V_r,W_r,wO,Q_r,H_r,U_r,LM,T_e,J_r,Y_r,AO,K_r,Z_r,ebr,BM,F_e,obr,rbr,LO,tbr,abr,sbr,xM,C_e,nbr,lbr,BO,ibr,dbr,cbr,kM,M_e,mbr,fbr,xO,gbr,hbr,ubr,RM,E_e,pbr,_br,kO,bbr,vbr,Tbr,SM,y_e,Fbr,Cbr,RO,Mbr,Ebr,ybr,w_e,wbr,Abr,F0,O9e,Xc,PM,A_e,C0,Lbr,L_e,Bbr,X9e,Ar,M0,xbr,zc,kbr,B_e,Rbr,Sbr,x_e,Pbr,$br,Ibr,E0,jbr,k_e,Nbr,Dbr,qbr,Tt,y0,Gbr,R_e,Obr,Xbr,Vc,zbr,S_e,Vbr,Wbr,P_e,Qbr,Hbr,Ubr,$_e,Jbr,Ybr,w0,Kbr,Ao,A0,Zbr,I_e,e2r,o2r,Fs,r2r,j_e,t2r,a2r,N_e,s2r,n2r,D_e,l2r,i2r,d2r,Cs,$M,q_e,c2r,m2r,SO,f2r,g2r,h2r,IM,G_e,u2r,p2r,PO,_2r,b2r,v2r,jM,O_e,T2r,F2r,$O,C2r,M2r,E2r,NM,X_e,y2r,w2r,IO,A2r,L2r,B2r,z_e,x2r,k2r,L0,z9e,Wc,DM,V_e,B0,R2r,W_e,S2r,V9e,Lr,x0,P2r,Qc,$2r,Q_e,I2r,j2r,H_e,N2r,D2r,q2r,k0,G2r,U_e,O2r,X2r,z2r,Ft,R0,V2r,J_e,W2r,Q2r,Hc,H2r,Y_e,U2r,J2r,K_e,Y2r,K2r,Z2r,Z_e,evr,ovr,S0,rvr,Lo,P0,tvr,ebe,avr,svr,Ms,nvr,obe,lvr,ivr,rbe,dvr,cvr,tbe,mvr,fvr,gvr,me,qM,abe,hvr,uvr,jO,pvr,_vr,bvr,GM,sbe,vvr,Tvr,NO,Fvr,Cvr,Mvr,OM,nbe,Evr,yvr,DO,wvr,Avr,Lvr,XM,lbe,Bvr,xvr,qO,kvr,Rvr,Svr,zM,ibe,Pvr,$vr,GO,Ivr,jvr,Nvr,VM,dbe,Dvr,qvr,OO,Gvr,Ovr,Xvr,WM,cbe,zvr,Vvr,XO,Wvr,Qvr,Hvr,QM,mbe,Uvr,Jvr,zO,Yvr,Kvr,Zvr,HM,fbe,eTr,oTr,VO,rTr,tTr,aTr,UM,gbe,sTr,nTr,WO,lTr,iTr,dTr,JM,hbe,cTr,mTr,QO,fTr,gTr,hTr,ube,uTr,pTr,$0,W9e,Uc,YM,pbe,I0,_Tr,_be,bTr,Q9e,Br,j0,vTr,Jc,TTr,bbe,FTr,CTr,vbe,MTr,ETr,yTr,N0,wTr,Tbe,ATr,LTr,BTr,Ct,D0,xTr,Fbe,kTr,RTr,Yc,STr,Cbe,PTr,$Tr,Mbe,ITr,jTr,NTr,Ebe,DTr,qTr,q0,GTr,Bo,G0,OTr,ybe,XTr,zTr,Es,VTr,wbe,WTr,QTr,Abe,HTr,UTr,Lbe,JTr,YTr,KTr,ve,KM,Bbe,ZTr,e1r,HO,o1r,r1r,t1r,ZM,xbe,a1r,s1r,UO,n1r,l1r,i1r,eE,kbe,d1r,c1r,JO,m1r,f1r,g1r,oE,Rbe,h1r,u1r,YO,p1r,_1r,b1r,rE,Sbe,v1r,T1r,KO,F1r,C1r,M1r,tE,Pbe,E1r,y1r,ZO,w1r,A1r,L1r,aE,$be,B1r,x1r,eX,k1r,R1r,S1r,sE,Ibe,P1r,$1r,oX,I1r,j1r,N1r,nE,jbe,D1r,q1r,rX,G1r,O1r,X1r,Nbe,z1r,V1r,O0,H9e,Kc,lE,Dbe,X0,W1r,qbe,Q1r,U9e,xr,z0,H1r,Zc,U1r,Gbe,J1r,Y1r,Obe,K1r,Z1r,eFr,V0,oFr,Xbe,rFr,tFr,aFr,Mt,W0,sFr,zbe,nFr,lFr,em,iFr,Vbe,dFr,cFr,Wbe,mFr,fFr,gFr,Qbe,hFr,uFr,Q0,pFr,xo,H0,_Fr,Hbe,bFr,vFr,ys,TFr,Ube,FFr,CFr,Jbe,MFr,EFr,Ybe,yFr,wFr,AFr,Te,iE,Kbe,LFr,BFr,tX,xFr,kFr,RFr,dE,Zbe,SFr,PFr,aX,$Fr,IFr,jFr,cE,e2e,NFr,DFr,sX,qFr,GFr,OFr,mE,o2e,XFr,zFr,nX,VFr,WFr,QFr,fE,r2e,HFr,UFr,lX,JFr,YFr,KFr,gE,t2e,ZFr,eCr,iX,oCr,rCr,tCr,hE,a2e,aCr,sCr,dX,nCr,lCr,iCr,uE,s2e,dCr,cCr,cX,mCr,fCr,gCr,pE,n2e,hCr,uCr,mX,pCr,_Cr,bCr,l2e,vCr,TCr,U0,J9e,om,_E,i2e,J0,FCr,d2e,CCr,Y9e,kr,Y0,MCr,rm,ECr,c2e,yCr,wCr,m2e,ACr,LCr,BCr,K0,xCr,f2e,kCr,RCr,SCr,Et,Z0,PCr,g2e,$Cr,ICr,tm,jCr,h2e,NCr,DCr,u2e,qCr,GCr,OCr,p2e,XCr,zCr,eL,VCr,ko,oL,WCr,_2e,QCr,HCr,ws,UCr,b2e,JCr,YCr,v2e,KCr,ZCr,T2e,e4r,o4r,r4r,Fe,bE,F2e,t4r,a4r,fX,s4r,n4r,l4r,vE,C2e,i4r,d4r,gX,c4r,m4r,f4r,TE,M2e,g4r,h4r,hX,u4r,p4r,_4r,FE,E2e,b4r,v4r,uX,T4r,F4r,C4r,CE,y2e,M4r,E4r,pX,y4r,w4r,A4r,ME,w2e,L4r,B4r,_X,x4r,k4r,R4r,EE,A2e,S4r,P4r,bX,$4r,I4r,j4r,yE,L2e,N4r,D4r,vX,q4r,G4r,O4r,wE,B2e,X4r,z4r,TX,V4r,W4r,Q4r,x2e,H4r,U4r,rL,K9e,am,AE,k2e,tL,J4r,R2e,Y4r,Z9e,Rr,aL,K4r,sm,Z4r,S2e,eMr,oMr,P2e,rMr,tMr,aMr,sL,sMr,$2e,nMr,lMr,iMr,yt,nL,dMr,I2e,cMr,mMr,nm,fMr,j2e,gMr,hMr,N2e,uMr,pMr,_Mr,D2e,bMr,vMr,lL,TMr,Ro,iL,FMr,q2e,CMr,MMr,As,EMr,G2e,yMr,wMr,O2e,AMr,LMr,X2e,BMr,xMr,kMr,Ce,LE,z2e,RMr,SMr,FX,PMr,$Mr,IMr,BE,V2e,jMr,NMr,CX,DMr,qMr,GMr,xE,W2e,OMr,XMr,MX,zMr,VMr,WMr,kE,Q2e,QMr,HMr,EX,UMr,JMr,YMr,RE,H2e,KMr,ZMr,yX,eEr,oEr,rEr,SE,U2e,tEr,aEr,wX,sEr,nEr,lEr,PE,J2e,iEr,dEr,AX,cEr,mEr,fEr,$E,Y2e,gEr,hEr,LX,uEr,pEr,_Er,IE,K2e,bEr,vEr,BX,TEr,FEr,CEr,Z2e,MEr,EEr,dL,eBe,lm,jE,eve,cL,yEr,ove,wEr,oBe,Sr,mL,AEr,im,LEr,rve,BEr,xEr,tve,kEr,REr,SEr,fL,PEr,ave,$Er,IEr,jEr,wt,gL,NEr,sve,DEr,qEr,dm,GEr,nve,OEr,XEr,lve,zEr,VEr,WEr,ive,QEr,HEr,hL,UEr,So,uL,JEr,dve,YEr,KEr,Ls,ZEr,cve,e3r,o3r,mve,r3r,t3r,fve,a3r,s3r,n3r,no,NE,gve,l3r,i3r,xX,d3r,c3r,m3r,DE,hve,f3r,g3r,kX,h3r,u3r,p3r,qE,uve,_3r,b3r,RX,v3r,T3r,F3r,GE,pve,C3r,M3r,SX,E3r,y3r,w3r,OE,_ve,A3r,L3r,PX,B3r,x3r,k3r,XE,bve,R3r,S3r,$X,P3r,$3r,I3r,zE,vve,j3r,N3r,IX,D3r,q3r,G3r,Tve,O3r,X3r,pL,rBe,cm,VE,Fve,_L,z3r,Cve,V3r,tBe,Pr,bL,W3r,mm,Q3r,Mve,H3r,U3r,Eve,J3r,Y3r,K3r,vL,Z3r,yve,e5r,o5r,r5r,At,TL,t5r,wve,a5r,s5r,fm,n5r,Ave,l5r,i5r,Lve,d5r,c5r,m5r,Bve,f5r,g5r,FL,h5r,Po,CL,u5r,xve,p5r,_5r,Bs,b5r,kve,v5r,T5r,Rve,F5r,C5r,Sve,M5r,E5r,y5r,lo,WE,Pve,w5r,A5r,jX,L5r,B5r,x5r,QE,$ve,k5r,R5r,NX,S5r,P5r,$5r,HE,Ive,I5r,j5r,DX,N5r,D5r,q5r,UE,jve,G5r,O5r,qX,X5r,z5r,V5r,JE,Nve,W5r,Q5r,GX,H5r,U5r,J5r,YE,Dve,Y5r,K5r,OX,Z5r,eyr,oyr,KE,qve,ryr,tyr,XX,ayr,syr,nyr,Gve,lyr,iyr,ML,aBe,gm,ZE,Ove,EL,dyr,Xve,cyr,sBe,$r,yL,myr,hm,fyr,zve,gyr,hyr,Vve,uyr,pyr,_yr,wL,byr,Wve,vyr,Tyr,Fyr,Lt,AL,Cyr,Qve,Myr,Eyr,um,yyr,Hve,wyr,Ayr,Uve,Lyr,Byr,xyr,Jve,kyr,Ryr,LL,Syr,$o,BL,Pyr,Yve,$yr,Iyr,xs,jyr,Kve,Nyr,Dyr,Zve,qyr,Gyr,eTe,Oyr,Xyr,zyr,oTe,e3,rTe,Vyr,Wyr,zX,Qyr,Hyr,Uyr,tTe,Jyr,Yyr,xL,nBe,pm,o3,aTe,kL,Kyr,sTe,Zyr,lBe,Ir,RL,ewr,_m,owr,nTe,rwr,twr,lTe,awr,swr,nwr,SL,lwr,iTe,iwr,dwr,cwr,Bt,PL,mwr,dTe,fwr,gwr,bm,hwr,cTe,uwr,pwr,mTe,_wr,bwr,vwr,fTe,Twr,Fwr,$L,Cwr,Io,IL,Mwr,gTe,Ewr,ywr,ks,wwr,hTe,Awr,Lwr,uTe,Bwr,xwr,pTe,kwr,Rwr,Swr,jL,r3,_Te,Pwr,$wr,VX,Iwr,jwr,Nwr,t3,bTe,Dwr,qwr,WX,Gwr,Owr,Xwr,vTe,zwr,Vwr,NL,iBe,vm,a3,TTe,DL,Wwr,FTe,Qwr,dBe,jr,qL,Hwr,Tm,Uwr,CTe,Jwr,Ywr,MTe,Kwr,Zwr,eAr,GL,oAr,ETe,rAr,tAr,aAr,xt,OL,sAr,yTe,nAr,lAr,Fm,iAr,wTe,dAr,cAr,ATe,mAr,fAr,gAr,LTe,hAr,uAr,XL,pAr,jo,zL,_Ar,BTe,bAr,vAr,Rs,TAr,xTe,FAr,CAr,kTe,MAr,EAr,RTe,yAr,wAr,AAr,STe,s3,PTe,LAr,BAr,QX,xAr,kAr,RAr,$Te,SAr,PAr,VL,cBe;return ce=new z({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l5=new z({}),i5=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Lm=new $Ar({props:{warning:"&lcub;true}",$$slots:{default:[Xpt]},$$scope:{ctx:yi}}}),d5=new z({}),c5=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L515"}}),g5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L538",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),h5=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),u5=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L660",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),p5=new z({}),_5=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L351"}}),T5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),F5=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),C5=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),M5=new z({}),E5=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),A5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ih=new $Ar({props:{$$slots:{default:[zpt]},$$scope:{ctx:yi}}}),L5=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),B5=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),x5=new z({}),k5=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L71"}}),P5=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),vh=new $Ar({props:{$$slots:{default:[Vpt]},$$scope:{ctx:yi}}}),$5=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),I5=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),j5=new z({}),N5=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L672"}}),q5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),G5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),O5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z5=new z({}),V5=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L679"}}),Q5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),H5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),U5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y5=new z({}),K5=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L694"}}),ey=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ry=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new z({}),sy=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L701"}}),ly=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),dy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new z({}),fy=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L708"}}),hy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),py=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new z({}),vy=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L717"}}),Fy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),My=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new z({}),wy=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L751"}}),Ly=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),xy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new z({}),Sy=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L758"}}),$y=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),jy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new z({}),qy=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L744"}}),Oy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),zy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new z({}),Qy=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L726"}}),Uy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Yy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new z({}),ew=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L733"}}),rw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),aw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new z({}),lw=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L767"}}),dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),mw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new z({}),hw=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L797"}}),pw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),bw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new z({}),Fw=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L804"}}),Mw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new z({}),Lw=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L827"}}),xw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Rw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new z({}),$w=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L811"}}),jw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Dw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new z({}),Ow=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L818"}}),zw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Ww=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new z({}),Jw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L836"}}),Kw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),eA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new z({}),tA=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L843"}}),sA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),lA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new z({}),cA=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L790"}}),fA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),hA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new z({}),_A=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L774"}}),vA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),FA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new z({}),EA=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L781"}}),wA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),LA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new z({}),RA=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),PA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),IA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new z({}),DA=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),GA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),XA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new z({}),WA=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),HA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),JA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new z({}),ZA=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),o6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),t6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n6=new z({}),l6=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),d6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),m6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g6=new z({}),h6=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),p6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),b6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T6=new z({}),F6=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),M6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),y6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A6=new z({}),L6=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),x6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),R6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P6=new z({}),$6=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),j6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),D6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G6=new z({}),O6=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),W6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H6=new z({}),U6=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Y6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Z6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new z({}),r0=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),a0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),n0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new z({}),d0=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),m0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),g0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new z({}),p0=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),b0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),T0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new z({}),M0=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),y0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),A0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new z({}),x0=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),R0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),P0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new z({}),j0=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),D0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),G0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new z({}),z0=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),W0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),H0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new z({}),Y0=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),Z0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),oL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new z({}),aL=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),nL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),iL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new z({}),mL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),gL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),uL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new z({}),bL=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),TL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),CL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new z({}),yL=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),AL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),BL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new z({}),RL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),PL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),IL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DL=new z({}),qL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),OL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),zL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),ie=a("h1"),fe=a("a"),to=a("span"),m(ce.$$.fragment),_e=l(),Do=a("span"),wi=o("Auto Classes"),Mm=l(),na=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),t5=o("from_pretrained()"),Em=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Bi=o("Instantiating one of "),Ss=a("a"),a5=o("AutoConfig"),Ps=o(", "),$s=a("a"),s5=o("AutoModel"),xi=o(`, and
`),Is=a("a"),n5=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),ym=l(),m($a.$$.fragment),co=l(),ge=a("p"),O7=o("will create a model that is an instance of "),Ri=a("a"),X7=o("BertModel"),z7=o("."),qo=l(),Ia=a("p"),V7=o("There is one class of "),wm=a("code"),W7=o("AutoModel"),Fke=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),m8e=l(),Si=a("h2"),Am=a("a"),qV=a("span"),m(l5.$$.fragment),Cke=l(),GV=a("span"),Mke=o("Extending the Auto Classes"),f8e=l(),js=a("p"),Eke=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OV=a("code"),yke=o("NewModel"),wke=o(", make sure you have a "),XV=a("code"),Ake=o("NewModelConfig"),Lke=o(` then you can add those to the auto
classes like this:`),g8e=l(),m(i5.$$.fragment),h8e=l(),Q7=a("p"),Bke=o("You will then be able to use the auto classes like you would usually do!"),u8e=l(),m(Lm.$$.fragment),p8e=l(),Pi=a("h2"),Bm=a("a"),zV=a("span"),m(d5.$$.fragment),xke=l(),VV=a("span"),kke=o("AutoConfig"),_8e=l(),Go=a("div"),m(c5.$$.fragment),Rke=l(),m5=a("p"),Ske=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H7=a("a"),Pke=o("from_pretrained()"),$ke=o(" class method."),Ike=l(),f5=a("p"),jke=o("This class cannot be instantiated directly using "),WV=a("code"),Nke=o("__init__()"),Dke=o(" (throws an error)."),qke=l(),mo=a("div"),m(g5.$$.fragment),Gke=l(),QV=a("p"),Oke=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Xke=l(),$i=a("p"),zke=o("The configuration class to instantiate is selected based on the "),HV=a("code"),Vke=o("model_type"),Wke=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UV=a("code"),Qke=o("pretrained_model_name_or_path"),Hke=o(":"),Uke=l(),v=a("ul"),xm=a("li"),JV=a("strong"),Jke=o("albert"),Yke=o(" \u2014 "),U7=a("a"),Kke=o("AlbertConfig"),Zke=o(" (ALBERT model)"),eRe=l(),km=a("li"),YV=a("strong"),oRe=o("bart"),rRe=o(" \u2014 "),J7=a("a"),tRe=o("BartConfig"),aRe=o(" (BART model)"),sRe=l(),Rm=a("li"),KV=a("strong"),nRe=o("beit"),lRe=o(" \u2014 "),Y7=a("a"),iRe=o("BeitConfig"),dRe=o(" (BEiT model)"),cRe=l(),Sm=a("li"),ZV=a("strong"),mRe=o("bert"),fRe=o(" \u2014 "),K7=a("a"),gRe=o("BertConfig"),hRe=o(" (BERT model)"),uRe=l(),Pm=a("li"),eW=a("strong"),pRe=o("bert-generation"),_Re=o(" \u2014 "),Z7=a("a"),bRe=o("BertGenerationConfig"),vRe=o(" (Bert Generation model)"),TRe=l(),$m=a("li"),oW=a("strong"),FRe=o("big_bird"),CRe=o(" \u2014 "),e8=a("a"),MRe=o("BigBirdConfig"),ERe=o(" (BigBird model)"),yRe=l(),Im=a("li"),rW=a("strong"),wRe=o("bigbird_pegasus"),ARe=o(" \u2014 "),o8=a("a"),LRe=o("BigBirdPegasusConfig"),BRe=o(" (BigBirdPegasus model)"),xRe=l(),jm=a("li"),tW=a("strong"),kRe=o("blenderbot"),RRe=o(" \u2014 "),r8=a("a"),SRe=o("BlenderbotConfig"),PRe=o(" (Blenderbot model)"),$Re=l(),Nm=a("li"),aW=a("strong"),IRe=o("blenderbot-small"),jRe=o(" \u2014 "),t8=a("a"),NRe=o("BlenderbotSmallConfig"),DRe=o(" (BlenderbotSmall model)"),qRe=l(),Dm=a("li"),sW=a("strong"),GRe=o("camembert"),ORe=o(" \u2014 "),a8=a("a"),XRe=o("CamembertConfig"),zRe=o(" (CamemBERT model)"),VRe=l(),qm=a("li"),nW=a("strong"),WRe=o("canine"),QRe=o(" \u2014 "),s8=a("a"),HRe=o("CanineConfig"),URe=o(" (Canine model)"),JRe=l(),Gm=a("li"),lW=a("strong"),YRe=o("clip"),KRe=o(" \u2014 "),n8=a("a"),ZRe=o("CLIPConfig"),eSe=o(" (CLIP model)"),oSe=l(),Om=a("li"),iW=a("strong"),rSe=o("convbert"),tSe=o(" \u2014 "),l8=a("a"),aSe=o("ConvBertConfig"),sSe=o(" (ConvBERT model)"),nSe=l(),Xm=a("li"),dW=a("strong"),lSe=o("convnext"),iSe=o(" \u2014 "),i8=a("a"),dSe=o("ConvNextConfig"),cSe=o(" (ConvNext model)"),mSe=l(),zm=a("li"),cW=a("strong"),fSe=o("ctrl"),gSe=o(" \u2014 "),d8=a("a"),hSe=o("CTRLConfig"),uSe=o(" (CTRL model)"),pSe=l(),Vm=a("li"),mW=a("strong"),_Se=o("deberta"),bSe=o(" \u2014 "),c8=a("a"),vSe=o("DebertaConfig"),TSe=o(" (DeBERTa model)"),FSe=l(),Wm=a("li"),fW=a("strong"),CSe=o("deberta-v2"),MSe=o(" \u2014 "),m8=a("a"),ESe=o("DebertaV2Config"),ySe=o(" (DeBERTa-v2 model)"),wSe=l(),Qm=a("li"),gW=a("strong"),ASe=o("deit"),LSe=o(" \u2014 "),f8=a("a"),BSe=o("DeiTConfig"),xSe=o(" (DeiT model)"),kSe=l(),Hm=a("li"),hW=a("strong"),RSe=o("detr"),SSe=o(" \u2014 "),g8=a("a"),PSe=o("DetrConfig"),$Se=o(" (DETR model)"),ISe=l(),Um=a("li"),uW=a("strong"),jSe=o("distilbert"),NSe=o(" \u2014 "),h8=a("a"),DSe=o("DistilBertConfig"),qSe=o(" (DistilBERT model)"),GSe=l(),Jm=a("li"),pW=a("strong"),OSe=o("dpr"),XSe=o(" \u2014 "),u8=a("a"),zSe=o("DPRConfig"),VSe=o(" (DPR model)"),WSe=l(),Ym=a("li"),_W=a("strong"),QSe=o("electra"),HSe=o(" \u2014 "),p8=a("a"),USe=o("ElectraConfig"),JSe=o(" (ELECTRA model)"),YSe=l(),Km=a("li"),bW=a("strong"),KSe=o("encoder-decoder"),ZSe=o(" \u2014 "),_8=a("a"),ePe=o("EncoderDecoderConfig"),oPe=o(" (Encoder decoder model)"),rPe=l(),Zm=a("li"),vW=a("strong"),tPe=o("flaubert"),aPe=o(" \u2014 "),b8=a("a"),sPe=o("FlaubertConfig"),nPe=o(" (FlauBERT model)"),lPe=l(),ef=a("li"),TW=a("strong"),iPe=o("fnet"),dPe=o(" \u2014 "),v8=a("a"),cPe=o("FNetConfig"),mPe=o(" (FNet model)"),fPe=l(),of=a("li"),FW=a("strong"),gPe=o("fsmt"),hPe=o(" \u2014 "),T8=a("a"),uPe=o("FSMTConfig"),pPe=o(" (FairSeq Machine-Translation model)"),_Pe=l(),rf=a("li"),CW=a("strong"),bPe=o("funnel"),vPe=o(" \u2014 "),F8=a("a"),TPe=o("FunnelConfig"),FPe=o(" (Funnel Transformer model)"),CPe=l(),tf=a("li"),MW=a("strong"),MPe=o("gpt2"),EPe=o(" \u2014 "),C8=a("a"),yPe=o("GPT2Config"),wPe=o(" (OpenAI GPT-2 model)"),APe=l(),af=a("li"),EW=a("strong"),LPe=o("gpt_neo"),BPe=o(" \u2014 "),M8=a("a"),xPe=o("GPTNeoConfig"),kPe=o(" (GPT Neo model)"),RPe=l(),sf=a("li"),yW=a("strong"),SPe=o("gptj"),PPe=o(" \u2014 "),E8=a("a"),$Pe=o("GPTJConfig"),IPe=o(" (GPT-J model)"),jPe=l(),nf=a("li"),wW=a("strong"),NPe=o("hubert"),DPe=o(" \u2014 "),y8=a("a"),qPe=o("HubertConfig"),GPe=o(" (Hubert model)"),OPe=l(),lf=a("li"),AW=a("strong"),XPe=o("ibert"),zPe=o(" \u2014 "),w8=a("a"),VPe=o("IBertConfig"),WPe=o(" (I-BERT model)"),QPe=l(),df=a("li"),LW=a("strong"),HPe=o("imagegpt"),UPe=o(" \u2014 "),A8=a("a"),JPe=o("ImageGPTConfig"),YPe=o(" (ImageGPT model)"),KPe=l(),cf=a("li"),BW=a("strong"),ZPe=o("layoutlm"),e$e=o(" \u2014 "),L8=a("a"),o$e=o("LayoutLMConfig"),r$e=o(" (LayoutLM model)"),t$e=l(),mf=a("li"),xW=a("strong"),a$e=o("layoutlmv2"),s$e=o(" \u2014 "),B8=a("a"),n$e=o("LayoutLMv2Config"),l$e=o(" (LayoutLMv2 model)"),i$e=l(),ff=a("li"),kW=a("strong"),d$e=o("led"),c$e=o(" \u2014 "),x8=a("a"),m$e=o("LEDConfig"),f$e=o(" (LED model)"),g$e=l(),gf=a("li"),RW=a("strong"),h$e=o("longformer"),u$e=o(" \u2014 "),k8=a("a"),p$e=o("LongformerConfig"),_$e=o(" (Longformer model)"),b$e=l(),hf=a("li"),SW=a("strong"),v$e=o("luke"),T$e=o(" \u2014 "),R8=a("a"),F$e=o("LukeConfig"),C$e=o(" (LUKE model)"),M$e=l(),uf=a("li"),PW=a("strong"),E$e=o("lxmert"),y$e=o(" \u2014 "),S8=a("a"),w$e=o("LxmertConfig"),A$e=o(" (LXMERT model)"),L$e=l(),pf=a("li"),$W=a("strong"),B$e=o("m2m_100"),x$e=o(" \u2014 "),P8=a("a"),k$e=o("M2M100Config"),R$e=o(" (M2M100 model)"),S$e=l(),_f=a("li"),IW=a("strong"),P$e=o("marian"),$$e=o(" \u2014 "),$8=a("a"),I$e=o("MarianConfig"),j$e=o(" (Marian model)"),N$e=l(),bf=a("li"),jW=a("strong"),D$e=o("mbart"),q$e=o(" \u2014 "),I8=a("a"),G$e=o("MBartConfig"),O$e=o(" (mBART model)"),X$e=l(),vf=a("li"),NW=a("strong"),z$e=o("megatron-bert"),V$e=o(" \u2014 "),j8=a("a"),W$e=o("MegatronBertConfig"),Q$e=o(" (MegatronBert model)"),H$e=l(),Tf=a("li"),DW=a("strong"),U$e=o("mobilebert"),J$e=o(" \u2014 "),N8=a("a"),Y$e=o("MobileBertConfig"),K$e=o(" (MobileBERT model)"),Z$e=l(),Ff=a("li"),qW=a("strong"),eIe=o("mpnet"),oIe=o(" \u2014 "),D8=a("a"),rIe=o("MPNetConfig"),tIe=o(" (MPNet model)"),aIe=l(),Cf=a("li"),GW=a("strong"),sIe=o("mt5"),nIe=o(" \u2014 "),q8=a("a"),lIe=o("MT5Config"),iIe=o(" (mT5 model)"),dIe=l(),Mf=a("li"),OW=a("strong"),cIe=o("nystromformer"),mIe=o(" \u2014 "),G8=a("a"),fIe=o("NystromformerConfig"),gIe=o(" (Nystromformer model)"),hIe=l(),Ef=a("li"),XW=a("strong"),uIe=o("openai-gpt"),pIe=o(" \u2014 "),O8=a("a"),_Ie=o("OpenAIGPTConfig"),bIe=o(" (OpenAI GPT model)"),vIe=l(),yf=a("li"),zW=a("strong"),TIe=o("pegasus"),FIe=o(" \u2014 "),X8=a("a"),CIe=o("PegasusConfig"),MIe=o(" (Pegasus model)"),EIe=l(),wf=a("li"),VW=a("strong"),yIe=o("perceiver"),wIe=o(" \u2014 "),z8=a("a"),AIe=o("PerceiverConfig"),LIe=o(" (Perceiver model)"),BIe=l(),Af=a("li"),WW=a("strong"),xIe=o("plbart"),kIe=o(" \u2014 "),V8=a("a"),RIe=o("PLBartConfig"),SIe=o(" (PLBart model)"),PIe=l(),Lf=a("li"),QW=a("strong"),$Ie=o("poolformer"),IIe=o(" \u2014 "),W8=a("a"),jIe=o("PoolFormerConfig"),NIe=o(" (PoolFormer model)"),DIe=l(),Bf=a("li"),HW=a("strong"),qIe=o("prophetnet"),GIe=o(" \u2014 "),Q8=a("a"),OIe=o("ProphetNetConfig"),XIe=o(" (ProphetNet model)"),zIe=l(),xf=a("li"),UW=a("strong"),VIe=o("qdqbert"),WIe=o(" \u2014 "),H8=a("a"),QIe=o("QDQBertConfig"),HIe=o(" (QDQBert model)"),UIe=l(),kf=a("li"),JW=a("strong"),JIe=o("rag"),YIe=o(" \u2014 "),U8=a("a"),KIe=o("RagConfig"),ZIe=o(" (RAG model)"),eje=l(),Rf=a("li"),YW=a("strong"),oje=o("realm"),rje=o(" \u2014 "),J8=a("a"),tje=o("RealmConfig"),aje=o(" (Realm model)"),sje=l(),Sf=a("li"),KW=a("strong"),nje=o("reformer"),lje=o(" \u2014 "),Y8=a("a"),ije=o("ReformerConfig"),dje=o(" (Reformer model)"),cje=l(),Pf=a("li"),ZW=a("strong"),mje=o("rembert"),fje=o(" \u2014 "),K8=a("a"),gje=o("RemBertConfig"),hje=o(" (RemBERT model)"),uje=l(),$f=a("li"),eQ=a("strong"),pje=o("retribert"),_je=o(" \u2014 "),Z8=a("a"),bje=o("RetriBertConfig"),vje=o(" (RetriBERT model)"),Tje=l(),If=a("li"),oQ=a("strong"),Fje=o("roberta"),Cje=o(" \u2014 "),e9=a("a"),Mje=o("RobertaConfig"),Eje=o(" (RoBERTa model)"),yje=l(),jf=a("li"),rQ=a("strong"),wje=o("roformer"),Aje=o(" \u2014 "),o9=a("a"),Lje=o("RoFormerConfig"),Bje=o(" (RoFormer model)"),xje=l(),Nf=a("li"),tQ=a("strong"),kje=o("segformer"),Rje=o(" \u2014 "),r9=a("a"),Sje=o("SegformerConfig"),Pje=o(" (SegFormer model)"),$je=l(),Df=a("li"),aQ=a("strong"),Ije=o("sew"),jje=o(" \u2014 "),t9=a("a"),Nje=o("SEWConfig"),Dje=o(" (SEW model)"),qje=l(),qf=a("li"),sQ=a("strong"),Gje=o("sew-d"),Oje=o(" \u2014 "),a9=a("a"),Xje=o("SEWDConfig"),zje=o(" (SEW-D model)"),Vje=l(),Gf=a("li"),nQ=a("strong"),Wje=o("speech-encoder-decoder"),Qje=o(" \u2014 "),s9=a("a"),Hje=o("SpeechEncoderDecoderConfig"),Uje=o(" (Speech Encoder decoder model)"),Jje=l(),Of=a("li"),lQ=a("strong"),Yje=o("speech_to_text"),Kje=o(" \u2014 "),n9=a("a"),Zje=o("Speech2TextConfig"),eNe=o(" (Speech2Text model)"),oNe=l(),Xf=a("li"),iQ=a("strong"),rNe=o("speech_to_text_2"),tNe=o(" \u2014 "),l9=a("a"),aNe=o("Speech2Text2Config"),sNe=o(" (Speech2Text2 model)"),nNe=l(),zf=a("li"),dQ=a("strong"),lNe=o("splinter"),iNe=o(" \u2014 "),i9=a("a"),dNe=o("SplinterConfig"),cNe=o(" (Splinter model)"),mNe=l(),Vf=a("li"),cQ=a("strong"),fNe=o("squeezebert"),gNe=o(" \u2014 "),d9=a("a"),hNe=o("SqueezeBertConfig"),uNe=o(" (SqueezeBERT model)"),pNe=l(),Wf=a("li"),mQ=a("strong"),_Ne=o("swin"),bNe=o(" \u2014 "),c9=a("a"),vNe=o("SwinConfig"),TNe=o(" (Swin model)"),FNe=l(),Qf=a("li"),fQ=a("strong"),CNe=o("t5"),MNe=o(" \u2014 "),m9=a("a"),ENe=o("T5Config"),yNe=o(" (T5 model)"),wNe=l(),Hf=a("li"),gQ=a("strong"),ANe=o("tapas"),LNe=o(" \u2014 "),f9=a("a"),BNe=o("TapasConfig"),xNe=o(" (TAPAS model)"),kNe=l(),Uf=a("li"),hQ=a("strong"),RNe=o("transfo-xl"),SNe=o(" \u2014 "),g9=a("a"),PNe=o("TransfoXLConfig"),$Ne=o(" (Transformer-XL model)"),INe=l(),Jf=a("li"),uQ=a("strong"),jNe=o("trocr"),NNe=o(" \u2014 "),h9=a("a"),DNe=o("TrOCRConfig"),qNe=o(" (TrOCR model)"),GNe=l(),Yf=a("li"),pQ=a("strong"),ONe=o("unispeech"),XNe=o(" \u2014 "),u9=a("a"),zNe=o("UniSpeechConfig"),VNe=o(" (UniSpeech model)"),WNe=l(),Kf=a("li"),_Q=a("strong"),QNe=o("unispeech-sat"),HNe=o(" \u2014 "),p9=a("a"),UNe=o("UniSpeechSatConfig"),JNe=o(" (UniSpeechSat model)"),YNe=l(),Zf=a("li"),bQ=a("strong"),KNe=o("vilt"),ZNe=o(" \u2014 "),_9=a("a"),eDe=o("ViltConfig"),oDe=o(" (ViLT model)"),rDe=l(),eg=a("li"),vQ=a("strong"),tDe=o("vision-encoder-decoder"),aDe=o(" \u2014 "),b9=a("a"),sDe=o("VisionEncoderDecoderConfig"),nDe=o(" (Vision Encoder decoder model)"),lDe=l(),og=a("li"),TQ=a("strong"),iDe=o("vision-text-dual-encoder"),dDe=o(" \u2014 "),v9=a("a"),cDe=o("VisionTextDualEncoderConfig"),mDe=o(" (VisionTextDualEncoder model)"),fDe=l(),rg=a("li"),FQ=a("strong"),gDe=o("visual_bert"),hDe=o(" \u2014 "),T9=a("a"),uDe=o("VisualBertConfig"),pDe=o(" (VisualBert model)"),_De=l(),tg=a("li"),CQ=a("strong"),bDe=o("vit"),vDe=o(" \u2014 "),F9=a("a"),TDe=o("ViTConfig"),FDe=o(" (ViT model)"),CDe=l(),ag=a("li"),MQ=a("strong"),MDe=o("vit_mae"),EDe=o(" \u2014 "),C9=a("a"),yDe=o("ViTMAEConfig"),wDe=o(" (ViTMAE model)"),ADe=l(),sg=a("li"),EQ=a("strong"),LDe=o("wav2vec2"),BDe=o(" \u2014 "),M9=a("a"),xDe=o("Wav2Vec2Config"),kDe=o(" (Wav2Vec2 model)"),RDe=l(),ng=a("li"),yQ=a("strong"),SDe=o("wavlm"),PDe=o(" \u2014 "),E9=a("a"),$De=o("WavLMConfig"),IDe=o(" (WavLM model)"),jDe=l(),lg=a("li"),wQ=a("strong"),NDe=o("xglm"),DDe=o(" \u2014 "),y9=a("a"),qDe=o("XGLMConfig"),GDe=o(" (XGLM model)"),ODe=l(),ig=a("li"),AQ=a("strong"),XDe=o("xlm"),zDe=o(" \u2014 "),w9=a("a"),VDe=o("XLMConfig"),WDe=o(" (XLM model)"),QDe=l(),dg=a("li"),LQ=a("strong"),HDe=o("xlm-prophetnet"),UDe=o(" \u2014 "),A9=a("a"),JDe=o("XLMProphetNetConfig"),YDe=o(" (XLMProphetNet model)"),KDe=l(),cg=a("li"),BQ=a("strong"),ZDe=o("xlm-roberta"),eqe=o(" \u2014 "),L9=a("a"),oqe=o("XLMRobertaConfig"),rqe=o(" (XLM-RoBERTa model)"),tqe=l(),mg=a("li"),xQ=a("strong"),aqe=o("xlm-roberta-xl"),sqe=o(" \u2014 "),B9=a("a"),nqe=o("XLMRobertaXLConfig"),lqe=o(" (XLM-RoBERTa-XL model)"),iqe=l(),fg=a("li"),kQ=a("strong"),dqe=o("xlnet"),cqe=o(" \u2014 "),x9=a("a"),mqe=o("XLNetConfig"),fqe=o(" (XLNet model)"),gqe=l(),gg=a("li"),RQ=a("strong"),hqe=o("yoso"),uqe=o(" \u2014 "),k9=a("a"),pqe=o("YosoConfig"),_qe=o(" (YOSO model)"),bqe=l(),SQ=a("p"),vqe=o("Examples:"),Tqe=l(),m(h5.$$.fragment),Fqe=l(),hg=a("div"),m(u5.$$.fragment),Cqe=l(),PQ=a("p"),Mqe=o("Register a new configuration for this class."),b8e=l(),Ii=a("h2"),ug=a("a"),$Q=a("span"),m(p5.$$.fragment),Eqe=l(),IQ=a("span"),yqe=o("AutoTokenizer"),v8e=l(),Oo=a("div"),m(_5.$$.fragment),wqe=l(),b5=a("p"),Aqe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),R9=a("a"),Lqe=o("AutoTokenizer.from_pretrained()"),Bqe=o(" class method."),xqe=l(),v5=a("p"),kqe=o("This class cannot be instantiated directly using "),jQ=a("code"),Rqe=o("__init__()"),Sqe=o(" (throws an error)."),Pqe=l(),fo=a("div"),m(T5.$$.fragment),$qe=l(),NQ=a("p"),Iqe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jqe=l(),ja=a("p"),Nqe=o("The tokenizer class to instantiate is selected based on the "),DQ=a("code"),Dqe=o("model_type"),qqe=o(` property of the config object (either
passed as an argument or loaded from `),qQ=a("code"),Gqe=o("pretrained_model_name_or_path"),Oqe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GQ=a("code"),Xqe=o("pretrained_model_name_or_path"),zqe=o(":"),Vqe=l(),M=a("ul"),Ns=a("li"),OQ=a("strong"),Wqe=o("albert"),Qqe=o(" \u2014 "),S9=a("a"),Hqe=o("AlbertTokenizer"),Uqe=o(" or "),P9=a("a"),Jqe=o("AlbertTokenizerFast"),Yqe=o(" (ALBERT model)"),Kqe=l(),Ds=a("li"),XQ=a("strong"),Zqe=o("bart"),eGe=o(" \u2014 "),$9=a("a"),oGe=o("BartTokenizer"),rGe=o(" or "),I9=a("a"),tGe=o("BartTokenizerFast"),aGe=o(" (BART model)"),sGe=l(),qs=a("li"),zQ=a("strong"),nGe=o("barthez"),lGe=o(" \u2014 "),j9=a("a"),iGe=o("BarthezTokenizer"),dGe=o(" or "),N9=a("a"),cGe=o("BarthezTokenizerFast"),mGe=o(" (BARThez model)"),fGe=l(),pg=a("li"),VQ=a("strong"),gGe=o("bartpho"),hGe=o(" \u2014 "),D9=a("a"),uGe=o("BartphoTokenizer"),pGe=o(" (BARTpho model)"),_Ge=l(),Gs=a("li"),WQ=a("strong"),bGe=o("bert"),vGe=o(" \u2014 "),q9=a("a"),TGe=o("BertTokenizer"),FGe=o(" or "),G9=a("a"),CGe=o("BertTokenizerFast"),MGe=o(" (BERT model)"),EGe=l(),_g=a("li"),QQ=a("strong"),yGe=o("bert-generation"),wGe=o(" \u2014 "),O9=a("a"),AGe=o("BertGenerationTokenizer"),LGe=o(" (Bert Generation model)"),BGe=l(),bg=a("li"),HQ=a("strong"),xGe=o("bert-japanese"),kGe=o(" \u2014 "),X9=a("a"),RGe=o("BertJapaneseTokenizer"),SGe=o(" (BertJapanese model)"),PGe=l(),vg=a("li"),UQ=a("strong"),$Ge=o("bertweet"),IGe=o(" \u2014 "),z9=a("a"),jGe=o("BertweetTokenizer"),NGe=o(" (Bertweet model)"),DGe=l(),Os=a("li"),JQ=a("strong"),qGe=o("big_bird"),GGe=o(" \u2014 "),V9=a("a"),OGe=o("BigBirdTokenizer"),XGe=o(" or "),W9=a("a"),zGe=o("BigBirdTokenizerFast"),VGe=o(" (BigBird model)"),WGe=l(),Xs=a("li"),YQ=a("strong"),QGe=o("bigbird_pegasus"),HGe=o(" \u2014 "),Q9=a("a"),UGe=o("PegasusTokenizer"),JGe=o(" or "),H9=a("a"),YGe=o("PegasusTokenizerFast"),KGe=o(" (BigBirdPegasus model)"),ZGe=l(),zs=a("li"),KQ=a("strong"),eOe=o("blenderbot"),oOe=o(" \u2014 "),U9=a("a"),rOe=o("BlenderbotTokenizer"),tOe=o(" or "),J9=a("a"),aOe=o("BlenderbotTokenizerFast"),sOe=o(" (Blenderbot model)"),nOe=l(),Tg=a("li"),ZQ=a("strong"),lOe=o("blenderbot-small"),iOe=o(" \u2014 "),Y9=a("a"),dOe=o("BlenderbotSmallTokenizer"),cOe=o(" (BlenderbotSmall model)"),mOe=l(),Fg=a("li"),eH=a("strong"),fOe=o("byt5"),gOe=o(" \u2014 "),K9=a("a"),hOe=o("ByT5Tokenizer"),uOe=o(" (ByT5 model)"),pOe=l(),Vs=a("li"),oH=a("strong"),_Oe=o("camembert"),bOe=o(" \u2014 "),Z9=a("a"),vOe=o("CamembertTokenizer"),TOe=o(" or "),eB=a("a"),FOe=o("CamembertTokenizerFast"),COe=o(" (CamemBERT model)"),MOe=l(),Cg=a("li"),rH=a("strong"),EOe=o("canine"),yOe=o(" \u2014 "),oB=a("a"),wOe=o("CanineTokenizer"),AOe=o(" (Canine model)"),LOe=l(),Ws=a("li"),tH=a("strong"),BOe=o("clip"),xOe=o(" \u2014 "),rB=a("a"),kOe=o("CLIPTokenizer"),ROe=o(" or "),tB=a("a"),SOe=o("CLIPTokenizerFast"),POe=o(" (CLIP model)"),$Oe=l(),Qs=a("li"),aH=a("strong"),IOe=o("convbert"),jOe=o(" \u2014 "),aB=a("a"),NOe=o("ConvBertTokenizer"),DOe=o(" or "),sB=a("a"),qOe=o("ConvBertTokenizerFast"),GOe=o(" (ConvBERT model)"),OOe=l(),Hs=a("li"),sH=a("strong"),XOe=o("cpm"),zOe=o(" \u2014 "),nB=a("a"),VOe=o("CpmTokenizer"),WOe=o(" or "),nH=a("code"),QOe=o("CpmTokenizerFast"),HOe=o(" (CPM model)"),UOe=l(),Mg=a("li"),lH=a("strong"),JOe=o("ctrl"),YOe=o(" \u2014 "),lB=a("a"),KOe=o("CTRLTokenizer"),ZOe=o(" (CTRL model)"),eXe=l(),Us=a("li"),iH=a("strong"),oXe=o("deberta"),rXe=o(" \u2014 "),iB=a("a"),tXe=o("DebertaTokenizer"),aXe=o(" or "),dB=a("a"),sXe=o("DebertaTokenizerFast"),nXe=o(" (DeBERTa model)"),lXe=l(),Eg=a("li"),dH=a("strong"),iXe=o("deberta-v2"),dXe=o(" \u2014 "),cB=a("a"),cXe=o("DebertaV2Tokenizer"),mXe=o(" (DeBERTa-v2 model)"),fXe=l(),Js=a("li"),cH=a("strong"),gXe=o("distilbert"),hXe=o(" \u2014 "),mB=a("a"),uXe=o("DistilBertTokenizer"),pXe=o(" or "),fB=a("a"),_Xe=o("DistilBertTokenizerFast"),bXe=o(" (DistilBERT model)"),vXe=l(),Ys=a("li"),mH=a("strong"),TXe=o("dpr"),FXe=o(" \u2014 "),gB=a("a"),CXe=o("DPRQuestionEncoderTokenizer"),MXe=o(" or "),hB=a("a"),EXe=o("DPRQuestionEncoderTokenizerFast"),yXe=o(" (DPR model)"),wXe=l(),Ks=a("li"),fH=a("strong"),AXe=o("electra"),LXe=o(" \u2014 "),uB=a("a"),BXe=o("ElectraTokenizer"),xXe=o(" or "),pB=a("a"),kXe=o("ElectraTokenizerFast"),RXe=o(" (ELECTRA model)"),SXe=l(),yg=a("li"),gH=a("strong"),PXe=o("flaubert"),$Xe=o(" \u2014 "),_B=a("a"),IXe=o("FlaubertTokenizer"),jXe=o(" (FlauBERT model)"),NXe=l(),Zs=a("li"),hH=a("strong"),DXe=o("fnet"),qXe=o(" \u2014 "),bB=a("a"),GXe=o("FNetTokenizer"),OXe=o(" or "),vB=a("a"),XXe=o("FNetTokenizerFast"),zXe=o(" (FNet model)"),VXe=l(),wg=a("li"),uH=a("strong"),WXe=o("fsmt"),QXe=o(" \u2014 "),TB=a("a"),HXe=o("FSMTTokenizer"),UXe=o(" (FairSeq Machine-Translation model)"),JXe=l(),en=a("li"),pH=a("strong"),YXe=o("funnel"),KXe=o(" \u2014 "),FB=a("a"),ZXe=o("FunnelTokenizer"),eze=o(" or "),CB=a("a"),oze=o("FunnelTokenizerFast"),rze=o(" (Funnel Transformer model)"),tze=l(),on=a("li"),_H=a("strong"),aze=o("gpt2"),sze=o(" \u2014 "),MB=a("a"),nze=o("GPT2Tokenizer"),lze=o(" or "),EB=a("a"),ize=o("GPT2TokenizerFast"),dze=o(" (OpenAI GPT-2 model)"),cze=l(),rn=a("li"),bH=a("strong"),mze=o("gpt_neo"),fze=o(" \u2014 "),yB=a("a"),gze=o("GPT2Tokenizer"),hze=o(" or "),wB=a("a"),uze=o("GPT2TokenizerFast"),pze=o(" (GPT Neo model)"),_ze=l(),tn=a("li"),vH=a("strong"),bze=o("herbert"),vze=o(" \u2014 "),AB=a("a"),Tze=o("HerbertTokenizer"),Fze=o(" or "),LB=a("a"),Cze=o("HerbertTokenizerFast"),Mze=o(" (HerBERT model)"),Eze=l(),Ag=a("li"),TH=a("strong"),yze=o("hubert"),wze=o(" \u2014 "),BB=a("a"),Aze=o("Wav2Vec2CTCTokenizer"),Lze=o(" (Hubert model)"),Bze=l(),an=a("li"),FH=a("strong"),xze=o("ibert"),kze=o(" \u2014 "),xB=a("a"),Rze=o("RobertaTokenizer"),Sze=o(" or "),kB=a("a"),Pze=o("RobertaTokenizerFast"),$ze=o(" (I-BERT model)"),Ize=l(),sn=a("li"),CH=a("strong"),jze=o("layoutlm"),Nze=o(" \u2014 "),RB=a("a"),Dze=o("LayoutLMTokenizer"),qze=o(" or "),SB=a("a"),Gze=o("LayoutLMTokenizerFast"),Oze=o(" (LayoutLM model)"),Xze=l(),nn=a("li"),MH=a("strong"),zze=o("layoutlmv2"),Vze=o(" \u2014 "),PB=a("a"),Wze=o("LayoutLMv2Tokenizer"),Qze=o(" or "),$B=a("a"),Hze=o("LayoutLMv2TokenizerFast"),Uze=o(" (LayoutLMv2 model)"),Jze=l(),ln=a("li"),EH=a("strong"),Yze=o("layoutxlm"),Kze=o(" \u2014 "),IB=a("a"),Zze=o("LayoutXLMTokenizer"),eVe=o(" or "),jB=a("a"),oVe=o("LayoutXLMTokenizerFast"),rVe=o(" (LayoutXLM model)"),tVe=l(),dn=a("li"),yH=a("strong"),aVe=o("led"),sVe=o(" \u2014 "),NB=a("a"),nVe=o("LEDTokenizer"),lVe=o(" or "),DB=a("a"),iVe=o("LEDTokenizerFast"),dVe=o(" (LED model)"),cVe=l(),cn=a("li"),wH=a("strong"),mVe=o("longformer"),fVe=o(" \u2014 "),qB=a("a"),gVe=o("LongformerTokenizer"),hVe=o(" or "),GB=a("a"),uVe=o("LongformerTokenizerFast"),pVe=o(" (Longformer model)"),_Ve=l(),Lg=a("li"),AH=a("strong"),bVe=o("luke"),vVe=o(" \u2014 "),OB=a("a"),TVe=o("LukeTokenizer"),FVe=o(" (LUKE model)"),CVe=l(),mn=a("li"),LH=a("strong"),MVe=o("lxmert"),EVe=o(" \u2014 "),XB=a("a"),yVe=o("LxmertTokenizer"),wVe=o(" or "),zB=a("a"),AVe=o("LxmertTokenizerFast"),LVe=o(" (LXMERT model)"),BVe=l(),Bg=a("li"),BH=a("strong"),xVe=o("m2m_100"),kVe=o(" \u2014 "),VB=a("a"),RVe=o("M2M100Tokenizer"),SVe=o(" (M2M100 model)"),PVe=l(),xg=a("li"),xH=a("strong"),$Ve=o("marian"),IVe=o(" \u2014 "),WB=a("a"),jVe=o("MarianTokenizer"),NVe=o(" (Marian model)"),DVe=l(),fn=a("li"),kH=a("strong"),qVe=o("mbart"),GVe=o(" \u2014 "),QB=a("a"),OVe=o("MBartTokenizer"),XVe=o(" or "),HB=a("a"),zVe=o("MBartTokenizerFast"),VVe=o(" (mBART model)"),WVe=l(),gn=a("li"),RH=a("strong"),QVe=o("mbart50"),HVe=o(" \u2014 "),UB=a("a"),UVe=o("MBart50Tokenizer"),JVe=o(" or "),JB=a("a"),YVe=o("MBart50TokenizerFast"),KVe=o(" (mBART-50 model)"),ZVe=l(),kg=a("li"),SH=a("strong"),eWe=o("mluke"),oWe=o(" \u2014 "),YB=a("a"),rWe=o("MLukeTokenizer"),tWe=o(" (mLUKE model)"),aWe=l(),hn=a("li"),PH=a("strong"),sWe=o("mobilebert"),nWe=o(" \u2014 "),KB=a("a"),lWe=o("MobileBertTokenizer"),iWe=o(" or "),ZB=a("a"),dWe=o("MobileBertTokenizerFast"),cWe=o(" (MobileBERT model)"),mWe=l(),un=a("li"),$H=a("strong"),fWe=o("mpnet"),gWe=o(" \u2014 "),ex=a("a"),hWe=o("MPNetTokenizer"),uWe=o(" or "),ox=a("a"),pWe=o("MPNetTokenizerFast"),_We=o(" (MPNet model)"),bWe=l(),pn=a("li"),IH=a("strong"),vWe=o("mt5"),TWe=o(" \u2014 "),rx=a("a"),FWe=o("MT5Tokenizer"),CWe=o(" or "),tx=a("a"),MWe=o("MT5TokenizerFast"),EWe=o(" (mT5 model)"),yWe=l(),_n=a("li"),jH=a("strong"),wWe=o("openai-gpt"),AWe=o(" \u2014 "),ax=a("a"),LWe=o("OpenAIGPTTokenizer"),BWe=o(" or "),sx=a("a"),xWe=o("OpenAIGPTTokenizerFast"),kWe=o(" (OpenAI GPT model)"),RWe=l(),bn=a("li"),NH=a("strong"),SWe=o("pegasus"),PWe=o(" \u2014 "),nx=a("a"),$We=o("PegasusTokenizer"),IWe=o(" or "),lx=a("a"),jWe=o("PegasusTokenizerFast"),NWe=o(" (Pegasus model)"),DWe=l(),Rg=a("li"),DH=a("strong"),qWe=o("perceiver"),GWe=o(" \u2014 "),ix=a("a"),OWe=o("PerceiverTokenizer"),XWe=o(" (Perceiver model)"),zWe=l(),Sg=a("li"),qH=a("strong"),VWe=o("phobert"),WWe=o(" \u2014 "),dx=a("a"),QWe=o("PhobertTokenizer"),HWe=o(" (PhoBERT model)"),UWe=l(),Pg=a("li"),GH=a("strong"),JWe=o("plbart"),YWe=o(" \u2014 "),cx=a("a"),KWe=o("PLBartTokenizer"),ZWe=o(" (PLBart model)"),eQe=l(),$g=a("li"),OH=a("strong"),oQe=o("prophetnet"),rQe=o(" \u2014 "),mx=a("a"),tQe=o("ProphetNetTokenizer"),aQe=o(" (ProphetNet model)"),sQe=l(),vn=a("li"),XH=a("strong"),nQe=o("qdqbert"),lQe=o(" \u2014 "),fx=a("a"),iQe=o("BertTokenizer"),dQe=o(" or "),gx=a("a"),cQe=o("BertTokenizerFast"),mQe=o(" (QDQBert model)"),fQe=l(),Ig=a("li"),zH=a("strong"),gQe=o("rag"),hQe=o(" \u2014 "),hx=a("a"),uQe=o("RagTokenizer"),pQe=o(" (RAG model)"),_Qe=l(),Tn=a("li"),VH=a("strong"),bQe=o("reformer"),vQe=o(" \u2014 "),ux=a("a"),TQe=o("ReformerTokenizer"),FQe=o(" or "),px=a("a"),CQe=o("ReformerTokenizerFast"),MQe=o(" (Reformer model)"),EQe=l(),Fn=a("li"),WH=a("strong"),yQe=o("rembert"),wQe=o(" \u2014 "),_x=a("a"),AQe=o("RemBertTokenizer"),LQe=o(" or "),bx=a("a"),BQe=o("RemBertTokenizerFast"),xQe=o(" (RemBERT model)"),kQe=l(),Cn=a("li"),QH=a("strong"),RQe=o("retribert"),SQe=o(" \u2014 "),vx=a("a"),PQe=o("RetriBertTokenizer"),$Qe=o(" or "),Tx=a("a"),IQe=o("RetriBertTokenizerFast"),jQe=o(" (RetriBERT model)"),NQe=l(),Mn=a("li"),HH=a("strong"),DQe=o("roberta"),qQe=o(" \u2014 "),Fx=a("a"),GQe=o("RobertaTokenizer"),OQe=o(" or "),Cx=a("a"),XQe=o("RobertaTokenizerFast"),zQe=o(" (RoBERTa model)"),VQe=l(),En=a("li"),UH=a("strong"),WQe=o("roformer"),QQe=o(" \u2014 "),Mx=a("a"),HQe=o("RoFormerTokenizer"),UQe=o(" or "),Ex=a("a"),JQe=o("RoFormerTokenizerFast"),YQe=o(" (RoFormer model)"),KQe=l(),jg=a("li"),JH=a("strong"),ZQe=o("speech_to_text"),eHe=o(" \u2014 "),yx=a("a"),oHe=o("Speech2TextTokenizer"),rHe=o(" (Speech2Text model)"),tHe=l(),Ng=a("li"),YH=a("strong"),aHe=o("speech_to_text_2"),sHe=o(" \u2014 "),wx=a("a"),nHe=o("Speech2Text2Tokenizer"),lHe=o(" (Speech2Text2 model)"),iHe=l(),yn=a("li"),KH=a("strong"),dHe=o("splinter"),cHe=o(" \u2014 "),Ax=a("a"),mHe=o("SplinterTokenizer"),fHe=o(" or "),Lx=a("a"),gHe=o("SplinterTokenizerFast"),hHe=o(" (Splinter model)"),uHe=l(),wn=a("li"),ZH=a("strong"),pHe=o("squeezebert"),_He=o(" \u2014 "),Bx=a("a"),bHe=o("SqueezeBertTokenizer"),vHe=o(" or "),xx=a("a"),THe=o("SqueezeBertTokenizerFast"),FHe=o(" (SqueezeBERT model)"),CHe=l(),An=a("li"),eU=a("strong"),MHe=o("t5"),EHe=o(" \u2014 "),kx=a("a"),yHe=o("T5Tokenizer"),wHe=o(" or "),Rx=a("a"),AHe=o("T5TokenizerFast"),LHe=o(" (T5 model)"),BHe=l(),Dg=a("li"),oU=a("strong"),xHe=o("tapas"),kHe=o(" \u2014 "),Sx=a("a"),RHe=o("TapasTokenizer"),SHe=o(" (TAPAS model)"),PHe=l(),qg=a("li"),rU=a("strong"),$He=o("transfo-xl"),IHe=o(" \u2014 "),Px=a("a"),jHe=o("TransfoXLTokenizer"),NHe=o(" (Transformer-XL model)"),DHe=l(),Gg=a("li"),tU=a("strong"),qHe=o("wav2vec2"),GHe=o(" \u2014 "),$x=a("a"),OHe=o("Wav2Vec2CTCTokenizer"),XHe=o(" (Wav2Vec2 model)"),zHe=l(),Og=a("li"),aU=a("strong"),VHe=o("wav2vec2_phoneme"),WHe=o(" \u2014 "),Ix=a("a"),QHe=o("Wav2Vec2PhonemeCTCTokenizer"),HHe=o(" (Wav2Vec2Phoneme model)"),UHe=l(),Ln=a("li"),sU=a("strong"),JHe=o("xglm"),YHe=o(" \u2014 "),jx=a("a"),KHe=o("XGLMTokenizer"),ZHe=o(" or "),Nx=a("a"),eUe=o("XGLMTokenizerFast"),oUe=o(" (XGLM model)"),rUe=l(),Xg=a("li"),nU=a("strong"),tUe=o("xlm"),aUe=o(" \u2014 "),Dx=a("a"),sUe=o("XLMTokenizer"),nUe=o(" (XLM model)"),lUe=l(),zg=a("li"),lU=a("strong"),iUe=o("xlm-prophetnet"),dUe=o(" \u2014 "),qx=a("a"),cUe=o("XLMProphetNetTokenizer"),mUe=o(" (XLMProphetNet model)"),fUe=l(),Bn=a("li"),iU=a("strong"),gUe=o("xlm-roberta"),hUe=o(" \u2014 "),Gx=a("a"),uUe=o("XLMRobertaTokenizer"),pUe=o(" or "),Ox=a("a"),_Ue=o("XLMRobertaTokenizerFast"),bUe=o(" (XLM-RoBERTa model)"),vUe=l(),xn=a("li"),dU=a("strong"),TUe=o("xlnet"),FUe=o(" \u2014 "),Xx=a("a"),CUe=o("XLNetTokenizer"),MUe=o(" or "),zx=a("a"),EUe=o("XLNetTokenizerFast"),yUe=o(" (XLNet model)"),wUe=l(),cU=a("p"),AUe=o("Examples:"),LUe=l(),m(F5.$$.fragment),BUe=l(),Vg=a("div"),m(C5.$$.fragment),xUe=l(),mU=a("p"),kUe=o("Register a new tokenizer in this mapping."),T8e=l(),ji=a("h2"),Wg=a("a"),fU=a("span"),m(M5.$$.fragment),RUe=l(),gU=a("span"),SUe=o("AutoFeatureExtractor"),F8e=l(),Xo=a("div"),m(E5.$$.fragment),PUe=l(),y5=a("p"),$Ue=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Vx=a("a"),IUe=o("AutoFeatureExtractor.from_pretrained()"),jUe=o(" class method."),NUe=l(),w5=a("p"),DUe=o("This class cannot be instantiated directly using "),hU=a("code"),qUe=o("__init__()"),GUe=o(" (throws an error)."),OUe=l(),Le=a("div"),m(A5.$$.fragment),XUe=l(),uU=a("p"),zUe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),VUe=l(),Na=a("p"),WUe=o("The feature extractor class to instantiate is selected based on the "),pU=a("code"),QUe=o("model_type"),HUe=o(` property of the config object
(either passed as an argument or loaded from `),_U=a("code"),UUe=o("pretrained_model_name_or_path"),JUe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bU=a("code"),YUe=o("pretrained_model_name_or_path"),KUe=o(":"),ZUe=l(),ne=a("ul"),Qg=a("li"),vU=a("strong"),eJe=o("beit"),oJe=o(" \u2014 "),Wx=a("a"),rJe=o("BeitFeatureExtractor"),tJe=o(" (BEiT model)"),aJe=l(),Hg=a("li"),TU=a("strong"),sJe=o("clip"),nJe=o(" \u2014 "),Qx=a("a"),lJe=o("CLIPFeatureExtractor"),iJe=o(" (CLIP model)"),dJe=l(),Ug=a("li"),FU=a("strong"),cJe=o("convnext"),mJe=o(" \u2014 "),Hx=a("a"),fJe=o("ConvNextFeatureExtractor"),gJe=o(" (ConvNext model)"),hJe=l(),Jg=a("li"),CU=a("strong"),uJe=o("deit"),pJe=o(" \u2014 "),Ux=a("a"),_Je=o("DeiTFeatureExtractor"),bJe=o(" (DeiT model)"),vJe=l(),Yg=a("li"),MU=a("strong"),TJe=o("detr"),FJe=o(" \u2014 "),Jx=a("a"),CJe=o("DetrFeatureExtractor"),MJe=o(" (DETR model)"),EJe=l(),Kg=a("li"),EU=a("strong"),yJe=o("hubert"),wJe=o(" \u2014 "),Yx=a("a"),AJe=o("Wav2Vec2FeatureExtractor"),LJe=o(" (Hubert model)"),BJe=l(),Zg=a("li"),yU=a("strong"),xJe=o("layoutlmv2"),kJe=o(" \u2014 "),Kx=a("a"),RJe=o("LayoutLMv2FeatureExtractor"),SJe=o(" (LayoutLMv2 model)"),PJe=l(),eh=a("li"),wU=a("strong"),$Je=o("perceiver"),IJe=o(" \u2014 "),Zx=a("a"),jJe=o("PerceiverFeatureExtractor"),NJe=o(" (Perceiver model)"),DJe=l(),oh=a("li"),AU=a("strong"),qJe=o("poolformer"),GJe=o(" \u2014 "),ek=a("a"),OJe=o("PoolFormerFeatureExtractor"),XJe=o(" (PoolFormer model)"),zJe=l(),rh=a("li"),LU=a("strong"),VJe=o("segformer"),WJe=o(" \u2014 "),ok=a("a"),QJe=o("SegformerFeatureExtractor"),HJe=o(" (SegFormer model)"),UJe=l(),th=a("li"),BU=a("strong"),JJe=o("speech_to_text"),YJe=o(" \u2014 "),rk=a("a"),KJe=o("Speech2TextFeatureExtractor"),ZJe=o(" (Speech2Text model)"),eYe=l(),ah=a("li"),xU=a("strong"),oYe=o("swin"),rYe=o(" \u2014 "),tk=a("a"),tYe=o("ViTFeatureExtractor"),aYe=o(" (Swin model)"),sYe=l(),sh=a("li"),kU=a("strong"),nYe=o("vit"),lYe=o(" \u2014 "),ak=a("a"),iYe=o("ViTFeatureExtractor"),dYe=o(" (ViT model)"),cYe=l(),nh=a("li"),RU=a("strong"),mYe=o("vit_mae"),fYe=o(" \u2014 "),sk=a("a"),gYe=o("ViTFeatureExtractor"),hYe=o(" (ViTMAE model)"),uYe=l(),lh=a("li"),SU=a("strong"),pYe=o("wav2vec2"),_Ye=o(" \u2014 "),nk=a("a"),bYe=o("Wav2Vec2FeatureExtractor"),vYe=o(" (Wav2Vec2 model)"),TYe=l(),m(ih.$$.fragment),FYe=l(),PU=a("p"),CYe=o("Examples:"),MYe=l(),m(L5.$$.fragment),EYe=l(),dh=a("div"),m(B5.$$.fragment),yYe=l(),$U=a("p"),wYe=o("Register a new feature extractor for this class."),C8e=l(),Ni=a("h2"),ch=a("a"),IU=a("span"),m(x5.$$.fragment),AYe=l(),jU=a("span"),LYe=o("AutoProcessor"),M8e=l(),zo=a("div"),m(k5.$$.fragment),BYe=l(),R5=a("p"),xYe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lk=a("a"),kYe=o("AutoProcessor.from_pretrained()"),RYe=o(" class method."),SYe=l(),S5=a("p"),PYe=o("This class cannot be instantiated directly using "),NU=a("code"),$Ye=o("__init__()"),IYe=o(" (throws an error)."),jYe=l(),Be=a("div"),m(P5.$$.fragment),NYe=l(),DU=a("p"),DYe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qYe=l(),Di=a("p"),GYe=o("The processor class to instantiate is selected based on the "),qU=a("code"),OYe=o("model_type"),XYe=o(` property of the config object (either
passed as an argument or loaded from `),GU=a("code"),zYe=o("pretrained_model_name_or_path"),VYe=o(" if possible):"),WYe=l(),we=a("ul"),mh=a("li"),OU=a("strong"),QYe=o("clip"),HYe=o(" \u2014 "),ik=a("a"),UYe=o("CLIPProcessor"),JYe=o(" (CLIP model)"),YYe=l(),fh=a("li"),XU=a("strong"),KYe=o("layoutlmv2"),ZYe=o(" \u2014 "),dk=a("a"),eKe=o("LayoutLMv2Processor"),oKe=o(" (LayoutLMv2 model)"),rKe=l(),gh=a("li"),zU=a("strong"),tKe=o("layoutxlm"),aKe=o(" \u2014 "),ck=a("a"),sKe=o("LayoutXLMProcessor"),nKe=o(" (LayoutXLM model)"),lKe=l(),hh=a("li"),VU=a("strong"),iKe=o("speech_to_text"),dKe=o(" \u2014 "),mk=a("a"),cKe=o("Speech2TextProcessor"),mKe=o(" (Speech2Text model)"),fKe=l(),uh=a("li"),WU=a("strong"),gKe=o("speech_to_text_2"),hKe=o(" \u2014 "),fk=a("a"),uKe=o("Speech2Text2Processor"),pKe=o(" (Speech2Text2 model)"),_Ke=l(),ph=a("li"),QU=a("strong"),bKe=o("trocr"),vKe=o(" \u2014 "),gk=a("a"),TKe=o("TrOCRProcessor"),FKe=o(" (TrOCR model)"),CKe=l(),_h=a("li"),HU=a("strong"),MKe=o("vision-text-dual-encoder"),EKe=o(" \u2014 "),hk=a("a"),yKe=o("VisionTextDualEncoderProcessor"),wKe=o(" (VisionTextDualEncoder model)"),AKe=l(),bh=a("li"),UU=a("strong"),LKe=o("wav2vec2"),BKe=o(" \u2014 "),uk=a("a"),xKe=o("Wav2Vec2Processor"),kKe=o(" (Wav2Vec2 model)"),RKe=l(),m(vh.$$.fragment),SKe=l(),JU=a("p"),PKe=o("Examples:"),$Ke=l(),m($5.$$.fragment),IKe=l(),Th=a("div"),m(I5.$$.fragment),jKe=l(),YU=a("p"),NKe=o("Register a new processor for this class."),E8e=l(),qi=a("h2"),Fh=a("a"),KU=a("span"),m(j5.$$.fragment),DKe=l(),ZU=a("span"),qKe=o("AutoModel"),y8e=l(),Vo=a("div"),m(N5.$$.fragment),GKe=l(),Gi=a("p"),OKe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eJ=a("code"),XKe=o("from_pretrained()"),zKe=o("class method or the "),oJ=a("code"),VKe=o("from_config()"),WKe=o(`class
method.`),QKe=l(),D5=a("p"),HKe=o("This class cannot be instantiated directly using "),rJ=a("code"),UKe=o("__init__()"),JKe=o(" (throws an error)."),YKe=l(),Nr=a("div"),m(q5.$$.fragment),KKe=l(),tJ=a("p"),ZKe=o("Instantiates one of the base model classes of the library from a configuration."),eZe=l(),Oi=a("p"),oZe=o(`Note:
Loading a model from its configuration file does `),aJ=a("strong"),rZe=o("not"),tZe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("code"),aZe=o("from_pretrained()"),sZe=o("to load the model weights."),nZe=l(),nJ=a("p"),lZe=o("Examples:"),iZe=l(),m(G5.$$.fragment),dZe=l(),xe=a("div"),m(O5.$$.fragment),cZe=l(),lJ=a("p"),mZe=o("Instantiate one of the base model classes of the library from a pretrained model."),fZe=l(),Da=a("p"),gZe=o("The model class to instantiate is selected based on the "),iJ=a("code"),hZe=o("model_type"),uZe=o(` property of the config object (either
passed as an argument or loaded from `),dJ=a("code"),pZe=o("pretrained_model_name_or_path"),_Ze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=a("code"),bZe=o("pretrained_model_name_or_path"),vZe=o(":"),TZe=l(),F=a("ul"),Ch=a("li"),mJ=a("strong"),FZe=o("albert"),CZe=o(" \u2014 "),pk=a("a"),MZe=o("AlbertModel"),EZe=o(" (ALBERT model)"),yZe=l(),Mh=a("li"),fJ=a("strong"),wZe=o("bart"),AZe=o(" \u2014 "),_k=a("a"),LZe=o("BartModel"),BZe=o(" (BART model)"),xZe=l(),Eh=a("li"),gJ=a("strong"),kZe=o("beit"),RZe=o(" \u2014 "),bk=a("a"),SZe=o("BeitModel"),PZe=o(" (BEiT model)"),$Ze=l(),yh=a("li"),hJ=a("strong"),IZe=o("bert"),jZe=o(" \u2014 "),vk=a("a"),NZe=o("BertModel"),DZe=o(" (BERT model)"),qZe=l(),wh=a("li"),uJ=a("strong"),GZe=o("bert-generation"),OZe=o(" \u2014 "),Tk=a("a"),XZe=o("BertGenerationEncoder"),zZe=o(" (Bert Generation model)"),VZe=l(),Ah=a("li"),pJ=a("strong"),WZe=o("big_bird"),QZe=o(" \u2014 "),Fk=a("a"),HZe=o("BigBirdModel"),UZe=o(" (BigBird model)"),JZe=l(),Lh=a("li"),_J=a("strong"),YZe=o("bigbird_pegasus"),KZe=o(" \u2014 "),Ck=a("a"),ZZe=o("BigBirdPegasusModel"),eeo=o(" (BigBirdPegasus model)"),oeo=l(),Bh=a("li"),bJ=a("strong"),reo=o("blenderbot"),teo=o(" \u2014 "),Mk=a("a"),aeo=o("BlenderbotModel"),seo=o(" (Blenderbot model)"),neo=l(),xh=a("li"),vJ=a("strong"),leo=o("blenderbot-small"),ieo=o(" \u2014 "),Ek=a("a"),deo=o("BlenderbotSmallModel"),ceo=o(" (BlenderbotSmall model)"),meo=l(),kh=a("li"),TJ=a("strong"),feo=o("camembert"),geo=o(" \u2014 "),yk=a("a"),heo=o("CamembertModel"),ueo=o(" (CamemBERT model)"),peo=l(),Rh=a("li"),FJ=a("strong"),_eo=o("canine"),beo=o(" \u2014 "),wk=a("a"),veo=o("CanineModel"),Teo=o(" (Canine model)"),Feo=l(),Sh=a("li"),CJ=a("strong"),Ceo=o("clip"),Meo=o(" \u2014 "),Ak=a("a"),Eeo=o("CLIPModel"),yeo=o(" (CLIP model)"),weo=l(),Ph=a("li"),MJ=a("strong"),Aeo=o("convbert"),Leo=o(" \u2014 "),Lk=a("a"),Beo=o("ConvBertModel"),xeo=o(" (ConvBERT model)"),keo=l(),$h=a("li"),EJ=a("strong"),Reo=o("convnext"),Seo=o(" \u2014 "),Bk=a("a"),Peo=o("ConvNextModel"),$eo=o(" (ConvNext model)"),Ieo=l(),Ih=a("li"),yJ=a("strong"),jeo=o("ctrl"),Neo=o(" \u2014 "),xk=a("a"),Deo=o("CTRLModel"),qeo=o(" (CTRL model)"),Geo=l(),jh=a("li"),wJ=a("strong"),Oeo=o("deberta"),Xeo=o(" \u2014 "),kk=a("a"),zeo=o("DebertaModel"),Veo=o(" (DeBERTa model)"),Weo=l(),Nh=a("li"),AJ=a("strong"),Qeo=o("deberta-v2"),Heo=o(" \u2014 "),Rk=a("a"),Ueo=o("DebertaV2Model"),Jeo=o(" (DeBERTa-v2 model)"),Yeo=l(),Dh=a("li"),LJ=a("strong"),Keo=o("deit"),Zeo=o(" \u2014 "),Sk=a("a"),eoo=o("DeiTModel"),ooo=o(" (DeiT model)"),roo=l(),qh=a("li"),BJ=a("strong"),too=o("detr"),aoo=o(" \u2014 "),Pk=a("a"),soo=o("DetrModel"),noo=o(" (DETR model)"),loo=l(),Gh=a("li"),xJ=a("strong"),ioo=o("distilbert"),doo=o(" \u2014 "),$k=a("a"),coo=o("DistilBertModel"),moo=o(" (DistilBERT model)"),foo=l(),Oh=a("li"),kJ=a("strong"),goo=o("dpr"),hoo=o(" \u2014 "),Ik=a("a"),uoo=o("DPRQuestionEncoder"),poo=o(" (DPR model)"),_oo=l(),Xh=a("li"),RJ=a("strong"),boo=o("electra"),voo=o(" \u2014 "),jk=a("a"),Too=o("ElectraModel"),Foo=o(" (ELECTRA model)"),Coo=l(),zh=a("li"),SJ=a("strong"),Moo=o("flaubert"),Eoo=o(" \u2014 "),Nk=a("a"),yoo=o("FlaubertModel"),woo=o(" (FlauBERT model)"),Aoo=l(),Vh=a("li"),PJ=a("strong"),Loo=o("fnet"),Boo=o(" \u2014 "),Dk=a("a"),xoo=o("FNetModel"),koo=o(" (FNet model)"),Roo=l(),Wh=a("li"),$J=a("strong"),Soo=o("fsmt"),Poo=o(" \u2014 "),qk=a("a"),$oo=o("FSMTModel"),Ioo=o(" (FairSeq Machine-Translation model)"),joo=l(),kn=a("li"),IJ=a("strong"),Noo=o("funnel"),Doo=o(" \u2014 "),Gk=a("a"),qoo=o("FunnelModel"),Goo=o(" or "),Ok=a("a"),Ooo=o("FunnelBaseModel"),Xoo=o(" (Funnel Transformer model)"),zoo=l(),Qh=a("li"),jJ=a("strong"),Voo=o("gpt2"),Woo=o(" \u2014 "),Xk=a("a"),Qoo=o("GPT2Model"),Hoo=o(" (OpenAI GPT-2 model)"),Uoo=l(),Hh=a("li"),NJ=a("strong"),Joo=o("gpt_neo"),Yoo=o(" \u2014 "),zk=a("a"),Koo=o("GPTNeoModel"),Zoo=o(" (GPT Neo model)"),ero=l(),Uh=a("li"),DJ=a("strong"),oro=o("gptj"),rro=o(" \u2014 "),Vk=a("a"),tro=o("GPTJModel"),aro=o(" (GPT-J model)"),sro=l(),Jh=a("li"),qJ=a("strong"),nro=o("hubert"),lro=o(" \u2014 "),Wk=a("a"),iro=o("HubertModel"),dro=o(" (Hubert model)"),cro=l(),Yh=a("li"),GJ=a("strong"),mro=o("ibert"),fro=o(" \u2014 "),Qk=a("a"),gro=o("IBertModel"),hro=o(" (I-BERT model)"),uro=l(),Kh=a("li"),OJ=a("strong"),pro=o("imagegpt"),_ro=o(" \u2014 "),Hk=a("a"),bro=o("ImageGPTModel"),vro=o(" (ImageGPT model)"),Tro=l(),Zh=a("li"),XJ=a("strong"),Fro=o("layoutlm"),Cro=o(" \u2014 "),Uk=a("a"),Mro=o("LayoutLMModel"),Ero=o(" (LayoutLM model)"),yro=l(),eu=a("li"),zJ=a("strong"),wro=o("layoutlmv2"),Aro=o(" \u2014 "),Jk=a("a"),Lro=o("LayoutLMv2Model"),Bro=o(" (LayoutLMv2 model)"),xro=l(),ou=a("li"),VJ=a("strong"),kro=o("led"),Rro=o(" \u2014 "),Yk=a("a"),Sro=o("LEDModel"),Pro=o(" (LED model)"),$ro=l(),ru=a("li"),WJ=a("strong"),Iro=o("longformer"),jro=o(" \u2014 "),Kk=a("a"),Nro=o("LongformerModel"),Dro=o(" (Longformer model)"),qro=l(),tu=a("li"),QJ=a("strong"),Gro=o("luke"),Oro=o(" \u2014 "),Zk=a("a"),Xro=o("LukeModel"),zro=o(" (LUKE model)"),Vro=l(),au=a("li"),HJ=a("strong"),Wro=o("lxmert"),Qro=o(" \u2014 "),eR=a("a"),Hro=o("LxmertModel"),Uro=o(" (LXMERT model)"),Jro=l(),su=a("li"),UJ=a("strong"),Yro=o("m2m_100"),Kro=o(" \u2014 "),oR=a("a"),Zro=o("M2M100Model"),eto=o(" (M2M100 model)"),oto=l(),nu=a("li"),JJ=a("strong"),rto=o("marian"),tto=o(" \u2014 "),rR=a("a"),ato=o("MarianModel"),sto=o(" (Marian model)"),nto=l(),lu=a("li"),YJ=a("strong"),lto=o("mbart"),ito=o(" \u2014 "),tR=a("a"),dto=o("MBartModel"),cto=o(" (mBART model)"),mto=l(),iu=a("li"),KJ=a("strong"),fto=o("megatron-bert"),gto=o(" \u2014 "),aR=a("a"),hto=o("MegatronBertModel"),uto=o(" (MegatronBert model)"),pto=l(),du=a("li"),ZJ=a("strong"),_to=o("mobilebert"),bto=o(" \u2014 "),sR=a("a"),vto=o("MobileBertModel"),Tto=o(" (MobileBERT model)"),Fto=l(),cu=a("li"),eY=a("strong"),Cto=o("mpnet"),Mto=o(" \u2014 "),nR=a("a"),Eto=o("MPNetModel"),yto=o(" (MPNet model)"),wto=l(),mu=a("li"),oY=a("strong"),Ato=o("mt5"),Lto=o(" \u2014 "),lR=a("a"),Bto=o("MT5Model"),xto=o(" (mT5 model)"),kto=l(),fu=a("li"),rY=a("strong"),Rto=o("nystromformer"),Sto=o(" \u2014 "),iR=a("a"),Pto=o("NystromformerModel"),$to=o(" (Nystromformer model)"),Ito=l(),gu=a("li"),tY=a("strong"),jto=o("openai-gpt"),Nto=o(" \u2014 "),dR=a("a"),Dto=o("OpenAIGPTModel"),qto=o(" (OpenAI GPT model)"),Gto=l(),hu=a("li"),aY=a("strong"),Oto=o("pegasus"),Xto=o(" \u2014 "),cR=a("a"),zto=o("PegasusModel"),Vto=o(" (Pegasus model)"),Wto=l(),uu=a("li"),sY=a("strong"),Qto=o("perceiver"),Hto=o(" \u2014 "),mR=a("a"),Uto=o("PerceiverModel"),Jto=o(" (Perceiver model)"),Yto=l(),pu=a("li"),nY=a("strong"),Kto=o("plbart"),Zto=o(" \u2014 "),fR=a("a"),eao=o("PLBartModel"),oao=o(" (PLBart model)"),rao=l(),_u=a("li"),lY=a("strong"),tao=o("poolformer"),aao=o(" \u2014 "),gR=a("a"),sao=o("PoolFormerModel"),nao=o(" (PoolFormer model)"),lao=l(),bu=a("li"),iY=a("strong"),iao=o("prophetnet"),dao=o(" \u2014 "),hR=a("a"),cao=o("ProphetNetModel"),mao=o(" (ProphetNet model)"),fao=l(),vu=a("li"),dY=a("strong"),gao=o("qdqbert"),hao=o(" \u2014 "),uR=a("a"),uao=o("QDQBertModel"),pao=o(" (QDQBert model)"),_ao=l(),Tu=a("li"),cY=a("strong"),bao=o("reformer"),vao=o(" \u2014 "),pR=a("a"),Tao=o("ReformerModel"),Fao=o(" (Reformer model)"),Cao=l(),Fu=a("li"),mY=a("strong"),Mao=o("rembert"),Eao=o(" \u2014 "),_R=a("a"),yao=o("RemBertModel"),wao=o(" (RemBERT model)"),Aao=l(),Cu=a("li"),fY=a("strong"),Lao=o("retribert"),Bao=o(" \u2014 "),bR=a("a"),xao=o("RetriBertModel"),kao=o(" (RetriBERT model)"),Rao=l(),Mu=a("li"),gY=a("strong"),Sao=o("roberta"),Pao=o(" \u2014 "),vR=a("a"),$ao=o("RobertaModel"),Iao=o(" (RoBERTa model)"),jao=l(),Eu=a("li"),hY=a("strong"),Nao=o("roformer"),Dao=o(" \u2014 "),TR=a("a"),qao=o("RoFormerModel"),Gao=o(" (RoFormer model)"),Oao=l(),yu=a("li"),uY=a("strong"),Xao=o("segformer"),zao=o(" \u2014 "),FR=a("a"),Vao=o("SegformerModel"),Wao=o(" (SegFormer model)"),Qao=l(),wu=a("li"),pY=a("strong"),Hao=o("sew"),Uao=o(" \u2014 "),CR=a("a"),Jao=o("SEWModel"),Yao=o(" (SEW model)"),Kao=l(),Au=a("li"),_Y=a("strong"),Zao=o("sew-d"),eso=o(" \u2014 "),MR=a("a"),oso=o("SEWDModel"),rso=o(" (SEW-D model)"),tso=l(),Lu=a("li"),bY=a("strong"),aso=o("speech_to_text"),sso=o(" \u2014 "),ER=a("a"),nso=o("Speech2TextModel"),lso=o(" (Speech2Text model)"),iso=l(),Bu=a("li"),vY=a("strong"),dso=o("splinter"),cso=o(" \u2014 "),yR=a("a"),mso=o("SplinterModel"),fso=o(" (Splinter model)"),gso=l(),xu=a("li"),TY=a("strong"),hso=o("squeezebert"),uso=o(" \u2014 "),wR=a("a"),pso=o("SqueezeBertModel"),_so=o(" (SqueezeBERT model)"),bso=l(),ku=a("li"),FY=a("strong"),vso=o("swin"),Tso=o(" \u2014 "),AR=a("a"),Fso=o("SwinModel"),Cso=o(" (Swin model)"),Mso=l(),Ru=a("li"),CY=a("strong"),Eso=o("t5"),yso=o(" \u2014 "),LR=a("a"),wso=o("T5Model"),Aso=o(" (T5 model)"),Lso=l(),Su=a("li"),MY=a("strong"),Bso=o("tapas"),xso=o(" \u2014 "),BR=a("a"),kso=o("TapasModel"),Rso=o(" (TAPAS model)"),Sso=l(),Pu=a("li"),EY=a("strong"),Pso=o("transfo-xl"),$so=o(" \u2014 "),xR=a("a"),Iso=o("TransfoXLModel"),jso=o(" (Transformer-XL model)"),Nso=l(),$u=a("li"),yY=a("strong"),Dso=o("unispeech"),qso=o(" \u2014 "),kR=a("a"),Gso=o("UniSpeechModel"),Oso=o(" (UniSpeech model)"),Xso=l(),Iu=a("li"),wY=a("strong"),zso=o("unispeech-sat"),Vso=o(" \u2014 "),RR=a("a"),Wso=o("UniSpeechSatModel"),Qso=o(" (UniSpeechSat model)"),Hso=l(),ju=a("li"),AY=a("strong"),Uso=o("vilt"),Jso=o(" \u2014 "),SR=a("a"),Yso=o("ViltModel"),Kso=o(" (ViLT model)"),Zso=l(),Nu=a("li"),LY=a("strong"),eno=o("vision-text-dual-encoder"),ono=o(" \u2014 "),PR=a("a"),rno=o("VisionTextDualEncoderModel"),tno=o(" (VisionTextDualEncoder model)"),ano=l(),Du=a("li"),BY=a("strong"),sno=o("visual_bert"),nno=o(" \u2014 "),$R=a("a"),lno=o("VisualBertModel"),ino=o(" (VisualBert model)"),dno=l(),qu=a("li"),xY=a("strong"),cno=o("vit"),mno=o(" \u2014 "),IR=a("a"),fno=o("ViTModel"),gno=o(" (ViT model)"),hno=l(),Gu=a("li"),kY=a("strong"),uno=o("vit_mae"),pno=o(" \u2014 "),jR=a("a"),_no=o("ViTMAEModel"),bno=o(" (ViTMAE model)"),vno=l(),Ou=a("li"),RY=a("strong"),Tno=o("wav2vec2"),Fno=o(" \u2014 "),NR=a("a"),Cno=o("Wav2Vec2Model"),Mno=o(" (Wav2Vec2 model)"),Eno=l(),Xu=a("li"),SY=a("strong"),yno=o("wavlm"),wno=o(" \u2014 "),DR=a("a"),Ano=o("WavLMModel"),Lno=o(" (WavLM model)"),Bno=l(),zu=a("li"),PY=a("strong"),xno=o("xglm"),kno=o(" \u2014 "),qR=a("a"),Rno=o("XGLMModel"),Sno=o(" (XGLM model)"),Pno=l(),Vu=a("li"),$Y=a("strong"),$no=o("xlm"),Ino=o(" \u2014 "),GR=a("a"),jno=o("XLMModel"),Nno=o(" (XLM model)"),Dno=l(),Wu=a("li"),IY=a("strong"),qno=o("xlm-prophetnet"),Gno=o(" \u2014 "),OR=a("a"),Ono=o("XLMProphetNetModel"),Xno=o(" (XLMProphetNet model)"),zno=l(),Qu=a("li"),jY=a("strong"),Vno=o("xlm-roberta"),Wno=o(" \u2014 "),XR=a("a"),Qno=o("XLMRobertaModel"),Hno=o(" (XLM-RoBERTa model)"),Uno=l(),Hu=a("li"),NY=a("strong"),Jno=o("xlm-roberta-xl"),Yno=o(" \u2014 "),zR=a("a"),Kno=o("XLMRobertaXLModel"),Zno=o(" (XLM-RoBERTa-XL model)"),elo=l(),Uu=a("li"),DY=a("strong"),olo=o("xlnet"),rlo=o(" \u2014 "),VR=a("a"),tlo=o("XLNetModel"),alo=o(" (XLNet model)"),slo=l(),Ju=a("li"),qY=a("strong"),nlo=o("yoso"),llo=o(" \u2014 "),WR=a("a"),ilo=o("YosoModel"),dlo=o(" (YOSO model)"),clo=l(),Yu=a("p"),mlo=o("The model is set in evaluation mode by default using "),GY=a("code"),flo=o("model.eval()"),glo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OY=a("code"),hlo=o("model.train()"),ulo=l(),XY=a("p"),plo=o("Examples:"),_lo=l(),m(X5.$$.fragment),w8e=l(),Xi=a("h2"),Ku=a("a"),zY=a("span"),m(z5.$$.fragment),blo=l(),VY=a("span"),vlo=o("AutoModelForPreTraining"),A8e=l(),Wo=a("div"),m(V5.$$.fragment),Tlo=l(),zi=a("p"),Flo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WY=a("code"),Clo=o("from_pretrained()"),Mlo=o("class method or the "),QY=a("code"),Elo=o("from_config()"),ylo=o(`class
method.`),wlo=l(),W5=a("p"),Alo=o("This class cannot be instantiated directly using "),HY=a("code"),Llo=o("__init__()"),Blo=o(" (throws an error)."),xlo=l(),Dr=a("div"),m(Q5.$$.fragment),klo=l(),UY=a("p"),Rlo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Slo=l(),Vi=a("p"),Plo=o(`Note:
Loading a model from its configuration file does `),JY=a("strong"),$lo=o("not"),Ilo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("code"),jlo=o("from_pretrained()"),Nlo=o("to load the model weights."),Dlo=l(),KY=a("p"),qlo=o("Examples:"),Glo=l(),m(H5.$$.fragment),Olo=l(),ke=a("div"),m(U5.$$.fragment),Xlo=l(),ZY=a("p"),zlo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vlo=l(),qa=a("p"),Wlo=o("The model class to instantiate is selected based on the "),eK=a("code"),Qlo=o("model_type"),Hlo=o(` property of the config object (either
passed as an argument or loaded from `),oK=a("code"),Ulo=o("pretrained_model_name_or_path"),Jlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rK=a("code"),Ylo=o("pretrained_model_name_or_path"),Klo=o(":"),Zlo=l(),k=a("ul"),Zu=a("li"),tK=a("strong"),eio=o("albert"),oio=o(" \u2014 "),QR=a("a"),rio=o("AlbertForPreTraining"),tio=o(" (ALBERT model)"),aio=l(),ep=a("li"),aK=a("strong"),sio=o("bart"),nio=o(" \u2014 "),HR=a("a"),lio=o("BartForConditionalGeneration"),iio=o(" (BART model)"),dio=l(),op=a("li"),sK=a("strong"),cio=o("bert"),mio=o(" \u2014 "),UR=a("a"),fio=o("BertForPreTraining"),gio=o(" (BERT model)"),hio=l(),rp=a("li"),nK=a("strong"),uio=o("big_bird"),pio=o(" \u2014 "),JR=a("a"),_io=o("BigBirdForPreTraining"),bio=o(" (BigBird model)"),vio=l(),tp=a("li"),lK=a("strong"),Tio=o("camembert"),Fio=o(" \u2014 "),YR=a("a"),Cio=o("CamembertForMaskedLM"),Mio=o(" (CamemBERT model)"),Eio=l(),ap=a("li"),iK=a("strong"),yio=o("ctrl"),wio=o(" \u2014 "),KR=a("a"),Aio=o("CTRLLMHeadModel"),Lio=o(" (CTRL model)"),Bio=l(),sp=a("li"),dK=a("strong"),xio=o("deberta"),kio=o(" \u2014 "),ZR=a("a"),Rio=o("DebertaForMaskedLM"),Sio=o(" (DeBERTa model)"),Pio=l(),np=a("li"),cK=a("strong"),$io=o("deberta-v2"),Iio=o(" \u2014 "),eS=a("a"),jio=o("DebertaV2ForMaskedLM"),Nio=o(" (DeBERTa-v2 model)"),Dio=l(),lp=a("li"),mK=a("strong"),qio=o("distilbert"),Gio=o(" \u2014 "),oS=a("a"),Oio=o("DistilBertForMaskedLM"),Xio=o(" (DistilBERT model)"),zio=l(),ip=a("li"),fK=a("strong"),Vio=o("electra"),Wio=o(" \u2014 "),rS=a("a"),Qio=o("ElectraForPreTraining"),Hio=o(" (ELECTRA model)"),Uio=l(),dp=a("li"),gK=a("strong"),Jio=o("flaubert"),Yio=o(" \u2014 "),tS=a("a"),Kio=o("FlaubertWithLMHeadModel"),Zio=o(" (FlauBERT model)"),edo=l(),cp=a("li"),hK=a("strong"),odo=o("fnet"),rdo=o(" \u2014 "),aS=a("a"),tdo=o("FNetForPreTraining"),ado=o(" (FNet model)"),sdo=l(),mp=a("li"),uK=a("strong"),ndo=o("fsmt"),ldo=o(" \u2014 "),sS=a("a"),ido=o("FSMTForConditionalGeneration"),ddo=o(" (FairSeq Machine-Translation model)"),cdo=l(),fp=a("li"),pK=a("strong"),mdo=o("funnel"),fdo=o(" \u2014 "),nS=a("a"),gdo=o("FunnelForPreTraining"),hdo=o(" (Funnel Transformer model)"),udo=l(),gp=a("li"),_K=a("strong"),pdo=o("gpt2"),_do=o(" \u2014 "),lS=a("a"),bdo=o("GPT2LMHeadModel"),vdo=o(" (OpenAI GPT-2 model)"),Tdo=l(),hp=a("li"),bK=a("strong"),Fdo=o("ibert"),Cdo=o(" \u2014 "),iS=a("a"),Mdo=o("IBertForMaskedLM"),Edo=o(" (I-BERT model)"),ydo=l(),up=a("li"),vK=a("strong"),wdo=o("layoutlm"),Ado=o(" \u2014 "),dS=a("a"),Ldo=o("LayoutLMForMaskedLM"),Bdo=o(" (LayoutLM model)"),xdo=l(),pp=a("li"),TK=a("strong"),kdo=o("longformer"),Rdo=o(" \u2014 "),cS=a("a"),Sdo=o("LongformerForMaskedLM"),Pdo=o(" (Longformer model)"),$do=l(),_p=a("li"),FK=a("strong"),Ido=o("lxmert"),jdo=o(" \u2014 "),mS=a("a"),Ndo=o("LxmertForPreTraining"),Ddo=o(" (LXMERT model)"),qdo=l(),bp=a("li"),CK=a("strong"),Gdo=o("megatron-bert"),Odo=o(" \u2014 "),fS=a("a"),Xdo=o("MegatronBertForPreTraining"),zdo=o(" (MegatronBert model)"),Vdo=l(),vp=a("li"),MK=a("strong"),Wdo=o("mobilebert"),Qdo=o(" \u2014 "),gS=a("a"),Hdo=o("MobileBertForPreTraining"),Udo=o(" (MobileBERT model)"),Jdo=l(),Tp=a("li"),EK=a("strong"),Ydo=o("mpnet"),Kdo=o(" \u2014 "),hS=a("a"),Zdo=o("MPNetForMaskedLM"),eco=o(" (MPNet model)"),oco=l(),Fp=a("li"),yK=a("strong"),rco=o("openai-gpt"),tco=o(" \u2014 "),uS=a("a"),aco=o("OpenAIGPTLMHeadModel"),sco=o(" (OpenAI GPT model)"),nco=l(),Cp=a("li"),wK=a("strong"),lco=o("retribert"),ico=o(" \u2014 "),pS=a("a"),dco=o("RetriBertModel"),cco=o(" (RetriBERT model)"),mco=l(),Mp=a("li"),AK=a("strong"),fco=o("roberta"),gco=o(" \u2014 "),_S=a("a"),hco=o("RobertaForMaskedLM"),uco=o(" (RoBERTa model)"),pco=l(),Ep=a("li"),LK=a("strong"),_co=o("squeezebert"),bco=o(" \u2014 "),bS=a("a"),vco=o("SqueezeBertForMaskedLM"),Tco=o(" (SqueezeBERT model)"),Fco=l(),yp=a("li"),BK=a("strong"),Cco=o("t5"),Mco=o(" \u2014 "),vS=a("a"),Eco=o("T5ForConditionalGeneration"),yco=o(" (T5 model)"),wco=l(),wp=a("li"),xK=a("strong"),Aco=o("tapas"),Lco=o(" \u2014 "),TS=a("a"),Bco=o("TapasForMaskedLM"),xco=o(" (TAPAS model)"),kco=l(),Ap=a("li"),kK=a("strong"),Rco=o("transfo-xl"),Sco=o(" \u2014 "),FS=a("a"),Pco=o("TransfoXLLMHeadModel"),$co=o(" (Transformer-XL model)"),Ico=l(),Lp=a("li"),RK=a("strong"),jco=o("unispeech"),Nco=o(" \u2014 "),CS=a("a"),Dco=o("UniSpeechForPreTraining"),qco=o(" (UniSpeech model)"),Gco=l(),Bp=a("li"),SK=a("strong"),Oco=o("unispeech-sat"),Xco=o(" \u2014 "),MS=a("a"),zco=o("UniSpeechSatForPreTraining"),Vco=o(" (UniSpeechSat model)"),Wco=l(),xp=a("li"),PK=a("strong"),Qco=o("visual_bert"),Hco=o(" \u2014 "),ES=a("a"),Uco=o("VisualBertForPreTraining"),Jco=o(" (VisualBert model)"),Yco=l(),kp=a("li"),$K=a("strong"),Kco=o("vit_mae"),Zco=o(" \u2014 "),yS=a("a"),emo=o("ViTMAEForPreTraining"),omo=o(" (ViTMAE model)"),rmo=l(),Rp=a("li"),IK=a("strong"),tmo=o("wav2vec2"),amo=o(" \u2014 "),wS=a("a"),smo=o("Wav2Vec2ForPreTraining"),nmo=o(" (Wav2Vec2 model)"),lmo=l(),Sp=a("li"),jK=a("strong"),imo=o("xlm"),dmo=o(" \u2014 "),AS=a("a"),cmo=o("XLMWithLMHeadModel"),mmo=o(" (XLM model)"),fmo=l(),Pp=a("li"),NK=a("strong"),gmo=o("xlm-roberta"),hmo=o(" \u2014 "),LS=a("a"),umo=o("XLMRobertaForMaskedLM"),pmo=o(" (XLM-RoBERTa model)"),_mo=l(),$p=a("li"),DK=a("strong"),bmo=o("xlm-roberta-xl"),vmo=o(" \u2014 "),BS=a("a"),Tmo=o("XLMRobertaXLForMaskedLM"),Fmo=o(" (XLM-RoBERTa-XL model)"),Cmo=l(),Ip=a("li"),qK=a("strong"),Mmo=o("xlnet"),Emo=o(" \u2014 "),xS=a("a"),ymo=o("XLNetLMHeadModel"),wmo=o(" (XLNet model)"),Amo=l(),jp=a("p"),Lmo=o("The model is set in evaluation mode by default using "),GK=a("code"),Bmo=o("model.eval()"),xmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OK=a("code"),kmo=o("model.train()"),Rmo=l(),XK=a("p"),Smo=o("Examples:"),Pmo=l(),m(J5.$$.fragment),L8e=l(),Wi=a("h2"),Np=a("a"),zK=a("span"),m(Y5.$$.fragment),$mo=l(),VK=a("span"),Imo=o("AutoModelForCausalLM"),B8e=l(),Qo=a("div"),m(K5.$$.fragment),jmo=l(),Qi=a("p"),Nmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=a("code"),Dmo=o("from_pretrained()"),qmo=o("class method or the "),QK=a("code"),Gmo=o("from_config()"),Omo=o(`class
method.`),Xmo=l(),Z5=a("p"),zmo=o("This class cannot be instantiated directly using "),HK=a("code"),Vmo=o("__init__()"),Wmo=o(" (throws an error)."),Qmo=l(),qr=a("div"),m(ey.$$.fragment),Hmo=l(),UK=a("p"),Umo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jmo=l(),Hi=a("p"),Ymo=o(`Note:
Loading a model from its configuration file does `),JK=a("strong"),Kmo=o("not"),Zmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("code"),efo=o("from_pretrained()"),ofo=o("to load the model weights."),rfo=l(),KK=a("p"),tfo=o("Examples:"),afo=l(),m(oy.$$.fragment),sfo=l(),Re=a("div"),m(ry.$$.fragment),nfo=l(),ZK=a("p"),lfo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ifo=l(),Ga=a("p"),dfo=o("The model class to instantiate is selected based on the "),eZ=a("code"),cfo=o("model_type"),mfo=o(` property of the config object (either
passed as an argument or loaded from `),oZ=a("code"),ffo=o("pretrained_model_name_or_path"),gfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rZ=a("code"),hfo=o("pretrained_model_name_or_path"),ufo=o(":"),pfo=l(),$=a("ul"),Dp=a("li"),tZ=a("strong"),_fo=o("bart"),bfo=o(" \u2014 "),kS=a("a"),vfo=o("BartForCausalLM"),Tfo=o(" (BART model)"),Ffo=l(),qp=a("li"),aZ=a("strong"),Cfo=o("bert"),Mfo=o(" \u2014 "),RS=a("a"),Efo=o("BertLMHeadModel"),yfo=o(" (BERT model)"),wfo=l(),Gp=a("li"),sZ=a("strong"),Afo=o("bert-generation"),Lfo=o(" \u2014 "),SS=a("a"),Bfo=o("BertGenerationDecoder"),xfo=o(" (Bert Generation model)"),kfo=l(),Op=a("li"),nZ=a("strong"),Rfo=o("big_bird"),Sfo=o(" \u2014 "),PS=a("a"),Pfo=o("BigBirdForCausalLM"),$fo=o(" (BigBird model)"),Ifo=l(),Xp=a("li"),lZ=a("strong"),jfo=o("bigbird_pegasus"),Nfo=o(" \u2014 "),$S=a("a"),Dfo=o("BigBirdPegasusForCausalLM"),qfo=o(" (BigBirdPegasus model)"),Gfo=l(),zp=a("li"),iZ=a("strong"),Ofo=o("blenderbot"),Xfo=o(" \u2014 "),IS=a("a"),zfo=o("BlenderbotForCausalLM"),Vfo=o(" (Blenderbot model)"),Wfo=l(),Vp=a("li"),dZ=a("strong"),Qfo=o("blenderbot-small"),Hfo=o(" \u2014 "),jS=a("a"),Ufo=o("BlenderbotSmallForCausalLM"),Jfo=o(" (BlenderbotSmall model)"),Yfo=l(),Wp=a("li"),cZ=a("strong"),Kfo=o("camembert"),Zfo=o(" \u2014 "),NS=a("a"),ego=o("CamembertForCausalLM"),ogo=o(" (CamemBERT model)"),rgo=l(),Qp=a("li"),mZ=a("strong"),tgo=o("ctrl"),ago=o(" \u2014 "),DS=a("a"),sgo=o("CTRLLMHeadModel"),ngo=o(" (CTRL model)"),lgo=l(),Hp=a("li"),fZ=a("strong"),igo=o("electra"),dgo=o(" \u2014 "),qS=a("a"),cgo=o("ElectraForCausalLM"),mgo=o(" (ELECTRA model)"),fgo=l(),Up=a("li"),gZ=a("strong"),ggo=o("gpt2"),hgo=o(" \u2014 "),GS=a("a"),ugo=o("GPT2LMHeadModel"),pgo=o(" (OpenAI GPT-2 model)"),_go=l(),Jp=a("li"),hZ=a("strong"),bgo=o("gpt_neo"),vgo=o(" \u2014 "),OS=a("a"),Tgo=o("GPTNeoForCausalLM"),Fgo=o(" (GPT Neo model)"),Cgo=l(),Yp=a("li"),uZ=a("strong"),Mgo=o("gptj"),Ego=o(" \u2014 "),XS=a("a"),ygo=o("GPTJForCausalLM"),wgo=o(" (GPT-J model)"),Ago=l(),Kp=a("li"),pZ=a("strong"),Lgo=o("marian"),Bgo=o(" \u2014 "),zS=a("a"),xgo=o("MarianForCausalLM"),kgo=o(" (Marian model)"),Rgo=l(),Zp=a("li"),_Z=a("strong"),Sgo=o("mbart"),Pgo=o(" \u2014 "),VS=a("a"),$go=o("MBartForCausalLM"),Igo=o(" (mBART model)"),jgo=l(),e_=a("li"),bZ=a("strong"),Ngo=o("megatron-bert"),Dgo=o(" \u2014 "),WS=a("a"),qgo=o("MegatronBertForCausalLM"),Ggo=o(" (MegatronBert model)"),Ogo=l(),o_=a("li"),vZ=a("strong"),Xgo=o("openai-gpt"),zgo=o(" \u2014 "),QS=a("a"),Vgo=o("OpenAIGPTLMHeadModel"),Wgo=o(" (OpenAI GPT model)"),Qgo=l(),r_=a("li"),TZ=a("strong"),Hgo=o("pegasus"),Ugo=o(" \u2014 "),HS=a("a"),Jgo=o("PegasusForCausalLM"),Ygo=o(" (Pegasus model)"),Kgo=l(),t_=a("li"),FZ=a("strong"),Zgo=o("plbart"),eho=o(" \u2014 "),US=a("a"),oho=o("PLBartForCausalLM"),rho=o(" (PLBart model)"),tho=l(),a_=a("li"),CZ=a("strong"),aho=o("prophetnet"),sho=o(" \u2014 "),JS=a("a"),nho=o("ProphetNetForCausalLM"),lho=o(" (ProphetNet model)"),iho=l(),s_=a("li"),MZ=a("strong"),dho=o("qdqbert"),cho=o(" \u2014 "),YS=a("a"),mho=o("QDQBertLMHeadModel"),fho=o(" (QDQBert model)"),gho=l(),n_=a("li"),EZ=a("strong"),hho=o("reformer"),uho=o(" \u2014 "),KS=a("a"),pho=o("ReformerModelWithLMHead"),_ho=o(" (Reformer model)"),bho=l(),l_=a("li"),yZ=a("strong"),vho=o("rembert"),Tho=o(" \u2014 "),ZS=a("a"),Fho=o("RemBertForCausalLM"),Cho=o(" (RemBERT model)"),Mho=l(),i_=a("li"),wZ=a("strong"),Eho=o("roberta"),yho=o(" \u2014 "),eP=a("a"),who=o("RobertaForCausalLM"),Aho=o(" (RoBERTa model)"),Lho=l(),d_=a("li"),AZ=a("strong"),Bho=o("roformer"),xho=o(" \u2014 "),oP=a("a"),kho=o("RoFormerForCausalLM"),Rho=o(" (RoFormer model)"),Sho=l(),c_=a("li"),LZ=a("strong"),Pho=o("speech_to_text_2"),$ho=o(" \u2014 "),rP=a("a"),Iho=o("Speech2Text2ForCausalLM"),jho=o(" (Speech2Text2 model)"),Nho=l(),m_=a("li"),BZ=a("strong"),Dho=o("transfo-xl"),qho=o(" \u2014 "),tP=a("a"),Gho=o("TransfoXLLMHeadModel"),Oho=o(" (Transformer-XL model)"),Xho=l(),f_=a("li"),xZ=a("strong"),zho=o("trocr"),Vho=o(" \u2014 "),aP=a("a"),Who=o("TrOCRForCausalLM"),Qho=o(" (TrOCR model)"),Hho=l(),g_=a("li"),kZ=a("strong"),Uho=o("xglm"),Jho=o(" \u2014 "),sP=a("a"),Yho=o("XGLMForCausalLM"),Kho=o(" (XGLM model)"),Zho=l(),h_=a("li"),RZ=a("strong"),euo=o("xlm"),ouo=o(" \u2014 "),nP=a("a"),ruo=o("XLMWithLMHeadModel"),tuo=o(" (XLM model)"),auo=l(),u_=a("li"),SZ=a("strong"),suo=o("xlm-prophetnet"),nuo=o(" \u2014 "),lP=a("a"),luo=o("XLMProphetNetForCausalLM"),iuo=o(" (XLMProphetNet model)"),duo=l(),p_=a("li"),PZ=a("strong"),cuo=o("xlm-roberta"),muo=o(" \u2014 "),iP=a("a"),fuo=o("XLMRobertaForCausalLM"),guo=o(" (XLM-RoBERTa model)"),huo=l(),__=a("li"),$Z=a("strong"),uuo=o("xlm-roberta-xl"),puo=o(" \u2014 "),dP=a("a"),_uo=o("XLMRobertaXLForCausalLM"),buo=o(" (XLM-RoBERTa-XL model)"),vuo=l(),b_=a("li"),IZ=a("strong"),Tuo=o("xlnet"),Fuo=o(" \u2014 "),cP=a("a"),Cuo=o("XLNetLMHeadModel"),Muo=o(" (XLNet model)"),Euo=l(),v_=a("p"),yuo=o("The model is set in evaluation mode by default using "),jZ=a("code"),wuo=o("model.eval()"),Auo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NZ=a("code"),Luo=o("model.train()"),Buo=l(),DZ=a("p"),xuo=o("Examples:"),kuo=l(),m(ty.$$.fragment),x8e=l(),Ui=a("h2"),T_=a("a"),qZ=a("span"),m(ay.$$.fragment),Ruo=l(),GZ=a("span"),Suo=o("AutoModelForMaskedLM"),k8e=l(),Ho=a("div"),m(sy.$$.fragment),Puo=l(),Ji=a("p"),$uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=a("code"),Iuo=o("from_pretrained()"),juo=o("class method or the "),XZ=a("code"),Nuo=o("from_config()"),Duo=o(`class
method.`),quo=l(),ny=a("p"),Guo=o("This class cannot be instantiated directly using "),zZ=a("code"),Ouo=o("__init__()"),Xuo=o(" (throws an error)."),zuo=l(),Gr=a("div"),m(ly.$$.fragment),Vuo=l(),VZ=a("p"),Wuo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Quo=l(),Yi=a("p"),Huo=o(`Note:
Loading a model from its configuration file does `),WZ=a("strong"),Uuo=o("not"),Juo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("code"),Yuo=o("from_pretrained()"),Kuo=o("to load the model weights."),Zuo=l(),HZ=a("p"),epo=o("Examples:"),opo=l(),m(iy.$$.fragment),rpo=l(),Se=a("div"),m(dy.$$.fragment),tpo=l(),UZ=a("p"),apo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),spo=l(),Oa=a("p"),npo=o("The model class to instantiate is selected based on the "),JZ=a("code"),lpo=o("model_type"),ipo=o(` property of the config object (either
passed as an argument or loaded from `),YZ=a("code"),dpo=o("pretrained_model_name_or_path"),cpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KZ=a("code"),mpo=o("pretrained_model_name_or_path"),fpo=o(":"),gpo=l(),I=a("ul"),F_=a("li"),ZZ=a("strong"),hpo=o("albert"),upo=o(" \u2014 "),mP=a("a"),ppo=o("AlbertForMaskedLM"),_po=o(" (ALBERT model)"),bpo=l(),C_=a("li"),eee=a("strong"),vpo=o("bart"),Tpo=o(" \u2014 "),fP=a("a"),Fpo=o("BartForConditionalGeneration"),Cpo=o(" (BART model)"),Mpo=l(),M_=a("li"),oee=a("strong"),Epo=o("bert"),ypo=o(" \u2014 "),gP=a("a"),wpo=o("BertForMaskedLM"),Apo=o(" (BERT model)"),Lpo=l(),E_=a("li"),ree=a("strong"),Bpo=o("big_bird"),xpo=o(" \u2014 "),hP=a("a"),kpo=o("BigBirdForMaskedLM"),Rpo=o(" (BigBird model)"),Spo=l(),y_=a("li"),tee=a("strong"),Ppo=o("camembert"),$po=o(" \u2014 "),uP=a("a"),Ipo=o("CamembertForMaskedLM"),jpo=o(" (CamemBERT model)"),Npo=l(),w_=a("li"),aee=a("strong"),Dpo=o("convbert"),qpo=o(" \u2014 "),pP=a("a"),Gpo=o("ConvBertForMaskedLM"),Opo=o(" (ConvBERT model)"),Xpo=l(),A_=a("li"),see=a("strong"),zpo=o("deberta"),Vpo=o(" \u2014 "),_P=a("a"),Wpo=o("DebertaForMaskedLM"),Qpo=o(" (DeBERTa model)"),Hpo=l(),L_=a("li"),nee=a("strong"),Upo=o("deberta-v2"),Jpo=o(" \u2014 "),bP=a("a"),Ypo=o("DebertaV2ForMaskedLM"),Kpo=o(" (DeBERTa-v2 model)"),Zpo=l(),B_=a("li"),lee=a("strong"),e_o=o("distilbert"),o_o=o(" \u2014 "),vP=a("a"),r_o=o("DistilBertForMaskedLM"),t_o=o(" (DistilBERT model)"),a_o=l(),x_=a("li"),iee=a("strong"),s_o=o("electra"),n_o=o(" \u2014 "),TP=a("a"),l_o=o("ElectraForMaskedLM"),i_o=o(" (ELECTRA model)"),d_o=l(),k_=a("li"),dee=a("strong"),c_o=o("flaubert"),m_o=o(" \u2014 "),FP=a("a"),f_o=o("FlaubertWithLMHeadModel"),g_o=o(" (FlauBERT model)"),h_o=l(),R_=a("li"),cee=a("strong"),u_o=o("fnet"),p_o=o(" \u2014 "),CP=a("a"),__o=o("FNetForMaskedLM"),b_o=o(" (FNet model)"),v_o=l(),S_=a("li"),mee=a("strong"),T_o=o("funnel"),F_o=o(" \u2014 "),MP=a("a"),C_o=o("FunnelForMaskedLM"),M_o=o(" (Funnel Transformer model)"),E_o=l(),P_=a("li"),fee=a("strong"),y_o=o("ibert"),w_o=o(" \u2014 "),EP=a("a"),A_o=o("IBertForMaskedLM"),L_o=o(" (I-BERT model)"),B_o=l(),$_=a("li"),gee=a("strong"),x_o=o("layoutlm"),k_o=o(" \u2014 "),yP=a("a"),R_o=o("LayoutLMForMaskedLM"),S_o=o(" (LayoutLM model)"),P_o=l(),I_=a("li"),hee=a("strong"),$_o=o("longformer"),I_o=o(" \u2014 "),wP=a("a"),j_o=o("LongformerForMaskedLM"),N_o=o(" (Longformer model)"),D_o=l(),j_=a("li"),uee=a("strong"),q_o=o("mbart"),G_o=o(" \u2014 "),AP=a("a"),O_o=o("MBartForConditionalGeneration"),X_o=o(" (mBART model)"),z_o=l(),N_=a("li"),pee=a("strong"),V_o=o("megatron-bert"),W_o=o(" \u2014 "),LP=a("a"),Q_o=o("MegatronBertForMaskedLM"),H_o=o(" (MegatronBert model)"),U_o=l(),D_=a("li"),_ee=a("strong"),J_o=o("mobilebert"),Y_o=o(" \u2014 "),BP=a("a"),K_o=o("MobileBertForMaskedLM"),Z_o=o(" (MobileBERT model)"),ebo=l(),q_=a("li"),bee=a("strong"),obo=o("mpnet"),rbo=o(" \u2014 "),xP=a("a"),tbo=o("MPNetForMaskedLM"),abo=o(" (MPNet model)"),sbo=l(),G_=a("li"),vee=a("strong"),nbo=o("nystromformer"),lbo=o(" \u2014 "),kP=a("a"),ibo=o("NystromformerForMaskedLM"),dbo=o(" (Nystromformer model)"),cbo=l(),O_=a("li"),Tee=a("strong"),mbo=o("perceiver"),fbo=o(" \u2014 "),RP=a("a"),gbo=o("PerceiverForMaskedLM"),hbo=o(" (Perceiver model)"),ubo=l(),X_=a("li"),Fee=a("strong"),pbo=o("qdqbert"),_bo=o(" \u2014 "),SP=a("a"),bbo=o("QDQBertForMaskedLM"),vbo=o(" (QDQBert model)"),Tbo=l(),z_=a("li"),Cee=a("strong"),Fbo=o("reformer"),Cbo=o(" \u2014 "),PP=a("a"),Mbo=o("ReformerForMaskedLM"),Ebo=o(" (Reformer model)"),ybo=l(),V_=a("li"),Mee=a("strong"),wbo=o("rembert"),Abo=o(" \u2014 "),$P=a("a"),Lbo=o("RemBertForMaskedLM"),Bbo=o(" (RemBERT model)"),xbo=l(),W_=a("li"),Eee=a("strong"),kbo=o("roberta"),Rbo=o(" \u2014 "),IP=a("a"),Sbo=o("RobertaForMaskedLM"),Pbo=o(" (RoBERTa model)"),$bo=l(),Q_=a("li"),yee=a("strong"),Ibo=o("roformer"),jbo=o(" \u2014 "),jP=a("a"),Nbo=o("RoFormerForMaskedLM"),Dbo=o(" (RoFormer model)"),qbo=l(),H_=a("li"),wee=a("strong"),Gbo=o("squeezebert"),Obo=o(" \u2014 "),NP=a("a"),Xbo=o("SqueezeBertForMaskedLM"),zbo=o(" (SqueezeBERT model)"),Vbo=l(),U_=a("li"),Aee=a("strong"),Wbo=o("tapas"),Qbo=o(" \u2014 "),DP=a("a"),Hbo=o("TapasForMaskedLM"),Ubo=o(" (TAPAS model)"),Jbo=l(),J_=a("li"),Lee=a("strong"),Ybo=o("wav2vec2"),Kbo=o(" \u2014 "),Bee=a("code"),Zbo=o("Wav2Vec2ForMaskedLM"),e2o=o("(Wav2Vec2 model)"),o2o=l(),Y_=a("li"),xee=a("strong"),r2o=o("xlm"),t2o=o(" \u2014 "),qP=a("a"),a2o=o("XLMWithLMHeadModel"),s2o=o(" (XLM model)"),n2o=l(),K_=a("li"),kee=a("strong"),l2o=o("xlm-roberta"),i2o=o(" \u2014 "),GP=a("a"),d2o=o("XLMRobertaForMaskedLM"),c2o=o(" (XLM-RoBERTa model)"),m2o=l(),Z_=a("li"),Ree=a("strong"),f2o=o("xlm-roberta-xl"),g2o=o(" \u2014 "),OP=a("a"),h2o=o("XLMRobertaXLForMaskedLM"),u2o=o(" (XLM-RoBERTa-XL model)"),p2o=l(),eb=a("li"),See=a("strong"),_2o=o("yoso"),b2o=o(" \u2014 "),XP=a("a"),v2o=o("YosoForMaskedLM"),T2o=o(" (YOSO model)"),F2o=l(),ob=a("p"),C2o=o("The model is set in evaluation mode by default using "),Pee=a("code"),M2o=o("model.eval()"),E2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ee=a("code"),y2o=o("model.train()"),w2o=l(),Iee=a("p"),A2o=o("Examples:"),L2o=l(),m(cy.$$.fragment),R8e=l(),Ki=a("h2"),rb=a("a"),jee=a("span"),m(my.$$.fragment),B2o=l(),Nee=a("span"),x2o=o("AutoModelForSeq2SeqLM"),S8e=l(),Uo=a("div"),m(fy.$$.fragment),k2o=l(),Zi=a("p"),R2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dee=a("code"),S2o=o("from_pretrained()"),P2o=o("class method or the "),qee=a("code"),$2o=o("from_config()"),I2o=o(`class
method.`),j2o=l(),gy=a("p"),N2o=o("This class cannot be instantiated directly using "),Gee=a("code"),D2o=o("__init__()"),q2o=o(" (throws an error)."),G2o=l(),Or=a("div"),m(hy.$$.fragment),O2o=l(),Oee=a("p"),X2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z2o=l(),ed=a("p"),V2o=o(`Note:
Loading a model from its configuration file does `),Xee=a("strong"),W2o=o("not"),Q2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("code"),H2o=o("from_pretrained()"),U2o=o("to load the model weights."),J2o=l(),Vee=a("p"),Y2o=o("Examples:"),K2o=l(),m(uy.$$.fragment),Z2o=l(),Pe=a("div"),m(py.$$.fragment),evo=l(),Wee=a("p"),ovo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rvo=l(),Xa=a("p"),tvo=o("The model class to instantiate is selected based on the "),Qee=a("code"),avo=o("model_type"),svo=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),nvo=o("pretrained_model_name_or_path"),lvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=a("code"),ivo=o("pretrained_model_name_or_path"),dvo=o(":"),cvo=l(),ae=a("ul"),tb=a("li"),Jee=a("strong"),mvo=o("bart"),fvo=o(" \u2014 "),zP=a("a"),gvo=o("BartForConditionalGeneration"),hvo=o(" (BART model)"),uvo=l(),ab=a("li"),Yee=a("strong"),pvo=o("bigbird_pegasus"),_vo=o(" \u2014 "),VP=a("a"),bvo=o("BigBirdPegasusForConditionalGeneration"),vvo=o(" (BigBirdPegasus model)"),Tvo=l(),sb=a("li"),Kee=a("strong"),Fvo=o("blenderbot"),Cvo=o(" \u2014 "),WP=a("a"),Mvo=o("BlenderbotForConditionalGeneration"),Evo=o(" (Blenderbot model)"),yvo=l(),nb=a("li"),Zee=a("strong"),wvo=o("blenderbot-small"),Avo=o(" \u2014 "),QP=a("a"),Lvo=o("BlenderbotSmallForConditionalGeneration"),Bvo=o(" (BlenderbotSmall model)"),xvo=l(),lb=a("li"),eoe=a("strong"),kvo=o("encoder-decoder"),Rvo=o(" \u2014 "),HP=a("a"),Svo=o("EncoderDecoderModel"),Pvo=o(" (Encoder decoder model)"),$vo=l(),ib=a("li"),ooe=a("strong"),Ivo=o("fsmt"),jvo=o(" \u2014 "),UP=a("a"),Nvo=o("FSMTForConditionalGeneration"),Dvo=o(" (FairSeq Machine-Translation model)"),qvo=l(),db=a("li"),roe=a("strong"),Gvo=o("led"),Ovo=o(" \u2014 "),JP=a("a"),Xvo=o("LEDForConditionalGeneration"),zvo=o(" (LED model)"),Vvo=l(),cb=a("li"),toe=a("strong"),Wvo=o("m2m_100"),Qvo=o(" \u2014 "),YP=a("a"),Hvo=o("M2M100ForConditionalGeneration"),Uvo=o(" (M2M100 model)"),Jvo=l(),mb=a("li"),aoe=a("strong"),Yvo=o("marian"),Kvo=o(" \u2014 "),KP=a("a"),Zvo=o("MarianMTModel"),eTo=o(" (Marian model)"),oTo=l(),fb=a("li"),soe=a("strong"),rTo=o("mbart"),tTo=o(" \u2014 "),ZP=a("a"),aTo=o("MBartForConditionalGeneration"),sTo=o(" (mBART model)"),nTo=l(),gb=a("li"),noe=a("strong"),lTo=o("mt5"),iTo=o(" \u2014 "),e$=a("a"),dTo=o("MT5ForConditionalGeneration"),cTo=o(" (mT5 model)"),mTo=l(),hb=a("li"),loe=a("strong"),fTo=o("pegasus"),gTo=o(" \u2014 "),o$=a("a"),hTo=o("PegasusForConditionalGeneration"),uTo=o(" (Pegasus model)"),pTo=l(),ub=a("li"),ioe=a("strong"),_To=o("plbart"),bTo=o(" \u2014 "),r$=a("a"),vTo=o("PLBartForConditionalGeneration"),TTo=o(" (PLBart model)"),FTo=l(),pb=a("li"),doe=a("strong"),CTo=o("prophetnet"),MTo=o(" \u2014 "),t$=a("a"),ETo=o("ProphetNetForConditionalGeneration"),yTo=o(" (ProphetNet model)"),wTo=l(),_b=a("li"),coe=a("strong"),ATo=o("t5"),LTo=o(" \u2014 "),a$=a("a"),BTo=o("T5ForConditionalGeneration"),xTo=o(" (T5 model)"),kTo=l(),bb=a("li"),moe=a("strong"),RTo=o("xlm-prophetnet"),STo=o(" \u2014 "),s$=a("a"),PTo=o("XLMProphetNetForConditionalGeneration"),$To=o(" (XLMProphetNet model)"),ITo=l(),vb=a("p"),jTo=o("The model is set in evaluation mode by default using "),foe=a("code"),NTo=o("model.eval()"),DTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=a("code"),qTo=o("model.train()"),GTo=l(),hoe=a("p"),OTo=o("Examples:"),XTo=l(),m(_y.$$.fragment),P8e=l(),od=a("h2"),Tb=a("a"),uoe=a("span"),m(by.$$.fragment),zTo=l(),poe=a("span"),VTo=o("AutoModelForSequenceClassification"),$8e=l(),Jo=a("div"),m(vy.$$.fragment),WTo=l(),rd=a("p"),QTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_oe=a("code"),HTo=o("from_pretrained()"),UTo=o("class method or the "),boe=a("code"),JTo=o("from_config()"),YTo=o(`class
method.`),KTo=l(),Ty=a("p"),ZTo=o("This class cannot be instantiated directly using "),voe=a("code"),e1o=o("__init__()"),o1o=o(" (throws an error)."),r1o=l(),Xr=a("div"),m(Fy.$$.fragment),t1o=l(),Toe=a("p"),a1o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s1o=l(),td=a("p"),n1o=o(`Note:
Loading a model from its configuration file does `),Foe=a("strong"),l1o=o("not"),i1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("code"),d1o=o("from_pretrained()"),c1o=o("to load the model weights."),m1o=l(),Moe=a("p"),f1o=o("Examples:"),g1o=l(),m(Cy.$$.fragment),h1o=l(),$e=a("div"),m(My.$$.fragment),u1o=l(),Eoe=a("p"),p1o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_1o=l(),za=a("p"),b1o=o("The model class to instantiate is selected based on the "),yoe=a("code"),v1o=o("model_type"),T1o=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),F1o=o("pretrained_model_name_or_path"),C1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),M1o=o("pretrained_model_name_or_path"),E1o=o(":"),y1o=l(),A=a("ul"),Fb=a("li"),Loe=a("strong"),w1o=o("albert"),A1o=o(" \u2014 "),n$=a("a"),L1o=o("AlbertForSequenceClassification"),B1o=o(" (ALBERT model)"),x1o=l(),Cb=a("li"),Boe=a("strong"),k1o=o("bart"),R1o=o(" \u2014 "),l$=a("a"),S1o=o("BartForSequenceClassification"),P1o=o(" (BART model)"),$1o=l(),Mb=a("li"),xoe=a("strong"),I1o=o("bert"),j1o=o(" \u2014 "),i$=a("a"),N1o=o("BertForSequenceClassification"),D1o=o(" (BERT model)"),q1o=l(),Eb=a("li"),koe=a("strong"),G1o=o("big_bird"),O1o=o(" \u2014 "),d$=a("a"),X1o=o("BigBirdForSequenceClassification"),z1o=o(" (BigBird model)"),V1o=l(),yb=a("li"),Roe=a("strong"),W1o=o("bigbird_pegasus"),Q1o=o(" \u2014 "),c$=a("a"),H1o=o("BigBirdPegasusForSequenceClassification"),U1o=o(" (BigBirdPegasus model)"),J1o=l(),wb=a("li"),Soe=a("strong"),Y1o=o("camembert"),K1o=o(" \u2014 "),m$=a("a"),Z1o=o("CamembertForSequenceClassification"),eFo=o(" (CamemBERT model)"),oFo=l(),Ab=a("li"),Poe=a("strong"),rFo=o("canine"),tFo=o(" \u2014 "),f$=a("a"),aFo=o("CanineForSequenceClassification"),sFo=o(" (Canine model)"),nFo=l(),Lb=a("li"),$oe=a("strong"),lFo=o("convbert"),iFo=o(" \u2014 "),g$=a("a"),dFo=o("ConvBertForSequenceClassification"),cFo=o(" (ConvBERT model)"),mFo=l(),Bb=a("li"),Ioe=a("strong"),fFo=o("ctrl"),gFo=o(" \u2014 "),h$=a("a"),hFo=o("CTRLForSequenceClassification"),uFo=o(" (CTRL model)"),pFo=l(),xb=a("li"),joe=a("strong"),_Fo=o("deberta"),bFo=o(" \u2014 "),u$=a("a"),vFo=o("DebertaForSequenceClassification"),TFo=o(" (DeBERTa model)"),FFo=l(),kb=a("li"),Noe=a("strong"),CFo=o("deberta-v2"),MFo=o(" \u2014 "),p$=a("a"),EFo=o("DebertaV2ForSequenceClassification"),yFo=o(" (DeBERTa-v2 model)"),wFo=l(),Rb=a("li"),Doe=a("strong"),AFo=o("distilbert"),LFo=o(" \u2014 "),_$=a("a"),BFo=o("DistilBertForSequenceClassification"),xFo=o(" (DistilBERT model)"),kFo=l(),Sb=a("li"),qoe=a("strong"),RFo=o("electra"),SFo=o(" \u2014 "),b$=a("a"),PFo=o("ElectraForSequenceClassification"),$Fo=o(" (ELECTRA model)"),IFo=l(),Pb=a("li"),Goe=a("strong"),jFo=o("flaubert"),NFo=o(" \u2014 "),v$=a("a"),DFo=o("FlaubertForSequenceClassification"),qFo=o(" (FlauBERT model)"),GFo=l(),$b=a("li"),Ooe=a("strong"),OFo=o("fnet"),XFo=o(" \u2014 "),T$=a("a"),zFo=o("FNetForSequenceClassification"),VFo=o(" (FNet model)"),WFo=l(),Ib=a("li"),Xoe=a("strong"),QFo=o("funnel"),HFo=o(" \u2014 "),F$=a("a"),UFo=o("FunnelForSequenceClassification"),JFo=o(" (Funnel Transformer model)"),YFo=l(),jb=a("li"),zoe=a("strong"),KFo=o("gpt2"),ZFo=o(" \u2014 "),C$=a("a"),eCo=o("GPT2ForSequenceClassification"),oCo=o(" (OpenAI GPT-2 model)"),rCo=l(),Nb=a("li"),Voe=a("strong"),tCo=o("gpt_neo"),aCo=o(" \u2014 "),M$=a("a"),sCo=o("GPTNeoForSequenceClassification"),nCo=o(" (GPT Neo model)"),lCo=l(),Db=a("li"),Woe=a("strong"),iCo=o("gptj"),dCo=o(" \u2014 "),E$=a("a"),cCo=o("GPTJForSequenceClassification"),mCo=o(" (GPT-J model)"),fCo=l(),qb=a("li"),Qoe=a("strong"),gCo=o("ibert"),hCo=o(" \u2014 "),y$=a("a"),uCo=o("IBertForSequenceClassification"),pCo=o(" (I-BERT model)"),_Co=l(),Gb=a("li"),Hoe=a("strong"),bCo=o("layoutlm"),vCo=o(" \u2014 "),w$=a("a"),TCo=o("LayoutLMForSequenceClassification"),FCo=o(" (LayoutLM model)"),CCo=l(),Ob=a("li"),Uoe=a("strong"),MCo=o("layoutlmv2"),ECo=o(" \u2014 "),A$=a("a"),yCo=o("LayoutLMv2ForSequenceClassification"),wCo=o(" (LayoutLMv2 model)"),ACo=l(),Xb=a("li"),Joe=a("strong"),LCo=o("led"),BCo=o(" \u2014 "),L$=a("a"),xCo=o("LEDForSequenceClassification"),kCo=o(" (LED model)"),RCo=l(),zb=a("li"),Yoe=a("strong"),SCo=o("longformer"),PCo=o(" \u2014 "),B$=a("a"),$Co=o("LongformerForSequenceClassification"),ICo=o(" (Longformer model)"),jCo=l(),Vb=a("li"),Koe=a("strong"),NCo=o("mbart"),DCo=o(" \u2014 "),x$=a("a"),qCo=o("MBartForSequenceClassification"),GCo=o(" (mBART model)"),OCo=l(),Wb=a("li"),Zoe=a("strong"),XCo=o("megatron-bert"),zCo=o(" \u2014 "),k$=a("a"),VCo=o("MegatronBertForSequenceClassification"),WCo=o(" (MegatronBert model)"),QCo=l(),Qb=a("li"),ere=a("strong"),HCo=o("mobilebert"),UCo=o(" \u2014 "),R$=a("a"),JCo=o("MobileBertForSequenceClassification"),YCo=o(" (MobileBERT model)"),KCo=l(),Hb=a("li"),ore=a("strong"),ZCo=o("mpnet"),e4o=o(" \u2014 "),S$=a("a"),o4o=o("MPNetForSequenceClassification"),r4o=o(" (MPNet model)"),t4o=l(),Ub=a("li"),rre=a("strong"),a4o=o("nystromformer"),s4o=o(" \u2014 "),P$=a("a"),n4o=o("NystromformerForSequenceClassification"),l4o=o(" (Nystromformer model)"),i4o=l(),Jb=a("li"),tre=a("strong"),d4o=o("openai-gpt"),c4o=o(" \u2014 "),$$=a("a"),m4o=o("OpenAIGPTForSequenceClassification"),f4o=o(" (OpenAI GPT model)"),g4o=l(),Yb=a("li"),are=a("strong"),h4o=o("perceiver"),u4o=o(" \u2014 "),I$=a("a"),p4o=o("PerceiverForSequenceClassification"),_4o=o(" (Perceiver model)"),b4o=l(),Kb=a("li"),sre=a("strong"),v4o=o("plbart"),T4o=o(" \u2014 "),j$=a("a"),F4o=o("PLBartForSequenceClassification"),C4o=o(" (PLBart model)"),M4o=l(),Zb=a("li"),nre=a("strong"),E4o=o("qdqbert"),y4o=o(" \u2014 "),N$=a("a"),w4o=o("QDQBertForSequenceClassification"),A4o=o(" (QDQBert model)"),L4o=l(),e2=a("li"),lre=a("strong"),B4o=o("reformer"),x4o=o(" \u2014 "),D$=a("a"),k4o=o("ReformerForSequenceClassification"),R4o=o(" (Reformer model)"),S4o=l(),o2=a("li"),ire=a("strong"),P4o=o("rembert"),$4o=o(" \u2014 "),q$=a("a"),I4o=o("RemBertForSequenceClassification"),j4o=o(" (RemBERT model)"),N4o=l(),r2=a("li"),dre=a("strong"),D4o=o("roberta"),q4o=o(" \u2014 "),G$=a("a"),G4o=o("RobertaForSequenceClassification"),O4o=o(" (RoBERTa model)"),X4o=l(),t2=a("li"),cre=a("strong"),z4o=o("roformer"),V4o=o(" \u2014 "),O$=a("a"),W4o=o("RoFormerForSequenceClassification"),Q4o=o(" (RoFormer model)"),H4o=l(),a2=a("li"),mre=a("strong"),U4o=o("squeezebert"),J4o=o(" \u2014 "),X$=a("a"),Y4o=o("SqueezeBertForSequenceClassification"),K4o=o(" (SqueezeBERT model)"),Z4o=l(),s2=a("li"),fre=a("strong"),eMo=o("tapas"),oMo=o(" \u2014 "),z$=a("a"),rMo=o("TapasForSequenceClassification"),tMo=o(" (TAPAS model)"),aMo=l(),n2=a("li"),gre=a("strong"),sMo=o("transfo-xl"),nMo=o(" \u2014 "),V$=a("a"),lMo=o("TransfoXLForSequenceClassification"),iMo=o(" (Transformer-XL model)"),dMo=l(),l2=a("li"),hre=a("strong"),cMo=o("xlm"),mMo=o(" \u2014 "),W$=a("a"),fMo=o("XLMForSequenceClassification"),gMo=o(" (XLM model)"),hMo=l(),i2=a("li"),ure=a("strong"),uMo=o("xlm-roberta"),pMo=o(" \u2014 "),Q$=a("a"),_Mo=o("XLMRobertaForSequenceClassification"),bMo=o(" (XLM-RoBERTa model)"),vMo=l(),d2=a("li"),pre=a("strong"),TMo=o("xlm-roberta-xl"),FMo=o(" \u2014 "),H$=a("a"),CMo=o("XLMRobertaXLForSequenceClassification"),MMo=o(" (XLM-RoBERTa-XL model)"),EMo=l(),c2=a("li"),_re=a("strong"),yMo=o("xlnet"),wMo=o(" \u2014 "),U$=a("a"),AMo=o("XLNetForSequenceClassification"),LMo=o(" (XLNet model)"),BMo=l(),m2=a("li"),bre=a("strong"),xMo=o("yoso"),kMo=o(" \u2014 "),J$=a("a"),RMo=o("YosoForSequenceClassification"),SMo=o(" (YOSO model)"),PMo=l(),f2=a("p"),$Mo=o("The model is set in evaluation mode by default using "),vre=a("code"),IMo=o("model.eval()"),jMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=a("code"),NMo=o("model.train()"),DMo=l(),Fre=a("p"),qMo=o("Examples:"),GMo=l(),m(Ey.$$.fragment),I8e=l(),ad=a("h2"),g2=a("a"),Cre=a("span"),m(yy.$$.fragment),OMo=l(),Mre=a("span"),XMo=o("AutoModelForMultipleChoice"),j8e=l(),Yo=a("div"),m(wy.$$.fragment),zMo=l(),sd=a("p"),VMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ere=a("code"),WMo=o("from_pretrained()"),QMo=o("class method or the "),yre=a("code"),HMo=o("from_config()"),UMo=o(`class
method.`),JMo=l(),Ay=a("p"),YMo=o("This class cannot be instantiated directly using "),wre=a("code"),KMo=o("__init__()"),ZMo=o(" (throws an error)."),eEo=l(),zr=a("div"),m(Ly.$$.fragment),oEo=l(),Are=a("p"),rEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tEo=l(),nd=a("p"),aEo=o(`Note:
Loading a model from its configuration file does `),Lre=a("strong"),sEo=o("not"),nEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("code"),lEo=o("from_pretrained()"),iEo=o("to load the model weights."),dEo=l(),xre=a("p"),cEo=o("Examples:"),mEo=l(),m(By.$$.fragment),fEo=l(),Ie=a("div"),m(xy.$$.fragment),gEo=l(),kre=a("p"),hEo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uEo=l(),Va=a("p"),pEo=o("The model class to instantiate is selected based on the "),Rre=a("code"),_Eo=o("model_type"),bEo=o(` property of the config object (either
passed as an argument or loaded from `),Sre=a("code"),vEo=o("pretrained_model_name_or_path"),TEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),FEo=o("pretrained_model_name_or_path"),CEo=o(":"),MEo=l(),G=a("ul"),h2=a("li"),$re=a("strong"),EEo=o("albert"),yEo=o(" \u2014 "),Y$=a("a"),wEo=o("AlbertForMultipleChoice"),AEo=o(" (ALBERT model)"),LEo=l(),u2=a("li"),Ire=a("strong"),BEo=o("bert"),xEo=o(" \u2014 "),K$=a("a"),kEo=o("BertForMultipleChoice"),REo=o(" (BERT model)"),SEo=l(),p2=a("li"),jre=a("strong"),PEo=o("big_bird"),$Eo=o(" \u2014 "),Z$=a("a"),IEo=o("BigBirdForMultipleChoice"),jEo=o(" (BigBird model)"),NEo=l(),_2=a("li"),Nre=a("strong"),DEo=o("camembert"),qEo=o(" \u2014 "),eI=a("a"),GEo=o("CamembertForMultipleChoice"),OEo=o(" (CamemBERT model)"),XEo=l(),b2=a("li"),Dre=a("strong"),zEo=o("canine"),VEo=o(" \u2014 "),oI=a("a"),WEo=o("CanineForMultipleChoice"),QEo=o(" (Canine model)"),HEo=l(),v2=a("li"),qre=a("strong"),UEo=o("convbert"),JEo=o(" \u2014 "),rI=a("a"),YEo=o("ConvBertForMultipleChoice"),KEo=o(" (ConvBERT model)"),ZEo=l(),T2=a("li"),Gre=a("strong"),e3o=o("distilbert"),o3o=o(" \u2014 "),tI=a("a"),r3o=o("DistilBertForMultipleChoice"),t3o=o(" (DistilBERT model)"),a3o=l(),F2=a("li"),Ore=a("strong"),s3o=o("electra"),n3o=o(" \u2014 "),aI=a("a"),l3o=o("ElectraForMultipleChoice"),i3o=o(" (ELECTRA model)"),d3o=l(),C2=a("li"),Xre=a("strong"),c3o=o("flaubert"),m3o=o(" \u2014 "),sI=a("a"),f3o=o("FlaubertForMultipleChoice"),g3o=o(" (FlauBERT model)"),h3o=l(),M2=a("li"),zre=a("strong"),u3o=o("fnet"),p3o=o(" \u2014 "),nI=a("a"),_3o=o("FNetForMultipleChoice"),b3o=o(" (FNet model)"),v3o=l(),E2=a("li"),Vre=a("strong"),T3o=o("funnel"),F3o=o(" \u2014 "),lI=a("a"),C3o=o("FunnelForMultipleChoice"),M3o=o(" (Funnel Transformer model)"),E3o=l(),y2=a("li"),Wre=a("strong"),y3o=o("ibert"),w3o=o(" \u2014 "),iI=a("a"),A3o=o("IBertForMultipleChoice"),L3o=o(" (I-BERT model)"),B3o=l(),w2=a("li"),Qre=a("strong"),x3o=o("longformer"),k3o=o(" \u2014 "),dI=a("a"),R3o=o("LongformerForMultipleChoice"),S3o=o(" (Longformer model)"),P3o=l(),A2=a("li"),Hre=a("strong"),$3o=o("megatron-bert"),I3o=o(" \u2014 "),cI=a("a"),j3o=o("MegatronBertForMultipleChoice"),N3o=o(" (MegatronBert model)"),D3o=l(),L2=a("li"),Ure=a("strong"),q3o=o("mobilebert"),G3o=o(" \u2014 "),mI=a("a"),O3o=o("MobileBertForMultipleChoice"),X3o=o(" (MobileBERT model)"),z3o=l(),B2=a("li"),Jre=a("strong"),V3o=o("mpnet"),W3o=o(" \u2014 "),fI=a("a"),Q3o=o("MPNetForMultipleChoice"),H3o=o(" (MPNet model)"),U3o=l(),x2=a("li"),Yre=a("strong"),J3o=o("nystromformer"),Y3o=o(" \u2014 "),gI=a("a"),K3o=o("NystromformerForMultipleChoice"),Z3o=o(" (Nystromformer model)"),e5o=l(),k2=a("li"),Kre=a("strong"),o5o=o("qdqbert"),r5o=o(" \u2014 "),hI=a("a"),t5o=o("QDQBertForMultipleChoice"),a5o=o(" (QDQBert model)"),s5o=l(),R2=a("li"),Zre=a("strong"),n5o=o("rembert"),l5o=o(" \u2014 "),uI=a("a"),i5o=o("RemBertForMultipleChoice"),d5o=o(" (RemBERT model)"),c5o=l(),S2=a("li"),ete=a("strong"),m5o=o("roberta"),f5o=o(" \u2014 "),pI=a("a"),g5o=o("RobertaForMultipleChoice"),h5o=o(" (RoBERTa model)"),u5o=l(),P2=a("li"),ote=a("strong"),p5o=o("roformer"),_5o=o(" \u2014 "),_I=a("a"),b5o=o("RoFormerForMultipleChoice"),v5o=o(" (RoFormer model)"),T5o=l(),$2=a("li"),rte=a("strong"),F5o=o("squeezebert"),C5o=o(" \u2014 "),bI=a("a"),M5o=o("SqueezeBertForMultipleChoice"),E5o=o(" (SqueezeBERT model)"),y5o=l(),I2=a("li"),tte=a("strong"),w5o=o("xlm"),A5o=o(" \u2014 "),vI=a("a"),L5o=o("XLMForMultipleChoice"),B5o=o(" (XLM model)"),x5o=l(),j2=a("li"),ate=a("strong"),k5o=o("xlm-roberta"),R5o=o(" \u2014 "),TI=a("a"),S5o=o("XLMRobertaForMultipleChoice"),P5o=o(" (XLM-RoBERTa model)"),$5o=l(),N2=a("li"),ste=a("strong"),I5o=o("xlm-roberta-xl"),j5o=o(" \u2014 "),FI=a("a"),N5o=o("XLMRobertaXLForMultipleChoice"),D5o=o(" (XLM-RoBERTa-XL model)"),q5o=l(),D2=a("li"),nte=a("strong"),G5o=o("xlnet"),O5o=o(" \u2014 "),CI=a("a"),X5o=o("XLNetForMultipleChoice"),z5o=o(" (XLNet model)"),V5o=l(),q2=a("li"),lte=a("strong"),W5o=o("yoso"),Q5o=o(" \u2014 "),MI=a("a"),H5o=o("YosoForMultipleChoice"),U5o=o(" (YOSO model)"),J5o=l(),G2=a("p"),Y5o=o("The model is set in evaluation mode by default using "),ite=a("code"),K5o=o("model.eval()"),Z5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=a("code"),eyo=o("model.train()"),oyo=l(),cte=a("p"),ryo=o("Examples:"),tyo=l(),m(ky.$$.fragment),N8e=l(),ld=a("h2"),O2=a("a"),mte=a("span"),m(Ry.$$.fragment),ayo=l(),fte=a("span"),syo=o("AutoModelForNextSentencePrediction"),D8e=l(),Ko=a("div"),m(Sy.$$.fragment),nyo=l(),id=a("p"),lyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gte=a("code"),iyo=o("from_pretrained()"),dyo=o("class method or the "),hte=a("code"),cyo=o("from_config()"),myo=o(`class
method.`),fyo=l(),Py=a("p"),gyo=o("This class cannot be instantiated directly using "),ute=a("code"),hyo=o("__init__()"),uyo=o(" (throws an error)."),pyo=l(),Vr=a("div"),m($y.$$.fragment),_yo=l(),pte=a("p"),byo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vyo=l(),dd=a("p"),Tyo=o(`Note:
Loading a model from its configuration file does `),_te=a("strong"),Fyo=o("not"),Cyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),Myo=o("from_pretrained()"),Eyo=o("to load the model weights."),yyo=l(),vte=a("p"),wyo=o("Examples:"),Ayo=l(),m(Iy.$$.fragment),Lyo=l(),je=a("div"),m(jy.$$.fragment),Byo=l(),Tte=a("p"),xyo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kyo=l(),Wa=a("p"),Ryo=o("The model class to instantiate is selected based on the "),Fte=a("code"),Syo=o("model_type"),Pyo=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),$yo=o("pretrained_model_name_or_path"),Iyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),jyo=o("pretrained_model_name_or_path"),Nyo=o(":"),Dyo=l(),sa=a("ul"),X2=a("li"),Ete=a("strong"),qyo=o("bert"),Gyo=o(" \u2014 "),EI=a("a"),Oyo=o("BertForNextSentencePrediction"),Xyo=o(" (BERT model)"),zyo=l(),z2=a("li"),yte=a("strong"),Vyo=o("fnet"),Wyo=o(" \u2014 "),yI=a("a"),Qyo=o("FNetForNextSentencePrediction"),Hyo=o(" (FNet model)"),Uyo=l(),V2=a("li"),wte=a("strong"),Jyo=o("megatron-bert"),Yyo=o(" \u2014 "),wI=a("a"),Kyo=o("MegatronBertForNextSentencePrediction"),Zyo=o(" (MegatronBert model)"),ewo=l(),W2=a("li"),Ate=a("strong"),owo=o("mobilebert"),rwo=o(" \u2014 "),AI=a("a"),two=o("MobileBertForNextSentencePrediction"),awo=o(" (MobileBERT model)"),swo=l(),Q2=a("li"),Lte=a("strong"),nwo=o("qdqbert"),lwo=o(" \u2014 "),LI=a("a"),iwo=o("QDQBertForNextSentencePrediction"),dwo=o(" (QDQBert model)"),cwo=l(),H2=a("p"),mwo=o("The model is set in evaluation mode by default using "),Bte=a("code"),fwo=o("model.eval()"),gwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=a("code"),hwo=o("model.train()"),uwo=l(),kte=a("p"),pwo=o("Examples:"),_wo=l(),m(Ny.$$.fragment),q8e=l(),cd=a("h2"),U2=a("a"),Rte=a("span"),m(Dy.$$.fragment),bwo=l(),Ste=a("span"),vwo=o("AutoModelForTokenClassification"),G8e=l(),Zo=a("div"),m(qy.$$.fragment),Two=l(),md=a("p"),Fwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pte=a("code"),Cwo=o("from_pretrained()"),Mwo=o("class method or the "),$te=a("code"),Ewo=o("from_config()"),ywo=o(`class
method.`),wwo=l(),Gy=a("p"),Awo=o("This class cannot be instantiated directly using "),Ite=a("code"),Lwo=o("__init__()"),Bwo=o(" (throws an error)."),xwo=l(),Wr=a("div"),m(Oy.$$.fragment),kwo=l(),jte=a("p"),Rwo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Swo=l(),fd=a("p"),Pwo=o(`Note:
Loading a model from its configuration file does `),Nte=a("strong"),$wo=o("not"),Iwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("code"),jwo=o("from_pretrained()"),Nwo=o("to load the model weights."),Dwo=l(),qte=a("p"),qwo=o("Examples:"),Gwo=l(),m(Xy.$$.fragment),Owo=l(),Ne=a("div"),m(zy.$$.fragment),Xwo=l(),Gte=a("p"),zwo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vwo=l(),Qa=a("p"),Wwo=o("The model class to instantiate is selected based on the "),Ote=a("code"),Qwo=o("model_type"),Hwo=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),Uwo=o("pretrained_model_name_or_path"),Jwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),Ywo=o("pretrained_model_name_or_path"),Kwo=o(":"),Zwo=l(),D=a("ul"),J2=a("li"),Vte=a("strong"),eAo=o("albert"),oAo=o(" \u2014 "),BI=a("a"),rAo=o("AlbertForTokenClassification"),tAo=o(" (ALBERT model)"),aAo=l(),Y2=a("li"),Wte=a("strong"),sAo=o("bert"),nAo=o(" \u2014 "),xI=a("a"),lAo=o("BertForTokenClassification"),iAo=o(" (BERT model)"),dAo=l(),K2=a("li"),Qte=a("strong"),cAo=o("big_bird"),mAo=o(" \u2014 "),kI=a("a"),fAo=o("BigBirdForTokenClassification"),gAo=o(" (BigBird model)"),hAo=l(),Z2=a("li"),Hte=a("strong"),uAo=o("camembert"),pAo=o(" \u2014 "),RI=a("a"),_Ao=o("CamembertForTokenClassification"),bAo=o(" (CamemBERT model)"),vAo=l(),ev=a("li"),Ute=a("strong"),TAo=o("canine"),FAo=o(" \u2014 "),SI=a("a"),CAo=o("CanineForTokenClassification"),MAo=o(" (Canine model)"),EAo=l(),ov=a("li"),Jte=a("strong"),yAo=o("convbert"),wAo=o(" \u2014 "),PI=a("a"),AAo=o("ConvBertForTokenClassification"),LAo=o(" (ConvBERT model)"),BAo=l(),rv=a("li"),Yte=a("strong"),xAo=o("deberta"),kAo=o(" \u2014 "),$I=a("a"),RAo=o("DebertaForTokenClassification"),SAo=o(" (DeBERTa model)"),PAo=l(),tv=a("li"),Kte=a("strong"),$Ao=o("deberta-v2"),IAo=o(" \u2014 "),II=a("a"),jAo=o("DebertaV2ForTokenClassification"),NAo=o(" (DeBERTa-v2 model)"),DAo=l(),av=a("li"),Zte=a("strong"),qAo=o("distilbert"),GAo=o(" \u2014 "),jI=a("a"),OAo=o("DistilBertForTokenClassification"),XAo=o(" (DistilBERT model)"),zAo=l(),sv=a("li"),eae=a("strong"),VAo=o("electra"),WAo=o(" \u2014 "),NI=a("a"),QAo=o("ElectraForTokenClassification"),HAo=o(" (ELECTRA model)"),UAo=l(),nv=a("li"),oae=a("strong"),JAo=o("flaubert"),YAo=o(" \u2014 "),DI=a("a"),KAo=o("FlaubertForTokenClassification"),ZAo=o(" (FlauBERT model)"),e6o=l(),lv=a("li"),rae=a("strong"),o6o=o("fnet"),r6o=o(" \u2014 "),qI=a("a"),t6o=o("FNetForTokenClassification"),a6o=o(" (FNet model)"),s6o=l(),iv=a("li"),tae=a("strong"),n6o=o("funnel"),l6o=o(" \u2014 "),GI=a("a"),i6o=o("FunnelForTokenClassification"),d6o=o(" (Funnel Transformer model)"),c6o=l(),dv=a("li"),aae=a("strong"),m6o=o("gpt2"),f6o=o(" \u2014 "),OI=a("a"),g6o=o("GPT2ForTokenClassification"),h6o=o(" (OpenAI GPT-2 model)"),u6o=l(),cv=a("li"),sae=a("strong"),p6o=o("ibert"),_6o=o(" \u2014 "),XI=a("a"),b6o=o("IBertForTokenClassification"),v6o=o(" (I-BERT model)"),T6o=l(),mv=a("li"),nae=a("strong"),F6o=o("layoutlm"),C6o=o(" \u2014 "),zI=a("a"),M6o=o("LayoutLMForTokenClassification"),E6o=o(" (LayoutLM model)"),y6o=l(),fv=a("li"),lae=a("strong"),w6o=o("layoutlmv2"),A6o=o(" \u2014 "),VI=a("a"),L6o=o("LayoutLMv2ForTokenClassification"),B6o=o(" (LayoutLMv2 model)"),x6o=l(),gv=a("li"),iae=a("strong"),k6o=o("longformer"),R6o=o(" \u2014 "),WI=a("a"),S6o=o("LongformerForTokenClassification"),P6o=o(" (Longformer model)"),$6o=l(),hv=a("li"),dae=a("strong"),I6o=o("megatron-bert"),j6o=o(" \u2014 "),QI=a("a"),N6o=o("MegatronBertForTokenClassification"),D6o=o(" (MegatronBert model)"),q6o=l(),uv=a("li"),cae=a("strong"),G6o=o("mobilebert"),O6o=o(" \u2014 "),HI=a("a"),X6o=o("MobileBertForTokenClassification"),z6o=o(" (MobileBERT model)"),V6o=l(),pv=a("li"),mae=a("strong"),W6o=o("mpnet"),Q6o=o(" \u2014 "),UI=a("a"),H6o=o("MPNetForTokenClassification"),U6o=o(" (MPNet model)"),J6o=l(),_v=a("li"),fae=a("strong"),Y6o=o("nystromformer"),K6o=o(" \u2014 "),JI=a("a"),Z6o=o("NystromformerForTokenClassification"),e0o=o(" (Nystromformer model)"),o0o=l(),bv=a("li"),gae=a("strong"),r0o=o("qdqbert"),t0o=o(" \u2014 "),YI=a("a"),a0o=o("QDQBertForTokenClassification"),s0o=o(" (QDQBert model)"),n0o=l(),vv=a("li"),hae=a("strong"),l0o=o("rembert"),i0o=o(" \u2014 "),KI=a("a"),d0o=o("RemBertForTokenClassification"),c0o=o(" (RemBERT model)"),m0o=l(),Tv=a("li"),uae=a("strong"),f0o=o("roberta"),g0o=o(" \u2014 "),ZI=a("a"),h0o=o("RobertaForTokenClassification"),u0o=o(" (RoBERTa model)"),p0o=l(),Fv=a("li"),pae=a("strong"),_0o=o("roformer"),b0o=o(" \u2014 "),ej=a("a"),v0o=o("RoFormerForTokenClassification"),T0o=o(" (RoFormer model)"),F0o=l(),Cv=a("li"),_ae=a("strong"),C0o=o("squeezebert"),M0o=o(" \u2014 "),oj=a("a"),E0o=o("SqueezeBertForTokenClassification"),y0o=o(" (SqueezeBERT model)"),w0o=l(),Mv=a("li"),bae=a("strong"),A0o=o("xlm"),L0o=o(" \u2014 "),rj=a("a"),B0o=o("XLMForTokenClassification"),x0o=o(" (XLM model)"),k0o=l(),Ev=a("li"),vae=a("strong"),R0o=o("xlm-roberta"),S0o=o(" \u2014 "),tj=a("a"),P0o=o("XLMRobertaForTokenClassification"),$0o=o(" (XLM-RoBERTa model)"),I0o=l(),yv=a("li"),Tae=a("strong"),j0o=o("xlm-roberta-xl"),N0o=o(" \u2014 "),aj=a("a"),D0o=o("XLMRobertaXLForTokenClassification"),q0o=o(" (XLM-RoBERTa-XL model)"),G0o=l(),wv=a("li"),Fae=a("strong"),O0o=o("xlnet"),X0o=o(" \u2014 "),sj=a("a"),z0o=o("XLNetForTokenClassification"),V0o=o(" (XLNet model)"),W0o=l(),Av=a("li"),Cae=a("strong"),Q0o=o("yoso"),H0o=o(" \u2014 "),nj=a("a"),U0o=o("YosoForTokenClassification"),J0o=o(" (YOSO model)"),Y0o=l(),Lv=a("p"),K0o=o("The model is set in evaluation mode by default using "),Mae=a("code"),Z0o=o("model.eval()"),eLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=a("code"),oLo=o("model.train()"),rLo=l(),yae=a("p"),tLo=o("Examples:"),aLo=l(),m(Vy.$$.fragment),O8e=l(),gd=a("h2"),Bv=a("a"),wae=a("span"),m(Wy.$$.fragment),sLo=l(),Aae=a("span"),nLo=o("AutoModelForQuestionAnswering"),X8e=l(),er=a("div"),m(Qy.$$.fragment),lLo=l(),hd=a("p"),iLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lae=a("code"),dLo=o("from_pretrained()"),cLo=o("class method or the "),Bae=a("code"),mLo=o("from_config()"),fLo=o(`class
method.`),gLo=l(),Hy=a("p"),hLo=o("This class cannot be instantiated directly using "),xae=a("code"),uLo=o("__init__()"),pLo=o(" (throws an error)."),_Lo=l(),Qr=a("div"),m(Uy.$$.fragment),bLo=l(),kae=a("p"),vLo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TLo=l(),ud=a("p"),FLo=o(`Note:
Loading a model from its configuration file does `),Rae=a("strong"),CLo=o("not"),MLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("code"),ELo=o("from_pretrained()"),yLo=o("to load the model weights."),wLo=l(),Pae=a("p"),ALo=o("Examples:"),LLo=l(),m(Jy.$$.fragment),BLo=l(),De=a("div"),m(Yy.$$.fragment),xLo=l(),$ae=a("p"),kLo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RLo=l(),Ha=a("p"),SLo=o("The model class to instantiate is selected based on the "),Iae=a("code"),PLo=o("model_type"),$Lo=o(` property of the config object (either
passed as an argument or loaded from `),jae=a("code"),ILo=o("pretrained_model_name_or_path"),jLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=a("code"),NLo=o("pretrained_model_name_or_path"),DLo=o(":"),qLo=l(),R=a("ul"),xv=a("li"),Dae=a("strong"),GLo=o("albert"),OLo=o(" \u2014 "),lj=a("a"),XLo=o("AlbertForQuestionAnswering"),zLo=o(" (ALBERT model)"),VLo=l(),kv=a("li"),qae=a("strong"),WLo=o("bart"),QLo=o(" \u2014 "),ij=a("a"),HLo=o("BartForQuestionAnswering"),ULo=o(" (BART model)"),JLo=l(),Rv=a("li"),Gae=a("strong"),YLo=o("bert"),KLo=o(" \u2014 "),dj=a("a"),ZLo=o("BertForQuestionAnswering"),e7o=o(" (BERT model)"),o7o=l(),Sv=a("li"),Oae=a("strong"),r7o=o("big_bird"),t7o=o(" \u2014 "),cj=a("a"),a7o=o("BigBirdForQuestionAnswering"),s7o=o(" (BigBird model)"),n7o=l(),Pv=a("li"),Xae=a("strong"),l7o=o("bigbird_pegasus"),i7o=o(" \u2014 "),mj=a("a"),d7o=o("BigBirdPegasusForQuestionAnswering"),c7o=o(" (BigBirdPegasus model)"),m7o=l(),$v=a("li"),zae=a("strong"),f7o=o("camembert"),g7o=o(" \u2014 "),fj=a("a"),h7o=o("CamembertForQuestionAnswering"),u7o=o(" (CamemBERT model)"),p7o=l(),Iv=a("li"),Vae=a("strong"),_7o=o("canine"),b7o=o(" \u2014 "),gj=a("a"),v7o=o("CanineForQuestionAnswering"),T7o=o(" (Canine model)"),F7o=l(),jv=a("li"),Wae=a("strong"),C7o=o("convbert"),M7o=o(" \u2014 "),hj=a("a"),E7o=o("ConvBertForQuestionAnswering"),y7o=o(" (ConvBERT model)"),w7o=l(),Nv=a("li"),Qae=a("strong"),A7o=o("deberta"),L7o=o(" \u2014 "),uj=a("a"),B7o=o("DebertaForQuestionAnswering"),x7o=o(" (DeBERTa model)"),k7o=l(),Dv=a("li"),Hae=a("strong"),R7o=o("deberta-v2"),S7o=o(" \u2014 "),pj=a("a"),P7o=o("DebertaV2ForQuestionAnswering"),$7o=o(" (DeBERTa-v2 model)"),I7o=l(),qv=a("li"),Uae=a("strong"),j7o=o("distilbert"),N7o=o(" \u2014 "),_j=a("a"),D7o=o("DistilBertForQuestionAnswering"),q7o=o(" (DistilBERT model)"),G7o=l(),Gv=a("li"),Jae=a("strong"),O7o=o("electra"),X7o=o(" \u2014 "),bj=a("a"),z7o=o("ElectraForQuestionAnswering"),V7o=o(" (ELECTRA model)"),W7o=l(),Ov=a("li"),Yae=a("strong"),Q7o=o("flaubert"),H7o=o(" \u2014 "),vj=a("a"),U7o=o("FlaubertForQuestionAnsweringSimple"),J7o=o(" (FlauBERT model)"),Y7o=l(),Xv=a("li"),Kae=a("strong"),K7o=o("fnet"),Z7o=o(" \u2014 "),Tj=a("a"),e8o=o("FNetForQuestionAnswering"),o8o=o(" (FNet model)"),r8o=l(),zv=a("li"),Zae=a("strong"),t8o=o("funnel"),a8o=o(" \u2014 "),Fj=a("a"),s8o=o("FunnelForQuestionAnswering"),n8o=o(" (Funnel Transformer model)"),l8o=l(),Vv=a("li"),ese=a("strong"),i8o=o("gptj"),d8o=o(" \u2014 "),Cj=a("a"),c8o=o("GPTJForQuestionAnswering"),m8o=o(" (GPT-J model)"),f8o=l(),Wv=a("li"),ose=a("strong"),g8o=o("ibert"),h8o=o(" \u2014 "),Mj=a("a"),u8o=o("IBertForQuestionAnswering"),p8o=o(" (I-BERT model)"),_8o=l(),Qv=a("li"),rse=a("strong"),b8o=o("layoutlmv2"),v8o=o(" \u2014 "),Ej=a("a"),T8o=o("LayoutLMv2ForQuestionAnswering"),F8o=o(" (LayoutLMv2 model)"),C8o=l(),Hv=a("li"),tse=a("strong"),M8o=o("led"),E8o=o(" \u2014 "),yj=a("a"),y8o=o("LEDForQuestionAnswering"),w8o=o(" (LED model)"),A8o=l(),Uv=a("li"),ase=a("strong"),L8o=o("longformer"),B8o=o(" \u2014 "),wj=a("a"),x8o=o("LongformerForQuestionAnswering"),k8o=o(" (Longformer model)"),R8o=l(),Jv=a("li"),sse=a("strong"),S8o=o("lxmert"),P8o=o(" \u2014 "),Aj=a("a"),$8o=o("LxmertForQuestionAnswering"),I8o=o(" (LXMERT model)"),j8o=l(),Yv=a("li"),nse=a("strong"),N8o=o("mbart"),D8o=o(" \u2014 "),Lj=a("a"),q8o=o("MBartForQuestionAnswering"),G8o=o(" (mBART model)"),O8o=l(),Kv=a("li"),lse=a("strong"),X8o=o("megatron-bert"),z8o=o(" \u2014 "),Bj=a("a"),V8o=o("MegatronBertForQuestionAnswering"),W8o=o(" (MegatronBert model)"),Q8o=l(),Zv=a("li"),ise=a("strong"),H8o=o("mobilebert"),U8o=o(" \u2014 "),xj=a("a"),J8o=o("MobileBertForQuestionAnswering"),Y8o=o(" (MobileBERT model)"),K8o=l(),eT=a("li"),dse=a("strong"),Z8o=o("mpnet"),e9o=o(" \u2014 "),kj=a("a"),o9o=o("MPNetForQuestionAnswering"),r9o=o(" (MPNet model)"),t9o=l(),oT=a("li"),cse=a("strong"),a9o=o("nystromformer"),s9o=o(" \u2014 "),Rj=a("a"),n9o=o("NystromformerForQuestionAnswering"),l9o=o(" (Nystromformer model)"),i9o=l(),rT=a("li"),mse=a("strong"),d9o=o("qdqbert"),c9o=o(" \u2014 "),Sj=a("a"),m9o=o("QDQBertForQuestionAnswering"),f9o=o(" (QDQBert model)"),g9o=l(),tT=a("li"),fse=a("strong"),h9o=o("reformer"),u9o=o(" \u2014 "),Pj=a("a"),p9o=o("ReformerForQuestionAnswering"),_9o=o(" (Reformer model)"),b9o=l(),aT=a("li"),gse=a("strong"),v9o=o("rembert"),T9o=o(" \u2014 "),$j=a("a"),F9o=o("RemBertForQuestionAnswering"),C9o=o(" (RemBERT model)"),M9o=l(),sT=a("li"),hse=a("strong"),E9o=o("roberta"),y9o=o(" \u2014 "),Ij=a("a"),w9o=o("RobertaForQuestionAnswering"),A9o=o(" (RoBERTa model)"),L9o=l(),nT=a("li"),use=a("strong"),B9o=o("roformer"),x9o=o(" \u2014 "),jj=a("a"),k9o=o("RoFormerForQuestionAnswering"),R9o=o(" (RoFormer model)"),S9o=l(),lT=a("li"),pse=a("strong"),P9o=o("splinter"),$9o=o(" \u2014 "),Nj=a("a"),I9o=o("SplinterForQuestionAnswering"),j9o=o(" (Splinter model)"),N9o=l(),iT=a("li"),_se=a("strong"),D9o=o("squeezebert"),q9o=o(" \u2014 "),Dj=a("a"),G9o=o("SqueezeBertForQuestionAnswering"),O9o=o(" (SqueezeBERT model)"),X9o=l(),dT=a("li"),bse=a("strong"),z9o=o("xlm"),V9o=o(" \u2014 "),qj=a("a"),W9o=o("XLMForQuestionAnsweringSimple"),Q9o=o(" (XLM model)"),H9o=l(),cT=a("li"),vse=a("strong"),U9o=o("xlm-roberta"),J9o=o(" \u2014 "),Gj=a("a"),Y9o=o("XLMRobertaForQuestionAnswering"),K9o=o(" (XLM-RoBERTa model)"),Z9o=l(),mT=a("li"),Tse=a("strong"),eBo=o("xlm-roberta-xl"),oBo=o(" \u2014 "),Oj=a("a"),rBo=o("XLMRobertaXLForQuestionAnswering"),tBo=o(" (XLM-RoBERTa-XL model)"),aBo=l(),fT=a("li"),Fse=a("strong"),sBo=o("xlnet"),nBo=o(" \u2014 "),Xj=a("a"),lBo=o("XLNetForQuestionAnsweringSimple"),iBo=o(" (XLNet model)"),dBo=l(),gT=a("li"),Cse=a("strong"),cBo=o("yoso"),mBo=o(" \u2014 "),zj=a("a"),fBo=o("YosoForQuestionAnswering"),gBo=o(" (YOSO model)"),hBo=l(),hT=a("p"),uBo=o("The model is set in evaluation mode by default using "),Mse=a("code"),pBo=o("model.eval()"),_Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),bBo=o("model.train()"),vBo=l(),yse=a("p"),TBo=o("Examples:"),FBo=l(),m(Ky.$$.fragment),z8e=l(),pd=a("h2"),uT=a("a"),wse=a("span"),m(Zy.$$.fragment),CBo=l(),Ase=a("span"),MBo=o("AutoModelForTableQuestionAnswering"),V8e=l(),or=a("div"),m(ew.$$.fragment),EBo=l(),_d=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lse=a("code"),wBo=o("from_pretrained()"),ABo=o("class method or the "),Bse=a("code"),LBo=o("from_config()"),BBo=o(`class
method.`),xBo=l(),ow=a("p"),kBo=o("This class cannot be instantiated directly using "),xse=a("code"),RBo=o("__init__()"),SBo=o(" (throws an error)."),PBo=l(),Hr=a("div"),m(rw.$$.fragment),$Bo=l(),kse=a("p"),IBo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jBo=l(),bd=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),Rse=a("strong"),DBo=o("not"),qBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sse=a("code"),GBo=o("from_pretrained()"),OBo=o("to load the model weights."),XBo=l(),Pse=a("p"),zBo=o("Examples:"),VBo=l(),m(tw.$$.fragment),WBo=l(),qe=a("div"),m(aw.$$.fragment),QBo=l(),$se=a("p"),HBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),UBo=l(),Ua=a("p"),JBo=o("The model class to instantiate is selected based on the "),Ise=a("code"),YBo=o("model_type"),KBo=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),ZBo=o("pretrained_model_name_or_path"),exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nse=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(":"),txo=l(),Dse=a("ul"),pT=a("li"),qse=a("strong"),axo=o("tapas"),sxo=o(" \u2014 "),Vj=a("a"),nxo=o("TapasForQuestionAnswering"),lxo=o(" (TAPAS model)"),ixo=l(),_T=a("p"),dxo=o("The model is set in evaluation mode by default using "),Gse=a("code"),cxo=o("model.eval()"),mxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=a("code"),fxo=o("model.train()"),gxo=l(),Xse=a("p"),hxo=o("Examples:"),uxo=l(),m(sw.$$.fragment),W8e=l(),vd=a("h2"),bT=a("a"),zse=a("span"),m(nw.$$.fragment),pxo=l(),Vse=a("span"),_xo=o("AutoModelForImageClassification"),Q8e=l(),rr=a("div"),m(lw.$$.fragment),bxo=l(),Td=a("p"),vxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wse=a("code"),Txo=o("from_pretrained()"),Fxo=o("class method or the "),Qse=a("code"),Cxo=o("from_config()"),Mxo=o(`class
method.`),Exo=l(),iw=a("p"),yxo=o("This class cannot be instantiated directly using "),Hse=a("code"),wxo=o("__init__()"),Axo=o(" (throws an error)."),Lxo=l(),Ur=a("div"),m(dw.$$.fragment),Bxo=l(),Use=a("p"),xxo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kxo=l(),Fd=a("p"),Rxo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),Sxo=o("not"),Pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=a("code"),$xo=o("from_pretrained()"),Ixo=o("to load the model weights."),jxo=l(),Kse=a("p"),Nxo=o("Examples:"),Dxo=l(),m(cw.$$.fragment),qxo=l(),Ge=a("div"),m(mw.$$.fragment),Gxo=l(),Zse=a("p"),Oxo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xxo=l(),Ja=a("p"),zxo=o("The model class to instantiate is selected based on the "),ene=a("code"),Vxo=o("model_type"),Wxo=o(` property of the config object (either
passed as an argument or loaded from `),one=a("code"),Qxo=o("pretrained_model_name_or_path"),Hxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rne=a("code"),Uxo=o("pretrained_model_name_or_path"),Jxo=o(":"),Yxo=l(),be=a("ul"),vT=a("li"),tne=a("strong"),Kxo=o("beit"),Zxo=o(" \u2014 "),Wj=a("a"),eko=o("BeitForImageClassification"),oko=o(" (BEiT model)"),rko=l(),TT=a("li"),ane=a("strong"),tko=o("convnext"),ako=o(" \u2014 "),Qj=a("a"),sko=o("ConvNextForImageClassification"),nko=o(" (ConvNext model)"),lko=l(),Rn=a("li"),sne=a("strong"),iko=o("deit"),dko=o(" \u2014 "),Hj=a("a"),cko=o("DeiTForImageClassification"),mko=o(" or "),Uj=a("a"),fko=o("DeiTForImageClassificationWithTeacher"),gko=o(" (DeiT model)"),hko=l(),FT=a("li"),nne=a("strong"),uko=o("imagegpt"),pko=o(" \u2014 "),Jj=a("a"),_ko=o("ImageGPTForImageClassification"),bko=o(" (ImageGPT model)"),vko=l(),la=a("li"),lne=a("strong"),Tko=o("perceiver"),Fko=o(" \u2014 "),Yj=a("a"),Cko=o("PerceiverForImageClassificationLearned"),Mko=o(" or "),Kj=a("a"),Eko=o("PerceiverForImageClassificationFourier"),yko=o(" or "),Zj=a("a"),wko=o("PerceiverForImageClassificationConvProcessing"),Ako=o(" (Perceiver model)"),Lko=l(),CT=a("li"),ine=a("strong"),Bko=o("poolformer"),xko=o(" \u2014 "),eN=a("a"),kko=o("PoolFormerForImageClassification"),Rko=o(" (PoolFormer model)"),Sko=l(),MT=a("li"),dne=a("strong"),Pko=o("segformer"),$ko=o(" \u2014 "),oN=a("a"),Iko=o("SegformerForImageClassification"),jko=o(" (SegFormer model)"),Nko=l(),ET=a("li"),cne=a("strong"),Dko=o("swin"),qko=o(" \u2014 "),rN=a("a"),Gko=o("SwinForImageClassification"),Oko=o(" (Swin model)"),Xko=l(),yT=a("li"),mne=a("strong"),zko=o("vit"),Vko=o(" \u2014 "),tN=a("a"),Wko=o("ViTForImageClassification"),Qko=o(" (ViT model)"),Hko=l(),wT=a("p"),Uko=o("The model is set in evaluation mode by default using "),fne=a("code"),Jko=o("model.eval()"),Yko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gne=a("code"),Kko=o("model.train()"),Zko=l(),hne=a("p"),eRo=o("Examples:"),oRo=l(),m(fw.$$.fragment),H8e=l(),Cd=a("h2"),AT=a("a"),une=a("span"),m(gw.$$.fragment),rRo=l(),pne=a("span"),tRo=o("AutoModelForVision2Seq"),U8e=l(),tr=a("div"),m(hw.$$.fragment),aRo=l(),Md=a("p"),sRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_ne=a("code"),nRo=o("from_pretrained()"),lRo=o("class method or the "),bne=a("code"),iRo=o("from_config()"),dRo=o(`class
method.`),cRo=l(),uw=a("p"),mRo=o("This class cannot be instantiated directly using "),vne=a("code"),fRo=o("__init__()"),gRo=o(" (throws an error)."),hRo=l(),Jr=a("div"),m(pw.$$.fragment),uRo=l(),Tne=a("p"),pRo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Ro=l(),Ed=a("p"),bRo=o(`Note:
Loading a model from its configuration file does `),Fne=a("strong"),vRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cne=a("code"),FRo=o("from_pretrained()"),CRo=o("to load the model weights."),MRo=l(),Mne=a("p"),ERo=o("Examples:"),yRo=l(),m(_w.$$.fragment),wRo=l(),Oe=a("div"),m(bw.$$.fragment),ARo=l(),Ene=a("p"),LRo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BRo=l(),Ya=a("p"),xRo=o("The model class to instantiate is selected based on the "),yne=a("code"),kRo=o("model_type"),RRo=o(` property of the config object (either
passed as an argument or loaded from `),wne=a("code"),SRo=o("pretrained_model_name_or_path"),PRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=a("code"),$Ro=o("pretrained_model_name_or_path"),IRo=o(":"),jRo=l(),Lne=a("ul"),LT=a("li"),Bne=a("strong"),NRo=o("vision-encoder-decoder"),DRo=o(" \u2014 "),aN=a("a"),qRo=o("VisionEncoderDecoderModel"),GRo=o(" (Vision Encoder decoder model)"),ORo=l(),BT=a("p"),XRo=o("The model is set in evaluation mode by default using "),xne=a("code"),zRo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kne=a("code"),WRo=o("model.train()"),QRo=l(),Rne=a("p"),HRo=o("Examples:"),URo=l(),m(vw.$$.fragment),J8e=l(),yd=a("h2"),xT=a("a"),Sne=a("span"),m(Tw.$$.fragment),JRo=l(),Pne=a("span"),YRo=o("AutoModelForAudioClassification"),Y8e=l(),ar=a("div"),m(Fw.$$.fragment),KRo=l(),wd=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$ne=a("code"),eSo=o("from_pretrained()"),oSo=o("class method or the "),Ine=a("code"),rSo=o("from_config()"),tSo=o(`class
method.`),aSo=l(),Cw=a("p"),sSo=o("This class cannot be instantiated directly using "),jne=a("code"),nSo=o("__init__()"),lSo=o(" (throws an error)."),iSo=l(),Yr=a("div"),m(Mw.$$.fragment),dSo=l(),Nne=a("p"),cSo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mSo=l(),Ad=a("p"),fSo=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),gSo=o("not"),hSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qne=a("code"),uSo=o("from_pretrained()"),pSo=o("to load the model weights."),_So=l(),Gne=a("p"),bSo=o("Examples:"),vSo=l(),m(Ew.$$.fragment),TSo=l(),Xe=a("div"),m(yw.$$.fragment),FSo=l(),One=a("p"),CSo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),MSo=l(),Ka=a("p"),ESo=o("The model class to instantiate is selected based on the "),Xne=a("code"),ySo=o("model_type"),wSo=o(` property of the config object (either
passed as an argument or loaded from `),zne=a("code"),ASo=o("pretrained_model_name_or_path"),LSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=a("code"),BSo=o("pretrained_model_name_or_path"),xSo=o(":"),kSo=l(),ao=a("ul"),kT=a("li"),Wne=a("strong"),RSo=o("hubert"),SSo=o(" \u2014 "),sN=a("a"),PSo=o("HubertForSequenceClassification"),$So=o(" (Hubert model)"),ISo=l(),RT=a("li"),Qne=a("strong"),jSo=o("sew"),NSo=o(" \u2014 "),nN=a("a"),DSo=o("SEWForSequenceClassification"),qSo=o(" (SEW model)"),GSo=l(),ST=a("li"),Hne=a("strong"),OSo=o("sew-d"),XSo=o(" \u2014 "),lN=a("a"),zSo=o("SEWDForSequenceClassification"),VSo=o(" (SEW-D model)"),WSo=l(),PT=a("li"),Une=a("strong"),QSo=o("unispeech"),HSo=o(" \u2014 "),iN=a("a"),USo=o("UniSpeechForSequenceClassification"),JSo=o(" (UniSpeech model)"),YSo=l(),$T=a("li"),Jne=a("strong"),KSo=o("unispeech-sat"),ZSo=o(" \u2014 "),dN=a("a"),ePo=o("UniSpeechSatForSequenceClassification"),oPo=o(" (UniSpeechSat model)"),rPo=l(),IT=a("li"),Yne=a("strong"),tPo=o("wav2vec2"),aPo=o(" \u2014 "),cN=a("a"),sPo=o("Wav2Vec2ForSequenceClassification"),nPo=o(" (Wav2Vec2 model)"),lPo=l(),jT=a("li"),Kne=a("strong"),iPo=o("wavlm"),dPo=o(" \u2014 "),mN=a("a"),cPo=o("WavLMForSequenceClassification"),mPo=o(" (WavLM model)"),fPo=l(),NT=a("p"),gPo=o("The model is set in evaluation mode by default using "),Zne=a("code"),hPo=o("model.eval()"),uPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),pPo=o("model.train()"),_Po=l(),ole=a("p"),bPo=o("Examples:"),vPo=l(),m(ww.$$.fragment),K8e=l(),Ld=a("h2"),DT=a("a"),rle=a("span"),m(Aw.$$.fragment),TPo=l(),tle=a("span"),FPo=o("AutoModelForAudioFrameClassification"),Z8e=l(),sr=a("div"),m(Lw.$$.fragment),CPo=l(),Bd=a("p"),MPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ale=a("code"),EPo=o("from_pretrained()"),yPo=o("class method or the "),sle=a("code"),wPo=o("from_config()"),APo=o(`class
method.`),LPo=l(),Bw=a("p"),BPo=o("This class cannot be instantiated directly using "),nle=a("code"),xPo=o("__init__()"),kPo=o(" (throws an error)."),RPo=l(),Kr=a("div"),m(xw.$$.fragment),SPo=l(),lle=a("p"),PPo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Po=l(),xd=a("p"),IPo=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),jPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=a("code"),DPo=o("from_pretrained()"),qPo=o("to load the model weights."),GPo=l(),cle=a("p"),OPo=o("Examples:"),XPo=l(),m(kw.$$.fragment),zPo=l(),ze=a("div"),m(Rw.$$.fragment),VPo=l(),mle=a("p"),WPo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),QPo=l(),Za=a("p"),HPo=o("The model class to instantiate is selected based on the "),fle=a("code"),UPo=o("model_type"),JPo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),YPo=o("pretrained_model_name_or_path"),KPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),ZPo=o("pretrained_model_name_or_path"),e$o=o(":"),o$o=l(),kd=a("ul"),qT=a("li"),ule=a("strong"),r$o=o("unispeech-sat"),t$o=o(" \u2014 "),fN=a("a"),a$o=o("UniSpeechSatForAudioFrameClassification"),s$o=o(" (UniSpeechSat model)"),n$o=l(),GT=a("li"),ple=a("strong"),l$o=o("wav2vec2"),i$o=o(" \u2014 "),gN=a("a"),d$o=o("Wav2Vec2ForAudioFrameClassification"),c$o=o(" (Wav2Vec2 model)"),m$o=l(),OT=a("li"),_le=a("strong"),f$o=o("wavlm"),g$o=o(" \u2014 "),hN=a("a"),h$o=o("WavLMForAudioFrameClassification"),u$o=o(" (WavLM model)"),p$o=l(),XT=a("p"),_$o=o("The model is set in evaluation mode by default using "),ble=a("code"),b$o=o("model.eval()"),v$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),T$o=o("model.train()"),F$o=l(),Tle=a("p"),C$o=o("Examples:"),M$o=l(),m(Sw.$$.fragment),e9e=l(),Rd=a("h2"),zT=a("a"),Fle=a("span"),m(Pw.$$.fragment),E$o=l(),Cle=a("span"),y$o=o("AutoModelForCTC"),o9e=l(),nr=a("div"),m($w.$$.fragment),w$o=l(),Sd=a("p"),A$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mle=a("code"),L$o=o("from_pretrained()"),B$o=o("class method or the "),Ele=a("code"),x$o=o("from_config()"),k$o=o(`class
method.`),R$o=l(),Iw=a("p"),S$o=o("This class cannot be instantiated directly using "),yle=a("code"),P$o=o("__init__()"),$$o=o(" (throws an error)."),I$o=l(),Zr=a("div"),m(jw.$$.fragment),j$o=l(),wle=a("p"),N$o=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),D$o=l(),Pd=a("p"),q$o=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),G$o=o("not"),O$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=a("code"),X$o=o("from_pretrained()"),z$o=o("to load the model weights."),V$o=l(),Ble=a("p"),W$o=o("Examples:"),Q$o=l(),m(Nw.$$.fragment),H$o=l(),Ve=a("div"),m(Dw.$$.fragment),U$o=l(),xle=a("p"),J$o=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Y$o=l(),es=a("p"),K$o=o("The model class to instantiate is selected based on the "),kle=a("code"),Z$o=o("model_type"),eIo=o(` property of the config object (either
passed as an argument or loaded from `),Rle=a("code"),oIo=o("pretrained_model_name_or_path"),rIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=a("code"),tIo=o("pretrained_model_name_or_path"),aIo=o(":"),sIo=l(),so=a("ul"),VT=a("li"),Ple=a("strong"),nIo=o("hubert"),lIo=o(" \u2014 "),uN=a("a"),iIo=o("HubertForCTC"),dIo=o(" (Hubert model)"),cIo=l(),WT=a("li"),$le=a("strong"),mIo=o("sew"),fIo=o(" \u2014 "),pN=a("a"),gIo=o("SEWForCTC"),hIo=o(" (SEW model)"),uIo=l(),QT=a("li"),Ile=a("strong"),pIo=o("sew-d"),_Io=o(" \u2014 "),_N=a("a"),bIo=o("SEWDForCTC"),vIo=o(" (SEW-D model)"),TIo=l(),HT=a("li"),jle=a("strong"),FIo=o("unispeech"),CIo=o(" \u2014 "),bN=a("a"),MIo=o("UniSpeechForCTC"),EIo=o(" (UniSpeech model)"),yIo=l(),UT=a("li"),Nle=a("strong"),wIo=o("unispeech-sat"),AIo=o(" \u2014 "),vN=a("a"),LIo=o("UniSpeechSatForCTC"),BIo=o(" (UniSpeechSat model)"),xIo=l(),JT=a("li"),Dle=a("strong"),kIo=o("wav2vec2"),RIo=o(" \u2014 "),TN=a("a"),SIo=o("Wav2Vec2ForCTC"),PIo=o(" (Wav2Vec2 model)"),$Io=l(),YT=a("li"),qle=a("strong"),IIo=o("wavlm"),jIo=o(" \u2014 "),FN=a("a"),NIo=o("WavLMForCTC"),DIo=o(" (WavLM model)"),qIo=l(),KT=a("p"),GIo=o("The model is set in evaluation mode by default using "),Gle=a("code"),OIo=o("model.eval()"),XIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),zIo=o("model.train()"),VIo=l(),Xle=a("p"),WIo=o("Examples:"),QIo=l(),m(qw.$$.fragment),r9e=l(),$d=a("h2"),ZT=a("a"),zle=a("span"),m(Gw.$$.fragment),HIo=l(),Vle=a("span"),UIo=o("AutoModelForSpeechSeq2Seq"),t9e=l(),lr=a("div"),m(Ow.$$.fragment),JIo=l(),Id=a("p"),YIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wle=a("code"),KIo=o("from_pretrained()"),ZIo=o("class method or the "),Qle=a("code"),ejo=o("from_config()"),ojo=o(`class
method.`),rjo=l(),Xw=a("p"),tjo=o("This class cannot be instantiated directly using "),Hle=a("code"),ajo=o("__init__()"),sjo=o(" (throws an error)."),njo=l(),et=a("div"),m(zw.$$.fragment),ljo=l(),Ule=a("p"),ijo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),djo=l(),jd=a("p"),cjo=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),mjo=o("not"),fjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("code"),gjo=o("from_pretrained()"),hjo=o("to load the model weights."),ujo=l(),Kle=a("p"),pjo=o("Examples:"),_jo=l(),m(Vw.$$.fragment),bjo=l(),We=a("div"),m(Ww.$$.fragment),vjo=l(),Zle=a("p"),Tjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fjo=l(),os=a("p"),Cjo=o("The model class to instantiate is selected based on the "),eie=a("code"),Mjo=o("model_type"),Ejo=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),yjo=o("pretrained_model_name_or_path"),wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),Ajo=o("pretrained_model_name_or_path"),Ljo=o(":"),Bjo=l(),Qw=a("ul"),e1=a("li"),tie=a("strong"),xjo=o("speech-encoder-decoder"),kjo=o(" \u2014 "),CN=a("a"),Rjo=o("SpeechEncoderDecoderModel"),Sjo=o(" (Speech Encoder decoder model)"),Pjo=l(),o1=a("li"),aie=a("strong"),$jo=o("speech_to_text"),Ijo=o(" \u2014 "),MN=a("a"),jjo=o("Speech2TextForConditionalGeneration"),Njo=o(" (Speech2Text model)"),Djo=l(),r1=a("p"),qjo=o("The model is set in evaluation mode by default using "),sie=a("code"),Gjo=o("model.eval()"),Ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=a("code"),Xjo=o("model.train()"),zjo=l(),lie=a("p"),Vjo=o("Examples:"),Wjo=l(),m(Hw.$$.fragment),a9e=l(),Nd=a("h2"),t1=a("a"),iie=a("span"),m(Uw.$$.fragment),Qjo=l(),die=a("span"),Hjo=o("AutoModelForAudioXVector"),s9e=l(),ir=a("div"),m(Jw.$$.fragment),Ujo=l(),Dd=a("p"),Jjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cie=a("code"),Yjo=o("from_pretrained()"),Kjo=o("class method or the "),mie=a("code"),Zjo=o("from_config()"),eNo=o(`class
method.`),oNo=l(),Yw=a("p"),rNo=o("This class cannot be instantiated directly using "),fie=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),sNo=l(),ot=a("div"),m(Kw.$$.fragment),nNo=l(),gie=a("p"),lNo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iNo=l(),qd=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),cNo=o("not"),mNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=a("code"),fNo=o("from_pretrained()"),gNo=o("to load the model weights."),hNo=l(),pie=a("p"),uNo=o("Examples:"),pNo=l(),m(Zw.$$.fragment),_No=l(),Qe=a("div"),m(eA.$$.fragment),bNo=l(),_ie=a("p"),vNo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TNo=l(),rs=a("p"),FNo=o("The model class to instantiate is selected based on the "),bie=a("code"),CNo=o("model_type"),MNo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),ENo=o("pretrained_model_name_or_path"),yNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=a("code"),wNo=o("pretrained_model_name_or_path"),ANo=o(":"),LNo=l(),Gd=a("ul"),a1=a("li"),Fie=a("strong"),BNo=o("unispeech-sat"),xNo=o(" \u2014 "),EN=a("a"),kNo=o("UniSpeechSatForXVector"),RNo=o(" (UniSpeechSat model)"),SNo=l(),s1=a("li"),Cie=a("strong"),PNo=o("wav2vec2"),$No=o(" \u2014 "),yN=a("a"),INo=o("Wav2Vec2ForXVector"),jNo=o(" (Wav2Vec2 model)"),NNo=l(),n1=a("li"),Mie=a("strong"),DNo=o("wavlm"),qNo=o(" \u2014 "),wN=a("a"),GNo=o("WavLMForXVector"),ONo=o(" (WavLM model)"),XNo=l(),l1=a("p"),zNo=o("The model is set in evaluation mode by default using "),Eie=a("code"),VNo=o("model.eval()"),WNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=a("code"),QNo=o("model.train()"),HNo=l(),wie=a("p"),UNo=o("Examples:"),JNo=l(),m(oA.$$.fragment),n9e=l(),Od=a("h2"),i1=a("a"),Aie=a("span"),m(rA.$$.fragment),YNo=l(),Lie=a("span"),KNo=o("AutoModelForMaskedImageModeling"),l9e=l(),dr=a("div"),m(tA.$$.fragment),ZNo=l(),Xd=a("p"),eDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bie=a("code"),oDo=o("from_pretrained()"),rDo=o("class method or the "),xie=a("code"),tDo=o("from_config()"),aDo=o(`class
method.`),sDo=l(),aA=a("p"),nDo=o("This class cannot be instantiated directly using "),kie=a("code"),lDo=o("__init__()"),iDo=o(" (throws an error)."),dDo=l(),rt=a("div"),m(sA.$$.fragment),cDo=l(),Rie=a("p"),mDo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fDo=l(),zd=a("p"),gDo=o(`Note:
Loading a model from its configuration file does `),Sie=a("strong"),hDo=o("not"),uDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pie=a("code"),pDo=o("from_pretrained()"),_Do=o("to load the model weights."),bDo=l(),$ie=a("p"),vDo=o("Examples:"),TDo=l(),m(nA.$$.fragment),FDo=l(),He=a("div"),m(lA.$$.fragment),CDo=l(),Iie=a("p"),MDo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EDo=l(),ts=a("p"),yDo=o("The model class to instantiate is selected based on the "),jie=a("code"),wDo=o("model_type"),ADo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),LDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),xDo=o("pretrained_model_name_or_path"),kDo=o(":"),RDo=l(),Vd=a("ul"),d1=a("li"),qie=a("strong"),SDo=o("deit"),PDo=o(" \u2014 "),AN=a("a"),$Do=o("DeiTForMaskedImageModeling"),IDo=o(" (DeiT model)"),jDo=l(),c1=a("li"),Gie=a("strong"),NDo=o("swin"),DDo=o(" \u2014 "),LN=a("a"),qDo=o("SwinForMaskedImageModeling"),GDo=o(" (Swin model)"),ODo=l(),m1=a("li"),Oie=a("strong"),XDo=o("vit"),zDo=o(" \u2014 "),BN=a("a"),VDo=o("ViTForMaskedImageModeling"),WDo=o(" (ViT model)"),QDo=l(),f1=a("p"),HDo=o("The model is set in evaluation mode by default using "),Xie=a("code"),UDo=o("model.eval()"),JDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),YDo=o("model.train()"),KDo=l(),Vie=a("p"),ZDo=o("Examples:"),eqo=l(),m(iA.$$.fragment),i9e=l(),Wd=a("h2"),g1=a("a"),Wie=a("span"),m(dA.$$.fragment),oqo=l(),Qie=a("span"),rqo=o("AutoModelForObjectDetection"),d9e=l(),cr=a("div"),m(cA.$$.fragment),tqo=l(),Qd=a("p"),aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hie=a("code"),sqo=o("from_pretrained()"),nqo=o("class method or the "),Uie=a("code"),lqo=o("from_config()"),iqo=o(`class
method.`),dqo=l(),mA=a("p"),cqo=o("This class cannot be instantiated directly using "),Jie=a("code"),mqo=o("__init__()"),fqo=o(" (throws an error)."),gqo=l(),tt=a("div"),m(fA.$$.fragment),hqo=l(),Yie=a("p"),uqo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pqo=l(),Hd=a("p"),_qo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),bqo=o("not"),vqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),Tqo=o("from_pretrained()"),Fqo=o("to load the model weights."),Cqo=l(),ede=a("p"),Mqo=o("Examples:"),Eqo=l(),m(gA.$$.fragment),yqo=l(),Ue=a("div"),m(hA.$$.fragment),wqo=l(),ode=a("p"),Aqo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lqo=l(),as=a("p"),Bqo=o("The model class to instantiate is selected based on the "),rde=a("code"),xqo=o("model_type"),kqo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),Rqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),Pqo=o("pretrained_model_name_or_path"),$qo=o(":"),Iqo=l(),sde=a("ul"),h1=a("li"),nde=a("strong"),jqo=o("detr"),Nqo=o(" \u2014 "),xN=a("a"),Dqo=o("DetrForObjectDetection"),qqo=o(" (DETR model)"),Gqo=l(),u1=a("p"),Oqo=o("The model is set in evaluation mode by default using "),lde=a("code"),Xqo=o("model.eval()"),zqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),Vqo=o("model.train()"),Wqo=l(),dde=a("p"),Qqo=o("Examples:"),Hqo=l(),m(uA.$$.fragment),c9e=l(),Ud=a("h2"),p1=a("a"),cde=a("span"),m(pA.$$.fragment),Uqo=l(),mde=a("span"),Jqo=o("AutoModelForImageSegmentation"),m9e=l(),mr=a("div"),m(_A.$$.fragment),Yqo=l(),Jd=a("p"),Kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fde=a("code"),Zqo=o("from_pretrained()"),eGo=o("class method or the "),gde=a("code"),oGo=o("from_config()"),rGo=o(`class
method.`),tGo=l(),bA=a("p"),aGo=o("This class cannot be instantiated directly using "),hde=a("code"),sGo=o("__init__()"),nGo=o(" (throws an error)."),lGo=l(),at=a("div"),m(vA.$$.fragment),iGo=l(),ude=a("p"),dGo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cGo=l(),Yd=a("p"),mGo=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),fGo=o("not"),gGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=a("code"),hGo=o("from_pretrained()"),uGo=o("to load the model weights."),pGo=l(),bde=a("p"),_Go=o("Examples:"),bGo=l(),m(TA.$$.fragment),vGo=l(),Je=a("div"),m(FA.$$.fragment),TGo=l(),vde=a("p"),FGo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CGo=l(),ss=a("p"),MGo=o("The model class to instantiate is selected based on the "),Tde=a("code"),EGo=o("model_type"),yGo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),LGo=o("pretrained_model_name_or_path"),BGo=o(":"),xGo=l(),Mde=a("ul"),_1=a("li"),Ede=a("strong"),kGo=o("detr"),RGo=o(" \u2014 "),kN=a("a"),SGo=o("DetrForSegmentation"),PGo=o(" (DETR model)"),$Go=l(),b1=a("p"),IGo=o("The model is set in evaluation mode by default using "),yde=a("code"),jGo=o("model.eval()"),NGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),DGo=o("model.train()"),qGo=l(),Ade=a("p"),GGo=o("Examples:"),OGo=l(),m(CA.$$.fragment),f9e=l(),Kd=a("h2"),v1=a("a"),Lde=a("span"),m(MA.$$.fragment),XGo=l(),Bde=a("span"),zGo=o("AutoModelForSemanticSegmentation"),g9e=l(),fr=a("div"),m(EA.$$.fragment),VGo=l(),Zd=a("p"),WGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xde=a("code"),QGo=o("from_pretrained()"),HGo=o("class method or the "),kde=a("code"),UGo=o("from_config()"),JGo=o(`class
method.`),YGo=l(),yA=a("p"),KGo=o("This class cannot be instantiated directly using "),Rde=a("code"),ZGo=o("__init__()"),eOo=o(" (throws an error)."),oOo=l(),st=a("div"),m(wA.$$.fragment),rOo=l(),Sde=a("p"),tOo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aOo=l(),ec=a("p"),sOo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),nOo=o("not"),lOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=a("code"),iOo=o("from_pretrained()"),dOo=o("to load the model weights."),cOo=l(),Ide=a("p"),mOo=o("Examples:"),fOo=l(),m(AA.$$.fragment),gOo=l(),Ye=a("div"),m(LA.$$.fragment),hOo=l(),jde=a("p"),uOo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),pOo=l(),ns=a("p"),_Oo=o("The model class to instantiate is selected based on the "),Nde=a("code"),bOo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),TOo=o("pretrained_model_name_or_path"),FOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),COo=o("pretrained_model_name_or_path"),MOo=o(":"),EOo=l(),BA=a("ul"),T1=a("li"),Gde=a("strong"),yOo=o("beit"),wOo=o(" \u2014 "),RN=a("a"),AOo=o("BeitForSemanticSegmentation"),LOo=o(" (BEiT model)"),BOo=l(),F1=a("li"),Ode=a("strong"),xOo=o("segformer"),kOo=o(" \u2014 "),SN=a("a"),ROo=o("SegformerForSemanticSegmentation"),SOo=o(" (SegFormer model)"),POo=l(),C1=a("p"),$Oo=o("The model is set in evaluation mode by default using "),Xde=a("code"),IOo=o("model.eval()"),jOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),NOo=o("model.train()"),DOo=l(),Vde=a("p"),qOo=o("Examples:"),GOo=l(),m(xA.$$.fragment),h9e=l(),oc=a("h2"),M1=a("a"),Wde=a("span"),m(kA.$$.fragment),OOo=l(),Qde=a("span"),XOo=o("TFAutoModel"),u9e=l(),gr=a("div"),m(RA.$$.fragment),zOo=l(),rc=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hde=a("code"),WOo=o("from_pretrained()"),QOo=o("class method or the "),Ude=a("code"),HOo=o("from_config()"),UOo=o(`class
method.`),JOo=l(),SA=a("p"),YOo=o("This class cannot be instantiated directly using "),Jde=a("code"),KOo=o("__init__()"),ZOo=o(" (throws an error)."),eXo=l(),nt=a("div"),m(PA.$$.fragment),oXo=l(),Yde=a("p"),rXo=o("Instantiates one of the base model classes of the library from a configuration."),tXo=l(),tc=a("p"),aXo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),sXo=o("not"),nXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=a("code"),lXo=o("from_pretrained()"),iXo=o("to load the model weights."),dXo=l(),ece=a("p"),cXo=o("Examples:"),mXo=l(),m($A.$$.fragment),fXo=l(),go=a("div"),m(IA.$$.fragment),gXo=l(),oce=a("p"),hXo=o("Instantiate one of the base model classes of the library from a pretrained model."),uXo=l(),ls=a("p"),pXo=o("The model class to instantiate is selected based on the "),rce=a("code"),_Xo=o("model_type"),bXo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),vXo=o("pretrained_model_name_or_path"),TXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),FXo=o("pretrained_model_name_or_path"),CXo=o(":"),MXo=l(),B=a("ul"),E1=a("li"),sce=a("strong"),EXo=o("albert"),yXo=o(" \u2014 "),PN=a("a"),wXo=o("TFAlbertModel"),AXo=o(" (ALBERT model)"),LXo=l(),y1=a("li"),nce=a("strong"),BXo=o("bart"),xXo=o(" \u2014 "),$N=a("a"),kXo=o("TFBartModel"),RXo=o(" (BART model)"),SXo=l(),w1=a("li"),lce=a("strong"),PXo=o("bert"),$Xo=o(" \u2014 "),IN=a("a"),IXo=o("TFBertModel"),jXo=o(" (BERT model)"),NXo=l(),A1=a("li"),ice=a("strong"),DXo=o("blenderbot"),qXo=o(" \u2014 "),jN=a("a"),GXo=o("TFBlenderbotModel"),OXo=o(" (Blenderbot model)"),XXo=l(),L1=a("li"),dce=a("strong"),zXo=o("blenderbot-small"),VXo=o(" \u2014 "),NN=a("a"),WXo=o("TFBlenderbotSmallModel"),QXo=o(" (BlenderbotSmall model)"),HXo=l(),B1=a("li"),cce=a("strong"),UXo=o("camembert"),JXo=o(" \u2014 "),DN=a("a"),YXo=o("TFCamembertModel"),KXo=o(" (CamemBERT model)"),ZXo=l(),x1=a("li"),mce=a("strong"),ezo=o("clip"),ozo=o(" \u2014 "),qN=a("a"),rzo=o("TFCLIPModel"),tzo=o(" (CLIP model)"),azo=l(),k1=a("li"),fce=a("strong"),szo=o("convbert"),nzo=o(" \u2014 "),GN=a("a"),lzo=o("TFConvBertModel"),izo=o(" (ConvBERT model)"),dzo=l(),R1=a("li"),gce=a("strong"),czo=o("convnext"),mzo=o(" \u2014 "),ON=a("a"),fzo=o("TFConvNextModel"),gzo=o(" (ConvNext model)"),hzo=l(),S1=a("li"),hce=a("strong"),uzo=o("ctrl"),pzo=o(" \u2014 "),XN=a("a"),_zo=o("TFCTRLModel"),bzo=o(" (CTRL model)"),vzo=l(),P1=a("li"),uce=a("strong"),Tzo=o("deberta"),Fzo=o(" \u2014 "),zN=a("a"),Czo=o("TFDebertaModel"),Mzo=o(" (DeBERTa model)"),Ezo=l(),$1=a("li"),pce=a("strong"),yzo=o("deberta-v2"),wzo=o(" \u2014 "),VN=a("a"),Azo=o("TFDebertaV2Model"),Lzo=o(" (DeBERTa-v2 model)"),Bzo=l(),I1=a("li"),_ce=a("strong"),xzo=o("distilbert"),kzo=o(" \u2014 "),WN=a("a"),Rzo=o("TFDistilBertModel"),Szo=o(" (DistilBERT model)"),Pzo=l(),j1=a("li"),bce=a("strong"),$zo=o("dpr"),Izo=o(" \u2014 "),QN=a("a"),jzo=o("TFDPRQuestionEncoder"),Nzo=o(" (DPR model)"),Dzo=l(),N1=a("li"),vce=a("strong"),qzo=o("electra"),Gzo=o(" \u2014 "),HN=a("a"),Ozo=o("TFElectraModel"),Xzo=o(" (ELECTRA model)"),zzo=l(),D1=a("li"),Tce=a("strong"),Vzo=o("flaubert"),Wzo=o(" \u2014 "),UN=a("a"),Qzo=o("TFFlaubertModel"),Hzo=o(" (FlauBERT model)"),Uzo=l(),Sn=a("li"),Fce=a("strong"),Jzo=o("funnel"),Yzo=o(" \u2014 "),JN=a("a"),Kzo=o("TFFunnelModel"),Zzo=o(" or "),YN=a("a"),eVo=o("TFFunnelBaseModel"),oVo=o(" (Funnel Transformer model)"),rVo=l(),q1=a("li"),Cce=a("strong"),tVo=o("gpt2"),aVo=o(" \u2014 "),KN=a("a"),sVo=o("TFGPT2Model"),nVo=o(" (OpenAI GPT-2 model)"),lVo=l(),G1=a("li"),Mce=a("strong"),iVo=o("hubert"),dVo=o(" \u2014 "),ZN=a("a"),cVo=o("TFHubertModel"),mVo=o(" (Hubert model)"),fVo=l(),O1=a("li"),Ece=a("strong"),gVo=o("layoutlm"),hVo=o(" \u2014 "),eD=a("a"),uVo=o("TFLayoutLMModel"),pVo=o(" (LayoutLM model)"),_Vo=l(),X1=a("li"),yce=a("strong"),bVo=o("led"),vVo=o(" \u2014 "),oD=a("a"),TVo=o("TFLEDModel"),FVo=o(" (LED model)"),CVo=l(),z1=a("li"),wce=a("strong"),MVo=o("longformer"),EVo=o(" \u2014 "),rD=a("a"),yVo=o("TFLongformerModel"),wVo=o(" (Longformer model)"),AVo=l(),V1=a("li"),Ace=a("strong"),LVo=o("lxmert"),BVo=o(" \u2014 "),tD=a("a"),xVo=o("TFLxmertModel"),kVo=o(" (LXMERT model)"),RVo=l(),W1=a("li"),Lce=a("strong"),SVo=o("marian"),PVo=o(" \u2014 "),aD=a("a"),$Vo=o("TFMarianModel"),IVo=o(" (Marian model)"),jVo=l(),Q1=a("li"),Bce=a("strong"),NVo=o("mbart"),DVo=o(" \u2014 "),sD=a("a"),qVo=o("TFMBartModel"),GVo=o(" (mBART model)"),OVo=l(),H1=a("li"),xce=a("strong"),XVo=o("mobilebert"),zVo=o(" \u2014 "),nD=a("a"),VVo=o("TFMobileBertModel"),WVo=o(" (MobileBERT model)"),QVo=l(),U1=a("li"),kce=a("strong"),HVo=o("mpnet"),UVo=o(" \u2014 "),lD=a("a"),JVo=o("TFMPNetModel"),YVo=o(" (MPNet model)"),KVo=l(),J1=a("li"),Rce=a("strong"),ZVo=o("mt5"),eWo=o(" \u2014 "),iD=a("a"),oWo=o("TFMT5Model"),rWo=o(" (mT5 model)"),tWo=l(),Y1=a("li"),Sce=a("strong"),aWo=o("openai-gpt"),sWo=o(" \u2014 "),dD=a("a"),nWo=o("TFOpenAIGPTModel"),lWo=o(" (OpenAI GPT model)"),iWo=l(),K1=a("li"),Pce=a("strong"),dWo=o("pegasus"),cWo=o(" \u2014 "),cD=a("a"),mWo=o("TFPegasusModel"),fWo=o(" (Pegasus model)"),gWo=l(),Z1=a("li"),$ce=a("strong"),hWo=o("rembert"),uWo=o(" \u2014 "),mD=a("a"),pWo=o("TFRemBertModel"),_Wo=o(" (RemBERT model)"),bWo=l(),eF=a("li"),Ice=a("strong"),vWo=o("roberta"),TWo=o(" \u2014 "),fD=a("a"),FWo=o("TFRobertaModel"),CWo=o(" (RoBERTa model)"),MWo=l(),oF=a("li"),jce=a("strong"),EWo=o("roformer"),yWo=o(" \u2014 "),gD=a("a"),wWo=o("TFRoFormerModel"),AWo=o(" (RoFormer model)"),LWo=l(),rF=a("li"),Nce=a("strong"),BWo=o("speech_to_text"),xWo=o(" \u2014 "),hD=a("a"),kWo=o("TFSpeech2TextModel"),RWo=o(" (Speech2Text model)"),SWo=l(),tF=a("li"),Dce=a("strong"),PWo=o("t5"),$Wo=o(" \u2014 "),uD=a("a"),IWo=o("TFT5Model"),jWo=o(" (T5 model)"),NWo=l(),aF=a("li"),qce=a("strong"),DWo=o("tapas"),qWo=o(" \u2014 "),pD=a("a"),GWo=o("TFTapasModel"),OWo=o(" (TAPAS model)"),XWo=l(),sF=a("li"),Gce=a("strong"),zWo=o("transfo-xl"),VWo=o(" \u2014 "),_D=a("a"),WWo=o("TFTransfoXLModel"),QWo=o(" (Transformer-XL model)"),HWo=l(),nF=a("li"),Oce=a("strong"),UWo=o("vit"),JWo=o(" \u2014 "),bD=a("a"),YWo=o("TFViTModel"),KWo=o(" (ViT model)"),ZWo=l(),lF=a("li"),Xce=a("strong"),eQo=o("wav2vec2"),oQo=o(" \u2014 "),vD=a("a"),rQo=o("TFWav2Vec2Model"),tQo=o(" (Wav2Vec2 model)"),aQo=l(),iF=a("li"),zce=a("strong"),sQo=o("xlm"),nQo=o(" \u2014 "),TD=a("a"),lQo=o("TFXLMModel"),iQo=o(" (XLM model)"),dQo=l(),dF=a("li"),Vce=a("strong"),cQo=o("xlm-roberta"),mQo=o(" \u2014 "),FD=a("a"),fQo=o("TFXLMRobertaModel"),gQo=o(" (XLM-RoBERTa model)"),hQo=l(),cF=a("li"),Wce=a("strong"),uQo=o("xlnet"),pQo=o(" \u2014 "),CD=a("a"),_Qo=o("TFXLNetModel"),bQo=o(" (XLNet model)"),vQo=l(),Qce=a("p"),TQo=o("Examples:"),FQo=l(),m(jA.$$.fragment),p9e=l(),ac=a("h2"),mF=a("a"),Hce=a("span"),m(NA.$$.fragment),CQo=l(),Uce=a("span"),MQo=o("TFAutoModelForPreTraining"),_9e=l(),hr=a("div"),m(DA.$$.fragment),EQo=l(),sc=a("p"),yQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jce=a("code"),wQo=o("from_pretrained()"),AQo=o("class method or the "),Yce=a("code"),LQo=o("from_config()"),BQo=o(`class
method.`),xQo=l(),qA=a("p"),kQo=o("This class cannot be instantiated directly using "),Kce=a("code"),RQo=o("__init__()"),SQo=o(" (throws an error)."),PQo=l(),lt=a("div"),m(GA.$$.fragment),$Qo=l(),Zce=a("p"),IQo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jQo=l(),nc=a("p"),NQo=o(`Note:
Loading a model from its configuration file does `),eme=a("strong"),DQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=a("code"),GQo=o("from_pretrained()"),OQo=o("to load the model weights."),XQo=l(),rme=a("p"),zQo=o("Examples:"),VQo=l(),m(OA.$$.fragment),WQo=l(),ho=a("div"),m(XA.$$.fragment),QQo=l(),tme=a("p"),HQo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UQo=l(),is=a("p"),JQo=o("The model class to instantiate is selected based on the "),ame=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),ZQo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),H=a("ul"),fF=a("li"),lme=a("strong"),aHo=o("albert"),sHo=o(" \u2014 "),MD=a("a"),nHo=o("TFAlbertForPreTraining"),lHo=o(" (ALBERT model)"),iHo=l(),gF=a("li"),ime=a("strong"),dHo=o("bart"),cHo=o(" \u2014 "),ED=a("a"),mHo=o("TFBartForConditionalGeneration"),fHo=o(" (BART model)"),gHo=l(),hF=a("li"),dme=a("strong"),hHo=o("bert"),uHo=o(" \u2014 "),yD=a("a"),pHo=o("TFBertForPreTraining"),_Ho=o(" (BERT model)"),bHo=l(),uF=a("li"),cme=a("strong"),vHo=o("camembert"),THo=o(" \u2014 "),wD=a("a"),FHo=o("TFCamembertForMaskedLM"),CHo=o(" (CamemBERT model)"),MHo=l(),pF=a("li"),mme=a("strong"),EHo=o("ctrl"),yHo=o(" \u2014 "),AD=a("a"),wHo=o("TFCTRLLMHeadModel"),AHo=o(" (CTRL model)"),LHo=l(),_F=a("li"),fme=a("strong"),BHo=o("distilbert"),xHo=o(" \u2014 "),LD=a("a"),kHo=o("TFDistilBertForMaskedLM"),RHo=o(" (DistilBERT model)"),SHo=l(),bF=a("li"),gme=a("strong"),PHo=o("electra"),$Ho=o(" \u2014 "),BD=a("a"),IHo=o("TFElectraForPreTraining"),jHo=o(" (ELECTRA model)"),NHo=l(),vF=a("li"),hme=a("strong"),DHo=o("flaubert"),qHo=o(" \u2014 "),xD=a("a"),GHo=o("TFFlaubertWithLMHeadModel"),OHo=o(" (FlauBERT model)"),XHo=l(),TF=a("li"),ume=a("strong"),zHo=o("funnel"),VHo=o(" \u2014 "),kD=a("a"),WHo=o("TFFunnelForPreTraining"),QHo=o(" (Funnel Transformer model)"),HHo=l(),FF=a("li"),pme=a("strong"),UHo=o("gpt2"),JHo=o(" \u2014 "),RD=a("a"),YHo=o("TFGPT2LMHeadModel"),KHo=o(" (OpenAI GPT-2 model)"),ZHo=l(),CF=a("li"),_me=a("strong"),eUo=o("layoutlm"),oUo=o(" \u2014 "),SD=a("a"),rUo=o("TFLayoutLMForMaskedLM"),tUo=o(" (LayoutLM model)"),aUo=l(),MF=a("li"),bme=a("strong"),sUo=o("lxmert"),nUo=o(" \u2014 "),PD=a("a"),lUo=o("TFLxmertForPreTraining"),iUo=o(" (LXMERT model)"),dUo=l(),EF=a("li"),vme=a("strong"),cUo=o("mobilebert"),mUo=o(" \u2014 "),$D=a("a"),fUo=o("TFMobileBertForPreTraining"),gUo=o(" (MobileBERT model)"),hUo=l(),yF=a("li"),Tme=a("strong"),uUo=o("mpnet"),pUo=o(" \u2014 "),ID=a("a"),_Uo=o("TFMPNetForMaskedLM"),bUo=o(" (MPNet model)"),vUo=l(),wF=a("li"),Fme=a("strong"),TUo=o("openai-gpt"),FUo=o(" \u2014 "),jD=a("a"),CUo=o("TFOpenAIGPTLMHeadModel"),MUo=o(" (OpenAI GPT model)"),EUo=l(),AF=a("li"),Cme=a("strong"),yUo=o("roberta"),wUo=o(" \u2014 "),ND=a("a"),AUo=o("TFRobertaForMaskedLM"),LUo=o(" (RoBERTa model)"),BUo=l(),LF=a("li"),Mme=a("strong"),xUo=o("t5"),kUo=o(" \u2014 "),DD=a("a"),RUo=o("TFT5ForConditionalGeneration"),SUo=o(" (T5 model)"),PUo=l(),BF=a("li"),Eme=a("strong"),$Uo=o("tapas"),IUo=o(" \u2014 "),qD=a("a"),jUo=o("TFTapasForMaskedLM"),NUo=o(" (TAPAS model)"),DUo=l(),xF=a("li"),yme=a("strong"),qUo=o("transfo-xl"),GUo=o(" \u2014 "),GD=a("a"),OUo=o("TFTransfoXLLMHeadModel"),XUo=o(" (Transformer-XL model)"),zUo=l(),kF=a("li"),wme=a("strong"),VUo=o("xlm"),WUo=o(" \u2014 "),OD=a("a"),QUo=o("TFXLMWithLMHeadModel"),HUo=o(" (XLM model)"),UUo=l(),RF=a("li"),Ame=a("strong"),JUo=o("xlm-roberta"),YUo=o(" \u2014 "),XD=a("a"),KUo=o("TFXLMRobertaForMaskedLM"),ZUo=o(" (XLM-RoBERTa model)"),eJo=l(),SF=a("li"),Lme=a("strong"),oJo=o("xlnet"),rJo=o(" \u2014 "),zD=a("a"),tJo=o("TFXLNetLMHeadModel"),aJo=o(" (XLNet model)"),sJo=l(),Bme=a("p"),nJo=o("Examples:"),lJo=l(),m(zA.$$.fragment),b9e=l(),lc=a("h2"),PF=a("a"),xme=a("span"),m(VA.$$.fragment),iJo=l(),kme=a("span"),dJo=o("TFAutoModelForCausalLM"),v9e=l(),ur=a("div"),m(WA.$$.fragment),cJo=l(),ic=a("p"),mJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rme=a("code"),fJo=o("from_pretrained()"),gJo=o("class method or the "),Sme=a("code"),hJo=o("from_config()"),uJo=o(`class
method.`),pJo=l(),QA=a("p"),_Jo=o("This class cannot be instantiated directly using "),Pme=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),TJo=l(),it=a("div"),m(HA.$$.fragment),FJo=l(),$me=a("p"),CJo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MJo=l(),dc=a("p"),EJo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),yJo=o("not"),wJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jme=a("code"),AJo=o("from_pretrained()"),LJo=o("to load the model weights."),BJo=l(),Nme=a("p"),xJo=o("Examples:"),kJo=l(),m(UA.$$.fragment),RJo=l(),uo=a("div"),m(JA.$$.fragment),SJo=l(),Dme=a("p"),PJo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Jo=l(),ds=a("p"),IJo=o("The model class to instantiate is selected based on the "),qme=a("code"),jJo=o("model_type"),NJo=o(` property of the config object (either
passed as an argument or loaded from `),Gme=a("code"),DJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(":"),XJo=l(),he=a("ul"),$F=a("li"),Xme=a("strong"),zJo=o("bert"),VJo=o(" \u2014 "),VD=a("a"),WJo=o("TFBertLMHeadModel"),QJo=o(" (BERT model)"),HJo=l(),IF=a("li"),zme=a("strong"),UJo=o("ctrl"),JJo=o(" \u2014 "),WD=a("a"),YJo=o("TFCTRLLMHeadModel"),KJo=o(" (CTRL model)"),ZJo=l(),jF=a("li"),Vme=a("strong"),eYo=o("gpt2"),oYo=o(" \u2014 "),QD=a("a"),rYo=o("TFGPT2LMHeadModel"),tYo=o(" (OpenAI GPT-2 model)"),aYo=l(),NF=a("li"),Wme=a("strong"),sYo=o("openai-gpt"),nYo=o(" \u2014 "),HD=a("a"),lYo=o("TFOpenAIGPTLMHeadModel"),iYo=o(" (OpenAI GPT model)"),dYo=l(),DF=a("li"),Qme=a("strong"),cYo=o("rembert"),mYo=o(" \u2014 "),UD=a("a"),fYo=o("TFRemBertForCausalLM"),gYo=o(" (RemBERT model)"),hYo=l(),qF=a("li"),Hme=a("strong"),uYo=o("roberta"),pYo=o(" \u2014 "),JD=a("a"),_Yo=o("TFRobertaForCausalLM"),bYo=o(" (RoBERTa model)"),vYo=l(),GF=a("li"),Ume=a("strong"),TYo=o("roformer"),FYo=o(" \u2014 "),YD=a("a"),CYo=o("TFRoFormerForCausalLM"),MYo=o(" (RoFormer model)"),EYo=l(),OF=a("li"),Jme=a("strong"),yYo=o("transfo-xl"),wYo=o(" \u2014 "),KD=a("a"),AYo=o("TFTransfoXLLMHeadModel"),LYo=o(" (Transformer-XL model)"),BYo=l(),XF=a("li"),Yme=a("strong"),xYo=o("xlm"),kYo=o(" \u2014 "),ZD=a("a"),RYo=o("TFXLMWithLMHeadModel"),SYo=o(" (XLM model)"),PYo=l(),zF=a("li"),Kme=a("strong"),$Yo=o("xlnet"),IYo=o(" \u2014 "),eq=a("a"),jYo=o("TFXLNetLMHeadModel"),NYo=o(" (XLNet model)"),DYo=l(),Zme=a("p"),qYo=o("Examples:"),GYo=l(),m(YA.$$.fragment),T9e=l(),cc=a("h2"),VF=a("a"),efe=a("span"),m(KA.$$.fragment),OYo=l(),ofe=a("span"),XYo=o("TFAutoModelForImageClassification"),F9e=l(),pr=a("div"),m(ZA.$$.fragment),zYo=l(),mc=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rfe=a("code"),WYo=o("from_pretrained()"),QYo=o("class method or the "),tfe=a("code"),HYo=o("from_config()"),UYo=o(`class
method.`),JYo=l(),e6=a("p"),YYo=o("This class cannot be instantiated directly using "),afe=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),dt=a("div"),m(o6.$$.fragment),oKo=l(),sfe=a("p"),rKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tKo=l(),fc=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),sKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lfe=a("code"),lKo=o("from_pretrained()"),iKo=o("to load the model weights."),dKo=l(),ife=a("p"),cKo=o("Examples:"),mKo=l(),m(r6.$$.fragment),fKo=l(),po=a("div"),m(t6.$$.fragment),gKo=l(),dfe=a("p"),hKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uKo=l(),cs=a("p"),pKo=o("The model class to instantiate is selected based on the "),cfe=a("code"),_Ko=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),vKo=o("pretrained_model_name_or_path"),TKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),FKo=o("pretrained_model_name_or_path"),CKo=o(":"),MKo=l(),a6=a("ul"),WF=a("li"),gfe=a("strong"),EKo=o("convnext"),yKo=o(" \u2014 "),oq=a("a"),wKo=o("TFConvNextForImageClassification"),AKo=o(" (ConvNext model)"),LKo=l(),QF=a("li"),hfe=a("strong"),BKo=o("vit"),xKo=o(" \u2014 "),rq=a("a"),kKo=o("TFViTForImageClassification"),RKo=o(" (ViT model)"),SKo=l(),ufe=a("p"),PKo=o("Examples:"),$Ko=l(),m(s6.$$.fragment),C9e=l(),gc=a("h2"),HF=a("a"),pfe=a("span"),m(n6.$$.fragment),IKo=l(),_fe=a("span"),jKo=o("TFAutoModelForMaskedLM"),M9e=l(),_r=a("div"),m(l6.$$.fragment),NKo=l(),hc=a("p"),DKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bfe=a("code"),qKo=o("from_pretrained()"),GKo=o("class method or the "),vfe=a("code"),OKo=o("from_config()"),XKo=o(`class
method.`),zKo=l(),i6=a("p"),VKo=o("This class cannot be instantiated directly using "),Tfe=a("code"),WKo=o("__init__()"),QKo=o(" (throws an error)."),HKo=l(),ct=a("div"),m(d6.$$.fragment),UKo=l(),Ffe=a("p"),JKo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YKo=l(),uc=a("p"),KKo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),ZKo=o("not"),eZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mfe=a("code"),oZo=o("from_pretrained()"),rZo=o("to load the model weights."),tZo=l(),Efe=a("p"),aZo=o("Examples:"),sZo=l(),m(c6.$$.fragment),nZo=l(),_o=a("div"),m(m6.$$.fragment),lZo=l(),yfe=a("p"),iZo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dZo=l(),ms=a("p"),cZo=o("The model class to instantiate is selected based on the "),wfe=a("code"),mZo=o("model_type"),fZo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),uZo=o("pretrained_model_name_or_path"),pZo=o(":"),_Zo=l(),Y=a("ul"),UF=a("li"),Bfe=a("strong"),bZo=o("albert"),vZo=o(" \u2014 "),tq=a("a"),TZo=o("TFAlbertForMaskedLM"),FZo=o(" (ALBERT model)"),CZo=l(),JF=a("li"),xfe=a("strong"),MZo=o("bert"),EZo=o(" \u2014 "),aq=a("a"),yZo=o("TFBertForMaskedLM"),wZo=o(" (BERT model)"),AZo=l(),YF=a("li"),kfe=a("strong"),LZo=o("camembert"),BZo=o(" \u2014 "),sq=a("a"),xZo=o("TFCamembertForMaskedLM"),kZo=o(" (CamemBERT model)"),RZo=l(),KF=a("li"),Rfe=a("strong"),SZo=o("convbert"),PZo=o(" \u2014 "),nq=a("a"),$Zo=o("TFConvBertForMaskedLM"),IZo=o(" (ConvBERT model)"),jZo=l(),ZF=a("li"),Sfe=a("strong"),NZo=o("deberta"),DZo=o(" \u2014 "),lq=a("a"),qZo=o("TFDebertaForMaskedLM"),GZo=o(" (DeBERTa model)"),OZo=l(),eC=a("li"),Pfe=a("strong"),XZo=o("deberta-v2"),zZo=o(" \u2014 "),iq=a("a"),VZo=o("TFDebertaV2ForMaskedLM"),WZo=o(" (DeBERTa-v2 model)"),QZo=l(),oC=a("li"),$fe=a("strong"),HZo=o("distilbert"),UZo=o(" \u2014 "),dq=a("a"),JZo=o("TFDistilBertForMaskedLM"),YZo=o(" (DistilBERT model)"),KZo=l(),rC=a("li"),Ife=a("strong"),ZZo=o("electra"),eer=o(" \u2014 "),cq=a("a"),oer=o("TFElectraForMaskedLM"),rer=o(" (ELECTRA model)"),ter=l(),tC=a("li"),jfe=a("strong"),aer=o("flaubert"),ser=o(" \u2014 "),mq=a("a"),ner=o("TFFlaubertWithLMHeadModel"),ler=o(" (FlauBERT model)"),ier=l(),aC=a("li"),Nfe=a("strong"),der=o("funnel"),cer=o(" \u2014 "),fq=a("a"),mer=o("TFFunnelForMaskedLM"),fer=o(" (Funnel Transformer model)"),ger=l(),sC=a("li"),Dfe=a("strong"),her=o("layoutlm"),uer=o(" \u2014 "),gq=a("a"),per=o("TFLayoutLMForMaskedLM"),_er=o(" (LayoutLM model)"),ber=l(),nC=a("li"),qfe=a("strong"),ver=o("longformer"),Ter=o(" \u2014 "),hq=a("a"),Fer=o("TFLongformerForMaskedLM"),Cer=o(" (Longformer model)"),Mer=l(),lC=a("li"),Gfe=a("strong"),Eer=o("mobilebert"),yer=o(" \u2014 "),uq=a("a"),wer=o("TFMobileBertForMaskedLM"),Aer=o(" (MobileBERT model)"),Ler=l(),iC=a("li"),Ofe=a("strong"),Ber=o("mpnet"),xer=o(" \u2014 "),pq=a("a"),ker=o("TFMPNetForMaskedLM"),Rer=o(" (MPNet model)"),Ser=l(),dC=a("li"),Xfe=a("strong"),Per=o("rembert"),$er=o(" \u2014 "),_q=a("a"),Ier=o("TFRemBertForMaskedLM"),jer=o(" (RemBERT model)"),Ner=l(),cC=a("li"),zfe=a("strong"),Der=o("roberta"),qer=o(" \u2014 "),bq=a("a"),Ger=o("TFRobertaForMaskedLM"),Oer=o(" (RoBERTa model)"),Xer=l(),mC=a("li"),Vfe=a("strong"),zer=o("roformer"),Ver=o(" \u2014 "),vq=a("a"),Wer=o("TFRoFormerForMaskedLM"),Qer=o(" (RoFormer model)"),Her=l(),fC=a("li"),Wfe=a("strong"),Uer=o("tapas"),Jer=o(" \u2014 "),Tq=a("a"),Yer=o("TFTapasForMaskedLM"),Ker=o(" (TAPAS model)"),Zer=l(),gC=a("li"),Qfe=a("strong"),eor=o("xlm"),oor=o(" \u2014 "),Fq=a("a"),ror=o("TFXLMWithLMHeadModel"),tor=o(" (XLM model)"),aor=l(),hC=a("li"),Hfe=a("strong"),sor=o("xlm-roberta"),nor=o(" \u2014 "),Cq=a("a"),lor=o("TFXLMRobertaForMaskedLM"),ior=o(" (XLM-RoBERTa model)"),dor=l(),Ufe=a("p"),cor=o("Examples:"),mor=l(),m(f6.$$.fragment),E9e=l(),pc=a("h2"),uC=a("a"),Jfe=a("span"),m(g6.$$.fragment),gor=l(),Yfe=a("span"),hor=o("TFAutoModelForSeq2SeqLM"),y9e=l(),br=a("div"),m(h6.$$.fragment),uor=l(),_c=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kfe=a("code"),_or=o("from_pretrained()"),bor=o("class method or the "),Zfe=a("code"),vor=o("from_config()"),Tor=o(`class
method.`),For=l(),u6=a("p"),Cor=o("This class cannot be instantiated directly using "),ege=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),yor=l(),mt=a("div"),m(p6.$$.fragment),wor=l(),oge=a("p"),Aor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lor=l(),bc=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),xor=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=a("code"),Ror=o("from_pretrained()"),Sor=o("to load the model weights."),Por=l(),age=a("p"),$or=o("Examples:"),Ior=l(),m(_6.$$.fragment),jor=l(),bo=a("div"),m(b6.$$.fragment),Nor=l(),sge=a("p"),Dor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qor=l(),fs=a("p"),Gor=o("The model class to instantiate is selected based on the "),nge=a("code"),Oor=o("model_type"),Xor=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),zor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),ue=a("ul"),pC=a("li"),dge=a("strong"),Uor=o("bart"),Jor=o(" \u2014 "),Mq=a("a"),Yor=o("TFBartForConditionalGeneration"),Kor=o(" (BART model)"),Zor=l(),_C=a("li"),cge=a("strong"),err=o("blenderbot"),orr=o(" \u2014 "),Eq=a("a"),rrr=o("TFBlenderbotForConditionalGeneration"),trr=o(" (Blenderbot model)"),arr=l(),bC=a("li"),mge=a("strong"),srr=o("blenderbot-small"),nrr=o(" \u2014 "),yq=a("a"),lrr=o("TFBlenderbotSmallForConditionalGeneration"),irr=o(" (BlenderbotSmall model)"),drr=l(),vC=a("li"),fge=a("strong"),crr=o("encoder-decoder"),mrr=o(" \u2014 "),wq=a("a"),frr=o("TFEncoderDecoderModel"),grr=o(" (Encoder decoder model)"),hrr=l(),TC=a("li"),gge=a("strong"),urr=o("led"),prr=o(" \u2014 "),Aq=a("a"),_rr=o("TFLEDForConditionalGeneration"),brr=o(" (LED model)"),vrr=l(),FC=a("li"),hge=a("strong"),Trr=o("marian"),Frr=o(" \u2014 "),Lq=a("a"),Crr=o("TFMarianMTModel"),Mrr=o(" (Marian model)"),Err=l(),CC=a("li"),uge=a("strong"),yrr=o("mbart"),wrr=o(" \u2014 "),Bq=a("a"),Arr=o("TFMBartForConditionalGeneration"),Lrr=o(" (mBART model)"),Brr=l(),MC=a("li"),pge=a("strong"),xrr=o("mt5"),krr=o(" \u2014 "),xq=a("a"),Rrr=o("TFMT5ForConditionalGeneration"),Srr=o(" (mT5 model)"),Prr=l(),EC=a("li"),_ge=a("strong"),$rr=o("pegasus"),Irr=o(" \u2014 "),kq=a("a"),jrr=o("TFPegasusForConditionalGeneration"),Nrr=o(" (Pegasus model)"),Drr=l(),yC=a("li"),bge=a("strong"),qrr=o("t5"),Grr=o(" \u2014 "),Rq=a("a"),Orr=o("TFT5ForConditionalGeneration"),Xrr=o(" (T5 model)"),zrr=l(),vge=a("p"),Vrr=o("Examples:"),Wrr=l(),m(v6.$$.fragment),w9e=l(),vc=a("h2"),wC=a("a"),Tge=a("span"),m(T6.$$.fragment),Qrr=l(),Fge=a("span"),Hrr=o("TFAutoModelForSequenceClassification"),A9e=l(),vr=a("div"),m(F6.$$.fragment),Urr=l(),Tc=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cge=a("code"),Yrr=o("from_pretrained()"),Krr=o("class method or the "),Mge=a("code"),Zrr=o("from_config()"),etr=o(`class
method.`),otr=l(),C6=a("p"),rtr=o("This class cannot be instantiated directly using "),Ege=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),str=l(),ft=a("div"),m(M6.$$.fragment),ntr=l(),yge=a("p"),ltr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),itr=l(),Fc=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),ctr=o("not"),mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Age=a("code"),ftr=o("from_pretrained()"),gtr=o("to load the model weights."),htr=l(),Lge=a("p"),utr=o("Examples:"),ptr=l(),m(E6.$$.fragment),_tr=l(),vo=a("div"),m(y6.$$.fragment),btr=l(),Bge=a("p"),vtr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ttr=l(),gs=a("p"),Ftr=o("The model class to instantiate is selected based on the "),xge=a("code"),Ctr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),Etr=o("pretrained_model_name_or_path"),ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),Ltr=l(),X=a("ul"),AC=a("li"),Sge=a("strong"),Btr=o("albert"),xtr=o(" \u2014 "),Sq=a("a"),ktr=o("TFAlbertForSequenceClassification"),Rtr=o(" (ALBERT model)"),Str=l(),LC=a("li"),Pge=a("strong"),Ptr=o("bert"),$tr=o(" \u2014 "),Pq=a("a"),Itr=o("TFBertForSequenceClassification"),jtr=o(" (BERT model)"),Ntr=l(),BC=a("li"),$ge=a("strong"),Dtr=o("camembert"),qtr=o(" \u2014 "),$q=a("a"),Gtr=o("TFCamembertForSequenceClassification"),Otr=o(" (CamemBERT model)"),Xtr=l(),xC=a("li"),Ige=a("strong"),ztr=o("convbert"),Vtr=o(" \u2014 "),Iq=a("a"),Wtr=o("TFConvBertForSequenceClassification"),Qtr=o(" (ConvBERT model)"),Htr=l(),kC=a("li"),jge=a("strong"),Utr=o("ctrl"),Jtr=o(" \u2014 "),jq=a("a"),Ytr=o("TFCTRLForSequenceClassification"),Ktr=o(" (CTRL model)"),Ztr=l(),RC=a("li"),Nge=a("strong"),ear=o("deberta"),oar=o(" \u2014 "),Nq=a("a"),rar=o("TFDebertaForSequenceClassification"),tar=o(" (DeBERTa model)"),aar=l(),SC=a("li"),Dge=a("strong"),sar=o("deberta-v2"),nar=o(" \u2014 "),Dq=a("a"),lar=o("TFDebertaV2ForSequenceClassification"),iar=o(" (DeBERTa-v2 model)"),dar=l(),PC=a("li"),qge=a("strong"),car=o("distilbert"),mar=o(" \u2014 "),qq=a("a"),far=o("TFDistilBertForSequenceClassification"),gar=o(" (DistilBERT model)"),har=l(),$C=a("li"),Gge=a("strong"),uar=o("electra"),par=o(" \u2014 "),Gq=a("a"),_ar=o("TFElectraForSequenceClassification"),bar=o(" (ELECTRA model)"),Tar=l(),IC=a("li"),Oge=a("strong"),Far=o("flaubert"),Car=o(" \u2014 "),Oq=a("a"),Mar=o("TFFlaubertForSequenceClassification"),Ear=o(" (FlauBERT model)"),yar=l(),jC=a("li"),Xge=a("strong"),war=o("funnel"),Aar=o(" \u2014 "),Xq=a("a"),Lar=o("TFFunnelForSequenceClassification"),Bar=o(" (Funnel Transformer model)"),xar=l(),NC=a("li"),zge=a("strong"),kar=o("gpt2"),Rar=o(" \u2014 "),zq=a("a"),Sar=o("TFGPT2ForSequenceClassification"),Par=o(" (OpenAI GPT-2 model)"),$ar=l(),DC=a("li"),Vge=a("strong"),Iar=o("layoutlm"),jar=o(" \u2014 "),Vq=a("a"),Nar=o("TFLayoutLMForSequenceClassification"),Dar=o(" (LayoutLM model)"),qar=l(),qC=a("li"),Wge=a("strong"),Gar=o("longformer"),Oar=o(" \u2014 "),Wq=a("a"),Xar=o("TFLongformerForSequenceClassification"),zar=o(" (Longformer model)"),Var=l(),GC=a("li"),Qge=a("strong"),War=o("mobilebert"),Qar=o(" \u2014 "),Qq=a("a"),Har=o("TFMobileBertForSequenceClassification"),Uar=o(" (MobileBERT model)"),Jar=l(),OC=a("li"),Hge=a("strong"),Yar=o("mpnet"),Kar=o(" \u2014 "),Hq=a("a"),Zar=o("TFMPNetForSequenceClassification"),esr=o(" (MPNet model)"),osr=l(),XC=a("li"),Uge=a("strong"),rsr=o("openai-gpt"),tsr=o(" \u2014 "),Uq=a("a"),asr=o("TFOpenAIGPTForSequenceClassification"),ssr=o(" (OpenAI GPT model)"),nsr=l(),zC=a("li"),Jge=a("strong"),lsr=o("rembert"),isr=o(" \u2014 "),Jq=a("a"),dsr=o("TFRemBertForSequenceClassification"),csr=o(" (RemBERT model)"),msr=l(),VC=a("li"),Yge=a("strong"),fsr=o("roberta"),gsr=o(" \u2014 "),Yq=a("a"),hsr=o("TFRobertaForSequenceClassification"),usr=o(" (RoBERTa model)"),psr=l(),WC=a("li"),Kge=a("strong"),_sr=o("roformer"),bsr=o(" \u2014 "),Kq=a("a"),vsr=o("TFRoFormerForSequenceClassification"),Tsr=o(" (RoFormer model)"),Fsr=l(),QC=a("li"),Zge=a("strong"),Csr=o("tapas"),Msr=o(" \u2014 "),Zq=a("a"),Esr=o("TFTapasForSequenceClassification"),ysr=o(" (TAPAS model)"),wsr=l(),HC=a("li"),ehe=a("strong"),Asr=o("transfo-xl"),Lsr=o(" \u2014 "),eG=a("a"),Bsr=o("TFTransfoXLForSequenceClassification"),xsr=o(" (Transformer-XL model)"),ksr=l(),UC=a("li"),ohe=a("strong"),Rsr=o("xlm"),Ssr=o(" \u2014 "),oG=a("a"),Psr=o("TFXLMForSequenceClassification"),$sr=o(" (XLM model)"),Isr=l(),JC=a("li"),rhe=a("strong"),jsr=o("xlm-roberta"),Nsr=o(" \u2014 "),rG=a("a"),Dsr=o("TFXLMRobertaForSequenceClassification"),qsr=o(" (XLM-RoBERTa model)"),Gsr=l(),YC=a("li"),the=a("strong"),Osr=o("xlnet"),Xsr=o(" \u2014 "),tG=a("a"),zsr=o("TFXLNetForSequenceClassification"),Vsr=o(" (XLNet model)"),Wsr=l(),ahe=a("p"),Qsr=o("Examples:"),Hsr=l(),m(w6.$$.fragment),L9e=l(),Cc=a("h2"),KC=a("a"),she=a("span"),m(A6.$$.fragment),Usr=l(),nhe=a("span"),Jsr=o("TFAutoModelForMultipleChoice"),B9e=l(),Tr=a("div"),m(L6.$$.fragment),Ysr=l(),Mc=a("p"),Ksr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lhe=a("code"),Zsr=o("from_pretrained()"),enr=o("class method or the "),ihe=a("code"),onr=o("from_config()"),rnr=o(`class
method.`),tnr=l(),B6=a("p"),anr=o("This class cannot be instantiated directly using "),dhe=a("code"),snr=o("__init__()"),nnr=o(" (throws an error)."),lnr=l(),gt=a("div"),m(x6.$$.fragment),inr=l(),che=a("p"),dnr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cnr=l(),Ec=a("p"),mnr=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),fnr=o("not"),gnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fhe=a("code"),hnr=o("from_pretrained()"),unr=o("to load the model weights."),pnr=l(),ghe=a("p"),_nr=o("Examples:"),bnr=l(),m(k6.$$.fragment),vnr=l(),To=a("div"),m(R6.$$.fragment),Tnr=l(),hhe=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cnr=l(),hs=a("p"),Mnr=o("The model class to instantiate is selected based on the "),uhe=a("code"),Enr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),Lnr=o("pretrained_model_name_or_path"),Bnr=o(":"),xnr=l(),te=a("ul"),ZC=a("li"),bhe=a("strong"),knr=o("albert"),Rnr=o(" \u2014 "),aG=a("a"),Snr=o("TFAlbertForMultipleChoice"),Pnr=o(" (ALBERT model)"),$nr=l(),e4=a("li"),vhe=a("strong"),Inr=o("bert"),jnr=o(" \u2014 "),sG=a("a"),Nnr=o("TFBertForMultipleChoice"),Dnr=o(" (BERT model)"),qnr=l(),o4=a("li"),The=a("strong"),Gnr=o("camembert"),Onr=o(" \u2014 "),nG=a("a"),Xnr=o("TFCamembertForMultipleChoice"),znr=o(" (CamemBERT model)"),Vnr=l(),r4=a("li"),Fhe=a("strong"),Wnr=o("convbert"),Qnr=o(" \u2014 "),lG=a("a"),Hnr=o("TFConvBertForMultipleChoice"),Unr=o(" (ConvBERT model)"),Jnr=l(),t4=a("li"),Che=a("strong"),Ynr=o("distilbert"),Knr=o(" \u2014 "),iG=a("a"),Znr=o("TFDistilBertForMultipleChoice"),elr=o(" (DistilBERT model)"),olr=l(),a4=a("li"),Mhe=a("strong"),rlr=o("electra"),tlr=o(" \u2014 "),dG=a("a"),alr=o("TFElectraForMultipleChoice"),slr=o(" (ELECTRA model)"),nlr=l(),s4=a("li"),Ehe=a("strong"),llr=o("flaubert"),ilr=o(" \u2014 "),cG=a("a"),dlr=o("TFFlaubertForMultipleChoice"),clr=o(" (FlauBERT model)"),mlr=l(),n4=a("li"),yhe=a("strong"),flr=o("funnel"),glr=o(" \u2014 "),mG=a("a"),hlr=o("TFFunnelForMultipleChoice"),ulr=o(" (Funnel Transformer model)"),plr=l(),l4=a("li"),whe=a("strong"),_lr=o("longformer"),blr=o(" \u2014 "),fG=a("a"),vlr=o("TFLongformerForMultipleChoice"),Tlr=o(" (Longformer model)"),Flr=l(),i4=a("li"),Ahe=a("strong"),Clr=o("mobilebert"),Mlr=o(" \u2014 "),gG=a("a"),Elr=o("TFMobileBertForMultipleChoice"),ylr=o(" (MobileBERT model)"),wlr=l(),d4=a("li"),Lhe=a("strong"),Alr=o("mpnet"),Llr=o(" \u2014 "),hG=a("a"),Blr=o("TFMPNetForMultipleChoice"),xlr=o(" (MPNet model)"),klr=l(),c4=a("li"),Bhe=a("strong"),Rlr=o("rembert"),Slr=o(" \u2014 "),uG=a("a"),Plr=o("TFRemBertForMultipleChoice"),$lr=o(" (RemBERT model)"),Ilr=l(),m4=a("li"),xhe=a("strong"),jlr=o("roberta"),Nlr=o(" \u2014 "),pG=a("a"),Dlr=o("TFRobertaForMultipleChoice"),qlr=o(" (RoBERTa model)"),Glr=l(),f4=a("li"),khe=a("strong"),Olr=o("roformer"),Xlr=o(" \u2014 "),_G=a("a"),zlr=o("TFRoFormerForMultipleChoice"),Vlr=o(" (RoFormer model)"),Wlr=l(),g4=a("li"),Rhe=a("strong"),Qlr=o("xlm"),Hlr=o(" \u2014 "),bG=a("a"),Ulr=o("TFXLMForMultipleChoice"),Jlr=o(" (XLM model)"),Ylr=l(),h4=a("li"),She=a("strong"),Klr=o("xlm-roberta"),Zlr=o(" \u2014 "),vG=a("a"),eir=o("TFXLMRobertaForMultipleChoice"),oir=o(" (XLM-RoBERTa model)"),rir=l(),u4=a("li"),Phe=a("strong"),tir=o("xlnet"),air=o(" \u2014 "),TG=a("a"),sir=o("TFXLNetForMultipleChoice"),nir=o(" (XLNet model)"),lir=l(),$he=a("p"),iir=o("Examples:"),dir=l(),m(S6.$$.fragment),x9e=l(),yc=a("h2"),p4=a("a"),Ihe=a("span"),m(P6.$$.fragment),cir=l(),jhe=a("span"),mir=o("TFAutoModelForTableQuestionAnswering"),k9e=l(),Fr=a("div"),m($6.$$.fragment),fir=l(),wc=a("p"),gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nhe=a("code"),hir=o("from_pretrained()"),uir=o("class method or the "),Dhe=a("code"),pir=o("from_config()"),_ir=o(`class
method.`),bir=l(),I6=a("p"),vir=o("This class cannot be instantiated directly using "),qhe=a("code"),Tir=o("__init__()"),Fir=o(" (throws an error)."),Cir=l(),ht=a("div"),m(j6.$$.fragment),Mir=l(),Ghe=a("p"),Eir=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yir=l(),Ac=a("p"),wir=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),Air=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=a("code"),Bir=o("from_pretrained()"),xir=o("to load the model weights."),kir=l(),zhe=a("p"),Rir=o("Examples:"),Sir=l(),m(N6.$$.fragment),Pir=l(),Fo=a("div"),m(D6.$$.fragment),$ir=l(),Vhe=a("p"),Iir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jir=l(),us=a("p"),Nir=o("The model class to instantiate is selected based on the "),Whe=a("code"),Dir=o("model_type"),qir=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(":"),Vir=l(),Uhe=a("ul"),_4=a("li"),Jhe=a("strong"),Wir=o("tapas"),Qir=o(" \u2014 "),FG=a("a"),Hir=o("TFTapasForQuestionAnswering"),Uir=o(" (TAPAS model)"),Jir=l(),Yhe=a("p"),Yir=o("Examples:"),Kir=l(),m(q6.$$.fragment),R9e=l(),Lc=a("h2"),b4=a("a"),Khe=a("span"),m(G6.$$.fragment),Zir=l(),Zhe=a("span"),edr=o("TFAutoModelForTokenClassification"),S9e=l(),Cr=a("div"),m(O6.$$.fragment),odr=l(),Bc=a("p"),rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eue=a("code"),tdr=o("from_pretrained()"),adr=o("class method or the "),oue=a("code"),sdr=o("from_config()"),ndr=o(`class
method.`),ldr=l(),X6=a("p"),idr=o("This class cannot be instantiated directly using "),rue=a("code"),ddr=o("__init__()"),cdr=o(" (throws an error)."),mdr=l(),ut=a("div"),m(z6.$$.fragment),fdr=l(),tue=a("p"),gdr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hdr=l(),xc=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),pdr=o("not"),_dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sue=a("code"),bdr=o("from_pretrained()"),vdr=o("to load the model weights."),Tdr=l(),nue=a("p"),Fdr=o("Examples:"),Cdr=l(),m(V6.$$.fragment),Mdr=l(),Co=a("div"),m(W6.$$.fragment),Edr=l(),lue=a("p"),ydr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wdr=l(),ps=a("p"),Adr=o("The model class to instantiate is selected based on the "),iue=a("code"),Ldr=o("model_type"),Bdr=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),xdr=o("pretrained_model_name_or_path"),kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),Rdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Pdr=l(),K=a("ul"),v4=a("li"),mue=a("strong"),$dr=o("albert"),Idr=o(" \u2014 "),CG=a("a"),jdr=o("TFAlbertForTokenClassification"),Ndr=o(" (ALBERT model)"),Ddr=l(),T4=a("li"),fue=a("strong"),qdr=o("bert"),Gdr=o(" \u2014 "),MG=a("a"),Odr=o("TFBertForTokenClassification"),Xdr=o(" (BERT model)"),zdr=l(),F4=a("li"),gue=a("strong"),Vdr=o("camembert"),Wdr=o(" \u2014 "),EG=a("a"),Qdr=o("TFCamembertForTokenClassification"),Hdr=o(" (CamemBERT model)"),Udr=l(),C4=a("li"),hue=a("strong"),Jdr=o("convbert"),Ydr=o(" \u2014 "),yG=a("a"),Kdr=o("TFConvBertForTokenClassification"),Zdr=o(" (ConvBERT model)"),ecr=l(),M4=a("li"),uue=a("strong"),ocr=o("deberta"),rcr=o(" \u2014 "),wG=a("a"),tcr=o("TFDebertaForTokenClassification"),acr=o(" (DeBERTa model)"),scr=l(),E4=a("li"),pue=a("strong"),ncr=o("deberta-v2"),lcr=o(" \u2014 "),AG=a("a"),icr=o("TFDebertaV2ForTokenClassification"),dcr=o(" (DeBERTa-v2 model)"),ccr=l(),y4=a("li"),_ue=a("strong"),mcr=o("distilbert"),fcr=o(" \u2014 "),LG=a("a"),gcr=o("TFDistilBertForTokenClassification"),hcr=o(" (DistilBERT model)"),ucr=l(),w4=a("li"),bue=a("strong"),pcr=o("electra"),_cr=o(" \u2014 "),BG=a("a"),bcr=o("TFElectraForTokenClassification"),vcr=o(" (ELECTRA model)"),Tcr=l(),A4=a("li"),vue=a("strong"),Fcr=o("flaubert"),Ccr=o(" \u2014 "),xG=a("a"),Mcr=o("TFFlaubertForTokenClassification"),Ecr=o(" (FlauBERT model)"),ycr=l(),L4=a("li"),Tue=a("strong"),wcr=o("funnel"),Acr=o(" \u2014 "),kG=a("a"),Lcr=o("TFFunnelForTokenClassification"),Bcr=o(" (Funnel Transformer model)"),xcr=l(),B4=a("li"),Fue=a("strong"),kcr=o("layoutlm"),Rcr=o(" \u2014 "),RG=a("a"),Scr=o("TFLayoutLMForTokenClassification"),Pcr=o(" (LayoutLM model)"),$cr=l(),x4=a("li"),Cue=a("strong"),Icr=o("longformer"),jcr=o(" \u2014 "),SG=a("a"),Ncr=o("TFLongformerForTokenClassification"),Dcr=o(" (Longformer model)"),qcr=l(),k4=a("li"),Mue=a("strong"),Gcr=o("mobilebert"),Ocr=o(" \u2014 "),PG=a("a"),Xcr=o("TFMobileBertForTokenClassification"),zcr=o(" (MobileBERT model)"),Vcr=l(),R4=a("li"),Eue=a("strong"),Wcr=o("mpnet"),Qcr=o(" \u2014 "),$G=a("a"),Hcr=o("TFMPNetForTokenClassification"),Ucr=o(" (MPNet model)"),Jcr=l(),S4=a("li"),yue=a("strong"),Ycr=o("rembert"),Kcr=o(" \u2014 "),IG=a("a"),Zcr=o("TFRemBertForTokenClassification"),emr=o(" (RemBERT model)"),omr=l(),P4=a("li"),wue=a("strong"),rmr=o("roberta"),tmr=o(" \u2014 "),jG=a("a"),amr=o("TFRobertaForTokenClassification"),smr=o(" (RoBERTa model)"),nmr=l(),$4=a("li"),Aue=a("strong"),lmr=o("roformer"),imr=o(" \u2014 "),NG=a("a"),dmr=o("TFRoFormerForTokenClassification"),cmr=o(" (RoFormer model)"),mmr=l(),I4=a("li"),Lue=a("strong"),fmr=o("xlm"),gmr=o(" \u2014 "),DG=a("a"),hmr=o("TFXLMForTokenClassification"),umr=o(" (XLM model)"),pmr=l(),j4=a("li"),Bue=a("strong"),_mr=o("xlm-roberta"),bmr=o(" \u2014 "),qG=a("a"),vmr=o("TFXLMRobertaForTokenClassification"),Tmr=o(" (XLM-RoBERTa model)"),Fmr=l(),N4=a("li"),xue=a("strong"),Cmr=o("xlnet"),Mmr=o(" \u2014 "),GG=a("a"),Emr=o("TFXLNetForTokenClassification"),ymr=o(" (XLNet model)"),wmr=l(),kue=a("p"),Amr=o("Examples:"),Lmr=l(),m(Q6.$$.fragment),P9e=l(),kc=a("h2"),D4=a("a"),Rue=a("span"),m(H6.$$.fragment),Bmr=l(),Sue=a("span"),xmr=o("TFAutoModelForQuestionAnswering"),$9e=l(),Mr=a("div"),m(U6.$$.fragment),kmr=l(),Rc=a("p"),Rmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pue=a("code"),Smr=o("from_pretrained()"),Pmr=o("class method or the "),$ue=a("code"),$mr=o("from_config()"),Imr=o(`class
method.`),jmr=l(),J6=a("p"),Nmr=o("This class cannot be instantiated directly using "),Iue=a("code"),Dmr=o("__init__()"),qmr=o(" (throws an error)."),Gmr=l(),pt=a("div"),m(Y6.$$.fragment),Omr=l(),jue=a("p"),Xmr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zmr=l(),Sc=a("p"),Vmr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),Wmr=o("not"),Qmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Due=a("code"),Hmr=o("from_pretrained()"),Umr=o("to load the model weights."),Jmr=l(),que=a("p"),Ymr=o("Examples:"),Kmr=l(),m(K6.$$.fragment),Zmr=l(),Mo=a("div"),m(Z6.$$.fragment),efr=l(),Gue=a("p"),ofr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rfr=l(),_s=a("p"),tfr=o("The model class to instantiate is selected based on the "),Oue=a("code"),afr=o("model_type"),sfr=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),nfr=o("pretrained_model_name_or_path"),lfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),ifr=o("pretrained_model_name_or_path"),dfr=o(":"),cfr=l(),Z=a("ul"),q4=a("li"),Vue=a("strong"),mfr=o("albert"),ffr=o(" \u2014 "),OG=a("a"),gfr=o("TFAlbertForQuestionAnswering"),hfr=o(" (ALBERT model)"),ufr=l(),G4=a("li"),Wue=a("strong"),pfr=o("bert"),_fr=o(" \u2014 "),XG=a("a"),bfr=o("TFBertForQuestionAnswering"),vfr=o(" (BERT model)"),Tfr=l(),O4=a("li"),Que=a("strong"),Ffr=o("camembert"),Cfr=o(" \u2014 "),zG=a("a"),Mfr=o("TFCamembertForQuestionAnswering"),Efr=o(" (CamemBERT model)"),yfr=l(),X4=a("li"),Hue=a("strong"),wfr=o("convbert"),Afr=o(" \u2014 "),VG=a("a"),Lfr=o("TFConvBertForQuestionAnswering"),Bfr=o(" (ConvBERT model)"),xfr=l(),z4=a("li"),Uue=a("strong"),kfr=o("deberta"),Rfr=o(" \u2014 "),WG=a("a"),Sfr=o("TFDebertaForQuestionAnswering"),Pfr=o(" (DeBERTa model)"),$fr=l(),V4=a("li"),Jue=a("strong"),Ifr=o("deberta-v2"),jfr=o(" \u2014 "),QG=a("a"),Nfr=o("TFDebertaV2ForQuestionAnswering"),Dfr=o(" (DeBERTa-v2 model)"),qfr=l(),W4=a("li"),Yue=a("strong"),Gfr=o("distilbert"),Ofr=o(" \u2014 "),HG=a("a"),Xfr=o("TFDistilBertForQuestionAnswering"),zfr=o(" (DistilBERT model)"),Vfr=l(),Q4=a("li"),Kue=a("strong"),Wfr=o("electra"),Qfr=o(" \u2014 "),UG=a("a"),Hfr=o("TFElectraForQuestionAnswering"),Ufr=o(" (ELECTRA model)"),Jfr=l(),H4=a("li"),Zue=a("strong"),Yfr=o("flaubert"),Kfr=o(" \u2014 "),JG=a("a"),Zfr=o("TFFlaubertForQuestionAnsweringSimple"),egr=o(" (FlauBERT model)"),ogr=l(),U4=a("li"),epe=a("strong"),rgr=o("funnel"),tgr=o(" \u2014 "),YG=a("a"),agr=o("TFFunnelForQuestionAnswering"),sgr=o(" (Funnel Transformer model)"),ngr=l(),J4=a("li"),ope=a("strong"),lgr=o("longformer"),igr=o(" \u2014 "),KG=a("a"),dgr=o("TFLongformerForQuestionAnswering"),cgr=o(" (Longformer model)"),mgr=l(),Y4=a("li"),rpe=a("strong"),fgr=o("mobilebert"),ggr=o(" \u2014 "),ZG=a("a"),hgr=o("TFMobileBertForQuestionAnswering"),ugr=o(" (MobileBERT model)"),pgr=l(),K4=a("li"),tpe=a("strong"),_gr=o("mpnet"),bgr=o(" \u2014 "),eO=a("a"),vgr=o("TFMPNetForQuestionAnswering"),Tgr=o(" (MPNet model)"),Fgr=l(),Z4=a("li"),ape=a("strong"),Cgr=o("rembert"),Mgr=o(" \u2014 "),oO=a("a"),Egr=o("TFRemBertForQuestionAnswering"),ygr=o(" (RemBERT model)"),wgr=l(),eM=a("li"),spe=a("strong"),Agr=o("roberta"),Lgr=o(" \u2014 "),rO=a("a"),Bgr=o("TFRobertaForQuestionAnswering"),xgr=o(" (RoBERTa model)"),kgr=l(),oM=a("li"),npe=a("strong"),Rgr=o("roformer"),Sgr=o(" \u2014 "),tO=a("a"),Pgr=o("TFRoFormerForQuestionAnswering"),$gr=o(" (RoFormer model)"),Igr=l(),rM=a("li"),lpe=a("strong"),jgr=o("xlm"),Ngr=o(" \u2014 "),aO=a("a"),Dgr=o("TFXLMForQuestionAnsweringSimple"),qgr=o(" (XLM model)"),Ggr=l(),tM=a("li"),ipe=a("strong"),Ogr=o("xlm-roberta"),Xgr=o(" \u2014 "),sO=a("a"),zgr=o("TFXLMRobertaForQuestionAnswering"),Vgr=o(" (XLM-RoBERTa model)"),Wgr=l(),aM=a("li"),dpe=a("strong"),Qgr=o("xlnet"),Hgr=o(" \u2014 "),nO=a("a"),Ugr=o("TFXLNetForQuestionAnsweringSimple"),Jgr=o(" (XLNet model)"),Ygr=l(),cpe=a("p"),Kgr=o("Examples:"),Zgr=l(),m(e0.$$.fragment),I9e=l(),Pc=a("h2"),sM=a("a"),mpe=a("span"),m(o0.$$.fragment),ehr=l(),fpe=a("span"),ohr=o("TFAutoModelForVision2Seq"),j9e=l(),Er=a("div"),m(r0.$$.fragment),rhr=l(),$c=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gpe=a("code"),ahr=o("from_pretrained()"),shr=o("class method or the "),hpe=a("code"),nhr=o("from_config()"),lhr=o(`class
method.`),ihr=l(),t0=a("p"),dhr=o("This class cannot be instantiated directly using "),upe=a("code"),chr=o("__init__()"),mhr=o(" (throws an error)."),fhr=l(),_t=a("div"),m(a0.$$.fragment),ghr=l(),ppe=a("p"),hhr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uhr=l(),Ic=a("p"),phr=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bpe=a("code"),vhr=o("from_pretrained()"),Thr=o("to load the model weights."),Fhr=l(),vpe=a("p"),Chr=o("Examples:"),Mhr=l(),m(s0.$$.fragment),Ehr=l(),Eo=a("div"),m(n0.$$.fragment),yhr=l(),Tpe=a("p"),whr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ahr=l(),bs=a("p"),Lhr=o("The model class to instantiate is selected based on the "),Fpe=a("code"),Bhr=o("model_type"),xhr=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),khr=o("pretrained_model_name_or_path"),Rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),Shr=o("pretrained_model_name_or_path"),Phr=o(":"),$hr=l(),Epe=a("ul"),nM=a("li"),ype=a("strong"),Ihr=o("vision-encoder-decoder"),jhr=o(" \u2014 "),lO=a("a"),Nhr=o("TFVisionEncoderDecoderModel"),Dhr=o(" (Vision Encoder decoder model)"),qhr=l(),wpe=a("p"),Ghr=o("Examples:"),Ohr=l(),m(l0.$$.fragment),N9e=l(),jc=a("h2"),lM=a("a"),Ape=a("span"),m(i0.$$.fragment),Xhr=l(),Lpe=a("span"),zhr=o("TFAutoModelForSpeechSeq2Seq"),D9e=l(),yr=a("div"),m(d0.$$.fragment),Vhr=l(),Nc=a("p"),Whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bpe=a("code"),Qhr=o("from_pretrained()"),Hhr=o("class method or the "),xpe=a("code"),Uhr=o("from_config()"),Jhr=o(`class
method.`),Yhr=l(),c0=a("p"),Khr=o("This class cannot be instantiated directly using "),kpe=a("code"),Zhr=o("__init__()"),eur=o(" (throws an error)."),our=l(),bt=a("div"),m(m0.$$.fragment),rur=l(),Rpe=a("p"),tur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),aur=l(),Dc=a("p"),sur=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),nur=o("not"),lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=a("code"),iur=o("from_pretrained()"),dur=o("to load the model weights."),cur=l(),$pe=a("p"),mur=o("Examples:"),fur=l(),m(f0.$$.fragment),gur=l(),yo=a("div"),m(g0.$$.fragment),hur=l(),Ipe=a("p"),uur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pur=l(),vs=a("p"),_ur=o("The model class to instantiate is selected based on the "),jpe=a("code"),bur=o("model_type"),vur=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),Tur=o("pretrained_model_name_or_path"),Fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),Cur=o("pretrained_model_name_or_path"),Mur=o(":"),Eur=l(),qpe=a("ul"),iM=a("li"),Gpe=a("strong"),yur=o("speech_to_text"),wur=o(" \u2014 "),iO=a("a"),Aur=o("TFSpeech2TextForConditionalGeneration"),Lur=o(" (Speech2Text model)"),Bur=l(),Ope=a("p"),xur=o("Examples:"),kur=l(),m(h0.$$.fragment),q9e=l(),qc=a("h2"),dM=a("a"),Xpe=a("span"),m(u0.$$.fragment),Rur=l(),zpe=a("span"),Sur=o("FlaxAutoModel"),G9e=l(),wr=a("div"),m(p0.$$.fragment),Pur=l(),Gc=a("p"),$ur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Vpe=a("code"),Iur=o("from_pretrained()"),jur=o("class method or the "),Wpe=a("code"),Nur=o("from_config()"),Dur=o(`class
method.`),qur=l(),_0=a("p"),Gur=o("This class cannot be instantiated directly using "),Qpe=a("code"),Our=o("__init__()"),Xur=o(" (throws an error)."),zur=l(),vt=a("div"),m(b0.$$.fragment),Vur=l(),Hpe=a("p"),Wur=o("Instantiates one of the base model classes of the library from a configuration."),Qur=l(),Oc=a("p"),Hur=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),Uur=o("not"),Jur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jpe=a("code"),Yur=o("from_pretrained()"),Kur=o("to load the model weights."),Zur=l(),Ype=a("p"),epr=o("Examples:"),opr=l(),m(v0.$$.fragment),rpr=l(),wo=a("div"),m(T0.$$.fragment),tpr=l(),Kpe=a("p"),apr=o("Instantiate one of the base model classes of the library from a pretrained model."),spr=l(),Ts=a("p"),npr=o("The model class to instantiate is selected based on the "),Zpe=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),mpr=o("pretrained_model_name_or_path"),fpr=o(":"),gpr=l(),V=a("ul"),cM=a("li"),r_e=a("strong"),hpr=o("albert"),upr=o(" \u2014 "),dO=a("a"),ppr=o("FlaxAlbertModel"),_pr=o(" (ALBERT model)"),bpr=l(),mM=a("li"),t_e=a("strong"),vpr=o("bart"),Tpr=o(" \u2014 "),cO=a("a"),Fpr=o("FlaxBartModel"),Cpr=o(" (BART model)"),Mpr=l(),fM=a("li"),a_e=a("strong"),Epr=o("beit"),ypr=o(" \u2014 "),mO=a("a"),wpr=o("FlaxBeitModel"),Apr=o(" (BEiT model)"),Lpr=l(),gM=a("li"),s_e=a("strong"),Bpr=o("bert"),xpr=o(" \u2014 "),fO=a("a"),kpr=o("FlaxBertModel"),Rpr=o(" (BERT model)"),Spr=l(),hM=a("li"),n_e=a("strong"),Ppr=o("big_bird"),$pr=o(" \u2014 "),gO=a("a"),Ipr=o("FlaxBigBirdModel"),jpr=o(" (BigBird model)"),Npr=l(),uM=a("li"),l_e=a("strong"),Dpr=o("blenderbot"),qpr=o(" \u2014 "),hO=a("a"),Gpr=o("FlaxBlenderbotModel"),Opr=o(" (Blenderbot model)"),Xpr=l(),pM=a("li"),i_e=a("strong"),zpr=o("blenderbot-small"),Vpr=o(" \u2014 "),uO=a("a"),Wpr=o("FlaxBlenderbotSmallModel"),Qpr=o(" (BlenderbotSmall model)"),Hpr=l(),_M=a("li"),d_e=a("strong"),Upr=o("clip"),Jpr=o(" \u2014 "),pO=a("a"),Ypr=o("FlaxCLIPModel"),Kpr=o(" (CLIP model)"),Zpr=l(),bM=a("li"),c_e=a("strong"),e_r=o("distilbert"),o_r=o(" \u2014 "),_O=a("a"),r_r=o("FlaxDistilBertModel"),t_r=o(" (DistilBERT model)"),a_r=l(),vM=a("li"),m_e=a("strong"),s_r=o("electra"),n_r=o(" \u2014 "),bO=a("a"),l_r=o("FlaxElectraModel"),i_r=o(" (ELECTRA model)"),d_r=l(),TM=a("li"),f_e=a("strong"),c_r=o("gpt2"),m_r=o(" \u2014 "),vO=a("a"),f_r=o("FlaxGPT2Model"),g_r=o(" (OpenAI GPT-2 model)"),h_r=l(),FM=a("li"),g_e=a("strong"),u_r=o("gpt_neo"),p_r=o(" \u2014 "),TO=a("a"),__r=o("FlaxGPTNeoModel"),b_r=o(" (GPT Neo model)"),v_r=l(),CM=a("li"),h_e=a("strong"),T_r=o("gptj"),F_r=o(" \u2014 "),FO=a("a"),C_r=o("FlaxGPTJModel"),M_r=o(" (GPT-J model)"),E_r=l(),MM=a("li"),u_e=a("strong"),y_r=o("marian"),w_r=o(" \u2014 "),CO=a("a"),A_r=o("FlaxMarianModel"),L_r=o(" (Marian model)"),B_r=l(),EM=a("li"),p_e=a("strong"),x_r=o("mbart"),k_r=o(" \u2014 "),MO=a("a"),R_r=o("FlaxMBartModel"),S_r=o(" (mBART model)"),P_r=l(),yM=a("li"),__e=a("strong"),$_r=o("mt5"),I_r=o(" \u2014 "),EO=a("a"),j_r=o("FlaxMT5Model"),N_r=o(" (mT5 model)"),D_r=l(),wM=a("li"),b_e=a("strong"),q_r=o("pegasus"),G_r=o(" \u2014 "),yO=a("a"),O_r=o("FlaxPegasusModel"),X_r=o(" (Pegasus model)"),z_r=l(),AM=a("li"),v_e=a("strong"),V_r=o("roberta"),W_r=o(" \u2014 "),wO=a("a"),Q_r=o("FlaxRobertaModel"),H_r=o(" (RoBERTa model)"),U_r=l(),LM=a("li"),T_e=a("strong"),J_r=o("roformer"),Y_r=o(" \u2014 "),AO=a("a"),K_r=o("FlaxRoFormerModel"),Z_r=o(" (RoFormer model)"),ebr=l(),BM=a("li"),F_e=a("strong"),obr=o("t5"),rbr=o(" \u2014 "),LO=a("a"),tbr=o("FlaxT5Model"),abr=o(" (T5 model)"),sbr=l(),xM=a("li"),C_e=a("strong"),nbr=o("vision-text-dual-encoder"),lbr=o(" \u2014 "),BO=a("a"),ibr=o("FlaxVisionTextDualEncoderModel"),dbr=o(" (VisionTextDualEncoder model)"),cbr=l(),kM=a("li"),M_e=a("strong"),mbr=o("vit"),fbr=o(" \u2014 "),xO=a("a"),gbr=o("FlaxViTModel"),hbr=o(" (ViT model)"),ubr=l(),RM=a("li"),E_e=a("strong"),pbr=o("wav2vec2"),_br=o(" \u2014 "),kO=a("a"),bbr=o("FlaxWav2Vec2Model"),vbr=o(" (Wav2Vec2 model)"),Tbr=l(),SM=a("li"),y_e=a("strong"),Fbr=o("xglm"),Cbr=o(" \u2014 "),RO=a("a"),Mbr=o("FlaxXGLMModel"),Ebr=o(" (XGLM model)"),ybr=l(),w_e=a("p"),wbr=o("Examples:"),Abr=l(),m(F0.$$.fragment),O9e=l(),Xc=a("h2"),PM=a("a"),A_e=a("span"),m(C0.$$.fragment),Lbr=l(),L_e=a("span"),Bbr=o("FlaxAutoModelForCausalLM"),X9e=l(),Ar=a("div"),m(M0.$$.fragment),xbr=l(),zc=a("p"),kbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),B_e=a("code"),Rbr=o("from_pretrained()"),Sbr=o("class method or the "),x_e=a("code"),Pbr=o("from_config()"),$br=o(`class
method.`),Ibr=l(),E0=a("p"),jbr=o("This class cannot be instantiated directly using "),k_e=a("code"),Nbr=o("__init__()"),Dbr=o(" (throws an error)."),qbr=l(),Tt=a("div"),m(y0.$$.fragment),Gbr=l(),R_e=a("p"),Obr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xbr=l(),Vc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),Vbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P_e=a("code"),Qbr=o("from_pretrained()"),Hbr=o("to load the model weights."),Ubr=l(),$_e=a("p"),Jbr=o("Examples:"),Ybr=l(),m(w0.$$.fragment),Kbr=l(),Ao=a("div"),m(A0.$$.fragment),Zbr=l(),I_e=a("p"),e2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o2r=l(),Fs=a("p"),r2r=o("The model class to instantiate is selected based on the "),j_e=a("code"),t2r=o("model_type"),a2r=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),s2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(":"),d2r=l(),Cs=a("ul"),$M=a("li"),q_e=a("strong"),c2r=o("gpt2"),m2r=o(" \u2014 "),SO=a("a"),f2r=o("FlaxGPT2LMHeadModel"),g2r=o(" (OpenAI GPT-2 model)"),h2r=l(),IM=a("li"),G_e=a("strong"),u2r=o("gpt_neo"),p2r=o(" \u2014 "),PO=a("a"),_2r=o("FlaxGPTNeoForCausalLM"),b2r=o(" (GPT Neo model)"),v2r=l(),jM=a("li"),O_e=a("strong"),T2r=o("gptj"),F2r=o(" \u2014 "),$O=a("a"),C2r=o("FlaxGPTJForCausalLM"),M2r=o(" (GPT-J model)"),E2r=l(),NM=a("li"),X_e=a("strong"),y2r=o("xglm"),w2r=o(" \u2014 "),IO=a("a"),A2r=o("FlaxXGLMForCausalLM"),L2r=o(" (XGLM model)"),B2r=l(),z_e=a("p"),x2r=o("Examples:"),k2r=l(),m(L0.$$.fragment),z9e=l(),Wc=a("h2"),DM=a("a"),V_e=a("span"),m(B0.$$.fragment),R2r=l(),W_e=a("span"),S2r=o("FlaxAutoModelForPreTraining"),V9e=l(),Lr=a("div"),m(x0.$$.fragment),P2r=l(),Qc=a("p"),$2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Q_e=a("code"),I2r=o("from_pretrained()"),j2r=o("class method or the "),H_e=a("code"),N2r=o("from_config()"),D2r=o(`class
method.`),q2r=l(),k0=a("p"),G2r=o("This class cannot be instantiated directly using "),U_e=a("code"),O2r=o("__init__()"),X2r=o(" (throws an error)."),z2r=l(),Ft=a("div"),m(R0.$$.fragment),V2r=l(),J_e=a("p"),W2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q2r=l(),Hc=a("p"),H2r=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),U2r=o("not"),J2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=a("code"),Y2r=o("from_pretrained()"),K2r=o("to load the model weights."),Z2r=l(),Z_e=a("p"),evr=o("Examples:"),ovr=l(),m(S0.$$.fragment),rvr=l(),Lo=a("div"),m(P0.$$.fragment),tvr=l(),ebe=a("p"),avr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),svr=l(),Ms=a("p"),nvr=o("The model class to instantiate is selected based on the "),obe=a("code"),lvr=o("model_type"),ivr=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),mvr=o("pretrained_model_name_or_path"),fvr=o(":"),gvr=l(),me=a("ul"),qM=a("li"),abe=a("strong"),hvr=o("albert"),uvr=o(" \u2014 "),jO=a("a"),pvr=o("FlaxAlbertForPreTraining"),_vr=o(" (ALBERT model)"),bvr=l(),GM=a("li"),sbe=a("strong"),vvr=o("bart"),Tvr=o(" \u2014 "),NO=a("a"),Fvr=o("FlaxBartForConditionalGeneration"),Cvr=o(" (BART model)"),Mvr=l(),OM=a("li"),nbe=a("strong"),Evr=o("bert"),yvr=o(" \u2014 "),DO=a("a"),wvr=o("FlaxBertForPreTraining"),Avr=o(" (BERT model)"),Lvr=l(),XM=a("li"),lbe=a("strong"),Bvr=o("big_bird"),xvr=o(" \u2014 "),qO=a("a"),kvr=o("FlaxBigBirdForPreTraining"),Rvr=o(" (BigBird model)"),Svr=l(),zM=a("li"),ibe=a("strong"),Pvr=o("electra"),$vr=o(" \u2014 "),GO=a("a"),Ivr=o("FlaxElectraForPreTraining"),jvr=o(" (ELECTRA model)"),Nvr=l(),VM=a("li"),dbe=a("strong"),Dvr=o("mbart"),qvr=o(" \u2014 "),OO=a("a"),Gvr=o("FlaxMBartForConditionalGeneration"),Ovr=o(" (mBART model)"),Xvr=l(),WM=a("li"),cbe=a("strong"),zvr=o("mt5"),Vvr=o(" \u2014 "),XO=a("a"),Wvr=o("FlaxMT5ForConditionalGeneration"),Qvr=o(" (mT5 model)"),Hvr=l(),QM=a("li"),mbe=a("strong"),Uvr=o("roberta"),Jvr=o(" \u2014 "),zO=a("a"),Yvr=o("FlaxRobertaForMaskedLM"),Kvr=o(" (RoBERTa model)"),Zvr=l(),HM=a("li"),fbe=a("strong"),eTr=o("roformer"),oTr=o(" \u2014 "),VO=a("a"),rTr=o("FlaxRoFormerForMaskedLM"),tTr=o(" (RoFormer model)"),aTr=l(),UM=a("li"),gbe=a("strong"),sTr=o("t5"),nTr=o(" \u2014 "),WO=a("a"),lTr=o("FlaxT5ForConditionalGeneration"),iTr=o(" (T5 model)"),dTr=l(),JM=a("li"),hbe=a("strong"),cTr=o("wav2vec2"),mTr=o(" \u2014 "),QO=a("a"),fTr=o("FlaxWav2Vec2ForPreTraining"),gTr=o(" (Wav2Vec2 model)"),hTr=l(),ube=a("p"),uTr=o("Examples:"),pTr=l(),m($0.$$.fragment),W9e=l(),Uc=a("h2"),YM=a("a"),pbe=a("span"),m(I0.$$.fragment),_Tr=l(),_be=a("span"),bTr=o("FlaxAutoModelForMaskedLM"),Q9e=l(),Br=a("div"),m(j0.$$.fragment),vTr=l(),Jc=a("p"),TTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bbe=a("code"),FTr=o("from_pretrained()"),CTr=o("class method or the "),vbe=a("code"),MTr=o("from_config()"),ETr=o(`class
method.`),yTr=l(),N0=a("p"),wTr=o("This class cannot be instantiated directly using "),Tbe=a("code"),ATr=o("__init__()"),LTr=o(" (throws an error)."),BTr=l(),Ct=a("div"),m(D0.$$.fragment),xTr=l(),Fbe=a("p"),kTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RTr=l(),Yc=a("p"),STr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),PTr=o("not"),$Tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=a("code"),ITr=o("from_pretrained()"),jTr=o("to load the model weights."),NTr=l(),Ebe=a("p"),DTr=o("Examples:"),qTr=l(),m(q0.$$.fragment),GTr=l(),Bo=a("div"),m(G0.$$.fragment),OTr=l(),ybe=a("p"),XTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zTr=l(),Es=a("p"),VTr=o("The model class to instantiate is selected based on the "),wbe=a("code"),WTr=o("model_type"),QTr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),HTr=o("pretrained_model_name_or_path"),UTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(":"),KTr=l(),ve=a("ul"),KM=a("li"),Bbe=a("strong"),ZTr=o("albert"),e1r=o(" \u2014 "),HO=a("a"),o1r=o("FlaxAlbertForMaskedLM"),r1r=o(" (ALBERT model)"),t1r=l(),ZM=a("li"),xbe=a("strong"),a1r=o("bart"),s1r=o(" \u2014 "),UO=a("a"),n1r=o("FlaxBartForConditionalGeneration"),l1r=o(" (BART model)"),i1r=l(),eE=a("li"),kbe=a("strong"),d1r=o("bert"),c1r=o(" \u2014 "),JO=a("a"),m1r=o("FlaxBertForMaskedLM"),f1r=o(" (BERT model)"),g1r=l(),oE=a("li"),Rbe=a("strong"),h1r=o("big_bird"),u1r=o(" \u2014 "),YO=a("a"),p1r=o("FlaxBigBirdForMaskedLM"),_1r=o(" (BigBird model)"),b1r=l(),rE=a("li"),Sbe=a("strong"),v1r=o("distilbert"),T1r=o(" \u2014 "),KO=a("a"),F1r=o("FlaxDistilBertForMaskedLM"),C1r=o(" (DistilBERT model)"),M1r=l(),tE=a("li"),Pbe=a("strong"),E1r=o("electra"),y1r=o(" \u2014 "),ZO=a("a"),w1r=o("FlaxElectraForMaskedLM"),A1r=o(" (ELECTRA model)"),L1r=l(),aE=a("li"),$be=a("strong"),B1r=o("mbart"),x1r=o(" \u2014 "),eX=a("a"),k1r=o("FlaxMBartForConditionalGeneration"),R1r=o(" (mBART model)"),S1r=l(),sE=a("li"),Ibe=a("strong"),P1r=o("roberta"),$1r=o(" \u2014 "),oX=a("a"),I1r=o("FlaxRobertaForMaskedLM"),j1r=o(" (RoBERTa model)"),N1r=l(),nE=a("li"),jbe=a("strong"),D1r=o("roformer"),q1r=o(" \u2014 "),rX=a("a"),G1r=o("FlaxRoFormerForMaskedLM"),O1r=o(" (RoFormer model)"),X1r=l(),Nbe=a("p"),z1r=o("Examples:"),V1r=l(),m(O0.$$.fragment),H9e=l(),Kc=a("h2"),lE=a("a"),Dbe=a("span"),m(X0.$$.fragment),W1r=l(),qbe=a("span"),Q1r=o("FlaxAutoModelForSeq2SeqLM"),U9e=l(),xr=a("div"),m(z0.$$.fragment),H1r=l(),Zc=a("p"),U1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gbe=a("code"),J1r=o("from_pretrained()"),Y1r=o("class method or the "),Obe=a("code"),K1r=o("from_config()"),Z1r=o(`class
method.`),eFr=l(),V0=a("p"),oFr=o("This class cannot be instantiated directly using "),Xbe=a("code"),rFr=o("__init__()"),tFr=o(" (throws an error)."),aFr=l(),Mt=a("div"),m(W0.$$.fragment),sFr=l(),zbe=a("p"),nFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lFr=l(),em=a("p"),iFr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),dFr=o("not"),cFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=a("code"),mFr=o("from_pretrained()"),fFr=o("to load the model weights."),gFr=l(),Qbe=a("p"),hFr=o("Examples:"),uFr=l(),m(Q0.$$.fragment),pFr=l(),xo=a("div"),m(H0.$$.fragment),_Fr=l(),Hbe=a("p"),bFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vFr=l(),ys=a("p"),TFr=o("The model class to instantiate is selected based on the "),Ube=a("code"),FFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),MFr=o("pretrained_model_name_or_path"),EFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),yFr=o("pretrained_model_name_or_path"),wFr=o(":"),AFr=l(),Te=a("ul"),iE=a("li"),Kbe=a("strong"),LFr=o("bart"),BFr=o(" \u2014 "),tX=a("a"),xFr=o("FlaxBartForConditionalGeneration"),kFr=o(" (BART model)"),RFr=l(),dE=a("li"),Zbe=a("strong"),SFr=o("blenderbot"),PFr=o(" \u2014 "),aX=a("a"),$Fr=o("FlaxBlenderbotForConditionalGeneration"),IFr=o(" (Blenderbot model)"),jFr=l(),cE=a("li"),e2e=a("strong"),NFr=o("blenderbot-small"),DFr=o(" \u2014 "),sX=a("a"),qFr=o("FlaxBlenderbotSmallForConditionalGeneration"),GFr=o(" (BlenderbotSmall model)"),OFr=l(),mE=a("li"),o2e=a("strong"),XFr=o("encoder-decoder"),zFr=o(" \u2014 "),nX=a("a"),VFr=o("FlaxEncoderDecoderModel"),WFr=o(" (Encoder decoder model)"),QFr=l(),fE=a("li"),r2e=a("strong"),HFr=o("marian"),UFr=o(" \u2014 "),lX=a("a"),JFr=o("FlaxMarianMTModel"),YFr=o(" (Marian model)"),KFr=l(),gE=a("li"),t2e=a("strong"),ZFr=o("mbart"),eCr=o(" \u2014 "),iX=a("a"),oCr=o("FlaxMBartForConditionalGeneration"),rCr=o(" (mBART model)"),tCr=l(),hE=a("li"),a2e=a("strong"),aCr=o("mt5"),sCr=o(" \u2014 "),dX=a("a"),nCr=o("FlaxMT5ForConditionalGeneration"),lCr=o(" (mT5 model)"),iCr=l(),uE=a("li"),s2e=a("strong"),dCr=o("pegasus"),cCr=o(" \u2014 "),cX=a("a"),mCr=o("FlaxPegasusForConditionalGeneration"),fCr=o(" (Pegasus model)"),gCr=l(),pE=a("li"),n2e=a("strong"),hCr=o("t5"),uCr=o(" \u2014 "),mX=a("a"),pCr=o("FlaxT5ForConditionalGeneration"),_Cr=o(" (T5 model)"),bCr=l(),l2e=a("p"),vCr=o("Examples:"),TCr=l(),m(U0.$$.fragment),J9e=l(),om=a("h2"),_E=a("a"),i2e=a("span"),m(J0.$$.fragment),FCr=l(),d2e=a("span"),CCr=o("FlaxAutoModelForSequenceClassification"),Y9e=l(),kr=a("div"),m(Y0.$$.fragment),MCr=l(),rm=a("p"),ECr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),c2e=a("code"),yCr=o("from_pretrained()"),wCr=o("class method or the "),m2e=a("code"),ACr=o("from_config()"),LCr=o(`class
method.`),BCr=l(),K0=a("p"),xCr=o("This class cannot be instantiated directly using "),f2e=a("code"),kCr=o("__init__()"),RCr=o(" (throws an error)."),SCr=l(),Et=a("div"),m(Z0.$$.fragment),PCr=l(),g2e=a("p"),$Cr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ICr=l(),tm=a("p"),jCr=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),NCr=o("not"),DCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=a("code"),qCr=o("from_pretrained()"),GCr=o("to load the model weights."),OCr=l(),p2e=a("p"),XCr=o("Examples:"),zCr=l(),m(eL.$$.fragment),VCr=l(),ko=a("div"),m(oL.$$.fragment),WCr=l(),_2e=a("p"),QCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HCr=l(),ws=a("p"),UCr=o("The model class to instantiate is selected based on the "),b2e=a("code"),JCr=o("model_type"),YCr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(":"),r4r=l(),Fe=a("ul"),bE=a("li"),F2e=a("strong"),t4r=o("albert"),a4r=o(" \u2014 "),fX=a("a"),s4r=o("FlaxAlbertForSequenceClassification"),n4r=o(" (ALBERT model)"),l4r=l(),vE=a("li"),C2e=a("strong"),i4r=o("bart"),d4r=o(" \u2014 "),gX=a("a"),c4r=o("FlaxBartForSequenceClassification"),m4r=o(" (BART model)"),f4r=l(),TE=a("li"),M2e=a("strong"),g4r=o("bert"),h4r=o(" \u2014 "),hX=a("a"),u4r=o("FlaxBertForSequenceClassification"),p4r=o(" (BERT model)"),_4r=l(),FE=a("li"),E2e=a("strong"),b4r=o("big_bird"),v4r=o(" \u2014 "),uX=a("a"),T4r=o("FlaxBigBirdForSequenceClassification"),F4r=o(" (BigBird model)"),C4r=l(),CE=a("li"),y2e=a("strong"),M4r=o("distilbert"),E4r=o(" \u2014 "),pX=a("a"),y4r=o("FlaxDistilBertForSequenceClassification"),w4r=o(" (DistilBERT model)"),A4r=l(),ME=a("li"),w2e=a("strong"),L4r=o("electra"),B4r=o(" \u2014 "),_X=a("a"),x4r=o("FlaxElectraForSequenceClassification"),k4r=o(" (ELECTRA model)"),R4r=l(),EE=a("li"),A2e=a("strong"),S4r=o("mbart"),P4r=o(" \u2014 "),bX=a("a"),$4r=o("FlaxMBartForSequenceClassification"),I4r=o(" (mBART model)"),j4r=l(),yE=a("li"),L2e=a("strong"),N4r=o("roberta"),D4r=o(" \u2014 "),vX=a("a"),q4r=o("FlaxRobertaForSequenceClassification"),G4r=o(" (RoBERTa model)"),O4r=l(),wE=a("li"),B2e=a("strong"),X4r=o("roformer"),z4r=o(" \u2014 "),TX=a("a"),V4r=o("FlaxRoFormerForSequenceClassification"),W4r=o(" (RoFormer model)"),Q4r=l(),x2e=a("p"),H4r=o("Examples:"),U4r=l(),m(rL.$$.fragment),K9e=l(),am=a("h2"),AE=a("a"),k2e=a("span"),m(tL.$$.fragment),J4r=l(),R2e=a("span"),Y4r=o("FlaxAutoModelForQuestionAnswering"),Z9e=l(),Rr=a("div"),m(aL.$$.fragment),K4r=l(),sm=a("p"),Z4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),S2e=a("code"),eMr=o("from_pretrained()"),oMr=o("class method or the "),P2e=a("code"),rMr=o("from_config()"),tMr=o(`class
method.`),aMr=l(),sL=a("p"),sMr=o("This class cannot be instantiated directly using "),$2e=a("code"),nMr=o("__init__()"),lMr=o(" (throws an error)."),iMr=l(),yt=a("div"),m(nL.$$.fragment),dMr=l(),I2e=a("p"),cMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mMr=l(),nm=a("p"),fMr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),gMr=o("not"),hMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=a("code"),uMr=o("from_pretrained()"),pMr=o("to load the model weights."),_Mr=l(),D2e=a("p"),bMr=o("Examples:"),vMr=l(),m(lL.$$.fragment),TMr=l(),Ro=a("div"),m(iL.$$.fragment),FMr=l(),q2e=a("p"),CMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MMr=l(),As=a("p"),EMr=o("The model class to instantiate is selected based on the "),G2e=a("code"),yMr=o("model_type"),wMr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),AMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),BMr=o("pretrained_model_name_or_path"),xMr=o(":"),kMr=l(),Ce=a("ul"),LE=a("li"),z2e=a("strong"),RMr=o("albert"),SMr=o(" \u2014 "),FX=a("a"),PMr=o("FlaxAlbertForQuestionAnswering"),$Mr=o(" (ALBERT model)"),IMr=l(),BE=a("li"),V2e=a("strong"),jMr=o("bart"),NMr=o(" \u2014 "),CX=a("a"),DMr=o("FlaxBartForQuestionAnswering"),qMr=o(" (BART model)"),GMr=l(),xE=a("li"),W2e=a("strong"),OMr=o("bert"),XMr=o(" \u2014 "),MX=a("a"),zMr=o("FlaxBertForQuestionAnswering"),VMr=o(" (BERT model)"),WMr=l(),kE=a("li"),Q2e=a("strong"),QMr=o("big_bird"),HMr=o(" \u2014 "),EX=a("a"),UMr=o("FlaxBigBirdForQuestionAnswering"),JMr=o(" (BigBird model)"),YMr=l(),RE=a("li"),H2e=a("strong"),KMr=o("distilbert"),ZMr=o(" \u2014 "),yX=a("a"),eEr=o("FlaxDistilBertForQuestionAnswering"),oEr=o(" (DistilBERT model)"),rEr=l(),SE=a("li"),U2e=a("strong"),tEr=o("electra"),aEr=o(" \u2014 "),wX=a("a"),sEr=o("FlaxElectraForQuestionAnswering"),nEr=o(" (ELECTRA model)"),lEr=l(),PE=a("li"),J2e=a("strong"),iEr=o("mbart"),dEr=o(" \u2014 "),AX=a("a"),cEr=o("FlaxMBartForQuestionAnswering"),mEr=o(" (mBART model)"),fEr=l(),$E=a("li"),Y2e=a("strong"),gEr=o("roberta"),hEr=o(" \u2014 "),LX=a("a"),uEr=o("FlaxRobertaForQuestionAnswering"),pEr=o(" (RoBERTa model)"),_Er=l(),IE=a("li"),K2e=a("strong"),bEr=o("roformer"),vEr=o(" \u2014 "),BX=a("a"),TEr=o("FlaxRoFormerForQuestionAnswering"),FEr=o(" (RoFormer model)"),CEr=l(),Z2e=a("p"),MEr=o("Examples:"),EEr=l(),m(dL.$$.fragment),eBe=l(),lm=a("h2"),jE=a("a"),eve=a("span"),m(cL.$$.fragment),yEr=l(),ove=a("span"),wEr=o("FlaxAutoModelForTokenClassification"),oBe=l(),Sr=a("div"),m(mL.$$.fragment),AEr=l(),im=a("p"),LEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rve=a("code"),BEr=o("from_pretrained()"),xEr=o("class method or the "),tve=a("code"),kEr=o("from_config()"),REr=o(`class
method.`),SEr=l(),fL=a("p"),PEr=o("This class cannot be instantiated directly using "),ave=a("code"),$Er=o("__init__()"),IEr=o(" (throws an error)."),jEr=l(),wt=a("div"),m(gL.$$.fragment),NEr=l(),sve=a("p"),DEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qEr=l(),dm=a("p"),GEr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),OEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=a("code"),zEr=o("from_pretrained()"),VEr=o("to load the model weights."),WEr=l(),ive=a("p"),QEr=o("Examples:"),HEr=l(),m(hL.$$.fragment),UEr=l(),So=a("div"),m(uL.$$.fragment),JEr=l(),dve=a("p"),YEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KEr=l(),Ls=a("p"),ZEr=o("The model class to instantiate is selected based on the "),cve=a("code"),e3r=o("model_type"),o3r=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),r3r=o("pretrained_model_name_or_path"),t3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),a3r=o("pretrained_model_name_or_path"),s3r=o(":"),n3r=l(),no=a("ul"),NE=a("li"),gve=a("strong"),l3r=o("albert"),i3r=o(" \u2014 "),xX=a("a"),d3r=o("FlaxAlbertForTokenClassification"),c3r=o(" (ALBERT model)"),m3r=l(),DE=a("li"),hve=a("strong"),f3r=o("bert"),g3r=o(" \u2014 "),kX=a("a"),h3r=o("FlaxBertForTokenClassification"),u3r=o(" (BERT model)"),p3r=l(),qE=a("li"),uve=a("strong"),_3r=o("big_bird"),b3r=o(" \u2014 "),RX=a("a"),v3r=o("FlaxBigBirdForTokenClassification"),T3r=o(" (BigBird model)"),F3r=l(),GE=a("li"),pve=a("strong"),C3r=o("distilbert"),M3r=o(" \u2014 "),SX=a("a"),E3r=o("FlaxDistilBertForTokenClassification"),y3r=o(" (DistilBERT model)"),w3r=l(),OE=a("li"),_ve=a("strong"),A3r=o("electra"),L3r=o(" \u2014 "),PX=a("a"),B3r=o("FlaxElectraForTokenClassification"),x3r=o(" (ELECTRA model)"),k3r=l(),XE=a("li"),bve=a("strong"),R3r=o("roberta"),S3r=o(" \u2014 "),$X=a("a"),P3r=o("FlaxRobertaForTokenClassification"),$3r=o(" (RoBERTa model)"),I3r=l(),zE=a("li"),vve=a("strong"),j3r=o("roformer"),N3r=o(" \u2014 "),IX=a("a"),D3r=o("FlaxRoFormerForTokenClassification"),q3r=o(" (RoFormer model)"),G3r=l(),Tve=a("p"),O3r=o("Examples:"),X3r=l(),m(pL.$$.fragment),rBe=l(),cm=a("h2"),VE=a("a"),Fve=a("span"),m(_L.$$.fragment),z3r=l(),Cve=a("span"),V3r=o("FlaxAutoModelForMultipleChoice"),tBe=l(),Pr=a("div"),m(bL.$$.fragment),W3r=l(),mm=a("p"),Q3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mve=a("code"),H3r=o("from_pretrained()"),U3r=o("class method or the "),Eve=a("code"),J3r=o("from_config()"),Y3r=o(`class
method.`),K3r=l(),vL=a("p"),Z3r=o("This class cannot be instantiated directly using "),yve=a("code"),e5r=o("__init__()"),o5r=o(" (throws an error)."),r5r=l(),At=a("div"),m(TL.$$.fragment),t5r=l(),wve=a("p"),a5r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),s5r=l(),fm=a("p"),n5r=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),l5r=o("not"),i5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lve=a("code"),d5r=o("from_pretrained()"),c5r=o("to load the model weights."),m5r=l(),Bve=a("p"),f5r=o("Examples:"),g5r=l(),m(FL.$$.fragment),h5r=l(),Po=a("div"),m(CL.$$.fragment),u5r=l(),xve=a("p"),p5r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_5r=l(),Bs=a("p"),b5r=o("The model class to instantiate is selected based on the "),kve=a("code"),v5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),F5r=o("pretrained_model_name_or_path"),C5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(":"),y5r=l(),lo=a("ul"),WE=a("li"),Pve=a("strong"),w5r=o("albert"),A5r=o(" \u2014 "),jX=a("a"),L5r=o("FlaxAlbertForMultipleChoice"),B5r=o(" (ALBERT model)"),x5r=l(),QE=a("li"),$ve=a("strong"),k5r=o("bert"),R5r=o(" \u2014 "),NX=a("a"),S5r=o("FlaxBertForMultipleChoice"),P5r=o(" (BERT model)"),$5r=l(),HE=a("li"),Ive=a("strong"),I5r=o("big_bird"),j5r=o(" \u2014 "),DX=a("a"),N5r=o("FlaxBigBirdForMultipleChoice"),D5r=o(" (BigBird model)"),q5r=l(),UE=a("li"),jve=a("strong"),G5r=o("distilbert"),O5r=o(" \u2014 "),qX=a("a"),X5r=o("FlaxDistilBertForMultipleChoice"),z5r=o(" (DistilBERT model)"),V5r=l(),JE=a("li"),Nve=a("strong"),W5r=o("electra"),Q5r=o(" \u2014 "),GX=a("a"),H5r=o("FlaxElectraForMultipleChoice"),U5r=o(" (ELECTRA model)"),J5r=l(),YE=a("li"),Dve=a("strong"),Y5r=o("roberta"),K5r=o(" \u2014 "),OX=a("a"),Z5r=o("FlaxRobertaForMultipleChoice"),eyr=o(" (RoBERTa model)"),oyr=l(),KE=a("li"),qve=a("strong"),ryr=o("roformer"),tyr=o(" \u2014 "),XX=a("a"),ayr=o("FlaxRoFormerForMultipleChoice"),syr=o(" (RoFormer model)"),nyr=l(),Gve=a("p"),lyr=o("Examples:"),iyr=l(),m(ML.$$.fragment),aBe=l(),gm=a("h2"),ZE=a("a"),Ove=a("span"),m(EL.$$.fragment),dyr=l(),Xve=a("span"),cyr=o("FlaxAutoModelForNextSentencePrediction"),sBe=l(),$r=a("div"),m(yL.$$.fragment),myr=l(),hm=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zve=a("code"),gyr=o("from_pretrained()"),hyr=o("class method or the "),Vve=a("code"),uyr=o("from_config()"),pyr=o(`class
method.`),_yr=l(),wL=a("p"),byr=o("This class cannot be instantiated directly using "),Wve=a("code"),vyr=o("__init__()"),Tyr=o(" (throws an error)."),Fyr=l(),Lt=a("div"),m(AL.$$.fragment),Cyr=l(),Qve=a("p"),Myr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Eyr=l(),um=a("p"),yyr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),wyr=o("not"),Ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=a("code"),Lyr=o("from_pretrained()"),Byr=o("to load the model weights."),xyr=l(),Jve=a("p"),kyr=o("Examples:"),Ryr=l(),m(LL.$$.fragment),Syr=l(),$o=a("div"),m(BL.$$.fragment),Pyr=l(),Yve=a("p"),$yr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Iyr=l(),xs=a("p"),jyr=o("The model class to instantiate is selected based on the "),Kve=a("code"),Nyr=o("model_type"),Dyr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),qyr=o("pretrained_model_name_or_path"),Gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),Oyr=o("pretrained_model_name_or_path"),Xyr=o(":"),zyr=l(),oTe=a("ul"),e3=a("li"),rTe=a("strong"),Vyr=o("bert"),Wyr=o(" \u2014 "),zX=a("a"),Qyr=o("FlaxBertForNextSentencePrediction"),Hyr=o(" (BERT model)"),Uyr=l(),tTe=a("p"),Jyr=o("Examples:"),Yyr=l(),m(xL.$$.fragment),nBe=l(),pm=a("h2"),o3=a("a"),aTe=a("span"),m(kL.$$.fragment),Kyr=l(),sTe=a("span"),Zyr=o("FlaxAutoModelForImageClassification"),lBe=l(),Ir=a("div"),m(RL.$$.fragment),ewr=l(),_m=a("p"),owr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nTe=a("code"),rwr=o("from_pretrained()"),twr=o("class method or the "),lTe=a("code"),awr=o("from_config()"),swr=o(`class
method.`),nwr=l(),SL=a("p"),lwr=o("This class cannot be instantiated directly using "),iTe=a("code"),iwr=o("__init__()"),dwr=o(" (throws an error)."),cwr=l(),Bt=a("div"),m(PL.$$.fragment),mwr=l(),dTe=a("p"),fwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gwr=l(),bm=a("p"),hwr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),uwr=o("not"),pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mTe=a("code"),_wr=o("from_pretrained()"),bwr=o("to load the model weights."),vwr=l(),fTe=a("p"),Twr=o("Examples:"),Fwr=l(),m($L.$$.fragment),Cwr=l(),Io=a("div"),m(IL.$$.fragment),Mwr=l(),gTe=a("p"),Ewr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ywr=l(),ks=a("p"),wwr=o("The model class to instantiate is selected based on the "),hTe=a("code"),Awr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),Bwr=o("pretrained_model_name_or_path"),xwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),kwr=o("pretrained_model_name_or_path"),Rwr=o(":"),Swr=l(),jL=a("ul"),r3=a("li"),_Te=a("strong"),Pwr=o("beit"),$wr=o(" \u2014 "),VX=a("a"),Iwr=o("FlaxBeitForImageClassification"),jwr=o(" (BEiT model)"),Nwr=l(),t3=a("li"),bTe=a("strong"),Dwr=o("vit"),qwr=o(" \u2014 "),WX=a("a"),Gwr=o("FlaxViTForImageClassification"),Owr=o(" (ViT model)"),Xwr=l(),vTe=a("p"),zwr=o("Examples:"),Vwr=l(),m(NL.$$.fragment),iBe=l(),vm=a("h2"),a3=a("a"),TTe=a("span"),m(DL.$$.fragment),Wwr=l(),FTe=a("span"),Qwr=o("FlaxAutoModelForVision2Seq"),dBe=l(),jr=a("div"),m(qL.$$.fragment),Hwr=l(),Tm=a("p"),Uwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CTe=a("code"),Jwr=o("from_pretrained()"),Ywr=o("class method or the "),MTe=a("code"),Kwr=o("from_config()"),Zwr=o(`class
method.`),eAr=l(),GL=a("p"),oAr=o("This class cannot be instantiated directly using "),ETe=a("code"),rAr=o("__init__()"),tAr=o(" (throws an error)."),aAr=l(),xt=a("div"),m(OL.$$.fragment),sAr=l(),yTe=a("p"),nAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lAr=l(),Fm=a("p"),iAr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),dAr=o("not"),cAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ATe=a("code"),mAr=o("from_pretrained()"),fAr=o("to load the model weights."),gAr=l(),LTe=a("p"),hAr=o("Examples:"),uAr=l(),m(XL.$$.fragment),pAr=l(),jo=a("div"),m(zL.$$.fragment),_Ar=l(),BTe=a("p"),bAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vAr=l(),Rs=a("p"),TAr=o("The model class to instantiate is selected based on the "),xTe=a("code"),FAr=o("model_type"),CAr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),yAr=o("pretrained_model_name_or_path"),wAr=o(":"),AAr=l(),STe=a("ul"),s3=a("li"),PTe=a("strong"),LAr=o("vision-encoder-decoder"),BAr=o(" \u2014 "),QX=a("a"),xAr=o("FlaxVisionEncoderDecoderModel"),kAr=o(" (Vision Encoder decoder model)"),RAr=l(),$Te=a("p"),SAr=o("Examples:"),PAr=l(),m(VL.$$.fragment),this.h()},l(d){const _=Opt('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(t),Ae=i(d),ie=s(d,"H1",{class:!0});var WL=n(ie);fe=s(WL,"A",{id:!0,class:!0,href:!0});var ITe=n(fe);to=s(ITe,"SPAN",{});var jTe=n(to);f(ce.$$.fragment,jTe),jTe.forEach(t),ITe.forEach(t),_e=i(WL),Do=s(WL,"SPAN",{});var IAr=n(Do);wi=r(IAr,"Auto Classes"),IAr.forEach(t),WL.forEach(t),Mm=i(d),na=s(d,"P",{});var mBe=n(na);Ai=r(mBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=s(mBe,"CODE",{});var jAr=n(Li);t5=r(jAr,"from_pretrained()"),jAr.forEach(t),Em=r(mBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),mBe.forEach(t),ye=i(d),io=s(d,"P",{});var n3=n(io);Bi=r(n3,"Instantiating one of "),Ss=s(n3,"A",{href:!0});var NAr=n(Ss);a5=r(NAr,"AutoConfig"),NAr.forEach(t),Ps=r(n3,", "),$s=s(n3,"A",{href:!0});var DAr=n($s);s5=r(DAr,"AutoModel"),DAr.forEach(t),xi=r(n3,`, and
`),Is=s(n3,"A",{href:!0});var qAr=n(Is);n5=r(qAr,"AutoTokenizer"),qAr.forEach(t),ki=r(n3," will directly create a class of the relevant architecture. For instance"),n3.forEach(t),ym=i(d),f($a.$$.fragment,d),co=i(d),ge=s(d,"P",{});var fBe=n(ge);O7=r(fBe,"will create a model that is an instance of "),Ri=s(fBe,"A",{href:!0});var GAr=n(Ri);X7=r(GAr,"BertModel"),GAr.forEach(t),z7=r(fBe,"."),fBe.forEach(t),qo=i(d),Ia=s(d,"P",{});var gBe=n(Ia);V7=r(gBe,"There is one class of "),wm=s(gBe,"CODE",{});var OAr=n(wm);W7=r(OAr,"AutoModel"),OAr.forEach(t),Fke=r(gBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gBe.forEach(t),m8e=i(d),Si=s(d,"H2",{class:!0});var hBe=n(Si);Am=s(hBe,"A",{id:!0,class:!0,href:!0});var XAr=n(Am);qV=s(XAr,"SPAN",{});var zAr=n(qV);f(l5.$$.fragment,zAr),zAr.forEach(t),XAr.forEach(t),Cke=i(hBe),GV=s(hBe,"SPAN",{});var VAr=n(GV);Mke=r(VAr,"Extending the Auto Classes"),VAr.forEach(t),hBe.forEach(t),f8e=i(d),js=s(d,"P",{});var HX=n(js);Eke=r(HX,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OV=s(HX,"CODE",{});var WAr=n(OV);yke=r(WAr,"NewModel"),WAr.forEach(t),wke=r(HX,", make sure you have a "),XV=s(HX,"CODE",{});var QAr=n(XV);Ake=r(QAr,"NewModelConfig"),QAr.forEach(t),Lke=r(HX,` then you can add those to the auto
classes like this:`),HX.forEach(t),g8e=i(d),f(i5.$$.fragment,d),h8e=i(d),Q7=s(d,"P",{});var HAr=n(Q7);Bke=r(HAr,"You will then be able to use the auto classes like you would usually do!"),HAr.forEach(t),u8e=i(d),f(Lm.$$.fragment,d),p8e=i(d),Pi=s(d,"H2",{class:!0});var uBe=n(Pi);Bm=s(uBe,"A",{id:!0,class:!0,href:!0});var UAr=n(Bm);zV=s(UAr,"SPAN",{});var JAr=n(zV);f(d5.$$.fragment,JAr),JAr.forEach(t),UAr.forEach(t),xke=i(uBe),VV=s(uBe,"SPAN",{});var YAr=n(VV);kke=r(YAr,"AutoConfig"),YAr.forEach(t),uBe.forEach(t),_8e=i(d),Go=s(d,"DIV",{class:!0});var Pn=n(Go);f(c5.$$.fragment,Pn),Rke=i(Pn),m5=s(Pn,"P",{});var pBe=n(m5);Ske=r(pBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H7=s(pBe,"A",{href:!0});var KAr=n(H7);Pke=r(KAr,"from_pretrained()"),KAr.forEach(t),$ke=r(pBe," class method."),pBe.forEach(t),Ike=i(Pn),f5=s(Pn,"P",{});var _Be=n(f5);jke=r(_Be,"This class cannot be instantiated directly using "),WV=s(_Be,"CODE",{});var ZAr=n(WV);Nke=r(ZAr,"__init__()"),ZAr.forEach(t),Dke=r(_Be," (throws an error)."),_Be.forEach(t),qke=i(Pn),mo=s(Pn,"DIV",{class:!0});var ia=n(mo);f(g5.$$.fragment,ia),Gke=i(ia),QV=s(ia,"P",{});var e6r=n(QV);Oke=r(e6r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e6r.forEach(t),Xke=i(ia),$i=s(ia,"P",{});var UX=n($i);zke=r(UX,"The configuration class to instantiate is selected based on the "),HV=s(UX,"CODE",{});var o6r=n(HV);Vke=r(o6r,"model_type"),o6r.forEach(t),Wke=r(UX,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UV=s(UX,"CODE",{});var r6r=n(UV);Qke=r(r6r,"pretrained_model_name_or_path"),r6r.forEach(t),Hke=r(UX,":"),UX.forEach(t),Uke=i(ia),v=s(ia,"UL",{});var T=n(v);xm=s(T,"LI",{});var NTe=n(xm);JV=s(NTe,"STRONG",{});var t6r=n(JV);Jke=r(t6r,"albert"),t6r.forEach(t),Yke=r(NTe," \u2014 "),U7=s(NTe,"A",{href:!0});var a6r=n(U7);Kke=r(a6r,"AlbertConfig"),a6r.forEach(t),Zke=r(NTe," (ALBERT model)"),NTe.forEach(t),eRe=i(T),km=s(T,"LI",{});var DTe=n(km);YV=s(DTe,"STRONG",{});var s6r=n(YV);oRe=r(s6r,"bart"),s6r.forEach(t),rRe=r(DTe," \u2014 "),J7=s(DTe,"A",{href:!0});var n6r=n(J7);tRe=r(n6r,"BartConfig"),n6r.forEach(t),aRe=r(DTe," (BART model)"),DTe.forEach(t),sRe=i(T),Rm=s(T,"LI",{});var qTe=n(Rm);KV=s(qTe,"STRONG",{});var l6r=n(KV);nRe=r(l6r,"beit"),l6r.forEach(t),lRe=r(qTe," \u2014 "),Y7=s(qTe,"A",{href:!0});var i6r=n(Y7);iRe=r(i6r,"BeitConfig"),i6r.forEach(t),dRe=r(qTe," (BEiT model)"),qTe.forEach(t),cRe=i(T),Sm=s(T,"LI",{});var GTe=n(Sm);ZV=s(GTe,"STRONG",{});var d6r=n(ZV);mRe=r(d6r,"bert"),d6r.forEach(t),fRe=r(GTe," \u2014 "),K7=s(GTe,"A",{href:!0});var c6r=n(K7);gRe=r(c6r,"BertConfig"),c6r.forEach(t),hRe=r(GTe," (BERT model)"),GTe.forEach(t),uRe=i(T),Pm=s(T,"LI",{});var OTe=n(Pm);eW=s(OTe,"STRONG",{});var m6r=n(eW);pRe=r(m6r,"bert-generation"),m6r.forEach(t),_Re=r(OTe," \u2014 "),Z7=s(OTe,"A",{href:!0});var f6r=n(Z7);bRe=r(f6r,"BertGenerationConfig"),f6r.forEach(t),vRe=r(OTe," (Bert Generation model)"),OTe.forEach(t),TRe=i(T),$m=s(T,"LI",{});var XTe=n($m);oW=s(XTe,"STRONG",{});var g6r=n(oW);FRe=r(g6r,"big_bird"),g6r.forEach(t),CRe=r(XTe," \u2014 "),e8=s(XTe,"A",{href:!0});var h6r=n(e8);MRe=r(h6r,"BigBirdConfig"),h6r.forEach(t),ERe=r(XTe," (BigBird model)"),XTe.forEach(t),yRe=i(T),Im=s(T,"LI",{});var zTe=n(Im);rW=s(zTe,"STRONG",{});var u6r=n(rW);wRe=r(u6r,"bigbird_pegasus"),u6r.forEach(t),ARe=r(zTe," \u2014 "),o8=s(zTe,"A",{href:!0});var p6r=n(o8);LRe=r(p6r,"BigBirdPegasusConfig"),p6r.forEach(t),BRe=r(zTe," (BigBirdPegasus model)"),zTe.forEach(t),xRe=i(T),jm=s(T,"LI",{});var VTe=n(jm);tW=s(VTe,"STRONG",{});var _6r=n(tW);kRe=r(_6r,"blenderbot"),_6r.forEach(t),RRe=r(VTe," \u2014 "),r8=s(VTe,"A",{href:!0});var b6r=n(r8);SRe=r(b6r,"BlenderbotConfig"),b6r.forEach(t),PRe=r(VTe," (Blenderbot model)"),VTe.forEach(t),$Re=i(T),Nm=s(T,"LI",{});var WTe=n(Nm);aW=s(WTe,"STRONG",{});var v6r=n(aW);IRe=r(v6r,"blenderbot-small"),v6r.forEach(t),jRe=r(WTe," \u2014 "),t8=s(WTe,"A",{href:!0});var T6r=n(t8);NRe=r(T6r,"BlenderbotSmallConfig"),T6r.forEach(t),DRe=r(WTe," (BlenderbotSmall model)"),WTe.forEach(t),qRe=i(T),Dm=s(T,"LI",{});var QTe=n(Dm);sW=s(QTe,"STRONG",{});var F6r=n(sW);GRe=r(F6r,"camembert"),F6r.forEach(t),ORe=r(QTe," \u2014 "),a8=s(QTe,"A",{href:!0});var C6r=n(a8);XRe=r(C6r,"CamembertConfig"),C6r.forEach(t),zRe=r(QTe," (CamemBERT model)"),QTe.forEach(t),VRe=i(T),qm=s(T,"LI",{});var HTe=n(qm);nW=s(HTe,"STRONG",{});var M6r=n(nW);WRe=r(M6r,"canine"),M6r.forEach(t),QRe=r(HTe," \u2014 "),s8=s(HTe,"A",{href:!0});var E6r=n(s8);HRe=r(E6r,"CanineConfig"),E6r.forEach(t),URe=r(HTe," (Canine model)"),HTe.forEach(t),JRe=i(T),Gm=s(T,"LI",{});var UTe=n(Gm);lW=s(UTe,"STRONG",{});var y6r=n(lW);YRe=r(y6r,"clip"),y6r.forEach(t),KRe=r(UTe," \u2014 "),n8=s(UTe,"A",{href:!0});var w6r=n(n8);ZRe=r(w6r,"CLIPConfig"),w6r.forEach(t),eSe=r(UTe," (CLIP model)"),UTe.forEach(t),oSe=i(T),Om=s(T,"LI",{});var JTe=n(Om);iW=s(JTe,"STRONG",{});var A6r=n(iW);rSe=r(A6r,"convbert"),A6r.forEach(t),tSe=r(JTe," \u2014 "),l8=s(JTe,"A",{href:!0});var L6r=n(l8);aSe=r(L6r,"ConvBertConfig"),L6r.forEach(t),sSe=r(JTe," (ConvBERT model)"),JTe.forEach(t),nSe=i(T),Xm=s(T,"LI",{});var YTe=n(Xm);dW=s(YTe,"STRONG",{});var B6r=n(dW);lSe=r(B6r,"convnext"),B6r.forEach(t),iSe=r(YTe," \u2014 "),i8=s(YTe,"A",{href:!0});var x6r=n(i8);dSe=r(x6r,"ConvNextConfig"),x6r.forEach(t),cSe=r(YTe," (ConvNext model)"),YTe.forEach(t),mSe=i(T),zm=s(T,"LI",{});var KTe=n(zm);cW=s(KTe,"STRONG",{});var k6r=n(cW);fSe=r(k6r,"ctrl"),k6r.forEach(t),gSe=r(KTe," \u2014 "),d8=s(KTe,"A",{href:!0});var R6r=n(d8);hSe=r(R6r,"CTRLConfig"),R6r.forEach(t),uSe=r(KTe," (CTRL model)"),KTe.forEach(t),pSe=i(T),Vm=s(T,"LI",{});var ZTe=n(Vm);mW=s(ZTe,"STRONG",{});var S6r=n(mW);_Se=r(S6r,"deberta"),S6r.forEach(t),bSe=r(ZTe," \u2014 "),c8=s(ZTe,"A",{href:!0});var P6r=n(c8);vSe=r(P6r,"DebertaConfig"),P6r.forEach(t),TSe=r(ZTe," (DeBERTa model)"),ZTe.forEach(t),FSe=i(T),Wm=s(T,"LI",{});var e1e=n(Wm);fW=s(e1e,"STRONG",{});var $6r=n(fW);CSe=r($6r,"deberta-v2"),$6r.forEach(t),MSe=r(e1e," \u2014 "),m8=s(e1e,"A",{href:!0});var I6r=n(m8);ESe=r(I6r,"DebertaV2Config"),I6r.forEach(t),ySe=r(e1e," (DeBERTa-v2 model)"),e1e.forEach(t),wSe=i(T),Qm=s(T,"LI",{});var o1e=n(Qm);gW=s(o1e,"STRONG",{});var j6r=n(gW);ASe=r(j6r,"deit"),j6r.forEach(t),LSe=r(o1e," \u2014 "),f8=s(o1e,"A",{href:!0});var N6r=n(f8);BSe=r(N6r,"DeiTConfig"),N6r.forEach(t),xSe=r(o1e," (DeiT model)"),o1e.forEach(t),kSe=i(T),Hm=s(T,"LI",{});var r1e=n(Hm);hW=s(r1e,"STRONG",{});var D6r=n(hW);RSe=r(D6r,"detr"),D6r.forEach(t),SSe=r(r1e," \u2014 "),g8=s(r1e,"A",{href:!0});var q6r=n(g8);PSe=r(q6r,"DetrConfig"),q6r.forEach(t),$Se=r(r1e," (DETR model)"),r1e.forEach(t),ISe=i(T),Um=s(T,"LI",{});var t1e=n(Um);uW=s(t1e,"STRONG",{});var G6r=n(uW);jSe=r(G6r,"distilbert"),G6r.forEach(t),NSe=r(t1e," \u2014 "),h8=s(t1e,"A",{href:!0});var O6r=n(h8);DSe=r(O6r,"DistilBertConfig"),O6r.forEach(t),qSe=r(t1e," (DistilBERT model)"),t1e.forEach(t),GSe=i(T),Jm=s(T,"LI",{});var a1e=n(Jm);pW=s(a1e,"STRONG",{});var X6r=n(pW);OSe=r(X6r,"dpr"),X6r.forEach(t),XSe=r(a1e," \u2014 "),u8=s(a1e,"A",{href:!0});var z6r=n(u8);zSe=r(z6r,"DPRConfig"),z6r.forEach(t),VSe=r(a1e," (DPR model)"),a1e.forEach(t),WSe=i(T),Ym=s(T,"LI",{});var s1e=n(Ym);_W=s(s1e,"STRONG",{});var V6r=n(_W);QSe=r(V6r,"electra"),V6r.forEach(t),HSe=r(s1e," \u2014 "),p8=s(s1e,"A",{href:!0});var W6r=n(p8);USe=r(W6r,"ElectraConfig"),W6r.forEach(t),JSe=r(s1e," (ELECTRA model)"),s1e.forEach(t),YSe=i(T),Km=s(T,"LI",{});var n1e=n(Km);bW=s(n1e,"STRONG",{});var Q6r=n(bW);KSe=r(Q6r,"encoder-decoder"),Q6r.forEach(t),ZSe=r(n1e," \u2014 "),_8=s(n1e,"A",{href:!0});var H6r=n(_8);ePe=r(H6r,"EncoderDecoderConfig"),H6r.forEach(t),oPe=r(n1e," (Encoder decoder model)"),n1e.forEach(t),rPe=i(T),Zm=s(T,"LI",{});var l1e=n(Zm);vW=s(l1e,"STRONG",{});var U6r=n(vW);tPe=r(U6r,"flaubert"),U6r.forEach(t),aPe=r(l1e," \u2014 "),b8=s(l1e,"A",{href:!0});var J6r=n(b8);sPe=r(J6r,"FlaubertConfig"),J6r.forEach(t),nPe=r(l1e," (FlauBERT model)"),l1e.forEach(t),lPe=i(T),ef=s(T,"LI",{});var i1e=n(ef);TW=s(i1e,"STRONG",{});var Y6r=n(TW);iPe=r(Y6r,"fnet"),Y6r.forEach(t),dPe=r(i1e," \u2014 "),v8=s(i1e,"A",{href:!0});var K6r=n(v8);cPe=r(K6r,"FNetConfig"),K6r.forEach(t),mPe=r(i1e," (FNet model)"),i1e.forEach(t),fPe=i(T),of=s(T,"LI",{});var d1e=n(of);FW=s(d1e,"STRONG",{});var Z6r=n(FW);gPe=r(Z6r,"fsmt"),Z6r.forEach(t),hPe=r(d1e," \u2014 "),T8=s(d1e,"A",{href:!0});var e0r=n(T8);uPe=r(e0r,"FSMTConfig"),e0r.forEach(t),pPe=r(d1e," (FairSeq Machine-Translation model)"),d1e.forEach(t),_Pe=i(T),rf=s(T,"LI",{});var c1e=n(rf);CW=s(c1e,"STRONG",{});var o0r=n(CW);bPe=r(o0r,"funnel"),o0r.forEach(t),vPe=r(c1e," \u2014 "),F8=s(c1e,"A",{href:!0});var r0r=n(F8);TPe=r(r0r,"FunnelConfig"),r0r.forEach(t),FPe=r(c1e," (Funnel Transformer model)"),c1e.forEach(t),CPe=i(T),tf=s(T,"LI",{});var m1e=n(tf);MW=s(m1e,"STRONG",{});var t0r=n(MW);MPe=r(t0r,"gpt2"),t0r.forEach(t),EPe=r(m1e," \u2014 "),C8=s(m1e,"A",{href:!0});var a0r=n(C8);yPe=r(a0r,"GPT2Config"),a0r.forEach(t),wPe=r(m1e," (OpenAI GPT-2 model)"),m1e.forEach(t),APe=i(T),af=s(T,"LI",{});var f1e=n(af);EW=s(f1e,"STRONG",{});var s0r=n(EW);LPe=r(s0r,"gpt_neo"),s0r.forEach(t),BPe=r(f1e," \u2014 "),M8=s(f1e,"A",{href:!0});var n0r=n(M8);xPe=r(n0r,"GPTNeoConfig"),n0r.forEach(t),kPe=r(f1e," (GPT Neo model)"),f1e.forEach(t),RPe=i(T),sf=s(T,"LI",{});var g1e=n(sf);yW=s(g1e,"STRONG",{});var l0r=n(yW);SPe=r(l0r,"gptj"),l0r.forEach(t),PPe=r(g1e," \u2014 "),E8=s(g1e,"A",{href:!0});var i0r=n(E8);$Pe=r(i0r,"GPTJConfig"),i0r.forEach(t),IPe=r(g1e," (GPT-J model)"),g1e.forEach(t),jPe=i(T),nf=s(T,"LI",{});var h1e=n(nf);wW=s(h1e,"STRONG",{});var d0r=n(wW);NPe=r(d0r,"hubert"),d0r.forEach(t),DPe=r(h1e," \u2014 "),y8=s(h1e,"A",{href:!0});var c0r=n(y8);qPe=r(c0r,"HubertConfig"),c0r.forEach(t),GPe=r(h1e," (Hubert model)"),h1e.forEach(t),OPe=i(T),lf=s(T,"LI",{});var u1e=n(lf);AW=s(u1e,"STRONG",{});var m0r=n(AW);XPe=r(m0r,"ibert"),m0r.forEach(t),zPe=r(u1e," \u2014 "),w8=s(u1e,"A",{href:!0});var f0r=n(w8);VPe=r(f0r,"IBertConfig"),f0r.forEach(t),WPe=r(u1e," (I-BERT model)"),u1e.forEach(t),QPe=i(T),df=s(T,"LI",{});var p1e=n(df);LW=s(p1e,"STRONG",{});var g0r=n(LW);HPe=r(g0r,"imagegpt"),g0r.forEach(t),UPe=r(p1e," \u2014 "),A8=s(p1e,"A",{href:!0});var h0r=n(A8);JPe=r(h0r,"ImageGPTConfig"),h0r.forEach(t),YPe=r(p1e," (ImageGPT model)"),p1e.forEach(t),KPe=i(T),cf=s(T,"LI",{});var _1e=n(cf);BW=s(_1e,"STRONG",{});var u0r=n(BW);ZPe=r(u0r,"layoutlm"),u0r.forEach(t),e$e=r(_1e," \u2014 "),L8=s(_1e,"A",{href:!0});var p0r=n(L8);o$e=r(p0r,"LayoutLMConfig"),p0r.forEach(t),r$e=r(_1e," (LayoutLM model)"),_1e.forEach(t),t$e=i(T),mf=s(T,"LI",{});var b1e=n(mf);xW=s(b1e,"STRONG",{});var _0r=n(xW);a$e=r(_0r,"layoutlmv2"),_0r.forEach(t),s$e=r(b1e," \u2014 "),B8=s(b1e,"A",{href:!0});var b0r=n(B8);n$e=r(b0r,"LayoutLMv2Config"),b0r.forEach(t),l$e=r(b1e," (LayoutLMv2 model)"),b1e.forEach(t),i$e=i(T),ff=s(T,"LI",{});var v1e=n(ff);kW=s(v1e,"STRONG",{});var v0r=n(kW);d$e=r(v0r,"led"),v0r.forEach(t),c$e=r(v1e," \u2014 "),x8=s(v1e,"A",{href:!0});var T0r=n(x8);m$e=r(T0r,"LEDConfig"),T0r.forEach(t),f$e=r(v1e," (LED model)"),v1e.forEach(t),g$e=i(T),gf=s(T,"LI",{});var T1e=n(gf);RW=s(T1e,"STRONG",{});var F0r=n(RW);h$e=r(F0r,"longformer"),F0r.forEach(t),u$e=r(T1e," \u2014 "),k8=s(T1e,"A",{href:!0});var C0r=n(k8);p$e=r(C0r,"LongformerConfig"),C0r.forEach(t),_$e=r(T1e," (Longformer model)"),T1e.forEach(t),b$e=i(T),hf=s(T,"LI",{});var F1e=n(hf);SW=s(F1e,"STRONG",{});var M0r=n(SW);v$e=r(M0r,"luke"),M0r.forEach(t),T$e=r(F1e," \u2014 "),R8=s(F1e,"A",{href:!0});var E0r=n(R8);F$e=r(E0r,"LukeConfig"),E0r.forEach(t),C$e=r(F1e," (LUKE model)"),F1e.forEach(t),M$e=i(T),uf=s(T,"LI",{});var C1e=n(uf);PW=s(C1e,"STRONG",{});var y0r=n(PW);E$e=r(y0r,"lxmert"),y0r.forEach(t),y$e=r(C1e," \u2014 "),S8=s(C1e,"A",{href:!0});var w0r=n(S8);w$e=r(w0r,"LxmertConfig"),w0r.forEach(t),A$e=r(C1e," (LXMERT model)"),C1e.forEach(t),L$e=i(T),pf=s(T,"LI",{});var M1e=n(pf);$W=s(M1e,"STRONG",{});var A0r=n($W);B$e=r(A0r,"m2m_100"),A0r.forEach(t),x$e=r(M1e," \u2014 "),P8=s(M1e,"A",{href:!0});var L0r=n(P8);k$e=r(L0r,"M2M100Config"),L0r.forEach(t),R$e=r(M1e," (M2M100 model)"),M1e.forEach(t),S$e=i(T),_f=s(T,"LI",{});var E1e=n(_f);IW=s(E1e,"STRONG",{});var B0r=n(IW);P$e=r(B0r,"marian"),B0r.forEach(t),$$e=r(E1e," \u2014 "),$8=s(E1e,"A",{href:!0});var x0r=n($8);I$e=r(x0r,"MarianConfig"),x0r.forEach(t),j$e=r(E1e," (Marian model)"),E1e.forEach(t),N$e=i(T),bf=s(T,"LI",{});var y1e=n(bf);jW=s(y1e,"STRONG",{});var k0r=n(jW);D$e=r(k0r,"mbart"),k0r.forEach(t),q$e=r(y1e," \u2014 "),I8=s(y1e,"A",{href:!0});var R0r=n(I8);G$e=r(R0r,"MBartConfig"),R0r.forEach(t),O$e=r(y1e," (mBART model)"),y1e.forEach(t),X$e=i(T),vf=s(T,"LI",{});var w1e=n(vf);NW=s(w1e,"STRONG",{});var S0r=n(NW);z$e=r(S0r,"megatron-bert"),S0r.forEach(t),V$e=r(w1e," \u2014 "),j8=s(w1e,"A",{href:!0});var P0r=n(j8);W$e=r(P0r,"MegatronBertConfig"),P0r.forEach(t),Q$e=r(w1e," (MegatronBert model)"),w1e.forEach(t),H$e=i(T),Tf=s(T,"LI",{});var A1e=n(Tf);DW=s(A1e,"STRONG",{});var $0r=n(DW);U$e=r($0r,"mobilebert"),$0r.forEach(t),J$e=r(A1e," \u2014 "),N8=s(A1e,"A",{href:!0});var I0r=n(N8);Y$e=r(I0r,"MobileBertConfig"),I0r.forEach(t),K$e=r(A1e," (MobileBERT model)"),A1e.forEach(t),Z$e=i(T),Ff=s(T,"LI",{});var L1e=n(Ff);qW=s(L1e,"STRONG",{});var j0r=n(qW);eIe=r(j0r,"mpnet"),j0r.forEach(t),oIe=r(L1e," \u2014 "),D8=s(L1e,"A",{href:!0});var N0r=n(D8);rIe=r(N0r,"MPNetConfig"),N0r.forEach(t),tIe=r(L1e," (MPNet model)"),L1e.forEach(t),aIe=i(T),Cf=s(T,"LI",{});var B1e=n(Cf);GW=s(B1e,"STRONG",{});var D0r=n(GW);sIe=r(D0r,"mt5"),D0r.forEach(t),nIe=r(B1e," \u2014 "),q8=s(B1e,"A",{href:!0});var q0r=n(q8);lIe=r(q0r,"MT5Config"),q0r.forEach(t),iIe=r(B1e," (mT5 model)"),B1e.forEach(t),dIe=i(T),Mf=s(T,"LI",{});var x1e=n(Mf);OW=s(x1e,"STRONG",{});var G0r=n(OW);cIe=r(G0r,"nystromformer"),G0r.forEach(t),mIe=r(x1e," \u2014 "),G8=s(x1e,"A",{href:!0});var O0r=n(G8);fIe=r(O0r,"NystromformerConfig"),O0r.forEach(t),gIe=r(x1e," (Nystromformer model)"),x1e.forEach(t),hIe=i(T),Ef=s(T,"LI",{});var k1e=n(Ef);XW=s(k1e,"STRONG",{});var X0r=n(XW);uIe=r(X0r,"openai-gpt"),X0r.forEach(t),pIe=r(k1e," \u2014 "),O8=s(k1e,"A",{href:!0});var z0r=n(O8);_Ie=r(z0r,"OpenAIGPTConfig"),z0r.forEach(t),bIe=r(k1e," (OpenAI GPT model)"),k1e.forEach(t),vIe=i(T),yf=s(T,"LI",{});var R1e=n(yf);zW=s(R1e,"STRONG",{});var V0r=n(zW);TIe=r(V0r,"pegasus"),V0r.forEach(t),FIe=r(R1e," \u2014 "),X8=s(R1e,"A",{href:!0});var W0r=n(X8);CIe=r(W0r,"PegasusConfig"),W0r.forEach(t),MIe=r(R1e," (Pegasus model)"),R1e.forEach(t),EIe=i(T),wf=s(T,"LI",{});var S1e=n(wf);VW=s(S1e,"STRONG",{});var Q0r=n(VW);yIe=r(Q0r,"perceiver"),Q0r.forEach(t),wIe=r(S1e," \u2014 "),z8=s(S1e,"A",{href:!0});var H0r=n(z8);AIe=r(H0r,"PerceiverConfig"),H0r.forEach(t),LIe=r(S1e," (Perceiver model)"),S1e.forEach(t),BIe=i(T),Af=s(T,"LI",{});var P1e=n(Af);WW=s(P1e,"STRONG",{});var U0r=n(WW);xIe=r(U0r,"plbart"),U0r.forEach(t),kIe=r(P1e," \u2014 "),V8=s(P1e,"A",{href:!0});var J0r=n(V8);RIe=r(J0r,"PLBartConfig"),J0r.forEach(t),SIe=r(P1e," (PLBart model)"),P1e.forEach(t),PIe=i(T),Lf=s(T,"LI",{});var $1e=n(Lf);QW=s($1e,"STRONG",{});var Y0r=n(QW);$Ie=r(Y0r,"poolformer"),Y0r.forEach(t),IIe=r($1e," \u2014 "),W8=s($1e,"A",{href:!0});var K0r=n(W8);jIe=r(K0r,"PoolFormerConfig"),K0r.forEach(t),NIe=r($1e," (PoolFormer model)"),$1e.forEach(t),DIe=i(T),Bf=s(T,"LI",{});var I1e=n(Bf);HW=s(I1e,"STRONG",{});var Z0r=n(HW);qIe=r(Z0r,"prophetnet"),Z0r.forEach(t),GIe=r(I1e," \u2014 "),Q8=s(I1e,"A",{href:!0});var eLr=n(Q8);OIe=r(eLr,"ProphetNetConfig"),eLr.forEach(t),XIe=r(I1e," (ProphetNet model)"),I1e.forEach(t),zIe=i(T),xf=s(T,"LI",{});var j1e=n(xf);UW=s(j1e,"STRONG",{});var oLr=n(UW);VIe=r(oLr,"qdqbert"),oLr.forEach(t),WIe=r(j1e," \u2014 "),H8=s(j1e,"A",{href:!0});var rLr=n(H8);QIe=r(rLr,"QDQBertConfig"),rLr.forEach(t),HIe=r(j1e," (QDQBert model)"),j1e.forEach(t),UIe=i(T),kf=s(T,"LI",{});var N1e=n(kf);JW=s(N1e,"STRONG",{});var tLr=n(JW);JIe=r(tLr,"rag"),tLr.forEach(t),YIe=r(N1e," \u2014 "),U8=s(N1e,"A",{href:!0});var aLr=n(U8);KIe=r(aLr,"RagConfig"),aLr.forEach(t),ZIe=r(N1e," (RAG model)"),N1e.forEach(t),eje=i(T),Rf=s(T,"LI",{});var D1e=n(Rf);YW=s(D1e,"STRONG",{});var sLr=n(YW);oje=r(sLr,"realm"),sLr.forEach(t),rje=r(D1e," \u2014 "),J8=s(D1e,"A",{href:!0});var nLr=n(J8);tje=r(nLr,"RealmConfig"),nLr.forEach(t),aje=r(D1e," (Realm model)"),D1e.forEach(t),sje=i(T),Sf=s(T,"LI",{});var q1e=n(Sf);KW=s(q1e,"STRONG",{});var lLr=n(KW);nje=r(lLr,"reformer"),lLr.forEach(t),lje=r(q1e," \u2014 "),Y8=s(q1e,"A",{href:!0});var iLr=n(Y8);ije=r(iLr,"ReformerConfig"),iLr.forEach(t),dje=r(q1e," (Reformer model)"),q1e.forEach(t),cje=i(T),Pf=s(T,"LI",{});var G1e=n(Pf);ZW=s(G1e,"STRONG",{});var dLr=n(ZW);mje=r(dLr,"rembert"),dLr.forEach(t),fje=r(G1e," \u2014 "),K8=s(G1e,"A",{href:!0});var cLr=n(K8);gje=r(cLr,"RemBertConfig"),cLr.forEach(t),hje=r(G1e," (RemBERT model)"),G1e.forEach(t),uje=i(T),$f=s(T,"LI",{});var O1e=n($f);eQ=s(O1e,"STRONG",{});var mLr=n(eQ);pje=r(mLr,"retribert"),mLr.forEach(t),_je=r(O1e," \u2014 "),Z8=s(O1e,"A",{href:!0});var fLr=n(Z8);bje=r(fLr,"RetriBertConfig"),fLr.forEach(t),vje=r(O1e," (RetriBERT model)"),O1e.forEach(t),Tje=i(T),If=s(T,"LI",{});var X1e=n(If);oQ=s(X1e,"STRONG",{});var gLr=n(oQ);Fje=r(gLr,"roberta"),gLr.forEach(t),Cje=r(X1e," \u2014 "),e9=s(X1e,"A",{href:!0});var hLr=n(e9);Mje=r(hLr,"RobertaConfig"),hLr.forEach(t),Eje=r(X1e," (RoBERTa model)"),X1e.forEach(t),yje=i(T),jf=s(T,"LI",{});var z1e=n(jf);rQ=s(z1e,"STRONG",{});var uLr=n(rQ);wje=r(uLr,"roformer"),uLr.forEach(t),Aje=r(z1e," \u2014 "),o9=s(z1e,"A",{href:!0});var pLr=n(o9);Lje=r(pLr,"RoFormerConfig"),pLr.forEach(t),Bje=r(z1e," (RoFormer model)"),z1e.forEach(t),xje=i(T),Nf=s(T,"LI",{});var V1e=n(Nf);tQ=s(V1e,"STRONG",{});var _Lr=n(tQ);kje=r(_Lr,"segformer"),_Lr.forEach(t),Rje=r(V1e," \u2014 "),r9=s(V1e,"A",{href:!0});var bLr=n(r9);Sje=r(bLr,"SegformerConfig"),bLr.forEach(t),Pje=r(V1e," (SegFormer model)"),V1e.forEach(t),$je=i(T),Df=s(T,"LI",{});var W1e=n(Df);aQ=s(W1e,"STRONG",{});var vLr=n(aQ);Ije=r(vLr,"sew"),vLr.forEach(t),jje=r(W1e," \u2014 "),t9=s(W1e,"A",{href:!0});var TLr=n(t9);Nje=r(TLr,"SEWConfig"),TLr.forEach(t),Dje=r(W1e," (SEW model)"),W1e.forEach(t),qje=i(T),qf=s(T,"LI",{});var Q1e=n(qf);sQ=s(Q1e,"STRONG",{});var FLr=n(sQ);Gje=r(FLr,"sew-d"),FLr.forEach(t),Oje=r(Q1e," \u2014 "),a9=s(Q1e,"A",{href:!0});var CLr=n(a9);Xje=r(CLr,"SEWDConfig"),CLr.forEach(t),zje=r(Q1e," (SEW-D model)"),Q1e.forEach(t),Vje=i(T),Gf=s(T,"LI",{});var H1e=n(Gf);nQ=s(H1e,"STRONG",{});var MLr=n(nQ);Wje=r(MLr,"speech-encoder-decoder"),MLr.forEach(t),Qje=r(H1e," \u2014 "),s9=s(H1e,"A",{href:!0});var ELr=n(s9);Hje=r(ELr,"SpeechEncoderDecoderConfig"),ELr.forEach(t),Uje=r(H1e," (Speech Encoder decoder model)"),H1e.forEach(t),Jje=i(T),Of=s(T,"LI",{});var U1e=n(Of);lQ=s(U1e,"STRONG",{});var yLr=n(lQ);Yje=r(yLr,"speech_to_text"),yLr.forEach(t),Kje=r(U1e," \u2014 "),n9=s(U1e,"A",{href:!0});var wLr=n(n9);Zje=r(wLr,"Speech2TextConfig"),wLr.forEach(t),eNe=r(U1e," (Speech2Text model)"),U1e.forEach(t),oNe=i(T),Xf=s(T,"LI",{});var J1e=n(Xf);iQ=s(J1e,"STRONG",{});var ALr=n(iQ);rNe=r(ALr,"speech_to_text_2"),ALr.forEach(t),tNe=r(J1e," \u2014 "),l9=s(J1e,"A",{href:!0});var LLr=n(l9);aNe=r(LLr,"Speech2Text2Config"),LLr.forEach(t),sNe=r(J1e," (Speech2Text2 model)"),J1e.forEach(t),nNe=i(T),zf=s(T,"LI",{});var Y1e=n(zf);dQ=s(Y1e,"STRONG",{});var BLr=n(dQ);lNe=r(BLr,"splinter"),BLr.forEach(t),iNe=r(Y1e," \u2014 "),i9=s(Y1e,"A",{href:!0});var xLr=n(i9);dNe=r(xLr,"SplinterConfig"),xLr.forEach(t),cNe=r(Y1e," (Splinter model)"),Y1e.forEach(t),mNe=i(T),Vf=s(T,"LI",{});var K1e=n(Vf);cQ=s(K1e,"STRONG",{});var kLr=n(cQ);fNe=r(kLr,"squeezebert"),kLr.forEach(t),gNe=r(K1e," \u2014 "),d9=s(K1e,"A",{href:!0});var RLr=n(d9);hNe=r(RLr,"SqueezeBertConfig"),RLr.forEach(t),uNe=r(K1e," (SqueezeBERT model)"),K1e.forEach(t),pNe=i(T),Wf=s(T,"LI",{});var Z1e=n(Wf);mQ=s(Z1e,"STRONG",{});var SLr=n(mQ);_Ne=r(SLr,"swin"),SLr.forEach(t),bNe=r(Z1e," \u2014 "),c9=s(Z1e,"A",{href:!0});var PLr=n(c9);vNe=r(PLr,"SwinConfig"),PLr.forEach(t),TNe=r(Z1e," (Swin model)"),Z1e.forEach(t),FNe=i(T),Qf=s(T,"LI",{});var eFe=n(Qf);fQ=s(eFe,"STRONG",{});var $Lr=n(fQ);CNe=r($Lr,"t5"),$Lr.forEach(t),MNe=r(eFe," \u2014 "),m9=s(eFe,"A",{href:!0});var ILr=n(m9);ENe=r(ILr,"T5Config"),ILr.forEach(t),yNe=r(eFe," (T5 model)"),eFe.forEach(t),wNe=i(T),Hf=s(T,"LI",{});var oFe=n(Hf);gQ=s(oFe,"STRONG",{});var jLr=n(gQ);ANe=r(jLr,"tapas"),jLr.forEach(t),LNe=r(oFe," \u2014 "),f9=s(oFe,"A",{href:!0});var NLr=n(f9);BNe=r(NLr,"TapasConfig"),NLr.forEach(t),xNe=r(oFe," (TAPAS model)"),oFe.forEach(t),kNe=i(T),Uf=s(T,"LI",{});var rFe=n(Uf);hQ=s(rFe,"STRONG",{});var DLr=n(hQ);RNe=r(DLr,"transfo-xl"),DLr.forEach(t),SNe=r(rFe," \u2014 "),g9=s(rFe,"A",{href:!0});var qLr=n(g9);PNe=r(qLr,"TransfoXLConfig"),qLr.forEach(t),$Ne=r(rFe," (Transformer-XL model)"),rFe.forEach(t),INe=i(T),Jf=s(T,"LI",{});var tFe=n(Jf);uQ=s(tFe,"STRONG",{});var GLr=n(uQ);jNe=r(GLr,"trocr"),GLr.forEach(t),NNe=r(tFe," \u2014 "),h9=s(tFe,"A",{href:!0});var OLr=n(h9);DNe=r(OLr,"TrOCRConfig"),OLr.forEach(t),qNe=r(tFe," (TrOCR model)"),tFe.forEach(t),GNe=i(T),Yf=s(T,"LI",{});var aFe=n(Yf);pQ=s(aFe,"STRONG",{});var XLr=n(pQ);ONe=r(XLr,"unispeech"),XLr.forEach(t),XNe=r(aFe," \u2014 "),u9=s(aFe,"A",{href:!0});var zLr=n(u9);zNe=r(zLr,"UniSpeechConfig"),zLr.forEach(t),VNe=r(aFe," (UniSpeech model)"),aFe.forEach(t),WNe=i(T),Kf=s(T,"LI",{});var sFe=n(Kf);_Q=s(sFe,"STRONG",{});var VLr=n(_Q);QNe=r(VLr,"unispeech-sat"),VLr.forEach(t),HNe=r(sFe," \u2014 "),p9=s(sFe,"A",{href:!0});var WLr=n(p9);UNe=r(WLr,"UniSpeechSatConfig"),WLr.forEach(t),JNe=r(sFe," (UniSpeechSat model)"),sFe.forEach(t),YNe=i(T),Zf=s(T,"LI",{});var nFe=n(Zf);bQ=s(nFe,"STRONG",{});var QLr=n(bQ);KNe=r(QLr,"vilt"),QLr.forEach(t),ZNe=r(nFe," \u2014 "),_9=s(nFe,"A",{href:!0});var HLr=n(_9);eDe=r(HLr,"ViltConfig"),HLr.forEach(t),oDe=r(nFe," (ViLT model)"),nFe.forEach(t),rDe=i(T),eg=s(T,"LI",{});var lFe=n(eg);vQ=s(lFe,"STRONG",{});var ULr=n(vQ);tDe=r(ULr,"vision-encoder-decoder"),ULr.forEach(t),aDe=r(lFe," \u2014 "),b9=s(lFe,"A",{href:!0});var JLr=n(b9);sDe=r(JLr,"VisionEncoderDecoderConfig"),JLr.forEach(t),nDe=r(lFe," (Vision Encoder decoder model)"),lFe.forEach(t),lDe=i(T),og=s(T,"LI",{});var iFe=n(og);TQ=s(iFe,"STRONG",{});var YLr=n(TQ);iDe=r(YLr,"vision-text-dual-encoder"),YLr.forEach(t),dDe=r(iFe," \u2014 "),v9=s(iFe,"A",{href:!0});var KLr=n(v9);cDe=r(KLr,"VisionTextDualEncoderConfig"),KLr.forEach(t),mDe=r(iFe," (VisionTextDualEncoder model)"),iFe.forEach(t),fDe=i(T),rg=s(T,"LI",{});var dFe=n(rg);FQ=s(dFe,"STRONG",{});var ZLr=n(FQ);gDe=r(ZLr,"visual_bert"),ZLr.forEach(t),hDe=r(dFe," \u2014 "),T9=s(dFe,"A",{href:!0});var e7r=n(T9);uDe=r(e7r,"VisualBertConfig"),e7r.forEach(t),pDe=r(dFe," (VisualBert model)"),dFe.forEach(t),_De=i(T),tg=s(T,"LI",{});var cFe=n(tg);CQ=s(cFe,"STRONG",{});var o7r=n(CQ);bDe=r(o7r,"vit"),o7r.forEach(t),vDe=r(cFe," \u2014 "),F9=s(cFe,"A",{href:!0});var r7r=n(F9);TDe=r(r7r,"ViTConfig"),r7r.forEach(t),FDe=r(cFe," (ViT model)"),cFe.forEach(t),CDe=i(T),ag=s(T,"LI",{});var mFe=n(ag);MQ=s(mFe,"STRONG",{});var t7r=n(MQ);MDe=r(t7r,"vit_mae"),t7r.forEach(t),EDe=r(mFe," \u2014 "),C9=s(mFe,"A",{href:!0});var a7r=n(C9);yDe=r(a7r,"ViTMAEConfig"),a7r.forEach(t),wDe=r(mFe," (ViTMAE model)"),mFe.forEach(t),ADe=i(T),sg=s(T,"LI",{});var fFe=n(sg);EQ=s(fFe,"STRONG",{});var s7r=n(EQ);LDe=r(s7r,"wav2vec2"),s7r.forEach(t),BDe=r(fFe," \u2014 "),M9=s(fFe,"A",{href:!0});var n7r=n(M9);xDe=r(n7r,"Wav2Vec2Config"),n7r.forEach(t),kDe=r(fFe," (Wav2Vec2 model)"),fFe.forEach(t),RDe=i(T),ng=s(T,"LI",{});var gFe=n(ng);yQ=s(gFe,"STRONG",{});var l7r=n(yQ);SDe=r(l7r,"wavlm"),l7r.forEach(t),PDe=r(gFe," \u2014 "),E9=s(gFe,"A",{href:!0});var i7r=n(E9);$De=r(i7r,"WavLMConfig"),i7r.forEach(t),IDe=r(gFe," (WavLM model)"),gFe.forEach(t),jDe=i(T),lg=s(T,"LI",{});var hFe=n(lg);wQ=s(hFe,"STRONG",{});var d7r=n(wQ);NDe=r(d7r,"xglm"),d7r.forEach(t),DDe=r(hFe," \u2014 "),y9=s(hFe,"A",{href:!0});var c7r=n(y9);qDe=r(c7r,"XGLMConfig"),c7r.forEach(t),GDe=r(hFe," (XGLM model)"),hFe.forEach(t),ODe=i(T),ig=s(T,"LI",{});var uFe=n(ig);AQ=s(uFe,"STRONG",{});var m7r=n(AQ);XDe=r(m7r,"xlm"),m7r.forEach(t),zDe=r(uFe," \u2014 "),w9=s(uFe,"A",{href:!0});var f7r=n(w9);VDe=r(f7r,"XLMConfig"),f7r.forEach(t),WDe=r(uFe," (XLM model)"),uFe.forEach(t),QDe=i(T),dg=s(T,"LI",{});var pFe=n(dg);LQ=s(pFe,"STRONG",{});var g7r=n(LQ);HDe=r(g7r,"xlm-prophetnet"),g7r.forEach(t),UDe=r(pFe," \u2014 "),A9=s(pFe,"A",{href:!0});var h7r=n(A9);JDe=r(h7r,"XLMProphetNetConfig"),h7r.forEach(t),YDe=r(pFe," (XLMProphetNet model)"),pFe.forEach(t),KDe=i(T),cg=s(T,"LI",{});var _Fe=n(cg);BQ=s(_Fe,"STRONG",{});var u7r=n(BQ);ZDe=r(u7r,"xlm-roberta"),u7r.forEach(t),eqe=r(_Fe," \u2014 "),L9=s(_Fe,"A",{href:!0});var p7r=n(L9);oqe=r(p7r,"XLMRobertaConfig"),p7r.forEach(t),rqe=r(_Fe," (XLM-RoBERTa model)"),_Fe.forEach(t),tqe=i(T),mg=s(T,"LI",{});var bFe=n(mg);xQ=s(bFe,"STRONG",{});var _7r=n(xQ);aqe=r(_7r,"xlm-roberta-xl"),_7r.forEach(t),sqe=r(bFe," \u2014 "),B9=s(bFe,"A",{href:!0});var b7r=n(B9);nqe=r(b7r,"XLMRobertaXLConfig"),b7r.forEach(t),lqe=r(bFe," (XLM-RoBERTa-XL model)"),bFe.forEach(t),iqe=i(T),fg=s(T,"LI",{});var vFe=n(fg);kQ=s(vFe,"STRONG",{});var v7r=n(kQ);dqe=r(v7r,"xlnet"),v7r.forEach(t),cqe=r(vFe," \u2014 "),x9=s(vFe,"A",{href:!0});var T7r=n(x9);mqe=r(T7r,"XLNetConfig"),T7r.forEach(t),fqe=r(vFe," (XLNet model)"),vFe.forEach(t),gqe=i(T),gg=s(T,"LI",{});var TFe=n(gg);RQ=s(TFe,"STRONG",{});var F7r=n(RQ);hqe=r(F7r,"yoso"),F7r.forEach(t),uqe=r(TFe," \u2014 "),k9=s(TFe,"A",{href:!0});var C7r=n(k9);pqe=r(C7r,"YosoConfig"),C7r.forEach(t),_qe=r(TFe," (YOSO model)"),TFe.forEach(t),T.forEach(t),bqe=i(ia),SQ=s(ia,"P",{});var M7r=n(SQ);vqe=r(M7r,"Examples:"),M7r.forEach(t),Tqe=i(ia),f(h5.$$.fragment,ia),ia.forEach(t),Fqe=i(Pn),hg=s(Pn,"DIV",{class:!0});var bBe=n(hg);f(u5.$$.fragment,bBe),Cqe=i(bBe),PQ=s(bBe,"P",{});var E7r=n(PQ);Mqe=r(E7r,"Register a new configuration for this class."),E7r.forEach(t),bBe.forEach(t),Pn.forEach(t),b8e=i(d),Ii=s(d,"H2",{class:!0});var vBe=n(Ii);ug=s(vBe,"A",{id:!0,class:!0,href:!0});var y7r=n(ug);$Q=s(y7r,"SPAN",{});var w7r=n($Q);f(p5.$$.fragment,w7r),w7r.forEach(t),y7r.forEach(t),Eqe=i(vBe),IQ=s(vBe,"SPAN",{});var A7r=n(IQ);yqe=r(A7r,"AutoTokenizer"),A7r.forEach(t),vBe.forEach(t),v8e=i(d),Oo=s(d,"DIV",{class:!0});var $n=n(Oo);f(_5.$$.fragment,$n),wqe=i($n),b5=s($n,"P",{});var TBe=n(b5);Aqe=r(TBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),R9=s(TBe,"A",{href:!0});var L7r=n(R9);Lqe=r(L7r,"AutoTokenizer.from_pretrained()"),L7r.forEach(t),Bqe=r(TBe," class method."),TBe.forEach(t),xqe=i($n),v5=s($n,"P",{});var FBe=n(v5);kqe=r(FBe,"This class cannot be instantiated directly using "),jQ=s(FBe,"CODE",{});var B7r=n(jQ);Rqe=r(B7r,"__init__()"),B7r.forEach(t),Sqe=r(FBe," (throws an error)."),FBe.forEach(t),Pqe=i($n),fo=s($n,"DIV",{class:!0});var da=n(fo);f(T5.$$.fragment,da),$qe=i(da),NQ=s(da,"P",{});var x7r=n(NQ);Iqe=r(x7r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),x7r.forEach(t),jqe=i(da),ja=s(da,"P",{});var l3=n(ja);Nqe=r(l3,"The tokenizer class to instantiate is selected based on the "),DQ=s(l3,"CODE",{});var k7r=n(DQ);Dqe=r(k7r,"model_type"),k7r.forEach(t),qqe=r(l3,` property of the config object (either
passed as an argument or loaded from `),qQ=s(l3,"CODE",{});var R7r=n(qQ);Gqe=r(R7r,"pretrained_model_name_or_path"),R7r.forEach(t),Oqe=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GQ=s(l3,"CODE",{});var S7r=n(GQ);Xqe=r(S7r,"pretrained_model_name_or_path"),S7r.forEach(t),zqe=r(l3,":"),l3.forEach(t),Vqe=i(da),M=s(da,"UL",{});var y=n(M);Ns=s(y,"LI",{});var QL=n(Ns);OQ=s(QL,"STRONG",{});var P7r=n(OQ);Wqe=r(P7r,"albert"),P7r.forEach(t),Qqe=r(QL," \u2014 "),S9=s(QL,"A",{href:!0});var $7r=n(S9);Hqe=r($7r,"AlbertTokenizer"),$7r.forEach(t),Uqe=r(QL," or "),P9=s(QL,"A",{href:!0});var I7r=n(P9);Jqe=r(I7r,"AlbertTokenizerFast"),I7r.forEach(t),Yqe=r(QL," (ALBERT model)"),QL.forEach(t),Kqe=i(y),Ds=s(y,"LI",{});var HL=n(Ds);XQ=s(HL,"STRONG",{});var j7r=n(XQ);Zqe=r(j7r,"bart"),j7r.forEach(t),eGe=r(HL," \u2014 "),$9=s(HL,"A",{href:!0});var N7r=n($9);oGe=r(N7r,"BartTokenizer"),N7r.forEach(t),rGe=r(HL," or "),I9=s(HL,"A",{href:!0});var D7r=n(I9);tGe=r(D7r,"BartTokenizerFast"),D7r.forEach(t),aGe=r(HL," (BART model)"),HL.forEach(t),sGe=i(y),qs=s(y,"LI",{});var UL=n(qs);zQ=s(UL,"STRONG",{});var q7r=n(zQ);nGe=r(q7r,"barthez"),q7r.forEach(t),lGe=r(UL," \u2014 "),j9=s(UL,"A",{href:!0});var G7r=n(j9);iGe=r(G7r,"BarthezTokenizer"),G7r.forEach(t),dGe=r(UL," or "),N9=s(UL,"A",{href:!0});var O7r=n(N9);cGe=r(O7r,"BarthezTokenizerFast"),O7r.forEach(t),mGe=r(UL," (BARThez model)"),UL.forEach(t),fGe=i(y),pg=s(y,"LI",{});var FFe=n(pg);VQ=s(FFe,"STRONG",{});var X7r=n(VQ);gGe=r(X7r,"bartpho"),X7r.forEach(t),hGe=r(FFe," \u2014 "),D9=s(FFe,"A",{href:!0});var z7r=n(D9);uGe=r(z7r,"BartphoTokenizer"),z7r.forEach(t),pGe=r(FFe," (BARTpho model)"),FFe.forEach(t),_Ge=i(y),Gs=s(y,"LI",{});var JL=n(Gs);WQ=s(JL,"STRONG",{});var V7r=n(WQ);bGe=r(V7r,"bert"),V7r.forEach(t),vGe=r(JL," \u2014 "),q9=s(JL,"A",{href:!0});var W7r=n(q9);TGe=r(W7r,"BertTokenizer"),W7r.forEach(t),FGe=r(JL," or "),G9=s(JL,"A",{href:!0});var Q7r=n(G9);CGe=r(Q7r,"BertTokenizerFast"),Q7r.forEach(t),MGe=r(JL," (BERT model)"),JL.forEach(t),EGe=i(y),_g=s(y,"LI",{});var CFe=n(_g);QQ=s(CFe,"STRONG",{});var H7r=n(QQ);yGe=r(H7r,"bert-generation"),H7r.forEach(t),wGe=r(CFe," \u2014 "),O9=s(CFe,"A",{href:!0});var U7r=n(O9);AGe=r(U7r,"BertGenerationTokenizer"),U7r.forEach(t),LGe=r(CFe," (Bert Generation model)"),CFe.forEach(t),BGe=i(y),bg=s(y,"LI",{});var MFe=n(bg);HQ=s(MFe,"STRONG",{});var J7r=n(HQ);xGe=r(J7r,"bert-japanese"),J7r.forEach(t),kGe=r(MFe," \u2014 "),X9=s(MFe,"A",{href:!0});var Y7r=n(X9);RGe=r(Y7r,"BertJapaneseTokenizer"),Y7r.forEach(t),SGe=r(MFe," (BertJapanese model)"),MFe.forEach(t),PGe=i(y),vg=s(y,"LI",{});var EFe=n(vg);UQ=s(EFe,"STRONG",{});var K7r=n(UQ);$Ge=r(K7r,"bertweet"),K7r.forEach(t),IGe=r(EFe," \u2014 "),z9=s(EFe,"A",{href:!0});var Z7r=n(z9);jGe=r(Z7r,"BertweetTokenizer"),Z7r.forEach(t),NGe=r(EFe," (Bertweet model)"),EFe.forEach(t),DGe=i(y),Os=s(y,"LI",{});var YL=n(Os);JQ=s(YL,"STRONG",{});var e8r=n(JQ);qGe=r(e8r,"big_bird"),e8r.forEach(t),GGe=r(YL," \u2014 "),V9=s(YL,"A",{href:!0});var o8r=n(V9);OGe=r(o8r,"BigBirdTokenizer"),o8r.forEach(t),XGe=r(YL," or "),W9=s(YL,"A",{href:!0});var r8r=n(W9);zGe=r(r8r,"BigBirdTokenizerFast"),r8r.forEach(t),VGe=r(YL," (BigBird model)"),YL.forEach(t),WGe=i(y),Xs=s(y,"LI",{});var KL=n(Xs);YQ=s(KL,"STRONG",{});var t8r=n(YQ);QGe=r(t8r,"bigbird_pegasus"),t8r.forEach(t),HGe=r(KL," \u2014 "),Q9=s(KL,"A",{href:!0});var a8r=n(Q9);UGe=r(a8r,"PegasusTokenizer"),a8r.forEach(t),JGe=r(KL," or "),H9=s(KL,"A",{href:!0});var s8r=n(H9);YGe=r(s8r,"PegasusTokenizerFast"),s8r.forEach(t),KGe=r(KL," (BigBirdPegasus model)"),KL.forEach(t),ZGe=i(y),zs=s(y,"LI",{});var ZL=n(zs);KQ=s(ZL,"STRONG",{});var n8r=n(KQ);eOe=r(n8r,"blenderbot"),n8r.forEach(t),oOe=r(ZL," \u2014 "),U9=s(ZL,"A",{href:!0});var l8r=n(U9);rOe=r(l8r,"BlenderbotTokenizer"),l8r.forEach(t),tOe=r(ZL," or "),J9=s(ZL,"A",{href:!0});var i8r=n(J9);aOe=r(i8r,"BlenderbotTokenizerFast"),i8r.forEach(t),sOe=r(ZL," (Blenderbot model)"),ZL.forEach(t),nOe=i(y),Tg=s(y,"LI",{});var yFe=n(Tg);ZQ=s(yFe,"STRONG",{});var d8r=n(ZQ);lOe=r(d8r,"blenderbot-small"),d8r.forEach(t),iOe=r(yFe," \u2014 "),Y9=s(yFe,"A",{href:!0});var c8r=n(Y9);dOe=r(c8r,"BlenderbotSmallTokenizer"),c8r.forEach(t),cOe=r(yFe," (BlenderbotSmall model)"),yFe.forEach(t),mOe=i(y),Fg=s(y,"LI",{});var wFe=n(Fg);eH=s(wFe,"STRONG",{});var m8r=n(eH);fOe=r(m8r,"byt5"),m8r.forEach(t),gOe=r(wFe," \u2014 "),K9=s(wFe,"A",{href:!0});var f8r=n(K9);hOe=r(f8r,"ByT5Tokenizer"),f8r.forEach(t),uOe=r(wFe," (ByT5 model)"),wFe.forEach(t),pOe=i(y),Vs=s(y,"LI",{});var e7=n(Vs);oH=s(e7,"STRONG",{});var g8r=n(oH);_Oe=r(g8r,"camembert"),g8r.forEach(t),bOe=r(e7," \u2014 "),Z9=s(e7,"A",{href:!0});var h8r=n(Z9);vOe=r(h8r,"CamembertTokenizer"),h8r.forEach(t),TOe=r(e7," or "),eB=s(e7,"A",{href:!0});var u8r=n(eB);FOe=r(u8r,"CamembertTokenizerFast"),u8r.forEach(t),COe=r(e7," (CamemBERT model)"),e7.forEach(t),MOe=i(y),Cg=s(y,"LI",{});var AFe=n(Cg);rH=s(AFe,"STRONG",{});var p8r=n(rH);EOe=r(p8r,"canine"),p8r.forEach(t),yOe=r(AFe," \u2014 "),oB=s(AFe,"A",{href:!0});var _8r=n(oB);wOe=r(_8r,"CanineTokenizer"),_8r.forEach(t),AOe=r(AFe," (Canine model)"),AFe.forEach(t),LOe=i(y),Ws=s(y,"LI",{});var o7=n(Ws);tH=s(o7,"STRONG",{});var b8r=n(tH);BOe=r(b8r,"clip"),b8r.forEach(t),xOe=r(o7," \u2014 "),rB=s(o7,"A",{href:!0});var v8r=n(rB);kOe=r(v8r,"CLIPTokenizer"),v8r.forEach(t),ROe=r(o7," or "),tB=s(o7,"A",{href:!0});var T8r=n(tB);SOe=r(T8r,"CLIPTokenizerFast"),T8r.forEach(t),POe=r(o7," (CLIP model)"),o7.forEach(t),$Oe=i(y),Qs=s(y,"LI",{});var r7=n(Qs);aH=s(r7,"STRONG",{});var F8r=n(aH);IOe=r(F8r,"convbert"),F8r.forEach(t),jOe=r(r7," \u2014 "),aB=s(r7,"A",{href:!0});var C8r=n(aB);NOe=r(C8r,"ConvBertTokenizer"),C8r.forEach(t),DOe=r(r7," or "),sB=s(r7,"A",{href:!0});var M8r=n(sB);qOe=r(M8r,"ConvBertTokenizerFast"),M8r.forEach(t),GOe=r(r7," (ConvBERT model)"),r7.forEach(t),OOe=i(y),Hs=s(y,"LI",{});var t7=n(Hs);sH=s(t7,"STRONG",{});var E8r=n(sH);XOe=r(E8r,"cpm"),E8r.forEach(t),zOe=r(t7," \u2014 "),nB=s(t7,"A",{href:!0});var y8r=n(nB);VOe=r(y8r,"CpmTokenizer"),y8r.forEach(t),WOe=r(t7," or "),nH=s(t7,"CODE",{});var w8r=n(nH);QOe=r(w8r,"CpmTokenizerFast"),w8r.forEach(t),HOe=r(t7," (CPM model)"),t7.forEach(t),UOe=i(y),Mg=s(y,"LI",{});var LFe=n(Mg);lH=s(LFe,"STRONG",{});var A8r=n(lH);JOe=r(A8r,"ctrl"),A8r.forEach(t),YOe=r(LFe," \u2014 "),lB=s(LFe,"A",{href:!0});var L8r=n(lB);KOe=r(L8r,"CTRLTokenizer"),L8r.forEach(t),ZOe=r(LFe," (CTRL model)"),LFe.forEach(t),eXe=i(y),Us=s(y,"LI",{});var a7=n(Us);iH=s(a7,"STRONG",{});var B8r=n(iH);oXe=r(B8r,"deberta"),B8r.forEach(t),rXe=r(a7," \u2014 "),iB=s(a7,"A",{href:!0});var x8r=n(iB);tXe=r(x8r,"DebertaTokenizer"),x8r.forEach(t),aXe=r(a7," or "),dB=s(a7,"A",{href:!0});var k8r=n(dB);sXe=r(k8r,"DebertaTokenizerFast"),k8r.forEach(t),nXe=r(a7," (DeBERTa model)"),a7.forEach(t),lXe=i(y),Eg=s(y,"LI",{});var BFe=n(Eg);dH=s(BFe,"STRONG",{});var R8r=n(dH);iXe=r(R8r,"deberta-v2"),R8r.forEach(t),dXe=r(BFe," \u2014 "),cB=s(BFe,"A",{href:!0});var S8r=n(cB);cXe=r(S8r,"DebertaV2Tokenizer"),S8r.forEach(t),mXe=r(BFe," (DeBERTa-v2 model)"),BFe.forEach(t),fXe=i(y),Js=s(y,"LI",{});var s7=n(Js);cH=s(s7,"STRONG",{});var P8r=n(cH);gXe=r(P8r,"distilbert"),P8r.forEach(t),hXe=r(s7," \u2014 "),mB=s(s7,"A",{href:!0});var $8r=n(mB);uXe=r($8r,"DistilBertTokenizer"),$8r.forEach(t),pXe=r(s7," or "),fB=s(s7,"A",{href:!0});var I8r=n(fB);_Xe=r(I8r,"DistilBertTokenizerFast"),I8r.forEach(t),bXe=r(s7," (DistilBERT model)"),s7.forEach(t),vXe=i(y),Ys=s(y,"LI",{});var n7=n(Ys);mH=s(n7,"STRONG",{});var j8r=n(mH);TXe=r(j8r,"dpr"),j8r.forEach(t),FXe=r(n7," \u2014 "),gB=s(n7,"A",{href:!0});var N8r=n(gB);CXe=r(N8r,"DPRQuestionEncoderTokenizer"),N8r.forEach(t),MXe=r(n7," or "),hB=s(n7,"A",{href:!0});var D8r=n(hB);EXe=r(D8r,"DPRQuestionEncoderTokenizerFast"),D8r.forEach(t),yXe=r(n7," (DPR model)"),n7.forEach(t),wXe=i(y),Ks=s(y,"LI",{});var l7=n(Ks);fH=s(l7,"STRONG",{});var q8r=n(fH);AXe=r(q8r,"electra"),q8r.forEach(t),LXe=r(l7," \u2014 "),uB=s(l7,"A",{href:!0});var G8r=n(uB);BXe=r(G8r,"ElectraTokenizer"),G8r.forEach(t),xXe=r(l7," or "),pB=s(l7,"A",{href:!0});var O8r=n(pB);kXe=r(O8r,"ElectraTokenizerFast"),O8r.forEach(t),RXe=r(l7," (ELECTRA model)"),l7.forEach(t),SXe=i(y),yg=s(y,"LI",{});var xFe=n(yg);gH=s(xFe,"STRONG",{});var X8r=n(gH);PXe=r(X8r,"flaubert"),X8r.forEach(t),$Xe=r(xFe," \u2014 "),_B=s(xFe,"A",{href:!0});var z8r=n(_B);IXe=r(z8r,"FlaubertTokenizer"),z8r.forEach(t),jXe=r(xFe," (FlauBERT model)"),xFe.forEach(t),NXe=i(y),Zs=s(y,"LI",{});var i7=n(Zs);hH=s(i7,"STRONG",{});var V8r=n(hH);DXe=r(V8r,"fnet"),V8r.forEach(t),qXe=r(i7," \u2014 "),bB=s(i7,"A",{href:!0});var W8r=n(bB);GXe=r(W8r,"FNetTokenizer"),W8r.forEach(t),OXe=r(i7," or "),vB=s(i7,"A",{href:!0});var Q8r=n(vB);XXe=r(Q8r,"FNetTokenizerFast"),Q8r.forEach(t),zXe=r(i7," (FNet model)"),i7.forEach(t),VXe=i(y),wg=s(y,"LI",{});var kFe=n(wg);uH=s(kFe,"STRONG",{});var H8r=n(uH);WXe=r(H8r,"fsmt"),H8r.forEach(t),QXe=r(kFe," \u2014 "),TB=s(kFe,"A",{href:!0});var U8r=n(TB);HXe=r(U8r,"FSMTTokenizer"),U8r.forEach(t),UXe=r(kFe," (FairSeq Machine-Translation model)"),kFe.forEach(t),JXe=i(y),en=s(y,"LI",{});var d7=n(en);pH=s(d7,"STRONG",{});var J8r=n(pH);YXe=r(J8r,"funnel"),J8r.forEach(t),KXe=r(d7," \u2014 "),FB=s(d7,"A",{href:!0});var Y8r=n(FB);ZXe=r(Y8r,"FunnelTokenizer"),Y8r.forEach(t),eze=r(d7," or "),CB=s(d7,"A",{href:!0});var K8r=n(CB);oze=r(K8r,"FunnelTokenizerFast"),K8r.forEach(t),rze=r(d7," (Funnel Transformer model)"),d7.forEach(t),tze=i(y),on=s(y,"LI",{});var c7=n(on);_H=s(c7,"STRONG",{});var Z8r=n(_H);aze=r(Z8r,"gpt2"),Z8r.forEach(t),sze=r(c7," \u2014 "),MB=s(c7,"A",{href:!0});var e9r=n(MB);nze=r(e9r,"GPT2Tokenizer"),e9r.forEach(t),lze=r(c7," or "),EB=s(c7,"A",{href:!0});var o9r=n(EB);ize=r(o9r,"GPT2TokenizerFast"),o9r.forEach(t),dze=r(c7," (OpenAI GPT-2 model)"),c7.forEach(t),cze=i(y),rn=s(y,"LI",{});var m7=n(rn);bH=s(m7,"STRONG",{});var r9r=n(bH);mze=r(r9r,"gpt_neo"),r9r.forEach(t),fze=r(m7," \u2014 "),yB=s(m7,"A",{href:!0});var t9r=n(yB);gze=r(t9r,"GPT2Tokenizer"),t9r.forEach(t),hze=r(m7," or "),wB=s(m7,"A",{href:!0});var a9r=n(wB);uze=r(a9r,"GPT2TokenizerFast"),a9r.forEach(t),pze=r(m7," (GPT Neo model)"),m7.forEach(t),_ze=i(y),tn=s(y,"LI",{});var f7=n(tn);vH=s(f7,"STRONG",{});var s9r=n(vH);bze=r(s9r,"herbert"),s9r.forEach(t),vze=r(f7," \u2014 "),AB=s(f7,"A",{href:!0});var n9r=n(AB);Tze=r(n9r,"HerbertTokenizer"),n9r.forEach(t),Fze=r(f7," or "),LB=s(f7,"A",{href:!0});var l9r=n(LB);Cze=r(l9r,"HerbertTokenizerFast"),l9r.forEach(t),Mze=r(f7," (HerBERT model)"),f7.forEach(t),Eze=i(y),Ag=s(y,"LI",{});var RFe=n(Ag);TH=s(RFe,"STRONG",{});var i9r=n(TH);yze=r(i9r,"hubert"),i9r.forEach(t),wze=r(RFe," \u2014 "),BB=s(RFe,"A",{href:!0});var d9r=n(BB);Aze=r(d9r,"Wav2Vec2CTCTokenizer"),d9r.forEach(t),Lze=r(RFe," (Hubert model)"),RFe.forEach(t),Bze=i(y),an=s(y,"LI",{});var g7=n(an);FH=s(g7,"STRONG",{});var c9r=n(FH);xze=r(c9r,"ibert"),c9r.forEach(t),kze=r(g7," \u2014 "),xB=s(g7,"A",{href:!0});var m9r=n(xB);Rze=r(m9r,"RobertaTokenizer"),m9r.forEach(t),Sze=r(g7," or "),kB=s(g7,"A",{href:!0});var f9r=n(kB);Pze=r(f9r,"RobertaTokenizerFast"),f9r.forEach(t),$ze=r(g7," (I-BERT model)"),g7.forEach(t),Ize=i(y),sn=s(y,"LI",{});var h7=n(sn);CH=s(h7,"STRONG",{});var g9r=n(CH);jze=r(g9r,"layoutlm"),g9r.forEach(t),Nze=r(h7," \u2014 "),RB=s(h7,"A",{href:!0});var h9r=n(RB);Dze=r(h9r,"LayoutLMTokenizer"),h9r.forEach(t),qze=r(h7," or "),SB=s(h7,"A",{href:!0});var u9r=n(SB);Gze=r(u9r,"LayoutLMTokenizerFast"),u9r.forEach(t),Oze=r(h7," (LayoutLM model)"),h7.forEach(t),Xze=i(y),nn=s(y,"LI",{});var u7=n(nn);MH=s(u7,"STRONG",{});var p9r=n(MH);zze=r(p9r,"layoutlmv2"),p9r.forEach(t),Vze=r(u7," \u2014 "),PB=s(u7,"A",{href:!0});var _9r=n(PB);Wze=r(_9r,"LayoutLMv2Tokenizer"),_9r.forEach(t),Qze=r(u7," or "),$B=s(u7,"A",{href:!0});var b9r=n($B);Hze=r(b9r,"LayoutLMv2TokenizerFast"),b9r.forEach(t),Uze=r(u7," (LayoutLMv2 model)"),u7.forEach(t),Jze=i(y),ln=s(y,"LI",{});var p7=n(ln);EH=s(p7,"STRONG",{});var v9r=n(EH);Yze=r(v9r,"layoutxlm"),v9r.forEach(t),Kze=r(p7," \u2014 "),IB=s(p7,"A",{href:!0});var T9r=n(IB);Zze=r(T9r,"LayoutXLMTokenizer"),T9r.forEach(t),eVe=r(p7," or "),jB=s(p7,"A",{href:!0});var F9r=n(jB);oVe=r(F9r,"LayoutXLMTokenizerFast"),F9r.forEach(t),rVe=r(p7," (LayoutXLM model)"),p7.forEach(t),tVe=i(y),dn=s(y,"LI",{});var _7=n(dn);yH=s(_7,"STRONG",{});var C9r=n(yH);aVe=r(C9r,"led"),C9r.forEach(t),sVe=r(_7," \u2014 "),NB=s(_7,"A",{href:!0});var M9r=n(NB);nVe=r(M9r,"LEDTokenizer"),M9r.forEach(t),lVe=r(_7," or "),DB=s(_7,"A",{href:!0});var E9r=n(DB);iVe=r(E9r,"LEDTokenizerFast"),E9r.forEach(t),dVe=r(_7," (LED model)"),_7.forEach(t),cVe=i(y),cn=s(y,"LI",{});var b7=n(cn);wH=s(b7,"STRONG",{});var y9r=n(wH);mVe=r(y9r,"longformer"),y9r.forEach(t),fVe=r(b7," \u2014 "),qB=s(b7,"A",{href:!0});var w9r=n(qB);gVe=r(w9r,"LongformerTokenizer"),w9r.forEach(t),hVe=r(b7," or "),GB=s(b7,"A",{href:!0});var A9r=n(GB);uVe=r(A9r,"LongformerTokenizerFast"),A9r.forEach(t),pVe=r(b7," (Longformer model)"),b7.forEach(t),_Ve=i(y),Lg=s(y,"LI",{});var SFe=n(Lg);AH=s(SFe,"STRONG",{});var L9r=n(AH);bVe=r(L9r,"luke"),L9r.forEach(t),vVe=r(SFe," \u2014 "),OB=s(SFe,"A",{href:!0});var B9r=n(OB);TVe=r(B9r,"LukeTokenizer"),B9r.forEach(t),FVe=r(SFe," (LUKE model)"),SFe.forEach(t),CVe=i(y),mn=s(y,"LI",{});var v7=n(mn);LH=s(v7,"STRONG",{});var x9r=n(LH);MVe=r(x9r,"lxmert"),x9r.forEach(t),EVe=r(v7," \u2014 "),XB=s(v7,"A",{href:!0});var k9r=n(XB);yVe=r(k9r,"LxmertTokenizer"),k9r.forEach(t),wVe=r(v7," or "),zB=s(v7,"A",{href:!0});var R9r=n(zB);AVe=r(R9r,"LxmertTokenizerFast"),R9r.forEach(t),LVe=r(v7," (LXMERT model)"),v7.forEach(t),BVe=i(y),Bg=s(y,"LI",{});var PFe=n(Bg);BH=s(PFe,"STRONG",{});var S9r=n(BH);xVe=r(S9r,"m2m_100"),S9r.forEach(t),kVe=r(PFe," \u2014 "),VB=s(PFe,"A",{href:!0});var P9r=n(VB);RVe=r(P9r,"M2M100Tokenizer"),P9r.forEach(t),SVe=r(PFe," (M2M100 model)"),PFe.forEach(t),PVe=i(y),xg=s(y,"LI",{});var $Fe=n(xg);xH=s($Fe,"STRONG",{});var $9r=n(xH);$Ve=r($9r,"marian"),$9r.forEach(t),IVe=r($Fe," \u2014 "),WB=s($Fe,"A",{href:!0});var I9r=n(WB);jVe=r(I9r,"MarianTokenizer"),I9r.forEach(t),NVe=r($Fe," (Marian model)"),$Fe.forEach(t),DVe=i(y),fn=s(y,"LI",{});var T7=n(fn);kH=s(T7,"STRONG",{});var j9r=n(kH);qVe=r(j9r,"mbart"),j9r.forEach(t),GVe=r(T7," \u2014 "),QB=s(T7,"A",{href:!0});var N9r=n(QB);OVe=r(N9r,"MBartTokenizer"),N9r.forEach(t),XVe=r(T7," or "),HB=s(T7,"A",{href:!0});var D9r=n(HB);zVe=r(D9r,"MBartTokenizerFast"),D9r.forEach(t),VVe=r(T7," (mBART model)"),T7.forEach(t),WVe=i(y),gn=s(y,"LI",{});var F7=n(gn);RH=s(F7,"STRONG",{});var q9r=n(RH);QVe=r(q9r,"mbart50"),q9r.forEach(t),HVe=r(F7," \u2014 "),UB=s(F7,"A",{href:!0});var G9r=n(UB);UVe=r(G9r,"MBart50Tokenizer"),G9r.forEach(t),JVe=r(F7," or "),JB=s(F7,"A",{href:!0});var O9r=n(JB);YVe=r(O9r,"MBart50TokenizerFast"),O9r.forEach(t),KVe=r(F7," (mBART-50 model)"),F7.forEach(t),ZVe=i(y),kg=s(y,"LI",{});var IFe=n(kg);SH=s(IFe,"STRONG",{});var X9r=n(SH);eWe=r(X9r,"mluke"),X9r.forEach(t),oWe=r(IFe," \u2014 "),YB=s(IFe,"A",{href:!0});var z9r=n(YB);rWe=r(z9r,"MLukeTokenizer"),z9r.forEach(t),tWe=r(IFe," (mLUKE model)"),IFe.forEach(t),aWe=i(y),hn=s(y,"LI",{});var C7=n(hn);PH=s(C7,"STRONG",{});var V9r=n(PH);sWe=r(V9r,"mobilebert"),V9r.forEach(t),nWe=r(C7," \u2014 "),KB=s(C7,"A",{href:!0});var W9r=n(KB);lWe=r(W9r,"MobileBertTokenizer"),W9r.forEach(t),iWe=r(C7," or "),ZB=s(C7,"A",{href:!0});var Q9r=n(ZB);dWe=r(Q9r,"MobileBertTokenizerFast"),Q9r.forEach(t),cWe=r(C7," (MobileBERT model)"),C7.forEach(t),mWe=i(y),un=s(y,"LI",{});var M7=n(un);$H=s(M7,"STRONG",{});var H9r=n($H);fWe=r(H9r,"mpnet"),H9r.forEach(t),gWe=r(M7," \u2014 "),ex=s(M7,"A",{href:!0});var U9r=n(ex);hWe=r(U9r,"MPNetTokenizer"),U9r.forEach(t),uWe=r(M7," or "),ox=s(M7,"A",{href:!0});var J9r=n(ox);pWe=r(J9r,"MPNetTokenizerFast"),J9r.forEach(t),_We=r(M7," (MPNet model)"),M7.forEach(t),bWe=i(y),pn=s(y,"LI",{});var E7=n(pn);IH=s(E7,"STRONG",{});var Y9r=n(IH);vWe=r(Y9r,"mt5"),Y9r.forEach(t),TWe=r(E7," \u2014 "),rx=s(E7,"A",{href:!0});var K9r=n(rx);FWe=r(K9r,"MT5Tokenizer"),K9r.forEach(t),CWe=r(E7," or "),tx=s(E7,"A",{href:!0});var Z9r=n(tx);MWe=r(Z9r,"MT5TokenizerFast"),Z9r.forEach(t),EWe=r(E7," (mT5 model)"),E7.forEach(t),yWe=i(y),_n=s(y,"LI",{});var y7=n(_n);jH=s(y7,"STRONG",{});var eBr=n(jH);wWe=r(eBr,"openai-gpt"),eBr.forEach(t),AWe=r(y7," \u2014 "),ax=s(y7,"A",{href:!0});var oBr=n(ax);LWe=r(oBr,"OpenAIGPTTokenizer"),oBr.forEach(t),BWe=r(y7," or "),sx=s(y7,"A",{href:!0});var rBr=n(sx);xWe=r(rBr,"OpenAIGPTTokenizerFast"),rBr.forEach(t),kWe=r(y7," (OpenAI GPT model)"),y7.forEach(t),RWe=i(y),bn=s(y,"LI",{});var w7=n(bn);NH=s(w7,"STRONG",{});var tBr=n(NH);SWe=r(tBr,"pegasus"),tBr.forEach(t),PWe=r(w7," \u2014 "),nx=s(w7,"A",{href:!0});var aBr=n(nx);$We=r(aBr,"PegasusTokenizer"),aBr.forEach(t),IWe=r(w7," or "),lx=s(w7,"A",{href:!0});var sBr=n(lx);jWe=r(sBr,"PegasusTokenizerFast"),sBr.forEach(t),NWe=r(w7," (Pegasus model)"),w7.forEach(t),DWe=i(y),Rg=s(y,"LI",{});var jFe=n(Rg);DH=s(jFe,"STRONG",{});var nBr=n(DH);qWe=r(nBr,"perceiver"),nBr.forEach(t),GWe=r(jFe," \u2014 "),ix=s(jFe,"A",{href:!0});var lBr=n(ix);OWe=r(lBr,"PerceiverTokenizer"),lBr.forEach(t),XWe=r(jFe," (Perceiver model)"),jFe.forEach(t),zWe=i(y),Sg=s(y,"LI",{});var NFe=n(Sg);qH=s(NFe,"STRONG",{});var iBr=n(qH);VWe=r(iBr,"phobert"),iBr.forEach(t),WWe=r(NFe," \u2014 "),dx=s(NFe,"A",{href:!0});var dBr=n(dx);QWe=r(dBr,"PhobertTokenizer"),dBr.forEach(t),HWe=r(NFe," (PhoBERT model)"),NFe.forEach(t),UWe=i(y),Pg=s(y,"LI",{});var DFe=n(Pg);GH=s(DFe,"STRONG",{});var cBr=n(GH);JWe=r(cBr,"plbart"),cBr.forEach(t),YWe=r(DFe," \u2014 "),cx=s(DFe,"A",{href:!0});var mBr=n(cx);KWe=r(mBr,"PLBartTokenizer"),mBr.forEach(t),ZWe=r(DFe," (PLBart model)"),DFe.forEach(t),eQe=i(y),$g=s(y,"LI",{});var qFe=n($g);OH=s(qFe,"STRONG",{});var fBr=n(OH);oQe=r(fBr,"prophetnet"),fBr.forEach(t),rQe=r(qFe," \u2014 "),mx=s(qFe,"A",{href:!0});var gBr=n(mx);tQe=r(gBr,"ProphetNetTokenizer"),gBr.forEach(t),aQe=r(qFe," (ProphetNet model)"),qFe.forEach(t),sQe=i(y),vn=s(y,"LI",{});var A7=n(vn);XH=s(A7,"STRONG",{});var hBr=n(XH);nQe=r(hBr,"qdqbert"),hBr.forEach(t),lQe=r(A7," \u2014 "),fx=s(A7,"A",{href:!0});var uBr=n(fx);iQe=r(uBr,"BertTokenizer"),uBr.forEach(t),dQe=r(A7," or "),gx=s(A7,"A",{href:!0});var pBr=n(gx);cQe=r(pBr,"BertTokenizerFast"),pBr.forEach(t),mQe=r(A7," (QDQBert model)"),A7.forEach(t),fQe=i(y),Ig=s(y,"LI",{});var GFe=n(Ig);zH=s(GFe,"STRONG",{});var _Br=n(zH);gQe=r(_Br,"rag"),_Br.forEach(t),hQe=r(GFe," \u2014 "),hx=s(GFe,"A",{href:!0});var bBr=n(hx);uQe=r(bBr,"RagTokenizer"),bBr.forEach(t),pQe=r(GFe," (RAG model)"),GFe.forEach(t),_Qe=i(y),Tn=s(y,"LI",{});var L7=n(Tn);VH=s(L7,"STRONG",{});var vBr=n(VH);bQe=r(vBr,"reformer"),vBr.forEach(t),vQe=r(L7," \u2014 "),ux=s(L7,"A",{href:!0});var TBr=n(ux);TQe=r(TBr,"ReformerTokenizer"),TBr.forEach(t),FQe=r(L7," or "),px=s(L7,"A",{href:!0});var FBr=n(px);CQe=r(FBr,"ReformerTokenizerFast"),FBr.forEach(t),MQe=r(L7," (Reformer model)"),L7.forEach(t),EQe=i(y),Fn=s(y,"LI",{});var B7=n(Fn);WH=s(B7,"STRONG",{});var CBr=n(WH);yQe=r(CBr,"rembert"),CBr.forEach(t),wQe=r(B7," \u2014 "),_x=s(B7,"A",{href:!0});var MBr=n(_x);AQe=r(MBr,"RemBertTokenizer"),MBr.forEach(t),LQe=r(B7," or "),bx=s(B7,"A",{href:!0});var EBr=n(bx);BQe=r(EBr,"RemBertTokenizerFast"),EBr.forEach(t),xQe=r(B7," (RemBERT model)"),B7.forEach(t),kQe=i(y),Cn=s(y,"LI",{});var x7=n(Cn);QH=s(x7,"STRONG",{});var yBr=n(QH);RQe=r(yBr,"retribert"),yBr.forEach(t),SQe=r(x7," \u2014 "),vx=s(x7,"A",{href:!0});var wBr=n(vx);PQe=r(wBr,"RetriBertTokenizer"),wBr.forEach(t),$Qe=r(x7," or "),Tx=s(x7,"A",{href:!0});var ABr=n(Tx);IQe=r(ABr,"RetriBertTokenizerFast"),ABr.forEach(t),jQe=r(x7," (RetriBERT model)"),x7.forEach(t),NQe=i(y),Mn=s(y,"LI",{});var k7=n(Mn);HH=s(k7,"STRONG",{});var LBr=n(HH);DQe=r(LBr,"roberta"),LBr.forEach(t),qQe=r(k7," \u2014 "),Fx=s(k7,"A",{href:!0});var BBr=n(Fx);GQe=r(BBr,"RobertaTokenizer"),BBr.forEach(t),OQe=r(k7," or "),Cx=s(k7,"A",{href:!0});var xBr=n(Cx);XQe=r(xBr,"RobertaTokenizerFast"),xBr.forEach(t),zQe=r(k7," (RoBERTa model)"),k7.forEach(t),VQe=i(y),En=s(y,"LI",{});var R7=n(En);UH=s(R7,"STRONG",{});var kBr=n(UH);WQe=r(kBr,"roformer"),kBr.forEach(t),QQe=r(R7," \u2014 "),Mx=s(R7,"A",{href:!0});var RBr=n(Mx);HQe=r(RBr,"RoFormerTokenizer"),RBr.forEach(t),UQe=r(R7," or "),Ex=s(R7,"A",{href:!0});var SBr=n(Ex);JQe=r(SBr,"RoFormerTokenizerFast"),SBr.forEach(t),YQe=r(R7," (RoFormer model)"),R7.forEach(t),KQe=i(y),jg=s(y,"LI",{});var OFe=n(jg);JH=s(OFe,"STRONG",{});var PBr=n(JH);ZQe=r(PBr,"speech_to_text"),PBr.forEach(t),eHe=r(OFe," \u2014 "),yx=s(OFe,"A",{href:!0});var $Br=n(yx);oHe=r($Br,"Speech2TextTokenizer"),$Br.forEach(t),rHe=r(OFe," (Speech2Text model)"),OFe.forEach(t),tHe=i(y),Ng=s(y,"LI",{});var XFe=n(Ng);YH=s(XFe,"STRONG",{});var IBr=n(YH);aHe=r(IBr,"speech_to_text_2"),IBr.forEach(t),sHe=r(XFe," \u2014 "),wx=s(XFe,"A",{href:!0});var jBr=n(wx);nHe=r(jBr,"Speech2Text2Tokenizer"),jBr.forEach(t),lHe=r(XFe," (Speech2Text2 model)"),XFe.forEach(t),iHe=i(y),yn=s(y,"LI",{});var S7=n(yn);KH=s(S7,"STRONG",{});var NBr=n(KH);dHe=r(NBr,"splinter"),NBr.forEach(t),cHe=r(S7," \u2014 "),Ax=s(S7,"A",{href:!0});var DBr=n(Ax);mHe=r(DBr,"SplinterTokenizer"),DBr.forEach(t),fHe=r(S7," or "),Lx=s(S7,"A",{href:!0});var qBr=n(Lx);gHe=r(qBr,"SplinterTokenizerFast"),qBr.forEach(t),hHe=r(S7," (Splinter model)"),S7.forEach(t),uHe=i(y),wn=s(y,"LI",{});var P7=n(wn);ZH=s(P7,"STRONG",{});var GBr=n(ZH);pHe=r(GBr,"squeezebert"),GBr.forEach(t),_He=r(P7," \u2014 "),Bx=s(P7,"A",{href:!0});var OBr=n(Bx);bHe=r(OBr,"SqueezeBertTokenizer"),OBr.forEach(t),vHe=r(P7," or "),xx=s(P7,"A",{href:!0});var XBr=n(xx);THe=r(XBr,"SqueezeBertTokenizerFast"),XBr.forEach(t),FHe=r(P7," (SqueezeBERT model)"),P7.forEach(t),CHe=i(y),An=s(y,"LI",{});var $7=n(An);eU=s($7,"STRONG",{});var zBr=n(eU);MHe=r(zBr,"t5"),zBr.forEach(t),EHe=r($7," \u2014 "),kx=s($7,"A",{href:!0});var VBr=n(kx);yHe=r(VBr,"T5Tokenizer"),VBr.forEach(t),wHe=r($7," or "),Rx=s($7,"A",{href:!0});var WBr=n(Rx);AHe=r(WBr,"T5TokenizerFast"),WBr.forEach(t),LHe=r($7," (T5 model)"),$7.forEach(t),BHe=i(y),Dg=s(y,"LI",{});var zFe=n(Dg);oU=s(zFe,"STRONG",{});var QBr=n(oU);xHe=r(QBr,"tapas"),QBr.forEach(t),kHe=r(zFe," \u2014 "),Sx=s(zFe,"A",{href:!0});var HBr=n(Sx);RHe=r(HBr,"TapasTokenizer"),HBr.forEach(t),SHe=r(zFe," (TAPAS model)"),zFe.forEach(t),PHe=i(y),qg=s(y,"LI",{});var VFe=n(qg);rU=s(VFe,"STRONG",{});var UBr=n(rU);$He=r(UBr,"transfo-xl"),UBr.forEach(t),IHe=r(VFe," \u2014 "),Px=s(VFe,"A",{href:!0});var JBr=n(Px);jHe=r(JBr,"TransfoXLTokenizer"),JBr.forEach(t),NHe=r(VFe," (Transformer-XL model)"),VFe.forEach(t),DHe=i(y),Gg=s(y,"LI",{});var WFe=n(Gg);tU=s(WFe,"STRONG",{});var YBr=n(tU);qHe=r(YBr,"wav2vec2"),YBr.forEach(t),GHe=r(WFe," \u2014 "),$x=s(WFe,"A",{href:!0});var KBr=n($x);OHe=r(KBr,"Wav2Vec2CTCTokenizer"),KBr.forEach(t),XHe=r(WFe," (Wav2Vec2 model)"),WFe.forEach(t),zHe=i(y),Og=s(y,"LI",{});var QFe=n(Og);aU=s(QFe,"STRONG",{});var ZBr=n(aU);VHe=r(ZBr,"wav2vec2_phoneme"),ZBr.forEach(t),WHe=r(QFe," \u2014 "),Ix=s(QFe,"A",{href:!0});var exr=n(Ix);QHe=r(exr,"Wav2Vec2PhonemeCTCTokenizer"),exr.forEach(t),HHe=r(QFe," (Wav2Vec2Phoneme model)"),QFe.forEach(t),UHe=i(y),Ln=s(y,"LI",{});var I7=n(Ln);sU=s(I7,"STRONG",{});var oxr=n(sU);JHe=r(oxr,"xglm"),oxr.forEach(t),YHe=r(I7," \u2014 "),jx=s(I7,"A",{href:!0});var rxr=n(jx);KHe=r(rxr,"XGLMTokenizer"),rxr.forEach(t),ZHe=r(I7," or "),Nx=s(I7,"A",{href:!0});var txr=n(Nx);eUe=r(txr,"XGLMTokenizerFast"),txr.forEach(t),oUe=r(I7," (XGLM model)"),I7.forEach(t),rUe=i(y),Xg=s(y,"LI",{});var HFe=n(Xg);nU=s(HFe,"STRONG",{});var axr=n(nU);tUe=r(axr,"xlm"),axr.forEach(t),aUe=r(HFe," \u2014 "),Dx=s(HFe,"A",{href:!0});var sxr=n(Dx);sUe=r(sxr,"XLMTokenizer"),sxr.forEach(t),nUe=r(HFe," (XLM model)"),HFe.forEach(t),lUe=i(y),zg=s(y,"LI",{});var UFe=n(zg);lU=s(UFe,"STRONG",{});var nxr=n(lU);iUe=r(nxr,"xlm-prophetnet"),nxr.forEach(t),dUe=r(UFe," \u2014 "),qx=s(UFe,"A",{href:!0});var lxr=n(qx);cUe=r(lxr,"XLMProphetNetTokenizer"),lxr.forEach(t),mUe=r(UFe," (XLMProphetNet model)"),UFe.forEach(t),fUe=i(y),Bn=s(y,"LI",{});var j7=n(Bn);iU=s(j7,"STRONG",{});var ixr=n(iU);gUe=r(ixr,"xlm-roberta"),ixr.forEach(t),hUe=r(j7," \u2014 "),Gx=s(j7,"A",{href:!0});var dxr=n(Gx);uUe=r(dxr,"XLMRobertaTokenizer"),dxr.forEach(t),pUe=r(j7," or "),Ox=s(j7,"A",{href:!0});var cxr=n(Ox);_Ue=r(cxr,"XLMRobertaTokenizerFast"),cxr.forEach(t),bUe=r(j7," (XLM-RoBERTa model)"),j7.forEach(t),vUe=i(y),xn=s(y,"LI",{});var N7=n(xn);dU=s(N7,"STRONG",{});var mxr=n(dU);TUe=r(mxr,"xlnet"),mxr.forEach(t),FUe=r(N7," \u2014 "),Xx=s(N7,"A",{href:!0});var fxr=n(Xx);CUe=r(fxr,"XLNetTokenizer"),fxr.forEach(t),MUe=r(N7," or "),zx=s(N7,"A",{href:!0});var gxr=n(zx);EUe=r(gxr,"XLNetTokenizerFast"),gxr.forEach(t),yUe=r(N7," (XLNet model)"),N7.forEach(t),y.forEach(t),wUe=i(da),cU=s(da,"P",{});var hxr=n(cU);AUe=r(hxr,"Examples:"),hxr.forEach(t),LUe=i(da),f(F5.$$.fragment,da),da.forEach(t),BUe=i($n),Vg=s($n,"DIV",{class:!0});var CBe=n(Vg);f(C5.$$.fragment,CBe),xUe=i(CBe),mU=s(CBe,"P",{});var uxr=n(mU);kUe=r(uxr,"Register a new tokenizer in this mapping."),uxr.forEach(t),CBe.forEach(t),$n.forEach(t),T8e=i(d),ji=s(d,"H2",{class:!0});var MBe=n(ji);Wg=s(MBe,"A",{id:!0,class:!0,href:!0});var pxr=n(Wg);fU=s(pxr,"SPAN",{});var _xr=n(fU);f(M5.$$.fragment,_xr),_xr.forEach(t),pxr.forEach(t),RUe=i(MBe),gU=s(MBe,"SPAN",{});var bxr=n(gU);SUe=r(bxr,"AutoFeatureExtractor"),bxr.forEach(t),MBe.forEach(t),F8e=i(d),Xo=s(d,"DIV",{class:!0});var In=n(Xo);f(E5.$$.fragment,In),PUe=i(In),y5=s(In,"P",{});var EBe=n(y5);$Ue=r(EBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Vx=s(EBe,"A",{href:!0});var vxr=n(Vx);IUe=r(vxr,"AutoFeatureExtractor.from_pretrained()"),vxr.forEach(t),jUe=r(EBe," class method."),EBe.forEach(t),NUe=i(In),w5=s(In,"P",{});var yBe=n(w5);DUe=r(yBe,"This class cannot be instantiated directly using "),hU=s(yBe,"CODE",{});var Txr=n(hU);qUe=r(Txr,"__init__()"),Txr.forEach(t),GUe=r(yBe," (throws an error)."),yBe.forEach(t),OUe=i(In),Le=s(In,"DIV",{class:!0});var kt=n(Le);f(A5.$$.fragment,kt),XUe=i(kt),uU=s(kt,"P",{});var Fxr=n(uU);zUe=r(Fxr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Fxr.forEach(t),VUe=i(kt),Na=s(kt,"P",{});var i3=n(Na);WUe=r(i3,"The feature extractor class to instantiate is selected based on the "),pU=s(i3,"CODE",{});var Cxr=n(pU);QUe=r(Cxr,"model_type"),Cxr.forEach(t),HUe=r(i3,` property of the config object
(either passed as an argument or loaded from `),_U=s(i3,"CODE",{});var Mxr=n(_U);UUe=r(Mxr,"pretrained_model_name_or_path"),Mxr.forEach(t),JUe=r(i3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bU=s(i3,"CODE",{});var Exr=n(bU);YUe=r(Exr,"pretrained_model_name_or_path"),Exr.forEach(t),KUe=r(i3,":"),i3.forEach(t),ZUe=i(kt),ne=s(kt,"UL",{});var de=n(ne);Qg=s(de,"LI",{});var JFe=n(Qg);vU=s(JFe,"STRONG",{});var yxr=n(vU);eJe=r(yxr,"beit"),yxr.forEach(t),oJe=r(JFe," \u2014 "),Wx=s(JFe,"A",{href:!0});var wxr=n(Wx);rJe=r(wxr,"BeitFeatureExtractor"),wxr.forEach(t),tJe=r(JFe," (BEiT model)"),JFe.forEach(t),aJe=i(de),Hg=s(de,"LI",{});var YFe=n(Hg);TU=s(YFe,"STRONG",{});var Axr=n(TU);sJe=r(Axr,"clip"),Axr.forEach(t),nJe=r(YFe," \u2014 "),Qx=s(YFe,"A",{href:!0});var Lxr=n(Qx);lJe=r(Lxr,"CLIPFeatureExtractor"),Lxr.forEach(t),iJe=r(YFe," (CLIP model)"),YFe.forEach(t),dJe=i(de),Ug=s(de,"LI",{});var KFe=n(Ug);FU=s(KFe,"STRONG",{});var Bxr=n(FU);cJe=r(Bxr,"convnext"),Bxr.forEach(t),mJe=r(KFe," \u2014 "),Hx=s(KFe,"A",{href:!0});var xxr=n(Hx);fJe=r(xxr,"ConvNextFeatureExtractor"),xxr.forEach(t),gJe=r(KFe," (ConvNext model)"),KFe.forEach(t),hJe=i(de),Jg=s(de,"LI",{});var ZFe=n(Jg);CU=s(ZFe,"STRONG",{});var kxr=n(CU);uJe=r(kxr,"deit"),kxr.forEach(t),pJe=r(ZFe," \u2014 "),Ux=s(ZFe,"A",{href:!0});var Rxr=n(Ux);_Je=r(Rxr,"DeiTFeatureExtractor"),Rxr.forEach(t),bJe=r(ZFe," (DeiT model)"),ZFe.forEach(t),vJe=i(de),Yg=s(de,"LI",{});var eCe=n(Yg);MU=s(eCe,"STRONG",{});var Sxr=n(MU);TJe=r(Sxr,"detr"),Sxr.forEach(t),FJe=r(eCe," \u2014 "),Jx=s(eCe,"A",{href:!0});var Pxr=n(Jx);CJe=r(Pxr,"DetrFeatureExtractor"),Pxr.forEach(t),MJe=r(eCe," (DETR model)"),eCe.forEach(t),EJe=i(de),Kg=s(de,"LI",{});var oCe=n(Kg);EU=s(oCe,"STRONG",{});var $xr=n(EU);yJe=r($xr,"hubert"),$xr.forEach(t),wJe=r(oCe," \u2014 "),Yx=s(oCe,"A",{href:!0});var Ixr=n(Yx);AJe=r(Ixr,"Wav2Vec2FeatureExtractor"),Ixr.forEach(t),LJe=r(oCe," (Hubert model)"),oCe.forEach(t),BJe=i(de),Zg=s(de,"LI",{});var rCe=n(Zg);yU=s(rCe,"STRONG",{});var jxr=n(yU);xJe=r(jxr,"layoutlmv2"),jxr.forEach(t),kJe=r(rCe," \u2014 "),Kx=s(rCe,"A",{href:!0});var Nxr=n(Kx);RJe=r(Nxr,"LayoutLMv2FeatureExtractor"),Nxr.forEach(t),SJe=r(rCe," (LayoutLMv2 model)"),rCe.forEach(t),PJe=i(de),eh=s(de,"LI",{});var tCe=n(eh);wU=s(tCe,"STRONG",{});var Dxr=n(wU);$Je=r(Dxr,"perceiver"),Dxr.forEach(t),IJe=r(tCe," \u2014 "),Zx=s(tCe,"A",{href:!0});var qxr=n(Zx);jJe=r(qxr,"PerceiverFeatureExtractor"),qxr.forEach(t),NJe=r(tCe," (Perceiver model)"),tCe.forEach(t),DJe=i(de),oh=s(de,"LI",{});var aCe=n(oh);AU=s(aCe,"STRONG",{});var Gxr=n(AU);qJe=r(Gxr,"poolformer"),Gxr.forEach(t),GJe=r(aCe," \u2014 "),ek=s(aCe,"A",{href:!0});var Oxr=n(ek);OJe=r(Oxr,"PoolFormerFeatureExtractor"),Oxr.forEach(t),XJe=r(aCe," (PoolFormer model)"),aCe.forEach(t),zJe=i(de),rh=s(de,"LI",{});var sCe=n(rh);LU=s(sCe,"STRONG",{});var Xxr=n(LU);VJe=r(Xxr,"segformer"),Xxr.forEach(t),WJe=r(sCe," \u2014 "),ok=s(sCe,"A",{href:!0});var zxr=n(ok);QJe=r(zxr,"SegformerFeatureExtractor"),zxr.forEach(t),HJe=r(sCe," (SegFormer model)"),sCe.forEach(t),UJe=i(de),th=s(de,"LI",{});var nCe=n(th);BU=s(nCe,"STRONG",{});var Vxr=n(BU);JJe=r(Vxr,"speech_to_text"),Vxr.forEach(t),YJe=r(nCe," \u2014 "),rk=s(nCe,"A",{href:!0});var Wxr=n(rk);KJe=r(Wxr,"Speech2TextFeatureExtractor"),Wxr.forEach(t),ZJe=r(nCe," (Speech2Text model)"),nCe.forEach(t),eYe=i(de),ah=s(de,"LI",{});var lCe=n(ah);xU=s(lCe,"STRONG",{});var Qxr=n(xU);oYe=r(Qxr,"swin"),Qxr.forEach(t),rYe=r(lCe," \u2014 "),tk=s(lCe,"A",{href:!0});var Hxr=n(tk);tYe=r(Hxr,"ViTFeatureExtractor"),Hxr.forEach(t),aYe=r(lCe," (Swin model)"),lCe.forEach(t),sYe=i(de),sh=s(de,"LI",{});var iCe=n(sh);kU=s(iCe,"STRONG",{});var Uxr=n(kU);nYe=r(Uxr,"vit"),Uxr.forEach(t),lYe=r(iCe," \u2014 "),ak=s(iCe,"A",{href:!0});var Jxr=n(ak);iYe=r(Jxr,"ViTFeatureExtractor"),Jxr.forEach(t),dYe=r(iCe," (ViT model)"),iCe.forEach(t),cYe=i(de),nh=s(de,"LI",{});var dCe=n(nh);RU=s(dCe,"STRONG",{});var Yxr=n(RU);mYe=r(Yxr,"vit_mae"),Yxr.forEach(t),fYe=r(dCe," \u2014 "),sk=s(dCe,"A",{href:!0});var Kxr=n(sk);gYe=r(Kxr,"ViTFeatureExtractor"),Kxr.forEach(t),hYe=r(dCe," (ViTMAE model)"),dCe.forEach(t),uYe=i(de),lh=s(de,"LI",{});var cCe=n(lh);SU=s(cCe,"STRONG",{});var Zxr=n(SU);pYe=r(Zxr,"wav2vec2"),Zxr.forEach(t),_Ye=r(cCe," \u2014 "),nk=s(cCe,"A",{href:!0});var ekr=n(nk);bYe=r(ekr,"Wav2Vec2FeatureExtractor"),ekr.forEach(t),vYe=r(cCe," (Wav2Vec2 model)"),cCe.forEach(t),de.forEach(t),TYe=i(kt),f(ih.$$.fragment,kt),FYe=i(kt),PU=s(kt,"P",{});var okr=n(PU);CYe=r(okr,"Examples:"),okr.forEach(t),MYe=i(kt),f(L5.$$.fragment,kt),kt.forEach(t),EYe=i(In),dh=s(In,"DIV",{class:!0});var wBe=n(dh);f(B5.$$.fragment,wBe),yYe=i(wBe),$U=s(wBe,"P",{});var rkr=n($U);wYe=r(rkr,"Register a new feature extractor for this class."),rkr.forEach(t),wBe.forEach(t),In.forEach(t),C8e=i(d),Ni=s(d,"H2",{class:!0});var ABe=n(Ni);ch=s(ABe,"A",{id:!0,class:!0,href:!0});var tkr=n(ch);IU=s(tkr,"SPAN",{});var akr=n(IU);f(x5.$$.fragment,akr),akr.forEach(t),tkr.forEach(t),AYe=i(ABe),jU=s(ABe,"SPAN",{});var skr=n(jU);LYe=r(skr,"AutoProcessor"),skr.forEach(t),ABe.forEach(t),M8e=i(d),zo=s(d,"DIV",{class:!0});var jn=n(zo);f(k5.$$.fragment,jn),BYe=i(jn),R5=s(jn,"P",{});var LBe=n(R5);xYe=r(LBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lk=s(LBe,"A",{href:!0});var nkr=n(lk);kYe=r(nkr,"AutoProcessor.from_pretrained()"),nkr.forEach(t),RYe=r(LBe," class method."),LBe.forEach(t),SYe=i(jn),S5=s(jn,"P",{});var BBe=n(S5);PYe=r(BBe,"This class cannot be instantiated directly using "),NU=s(BBe,"CODE",{});var lkr=n(NU);$Ye=r(lkr,"__init__()"),lkr.forEach(t),IYe=r(BBe," (throws an error)."),BBe.forEach(t),jYe=i(jn),Be=s(jn,"DIV",{class:!0});var Rt=n(Be);f(P5.$$.fragment,Rt),NYe=i(Rt),DU=s(Rt,"P",{});var ikr=n(DU);DYe=r(ikr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ikr.forEach(t),qYe=i(Rt),Di=s(Rt,"P",{});var JX=n(Di);GYe=r(JX,"The processor class to instantiate is selected based on the "),qU=s(JX,"CODE",{});var dkr=n(qU);OYe=r(dkr,"model_type"),dkr.forEach(t),XYe=r(JX,` property of the config object (either
passed as an argument or loaded from `),GU=s(JX,"CODE",{});var ckr=n(GU);zYe=r(ckr,"pretrained_model_name_or_path"),ckr.forEach(t),VYe=r(JX," if possible):"),JX.forEach(t),WYe=i(Rt),we=s(Rt,"UL",{});var No=n(we);mh=s(No,"LI",{});var mCe=n(mh);OU=s(mCe,"STRONG",{});var mkr=n(OU);QYe=r(mkr,"clip"),mkr.forEach(t),HYe=r(mCe," \u2014 "),ik=s(mCe,"A",{href:!0});var fkr=n(ik);UYe=r(fkr,"CLIPProcessor"),fkr.forEach(t),JYe=r(mCe," (CLIP model)"),mCe.forEach(t),YYe=i(No),fh=s(No,"LI",{});var fCe=n(fh);XU=s(fCe,"STRONG",{});var gkr=n(XU);KYe=r(gkr,"layoutlmv2"),gkr.forEach(t),ZYe=r(fCe," \u2014 "),dk=s(fCe,"A",{href:!0});var hkr=n(dk);eKe=r(hkr,"LayoutLMv2Processor"),hkr.forEach(t),oKe=r(fCe," (LayoutLMv2 model)"),fCe.forEach(t),rKe=i(No),gh=s(No,"LI",{});var gCe=n(gh);zU=s(gCe,"STRONG",{});var ukr=n(zU);tKe=r(ukr,"layoutxlm"),ukr.forEach(t),aKe=r(gCe," \u2014 "),ck=s(gCe,"A",{href:!0});var pkr=n(ck);sKe=r(pkr,"LayoutXLMProcessor"),pkr.forEach(t),nKe=r(gCe," (LayoutXLM model)"),gCe.forEach(t),lKe=i(No),hh=s(No,"LI",{});var hCe=n(hh);VU=s(hCe,"STRONG",{});var _kr=n(VU);iKe=r(_kr,"speech_to_text"),_kr.forEach(t),dKe=r(hCe," \u2014 "),mk=s(hCe,"A",{href:!0});var bkr=n(mk);cKe=r(bkr,"Speech2TextProcessor"),bkr.forEach(t),mKe=r(hCe," (Speech2Text model)"),hCe.forEach(t),fKe=i(No),uh=s(No,"LI",{});var uCe=n(uh);WU=s(uCe,"STRONG",{});var vkr=n(WU);gKe=r(vkr,"speech_to_text_2"),vkr.forEach(t),hKe=r(uCe," \u2014 "),fk=s(uCe,"A",{href:!0});var Tkr=n(fk);uKe=r(Tkr,"Speech2Text2Processor"),Tkr.forEach(t),pKe=r(uCe," (Speech2Text2 model)"),uCe.forEach(t),_Ke=i(No),ph=s(No,"LI",{});var pCe=n(ph);QU=s(pCe,"STRONG",{});var Fkr=n(QU);bKe=r(Fkr,"trocr"),Fkr.forEach(t),vKe=r(pCe," \u2014 "),gk=s(pCe,"A",{href:!0});var Ckr=n(gk);TKe=r(Ckr,"TrOCRProcessor"),Ckr.forEach(t),FKe=r(pCe," (TrOCR model)"),pCe.forEach(t),CKe=i(No),_h=s(No,"LI",{});var _Ce=n(_h);HU=s(_Ce,"STRONG",{});var Mkr=n(HU);MKe=r(Mkr,"vision-text-dual-encoder"),Mkr.forEach(t),EKe=r(_Ce," \u2014 "),hk=s(_Ce,"A",{href:!0});var Ekr=n(hk);yKe=r(Ekr,"VisionTextDualEncoderProcessor"),Ekr.forEach(t),wKe=r(_Ce," (VisionTextDualEncoder model)"),_Ce.forEach(t),AKe=i(No),bh=s(No,"LI",{});var bCe=n(bh);UU=s(bCe,"STRONG",{});var ykr=n(UU);LKe=r(ykr,"wav2vec2"),ykr.forEach(t),BKe=r(bCe," \u2014 "),uk=s(bCe,"A",{href:!0});var wkr=n(uk);xKe=r(wkr,"Wav2Vec2Processor"),wkr.forEach(t),kKe=r(bCe," (Wav2Vec2 model)"),bCe.forEach(t),No.forEach(t),RKe=i(Rt),f(vh.$$.fragment,Rt),SKe=i(Rt),JU=s(Rt,"P",{});var Akr=n(JU);PKe=r(Akr,"Examples:"),Akr.forEach(t),$Ke=i(Rt),f($5.$$.fragment,Rt),Rt.forEach(t),IKe=i(jn),Th=s(jn,"DIV",{class:!0});var xBe=n(Th);f(I5.$$.fragment,xBe),jKe=i(xBe),YU=s(xBe,"P",{});var Lkr=n(YU);NKe=r(Lkr,"Register a new processor for this class."),Lkr.forEach(t),xBe.forEach(t),jn.forEach(t),E8e=i(d),qi=s(d,"H2",{class:!0});var kBe=n(qi);Fh=s(kBe,"A",{id:!0,class:!0,href:!0});var Bkr=n(Fh);KU=s(Bkr,"SPAN",{});var xkr=n(KU);f(j5.$$.fragment,xkr),xkr.forEach(t),Bkr.forEach(t),DKe=i(kBe),ZU=s(kBe,"SPAN",{});var kkr=n(ZU);qKe=r(kkr,"AutoModel"),kkr.forEach(t),kBe.forEach(t),y8e=i(d),Vo=s(d,"DIV",{class:!0});var Nn=n(Vo);f(N5.$$.fragment,Nn),GKe=i(Nn),Gi=s(Nn,"P",{});var YX=n(Gi);OKe=r(YX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eJ=s(YX,"CODE",{});var Rkr=n(eJ);XKe=r(Rkr,"from_pretrained()"),Rkr.forEach(t),zKe=r(YX,"class method or the "),oJ=s(YX,"CODE",{});var Skr=n(oJ);VKe=r(Skr,"from_config()"),Skr.forEach(t),WKe=r(YX,`class
method.`),YX.forEach(t),QKe=i(Nn),D5=s(Nn,"P",{});var RBe=n(D5);HKe=r(RBe,"This class cannot be instantiated directly using "),rJ=s(RBe,"CODE",{});var Pkr=n(rJ);UKe=r(Pkr,"__init__()"),Pkr.forEach(t),JKe=r(RBe," (throws an error)."),RBe.forEach(t),YKe=i(Nn),Nr=s(Nn,"DIV",{class:!0});var Dn=n(Nr);f(q5.$$.fragment,Dn),KKe=i(Dn),tJ=s(Dn,"P",{});var $kr=n(tJ);ZKe=r($kr,"Instantiates one of the base model classes of the library from a configuration."),$kr.forEach(t),eZe=i(Dn),Oi=s(Dn,"P",{});var KX=n(Oi);oZe=r(KX,`Note:
Loading a model from its configuration file does `),aJ=s(KX,"STRONG",{});var Ikr=n(aJ);rZe=r(Ikr,"not"),Ikr.forEach(t),tZe=r(KX,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=s(KX,"CODE",{});var jkr=n(sJ);aZe=r(jkr,"from_pretrained()"),jkr.forEach(t),sZe=r(KX,"to load the model weights."),KX.forEach(t),nZe=i(Dn),nJ=s(Dn,"P",{});var Nkr=n(nJ);lZe=r(Nkr,"Examples:"),Nkr.forEach(t),iZe=i(Dn),f(G5.$$.fragment,Dn),Dn.forEach(t),dZe=i(Nn),xe=s(Nn,"DIV",{class:!0});var St=n(xe);f(O5.$$.fragment,St),cZe=i(St),lJ=s(St,"P",{});var Dkr=n(lJ);mZe=r(Dkr,"Instantiate one of the base model classes of the library from a pretrained model."),Dkr.forEach(t),fZe=i(St),Da=s(St,"P",{});var d3=n(Da);gZe=r(d3,"The model class to instantiate is selected based on the "),iJ=s(d3,"CODE",{});var qkr=n(iJ);hZe=r(qkr,"model_type"),qkr.forEach(t),uZe=r(d3,` property of the config object (either
passed as an argument or loaded from `),dJ=s(d3,"CODE",{});var Gkr=n(dJ);pZe=r(Gkr,"pretrained_model_name_or_path"),Gkr.forEach(t),_Ze=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=s(d3,"CODE",{});var Okr=n(cJ);bZe=r(Okr,"pretrained_model_name_or_path"),Okr.forEach(t),vZe=r(d3,":"),d3.forEach(t),TZe=i(St),F=s(St,"UL",{});var C=n(F);Ch=s(C,"LI",{});var vCe=n(Ch);mJ=s(vCe,"STRONG",{});var Xkr=n(mJ);FZe=r(Xkr,"albert"),Xkr.forEach(t),CZe=r(vCe," \u2014 "),pk=s(vCe,"A",{href:!0});var zkr=n(pk);MZe=r(zkr,"AlbertModel"),zkr.forEach(t),EZe=r(vCe," (ALBERT model)"),vCe.forEach(t),yZe=i(C),Mh=s(C,"LI",{});var TCe=n(Mh);fJ=s(TCe,"STRONG",{});var Vkr=n(fJ);wZe=r(Vkr,"bart"),Vkr.forEach(t),AZe=r(TCe," \u2014 "),_k=s(TCe,"A",{href:!0});var Wkr=n(_k);LZe=r(Wkr,"BartModel"),Wkr.forEach(t),BZe=r(TCe," (BART model)"),TCe.forEach(t),xZe=i(C),Eh=s(C,"LI",{});var FCe=n(Eh);gJ=s(FCe,"STRONG",{});var Qkr=n(gJ);kZe=r(Qkr,"beit"),Qkr.forEach(t),RZe=r(FCe," \u2014 "),bk=s(FCe,"A",{href:!0});var Hkr=n(bk);SZe=r(Hkr,"BeitModel"),Hkr.forEach(t),PZe=r(FCe," (BEiT model)"),FCe.forEach(t),$Ze=i(C),yh=s(C,"LI",{});var CCe=n(yh);hJ=s(CCe,"STRONG",{});var Ukr=n(hJ);IZe=r(Ukr,"bert"),Ukr.forEach(t),jZe=r(CCe," \u2014 "),vk=s(CCe,"A",{href:!0});var Jkr=n(vk);NZe=r(Jkr,"BertModel"),Jkr.forEach(t),DZe=r(CCe," (BERT model)"),CCe.forEach(t),qZe=i(C),wh=s(C,"LI",{});var MCe=n(wh);uJ=s(MCe,"STRONG",{});var Ykr=n(uJ);GZe=r(Ykr,"bert-generation"),Ykr.forEach(t),OZe=r(MCe," \u2014 "),Tk=s(MCe,"A",{href:!0});var Kkr=n(Tk);XZe=r(Kkr,"BertGenerationEncoder"),Kkr.forEach(t),zZe=r(MCe," (Bert Generation model)"),MCe.forEach(t),VZe=i(C),Ah=s(C,"LI",{});var ECe=n(Ah);pJ=s(ECe,"STRONG",{});var Zkr=n(pJ);WZe=r(Zkr,"big_bird"),Zkr.forEach(t),QZe=r(ECe," \u2014 "),Fk=s(ECe,"A",{href:!0});var eRr=n(Fk);HZe=r(eRr,"BigBirdModel"),eRr.forEach(t),UZe=r(ECe," (BigBird model)"),ECe.forEach(t),JZe=i(C),Lh=s(C,"LI",{});var yCe=n(Lh);_J=s(yCe,"STRONG",{});var oRr=n(_J);YZe=r(oRr,"bigbird_pegasus"),oRr.forEach(t),KZe=r(yCe," \u2014 "),Ck=s(yCe,"A",{href:!0});var rRr=n(Ck);ZZe=r(rRr,"BigBirdPegasusModel"),rRr.forEach(t),eeo=r(yCe," (BigBirdPegasus model)"),yCe.forEach(t),oeo=i(C),Bh=s(C,"LI",{});var wCe=n(Bh);bJ=s(wCe,"STRONG",{});var tRr=n(bJ);reo=r(tRr,"blenderbot"),tRr.forEach(t),teo=r(wCe," \u2014 "),Mk=s(wCe,"A",{href:!0});var aRr=n(Mk);aeo=r(aRr,"BlenderbotModel"),aRr.forEach(t),seo=r(wCe," (Blenderbot model)"),wCe.forEach(t),neo=i(C),xh=s(C,"LI",{});var ACe=n(xh);vJ=s(ACe,"STRONG",{});var sRr=n(vJ);leo=r(sRr,"blenderbot-small"),sRr.forEach(t),ieo=r(ACe," \u2014 "),Ek=s(ACe,"A",{href:!0});var nRr=n(Ek);deo=r(nRr,"BlenderbotSmallModel"),nRr.forEach(t),ceo=r(ACe," (BlenderbotSmall model)"),ACe.forEach(t),meo=i(C),kh=s(C,"LI",{});var LCe=n(kh);TJ=s(LCe,"STRONG",{});var lRr=n(TJ);feo=r(lRr,"camembert"),lRr.forEach(t),geo=r(LCe," \u2014 "),yk=s(LCe,"A",{href:!0});var iRr=n(yk);heo=r(iRr,"CamembertModel"),iRr.forEach(t),ueo=r(LCe," (CamemBERT model)"),LCe.forEach(t),peo=i(C),Rh=s(C,"LI",{});var BCe=n(Rh);FJ=s(BCe,"STRONG",{});var dRr=n(FJ);_eo=r(dRr,"canine"),dRr.forEach(t),beo=r(BCe," \u2014 "),wk=s(BCe,"A",{href:!0});var cRr=n(wk);veo=r(cRr,"CanineModel"),cRr.forEach(t),Teo=r(BCe," (Canine model)"),BCe.forEach(t),Feo=i(C),Sh=s(C,"LI",{});var xCe=n(Sh);CJ=s(xCe,"STRONG",{});var mRr=n(CJ);Ceo=r(mRr,"clip"),mRr.forEach(t),Meo=r(xCe," \u2014 "),Ak=s(xCe,"A",{href:!0});var fRr=n(Ak);Eeo=r(fRr,"CLIPModel"),fRr.forEach(t),yeo=r(xCe," (CLIP model)"),xCe.forEach(t),weo=i(C),Ph=s(C,"LI",{});var kCe=n(Ph);MJ=s(kCe,"STRONG",{});var gRr=n(MJ);Aeo=r(gRr,"convbert"),gRr.forEach(t),Leo=r(kCe," \u2014 "),Lk=s(kCe,"A",{href:!0});var hRr=n(Lk);Beo=r(hRr,"ConvBertModel"),hRr.forEach(t),xeo=r(kCe," (ConvBERT model)"),kCe.forEach(t),keo=i(C),$h=s(C,"LI",{});var RCe=n($h);EJ=s(RCe,"STRONG",{});var uRr=n(EJ);Reo=r(uRr,"convnext"),uRr.forEach(t),Seo=r(RCe," \u2014 "),Bk=s(RCe,"A",{href:!0});var pRr=n(Bk);Peo=r(pRr,"ConvNextModel"),pRr.forEach(t),$eo=r(RCe," (ConvNext model)"),RCe.forEach(t),Ieo=i(C),Ih=s(C,"LI",{});var SCe=n(Ih);yJ=s(SCe,"STRONG",{});var _Rr=n(yJ);jeo=r(_Rr,"ctrl"),_Rr.forEach(t),Neo=r(SCe," \u2014 "),xk=s(SCe,"A",{href:!0});var bRr=n(xk);Deo=r(bRr,"CTRLModel"),bRr.forEach(t),qeo=r(SCe," (CTRL model)"),SCe.forEach(t),Geo=i(C),jh=s(C,"LI",{});var PCe=n(jh);wJ=s(PCe,"STRONG",{});var vRr=n(wJ);Oeo=r(vRr,"deberta"),vRr.forEach(t),Xeo=r(PCe," \u2014 "),kk=s(PCe,"A",{href:!0});var TRr=n(kk);zeo=r(TRr,"DebertaModel"),TRr.forEach(t),Veo=r(PCe," (DeBERTa model)"),PCe.forEach(t),Weo=i(C),Nh=s(C,"LI",{});var $Ce=n(Nh);AJ=s($Ce,"STRONG",{});var FRr=n(AJ);Qeo=r(FRr,"deberta-v2"),FRr.forEach(t),Heo=r($Ce," \u2014 "),Rk=s($Ce,"A",{href:!0});var CRr=n(Rk);Ueo=r(CRr,"DebertaV2Model"),CRr.forEach(t),Jeo=r($Ce," (DeBERTa-v2 model)"),$Ce.forEach(t),Yeo=i(C),Dh=s(C,"LI",{});var ICe=n(Dh);LJ=s(ICe,"STRONG",{});var MRr=n(LJ);Keo=r(MRr,"deit"),MRr.forEach(t),Zeo=r(ICe," \u2014 "),Sk=s(ICe,"A",{href:!0});var ERr=n(Sk);eoo=r(ERr,"DeiTModel"),ERr.forEach(t),ooo=r(ICe," (DeiT model)"),ICe.forEach(t),roo=i(C),qh=s(C,"LI",{});var jCe=n(qh);BJ=s(jCe,"STRONG",{});var yRr=n(BJ);too=r(yRr,"detr"),yRr.forEach(t),aoo=r(jCe," \u2014 "),Pk=s(jCe,"A",{href:!0});var wRr=n(Pk);soo=r(wRr,"DetrModel"),wRr.forEach(t),noo=r(jCe," (DETR model)"),jCe.forEach(t),loo=i(C),Gh=s(C,"LI",{});var NCe=n(Gh);xJ=s(NCe,"STRONG",{});var ARr=n(xJ);ioo=r(ARr,"distilbert"),ARr.forEach(t),doo=r(NCe," \u2014 "),$k=s(NCe,"A",{href:!0});var LRr=n($k);coo=r(LRr,"DistilBertModel"),LRr.forEach(t),moo=r(NCe," (DistilBERT model)"),NCe.forEach(t),foo=i(C),Oh=s(C,"LI",{});var DCe=n(Oh);kJ=s(DCe,"STRONG",{});var BRr=n(kJ);goo=r(BRr,"dpr"),BRr.forEach(t),hoo=r(DCe," \u2014 "),Ik=s(DCe,"A",{href:!0});var xRr=n(Ik);uoo=r(xRr,"DPRQuestionEncoder"),xRr.forEach(t),poo=r(DCe," (DPR model)"),DCe.forEach(t),_oo=i(C),Xh=s(C,"LI",{});var qCe=n(Xh);RJ=s(qCe,"STRONG",{});var kRr=n(RJ);boo=r(kRr,"electra"),kRr.forEach(t),voo=r(qCe," \u2014 "),jk=s(qCe,"A",{href:!0});var RRr=n(jk);Too=r(RRr,"ElectraModel"),RRr.forEach(t),Foo=r(qCe," (ELECTRA model)"),qCe.forEach(t),Coo=i(C),zh=s(C,"LI",{});var GCe=n(zh);SJ=s(GCe,"STRONG",{});var SRr=n(SJ);Moo=r(SRr,"flaubert"),SRr.forEach(t),Eoo=r(GCe," \u2014 "),Nk=s(GCe,"A",{href:!0});var PRr=n(Nk);yoo=r(PRr,"FlaubertModel"),PRr.forEach(t),woo=r(GCe," (FlauBERT model)"),GCe.forEach(t),Aoo=i(C),Vh=s(C,"LI",{});var OCe=n(Vh);PJ=s(OCe,"STRONG",{});var $Rr=n(PJ);Loo=r($Rr,"fnet"),$Rr.forEach(t),Boo=r(OCe," \u2014 "),Dk=s(OCe,"A",{href:!0});var IRr=n(Dk);xoo=r(IRr,"FNetModel"),IRr.forEach(t),koo=r(OCe," (FNet model)"),OCe.forEach(t),Roo=i(C),Wh=s(C,"LI",{});var XCe=n(Wh);$J=s(XCe,"STRONG",{});var jRr=n($J);Soo=r(jRr,"fsmt"),jRr.forEach(t),Poo=r(XCe," \u2014 "),qk=s(XCe,"A",{href:!0});var NRr=n(qk);$oo=r(NRr,"FSMTModel"),NRr.forEach(t),Ioo=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),joo=i(C),kn=s(C,"LI",{});var D7=n(kn);IJ=s(D7,"STRONG",{});var DRr=n(IJ);Noo=r(DRr,"funnel"),DRr.forEach(t),Doo=r(D7," \u2014 "),Gk=s(D7,"A",{href:!0});var qRr=n(Gk);qoo=r(qRr,"FunnelModel"),qRr.forEach(t),Goo=r(D7," or "),Ok=s(D7,"A",{href:!0});var GRr=n(Ok);Ooo=r(GRr,"FunnelBaseModel"),GRr.forEach(t),Xoo=r(D7," (Funnel Transformer model)"),D7.forEach(t),zoo=i(C),Qh=s(C,"LI",{});var zCe=n(Qh);jJ=s(zCe,"STRONG",{});var ORr=n(jJ);Voo=r(ORr,"gpt2"),ORr.forEach(t),Woo=r(zCe," \u2014 "),Xk=s(zCe,"A",{href:!0});var XRr=n(Xk);Qoo=r(XRr,"GPT2Model"),XRr.forEach(t),Hoo=r(zCe," (OpenAI GPT-2 model)"),zCe.forEach(t),Uoo=i(C),Hh=s(C,"LI",{});var VCe=n(Hh);NJ=s(VCe,"STRONG",{});var zRr=n(NJ);Joo=r(zRr,"gpt_neo"),zRr.forEach(t),Yoo=r(VCe," \u2014 "),zk=s(VCe,"A",{href:!0});var VRr=n(zk);Koo=r(VRr,"GPTNeoModel"),VRr.forEach(t),Zoo=r(VCe," (GPT Neo model)"),VCe.forEach(t),ero=i(C),Uh=s(C,"LI",{});var WCe=n(Uh);DJ=s(WCe,"STRONG",{});var WRr=n(DJ);oro=r(WRr,"gptj"),WRr.forEach(t),rro=r(WCe," \u2014 "),Vk=s(WCe,"A",{href:!0});var QRr=n(Vk);tro=r(QRr,"GPTJModel"),QRr.forEach(t),aro=r(WCe," (GPT-J model)"),WCe.forEach(t),sro=i(C),Jh=s(C,"LI",{});var QCe=n(Jh);qJ=s(QCe,"STRONG",{});var HRr=n(qJ);nro=r(HRr,"hubert"),HRr.forEach(t),lro=r(QCe," \u2014 "),Wk=s(QCe,"A",{href:!0});var URr=n(Wk);iro=r(URr,"HubertModel"),URr.forEach(t),dro=r(QCe," (Hubert model)"),QCe.forEach(t),cro=i(C),Yh=s(C,"LI",{});var HCe=n(Yh);GJ=s(HCe,"STRONG",{});var JRr=n(GJ);mro=r(JRr,"ibert"),JRr.forEach(t),fro=r(HCe," \u2014 "),Qk=s(HCe,"A",{href:!0});var YRr=n(Qk);gro=r(YRr,"IBertModel"),YRr.forEach(t),hro=r(HCe," (I-BERT model)"),HCe.forEach(t),uro=i(C),Kh=s(C,"LI",{});var UCe=n(Kh);OJ=s(UCe,"STRONG",{});var KRr=n(OJ);pro=r(KRr,"imagegpt"),KRr.forEach(t),_ro=r(UCe," \u2014 "),Hk=s(UCe,"A",{href:!0});var ZRr=n(Hk);bro=r(ZRr,"ImageGPTModel"),ZRr.forEach(t),vro=r(UCe," (ImageGPT model)"),UCe.forEach(t),Tro=i(C),Zh=s(C,"LI",{});var JCe=n(Zh);XJ=s(JCe,"STRONG",{});var eSr=n(XJ);Fro=r(eSr,"layoutlm"),eSr.forEach(t),Cro=r(JCe," \u2014 "),Uk=s(JCe,"A",{href:!0});var oSr=n(Uk);Mro=r(oSr,"LayoutLMModel"),oSr.forEach(t),Ero=r(JCe," (LayoutLM model)"),JCe.forEach(t),yro=i(C),eu=s(C,"LI",{});var YCe=n(eu);zJ=s(YCe,"STRONG",{});var rSr=n(zJ);wro=r(rSr,"layoutlmv2"),rSr.forEach(t),Aro=r(YCe," \u2014 "),Jk=s(YCe,"A",{href:!0});var tSr=n(Jk);Lro=r(tSr,"LayoutLMv2Model"),tSr.forEach(t),Bro=r(YCe," (LayoutLMv2 model)"),YCe.forEach(t),xro=i(C),ou=s(C,"LI",{});var KCe=n(ou);VJ=s(KCe,"STRONG",{});var aSr=n(VJ);kro=r(aSr,"led"),aSr.forEach(t),Rro=r(KCe," \u2014 "),Yk=s(KCe,"A",{href:!0});var sSr=n(Yk);Sro=r(sSr,"LEDModel"),sSr.forEach(t),Pro=r(KCe," (LED model)"),KCe.forEach(t),$ro=i(C),ru=s(C,"LI",{});var ZCe=n(ru);WJ=s(ZCe,"STRONG",{});var nSr=n(WJ);Iro=r(nSr,"longformer"),nSr.forEach(t),jro=r(ZCe," \u2014 "),Kk=s(ZCe,"A",{href:!0});var lSr=n(Kk);Nro=r(lSr,"LongformerModel"),lSr.forEach(t),Dro=r(ZCe," (Longformer model)"),ZCe.forEach(t),qro=i(C),tu=s(C,"LI",{});var e4e=n(tu);QJ=s(e4e,"STRONG",{});var iSr=n(QJ);Gro=r(iSr,"luke"),iSr.forEach(t),Oro=r(e4e," \u2014 "),Zk=s(e4e,"A",{href:!0});var dSr=n(Zk);Xro=r(dSr,"LukeModel"),dSr.forEach(t),zro=r(e4e," (LUKE model)"),e4e.forEach(t),Vro=i(C),au=s(C,"LI",{});var o4e=n(au);HJ=s(o4e,"STRONG",{});var cSr=n(HJ);Wro=r(cSr,"lxmert"),cSr.forEach(t),Qro=r(o4e," \u2014 "),eR=s(o4e,"A",{href:!0});var mSr=n(eR);Hro=r(mSr,"LxmertModel"),mSr.forEach(t),Uro=r(o4e," (LXMERT model)"),o4e.forEach(t),Jro=i(C),su=s(C,"LI",{});var r4e=n(su);UJ=s(r4e,"STRONG",{});var fSr=n(UJ);Yro=r(fSr,"m2m_100"),fSr.forEach(t),Kro=r(r4e," \u2014 "),oR=s(r4e,"A",{href:!0});var gSr=n(oR);Zro=r(gSr,"M2M100Model"),gSr.forEach(t),eto=r(r4e," (M2M100 model)"),r4e.forEach(t),oto=i(C),nu=s(C,"LI",{});var t4e=n(nu);JJ=s(t4e,"STRONG",{});var hSr=n(JJ);rto=r(hSr,"marian"),hSr.forEach(t),tto=r(t4e," \u2014 "),rR=s(t4e,"A",{href:!0});var uSr=n(rR);ato=r(uSr,"MarianModel"),uSr.forEach(t),sto=r(t4e," (Marian model)"),t4e.forEach(t),nto=i(C),lu=s(C,"LI",{});var a4e=n(lu);YJ=s(a4e,"STRONG",{});var pSr=n(YJ);lto=r(pSr,"mbart"),pSr.forEach(t),ito=r(a4e," \u2014 "),tR=s(a4e,"A",{href:!0});var _Sr=n(tR);dto=r(_Sr,"MBartModel"),_Sr.forEach(t),cto=r(a4e," (mBART model)"),a4e.forEach(t),mto=i(C),iu=s(C,"LI",{});var s4e=n(iu);KJ=s(s4e,"STRONG",{});var bSr=n(KJ);fto=r(bSr,"megatron-bert"),bSr.forEach(t),gto=r(s4e," \u2014 "),aR=s(s4e,"A",{href:!0});var vSr=n(aR);hto=r(vSr,"MegatronBertModel"),vSr.forEach(t),uto=r(s4e," (MegatronBert model)"),s4e.forEach(t),pto=i(C),du=s(C,"LI",{});var n4e=n(du);ZJ=s(n4e,"STRONG",{});var TSr=n(ZJ);_to=r(TSr,"mobilebert"),TSr.forEach(t),bto=r(n4e," \u2014 "),sR=s(n4e,"A",{href:!0});var FSr=n(sR);vto=r(FSr,"MobileBertModel"),FSr.forEach(t),Tto=r(n4e," (MobileBERT model)"),n4e.forEach(t),Fto=i(C),cu=s(C,"LI",{});var l4e=n(cu);eY=s(l4e,"STRONG",{});var CSr=n(eY);Cto=r(CSr,"mpnet"),CSr.forEach(t),Mto=r(l4e," \u2014 "),nR=s(l4e,"A",{href:!0});var MSr=n(nR);Eto=r(MSr,"MPNetModel"),MSr.forEach(t),yto=r(l4e," (MPNet model)"),l4e.forEach(t),wto=i(C),mu=s(C,"LI",{});var i4e=n(mu);oY=s(i4e,"STRONG",{});var ESr=n(oY);Ato=r(ESr,"mt5"),ESr.forEach(t),Lto=r(i4e," \u2014 "),lR=s(i4e,"A",{href:!0});var ySr=n(lR);Bto=r(ySr,"MT5Model"),ySr.forEach(t),xto=r(i4e," (mT5 model)"),i4e.forEach(t),kto=i(C),fu=s(C,"LI",{});var d4e=n(fu);rY=s(d4e,"STRONG",{});var wSr=n(rY);Rto=r(wSr,"nystromformer"),wSr.forEach(t),Sto=r(d4e," \u2014 "),iR=s(d4e,"A",{href:!0});var ASr=n(iR);Pto=r(ASr,"NystromformerModel"),ASr.forEach(t),$to=r(d4e," (Nystromformer model)"),d4e.forEach(t),Ito=i(C),gu=s(C,"LI",{});var c4e=n(gu);tY=s(c4e,"STRONG",{});var LSr=n(tY);jto=r(LSr,"openai-gpt"),LSr.forEach(t),Nto=r(c4e," \u2014 "),dR=s(c4e,"A",{href:!0});var BSr=n(dR);Dto=r(BSr,"OpenAIGPTModel"),BSr.forEach(t),qto=r(c4e," (OpenAI GPT model)"),c4e.forEach(t),Gto=i(C),hu=s(C,"LI",{});var m4e=n(hu);aY=s(m4e,"STRONG",{});var xSr=n(aY);Oto=r(xSr,"pegasus"),xSr.forEach(t),Xto=r(m4e," \u2014 "),cR=s(m4e,"A",{href:!0});var kSr=n(cR);zto=r(kSr,"PegasusModel"),kSr.forEach(t),Vto=r(m4e," (Pegasus model)"),m4e.forEach(t),Wto=i(C),uu=s(C,"LI",{});var f4e=n(uu);sY=s(f4e,"STRONG",{});var RSr=n(sY);Qto=r(RSr,"perceiver"),RSr.forEach(t),Hto=r(f4e," \u2014 "),mR=s(f4e,"A",{href:!0});var SSr=n(mR);Uto=r(SSr,"PerceiverModel"),SSr.forEach(t),Jto=r(f4e," (Perceiver model)"),f4e.forEach(t),Yto=i(C),pu=s(C,"LI",{});var g4e=n(pu);nY=s(g4e,"STRONG",{});var PSr=n(nY);Kto=r(PSr,"plbart"),PSr.forEach(t),Zto=r(g4e," \u2014 "),fR=s(g4e,"A",{href:!0});var $Sr=n(fR);eao=r($Sr,"PLBartModel"),$Sr.forEach(t),oao=r(g4e," (PLBart model)"),g4e.forEach(t),rao=i(C),_u=s(C,"LI",{});var h4e=n(_u);lY=s(h4e,"STRONG",{});var ISr=n(lY);tao=r(ISr,"poolformer"),ISr.forEach(t),aao=r(h4e," \u2014 "),gR=s(h4e,"A",{href:!0});var jSr=n(gR);sao=r(jSr,"PoolFormerModel"),jSr.forEach(t),nao=r(h4e," (PoolFormer model)"),h4e.forEach(t),lao=i(C),bu=s(C,"LI",{});var u4e=n(bu);iY=s(u4e,"STRONG",{});var NSr=n(iY);iao=r(NSr,"prophetnet"),NSr.forEach(t),dao=r(u4e," \u2014 "),hR=s(u4e,"A",{href:!0});var DSr=n(hR);cao=r(DSr,"ProphetNetModel"),DSr.forEach(t),mao=r(u4e," (ProphetNet model)"),u4e.forEach(t),fao=i(C),vu=s(C,"LI",{});var p4e=n(vu);dY=s(p4e,"STRONG",{});var qSr=n(dY);gao=r(qSr,"qdqbert"),qSr.forEach(t),hao=r(p4e," \u2014 "),uR=s(p4e,"A",{href:!0});var GSr=n(uR);uao=r(GSr,"QDQBertModel"),GSr.forEach(t),pao=r(p4e," (QDQBert model)"),p4e.forEach(t),_ao=i(C),Tu=s(C,"LI",{});var _4e=n(Tu);cY=s(_4e,"STRONG",{});var OSr=n(cY);bao=r(OSr,"reformer"),OSr.forEach(t),vao=r(_4e," \u2014 "),pR=s(_4e,"A",{href:!0});var XSr=n(pR);Tao=r(XSr,"ReformerModel"),XSr.forEach(t),Fao=r(_4e," (Reformer model)"),_4e.forEach(t),Cao=i(C),Fu=s(C,"LI",{});var b4e=n(Fu);mY=s(b4e,"STRONG",{});var zSr=n(mY);Mao=r(zSr,"rembert"),zSr.forEach(t),Eao=r(b4e," \u2014 "),_R=s(b4e,"A",{href:!0});var VSr=n(_R);yao=r(VSr,"RemBertModel"),VSr.forEach(t),wao=r(b4e," (RemBERT model)"),b4e.forEach(t),Aao=i(C),Cu=s(C,"LI",{});var v4e=n(Cu);fY=s(v4e,"STRONG",{});var WSr=n(fY);Lao=r(WSr,"retribert"),WSr.forEach(t),Bao=r(v4e," \u2014 "),bR=s(v4e,"A",{href:!0});var QSr=n(bR);xao=r(QSr,"RetriBertModel"),QSr.forEach(t),kao=r(v4e," (RetriBERT model)"),v4e.forEach(t),Rao=i(C),Mu=s(C,"LI",{});var T4e=n(Mu);gY=s(T4e,"STRONG",{});var HSr=n(gY);Sao=r(HSr,"roberta"),HSr.forEach(t),Pao=r(T4e," \u2014 "),vR=s(T4e,"A",{href:!0});var USr=n(vR);$ao=r(USr,"RobertaModel"),USr.forEach(t),Iao=r(T4e," (RoBERTa model)"),T4e.forEach(t),jao=i(C),Eu=s(C,"LI",{});var F4e=n(Eu);hY=s(F4e,"STRONG",{});var JSr=n(hY);Nao=r(JSr,"roformer"),JSr.forEach(t),Dao=r(F4e," \u2014 "),TR=s(F4e,"A",{href:!0});var YSr=n(TR);qao=r(YSr,"RoFormerModel"),YSr.forEach(t),Gao=r(F4e," (RoFormer model)"),F4e.forEach(t),Oao=i(C),yu=s(C,"LI",{});var C4e=n(yu);uY=s(C4e,"STRONG",{});var KSr=n(uY);Xao=r(KSr,"segformer"),KSr.forEach(t),zao=r(C4e," \u2014 "),FR=s(C4e,"A",{href:!0});var ZSr=n(FR);Vao=r(ZSr,"SegformerModel"),ZSr.forEach(t),Wao=r(C4e," (SegFormer model)"),C4e.forEach(t),Qao=i(C),wu=s(C,"LI",{});var M4e=n(wu);pY=s(M4e,"STRONG",{});var ePr=n(pY);Hao=r(ePr,"sew"),ePr.forEach(t),Uao=r(M4e," \u2014 "),CR=s(M4e,"A",{href:!0});var oPr=n(CR);Jao=r(oPr,"SEWModel"),oPr.forEach(t),Yao=r(M4e," (SEW model)"),M4e.forEach(t),Kao=i(C),Au=s(C,"LI",{});var E4e=n(Au);_Y=s(E4e,"STRONG",{});var rPr=n(_Y);Zao=r(rPr,"sew-d"),rPr.forEach(t),eso=r(E4e," \u2014 "),MR=s(E4e,"A",{href:!0});var tPr=n(MR);oso=r(tPr,"SEWDModel"),tPr.forEach(t),rso=r(E4e," (SEW-D model)"),E4e.forEach(t),tso=i(C),Lu=s(C,"LI",{});var y4e=n(Lu);bY=s(y4e,"STRONG",{});var aPr=n(bY);aso=r(aPr,"speech_to_text"),aPr.forEach(t),sso=r(y4e," \u2014 "),ER=s(y4e,"A",{href:!0});var sPr=n(ER);nso=r(sPr,"Speech2TextModel"),sPr.forEach(t),lso=r(y4e," (Speech2Text model)"),y4e.forEach(t),iso=i(C),Bu=s(C,"LI",{});var w4e=n(Bu);vY=s(w4e,"STRONG",{});var nPr=n(vY);dso=r(nPr,"splinter"),nPr.forEach(t),cso=r(w4e," \u2014 "),yR=s(w4e,"A",{href:!0});var lPr=n(yR);mso=r(lPr,"SplinterModel"),lPr.forEach(t),fso=r(w4e," (Splinter model)"),w4e.forEach(t),gso=i(C),xu=s(C,"LI",{});var A4e=n(xu);TY=s(A4e,"STRONG",{});var iPr=n(TY);hso=r(iPr,"squeezebert"),iPr.forEach(t),uso=r(A4e," \u2014 "),wR=s(A4e,"A",{href:!0});var dPr=n(wR);pso=r(dPr,"SqueezeBertModel"),dPr.forEach(t),_so=r(A4e," (SqueezeBERT model)"),A4e.forEach(t),bso=i(C),ku=s(C,"LI",{});var L4e=n(ku);FY=s(L4e,"STRONG",{});var cPr=n(FY);vso=r(cPr,"swin"),cPr.forEach(t),Tso=r(L4e," \u2014 "),AR=s(L4e,"A",{href:!0});var mPr=n(AR);Fso=r(mPr,"SwinModel"),mPr.forEach(t),Cso=r(L4e," (Swin model)"),L4e.forEach(t),Mso=i(C),Ru=s(C,"LI",{});var B4e=n(Ru);CY=s(B4e,"STRONG",{});var fPr=n(CY);Eso=r(fPr,"t5"),fPr.forEach(t),yso=r(B4e," \u2014 "),LR=s(B4e,"A",{href:!0});var gPr=n(LR);wso=r(gPr,"T5Model"),gPr.forEach(t),Aso=r(B4e," (T5 model)"),B4e.forEach(t),Lso=i(C),Su=s(C,"LI",{});var x4e=n(Su);MY=s(x4e,"STRONG",{});var hPr=n(MY);Bso=r(hPr,"tapas"),hPr.forEach(t),xso=r(x4e," \u2014 "),BR=s(x4e,"A",{href:!0});var uPr=n(BR);kso=r(uPr,"TapasModel"),uPr.forEach(t),Rso=r(x4e," (TAPAS model)"),x4e.forEach(t),Sso=i(C),Pu=s(C,"LI",{});var k4e=n(Pu);EY=s(k4e,"STRONG",{});var pPr=n(EY);Pso=r(pPr,"transfo-xl"),pPr.forEach(t),$so=r(k4e," \u2014 "),xR=s(k4e,"A",{href:!0});var _Pr=n(xR);Iso=r(_Pr,"TransfoXLModel"),_Pr.forEach(t),jso=r(k4e," (Transformer-XL model)"),k4e.forEach(t),Nso=i(C),$u=s(C,"LI",{});var R4e=n($u);yY=s(R4e,"STRONG",{});var bPr=n(yY);Dso=r(bPr,"unispeech"),bPr.forEach(t),qso=r(R4e," \u2014 "),kR=s(R4e,"A",{href:!0});var vPr=n(kR);Gso=r(vPr,"UniSpeechModel"),vPr.forEach(t),Oso=r(R4e," (UniSpeech model)"),R4e.forEach(t),Xso=i(C),Iu=s(C,"LI",{});var S4e=n(Iu);wY=s(S4e,"STRONG",{});var TPr=n(wY);zso=r(TPr,"unispeech-sat"),TPr.forEach(t),Vso=r(S4e," \u2014 "),RR=s(S4e,"A",{href:!0});var FPr=n(RR);Wso=r(FPr,"UniSpeechSatModel"),FPr.forEach(t),Qso=r(S4e," (UniSpeechSat model)"),S4e.forEach(t),Hso=i(C),ju=s(C,"LI",{});var P4e=n(ju);AY=s(P4e,"STRONG",{});var CPr=n(AY);Uso=r(CPr,"vilt"),CPr.forEach(t),Jso=r(P4e," \u2014 "),SR=s(P4e,"A",{href:!0});var MPr=n(SR);Yso=r(MPr,"ViltModel"),MPr.forEach(t),Kso=r(P4e," (ViLT model)"),P4e.forEach(t),Zso=i(C),Nu=s(C,"LI",{});var $4e=n(Nu);LY=s($4e,"STRONG",{});var EPr=n(LY);eno=r(EPr,"vision-text-dual-encoder"),EPr.forEach(t),ono=r($4e," \u2014 "),PR=s($4e,"A",{href:!0});var yPr=n(PR);rno=r(yPr,"VisionTextDualEncoderModel"),yPr.forEach(t),tno=r($4e," (VisionTextDualEncoder model)"),$4e.forEach(t),ano=i(C),Du=s(C,"LI",{});var I4e=n(Du);BY=s(I4e,"STRONG",{});var wPr=n(BY);sno=r(wPr,"visual_bert"),wPr.forEach(t),nno=r(I4e," \u2014 "),$R=s(I4e,"A",{href:!0});var APr=n($R);lno=r(APr,"VisualBertModel"),APr.forEach(t),ino=r(I4e," (VisualBert model)"),I4e.forEach(t),dno=i(C),qu=s(C,"LI",{});var j4e=n(qu);xY=s(j4e,"STRONG",{});var LPr=n(xY);cno=r(LPr,"vit"),LPr.forEach(t),mno=r(j4e," \u2014 "),IR=s(j4e,"A",{href:!0});var BPr=n(IR);fno=r(BPr,"ViTModel"),BPr.forEach(t),gno=r(j4e," (ViT model)"),j4e.forEach(t),hno=i(C),Gu=s(C,"LI",{});var N4e=n(Gu);kY=s(N4e,"STRONG",{});var xPr=n(kY);uno=r(xPr,"vit_mae"),xPr.forEach(t),pno=r(N4e," \u2014 "),jR=s(N4e,"A",{href:!0});var kPr=n(jR);_no=r(kPr,"ViTMAEModel"),kPr.forEach(t),bno=r(N4e," (ViTMAE model)"),N4e.forEach(t),vno=i(C),Ou=s(C,"LI",{});var D4e=n(Ou);RY=s(D4e,"STRONG",{});var RPr=n(RY);Tno=r(RPr,"wav2vec2"),RPr.forEach(t),Fno=r(D4e," \u2014 "),NR=s(D4e,"A",{href:!0});var SPr=n(NR);Cno=r(SPr,"Wav2Vec2Model"),SPr.forEach(t),Mno=r(D4e," (Wav2Vec2 model)"),D4e.forEach(t),Eno=i(C),Xu=s(C,"LI",{});var q4e=n(Xu);SY=s(q4e,"STRONG",{});var PPr=n(SY);yno=r(PPr,"wavlm"),PPr.forEach(t),wno=r(q4e," \u2014 "),DR=s(q4e,"A",{href:!0});var $Pr=n(DR);Ano=r($Pr,"WavLMModel"),$Pr.forEach(t),Lno=r(q4e," (WavLM model)"),q4e.forEach(t),Bno=i(C),zu=s(C,"LI",{});var G4e=n(zu);PY=s(G4e,"STRONG",{});var IPr=n(PY);xno=r(IPr,"xglm"),IPr.forEach(t),kno=r(G4e," \u2014 "),qR=s(G4e,"A",{href:!0});var jPr=n(qR);Rno=r(jPr,"XGLMModel"),jPr.forEach(t),Sno=r(G4e," (XGLM model)"),G4e.forEach(t),Pno=i(C),Vu=s(C,"LI",{});var O4e=n(Vu);$Y=s(O4e,"STRONG",{});var NPr=n($Y);$no=r(NPr,"xlm"),NPr.forEach(t),Ino=r(O4e," \u2014 "),GR=s(O4e,"A",{href:!0});var DPr=n(GR);jno=r(DPr,"XLMModel"),DPr.forEach(t),Nno=r(O4e," (XLM model)"),O4e.forEach(t),Dno=i(C),Wu=s(C,"LI",{});var X4e=n(Wu);IY=s(X4e,"STRONG",{});var qPr=n(IY);qno=r(qPr,"xlm-prophetnet"),qPr.forEach(t),Gno=r(X4e," \u2014 "),OR=s(X4e,"A",{href:!0});var GPr=n(OR);Ono=r(GPr,"XLMProphetNetModel"),GPr.forEach(t),Xno=r(X4e," (XLMProphetNet model)"),X4e.forEach(t),zno=i(C),Qu=s(C,"LI",{});var z4e=n(Qu);jY=s(z4e,"STRONG",{});var OPr=n(jY);Vno=r(OPr,"xlm-roberta"),OPr.forEach(t),Wno=r(z4e," \u2014 "),XR=s(z4e,"A",{href:!0});var XPr=n(XR);Qno=r(XPr,"XLMRobertaModel"),XPr.forEach(t),Hno=r(z4e," (XLM-RoBERTa model)"),z4e.forEach(t),Uno=i(C),Hu=s(C,"LI",{});var V4e=n(Hu);NY=s(V4e,"STRONG",{});var zPr=n(NY);Jno=r(zPr,"xlm-roberta-xl"),zPr.forEach(t),Yno=r(V4e," \u2014 "),zR=s(V4e,"A",{href:!0});var VPr=n(zR);Kno=r(VPr,"XLMRobertaXLModel"),VPr.forEach(t),Zno=r(V4e," (XLM-RoBERTa-XL model)"),V4e.forEach(t),elo=i(C),Uu=s(C,"LI",{});var W4e=n(Uu);DY=s(W4e,"STRONG",{});var WPr=n(DY);olo=r(WPr,"xlnet"),WPr.forEach(t),rlo=r(W4e," \u2014 "),VR=s(W4e,"A",{href:!0});var QPr=n(VR);tlo=r(QPr,"XLNetModel"),QPr.forEach(t),alo=r(W4e," (XLNet model)"),W4e.forEach(t),slo=i(C),Ju=s(C,"LI",{});var Q4e=n(Ju);qY=s(Q4e,"STRONG",{});var HPr=n(qY);nlo=r(HPr,"yoso"),HPr.forEach(t),llo=r(Q4e," \u2014 "),WR=s(Q4e,"A",{href:!0});var UPr=n(WR);ilo=r(UPr,"YosoModel"),UPr.forEach(t),dlo=r(Q4e," (YOSO model)"),Q4e.forEach(t),C.forEach(t),clo=i(St),Yu=s(St,"P",{});var H4e=n(Yu);mlo=r(H4e,"The model is set in evaluation mode by default using "),GY=s(H4e,"CODE",{});var JPr=n(GY);flo=r(JPr,"model.eval()"),JPr.forEach(t),glo=r(H4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OY=s(H4e,"CODE",{});var YPr=n(OY);hlo=r(YPr,"model.train()"),YPr.forEach(t),H4e.forEach(t),ulo=i(St),XY=s(St,"P",{});var KPr=n(XY);plo=r(KPr,"Examples:"),KPr.forEach(t),_lo=i(St),f(X5.$$.fragment,St),St.forEach(t),Nn.forEach(t),w8e=i(d),Xi=s(d,"H2",{class:!0});var SBe=n(Xi);Ku=s(SBe,"A",{id:!0,class:!0,href:!0});var ZPr=n(Ku);zY=s(ZPr,"SPAN",{});var e$r=n(zY);f(z5.$$.fragment,e$r),e$r.forEach(t),ZPr.forEach(t),blo=i(SBe),VY=s(SBe,"SPAN",{});var o$r=n(VY);vlo=r(o$r,"AutoModelForPreTraining"),o$r.forEach(t),SBe.forEach(t),A8e=i(d),Wo=s(d,"DIV",{class:!0});var qn=n(Wo);f(V5.$$.fragment,qn),Tlo=i(qn),zi=s(qn,"P",{});var ZX=n(zi);Flo=r(ZX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WY=s(ZX,"CODE",{});var r$r=n(WY);Clo=r(r$r,"from_pretrained()"),r$r.forEach(t),Mlo=r(ZX,"class method or the "),QY=s(ZX,"CODE",{});var t$r=n(QY);Elo=r(t$r,"from_config()"),t$r.forEach(t),ylo=r(ZX,`class
method.`),ZX.forEach(t),wlo=i(qn),W5=s(qn,"P",{});var PBe=n(W5);Alo=r(PBe,"This class cannot be instantiated directly using "),HY=s(PBe,"CODE",{});var a$r=n(HY);Llo=r(a$r,"__init__()"),a$r.forEach(t),Blo=r(PBe," (throws an error)."),PBe.forEach(t),xlo=i(qn),Dr=s(qn,"DIV",{class:!0});var Gn=n(Dr);f(Q5.$$.fragment,Gn),klo=i(Gn),UY=s(Gn,"P",{});var s$r=n(UY);Rlo=r(s$r,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),s$r.forEach(t),Slo=i(Gn),Vi=s(Gn,"P",{});var ez=n(Vi);Plo=r(ez,`Note:
Loading a model from its configuration file does `),JY=s(ez,"STRONG",{});var n$r=n(JY);$lo=r(n$r,"not"),n$r.forEach(t),Ilo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=s(ez,"CODE",{});var l$r=n(YY);jlo=r(l$r,"from_pretrained()"),l$r.forEach(t),Nlo=r(ez,"to load the model weights."),ez.forEach(t),Dlo=i(Gn),KY=s(Gn,"P",{});var i$r=n(KY);qlo=r(i$r,"Examples:"),i$r.forEach(t),Glo=i(Gn),f(H5.$$.fragment,Gn),Gn.forEach(t),Olo=i(qn),ke=s(qn,"DIV",{class:!0});var Pt=n(ke);f(U5.$$.fragment,Pt),Xlo=i(Pt),ZY=s(Pt,"P",{});var d$r=n(ZY);zlo=r(d$r,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d$r.forEach(t),Vlo=i(Pt),qa=s(Pt,"P",{});var c3=n(qa);Wlo=r(c3,"The model class to instantiate is selected based on the "),eK=s(c3,"CODE",{});var c$r=n(eK);Qlo=r(c$r,"model_type"),c$r.forEach(t),Hlo=r(c3,` property of the config object (either
passed as an argument or loaded from `),oK=s(c3,"CODE",{});var m$r=n(oK);Ulo=r(m$r,"pretrained_model_name_or_path"),m$r.forEach(t),Jlo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rK=s(c3,"CODE",{});var f$r=n(rK);Ylo=r(f$r,"pretrained_model_name_or_path"),f$r.forEach(t),Klo=r(c3,":"),c3.forEach(t),Zlo=i(Pt),k=s(Pt,"UL",{});var S=n(k);Zu=s(S,"LI",{});var U4e=n(Zu);tK=s(U4e,"STRONG",{});var g$r=n(tK);eio=r(g$r,"albert"),g$r.forEach(t),oio=r(U4e," \u2014 "),QR=s(U4e,"A",{href:!0});var h$r=n(QR);rio=r(h$r,"AlbertForPreTraining"),h$r.forEach(t),tio=r(U4e," (ALBERT model)"),U4e.forEach(t),aio=i(S),ep=s(S,"LI",{});var J4e=n(ep);aK=s(J4e,"STRONG",{});var u$r=n(aK);sio=r(u$r,"bart"),u$r.forEach(t),nio=r(J4e," \u2014 "),HR=s(J4e,"A",{href:!0});var p$r=n(HR);lio=r(p$r,"BartForConditionalGeneration"),p$r.forEach(t),iio=r(J4e," (BART model)"),J4e.forEach(t),dio=i(S),op=s(S,"LI",{});var Y4e=n(op);sK=s(Y4e,"STRONG",{});var _$r=n(sK);cio=r(_$r,"bert"),_$r.forEach(t),mio=r(Y4e," \u2014 "),UR=s(Y4e,"A",{href:!0});var b$r=n(UR);fio=r(b$r,"BertForPreTraining"),b$r.forEach(t),gio=r(Y4e," (BERT model)"),Y4e.forEach(t),hio=i(S),rp=s(S,"LI",{});var K4e=n(rp);nK=s(K4e,"STRONG",{});var v$r=n(nK);uio=r(v$r,"big_bird"),v$r.forEach(t),pio=r(K4e," \u2014 "),JR=s(K4e,"A",{href:!0});var T$r=n(JR);_io=r(T$r,"BigBirdForPreTraining"),T$r.forEach(t),bio=r(K4e," (BigBird model)"),K4e.forEach(t),vio=i(S),tp=s(S,"LI",{});var Z4e=n(tp);lK=s(Z4e,"STRONG",{});var F$r=n(lK);Tio=r(F$r,"camembert"),F$r.forEach(t),Fio=r(Z4e," \u2014 "),YR=s(Z4e,"A",{href:!0});var C$r=n(YR);Cio=r(C$r,"CamembertForMaskedLM"),C$r.forEach(t),Mio=r(Z4e," (CamemBERT model)"),Z4e.forEach(t),Eio=i(S),ap=s(S,"LI",{});var eMe=n(ap);iK=s(eMe,"STRONG",{});var M$r=n(iK);yio=r(M$r,"ctrl"),M$r.forEach(t),wio=r(eMe," \u2014 "),KR=s(eMe,"A",{href:!0});var E$r=n(KR);Aio=r(E$r,"CTRLLMHeadModel"),E$r.forEach(t),Lio=r(eMe," (CTRL model)"),eMe.forEach(t),Bio=i(S),sp=s(S,"LI",{});var oMe=n(sp);dK=s(oMe,"STRONG",{});var y$r=n(dK);xio=r(y$r,"deberta"),y$r.forEach(t),kio=r(oMe," \u2014 "),ZR=s(oMe,"A",{href:!0});var w$r=n(ZR);Rio=r(w$r,"DebertaForMaskedLM"),w$r.forEach(t),Sio=r(oMe," (DeBERTa model)"),oMe.forEach(t),Pio=i(S),np=s(S,"LI",{});var rMe=n(np);cK=s(rMe,"STRONG",{});var A$r=n(cK);$io=r(A$r,"deberta-v2"),A$r.forEach(t),Iio=r(rMe," \u2014 "),eS=s(rMe,"A",{href:!0});var L$r=n(eS);jio=r(L$r,"DebertaV2ForMaskedLM"),L$r.forEach(t),Nio=r(rMe," (DeBERTa-v2 model)"),rMe.forEach(t),Dio=i(S),lp=s(S,"LI",{});var tMe=n(lp);mK=s(tMe,"STRONG",{});var B$r=n(mK);qio=r(B$r,"distilbert"),B$r.forEach(t),Gio=r(tMe," \u2014 "),oS=s(tMe,"A",{href:!0});var x$r=n(oS);Oio=r(x$r,"DistilBertForMaskedLM"),x$r.forEach(t),Xio=r(tMe," (DistilBERT model)"),tMe.forEach(t),zio=i(S),ip=s(S,"LI",{});var aMe=n(ip);fK=s(aMe,"STRONG",{});var k$r=n(fK);Vio=r(k$r,"electra"),k$r.forEach(t),Wio=r(aMe," \u2014 "),rS=s(aMe,"A",{href:!0});var R$r=n(rS);Qio=r(R$r,"ElectraForPreTraining"),R$r.forEach(t),Hio=r(aMe," (ELECTRA model)"),aMe.forEach(t),Uio=i(S),dp=s(S,"LI",{});var sMe=n(dp);gK=s(sMe,"STRONG",{});var S$r=n(gK);Jio=r(S$r,"flaubert"),S$r.forEach(t),Yio=r(sMe," \u2014 "),tS=s(sMe,"A",{href:!0});var P$r=n(tS);Kio=r(P$r,"FlaubertWithLMHeadModel"),P$r.forEach(t),Zio=r(sMe," (FlauBERT model)"),sMe.forEach(t),edo=i(S),cp=s(S,"LI",{});var nMe=n(cp);hK=s(nMe,"STRONG",{});var $$r=n(hK);odo=r($$r,"fnet"),$$r.forEach(t),rdo=r(nMe," \u2014 "),aS=s(nMe,"A",{href:!0});var I$r=n(aS);tdo=r(I$r,"FNetForPreTraining"),I$r.forEach(t),ado=r(nMe," (FNet model)"),nMe.forEach(t),sdo=i(S),mp=s(S,"LI",{});var lMe=n(mp);uK=s(lMe,"STRONG",{});var j$r=n(uK);ndo=r(j$r,"fsmt"),j$r.forEach(t),ldo=r(lMe," \u2014 "),sS=s(lMe,"A",{href:!0});var N$r=n(sS);ido=r(N$r,"FSMTForConditionalGeneration"),N$r.forEach(t),ddo=r(lMe," (FairSeq Machine-Translation model)"),lMe.forEach(t),cdo=i(S),fp=s(S,"LI",{});var iMe=n(fp);pK=s(iMe,"STRONG",{});var D$r=n(pK);mdo=r(D$r,"funnel"),D$r.forEach(t),fdo=r(iMe," \u2014 "),nS=s(iMe,"A",{href:!0});var q$r=n(nS);gdo=r(q$r,"FunnelForPreTraining"),q$r.forEach(t),hdo=r(iMe," (Funnel Transformer model)"),iMe.forEach(t),udo=i(S),gp=s(S,"LI",{});var dMe=n(gp);_K=s(dMe,"STRONG",{});var G$r=n(_K);pdo=r(G$r,"gpt2"),G$r.forEach(t),_do=r(dMe," \u2014 "),lS=s(dMe,"A",{href:!0});var O$r=n(lS);bdo=r(O$r,"GPT2LMHeadModel"),O$r.forEach(t),vdo=r(dMe," (OpenAI GPT-2 model)"),dMe.forEach(t),Tdo=i(S),hp=s(S,"LI",{});var cMe=n(hp);bK=s(cMe,"STRONG",{});var X$r=n(bK);Fdo=r(X$r,"ibert"),X$r.forEach(t),Cdo=r(cMe," \u2014 "),iS=s(cMe,"A",{href:!0});var z$r=n(iS);Mdo=r(z$r,"IBertForMaskedLM"),z$r.forEach(t),Edo=r(cMe," (I-BERT model)"),cMe.forEach(t),ydo=i(S),up=s(S,"LI",{});var mMe=n(up);vK=s(mMe,"STRONG",{});var V$r=n(vK);wdo=r(V$r,"layoutlm"),V$r.forEach(t),Ado=r(mMe," \u2014 "),dS=s(mMe,"A",{href:!0});var W$r=n(dS);Ldo=r(W$r,"LayoutLMForMaskedLM"),W$r.forEach(t),Bdo=r(mMe," (LayoutLM model)"),mMe.forEach(t),xdo=i(S),pp=s(S,"LI",{});var fMe=n(pp);TK=s(fMe,"STRONG",{});var Q$r=n(TK);kdo=r(Q$r,"longformer"),Q$r.forEach(t),Rdo=r(fMe," \u2014 "),cS=s(fMe,"A",{href:!0});var H$r=n(cS);Sdo=r(H$r,"LongformerForMaskedLM"),H$r.forEach(t),Pdo=r(fMe," (Longformer model)"),fMe.forEach(t),$do=i(S),_p=s(S,"LI",{});var gMe=n(_p);FK=s(gMe,"STRONG",{});var U$r=n(FK);Ido=r(U$r,"lxmert"),U$r.forEach(t),jdo=r(gMe," \u2014 "),mS=s(gMe,"A",{href:!0});var J$r=n(mS);Ndo=r(J$r,"LxmertForPreTraining"),J$r.forEach(t),Ddo=r(gMe," (LXMERT model)"),gMe.forEach(t),qdo=i(S),bp=s(S,"LI",{});var hMe=n(bp);CK=s(hMe,"STRONG",{});var Y$r=n(CK);Gdo=r(Y$r,"megatron-bert"),Y$r.forEach(t),Odo=r(hMe," \u2014 "),fS=s(hMe,"A",{href:!0});var K$r=n(fS);Xdo=r(K$r,"MegatronBertForPreTraining"),K$r.forEach(t),zdo=r(hMe," (MegatronBert model)"),hMe.forEach(t),Vdo=i(S),vp=s(S,"LI",{});var uMe=n(vp);MK=s(uMe,"STRONG",{});var Z$r=n(MK);Wdo=r(Z$r,"mobilebert"),Z$r.forEach(t),Qdo=r(uMe," \u2014 "),gS=s(uMe,"A",{href:!0});var eIr=n(gS);Hdo=r(eIr,"MobileBertForPreTraining"),eIr.forEach(t),Udo=r(uMe," (MobileBERT model)"),uMe.forEach(t),Jdo=i(S),Tp=s(S,"LI",{});var pMe=n(Tp);EK=s(pMe,"STRONG",{});var oIr=n(EK);Ydo=r(oIr,"mpnet"),oIr.forEach(t),Kdo=r(pMe," \u2014 "),hS=s(pMe,"A",{href:!0});var rIr=n(hS);Zdo=r(rIr,"MPNetForMaskedLM"),rIr.forEach(t),eco=r(pMe," (MPNet model)"),pMe.forEach(t),oco=i(S),Fp=s(S,"LI",{});var _Me=n(Fp);yK=s(_Me,"STRONG",{});var tIr=n(yK);rco=r(tIr,"openai-gpt"),tIr.forEach(t),tco=r(_Me," \u2014 "),uS=s(_Me,"A",{href:!0});var aIr=n(uS);aco=r(aIr,"OpenAIGPTLMHeadModel"),aIr.forEach(t),sco=r(_Me," (OpenAI GPT model)"),_Me.forEach(t),nco=i(S),Cp=s(S,"LI",{});var bMe=n(Cp);wK=s(bMe,"STRONG",{});var sIr=n(wK);lco=r(sIr,"retribert"),sIr.forEach(t),ico=r(bMe," \u2014 "),pS=s(bMe,"A",{href:!0});var nIr=n(pS);dco=r(nIr,"RetriBertModel"),nIr.forEach(t),cco=r(bMe," (RetriBERT model)"),bMe.forEach(t),mco=i(S),Mp=s(S,"LI",{});var vMe=n(Mp);AK=s(vMe,"STRONG",{});var lIr=n(AK);fco=r(lIr,"roberta"),lIr.forEach(t),gco=r(vMe," \u2014 "),_S=s(vMe,"A",{href:!0});var iIr=n(_S);hco=r(iIr,"RobertaForMaskedLM"),iIr.forEach(t),uco=r(vMe," (RoBERTa model)"),vMe.forEach(t),pco=i(S),Ep=s(S,"LI",{});var TMe=n(Ep);LK=s(TMe,"STRONG",{});var dIr=n(LK);_co=r(dIr,"squeezebert"),dIr.forEach(t),bco=r(TMe," \u2014 "),bS=s(TMe,"A",{href:!0});var cIr=n(bS);vco=r(cIr,"SqueezeBertForMaskedLM"),cIr.forEach(t),Tco=r(TMe," (SqueezeBERT model)"),TMe.forEach(t),Fco=i(S),yp=s(S,"LI",{});var FMe=n(yp);BK=s(FMe,"STRONG",{});var mIr=n(BK);Cco=r(mIr,"t5"),mIr.forEach(t),Mco=r(FMe," \u2014 "),vS=s(FMe,"A",{href:!0});var fIr=n(vS);Eco=r(fIr,"T5ForConditionalGeneration"),fIr.forEach(t),yco=r(FMe," (T5 model)"),FMe.forEach(t),wco=i(S),wp=s(S,"LI",{});var CMe=n(wp);xK=s(CMe,"STRONG",{});var gIr=n(xK);Aco=r(gIr,"tapas"),gIr.forEach(t),Lco=r(CMe," \u2014 "),TS=s(CMe,"A",{href:!0});var hIr=n(TS);Bco=r(hIr,"TapasForMaskedLM"),hIr.forEach(t),xco=r(CMe," (TAPAS model)"),CMe.forEach(t),kco=i(S),Ap=s(S,"LI",{});var MMe=n(Ap);kK=s(MMe,"STRONG",{});var uIr=n(kK);Rco=r(uIr,"transfo-xl"),uIr.forEach(t),Sco=r(MMe," \u2014 "),FS=s(MMe,"A",{href:!0});var pIr=n(FS);Pco=r(pIr,"TransfoXLLMHeadModel"),pIr.forEach(t),$co=r(MMe," (Transformer-XL model)"),MMe.forEach(t),Ico=i(S),Lp=s(S,"LI",{});var EMe=n(Lp);RK=s(EMe,"STRONG",{});var _Ir=n(RK);jco=r(_Ir,"unispeech"),_Ir.forEach(t),Nco=r(EMe," \u2014 "),CS=s(EMe,"A",{href:!0});var bIr=n(CS);Dco=r(bIr,"UniSpeechForPreTraining"),bIr.forEach(t),qco=r(EMe," (UniSpeech model)"),EMe.forEach(t),Gco=i(S),Bp=s(S,"LI",{});var yMe=n(Bp);SK=s(yMe,"STRONG",{});var vIr=n(SK);Oco=r(vIr,"unispeech-sat"),vIr.forEach(t),Xco=r(yMe," \u2014 "),MS=s(yMe,"A",{href:!0});var TIr=n(MS);zco=r(TIr,"UniSpeechSatForPreTraining"),TIr.forEach(t),Vco=r(yMe," (UniSpeechSat model)"),yMe.forEach(t),Wco=i(S),xp=s(S,"LI",{});var wMe=n(xp);PK=s(wMe,"STRONG",{});var FIr=n(PK);Qco=r(FIr,"visual_bert"),FIr.forEach(t),Hco=r(wMe," \u2014 "),ES=s(wMe,"A",{href:!0});var CIr=n(ES);Uco=r(CIr,"VisualBertForPreTraining"),CIr.forEach(t),Jco=r(wMe," (VisualBert model)"),wMe.forEach(t),Yco=i(S),kp=s(S,"LI",{});var AMe=n(kp);$K=s(AMe,"STRONG",{});var MIr=n($K);Kco=r(MIr,"vit_mae"),MIr.forEach(t),Zco=r(AMe," \u2014 "),yS=s(AMe,"A",{href:!0});var EIr=n(yS);emo=r(EIr,"ViTMAEForPreTraining"),EIr.forEach(t),omo=r(AMe," (ViTMAE model)"),AMe.forEach(t),rmo=i(S),Rp=s(S,"LI",{});var LMe=n(Rp);IK=s(LMe,"STRONG",{});var yIr=n(IK);tmo=r(yIr,"wav2vec2"),yIr.forEach(t),amo=r(LMe," \u2014 "),wS=s(LMe,"A",{href:!0});var wIr=n(wS);smo=r(wIr,"Wav2Vec2ForPreTraining"),wIr.forEach(t),nmo=r(LMe," (Wav2Vec2 model)"),LMe.forEach(t),lmo=i(S),Sp=s(S,"LI",{});var BMe=n(Sp);jK=s(BMe,"STRONG",{});var AIr=n(jK);imo=r(AIr,"xlm"),AIr.forEach(t),dmo=r(BMe," \u2014 "),AS=s(BMe,"A",{href:!0});var LIr=n(AS);cmo=r(LIr,"XLMWithLMHeadModel"),LIr.forEach(t),mmo=r(BMe," (XLM model)"),BMe.forEach(t),fmo=i(S),Pp=s(S,"LI",{});var xMe=n(Pp);NK=s(xMe,"STRONG",{});var BIr=n(NK);gmo=r(BIr,"xlm-roberta"),BIr.forEach(t),hmo=r(xMe," \u2014 "),LS=s(xMe,"A",{href:!0});var xIr=n(LS);umo=r(xIr,"XLMRobertaForMaskedLM"),xIr.forEach(t),pmo=r(xMe," (XLM-RoBERTa model)"),xMe.forEach(t),_mo=i(S),$p=s(S,"LI",{});var kMe=n($p);DK=s(kMe,"STRONG",{});var kIr=n(DK);bmo=r(kIr,"xlm-roberta-xl"),kIr.forEach(t),vmo=r(kMe," \u2014 "),BS=s(kMe,"A",{href:!0});var RIr=n(BS);Tmo=r(RIr,"XLMRobertaXLForMaskedLM"),RIr.forEach(t),Fmo=r(kMe," (XLM-RoBERTa-XL model)"),kMe.forEach(t),Cmo=i(S),Ip=s(S,"LI",{});var RMe=n(Ip);qK=s(RMe,"STRONG",{});var SIr=n(qK);Mmo=r(SIr,"xlnet"),SIr.forEach(t),Emo=r(RMe," \u2014 "),xS=s(RMe,"A",{href:!0});var PIr=n(xS);ymo=r(PIr,"XLNetLMHeadModel"),PIr.forEach(t),wmo=r(RMe," (XLNet model)"),RMe.forEach(t),S.forEach(t),Amo=i(Pt),jp=s(Pt,"P",{});var SMe=n(jp);Lmo=r(SMe,"The model is set in evaluation mode by default using "),GK=s(SMe,"CODE",{});var $Ir=n(GK);Bmo=r($Ir,"model.eval()"),$Ir.forEach(t),xmo=r(SMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OK=s(SMe,"CODE",{});var IIr=n(OK);kmo=r(IIr,"model.train()"),IIr.forEach(t),SMe.forEach(t),Rmo=i(Pt),XK=s(Pt,"P",{});var jIr=n(XK);Smo=r(jIr,"Examples:"),jIr.forEach(t),Pmo=i(Pt),f(J5.$$.fragment,Pt),Pt.forEach(t),qn.forEach(t),L8e=i(d),Wi=s(d,"H2",{class:!0});var $Be=n(Wi);Np=s($Be,"A",{id:!0,class:!0,href:!0});var NIr=n(Np);zK=s(NIr,"SPAN",{});var DIr=n(zK);f(Y5.$$.fragment,DIr),DIr.forEach(t),NIr.forEach(t),$mo=i($Be),VK=s($Be,"SPAN",{});var qIr=n(VK);Imo=r(qIr,"AutoModelForCausalLM"),qIr.forEach(t),$Be.forEach(t),B8e=i(d),Qo=s(d,"DIV",{class:!0});var On=n(Qo);f(K5.$$.fragment,On),jmo=i(On),Qi=s(On,"P",{});var oz=n(Qi);Nmo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=s(oz,"CODE",{});var GIr=n(WK);Dmo=r(GIr,"from_pretrained()"),GIr.forEach(t),qmo=r(oz,"class method or the "),QK=s(oz,"CODE",{});var OIr=n(QK);Gmo=r(OIr,"from_config()"),OIr.forEach(t),Omo=r(oz,`class
method.`),oz.forEach(t),Xmo=i(On),Z5=s(On,"P",{});var IBe=n(Z5);zmo=r(IBe,"This class cannot be instantiated directly using "),HK=s(IBe,"CODE",{});var XIr=n(HK);Vmo=r(XIr,"__init__()"),XIr.forEach(t),Wmo=r(IBe," (throws an error)."),IBe.forEach(t),Qmo=i(On),qr=s(On,"DIV",{class:!0});var Xn=n(qr);f(ey.$$.fragment,Xn),Hmo=i(Xn),UK=s(Xn,"P",{});var zIr=n(UK);Umo=r(zIr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zIr.forEach(t),Jmo=i(Xn),Hi=s(Xn,"P",{});var rz=n(Hi);Ymo=r(rz,`Note:
Loading a model from its configuration file does `),JK=s(rz,"STRONG",{});var VIr=n(JK);Kmo=r(VIr,"not"),VIr.forEach(t),Zmo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=s(rz,"CODE",{});var WIr=n(YK);efo=r(WIr,"from_pretrained()"),WIr.forEach(t),ofo=r(rz,"to load the model weights."),rz.forEach(t),rfo=i(Xn),KK=s(Xn,"P",{});var QIr=n(KK);tfo=r(QIr,"Examples:"),QIr.forEach(t),afo=i(Xn),f(oy.$$.fragment,Xn),Xn.forEach(t),sfo=i(On),Re=s(On,"DIV",{class:!0});var $t=n(Re);f(ry.$$.fragment,$t),nfo=i($t),ZK=s($t,"P",{});var HIr=n(ZK);lfo=r(HIr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HIr.forEach(t),ifo=i($t),Ga=s($t,"P",{});var m3=n(Ga);dfo=r(m3,"The model class to instantiate is selected based on the "),eZ=s(m3,"CODE",{});var UIr=n(eZ);cfo=r(UIr,"model_type"),UIr.forEach(t),mfo=r(m3,` property of the config object (either
passed as an argument or loaded from `),oZ=s(m3,"CODE",{});var JIr=n(oZ);ffo=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),gfo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rZ=s(m3,"CODE",{});var YIr=n(rZ);hfo=r(YIr,"pretrained_model_name_or_path"),YIr.forEach(t),ufo=r(m3,":"),m3.forEach(t),pfo=i($t),$=s($t,"UL",{});var j=n($);Dp=s(j,"LI",{});var PMe=n(Dp);tZ=s(PMe,"STRONG",{});var KIr=n(tZ);_fo=r(KIr,"bart"),KIr.forEach(t),bfo=r(PMe," \u2014 "),kS=s(PMe,"A",{href:!0});var ZIr=n(kS);vfo=r(ZIr,"BartForCausalLM"),ZIr.forEach(t),Tfo=r(PMe," (BART model)"),PMe.forEach(t),Ffo=i(j),qp=s(j,"LI",{});var $Me=n(qp);aZ=s($Me,"STRONG",{});var ejr=n(aZ);Cfo=r(ejr,"bert"),ejr.forEach(t),Mfo=r($Me," \u2014 "),RS=s($Me,"A",{href:!0});var ojr=n(RS);Efo=r(ojr,"BertLMHeadModel"),ojr.forEach(t),yfo=r($Me," (BERT model)"),$Me.forEach(t),wfo=i(j),Gp=s(j,"LI",{});var IMe=n(Gp);sZ=s(IMe,"STRONG",{});var rjr=n(sZ);Afo=r(rjr,"bert-generation"),rjr.forEach(t),Lfo=r(IMe," \u2014 "),SS=s(IMe,"A",{href:!0});var tjr=n(SS);Bfo=r(tjr,"BertGenerationDecoder"),tjr.forEach(t),xfo=r(IMe," (Bert Generation model)"),IMe.forEach(t),kfo=i(j),Op=s(j,"LI",{});var jMe=n(Op);nZ=s(jMe,"STRONG",{});var ajr=n(nZ);Rfo=r(ajr,"big_bird"),ajr.forEach(t),Sfo=r(jMe," \u2014 "),PS=s(jMe,"A",{href:!0});var sjr=n(PS);Pfo=r(sjr,"BigBirdForCausalLM"),sjr.forEach(t),$fo=r(jMe," (BigBird model)"),jMe.forEach(t),Ifo=i(j),Xp=s(j,"LI",{});var NMe=n(Xp);lZ=s(NMe,"STRONG",{});var njr=n(lZ);jfo=r(njr,"bigbird_pegasus"),njr.forEach(t),Nfo=r(NMe," \u2014 "),$S=s(NMe,"A",{href:!0});var ljr=n($S);Dfo=r(ljr,"BigBirdPegasusForCausalLM"),ljr.forEach(t),qfo=r(NMe," (BigBirdPegasus model)"),NMe.forEach(t),Gfo=i(j),zp=s(j,"LI",{});var DMe=n(zp);iZ=s(DMe,"STRONG",{});var ijr=n(iZ);Ofo=r(ijr,"blenderbot"),ijr.forEach(t),Xfo=r(DMe," \u2014 "),IS=s(DMe,"A",{href:!0});var djr=n(IS);zfo=r(djr,"BlenderbotForCausalLM"),djr.forEach(t),Vfo=r(DMe," (Blenderbot model)"),DMe.forEach(t),Wfo=i(j),Vp=s(j,"LI",{});var qMe=n(Vp);dZ=s(qMe,"STRONG",{});var cjr=n(dZ);Qfo=r(cjr,"blenderbot-small"),cjr.forEach(t),Hfo=r(qMe," \u2014 "),jS=s(qMe,"A",{href:!0});var mjr=n(jS);Ufo=r(mjr,"BlenderbotSmallForCausalLM"),mjr.forEach(t),Jfo=r(qMe," (BlenderbotSmall model)"),qMe.forEach(t),Yfo=i(j),Wp=s(j,"LI",{});var GMe=n(Wp);cZ=s(GMe,"STRONG",{});var fjr=n(cZ);Kfo=r(fjr,"camembert"),fjr.forEach(t),Zfo=r(GMe," \u2014 "),NS=s(GMe,"A",{href:!0});var gjr=n(NS);ego=r(gjr,"CamembertForCausalLM"),gjr.forEach(t),ogo=r(GMe," (CamemBERT model)"),GMe.forEach(t),rgo=i(j),Qp=s(j,"LI",{});var OMe=n(Qp);mZ=s(OMe,"STRONG",{});var hjr=n(mZ);tgo=r(hjr,"ctrl"),hjr.forEach(t),ago=r(OMe," \u2014 "),DS=s(OMe,"A",{href:!0});var ujr=n(DS);sgo=r(ujr,"CTRLLMHeadModel"),ujr.forEach(t),ngo=r(OMe," (CTRL model)"),OMe.forEach(t),lgo=i(j),Hp=s(j,"LI",{});var XMe=n(Hp);fZ=s(XMe,"STRONG",{});var pjr=n(fZ);igo=r(pjr,"electra"),pjr.forEach(t),dgo=r(XMe," \u2014 "),qS=s(XMe,"A",{href:!0});var _jr=n(qS);cgo=r(_jr,"ElectraForCausalLM"),_jr.forEach(t),mgo=r(XMe," (ELECTRA model)"),XMe.forEach(t),fgo=i(j),Up=s(j,"LI",{});var zMe=n(Up);gZ=s(zMe,"STRONG",{});var bjr=n(gZ);ggo=r(bjr,"gpt2"),bjr.forEach(t),hgo=r(zMe," \u2014 "),GS=s(zMe,"A",{href:!0});var vjr=n(GS);ugo=r(vjr,"GPT2LMHeadModel"),vjr.forEach(t),pgo=r(zMe," (OpenAI GPT-2 model)"),zMe.forEach(t),_go=i(j),Jp=s(j,"LI",{});var VMe=n(Jp);hZ=s(VMe,"STRONG",{});var Tjr=n(hZ);bgo=r(Tjr,"gpt_neo"),Tjr.forEach(t),vgo=r(VMe," \u2014 "),OS=s(VMe,"A",{href:!0});var Fjr=n(OS);Tgo=r(Fjr,"GPTNeoForCausalLM"),Fjr.forEach(t),Fgo=r(VMe," (GPT Neo model)"),VMe.forEach(t),Cgo=i(j),Yp=s(j,"LI",{});var WMe=n(Yp);uZ=s(WMe,"STRONG",{});var Cjr=n(uZ);Mgo=r(Cjr,"gptj"),Cjr.forEach(t),Ego=r(WMe," \u2014 "),XS=s(WMe,"A",{href:!0});var Mjr=n(XS);ygo=r(Mjr,"GPTJForCausalLM"),Mjr.forEach(t),wgo=r(WMe," (GPT-J model)"),WMe.forEach(t),Ago=i(j),Kp=s(j,"LI",{});var QMe=n(Kp);pZ=s(QMe,"STRONG",{});var Ejr=n(pZ);Lgo=r(Ejr,"marian"),Ejr.forEach(t),Bgo=r(QMe," \u2014 "),zS=s(QMe,"A",{href:!0});var yjr=n(zS);xgo=r(yjr,"MarianForCausalLM"),yjr.forEach(t),kgo=r(QMe," (Marian model)"),QMe.forEach(t),Rgo=i(j),Zp=s(j,"LI",{});var HMe=n(Zp);_Z=s(HMe,"STRONG",{});var wjr=n(_Z);Sgo=r(wjr,"mbart"),wjr.forEach(t),Pgo=r(HMe," \u2014 "),VS=s(HMe,"A",{href:!0});var Ajr=n(VS);$go=r(Ajr,"MBartForCausalLM"),Ajr.forEach(t),Igo=r(HMe," (mBART model)"),HMe.forEach(t),jgo=i(j),e_=s(j,"LI",{});var UMe=n(e_);bZ=s(UMe,"STRONG",{});var Ljr=n(bZ);Ngo=r(Ljr,"megatron-bert"),Ljr.forEach(t),Dgo=r(UMe," \u2014 "),WS=s(UMe,"A",{href:!0});var Bjr=n(WS);qgo=r(Bjr,"MegatronBertForCausalLM"),Bjr.forEach(t),Ggo=r(UMe," (MegatronBert model)"),UMe.forEach(t),Ogo=i(j),o_=s(j,"LI",{});var JMe=n(o_);vZ=s(JMe,"STRONG",{});var xjr=n(vZ);Xgo=r(xjr,"openai-gpt"),xjr.forEach(t),zgo=r(JMe," \u2014 "),QS=s(JMe,"A",{href:!0});var kjr=n(QS);Vgo=r(kjr,"OpenAIGPTLMHeadModel"),kjr.forEach(t),Wgo=r(JMe," (OpenAI GPT model)"),JMe.forEach(t),Qgo=i(j),r_=s(j,"LI",{});var YMe=n(r_);TZ=s(YMe,"STRONG",{});var Rjr=n(TZ);Hgo=r(Rjr,"pegasus"),Rjr.forEach(t),Ugo=r(YMe," \u2014 "),HS=s(YMe,"A",{href:!0});var Sjr=n(HS);Jgo=r(Sjr,"PegasusForCausalLM"),Sjr.forEach(t),Ygo=r(YMe," (Pegasus model)"),YMe.forEach(t),Kgo=i(j),t_=s(j,"LI",{});var KMe=n(t_);FZ=s(KMe,"STRONG",{});var Pjr=n(FZ);Zgo=r(Pjr,"plbart"),Pjr.forEach(t),eho=r(KMe," \u2014 "),US=s(KMe,"A",{href:!0});var $jr=n(US);oho=r($jr,"PLBartForCausalLM"),$jr.forEach(t),rho=r(KMe," (PLBart model)"),KMe.forEach(t),tho=i(j),a_=s(j,"LI",{});var ZMe=n(a_);CZ=s(ZMe,"STRONG",{});var Ijr=n(CZ);aho=r(Ijr,"prophetnet"),Ijr.forEach(t),sho=r(ZMe," \u2014 "),JS=s(ZMe,"A",{href:!0});var jjr=n(JS);nho=r(jjr,"ProphetNetForCausalLM"),jjr.forEach(t),lho=r(ZMe," (ProphetNet model)"),ZMe.forEach(t),iho=i(j),s_=s(j,"LI",{});var eEe=n(s_);MZ=s(eEe,"STRONG",{});var Njr=n(MZ);dho=r(Njr,"qdqbert"),Njr.forEach(t),cho=r(eEe," \u2014 "),YS=s(eEe,"A",{href:!0});var Djr=n(YS);mho=r(Djr,"QDQBertLMHeadModel"),Djr.forEach(t),fho=r(eEe," (QDQBert model)"),eEe.forEach(t),gho=i(j),n_=s(j,"LI",{});var oEe=n(n_);EZ=s(oEe,"STRONG",{});var qjr=n(EZ);hho=r(qjr,"reformer"),qjr.forEach(t),uho=r(oEe," \u2014 "),KS=s(oEe,"A",{href:!0});var Gjr=n(KS);pho=r(Gjr,"ReformerModelWithLMHead"),Gjr.forEach(t),_ho=r(oEe," (Reformer model)"),oEe.forEach(t),bho=i(j),l_=s(j,"LI",{});var rEe=n(l_);yZ=s(rEe,"STRONG",{});var Ojr=n(yZ);vho=r(Ojr,"rembert"),Ojr.forEach(t),Tho=r(rEe," \u2014 "),ZS=s(rEe,"A",{href:!0});var Xjr=n(ZS);Fho=r(Xjr,"RemBertForCausalLM"),Xjr.forEach(t),Cho=r(rEe," (RemBERT model)"),rEe.forEach(t),Mho=i(j),i_=s(j,"LI",{});var tEe=n(i_);wZ=s(tEe,"STRONG",{});var zjr=n(wZ);Eho=r(zjr,"roberta"),zjr.forEach(t),yho=r(tEe," \u2014 "),eP=s(tEe,"A",{href:!0});var Vjr=n(eP);who=r(Vjr,"RobertaForCausalLM"),Vjr.forEach(t),Aho=r(tEe," (RoBERTa model)"),tEe.forEach(t),Lho=i(j),d_=s(j,"LI",{});var aEe=n(d_);AZ=s(aEe,"STRONG",{});var Wjr=n(AZ);Bho=r(Wjr,"roformer"),Wjr.forEach(t),xho=r(aEe," \u2014 "),oP=s(aEe,"A",{href:!0});var Qjr=n(oP);kho=r(Qjr,"RoFormerForCausalLM"),Qjr.forEach(t),Rho=r(aEe," (RoFormer model)"),aEe.forEach(t),Sho=i(j),c_=s(j,"LI",{});var sEe=n(c_);LZ=s(sEe,"STRONG",{});var Hjr=n(LZ);Pho=r(Hjr,"speech_to_text_2"),Hjr.forEach(t),$ho=r(sEe," \u2014 "),rP=s(sEe,"A",{href:!0});var Ujr=n(rP);Iho=r(Ujr,"Speech2Text2ForCausalLM"),Ujr.forEach(t),jho=r(sEe," (Speech2Text2 model)"),sEe.forEach(t),Nho=i(j),m_=s(j,"LI",{});var nEe=n(m_);BZ=s(nEe,"STRONG",{});var Jjr=n(BZ);Dho=r(Jjr,"transfo-xl"),Jjr.forEach(t),qho=r(nEe," \u2014 "),tP=s(nEe,"A",{href:!0});var Yjr=n(tP);Gho=r(Yjr,"TransfoXLLMHeadModel"),Yjr.forEach(t),Oho=r(nEe," (Transformer-XL model)"),nEe.forEach(t),Xho=i(j),f_=s(j,"LI",{});var lEe=n(f_);xZ=s(lEe,"STRONG",{});var Kjr=n(xZ);zho=r(Kjr,"trocr"),Kjr.forEach(t),Vho=r(lEe," \u2014 "),aP=s(lEe,"A",{href:!0});var Zjr=n(aP);Who=r(Zjr,"TrOCRForCausalLM"),Zjr.forEach(t),Qho=r(lEe," (TrOCR model)"),lEe.forEach(t),Hho=i(j),g_=s(j,"LI",{});var iEe=n(g_);kZ=s(iEe,"STRONG",{});var eNr=n(kZ);Uho=r(eNr,"xglm"),eNr.forEach(t),Jho=r(iEe," \u2014 "),sP=s(iEe,"A",{href:!0});var oNr=n(sP);Yho=r(oNr,"XGLMForCausalLM"),oNr.forEach(t),Kho=r(iEe," (XGLM model)"),iEe.forEach(t),Zho=i(j),h_=s(j,"LI",{});var dEe=n(h_);RZ=s(dEe,"STRONG",{});var rNr=n(RZ);euo=r(rNr,"xlm"),rNr.forEach(t),ouo=r(dEe," \u2014 "),nP=s(dEe,"A",{href:!0});var tNr=n(nP);ruo=r(tNr,"XLMWithLMHeadModel"),tNr.forEach(t),tuo=r(dEe," (XLM model)"),dEe.forEach(t),auo=i(j),u_=s(j,"LI",{});var cEe=n(u_);SZ=s(cEe,"STRONG",{});var aNr=n(SZ);suo=r(aNr,"xlm-prophetnet"),aNr.forEach(t),nuo=r(cEe," \u2014 "),lP=s(cEe,"A",{href:!0});var sNr=n(lP);luo=r(sNr,"XLMProphetNetForCausalLM"),sNr.forEach(t),iuo=r(cEe," (XLMProphetNet model)"),cEe.forEach(t),duo=i(j),p_=s(j,"LI",{});var mEe=n(p_);PZ=s(mEe,"STRONG",{});var nNr=n(PZ);cuo=r(nNr,"xlm-roberta"),nNr.forEach(t),muo=r(mEe," \u2014 "),iP=s(mEe,"A",{href:!0});var lNr=n(iP);fuo=r(lNr,"XLMRobertaForCausalLM"),lNr.forEach(t),guo=r(mEe," (XLM-RoBERTa model)"),mEe.forEach(t),huo=i(j),__=s(j,"LI",{});var fEe=n(__);$Z=s(fEe,"STRONG",{});var iNr=n($Z);uuo=r(iNr,"xlm-roberta-xl"),iNr.forEach(t),puo=r(fEe," \u2014 "),dP=s(fEe,"A",{href:!0});var dNr=n(dP);_uo=r(dNr,"XLMRobertaXLForCausalLM"),dNr.forEach(t),buo=r(fEe," (XLM-RoBERTa-XL model)"),fEe.forEach(t),vuo=i(j),b_=s(j,"LI",{});var gEe=n(b_);IZ=s(gEe,"STRONG",{});var cNr=n(IZ);Tuo=r(cNr,"xlnet"),cNr.forEach(t),Fuo=r(gEe," \u2014 "),cP=s(gEe,"A",{href:!0});var mNr=n(cP);Cuo=r(mNr,"XLNetLMHeadModel"),mNr.forEach(t),Muo=r(gEe," (XLNet model)"),gEe.forEach(t),j.forEach(t),Euo=i($t),v_=s($t,"P",{});var hEe=n(v_);yuo=r(hEe,"The model is set in evaluation mode by default using "),jZ=s(hEe,"CODE",{});var fNr=n(jZ);wuo=r(fNr,"model.eval()"),fNr.forEach(t),Auo=r(hEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NZ=s(hEe,"CODE",{});var gNr=n(NZ);Luo=r(gNr,"model.train()"),gNr.forEach(t),hEe.forEach(t),Buo=i($t),DZ=s($t,"P",{});var hNr=n(DZ);xuo=r(hNr,"Examples:"),hNr.forEach(t),kuo=i($t),f(ty.$$.fragment,$t),$t.forEach(t),On.forEach(t),x8e=i(d),Ui=s(d,"H2",{class:!0});var jBe=n(Ui);T_=s(jBe,"A",{id:!0,class:!0,href:!0});var uNr=n(T_);qZ=s(uNr,"SPAN",{});var pNr=n(qZ);f(ay.$$.fragment,pNr),pNr.forEach(t),uNr.forEach(t),Ruo=i(jBe),GZ=s(jBe,"SPAN",{});var _Nr=n(GZ);Suo=r(_Nr,"AutoModelForMaskedLM"),_Nr.forEach(t),jBe.forEach(t),k8e=i(d),Ho=s(d,"DIV",{class:!0});var zn=n(Ho);f(sy.$$.fragment,zn),Puo=i(zn),Ji=s(zn,"P",{});var tz=n(Ji);$uo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=s(tz,"CODE",{});var bNr=n(OZ);Iuo=r(bNr,"from_pretrained()"),bNr.forEach(t),juo=r(tz,"class method or the "),XZ=s(tz,"CODE",{});var vNr=n(XZ);Nuo=r(vNr,"from_config()"),vNr.forEach(t),Duo=r(tz,`class
method.`),tz.forEach(t),quo=i(zn),ny=s(zn,"P",{});var NBe=n(ny);Guo=r(NBe,"This class cannot be instantiated directly using "),zZ=s(NBe,"CODE",{});var TNr=n(zZ);Ouo=r(TNr,"__init__()"),TNr.forEach(t),Xuo=r(NBe," (throws an error)."),NBe.forEach(t),zuo=i(zn),Gr=s(zn,"DIV",{class:!0});var Vn=n(Gr);f(ly.$$.fragment,Vn),Vuo=i(Vn),VZ=s(Vn,"P",{});var FNr=n(VZ);Wuo=r(FNr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FNr.forEach(t),Quo=i(Vn),Yi=s(Vn,"P",{});var az=n(Yi);Huo=r(az,`Note:
Loading a model from its configuration file does `),WZ=s(az,"STRONG",{});var CNr=n(WZ);Uuo=r(CNr,"not"),CNr.forEach(t),Juo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=s(az,"CODE",{});var MNr=n(QZ);Yuo=r(MNr,"from_pretrained()"),MNr.forEach(t),Kuo=r(az,"to load the model weights."),az.forEach(t),Zuo=i(Vn),HZ=s(Vn,"P",{});var ENr=n(HZ);epo=r(ENr,"Examples:"),ENr.forEach(t),opo=i(Vn),f(iy.$$.fragment,Vn),Vn.forEach(t),rpo=i(zn),Se=s(zn,"DIV",{class:!0});var It=n(Se);f(dy.$$.fragment,It),tpo=i(It),UZ=s(It,"P",{});var yNr=n(UZ);apo=r(yNr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yNr.forEach(t),spo=i(It),Oa=s(It,"P",{});var f3=n(Oa);npo=r(f3,"The model class to instantiate is selected based on the "),JZ=s(f3,"CODE",{});var wNr=n(JZ);lpo=r(wNr,"model_type"),wNr.forEach(t),ipo=r(f3,` property of the config object (either
passed as an argument or loaded from `),YZ=s(f3,"CODE",{});var ANr=n(YZ);dpo=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),cpo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KZ=s(f3,"CODE",{});var LNr=n(KZ);mpo=r(LNr,"pretrained_model_name_or_path"),LNr.forEach(t),fpo=r(f3,":"),f3.forEach(t),gpo=i(It),I=s(It,"UL",{});var N=n(I);F_=s(N,"LI",{});var uEe=n(F_);ZZ=s(uEe,"STRONG",{});var BNr=n(ZZ);hpo=r(BNr,"albert"),BNr.forEach(t),upo=r(uEe," \u2014 "),mP=s(uEe,"A",{href:!0});var xNr=n(mP);ppo=r(xNr,"AlbertForMaskedLM"),xNr.forEach(t),_po=r(uEe," (ALBERT model)"),uEe.forEach(t),bpo=i(N),C_=s(N,"LI",{});var pEe=n(C_);eee=s(pEe,"STRONG",{});var kNr=n(eee);vpo=r(kNr,"bart"),kNr.forEach(t),Tpo=r(pEe," \u2014 "),fP=s(pEe,"A",{href:!0});var RNr=n(fP);Fpo=r(RNr,"BartForConditionalGeneration"),RNr.forEach(t),Cpo=r(pEe," (BART model)"),pEe.forEach(t),Mpo=i(N),M_=s(N,"LI",{});var _Ee=n(M_);oee=s(_Ee,"STRONG",{});var SNr=n(oee);Epo=r(SNr,"bert"),SNr.forEach(t),ypo=r(_Ee," \u2014 "),gP=s(_Ee,"A",{href:!0});var PNr=n(gP);wpo=r(PNr,"BertForMaskedLM"),PNr.forEach(t),Apo=r(_Ee," (BERT model)"),_Ee.forEach(t),Lpo=i(N),E_=s(N,"LI",{});var bEe=n(E_);ree=s(bEe,"STRONG",{});var $Nr=n(ree);Bpo=r($Nr,"big_bird"),$Nr.forEach(t),xpo=r(bEe," \u2014 "),hP=s(bEe,"A",{href:!0});var INr=n(hP);kpo=r(INr,"BigBirdForMaskedLM"),INr.forEach(t),Rpo=r(bEe," (BigBird model)"),bEe.forEach(t),Spo=i(N),y_=s(N,"LI",{});var vEe=n(y_);tee=s(vEe,"STRONG",{});var jNr=n(tee);Ppo=r(jNr,"camembert"),jNr.forEach(t),$po=r(vEe," \u2014 "),uP=s(vEe,"A",{href:!0});var NNr=n(uP);Ipo=r(NNr,"CamembertForMaskedLM"),NNr.forEach(t),jpo=r(vEe," (CamemBERT model)"),vEe.forEach(t),Npo=i(N),w_=s(N,"LI",{});var TEe=n(w_);aee=s(TEe,"STRONG",{});var DNr=n(aee);Dpo=r(DNr,"convbert"),DNr.forEach(t),qpo=r(TEe," \u2014 "),pP=s(TEe,"A",{href:!0});var qNr=n(pP);Gpo=r(qNr,"ConvBertForMaskedLM"),qNr.forEach(t),Opo=r(TEe," (ConvBERT model)"),TEe.forEach(t),Xpo=i(N),A_=s(N,"LI",{});var FEe=n(A_);see=s(FEe,"STRONG",{});var GNr=n(see);zpo=r(GNr,"deberta"),GNr.forEach(t),Vpo=r(FEe," \u2014 "),_P=s(FEe,"A",{href:!0});var ONr=n(_P);Wpo=r(ONr,"DebertaForMaskedLM"),ONr.forEach(t),Qpo=r(FEe," (DeBERTa model)"),FEe.forEach(t),Hpo=i(N),L_=s(N,"LI",{});var CEe=n(L_);nee=s(CEe,"STRONG",{});var XNr=n(nee);Upo=r(XNr,"deberta-v2"),XNr.forEach(t),Jpo=r(CEe," \u2014 "),bP=s(CEe,"A",{href:!0});var zNr=n(bP);Ypo=r(zNr,"DebertaV2ForMaskedLM"),zNr.forEach(t),Kpo=r(CEe," (DeBERTa-v2 model)"),CEe.forEach(t),Zpo=i(N),B_=s(N,"LI",{});var MEe=n(B_);lee=s(MEe,"STRONG",{});var VNr=n(lee);e_o=r(VNr,"distilbert"),VNr.forEach(t),o_o=r(MEe," \u2014 "),vP=s(MEe,"A",{href:!0});var WNr=n(vP);r_o=r(WNr,"DistilBertForMaskedLM"),WNr.forEach(t),t_o=r(MEe," (DistilBERT model)"),MEe.forEach(t),a_o=i(N),x_=s(N,"LI",{});var EEe=n(x_);iee=s(EEe,"STRONG",{});var QNr=n(iee);s_o=r(QNr,"electra"),QNr.forEach(t),n_o=r(EEe," \u2014 "),TP=s(EEe,"A",{href:!0});var HNr=n(TP);l_o=r(HNr,"ElectraForMaskedLM"),HNr.forEach(t),i_o=r(EEe," (ELECTRA model)"),EEe.forEach(t),d_o=i(N),k_=s(N,"LI",{});var yEe=n(k_);dee=s(yEe,"STRONG",{});var UNr=n(dee);c_o=r(UNr,"flaubert"),UNr.forEach(t),m_o=r(yEe," \u2014 "),FP=s(yEe,"A",{href:!0});var JNr=n(FP);f_o=r(JNr,"FlaubertWithLMHeadModel"),JNr.forEach(t),g_o=r(yEe," (FlauBERT model)"),yEe.forEach(t),h_o=i(N),R_=s(N,"LI",{});var wEe=n(R_);cee=s(wEe,"STRONG",{});var YNr=n(cee);u_o=r(YNr,"fnet"),YNr.forEach(t),p_o=r(wEe," \u2014 "),CP=s(wEe,"A",{href:!0});var KNr=n(CP);__o=r(KNr,"FNetForMaskedLM"),KNr.forEach(t),b_o=r(wEe," (FNet model)"),wEe.forEach(t),v_o=i(N),S_=s(N,"LI",{});var AEe=n(S_);mee=s(AEe,"STRONG",{});var ZNr=n(mee);T_o=r(ZNr,"funnel"),ZNr.forEach(t),F_o=r(AEe," \u2014 "),MP=s(AEe,"A",{href:!0});var eDr=n(MP);C_o=r(eDr,"FunnelForMaskedLM"),eDr.forEach(t),M_o=r(AEe," (Funnel Transformer model)"),AEe.forEach(t),E_o=i(N),P_=s(N,"LI",{});var LEe=n(P_);fee=s(LEe,"STRONG",{});var oDr=n(fee);y_o=r(oDr,"ibert"),oDr.forEach(t),w_o=r(LEe," \u2014 "),EP=s(LEe,"A",{href:!0});var rDr=n(EP);A_o=r(rDr,"IBertForMaskedLM"),rDr.forEach(t),L_o=r(LEe," (I-BERT model)"),LEe.forEach(t),B_o=i(N),$_=s(N,"LI",{});var BEe=n($_);gee=s(BEe,"STRONG",{});var tDr=n(gee);x_o=r(tDr,"layoutlm"),tDr.forEach(t),k_o=r(BEe," \u2014 "),yP=s(BEe,"A",{href:!0});var aDr=n(yP);R_o=r(aDr,"LayoutLMForMaskedLM"),aDr.forEach(t),S_o=r(BEe," (LayoutLM model)"),BEe.forEach(t),P_o=i(N),I_=s(N,"LI",{});var xEe=n(I_);hee=s(xEe,"STRONG",{});var sDr=n(hee);$_o=r(sDr,"longformer"),sDr.forEach(t),I_o=r(xEe," \u2014 "),wP=s(xEe,"A",{href:!0});var nDr=n(wP);j_o=r(nDr,"LongformerForMaskedLM"),nDr.forEach(t),N_o=r(xEe," (Longformer model)"),xEe.forEach(t),D_o=i(N),j_=s(N,"LI",{});var kEe=n(j_);uee=s(kEe,"STRONG",{});var lDr=n(uee);q_o=r(lDr,"mbart"),lDr.forEach(t),G_o=r(kEe," \u2014 "),AP=s(kEe,"A",{href:!0});var iDr=n(AP);O_o=r(iDr,"MBartForConditionalGeneration"),iDr.forEach(t),X_o=r(kEe," (mBART model)"),kEe.forEach(t),z_o=i(N),N_=s(N,"LI",{});var REe=n(N_);pee=s(REe,"STRONG",{});var dDr=n(pee);V_o=r(dDr,"megatron-bert"),dDr.forEach(t),W_o=r(REe," \u2014 "),LP=s(REe,"A",{href:!0});var cDr=n(LP);Q_o=r(cDr,"MegatronBertForMaskedLM"),cDr.forEach(t),H_o=r(REe," (MegatronBert model)"),REe.forEach(t),U_o=i(N),D_=s(N,"LI",{});var SEe=n(D_);_ee=s(SEe,"STRONG",{});var mDr=n(_ee);J_o=r(mDr,"mobilebert"),mDr.forEach(t),Y_o=r(SEe," \u2014 "),BP=s(SEe,"A",{href:!0});var fDr=n(BP);K_o=r(fDr,"MobileBertForMaskedLM"),fDr.forEach(t),Z_o=r(SEe," (MobileBERT model)"),SEe.forEach(t),ebo=i(N),q_=s(N,"LI",{});var PEe=n(q_);bee=s(PEe,"STRONG",{});var gDr=n(bee);obo=r(gDr,"mpnet"),gDr.forEach(t),rbo=r(PEe," \u2014 "),xP=s(PEe,"A",{href:!0});var hDr=n(xP);tbo=r(hDr,"MPNetForMaskedLM"),hDr.forEach(t),abo=r(PEe," (MPNet model)"),PEe.forEach(t),sbo=i(N),G_=s(N,"LI",{});var $Ee=n(G_);vee=s($Ee,"STRONG",{});var uDr=n(vee);nbo=r(uDr,"nystromformer"),uDr.forEach(t),lbo=r($Ee," \u2014 "),kP=s($Ee,"A",{href:!0});var pDr=n(kP);ibo=r(pDr,"NystromformerForMaskedLM"),pDr.forEach(t),dbo=r($Ee," (Nystromformer model)"),$Ee.forEach(t),cbo=i(N),O_=s(N,"LI",{});var IEe=n(O_);Tee=s(IEe,"STRONG",{});var _Dr=n(Tee);mbo=r(_Dr,"perceiver"),_Dr.forEach(t),fbo=r(IEe," \u2014 "),RP=s(IEe,"A",{href:!0});var bDr=n(RP);gbo=r(bDr,"PerceiverForMaskedLM"),bDr.forEach(t),hbo=r(IEe," (Perceiver model)"),IEe.forEach(t),ubo=i(N),X_=s(N,"LI",{});var jEe=n(X_);Fee=s(jEe,"STRONG",{});var vDr=n(Fee);pbo=r(vDr,"qdqbert"),vDr.forEach(t),_bo=r(jEe," \u2014 "),SP=s(jEe,"A",{href:!0});var TDr=n(SP);bbo=r(TDr,"QDQBertForMaskedLM"),TDr.forEach(t),vbo=r(jEe," (QDQBert model)"),jEe.forEach(t),Tbo=i(N),z_=s(N,"LI",{});var NEe=n(z_);Cee=s(NEe,"STRONG",{});var FDr=n(Cee);Fbo=r(FDr,"reformer"),FDr.forEach(t),Cbo=r(NEe," \u2014 "),PP=s(NEe,"A",{href:!0});var CDr=n(PP);Mbo=r(CDr,"ReformerForMaskedLM"),CDr.forEach(t),Ebo=r(NEe," (Reformer model)"),NEe.forEach(t),ybo=i(N),V_=s(N,"LI",{});var DEe=n(V_);Mee=s(DEe,"STRONG",{});var MDr=n(Mee);wbo=r(MDr,"rembert"),MDr.forEach(t),Abo=r(DEe," \u2014 "),$P=s(DEe,"A",{href:!0});var EDr=n($P);Lbo=r(EDr,"RemBertForMaskedLM"),EDr.forEach(t),Bbo=r(DEe," (RemBERT model)"),DEe.forEach(t),xbo=i(N),W_=s(N,"LI",{});var qEe=n(W_);Eee=s(qEe,"STRONG",{});var yDr=n(Eee);kbo=r(yDr,"roberta"),yDr.forEach(t),Rbo=r(qEe," \u2014 "),IP=s(qEe,"A",{href:!0});var wDr=n(IP);Sbo=r(wDr,"RobertaForMaskedLM"),wDr.forEach(t),Pbo=r(qEe," (RoBERTa model)"),qEe.forEach(t),$bo=i(N),Q_=s(N,"LI",{});var GEe=n(Q_);yee=s(GEe,"STRONG",{});var ADr=n(yee);Ibo=r(ADr,"roformer"),ADr.forEach(t),jbo=r(GEe," \u2014 "),jP=s(GEe,"A",{href:!0});var LDr=n(jP);Nbo=r(LDr,"RoFormerForMaskedLM"),LDr.forEach(t),Dbo=r(GEe," (RoFormer model)"),GEe.forEach(t),qbo=i(N),H_=s(N,"LI",{});var OEe=n(H_);wee=s(OEe,"STRONG",{});var BDr=n(wee);Gbo=r(BDr,"squeezebert"),BDr.forEach(t),Obo=r(OEe," \u2014 "),NP=s(OEe,"A",{href:!0});var xDr=n(NP);Xbo=r(xDr,"SqueezeBertForMaskedLM"),xDr.forEach(t),zbo=r(OEe," (SqueezeBERT model)"),OEe.forEach(t),Vbo=i(N),U_=s(N,"LI",{});var XEe=n(U_);Aee=s(XEe,"STRONG",{});var kDr=n(Aee);Wbo=r(kDr,"tapas"),kDr.forEach(t),Qbo=r(XEe," \u2014 "),DP=s(XEe,"A",{href:!0});var RDr=n(DP);Hbo=r(RDr,"TapasForMaskedLM"),RDr.forEach(t),Ubo=r(XEe," (TAPAS model)"),XEe.forEach(t),Jbo=i(N),J_=s(N,"LI",{});var zEe=n(J_);Lee=s(zEe,"STRONG",{});var SDr=n(Lee);Ybo=r(SDr,"wav2vec2"),SDr.forEach(t),Kbo=r(zEe," \u2014 "),Bee=s(zEe,"CODE",{});var PDr=n(Bee);Zbo=r(PDr,"Wav2Vec2ForMaskedLM"),PDr.forEach(t),e2o=r(zEe,"(Wav2Vec2 model)"),zEe.forEach(t),o2o=i(N),Y_=s(N,"LI",{});var VEe=n(Y_);xee=s(VEe,"STRONG",{});var $Dr=n(xee);r2o=r($Dr,"xlm"),$Dr.forEach(t),t2o=r(VEe," \u2014 "),qP=s(VEe,"A",{href:!0});var IDr=n(qP);a2o=r(IDr,"XLMWithLMHeadModel"),IDr.forEach(t),s2o=r(VEe," (XLM model)"),VEe.forEach(t),n2o=i(N),K_=s(N,"LI",{});var WEe=n(K_);kee=s(WEe,"STRONG",{});var jDr=n(kee);l2o=r(jDr,"xlm-roberta"),jDr.forEach(t),i2o=r(WEe," \u2014 "),GP=s(WEe,"A",{href:!0});var NDr=n(GP);d2o=r(NDr,"XLMRobertaForMaskedLM"),NDr.forEach(t),c2o=r(WEe," (XLM-RoBERTa model)"),WEe.forEach(t),m2o=i(N),Z_=s(N,"LI",{});var QEe=n(Z_);Ree=s(QEe,"STRONG",{});var DDr=n(Ree);f2o=r(DDr,"xlm-roberta-xl"),DDr.forEach(t),g2o=r(QEe," \u2014 "),OP=s(QEe,"A",{href:!0});var qDr=n(OP);h2o=r(qDr,"XLMRobertaXLForMaskedLM"),qDr.forEach(t),u2o=r(QEe," (XLM-RoBERTa-XL model)"),QEe.forEach(t),p2o=i(N),eb=s(N,"LI",{});var HEe=n(eb);See=s(HEe,"STRONG",{});var GDr=n(See);_2o=r(GDr,"yoso"),GDr.forEach(t),b2o=r(HEe," \u2014 "),XP=s(HEe,"A",{href:!0});var ODr=n(XP);v2o=r(ODr,"YosoForMaskedLM"),ODr.forEach(t),T2o=r(HEe," (YOSO model)"),HEe.forEach(t),N.forEach(t),F2o=i(It),ob=s(It,"P",{});var UEe=n(ob);C2o=r(UEe,"The model is set in evaluation mode by default using "),Pee=s(UEe,"CODE",{});var XDr=n(Pee);M2o=r(XDr,"model.eval()"),XDr.forEach(t),E2o=r(UEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ee=s(UEe,"CODE",{});var zDr=n($ee);y2o=r(zDr,"model.train()"),zDr.forEach(t),UEe.forEach(t),w2o=i(It),Iee=s(It,"P",{});var VDr=n(Iee);A2o=r(VDr,"Examples:"),VDr.forEach(t),L2o=i(It),f(cy.$$.fragment,It),It.forEach(t),zn.forEach(t),R8e=i(d),Ki=s(d,"H2",{class:!0});var DBe=n(Ki);rb=s(DBe,"A",{id:!0,class:!0,href:!0});var WDr=n(rb);jee=s(WDr,"SPAN",{});var QDr=n(jee);f(my.$$.fragment,QDr),QDr.forEach(t),WDr.forEach(t),B2o=i(DBe),Nee=s(DBe,"SPAN",{});var HDr=n(Nee);x2o=r(HDr,"AutoModelForSeq2SeqLM"),HDr.forEach(t),DBe.forEach(t),S8e=i(d),Uo=s(d,"DIV",{class:!0});var Wn=n(Uo);f(fy.$$.fragment,Wn),k2o=i(Wn),Zi=s(Wn,"P",{});var sz=n(Zi);R2o=r(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dee=s(sz,"CODE",{});var UDr=n(Dee);S2o=r(UDr,"from_pretrained()"),UDr.forEach(t),P2o=r(sz,"class method or the "),qee=s(sz,"CODE",{});var JDr=n(qee);$2o=r(JDr,"from_config()"),JDr.forEach(t),I2o=r(sz,`class
method.`),sz.forEach(t),j2o=i(Wn),gy=s(Wn,"P",{});var qBe=n(gy);N2o=r(qBe,"This class cannot be instantiated directly using "),Gee=s(qBe,"CODE",{});var YDr=n(Gee);D2o=r(YDr,"__init__()"),YDr.forEach(t),q2o=r(qBe," (throws an error)."),qBe.forEach(t),G2o=i(Wn),Or=s(Wn,"DIV",{class:!0});var Qn=n(Or);f(hy.$$.fragment,Qn),O2o=i(Qn),Oee=s(Qn,"P",{});var KDr=n(Oee);X2o=r(KDr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KDr.forEach(t),z2o=i(Qn),ed=s(Qn,"P",{});var nz=n(ed);V2o=r(nz,`Note:
Loading a model from its configuration file does `),Xee=s(nz,"STRONG",{});var ZDr=n(Xee);W2o=r(ZDr,"not"),ZDr.forEach(t),Q2o=r(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=s(nz,"CODE",{});var eqr=n(zee);H2o=r(eqr,"from_pretrained()"),eqr.forEach(t),U2o=r(nz,"to load the model weights."),nz.forEach(t),J2o=i(Qn),Vee=s(Qn,"P",{});var oqr=n(Vee);Y2o=r(oqr,"Examples:"),oqr.forEach(t),K2o=i(Qn),f(uy.$$.fragment,Qn),Qn.forEach(t),Z2o=i(Wn),Pe=s(Wn,"DIV",{class:!0});var jt=n(Pe);f(py.$$.fragment,jt),evo=i(jt),Wee=s(jt,"P",{});var rqr=n(Wee);ovo=r(rqr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rqr.forEach(t),rvo=i(jt),Xa=s(jt,"P",{});var g3=n(Xa);tvo=r(g3,"The model class to instantiate is selected based on the "),Qee=s(g3,"CODE",{});var tqr=n(Qee);avo=r(tqr,"model_type"),tqr.forEach(t),svo=r(g3,` property of the config object (either
passed as an argument or loaded from `),Hee=s(g3,"CODE",{});var aqr=n(Hee);nvo=r(aqr,"pretrained_model_name_or_path"),aqr.forEach(t),lvo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=s(g3,"CODE",{});var sqr=n(Uee);ivo=r(sqr,"pretrained_model_name_or_path"),sqr.forEach(t),dvo=r(g3,":"),g3.forEach(t),cvo=i(jt),ae=s(jt,"UL",{});var le=n(ae);tb=s(le,"LI",{});var JEe=n(tb);Jee=s(JEe,"STRONG",{});var nqr=n(Jee);mvo=r(nqr,"bart"),nqr.forEach(t),fvo=r(JEe," \u2014 "),zP=s(JEe,"A",{href:!0});var lqr=n(zP);gvo=r(lqr,"BartForConditionalGeneration"),lqr.forEach(t),hvo=r(JEe," (BART model)"),JEe.forEach(t),uvo=i(le),ab=s(le,"LI",{});var YEe=n(ab);Yee=s(YEe,"STRONG",{});var iqr=n(Yee);pvo=r(iqr,"bigbird_pegasus"),iqr.forEach(t),_vo=r(YEe," \u2014 "),VP=s(YEe,"A",{href:!0});var dqr=n(VP);bvo=r(dqr,"BigBirdPegasusForConditionalGeneration"),dqr.forEach(t),vvo=r(YEe," (BigBirdPegasus model)"),YEe.forEach(t),Tvo=i(le),sb=s(le,"LI",{});var KEe=n(sb);Kee=s(KEe,"STRONG",{});var cqr=n(Kee);Fvo=r(cqr,"blenderbot"),cqr.forEach(t),Cvo=r(KEe," \u2014 "),WP=s(KEe,"A",{href:!0});var mqr=n(WP);Mvo=r(mqr,"BlenderbotForConditionalGeneration"),mqr.forEach(t),Evo=r(KEe," (Blenderbot model)"),KEe.forEach(t),yvo=i(le),nb=s(le,"LI",{});var ZEe=n(nb);Zee=s(ZEe,"STRONG",{});var fqr=n(Zee);wvo=r(fqr,"blenderbot-small"),fqr.forEach(t),Avo=r(ZEe," \u2014 "),QP=s(ZEe,"A",{href:!0});var gqr=n(QP);Lvo=r(gqr,"BlenderbotSmallForConditionalGeneration"),gqr.forEach(t),Bvo=r(ZEe," (BlenderbotSmall model)"),ZEe.forEach(t),xvo=i(le),lb=s(le,"LI",{});var e3e=n(lb);eoe=s(e3e,"STRONG",{});var hqr=n(eoe);kvo=r(hqr,"encoder-decoder"),hqr.forEach(t),Rvo=r(e3e," \u2014 "),HP=s(e3e,"A",{href:!0});var uqr=n(HP);Svo=r(uqr,"EncoderDecoderModel"),uqr.forEach(t),Pvo=r(e3e," (Encoder decoder model)"),e3e.forEach(t),$vo=i(le),ib=s(le,"LI",{});var o3e=n(ib);ooe=s(o3e,"STRONG",{});var pqr=n(ooe);Ivo=r(pqr,"fsmt"),pqr.forEach(t),jvo=r(o3e," \u2014 "),UP=s(o3e,"A",{href:!0});var _qr=n(UP);Nvo=r(_qr,"FSMTForConditionalGeneration"),_qr.forEach(t),Dvo=r(o3e," (FairSeq Machine-Translation model)"),o3e.forEach(t),qvo=i(le),db=s(le,"LI",{});var r3e=n(db);roe=s(r3e,"STRONG",{});var bqr=n(roe);Gvo=r(bqr,"led"),bqr.forEach(t),Ovo=r(r3e," \u2014 "),JP=s(r3e,"A",{href:!0});var vqr=n(JP);Xvo=r(vqr,"LEDForConditionalGeneration"),vqr.forEach(t),zvo=r(r3e," (LED model)"),r3e.forEach(t),Vvo=i(le),cb=s(le,"LI",{});var t3e=n(cb);toe=s(t3e,"STRONG",{});var Tqr=n(toe);Wvo=r(Tqr,"m2m_100"),Tqr.forEach(t),Qvo=r(t3e," \u2014 "),YP=s(t3e,"A",{href:!0});var Fqr=n(YP);Hvo=r(Fqr,"M2M100ForConditionalGeneration"),Fqr.forEach(t),Uvo=r(t3e," (M2M100 model)"),t3e.forEach(t),Jvo=i(le),mb=s(le,"LI",{});var a3e=n(mb);aoe=s(a3e,"STRONG",{});var Cqr=n(aoe);Yvo=r(Cqr,"marian"),Cqr.forEach(t),Kvo=r(a3e," \u2014 "),KP=s(a3e,"A",{href:!0});var Mqr=n(KP);Zvo=r(Mqr,"MarianMTModel"),Mqr.forEach(t),eTo=r(a3e," (Marian model)"),a3e.forEach(t),oTo=i(le),fb=s(le,"LI",{});var s3e=n(fb);soe=s(s3e,"STRONG",{});var Eqr=n(soe);rTo=r(Eqr,"mbart"),Eqr.forEach(t),tTo=r(s3e," \u2014 "),ZP=s(s3e,"A",{href:!0});var yqr=n(ZP);aTo=r(yqr,"MBartForConditionalGeneration"),yqr.forEach(t),sTo=r(s3e," (mBART model)"),s3e.forEach(t),nTo=i(le),gb=s(le,"LI",{});var n3e=n(gb);noe=s(n3e,"STRONG",{});var wqr=n(noe);lTo=r(wqr,"mt5"),wqr.forEach(t),iTo=r(n3e," \u2014 "),e$=s(n3e,"A",{href:!0});var Aqr=n(e$);dTo=r(Aqr,"MT5ForConditionalGeneration"),Aqr.forEach(t),cTo=r(n3e," (mT5 model)"),n3e.forEach(t),mTo=i(le),hb=s(le,"LI",{});var l3e=n(hb);loe=s(l3e,"STRONG",{});var Lqr=n(loe);fTo=r(Lqr,"pegasus"),Lqr.forEach(t),gTo=r(l3e," \u2014 "),o$=s(l3e,"A",{href:!0});var Bqr=n(o$);hTo=r(Bqr,"PegasusForConditionalGeneration"),Bqr.forEach(t),uTo=r(l3e," (Pegasus model)"),l3e.forEach(t),pTo=i(le),ub=s(le,"LI",{});var i3e=n(ub);ioe=s(i3e,"STRONG",{});var xqr=n(ioe);_To=r(xqr,"plbart"),xqr.forEach(t),bTo=r(i3e," \u2014 "),r$=s(i3e,"A",{href:!0});var kqr=n(r$);vTo=r(kqr,"PLBartForConditionalGeneration"),kqr.forEach(t),TTo=r(i3e," (PLBart model)"),i3e.forEach(t),FTo=i(le),pb=s(le,"LI",{});var d3e=n(pb);doe=s(d3e,"STRONG",{});var Rqr=n(doe);CTo=r(Rqr,"prophetnet"),Rqr.forEach(t),MTo=r(d3e," \u2014 "),t$=s(d3e,"A",{href:!0});var Sqr=n(t$);ETo=r(Sqr,"ProphetNetForConditionalGeneration"),Sqr.forEach(t),yTo=r(d3e," (ProphetNet model)"),d3e.forEach(t),wTo=i(le),_b=s(le,"LI",{});var c3e=n(_b);coe=s(c3e,"STRONG",{});var Pqr=n(coe);ATo=r(Pqr,"t5"),Pqr.forEach(t),LTo=r(c3e," \u2014 "),a$=s(c3e,"A",{href:!0});var $qr=n(a$);BTo=r($qr,"T5ForConditionalGeneration"),$qr.forEach(t),xTo=r(c3e," (T5 model)"),c3e.forEach(t),kTo=i(le),bb=s(le,"LI",{});var m3e=n(bb);moe=s(m3e,"STRONG",{});var Iqr=n(moe);RTo=r(Iqr,"xlm-prophetnet"),Iqr.forEach(t),STo=r(m3e," \u2014 "),s$=s(m3e,"A",{href:!0});var jqr=n(s$);PTo=r(jqr,"XLMProphetNetForConditionalGeneration"),jqr.forEach(t),$To=r(m3e," (XLMProphetNet model)"),m3e.forEach(t),le.forEach(t),ITo=i(jt),vb=s(jt,"P",{});var f3e=n(vb);jTo=r(f3e,"The model is set in evaluation mode by default using "),foe=s(f3e,"CODE",{});var Nqr=n(foe);NTo=r(Nqr,"model.eval()"),Nqr.forEach(t),DTo=r(f3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=s(f3e,"CODE",{});var Dqr=n(goe);qTo=r(Dqr,"model.train()"),Dqr.forEach(t),f3e.forEach(t),GTo=i(jt),hoe=s(jt,"P",{});var qqr=n(hoe);OTo=r(qqr,"Examples:"),qqr.forEach(t),XTo=i(jt),f(_y.$$.fragment,jt),jt.forEach(t),Wn.forEach(t),P8e=i(d),od=s(d,"H2",{class:!0});var GBe=n(od);Tb=s(GBe,"A",{id:!0,class:!0,href:!0});var Gqr=n(Tb);uoe=s(Gqr,"SPAN",{});var Oqr=n(uoe);f(by.$$.fragment,Oqr),Oqr.forEach(t),Gqr.forEach(t),zTo=i(GBe),poe=s(GBe,"SPAN",{});var Xqr=n(poe);VTo=r(Xqr,"AutoModelForSequenceClassification"),Xqr.forEach(t),GBe.forEach(t),$8e=i(d),Jo=s(d,"DIV",{class:!0});var Hn=n(Jo);f(vy.$$.fragment,Hn),WTo=i(Hn),rd=s(Hn,"P",{});var lz=n(rd);QTo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_oe=s(lz,"CODE",{});var zqr=n(_oe);HTo=r(zqr,"from_pretrained()"),zqr.forEach(t),UTo=r(lz,"class method or the "),boe=s(lz,"CODE",{});var Vqr=n(boe);JTo=r(Vqr,"from_config()"),Vqr.forEach(t),YTo=r(lz,`class
method.`),lz.forEach(t),KTo=i(Hn),Ty=s(Hn,"P",{});var OBe=n(Ty);ZTo=r(OBe,"This class cannot be instantiated directly using "),voe=s(OBe,"CODE",{});var Wqr=n(voe);e1o=r(Wqr,"__init__()"),Wqr.forEach(t),o1o=r(OBe," (throws an error)."),OBe.forEach(t),r1o=i(Hn),Xr=s(Hn,"DIV",{class:!0});var Un=n(Xr);f(Fy.$$.fragment,Un),t1o=i(Un),Toe=s(Un,"P",{});var Qqr=n(Toe);a1o=r(Qqr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qqr.forEach(t),s1o=i(Un),td=s(Un,"P",{});var iz=n(td);n1o=r(iz,`Note:
Loading a model from its configuration file does `),Foe=s(iz,"STRONG",{});var Hqr=n(Foe);l1o=r(Hqr,"not"),Hqr.forEach(t),i1o=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=s(iz,"CODE",{});var Uqr=n(Coe);d1o=r(Uqr,"from_pretrained()"),Uqr.forEach(t),c1o=r(iz,"to load the model weights."),iz.forEach(t),m1o=i(Un),Moe=s(Un,"P",{});var Jqr=n(Moe);f1o=r(Jqr,"Examples:"),Jqr.forEach(t),g1o=i(Un),f(Cy.$$.fragment,Un),Un.forEach(t),h1o=i(Hn),$e=s(Hn,"DIV",{class:!0});var Nt=n($e);f(My.$$.fragment,Nt),u1o=i(Nt),Eoe=s(Nt,"P",{});var Yqr=n(Eoe);p1o=r(Yqr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Yqr.forEach(t),_1o=i(Nt),za=s(Nt,"P",{});var h3=n(za);b1o=r(h3,"The model class to instantiate is selected based on the "),yoe=s(h3,"CODE",{});var Kqr=n(yoe);v1o=r(Kqr,"model_type"),Kqr.forEach(t),T1o=r(h3,` property of the config object (either
passed as an argument or loaded from `),woe=s(h3,"CODE",{});var Zqr=n(woe);F1o=r(Zqr,"pretrained_model_name_or_path"),Zqr.forEach(t),C1o=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=s(h3,"CODE",{});var eGr=n(Aoe);M1o=r(eGr,"pretrained_model_name_or_path"),eGr.forEach(t),E1o=r(h3,":"),h3.forEach(t),y1o=i(Nt),A=s(Nt,"UL",{});var L=n(A);Fb=s(L,"LI",{});var g3e=n(Fb);Loe=s(g3e,"STRONG",{});var oGr=n(Loe);w1o=r(oGr,"albert"),oGr.forEach(t),A1o=r(g3e," \u2014 "),n$=s(g3e,"A",{href:!0});var rGr=n(n$);L1o=r(rGr,"AlbertForSequenceClassification"),rGr.forEach(t),B1o=r(g3e," (ALBERT model)"),g3e.forEach(t),x1o=i(L),Cb=s(L,"LI",{});var h3e=n(Cb);Boe=s(h3e,"STRONG",{});var tGr=n(Boe);k1o=r(tGr,"bart"),tGr.forEach(t),R1o=r(h3e," \u2014 "),l$=s(h3e,"A",{href:!0});var aGr=n(l$);S1o=r(aGr,"BartForSequenceClassification"),aGr.forEach(t),P1o=r(h3e," (BART model)"),h3e.forEach(t),$1o=i(L),Mb=s(L,"LI",{});var u3e=n(Mb);xoe=s(u3e,"STRONG",{});var sGr=n(xoe);I1o=r(sGr,"bert"),sGr.forEach(t),j1o=r(u3e," \u2014 "),i$=s(u3e,"A",{href:!0});var nGr=n(i$);N1o=r(nGr,"BertForSequenceClassification"),nGr.forEach(t),D1o=r(u3e," (BERT model)"),u3e.forEach(t),q1o=i(L),Eb=s(L,"LI",{});var p3e=n(Eb);koe=s(p3e,"STRONG",{});var lGr=n(koe);G1o=r(lGr,"big_bird"),lGr.forEach(t),O1o=r(p3e," \u2014 "),d$=s(p3e,"A",{href:!0});var iGr=n(d$);X1o=r(iGr,"BigBirdForSequenceClassification"),iGr.forEach(t),z1o=r(p3e," (BigBird model)"),p3e.forEach(t),V1o=i(L),yb=s(L,"LI",{});var _3e=n(yb);Roe=s(_3e,"STRONG",{});var dGr=n(Roe);W1o=r(dGr,"bigbird_pegasus"),dGr.forEach(t),Q1o=r(_3e," \u2014 "),c$=s(_3e,"A",{href:!0});var cGr=n(c$);H1o=r(cGr,"BigBirdPegasusForSequenceClassification"),cGr.forEach(t),U1o=r(_3e," (BigBirdPegasus model)"),_3e.forEach(t),J1o=i(L),wb=s(L,"LI",{});var b3e=n(wb);Soe=s(b3e,"STRONG",{});var mGr=n(Soe);Y1o=r(mGr,"camembert"),mGr.forEach(t),K1o=r(b3e," \u2014 "),m$=s(b3e,"A",{href:!0});var fGr=n(m$);Z1o=r(fGr,"CamembertForSequenceClassification"),fGr.forEach(t),eFo=r(b3e," (CamemBERT model)"),b3e.forEach(t),oFo=i(L),Ab=s(L,"LI",{});var v3e=n(Ab);Poe=s(v3e,"STRONG",{});var gGr=n(Poe);rFo=r(gGr,"canine"),gGr.forEach(t),tFo=r(v3e," \u2014 "),f$=s(v3e,"A",{href:!0});var hGr=n(f$);aFo=r(hGr,"CanineForSequenceClassification"),hGr.forEach(t),sFo=r(v3e," (Canine model)"),v3e.forEach(t),nFo=i(L),Lb=s(L,"LI",{});var T3e=n(Lb);$oe=s(T3e,"STRONG",{});var uGr=n($oe);lFo=r(uGr,"convbert"),uGr.forEach(t),iFo=r(T3e," \u2014 "),g$=s(T3e,"A",{href:!0});var pGr=n(g$);dFo=r(pGr,"ConvBertForSequenceClassification"),pGr.forEach(t),cFo=r(T3e," (ConvBERT model)"),T3e.forEach(t),mFo=i(L),Bb=s(L,"LI",{});var F3e=n(Bb);Ioe=s(F3e,"STRONG",{});var _Gr=n(Ioe);fFo=r(_Gr,"ctrl"),_Gr.forEach(t),gFo=r(F3e," \u2014 "),h$=s(F3e,"A",{href:!0});var bGr=n(h$);hFo=r(bGr,"CTRLForSequenceClassification"),bGr.forEach(t),uFo=r(F3e," (CTRL model)"),F3e.forEach(t),pFo=i(L),xb=s(L,"LI",{});var C3e=n(xb);joe=s(C3e,"STRONG",{});var vGr=n(joe);_Fo=r(vGr,"deberta"),vGr.forEach(t),bFo=r(C3e," \u2014 "),u$=s(C3e,"A",{href:!0});var TGr=n(u$);vFo=r(TGr,"DebertaForSequenceClassification"),TGr.forEach(t),TFo=r(C3e," (DeBERTa model)"),C3e.forEach(t),FFo=i(L),kb=s(L,"LI",{});var M3e=n(kb);Noe=s(M3e,"STRONG",{});var FGr=n(Noe);CFo=r(FGr,"deberta-v2"),FGr.forEach(t),MFo=r(M3e," \u2014 "),p$=s(M3e,"A",{href:!0});var CGr=n(p$);EFo=r(CGr,"DebertaV2ForSequenceClassification"),CGr.forEach(t),yFo=r(M3e," (DeBERTa-v2 model)"),M3e.forEach(t),wFo=i(L),Rb=s(L,"LI",{});var E3e=n(Rb);Doe=s(E3e,"STRONG",{});var MGr=n(Doe);AFo=r(MGr,"distilbert"),MGr.forEach(t),LFo=r(E3e," \u2014 "),_$=s(E3e,"A",{href:!0});var EGr=n(_$);BFo=r(EGr,"DistilBertForSequenceClassification"),EGr.forEach(t),xFo=r(E3e," (DistilBERT model)"),E3e.forEach(t),kFo=i(L),Sb=s(L,"LI",{});var y3e=n(Sb);qoe=s(y3e,"STRONG",{});var yGr=n(qoe);RFo=r(yGr,"electra"),yGr.forEach(t),SFo=r(y3e," \u2014 "),b$=s(y3e,"A",{href:!0});var wGr=n(b$);PFo=r(wGr,"ElectraForSequenceClassification"),wGr.forEach(t),$Fo=r(y3e," (ELECTRA model)"),y3e.forEach(t),IFo=i(L),Pb=s(L,"LI",{});var w3e=n(Pb);Goe=s(w3e,"STRONG",{});var AGr=n(Goe);jFo=r(AGr,"flaubert"),AGr.forEach(t),NFo=r(w3e," \u2014 "),v$=s(w3e,"A",{href:!0});var LGr=n(v$);DFo=r(LGr,"FlaubertForSequenceClassification"),LGr.forEach(t),qFo=r(w3e," (FlauBERT model)"),w3e.forEach(t),GFo=i(L),$b=s(L,"LI",{});var A3e=n($b);Ooe=s(A3e,"STRONG",{});var BGr=n(Ooe);OFo=r(BGr,"fnet"),BGr.forEach(t),XFo=r(A3e," \u2014 "),T$=s(A3e,"A",{href:!0});var xGr=n(T$);zFo=r(xGr,"FNetForSequenceClassification"),xGr.forEach(t),VFo=r(A3e," (FNet model)"),A3e.forEach(t),WFo=i(L),Ib=s(L,"LI",{});var L3e=n(Ib);Xoe=s(L3e,"STRONG",{});var kGr=n(Xoe);QFo=r(kGr,"funnel"),kGr.forEach(t),HFo=r(L3e," \u2014 "),F$=s(L3e,"A",{href:!0});var RGr=n(F$);UFo=r(RGr,"FunnelForSequenceClassification"),RGr.forEach(t),JFo=r(L3e," (Funnel Transformer model)"),L3e.forEach(t),YFo=i(L),jb=s(L,"LI",{});var B3e=n(jb);zoe=s(B3e,"STRONG",{});var SGr=n(zoe);KFo=r(SGr,"gpt2"),SGr.forEach(t),ZFo=r(B3e," \u2014 "),C$=s(B3e,"A",{href:!0});var PGr=n(C$);eCo=r(PGr,"GPT2ForSequenceClassification"),PGr.forEach(t),oCo=r(B3e," (OpenAI GPT-2 model)"),B3e.forEach(t),rCo=i(L),Nb=s(L,"LI",{});var x3e=n(Nb);Voe=s(x3e,"STRONG",{});var $Gr=n(Voe);tCo=r($Gr,"gpt_neo"),$Gr.forEach(t),aCo=r(x3e," \u2014 "),M$=s(x3e,"A",{href:!0});var IGr=n(M$);sCo=r(IGr,"GPTNeoForSequenceClassification"),IGr.forEach(t),nCo=r(x3e," (GPT Neo model)"),x3e.forEach(t),lCo=i(L),Db=s(L,"LI",{});var k3e=n(Db);Woe=s(k3e,"STRONG",{});var jGr=n(Woe);iCo=r(jGr,"gptj"),jGr.forEach(t),dCo=r(k3e," \u2014 "),E$=s(k3e,"A",{href:!0});var NGr=n(E$);cCo=r(NGr,"GPTJForSequenceClassification"),NGr.forEach(t),mCo=r(k3e," (GPT-J model)"),k3e.forEach(t),fCo=i(L),qb=s(L,"LI",{});var R3e=n(qb);Qoe=s(R3e,"STRONG",{});var DGr=n(Qoe);gCo=r(DGr,"ibert"),DGr.forEach(t),hCo=r(R3e," \u2014 "),y$=s(R3e,"A",{href:!0});var qGr=n(y$);uCo=r(qGr,"IBertForSequenceClassification"),qGr.forEach(t),pCo=r(R3e," (I-BERT model)"),R3e.forEach(t),_Co=i(L),Gb=s(L,"LI",{});var S3e=n(Gb);Hoe=s(S3e,"STRONG",{});var GGr=n(Hoe);bCo=r(GGr,"layoutlm"),GGr.forEach(t),vCo=r(S3e," \u2014 "),w$=s(S3e,"A",{href:!0});var OGr=n(w$);TCo=r(OGr,"LayoutLMForSequenceClassification"),OGr.forEach(t),FCo=r(S3e," (LayoutLM model)"),S3e.forEach(t),CCo=i(L),Ob=s(L,"LI",{});var P3e=n(Ob);Uoe=s(P3e,"STRONG",{});var XGr=n(Uoe);MCo=r(XGr,"layoutlmv2"),XGr.forEach(t),ECo=r(P3e," \u2014 "),A$=s(P3e,"A",{href:!0});var zGr=n(A$);yCo=r(zGr,"LayoutLMv2ForSequenceClassification"),zGr.forEach(t),wCo=r(P3e," (LayoutLMv2 model)"),P3e.forEach(t),ACo=i(L),Xb=s(L,"LI",{});var $3e=n(Xb);Joe=s($3e,"STRONG",{});var VGr=n(Joe);LCo=r(VGr,"led"),VGr.forEach(t),BCo=r($3e," \u2014 "),L$=s($3e,"A",{href:!0});var WGr=n(L$);xCo=r(WGr,"LEDForSequenceClassification"),WGr.forEach(t),kCo=r($3e," (LED model)"),$3e.forEach(t),RCo=i(L),zb=s(L,"LI",{});var I3e=n(zb);Yoe=s(I3e,"STRONG",{});var QGr=n(Yoe);SCo=r(QGr,"longformer"),QGr.forEach(t),PCo=r(I3e," \u2014 "),B$=s(I3e,"A",{href:!0});var HGr=n(B$);$Co=r(HGr,"LongformerForSequenceClassification"),HGr.forEach(t),ICo=r(I3e," (Longformer model)"),I3e.forEach(t),jCo=i(L),Vb=s(L,"LI",{});var j3e=n(Vb);Koe=s(j3e,"STRONG",{});var UGr=n(Koe);NCo=r(UGr,"mbart"),UGr.forEach(t),DCo=r(j3e," \u2014 "),x$=s(j3e,"A",{href:!0});var JGr=n(x$);qCo=r(JGr,"MBartForSequenceClassification"),JGr.forEach(t),GCo=r(j3e," (mBART model)"),j3e.forEach(t),OCo=i(L),Wb=s(L,"LI",{});var N3e=n(Wb);Zoe=s(N3e,"STRONG",{});var YGr=n(Zoe);XCo=r(YGr,"megatron-bert"),YGr.forEach(t),zCo=r(N3e," \u2014 "),k$=s(N3e,"A",{href:!0});var KGr=n(k$);VCo=r(KGr,"MegatronBertForSequenceClassification"),KGr.forEach(t),WCo=r(N3e," (MegatronBert model)"),N3e.forEach(t),QCo=i(L),Qb=s(L,"LI",{});var D3e=n(Qb);ere=s(D3e,"STRONG",{});var ZGr=n(ere);HCo=r(ZGr,"mobilebert"),ZGr.forEach(t),UCo=r(D3e," \u2014 "),R$=s(D3e,"A",{href:!0});var eOr=n(R$);JCo=r(eOr,"MobileBertForSequenceClassification"),eOr.forEach(t),YCo=r(D3e," (MobileBERT model)"),D3e.forEach(t),KCo=i(L),Hb=s(L,"LI",{});var q3e=n(Hb);ore=s(q3e,"STRONG",{});var oOr=n(ore);ZCo=r(oOr,"mpnet"),oOr.forEach(t),e4o=r(q3e," \u2014 "),S$=s(q3e,"A",{href:!0});var rOr=n(S$);o4o=r(rOr,"MPNetForSequenceClassification"),rOr.forEach(t),r4o=r(q3e," (MPNet model)"),q3e.forEach(t),t4o=i(L),Ub=s(L,"LI",{});var G3e=n(Ub);rre=s(G3e,"STRONG",{});var tOr=n(rre);a4o=r(tOr,"nystromformer"),tOr.forEach(t),s4o=r(G3e," \u2014 "),P$=s(G3e,"A",{href:!0});var aOr=n(P$);n4o=r(aOr,"NystromformerForSequenceClassification"),aOr.forEach(t),l4o=r(G3e," (Nystromformer model)"),G3e.forEach(t),i4o=i(L),Jb=s(L,"LI",{});var O3e=n(Jb);tre=s(O3e,"STRONG",{});var sOr=n(tre);d4o=r(sOr,"openai-gpt"),sOr.forEach(t),c4o=r(O3e," \u2014 "),$$=s(O3e,"A",{href:!0});var nOr=n($$);m4o=r(nOr,"OpenAIGPTForSequenceClassification"),nOr.forEach(t),f4o=r(O3e," (OpenAI GPT model)"),O3e.forEach(t),g4o=i(L),Yb=s(L,"LI",{});var X3e=n(Yb);are=s(X3e,"STRONG",{});var lOr=n(are);h4o=r(lOr,"perceiver"),lOr.forEach(t),u4o=r(X3e," \u2014 "),I$=s(X3e,"A",{href:!0});var iOr=n(I$);p4o=r(iOr,"PerceiverForSequenceClassification"),iOr.forEach(t),_4o=r(X3e," (Perceiver model)"),X3e.forEach(t),b4o=i(L),Kb=s(L,"LI",{});var z3e=n(Kb);sre=s(z3e,"STRONG",{});var dOr=n(sre);v4o=r(dOr,"plbart"),dOr.forEach(t),T4o=r(z3e," \u2014 "),j$=s(z3e,"A",{href:!0});var cOr=n(j$);F4o=r(cOr,"PLBartForSequenceClassification"),cOr.forEach(t),C4o=r(z3e," (PLBart model)"),z3e.forEach(t),M4o=i(L),Zb=s(L,"LI",{});var V3e=n(Zb);nre=s(V3e,"STRONG",{});var mOr=n(nre);E4o=r(mOr,"qdqbert"),mOr.forEach(t),y4o=r(V3e," \u2014 "),N$=s(V3e,"A",{href:!0});var fOr=n(N$);w4o=r(fOr,"QDQBertForSequenceClassification"),fOr.forEach(t),A4o=r(V3e," (QDQBert model)"),V3e.forEach(t),L4o=i(L),e2=s(L,"LI",{});var W3e=n(e2);lre=s(W3e,"STRONG",{});var gOr=n(lre);B4o=r(gOr,"reformer"),gOr.forEach(t),x4o=r(W3e," \u2014 "),D$=s(W3e,"A",{href:!0});var hOr=n(D$);k4o=r(hOr,"ReformerForSequenceClassification"),hOr.forEach(t),R4o=r(W3e," (Reformer model)"),W3e.forEach(t),S4o=i(L),o2=s(L,"LI",{});var Q3e=n(o2);ire=s(Q3e,"STRONG",{});var uOr=n(ire);P4o=r(uOr,"rembert"),uOr.forEach(t),$4o=r(Q3e," \u2014 "),q$=s(Q3e,"A",{href:!0});var pOr=n(q$);I4o=r(pOr,"RemBertForSequenceClassification"),pOr.forEach(t),j4o=r(Q3e," (RemBERT model)"),Q3e.forEach(t),N4o=i(L),r2=s(L,"LI",{});var H3e=n(r2);dre=s(H3e,"STRONG",{});var _Or=n(dre);D4o=r(_Or,"roberta"),_Or.forEach(t),q4o=r(H3e," \u2014 "),G$=s(H3e,"A",{href:!0});var bOr=n(G$);G4o=r(bOr,"RobertaForSequenceClassification"),bOr.forEach(t),O4o=r(H3e," (RoBERTa model)"),H3e.forEach(t),X4o=i(L),t2=s(L,"LI",{});var U3e=n(t2);cre=s(U3e,"STRONG",{});var vOr=n(cre);z4o=r(vOr,"roformer"),vOr.forEach(t),V4o=r(U3e," \u2014 "),O$=s(U3e,"A",{href:!0});var TOr=n(O$);W4o=r(TOr,"RoFormerForSequenceClassification"),TOr.forEach(t),Q4o=r(U3e," (RoFormer model)"),U3e.forEach(t),H4o=i(L),a2=s(L,"LI",{});var J3e=n(a2);mre=s(J3e,"STRONG",{});var FOr=n(mre);U4o=r(FOr,"squeezebert"),FOr.forEach(t),J4o=r(J3e," \u2014 "),X$=s(J3e,"A",{href:!0});var COr=n(X$);Y4o=r(COr,"SqueezeBertForSequenceClassification"),COr.forEach(t),K4o=r(J3e," (SqueezeBERT model)"),J3e.forEach(t),Z4o=i(L),s2=s(L,"LI",{});var Y3e=n(s2);fre=s(Y3e,"STRONG",{});var MOr=n(fre);eMo=r(MOr,"tapas"),MOr.forEach(t),oMo=r(Y3e," \u2014 "),z$=s(Y3e,"A",{href:!0});var EOr=n(z$);rMo=r(EOr,"TapasForSequenceClassification"),EOr.forEach(t),tMo=r(Y3e," (TAPAS model)"),Y3e.forEach(t),aMo=i(L),n2=s(L,"LI",{});var K3e=n(n2);gre=s(K3e,"STRONG",{});var yOr=n(gre);sMo=r(yOr,"transfo-xl"),yOr.forEach(t),nMo=r(K3e," \u2014 "),V$=s(K3e,"A",{href:!0});var wOr=n(V$);lMo=r(wOr,"TransfoXLForSequenceClassification"),wOr.forEach(t),iMo=r(K3e," (Transformer-XL model)"),K3e.forEach(t),dMo=i(L),l2=s(L,"LI",{});var Z3e=n(l2);hre=s(Z3e,"STRONG",{});var AOr=n(hre);cMo=r(AOr,"xlm"),AOr.forEach(t),mMo=r(Z3e," \u2014 "),W$=s(Z3e,"A",{href:!0});var LOr=n(W$);fMo=r(LOr,"XLMForSequenceClassification"),LOr.forEach(t),gMo=r(Z3e," (XLM model)"),Z3e.forEach(t),hMo=i(L),i2=s(L,"LI",{});var e5e=n(i2);ure=s(e5e,"STRONG",{});var BOr=n(ure);uMo=r(BOr,"xlm-roberta"),BOr.forEach(t),pMo=r(e5e," \u2014 "),Q$=s(e5e,"A",{href:!0});var xOr=n(Q$);_Mo=r(xOr,"XLMRobertaForSequenceClassification"),xOr.forEach(t),bMo=r(e5e," (XLM-RoBERTa model)"),e5e.forEach(t),vMo=i(L),d2=s(L,"LI",{});var o5e=n(d2);pre=s(o5e,"STRONG",{});var kOr=n(pre);TMo=r(kOr,"xlm-roberta-xl"),kOr.forEach(t),FMo=r(o5e," \u2014 "),H$=s(o5e,"A",{href:!0});var ROr=n(H$);CMo=r(ROr,"XLMRobertaXLForSequenceClassification"),ROr.forEach(t),MMo=r(o5e," (XLM-RoBERTa-XL model)"),o5e.forEach(t),EMo=i(L),c2=s(L,"LI",{});var r5e=n(c2);_re=s(r5e,"STRONG",{});var SOr=n(_re);yMo=r(SOr,"xlnet"),SOr.forEach(t),wMo=r(r5e," \u2014 "),U$=s(r5e,"A",{href:!0});var POr=n(U$);AMo=r(POr,"XLNetForSequenceClassification"),POr.forEach(t),LMo=r(r5e," (XLNet model)"),r5e.forEach(t),BMo=i(L),m2=s(L,"LI",{});var t5e=n(m2);bre=s(t5e,"STRONG",{});var $Or=n(bre);xMo=r($Or,"yoso"),$Or.forEach(t),kMo=r(t5e," \u2014 "),J$=s(t5e,"A",{href:!0});var IOr=n(J$);RMo=r(IOr,"YosoForSequenceClassification"),IOr.forEach(t),SMo=r(t5e," (YOSO model)"),t5e.forEach(t),L.forEach(t),PMo=i(Nt),f2=s(Nt,"P",{});var a5e=n(f2);$Mo=r(a5e,"The model is set in evaluation mode by default using "),vre=s(a5e,"CODE",{});var jOr=n(vre);IMo=r(jOr,"model.eval()"),jOr.forEach(t),jMo=r(a5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=s(a5e,"CODE",{});var NOr=n(Tre);NMo=r(NOr,"model.train()"),NOr.forEach(t),a5e.forEach(t),DMo=i(Nt),Fre=s(Nt,"P",{});var DOr=n(Fre);qMo=r(DOr,"Examples:"),DOr.forEach(t),GMo=i(Nt),f(Ey.$$.fragment,Nt),Nt.forEach(t),Hn.forEach(t),I8e=i(d),ad=s(d,"H2",{class:!0});var XBe=n(ad);g2=s(XBe,"A",{id:!0,class:!0,href:!0});var qOr=n(g2);Cre=s(qOr,"SPAN",{});var GOr=n(Cre);f(yy.$$.fragment,GOr),GOr.forEach(t),qOr.forEach(t),OMo=i(XBe),Mre=s(XBe,"SPAN",{});var OOr=n(Mre);XMo=r(OOr,"AutoModelForMultipleChoice"),OOr.forEach(t),XBe.forEach(t),j8e=i(d),Yo=s(d,"DIV",{class:!0});var Jn=n(Yo);f(wy.$$.fragment,Jn),zMo=i(Jn),sd=s(Jn,"P",{});var dz=n(sd);VMo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ere=s(dz,"CODE",{});var XOr=n(Ere);WMo=r(XOr,"from_pretrained()"),XOr.forEach(t),QMo=r(dz,"class method or the "),yre=s(dz,"CODE",{});var zOr=n(yre);HMo=r(zOr,"from_config()"),zOr.forEach(t),UMo=r(dz,`class
method.`),dz.forEach(t),JMo=i(Jn),Ay=s(Jn,"P",{});var zBe=n(Ay);YMo=r(zBe,"This class cannot be instantiated directly using "),wre=s(zBe,"CODE",{});var VOr=n(wre);KMo=r(VOr,"__init__()"),VOr.forEach(t),ZMo=r(zBe," (throws an error)."),zBe.forEach(t),eEo=i(Jn),zr=s(Jn,"DIV",{class:!0});var Yn=n(zr);f(Ly.$$.fragment,Yn),oEo=i(Yn),Are=s(Yn,"P",{});var WOr=n(Are);rEo=r(WOr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WOr.forEach(t),tEo=i(Yn),nd=s(Yn,"P",{});var cz=n(nd);aEo=r(cz,`Note:
Loading a model from its configuration file does `),Lre=s(cz,"STRONG",{});var QOr=n(Lre);sEo=r(QOr,"not"),QOr.forEach(t),nEo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=s(cz,"CODE",{});var HOr=n(Bre);lEo=r(HOr,"from_pretrained()"),HOr.forEach(t),iEo=r(cz,"to load the model weights."),cz.forEach(t),dEo=i(Yn),xre=s(Yn,"P",{});var UOr=n(xre);cEo=r(UOr,"Examples:"),UOr.forEach(t),mEo=i(Yn),f(By.$$.fragment,Yn),Yn.forEach(t),fEo=i(Jn),Ie=s(Jn,"DIV",{class:!0});var Dt=n(Ie);f(xy.$$.fragment,Dt),gEo=i(Dt),kre=s(Dt,"P",{});var JOr=n(kre);hEo=r(JOr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JOr.forEach(t),uEo=i(Dt),Va=s(Dt,"P",{});var u3=n(Va);pEo=r(u3,"The model class to instantiate is selected based on the "),Rre=s(u3,"CODE",{});var YOr=n(Rre);_Eo=r(YOr,"model_type"),YOr.forEach(t),bEo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Sre=s(u3,"CODE",{});var KOr=n(Sre);vEo=r(KOr,"pretrained_model_name_or_path"),KOr.forEach(t),TEo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=s(u3,"CODE",{});var ZOr=n(Pre);FEo=r(ZOr,"pretrained_model_name_or_path"),ZOr.forEach(t),CEo=r(u3,":"),u3.forEach(t),MEo=i(Dt),G=s(Dt,"UL",{});var O=n(G);h2=s(O,"LI",{});var s5e=n(h2);$re=s(s5e,"STRONG",{});var eXr=n($re);EEo=r(eXr,"albert"),eXr.forEach(t),yEo=r(s5e," \u2014 "),Y$=s(s5e,"A",{href:!0});var oXr=n(Y$);wEo=r(oXr,"AlbertForMultipleChoice"),oXr.forEach(t),AEo=r(s5e," (ALBERT model)"),s5e.forEach(t),LEo=i(O),u2=s(O,"LI",{});var n5e=n(u2);Ire=s(n5e,"STRONG",{});var rXr=n(Ire);BEo=r(rXr,"bert"),rXr.forEach(t),xEo=r(n5e," \u2014 "),K$=s(n5e,"A",{href:!0});var tXr=n(K$);kEo=r(tXr,"BertForMultipleChoice"),tXr.forEach(t),REo=r(n5e," (BERT model)"),n5e.forEach(t),SEo=i(O),p2=s(O,"LI",{});var l5e=n(p2);jre=s(l5e,"STRONG",{});var aXr=n(jre);PEo=r(aXr,"big_bird"),aXr.forEach(t),$Eo=r(l5e," \u2014 "),Z$=s(l5e,"A",{href:!0});var sXr=n(Z$);IEo=r(sXr,"BigBirdForMultipleChoice"),sXr.forEach(t),jEo=r(l5e," (BigBird model)"),l5e.forEach(t),NEo=i(O),_2=s(O,"LI",{});var i5e=n(_2);Nre=s(i5e,"STRONG",{});var nXr=n(Nre);DEo=r(nXr,"camembert"),nXr.forEach(t),qEo=r(i5e," \u2014 "),eI=s(i5e,"A",{href:!0});var lXr=n(eI);GEo=r(lXr,"CamembertForMultipleChoice"),lXr.forEach(t),OEo=r(i5e," (CamemBERT model)"),i5e.forEach(t),XEo=i(O),b2=s(O,"LI",{});var d5e=n(b2);Dre=s(d5e,"STRONG",{});var iXr=n(Dre);zEo=r(iXr,"canine"),iXr.forEach(t),VEo=r(d5e," \u2014 "),oI=s(d5e,"A",{href:!0});var dXr=n(oI);WEo=r(dXr,"CanineForMultipleChoice"),dXr.forEach(t),QEo=r(d5e," (Canine model)"),d5e.forEach(t),HEo=i(O),v2=s(O,"LI",{});var c5e=n(v2);qre=s(c5e,"STRONG",{});var cXr=n(qre);UEo=r(cXr,"convbert"),cXr.forEach(t),JEo=r(c5e," \u2014 "),rI=s(c5e,"A",{href:!0});var mXr=n(rI);YEo=r(mXr,"ConvBertForMultipleChoice"),mXr.forEach(t),KEo=r(c5e," (ConvBERT model)"),c5e.forEach(t),ZEo=i(O),T2=s(O,"LI",{});var m5e=n(T2);Gre=s(m5e,"STRONG",{});var fXr=n(Gre);e3o=r(fXr,"distilbert"),fXr.forEach(t),o3o=r(m5e," \u2014 "),tI=s(m5e,"A",{href:!0});var gXr=n(tI);r3o=r(gXr,"DistilBertForMultipleChoice"),gXr.forEach(t),t3o=r(m5e," (DistilBERT model)"),m5e.forEach(t),a3o=i(O),F2=s(O,"LI",{});var f5e=n(F2);Ore=s(f5e,"STRONG",{});var hXr=n(Ore);s3o=r(hXr,"electra"),hXr.forEach(t),n3o=r(f5e," \u2014 "),aI=s(f5e,"A",{href:!0});var uXr=n(aI);l3o=r(uXr,"ElectraForMultipleChoice"),uXr.forEach(t),i3o=r(f5e," (ELECTRA model)"),f5e.forEach(t),d3o=i(O),C2=s(O,"LI",{});var g5e=n(C2);Xre=s(g5e,"STRONG",{});var pXr=n(Xre);c3o=r(pXr,"flaubert"),pXr.forEach(t),m3o=r(g5e," \u2014 "),sI=s(g5e,"A",{href:!0});var _Xr=n(sI);f3o=r(_Xr,"FlaubertForMultipleChoice"),_Xr.forEach(t),g3o=r(g5e," (FlauBERT model)"),g5e.forEach(t),h3o=i(O),M2=s(O,"LI",{});var h5e=n(M2);zre=s(h5e,"STRONG",{});var bXr=n(zre);u3o=r(bXr,"fnet"),bXr.forEach(t),p3o=r(h5e," \u2014 "),nI=s(h5e,"A",{href:!0});var vXr=n(nI);_3o=r(vXr,"FNetForMultipleChoice"),vXr.forEach(t),b3o=r(h5e," (FNet model)"),h5e.forEach(t),v3o=i(O),E2=s(O,"LI",{});var u5e=n(E2);Vre=s(u5e,"STRONG",{});var TXr=n(Vre);T3o=r(TXr,"funnel"),TXr.forEach(t),F3o=r(u5e," \u2014 "),lI=s(u5e,"A",{href:!0});var FXr=n(lI);C3o=r(FXr,"FunnelForMultipleChoice"),FXr.forEach(t),M3o=r(u5e," (Funnel Transformer model)"),u5e.forEach(t),E3o=i(O),y2=s(O,"LI",{});var p5e=n(y2);Wre=s(p5e,"STRONG",{});var CXr=n(Wre);y3o=r(CXr,"ibert"),CXr.forEach(t),w3o=r(p5e," \u2014 "),iI=s(p5e,"A",{href:!0});var MXr=n(iI);A3o=r(MXr,"IBertForMultipleChoice"),MXr.forEach(t),L3o=r(p5e," (I-BERT model)"),p5e.forEach(t),B3o=i(O),w2=s(O,"LI",{});var _5e=n(w2);Qre=s(_5e,"STRONG",{});var EXr=n(Qre);x3o=r(EXr,"longformer"),EXr.forEach(t),k3o=r(_5e," \u2014 "),dI=s(_5e,"A",{href:!0});var yXr=n(dI);R3o=r(yXr,"LongformerForMultipleChoice"),yXr.forEach(t),S3o=r(_5e," (Longformer model)"),_5e.forEach(t),P3o=i(O),A2=s(O,"LI",{});var b5e=n(A2);Hre=s(b5e,"STRONG",{});var wXr=n(Hre);$3o=r(wXr,"megatron-bert"),wXr.forEach(t),I3o=r(b5e," \u2014 "),cI=s(b5e,"A",{href:!0});var AXr=n(cI);j3o=r(AXr,"MegatronBertForMultipleChoice"),AXr.forEach(t),N3o=r(b5e," (MegatronBert model)"),b5e.forEach(t),D3o=i(O),L2=s(O,"LI",{});var v5e=n(L2);Ure=s(v5e,"STRONG",{});var LXr=n(Ure);q3o=r(LXr,"mobilebert"),LXr.forEach(t),G3o=r(v5e," \u2014 "),mI=s(v5e,"A",{href:!0});var BXr=n(mI);O3o=r(BXr,"MobileBertForMultipleChoice"),BXr.forEach(t),X3o=r(v5e," (MobileBERT model)"),v5e.forEach(t),z3o=i(O),B2=s(O,"LI",{});var T5e=n(B2);Jre=s(T5e,"STRONG",{});var xXr=n(Jre);V3o=r(xXr,"mpnet"),xXr.forEach(t),W3o=r(T5e," \u2014 "),fI=s(T5e,"A",{href:!0});var kXr=n(fI);Q3o=r(kXr,"MPNetForMultipleChoice"),kXr.forEach(t),H3o=r(T5e," (MPNet model)"),T5e.forEach(t),U3o=i(O),x2=s(O,"LI",{});var F5e=n(x2);Yre=s(F5e,"STRONG",{});var RXr=n(Yre);J3o=r(RXr,"nystromformer"),RXr.forEach(t),Y3o=r(F5e," \u2014 "),gI=s(F5e,"A",{href:!0});var SXr=n(gI);K3o=r(SXr,"NystromformerForMultipleChoice"),SXr.forEach(t),Z3o=r(F5e," (Nystromformer model)"),F5e.forEach(t),e5o=i(O),k2=s(O,"LI",{});var C5e=n(k2);Kre=s(C5e,"STRONG",{});var PXr=n(Kre);o5o=r(PXr,"qdqbert"),PXr.forEach(t),r5o=r(C5e," \u2014 "),hI=s(C5e,"A",{href:!0});var $Xr=n(hI);t5o=r($Xr,"QDQBertForMultipleChoice"),$Xr.forEach(t),a5o=r(C5e," (QDQBert model)"),C5e.forEach(t),s5o=i(O),R2=s(O,"LI",{});var M5e=n(R2);Zre=s(M5e,"STRONG",{});var IXr=n(Zre);n5o=r(IXr,"rembert"),IXr.forEach(t),l5o=r(M5e," \u2014 "),uI=s(M5e,"A",{href:!0});var jXr=n(uI);i5o=r(jXr,"RemBertForMultipleChoice"),jXr.forEach(t),d5o=r(M5e," (RemBERT model)"),M5e.forEach(t),c5o=i(O),S2=s(O,"LI",{});var E5e=n(S2);ete=s(E5e,"STRONG",{});var NXr=n(ete);m5o=r(NXr,"roberta"),NXr.forEach(t),f5o=r(E5e," \u2014 "),pI=s(E5e,"A",{href:!0});var DXr=n(pI);g5o=r(DXr,"RobertaForMultipleChoice"),DXr.forEach(t),h5o=r(E5e," (RoBERTa model)"),E5e.forEach(t),u5o=i(O),P2=s(O,"LI",{});var y5e=n(P2);ote=s(y5e,"STRONG",{});var qXr=n(ote);p5o=r(qXr,"roformer"),qXr.forEach(t),_5o=r(y5e," \u2014 "),_I=s(y5e,"A",{href:!0});var GXr=n(_I);b5o=r(GXr,"RoFormerForMultipleChoice"),GXr.forEach(t),v5o=r(y5e," (RoFormer model)"),y5e.forEach(t),T5o=i(O),$2=s(O,"LI",{});var w5e=n($2);rte=s(w5e,"STRONG",{});var OXr=n(rte);F5o=r(OXr,"squeezebert"),OXr.forEach(t),C5o=r(w5e," \u2014 "),bI=s(w5e,"A",{href:!0});var XXr=n(bI);M5o=r(XXr,"SqueezeBertForMultipleChoice"),XXr.forEach(t),E5o=r(w5e," (SqueezeBERT model)"),w5e.forEach(t),y5o=i(O),I2=s(O,"LI",{});var A5e=n(I2);tte=s(A5e,"STRONG",{});var zXr=n(tte);w5o=r(zXr,"xlm"),zXr.forEach(t),A5o=r(A5e," \u2014 "),vI=s(A5e,"A",{href:!0});var VXr=n(vI);L5o=r(VXr,"XLMForMultipleChoice"),VXr.forEach(t),B5o=r(A5e," (XLM model)"),A5e.forEach(t),x5o=i(O),j2=s(O,"LI",{});var L5e=n(j2);ate=s(L5e,"STRONG",{});var WXr=n(ate);k5o=r(WXr,"xlm-roberta"),WXr.forEach(t),R5o=r(L5e," \u2014 "),TI=s(L5e,"A",{href:!0});var QXr=n(TI);S5o=r(QXr,"XLMRobertaForMultipleChoice"),QXr.forEach(t),P5o=r(L5e," (XLM-RoBERTa model)"),L5e.forEach(t),$5o=i(O),N2=s(O,"LI",{});var B5e=n(N2);ste=s(B5e,"STRONG",{});var HXr=n(ste);I5o=r(HXr,"xlm-roberta-xl"),HXr.forEach(t),j5o=r(B5e," \u2014 "),FI=s(B5e,"A",{href:!0});var UXr=n(FI);N5o=r(UXr,"XLMRobertaXLForMultipleChoice"),UXr.forEach(t),D5o=r(B5e," (XLM-RoBERTa-XL model)"),B5e.forEach(t),q5o=i(O),D2=s(O,"LI",{});var x5e=n(D2);nte=s(x5e,"STRONG",{});var JXr=n(nte);G5o=r(JXr,"xlnet"),JXr.forEach(t),O5o=r(x5e," \u2014 "),CI=s(x5e,"A",{href:!0});var YXr=n(CI);X5o=r(YXr,"XLNetForMultipleChoice"),YXr.forEach(t),z5o=r(x5e," (XLNet model)"),x5e.forEach(t),V5o=i(O),q2=s(O,"LI",{});var k5e=n(q2);lte=s(k5e,"STRONG",{});var KXr=n(lte);W5o=r(KXr,"yoso"),KXr.forEach(t),Q5o=r(k5e," \u2014 "),MI=s(k5e,"A",{href:!0});var ZXr=n(MI);H5o=r(ZXr,"YosoForMultipleChoice"),ZXr.forEach(t),U5o=r(k5e," (YOSO model)"),k5e.forEach(t),O.forEach(t),J5o=i(Dt),G2=s(Dt,"P",{});var R5e=n(G2);Y5o=r(R5e,"The model is set in evaluation mode by default using "),ite=s(R5e,"CODE",{});var ezr=n(ite);K5o=r(ezr,"model.eval()"),ezr.forEach(t),Z5o=r(R5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=s(R5e,"CODE",{});var ozr=n(dte);eyo=r(ozr,"model.train()"),ozr.forEach(t),R5e.forEach(t),oyo=i(Dt),cte=s(Dt,"P",{});var rzr=n(cte);ryo=r(rzr,"Examples:"),rzr.forEach(t),tyo=i(Dt),f(ky.$$.fragment,Dt),Dt.forEach(t),Jn.forEach(t),N8e=i(d),ld=s(d,"H2",{class:!0});var VBe=n(ld);O2=s(VBe,"A",{id:!0,class:!0,href:!0});var tzr=n(O2);mte=s(tzr,"SPAN",{});var azr=n(mte);f(Ry.$$.fragment,azr),azr.forEach(t),tzr.forEach(t),ayo=i(VBe),fte=s(VBe,"SPAN",{});var szr=n(fte);syo=r(szr,"AutoModelForNextSentencePrediction"),szr.forEach(t),VBe.forEach(t),D8e=i(d),Ko=s(d,"DIV",{class:!0});var Kn=n(Ko);f(Sy.$$.fragment,Kn),nyo=i(Kn),id=s(Kn,"P",{});var mz=n(id);lyo=r(mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gte=s(mz,"CODE",{});var nzr=n(gte);iyo=r(nzr,"from_pretrained()"),nzr.forEach(t),dyo=r(mz,"class method or the "),hte=s(mz,"CODE",{});var lzr=n(hte);cyo=r(lzr,"from_config()"),lzr.forEach(t),myo=r(mz,`class
method.`),mz.forEach(t),fyo=i(Kn),Py=s(Kn,"P",{});var WBe=n(Py);gyo=r(WBe,"This class cannot be instantiated directly using "),ute=s(WBe,"CODE",{});var izr=n(ute);hyo=r(izr,"__init__()"),izr.forEach(t),uyo=r(WBe," (throws an error)."),WBe.forEach(t),pyo=i(Kn),Vr=s(Kn,"DIV",{class:!0});var Zn=n(Vr);f($y.$$.fragment,Zn),_yo=i(Zn),pte=s(Zn,"P",{});var dzr=n(pte);byo=r(dzr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dzr.forEach(t),vyo=i(Zn),dd=s(Zn,"P",{});var fz=n(dd);Tyo=r(fz,`Note:
Loading a model from its configuration file does `),_te=s(fz,"STRONG",{});var czr=n(_te);Fyo=r(czr,"not"),czr.forEach(t),Cyo=r(fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=s(fz,"CODE",{});var mzr=n(bte);Myo=r(mzr,"from_pretrained()"),mzr.forEach(t),Eyo=r(fz,"to load the model weights."),fz.forEach(t),yyo=i(Zn),vte=s(Zn,"P",{});var fzr=n(vte);wyo=r(fzr,"Examples:"),fzr.forEach(t),Ayo=i(Zn),f(Iy.$$.fragment,Zn),Zn.forEach(t),Lyo=i(Kn),je=s(Kn,"DIV",{class:!0});var qt=n(je);f(jy.$$.fragment,qt),Byo=i(qt),Tte=s(qt,"P",{});var gzr=n(Tte);xyo=r(gzr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gzr.forEach(t),kyo=i(qt),Wa=s(qt,"P",{});var p3=n(Wa);Ryo=r(p3,"The model class to instantiate is selected based on the "),Fte=s(p3,"CODE",{});var hzr=n(Fte);Syo=r(hzr,"model_type"),hzr.forEach(t),Pyo=r(p3,` property of the config object (either
passed as an argument or loaded from `),Cte=s(p3,"CODE",{});var uzr=n(Cte);$yo=r(uzr,"pretrained_model_name_or_path"),uzr.forEach(t),Iyo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=s(p3,"CODE",{});var pzr=n(Mte);jyo=r(pzr,"pretrained_model_name_or_path"),pzr.forEach(t),Nyo=r(p3,":"),p3.forEach(t),Dyo=i(qt),sa=s(qt,"UL",{});var el=n(sa);X2=s(el,"LI",{});var S5e=n(X2);Ete=s(S5e,"STRONG",{});var _zr=n(Ete);qyo=r(_zr,"bert"),_zr.forEach(t),Gyo=r(S5e," \u2014 "),EI=s(S5e,"A",{href:!0});var bzr=n(EI);Oyo=r(bzr,"BertForNextSentencePrediction"),bzr.forEach(t),Xyo=r(S5e," (BERT model)"),S5e.forEach(t),zyo=i(el),z2=s(el,"LI",{});var P5e=n(z2);yte=s(P5e,"STRONG",{});var vzr=n(yte);Vyo=r(vzr,"fnet"),vzr.forEach(t),Wyo=r(P5e," \u2014 "),yI=s(P5e,"A",{href:!0});var Tzr=n(yI);Qyo=r(Tzr,"FNetForNextSentencePrediction"),Tzr.forEach(t),Hyo=r(P5e," (FNet model)"),P5e.forEach(t),Uyo=i(el),V2=s(el,"LI",{});var $5e=n(V2);wte=s($5e,"STRONG",{});var Fzr=n(wte);Jyo=r(Fzr,"megatron-bert"),Fzr.forEach(t),Yyo=r($5e," \u2014 "),wI=s($5e,"A",{href:!0});var Czr=n(wI);Kyo=r(Czr,"MegatronBertForNextSentencePrediction"),Czr.forEach(t),Zyo=r($5e," (MegatronBert model)"),$5e.forEach(t),ewo=i(el),W2=s(el,"LI",{});var I5e=n(W2);Ate=s(I5e,"STRONG",{});var Mzr=n(Ate);owo=r(Mzr,"mobilebert"),Mzr.forEach(t),rwo=r(I5e," \u2014 "),AI=s(I5e,"A",{href:!0});var Ezr=n(AI);two=r(Ezr,"MobileBertForNextSentencePrediction"),Ezr.forEach(t),awo=r(I5e," (MobileBERT model)"),I5e.forEach(t),swo=i(el),Q2=s(el,"LI",{});var j5e=n(Q2);Lte=s(j5e,"STRONG",{});var yzr=n(Lte);nwo=r(yzr,"qdqbert"),yzr.forEach(t),lwo=r(j5e," \u2014 "),LI=s(j5e,"A",{href:!0});var wzr=n(LI);iwo=r(wzr,"QDQBertForNextSentencePrediction"),wzr.forEach(t),dwo=r(j5e," (QDQBert model)"),j5e.forEach(t),el.forEach(t),cwo=i(qt),H2=s(qt,"P",{});var N5e=n(H2);mwo=r(N5e,"The model is set in evaluation mode by default using "),Bte=s(N5e,"CODE",{});var Azr=n(Bte);fwo=r(Azr,"model.eval()"),Azr.forEach(t),gwo=r(N5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=s(N5e,"CODE",{});var Lzr=n(xte);hwo=r(Lzr,"model.train()"),Lzr.forEach(t),N5e.forEach(t),uwo=i(qt),kte=s(qt,"P",{});var Bzr=n(kte);pwo=r(Bzr,"Examples:"),Bzr.forEach(t),_wo=i(qt),f(Ny.$$.fragment,qt),qt.forEach(t),Kn.forEach(t),q8e=i(d),cd=s(d,"H2",{class:!0});var QBe=n(cd);U2=s(QBe,"A",{id:!0,class:!0,href:!0});var xzr=n(U2);Rte=s(xzr,"SPAN",{});var kzr=n(Rte);f(Dy.$$.fragment,kzr),kzr.forEach(t),xzr.forEach(t),bwo=i(QBe),Ste=s(QBe,"SPAN",{});var Rzr=n(Ste);vwo=r(Rzr,"AutoModelForTokenClassification"),Rzr.forEach(t),QBe.forEach(t),G8e=i(d),Zo=s(d,"DIV",{class:!0});var ol=n(Zo);f(qy.$$.fragment,ol),Two=i(ol),md=s(ol,"P",{});var gz=n(md);Fwo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pte=s(gz,"CODE",{});var Szr=n(Pte);Cwo=r(Szr,"from_pretrained()"),Szr.forEach(t),Mwo=r(gz,"class method or the "),$te=s(gz,"CODE",{});var Pzr=n($te);Ewo=r(Pzr,"from_config()"),Pzr.forEach(t),ywo=r(gz,`class
method.`),gz.forEach(t),wwo=i(ol),Gy=s(ol,"P",{});var HBe=n(Gy);Awo=r(HBe,"This class cannot be instantiated directly using "),Ite=s(HBe,"CODE",{});var $zr=n(Ite);Lwo=r($zr,"__init__()"),$zr.forEach(t),Bwo=r(HBe," (throws an error)."),HBe.forEach(t),xwo=i(ol),Wr=s(ol,"DIV",{class:!0});var rl=n(Wr);f(Oy.$$.fragment,rl),kwo=i(rl),jte=s(rl,"P",{});var Izr=n(jte);Rwo=r(Izr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Izr.forEach(t),Swo=i(rl),fd=s(rl,"P",{});var hz=n(fd);Pwo=r(hz,`Note:
Loading a model from its configuration file does `),Nte=s(hz,"STRONG",{});var jzr=n(Nte);$wo=r(jzr,"not"),jzr.forEach(t),Iwo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=s(hz,"CODE",{});var Nzr=n(Dte);jwo=r(Nzr,"from_pretrained()"),Nzr.forEach(t),Nwo=r(hz,"to load the model weights."),hz.forEach(t),Dwo=i(rl),qte=s(rl,"P",{});var Dzr=n(qte);qwo=r(Dzr,"Examples:"),Dzr.forEach(t),Gwo=i(rl),f(Xy.$$.fragment,rl),rl.forEach(t),Owo=i(ol),Ne=s(ol,"DIV",{class:!0});var Gt=n(Ne);f(zy.$$.fragment,Gt),Xwo=i(Gt),Gte=s(Gt,"P",{});var qzr=n(Gte);zwo=r(qzr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qzr.forEach(t),Vwo=i(Gt),Qa=s(Gt,"P",{});var _3=n(Qa);Wwo=r(_3,"The model class to instantiate is selected based on the "),Ote=s(_3,"CODE",{});var Gzr=n(Ote);Qwo=r(Gzr,"model_type"),Gzr.forEach(t),Hwo=r(_3,` property of the config object (either
passed as an argument or loaded from `),Xte=s(_3,"CODE",{});var Ozr=n(Xte);Uwo=r(Ozr,"pretrained_model_name_or_path"),Ozr.forEach(t),Jwo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=s(_3,"CODE",{});var Xzr=n(zte);Ywo=r(Xzr,"pretrained_model_name_or_path"),Xzr.forEach(t),Kwo=r(_3,":"),_3.forEach(t),Zwo=i(Gt),D=s(Gt,"UL",{});var q=n(D);J2=s(q,"LI",{});var D5e=n(J2);Vte=s(D5e,"STRONG",{});var zzr=n(Vte);eAo=r(zzr,"albert"),zzr.forEach(t),oAo=r(D5e," \u2014 "),BI=s(D5e,"A",{href:!0});var Vzr=n(BI);rAo=r(Vzr,"AlbertForTokenClassification"),Vzr.forEach(t),tAo=r(D5e," (ALBERT model)"),D5e.forEach(t),aAo=i(q),Y2=s(q,"LI",{});var q5e=n(Y2);Wte=s(q5e,"STRONG",{});var Wzr=n(Wte);sAo=r(Wzr,"bert"),Wzr.forEach(t),nAo=r(q5e," \u2014 "),xI=s(q5e,"A",{href:!0});var Qzr=n(xI);lAo=r(Qzr,"BertForTokenClassification"),Qzr.forEach(t),iAo=r(q5e," (BERT model)"),q5e.forEach(t),dAo=i(q),K2=s(q,"LI",{});var G5e=n(K2);Qte=s(G5e,"STRONG",{});var Hzr=n(Qte);cAo=r(Hzr,"big_bird"),Hzr.forEach(t),mAo=r(G5e," \u2014 "),kI=s(G5e,"A",{href:!0});var Uzr=n(kI);fAo=r(Uzr,"BigBirdForTokenClassification"),Uzr.forEach(t),gAo=r(G5e," (BigBird model)"),G5e.forEach(t),hAo=i(q),Z2=s(q,"LI",{});var O5e=n(Z2);Hte=s(O5e,"STRONG",{});var Jzr=n(Hte);uAo=r(Jzr,"camembert"),Jzr.forEach(t),pAo=r(O5e," \u2014 "),RI=s(O5e,"A",{href:!0});var Yzr=n(RI);_Ao=r(Yzr,"CamembertForTokenClassification"),Yzr.forEach(t),bAo=r(O5e," (CamemBERT model)"),O5e.forEach(t),vAo=i(q),ev=s(q,"LI",{});var X5e=n(ev);Ute=s(X5e,"STRONG",{});var Kzr=n(Ute);TAo=r(Kzr,"canine"),Kzr.forEach(t),FAo=r(X5e," \u2014 "),SI=s(X5e,"A",{href:!0});var Zzr=n(SI);CAo=r(Zzr,"CanineForTokenClassification"),Zzr.forEach(t),MAo=r(X5e," (Canine model)"),X5e.forEach(t),EAo=i(q),ov=s(q,"LI",{});var z5e=n(ov);Jte=s(z5e,"STRONG",{});var eVr=n(Jte);yAo=r(eVr,"convbert"),eVr.forEach(t),wAo=r(z5e," \u2014 "),PI=s(z5e,"A",{href:!0});var oVr=n(PI);AAo=r(oVr,"ConvBertForTokenClassification"),oVr.forEach(t),LAo=r(z5e," (ConvBERT model)"),z5e.forEach(t),BAo=i(q),rv=s(q,"LI",{});var V5e=n(rv);Yte=s(V5e,"STRONG",{});var rVr=n(Yte);xAo=r(rVr,"deberta"),rVr.forEach(t),kAo=r(V5e," \u2014 "),$I=s(V5e,"A",{href:!0});var tVr=n($I);RAo=r(tVr,"DebertaForTokenClassification"),tVr.forEach(t),SAo=r(V5e," (DeBERTa model)"),V5e.forEach(t),PAo=i(q),tv=s(q,"LI",{});var W5e=n(tv);Kte=s(W5e,"STRONG",{});var aVr=n(Kte);$Ao=r(aVr,"deberta-v2"),aVr.forEach(t),IAo=r(W5e," \u2014 "),II=s(W5e,"A",{href:!0});var sVr=n(II);jAo=r(sVr,"DebertaV2ForTokenClassification"),sVr.forEach(t),NAo=r(W5e," (DeBERTa-v2 model)"),W5e.forEach(t),DAo=i(q),av=s(q,"LI",{});var Q5e=n(av);Zte=s(Q5e,"STRONG",{});var nVr=n(Zte);qAo=r(nVr,"distilbert"),nVr.forEach(t),GAo=r(Q5e," \u2014 "),jI=s(Q5e,"A",{href:!0});var lVr=n(jI);OAo=r(lVr,"DistilBertForTokenClassification"),lVr.forEach(t),XAo=r(Q5e," (DistilBERT model)"),Q5e.forEach(t),zAo=i(q),sv=s(q,"LI",{});var H5e=n(sv);eae=s(H5e,"STRONG",{});var iVr=n(eae);VAo=r(iVr,"electra"),iVr.forEach(t),WAo=r(H5e," \u2014 "),NI=s(H5e,"A",{href:!0});var dVr=n(NI);QAo=r(dVr,"ElectraForTokenClassification"),dVr.forEach(t),HAo=r(H5e," (ELECTRA model)"),H5e.forEach(t),UAo=i(q),nv=s(q,"LI",{});var U5e=n(nv);oae=s(U5e,"STRONG",{});var cVr=n(oae);JAo=r(cVr,"flaubert"),cVr.forEach(t),YAo=r(U5e," \u2014 "),DI=s(U5e,"A",{href:!0});var mVr=n(DI);KAo=r(mVr,"FlaubertForTokenClassification"),mVr.forEach(t),ZAo=r(U5e," (FlauBERT model)"),U5e.forEach(t),e6o=i(q),lv=s(q,"LI",{});var J5e=n(lv);rae=s(J5e,"STRONG",{});var fVr=n(rae);o6o=r(fVr,"fnet"),fVr.forEach(t),r6o=r(J5e," \u2014 "),qI=s(J5e,"A",{href:!0});var gVr=n(qI);t6o=r(gVr,"FNetForTokenClassification"),gVr.forEach(t),a6o=r(J5e," (FNet model)"),J5e.forEach(t),s6o=i(q),iv=s(q,"LI",{});var Y5e=n(iv);tae=s(Y5e,"STRONG",{});var hVr=n(tae);n6o=r(hVr,"funnel"),hVr.forEach(t),l6o=r(Y5e," \u2014 "),GI=s(Y5e,"A",{href:!0});var uVr=n(GI);i6o=r(uVr,"FunnelForTokenClassification"),uVr.forEach(t),d6o=r(Y5e," (Funnel Transformer model)"),Y5e.forEach(t),c6o=i(q),dv=s(q,"LI",{});var K5e=n(dv);aae=s(K5e,"STRONG",{});var pVr=n(aae);m6o=r(pVr,"gpt2"),pVr.forEach(t),f6o=r(K5e," \u2014 "),OI=s(K5e,"A",{href:!0});var _Vr=n(OI);g6o=r(_Vr,"GPT2ForTokenClassification"),_Vr.forEach(t),h6o=r(K5e," (OpenAI GPT-2 model)"),K5e.forEach(t),u6o=i(q),cv=s(q,"LI",{});var Z5e=n(cv);sae=s(Z5e,"STRONG",{});var bVr=n(sae);p6o=r(bVr,"ibert"),bVr.forEach(t),_6o=r(Z5e," \u2014 "),XI=s(Z5e,"A",{href:!0});var vVr=n(XI);b6o=r(vVr,"IBertForTokenClassification"),vVr.forEach(t),v6o=r(Z5e," (I-BERT model)"),Z5e.forEach(t),T6o=i(q),mv=s(q,"LI",{});var eye=n(mv);nae=s(eye,"STRONG",{});var TVr=n(nae);F6o=r(TVr,"layoutlm"),TVr.forEach(t),C6o=r(eye," \u2014 "),zI=s(eye,"A",{href:!0});var FVr=n(zI);M6o=r(FVr,"LayoutLMForTokenClassification"),FVr.forEach(t),E6o=r(eye," (LayoutLM model)"),eye.forEach(t),y6o=i(q),fv=s(q,"LI",{});var oye=n(fv);lae=s(oye,"STRONG",{});var CVr=n(lae);w6o=r(CVr,"layoutlmv2"),CVr.forEach(t),A6o=r(oye," \u2014 "),VI=s(oye,"A",{href:!0});var MVr=n(VI);L6o=r(MVr,"LayoutLMv2ForTokenClassification"),MVr.forEach(t),B6o=r(oye," (LayoutLMv2 model)"),oye.forEach(t),x6o=i(q),gv=s(q,"LI",{});var rye=n(gv);iae=s(rye,"STRONG",{});var EVr=n(iae);k6o=r(EVr,"longformer"),EVr.forEach(t),R6o=r(rye," \u2014 "),WI=s(rye,"A",{href:!0});var yVr=n(WI);S6o=r(yVr,"LongformerForTokenClassification"),yVr.forEach(t),P6o=r(rye," (Longformer model)"),rye.forEach(t),$6o=i(q),hv=s(q,"LI",{});var tye=n(hv);dae=s(tye,"STRONG",{});var wVr=n(dae);I6o=r(wVr,"megatron-bert"),wVr.forEach(t),j6o=r(tye," \u2014 "),QI=s(tye,"A",{href:!0});var AVr=n(QI);N6o=r(AVr,"MegatronBertForTokenClassification"),AVr.forEach(t),D6o=r(tye," (MegatronBert model)"),tye.forEach(t),q6o=i(q),uv=s(q,"LI",{});var aye=n(uv);cae=s(aye,"STRONG",{});var LVr=n(cae);G6o=r(LVr,"mobilebert"),LVr.forEach(t),O6o=r(aye," \u2014 "),HI=s(aye,"A",{href:!0});var BVr=n(HI);X6o=r(BVr,"MobileBertForTokenClassification"),BVr.forEach(t),z6o=r(aye," (MobileBERT model)"),aye.forEach(t),V6o=i(q),pv=s(q,"LI",{});var sye=n(pv);mae=s(sye,"STRONG",{});var xVr=n(mae);W6o=r(xVr,"mpnet"),xVr.forEach(t),Q6o=r(sye," \u2014 "),UI=s(sye,"A",{href:!0});var kVr=n(UI);H6o=r(kVr,"MPNetForTokenClassification"),kVr.forEach(t),U6o=r(sye," (MPNet model)"),sye.forEach(t),J6o=i(q),_v=s(q,"LI",{});var nye=n(_v);fae=s(nye,"STRONG",{});var RVr=n(fae);Y6o=r(RVr,"nystromformer"),RVr.forEach(t),K6o=r(nye," \u2014 "),JI=s(nye,"A",{href:!0});var SVr=n(JI);Z6o=r(SVr,"NystromformerForTokenClassification"),SVr.forEach(t),e0o=r(nye," (Nystromformer model)"),nye.forEach(t),o0o=i(q),bv=s(q,"LI",{});var lye=n(bv);gae=s(lye,"STRONG",{});var PVr=n(gae);r0o=r(PVr,"qdqbert"),PVr.forEach(t),t0o=r(lye," \u2014 "),YI=s(lye,"A",{href:!0});var $Vr=n(YI);a0o=r($Vr,"QDQBertForTokenClassification"),$Vr.forEach(t),s0o=r(lye," (QDQBert model)"),lye.forEach(t),n0o=i(q),vv=s(q,"LI",{});var iye=n(vv);hae=s(iye,"STRONG",{});var IVr=n(hae);l0o=r(IVr,"rembert"),IVr.forEach(t),i0o=r(iye," \u2014 "),KI=s(iye,"A",{href:!0});var jVr=n(KI);d0o=r(jVr,"RemBertForTokenClassification"),jVr.forEach(t),c0o=r(iye," (RemBERT model)"),iye.forEach(t),m0o=i(q),Tv=s(q,"LI",{});var dye=n(Tv);uae=s(dye,"STRONG",{});var NVr=n(uae);f0o=r(NVr,"roberta"),NVr.forEach(t),g0o=r(dye," \u2014 "),ZI=s(dye,"A",{href:!0});var DVr=n(ZI);h0o=r(DVr,"RobertaForTokenClassification"),DVr.forEach(t),u0o=r(dye," (RoBERTa model)"),dye.forEach(t),p0o=i(q),Fv=s(q,"LI",{});var cye=n(Fv);pae=s(cye,"STRONG",{});var qVr=n(pae);_0o=r(qVr,"roformer"),qVr.forEach(t),b0o=r(cye," \u2014 "),ej=s(cye,"A",{href:!0});var GVr=n(ej);v0o=r(GVr,"RoFormerForTokenClassification"),GVr.forEach(t),T0o=r(cye," (RoFormer model)"),cye.forEach(t),F0o=i(q),Cv=s(q,"LI",{});var mye=n(Cv);_ae=s(mye,"STRONG",{});var OVr=n(_ae);C0o=r(OVr,"squeezebert"),OVr.forEach(t),M0o=r(mye," \u2014 "),oj=s(mye,"A",{href:!0});var XVr=n(oj);E0o=r(XVr,"SqueezeBertForTokenClassification"),XVr.forEach(t),y0o=r(mye," (SqueezeBERT model)"),mye.forEach(t),w0o=i(q),Mv=s(q,"LI",{});var fye=n(Mv);bae=s(fye,"STRONG",{});var zVr=n(bae);A0o=r(zVr,"xlm"),zVr.forEach(t),L0o=r(fye," \u2014 "),rj=s(fye,"A",{href:!0});var VVr=n(rj);B0o=r(VVr,"XLMForTokenClassification"),VVr.forEach(t),x0o=r(fye," (XLM model)"),fye.forEach(t),k0o=i(q),Ev=s(q,"LI",{});var gye=n(Ev);vae=s(gye,"STRONG",{});var WVr=n(vae);R0o=r(WVr,"xlm-roberta"),WVr.forEach(t),S0o=r(gye," \u2014 "),tj=s(gye,"A",{href:!0});var QVr=n(tj);P0o=r(QVr,"XLMRobertaForTokenClassification"),QVr.forEach(t),$0o=r(gye," (XLM-RoBERTa model)"),gye.forEach(t),I0o=i(q),yv=s(q,"LI",{});var hye=n(yv);Tae=s(hye,"STRONG",{});var HVr=n(Tae);j0o=r(HVr,"xlm-roberta-xl"),HVr.forEach(t),N0o=r(hye," \u2014 "),aj=s(hye,"A",{href:!0});var UVr=n(aj);D0o=r(UVr,"XLMRobertaXLForTokenClassification"),UVr.forEach(t),q0o=r(hye," (XLM-RoBERTa-XL model)"),hye.forEach(t),G0o=i(q),wv=s(q,"LI",{});var uye=n(wv);Fae=s(uye,"STRONG",{});var JVr=n(Fae);O0o=r(JVr,"xlnet"),JVr.forEach(t),X0o=r(uye," \u2014 "),sj=s(uye,"A",{href:!0});var YVr=n(sj);z0o=r(YVr,"XLNetForTokenClassification"),YVr.forEach(t),V0o=r(uye," (XLNet model)"),uye.forEach(t),W0o=i(q),Av=s(q,"LI",{});var pye=n(Av);Cae=s(pye,"STRONG",{});var KVr=n(Cae);Q0o=r(KVr,"yoso"),KVr.forEach(t),H0o=r(pye," \u2014 "),nj=s(pye,"A",{href:!0});var ZVr=n(nj);U0o=r(ZVr,"YosoForTokenClassification"),ZVr.forEach(t),J0o=r(pye," (YOSO model)"),pye.forEach(t),q.forEach(t),Y0o=i(Gt),Lv=s(Gt,"P",{});var _ye=n(Lv);K0o=r(_ye,"The model is set in evaluation mode by default using "),Mae=s(_ye,"CODE",{});var eWr=n(Mae);Z0o=r(eWr,"model.eval()"),eWr.forEach(t),eLo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=s(_ye,"CODE",{});var oWr=n(Eae);oLo=r(oWr,"model.train()"),oWr.forEach(t),_ye.forEach(t),rLo=i(Gt),yae=s(Gt,"P",{});var rWr=n(yae);tLo=r(rWr,"Examples:"),rWr.forEach(t),aLo=i(Gt),f(Vy.$$.fragment,Gt),Gt.forEach(t),ol.forEach(t),O8e=i(d),gd=s(d,"H2",{class:!0});var UBe=n(gd);Bv=s(UBe,"A",{id:!0,class:!0,href:!0});var tWr=n(Bv);wae=s(tWr,"SPAN",{});var aWr=n(wae);f(Wy.$$.fragment,aWr),aWr.forEach(t),tWr.forEach(t),sLo=i(UBe),Aae=s(UBe,"SPAN",{});var sWr=n(Aae);nLo=r(sWr,"AutoModelForQuestionAnswering"),sWr.forEach(t),UBe.forEach(t),X8e=i(d),er=s(d,"DIV",{class:!0});var tl=n(er);f(Qy.$$.fragment,tl),lLo=i(tl),hd=s(tl,"P",{});var uz=n(hd);iLo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lae=s(uz,"CODE",{});var nWr=n(Lae);dLo=r(nWr,"from_pretrained()"),nWr.forEach(t),cLo=r(uz,"class method or the "),Bae=s(uz,"CODE",{});var lWr=n(Bae);mLo=r(lWr,"from_config()"),lWr.forEach(t),fLo=r(uz,`class
method.`),uz.forEach(t),gLo=i(tl),Hy=s(tl,"P",{});var JBe=n(Hy);hLo=r(JBe,"This class cannot be instantiated directly using "),xae=s(JBe,"CODE",{});var iWr=n(xae);uLo=r(iWr,"__init__()"),iWr.forEach(t),pLo=r(JBe," (throws an error)."),JBe.forEach(t),_Lo=i(tl),Qr=s(tl,"DIV",{class:!0});var al=n(Qr);f(Uy.$$.fragment,al),bLo=i(al),kae=s(al,"P",{});var dWr=n(kae);vLo=r(dWr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dWr.forEach(t),TLo=i(al),ud=s(al,"P",{});var pz=n(ud);FLo=r(pz,`Note:
Loading a model from its configuration file does `),Rae=s(pz,"STRONG",{});var cWr=n(Rae);CLo=r(cWr,"not"),cWr.forEach(t),MLo=r(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=s(pz,"CODE",{});var mWr=n(Sae);ELo=r(mWr,"from_pretrained()"),mWr.forEach(t),yLo=r(pz,"to load the model weights."),pz.forEach(t),wLo=i(al),Pae=s(al,"P",{});var fWr=n(Pae);ALo=r(fWr,"Examples:"),fWr.forEach(t),LLo=i(al),f(Jy.$$.fragment,al),al.forEach(t),BLo=i(tl),De=s(tl,"DIV",{class:!0});var Ot=n(De);f(Yy.$$.fragment,Ot),xLo=i(Ot),$ae=s(Ot,"P",{});var gWr=n($ae);kLo=r(gWr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gWr.forEach(t),RLo=i(Ot),Ha=s(Ot,"P",{});var b3=n(Ha);SLo=r(b3,"The model class to instantiate is selected based on the "),Iae=s(b3,"CODE",{});var hWr=n(Iae);PLo=r(hWr,"model_type"),hWr.forEach(t),$Lo=r(b3,` property of the config object (either
passed as an argument or loaded from `),jae=s(b3,"CODE",{});var uWr=n(jae);ILo=r(uWr,"pretrained_model_name_or_path"),uWr.forEach(t),jLo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=s(b3,"CODE",{});var pWr=n(Nae);NLo=r(pWr,"pretrained_model_name_or_path"),pWr.forEach(t),DLo=r(b3,":"),b3.forEach(t),qLo=i(Ot),R=s(Ot,"UL",{});var P=n(R);xv=s(P,"LI",{});var bye=n(xv);Dae=s(bye,"STRONG",{});var _Wr=n(Dae);GLo=r(_Wr,"albert"),_Wr.forEach(t),OLo=r(bye," \u2014 "),lj=s(bye,"A",{href:!0});var bWr=n(lj);XLo=r(bWr,"AlbertForQuestionAnswering"),bWr.forEach(t),zLo=r(bye," (ALBERT model)"),bye.forEach(t),VLo=i(P),kv=s(P,"LI",{});var vye=n(kv);qae=s(vye,"STRONG",{});var vWr=n(qae);WLo=r(vWr,"bart"),vWr.forEach(t),QLo=r(vye," \u2014 "),ij=s(vye,"A",{href:!0});var TWr=n(ij);HLo=r(TWr,"BartForQuestionAnswering"),TWr.forEach(t),ULo=r(vye," (BART model)"),vye.forEach(t),JLo=i(P),Rv=s(P,"LI",{});var Tye=n(Rv);Gae=s(Tye,"STRONG",{});var FWr=n(Gae);YLo=r(FWr,"bert"),FWr.forEach(t),KLo=r(Tye," \u2014 "),dj=s(Tye,"A",{href:!0});var CWr=n(dj);ZLo=r(CWr,"BertForQuestionAnswering"),CWr.forEach(t),e7o=r(Tye," (BERT model)"),Tye.forEach(t),o7o=i(P),Sv=s(P,"LI",{});var Fye=n(Sv);Oae=s(Fye,"STRONG",{});var MWr=n(Oae);r7o=r(MWr,"big_bird"),MWr.forEach(t),t7o=r(Fye," \u2014 "),cj=s(Fye,"A",{href:!0});var EWr=n(cj);a7o=r(EWr,"BigBirdForQuestionAnswering"),EWr.forEach(t),s7o=r(Fye," (BigBird model)"),Fye.forEach(t),n7o=i(P),Pv=s(P,"LI",{});var Cye=n(Pv);Xae=s(Cye,"STRONG",{});var yWr=n(Xae);l7o=r(yWr,"bigbird_pegasus"),yWr.forEach(t),i7o=r(Cye," \u2014 "),mj=s(Cye,"A",{href:!0});var wWr=n(mj);d7o=r(wWr,"BigBirdPegasusForQuestionAnswering"),wWr.forEach(t),c7o=r(Cye," (BigBirdPegasus model)"),Cye.forEach(t),m7o=i(P),$v=s(P,"LI",{});var Mye=n($v);zae=s(Mye,"STRONG",{});var AWr=n(zae);f7o=r(AWr,"camembert"),AWr.forEach(t),g7o=r(Mye," \u2014 "),fj=s(Mye,"A",{href:!0});var LWr=n(fj);h7o=r(LWr,"CamembertForQuestionAnswering"),LWr.forEach(t),u7o=r(Mye," (CamemBERT model)"),Mye.forEach(t),p7o=i(P),Iv=s(P,"LI",{});var Eye=n(Iv);Vae=s(Eye,"STRONG",{});var BWr=n(Vae);_7o=r(BWr,"canine"),BWr.forEach(t),b7o=r(Eye," \u2014 "),gj=s(Eye,"A",{href:!0});var xWr=n(gj);v7o=r(xWr,"CanineForQuestionAnswering"),xWr.forEach(t),T7o=r(Eye," (Canine model)"),Eye.forEach(t),F7o=i(P),jv=s(P,"LI",{});var yye=n(jv);Wae=s(yye,"STRONG",{});var kWr=n(Wae);C7o=r(kWr,"convbert"),kWr.forEach(t),M7o=r(yye," \u2014 "),hj=s(yye,"A",{href:!0});var RWr=n(hj);E7o=r(RWr,"ConvBertForQuestionAnswering"),RWr.forEach(t),y7o=r(yye," (ConvBERT model)"),yye.forEach(t),w7o=i(P),Nv=s(P,"LI",{});var wye=n(Nv);Qae=s(wye,"STRONG",{});var SWr=n(Qae);A7o=r(SWr,"deberta"),SWr.forEach(t),L7o=r(wye," \u2014 "),uj=s(wye,"A",{href:!0});var PWr=n(uj);B7o=r(PWr,"DebertaForQuestionAnswering"),PWr.forEach(t),x7o=r(wye," (DeBERTa model)"),wye.forEach(t),k7o=i(P),Dv=s(P,"LI",{});var Aye=n(Dv);Hae=s(Aye,"STRONG",{});var $Wr=n(Hae);R7o=r($Wr,"deberta-v2"),$Wr.forEach(t),S7o=r(Aye," \u2014 "),pj=s(Aye,"A",{href:!0});var IWr=n(pj);P7o=r(IWr,"DebertaV2ForQuestionAnswering"),IWr.forEach(t),$7o=r(Aye," (DeBERTa-v2 model)"),Aye.forEach(t),I7o=i(P),qv=s(P,"LI",{});var Lye=n(qv);Uae=s(Lye,"STRONG",{});var jWr=n(Uae);j7o=r(jWr,"distilbert"),jWr.forEach(t),N7o=r(Lye," \u2014 "),_j=s(Lye,"A",{href:!0});var NWr=n(_j);D7o=r(NWr,"DistilBertForQuestionAnswering"),NWr.forEach(t),q7o=r(Lye," (DistilBERT model)"),Lye.forEach(t),G7o=i(P),Gv=s(P,"LI",{});var Bye=n(Gv);Jae=s(Bye,"STRONG",{});var DWr=n(Jae);O7o=r(DWr,"electra"),DWr.forEach(t),X7o=r(Bye," \u2014 "),bj=s(Bye,"A",{href:!0});var qWr=n(bj);z7o=r(qWr,"ElectraForQuestionAnswering"),qWr.forEach(t),V7o=r(Bye," (ELECTRA model)"),Bye.forEach(t),W7o=i(P),Ov=s(P,"LI",{});var xye=n(Ov);Yae=s(xye,"STRONG",{});var GWr=n(Yae);Q7o=r(GWr,"flaubert"),GWr.forEach(t),H7o=r(xye," \u2014 "),vj=s(xye,"A",{href:!0});var OWr=n(vj);U7o=r(OWr,"FlaubertForQuestionAnsweringSimple"),OWr.forEach(t),J7o=r(xye," (FlauBERT model)"),xye.forEach(t),Y7o=i(P),Xv=s(P,"LI",{});var kye=n(Xv);Kae=s(kye,"STRONG",{});var XWr=n(Kae);K7o=r(XWr,"fnet"),XWr.forEach(t),Z7o=r(kye," \u2014 "),Tj=s(kye,"A",{href:!0});var zWr=n(Tj);e8o=r(zWr,"FNetForQuestionAnswering"),zWr.forEach(t),o8o=r(kye," (FNet model)"),kye.forEach(t),r8o=i(P),zv=s(P,"LI",{});var Rye=n(zv);Zae=s(Rye,"STRONG",{});var VWr=n(Zae);t8o=r(VWr,"funnel"),VWr.forEach(t),a8o=r(Rye," \u2014 "),Fj=s(Rye,"A",{href:!0});var WWr=n(Fj);s8o=r(WWr,"FunnelForQuestionAnswering"),WWr.forEach(t),n8o=r(Rye," (Funnel Transformer model)"),Rye.forEach(t),l8o=i(P),Vv=s(P,"LI",{});var Sye=n(Vv);ese=s(Sye,"STRONG",{});var QWr=n(ese);i8o=r(QWr,"gptj"),QWr.forEach(t),d8o=r(Sye," \u2014 "),Cj=s(Sye,"A",{href:!0});var HWr=n(Cj);c8o=r(HWr,"GPTJForQuestionAnswering"),HWr.forEach(t),m8o=r(Sye," (GPT-J model)"),Sye.forEach(t),f8o=i(P),Wv=s(P,"LI",{});var Pye=n(Wv);ose=s(Pye,"STRONG",{});var UWr=n(ose);g8o=r(UWr,"ibert"),UWr.forEach(t),h8o=r(Pye," \u2014 "),Mj=s(Pye,"A",{href:!0});var JWr=n(Mj);u8o=r(JWr,"IBertForQuestionAnswering"),JWr.forEach(t),p8o=r(Pye," (I-BERT model)"),Pye.forEach(t),_8o=i(P),Qv=s(P,"LI",{});var $ye=n(Qv);rse=s($ye,"STRONG",{});var YWr=n(rse);b8o=r(YWr,"layoutlmv2"),YWr.forEach(t),v8o=r($ye," \u2014 "),Ej=s($ye,"A",{href:!0});var KWr=n(Ej);T8o=r(KWr,"LayoutLMv2ForQuestionAnswering"),KWr.forEach(t),F8o=r($ye," (LayoutLMv2 model)"),$ye.forEach(t),C8o=i(P),Hv=s(P,"LI",{});var Iye=n(Hv);tse=s(Iye,"STRONG",{});var ZWr=n(tse);M8o=r(ZWr,"led"),ZWr.forEach(t),E8o=r(Iye," \u2014 "),yj=s(Iye,"A",{href:!0});var eQr=n(yj);y8o=r(eQr,"LEDForQuestionAnswering"),eQr.forEach(t),w8o=r(Iye," (LED model)"),Iye.forEach(t),A8o=i(P),Uv=s(P,"LI",{});var jye=n(Uv);ase=s(jye,"STRONG",{});var oQr=n(ase);L8o=r(oQr,"longformer"),oQr.forEach(t),B8o=r(jye," \u2014 "),wj=s(jye,"A",{href:!0});var rQr=n(wj);x8o=r(rQr,"LongformerForQuestionAnswering"),rQr.forEach(t),k8o=r(jye," (Longformer model)"),jye.forEach(t),R8o=i(P),Jv=s(P,"LI",{});var Nye=n(Jv);sse=s(Nye,"STRONG",{});var tQr=n(sse);S8o=r(tQr,"lxmert"),tQr.forEach(t),P8o=r(Nye," \u2014 "),Aj=s(Nye,"A",{href:!0});var aQr=n(Aj);$8o=r(aQr,"LxmertForQuestionAnswering"),aQr.forEach(t),I8o=r(Nye," (LXMERT model)"),Nye.forEach(t),j8o=i(P),Yv=s(P,"LI",{});var Dye=n(Yv);nse=s(Dye,"STRONG",{});var sQr=n(nse);N8o=r(sQr,"mbart"),sQr.forEach(t),D8o=r(Dye," \u2014 "),Lj=s(Dye,"A",{href:!0});var nQr=n(Lj);q8o=r(nQr,"MBartForQuestionAnswering"),nQr.forEach(t),G8o=r(Dye," (mBART model)"),Dye.forEach(t),O8o=i(P),Kv=s(P,"LI",{});var qye=n(Kv);lse=s(qye,"STRONG",{});var lQr=n(lse);X8o=r(lQr,"megatron-bert"),lQr.forEach(t),z8o=r(qye," \u2014 "),Bj=s(qye,"A",{href:!0});var iQr=n(Bj);V8o=r(iQr,"MegatronBertForQuestionAnswering"),iQr.forEach(t),W8o=r(qye," (MegatronBert model)"),qye.forEach(t),Q8o=i(P),Zv=s(P,"LI",{});var Gye=n(Zv);ise=s(Gye,"STRONG",{});var dQr=n(ise);H8o=r(dQr,"mobilebert"),dQr.forEach(t),U8o=r(Gye," \u2014 "),xj=s(Gye,"A",{href:!0});var cQr=n(xj);J8o=r(cQr,"MobileBertForQuestionAnswering"),cQr.forEach(t),Y8o=r(Gye," (MobileBERT model)"),Gye.forEach(t),K8o=i(P),eT=s(P,"LI",{});var Oye=n(eT);dse=s(Oye,"STRONG",{});var mQr=n(dse);Z8o=r(mQr,"mpnet"),mQr.forEach(t),e9o=r(Oye," \u2014 "),kj=s(Oye,"A",{href:!0});var fQr=n(kj);o9o=r(fQr,"MPNetForQuestionAnswering"),fQr.forEach(t),r9o=r(Oye," (MPNet model)"),Oye.forEach(t),t9o=i(P),oT=s(P,"LI",{});var Xye=n(oT);cse=s(Xye,"STRONG",{});var gQr=n(cse);a9o=r(gQr,"nystromformer"),gQr.forEach(t),s9o=r(Xye," \u2014 "),Rj=s(Xye,"A",{href:!0});var hQr=n(Rj);n9o=r(hQr,"NystromformerForQuestionAnswering"),hQr.forEach(t),l9o=r(Xye," (Nystromformer model)"),Xye.forEach(t),i9o=i(P),rT=s(P,"LI",{});var zye=n(rT);mse=s(zye,"STRONG",{});var uQr=n(mse);d9o=r(uQr,"qdqbert"),uQr.forEach(t),c9o=r(zye," \u2014 "),Sj=s(zye,"A",{href:!0});var pQr=n(Sj);m9o=r(pQr,"QDQBertForQuestionAnswering"),pQr.forEach(t),f9o=r(zye," (QDQBert model)"),zye.forEach(t),g9o=i(P),tT=s(P,"LI",{});var Vye=n(tT);fse=s(Vye,"STRONG",{});var _Qr=n(fse);h9o=r(_Qr,"reformer"),_Qr.forEach(t),u9o=r(Vye," \u2014 "),Pj=s(Vye,"A",{href:!0});var bQr=n(Pj);p9o=r(bQr,"ReformerForQuestionAnswering"),bQr.forEach(t),_9o=r(Vye," (Reformer model)"),Vye.forEach(t),b9o=i(P),aT=s(P,"LI",{});var Wye=n(aT);gse=s(Wye,"STRONG",{});var vQr=n(gse);v9o=r(vQr,"rembert"),vQr.forEach(t),T9o=r(Wye," \u2014 "),$j=s(Wye,"A",{href:!0});var TQr=n($j);F9o=r(TQr,"RemBertForQuestionAnswering"),TQr.forEach(t),C9o=r(Wye," (RemBERT model)"),Wye.forEach(t),M9o=i(P),sT=s(P,"LI",{});var Qye=n(sT);hse=s(Qye,"STRONG",{});var FQr=n(hse);E9o=r(FQr,"roberta"),FQr.forEach(t),y9o=r(Qye," \u2014 "),Ij=s(Qye,"A",{href:!0});var CQr=n(Ij);w9o=r(CQr,"RobertaForQuestionAnswering"),CQr.forEach(t),A9o=r(Qye," (RoBERTa model)"),Qye.forEach(t),L9o=i(P),nT=s(P,"LI",{});var Hye=n(nT);use=s(Hye,"STRONG",{});var MQr=n(use);B9o=r(MQr,"roformer"),MQr.forEach(t),x9o=r(Hye," \u2014 "),jj=s(Hye,"A",{href:!0});var EQr=n(jj);k9o=r(EQr,"RoFormerForQuestionAnswering"),EQr.forEach(t),R9o=r(Hye," (RoFormer model)"),Hye.forEach(t),S9o=i(P),lT=s(P,"LI",{});var Uye=n(lT);pse=s(Uye,"STRONG",{});var yQr=n(pse);P9o=r(yQr,"splinter"),yQr.forEach(t),$9o=r(Uye," \u2014 "),Nj=s(Uye,"A",{href:!0});var wQr=n(Nj);I9o=r(wQr,"SplinterForQuestionAnswering"),wQr.forEach(t),j9o=r(Uye," (Splinter model)"),Uye.forEach(t),N9o=i(P),iT=s(P,"LI",{});var Jye=n(iT);_se=s(Jye,"STRONG",{});var AQr=n(_se);D9o=r(AQr,"squeezebert"),AQr.forEach(t),q9o=r(Jye," \u2014 "),Dj=s(Jye,"A",{href:!0});var LQr=n(Dj);G9o=r(LQr,"SqueezeBertForQuestionAnswering"),LQr.forEach(t),O9o=r(Jye," (SqueezeBERT model)"),Jye.forEach(t),X9o=i(P),dT=s(P,"LI",{});var Yye=n(dT);bse=s(Yye,"STRONG",{});var BQr=n(bse);z9o=r(BQr,"xlm"),BQr.forEach(t),V9o=r(Yye," \u2014 "),qj=s(Yye,"A",{href:!0});var xQr=n(qj);W9o=r(xQr,"XLMForQuestionAnsweringSimple"),xQr.forEach(t),Q9o=r(Yye," (XLM model)"),Yye.forEach(t),H9o=i(P),cT=s(P,"LI",{});var Kye=n(cT);vse=s(Kye,"STRONG",{});var kQr=n(vse);U9o=r(kQr,"xlm-roberta"),kQr.forEach(t),J9o=r(Kye," \u2014 "),Gj=s(Kye,"A",{href:!0});var RQr=n(Gj);Y9o=r(RQr,"XLMRobertaForQuestionAnswering"),RQr.forEach(t),K9o=r(Kye," (XLM-RoBERTa model)"),Kye.forEach(t),Z9o=i(P),mT=s(P,"LI",{});var Zye=n(mT);Tse=s(Zye,"STRONG",{});var SQr=n(Tse);eBo=r(SQr,"xlm-roberta-xl"),SQr.forEach(t),oBo=r(Zye," \u2014 "),Oj=s(Zye,"A",{href:!0});var PQr=n(Oj);rBo=r(PQr,"XLMRobertaXLForQuestionAnswering"),PQr.forEach(t),tBo=r(Zye," (XLM-RoBERTa-XL model)"),Zye.forEach(t),aBo=i(P),fT=s(P,"LI",{});var ewe=n(fT);Fse=s(ewe,"STRONG",{});var $Qr=n(Fse);sBo=r($Qr,"xlnet"),$Qr.forEach(t),nBo=r(ewe," \u2014 "),Xj=s(ewe,"A",{href:!0});var IQr=n(Xj);lBo=r(IQr,"XLNetForQuestionAnsweringSimple"),IQr.forEach(t),iBo=r(ewe," (XLNet model)"),ewe.forEach(t),dBo=i(P),gT=s(P,"LI",{});var owe=n(gT);Cse=s(owe,"STRONG",{});var jQr=n(Cse);cBo=r(jQr,"yoso"),jQr.forEach(t),mBo=r(owe," \u2014 "),zj=s(owe,"A",{href:!0});var NQr=n(zj);fBo=r(NQr,"YosoForQuestionAnswering"),NQr.forEach(t),gBo=r(owe," (YOSO model)"),owe.forEach(t),P.forEach(t),hBo=i(Ot),hT=s(Ot,"P",{});var rwe=n(hT);uBo=r(rwe,"The model is set in evaluation mode by default using "),Mse=s(rwe,"CODE",{});var DQr=n(Mse);pBo=r(DQr,"model.eval()"),DQr.forEach(t),_Bo=r(rwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=s(rwe,"CODE",{});var qQr=n(Ese);bBo=r(qQr,"model.train()"),qQr.forEach(t),rwe.forEach(t),vBo=i(Ot),yse=s(Ot,"P",{});var GQr=n(yse);TBo=r(GQr,"Examples:"),GQr.forEach(t),FBo=i(Ot),f(Ky.$$.fragment,Ot),Ot.forEach(t),tl.forEach(t),z8e=i(d),pd=s(d,"H2",{class:!0});var YBe=n(pd);uT=s(YBe,"A",{id:!0,class:!0,href:!0});var OQr=n(uT);wse=s(OQr,"SPAN",{});var XQr=n(wse);f(Zy.$$.fragment,XQr),XQr.forEach(t),OQr.forEach(t),CBo=i(YBe),Ase=s(YBe,"SPAN",{});var zQr=n(Ase);MBo=r(zQr,"AutoModelForTableQuestionAnswering"),zQr.forEach(t),YBe.forEach(t),V8e=i(d),or=s(d,"DIV",{class:!0});var sl=n(or);f(ew.$$.fragment,sl),EBo=i(sl),_d=s(sl,"P",{});var _z=n(_d);yBo=r(_z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lse=s(_z,"CODE",{});var VQr=n(Lse);wBo=r(VQr,"from_pretrained()"),VQr.forEach(t),ABo=r(_z,"class method or the "),Bse=s(_z,"CODE",{});var WQr=n(Bse);LBo=r(WQr,"from_config()"),WQr.forEach(t),BBo=r(_z,`class
method.`),_z.forEach(t),xBo=i(sl),ow=s(sl,"P",{});var KBe=n(ow);kBo=r(KBe,"This class cannot be instantiated directly using "),xse=s(KBe,"CODE",{});var QQr=n(xse);RBo=r(QQr,"__init__()"),QQr.forEach(t),SBo=r(KBe," (throws an error)."),KBe.forEach(t),PBo=i(sl),Hr=s(sl,"DIV",{class:!0});var nl=n(Hr);f(rw.$$.fragment,nl),$Bo=i(nl),kse=s(nl,"P",{});var HQr=n(kse);IBo=r(HQr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),HQr.forEach(t),jBo=i(nl),bd=s(nl,"P",{});var bz=n(bd);NBo=r(bz,`Note:
Loading a model from its configuration file does `),Rse=s(bz,"STRONG",{});var UQr=n(Rse);DBo=r(UQr,"not"),UQr.forEach(t),qBo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sse=s(bz,"CODE",{});var JQr=n(Sse);GBo=r(JQr,"from_pretrained()"),JQr.forEach(t),OBo=r(bz,"to load the model weights."),bz.forEach(t),XBo=i(nl),Pse=s(nl,"P",{});var YQr=n(Pse);zBo=r(YQr,"Examples:"),YQr.forEach(t),VBo=i(nl),f(tw.$$.fragment,nl),nl.forEach(t),WBo=i(sl),qe=s(sl,"DIV",{class:!0});var Xt=n(qe);f(aw.$$.fragment,Xt),QBo=i(Xt),$se=s(Xt,"P",{});var KQr=n($se);HBo=r(KQr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KQr.forEach(t),UBo=i(Xt),Ua=s(Xt,"P",{});var v3=n(Ua);JBo=r(v3,"The model class to instantiate is selected based on the "),Ise=s(v3,"CODE",{});var ZQr=n(Ise);YBo=r(ZQr,"model_type"),ZQr.forEach(t),KBo=r(v3,` property of the config object (either
passed as an argument or loaded from `),jse=s(v3,"CODE",{});var eHr=n(jse);ZBo=r(eHr,"pretrained_model_name_or_path"),eHr.forEach(t),exo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nse=s(v3,"CODE",{});var oHr=n(Nse);oxo=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),rxo=r(v3,":"),v3.forEach(t),txo=i(Xt),Dse=s(Xt,"UL",{});var rHr=n(Dse);pT=s(rHr,"LI",{});var twe=n(pT);qse=s(twe,"STRONG",{});var tHr=n(qse);axo=r(tHr,"tapas"),tHr.forEach(t),sxo=r(twe," \u2014 "),Vj=s(twe,"A",{href:!0});var aHr=n(Vj);nxo=r(aHr,"TapasForQuestionAnswering"),aHr.forEach(t),lxo=r(twe," (TAPAS model)"),twe.forEach(t),rHr.forEach(t),ixo=i(Xt),_T=s(Xt,"P",{});var awe=n(_T);dxo=r(awe,"The model is set in evaluation mode by default using "),Gse=s(awe,"CODE",{});var sHr=n(Gse);cxo=r(sHr,"model.eval()"),sHr.forEach(t),mxo=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=s(awe,"CODE",{});var nHr=n(Ose);fxo=r(nHr,"model.train()"),nHr.forEach(t),awe.forEach(t),gxo=i(Xt),Xse=s(Xt,"P",{});var lHr=n(Xse);hxo=r(lHr,"Examples:"),lHr.forEach(t),uxo=i(Xt),f(sw.$$.fragment,Xt),Xt.forEach(t),sl.forEach(t),W8e=i(d),vd=s(d,"H2",{class:!0});var ZBe=n(vd);bT=s(ZBe,"A",{id:!0,class:!0,href:!0});var iHr=n(bT);zse=s(iHr,"SPAN",{});var dHr=n(zse);f(nw.$$.fragment,dHr),dHr.forEach(t),iHr.forEach(t),pxo=i(ZBe),Vse=s(ZBe,"SPAN",{});var cHr=n(Vse);_xo=r(cHr,"AutoModelForImageClassification"),cHr.forEach(t),ZBe.forEach(t),Q8e=i(d),rr=s(d,"DIV",{class:!0});var ll=n(rr);f(lw.$$.fragment,ll),bxo=i(ll),Td=s(ll,"P",{});var vz=n(Td);vxo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wse=s(vz,"CODE",{});var mHr=n(Wse);Txo=r(mHr,"from_pretrained()"),mHr.forEach(t),Fxo=r(vz,"class method or the "),Qse=s(vz,"CODE",{});var fHr=n(Qse);Cxo=r(fHr,"from_config()"),fHr.forEach(t),Mxo=r(vz,`class
method.`),vz.forEach(t),Exo=i(ll),iw=s(ll,"P",{});var exe=n(iw);yxo=r(exe,"This class cannot be instantiated directly using "),Hse=s(exe,"CODE",{});var gHr=n(Hse);wxo=r(gHr,"__init__()"),gHr.forEach(t),Axo=r(exe," (throws an error)."),exe.forEach(t),Lxo=i(ll),Ur=s(ll,"DIV",{class:!0});var il=n(Ur);f(dw.$$.fragment,il),Bxo=i(il),Use=s(il,"P",{});var hHr=n(Use);xxo=r(hHr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hHr.forEach(t),kxo=i(il),Fd=s(il,"P",{});var Tz=n(Fd);Rxo=r(Tz,`Note:
Loading a model from its configuration file does `),Jse=s(Tz,"STRONG",{});var uHr=n(Jse);Sxo=r(uHr,"not"),uHr.forEach(t),Pxo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=s(Tz,"CODE",{});var pHr=n(Yse);$xo=r(pHr,"from_pretrained()"),pHr.forEach(t),Ixo=r(Tz,"to load the model weights."),Tz.forEach(t),jxo=i(il),Kse=s(il,"P",{});var _Hr=n(Kse);Nxo=r(_Hr,"Examples:"),_Hr.forEach(t),Dxo=i(il),f(cw.$$.fragment,il),il.forEach(t),qxo=i(ll),Ge=s(ll,"DIV",{class:!0});var zt=n(Ge);f(mw.$$.fragment,zt),Gxo=i(zt),Zse=s(zt,"P",{});var bHr=n(Zse);Oxo=r(bHr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bHr.forEach(t),Xxo=i(zt),Ja=s(zt,"P",{});var T3=n(Ja);zxo=r(T3,"The model class to instantiate is selected based on the "),ene=s(T3,"CODE",{});var vHr=n(ene);Vxo=r(vHr,"model_type"),vHr.forEach(t),Wxo=r(T3,` property of the config object (either
passed as an argument or loaded from `),one=s(T3,"CODE",{});var THr=n(one);Qxo=r(THr,"pretrained_model_name_or_path"),THr.forEach(t),Hxo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rne=s(T3,"CODE",{});var FHr=n(rne);Uxo=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),Jxo=r(T3,":"),T3.forEach(t),Yxo=i(zt),be=s(zt,"UL",{});var Ke=n(be);vT=s(Ke,"LI",{});var swe=n(vT);tne=s(swe,"STRONG",{});var CHr=n(tne);Kxo=r(CHr,"beit"),CHr.forEach(t),Zxo=r(swe," \u2014 "),Wj=s(swe,"A",{href:!0});var MHr=n(Wj);eko=r(MHr,"BeitForImageClassification"),MHr.forEach(t),oko=r(swe," (BEiT model)"),swe.forEach(t),rko=i(Ke),TT=s(Ke,"LI",{});var nwe=n(TT);ane=s(nwe,"STRONG",{});var EHr=n(ane);tko=r(EHr,"convnext"),EHr.forEach(t),ako=r(nwe," \u2014 "),Qj=s(nwe,"A",{href:!0});var yHr=n(Qj);sko=r(yHr,"ConvNextForImageClassification"),yHr.forEach(t),nko=r(nwe," (ConvNext model)"),nwe.forEach(t),lko=i(Ke),Rn=s(Ke,"LI",{});var q7=n(Rn);sne=s(q7,"STRONG",{});var wHr=n(sne);iko=r(wHr,"deit"),wHr.forEach(t),dko=r(q7," \u2014 "),Hj=s(q7,"A",{href:!0});var AHr=n(Hj);cko=r(AHr,"DeiTForImageClassification"),AHr.forEach(t),mko=r(q7," or "),Uj=s(q7,"A",{href:!0});var LHr=n(Uj);fko=r(LHr,"DeiTForImageClassificationWithTeacher"),LHr.forEach(t),gko=r(q7," (DeiT model)"),q7.forEach(t),hko=i(Ke),FT=s(Ke,"LI",{});var lwe=n(FT);nne=s(lwe,"STRONG",{});var BHr=n(nne);uko=r(BHr,"imagegpt"),BHr.forEach(t),pko=r(lwe," \u2014 "),Jj=s(lwe,"A",{href:!0});var xHr=n(Jj);_ko=r(xHr,"ImageGPTForImageClassification"),xHr.forEach(t),bko=r(lwe," (ImageGPT model)"),lwe.forEach(t),vko=i(Ke),la=s(Ke,"LI",{});var Cm=n(la);lne=s(Cm,"STRONG",{});var kHr=n(lne);Tko=r(kHr,"perceiver"),kHr.forEach(t),Fko=r(Cm," \u2014 "),Yj=s(Cm,"A",{href:!0});var RHr=n(Yj);Cko=r(RHr,"PerceiverForImageClassificationLearned"),RHr.forEach(t),Mko=r(Cm," or "),Kj=s(Cm,"A",{href:!0});var SHr=n(Kj);Eko=r(SHr,"PerceiverForImageClassificationFourier"),SHr.forEach(t),yko=r(Cm," or "),Zj=s(Cm,"A",{href:!0});var PHr=n(Zj);wko=r(PHr,"PerceiverForImageClassificationConvProcessing"),PHr.forEach(t),Ako=r(Cm," (Perceiver model)"),Cm.forEach(t),Lko=i(Ke),CT=s(Ke,"LI",{});var iwe=n(CT);ine=s(iwe,"STRONG",{});var $Hr=n(ine);Bko=r($Hr,"poolformer"),$Hr.forEach(t),xko=r(iwe," \u2014 "),eN=s(iwe,"A",{href:!0});var IHr=n(eN);kko=r(IHr,"PoolFormerForImageClassification"),IHr.forEach(t),Rko=r(iwe," (PoolFormer model)"),iwe.forEach(t),Sko=i(Ke),MT=s(Ke,"LI",{});var dwe=n(MT);dne=s(dwe,"STRONG",{});var jHr=n(dne);Pko=r(jHr,"segformer"),jHr.forEach(t),$ko=r(dwe," \u2014 "),oN=s(dwe,"A",{href:!0});var NHr=n(oN);Iko=r(NHr,"SegformerForImageClassification"),NHr.forEach(t),jko=r(dwe," (SegFormer model)"),dwe.forEach(t),Nko=i(Ke),ET=s(Ke,"LI",{});var cwe=n(ET);cne=s(cwe,"STRONG",{});var DHr=n(cne);Dko=r(DHr,"swin"),DHr.forEach(t),qko=r(cwe," \u2014 "),rN=s(cwe,"A",{href:!0});var qHr=n(rN);Gko=r(qHr,"SwinForImageClassification"),qHr.forEach(t),Oko=r(cwe," (Swin model)"),cwe.forEach(t),Xko=i(Ke),yT=s(Ke,"LI",{});var mwe=n(yT);mne=s(mwe,"STRONG",{});var GHr=n(mne);zko=r(GHr,"vit"),GHr.forEach(t),Vko=r(mwe," \u2014 "),tN=s(mwe,"A",{href:!0});var OHr=n(tN);Wko=r(OHr,"ViTForImageClassification"),OHr.forEach(t),Qko=r(mwe," (ViT model)"),mwe.forEach(t),Ke.forEach(t),Hko=i(zt),wT=s(zt,"P",{});var fwe=n(wT);Uko=r(fwe,"The model is set in evaluation mode by default using "),fne=s(fwe,"CODE",{});var XHr=n(fne);Jko=r(XHr,"model.eval()"),XHr.forEach(t),Yko=r(fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gne=s(fwe,"CODE",{});var zHr=n(gne);Kko=r(zHr,"model.train()"),zHr.forEach(t),fwe.forEach(t),Zko=i(zt),hne=s(zt,"P",{});var VHr=n(hne);eRo=r(VHr,"Examples:"),VHr.forEach(t),oRo=i(zt),f(fw.$$.fragment,zt),zt.forEach(t),ll.forEach(t),H8e=i(d),Cd=s(d,"H2",{class:!0});var oxe=n(Cd);AT=s(oxe,"A",{id:!0,class:!0,href:!0});var WHr=n(AT);une=s(WHr,"SPAN",{});var QHr=n(une);f(gw.$$.fragment,QHr),QHr.forEach(t),WHr.forEach(t),rRo=i(oxe),pne=s(oxe,"SPAN",{});var HHr=n(pne);tRo=r(HHr,"AutoModelForVision2Seq"),HHr.forEach(t),oxe.forEach(t),U8e=i(d),tr=s(d,"DIV",{class:!0});var dl=n(tr);f(hw.$$.fragment,dl),aRo=i(dl),Md=s(dl,"P",{});var Fz=n(Md);sRo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_ne=s(Fz,"CODE",{});var UHr=n(_ne);nRo=r(UHr,"from_pretrained()"),UHr.forEach(t),lRo=r(Fz,"class method or the "),bne=s(Fz,"CODE",{});var JHr=n(bne);iRo=r(JHr,"from_config()"),JHr.forEach(t),dRo=r(Fz,`class
method.`),Fz.forEach(t),cRo=i(dl),uw=s(dl,"P",{});var rxe=n(uw);mRo=r(rxe,"This class cannot be instantiated directly using "),vne=s(rxe,"CODE",{});var YHr=n(vne);fRo=r(YHr,"__init__()"),YHr.forEach(t),gRo=r(rxe," (throws an error)."),rxe.forEach(t),hRo=i(dl),Jr=s(dl,"DIV",{class:!0});var cl=n(Jr);f(pw.$$.fragment,cl),uRo=i(cl),Tne=s(cl,"P",{});var KHr=n(Tne);pRo=r(KHr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KHr.forEach(t),_Ro=i(cl),Ed=s(cl,"P",{});var Cz=n(Ed);bRo=r(Cz,`Note:
Loading a model from its configuration file does `),Fne=s(Cz,"STRONG",{});var ZHr=n(Fne);vRo=r(ZHr,"not"),ZHr.forEach(t),TRo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cne=s(Cz,"CODE",{});var eUr=n(Cne);FRo=r(eUr,"from_pretrained()"),eUr.forEach(t),CRo=r(Cz,"to load the model weights."),Cz.forEach(t),MRo=i(cl),Mne=s(cl,"P",{});var oUr=n(Mne);ERo=r(oUr,"Examples:"),oUr.forEach(t),yRo=i(cl),f(_w.$$.fragment,cl),cl.forEach(t),wRo=i(dl),Oe=s(dl,"DIV",{class:!0});var Vt=n(Oe);f(bw.$$.fragment,Vt),ARo=i(Vt),Ene=s(Vt,"P",{});var rUr=n(Ene);LRo=r(rUr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rUr.forEach(t),BRo=i(Vt),Ya=s(Vt,"P",{});var F3=n(Ya);xRo=r(F3,"The model class to instantiate is selected based on the "),yne=s(F3,"CODE",{});var tUr=n(yne);kRo=r(tUr,"model_type"),tUr.forEach(t),RRo=r(F3,` property of the config object (either
passed as an argument or loaded from `),wne=s(F3,"CODE",{});var aUr=n(wne);SRo=r(aUr,"pretrained_model_name_or_path"),aUr.forEach(t),PRo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=s(F3,"CODE",{});var sUr=n(Ane);$Ro=r(sUr,"pretrained_model_name_or_path"),sUr.forEach(t),IRo=r(F3,":"),F3.forEach(t),jRo=i(Vt),Lne=s(Vt,"UL",{});var nUr=n(Lne);LT=s(nUr,"LI",{});var gwe=n(LT);Bne=s(gwe,"STRONG",{});var lUr=n(Bne);NRo=r(lUr,"vision-encoder-decoder"),lUr.forEach(t),DRo=r(gwe," \u2014 "),aN=s(gwe,"A",{href:!0});var iUr=n(aN);qRo=r(iUr,"VisionEncoderDecoderModel"),iUr.forEach(t),GRo=r(gwe," (Vision Encoder decoder model)"),gwe.forEach(t),nUr.forEach(t),ORo=i(Vt),BT=s(Vt,"P",{});var hwe=n(BT);XRo=r(hwe,"The model is set in evaluation mode by default using "),xne=s(hwe,"CODE",{});var dUr=n(xne);zRo=r(dUr,"model.eval()"),dUr.forEach(t),VRo=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kne=s(hwe,"CODE",{});var cUr=n(kne);WRo=r(cUr,"model.train()"),cUr.forEach(t),hwe.forEach(t),QRo=i(Vt),Rne=s(Vt,"P",{});var mUr=n(Rne);HRo=r(mUr,"Examples:"),mUr.forEach(t),URo=i(Vt),f(vw.$$.fragment,Vt),Vt.forEach(t),dl.forEach(t),J8e=i(d),yd=s(d,"H2",{class:!0});var txe=n(yd);xT=s(txe,"A",{id:!0,class:!0,href:!0});var fUr=n(xT);Sne=s(fUr,"SPAN",{});var gUr=n(Sne);f(Tw.$$.fragment,gUr),gUr.forEach(t),fUr.forEach(t),JRo=i(txe),Pne=s(txe,"SPAN",{});var hUr=n(Pne);YRo=r(hUr,"AutoModelForAudioClassification"),hUr.forEach(t),txe.forEach(t),Y8e=i(d),ar=s(d,"DIV",{class:!0});var ml=n(ar);f(Fw.$$.fragment,ml),KRo=i(ml),wd=s(ml,"P",{});var Mz=n(wd);ZRo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$ne=s(Mz,"CODE",{});var uUr=n($ne);eSo=r(uUr,"from_pretrained()"),uUr.forEach(t),oSo=r(Mz,"class method or the "),Ine=s(Mz,"CODE",{});var pUr=n(Ine);rSo=r(pUr,"from_config()"),pUr.forEach(t),tSo=r(Mz,`class
method.`),Mz.forEach(t),aSo=i(ml),Cw=s(ml,"P",{});var axe=n(Cw);sSo=r(axe,"This class cannot be instantiated directly using "),jne=s(axe,"CODE",{});var _Ur=n(jne);nSo=r(_Ur,"__init__()"),_Ur.forEach(t),lSo=r(axe," (throws an error)."),axe.forEach(t),iSo=i(ml),Yr=s(ml,"DIV",{class:!0});var fl=n(Yr);f(Mw.$$.fragment,fl),dSo=i(fl),Nne=s(fl,"P",{});var bUr=n(Nne);cSo=r(bUr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bUr.forEach(t),mSo=i(fl),Ad=s(fl,"P",{});var Ez=n(Ad);fSo=r(Ez,`Note:
Loading a model from its configuration file does `),Dne=s(Ez,"STRONG",{});var vUr=n(Dne);gSo=r(vUr,"not"),vUr.forEach(t),hSo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),qne=s(Ez,"CODE",{});var TUr=n(qne);uSo=r(TUr,"from_pretrained()"),TUr.forEach(t),pSo=r(Ez,"to load the model weights."),Ez.forEach(t),_So=i(fl),Gne=s(fl,"P",{});var FUr=n(Gne);bSo=r(FUr,"Examples:"),FUr.forEach(t),vSo=i(fl),f(Ew.$$.fragment,fl),fl.forEach(t),TSo=i(ml),Xe=s(ml,"DIV",{class:!0});var Wt=n(Xe);f(yw.$$.fragment,Wt),FSo=i(Wt),One=s(Wt,"P",{});var CUr=n(One);CSo=r(CUr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),CUr.forEach(t),MSo=i(Wt),Ka=s(Wt,"P",{});var C3=n(Ka);ESo=r(C3,"The model class to instantiate is selected based on the "),Xne=s(C3,"CODE",{});var MUr=n(Xne);ySo=r(MUr,"model_type"),MUr.forEach(t),wSo=r(C3,` property of the config object (either
passed as an argument or loaded from `),zne=s(C3,"CODE",{});var EUr=n(zne);ASo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),LSo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=s(C3,"CODE",{});var yUr=n(Vne);BSo=r(yUr,"pretrained_model_name_or_path"),yUr.forEach(t),xSo=r(C3,":"),C3.forEach(t),kSo=i(Wt),ao=s(Wt,"UL",{});var Qt=n(ao);kT=s(Qt,"LI",{});var uwe=n(kT);Wne=s(uwe,"STRONG",{});var wUr=n(Wne);RSo=r(wUr,"hubert"),wUr.forEach(t),SSo=r(uwe," \u2014 "),sN=s(uwe,"A",{href:!0});var AUr=n(sN);PSo=r(AUr,"HubertForSequenceClassification"),AUr.forEach(t),$So=r(uwe," (Hubert model)"),uwe.forEach(t),ISo=i(Qt),RT=s(Qt,"LI",{});var pwe=n(RT);Qne=s(pwe,"STRONG",{});var LUr=n(Qne);jSo=r(LUr,"sew"),LUr.forEach(t),NSo=r(pwe," \u2014 "),nN=s(pwe,"A",{href:!0});var BUr=n(nN);DSo=r(BUr,"SEWForSequenceClassification"),BUr.forEach(t),qSo=r(pwe," (SEW model)"),pwe.forEach(t),GSo=i(Qt),ST=s(Qt,"LI",{});var _we=n(ST);Hne=s(_we,"STRONG",{});var xUr=n(Hne);OSo=r(xUr,"sew-d"),xUr.forEach(t),XSo=r(_we," \u2014 "),lN=s(_we,"A",{href:!0});var kUr=n(lN);zSo=r(kUr,"SEWDForSequenceClassification"),kUr.forEach(t),VSo=r(_we," (SEW-D model)"),_we.forEach(t),WSo=i(Qt),PT=s(Qt,"LI",{});var bwe=n(PT);Une=s(bwe,"STRONG",{});var RUr=n(Une);QSo=r(RUr,"unispeech"),RUr.forEach(t),HSo=r(bwe," \u2014 "),iN=s(bwe,"A",{href:!0});var SUr=n(iN);USo=r(SUr,"UniSpeechForSequenceClassification"),SUr.forEach(t),JSo=r(bwe," (UniSpeech model)"),bwe.forEach(t),YSo=i(Qt),$T=s(Qt,"LI",{});var vwe=n($T);Jne=s(vwe,"STRONG",{});var PUr=n(Jne);KSo=r(PUr,"unispeech-sat"),PUr.forEach(t),ZSo=r(vwe," \u2014 "),dN=s(vwe,"A",{href:!0});var $Ur=n(dN);ePo=r($Ur,"UniSpeechSatForSequenceClassification"),$Ur.forEach(t),oPo=r(vwe," (UniSpeechSat model)"),vwe.forEach(t),rPo=i(Qt),IT=s(Qt,"LI",{});var Twe=n(IT);Yne=s(Twe,"STRONG",{});var IUr=n(Yne);tPo=r(IUr,"wav2vec2"),IUr.forEach(t),aPo=r(Twe," \u2014 "),cN=s(Twe,"A",{href:!0});var jUr=n(cN);sPo=r(jUr,"Wav2Vec2ForSequenceClassification"),jUr.forEach(t),nPo=r(Twe," (Wav2Vec2 model)"),Twe.forEach(t),lPo=i(Qt),jT=s(Qt,"LI",{});var Fwe=n(jT);Kne=s(Fwe,"STRONG",{});var NUr=n(Kne);iPo=r(NUr,"wavlm"),NUr.forEach(t),dPo=r(Fwe," \u2014 "),mN=s(Fwe,"A",{href:!0});var DUr=n(mN);cPo=r(DUr,"WavLMForSequenceClassification"),DUr.forEach(t),mPo=r(Fwe," (WavLM model)"),Fwe.forEach(t),Qt.forEach(t),fPo=i(Wt),NT=s(Wt,"P",{});var Cwe=n(NT);gPo=r(Cwe,"The model is set in evaluation mode by default using "),Zne=s(Cwe,"CODE",{});var qUr=n(Zne);hPo=r(qUr,"model.eval()"),qUr.forEach(t),uPo=r(Cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=s(Cwe,"CODE",{});var GUr=n(ele);pPo=r(GUr,"model.train()"),GUr.forEach(t),Cwe.forEach(t),_Po=i(Wt),ole=s(Wt,"P",{});var OUr=n(ole);bPo=r(OUr,"Examples:"),OUr.forEach(t),vPo=i(Wt),f(ww.$$.fragment,Wt),Wt.forEach(t),ml.forEach(t),K8e=i(d),Ld=s(d,"H2",{class:!0});var sxe=n(Ld);DT=s(sxe,"A",{id:!0,class:!0,href:!0});var XUr=n(DT);rle=s(XUr,"SPAN",{});var zUr=n(rle);f(Aw.$$.fragment,zUr),zUr.forEach(t),XUr.forEach(t),TPo=i(sxe),tle=s(sxe,"SPAN",{});var VUr=n(tle);FPo=r(VUr,"AutoModelForAudioFrameClassification"),VUr.forEach(t),sxe.forEach(t),Z8e=i(d),sr=s(d,"DIV",{class:!0});var gl=n(sr);f(Lw.$$.fragment,gl),CPo=i(gl),Bd=s(gl,"P",{});var yz=n(Bd);MPo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ale=s(yz,"CODE",{});var WUr=n(ale);EPo=r(WUr,"from_pretrained()"),WUr.forEach(t),yPo=r(yz,"class method or the "),sle=s(yz,"CODE",{});var QUr=n(sle);wPo=r(QUr,"from_config()"),QUr.forEach(t),APo=r(yz,`class
method.`),yz.forEach(t),LPo=i(gl),Bw=s(gl,"P",{});var nxe=n(Bw);BPo=r(nxe,"This class cannot be instantiated directly using "),nle=s(nxe,"CODE",{});var HUr=n(nle);xPo=r(HUr,"__init__()"),HUr.forEach(t),kPo=r(nxe," (throws an error)."),nxe.forEach(t),RPo=i(gl),Kr=s(gl,"DIV",{class:!0});var hl=n(Kr);f(xw.$$.fragment,hl),SPo=i(hl),lle=s(hl,"P",{});var UUr=n(lle);PPo=r(UUr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UUr.forEach(t),$Po=i(hl),xd=s(hl,"P",{});var wz=n(xd);IPo=r(wz,`Note:
Loading a model from its configuration file does `),ile=s(wz,"STRONG",{});var JUr=n(ile);jPo=r(JUr,"not"),JUr.forEach(t),NPo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=s(wz,"CODE",{});var YUr=n(dle);DPo=r(YUr,"from_pretrained()"),YUr.forEach(t),qPo=r(wz,"to load the model weights."),wz.forEach(t),GPo=i(hl),cle=s(hl,"P",{});var KUr=n(cle);OPo=r(KUr,"Examples:"),KUr.forEach(t),XPo=i(hl),f(kw.$$.fragment,hl),hl.forEach(t),zPo=i(gl),ze=s(gl,"DIV",{class:!0});var Ht=n(ze);f(Rw.$$.fragment,Ht),VPo=i(Ht),mle=s(Ht,"P",{});var ZUr=n(mle);WPo=r(ZUr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ZUr.forEach(t),QPo=i(Ht),Za=s(Ht,"P",{});var M3=n(Za);HPo=r(M3,"The model class to instantiate is selected based on the "),fle=s(M3,"CODE",{});var eJr=n(fle);UPo=r(eJr,"model_type"),eJr.forEach(t),JPo=r(M3,` property of the config object (either
passed as an argument or loaded from `),gle=s(M3,"CODE",{});var oJr=n(gle);YPo=r(oJr,"pretrained_model_name_or_path"),oJr.forEach(t),KPo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=s(M3,"CODE",{});var rJr=n(hle);ZPo=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),e$o=r(M3,":"),M3.forEach(t),o$o=i(Ht),kd=s(Ht,"UL",{});var Az=n(kd);qT=s(Az,"LI",{});var Mwe=n(qT);ule=s(Mwe,"STRONG",{});var tJr=n(ule);r$o=r(tJr,"unispeech-sat"),tJr.forEach(t),t$o=r(Mwe," \u2014 "),fN=s(Mwe,"A",{href:!0});var aJr=n(fN);a$o=r(aJr,"UniSpeechSatForAudioFrameClassification"),aJr.forEach(t),s$o=r(Mwe," (UniSpeechSat model)"),Mwe.forEach(t),n$o=i(Az),GT=s(Az,"LI",{});var Ewe=n(GT);ple=s(Ewe,"STRONG",{});var sJr=n(ple);l$o=r(sJr,"wav2vec2"),sJr.forEach(t),i$o=r(Ewe," \u2014 "),gN=s(Ewe,"A",{href:!0});var nJr=n(gN);d$o=r(nJr,"Wav2Vec2ForAudioFrameClassification"),nJr.forEach(t),c$o=r(Ewe," (Wav2Vec2 model)"),Ewe.forEach(t),m$o=i(Az),OT=s(Az,"LI",{});var ywe=n(OT);_le=s(ywe,"STRONG",{});var lJr=n(_le);f$o=r(lJr,"wavlm"),lJr.forEach(t),g$o=r(ywe," \u2014 "),hN=s(ywe,"A",{href:!0});var iJr=n(hN);h$o=r(iJr,"WavLMForAudioFrameClassification"),iJr.forEach(t),u$o=r(ywe," (WavLM model)"),ywe.forEach(t),Az.forEach(t),p$o=i(Ht),XT=s(Ht,"P",{});var wwe=n(XT);_$o=r(wwe,"The model is set in evaluation mode by default using "),ble=s(wwe,"CODE",{});var dJr=n(ble);b$o=r(dJr,"model.eval()"),dJr.forEach(t),v$o=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=s(wwe,"CODE",{});var cJr=n(vle);T$o=r(cJr,"model.train()"),cJr.forEach(t),wwe.forEach(t),F$o=i(Ht),Tle=s(Ht,"P",{});var mJr=n(Tle);C$o=r(mJr,"Examples:"),mJr.forEach(t),M$o=i(Ht),f(Sw.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),e9e=i(d),Rd=s(d,"H2",{class:!0});var lxe=n(Rd);zT=s(lxe,"A",{id:!0,class:!0,href:!0});var fJr=n(zT);Fle=s(fJr,"SPAN",{});var gJr=n(Fle);f(Pw.$$.fragment,gJr),gJr.forEach(t),fJr.forEach(t),E$o=i(lxe),Cle=s(lxe,"SPAN",{});var hJr=n(Cle);y$o=r(hJr,"AutoModelForCTC"),hJr.forEach(t),lxe.forEach(t),o9e=i(d),nr=s(d,"DIV",{class:!0});var ul=n(nr);f($w.$$.fragment,ul),w$o=i(ul),Sd=s(ul,"P",{});var Lz=n(Sd);A$o=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mle=s(Lz,"CODE",{});var uJr=n(Mle);L$o=r(uJr,"from_pretrained()"),uJr.forEach(t),B$o=r(Lz,"class method or the "),Ele=s(Lz,"CODE",{});var pJr=n(Ele);x$o=r(pJr,"from_config()"),pJr.forEach(t),k$o=r(Lz,`class
method.`),Lz.forEach(t),R$o=i(ul),Iw=s(ul,"P",{});var ixe=n(Iw);S$o=r(ixe,"This class cannot be instantiated directly using "),yle=s(ixe,"CODE",{});var _Jr=n(yle);P$o=r(_Jr,"__init__()"),_Jr.forEach(t),$$o=r(ixe," (throws an error)."),ixe.forEach(t),I$o=i(ul),Zr=s(ul,"DIV",{class:!0});var pl=n(Zr);f(jw.$$.fragment,pl),j$o=i(pl),wle=s(pl,"P",{});var bJr=n(wle);N$o=r(bJr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bJr.forEach(t),D$o=i(pl),Pd=s(pl,"P",{});var Bz=n(Pd);q$o=r(Bz,`Note:
Loading a model from its configuration file does `),Ale=s(Bz,"STRONG",{});var vJr=n(Ale);G$o=r(vJr,"not"),vJr.forEach(t),O$o=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=s(Bz,"CODE",{});var TJr=n(Lle);X$o=r(TJr,"from_pretrained()"),TJr.forEach(t),z$o=r(Bz,"to load the model weights."),Bz.forEach(t),V$o=i(pl),Ble=s(pl,"P",{});var FJr=n(Ble);W$o=r(FJr,"Examples:"),FJr.forEach(t),Q$o=i(pl),f(Nw.$$.fragment,pl),pl.forEach(t),H$o=i(ul),Ve=s(ul,"DIV",{class:!0});var Ut=n(Ve);f(Dw.$$.fragment,Ut),U$o=i(Ut),xle=s(Ut,"P",{});var CJr=n(xle);J$o=r(CJr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CJr.forEach(t),Y$o=i(Ut),es=s(Ut,"P",{});var E3=n(es);K$o=r(E3,"The model class to instantiate is selected based on the "),kle=s(E3,"CODE",{});var MJr=n(kle);Z$o=r(MJr,"model_type"),MJr.forEach(t),eIo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Rle=s(E3,"CODE",{});var EJr=n(Rle);oIo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),rIo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=s(E3,"CODE",{});var yJr=n(Sle);tIo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),aIo=r(E3,":"),E3.forEach(t),sIo=i(Ut),so=s(Ut,"UL",{});var Jt=n(so);VT=s(Jt,"LI",{});var Awe=n(VT);Ple=s(Awe,"STRONG",{});var wJr=n(Ple);nIo=r(wJr,"hubert"),wJr.forEach(t),lIo=r(Awe," \u2014 "),uN=s(Awe,"A",{href:!0});var AJr=n(uN);iIo=r(AJr,"HubertForCTC"),AJr.forEach(t),dIo=r(Awe," (Hubert model)"),Awe.forEach(t),cIo=i(Jt),WT=s(Jt,"LI",{});var Lwe=n(WT);$le=s(Lwe,"STRONG",{});var LJr=n($le);mIo=r(LJr,"sew"),LJr.forEach(t),fIo=r(Lwe," \u2014 "),pN=s(Lwe,"A",{href:!0});var BJr=n(pN);gIo=r(BJr,"SEWForCTC"),BJr.forEach(t),hIo=r(Lwe," (SEW model)"),Lwe.forEach(t),uIo=i(Jt),QT=s(Jt,"LI",{});var Bwe=n(QT);Ile=s(Bwe,"STRONG",{});var xJr=n(Ile);pIo=r(xJr,"sew-d"),xJr.forEach(t),_Io=r(Bwe," \u2014 "),_N=s(Bwe,"A",{href:!0});var kJr=n(_N);bIo=r(kJr,"SEWDForCTC"),kJr.forEach(t),vIo=r(Bwe," (SEW-D model)"),Bwe.forEach(t),TIo=i(Jt),HT=s(Jt,"LI",{});var xwe=n(HT);jle=s(xwe,"STRONG",{});var RJr=n(jle);FIo=r(RJr,"unispeech"),RJr.forEach(t),CIo=r(xwe," \u2014 "),bN=s(xwe,"A",{href:!0});var SJr=n(bN);MIo=r(SJr,"UniSpeechForCTC"),SJr.forEach(t),EIo=r(xwe," (UniSpeech model)"),xwe.forEach(t),yIo=i(Jt),UT=s(Jt,"LI",{});var kwe=n(UT);Nle=s(kwe,"STRONG",{});var PJr=n(Nle);wIo=r(PJr,"unispeech-sat"),PJr.forEach(t),AIo=r(kwe," \u2014 "),vN=s(kwe,"A",{href:!0});var $Jr=n(vN);LIo=r($Jr,"UniSpeechSatForCTC"),$Jr.forEach(t),BIo=r(kwe," (UniSpeechSat model)"),kwe.forEach(t),xIo=i(Jt),JT=s(Jt,"LI",{});var Rwe=n(JT);Dle=s(Rwe,"STRONG",{});var IJr=n(Dle);kIo=r(IJr,"wav2vec2"),IJr.forEach(t),RIo=r(Rwe," \u2014 "),TN=s(Rwe,"A",{href:!0});var jJr=n(TN);SIo=r(jJr,"Wav2Vec2ForCTC"),jJr.forEach(t),PIo=r(Rwe," (Wav2Vec2 model)"),Rwe.forEach(t),$Io=i(Jt),YT=s(Jt,"LI",{});var Swe=n(YT);qle=s(Swe,"STRONG",{});var NJr=n(qle);IIo=r(NJr,"wavlm"),NJr.forEach(t),jIo=r(Swe," \u2014 "),FN=s(Swe,"A",{href:!0});var DJr=n(FN);NIo=r(DJr,"WavLMForCTC"),DJr.forEach(t),DIo=r(Swe," (WavLM model)"),Swe.forEach(t),Jt.forEach(t),qIo=i(Ut),KT=s(Ut,"P",{});var Pwe=n(KT);GIo=r(Pwe,"The model is set in evaluation mode by default using "),Gle=s(Pwe,"CODE",{});var qJr=n(Gle);OIo=r(qJr,"model.eval()"),qJr.forEach(t),XIo=r(Pwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=s(Pwe,"CODE",{});var GJr=n(Ole);zIo=r(GJr,"model.train()"),GJr.forEach(t),Pwe.forEach(t),VIo=i(Ut),Xle=s(Ut,"P",{});var OJr=n(Xle);WIo=r(OJr,"Examples:"),OJr.forEach(t),QIo=i(Ut),f(qw.$$.fragment,Ut),Ut.forEach(t),ul.forEach(t),r9e=i(d),$d=s(d,"H2",{class:!0});var dxe=n($d);ZT=s(dxe,"A",{id:!0,class:!0,href:!0});var XJr=n(ZT);zle=s(XJr,"SPAN",{});var zJr=n(zle);f(Gw.$$.fragment,zJr),zJr.forEach(t),XJr.forEach(t),HIo=i(dxe),Vle=s(dxe,"SPAN",{});var VJr=n(Vle);UIo=r(VJr,"AutoModelForSpeechSeq2Seq"),VJr.forEach(t),dxe.forEach(t),t9e=i(d),lr=s(d,"DIV",{class:!0});var _l=n(lr);f(Ow.$$.fragment,_l),JIo=i(_l),Id=s(_l,"P",{});var xz=n(Id);YIo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wle=s(xz,"CODE",{});var WJr=n(Wle);KIo=r(WJr,"from_pretrained()"),WJr.forEach(t),ZIo=r(xz,"class method or the "),Qle=s(xz,"CODE",{});var QJr=n(Qle);ejo=r(QJr,"from_config()"),QJr.forEach(t),ojo=r(xz,`class
method.`),xz.forEach(t),rjo=i(_l),Xw=s(_l,"P",{});var cxe=n(Xw);tjo=r(cxe,"This class cannot be instantiated directly using "),Hle=s(cxe,"CODE",{});var HJr=n(Hle);ajo=r(HJr,"__init__()"),HJr.forEach(t),sjo=r(cxe," (throws an error)."),cxe.forEach(t),njo=i(_l),et=s(_l,"DIV",{class:!0});var bl=n(et);f(zw.$$.fragment,bl),ljo=i(bl),Ule=s(bl,"P",{});var UJr=n(Ule);ijo=r(UJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UJr.forEach(t),djo=i(bl),jd=s(bl,"P",{});var kz=n(jd);cjo=r(kz,`Note:
Loading a model from its configuration file does `),Jle=s(kz,"STRONG",{});var JJr=n(Jle);mjo=r(JJr,"not"),JJr.forEach(t),fjo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=s(kz,"CODE",{});var YJr=n(Yle);gjo=r(YJr,"from_pretrained()"),YJr.forEach(t),hjo=r(kz,"to load the model weights."),kz.forEach(t),ujo=i(bl),Kle=s(bl,"P",{});var KJr=n(Kle);pjo=r(KJr,"Examples:"),KJr.forEach(t),_jo=i(bl),f(Vw.$$.fragment,bl),bl.forEach(t),bjo=i(_l),We=s(_l,"DIV",{class:!0});var Yt=n(We);f(Ww.$$.fragment,Yt),vjo=i(Yt),Zle=s(Yt,"P",{});var ZJr=n(Zle);Tjo=r(ZJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZJr.forEach(t),Fjo=i(Yt),os=s(Yt,"P",{});var y3=n(os);Cjo=r(y3,"The model class to instantiate is selected based on the "),eie=s(y3,"CODE",{});var eYr=n(eie);Mjo=r(eYr,"model_type"),eYr.forEach(t),Ejo=r(y3,` property of the config object (either
passed as an argument or loaded from `),oie=s(y3,"CODE",{});var oYr=n(oie);yjo=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),wjo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=s(y3,"CODE",{});var rYr=n(rie);Ajo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),Ljo=r(y3,":"),y3.forEach(t),Bjo=i(Yt),Qw=s(Yt,"UL",{});var mxe=n(Qw);e1=s(mxe,"LI",{});var $we=n(e1);tie=s($we,"STRONG",{});var tYr=n(tie);xjo=r(tYr,"speech-encoder-decoder"),tYr.forEach(t),kjo=r($we," \u2014 "),CN=s($we,"A",{href:!0});var aYr=n(CN);Rjo=r(aYr,"SpeechEncoderDecoderModel"),aYr.forEach(t),Sjo=r($we," (Speech Encoder decoder model)"),$we.forEach(t),Pjo=i(mxe),o1=s(mxe,"LI",{});var Iwe=n(o1);aie=s(Iwe,"STRONG",{});var sYr=n(aie);$jo=r(sYr,"speech_to_text"),sYr.forEach(t),Ijo=r(Iwe," \u2014 "),MN=s(Iwe,"A",{href:!0});var nYr=n(MN);jjo=r(nYr,"Speech2TextForConditionalGeneration"),nYr.forEach(t),Njo=r(Iwe," (Speech2Text model)"),Iwe.forEach(t),mxe.forEach(t),Djo=i(Yt),r1=s(Yt,"P",{});var jwe=n(r1);qjo=r(jwe,"The model is set in evaluation mode by default using "),sie=s(jwe,"CODE",{});var lYr=n(sie);Gjo=r(lYr,"model.eval()"),lYr.forEach(t),Ojo=r(jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=s(jwe,"CODE",{});var iYr=n(nie);Xjo=r(iYr,"model.train()"),iYr.forEach(t),jwe.forEach(t),zjo=i(Yt),lie=s(Yt,"P",{});var dYr=n(lie);Vjo=r(dYr,"Examples:"),dYr.forEach(t),Wjo=i(Yt),f(Hw.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),a9e=i(d),Nd=s(d,"H2",{class:!0});var fxe=n(Nd);t1=s(fxe,"A",{id:!0,class:!0,href:!0});var cYr=n(t1);iie=s(cYr,"SPAN",{});var mYr=n(iie);f(Uw.$$.fragment,mYr),mYr.forEach(t),cYr.forEach(t),Qjo=i(fxe),die=s(fxe,"SPAN",{});var fYr=n(die);Hjo=r(fYr,"AutoModelForAudioXVector"),fYr.forEach(t),fxe.forEach(t),s9e=i(d),ir=s(d,"DIV",{class:!0});var vl=n(ir);f(Jw.$$.fragment,vl),Ujo=i(vl),Dd=s(vl,"P",{});var Rz=n(Dd);Jjo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cie=s(Rz,"CODE",{});var gYr=n(cie);Yjo=r(gYr,"from_pretrained()"),gYr.forEach(t),Kjo=r(Rz,"class method or the "),mie=s(Rz,"CODE",{});var hYr=n(mie);Zjo=r(hYr,"from_config()"),hYr.forEach(t),eNo=r(Rz,`class
method.`),Rz.forEach(t),oNo=i(vl),Yw=s(vl,"P",{});var gxe=n(Yw);rNo=r(gxe,"This class cannot be instantiated directly using "),fie=s(gxe,"CODE",{});var uYr=n(fie);tNo=r(uYr,"__init__()"),uYr.forEach(t),aNo=r(gxe," (throws an error)."),gxe.forEach(t),sNo=i(vl),ot=s(vl,"DIV",{class:!0});var Tl=n(ot);f(Kw.$$.fragment,Tl),nNo=i(Tl),gie=s(Tl,"P",{});var pYr=n(gie);lNo=r(pYr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pYr.forEach(t),iNo=i(Tl),qd=s(Tl,"P",{});var Sz=n(qd);dNo=r(Sz,`Note:
Loading a model from its configuration file does `),hie=s(Sz,"STRONG",{});var _Yr=n(hie);cNo=r(_Yr,"not"),_Yr.forEach(t),mNo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=s(Sz,"CODE",{});var bYr=n(uie);fNo=r(bYr,"from_pretrained()"),bYr.forEach(t),gNo=r(Sz,"to load the model weights."),Sz.forEach(t),hNo=i(Tl),pie=s(Tl,"P",{});var vYr=n(pie);uNo=r(vYr,"Examples:"),vYr.forEach(t),pNo=i(Tl),f(Zw.$$.fragment,Tl),Tl.forEach(t),_No=i(vl),Qe=s(vl,"DIV",{class:!0});var Kt=n(Qe);f(eA.$$.fragment,Kt),bNo=i(Kt),_ie=s(Kt,"P",{});var TYr=n(_ie);vNo=r(TYr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TYr.forEach(t),TNo=i(Kt),rs=s(Kt,"P",{});var w3=n(rs);FNo=r(w3,"The model class to instantiate is selected based on the "),bie=s(w3,"CODE",{});var FYr=n(bie);CNo=r(FYr,"model_type"),FYr.forEach(t),MNo=r(w3,` property of the config object (either
passed as an argument or loaded from `),vie=s(w3,"CODE",{});var CYr=n(vie);ENo=r(CYr,"pretrained_model_name_or_path"),CYr.forEach(t),yNo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=s(w3,"CODE",{});var MYr=n(Tie);wNo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),ANo=r(w3,":"),w3.forEach(t),LNo=i(Kt),Gd=s(Kt,"UL",{});var Pz=n(Gd);a1=s(Pz,"LI",{});var Nwe=n(a1);Fie=s(Nwe,"STRONG",{});var EYr=n(Fie);BNo=r(EYr,"unispeech-sat"),EYr.forEach(t),xNo=r(Nwe," \u2014 "),EN=s(Nwe,"A",{href:!0});var yYr=n(EN);kNo=r(yYr,"UniSpeechSatForXVector"),yYr.forEach(t),RNo=r(Nwe," (UniSpeechSat model)"),Nwe.forEach(t),SNo=i(Pz),s1=s(Pz,"LI",{});var Dwe=n(s1);Cie=s(Dwe,"STRONG",{});var wYr=n(Cie);PNo=r(wYr,"wav2vec2"),wYr.forEach(t),$No=r(Dwe," \u2014 "),yN=s(Dwe,"A",{href:!0});var AYr=n(yN);INo=r(AYr,"Wav2Vec2ForXVector"),AYr.forEach(t),jNo=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),NNo=i(Pz),n1=s(Pz,"LI",{});var qwe=n(n1);Mie=s(qwe,"STRONG",{});var LYr=n(Mie);DNo=r(LYr,"wavlm"),LYr.forEach(t),qNo=r(qwe," \u2014 "),wN=s(qwe,"A",{href:!0});var BYr=n(wN);GNo=r(BYr,"WavLMForXVector"),BYr.forEach(t),ONo=r(qwe," (WavLM model)"),qwe.forEach(t),Pz.forEach(t),XNo=i(Kt),l1=s(Kt,"P",{});var Gwe=n(l1);zNo=r(Gwe,"The model is set in evaluation mode by default using "),Eie=s(Gwe,"CODE",{});var xYr=n(Eie);VNo=r(xYr,"model.eval()"),xYr.forEach(t),WNo=r(Gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=s(Gwe,"CODE",{});var kYr=n(yie);QNo=r(kYr,"model.train()"),kYr.forEach(t),Gwe.forEach(t),HNo=i(Kt),wie=s(Kt,"P",{});var RYr=n(wie);UNo=r(RYr,"Examples:"),RYr.forEach(t),JNo=i(Kt),f(oA.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),n9e=i(d),Od=s(d,"H2",{class:!0});var hxe=n(Od);i1=s(hxe,"A",{id:!0,class:!0,href:!0});var SYr=n(i1);Aie=s(SYr,"SPAN",{});var PYr=n(Aie);f(rA.$$.fragment,PYr),PYr.forEach(t),SYr.forEach(t),YNo=i(hxe),Lie=s(hxe,"SPAN",{});var $Yr=n(Lie);KNo=r($Yr,"AutoModelForMaskedImageModeling"),$Yr.forEach(t),hxe.forEach(t),l9e=i(d),dr=s(d,"DIV",{class:!0});var Fl=n(dr);f(tA.$$.fragment,Fl),ZNo=i(Fl),Xd=s(Fl,"P",{});var $z=n(Xd);eDo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bie=s($z,"CODE",{});var IYr=n(Bie);oDo=r(IYr,"from_pretrained()"),IYr.forEach(t),rDo=r($z,"class method or the "),xie=s($z,"CODE",{});var jYr=n(xie);tDo=r(jYr,"from_config()"),jYr.forEach(t),aDo=r($z,`class
method.`),$z.forEach(t),sDo=i(Fl),aA=s(Fl,"P",{});var uxe=n(aA);nDo=r(uxe,"This class cannot be instantiated directly using "),kie=s(uxe,"CODE",{});var NYr=n(kie);lDo=r(NYr,"__init__()"),NYr.forEach(t),iDo=r(uxe," (throws an error)."),uxe.forEach(t),dDo=i(Fl),rt=s(Fl,"DIV",{class:!0});var Cl=n(rt);f(sA.$$.fragment,Cl),cDo=i(Cl),Rie=s(Cl,"P",{});var DYr=n(Rie);mDo=r(DYr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),DYr.forEach(t),fDo=i(Cl),zd=s(Cl,"P",{});var Iz=n(zd);gDo=r(Iz,`Note:
Loading a model from its configuration file does `),Sie=s(Iz,"STRONG",{});var qYr=n(Sie);hDo=r(qYr,"not"),qYr.forEach(t),uDo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pie=s(Iz,"CODE",{});var GYr=n(Pie);pDo=r(GYr,"from_pretrained()"),GYr.forEach(t),_Do=r(Iz,"to load the model weights."),Iz.forEach(t),bDo=i(Cl),$ie=s(Cl,"P",{});var OYr=n($ie);vDo=r(OYr,"Examples:"),OYr.forEach(t),TDo=i(Cl),f(nA.$$.fragment,Cl),Cl.forEach(t),FDo=i(Fl),He=s(Fl,"DIV",{class:!0});var Zt=n(He);f(lA.$$.fragment,Zt),CDo=i(Zt),Iie=s(Zt,"P",{});var XYr=n(Iie);MDo=r(XYr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),XYr.forEach(t),EDo=i(Zt),ts=s(Zt,"P",{});var A3=n(ts);yDo=r(A3,"The model class to instantiate is selected based on the "),jie=s(A3,"CODE",{});var zYr=n(jie);wDo=r(zYr,"model_type"),zYr.forEach(t),ADo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Nie=s(A3,"CODE",{});var VYr=n(Nie);LDo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),BDo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=s(A3,"CODE",{});var WYr=n(Die);xDo=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),kDo=r(A3,":"),A3.forEach(t),RDo=i(Zt),Vd=s(Zt,"UL",{});var jz=n(Vd);d1=s(jz,"LI",{});var Owe=n(d1);qie=s(Owe,"STRONG",{});var QYr=n(qie);SDo=r(QYr,"deit"),QYr.forEach(t),PDo=r(Owe," \u2014 "),AN=s(Owe,"A",{href:!0});var HYr=n(AN);$Do=r(HYr,"DeiTForMaskedImageModeling"),HYr.forEach(t),IDo=r(Owe," (DeiT model)"),Owe.forEach(t),jDo=i(jz),c1=s(jz,"LI",{});var Xwe=n(c1);Gie=s(Xwe,"STRONG",{});var UYr=n(Gie);NDo=r(UYr,"swin"),UYr.forEach(t),DDo=r(Xwe," \u2014 "),LN=s(Xwe,"A",{href:!0});var JYr=n(LN);qDo=r(JYr,"SwinForMaskedImageModeling"),JYr.forEach(t),GDo=r(Xwe," (Swin model)"),Xwe.forEach(t),ODo=i(jz),m1=s(jz,"LI",{});var zwe=n(m1);Oie=s(zwe,"STRONG",{});var YYr=n(Oie);XDo=r(YYr,"vit"),YYr.forEach(t),zDo=r(zwe," \u2014 "),BN=s(zwe,"A",{href:!0});var KYr=n(BN);VDo=r(KYr,"ViTForMaskedImageModeling"),KYr.forEach(t),WDo=r(zwe," (ViT model)"),zwe.forEach(t),jz.forEach(t),QDo=i(Zt),f1=s(Zt,"P",{});var Vwe=n(f1);HDo=r(Vwe,"The model is set in evaluation mode by default using "),Xie=s(Vwe,"CODE",{});var ZYr=n(Xie);UDo=r(ZYr,"model.eval()"),ZYr.forEach(t),JDo=r(Vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=s(Vwe,"CODE",{});var eKr=n(zie);YDo=r(eKr,"model.train()"),eKr.forEach(t),Vwe.forEach(t),KDo=i(Zt),Vie=s(Zt,"P",{});var oKr=n(Vie);ZDo=r(oKr,"Examples:"),oKr.forEach(t),eqo=i(Zt),f(iA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),i9e=i(d),Wd=s(d,"H2",{class:!0});var pxe=n(Wd);g1=s(pxe,"A",{id:!0,class:!0,href:!0});var rKr=n(g1);Wie=s(rKr,"SPAN",{});var tKr=n(Wie);f(dA.$$.fragment,tKr),tKr.forEach(t),rKr.forEach(t),oqo=i(pxe),Qie=s(pxe,"SPAN",{});var aKr=n(Qie);rqo=r(aKr,"AutoModelForObjectDetection"),aKr.forEach(t),pxe.forEach(t),d9e=i(d),cr=s(d,"DIV",{class:!0});var Ml=n(cr);f(cA.$$.fragment,Ml),tqo=i(Ml),Qd=s(Ml,"P",{});var Nz=n(Qd);aqo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hie=s(Nz,"CODE",{});var sKr=n(Hie);sqo=r(sKr,"from_pretrained()"),sKr.forEach(t),nqo=r(Nz,"class method or the "),Uie=s(Nz,"CODE",{});var nKr=n(Uie);lqo=r(nKr,"from_config()"),nKr.forEach(t),iqo=r(Nz,`class
method.`),Nz.forEach(t),dqo=i(Ml),mA=s(Ml,"P",{});var _xe=n(mA);cqo=r(_xe,"This class cannot be instantiated directly using "),Jie=s(_xe,"CODE",{});var lKr=n(Jie);mqo=r(lKr,"__init__()"),lKr.forEach(t),fqo=r(_xe," (throws an error)."),_xe.forEach(t),gqo=i(Ml),tt=s(Ml,"DIV",{class:!0});var El=n(tt);f(fA.$$.fragment,El),hqo=i(El),Yie=s(El,"P",{});var iKr=n(Yie);uqo=r(iKr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iKr.forEach(t),pqo=i(El),Hd=s(El,"P",{});var Dz=n(Hd);_qo=r(Dz,`Note:
Loading a model from its configuration file does `),Kie=s(Dz,"STRONG",{});var dKr=n(Kie);bqo=r(dKr,"not"),dKr.forEach(t),vqo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=s(Dz,"CODE",{});var cKr=n(Zie);Tqo=r(cKr,"from_pretrained()"),cKr.forEach(t),Fqo=r(Dz,"to load the model weights."),Dz.forEach(t),Cqo=i(El),ede=s(El,"P",{});var mKr=n(ede);Mqo=r(mKr,"Examples:"),mKr.forEach(t),Eqo=i(El),f(gA.$$.fragment,El),El.forEach(t),yqo=i(Ml),Ue=s(Ml,"DIV",{class:!0});var ea=n(Ue);f(hA.$$.fragment,ea),wqo=i(ea),ode=s(ea,"P",{});var fKr=n(ode);Aqo=r(fKr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fKr.forEach(t),Lqo=i(ea),as=s(ea,"P",{});var L3=n(as);Bqo=r(L3,"The model class to instantiate is selected based on the "),rde=s(L3,"CODE",{});var gKr=n(rde);xqo=r(gKr,"model_type"),gKr.forEach(t),kqo=r(L3,` property of the config object (either
passed as an argument or loaded from `),tde=s(L3,"CODE",{});var hKr=n(tde);Rqo=r(hKr,"pretrained_model_name_or_path"),hKr.forEach(t),Sqo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=s(L3,"CODE",{});var uKr=n(ade);Pqo=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),$qo=r(L3,":"),L3.forEach(t),Iqo=i(ea),sde=s(ea,"UL",{});var pKr=n(sde);h1=s(pKr,"LI",{});var Wwe=n(h1);nde=s(Wwe,"STRONG",{});var _Kr=n(nde);jqo=r(_Kr,"detr"),_Kr.forEach(t),Nqo=r(Wwe," \u2014 "),xN=s(Wwe,"A",{href:!0});var bKr=n(xN);Dqo=r(bKr,"DetrForObjectDetection"),bKr.forEach(t),qqo=r(Wwe," (DETR model)"),Wwe.forEach(t),pKr.forEach(t),Gqo=i(ea),u1=s(ea,"P",{});var Qwe=n(u1);Oqo=r(Qwe,"The model is set in evaluation mode by default using "),lde=s(Qwe,"CODE",{});var vKr=n(lde);Xqo=r(vKr,"model.eval()"),vKr.forEach(t),zqo=r(Qwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=s(Qwe,"CODE",{});var TKr=n(ide);Vqo=r(TKr,"model.train()"),TKr.forEach(t),Qwe.forEach(t),Wqo=i(ea),dde=s(ea,"P",{});var FKr=n(dde);Qqo=r(FKr,"Examples:"),FKr.forEach(t),Hqo=i(ea),f(uA.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),c9e=i(d),Ud=s(d,"H2",{class:!0});var bxe=n(Ud);p1=s(bxe,"A",{id:!0,class:!0,href:!0});var CKr=n(p1);cde=s(CKr,"SPAN",{});var MKr=n(cde);f(pA.$$.fragment,MKr),MKr.forEach(t),CKr.forEach(t),Uqo=i(bxe),mde=s(bxe,"SPAN",{});var EKr=n(mde);Jqo=r(EKr,"AutoModelForImageSegmentation"),EKr.forEach(t),bxe.forEach(t),m9e=i(d),mr=s(d,"DIV",{class:!0});var yl=n(mr);f(_A.$$.fragment,yl),Yqo=i(yl),Jd=s(yl,"P",{});var qz=n(Jd);Kqo=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fde=s(qz,"CODE",{});var yKr=n(fde);Zqo=r(yKr,"from_pretrained()"),yKr.forEach(t),eGo=r(qz,"class method or the "),gde=s(qz,"CODE",{});var wKr=n(gde);oGo=r(wKr,"from_config()"),wKr.forEach(t),rGo=r(qz,`class
method.`),qz.forEach(t),tGo=i(yl),bA=s(yl,"P",{});var vxe=n(bA);aGo=r(vxe,"This class cannot be instantiated directly using "),hde=s(vxe,"CODE",{});var AKr=n(hde);sGo=r(AKr,"__init__()"),AKr.forEach(t),nGo=r(vxe," (throws an error)."),vxe.forEach(t),lGo=i(yl),at=s(yl,"DIV",{class:!0});var wl=n(at);f(vA.$$.fragment,wl),iGo=i(wl),ude=s(wl,"P",{});var LKr=n(ude);dGo=r(LKr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),LKr.forEach(t),cGo=i(wl),Yd=s(wl,"P",{});var Gz=n(Yd);mGo=r(Gz,`Note:
Loading a model from its configuration file does `),pde=s(Gz,"STRONG",{});var BKr=n(pde);fGo=r(BKr,"not"),BKr.forEach(t),gGo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=s(Gz,"CODE",{});var xKr=n(_de);hGo=r(xKr,"from_pretrained()"),xKr.forEach(t),uGo=r(Gz,"to load the model weights."),Gz.forEach(t),pGo=i(wl),bde=s(wl,"P",{});var kKr=n(bde);_Go=r(kKr,"Examples:"),kKr.forEach(t),bGo=i(wl),f(TA.$$.fragment,wl),wl.forEach(t),vGo=i(yl),Je=s(yl,"DIV",{class:!0});var oa=n(Je);f(FA.$$.fragment,oa),TGo=i(oa),vde=s(oa,"P",{});var RKr=n(vde);FGo=r(RKr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RKr.forEach(t),CGo=i(oa),ss=s(oa,"P",{});var B3=n(ss);MGo=r(B3,"The model class to instantiate is selected based on the "),Tde=s(B3,"CODE",{});var SKr=n(Tde);EGo=r(SKr,"model_type"),SKr.forEach(t),yGo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Fde=s(B3,"CODE",{});var PKr=n(Fde);wGo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),AGo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=s(B3,"CODE",{});var $Kr=n(Cde);LGo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),BGo=r(B3,":"),B3.forEach(t),xGo=i(oa),Mde=s(oa,"UL",{});var IKr=n(Mde);_1=s(IKr,"LI",{});var Hwe=n(_1);Ede=s(Hwe,"STRONG",{});var jKr=n(Ede);kGo=r(jKr,"detr"),jKr.forEach(t),RGo=r(Hwe," \u2014 "),kN=s(Hwe,"A",{href:!0});var NKr=n(kN);SGo=r(NKr,"DetrForSegmentation"),NKr.forEach(t),PGo=r(Hwe," (DETR model)"),Hwe.forEach(t),IKr.forEach(t),$Go=i(oa),b1=s(oa,"P",{});var Uwe=n(b1);IGo=r(Uwe,"The model is set in evaluation mode by default using "),yde=s(Uwe,"CODE",{});var DKr=n(yde);jGo=r(DKr,"model.eval()"),DKr.forEach(t),NGo=r(Uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=s(Uwe,"CODE",{});var qKr=n(wde);DGo=r(qKr,"model.train()"),qKr.forEach(t),Uwe.forEach(t),qGo=i(oa),Ade=s(oa,"P",{});var GKr=n(Ade);GGo=r(GKr,"Examples:"),GKr.forEach(t),OGo=i(oa),f(CA.$$.fragment,oa),oa.forEach(t),yl.forEach(t),f9e=i(d),Kd=s(d,"H2",{class:!0});var Txe=n(Kd);v1=s(Txe,"A",{id:!0,class:!0,href:!0});var OKr=n(v1);Lde=s(OKr,"SPAN",{});var XKr=n(Lde);f(MA.$$.fragment,XKr),XKr.forEach(t),OKr.forEach(t),XGo=i(Txe),Bde=s(Txe,"SPAN",{});var zKr=n(Bde);zGo=r(zKr,"AutoModelForSemanticSegmentation"),zKr.forEach(t),Txe.forEach(t),g9e=i(d),fr=s(d,"DIV",{class:!0});var Al=n(fr);f(EA.$$.fragment,Al),VGo=i(Al),Zd=s(Al,"P",{});var Oz=n(Zd);WGo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xde=s(Oz,"CODE",{});var VKr=n(xde);QGo=r(VKr,"from_pretrained()"),VKr.forEach(t),HGo=r(Oz,"class method or the "),kde=s(Oz,"CODE",{});var WKr=n(kde);UGo=r(WKr,"from_config()"),WKr.forEach(t),JGo=r(Oz,`class
method.`),Oz.forEach(t),YGo=i(Al),yA=s(Al,"P",{});var Fxe=n(yA);KGo=r(Fxe,"This class cannot be instantiated directly using "),Rde=s(Fxe,"CODE",{});var QKr=n(Rde);ZGo=r(QKr,"__init__()"),QKr.forEach(t),eOo=r(Fxe," (throws an error)."),Fxe.forEach(t),oOo=i(Al),st=s(Al,"DIV",{class:!0});var Ll=n(st);f(wA.$$.fragment,Ll),rOo=i(Ll),Sde=s(Ll,"P",{});var HKr=n(Sde);tOo=r(HKr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HKr.forEach(t),aOo=i(Ll),ec=s(Ll,"P",{});var Xz=n(ec);sOo=r(Xz,`Note:
Loading a model from its configuration file does `),Pde=s(Xz,"STRONG",{});var UKr=n(Pde);nOo=r(UKr,"not"),UKr.forEach(t),lOo=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=s(Xz,"CODE",{});var JKr=n($de);iOo=r(JKr,"from_pretrained()"),JKr.forEach(t),dOo=r(Xz,"to load the model weights."),Xz.forEach(t),cOo=i(Ll),Ide=s(Ll,"P",{});var YKr=n(Ide);mOo=r(YKr,"Examples:"),YKr.forEach(t),fOo=i(Ll),f(AA.$$.fragment,Ll),Ll.forEach(t),gOo=i(Al),Ye=s(Al,"DIV",{class:!0});var ra=n(Ye);f(LA.$$.fragment,ra),hOo=i(ra),jde=s(ra,"P",{});var KKr=n(jde);uOo=r(KKr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),KKr.forEach(t),pOo=i(ra),ns=s(ra,"P",{});var x3=n(ns);_Oo=r(x3,"The model class to instantiate is selected based on the "),Nde=s(x3,"CODE",{});var ZKr=n(Nde);bOo=r(ZKr,"model_type"),ZKr.forEach(t),vOo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Dde=s(x3,"CODE",{});var eZr=n(Dde);TOo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),FOo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=s(x3,"CODE",{});var oZr=n(qde);COo=r(oZr,"pretrained_model_name_or_path"),oZr.forEach(t),MOo=r(x3,":"),x3.forEach(t),EOo=i(ra),BA=s(ra,"UL",{});var Cxe=n(BA);T1=s(Cxe,"LI",{});var Jwe=n(T1);Gde=s(Jwe,"STRONG",{});var rZr=n(Gde);yOo=r(rZr,"beit"),rZr.forEach(t),wOo=r(Jwe," \u2014 "),RN=s(Jwe,"A",{href:!0});var tZr=n(RN);AOo=r(tZr,"BeitForSemanticSegmentation"),tZr.forEach(t),LOo=r(Jwe," (BEiT model)"),Jwe.forEach(t),BOo=i(Cxe),F1=s(Cxe,"LI",{});var Ywe=n(F1);Ode=s(Ywe,"STRONG",{});var aZr=n(Ode);xOo=r(aZr,"segformer"),aZr.forEach(t),kOo=r(Ywe," \u2014 "),SN=s(Ywe,"A",{href:!0});var sZr=n(SN);ROo=r(sZr,"SegformerForSemanticSegmentation"),sZr.forEach(t),SOo=r(Ywe," (SegFormer model)"),Ywe.forEach(t),Cxe.forEach(t),POo=i(ra),C1=s(ra,"P",{});var Kwe=n(C1);$Oo=r(Kwe,"The model is set in evaluation mode by default using "),Xde=s(Kwe,"CODE",{});var nZr=n(Xde);IOo=r(nZr,"model.eval()"),nZr.forEach(t),jOo=r(Kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=s(Kwe,"CODE",{});var lZr=n(zde);NOo=r(lZr,"model.train()"),lZr.forEach(t),Kwe.forEach(t),DOo=i(ra),Vde=s(ra,"P",{});var iZr=n(Vde);qOo=r(iZr,"Examples:"),iZr.forEach(t),GOo=i(ra),f(xA.$$.fragment,ra),ra.forEach(t),Al.forEach(t),h9e=i(d),oc=s(d,"H2",{class:!0});var Mxe=n(oc);M1=s(Mxe,"A",{id:!0,class:!0,href:!0});var dZr=n(M1);Wde=s(dZr,"SPAN",{});var cZr=n(Wde);f(kA.$$.fragment,cZr),cZr.forEach(t),dZr.forEach(t),OOo=i(Mxe),Qde=s(Mxe,"SPAN",{});var mZr=n(Qde);XOo=r(mZr,"TFAutoModel"),mZr.forEach(t),Mxe.forEach(t),u9e=i(d),gr=s(d,"DIV",{class:!0});var Bl=n(gr);f(RA.$$.fragment,Bl),zOo=i(Bl),rc=s(Bl,"P",{});var zz=n(rc);VOo=r(zz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hde=s(zz,"CODE",{});var fZr=n(Hde);WOo=r(fZr,"from_pretrained()"),fZr.forEach(t),QOo=r(zz,"class method or the "),Ude=s(zz,"CODE",{});var gZr=n(Ude);HOo=r(gZr,"from_config()"),gZr.forEach(t),UOo=r(zz,`class
method.`),zz.forEach(t),JOo=i(Bl),SA=s(Bl,"P",{});var Exe=n(SA);YOo=r(Exe,"This class cannot be instantiated directly using "),Jde=s(Exe,"CODE",{});var hZr=n(Jde);KOo=r(hZr,"__init__()"),hZr.forEach(t),ZOo=r(Exe," (throws an error)."),Exe.forEach(t),eXo=i(Bl),nt=s(Bl,"DIV",{class:!0});var xl=n(nt);f(PA.$$.fragment,xl),oXo=i(xl),Yde=s(xl,"P",{});var uZr=n(Yde);rXo=r(uZr,"Instantiates one of the base model classes of the library from a configuration."),uZr.forEach(t),tXo=i(xl),tc=s(xl,"P",{});var Vz=n(tc);aXo=r(Vz,`Note:
Loading a model from its configuration file does `),Kde=s(Vz,"STRONG",{});var pZr=n(Kde);sXo=r(pZr,"not"),pZr.forEach(t),nXo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=s(Vz,"CODE",{});var _Zr=n(Zde);lXo=r(_Zr,"from_pretrained()"),_Zr.forEach(t),iXo=r(Vz,"to load the model weights."),Vz.forEach(t),dXo=i(xl),ece=s(xl,"P",{});var bZr=n(ece);cXo=r(bZr,"Examples:"),bZr.forEach(t),mXo=i(xl),f($A.$$.fragment,xl),xl.forEach(t),fXo=i(Bl),go=s(Bl,"DIV",{class:!0});var ca=n(go);f(IA.$$.fragment,ca),gXo=i(ca),oce=s(ca,"P",{});var vZr=n(oce);hXo=r(vZr,"Instantiate one of the base model classes of the library from a pretrained model."),vZr.forEach(t),uXo=i(ca),ls=s(ca,"P",{});var k3=n(ls);pXo=r(k3,"The model class to instantiate is selected based on the "),rce=s(k3,"CODE",{});var TZr=n(rce);_Xo=r(TZr,"model_type"),TZr.forEach(t),bXo=r(k3,` property of the config object (either
passed as an argument or loaded from `),tce=s(k3,"CODE",{});var FZr=n(tce);vXo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),TXo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=s(k3,"CODE",{});var CZr=n(ace);FXo=r(CZr,"pretrained_model_name_or_path"),CZr.forEach(t),CXo=r(k3,":"),k3.forEach(t),MXo=i(ca),B=s(ca,"UL",{});var x=n(B);E1=s(x,"LI",{});var Zwe=n(E1);sce=s(Zwe,"STRONG",{});var MZr=n(sce);EXo=r(MZr,"albert"),MZr.forEach(t),yXo=r(Zwe," \u2014 "),PN=s(Zwe,"A",{href:!0});var EZr=n(PN);wXo=r(EZr,"TFAlbertModel"),EZr.forEach(t),AXo=r(Zwe," (ALBERT model)"),Zwe.forEach(t),LXo=i(x),y1=s(x,"LI",{});var eAe=n(y1);nce=s(eAe,"STRONG",{});var yZr=n(nce);BXo=r(yZr,"bart"),yZr.forEach(t),xXo=r(eAe," \u2014 "),$N=s(eAe,"A",{href:!0});var wZr=n($N);kXo=r(wZr,"TFBartModel"),wZr.forEach(t),RXo=r(eAe," (BART model)"),eAe.forEach(t),SXo=i(x),w1=s(x,"LI",{});var oAe=n(w1);lce=s(oAe,"STRONG",{});var AZr=n(lce);PXo=r(AZr,"bert"),AZr.forEach(t),$Xo=r(oAe," \u2014 "),IN=s(oAe,"A",{href:!0});var LZr=n(IN);IXo=r(LZr,"TFBertModel"),LZr.forEach(t),jXo=r(oAe," (BERT model)"),oAe.forEach(t),NXo=i(x),A1=s(x,"LI",{});var rAe=n(A1);ice=s(rAe,"STRONG",{});var BZr=n(ice);DXo=r(BZr,"blenderbot"),BZr.forEach(t),qXo=r(rAe," \u2014 "),jN=s(rAe,"A",{href:!0});var xZr=n(jN);GXo=r(xZr,"TFBlenderbotModel"),xZr.forEach(t),OXo=r(rAe," (Blenderbot model)"),rAe.forEach(t),XXo=i(x),L1=s(x,"LI",{});var tAe=n(L1);dce=s(tAe,"STRONG",{});var kZr=n(dce);zXo=r(kZr,"blenderbot-small"),kZr.forEach(t),VXo=r(tAe," \u2014 "),NN=s(tAe,"A",{href:!0});var RZr=n(NN);WXo=r(RZr,"TFBlenderbotSmallModel"),RZr.forEach(t),QXo=r(tAe," (BlenderbotSmall model)"),tAe.forEach(t),HXo=i(x),B1=s(x,"LI",{});var aAe=n(B1);cce=s(aAe,"STRONG",{});var SZr=n(cce);UXo=r(SZr,"camembert"),SZr.forEach(t),JXo=r(aAe," \u2014 "),DN=s(aAe,"A",{href:!0});var PZr=n(DN);YXo=r(PZr,"TFCamembertModel"),PZr.forEach(t),KXo=r(aAe," (CamemBERT model)"),aAe.forEach(t),ZXo=i(x),x1=s(x,"LI",{});var sAe=n(x1);mce=s(sAe,"STRONG",{});var $Zr=n(mce);ezo=r($Zr,"clip"),$Zr.forEach(t),ozo=r(sAe," \u2014 "),qN=s(sAe,"A",{href:!0});var IZr=n(qN);rzo=r(IZr,"TFCLIPModel"),IZr.forEach(t),tzo=r(sAe," (CLIP model)"),sAe.forEach(t),azo=i(x),k1=s(x,"LI",{});var nAe=n(k1);fce=s(nAe,"STRONG",{});var jZr=n(fce);szo=r(jZr,"convbert"),jZr.forEach(t),nzo=r(nAe," \u2014 "),GN=s(nAe,"A",{href:!0});var NZr=n(GN);lzo=r(NZr,"TFConvBertModel"),NZr.forEach(t),izo=r(nAe," (ConvBERT model)"),nAe.forEach(t),dzo=i(x),R1=s(x,"LI",{});var lAe=n(R1);gce=s(lAe,"STRONG",{});var DZr=n(gce);czo=r(DZr,"convnext"),DZr.forEach(t),mzo=r(lAe," \u2014 "),ON=s(lAe,"A",{href:!0});var qZr=n(ON);fzo=r(qZr,"TFConvNextModel"),qZr.forEach(t),gzo=r(lAe," (ConvNext model)"),lAe.forEach(t),hzo=i(x),S1=s(x,"LI",{});var iAe=n(S1);hce=s(iAe,"STRONG",{});var GZr=n(hce);uzo=r(GZr,"ctrl"),GZr.forEach(t),pzo=r(iAe," \u2014 "),XN=s(iAe,"A",{href:!0});var OZr=n(XN);_zo=r(OZr,"TFCTRLModel"),OZr.forEach(t),bzo=r(iAe," (CTRL model)"),iAe.forEach(t),vzo=i(x),P1=s(x,"LI",{});var dAe=n(P1);uce=s(dAe,"STRONG",{});var XZr=n(uce);Tzo=r(XZr,"deberta"),XZr.forEach(t),Fzo=r(dAe," \u2014 "),zN=s(dAe,"A",{href:!0});var zZr=n(zN);Czo=r(zZr,"TFDebertaModel"),zZr.forEach(t),Mzo=r(dAe," (DeBERTa model)"),dAe.forEach(t),Ezo=i(x),$1=s(x,"LI",{});var cAe=n($1);pce=s(cAe,"STRONG",{});var VZr=n(pce);yzo=r(VZr,"deberta-v2"),VZr.forEach(t),wzo=r(cAe," \u2014 "),VN=s(cAe,"A",{href:!0});var WZr=n(VN);Azo=r(WZr,"TFDebertaV2Model"),WZr.forEach(t),Lzo=r(cAe," (DeBERTa-v2 model)"),cAe.forEach(t),Bzo=i(x),I1=s(x,"LI",{});var mAe=n(I1);_ce=s(mAe,"STRONG",{});var QZr=n(_ce);xzo=r(QZr,"distilbert"),QZr.forEach(t),kzo=r(mAe," \u2014 "),WN=s(mAe,"A",{href:!0});var HZr=n(WN);Rzo=r(HZr,"TFDistilBertModel"),HZr.forEach(t),Szo=r(mAe," (DistilBERT model)"),mAe.forEach(t),Pzo=i(x),j1=s(x,"LI",{});var fAe=n(j1);bce=s(fAe,"STRONG",{});var UZr=n(bce);$zo=r(UZr,"dpr"),UZr.forEach(t),Izo=r(fAe," \u2014 "),QN=s(fAe,"A",{href:!0});var JZr=n(QN);jzo=r(JZr,"TFDPRQuestionEncoder"),JZr.forEach(t),Nzo=r(fAe," (DPR model)"),fAe.forEach(t),Dzo=i(x),N1=s(x,"LI",{});var gAe=n(N1);vce=s(gAe,"STRONG",{});var YZr=n(vce);qzo=r(YZr,"electra"),YZr.forEach(t),Gzo=r(gAe," \u2014 "),HN=s(gAe,"A",{href:!0});var KZr=n(HN);Ozo=r(KZr,"TFElectraModel"),KZr.forEach(t),Xzo=r(gAe," (ELECTRA model)"),gAe.forEach(t),zzo=i(x),D1=s(x,"LI",{});var hAe=n(D1);Tce=s(hAe,"STRONG",{});var ZZr=n(Tce);Vzo=r(ZZr,"flaubert"),ZZr.forEach(t),Wzo=r(hAe," \u2014 "),UN=s(hAe,"A",{href:!0});var eet=n(UN);Qzo=r(eet,"TFFlaubertModel"),eet.forEach(t),Hzo=r(hAe," (FlauBERT model)"),hAe.forEach(t),Uzo=i(x),Sn=s(x,"LI",{});var G7=n(Sn);Fce=s(G7,"STRONG",{});var oet=n(Fce);Jzo=r(oet,"funnel"),oet.forEach(t),Yzo=r(G7," \u2014 "),JN=s(G7,"A",{href:!0});var ret=n(JN);Kzo=r(ret,"TFFunnelModel"),ret.forEach(t),Zzo=r(G7," or "),YN=s(G7,"A",{href:!0});var tet=n(YN);eVo=r(tet,"TFFunnelBaseModel"),tet.forEach(t),oVo=r(G7," (Funnel Transformer model)"),G7.forEach(t),rVo=i(x),q1=s(x,"LI",{});var uAe=n(q1);Cce=s(uAe,"STRONG",{});var aet=n(Cce);tVo=r(aet,"gpt2"),aet.forEach(t),aVo=r(uAe," \u2014 "),KN=s(uAe,"A",{href:!0});var set=n(KN);sVo=r(set,"TFGPT2Model"),set.forEach(t),nVo=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),lVo=i(x),G1=s(x,"LI",{});var pAe=n(G1);Mce=s(pAe,"STRONG",{});var net=n(Mce);iVo=r(net,"hubert"),net.forEach(t),dVo=r(pAe," \u2014 "),ZN=s(pAe,"A",{href:!0});var iet=n(ZN);cVo=r(iet,"TFHubertModel"),iet.forEach(t),mVo=r(pAe," (Hubert model)"),pAe.forEach(t),fVo=i(x),O1=s(x,"LI",{});var _Ae=n(O1);Ece=s(_Ae,"STRONG",{});var det=n(Ece);gVo=r(det,"layoutlm"),det.forEach(t),hVo=r(_Ae," \u2014 "),eD=s(_Ae,"A",{href:!0});var cet=n(eD);uVo=r(cet,"TFLayoutLMModel"),cet.forEach(t),pVo=r(_Ae," (LayoutLM model)"),_Ae.forEach(t),_Vo=i(x),X1=s(x,"LI",{});var bAe=n(X1);yce=s(bAe,"STRONG",{});var met=n(yce);bVo=r(met,"led"),met.forEach(t),vVo=r(bAe," \u2014 "),oD=s(bAe,"A",{href:!0});var fet=n(oD);TVo=r(fet,"TFLEDModel"),fet.forEach(t),FVo=r(bAe," (LED model)"),bAe.forEach(t),CVo=i(x),z1=s(x,"LI",{});var vAe=n(z1);wce=s(vAe,"STRONG",{});var get=n(wce);MVo=r(get,"longformer"),get.forEach(t),EVo=r(vAe," \u2014 "),rD=s(vAe,"A",{href:!0});var het=n(rD);yVo=r(het,"TFLongformerModel"),het.forEach(t),wVo=r(vAe," (Longformer model)"),vAe.forEach(t),AVo=i(x),V1=s(x,"LI",{});var TAe=n(V1);Ace=s(TAe,"STRONG",{});var uet=n(Ace);LVo=r(uet,"lxmert"),uet.forEach(t),BVo=r(TAe," \u2014 "),tD=s(TAe,"A",{href:!0});var pet=n(tD);xVo=r(pet,"TFLxmertModel"),pet.forEach(t),kVo=r(TAe," (LXMERT model)"),TAe.forEach(t),RVo=i(x),W1=s(x,"LI",{});var FAe=n(W1);Lce=s(FAe,"STRONG",{});var _et=n(Lce);SVo=r(_et,"marian"),_et.forEach(t),PVo=r(FAe," \u2014 "),aD=s(FAe,"A",{href:!0});var bet=n(aD);$Vo=r(bet,"TFMarianModel"),bet.forEach(t),IVo=r(FAe," (Marian model)"),FAe.forEach(t),jVo=i(x),Q1=s(x,"LI",{});var CAe=n(Q1);Bce=s(CAe,"STRONG",{});var vet=n(Bce);NVo=r(vet,"mbart"),vet.forEach(t),DVo=r(CAe," \u2014 "),sD=s(CAe,"A",{href:!0});var Tet=n(sD);qVo=r(Tet,"TFMBartModel"),Tet.forEach(t),GVo=r(CAe," (mBART model)"),CAe.forEach(t),OVo=i(x),H1=s(x,"LI",{});var MAe=n(H1);xce=s(MAe,"STRONG",{});var Fet=n(xce);XVo=r(Fet,"mobilebert"),Fet.forEach(t),zVo=r(MAe," \u2014 "),nD=s(MAe,"A",{href:!0});var Cet=n(nD);VVo=r(Cet,"TFMobileBertModel"),Cet.forEach(t),WVo=r(MAe," (MobileBERT model)"),MAe.forEach(t),QVo=i(x),U1=s(x,"LI",{});var EAe=n(U1);kce=s(EAe,"STRONG",{});var Met=n(kce);HVo=r(Met,"mpnet"),Met.forEach(t),UVo=r(EAe," \u2014 "),lD=s(EAe,"A",{href:!0});var Eet=n(lD);JVo=r(Eet,"TFMPNetModel"),Eet.forEach(t),YVo=r(EAe," (MPNet model)"),EAe.forEach(t),KVo=i(x),J1=s(x,"LI",{});var yAe=n(J1);Rce=s(yAe,"STRONG",{});var yet=n(Rce);ZVo=r(yet,"mt5"),yet.forEach(t),eWo=r(yAe," \u2014 "),iD=s(yAe,"A",{href:!0});var wet=n(iD);oWo=r(wet,"TFMT5Model"),wet.forEach(t),rWo=r(yAe," (mT5 model)"),yAe.forEach(t),tWo=i(x),Y1=s(x,"LI",{});var wAe=n(Y1);Sce=s(wAe,"STRONG",{});var Aet=n(Sce);aWo=r(Aet,"openai-gpt"),Aet.forEach(t),sWo=r(wAe," \u2014 "),dD=s(wAe,"A",{href:!0});var Let=n(dD);nWo=r(Let,"TFOpenAIGPTModel"),Let.forEach(t),lWo=r(wAe," (OpenAI GPT model)"),wAe.forEach(t),iWo=i(x),K1=s(x,"LI",{});var AAe=n(K1);Pce=s(AAe,"STRONG",{});var Bet=n(Pce);dWo=r(Bet,"pegasus"),Bet.forEach(t),cWo=r(AAe," \u2014 "),cD=s(AAe,"A",{href:!0});var xet=n(cD);mWo=r(xet,"TFPegasusModel"),xet.forEach(t),fWo=r(AAe," (Pegasus model)"),AAe.forEach(t),gWo=i(x),Z1=s(x,"LI",{});var LAe=n(Z1);$ce=s(LAe,"STRONG",{});var ket=n($ce);hWo=r(ket,"rembert"),ket.forEach(t),uWo=r(LAe," \u2014 "),mD=s(LAe,"A",{href:!0});var Ret=n(mD);pWo=r(Ret,"TFRemBertModel"),Ret.forEach(t),_Wo=r(LAe," (RemBERT model)"),LAe.forEach(t),bWo=i(x),eF=s(x,"LI",{});var BAe=n(eF);Ice=s(BAe,"STRONG",{});var Set=n(Ice);vWo=r(Set,"roberta"),Set.forEach(t),TWo=r(BAe," \u2014 "),fD=s(BAe,"A",{href:!0});var Pet=n(fD);FWo=r(Pet,"TFRobertaModel"),Pet.forEach(t),CWo=r(BAe," (RoBERTa model)"),BAe.forEach(t),MWo=i(x),oF=s(x,"LI",{});var xAe=n(oF);jce=s(xAe,"STRONG",{});var $et=n(jce);EWo=r($et,"roformer"),$et.forEach(t),yWo=r(xAe," \u2014 "),gD=s(xAe,"A",{href:!0});var Iet=n(gD);wWo=r(Iet,"TFRoFormerModel"),Iet.forEach(t),AWo=r(xAe," (RoFormer model)"),xAe.forEach(t),LWo=i(x),rF=s(x,"LI",{});var kAe=n(rF);Nce=s(kAe,"STRONG",{});var jet=n(Nce);BWo=r(jet,"speech_to_text"),jet.forEach(t),xWo=r(kAe," \u2014 "),hD=s(kAe,"A",{href:!0});var Net=n(hD);kWo=r(Net,"TFSpeech2TextModel"),Net.forEach(t),RWo=r(kAe," (Speech2Text model)"),kAe.forEach(t),SWo=i(x),tF=s(x,"LI",{});var RAe=n(tF);Dce=s(RAe,"STRONG",{});var Det=n(Dce);PWo=r(Det,"t5"),Det.forEach(t),$Wo=r(RAe," \u2014 "),uD=s(RAe,"A",{href:!0});var qet=n(uD);IWo=r(qet,"TFT5Model"),qet.forEach(t),jWo=r(RAe," (T5 model)"),RAe.forEach(t),NWo=i(x),aF=s(x,"LI",{});var SAe=n(aF);qce=s(SAe,"STRONG",{});var Get=n(qce);DWo=r(Get,"tapas"),Get.forEach(t),qWo=r(SAe," \u2014 "),pD=s(SAe,"A",{href:!0});var Oet=n(pD);GWo=r(Oet,"TFTapasModel"),Oet.forEach(t),OWo=r(SAe," (TAPAS model)"),SAe.forEach(t),XWo=i(x),sF=s(x,"LI",{});var PAe=n(sF);Gce=s(PAe,"STRONG",{});var Xet=n(Gce);zWo=r(Xet,"transfo-xl"),Xet.forEach(t),VWo=r(PAe," \u2014 "),_D=s(PAe,"A",{href:!0});var zet=n(_D);WWo=r(zet,"TFTransfoXLModel"),zet.forEach(t),QWo=r(PAe," (Transformer-XL model)"),PAe.forEach(t),HWo=i(x),nF=s(x,"LI",{});var $Ae=n(nF);Oce=s($Ae,"STRONG",{});var Vet=n(Oce);UWo=r(Vet,"vit"),Vet.forEach(t),JWo=r($Ae," \u2014 "),bD=s($Ae,"A",{href:!0});var Wet=n(bD);YWo=r(Wet,"TFViTModel"),Wet.forEach(t),KWo=r($Ae," (ViT model)"),$Ae.forEach(t),ZWo=i(x),lF=s(x,"LI",{});var IAe=n(lF);Xce=s(IAe,"STRONG",{});var Qet=n(Xce);eQo=r(Qet,"wav2vec2"),Qet.forEach(t),oQo=r(IAe," \u2014 "),vD=s(IAe,"A",{href:!0});var Het=n(vD);rQo=r(Het,"TFWav2Vec2Model"),Het.forEach(t),tQo=r(IAe," (Wav2Vec2 model)"),IAe.forEach(t),aQo=i(x),iF=s(x,"LI",{});var jAe=n(iF);zce=s(jAe,"STRONG",{});var Uet=n(zce);sQo=r(Uet,"xlm"),Uet.forEach(t),nQo=r(jAe," \u2014 "),TD=s(jAe,"A",{href:!0});var Jet=n(TD);lQo=r(Jet,"TFXLMModel"),Jet.forEach(t),iQo=r(jAe," (XLM model)"),jAe.forEach(t),dQo=i(x),dF=s(x,"LI",{});var NAe=n(dF);Vce=s(NAe,"STRONG",{});var Yet=n(Vce);cQo=r(Yet,"xlm-roberta"),Yet.forEach(t),mQo=r(NAe," \u2014 "),FD=s(NAe,"A",{href:!0});var Ket=n(FD);fQo=r(Ket,"TFXLMRobertaModel"),Ket.forEach(t),gQo=r(NAe," (XLM-RoBERTa model)"),NAe.forEach(t),hQo=i(x),cF=s(x,"LI",{});var DAe=n(cF);Wce=s(DAe,"STRONG",{});var Zet=n(Wce);uQo=r(Zet,"xlnet"),Zet.forEach(t),pQo=r(DAe," \u2014 "),CD=s(DAe,"A",{href:!0});var eot=n(CD);_Qo=r(eot,"TFXLNetModel"),eot.forEach(t),bQo=r(DAe," (XLNet model)"),DAe.forEach(t),x.forEach(t),vQo=i(ca),Qce=s(ca,"P",{});var oot=n(Qce);TQo=r(oot,"Examples:"),oot.forEach(t),FQo=i(ca),f(jA.$$.fragment,ca),ca.forEach(t),Bl.forEach(t),p9e=i(d),ac=s(d,"H2",{class:!0});var yxe=n(ac);mF=s(yxe,"A",{id:!0,class:!0,href:!0});var rot=n(mF);Hce=s(rot,"SPAN",{});var tot=n(Hce);f(NA.$$.fragment,tot),tot.forEach(t),rot.forEach(t),CQo=i(yxe),Uce=s(yxe,"SPAN",{});var aot=n(Uce);MQo=r(aot,"TFAutoModelForPreTraining"),aot.forEach(t),yxe.forEach(t),_9e=i(d),hr=s(d,"DIV",{class:!0});var kl=n(hr);f(DA.$$.fragment,kl),EQo=i(kl),sc=s(kl,"P",{});var Wz=n(sc);yQo=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jce=s(Wz,"CODE",{});var sot=n(Jce);wQo=r(sot,"from_pretrained()"),sot.forEach(t),AQo=r(Wz,"class method or the "),Yce=s(Wz,"CODE",{});var not=n(Yce);LQo=r(not,"from_config()"),not.forEach(t),BQo=r(Wz,`class
method.`),Wz.forEach(t),xQo=i(kl),qA=s(kl,"P",{});var wxe=n(qA);kQo=r(wxe,"This class cannot be instantiated directly using "),Kce=s(wxe,"CODE",{});var lot=n(Kce);RQo=r(lot,"__init__()"),lot.forEach(t),SQo=r(wxe," (throws an error)."),wxe.forEach(t),PQo=i(kl),lt=s(kl,"DIV",{class:!0});var Rl=n(lt);f(GA.$$.fragment,Rl),$Qo=i(Rl),Zce=s(Rl,"P",{});var iot=n(Zce);IQo=r(iot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iot.forEach(t),jQo=i(Rl),nc=s(Rl,"P",{});var Qz=n(nc);NQo=r(Qz,`Note:
Loading a model from its configuration file does `),eme=s(Qz,"STRONG",{});var dot=n(eme);DQo=r(dot,"not"),dot.forEach(t),qQo=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=s(Qz,"CODE",{});var cot=n(ome);GQo=r(cot,"from_pretrained()"),cot.forEach(t),OQo=r(Qz,"to load the model weights."),Qz.forEach(t),XQo=i(Rl),rme=s(Rl,"P",{});var mot=n(rme);zQo=r(mot,"Examples:"),mot.forEach(t),VQo=i(Rl),f(OA.$$.fragment,Rl),Rl.forEach(t),WQo=i(kl),ho=s(kl,"DIV",{class:!0});var ma=n(ho);f(XA.$$.fragment,ma),QQo=i(ma),tme=s(ma,"P",{});var fot=n(tme);HQo=r(fot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fot.forEach(t),UQo=i(ma),is=s(ma,"P",{});var R3=n(is);JQo=r(R3,"The model class to instantiate is selected based on the "),ame=s(R3,"CODE",{});var got=n(ame);YQo=r(got,"model_type"),got.forEach(t),KQo=r(R3,` property of the config object (either
passed as an argument or loaded from `),sme=s(R3,"CODE",{});var hot=n(sme);ZQo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),eHo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=s(R3,"CODE",{});var uot=n(nme);oHo=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),rHo=r(R3,":"),R3.forEach(t),tHo=i(ma),H=s(ma,"UL",{});var U=n(H);fF=s(U,"LI",{});var qAe=n(fF);lme=s(qAe,"STRONG",{});var pot=n(lme);aHo=r(pot,"albert"),pot.forEach(t),sHo=r(qAe," \u2014 "),MD=s(qAe,"A",{href:!0});var _ot=n(MD);nHo=r(_ot,"TFAlbertForPreTraining"),_ot.forEach(t),lHo=r(qAe," (ALBERT model)"),qAe.forEach(t),iHo=i(U),gF=s(U,"LI",{});var GAe=n(gF);ime=s(GAe,"STRONG",{});var bot=n(ime);dHo=r(bot,"bart"),bot.forEach(t),cHo=r(GAe," \u2014 "),ED=s(GAe,"A",{href:!0});var vot=n(ED);mHo=r(vot,"TFBartForConditionalGeneration"),vot.forEach(t),fHo=r(GAe," (BART model)"),GAe.forEach(t),gHo=i(U),hF=s(U,"LI",{});var OAe=n(hF);dme=s(OAe,"STRONG",{});var Tot=n(dme);hHo=r(Tot,"bert"),Tot.forEach(t),uHo=r(OAe," \u2014 "),yD=s(OAe,"A",{href:!0});var Fot=n(yD);pHo=r(Fot,"TFBertForPreTraining"),Fot.forEach(t),_Ho=r(OAe," (BERT model)"),OAe.forEach(t),bHo=i(U),uF=s(U,"LI",{});var XAe=n(uF);cme=s(XAe,"STRONG",{});var Cot=n(cme);vHo=r(Cot,"camembert"),Cot.forEach(t),THo=r(XAe," \u2014 "),wD=s(XAe,"A",{href:!0});var Mot=n(wD);FHo=r(Mot,"TFCamembertForMaskedLM"),Mot.forEach(t),CHo=r(XAe," (CamemBERT model)"),XAe.forEach(t),MHo=i(U),pF=s(U,"LI",{});var zAe=n(pF);mme=s(zAe,"STRONG",{});var Eot=n(mme);EHo=r(Eot,"ctrl"),Eot.forEach(t),yHo=r(zAe," \u2014 "),AD=s(zAe,"A",{href:!0});var yot=n(AD);wHo=r(yot,"TFCTRLLMHeadModel"),yot.forEach(t),AHo=r(zAe," (CTRL model)"),zAe.forEach(t),LHo=i(U),_F=s(U,"LI",{});var VAe=n(_F);fme=s(VAe,"STRONG",{});var wot=n(fme);BHo=r(wot,"distilbert"),wot.forEach(t),xHo=r(VAe," \u2014 "),LD=s(VAe,"A",{href:!0});var Aot=n(LD);kHo=r(Aot,"TFDistilBertForMaskedLM"),Aot.forEach(t),RHo=r(VAe," (DistilBERT model)"),VAe.forEach(t),SHo=i(U),bF=s(U,"LI",{});var WAe=n(bF);gme=s(WAe,"STRONG",{});var Lot=n(gme);PHo=r(Lot,"electra"),Lot.forEach(t),$Ho=r(WAe," \u2014 "),BD=s(WAe,"A",{href:!0});var Bot=n(BD);IHo=r(Bot,"TFElectraForPreTraining"),Bot.forEach(t),jHo=r(WAe," (ELECTRA model)"),WAe.forEach(t),NHo=i(U),vF=s(U,"LI",{});var QAe=n(vF);hme=s(QAe,"STRONG",{});var xot=n(hme);DHo=r(xot,"flaubert"),xot.forEach(t),qHo=r(QAe," \u2014 "),xD=s(QAe,"A",{href:!0});var kot=n(xD);GHo=r(kot,"TFFlaubertWithLMHeadModel"),kot.forEach(t),OHo=r(QAe," (FlauBERT model)"),QAe.forEach(t),XHo=i(U),TF=s(U,"LI",{});var HAe=n(TF);ume=s(HAe,"STRONG",{});var Rot=n(ume);zHo=r(Rot,"funnel"),Rot.forEach(t),VHo=r(HAe," \u2014 "),kD=s(HAe,"A",{href:!0});var Sot=n(kD);WHo=r(Sot,"TFFunnelForPreTraining"),Sot.forEach(t),QHo=r(HAe," (Funnel Transformer model)"),HAe.forEach(t),HHo=i(U),FF=s(U,"LI",{});var UAe=n(FF);pme=s(UAe,"STRONG",{});var Pot=n(pme);UHo=r(Pot,"gpt2"),Pot.forEach(t),JHo=r(UAe," \u2014 "),RD=s(UAe,"A",{href:!0});var $ot=n(RD);YHo=r($ot,"TFGPT2LMHeadModel"),$ot.forEach(t),KHo=r(UAe," (OpenAI GPT-2 model)"),UAe.forEach(t),ZHo=i(U),CF=s(U,"LI",{});var JAe=n(CF);_me=s(JAe,"STRONG",{});var Iot=n(_me);eUo=r(Iot,"layoutlm"),Iot.forEach(t),oUo=r(JAe," \u2014 "),SD=s(JAe,"A",{href:!0});var jot=n(SD);rUo=r(jot,"TFLayoutLMForMaskedLM"),jot.forEach(t),tUo=r(JAe," (LayoutLM model)"),JAe.forEach(t),aUo=i(U),MF=s(U,"LI",{});var YAe=n(MF);bme=s(YAe,"STRONG",{});var Not=n(bme);sUo=r(Not,"lxmert"),Not.forEach(t),nUo=r(YAe," \u2014 "),PD=s(YAe,"A",{href:!0});var Dot=n(PD);lUo=r(Dot,"TFLxmertForPreTraining"),Dot.forEach(t),iUo=r(YAe," (LXMERT model)"),YAe.forEach(t),dUo=i(U),EF=s(U,"LI",{});var KAe=n(EF);vme=s(KAe,"STRONG",{});var qot=n(vme);cUo=r(qot,"mobilebert"),qot.forEach(t),mUo=r(KAe," \u2014 "),$D=s(KAe,"A",{href:!0});var Got=n($D);fUo=r(Got,"TFMobileBertForPreTraining"),Got.forEach(t),gUo=r(KAe," (MobileBERT model)"),KAe.forEach(t),hUo=i(U),yF=s(U,"LI",{});var ZAe=n(yF);Tme=s(ZAe,"STRONG",{});var Oot=n(Tme);uUo=r(Oot,"mpnet"),Oot.forEach(t),pUo=r(ZAe," \u2014 "),ID=s(ZAe,"A",{href:!0});var Xot=n(ID);_Uo=r(Xot,"TFMPNetForMaskedLM"),Xot.forEach(t),bUo=r(ZAe," (MPNet model)"),ZAe.forEach(t),vUo=i(U),wF=s(U,"LI",{});var e6e=n(wF);Fme=s(e6e,"STRONG",{});var zot=n(Fme);TUo=r(zot,"openai-gpt"),zot.forEach(t),FUo=r(e6e," \u2014 "),jD=s(e6e,"A",{href:!0});var Vot=n(jD);CUo=r(Vot,"TFOpenAIGPTLMHeadModel"),Vot.forEach(t),MUo=r(e6e," (OpenAI GPT model)"),e6e.forEach(t),EUo=i(U),AF=s(U,"LI",{});var o6e=n(AF);Cme=s(o6e,"STRONG",{});var Wot=n(Cme);yUo=r(Wot,"roberta"),Wot.forEach(t),wUo=r(o6e," \u2014 "),ND=s(o6e,"A",{href:!0});var Qot=n(ND);AUo=r(Qot,"TFRobertaForMaskedLM"),Qot.forEach(t),LUo=r(o6e," (RoBERTa model)"),o6e.forEach(t),BUo=i(U),LF=s(U,"LI",{});var r6e=n(LF);Mme=s(r6e,"STRONG",{});var Hot=n(Mme);xUo=r(Hot,"t5"),Hot.forEach(t),kUo=r(r6e," \u2014 "),DD=s(r6e,"A",{href:!0});var Uot=n(DD);RUo=r(Uot,"TFT5ForConditionalGeneration"),Uot.forEach(t),SUo=r(r6e," (T5 model)"),r6e.forEach(t),PUo=i(U),BF=s(U,"LI",{});var t6e=n(BF);Eme=s(t6e,"STRONG",{});var Jot=n(Eme);$Uo=r(Jot,"tapas"),Jot.forEach(t),IUo=r(t6e," \u2014 "),qD=s(t6e,"A",{href:!0});var Yot=n(qD);jUo=r(Yot,"TFTapasForMaskedLM"),Yot.forEach(t),NUo=r(t6e," (TAPAS model)"),t6e.forEach(t),DUo=i(U),xF=s(U,"LI",{});var a6e=n(xF);yme=s(a6e,"STRONG",{});var Kot=n(yme);qUo=r(Kot,"transfo-xl"),Kot.forEach(t),GUo=r(a6e," \u2014 "),GD=s(a6e,"A",{href:!0});var Zot=n(GD);OUo=r(Zot,"TFTransfoXLLMHeadModel"),Zot.forEach(t),XUo=r(a6e," (Transformer-XL model)"),a6e.forEach(t),zUo=i(U),kF=s(U,"LI",{});var s6e=n(kF);wme=s(s6e,"STRONG",{});var ert=n(wme);VUo=r(ert,"xlm"),ert.forEach(t),WUo=r(s6e," \u2014 "),OD=s(s6e,"A",{href:!0});var ort=n(OD);QUo=r(ort,"TFXLMWithLMHeadModel"),ort.forEach(t),HUo=r(s6e," (XLM model)"),s6e.forEach(t),UUo=i(U),RF=s(U,"LI",{});var n6e=n(RF);Ame=s(n6e,"STRONG",{});var rrt=n(Ame);JUo=r(rrt,"xlm-roberta"),rrt.forEach(t),YUo=r(n6e," \u2014 "),XD=s(n6e,"A",{href:!0});var trt=n(XD);KUo=r(trt,"TFXLMRobertaForMaskedLM"),trt.forEach(t),ZUo=r(n6e," (XLM-RoBERTa model)"),n6e.forEach(t),eJo=i(U),SF=s(U,"LI",{});var l6e=n(SF);Lme=s(l6e,"STRONG",{});var art=n(Lme);oJo=r(art,"xlnet"),art.forEach(t),rJo=r(l6e," \u2014 "),zD=s(l6e,"A",{href:!0});var srt=n(zD);tJo=r(srt,"TFXLNetLMHeadModel"),srt.forEach(t),aJo=r(l6e," (XLNet model)"),l6e.forEach(t),U.forEach(t),sJo=i(ma),Bme=s(ma,"P",{});var nrt=n(Bme);nJo=r(nrt,"Examples:"),nrt.forEach(t),lJo=i(ma),f(zA.$$.fragment,ma),ma.forEach(t),kl.forEach(t),b9e=i(d),lc=s(d,"H2",{class:!0});var Axe=n(lc);PF=s(Axe,"A",{id:!0,class:!0,href:!0});var lrt=n(PF);xme=s(lrt,"SPAN",{});var irt=n(xme);f(VA.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),iJo=i(Axe),kme=s(Axe,"SPAN",{});var drt=n(kme);dJo=r(drt,"TFAutoModelForCausalLM"),drt.forEach(t),Axe.forEach(t),v9e=i(d),ur=s(d,"DIV",{class:!0});var Sl=n(ur);f(WA.$$.fragment,Sl),cJo=i(Sl),ic=s(Sl,"P",{});var Hz=n(ic);mJo=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rme=s(Hz,"CODE",{});var crt=n(Rme);fJo=r(crt,"from_pretrained()"),crt.forEach(t),gJo=r(Hz,"class method or the "),Sme=s(Hz,"CODE",{});var mrt=n(Sme);hJo=r(mrt,"from_config()"),mrt.forEach(t),uJo=r(Hz,`class
method.`),Hz.forEach(t),pJo=i(Sl),QA=s(Sl,"P",{});var Lxe=n(QA);_Jo=r(Lxe,"This class cannot be instantiated directly using "),Pme=s(Lxe,"CODE",{});var frt=n(Pme);bJo=r(frt,"__init__()"),frt.forEach(t),vJo=r(Lxe," (throws an error)."),Lxe.forEach(t),TJo=i(Sl),it=s(Sl,"DIV",{class:!0});var Pl=n(it);f(HA.$$.fragment,Pl),FJo=i(Pl),$me=s(Pl,"P",{});var grt=n($me);CJo=r(grt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),grt.forEach(t),MJo=i(Pl),dc=s(Pl,"P",{});var Uz=n(dc);EJo=r(Uz,`Note:
Loading a model from its configuration file does `),Ime=s(Uz,"STRONG",{});var hrt=n(Ime);yJo=r(hrt,"not"),hrt.forEach(t),wJo=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jme=s(Uz,"CODE",{});var urt=n(jme);AJo=r(urt,"from_pretrained()"),urt.forEach(t),LJo=r(Uz,"to load the model weights."),Uz.forEach(t),BJo=i(Pl),Nme=s(Pl,"P",{});var prt=n(Nme);xJo=r(prt,"Examples:"),prt.forEach(t),kJo=i(Pl),f(UA.$$.fragment,Pl),Pl.forEach(t),RJo=i(Sl),uo=s(Sl,"DIV",{class:!0});var fa=n(uo);f(JA.$$.fragment,fa),SJo=i(fa),Dme=s(fa,"P",{});var _rt=n(Dme);PJo=r(_rt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_rt.forEach(t),$Jo=i(fa),ds=s(fa,"P",{});var S3=n(ds);IJo=r(S3,"The model class to instantiate is selected based on the "),qme=s(S3,"CODE",{});var brt=n(qme);jJo=r(brt,"model_type"),brt.forEach(t),NJo=r(S3,` property of the config object (either
passed as an argument or loaded from `),Gme=s(S3,"CODE",{});var vrt=n(Gme);DJo=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),qJo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=s(S3,"CODE",{});var Trt=n(Ome);GJo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),OJo=r(S3,":"),S3.forEach(t),XJo=i(fa),he=s(fa,"UL",{});var Me=n(he);$F=s(Me,"LI",{});var i6e=n($F);Xme=s(i6e,"STRONG",{});var Frt=n(Xme);zJo=r(Frt,"bert"),Frt.forEach(t),VJo=r(i6e," \u2014 "),VD=s(i6e,"A",{href:!0});var Crt=n(VD);WJo=r(Crt,"TFBertLMHeadModel"),Crt.forEach(t),QJo=r(i6e," (BERT model)"),i6e.forEach(t),HJo=i(Me),IF=s(Me,"LI",{});var d6e=n(IF);zme=s(d6e,"STRONG",{});var Mrt=n(zme);UJo=r(Mrt,"ctrl"),Mrt.forEach(t),JJo=r(d6e," \u2014 "),WD=s(d6e,"A",{href:!0});var Ert=n(WD);YJo=r(Ert,"TFCTRLLMHeadModel"),Ert.forEach(t),KJo=r(d6e," (CTRL model)"),d6e.forEach(t),ZJo=i(Me),jF=s(Me,"LI",{});var c6e=n(jF);Vme=s(c6e,"STRONG",{});var yrt=n(Vme);eYo=r(yrt,"gpt2"),yrt.forEach(t),oYo=r(c6e," \u2014 "),QD=s(c6e,"A",{href:!0});var wrt=n(QD);rYo=r(wrt,"TFGPT2LMHeadModel"),wrt.forEach(t),tYo=r(c6e," (OpenAI GPT-2 model)"),c6e.forEach(t),aYo=i(Me),NF=s(Me,"LI",{});var m6e=n(NF);Wme=s(m6e,"STRONG",{});var Art=n(Wme);sYo=r(Art,"openai-gpt"),Art.forEach(t),nYo=r(m6e," \u2014 "),HD=s(m6e,"A",{href:!0});var Lrt=n(HD);lYo=r(Lrt,"TFOpenAIGPTLMHeadModel"),Lrt.forEach(t),iYo=r(m6e," (OpenAI GPT model)"),m6e.forEach(t),dYo=i(Me),DF=s(Me,"LI",{});var f6e=n(DF);Qme=s(f6e,"STRONG",{});var Brt=n(Qme);cYo=r(Brt,"rembert"),Brt.forEach(t),mYo=r(f6e," \u2014 "),UD=s(f6e,"A",{href:!0});var xrt=n(UD);fYo=r(xrt,"TFRemBertForCausalLM"),xrt.forEach(t),gYo=r(f6e," (RemBERT model)"),f6e.forEach(t),hYo=i(Me),qF=s(Me,"LI",{});var g6e=n(qF);Hme=s(g6e,"STRONG",{});var krt=n(Hme);uYo=r(krt,"roberta"),krt.forEach(t),pYo=r(g6e," \u2014 "),JD=s(g6e,"A",{href:!0});var Rrt=n(JD);_Yo=r(Rrt,"TFRobertaForCausalLM"),Rrt.forEach(t),bYo=r(g6e," (RoBERTa model)"),g6e.forEach(t),vYo=i(Me),GF=s(Me,"LI",{});var h6e=n(GF);Ume=s(h6e,"STRONG",{});var Srt=n(Ume);TYo=r(Srt,"roformer"),Srt.forEach(t),FYo=r(h6e," \u2014 "),YD=s(h6e,"A",{href:!0});var Prt=n(YD);CYo=r(Prt,"TFRoFormerForCausalLM"),Prt.forEach(t),MYo=r(h6e," (RoFormer model)"),h6e.forEach(t),EYo=i(Me),OF=s(Me,"LI",{});var u6e=n(OF);Jme=s(u6e,"STRONG",{});var $rt=n(Jme);yYo=r($rt,"transfo-xl"),$rt.forEach(t),wYo=r(u6e," \u2014 "),KD=s(u6e,"A",{href:!0});var Irt=n(KD);AYo=r(Irt,"TFTransfoXLLMHeadModel"),Irt.forEach(t),LYo=r(u6e," (Transformer-XL model)"),u6e.forEach(t),BYo=i(Me),XF=s(Me,"LI",{});var p6e=n(XF);Yme=s(p6e,"STRONG",{});var jrt=n(Yme);xYo=r(jrt,"xlm"),jrt.forEach(t),kYo=r(p6e," \u2014 "),ZD=s(p6e,"A",{href:!0});var Nrt=n(ZD);RYo=r(Nrt,"TFXLMWithLMHeadModel"),Nrt.forEach(t),SYo=r(p6e," (XLM model)"),p6e.forEach(t),PYo=i(Me),zF=s(Me,"LI",{});var _6e=n(zF);Kme=s(_6e,"STRONG",{});var Drt=n(Kme);$Yo=r(Drt,"xlnet"),Drt.forEach(t),IYo=r(_6e," \u2014 "),eq=s(_6e,"A",{href:!0});var qrt=n(eq);jYo=r(qrt,"TFXLNetLMHeadModel"),qrt.forEach(t),NYo=r(_6e," (XLNet model)"),_6e.forEach(t),Me.forEach(t),DYo=i(fa),Zme=s(fa,"P",{});var Grt=n(Zme);qYo=r(Grt,"Examples:"),Grt.forEach(t),GYo=i(fa),f(YA.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),T9e=i(d),cc=s(d,"H2",{class:!0});var Bxe=n(cc);VF=s(Bxe,"A",{id:!0,class:!0,href:!0});var Ort=n(VF);efe=s(Ort,"SPAN",{});var Xrt=n(efe);f(KA.$$.fragment,Xrt),Xrt.forEach(t),Ort.forEach(t),OYo=i(Bxe),ofe=s(Bxe,"SPAN",{});var zrt=n(ofe);XYo=r(zrt,"TFAutoModelForImageClassification"),zrt.forEach(t),Bxe.forEach(t),F9e=i(d),pr=s(d,"DIV",{class:!0});var $l=n(pr);f(ZA.$$.fragment,$l),zYo=i($l),mc=s($l,"P",{});var Jz=n(mc);VYo=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rfe=s(Jz,"CODE",{});var Vrt=n(rfe);WYo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),QYo=r(Jz,"class method or the "),tfe=s(Jz,"CODE",{});var Wrt=n(tfe);HYo=r(Wrt,"from_config()"),Wrt.forEach(t),UYo=r(Jz,`class
method.`),Jz.forEach(t),JYo=i($l),e6=s($l,"P",{});var xxe=n(e6);YYo=r(xxe,"This class cannot be instantiated directly using "),afe=s(xxe,"CODE",{});var Qrt=n(afe);KYo=r(Qrt,"__init__()"),Qrt.forEach(t),ZYo=r(xxe," (throws an error)."),xxe.forEach(t),eKo=i($l),dt=s($l,"DIV",{class:!0});var Il=n(dt);f(o6.$$.fragment,Il),oKo=i(Il),sfe=s(Il,"P",{});var Hrt=n(sfe);rKo=r(Hrt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hrt.forEach(t),tKo=i(Il),fc=s(Il,"P",{});var Yz=n(fc);aKo=r(Yz,`Note:
Loading a model from its configuration file does `),nfe=s(Yz,"STRONG",{});var Urt=n(nfe);sKo=r(Urt,"not"),Urt.forEach(t),nKo=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lfe=s(Yz,"CODE",{});var Jrt=n(lfe);lKo=r(Jrt,"from_pretrained()"),Jrt.forEach(t),iKo=r(Yz,"to load the model weights."),Yz.forEach(t),dKo=i(Il),ife=s(Il,"P",{});var Yrt=n(ife);cKo=r(Yrt,"Examples:"),Yrt.forEach(t),mKo=i(Il),f(r6.$$.fragment,Il),Il.forEach(t),fKo=i($l),po=s($l,"DIV",{class:!0});var ga=n(po);f(t6.$$.fragment,ga),gKo=i(ga),dfe=s(ga,"P",{});var Krt=n(dfe);hKo=r(Krt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Krt.forEach(t),uKo=i(ga),cs=s(ga,"P",{});var P3=n(cs);pKo=r(P3,"The model class to instantiate is selected based on the "),cfe=s(P3,"CODE",{});var Zrt=n(cfe);_Ko=r(Zrt,"model_type"),Zrt.forEach(t),bKo=r(P3,` property of the config object (either
passed as an argument or loaded from `),mfe=s(P3,"CODE",{});var ett=n(mfe);vKo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),TKo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=s(P3,"CODE",{});var ott=n(ffe);FKo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),CKo=r(P3,":"),P3.forEach(t),MKo=i(ga),a6=s(ga,"UL",{});var kxe=n(a6);WF=s(kxe,"LI",{});var b6e=n(WF);gfe=s(b6e,"STRONG",{});var rtt=n(gfe);EKo=r(rtt,"convnext"),rtt.forEach(t),yKo=r(b6e," \u2014 "),oq=s(b6e,"A",{href:!0});var ttt=n(oq);wKo=r(ttt,"TFConvNextForImageClassification"),ttt.forEach(t),AKo=r(b6e," (ConvNext model)"),b6e.forEach(t),LKo=i(kxe),QF=s(kxe,"LI",{});var v6e=n(QF);hfe=s(v6e,"STRONG",{});var att=n(hfe);BKo=r(att,"vit"),att.forEach(t),xKo=r(v6e," \u2014 "),rq=s(v6e,"A",{href:!0});var stt=n(rq);kKo=r(stt,"TFViTForImageClassification"),stt.forEach(t),RKo=r(v6e," (ViT model)"),v6e.forEach(t),kxe.forEach(t),SKo=i(ga),ufe=s(ga,"P",{});var ntt=n(ufe);PKo=r(ntt,"Examples:"),ntt.forEach(t),$Ko=i(ga),f(s6.$$.fragment,ga),ga.forEach(t),$l.forEach(t),C9e=i(d),gc=s(d,"H2",{class:!0});var Rxe=n(gc);HF=s(Rxe,"A",{id:!0,class:!0,href:!0});var ltt=n(HF);pfe=s(ltt,"SPAN",{});var itt=n(pfe);f(n6.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),IKo=i(Rxe),_fe=s(Rxe,"SPAN",{});var dtt=n(_fe);jKo=r(dtt,"TFAutoModelForMaskedLM"),dtt.forEach(t),Rxe.forEach(t),M9e=i(d),_r=s(d,"DIV",{class:!0});var jl=n(_r);f(l6.$$.fragment,jl),NKo=i(jl),hc=s(jl,"P",{});var Kz=n(hc);DKo=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bfe=s(Kz,"CODE",{});var ctt=n(bfe);qKo=r(ctt,"from_pretrained()"),ctt.forEach(t),GKo=r(Kz,"class method or the "),vfe=s(Kz,"CODE",{});var mtt=n(vfe);OKo=r(mtt,"from_config()"),mtt.forEach(t),XKo=r(Kz,`class
method.`),Kz.forEach(t),zKo=i(jl),i6=s(jl,"P",{});var Sxe=n(i6);VKo=r(Sxe,"This class cannot be instantiated directly using "),Tfe=s(Sxe,"CODE",{});var ftt=n(Tfe);WKo=r(ftt,"__init__()"),ftt.forEach(t),QKo=r(Sxe," (throws an error)."),Sxe.forEach(t),HKo=i(jl),ct=s(jl,"DIV",{class:!0});var Nl=n(ct);f(d6.$$.fragment,Nl),UKo=i(Nl),Ffe=s(Nl,"P",{});var gtt=n(Ffe);JKo=r(gtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gtt.forEach(t),YKo=i(Nl),uc=s(Nl,"P",{});var Zz=n(uc);KKo=r(Zz,`Note:
Loading a model from its configuration file does `),Cfe=s(Zz,"STRONG",{});var htt=n(Cfe);ZKo=r(htt,"not"),htt.forEach(t),eZo=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mfe=s(Zz,"CODE",{});var utt=n(Mfe);oZo=r(utt,"from_pretrained()"),utt.forEach(t),rZo=r(Zz,"to load the model weights."),Zz.forEach(t),tZo=i(Nl),Efe=s(Nl,"P",{});var ptt=n(Efe);aZo=r(ptt,"Examples:"),ptt.forEach(t),sZo=i(Nl),f(c6.$$.fragment,Nl),Nl.forEach(t),nZo=i(jl),_o=s(jl,"DIV",{class:!0});var ha=n(_o);f(m6.$$.fragment,ha),lZo=i(ha),yfe=s(ha,"P",{});var _tt=n(yfe);iZo=r(_tt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_tt.forEach(t),dZo=i(ha),ms=s(ha,"P",{});var $3=n(ms);cZo=r($3,"The model class to instantiate is selected based on the "),wfe=s($3,"CODE",{});var btt=n(wfe);mZo=r(btt,"model_type"),btt.forEach(t),fZo=r($3,` property of the config object (either
passed as an argument or loaded from `),Afe=s($3,"CODE",{});var vtt=n(Afe);gZo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),hZo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=s($3,"CODE",{});var Ttt=n(Lfe);uZo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),pZo=r($3,":"),$3.forEach(t),_Zo=i(ha),Y=s(ha,"UL",{});var ee=n(Y);UF=s(ee,"LI",{});var T6e=n(UF);Bfe=s(T6e,"STRONG",{});var Ftt=n(Bfe);bZo=r(Ftt,"albert"),Ftt.forEach(t),vZo=r(T6e," \u2014 "),tq=s(T6e,"A",{href:!0});var Ctt=n(tq);TZo=r(Ctt,"TFAlbertForMaskedLM"),Ctt.forEach(t),FZo=r(T6e," (ALBERT model)"),T6e.forEach(t),CZo=i(ee),JF=s(ee,"LI",{});var F6e=n(JF);xfe=s(F6e,"STRONG",{});var Mtt=n(xfe);MZo=r(Mtt,"bert"),Mtt.forEach(t),EZo=r(F6e," \u2014 "),aq=s(F6e,"A",{href:!0});var Ett=n(aq);yZo=r(Ett,"TFBertForMaskedLM"),Ett.forEach(t),wZo=r(F6e," (BERT model)"),F6e.forEach(t),AZo=i(ee),YF=s(ee,"LI",{});var C6e=n(YF);kfe=s(C6e,"STRONG",{});var ytt=n(kfe);LZo=r(ytt,"camembert"),ytt.forEach(t),BZo=r(C6e," \u2014 "),sq=s(C6e,"A",{href:!0});var wtt=n(sq);xZo=r(wtt,"TFCamembertForMaskedLM"),wtt.forEach(t),kZo=r(C6e," (CamemBERT model)"),C6e.forEach(t),RZo=i(ee),KF=s(ee,"LI",{});var M6e=n(KF);Rfe=s(M6e,"STRONG",{});var Att=n(Rfe);SZo=r(Att,"convbert"),Att.forEach(t),PZo=r(M6e," \u2014 "),nq=s(M6e,"A",{href:!0});var Ltt=n(nq);$Zo=r(Ltt,"TFConvBertForMaskedLM"),Ltt.forEach(t),IZo=r(M6e," (ConvBERT model)"),M6e.forEach(t),jZo=i(ee),ZF=s(ee,"LI",{});var E6e=n(ZF);Sfe=s(E6e,"STRONG",{});var Btt=n(Sfe);NZo=r(Btt,"deberta"),Btt.forEach(t),DZo=r(E6e," \u2014 "),lq=s(E6e,"A",{href:!0});var xtt=n(lq);qZo=r(xtt,"TFDebertaForMaskedLM"),xtt.forEach(t),GZo=r(E6e," (DeBERTa model)"),E6e.forEach(t),OZo=i(ee),eC=s(ee,"LI",{});var y6e=n(eC);Pfe=s(y6e,"STRONG",{});var ktt=n(Pfe);XZo=r(ktt,"deberta-v2"),ktt.forEach(t),zZo=r(y6e," \u2014 "),iq=s(y6e,"A",{href:!0});var Rtt=n(iq);VZo=r(Rtt,"TFDebertaV2ForMaskedLM"),Rtt.forEach(t),WZo=r(y6e," (DeBERTa-v2 model)"),y6e.forEach(t),QZo=i(ee),oC=s(ee,"LI",{});var w6e=n(oC);$fe=s(w6e,"STRONG",{});var Stt=n($fe);HZo=r(Stt,"distilbert"),Stt.forEach(t),UZo=r(w6e," \u2014 "),dq=s(w6e,"A",{href:!0});var Ptt=n(dq);JZo=r(Ptt,"TFDistilBertForMaskedLM"),Ptt.forEach(t),YZo=r(w6e," (DistilBERT model)"),w6e.forEach(t),KZo=i(ee),rC=s(ee,"LI",{});var A6e=n(rC);Ife=s(A6e,"STRONG",{});var $tt=n(Ife);ZZo=r($tt,"electra"),$tt.forEach(t),eer=r(A6e," \u2014 "),cq=s(A6e,"A",{href:!0});var Itt=n(cq);oer=r(Itt,"TFElectraForMaskedLM"),Itt.forEach(t),rer=r(A6e," (ELECTRA model)"),A6e.forEach(t),ter=i(ee),tC=s(ee,"LI",{});var L6e=n(tC);jfe=s(L6e,"STRONG",{});var jtt=n(jfe);aer=r(jtt,"flaubert"),jtt.forEach(t),ser=r(L6e," \u2014 "),mq=s(L6e,"A",{href:!0});var Ntt=n(mq);ner=r(Ntt,"TFFlaubertWithLMHeadModel"),Ntt.forEach(t),ler=r(L6e," (FlauBERT model)"),L6e.forEach(t),ier=i(ee),aC=s(ee,"LI",{});var B6e=n(aC);Nfe=s(B6e,"STRONG",{});var Dtt=n(Nfe);der=r(Dtt,"funnel"),Dtt.forEach(t),cer=r(B6e," \u2014 "),fq=s(B6e,"A",{href:!0});var qtt=n(fq);mer=r(qtt,"TFFunnelForMaskedLM"),qtt.forEach(t),fer=r(B6e," (Funnel Transformer model)"),B6e.forEach(t),ger=i(ee),sC=s(ee,"LI",{});var x6e=n(sC);Dfe=s(x6e,"STRONG",{});var Gtt=n(Dfe);her=r(Gtt,"layoutlm"),Gtt.forEach(t),uer=r(x6e," \u2014 "),gq=s(x6e,"A",{href:!0});var Ott=n(gq);per=r(Ott,"TFLayoutLMForMaskedLM"),Ott.forEach(t),_er=r(x6e," (LayoutLM model)"),x6e.forEach(t),ber=i(ee),nC=s(ee,"LI",{});var k6e=n(nC);qfe=s(k6e,"STRONG",{});var Xtt=n(qfe);ver=r(Xtt,"longformer"),Xtt.forEach(t),Ter=r(k6e," \u2014 "),hq=s(k6e,"A",{href:!0});var ztt=n(hq);Fer=r(ztt,"TFLongformerForMaskedLM"),ztt.forEach(t),Cer=r(k6e," (Longformer model)"),k6e.forEach(t),Mer=i(ee),lC=s(ee,"LI",{});var R6e=n(lC);Gfe=s(R6e,"STRONG",{});var Vtt=n(Gfe);Eer=r(Vtt,"mobilebert"),Vtt.forEach(t),yer=r(R6e," \u2014 "),uq=s(R6e,"A",{href:!0});var Wtt=n(uq);wer=r(Wtt,"TFMobileBertForMaskedLM"),Wtt.forEach(t),Aer=r(R6e," (MobileBERT model)"),R6e.forEach(t),Ler=i(ee),iC=s(ee,"LI",{});var S6e=n(iC);Ofe=s(S6e,"STRONG",{});var Qtt=n(Ofe);Ber=r(Qtt,"mpnet"),Qtt.forEach(t),xer=r(S6e," \u2014 "),pq=s(S6e,"A",{href:!0});var Htt=n(pq);ker=r(Htt,"TFMPNetForMaskedLM"),Htt.forEach(t),Rer=r(S6e," (MPNet model)"),S6e.forEach(t),Ser=i(ee),dC=s(ee,"LI",{});var P6e=n(dC);Xfe=s(P6e,"STRONG",{});var Utt=n(Xfe);Per=r(Utt,"rembert"),Utt.forEach(t),$er=r(P6e," \u2014 "),_q=s(P6e,"A",{href:!0});var Jtt=n(_q);Ier=r(Jtt,"TFRemBertForMaskedLM"),Jtt.forEach(t),jer=r(P6e," (RemBERT model)"),P6e.forEach(t),Ner=i(ee),cC=s(ee,"LI",{});var $6e=n(cC);zfe=s($6e,"STRONG",{});var Ytt=n(zfe);Der=r(Ytt,"roberta"),Ytt.forEach(t),qer=r($6e," \u2014 "),bq=s($6e,"A",{href:!0});var Ktt=n(bq);Ger=r(Ktt,"TFRobertaForMaskedLM"),Ktt.forEach(t),Oer=r($6e," (RoBERTa model)"),$6e.forEach(t),Xer=i(ee),mC=s(ee,"LI",{});var I6e=n(mC);Vfe=s(I6e,"STRONG",{});var Ztt=n(Vfe);zer=r(Ztt,"roformer"),Ztt.forEach(t),Ver=r(I6e," \u2014 "),vq=s(I6e,"A",{href:!0});var eat=n(vq);Wer=r(eat,"TFRoFormerForMaskedLM"),eat.forEach(t),Qer=r(I6e," (RoFormer model)"),I6e.forEach(t),Her=i(ee),fC=s(ee,"LI",{});var j6e=n(fC);Wfe=s(j6e,"STRONG",{});var oat=n(Wfe);Uer=r(oat,"tapas"),oat.forEach(t),Jer=r(j6e," \u2014 "),Tq=s(j6e,"A",{href:!0});var rat=n(Tq);Yer=r(rat,"TFTapasForMaskedLM"),rat.forEach(t),Ker=r(j6e," (TAPAS model)"),j6e.forEach(t),Zer=i(ee),gC=s(ee,"LI",{});var N6e=n(gC);Qfe=s(N6e,"STRONG",{});var tat=n(Qfe);eor=r(tat,"xlm"),tat.forEach(t),oor=r(N6e," \u2014 "),Fq=s(N6e,"A",{href:!0});var aat=n(Fq);ror=r(aat,"TFXLMWithLMHeadModel"),aat.forEach(t),tor=r(N6e," (XLM model)"),N6e.forEach(t),aor=i(ee),hC=s(ee,"LI",{});var D6e=n(hC);Hfe=s(D6e,"STRONG",{});var sat=n(Hfe);sor=r(sat,"xlm-roberta"),sat.forEach(t),nor=r(D6e," \u2014 "),Cq=s(D6e,"A",{href:!0});var nat=n(Cq);lor=r(nat,"TFXLMRobertaForMaskedLM"),nat.forEach(t),ior=r(D6e," (XLM-RoBERTa model)"),D6e.forEach(t),ee.forEach(t),dor=i(ha),Ufe=s(ha,"P",{});var lat=n(Ufe);cor=r(lat,"Examples:"),lat.forEach(t),mor=i(ha),f(f6.$$.fragment,ha),ha.forEach(t),jl.forEach(t),E9e=i(d),pc=s(d,"H2",{class:!0});var Pxe=n(pc);uC=s(Pxe,"A",{id:!0,class:!0,href:!0});var iat=n(uC);Jfe=s(iat,"SPAN",{});var dat=n(Jfe);f(g6.$$.fragment,dat),dat.forEach(t),iat.forEach(t),gor=i(Pxe),Yfe=s(Pxe,"SPAN",{});var cat=n(Yfe);hor=r(cat,"TFAutoModelForSeq2SeqLM"),cat.forEach(t),Pxe.forEach(t),y9e=i(d),br=s(d,"DIV",{class:!0});var Dl=n(br);f(h6.$$.fragment,Dl),uor=i(Dl),_c=s(Dl,"P",{});var eV=n(_c);por=r(eV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kfe=s(eV,"CODE",{});var mat=n(Kfe);_or=r(mat,"from_pretrained()"),mat.forEach(t),bor=r(eV,"class method or the "),Zfe=s(eV,"CODE",{});var fat=n(Zfe);vor=r(fat,"from_config()"),fat.forEach(t),Tor=r(eV,`class
method.`),eV.forEach(t),For=i(Dl),u6=s(Dl,"P",{});var $xe=n(u6);Cor=r($xe,"This class cannot be instantiated directly using "),ege=s($xe,"CODE",{});var gat=n(ege);Mor=r(gat,"__init__()"),gat.forEach(t),Eor=r($xe," (throws an error)."),$xe.forEach(t),yor=i(Dl),mt=s(Dl,"DIV",{class:!0});var ql=n(mt);f(p6.$$.fragment,ql),wor=i(ql),oge=s(ql,"P",{});var hat=n(oge);Aor=r(hat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hat.forEach(t),Lor=i(ql),bc=s(ql,"P",{});var oV=n(bc);Bor=r(oV,`Note:
Loading a model from its configuration file does `),rge=s(oV,"STRONG",{});var uat=n(rge);xor=r(uat,"not"),uat.forEach(t),kor=r(oV,` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=s(oV,"CODE",{});var pat=n(tge);Ror=r(pat,"from_pretrained()"),pat.forEach(t),Sor=r(oV,"to load the model weights."),oV.forEach(t),Por=i(ql),age=s(ql,"P",{});var _at=n(age);$or=r(_at,"Examples:"),_at.forEach(t),Ior=i(ql),f(_6.$$.fragment,ql),ql.forEach(t),jor=i(Dl),bo=s(Dl,"DIV",{class:!0});var ua=n(bo);f(b6.$$.fragment,ua),Nor=i(ua),sge=s(ua,"P",{});var bat=n(sge);Dor=r(bat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bat.forEach(t),qor=i(ua),fs=s(ua,"P",{});var I3=n(fs);Gor=r(I3,"The model class to instantiate is selected based on the "),nge=s(I3,"CODE",{});var vat=n(nge);Oor=r(vat,"model_type"),vat.forEach(t),Xor=r(I3,` property of the config object (either
passed as an argument or loaded from `),lge=s(I3,"CODE",{});var Tat=n(lge);zor=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Vor=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=s(I3,"CODE",{});var Fat=n(ige);Wor=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),Qor=r(I3,":"),I3.forEach(t),Hor=i(ua),ue=s(ua,"UL",{});var Ee=n(ue);pC=s(Ee,"LI",{});var q6e=n(pC);dge=s(q6e,"STRONG",{});var Cat=n(dge);Uor=r(Cat,"bart"),Cat.forEach(t),Jor=r(q6e," \u2014 "),Mq=s(q6e,"A",{href:!0});var Mat=n(Mq);Yor=r(Mat,"TFBartForConditionalGeneration"),Mat.forEach(t),Kor=r(q6e," (BART model)"),q6e.forEach(t),Zor=i(Ee),_C=s(Ee,"LI",{});var G6e=n(_C);cge=s(G6e,"STRONG",{});var Eat=n(cge);err=r(Eat,"blenderbot"),Eat.forEach(t),orr=r(G6e," \u2014 "),Eq=s(G6e,"A",{href:!0});var yat=n(Eq);rrr=r(yat,"TFBlenderbotForConditionalGeneration"),yat.forEach(t),trr=r(G6e," (Blenderbot model)"),G6e.forEach(t),arr=i(Ee),bC=s(Ee,"LI",{});var O6e=n(bC);mge=s(O6e,"STRONG",{});var wat=n(mge);srr=r(wat,"blenderbot-small"),wat.forEach(t),nrr=r(O6e," \u2014 "),yq=s(O6e,"A",{href:!0});var Aat=n(yq);lrr=r(Aat,"TFBlenderbotSmallForConditionalGeneration"),Aat.forEach(t),irr=r(O6e," (BlenderbotSmall model)"),O6e.forEach(t),drr=i(Ee),vC=s(Ee,"LI",{});var X6e=n(vC);fge=s(X6e,"STRONG",{});var Lat=n(fge);crr=r(Lat,"encoder-decoder"),Lat.forEach(t),mrr=r(X6e," \u2014 "),wq=s(X6e,"A",{href:!0});var Bat=n(wq);frr=r(Bat,"TFEncoderDecoderModel"),Bat.forEach(t),grr=r(X6e," (Encoder decoder model)"),X6e.forEach(t),hrr=i(Ee),TC=s(Ee,"LI",{});var z6e=n(TC);gge=s(z6e,"STRONG",{});var xat=n(gge);urr=r(xat,"led"),xat.forEach(t),prr=r(z6e," \u2014 "),Aq=s(z6e,"A",{href:!0});var kat=n(Aq);_rr=r(kat,"TFLEDForConditionalGeneration"),kat.forEach(t),brr=r(z6e," (LED model)"),z6e.forEach(t),vrr=i(Ee),FC=s(Ee,"LI",{});var V6e=n(FC);hge=s(V6e,"STRONG",{});var Rat=n(hge);Trr=r(Rat,"marian"),Rat.forEach(t),Frr=r(V6e," \u2014 "),Lq=s(V6e,"A",{href:!0});var Sat=n(Lq);Crr=r(Sat,"TFMarianMTModel"),Sat.forEach(t),Mrr=r(V6e," (Marian model)"),V6e.forEach(t),Err=i(Ee),CC=s(Ee,"LI",{});var W6e=n(CC);uge=s(W6e,"STRONG",{});var Pat=n(uge);yrr=r(Pat,"mbart"),Pat.forEach(t),wrr=r(W6e," \u2014 "),Bq=s(W6e,"A",{href:!0});var $at=n(Bq);Arr=r($at,"TFMBartForConditionalGeneration"),$at.forEach(t),Lrr=r(W6e," (mBART model)"),W6e.forEach(t),Brr=i(Ee),MC=s(Ee,"LI",{});var Q6e=n(MC);pge=s(Q6e,"STRONG",{});var Iat=n(pge);xrr=r(Iat,"mt5"),Iat.forEach(t),krr=r(Q6e," \u2014 "),xq=s(Q6e,"A",{href:!0});var jat=n(xq);Rrr=r(jat,"TFMT5ForConditionalGeneration"),jat.forEach(t),Srr=r(Q6e," (mT5 model)"),Q6e.forEach(t),Prr=i(Ee),EC=s(Ee,"LI",{});var H6e=n(EC);_ge=s(H6e,"STRONG",{});var Nat=n(_ge);$rr=r(Nat,"pegasus"),Nat.forEach(t),Irr=r(H6e," \u2014 "),kq=s(H6e,"A",{href:!0});var Dat=n(kq);jrr=r(Dat,"TFPegasusForConditionalGeneration"),Dat.forEach(t),Nrr=r(H6e," (Pegasus model)"),H6e.forEach(t),Drr=i(Ee),yC=s(Ee,"LI",{});var U6e=n(yC);bge=s(U6e,"STRONG",{});var qat=n(bge);qrr=r(qat,"t5"),qat.forEach(t),Grr=r(U6e," \u2014 "),Rq=s(U6e,"A",{href:!0});var Gat=n(Rq);Orr=r(Gat,"TFT5ForConditionalGeneration"),Gat.forEach(t),Xrr=r(U6e," (T5 model)"),U6e.forEach(t),Ee.forEach(t),zrr=i(ua),vge=s(ua,"P",{});var Oat=n(vge);Vrr=r(Oat,"Examples:"),Oat.forEach(t),Wrr=i(ua),f(v6.$$.fragment,ua),ua.forEach(t),Dl.forEach(t),w9e=i(d),vc=s(d,"H2",{class:!0});var Ixe=n(vc);wC=s(Ixe,"A",{id:!0,class:!0,href:!0});var Xat=n(wC);Tge=s(Xat,"SPAN",{});var zat=n(Tge);f(T6.$$.fragment,zat),zat.forEach(t),Xat.forEach(t),Qrr=i(Ixe),Fge=s(Ixe,"SPAN",{});var Vat=n(Fge);Hrr=r(Vat,"TFAutoModelForSequenceClassification"),Vat.forEach(t),Ixe.forEach(t),A9e=i(d),vr=s(d,"DIV",{class:!0});var Gl=n(vr);f(F6.$$.fragment,Gl),Urr=i(Gl),Tc=s(Gl,"P",{});var rV=n(Tc);Jrr=r(rV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cge=s(rV,"CODE",{});var Wat=n(Cge);Yrr=r(Wat,"from_pretrained()"),Wat.forEach(t),Krr=r(rV,"class method or the "),Mge=s(rV,"CODE",{});var Qat=n(Mge);Zrr=r(Qat,"from_config()"),Qat.forEach(t),etr=r(rV,`class
method.`),rV.forEach(t),otr=i(Gl),C6=s(Gl,"P",{});var jxe=n(C6);rtr=r(jxe,"This class cannot be instantiated directly using "),Ege=s(jxe,"CODE",{});var Hat=n(Ege);ttr=r(Hat,"__init__()"),Hat.forEach(t),atr=r(jxe," (throws an error)."),jxe.forEach(t),str=i(Gl),ft=s(Gl,"DIV",{class:!0});var Ol=n(ft);f(M6.$$.fragment,Ol),ntr=i(Ol),yge=s(Ol,"P",{});var Uat=n(yge);ltr=r(Uat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uat.forEach(t),itr=i(Ol),Fc=s(Ol,"P",{});var tV=n(Fc);dtr=r(tV,`Note:
Loading a model from its configuration file does `),wge=s(tV,"STRONG",{});var Jat=n(wge);ctr=r(Jat,"not"),Jat.forEach(t),mtr=r(tV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Age=s(tV,"CODE",{});var Yat=n(Age);ftr=r(Yat,"from_pretrained()"),Yat.forEach(t),gtr=r(tV,"to load the model weights."),tV.forEach(t),htr=i(Ol),Lge=s(Ol,"P",{});var Kat=n(Lge);utr=r(Kat,"Examples:"),Kat.forEach(t),ptr=i(Ol),f(E6.$$.fragment,Ol),Ol.forEach(t),_tr=i(Gl),vo=s(Gl,"DIV",{class:!0});var pa=n(vo);f(y6.$$.fragment,pa),btr=i(pa),Bge=s(pa,"P",{});var Zat=n(Bge);vtr=r(Zat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zat.forEach(t),Ttr=i(pa),gs=s(pa,"P",{});var j3=n(gs);Ftr=r(j3,"The model class to instantiate is selected based on the "),xge=s(j3,"CODE",{});var est=n(xge);Ctr=r(est,"model_type"),est.forEach(t),Mtr=r(j3,` property of the config object (either
passed as an argument or loaded from `),kge=s(j3,"CODE",{});var ost=n(kge);Etr=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),ytr=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=s(j3,"CODE",{});var rst=n(Rge);wtr=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),Atr=r(j3,":"),j3.forEach(t),Ltr=i(pa),X=s(pa,"UL",{});var W=n(X);AC=s(W,"LI",{});var J6e=n(AC);Sge=s(J6e,"STRONG",{});var tst=n(Sge);Btr=r(tst,"albert"),tst.forEach(t),xtr=r(J6e," \u2014 "),Sq=s(J6e,"A",{href:!0});var ast=n(Sq);ktr=r(ast,"TFAlbertForSequenceClassification"),ast.forEach(t),Rtr=r(J6e," (ALBERT model)"),J6e.forEach(t),Str=i(W),LC=s(W,"LI",{});var Y6e=n(LC);Pge=s(Y6e,"STRONG",{});var sst=n(Pge);Ptr=r(sst,"bert"),sst.forEach(t),$tr=r(Y6e," \u2014 "),Pq=s(Y6e,"A",{href:!0});var nst=n(Pq);Itr=r(nst,"TFBertForSequenceClassification"),nst.forEach(t),jtr=r(Y6e," (BERT model)"),Y6e.forEach(t),Ntr=i(W),BC=s(W,"LI",{});var K6e=n(BC);$ge=s(K6e,"STRONG",{});var lst=n($ge);Dtr=r(lst,"camembert"),lst.forEach(t),qtr=r(K6e," \u2014 "),$q=s(K6e,"A",{href:!0});var ist=n($q);Gtr=r(ist,"TFCamembertForSequenceClassification"),ist.forEach(t),Otr=r(K6e," (CamemBERT model)"),K6e.forEach(t),Xtr=i(W),xC=s(W,"LI",{});var Z6e=n(xC);Ige=s(Z6e,"STRONG",{});var dst=n(Ige);ztr=r(dst,"convbert"),dst.forEach(t),Vtr=r(Z6e," \u2014 "),Iq=s(Z6e,"A",{href:!0});var cst=n(Iq);Wtr=r(cst,"TFConvBertForSequenceClassification"),cst.forEach(t),Qtr=r(Z6e," (ConvBERT model)"),Z6e.forEach(t),Htr=i(W),kC=s(W,"LI",{});var e0e=n(kC);jge=s(e0e,"STRONG",{});var mst=n(jge);Utr=r(mst,"ctrl"),mst.forEach(t),Jtr=r(e0e," \u2014 "),jq=s(e0e,"A",{href:!0});var fst=n(jq);Ytr=r(fst,"TFCTRLForSequenceClassification"),fst.forEach(t),Ktr=r(e0e," (CTRL model)"),e0e.forEach(t),Ztr=i(W),RC=s(W,"LI",{});var o0e=n(RC);Nge=s(o0e,"STRONG",{});var gst=n(Nge);ear=r(gst,"deberta"),gst.forEach(t),oar=r(o0e," \u2014 "),Nq=s(o0e,"A",{href:!0});var hst=n(Nq);rar=r(hst,"TFDebertaForSequenceClassification"),hst.forEach(t),tar=r(o0e," (DeBERTa model)"),o0e.forEach(t),aar=i(W),SC=s(W,"LI",{});var r0e=n(SC);Dge=s(r0e,"STRONG",{});var ust=n(Dge);sar=r(ust,"deberta-v2"),ust.forEach(t),nar=r(r0e," \u2014 "),Dq=s(r0e,"A",{href:!0});var pst=n(Dq);lar=r(pst,"TFDebertaV2ForSequenceClassification"),pst.forEach(t),iar=r(r0e," (DeBERTa-v2 model)"),r0e.forEach(t),dar=i(W),PC=s(W,"LI",{});var t0e=n(PC);qge=s(t0e,"STRONG",{});var _st=n(qge);car=r(_st,"distilbert"),_st.forEach(t),mar=r(t0e," \u2014 "),qq=s(t0e,"A",{href:!0});var bst=n(qq);far=r(bst,"TFDistilBertForSequenceClassification"),bst.forEach(t),gar=r(t0e," (DistilBERT model)"),t0e.forEach(t),har=i(W),$C=s(W,"LI",{});var a0e=n($C);Gge=s(a0e,"STRONG",{});var vst=n(Gge);uar=r(vst,"electra"),vst.forEach(t),par=r(a0e," \u2014 "),Gq=s(a0e,"A",{href:!0});var Tst=n(Gq);_ar=r(Tst,"TFElectraForSequenceClassification"),Tst.forEach(t),bar=r(a0e," (ELECTRA model)"),a0e.forEach(t),Tar=i(W),IC=s(W,"LI",{});var s0e=n(IC);Oge=s(s0e,"STRONG",{});var Fst=n(Oge);Far=r(Fst,"flaubert"),Fst.forEach(t),Car=r(s0e," \u2014 "),Oq=s(s0e,"A",{href:!0});var Cst=n(Oq);Mar=r(Cst,"TFFlaubertForSequenceClassification"),Cst.forEach(t),Ear=r(s0e," (FlauBERT model)"),s0e.forEach(t),yar=i(W),jC=s(W,"LI",{});var n0e=n(jC);Xge=s(n0e,"STRONG",{});var Mst=n(Xge);war=r(Mst,"funnel"),Mst.forEach(t),Aar=r(n0e," \u2014 "),Xq=s(n0e,"A",{href:!0});var Est=n(Xq);Lar=r(Est,"TFFunnelForSequenceClassification"),Est.forEach(t),Bar=r(n0e," (Funnel Transformer model)"),n0e.forEach(t),xar=i(W),NC=s(W,"LI",{});var l0e=n(NC);zge=s(l0e,"STRONG",{});var yst=n(zge);kar=r(yst,"gpt2"),yst.forEach(t),Rar=r(l0e," \u2014 "),zq=s(l0e,"A",{href:!0});var wst=n(zq);Sar=r(wst,"TFGPT2ForSequenceClassification"),wst.forEach(t),Par=r(l0e," (OpenAI GPT-2 model)"),l0e.forEach(t),$ar=i(W),DC=s(W,"LI",{});var i0e=n(DC);Vge=s(i0e,"STRONG",{});var Ast=n(Vge);Iar=r(Ast,"layoutlm"),Ast.forEach(t),jar=r(i0e," \u2014 "),Vq=s(i0e,"A",{href:!0});var Lst=n(Vq);Nar=r(Lst,"TFLayoutLMForSequenceClassification"),Lst.forEach(t),Dar=r(i0e," (LayoutLM model)"),i0e.forEach(t),qar=i(W),qC=s(W,"LI",{});var d0e=n(qC);Wge=s(d0e,"STRONG",{});var Bst=n(Wge);Gar=r(Bst,"longformer"),Bst.forEach(t),Oar=r(d0e," \u2014 "),Wq=s(d0e,"A",{href:!0});var xst=n(Wq);Xar=r(xst,"TFLongformerForSequenceClassification"),xst.forEach(t),zar=r(d0e," (Longformer model)"),d0e.forEach(t),Var=i(W),GC=s(W,"LI",{});var c0e=n(GC);Qge=s(c0e,"STRONG",{});var kst=n(Qge);War=r(kst,"mobilebert"),kst.forEach(t),Qar=r(c0e," \u2014 "),Qq=s(c0e,"A",{href:!0});var Rst=n(Qq);Har=r(Rst,"TFMobileBertForSequenceClassification"),Rst.forEach(t),Uar=r(c0e," (MobileBERT model)"),c0e.forEach(t),Jar=i(W),OC=s(W,"LI",{});var m0e=n(OC);Hge=s(m0e,"STRONG",{});var Sst=n(Hge);Yar=r(Sst,"mpnet"),Sst.forEach(t),Kar=r(m0e," \u2014 "),Hq=s(m0e,"A",{href:!0});var Pst=n(Hq);Zar=r(Pst,"TFMPNetForSequenceClassification"),Pst.forEach(t),esr=r(m0e," (MPNet model)"),m0e.forEach(t),osr=i(W),XC=s(W,"LI",{});var f0e=n(XC);Uge=s(f0e,"STRONG",{});var $st=n(Uge);rsr=r($st,"openai-gpt"),$st.forEach(t),tsr=r(f0e," \u2014 "),Uq=s(f0e,"A",{href:!0});var Ist=n(Uq);asr=r(Ist,"TFOpenAIGPTForSequenceClassification"),Ist.forEach(t),ssr=r(f0e," (OpenAI GPT model)"),f0e.forEach(t),nsr=i(W),zC=s(W,"LI",{});var g0e=n(zC);Jge=s(g0e,"STRONG",{});var jst=n(Jge);lsr=r(jst,"rembert"),jst.forEach(t),isr=r(g0e," \u2014 "),Jq=s(g0e,"A",{href:!0});var Nst=n(Jq);dsr=r(Nst,"TFRemBertForSequenceClassification"),Nst.forEach(t),csr=r(g0e," (RemBERT model)"),g0e.forEach(t),msr=i(W),VC=s(W,"LI",{});var h0e=n(VC);Yge=s(h0e,"STRONG",{});var Dst=n(Yge);fsr=r(Dst,"roberta"),Dst.forEach(t),gsr=r(h0e," \u2014 "),Yq=s(h0e,"A",{href:!0});var qst=n(Yq);hsr=r(qst,"TFRobertaForSequenceClassification"),qst.forEach(t),usr=r(h0e," (RoBERTa model)"),h0e.forEach(t),psr=i(W),WC=s(W,"LI",{});var u0e=n(WC);Kge=s(u0e,"STRONG",{});var Gst=n(Kge);_sr=r(Gst,"roformer"),Gst.forEach(t),bsr=r(u0e," \u2014 "),Kq=s(u0e,"A",{href:!0});var Ost=n(Kq);vsr=r(Ost,"TFRoFormerForSequenceClassification"),Ost.forEach(t),Tsr=r(u0e," (RoFormer model)"),u0e.forEach(t),Fsr=i(W),QC=s(W,"LI",{});var p0e=n(QC);Zge=s(p0e,"STRONG",{});var Xst=n(Zge);Csr=r(Xst,"tapas"),Xst.forEach(t),Msr=r(p0e," \u2014 "),Zq=s(p0e,"A",{href:!0});var zst=n(Zq);Esr=r(zst,"TFTapasForSequenceClassification"),zst.forEach(t),ysr=r(p0e," (TAPAS model)"),p0e.forEach(t),wsr=i(W),HC=s(W,"LI",{});var _0e=n(HC);ehe=s(_0e,"STRONG",{});var Vst=n(ehe);Asr=r(Vst,"transfo-xl"),Vst.forEach(t),Lsr=r(_0e," \u2014 "),eG=s(_0e,"A",{href:!0});var Wst=n(eG);Bsr=r(Wst,"TFTransfoXLForSequenceClassification"),Wst.forEach(t),xsr=r(_0e," (Transformer-XL model)"),_0e.forEach(t),ksr=i(W),UC=s(W,"LI",{});var b0e=n(UC);ohe=s(b0e,"STRONG",{});var Qst=n(ohe);Rsr=r(Qst,"xlm"),Qst.forEach(t),Ssr=r(b0e," \u2014 "),oG=s(b0e,"A",{href:!0});var Hst=n(oG);Psr=r(Hst,"TFXLMForSequenceClassification"),Hst.forEach(t),$sr=r(b0e," (XLM model)"),b0e.forEach(t),Isr=i(W),JC=s(W,"LI",{});var v0e=n(JC);rhe=s(v0e,"STRONG",{});var Ust=n(rhe);jsr=r(Ust,"xlm-roberta"),Ust.forEach(t),Nsr=r(v0e," \u2014 "),rG=s(v0e,"A",{href:!0});var Jst=n(rG);Dsr=r(Jst,"TFXLMRobertaForSequenceClassification"),Jst.forEach(t),qsr=r(v0e," (XLM-RoBERTa model)"),v0e.forEach(t),Gsr=i(W),YC=s(W,"LI",{});var T0e=n(YC);the=s(T0e,"STRONG",{});var Yst=n(the);Osr=r(Yst,"xlnet"),Yst.forEach(t),Xsr=r(T0e," \u2014 "),tG=s(T0e,"A",{href:!0});var Kst=n(tG);zsr=r(Kst,"TFXLNetForSequenceClassification"),Kst.forEach(t),Vsr=r(T0e," (XLNet model)"),T0e.forEach(t),W.forEach(t),Wsr=i(pa),ahe=s(pa,"P",{});var Zst=n(ahe);Qsr=r(Zst,"Examples:"),Zst.forEach(t),Hsr=i(pa),f(w6.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),L9e=i(d),Cc=s(d,"H2",{class:!0});var Nxe=n(Cc);KC=s(Nxe,"A",{id:!0,class:!0,href:!0});var ent=n(KC);she=s(ent,"SPAN",{});var ont=n(she);f(A6.$$.fragment,ont),ont.forEach(t),ent.forEach(t),Usr=i(Nxe),nhe=s(Nxe,"SPAN",{});var rnt=n(nhe);Jsr=r(rnt,"TFAutoModelForMultipleChoice"),rnt.forEach(t),Nxe.forEach(t),B9e=i(d),Tr=s(d,"DIV",{class:!0});var Xl=n(Tr);f(L6.$$.fragment,Xl),Ysr=i(Xl),Mc=s(Xl,"P",{});var aV=n(Mc);Ksr=r(aV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lhe=s(aV,"CODE",{});var tnt=n(lhe);Zsr=r(tnt,"from_pretrained()"),tnt.forEach(t),enr=r(aV,"class method or the "),ihe=s(aV,"CODE",{});var ant=n(ihe);onr=r(ant,"from_config()"),ant.forEach(t),rnr=r(aV,`class
method.`),aV.forEach(t),tnr=i(Xl),B6=s(Xl,"P",{});var Dxe=n(B6);anr=r(Dxe,"This class cannot be instantiated directly using "),dhe=s(Dxe,"CODE",{});var snt=n(dhe);snr=r(snt,"__init__()"),snt.forEach(t),nnr=r(Dxe," (throws an error)."),Dxe.forEach(t),lnr=i(Xl),gt=s(Xl,"DIV",{class:!0});var zl=n(gt);f(x6.$$.fragment,zl),inr=i(zl),che=s(zl,"P",{});var nnt=n(che);dnr=r(nnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nnt.forEach(t),cnr=i(zl),Ec=s(zl,"P",{});var sV=n(Ec);mnr=r(sV,`Note:
Loading a model from its configuration file does `),mhe=s(sV,"STRONG",{});var lnt=n(mhe);fnr=r(lnt,"not"),lnt.forEach(t),gnr=r(sV,` load the model weights. It only affects the
model\u2019s configuration. Use `),fhe=s(sV,"CODE",{});var int=n(fhe);hnr=r(int,"from_pretrained()"),int.forEach(t),unr=r(sV,"to load the model weights."),sV.forEach(t),pnr=i(zl),ghe=s(zl,"P",{});var dnt=n(ghe);_nr=r(dnt,"Examples:"),dnt.forEach(t),bnr=i(zl),f(k6.$$.fragment,zl),zl.forEach(t),vnr=i(Xl),To=s(Xl,"DIV",{class:!0});var _a=n(To);f(R6.$$.fragment,_a),Tnr=i(_a),hhe=s(_a,"P",{});var cnt=n(hhe);Fnr=r(cnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cnt.forEach(t),Cnr=i(_a),hs=s(_a,"P",{});var N3=n(hs);Mnr=r(N3,"The model class to instantiate is selected based on the "),uhe=s(N3,"CODE",{});var mnt=n(uhe);Enr=r(mnt,"model_type"),mnt.forEach(t),ynr=r(N3,` property of the config object (either
passed as an argument or loaded from `),phe=s(N3,"CODE",{});var fnt=n(phe);wnr=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),Anr=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=s(N3,"CODE",{});var gnt=n(_he);Lnr=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),Bnr=r(N3,":"),N3.forEach(t),xnr=i(_a),te=s(_a,"UL",{});var se=n(te);ZC=s(se,"LI",{});var F0e=n(ZC);bhe=s(F0e,"STRONG",{});var hnt=n(bhe);knr=r(hnt,"albert"),hnt.forEach(t),Rnr=r(F0e," \u2014 "),aG=s(F0e,"A",{href:!0});var unt=n(aG);Snr=r(unt,"TFAlbertForMultipleChoice"),unt.forEach(t),Pnr=r(F0e," (ALBERT model)"),F0e.forEach(t),$nr=i(se),e4=s(se,"LI",{});var C0e=n(e4);vhe=s(C0e,"STRONG",{});var pnt=n(vhe);Inr=r(pnt,"bert"),pnt.forEach(t),jnr=r(C0e," \u2014 "),sG=s(C0e,"A",{href:!0});var _nt=n(sG);Nnr=r(_nt,"TFBertForMultipleChoice"),_nt.forEach(t),Dnr=r(C0e," (BERT model)"),C0e.forEach(t),qnr=i(se),o4=s(se,"LI",{});var M0e=n(o4);The=s(M0e,"STRONG",{});var bnt=n(The);Gnr=r(bnt,"camembert"),bnt.forEach(t),Onr=r(M0e," \u2014 "),nG=s(M0e,"A",{href:!0});var vnt=n(nG);Xnr=r(vnt,"TFCamembertForMultipleChoice"),vnt.forEach(t),znr=r(M0e," (CamemBERT model)"),M0e.forEach(t),Vnr=i(se),r4=s(se,"LI",{});var E0e=n(r4);Fhe=s(E0e,"STRONG",{});var Tnt=n(Fhe);Wnr=r(Tnt,"convbert"),Tnt.forEach(t),Qnr=r(E0e," \u2014 "),lG=s(E0e,"A",{href:!0});var Fnt=n(lG);Hnr=r(Fnt,"TFConvBertForMultipleChoice"),Fnt.forEach(t),Unr=r(E0e," (ConvBERT model)"),E0e.forEach(t),Jnr=i(se),t4=s(se,"LI",{});var y0e=n(t4);Che=s(y0e,"STRONG",{});var Cnt=n(Che);Ynr=r(Cnt,"distilbert"),Cnt.forEach(t),Knr=r(y0e," \u2014 "),iG=s(y0e,"A",{href:!0});var Mnt=n(iG);Znr=r(Mnt,"TFDistilBertForMultipleChoice"),Mnt.forEach(t),elr=r(y0e," (DistilBERT model)"),y0e.forEach(t),olr=i(se),a4=s(se,"LI",{});var w0e=n(a4);Mhe=s(w0e,"STRONG",{});var Ent=n(Mhe);rlr=r(Ent,"electra"),Ent.forEach(t),tlr=r(w0e," \u2014 "),dG=s(w0e,"A",{href:!0});var ynt=n(dG);alr=r(ynt,"TFElectraForMultipleChoice"),ynt.forEach(t),slr=r(w0e," (ELECTRA model)"),w0e.forEach(t),nlr=i(se),s4=s(se,"LI",{});var A0e=n(s4);Ehe=s(A0e,"STRONG",{});var wnt=n(Ehe);llr=r(wnt,"flaubert"),wnt.forEach(t),ilr=r(A0e," \u2014 "),cG=s(A0e,"A",{href:!0});var Ant=n(cG);dlr=r(Ant,"TFFlaubertForMultipleChoice"),Ant.forEach(t),clr=r(A0e," (FlauBERT model)"),A0e.forEach(t),mlr=i(se),n4=s(se,"LI",{});var L0e=n(n4);yhe=s(L0e,"STRONG",{});var Lnt=n(yhe);flr=r(Lnt,"funnel"),Lnt.forEach(t),glr=r(L0e," \u2014 "),mG=s(L0e,"A",{href:!0});var Bnt=n(mG);hlr=r(Bnt,"TFFunnelForMultipleChoice"),Bnt.forEach(t),ulr=r(L0e," (Funnel Transformer model)"),L0e.forEach(t),plr=i(se),l4=s(se,"LI",{});var B0e=n(l4);whe=s(B0e,"STRONG",{});var xnt=n(whe);_lr=r(xnt,"longformer"),xnt.forEach(t),blr=r(B0e," \u2014 "),fG=s(B0e,"A",{href:!0});var knt=n(fG);vlr=r(knt,"TFLongformerForMultipleChoice"),knt.forEach(t),Tlr=r(B0e," (Longformer model)"),B0e.forEach(t),Flr=i(se),i4=s(se,"LI",{});var x0e=n(i4);Ahe=s(x0e,"STRONG",{});var Rnt=n(Ahe);Clr=r(Rnt,"mobilebert"),Rnt.forEach(t),Mlr=r(x0e," \u2014 "),gG=s(x0e,"A",{href:!0});var Snt=n(gG);Elr=r(Snt,"TFMobileBertForMultipleChoice"),Snt.forEach(t),ylr=r(x0e," (MobileBERT model)"),x0e.forEach(t),wlr=i(se),d4=s(se,"LI",{});var k0e=n(d4);Lhe=s(k0e,"STRONG",{});var Pnt=n(Lhe);Alr=r(Pnt,"mpnet"),Pnt.forEach(t),Llr=r(k0e," \u2014 "),hG=s(k0e,"A",{href:!0});var $nt=n(hG);Blr=r($nt,"TFMPNetForMultipleChoice"),$nt.forEach(t),xlr=r(k0e," (MPNet model)"),k0e.forEach(t),klr=i(se),c4=s(se,"LI",{});var R0e=n(c4);Bhe=s(R0e,"STRONG",{});var Int=n(Bhe);Rlr=r(Int,"rembert"),Int.forEach(t),Slr=r(R0e," \u2014 "),uG=s(R0e,"A",{href:!0});var jnt=n(uG);Plr=r(jnt,"TFRemBertForMultipleChoice"),jnt.forEach(t),$lr=r(R0e," (RemBERT model)"),R0e.forEach(t),Ilr=i(se),m4=s(se,"LI",{});var S0e=n(m4);xhe=s(S0e,"STRONG",{});var Nnt=n(xhe);jlr=r(Nnt,"roberta"),Nnt.forEach(t),Nlr=r(S0e," \u2014 "),pG=s(S0e,"A",{href:!0});var Dnt=n(pG);Dlr=r(Dnt,"TFRobertaForMultipleChoice"),Dnt.forEach(t),qlr=r(S0e," (RoBERTa model)"),S0e.forEach(t),Glr=i(se),f4=s(se,"LI",{});var P0e=n(f4);khe=s(P0e,"STRONG",{});var qnt=n(khe);Olr=r(qnt,"roformer"),qnt.forEach(t),Xlr=r(P0e," \u2014 "),_G=s(P0e,"A",{href:!0});var Gnt=n(_G);zlr=r(Gnt,"TFRoFormerForMultipleChoice"),Gnt.forEach(t),Vlr=r(P0e," (RoFormer model)"),P0e.forEach(t),Wlr=i(se),g4=s(se,"LI",{});var $0e=n(g4);Rhe=s($0e,"STRONG",{});var Ont=n(Rhe);Qlr=r(Ont,"xlm"),Ont.forEach(t),Hlr=r($0e," \u2014 "),bG=s($0e,"A",{href:!0});var Xnt=n(bG);Ulr=r(Xnt,"TFXLMForMultipleChoice"),Xnt.forEach(t),Jlr=r($0e," (XLM model)"),$0e.forEach(t),Ylr=i(se),h4=s(se,"LI",{});var I0e=n(h4);She=s(I0e,"STRONG",{});var znt=n(She);Klr=r(znt,"xlm-roberta"),znt.forEach(t),Zlr=r(I0e," \u2014 "),vG=s(I0e,"A",{href:!0});var Vnt=n(vG);eir=r(Vnt,"TFXLMRobertaForMultipleChoice"),Vnt.forEach(t),oir=r(I0e," (XLM-RoBERTa model)"),I0e.forEach(t),rir=i(se),u4=s(se,"LI",{});var j0e=n(u4);Phe=s(j0e,"STRONG",{});var Wnt=n(Phe);tir=r(Wnt,"xlnet"),Wnt.forEach(t),air=r(j0e," \u2014 "),TG=s(j0e,"A",{href:!0});var Qnt=n(TG);sir=r(Qnt,"TFXLNetForMultipleChoice"),Qnt.forEach(t),nir=r(j0e," (XLNet model)"),j0e.forEach(t),se.forEach(t),lir=i(_a),$he=s(_a,"P",{});var Hnt=n($he);iir=r(Hnt,"Examples:"),Hnt.forEach(t),dir=i(_a),f(S6.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),x9e=i(d),yc=s(d,"H2",{class:!0});var qxe=n(yc);p4=s(qxe,"A",{id:!0,class:!0,href:!0});var Unt=n(p4);Ihe=s(Unt,"SPAN",{});var Jnt=n(Ihe);f(P6.$$.fragment,Jnt),Jnt.forEach(t),Unt.forEach(t),cir=i(qxe),jhe=s(qxe,"SPAN",{});var Ynt=n(jhe);mir=r(Ynt,"TFAutoModelForTableQuestionAnswering"),Ynt.forEach(t),qxe.forEach(t),k9e=i(d),Fr=s(d,"DIV",{class:!0});var Vl=n(Fr);f($6.$$.fragment,Vl),fir=i(Vl),wc=s(Vl,"P",{});var nV=n(wc);gir=r(nV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nhe=s(nV,"CODE",{});var Knt=n(Nhe);hir=r(Knt,"from_pretrained()"),Knt.forEach(t),uir=r(nV,"class method or the "),Dhe=s(nV,"CODE",{});var Znt=n(Dhe);pir=r(Znt,"from_config()"),Znt.forEach(t),_ir=r(nV,`class
method.`),nV.forEach(t),bir=i(Vl),I6=s(Vl,"P",{});var Gxe=n(I6);vir=r(Gxe,"This class cannot be instantiated directly using "),qhe=s(Gxe,"CODE",{});var elt=n(qhe);Tir=r(elt,"__init__()"),elt.forEach(t),Fir=r(Gxe," (throws an error)."),Gxe.forEach(t),Cir=i(Vl),ht=s(Vl,"DIV",{class:!0});var Wl=n(ht);f(j6.$$.fragment,Wl),Mir=i(Wl),Ghe=s(Wl,"P",{});var olt=n(Ghe);Eir=r(olt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),olt.forEach(t),yir=i(Wl),Ac=s(Wl,"P",{});var lV=n(Ac);wir=r(lV,`Note:
Loading a model from its configuration file does `),Ohe=s(lV,"STRONG",{});var rlt=n(Ohe);Air=r(rlt,"not"),rlt.forEach(t),Lir=r(lV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=s(lV,"CODE",{});var tlt=n(Xhe);Bir=r(tlt,"from_pretrained()"),tlt.forEach(t),xir=r(lV,"to load the model weights."),lV.forEach(t),kir=i(Wl),zhe=s(Wl,"P",{});var alt=n(zhe);Rir=r(alt,"Examples:"),alt.forEach(t),Sir=i(Wl),f(N6.$$.fragment,Wl),Wl.forEach(t),Pir=i(Vl),Fo=s(Vl,"DIV",{class:!0});var ba=n(Fo);f(D6.$$.fragment,ba),$ir=i(ba),Vhe=s(ba,"P",{});var slt=n(Vhe);Iir=r(slt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),slt.forEach(t),jir=i(ba),us=s(ba,"P",{});var D3=n(us);Nir=r(D3,"The model class to instantiate is selected based on the "),Whe=s(D3,"CODE",{});var nlt=n(Whe);Dir=r(nlt,"model_type"),nlt.forEach(t),qir=r(D3,` property of the config object (either
passed as an argument or loaded from `),Qhe=s(D3,"CODE",{});var llt=n(Qhe);Gir=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),Oir=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=s(D3,"CODE",{});var ilt=n(Hhe);Xir=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),zir=r(D3,":"),D3.forEach(t),Vir=i(ba),Uhe=s(ba,"UL",{});var dlt=n(Uhe);_4=s(dlt,"LI",{});var N0e=n(_4);Jhe=s(N0e,"STRONG",{});var clt=n(Jhe);Wir=r(clt,"tapas"),clt.forEach(t),Qir=r(N0e," \u2014 "),FG=s(N0e,"A",{href:!0});var mlt=n(FG);Hir=r(mlt,"TFTapasForQuestionAnswering"),mlt.forEach(t),Uir=r(N0e," (TAPAS model)"),N0e.forEach(t),dlt.forEach(t),Jir=i(ba),Yhe=s(ba,"P",{});var flt=n(Yhe);Yir=r(flt,"Examples:"),flt.forEach(t),Kir=i(ba),f(q6.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),R9e=i(d),Lc=s(d,"H2",{class:!0});var Oxe=n(Lc);b4=s(Oxe,"A",{id:!0,class:!0,href:!0});var glt=n(b4);Khe=s(glt,"SPAN",{});var hlt=n(Khe);f(G6.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),Zir=i(Oxe),Zhe=s(Oxe,"SPAN",{});var ult=n(Zhe);edr=r(ult,"TFAutoModelForTokenClassification"),ult.forEach(t),Oxe.forEach(t),S9e=i(d),Cr=s(d,"DIV",{class:!0});var Ql=n(Cr);f(O6.$$.fragment,Ql),odr=i(Ql),Bc=s(Ql,"P",{});var iV=n(Bc);rdr=r(iV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eue=s(iV,"CODE",{});var plt=n(eue);tdr=r(plt,"from_pretrained()"),plt.forEach(t),adr=r(iV,"class method or the "),oue=s(iV,"CODE",{});var _lt=n(oue);sdr=r(_lt,"from_config()"),_lt.forEach(t),ndr=r(iV,`class
method.`),iV.forEach(t),ldr=i(Ql),X6=s(Ql,"P",{});var Xxe=n(X6);idr=r(Xxe,"This class cannot be instantiated directly using "),rue=s(Xxe,"CODE",{});var blt=n(rue);ddr=r(blt,"__init__()"),blt.forEach(t),cdr=r(Xxe," (throws an error)."),Xxe.forEach(t),mdr=i(Ql),ut=s(Ql,"DIV",{class:!0});var Hl=n(ut);f(z6.$$.fragment,Hl),fdr=i(Hl),tue=s(Hl,"P",{});var vlt=n(tue);gdr=r(vlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vlt.forEach(t),hdr=i(Hl),xc=s(Hl,"P",{});var dV=n(xc);udr=r(dV,`Note:
Loading a model from its configuration file does `),aue=s(dV,"STRONG",{});var Tlt=n(aue);pdr=r(Tlt,"not"),Tlt.forEach(t),_dr=r(dV,` load the model weights. It only affects the
model\u2019s configuration. Use `),sue=s(dV,"CODE",{});var Flt=n(sue);bdr=r(Flt,"from_pretrained()"),Flt.forEach(t),vdr=r(dV,"to load the model weights."),dV.forEach(t),Tdr=i(Hl),nue=s(Hl,"P",{});var Clt=n(nue);Fdr=r(Clt,"Examples:"),Clt.forEach(t),Cdr=i(Hl),f(V6.$$.fragment,Hl),Hl.forEach(t),Mdr=i(Ql),Co=s(Ql,"DIV",{class:!0});var va=n(Co);f(W6.$$.fragment,va),Edr=i(va),lue=s(va,"P",{});var Mlt=n(lue);ydr=r(Mlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Mlt.forEach(t),wdr=i(va),ps=s(va,"P",{});var q3=n(ps);Adr=r(q3,"The model class to instantiate is selected based on the "),iue=s(q3,"CODE",{});var Elt=n(iue);Ldr=r(Elt,"model_type"),Elt.forEach(t),Bdr=r(q3,` property of the config object (either
passed as an argument or loaded from `),due=s(q3,"CODE",{});var ylt=n(due);xdr=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),kdr=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=s(q3,"CODE",{});var wlt=n(cue);Rdr=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),Sdr=r(q3,":"),q3.forEach(t),Pdr=i(va),K=s(va,"UL",{});var oe=n(K);v4=s(oe,"LI",{});var D0e=n(v4);mue=s(D0e,"STRONG",{});var Alt=n(mue);$dr=r(Alt,"albert"),Alt.forEach(t),Idr=r(D0e," \u2014 "),CG=s(D0e,"A",{href:!0});var Llt=n(CG);jdr=r(Llt,"TFAlbertForTokenClassification"),Llt.forEach(t),Ndr=r(D0e," (ALBERT model)"),D0e.forEach(t),Ddr=i(oe),T4=s(oe,"LI",{});var q0e=n(T4);fue=s(q0e,"STRONG",{});var Blt=n(fue);qdr=r(Blt,"bert"),Blt.forEach(t),Gdr=r(q0e," \u2014 "),MG=s(q0e,"A",{href:!0});var xlt=n(MG);Odr=r(xlt,"TFBertForTokenClassification"),xlt.forEach(t),Xdr=r(q0e," (BERT model)"),q0e.forEach(t),zdr=i(oe),F4=s(oe,"LI",{});var G0e=n(F4);gue=s(G0e,"STRONG",{});var klt=n(gue);Vdr=r(klt,"camembert"),klt.forEach(t),Wdr=r(G0e," \u2014 "),EG=s(G0e,"A",{href:!0});var Rlt=n(EG);Qdr=r(Rlt,"TFCamembertForTokenClassification"),Rlt.forEach(t),Hdr=r(G0e," (CamemBERT model)"),G0e.forEach(t),Udr=i(oe),C4=s(oe,"LI",{});var O0e=n(C4);hue=s(O0e,"STRONG",{});var Slt=n(hue);Jdr=r(Slt,"convbert"),Slt.forEach(t),Ydr=r(O0e," \u2014 "),yG=s(O0e,"A",{href:!0});var Plt=n(yG);Kdr=r(Plt,"TFConvBertForTokenClassification"),Plt.forEach(t),Zdr=r(O0e," (ConvBERT model)"),O0e.forEach(t),ecr=i(oe),M4=s(oe,"LI",{});var X0e=n(M4);uue=s(X0e,"STRONG",{});var $lt=n(uue);ocr=r($lt,"deberta"),$lt.forEach(t),rcr=r(X0e," \u2014 "),wG=s(X0e,"A",{href:!0});var Ilt=n(wG);tcr=r(Ilt,"TFDebertaForTokenClassification"),Ilt.forEach(t),acr=r(X0e," (DeBERTa model)"),X0e.forEach(t),scr=i(oe),E4=s(oe,"LI",{});var z0e=n(E4);pue=s(z0e,"STRONG",{});var jlt=n(pue);ncr=r(jlt,"deberta-v2"),jlt.forEach(t),lcr=r(z0e," \u2014 "),AG=s(z0e,"A",{href:!0});var Nlt=n(AG);icr=r(Nlt,"TFDebertaV2ForTokenClassification"),Nlt.forEach(t),dcr=r(z0e," (DeBERTa-v2 model)"),z0e.forEach(t),ccr=i(oe),y4=s(oe,"LI",{});var V0e=n(y4);_ue=s(V0e,"STRONG",{});var Dlt=n(_ue);mcr=r(Dlt,"distilbert"),Dlt.forEach(t),fcr=r(V0e," \u2014 "),LG=s(V0e,"A",{href:!0});var qlt=n(LG);gcr=r(qlt,"TFDistilBertForTokenClassification"),qlt.forEach(t),hcr=r(V0e," (DistilBERT model)"),V0e.forEach(t),ucr=i(oe),w4=s(oe,"LI",{});var W0e=n(w4);bue=s(W0e,"STRONG",{});var Glt=n(bue);pcr=r(Glt,"electra"),Glt.forEach(t),_cr=r(W0e," \u2014 "),BG=s(W0e,"A",{href:!0});var Olt=n(BG);bcr=r(Olt,"TFElectraForTokenClassification"),Olt.forEach(t),vcr=r(W0e," (ELECTRA model)"),W0e.forEach(t),Tcr=i(oe),A4=s(oe,"LI",{});var Q0e=n(A4);vue=s(Q0e,"STRONG",{});var Xlt=n(vue);Fcr=r(Xlt,"flaubert"),Xlt.forEach(t),Ccr=r(Q0e," \u2014 "),xG=s(Q0e,"A",{href:!0});var zlt=n(xG);Mcr=r(zlt,"TFFlaubertForTokenClassification"),zlt.forEach(t),Ecr=r(Q0e," (FlauBERT model)"),Q0e.forEach(t),ycr=i(oe),L4=s(oe,"LI",{});var H0e=n(L4);Tue=s(H0e,"STRONG",{});var Vlt=n(Tue);wcr=r(Vlt,"funnel"),Vlt.forEach(t),Acr=r(H0e," \u2014 "),kG=s(H0e,"A",{href:!0});var Wlt=n(kG);Lcr=r(Wlt,"TFFunnelForTokenClassification"),Wlt.forEach(t),Bcr=r(H0e," (Funnel Transformer model)"),H0e.forEach(t),xcr=i(oe),B4=s(oe,"LI",{});var U0e=n(B4);Fue=s(U0e,"STRONG",{});var Qlt=n(Fue);kcr=r(Qlt,"layoutlm"),Qlt.forEach(t),Rcr=r(U0e," \u2014 "),RG=s(U0e,"A",{href:!0});var Hlt=n(RG);Scr=r(Hlt,"TFLayoutLMForTokenClassification"),Hlt.forEach(t),Pcr=r(U0e," (LayoutLM model)"),U0e.forEach(t),$cr=i(oe),x4=s(oe,"LI",{});var J0e=n(x4);Cue=s(J0e,"STRONG",{});var Ult=n(Cue);Icr=r(Ult,"longformer"),Ult.forEach(t),jcr=r(J0e," \u2014 "),SG=s(J0e,"A",{href:!0});var Jlt=n(SG);Ncr=r(Jlt,"TFLongformerForTokenClassification"),Jlt.forEach(t),Dcr=r(J0e," (Longformer model)"),J0e.forEach(t),qcr=i(oe),k4=s(oe,"LI",{});var Y0e=n(k4);Mue=s(Y0e,"STRONG",{});var Ylt=n(Mue);Gcr=r(Ylt,"mobilebert"),Ylt.forEach(t),Ocr=r(Y0e," \u2014 "),PG=s(Y0e,"A",{href:!0});var Klt=n(PG);Xcr=r(Klt,"TFMobileBertForTokenClassification"),Klt.forEach(t),zcr=r(Y0e," (MobileBERT model)"),Y0e.forEach(t),Vcr=i(oe),R4=s(oe,"LI",{});var K0e=n(R4);Eue=s(K0e,"STRONG",{});var Zlt=n(Eue);Wcr=r(Zlt,"mpnet"),Zlt.forEach(t),Qcr=r(K0e," \u2014 "),$G=s(K0e,"A",{href:!0});var eit=n($G);Hcr=r(eit,"TFMPNetForTokenClassification"),eit.forEach(t),Ucr=r(K0e," (MPNet model)"),K0e.forEach(t),Jcr=i(oe),S4=s(oe,"LI",{});var Z0e=n(S4);yue=s(Z0e,"STRONG",{});var oit=n(yue);Ycr=r(oit,"rembert"),oit.forEach(t),Kcr=r(Z0e," \u2014 "),IG=s(Z0e,"A",{href:!0});var rit=n(IG);Zcr=r(rit,"TFRemBertForTokenClassification"),rit.forEach(t),emr=r(Z0e," (RemBERT model)"),Z0e.forEach(t),omr=i(oe),P4=s(oe,"LI",{});var eLe=n(P4);wue=s(eLe,"STRONG",{});var tit=n(wue);rmr=r(tit,"roberta"),tit.forEach(t),tmr=r(eLe," \u2014 "),jG=s(eLe,"A",{href:!0});var ait=n(jG);amr=r(ait,"TFRobertaForTokenClassification"),ait.forEach(t),smr=r(eLe," (RoBERTa model)"),eLe.forEach(t),nmr=i(oe),$4=s(oe,"LI",{});var oLe=n($4);Aue=s(oLe,"STRONG",{});var sit=n(Aue);lmr=r(sit,"roformer"),sit.forEach(t),imr=r(oLe," \u2014 "),NG=s(oLe,"A",{href:!0});var nit=n(NG);dmr=r(nit,"TFRoFormerForTokenClassification"),nit.forEach(t),cmr=r(oLe," (RoFormer model)"),oLe.forEach(t),mmr=i(oe),I4=s(oe,"LI",{});var rLe=n(I4);Lue=s(rLe,"STRONG",{});var lit=n(Lue);fmr=r(lit,"xlm"),lit.forEach(t),gmr=r(rLe," \u2014 "),DG=s(rLe,"A",{href:!0});var iit=n(DG);hmr=r(iit,"TFXLMForTokenClassification"),iit.forEach(t),umr=r(rLe," (XLM model)"),rLe.forEach(t),pmr=i(oe),j4=s(oe,"LI",{});var tLe=n(j4);Bue=s(tLe,"STRONG",{});var dit=n(Bue);_mr=r(dit,"xlm-roberta"),dit.forEach(t),bmr=r(tLe," \u2014 "),qG=s(tLe,"A",{href:!0});var cit=n(qG);vmr=r(cit,"TFXLMRobertaForTokenClassification"),cit.forEach(t),Tmr=r(tLe," (XLM-RoBERTa model)"),tLe.forEach(t),Fmr=i(oe),N4=s(oe,"LI",{});var aLe=n(N4);xue=s(aLe,"STRONG",{});var mit=n(xue);Cmr=r(mit,"xlnet"),mit.forEach(t),Mmr=r(aLe," \u2014 "),GG=s(aLe,"A",{href:!0});var fit=n(GG);Emr=r(fit,"TFXLNetForTokenClassification"),fit.forEach(t),ymr=r(aLe," (XLNet model)"),aLe.forEach(t),oe.forEach(t),wmr=i(va),kue=s(va,"P",{});var git=n(kue);Amr=r(git,"Examples:"),git.forEach(t),Lmr=i(va),f(Q6.$$.fragment,va),va.forEach(t),Ql.forEach(t),P9e=i(d),kc=s(d,"H2",{class:!0});var zxe=n(kc);D4=s(zxe,"A",{id:!0,class:!0,href:!0});var hit=n(D4);Rue=s(hit,"SPAN",{});var uit=n(Rue);f(H6.$$.fragment,uit),uit.forEach(t),hit.forEach(t),Bmr=i(zxe),Sue=s(zxe,"SPAN",{});var pit=n(Sue);xmr=r(pit,"TFAutoModelForQuestionAnswering"),pit.forEach(t),zxe.forEach(t),$9e=i(d),Mr=s(d,"DIV",{class:!0});var Ul=n(Mr);f(U6.$$.fragment,Ul),kmr=i(Ul),Rc=s(Ul,"P",{});var cV=n(Rc);Rmr=r(cV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pue=s(cV,"CODE",{});var _it=n(Pue);Smr=r(_it,"from_pretrained()"),_it.forEach(t),Pmr=r(cV,"class method or the "),$ue=s(cV,"CODE",{});var bit=n($ue);$mr=r(bit,"from_config()"),bit.forEach(t),Imr=r(cV,`class
method.`),cV.forEach(t),jmr=i(Ul),J6=s(Ul,"P",{});var Vxe=n(J6);Nmr=r(Vxe,"This class cannot be instantiated directly using "),Iue=s(Vxe,"CODE",{});var vit=n(Iue);Dmr=r(vit,"__init__()"),vit.forEach(t),qmr=r(Vxe," (throws an error)."),Vxe.forEach(t),Gmr=i(Ul),pt=s(Ul,"DIV",{class:!0});var Jl=n(pt);f(Y6.$$.fragment,Jl),Omr=i(Jl),jue=s(Jl,"P",{});var Tit=n(jue);Xmr=r(Tit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tit.forEach(t),zmr=i(Jl),Sc=s(Jl,"P",{});var mV=n(Sc);Vmr=r(mV,`Note:
Loading a model from its configuration file does `),Nue=s(mV,"STRONG",{});var Fit=n(Nue);Wmr=r(Fit,"not"),Fit.forEach(t),Qmr=r(mV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Due=s(mV,"CODE",{});var Cit=n(Due);Hmr=r(Cit,"from_pretrained()"),Cit.forEach(t),Umr=r(mV,"to load the model weights."),mV.forEach(t),Jmr=i(Jl),que=s(Jl,"P",{});var Mit=n(que);Ymr=r(Mit,"Examples:"),Mit.forEach(t),Kmr=i(Jl),f(K6.$$.fragment,Jl),Jl.forEach(t),Zmr=i(Ul),Mo=s(Ul,"DIV",{class:!0});var Ta=n(Mo);f(Z6.$$.fragment,Ta),efr=i(Ta),Gue=s(Ta,"P",{});var Eit=n(Gue);ofr=r(Eit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Eit.forEach(t),rfr=i(Ta),_s=s(Ta,"P",{});var G3=n(_s);tfr=r(G3,"The model class to instantiate is selected based on the "),Oue=s(G3,"CODE",{});var yit=n(Oue);afr=r(yit,"model_type"),yit.forEach(t),sfr=r(G3,` property of the config object (either
passed as an argument or loaded from `),Xue=s(G3,"CODE",{});var wit=n(Xue);nfr=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),lfr=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=s(G3,"CODE",{});var Ait=n(zue);ifr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),dfr=r(G3,":"),G3.forEach(t),cfr=i(Ta),Z=s(Ta,"UL",{});var re=n(Z);q4=s(re,"LI",{});var sLe=n(q4);Vue=s(sLe,"STRONG",{});var Lit=n(Vue);mfr=r(Lit,"albert"),Lit.forEach(t),ffr=r(sLe," \u2014 "),OG=s(sLe,"A",{href:!0});var Bit=n(OG);gfr=r(Bit,"TFAlbertForQuestionAnswering"),Bit.forEach(t),hfr=r(sLe," (ALBERT model)"),sLe.forEach(t),ufr=i(re),G4=s(re,"LI",{});var nLe=n(G4);Wue=s(nLe,"STRONG",{});var xit=n(Wue);pfr=r(xit,"bert"),xit.forEach(t),_fr=r(nLe," \u2014 "),XG=s(nLe,"A",{href:!0});var kit=n(XG);bfr=r(kit,"TFBertForQuestionAnswering"),kit.forEach(t),vfr=r(nLe," (BERT model)"),nLe.forEach(t),Tfr=i(re),O4=s(re,"LI",{});var lLe=n(O4);Que=s(lLe,"STRONG",{});var Rit=n(Que);Ffr=r(Rit,"camembert"),Rit.forEach(t),Cfr=r(lLe," \u2014 "),zG=s(lLe,"A",{href:!0});var Sit=n(zG);Mfr=r(Sit,"TFCamembertForQuestionAnswering"),Sit.forEach(t),Efr=r(lLe," (CamemBERT model)"),lLe.forEach(t),yfr=i(re),X4=s(re,"LI",{});var iLe=n(X4);Hue=s(iLe,"STRONG",{});var Pit=n(Hue);wfr=r(Pit,"convbert"),Pit.forEach(t),Afr=r(iLe," \u2014 "),VG=s(iLe,"A",{href:!0});var $it=n(VG);Lfr=r($it,"TFConvBertForQuestionAnswering"),$it.forEach(t),Bfr=r(iLe," (ConvBERT model)"),iLe.forEach(t),xfr=i(re),z4=s(re,"LI",{});var dLe=n(z4);Uue=s(dLe,"STRONG",{});var Iit=n(Uue);kfr=r(Iit,"deberta"),Iit.forEach(t),Rfr=r(dLe," \u2014 "),WG=s(dLe,"A",{href:!0});var jit=n(WG);Sfr=r(jit,"TFDebertaForQuestionAnswering"),jit.forEach(t),Pfr=r(dLe," (DeBERTa model)"),dLe.forEach(t),$fr=i(re),V4=s(re,"LI",{});var cLe=n(V4);Jue=s(cLe,"STRONG",{});var Nit=n(Jue);Ifr=r(Nit,"deberta-v2"),Nit.forEach(t),jfr=r(cLe," \u2014 "),QG=s(cLe,"A",{href:!0});var Dit=n(QG);Nfr=r(Dit,"TFDebertaV2ForQuestionAnswering"),Dit.forEach(t),Dfr=r(cLe," (DeBERTa-v2 model)"),cLe.forEach(t),qfr=i(re),W4=s(re,"LI",{});var mLe=n(W4);Yue=s(mLe,"STRONG",{});var qit=n(Yue);Gfr=r(qit,"distilbert"),qit.forEach(t),Ofr=r(mLe," \u2014 "),HG=s(mLe,"A",{href:!0});var Git=n(HG);Xfr=r(Git,"TFDistilBertForQuestionAnswering"),Git.forEach(t),zfr=r(mLe," (DistilBERT model)"),mLe.forEach(t),Vfr=i(re),Q4=s(re,"LI",{});var fLe=n(Q4);Kue=s(fLe,"STRONG",{});var Oit=n(Kue);Wfr=r(Oit,"electra"),Oit.forEach(t),Qfr=r(fLe," \u2014 "),UG=s(fLe,"A",{href:!0});var Xit=n(UG);Hfr=r(Xit,"TFElectraForQuestionAnswering"),Xit.forEach(t),Ufr=r(fLe," (ELECTRA model)"),fLe.forEach(t),Jfr=i(re),H4=s(re,"LI",{});var gLe=n(H4);Zue=s(gLe,"STRONG",{});var zit=n(Zue);Yfr=r(zit,"flaubert"),zit.forEach(t),Kfr=r(gLe," \u2014 "),JG=s(gLe,"A",{href:!0});var Vit=n(JG);Zfr=r(Vit,"TFFlaubertForQuestionAnsweringSimple"),Vit.forEach(t),egr=r(gLe," (FlauBERT model)"),gLe.forEach(t),ogr=i(re),U4=s(re,"LI",{});var hLe=n(U4);epe=s(hLe,"STRONG",{});var Wit=n(epe);rgr=r(Wit,"funnel"),Wit.forEach(t),tgr=r(hLe," \u2014 "),YG=s(hLe,"A",{href:!0});var Qit=n(YG);agr=r(Qit,"TFFunnelForQuestionAnswering"),Qit.forEach(t),sgr=r(hLe," (Funnel Transformer model)"),hLe.forEach(t),ngr=i(re),J4=s(re,"LI",{});var uLe=n(J4);ope=s(uLe,"STRONG",{});var Hit=n(ope);lgr=r(Hit,"longformer"),Hit.forEach(t),igr=r(uLe," \u2014 "),KG=s(uLe,"A",{href:!0});var Uit=n(KG);dgr=r(Uit,"TFLongformerForQuestionAnswering"),Uit.forEach(t),cgr=r(uLe," (Longformer model)"),uLe.forEach(t),mgr=i(re),Y4=s(re,"LI",{});var pLe=n(Y4);rpe=s(pLe,"STRONG",{});var Jit=n(rpe);fgr=r(Jit,"mobilebert"),Jit.forEach(t),ggr=r(pLe," \u2014 "),ZG=s(pLe,"A",{href:!0});var Yit=n(ZG);hgr=r(Yit,"TFMobileBertForQuestionAnswering"),Yit.forEach(t),ugr=r(pLe," (MobileBERT model)"),pLe.forEach(t),pgr=i(re),K4=s(re,"LI",{});var _Le=n(K4);tpe=s(_Le,"STRONG",{});var Kit=n(tpe);_gr=r(Kit,"mpnet"),Kit.forEach(t),bgr=r(_Le," \u2014 "),eO=s(_Le,"A",{href:!0});var Zit=n(eO);vgr=r(Zit,"TFMPNetForQuestionAnswering"),Zit.forEach(t),Tgr=r(_Le," (MPNet model)"),_Le.forEach(t),Fgr=i(re),Z4=s(re,"LI",{});var bLe=n(Z4);ape=s(bLe,"STRONG",{});var edt=n(ape);Cgr=r(edt,"rembert"),edt.forEach(t),Mgr=r(bLe," \u2014 "),oO=s(bLe,"A",{href:!0});var odt=n(oO);Egr=r(odt,"TFRemBertForQuestionAnswering"),odt.forEach(t),ygr=r(bLe," (RemBERT model)"),bLe.forEach(t),wgr=i(re),eM=s(re,"LI",{});var vLe=n(eM);spe=s(vLe,"STRONG",{});var rdt=n(spe);Agr=r(rdt,"roberta"),rdt.forEach(t),Lgr=r(vLe," \u2014 "),rO=s(vLe,"A",{href:!0});var tdt=n(rO);Bgr=r(tdt,"TFRobertaForQuestionAnswering"),tdt.forEach(t),xgr=r(vLe," (RoBERTa model)"),vLe.forEach(t),kgr=i(re),oM=s(re,"LI",{});var TLe=n(oM);npe=s(TLe,"STRONG",{});var adt=n(npe);Rgr=r(adt,"roformer"),adt.forEach(t),Sgr=r(TLe," \u2014 "),tO=s(TLe,"A",{href:!0});var sdt=n(tO);Pgr=r(sdt,"TFRoFormerForQuestionAnswering"),sdt.forEach(t),$gr=r(TLe," (RoFormer model)"),TLe.forEach(t),Igr=i(re),rM=s(re,"LI",{});var FLe=n(rM);lpe=s(FLe,"STRONG",{});var ndt=n(lpe);jgr=r(ndt,"xlm"),ndt.forEach(t),Ngr=r(FLe," \u2014 "),aO=s(FLe,"A",{href:!0});var ldt=n(aO);Dgr=r(ldt,"TFXLMForQuestionAnsweringSimple"),ldt.forEach(t),qgr=r(FLe," (XLM model)"),FLe.forEach(t),Ggr=i(re),tM=s(re,"LI",{});var CLe=n(tM);ipe=s(CLe,"STRONG",{});var idt=n(ipe);Ogr=r(idt,"xlm-roberta"),idt.forEach(t),Xgr=r(CLe," \u2014 "),sO=s(CLe,"A",{href:!0});var ddt=n(sO);zgr=r(ddt,"TFXLMRobertaForQuestionAnswering"),ddt.forEach(t),Vgr=r(CLe," (XLM-RoBERTa model)"),CLe.forEach(t),Wgr=i(re),aM=s(re,"LI",{});var MLe=n(aM);dpe=s(MLe,"STRONG",{});var cdt=n(dpe);Qgr=r(cdt,"xlnet"),cdt.forEach(t),Hgr=r(MLe," \u2014 "),nO=s(MLe,"A",{href:!0});var mdt=n(nO);Ugr=r(mdt,"TFXLNetForQuestionAnsweringSimple"),mdt.forEach(t),Jgr=r(MLe," (XLNet model)"),MLe.forEach(t),re.forEach(t),Ygr=i(Ta),cpe=s(Ta,"P",{});var fdt=n(cpe);Kgr=r(fdt,"Examples:"),fdt.forEach(t),Zgr=i(Ta),f(e0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),I9e=i(d),Pc=s(d,"H2",{class:!0});var Wxe=n(Pc);sM=s(Wxe,"A",{id:!0,class:!0,href:!0});var gdt=n(sM);mpe=s(gdt,"SPAN",{});var hdt=n(mpe);f(o0.$$.fragment,hdt),hdt.forEach(t),gdt.forEach(t),ehr=i(Wxe),fpe=s(Wxe,"SPAN",{});var udt=n(fpe);ohr=r(udt,"TFAutoModelForVision2Seq"),udt.forEach(t),Wxe.forEach(t),j9e=i(d),Er=s(d,"DIV",{class:!0});var Yl=n(Er);f(r0.$$.fragment,Yl),rhr=i(Yl),$c=s(Yl,"P",{});var fV=n($c);thr=r(fV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gpe=s(fV,"CODE",{});var pdt=n(gpe);ahr=r(pdt,"from_pretrained()"),pdt.forEach(t),shr=r(fV,"class method or the "),hpe=s(fV,"CODE",{});var _dt=n(hpe);nhr=r(_dt,"from_config()"),_dt.forEach(t),lhr=r(fV,`class
method.`),fV.forEach(t),ihr=i(Yl),t0=s(Yl,"P",{});var Qxe=n(t0);dhr=r(Qxe,"This class cannot be instantiated directly using "),upe=s(Qxe,"CODE",{});var bdt=n(upe);chr=r(bdt,"__init__()"),bdt.forEach(t),mhr=r(Qxe," (throws an error)."),Qxe.forEach(t),fhr=i(Yl),_t=s(Yl,"DIV",{class:!0});var Kl=n(_t);f(a0.$$.fragment,Kl),ghr=i(Kl),ppe=s(Kl,"P",{});var vdt=n(ppe);hhr=r(vdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vdt.forEach(t),uhr=i(Kl),Ic=s(Kl,"P",{});var gV=n(Ic);phr=r(gV,`Note:
Loading a model from its configuration file does `),_pe=s(gV,"STRONG",{});var Tdt=n(_pe);_hr=r(Tdt,"not"),Tdt.forEach(t),bhr=r(gV,` load the model weights. It only affects the
model\u2019s configuration. Use `),bpe=s(gV,"CODE",{});var Fdt=n(bpe);vhr=r(Fdt,"from_pretrained()"),Fdt.forEach(t),Thr=r(gV,"to load the model weights."),gV.forEach(t),Fhr=i(Kl),vpe=s(Kl,"P",{});var Cdt=n(vpe);Chr=r(Cdt,"Examples:"),Cdt.forEach(t),Mhr=i(Kl),f(s0.$$.fragment,Kl),Kl.forEach(t),Ehr=i(Yl),Eo=s(Yl,"DIV",{class:!0});var Fa=n(Eo);f(n0.$$.fragment,Fa),yhr=i(Fa),Tpe=s(Fa,"P",{});var Mdt=n(Tpe);whr=r(Mdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mdt.forEach(t),Ahr=i(Fa),bs=s(Fa,"P",{});var O3=n(bs);Lhr=r(O3,"The model class to instantiate is selected based on the "),Fpe=s(O3,"CODE",{});var Edt=n(Fpe);Bhr=r(Edt,"model_type"),Edt.forEach(t),xhr=r(O3,` property of the config object (either
passed as an argument or loaded from `),Cpe=s(O3,"CODE",{});var ydt=n(Cpe);khr=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),Rhr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=s(O3,"CODE",{});var wdt=n(Mpe);Shr=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),Phr=r(O3,":"),O3.forEach(t),$hr=i(Fa),Epe=s(Fa,"UL",{});var Adt=n(Epe);nM=s(Adt,"LI",{});var ELe=n(nM);ype=s(ELe,"STRONG",{});var Ldt=n(ype);Ihr=r(Ldt,"vision-encoder-decoder"),Ldt.forEach(t),jhr=r(ELe," \u2014 "),lO=s(ELe,"A",{href:!0});var Bdt=n(lO);Nhr=r(Bdt,"TFVisionEncoderDecoderModel"),Bdt.forEach(t),Dhr=r(ELe," (Vision Encoder decoder model)"),ELe.forEach(t),Adt.forEach(t),qhr=i(Fa),wpe=s(Fa,"P",{});var xdt=n(wpe);Ghr=r(xdt,"Examples:"),xdt.forEach(t),Ohr=i(Fa),f(l0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),N9e=i(d),jc=s(d,"H2",{class:!0});var Hxe=n(jc);lM=s(Hxe,"A",{id:!0,class:!0,href:!0});var kdt=n(lM);Ape=s(kdt,"SPAN",{});var Rdt=n(Ape);f(i0.$$.fragment,Rdt),Rdt.forEach(t),kdt.forEach(t),Xhr=i(Hxe),Lpe=s(Hxe,"SPAN",{});var Sdt=n(Lpe);zhr=r(Sdt,"TFAutoModelForSpeechSeq2Seq"),Sdt.forEach(t),Hxe.forEach(t),D9e=i(d),yr=s(d,"DIV",{class:!0});var Zl=n(yr);f(d0.$$.fragment,Zl),Vhr=i(Zl),Nc=s(Zl,"P",{});var hV=n(Nc);Whr=r(hV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bpe=s(hV,"CODE",{});var Pdt=n(Bpe);Qhr=r(Pdt,"from_pretrained()"),Pdt.forEach(t),Hhr=r(hV,"class method or the "),xpe=s(hV,"CODE",{});var $dt=n(xpe);Uhr=r($dt,"from_config()"),$dt.forEach(t),Jhr=r(hV,`class
method.`),hV.forEach(t),Yhr=i(Zl),c0=s(Zl,"P",{});var Uxe=n(c0);Khr=r(Uxe,"This class cannot be instantiated directly using "),kpe=s(Uxe,"CODE",{});var Idt=n(kpe);Zhr=r(Idt,"__init__()"),Idt.forEach(t),eur=r(Uxe," (throws an error)."),Uxe.forEach(t),our=i(Zl),bt=s(Zl,"DIV",{class:!0});var ei=n(bt);f(m0.$$.fragment,ei),rur=i(ei),Rpe=s(ei,"P",{});var jdt=n(Rpe);tur=r(jdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jdt.forEach(t),aur=i(ei),Dc=s(ei,"P",{});var uV=n(Dc);sur=r(uV,`Note:
Loading a model from its configuration file does `),Spe=s(uV,"STRONG",{});var Ndt=n(Spe);nur=r(Ndt,"not"),Ndt.forEach(t),lur=r(uV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=s(uV,"CODE",{});var Ddt=n(Ppe);iur=r(Ddt,"from_pretrained()"),Ddt.forEach(t),dur=r(uV,"to load the model weights."),uV.forEach(t),cur=i(ei),$pe=s(ei,"P",{});var qdt=n($pe);mur=r(qdt,"Examples:"),qdt.forEach(t),fur=i(ei),f(f0.$$.fragment,ei),ei.forEach(t),gur=i(Zl),yo=s(Zl,"DIV",{class:!0});var Ca=n(yo);f(g0.$$.fragment,Ca),hur=i(Ca),Ipe=s(Ca,"P",{});var Gdt=n(Ipe);uur=r(Gdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gdt.forEach(t),pur=i(Ca),vs=s(Ca,"P",{});var X3=n(vs);_ur=r(X3,"The model class to instantiate is selected based on the "),jpe=s(X3,"CODE",{});var Odt=n(jpe);bur=r(Odt,"model_type"),Odt.forEach(t),vur=r(X3,` property of the config object (either
passed as an argument or loaded from `),Npe=s(X3,"CODE",{});var Xdt=n(Npe);Tur=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),Fur=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=s(X3,"CODE",{});var zdt=n(Dpe);Cur=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),Mur=r(X3,":"),X3.forEach(t),Eur=i(Ca),qpe=s(Ca,"UL",{});var Vdt=n(qpe);iM=s(Vdt,"LI",{});var yLe=n(iM);Gpe=s(yLe,"STRONG",{});var Wdt=n(Gpe);yur=r(Wdt,"speech_to_text"),Wdt.forEach(t),wur=r(yLe," \u2014 "),iO=s(yLe,"A",{href:!0});var Qdt=n(iO);Aur=r(Qdt,"TFSpeech2TextForConditionalGeneration"),Qdt.forEach(t),Lur=r(yLe," (Speech2Text model)"),yLe.forEach(t),Vdt.forEach(t),Bur=i(Ca),Ope=s(Ca,"P",{});var Hdt=n(Ope);xur=r(Hdt,"Examples:"),Hdt.forEach(t),kur=i(Ca),f(h0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),q9e=i(d),qc=s(d,"H2",{class:!0});var Jxe=n(qc);dM=s(Jxe,"A",{id:!0,class:!0,href:!0});var Udt=n(dM);Xpe=s(Udt,"SPAN",{});var Jdt=n(Xpe);f(u0.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),Rur=i(Jxe),zpe=s(Jxe,"SPAN",{});var Ydt=n(zpe);Sur=r(Ydt,"FlaxAutoModel"),Ydt.forEach(t),Jxe.forEach(t),G9e=i(d),wr=s(d,"DIV",{class:!0});var oi=n(wr);f(p0.$$.fragment,oi),Pur=i(oi),Gc=s(oi,"P",{});var pV=n(Gc);$ur=r(pV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Vpe=s(pV,"CODE",{});var Kdt=n(Vpe);Iur=r(Kdt,"from_pretrained()"),Kdt.forEach(t),jur=r(pV,"class method or the "),Wpe=s(pV,"CODE",{});var Zdt=n(Wpe);Nur=r(Zdt,"from_config()"),Zdt.forEach(t),Dur=r(pV,`class
method.`),pV.forEach(t),qur=i(oi),_0=s(oi,"P",{});var Yxe=n(_0);Gur=r(Yxe,"This class cannot be instantiated directly using "),Qpe=s(Yxe,"CODE",{});var ect=n(Qpe);Our=r(ect,"__init__()"),ect.forEach(t),Xur=r(Yxe," (throws an error)."),Yxe.forEach(t),zur=i(oi),vt=s(oi,"DIV",{class:!0});var ri=n(vt);f(b0.$$.fragment,ri),Vur=i(ri),Hpe=s(ri,"P",{});var oct=n(Hpe);Wur=r(oct,"Instantiates one of the base model classes of the library from a configuration."),oct.forEach(t),Qur=i(ri),Oc=s(ri,"P",{});var _V=n(Oc);Hur=r(_V,`Note:
Loading a model from its configuration file does `),Upe=s(_V,"STRONG",{});var rct=n(Upe);Uur=r(rct,"not"),rct.forEach(t),Jur=r(_V,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jpe=s(_V,"CODE",{});var tct=n(Jpe);Yur=r(tct,"from_pretrained()"),tct.forEach(t),Kur=r(_V,"to load the model weights."),_V.forEach(t),Zur=i(ri),Ype=s(ri,"P",{});var act=n(Ype);epr=r(act,"Examples:"),act.forEach(t),opr=i(ri),f(v0.$$.fragment,ri),ri.forEach(t),rpr=i(oi),wo=s(oi,"DIV",{class:!0});var Ma=n(wo);f(T0.$$.fragment,Ma),tpr=i(Ma),Kpe=s(Ma,"P",{});var sct=n(Kpe);apr=r(sct,"Instantiate one of the base model classes of the library from a pretrained model."),sct.forEach(t),spr=i(Ma),Ts=s(Ma,"P",{});var z3=n(Ts);npr=r(z3,"The model class to instantiate is selected based on the "),Zpe=s(z3,"CODE",{});var nct=n(Zpe);lpr=r(nct,"model_type"),nct.forEach(t),ipr=r(z3,` property of the config object (either
passed as an argument or loaded from `),e_e=s(z3,"CODE",{});var lct=n(e_e);dpr=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),cpr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=s(z3,"CODE",{});var ict=n(o_e);mpr=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),fpr=r(z3,":"),z3.forEach(t),gpr=i(Ma),V=s(Ma,"UL",{});var Q=n(V);cM=s(Q,"LI",{});var wLe=n(cM);r_e=s(wLe,"STRONG",{});var dct=n(r_e);hpr=r(dct,"albert"),dct.forEach(t),upr=r(wLe," \u2014 "),dO=s(wLe,"A",{href:!0});var cct=n(dO);ppr=r(cct,"FlaxAlbertModel"),cct.forEach(t),_pr=r(wLe," (ALBERT model)"),wLe.forEach(t),bpr=i(Q),mM=s(Q,"LI",{});var ALe=n(mM);t_e=s(ALe,"STRONG",{});var mct=n(t_e);vpr=r(mct,"bart"),mct.forEach(t),Tpr=r(ALe," \u2014 "),cO=s(ALe,"A",{href:!0});var fct=n(cO);Fpr=r(fct,"FlaxBartModel"),fct.forEach(t),Cpr=r(ALe," (BART model)"),ALe.forEach(t),Mpr=i(Q),fM=s(Q,"LI",{});var LLe=n(fM);a_e=s(LLe,"STRONG",{});var gct=n(a_e);Epr=r(gct,"beit"),gct.forEach(t),ypr=r(LLe," \u2014 "),mO=s(LLe,"A",{href:!0});var hct=n(mO);wpr=r(hct,"FlaxBeitModel"),hct.forEach(t),Apr=r(LLe," (BEiT model)"),LLe.forEach(t),Lpr=i(Q),gM=s(Q,"LI",{});var BLe=n(gM);s_e=s(BLe,"STRONG",{});var uct=n(s_e);Bpr=r(uct,"bert"),uct.forEach(t),xpr=r(BLe," \u2014 "),fO=s(BLe,"A",{href:!0});var pct=n(fO);kpr=r(pct,"FlaxBertModel"),pct.forEach(t),Rpr=r(BLe," (BERT model)"),BLe.forEach(t),Spr=i(Q),hM=s(Q,"LI",{});var xLe=n(hM);n_e=s(xLe,"STRONG",{});var _ct=n(n_e);Ppr=r(_ct,"big_bird"),_ct.forEach(t),$pr=r(xLe," \u2014 "),gO=s(xLe,"A",{href:!0});var bct=n(gO);Ipr=r(bct,"FlaxBigBirdModel"),bct.forEach(t),jpr=r(xLe," (BigBird model)"),xLe.forEach(t),Npr=i(Q),uM=s(Q,"LI",{});var kLe=n(uM);l_e=s(kLe,"STRONG",{});var vct=n(l_e);Dpr=r(vct,"blenderbot"),vct.forEach(t),qpr=r(kLe," \u2014 "),hO=s(kLe,"A",{href:!0});var Tct=n(hO);Gpr=r(Tct,"FlaxBlenderbotModel"),Tct.forEach(t),Opr=r(kLe," (Blenderbot model)"),kLe.forEach(t),Xpr=i(Q),pM=s(Q,"LI",{});var RLe=n(pM);i_e=s(RLe,"STRONG",{});var Fct=n(i_e);zpr=r(Fct,"blenderbot-small"),Fct.forEach(t),Vpr=r(RLe," \u2014 "),uO=s(RLe,"A",{href:!0});var Cct=n(uO);Wpr=r(Cct,"FlaxBlenderbotSmallModel"),Cct.forEach(t),Qpr=r(RLe," (BlenderbotSmall model)"),RLe.forEach(t),Hpr=i(Q),_M=s(Q,"LI",{});var SLe=n(_M);d_e=s(SLe,"STRONG",{});var Mct=n(d_e);Upr=r(Mct,"clip"),Mct.forEach(t),Jpr=r(SLe," \u2014 "),pO=s(SLe,"A",{href:!0});var Ect=n(pO);Ypr=r(Ect,"FlaxCLIPModel"),Ect.forEach(t),Kpr=r(SLe," (CLIP model)"),SLe.forEach(t),Zpr=i(Q),bM=s(Q,"LI",{});var PLe=n(bM);c_e=s(PLe,"STRONG",{});var yct=n(c_e);e_r=r(yct,"distilbert"),yct.forEach(t),o_r=r(PLe," \u2014 "),_O=s(PLe,"A",{href:!0});var wct=n(_O);r_r=r(wct,"FlaxDistilBertModel"),wct.forEach(t),t_r=r(PLe," (DistilBERT model)"),PLe.forEach(t),a_r=i(Q),vM=s(Q,"LI",{});var $Le=n(vM);m_e=s($Le,"STRONG",{});var Act=n(m_e);s_r=r(Act,"electra"),Act.forEach(t),n_r=r($Le," \u2014 "),bO=s($Le,"A",{href:!0});var Lct=n(bO);l_r=r(Lct,"FlaxElectraModel"),Lct.forEach(t),i_r=r($Le," (ELECTRA model)"),$Le.forEach(t),d_r=i(Q),TM=s(Q,"LI",{});var ILe=n(TM);f_e=s(ILe,"STRONG",{});var Bct=n(f_e);c_r=r(Bct,"gpt2"),Bct.forEach(t),m_r=r(ILe," \u2014 "),vO=s(ILe,"A",{href:!0});var xct=n(vO);f_r=r(xct,"FlaxGPT2Model"),xct.forEach(t),g_r=r(ILe," (OpenAI GPT-2 model)"),ILe.forEach(t),h_r=i(Q),FM=s(Q,"LI",{});var jLe=n(FM);g_e=s(jLe,"STRONG",{});var kct=n(g_e);u_r=r(kct,"gpt_neo"),kct.forEach(t),p_r=r(jLe," \u2014 "),TO=s(jLe,"A",{href:!0});var Rct=n(TO);__r=r(Rct,"FlaxGPTNeoModel"),Rct.forEach(t),b_r=r(jLe," (GPT Neo model)"),jLe.forEach(t),v_r=i(Q),CM=s(Q,"LI",{});var NLe=n(CM);h_e=s(NLe,"STRONG",{});var Sct=n(h_e);T_r=r(Sct,"gptj"),Sct.forEach(t),F_r=r(NLe," \u2014 "),FO=s(NLe,"A",{href:!0});var Pct=n(FO);C_r=r(Pct,"FlaxGPTJModel"),Pct.forEach(t),M_r=r(NLe," (GPT-J model)"),NLe.forEach(t),E_r=i(Q),MM=s(Q,"LI",{});var DLe=n(MM);u_e=s(DLe,"STRONG",{});var $ct=n(u_e);y_r=r($ct,"marian"),$ct.forEach(t),w_r=r(DLe," \u2014 "),CO=s(DLe,"A",{href:!0});var Ict=n(CO);A_r=r(Ict,"FlaxMarianModel"),Ict.forEach(t),L_r=r(DLe," (Marian model)"),DLe.forEach(t),B_r=i(Q),EM=s(Q,"LI",{});var qLe=n(EM);p_e=s(qLe,"STRONG",{});var jct=n(p_e);x_r=r(jct,"mbart"),jct.forEach(t),k_r=r(qLe," \u2014 "),MO=s(qLe,"A",{href:!0});var Nct=n(MO);R_r=r(Nct,"FlaxMBartModel"),Nct.forEach(t),S_r=r(qLe," (mBART model)"),qLe.forEach(t),P_r=i(Q),yM=s(Q,"LI",{});var GLe=n(yM);__e=s(GLe,"STRONG",{});var Dct=n(__e);$_r=r(Dct,"mt5"),Dct.forEach(t),I_r=r(GLe," \u2014 "),EO=s(GLe,"A",{href:!0});var qct=n(EO);j_r=r(qct,"FlaxMT5Model"),qct.forEach(t),N_r=r(GLe," (mT5 model)"),GLe.forEach(t),D_r=i(Q),wM=s(Q,"LI",{});var OLe=n(wM);b_e=s(OLe,"STRONG",{});var Gct=n(b_e);q_r=r(Gct,"pegasus"),Gct.forEach(t),G_r=r(OLe," \u2014 "),yO=s(OLe,"A",{href:!0});var Oct=n(yO);O_r=r(Oct,"FlaxPegasusModel"),Oct.forEach(t),X_r=r(OLe," (Pegasus model)"),OLe.forEach(t),z_r=i(Q),AM=s(Q,"LI",{});var XLe=n(AM);v_e=s(XLe,"STRONG",{});var Xct=n(v_e);V_r=r(Xct,"roberta"),Xct.forEach(t),W_r=r(XLe," \u2014 "),wO=s(XLe,"A",{href:!0});var zct=n(wO);Q_r=r(zct,"FlaxRobertaModel"),zct.forEach(t),H_r=r(XLe," (RoBERTa model)"),XLe.forEach(t),U_r=i(Q),LM=s(Q,"LI",{});var zLe=n(LM);T_e=s(zLe,"STRONG",{});var Vct=n(T_e);J_r=r(Vct,"roformer"),Vct.forEach(t),Y_r=r(zLe," \u2014 "),AO=s(zLe,"A",{href:!0});var Wct=n(AO);K_r=r(Wct,"FlaxRoFormerModel"),Wct.forEach(t),Z_r=r(zLe," (RoFormer model)"),zLe.forEach(t),ebr=i(Q),BM=s(Q,"LI",{});var VLe=n(BM);F_e=s(VLe,"STRONG",{});var Qct=n(F_e);obr=r(Qct,"t5"),Qct.forEach(t),rbr=r(VLe," \u2014 "),LO=s(VLe,"A",{href:!0});var Hct=n(LO);tbr=r(Hct,"FlaxT5Model"),Hct.forEach(t),abr=r(VLe," (T5 model)"),VLe.forEach(t),sbr=i(Q),xM=s(Q,"LI",{});var WLe=n(xM);C_e=s(WLe,"STRONG",{});var Uct=n(C_e);nbr=r(Uct,"vision-text-dual-encoder"),Uct.forEach(t),lbr=r(WLe," \u2014 "),BO=s(WLe,"A",{href:!0});var Jct=n(BO);ibr=r(Jct,"FlaxVisionTextDualEncoderModel"),Jct.forEach(t),dbr=r(WLe," (VisionTextDualEncoder model)"),WLe.forEach(t),cbr=i(Q),kM=s(Q,"LI",{});var QLe=n(kM);M_e=s(QLe,"STRONG",{});var Yct=n(M_e);mbr=r(Yct,"vit"),Yct.forEach(t),fbr=r(QLe," \u2014 "),xO=s(QLe,"A",{href:!0});var Kct=n(xO);gbr=r(Kct,"FlaxViTModel"),Kct.forEach(t),hbr=r(QLe," (ViT model)"),QLe.forEach(t),ubr=i(Q),RM=s(Q,"LI",{});var HLe=n(RM);E_e=s(HLe,"STRONG",{});var Zct=n(E_e);pbr=r(Zct,"wav2vec2"),Zct.forEach(t),_br=r(HLe," \u2014 "),kO=s(HLe,"A",{href:!0});var emt=n(kO);bbr=r(emt,"FlaxWav2Vec2Model"),emt.forEach(t),vbr=r(HLe," (Wav2Vec2 model)"),HLe.forEach(t),Tbr=i(Q),SM=s(Q,"LI",{});var ULe=n(SM);y_e=s(ULe,"STRONG",{});var omt=n(y_e);Fbr=r(omt,"xglm"),omt.forEach(t),Cbr=r(ULe," \u2014 "),RO=s(ULe,"A",{href:!0});var rmt=n(RO);Mbr=r(rmt,"FlaxXGLMModel"),rmt.forEach(t),Ebr=r(ULe," (XGLM model)"),ULe.forEach(t),Q.forEach(t),ybr=i(Ma),w_e=s(Ma,"P",{});var tmt=n(w_e);wbr=r(tmt,"Examples:"),tmt.forEach(t),Abr=i(Ma),f(F0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),O9e=i(d),Xc=s(d,"H2",{class:!0});var Kxe=n(Xc);PM=s(Kxe,"A",{id:!0,class:!0,href:!0});var amt=n(PM);A_e=s(amt,"SPAN",{});var smt=n(A_e);f(C0.$$.fragment,smt),smt.forEach(t),amt.forEach(t),Lbr=i(Kxe),L_e=s(Kxe,"SPAN",{});var nmt=n(L_e);Bbr=r(nmt,"FlaxAutoModelForCausalLM"),nmt.forEach(t),Kxe.forEach(t),X9e=i(d),Ar=s(d,"DIV",{class:!0});var ti=n(Ar);f(M0.$$.fragment,ti),xbr=i(ti),zc=s(ti,"P",{});var bV=n(zc);kbr=r(bV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),B_e=s(bV,"CODE",{});var lmt=n(B_e);Rbr=r(lmt,"from_pretrained()"),lmt.forEach(t),Sbr=r(bV,"class method or the "),x_e=s(bV,"CODE",{});var imt=n(x_e);Pbr=r(imt,"from_config()"),imt.forEach(t),$br=r(bV,`class
method.`),bV.forEach(t),Ibr=i(ti),E0=s(ti,"P",{});var Zxe=n(E0);jbr=r(Zxe,"This class cannot be instantiated directly using "),k_e=s(Zxe,"CODE",{});var dmt=n(k_e);Nbr=r(dmt,"__init__()"),dmt.forEach(t),Dbr=r(Zxe," (throws an error)."),Zxe.forEach(t),qbr=i(ti),Tt=s(ti,"DIV",{class:!0});var ai=n(Tt);f(y0.$$.fragment,ai),Gbr=i(ai),R_e=s(ai,"P",{});var cmt=n(R_e);Obr=r(cmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cmt.forEach(t),Xbr=i(ai),Vc=s(ai,"P",{});var vV=n(Vc);zbr=r(vV,`Note:
Loading a model from its configuration file does `),S_e=s(vV,"STRONG",{});var mmt=n(S_e);Vbr=r(mmt,"not"),mmt.forEach(t),Wbr=r(vV,` load the model weights. It only affects the
model\u2019s configuration. Use `),P_e=s(vV,"CODE",{});var fmt=n(P_e);Qbr=r(fmt,"from_pretrained()"),fmt.forEach(t),Hbr=r(vV,"to load the model weights."),vV.forEach(t),Ubr=i(ai),$_e=s(ai,"P",{});var gmt=n($_e);Jbr=r(gmt,"Examples:"),gmt.forEach(t),Ybr=i(ai),f(w0.$$.fragment,ai),ai.forEach(t),Kbr=i(ti),Ao=s(ti,"DIV",{class:!0});var Ea=n(Ao);f(A0.$$.fragment,Ea),Zbr=i(Ea),I_e=s(Ea,"P",{});var hmt=n(I_e);e2r=r(hmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hmt.forEach(t),o2r=i(Ea),Fs=s(Ea,"P",{});var V3=n(Fs);r2r=r(V3,"The model class to instantiate is selected based on the "),j_e=s(V3,"CODE",{});var umt=n(j_e);t2r=r(umt,"model_type"),umt.forEach(t),a2r=r(V3,` property of the config object (either
passed as an argument or loaded from `),N_e=s(V3,"CODE",{});var pmt=n(N_e);s2r=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),n2r=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=s(V3,"CODE",{});var _mt=n(D_e);l2r=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),i2r=r(V3,":"),V3.forEach(t),d2r=i(Ea),Cs=s(Ea,"UL",{});var W3=n(Cs);$M=s(W3,"LI",{});var JLe=n($M);q_e=s(JLe,"STRONG",{});var bmt=n(q_e);c2r=r(bmt,"gpt2"),bmt.forEach(t),m2r=r(JLe," \u2014 "),SO=s(JLe,"A",{href:!0});var vmt=n(SO);f2r=r(vmt,"FlaxGPT2LMHeadModel"),vmt.forEach(t),g2r=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),h2r=i(W3),IM=s(W3,"LI",{});var YLe=n(IM);G_e=s(YLe,"STRONG",{});var Tmt=n(G_e);u2r=r(Tmt,"gpt_neo"),Tmt.forEach(t),p2r=r(YLe," \u2014 "),PO=s(YLe,"A",{href:!0});var Fmt=n(PO);_2r=r(Fmt,"FlaxGPTNeoForCausalLM"),Fmt.forEach(t),b2r=r(YLe," (GPT Neo model)"),YLe.forEach(t),v2r=i(W3),jM=s(W3,"LI",{});var KLe=n(jM);O_e=s(KLe,"STRONG",{});var Cmt=n(O_e);T2r=r(Cmt,"gptj"),Cmt.forEach(t),F2r=r(KLe," \u2014 "),$O=s(KLe,"A",{href:!0});var Mmt=n($O);C2r=r(Mmt,"FlaxGPTJForCausalLM"),Mmt.forEach(t),M2r=r(KLe," (GPT-J model)"),KLe.forEach(t),E2r=i(W3),NM=s(W3,"LI",{});var ZLe=n(NM);X_e=s(ZLe,"STRONG",{});var Emt=n(X_e);y2r=r(Emt,"xglm"),Emt.forEach(t),w2r=r(ZLe," \u2014 "),IO=s(ZLe,"A",{href:!0});var ymt=n(IO);A2r=r(ymt,"FlaxXGLMForCausalLM"),ymt.forEach(t),L2r=r(ZLe," (XGLM model)"),ZLe.forEach(t),W3.forEach(t),B2r=i(Ea),z_e=s(Ea,"P",{});var wmt=n(z_e);x2r=r(wmt,"Examples:"),wmt.forEach(t),k2r=i(Ea),f(L0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),z9e=i(d),Wc=s(d,"H2",{class:!0});var eke=n(Wc);DM=s(eke,"A",{id:!0,class:!0,href:!0});var Amt=n(DM);V_e=s(Amt,"SPAN",{});var Lmt=n(V_e);f(B0.$$.fragment,Lmt),Lmt.forEach(t),Amt.forEach(t),R2r=i(eke),W_e=s(eke,"SPAN",{});var Bmt=n(W_e);S2r=r(Bmt,"FlaxAutoModelForPreTraining"),Bmt.forEach(t),eke.forEach(t),V9e=i(d),Lr=s(d,"DIV",{class:!0});var si=n(Lr);f(x0.$$.fragment,si),P2r=i(si),Qc=s(si,"P",{});var TV=n(Qc);$2r=r(TV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Q_e=s(TV,"CODE",{});var xmt=n(Q_e);I2r=r(xmt,"from_pretrained()"),xmt.forEach(t),j2r=r(TV,"class method or the "),H_e=s(TV,"CODE",{});var kmt=n(H_e);N2r=r(kmt,"from_config()"),kmt.forEach(t),D2r=r(TV,`class
method.`),TV.forEach(t),q2r=i(si),k0=s(si,"P",{});var oke=n(k0);G2r=r(oke,"This class cannot be instantiated directly using "),U_e=s(oke,"CODE",{});var Rmt=n(U_e);O2r=r(Rmt,"__init__()"),Rmt.forEach(t),X2r=r(oke," (throws an error)."),oke.forEach(t),z2r=i(si),Ft=s(si,"DIV",{class:!0});var ni=n(Ft);f(R0.$$.fragment,ni),V2r=i(ni),J_e=s(ni,"P",{});var Smt=n(J_e);W2r=r(Smt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Smt.forEach(t),Q2r=i(ni),Hc=s(ni,"P",{});var FV=n(Hc);H2r=r(FV,`Note:
Loading a model from its configuration file does `),Y_e=s(FV,"STRONG",{});var Pmt=n(Y_e);U2r=r(Pmt,"not"),Pmt.forEach(t),J2r=r(FV,` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=s(FV,"CODE",{});var $mt=n(K_e);Y2r=r($mt,"from_pretrained()"),$mt.forEach(t),K2r=r(FV,"to load the model weights."),FV.forEach(t),Z2r=i(ni),Z_e=s(ni,"P",{});var Imt=n(Z_e);evr=r(Imt,"Examples:"),Imt.forEach(t),ovr=i(ni),f(S0.$$.fragment,ni),ni.forEach(t),rvr=i(si),Lo=s(si,"DIV",{class:!0});var ya=n(Lo);f(P0.$$.fragment,ya),tvr=i(ya),ebe=s(ya,"P",{});var jmt=n(ebe);avr=r(jmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jmt.forEach(t),svr=i(ya),Ms=s(ya,"P",{});var Q3=n(Ms);nvr=r(Q3,"The model class to instantiate is selected based on the "),obe=s(Q3,"CODE",{});var Nmt=n(obe);lvr=r(Nmt,"model_type"),Nmt.forEach(t),ivr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),rbe=s(Q3,"CODE",{});var Dmt=n(rbe);dvr=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),cvr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=s(Q3,"CODE",{});var qmt=n(tbe);mvr=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),fvr=r(Q3,":"),Q3.forEach(t),gvr=i(ya),me=s(ya,"UL",{});var pe=n(me);qM=s(pe,"LI",{});var e7e=n(qM);abe=s(e7e,"STRONG",{});var Gmt=n(abe);hvr=r(Gmt,"albert"),Gmt.forEach(t),uvr=r(e7e," \u2014 "),jO=s(e7e,"A",{href:!0});var Omt=n(jO);pvr=r(Omt,"FlaxAlbertForPreTraining"),Omt.forEach(t),_vr=r(e7e," (ALBERT model)"),e7e.forEach(t),bvr=i(pe),GM=s(pe,"LI",{});var o7e=n(GM);sbe=s(o7e,"STRONG",{});var Xmt=n(sbe);vvr=r(Xmt,"bart"),Xmt.forEach(t),Tvr=r(o7e," \u2014 "),NO=s(o7e,"A",{href:!0});var zmt=n(NO);Fvr=r(zmt,"FlaxBartForConditionalGeneration"),zmt.forEach(t),Cvr=r(o7e," (BART model)"),o7e.forEach(t),Mvr=i(pe),OM=s(pe,"LI",{});var r7e=n(OM);nbe=s(r7e,"STRONG",{});var Vmt=n(nbe);Evr=r(Vmt,"bert"),Vmt.forEach(t),yvr=r(r7e," \u2014 "),DO=s(r7e,"A",{href:!0});var Wmt=n(DO);wvr=r(Wmt,"FlaxBertForPreTraining"),Wmt.forEach(t),Avr=r(r7e," (BERT model)"),r7e.forEach(t),Lvr=i(pe),XM=s(pe,"LI",{});var t7e=n(XM);lbe=s(t7e,"STRONG",{});var Qmt=n(lbe);Bvr=r(Qmt,"big_bird"),Qmt.forEach(t),xvr=r(t7e," \u2014 "),qO=s(t7e,"A",{href:!0});var Hmt=n(qO);kvr=r(Hmt,"FlaxBigBirdForPreTraining"),Hmt.forEach(t),Rvr=r(t7e," (BigBird model)"),t7e.forEach(t),Svr=i(pe),zM=s(pe,"LI",{});var a7e=n(zM);ibe=s(a7e,"STRONG",{});var Umt=n(ibe);Pvr=r(Umt,"electra"),Umt.forEach(t),$vr=r(a7e," \u2014 "),GO=s(a7e,"A",{href:!0});var Jmt=n(GO);Ivr=r(Jmt,"FlaxElectraForPreTraining"),Jmt.forEach(t),jvr=r(a7e," (ELECTRA model)"),a7e.forEach(t),Nvr=i(pe),VM=s(pe,"LI",{});var s7e=n(VM);dbe=s(s7e,"STRONG",{});var Ymt=n(dbe);Dvr=r(Ymt,"mbart"),Ymt.forEach(t),qvr=r(s7e," \u2014 "),OO=s(s7e,"A",{href:!0});var Kmt=n(OO);Gvr=r(Kmt,"FlaxMBartForConditionalGeneration"),Kmt.forEach(t),Ovr=r(s7e," (mBART model)"),s7e.forEach(t),Xvr=i(pe),WM=s(pe,"LI",{});var n7e=n(WM);cbe=s(n7e,"STRONG",{});var Zmt=n(cbe);zvr=r(Zmt,"mt5"),Zmt.forEach(t),Vvr=r(n7e," \u2014 "),XO=s(n7e,"A",{href:!0});var eft=n(XO);Wvr=r(eft,"FlaxMT5ForConditionalGeneration"),eft.forEach(t),Qvr=r(n7e," (mT5 model)"),n7e.forEach(t),Hvr=i(pe),QM=s(pe,"LI",{});var l7e=n(QM);mbe=s(l7e,"STRONG",{});var oft=n(mbe);Uvr=r(oft,"roberta"),oft.forEach(t),Jvr=r(l7e," \u2014 "),zO=s(l7e,"A",{href:!0});var rft=n(zO);Yvr=r(rft,"FlaxRobertaForMaskedLM"),rft.forEach(t),Kvr=r(l7e," (RoBERTa model)"),l7e.forEach(t),Zvr=i(pe),HM=s(pe,"LI",{});var i7e=n(HM);fbe=s(i7e,"STRONG",{});var tft=n(fbe);eTr=r(tft,"roformer"),tft.forEach(t),oTr=r(i7e," \u2014 "),VO=s(i7e,"A",{href:!0});var aft=n(VO);rTr=r(aft,"FlaxRoFormerForMaskedLM"),aft.forEach(t),tTr=r(i7e," (RoFormer model)"),i7e.forEach(t),aTr=i(pe),UM=s(pe,"LI",{});var d7e=n(UM);gbe=s(d7e,"STRONG",{});var sft=n(gbe);sTr=r(sft,"t5"),sft.forEach(t),nTr=r(d7e," \u2014 "),WO=s(d7e,"A",{href:!0});var nft=n(WO);lTr=r(nft,"FlaxT5ForConditionalGeneration"),nft.forEach(t),iTr=r(d7e," (T5 model)"),d7e.forEach(t),dTr=i(pe),JM=s(pe,"LI",{});var c7e=n(JM);hbe=s(c7e,"STRONG",{});var lft=n(hbe);cTr=r(lft,"wav2vec2"),lft.forEach(t),mTr=r(c7e," \u2014 "),QO=s(c7e,"A",{href:!0});var ift=n(QO);fTr=r(ift,"FlaxWav2Vec2ForPreTraining"),ift.forEach(t),gTr=r(c7e," (Wav2Vec2 model)"),c7e.forEach(t),pe.forEach(t),hTr=i(ya),ube=s(ya,"P",{});var dft=n(ube);uTr=r(dft,"Examples:"),dft.forEach(t),pTr=i(ya),f($0.$$.fragment,ya),ya.forEach(t),si.forEach(t),W9e=i(d),Uc=s(d,"H2",{class:!0});var rke=n(Uc);YM=s(rke,"A",{id:!0,class:!0,href:!0});var cft=n(YM);pbe=s(cft,"SPAN",{});var mft=n(pbe);f(I0.$$.fragment,mft),mft.forEach(t),cft.forEach(t),_Tr=i(rke),_be=s(rke,"SPAN",{});var fft=n(_be);bTr=r(fft,"FlaxAutoModelForMaskedLM"),fft.forEach(t),rke.forEach(t),Q9e=i(d),Br=s(d,"DIV",{class:!0});var li=n(Br);f(j0.$$.fragment,li),vTr=i(li),Jc=s(li,"P",{});var CV=n(Jc);TTr=r(CV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bbe=s(CV,"CODE",{});var gft=n(bbe);FTr=r(gft,"from_pretrained()"),gft.forEach(t),CTr=r(CV,"class method or the "),vbe=s(CV,"CODE",{});var hft=n(vbe);MTr=r(hft,"from_config()"),hft.forEach(t),ETr=r(CV,`class
method.`),CV.forEach(t),yTr=i(li),N0=s(li,"P",{});var tke=n(N0);wTr=r(tke,"This class cannot be instantiated directly using "),Tbe=s(tke,"CODE",{});var uft=n(Tbe);ATr=r(uft,"__init__()"),uft.forEach(t),LTr=r(tke," (throws an error)."),tke.forEach(t),BTr=i(li),Ct=s(li,"DIV",{class:!0});var ii=n(Ct);f(D0.$$.fragment,ii),xTr=i(ii),Fbe=s(ii,"P",{});var pft=n(Fbe);kTr=r(pft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pft.forEach(t),RTr=i(ii),Yc=s(ii,"P",{});var MV=n(Yc);STr=r(MV,`Note:
Loading a model from its configuration file does `),Cbe=s(MV,"STRONG",{});var _ft=n(Cbe);PTr=r(_ft,"not"),_ft.forEach(t),$Tr=r(MV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=s(MV,"CODE",{});var bft=n(Mbe);ITr=r(bft,"from_pretrained()"),bft.forEach(t),jTr=r(MV,"to load the model weights."),MV.forEach(t),NTr=i(ii),Ebe=s(ii,"P",{});var vft=n(Ebe);DTr=r(vft,"Examples:"),vft.forEach(t),qTr=i(ii),f(q0.$$.fragment,ii),ii.forEach(t),GTr=i(li),Bo=s(li,"DIV",{class:!0});var wa=n(Bo);f(G0.$$.fragment,wa),OTr=i(wa),ybe=s(wa,"P",{});var Tft=n(ybe);XTr=r(Tft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tft.forEach(t),zTr=i(wa),Es=s(wa,"P",{});var H3=n(Es);VTr=r(H3,"The model class to instantiate is selected based on the "),wbe=s(H3,"CODE",{});var Fft=n(wbe);WTr=r(Fft,"model_type"),Fft.forEach(t),QTr=r(H3,` property of the config object (either
passed as an argument or loaded from `),Abe=s(H3,"CODE",{});var Cft=n(Abe);HTr=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),UTr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=s(H3,"CODE",{});var Mft=n(Lbe);JTr=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),YTr=r(H3,":"),H3.forEach(t),KTr=i(wa),ve=s(wa,"UL",{});var Ze=n(ve);KM=s(Ze,"LI",{});var m7e=n(KM);Bbe=s(m7e,"STRONG",{});var Eft=n(Bbe);ZTr=r(Eft,"albert"),Eft.forEach(t),e1r=r(m7e," \u2014 "),HO=s(m7e,"A",{href:!0});var yft=n(HO);o1r=r(yft,"FlaxAlbertForMaskedLM"),yft.forEach(t),r1r=r(m7e," (ALBERT model)"),m7e.forEach(t),t1r=i(Ze),ZM=s(Ze,"LI",{});var f7e=n(ZM);xbe=s(f7e,"STRONG",{});var wft=n(xbe);a1r=r(wft,"bart"),wft.forEach(t),s1r=r(f7e," \u2014 "),UO=s(f7e,"A",{href:!0});var Aft=n(UO);n1r=r(Aft,"FlaxBartForConditionalGeneration"),Aft.forEach(t),l1r=r(f7e," (BART model)"),f7e.forEach(t),i1r=i(Ze),eE=s(Ze,"LI",{});var g7e=n(eE);kbe=s(g7e,"STRONG",{});var Lft=n(kbe);d1r=r(Lft,"bert"),Lft.forEach(t),c1r=r(g7e," \u2014 "),JO=s(g7e,"A",{href:!0});var Bft=n(JO);m1r=r(Bft,"FlaxBertForMaskedLM"),Bft.forEach(t),f1r=r(g7e," (BERT model)"),g7e.forEach(t),g1r=i(Ze),oE=s(Ze,"LI",{});var h7e=n(oE);Rbe=s(h7e,"STRONG",{});var xft=n(Rbe);h1r=r(xft,"big_bird"),xft.forEach(t),u1r=r(h7e," \u2014 "),YO=s(h7e,"A",{href:!0});var kft=n(YO);p1r=r(kft,"FlaxBigBirdForMaskedLM"),kft.forEach(t),_1r=r(h7e," (BigBird model)"),h7e.forEach(t),b1r=i(Ze),rE=s(Ze,"LI",{});var u7e=n(rE);Sbe=s(u7e,"STRONG",{});var Rft=n(Sbe);v1r=r(Rft,"distilbert"),Rft.forEach(t),T1r=r(u7e," \u2014 "),KO=s(u7e,"A",{href:!0});var Sft=n(KO);F1r=r(Sft,"FlaxDistilBertForMaskedLM"),Sft.forEach(t),C1r=r(u7e," (DistilBERT model)"),u7e.forEach(t),M1r=i(Ze),tE=s(Ze,"LI",{});var p7e=n(tE);Pbe=s(p7e,"STRONG",{});var Pft=n(Pbe);E1r=r(Pft,"electra"),Pft.forEach(t),y1r=r(p7e," \u2014 "),ZO=s(p7e,"A",{href:!0});var $ft=n(ZO);w1r=r($ft,"FlaxElectraForMaskedLM"),$ft.forEach(t),A1r=r(p7e," (ELECTRA model)"),p7e.forEach(t),L1r=i(Ze),aE=s(Ze,"LI",{});var _7e=n(aE);$be=s(_7e,"STRONG",{});var Ift=n($be);B1r=r(Ift,"mbart"),Ift.forEach(t),x1r=r(_7e," \u2014 "),eX=s(_7e,"A",{href:!0});var jft=n(eX);k1r=r(jft,"FlaxMBartForConditionalGeneration"),jft.forEach(t),R1r=r(_7e," (mBART model)"),_7e.forEach(t),S1r=i(Ze),sE=s(Ze,"LI",{});var b7e=n(sE);Ibe=s(b7e,"STRONG",{});var Nft=n(Ibe);P1r=r(Nft,"roberta"),Nft.forEach(t),$1r=r(b7e," \u2014 "),oX=s(b7e,"A",{href:!0});var Dft=n(oX);I1r=r(Dft,"FlaxRobertaForMaskedLM"),Dft.forEach(t),j1r=r(b7e," (RoBERTa model)"),b7e.forEach(t),N1r=i(Ze),nE=s(Ze,"LI",{});var v7e=n(nE);jbe=s(v7e,"STRONG",{});var qft=n(jbe);D1r=r(qft,"roformer"),qft.forEach(t),q1r=r(v7e," \u2014 "),rX=s(v7e,"A",{href:!0});var Gft=n(rX);G1r=r(Gft,"FlaxRoFormerForMaskedLM"),Gft.forEach(t),O1r=r(v7e," (RoFormer model)"),v7e.forEach(t),Ze.forEach(t),X1r=i(wa),Nbe=s(wa,"P",{});var Oft=n(Nbe);z1r=r(Oft,"Examples:"),Oft.forEach(t),V1r=i(wa),f(O0.$$.fragment,wa),wa.forEach(t),li.forEach(t),H9e=i(d),Kc=s(d,"H2",{class:!0});var ake=n(Kc);lE=s(ake,"A",{id:!0,class:!0,href:!0});var Xft=n(lE);Dbe=s(Xft,"SPAN",{});var zft=n(Dbe);f(X0.$$.fragment,zft),zft.forEach(t),Xft.forEach(t),W1r=i(ake),qbe=s(ake,"SPAN",{});var Vft=n(qbe);Q1r=r(Vft,"FlaxAutoModelForSeq2SeqLM"),Vft.forEach(t),ake.forEach(t),U9e=i(d),xr=s(d,"DIV",{class:!0});var di=n(xr);f(z0.$$.fragment,di),H1r=i(di),Zc=s(di,"P",{});var EV=n(Zc);U1r=r(EV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gbe=s(EV,"CODE",{});var Wft=n(Gbe);J1r=r(Wft,"from_pretrained()"),Wft.forEach(t),Y1r=r(EV,"class method or the "),Obe=s(EV,"CODE",{});var Qft=n(Obe);K1r=r(Qft,"from_config()"),Qft.forEach(t),Z1r=r(EV,`class
method.`),EV.forEach(t),eFr=i(di),V0=s(di,"P",{});var ske=n(V0);oFr=r(ske,"This class cannot be instantiated directly using "),Xbe=s(ske,"CODE",{});var Hft=n(Xbe);rFr=r(Hft,"__init__()"),Hft.forEach(t),tFr=r(ske," (throws an error)."),ske.forEach(t),aFr=i(di),Mt=s(di,"DIV",{class:!0});var ci=n(Mt);f(W0.$$.fragment,ci),sFr=i(ci),zbe=s(ci,"P",{});var Uft=n(zbe);nFr=r(Uft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uft.forEach(t),lFr=i(ci),em=s(ci,"P",{});var yV=n(em);iFr=r(yV,`Note:
Loading a model from its configuration file does `),Vbe=s(yV,"STRONG",{});var Jft=n(Vbe);dFr=r(Jft,"not"),Jft.forEach(t),cFr=r(yV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=s(yV,"CODE",{});var Yft=n(Wbe);mFr=r(Yft,"from_pretrained()"),Yft.forEach(t),fFr=r(yV,"to load the model weights."),yV.forEach(t),gFr=i(ci),Qbe=s(ci,"P",{});var Kft=n(Qbe);hFr=r(Kft,"Examples:"),Kft.forEach(t),uFr=i(ci),f(Q0.$$.fragment,ci),ci.forEach(t),pFr=i(di),xo=s(di,"DIV",{class:!0});var Aa=n(xo);f(H0.$$.fragment,Aa),_Fr=i(Aa),Hbe=s(Aa,"P",{});var Zft=n(Hbe);bFr=r(Zft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zft.forEach(t),vFr=i(Aa),ys=s(Aa,"P",{});var U3=n(ys);TFr=r(U3,"The model class to instantiate is selected based on the "),Ube=s(U3,"CODE",{});var egt=n(Ube);FFr=r(egt,"model_type"),egt.forEach(t),CFr=r(U3,` property of the config object (either
passed as an argument or loaded from `),Jbe=s(U3,"CODE",{});var ogt=n(Jbe);MFr=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),EFr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=s(U3,"CODE",{});var rgt=n(Ybe);yFr=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),wFr=r(U3,":"),U3.forEach(t),AFr=i(Aa),Te=s(Aa,"UL",{});var eo=n(Te);iE=s(eo,"LI",{});var T7e=n(iE);Kbe=s(T7e,"STRONG",{});var tgt=n(Kbe);LFr=r(tgt,"bart"),tgt.forEach(t),BFr=r(T7e," \u2014 "),tX=s(T7e,"A",{href:!0});var agt=n(tX);xFr=r(agt,"FlaxBartForConditionalGeneration"),agt.forEach(t),kFr=r(T7e," (BART model)"),T7e.forEach(t),RFr=i(eo),dE=s(eo,"LI",{});var F7e=n(dE);Zbe=s(F7e,"STRONG",{});var sgt=n(Zbe);SFr=r(sgt,"blenderbot"),sgt.forEach(t),PFr=r(F7e," \u2014 "),aX=s(F7e,"A",{href:!0});var ngt=n(aX);$Fr=r(ngt,"FlaxBlenderbotForConditionalGeneration"),ngt.forEach(t),IFr=r(F7e," (Blenderbot model)"),F7e.forEach(t),jFr=i(eo),cE=s(eo,"LI",{});var C7e=n(cE);e2e=s(C7e,"STRONG",{});var lgt=n(e2e);NFr=r(lgt,"blenderbot-small"),lgt.forEach(t),DFr=r(C7e," \u2014 "),sX=s(C7e,"A",{href:!0});var igt=n(sX);qFr=r(igt,"FlaxBlenderbotSmallForConditionalGeneration"),igt.forEach(t),GFr=r(C7e," (BlenderbotSmall model)"),C7e.forEach(t),OFr=i(eo),mE=s(eo,"LI",{});var M7e=n(mE);o2e=s(M7e,"STRONG",{});var dgt=n(o2e);XFr=r(dgt,"encoder-decoder"),dgt.forEach(t),zFr=r(M7e," \u2014 "),nX=s(M7e,"A",{href:!0});var cgt=n(nX);VFr=r(cgt,"FlaxEncoderDecoderModel"),cgt.forEach(t),WFr=r(M7e," (Encoder decoder model)"),M7e.forEach(t),QFr=i(eo),fE=s(eo,"LI",{});var E7e=n(fE);r2e=s(E7e,"STRONG",{});var mgt=n(r2e);HFr=r(mgt,"marian"),mgt.forEach(t),UFr=r(E7e," \u2014 "),lX=s(E7e,"A",{href:!0});var fgt=n(lX);JFr=r(fgt,"FlaxMarianMTModel"),fgt.forEach(t),YFr=r(E7e," (Marian model)"),E7e.forEach(t),KFr=i(eo),gE=s(eo,"LI",{});var y7e=n(gE);t2e=s(y7e,"STRONG",{});var ggt=n(t2e);ZFr=r(ggt,"mbart"),ggt.forEach(t),eCr=r(y7e," \u2014 "),iX=s(y7e,"A",{href:!0});var hgt=n(iX);oCr=r(hgt,"FlaxMBartForConditionalGeneration"),hgt.forEach(t),rCr=r(y7e," (mBART model)"),y7e.forEach(t),tCr=i(eo),hE=s(eo,"LI",{});var w7e=n(hE);a2e=s(w7e,"STRONG",{});var ugt=n(a2e);aCr=r(ugt,"mt5"),ugt.forEach(t),sCr=r(w7e," \u2014 "),dX=s(w7e,"A",{href:!0});var pgt=n(dX);nCr=r(pgt,"FlaxMT5ForConditionalGeneration"),pgt.forEach(t),lCr=r(w7e," (mT5 model)"),w7e.forEach(t),iCr=i(eo),uE=s(eo,"LI",{});var A7e=n(uE);s2e=s(A7e,"STRONG",{});var _gt=n(s2e);dCr=r(_gt,"pegasus"),_gt.forEach(t),cCr=r(A7e," \u2014 "),cX=s(A7e,"A",{href:!0});var bgt=n(cX);mCr=r(bgt,"FlaxPegasusForConditionalGeneration"),bgt.forEach(t),fCr=r(A7e," (Pegasus model)"),A7e.forEach(t),gCr=i(eo),pE=s(eo,"LI",{});var L7e=n(pE);n2e=s(L7e,"STRONG",{});var vgt=n(n2e);hCr=r(vgt,"t5"),vgt.forEach(t),uCr=r(L7e," \u2014 "),mX=s(L7e,"A",{href:!0});var Tgt=n(mX);pCr=r(Tgt,"FlaxT5ForConditionalGeneration"),Tgt.forEach(t),_Cr=r(L7e," (T5 model)"),L7e.forEach(t),eo.forEach(t),bCr=i(Aa),l2e=s(Aa,"P",{});var Fgt=n(l2e);vCr=r(Fgt,"Examples:"),Fgt.forEach(t),TCr=i(Aa),f(U0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),J9e=i(d),om=s(d,"H2",{class:!0});var nke=n(om);_E=s(nke,"A",{id:!0,class:!0,href:!0});var Cgt=n(_E);i2e=s(Cgt,"SPAN",{});var Mgt=n(i2e);f(J0.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),FCr=i(nke),d2e=s(nke,"SPAN",{});var Egt=n(d2e);CCr=r(Egt,"FlaxAutoModelForSequenceClassification"),Egt.forEach(t),nke.forEach(t),Y9e=i(d),kr=s(d,"DIV",{class:!0});var mi=n(kr);f(Y0.$$.fragment,mi),MCr=i(mi),rm=s(mi,"P",{});var wV=n(rm);ECr=r(wV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),c2e=s(wV,"CODE",{});var ygt=n(c2e);yCr=r(ygt,"from_pretrained()"),ygt.forEach(t),wCr=r(wV,"class method or the "),m2e=s(wV,"CODE",{});var wgt=n(m2e);ACr=r(wgt,"from_config()"),wgt.forEach(t),LCr=r(wV,`class
method.`),wV.forEach(t),BCr=i(mi),K0=s(mi,"P",{});var lke=n(K0);xCr=r(lke,"This class cannot be instantiated directly using "),f2e=s(lke,"CODE",{});var Agt=n(f2e);kCr=r(Agt,"__init__()"),Agt.forEach(t),RCr=r(lke," (throws an error)."),lke.forEach(t),SCr=i(mi),Et=s(mi,"DIV",{class:!0});var fi=n(Et);f(Z0.$$.fragment,fi),PCr=i(fi),g2e=s(fi,"P",{});var Lgt=n(g2e);$Cr=r(Lgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lgt.forEach(t),ICr=i(fi),tm=s(fi,"P",{});var AV=n(tm);jCr=r(AV,`Note:
Loading a model from its configuration file does `),h2e=s(AV,"STRONG",{});var Bgt=n(h2e);NCr=r(Bgt,"not"),Bgt.forEach(t),DCr=r(AV,` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=s(AV,"CODE",{});var xgt=n(u2e);qCr=r(xgt,"from_pretrained()"),xgt.forEach(t),GCr=r(AV,"to load the model weights."),AV.forEach(t),OCr=i(fi),p2e=s(fi,"P",{});var kgt=n(p2e);XCr=r(kgt,"Examples:"),kgt.forEach(t),zCr=i(fi),f(eL.$$.fragment,fi),fi.forEach(t),VCr=i(mi),ko=s(mi,"DIV",{class:!0});var La=n(ko);f(oL.$$.fragment,La),WCr=i(La),_2e=s(La,"P",{});var Rgt=n(_2e);QCr=r(Rgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rgt.forEach(t),HCr=i(La),ws=s(La,"P",{});var J3=n(ws);UCr=r(J3,"The model class to instantiate is selected based on the "),b2e=s(J3,"CODE",{});var Sgt=n(b2e);JCr=r(Sgt,"model_type"),Sgt.forEach(t),YCr=r(J3,` property of the config object (either
passed as an argument or loaded from `),v2e=s(J3,"CODE",{});var Pgt=n(v2e);KCr=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),ZCr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=s(J3,"CODE",{});var $gt=n(T2e);e4r=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),o4r=r(J3,":"),J3.forEach(t),r4r=i(La),Fe=s(La,"UL",{});var oo=n(Fe);bE=s(oo,"LI",{});var B7e=n(bE);F2e=s(B7e,"STRONG",{});var Igt=n(F2e);t4r=r(Igt,"albert"),Igt.forEach(t),a4r=r(B7e," \u2014 "),fX=s(B7e,"A",{href:!0});var jgt=n(fX);s4r=r(jgt,"FlaxAlbertForSequenceClassification"),jgt.forEach(t),n4r=r(B7e," (ALBERT model)"),B7e.forEach(t),l4r=i(oo),vE=s(oo,"LI",{});var x7e=n(vE);C2e=s(x7e,"STRONG",{});var Ngt=n(C2e);i4r=r(Ngt,"bart"),Ngt.forEach(t),d4r=r(x7e," \u2014 "),gX=s(x7e,"A",{href:!0});var Dgt=n(gX);c4r=r(Dgt,"FlaxBartForSequenceClassification"),Dgt.forEach(t),m4r=r(x7e," (BART model)"),x7e.forEach(t),f4r=i(oo),TE=s(oo,"LI",{});var k7e=n(TE);M2e=s(k7e,"STRONG",{});var qgt=n(M2e);g4r=r(qgt,"bert"),qgt.forEach(t),h4r=r(k7e," \u2014 "),hX=s(k7e,"A",{href:!0});var Ggt=n(hX);u4r=r(Ggt,"FlaxBertForSequenceClassification"),Ggt.forEach(t),p4r=r(k7e," (BERT model)"),k7e.forEach(t),_4r=i(oo),FE=s(oo,"LI",{});var R7e=n(FE);E2e=s(R7e,"STRONG",{});var Ogt=n(E2e);b4r=r(Ogt,"big_bird"),Ogt.forEach(t),v4r=r(R7e," \u2014 "),uX=s(R7e,"A",{href:!0});var Xgt=n(uX);T4r=r(Xgt,"FlaxBigBirdForSequenceClassification"),Xgt.forEach(t),F4r=r(R7e," (BigBird model)"),R7e.forEach(t),C4r=i(oo),CE=s(oo,"LI",{});var S7e=n(CE);y2e=s(S7e,"STRONG",{});var zgt=n(y2e);M4r=r(zgt,"distilbert"),zgt.forEach(t),E4r=r(S7e," \u2014 "),pX=s(S7e,"A",{href:!0});var Vgt=n(pX);y4r=r(Vgt,"FlaxDistilBertForSequenceClassification"),Vgt.forEach(t),w4r=r(S7e," (DistilBERT model)"),S7e.forEach(t),A4r=i(oo),ME=s(oo,"LI",{});var P7e=n(ME);w2e=s(P7e,"STRONG",{});var Wgt=n(w2e);L4r=r(Wgt,"electra"),Wgt.forEach(t),B4r=r(P7e," \u2014 "),_X=s(P7e,"A",{href:!0});var Qgt=n(_X);x4r=r(Qgt,"FlaxElectraForSequenceClassification"),Qgt.forEach(t),k4r=r(P7e," (ELECTRA model)"),P7e.forEach(t),R4r=i(oo),EE=s(oo,"LI",{});var $7e=n(EE);A2e=s($7e,"STRONG",{});var Hgt=n(A2e);S4r=r(Hgt,"mbart"),Hgt.forEach(t),P4r=r($7e," \u2014 "),bX=s($7e,"A",{href:!0});var Ugt=n(bX);$4r=r(Ugt,"FlaxMBartForSequenceClassification"),Ugt.forEach(t),I4r=r($7e," (mBART model)"),$7e.forEach(t),j4r=i(oo),yE=s(oo,"LI",{});var I7e=n(yE);L2e=s(I7e,"STRONG",{});var Jgt=n(L2e);N4r=r(Jgt,"roberta"),Jgt.forEach(t),D4r=r(I7e," \u2014 "),vX=s(I7e,"A",{href:!0});var Ygt=n(vX);q4r=r(Ygt,"FlaxRobertaForSequenceClassification"),Ygt.forEach(t),G4r=r(I7e," (RoBERTa model)"),I7e.forEach(t),O4r=i(oo),wE=s(oo,"LI",{});var j7e=n(wE);B2e=s(j7e,"STRONG",{});var Kgt=n(B2e);X4r=r(Kgt,"roformer"),Kgt.forEach(t),z4r=r(j7e," \u2014 "),TX=s(j7e,"A",{href:!0});var Zgt=n(TX);V4r=r(Zgt,"FlaxRoFormerForSequenceClassification"),Zgt.forEach(t),W4r=r(j7e," (RoFormer model)"),j7e.forEach(t),oo.forEach(t),Q4r=i(La),x2e=s(La,"P",{});var eht=n(x2e);H4r=r(eht,"Examples:"),eht.forEach(t),U4r=i(La),f(rL.$$.fragment,La),La.forEach(t),mi.forEach(t),K9e=i(d),am=s(d,"H2",{class:!0});var ike=n(am);AE=s(ike,"A",{id:!0,class:!0,href:!0});var oht=n(AE);k2e=s(oht,"SPAN",{});var rht=n(k2e);f(tL.$$.fragment,rht),rht.forEach(t),oht.forEach(t),J4r=i(ike),R2e=s(ike,"SPAN",{});var tht=n(R2e);Y4r=r(tht,"FlaxAutoModelForQuestionAnswering"),tht.forEach(t),ike.forEach(t),Z9e=i(d),Rr=s(d,"DIV",{class:!0});var gi=n(Rr);f(aL.$$.fragment,gi),K4r=i(gi),sm=s(gi,"P",{});var LV=n(sm);Z4r=r(LV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),S2e=s(LV,"CODE",{});var aht=n(S2e);eMr=r(aht,"from_pretrained()"),aht.forEach(t),oMr=r(LV,"class method or the "),P2e=s(LV,"CODE",{});var sht=n(P2e);rMr=r(sht,"from_config()"),sht.forEach(t),tMr=r(LV,`class
method.`),LV.forEach(t),aMr=i(gi),sL=s(gi,"P",{});var dke=n(sL);sMr=r(dke,"This class cannot be instantiated directly using "),$2e=s(dke,"CODE",{});var nht=n($2e);nMr=r(nht,"__init__()"),nht.forEach(t),lMr=r(dke," (throws an error)."),dke.forEach(t),iMr=i(gi),yt=s(gi,"DIV",{class:!0});var hi=n(yt);f(nL.$$.fragment,hi),dMr=i(hi),I2e=s(hi,"P",{});var lht=n(I2e);cMr=r(lht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lht.forEach(t),mMr=i(hi),nm=s(hi,"P",{});var BV=n(nm);fMr=r(BV,`Note:
Loading a model from its configuration file does `),j2e=s(BV,"STRONG",{});var iht=n(j2e);gMr=r(iht,"not"),iht.forEach(t),hMr=r(BV,` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=s(BV,"CODE",{});var dht=n(N2e);uMr=r(dht,"from_pretrained()"),dht.forEach(t),pMr=r(BV,"to load the model weights."),BV.forEach(t),_Mr=i(hi),D2e=s(hi,"P",{});var cht=n(D2e);bMr=r(cht,"Examples:"),cht.forEach(t),vMr=i(hi),f(lL.$$.fragment,hi),hi.forEach(t),TMr=i(gi),Ro=s(gi,"DIV",{class:!0});var Ba=n(Ro);f(iL.$$.fragment,Ba),FMr=i(Ba),q2e=s(Ba,"P",{});var mht=n(q2e);CMr=r(mht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mht.forEach(t),MMr=i(Ba),As=s(Ba,"P",{});var Y3=n(As);EMr=r(Y3,"The model class to instantiate is selected based on the "),G2e=s(Y3,"CODE",{});var fht=n(G2e);yMr=r(fht,"model_type"),fht.forEach(t),wMr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),O2e=s(Y3,"CODE",{});var ght=n(O2e);AMr=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),LMr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=s(Y3,"CODE",{});var hht=n(X2e);BMr=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),xMr=r(Y3,":"),Y3.forEach(t),kMr=i(Ba),Ce=s(Ba,"UL",{});var ro=n(Ce);LE=s(ro,"LI",{});var N7e=n(LE);z2e=s(N7e,"STRONG",{});var uht=n(z2e);RMr=r(uht,"albert"),uht.forEach(t),SMr=r(N7e," \u2014 "),FX=s(N7e,"A",{href:!0});var pht=n(FX);PMr=r(pht,"FlaxAlbertForQuestionAnswering"),pht.forEach(t),$Mr=r(N7e," (ALBERT model)"),N7e.forEach(t),IMr=i(ro),BE=s(ro,"LI",{});var D7e=n(BE);V2e=s(D7e,"STRONG",{});var _ht=n(V2e);jMr=r(_ht,"bart"),_ht.forEach(t),NMr=r(D7e," \u2014 "),CX=s(D7e,"A",{href:!0});var bht=n(CX);DMr=r(bht,"FlaxBartForQuestionAnswering"),bht.forEach(t),qMr=r(D7e," (BART model)"),D7e.forEach(t),GMr=i(ro),xE=s(ro,"LI",{});var q7e=n(xE);W2e=s(q7e,"STRONG",{});var vht=n(W2e);OMr=r(vht,"bert"),vht.forEach(t),XMr=r(q7e," \u2014 "),MX=s(q7e,"A",{href:!0});var Tht=n(MX);zMr=r(Tht,"FlaxBertForQuestionAnswering"),Tht.forEach(t),VMr=r(q7e," (BERT model)"),q7e.forEach(t),WMr=i(ro),kE=s(ro,"LI",{});var G7e=n(kE);Q2e=s(G7e,"STRONG",{});var Fht=n(Q2e);QMr=r(Fht,"big_bird"),Fht.forEach(t),HMr=r(G7e," \u2014 "),EX=s(G7e,"A",{href:!0});var Cht=n(EX);UMr=r(Cht,"FlaxBigBirdForQuestionAnswering"),Cht.forEach(t),JMr=r(G7e," (BigBird model)"),G7e.forEach(t),YMr=i(ro),RE=s(ro,"LI",{});var O7e=n(RE);H2e=s(O7e,"STRONG",{});var Mht=n(H2e);KMr=r(Mht,"distilbert"),Mht.forEach(t),ZMr=r(O7e," \u2014 "),yX=s(O7e,"A",{href:!0});var Eht=n(yX);eEr=r(Eht,"FlaxDistilBertForQuestionAnswering"),Eht.forEach(t),oEr=r(O7e," (DistilBERT model)"),O7e.forEach(t),rEr=i(ro),SE=s(ro,"LI",{});var X7e=n(SE);U2e=s(X7e,"STRONG",{});var yht=n(U2e);tEr=r(yht,"electra"),yht.forEach(t),aEr=r(X7e," \u2014 "),wX=s(X7e,"A",{href:!0});var wht=n(wX);sEr=r(wht,"FlaxElectraForQuestionAnswering"),wht.forEach(t),nEr=r(X7e," (ELECTRA model)"),X7e.forEach(t),lEr=i(ro),PE=s(ro,"LI",{});var z7e=n(PE);J2e=s(z7e,"STRONG",{});var Aht=n(J2e);iEr=r(Aht,"mbart"),Aht.forEach(t),dEr=r(z7e," \u2014 "),AX=s(z7e,"A",{href:!0});var Lht=n(AX);cEr=r(Lht,"FlaxMBartForQuestionAnswering"),Lht.forEach(t),mEr=r(z7e," (mBART model)"),z7e.forEach(t),fEr=i(ro),$E=s(ro,"LI",{});var V7e=n($E);Y2e=s(V7e,"STRONG",{});var Bht=n(Y2e);gEr=r(Bht,"roberta"),Bht.forEach(t),hEr=r(V7e," \u2014 "),LX=s(V7e,"A",{href:!0});var xht=n(LX);uEr=r(xht,"FlaxRobertaForQuestionAnswering"),xht.forEach(t),pEr=r(V7e," (RoBERTa model)"),V7e.forEach(t),_Er=i(ro),IE=s(ro,"LI",{});var W7e=n(IE);K2e=s(W7e,"STRONG",{});var kht=n(K2e);bEr=r(kht,"roformer"),kht.forEach(t),vEr=r(W7e," \u2014 "),BX=s(W7e,"A",{href:!0});var Rht=n(BX);TEr=r(Rht,"FlaxRoFormerForQuestionAnswering"),Rht.forEach(t),FEr=r(W7e," (RoFormer model)"),W7e.forEach(t),ro.forEach(t),CEr=i(Ba),Z2e=s(Ba,"P",{});var Sht=n(Z2e);MEr=r(Sht,"Examples:"),Sht.forEach(t),EEr=i(Ba),f(dL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),eBe=i(d),lm=s(d,"H2",{class:!0});var cke=n(lm);jE=s(cke,"A",{id:!0,class:!0,href:!0});var Pht=n(jE);eve=s(Pht,"SPAN",{});var $ht=n(eve);f(cL.$$.fragment,$ht),$ht.forEach(t),Pht.forEach(t),yEr=i(cke),ove=s(cke,"SPAN",{});var Iht=n(ove);wEr=r(Iht,"FlaxAutoModelForTokenClassification"),Iht.forEach(t),cke.forEach(t),oBe=i(d),Sr=s(d,"DIV",{class:!0});var ui=n(Sr);f(mL.$$.fragment,ui),AEr=i(ui),im=s(ui,"P",{});var xV=n(im);LEr=r(xV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rve=s(xV,"CODE",{});var jht=n(rve);BEr=r(jht,"from_pretrained()"),jht.forEach(t),xEr=r(xV,"class method or the "),tve=s(xV,"CODE",{});var Nht=n(tve);kEr=r(Nht,"from_config()"),Nht.forEach(t),REr=r(xV,`class
method.`),xV.forEach(t),SEr=i(ui),fL=s(ui,"P",{});var mke=n(fL);PEr=r(mke,"This class cannot be instantiated directly using "),ave=s(mke,"CODE",{});var Dht=n(ave);$Er=r(Dht,"__init__()"),Dht.forEach(t),IEr=r(mke," (throws an error)."),mke.forEach(t),jEr=i(ui),wt=s(ui,"DIV",{class:!0});var pi=n(wt);f(gL.$$.fragment,pi),NEr=i(pi),sve=s(pi,"P",{});var qht=n(sve);DEr=r(qht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qht.forEach(t),qEr=i(pi),dm=s(pi,"P",{});var kV=n(dm);GEr=r(kV,`Note:
Loading a model from its configuration file does `),nve=s(kV,"STRONG",{});var Ght=n(nve);OEr=r(Ght,"not"),Ght.forEach(t),XEr=r(kV,` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=s(kV,"CODE",{});var Oht=n(lve);zEr=r(Oht,"from_pretrained()"),Oht.forEach(t),VEr=r(kV,"to load the model weights."),kV.forEach(t),WEr=i(pi),ive=s(pi,"P",{});var Xht=n(ive);QEr=r(Xht,"Examples:"),Xht.forEach(t),HEr=i(pi),f(hL.$$.fragment,pi),pi.forEach(t),UEr=i(ui),So=s(ui,"DIV",{class:!0});var xa=n(So);f(uL.$$.fragment,xa),JEr=i(xa),dve=s(xa,"P",{});var zht=n(dve);YEr=r(zht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zht.forEach(t),KEr=i(xa),Ls=s(xa,"P",{});var K3=n(Ls);ZEr=r(K3,"The model class to instantiate is selected based on the "),cve=s(K3,"CODE",{});var Vht=n(cve);e3r=r(Vht,"model_type"),Vht.forEach(t),o3r=r(K3,` property of the config object (either
passed as an argument or loaded from `),mve=s(K3,"CODE",{});var Wht=n(mve);r3r=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),t3r=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=s(K3,"CODE",{});var Qht=n(fve);a3r=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),s3r=r(K3,":"),K3.forEach(t),n3r=i(xa),no=s(xa,"UL",{});var ta=n(no);NE=s(ta,"LI",{});var Q7e=n(NE);gve=s(Q7e,"STRONG",{});var Hht=n(gve);l3r=r(Hht,"albert"),Hht.forEach(t),i3r=r(Q7e," \u2014 "),xX=s(Q7e,"A",{href:!0});var Uht=n(xX);d3r=r(Uht,"FlaxAlbertForTokenClassification"),Uht.forEach(t),c3r=r(Q7e," (ALBERT model)"),Q7e.forEach(t),m3r=i(ta),DE=s(ta,"LI",{});var H7e=n(DE);hve=s(H7e,"STRONG",{});var Jht=n(hve);f3r=r(Jht,"bert"),Jht.forEach(t),g3r=r(H7e," \u2014 "),kX=s(H7e,"A",{href:!0});var Yht=n(kX);h3r=r(Yht,"FlaxBertForTokenClassification"),Yht.forEach(t),u3r=r(H7e," (BERT model)"),H7e.forEach(t),p3r=i(ta),qE=s(ta,"LI",{});var U7e=n(qE);uve=s(U7e,"STRONG",{});var Kht=n(uve);_3r=r(Kht,"big_bird"),Kht.forEach(t),b3r=r(U7e," \u2014 "),RX=s(U7e,"A",{href:!0});var Zht=n(RX);v3r=r(Zht,"FlaxBigBirdForTokenClassification"),Zht.forEach(t),T3r=r(U7e," (BigBird model)"),U7e.forEach(t),F3r=i(ta),GE=s(ta,"LI",{});var J7e=n(GE);pve=s(J7e,"STRONG",{});var eut=n(pve);C3r=r(eut,"distilbert"),eut.forEach(t),M3r=r(J7e," \u2014 "),SX=s(J7e,"A",{href:!0});var out=n(SX);E3r=r(out,"FlaxDistilBertForTokenClassification"),out.forEach(t),y3r=r(J7e," (DistilBERT model)"),J7e.forEach(t),w3r=i(ta),OE=s(ta,"LI",{});var Y7e=n(OE);_ve=s(Y7e,"STRONG",{});var rut=n(_ve);A3r=r(rut,"electra"),rut.forEach(t),L3r=r(Y7e," \u2014 "),PX=s(Y7e,"A",{href:!0});var tut=n(PX);B3r=r(tut,"FlaxElectraForTokenClassification"),tut.forEach(t),x3r=r(Y7e," (ELECTRA model)"),Y7e.forEach(t),k3r=i(ta),XE=s(ta,"LI",{});var K7e=n(XE);bve=s(K7e,"STRONG",{});var aut=n(bve);R3r=r(aut,"roberta"),aut.forEach(t),S3r=r(K7e," \u2014 "),$X=s(K7e,"A",{href:!0});var sut=n($X);P3r=r(sut,"FlaxRobertaForTokenClassification"),sut.forEach(t),$3r=r(K7e," (RoBERTa model)"),K7e.forEach(t),I3r=i(ta),zE=s(ta,"LI",{});var Z7e=n(zE);vve=s(Z7e,"STRONG",{});var nut=n(vve);j3r=r(nut,"roformer"),nut.forEach(t),N3r=r(Z7e," \u2014 "),IX=s(Z7e,"A",{href:!0});var lut=n(IX);D3r=r(lut,"FlaxRoFormerForTokenClassification"),lut.forEach(t),q3r=r(Z7e," (RoFormer model)"),Z7e.forEach(t),ta.forEach(t),G3r=i(xa),Tve=s(xa,"P",{});var iut=n(Tve);O3r=r(iut,"Examples:"),iut.forEach(t),X3r=i(xa),f(pL.$$.fragment,xa),xa.forEach(t),ui.forEach(t),rBe=i(d),cm=s(d,"H2",{class:!0});var fke=n(cm);VE=s(fke,"A",{id:!0,class:!0,href:!0});var dut=n(VE);Fve=s(dut,"SPAN",{});var cut=n(Fve);f(_L.$$.fragment,cut),cut.forEach(t),dut.forEach(t),z3r=i(fke),Cve=s(fke,"SPAN",{});var mut=n(Cve);V3r=r(mut,"FlaxAutoModelForMultipleChoice"),mut.forEach(t),fke.forEach(t),tBe=i(d),Pr=s(d,"DIV",{class:!0});var _i=n(Pr);f(bL.$$.fragment,_i),W3r=i(_i),mm=s(_i,"P",{});var RV=n(mm);Q3r=r(RV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mve=s(RV,"CODE",{});var fut=n(Mve);H3r=r(fut,"from_pretrained()"),fut.forEach(t),U3r=r(RV,"class method or the "),Eve=s(RV,"CODE",{});var gut=n(Eve);J3r=r(gut,"from_config()"),gut.forEach(t),Y3r=r(RV,`class
method.`),RV.forEach(t),K3r=i(_i),vL=s(_i,"P",{});var gke=n(vL);Z3r=r(gke,"This class cannot be instantiated directly using "),yve=s(gke,"CODE",{});var hut=n(yve);e5r=r(hut,"__init__()"),hut.forEach(t),o5r=r(gke," (throws an error)."),gke.forEach(t),r5r=i(_i),At=s(_i,"DIV",{class:!0});var bi=n(At);f(TL.$$.fragment,bi),t5r=i(bi),wve=s(bi,"P",{});var uut=n(wve);a5r=r(uut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uut.forEach(t),s5r=i(bi),fm=s(bi,"P",{});var SV=n(fm);n5r=r(SV,`Note:
Loading a model from its configuration file does `),Ave=s(SV,"STRONG",{});var put=n(Ave);l5r=r(put,"not"),put.forEach(t),i5r=r(SV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lve=s(SV,"CODE",{});var _ut=n(Lve);d5r=r(_ut,"from_pretrained()"),_ut.forEach(t),c5r=r(SV,"to load the model weights."),SV.forEach(t),m5r=i(bi),Bve=s(bi,"P",{});var but=n(Bve);f5r=r(but,"Examples:"),but.forEach(t),g5r=i(bi),f(FL.$$.fragment,bi),bi.forEach(t),h5r=i(_i),Po=s(_i,"DIV",{class:!0});var ka=n(Po);f(CL.$$.fragment,ka),u5r=i(ka),xve=s(ka,"P",{});var vut=n(xve);p5r=r(vut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vut.forEach(t),_5r=i(ka),Bs=s(ka,"P",{});var Z3=n(Bs);b5r=r(Z3,"The model class to instantiate is selected based on the "),kve=s(Z3,"CODE",{});var Tut=n(kve);v5r=r(Tut,"model_type"),Tut.forEach(t),T5r=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Rve=s(Z3,"CODE",{});var Fut=n(Rve);F5r=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),C5r=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=s(Z3,"CODE",{});var Cut=n(Sve);M5r=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),E5r=r(Z3,":"),Z3.forEach(t),y5r=i(ka),lo=s(ka,"UL",{});var aa=n(lo);WE=s(aa,"LI",{});var e8e=n(WE);Pve=s(e8e,"STRONG",{});var Mut=n(Pve);w5r=r(Mut,"albert"),Mut.forEach(t),A5r=r(e8e," \u2014 "),jX=s(e8e,"A",{href:!0});var Eut=n(jX);L5r=r(Eut,"FlaxAlbertForMultipleChoice"),Eut.forEach(t),B5r=r(e8e," (ALBERT model)"),e8e.forEach(t),x5r=i(aa),QE=s(aa,"LI",{});var o8e=n(QE);$ve=s(o8e,"STRONG",{});var yut=n($ve);k5r=r(yut,"bert"),yut.forEach(t),R5r=r(o8e," \u2014 "),NX=s(o8e,"A",{href:!0});var wut=n(NX);S5r=r(wut,"FlaxBertForMultipleChoice"),wut.forEach(t),P5r=r(o8e," (BERT model)"),o8e.forEach(t),$5r=i(aa),HE=s(aa,"LI",{});var r8e=n(HE);Ive=s(r8e,"STRONG",{});var Aut=n(Ive);I5r=r(Aut,"big_bird"),Aut.forEach(t),j5r=r(r8e," \u2014 "),DX=s(r8e,"A",{href:!0});var Lut=n(DX);N5r=r(Lut,"FlaxBigBirdForMultipleChoice"),Lut.forEach(t),D5r=r(r8e," (BigBird model)"),r8e.forEach(t),q5r=i(aa),UE=s(aa,"LI",{});var t8e=n(UE);jve=s(t8e,"STRONG",{});var But=n(jve);G5r=r(But,"distilbert"),But.forEach(t),O5r=r(t8e," \u2014 "),qX=s(t8e,"A",{href:!0});var xut=n(qX);X5r=r(xut,"FlaxDistilBertForMultipleChoice"),xut.forEach(t),z5r=r(t8e," (DistilBERT model)"),t8e.forEach(t),V5r=i(aa),JE=s(aa,"LI",{});var a8e=n(JE);Nve=s(a8e,"STRONG",{});var kut=n(Nve);W5r=r(kut,"electra"),kut.forEach(t),Q5r=r(a8e," \u2014 "),GX=s(a8e,"A",{href:!0});var Rut=n(GX);H5r=r(Rut,"FlaxElectraForMultipleChoice"),Rut.forEach(t),U5r=r(a8e," (ELECTRA model)"),a8e.forEach(t),J5r=i(aa),YE=s(aa,"LI",{});var s8e=n(YE);Dve=s(s8e,"STRONG",{});var Sut=n(Dve);Y5r=r(Sut,"roberta"),Sut.forEach(t),K5r=r(s8e," \u2014 "),OX=s(s8e,"A",{href:!0});var Put=n(OX);Z5r=r(Put,"FlaxRobertaForMultipleChoice"),Put.forEach(t),eyr=r(s8e," (RoBERTa model)"),s8e.forEach(t),oyr=i(aa),KE=s(aa,"LI",{});var n8e=n(KE);qve=s(n8e,"STRONG",{});var $ut=n(qve);ryr=r($ut,"roformer"),$ut.forEach(t),tyr=r(n8e," \u2014 "),XX=s(n8e,"A",{href:!0});var Iut=n(XX);ayr=r(Iut,"FlaxRoFormerForMultipleChoice"),Iut.forEach(t),syr=r(n8e," (RoFormer model)"),n8e.forEach(t),aa.forEach(t),nyr=i(ka),Gve=s(ka,"P",{});var jut=n(Gve);lyr=r(jut,"Examples:"),jut.forEach(t),iyr=i(ka),f(ML.$$.fragment,ka),ka.forEach(t),_i.forEach(t),aBe=i(d),gm=s(d,"H2",{class:!0});var hke=n(gm);ZE=s(hke,"A",{id:!0,class:!0,href:!0});var Nut=n(ZE);Ove=s(Nut,"SPAN",{});var Dut=n(Ove);f(EL.$$.fragment,Dut),Dut.forEach(t),Nut.forEach(t),dyr=i(hke),Xve=s(hke,"SPAN",{});var qut=n(Xve);cyr=r(qut,"FlaxAutoModelForNextSentencePrediction"),qut.forEach(t),hke.forEach(t),sBe=i(d),$r=s(d,"DIV",{class:!0});var vi=n($r);f(yL.$$.fragment,vi),myr=i(vi),hm=s(vi,"P",{});var PV=n(hm);fyr=r(PV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zve=s(PV,"CODE",{});var Gut=n(zve);gyr=r(Gut,"from_pretrained()"),Gut.forEach(t),hyr=r(PV,"class method or the "),Vve=s(PV,"CODE",{});var Out=n(Vve);uyr=r(Out,"from_config()"),Out.forEach(t),pyr=r(PV,`class
method.`),PV.forEach(t),_yr=i(vi),wL=s(vi,"P",{});var uke=n(wL);byr=r(uke,"This class cannot be instantiated directly using "),Wve=s(uke,"CODE",{});var Xut=n(Wve);vyr=r(Xut,"__init__()"),Xut.forEach(t),Tyr=r(uke," (throws an error)."),uke.forEach(t),Fyr=i(vi),Lt=s(vi,"DIV",{class:!0});var Ti=n(Lt);f(AL.$$.fragment,Ti),Cyr=i(Ti),Qve=s(Ti,"P",{});var zut=n(Qve);Myr=r(zut,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zut.forEach(t),Eyr=i(Ti),um=s(Ti,"P",{});var $V=n(um);yyr=r($V,`Note:
Loading a model from its configuration file does `),Hve=s($V,"STRONG",{});var Vut=n(Hve);wyr=r(Vut,"not"),Vut.forEach(t),Ayr=r($V,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=s($V,"CODE",{});var Wut=n(Uve);Lyr=r(Wut,"from_pretrained()"),Wut.forEach(t),Byr=r($V,"to load the model weights."),$V.forEach(t),xyr=i(Ti),Jve=s(Ti,"P",{});var Qut=n(Jve);kyr=r(Qut,"Examples:"),Qut.forEach(t),Ryr=i(Ti),f(LL.$$.fragment,Ti),Ti.forEach(t),Syr=i(vi),$o=s(vi,"DIV",{class:!0});var Ra=n($o);f(BL.$$.fragment,Ra),Pyr=i(Ra),Yve=s(Ra,"P",{});var Hut=n(Yve);$yr=r(Hut,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hut.forEach(t),Iyr=i(Ra),xs=s(Ra,"P",{});var e5=n(xs);jyr=r(e5,"The model class to instantiate is selected based on the "),Kve=s(e5,"CODE",{});var Uut=n(Kve);Nyr=r(Uut,"model_type"),Uut.forEach(t),Dyr=r(e5,` property of the config object (either
passed as an argument or loaded from `),Zve=s(e5,"CODE",{});var Jut=n(Zve);qyr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),Gyr=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=s(e5,"CODE",{});var Yut=n(eTe);Oyr=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),Xyr=r(e5,":"),e5.forEach(t),zyr=i(Ra),oTe=s(Ra,"UL",{});var Kut=n(oTe);e3=s(Kut,"LI",{});var l8e=n(e3);rTe=s(l8e,"STRONG",{});var Zut=n(rTe);Vyr=r(Zut,"bert"),Zut.forEach(t),Wyr=r(l8e," \u2014 "),zX=s(l8e,"A",{href:!0});var ept=n(zX);Qyr=r(ept,"FlaxBertForNextSentencePrediction"),ept.forEach(t),Hyr=r(l8e," (BERT model)"),l8e.forEach(t),Kut.forEach(t),Uyr=i(Ra),tTe=s(Ra,"P",{});var opt=n(tTe);Jyr=r(opt,"Examples:"),opt.forEach(t),Yyr=i(Ra),f(xL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),nBe=i(d),pm=s(d,"H2",{class:!0});var pke=n(pm);o3=s(pke,"A",{id:!0,class:!0,href:!0});var rpt=n(o3);aTe=s(rpt,"SPAN",{});var tpt=n(aTe);f(kL.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),Kyr=i(pke),sTe=s(pke,"SPAN",{});var apt=n(sTe);Zyr=r(apt,"FlaxAutoModelForImageClassification"),apt.forEach(t),pke.forEach(t),lBe=i(d),Ir=s(d,"DIV",{class:!0});var Fi=n(Ir);f(RL.$$.fragment,Fi),ewr=i(Fi),_m=s(Fi,"P",{});var IV=n(_m);owr=r(IV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nTe=s(IV,"CODE",{});var spt=n(nTe);rwr=r(spt,"from_pretrained()"),spt.forEach(t),twr=r(IV,"class method or the "),lTe=s(IV,"CODE",{});var npt=n(lTe);awr=r(npt,"from_config()"),npt.forEach(t),swr=r(IV,`class
method.`),IV.forEach(t),nwr=i(Fi),SL=s(Fi,"P",{});var _ke=n(SL);lwr=r(_ke,"This class cannot be instantiated directly using "),iTe=s(_ke,"CODE",{});var lpt=n(iTe);iwr=r(lpt,"__init__()"),lpt.forEach(t),dwr=r(_ke," (throws an error)."),_ke.forEach(t),cwr=i(Fi),Bt=s(Fi,"DIV",{class:!0});var Ci=n(Bt);f(PL.$$.fragment,Ci),mwr=i(Ci),dTe=s(Ci,"P",{});var ipt=n(dTe);fwr=r(ipt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ipt.forEach(t),gwr=i(Ci),bm=s(Ci,"P",{});var jV=n(bm);hwr=r(jV,`Note:
Loading a model from its configuration file does `),cTe=s(jV,"STRONG",{});var dpt=n(cTe);uwr=r(dpt,"not"),dpt.forEach(t),pwr=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),mTe=s(jV,"CODE",{});var cpt=n(mTe);_wr=r(cpt,"from_pretrained()"),cpt.forEach(t),bwr=r(jV,"to load the model weights."),jV.forEach(t),vwr=i(Ci),fTe=s(Ci,"P",{});var mpt=n(fTe);Twr=r(mpt,"Examples:"),mpt.forEach(t),Fwr=i(Ci),f($L.$$.fragment,Ci),Ci.forEach(t),Cwr=i(Fi),Io=s(Fi,"DIV",{class:!0});var Sa=n(Io);f(IL.$$.fragment,Sa),Mwr=i(Sa),gTe=s(Sa,"P",{});var fpt=n(gTe);Ewr=r(fpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fpt.forEach(t),ywr=i(Sa),ks=s(Sa,"P",{});var o5=n(ks);wwr=r(o5,"The model class to instantiate is selected based on the "),hTe=s(o5,"CODE",{});var gpt=n(hTe);Awr=r(gpt,"model_type"),gpt.forEach(t),Lwr=r(o5,` property of the config object (either
passed as an argument or loaded from `),uTe=s(o5,"CODE",{});var hpt=n(uTe);Bwr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),xwr=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=s(o5,"CODE",{});var upt=n(pTe);kwr=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),Rwr=r(o5,":"),o5.forEach(t),Swr=i(Sa),jL=s(Sa,"UL",{});var bke=n(jL);r3=s(bke,"LI",{});var i8e=n(r3);_Te=s(i8e,"STRONG",{});var ppt=n(_Te);Pwr=r(ppt,"beit"),ppt.forEach(t),$wr=r(i8e," \u2014 "),VX=s(i8e,"A",{href:!0});var _pt=n(VX);Iwr=r(_pt,"FlaxBeitForImageClassification"),_pt.forEach(t),jwr=r(i8e," (BEiT model)"),i8e.forEach(t),Nwr=i(bke),t3=s(bke,"LI",{});var d8e=n(t3);bTe=s(d8e,"STRONG",{});var bpt=n(bTe);Dwr=r(bpt,"vit"),bpt.forEach(t),qwr=r(d8e," \u2014 "),WX=s(d8e,"A",{href:!0});var vpt=n(WX);Gwr=r(vpt,"FlaxViTForImageClassification"),vpt.forEach(t),Owr=r(d8e," (ViT model)"),d8e.forEach(t),bke.forEach(t),Xwr=i(Sa),vTe=s(Sa,"P",{});var Tpt=n(vTe);zwr=r(Tpt,"Examples:"),Tpt.forEach(t),Vwr=i(Sa),f(NL.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),iBe=i(d),vm=s(d,"H2",{class:!0});var vke=n(vm);a3=s(vke,"A",{id:!0,class:!0,href:!0});var Fpt=n(a3);TTe=s(Fpt,"SPAN",{});var Cpt=n(TTe);f(DL.$$.fragment,Cpt),Cpt.forEach(t),Fpt.forEach(t),Wwr=i(vke),FTe=s(vke,"SPAN",{});var Mpt=n(FTe);Qwr=r(Mpt,"FlaxAutoModelForVision2Seq"),Mpt.forEach(t),vke.forEach(t),dBe=i(d),jr=s(d,"DIV",{class:!0});var Mi=n(jr);f(qL.$$.fragment,Mi),Hwr=i(Mi),Tm=s(Mi,"P",{});var NV=n(Tm);Uwr=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CTe=s(NV,"CODE",{});var Ept=n(CTe);Jwr=r(Ept,"from_pretrained()"),Ept.forEach(t),Ywr=r(NV,"class method or the "),MTe=s(NV,"CODE",{});var ypt=n(MTe);Kwr=r(ypt,"from_config()"),ypt.forEach(t),Zwr=r(NV,`class
method.`),NV.forEach(t),eAr=i(Mi),GL=s(Mi,"P",{});var Tke=n(GL);oAr=r(Tke,"This class cannot be instantiated directly using "),ETe=s(Tke,"CODE",{});var wpt=n(ETe);rAr=r(wpt,"__init__()"),wpt.forEach(t),tAr=r(Tke," (throws an error)."),Tke.forEach(t),aAr=i(Mi),xt=s(Mi,"DIV",{class:!0});var Ei=n(xt);f(OL.$$.fragment,Ei),sAr=i(Ei),yTe=s(Ei,"P",{});var Apt=n(yTe);nAr=r(Apt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Apt.forEach(t),lAr=i(Ei),Fm=s(Ei,"P",{});var DV=n(Fm);iAr=r(DV,`Note:
Loading a model from its configuration file does `),wTe=s(DV,"STRONG",{});var Lpt=n(wTe);dAr=r(Lpt,"not"),Lpt.forEach(t),cAr=r(DV,` load the model weights. It only affects the
model\u2019s configuration. Use `),ATe=s(DV,"CODE",{});var Bpt=n(ATe);mAr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),fAr=r(DV,"to load the model weights."),DV.forEach(t),gAr=i(Ei),LTe=s(Ei,"P",{});var xpt=n(LTe);hAr=r(xpt,"Examples:"),xpt.forEach(t),uAr=i(Ei),f(XL.$$.fragment,Ei),Ei.forEach(t),pAr=i(Mi),jo=s(Mi,"DIV",{class:!0});var Pa=n(jo);f(zL.$$.fragment,Pa),_Ar=i(Pa),BTe=s(Pa,"P",{});var kpt=n(BTe);bAr=r(kpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kpt.forEach(t),vAr=i(Pa),Rs=s(Pa,"P",{});var r5=n(Rs);TAr=r(r5,"The model class to instantiate is selected based on the "),xTe=s(r5,"CODE",{});var Rpt=n(xTe);FAr=r(Rpt,"model_type"),Rpt.forEach(t),CAr=r(r5,` property of the config object (either
passed as an argument or loaded from `),kTe=s(r5,"CODE",{});var Spt=n(kTe);MAr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),EAr=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=s(r5,"CODE",{});var Ppt=n(RTe);yAr=r(Ppt,"pretrained_model_name_or_path"),Ppt.forEach(t),wAr=r(r5,":"),r5.forEach(t),AAr=i(Pa),STe=s(Pa,"UL",{});var $pt=n(STe);s3=s($pt,"LI",{});var c8e=n(s3);PTe=s(c8e,"STRONG",{});var Ipt=n(PTe);LAr=r(Ipt,"vision-encoder-decoder"),Ipt.forEach(t),BAr=r(c8e," \u2014 "),QX=s(c8e,"A",{href:!0});var jpt=n(QX);xAr=r(jpt,"FlaxVisionEncoderDecoderModel"),jpt.forEach(t),kAr=r(c8e," (Vision Encoder decoder model)"),c8e.forEach(t),$pt.forEach(t),RAr=i(Pa),$Te=s(Pa,"P",{});var Npt=n($Te);SAr=r(Npt,"Examples:"),Npt.forEach(t),PAr=i(Pa),f(VL.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(Qpt)),c(fe,"id","auto-classes"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#auto-classes"),c(ie,"class","relative group"),c(Ss,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig"),c($s,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),c(Is,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(Am,"id","extending-the-auto-classes"),c(Am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Am,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(Bm,"id","transformers.AutoConfig"),c(Bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bm,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(H7,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(U7,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig"),c(J7,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartConfig"),c(Y7,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig"),c(K7,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertConfig"),c(Z7,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(e8,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig"),c(o8,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(r8,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(t8,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(a8,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig"),c(s8,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig"),c(n8,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig"),c(l8,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig"),c(i8,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig"),c(d8,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig"),c(c8,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig"),c(m8,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(f8,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig"),c(g8,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig"),c(h8,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),c(u8,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig"),c(p8,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig"),c(_8,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(b8,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig"),c(v8,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig"),c(T8,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig"),c(F8,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig"),c(C8,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config"),c(M8,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(E8,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig"),c(y8,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig"),c(w8,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig"),c(A8,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(L8,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(B8,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(x8,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDConfig"),c(k8,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig"),c(R8,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig"),c(S8,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig"),c(P8,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config"),c($8,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig"),c(I8,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig"),c(j8,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(N8,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(D8,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig"),c(q8,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config"),c(G8,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(O8,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(X8,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig"),c(z8,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig"),c(V8,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig"),c(W8,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Q8,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(H8,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(U8,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagConfig"),c(J8,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmConfig"),c(Y8,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig"),c(K8,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig"),c(Z8,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig"),c(e9,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig"),c(o9,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig"),c(r9,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig"),c(t9,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig"),c(a9,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig"),c(s9,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(n9,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(l9,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(i9,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig"),c(d9,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(c9,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig"),c(m9,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Config"),c(f9,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig"),c(g9,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(h9,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"),c(u9,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(p9,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(_9,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig"),c(b9,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(v9,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(T9,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(F9,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig"),c(C9,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(M9,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(E9,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig"),c(y9,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig"),c(w9,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig"),c(A9,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(L9,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(B9,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(x9,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig"),c(k9,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(hg,"class","docstring"),c(Go,"class","docstring"),c(ug,"id","transformers.AutoTokenizer"),c(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ug,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(R9,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(S9,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizer"),c(P9,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($9,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),c(I9,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizerFast"),c(j9,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizer"),c(N9,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(D9,"href","/docs/transformers/master/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(q9,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(G9,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(O9,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(X9,"href","/docs/transformers/master/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(z9,"href","/docs/transformers/master/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(V9,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(W9,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Q9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(H9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(U9,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(J9,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Y9,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(K9,"href","/docs/transformers/master/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Z9,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),c(eB,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(oB,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineTokenizer"),c(rB,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizer"),c(tB,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aB,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sB,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nB,"href","/docs/transformers/master/en/model_doc/cpm#transformers.CpmTokenizer"),c(lB,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iB,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dB,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cB,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mB,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fB,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gB,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hB,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uB,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizer"),c(pB,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_B,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bB,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizer"),c(vB,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TB,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FB,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CB,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LB,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BB,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SB,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PB,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($B,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IB,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jB,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NB,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizer"),c(DB,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizerFast"),c(qB,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizer"),c(GB,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(OB,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeTokenizer"),c(XB,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zB,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VB,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(WB,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianTokenizer"),c(QB,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizer"),c(HB,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(UB,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(JB,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(YB,"href","/docs/transformers/master/en/model_doc/mluke#transformers.MLukeTokenizer"),c(KB,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ZB,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ex,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ox,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rx,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),c(tx,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ax,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sx,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nx,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lx,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ix,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dx,"href","/docs/transformers/master/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cx,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mx,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fx,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(gx,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(hx,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagTokenizer"),c(ux,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizer"),c(px,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_x,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bx,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vx,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Tx,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Fx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Cx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Mx,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Ex,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yx,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wx,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Ax,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Lx,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Bx,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xx,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kx,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),c(Rx,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Sx,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasTokenizer"),c(Px,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($x,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ix,"href","/docs/transformers/master/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jx,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nx,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Dx,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMTokenizer"),c(qx,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Gx,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Ox,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Xx,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zx,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(fo,"class","docstring"),c(Vg,"class","docstring"),c(Oo,"class","docstring"),c(Wg,"id","transformers.AutoFeatureExtractor"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(Vx,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Wx,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Qx,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Hx,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Ux,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Jx,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Yx,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Kx,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Zx,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(ek,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ok,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rk,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tk,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ak,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sk,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(dh,"class","docstring"),c(Xo,"class","docstring"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(lk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ik,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPProcessor"),c(dk,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(ck,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(mk,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(fk,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gk,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hk,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(uk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(Th,"class","docstring"),c(zo,"class","docstring"),c(Fh,"id","transformers.AutoModel"),c(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fh,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Nr,"class","docstring"),c(pk,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel"),c(_k,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartModel"),c(bk,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitModel"),c(vk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(Tk,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Fk,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel"),c(Ck,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Mk,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Ek,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(yk,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel"),c(wk,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineModel"),c(Ak,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel"),c(Lk,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel"),c(Bk,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel"),c(xk,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel"),c(kk,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel"),c(Rk,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Sk,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel"),c(Pk,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrModel"),c($k,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel"),c(Ik,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(jk,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel"),c(Nk,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel"),c(Dk,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel"),c(qk,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel"),c(Gk,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel"),c(Ok,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Xk,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model"),c(zk,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Vk,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel"),c(Wk,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel"),c(Qk,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel"),c(Hk,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Uk,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Jk,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Yk,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDModel"),c(Kk,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel"),c(Zk,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeModel"),c(eR,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel"),c(oR,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model"),c(rR,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianModel"),c(tR,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel"),c(aR,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sR,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nR,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel"),c(lR,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model"),c(iR,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dR,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cR,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel"),c(mR,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel"),c(fR,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel"),c(gR,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hR,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(uR,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel"),c(pR,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel"),c(_R,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel"),c(bR,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(vR,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel"),c(TR,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel"),c(FR,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel"),c(CR,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWModel"),c(MR,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel"),c(ER,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yR,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel"),c(wR,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(AR,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinModel"),c(LR,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Model"),c(BR,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel"),c(xR,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kR,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel"),c(RR,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(SR,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel"),c(PR,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($R,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel"),c(IR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTModel"),c(jR,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(NR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(DR,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel"),c(qR,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel"),c(GR,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel"),c(OR,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(XR,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zR,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(VR,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel"),c(WR,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel"),c(xe,"class","docstring"),c(Vo,"class","docstring"),c(Ku,"id","transformers.AutoModelForPreTraining"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(Dr,"class","docstring"),c(QR,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HR,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UR,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining"),c(JR,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YR,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KR,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZR,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eS,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oS,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rS,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining"),c(tS,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aS,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining"),c(sS,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(nS,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lS,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iS,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dS,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cS,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mS,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(fS,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gS,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hS,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pS,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(_S,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bS,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vS,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TS,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FS,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(MS,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ES,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(AS,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LS,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BS,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xS,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(ke,"class","docstring"),c(Wo,"class","docstring"),c(Np,"id","transformers.AutoModelForCausalLM"),c(Np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Np,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(qr,"class","docstring"),c(kS,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM"),c(RS,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel"),c(SS,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(PS,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($S,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(IS,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jS,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(NS,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(DS,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qS,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM"),c(GS,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(OS,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(XS,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(zS,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM"),c(VS,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM"),c(WS,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(QS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HS,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(US,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(JS,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(YS,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(KS,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ZS,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(eP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(oP,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(rP,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(tP,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aP,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(sP,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(nP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lP,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(iP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(dP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(cP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(T_,"id","transformers.AutoModelForMaskedLM"),c(T_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T_,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(Gr,"class","docstring"),c(mP,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM"),c(hP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pP,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(_P,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bP,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vP,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FP,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CP,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MP,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(EP,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yP,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wP,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AP,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(BP,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xP,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kP,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RP,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SP,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(PP,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c($P,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(IP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jP,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(NP,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DP,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XP,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(rb,"id","transformers.AutoModelForSeq2SeqLM"),c(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(Or,"class","docstring"),c(zP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VP,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WP,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QP,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HP,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UP,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JP,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YP,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KP,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel"),c(ZP,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(e$,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(o$,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(r$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(t$,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(a$,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(s$,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(Tb,"id","transformers.AutoModelForSequenceClassification"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(Xr,"class","docstring"),c(n$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(l$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification"),c(i$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification"),c(d$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(c$,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(m$,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(f$,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(g$,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(h$,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(u$,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(p$,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(_$,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(b$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(v$,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(T$,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(F$,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(C$,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(M$,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(E$,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(y$,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(w$,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(A$,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(L$,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification"),c(B$,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(x$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(k$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(R$,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(S$,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(P$,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($$,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(I$,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(j$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(N$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(D$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(q$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(G$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(O$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(X$,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(z$,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(V$,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(W$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Q$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(H$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(U$,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(J$,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(g2,"id","transformers.AutoModelForMultipleChoice"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(zr,"class","docstring"),c(Y$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(K$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Z$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(eI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(oI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(rI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(tI,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aI,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(sI,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iI,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(mI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(uI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_I,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bI,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vI,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(TI,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FI,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CI,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MI,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(O2,"id","transformers.AutoModelForNextSentencePrediction"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Vr,"class","docstring"),c(EI,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(LI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Ko,"class","docstring"),c(U2,"id","transformers.AutoModelForTokenClassification"),c(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U2,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Wr,"class","docstring"),c(BI,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xI,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification"),c(kI,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($I,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(II,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jI,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(NI,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DI,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(qI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(GI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(OI,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XI,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zI,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(VI,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(WI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(QI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(HI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(UI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(JI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(YI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(KI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(ZI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(ej,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(oj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(rj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(tj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(aj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(sj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(nj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(Bv,"id","transformers.AutoModelForQuestionAnswering"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(Qr,"class","docstring"),c(lj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ij,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(mj,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(fj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(uj,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(pj,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(_j,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vj,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Tj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Fj,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Cj,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Mj,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Ej,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yj,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wj,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Aj,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Lj,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Bj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kj,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Rj,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Sj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Pj,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($j,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Ij,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jj,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Nj,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Dj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Gj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Oj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Xj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(zj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(er,"class","docstring"),c(uT,"id","transformers.AutoModelForTableQuestionAnswering"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(pd,"class","relative group"),c(Hr,"class","docstring"),c(Vj,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(or,"class","docstring"),c(bT,"id","transformers.AutoModelForImageClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(Ur,"class","docstring"),c(Wj,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification"),c(Qj,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Hj,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Uj,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Jj,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Yj,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Kj,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Zj,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(eN,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(oN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(rN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification"),c(tN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(AT,"id","transformers.AutoModelForVision2Seq"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(Jr,"class","docstring"),c(aN,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(xT,"id","transformers.AutoModelForAudioClassification"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(Yr,"class","docstring"),c(sN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(DT,"id","transformers.AutoModelForAudioFrameClassification"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(Kr,"class","docstring"),c(fN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(sr,"class","docstring"),c(zT,"id","transformers.AutoModelForCTC"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(Zr,"class","docstring"),c(uN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC"),c(pN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC"),c(_N,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(TN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(nr,"class","docstring"),c(ZT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(et,"class","docstring"),c(CN,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(lr,"class","docstring"),c(t1,"id","transformers.AutoModelForAudioXVector"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(ot,"class","docstring"),c(EN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(i1,"id","transformers.AutoModelForMaskedImageModeling"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(rt,"class","docstring"),c(AN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(LN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(BN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(dr,"class","docstring"),c(g1,"id","transformers.AutoModelForObjectDetection"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(tt,"class","docstring"),c(xN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(p1,"id","transformers.AutoModelForImageSegmentation"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(at,"class","docstring"),c(kN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(mr,"class","docstring"),c(v1,"id","transformers.AutoModelForSemanticSegmentation"),c(v1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v1,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(st,"class","docstring"),c(RN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(SN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ye,"class","docstring"),c(fr,"class","docstring"),c(M1,"id","transformers.TFAutoModel"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(nt,"class","docstring"),c(PN,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel"),c($N,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel"),c(IN,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel"),c(jN,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(NN,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DN,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel"),c(qN,"href","/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel"),c(GN,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel"),c(ON,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel"),c(XN,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zN,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel"),c(VN,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(WN,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(QN,"href","/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HN,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel"),c(UN,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JN,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel"),c(YN,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KN,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel"),c(eD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(oD,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel"),c(rD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel"),c(tD,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel"),c(aD,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel"),c(sD,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel"),c(nD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(lD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel"),c(iD,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model"),c(dD,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(cD,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel"),c(mD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel"),c(fD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel"),c(gD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel"),c(hD,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(uD,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model"),c(pD,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel"),c(_D,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bD,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel"),c(vD,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel"),c(FD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(CD,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(gr,"class","docstring"),c(mF,"id","transformers.TFAutoModelForPreTraining"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(lt,"class","docstring"),c(MD,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ED,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yD,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wD,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AD,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BD,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RD,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PD,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($D,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ID,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jD,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ND,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DD,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qD,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GD,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(zD,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(hr,"class","docstring"),c(PF,"id","transformers.TFAutoModelForCausalLM"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(it,"class","docstring"),c(VD,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WD,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QD,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HD,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KD,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(uo,"class","docstring"),c(ur,"class","docstring"),c(VF,"id","transformers.TFAutoModelForImageClassification"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(dt,"class","docstring"),c(oq,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rq,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification"),c(po,"class","docstring"),c(pr,"class","docstring"),c(HF,"id","transformers.TFAutoModelForMaskedLM"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(ct,"class","docstring"),c(tq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(sq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lq,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(mq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(uq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_q,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Tq,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Fq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Cq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(_o,"class","docstring"),c(_r,"class","docstring"),c(uC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(mt,"class","docstring"),c(Mq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Eq,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yq,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wq,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Aq,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Lq,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel"),c(Bq,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xq,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kq,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Rq,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(br,"class","docstring"),c(wC,"id","transformers.TFAutoModelForSequenceClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(ft,"class","docstring"),c(Sq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Pq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($q,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Iq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Nq,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Dq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Gq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Oq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Xq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Vq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Wq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Qq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Hq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Uq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Jq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Yq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Kq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Zq,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(eG,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(oG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(rG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(tG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(vr,"class","docstring"),c(KC,"id","transformers.TFAutoModelForMultipleChoice"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(gt,"class","docstring"),c(aG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(sG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(nG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(mG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(fG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(pG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(_G,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(TG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Tr,"class","docstring"),c(p4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(ht,"class","docstring"),c(FG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Fr,"class","docstring"),c(b4,"id","transformers.TFAutoModelForTokenClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(ut,"class","docstring"),c(CG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(MG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(EG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(AG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(SG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($G,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Cr,"class","docstring"),c(D4,"id","transformers.TFAutoModelForQuestionAnswering"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(pt,"class","docstring"),c(OG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(VG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(QG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(HG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(UG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(JG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(YG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(KG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(ZG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(eO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(oO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(rO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(tO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(aO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(sO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(nO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(Mr,"class","docstring"),c(sM,"id","transformers.TFAutoModelForVision2Seq"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(_t,"class","docstring"),c(lO,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(Er,"class","docstring"),c(lM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bt,"class","docstring"),c(iO,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(yr,"class","docstring"),c(dM,"id","transformers.FlaxAutoModel"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.FlaxAutoModel"),c(qc,"class","relative group"),c(vt,"class","docstring"),c(dO,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cO,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel"),c(mO,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel"),c(fO,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel"),c(gO,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hO,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(uO,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pO,"href","/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_O,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bO,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel"),c(vO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TO,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(FO,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CO,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel"),c(MO,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel"),c(EO,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yO,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(LO,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model"),c(BO,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xO,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel"),c(kO,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RO,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(wr,"class","docstring"),c(PM,"id","transformers.FlaxAutoModelForCausalLM"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(Tt,"class","docstring"),c(SO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PO,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($O,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IO,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Ar,"class","docstring"),c(DM,"id","transformers.FlaxAutoModelForPreTraining"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(Ft,"class","docstring"),c(jO,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NO,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DO,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(qO,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(GO,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(OO,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XO,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WO,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(Lr,"class","docstring"),c(YM,"id","transformers.FlaxAutoModelForMaskedLM"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(Ct,"class","docstring"),c(HO,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UO,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JO,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YO,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZO,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(Br,"class","docstring"),c(lE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(Mt,"class","docstring"),c(tX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aX,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(sX,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(nX,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(iX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(mX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xo,"class","docstring"),c(xr,"class","docstring"),c(_E,"id","transformers.FlaxAutoModelForSequenceClassification"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(om,"class","relative group"),c(Et,"class","docstring"),c(fX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(pX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(_X,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ko,"class","docstring"),c(kr,"class","docstring"),c(AE,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(am,"class","relative group"),c(yt,"class","docstring"),c(FX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(MX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(EX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(AX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Rr,"class","docstring"),c(jE,"id","transformers.FlaxAutoModelForTokenClassification"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lm,"class","relative group"),c(wt,"class","docstring"),c(xX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(RX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($X,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c(Sr,"class","docstring"),c(VE,"id","transformers.FlaxAutoModelForMultipleChoice"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(cm,"class","relative group"),c(At,"class","docstring"),c(jX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(DX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(XX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Pr,"class","docstring"),c(ZE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(gm,"class","relative group"),c(Lt,"class","docstring"),c(zX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c($r,"class","docstring"),c(o3,"id","transformers.FlaxAutoModelForImageClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForImageClassification"),c(pm,"class","relative group"),c(Bt,"class","docstring"),c(VX,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WX,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(Ir,"class","docstring"),c(a3,"id","transformers.FlaxAutoModelForVision2Seq"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(vm,"class","relative group"),c(xt,"class","docstring"),c(QX,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(jo,"class","docstring"),c(jr,"class","docstring")},m(d,_){e(document.head,J),b(d,Ae,_),b(d,ie,_),e(ie,fe),e(fe,to),g(ce,to,null),e(ie,_e),e(ie,Do),e(Do,wi),b(d,Mm,_),b(d,na,_),e(na,Ai),e(na,Li),e(Li,t5),e(na,Em),b(d,ye,_),b(d,io,_),e(io,Bi),e(io,Ss),e(Ss,a5),e(io,Ps),e(io,$s),e($s,s5),e(io,xi),e(io,Is),e(Is,n5),e(io,ki),b(d,ym,_),g($a,d,_),b(d,co,_),b(d,ge,_),e(ge,O7),e(ge,Ri),e(Ri,X7),e(ge,z7),b(d,qo,_),b(d,Ia,_),e(Ia,V7),e(Ia,wm),e(wm,W7),e(Ia,Fke),b(d,m8e,_),b(d,Si,_),e(Si,Am),e(Am,qV),g(l5,qV,null),e(Si,Cke),e(Si,GV),e(GV,Mke),b(d,f8e,_),b(d,js,_),e(js,Eke),e(js,OV),e(OV,yke),e(js,wke),e(js,XV),e(XV,Ake),e(js,Lke),b(d,g8e,_),g(i5,d,_),b(d,h8e,_),b(d,Q7,_),e(Q7,Bke),b(d,u8e,_),g(Lm,d,_),b(d,p8e,_),b(d,Pi,_),e(Pi,Bm),e(Bm,zV),g(d5,zV,null),e(Pi,xke),e(Pi,VV),e(VV,kke),b(d,_8e,_),b(d,Go,_),g(c5,Go,null),e(Go,Rke),e(Go,m5),e(m5,Ske),e(m5,H7),e(H7,Pke),e(m5,$ke),e(Go,Ike),e(Go,f5),e(f5,jke),e(f5,WV),e(WV,Nke),e(f5,Dke),e(Go,qke),e(Go,mo),g(g5,mo,null),e(mo,Gke),e(mo,QV),e(QV,Oke),e(mo,Xke),e(mo,$i),e($i,zke),e($i,HV),e(HV,Vke),e($i,Wke),e($i,UV),e(UV,Qke),e($i,Hke),e(mo,Uke),e(mo,v),e(v,xm),e(xm,JV),e(JV,Jke),e(xm,Yke),e(xm,U7),e(U7,Kke),e(xm,Zke),e(v,eRe),e(v,km),e(km,YV),e(YV,oRe),e(km,rRe),e(km,J7),e(J7,tRe),e(km,aRe),e(v,sRe),e(v,Rm),e(Rm,KV),e(KV,nRe),e(Rm,lRe),e(Rm,Y7),e(Y7,iRe),e(Rm,dRe),e(v,cRe),e(v,Sm),e(Sm,ZV),e(ZV,mRe),e(Sm,fRe),e(Sm,K7),e(K7,gRe),e(Sm,hRe),e(v,uRe),e(v,Pm),e(Pm,eW),e(eW,pRe),e(Pm,_Re),e(Pm,Z7),e(Z7,bRe),e(Pm,vRe),e(v,TRe),e(v,$m),e($m,oW),e(oW,FRe),e($m,CRe),e($m,e8),e(e8,MRe),e($m,ERe),e(v,yRe),e(v,Im),e(Im,rW),e(rW,wRe),e(Im,ARe),e(Im,o8),e(o8,LRe),e(Im,BRe),e(v,xRe),e(v,jm),e(jm,tW),e(tW,kRe),e(jm,RRe),e(jm,r8),e(r8,SRe),e(jm,PRe),e(v,$Re),e(v,Nm),e(Nm,aW),e(aW,IRe),e(Nm,jRe),e(Nm,t8),e(t8,NRe),e(Nm,DRe),e(v,qRe),e(v,Dm),e(Dm,sW),e(sW,GRe),e(Dm,ORe),e(Dm,a8),e(a8,XRe),e(Dm,zRe),e(v,VRe),e(v,qm),e(qm,nW),e(nW,WRe),e(qm,QRe),e(qm,s8),e(s8,HRe),e(qm,URe),e(v,JRe),e(v,Gm),e(Gm,lW),e(lW,YRe),e(Gm,KRe),e(Gm,n8),e(n8,ZRe),e(Gm,eSe),e(v,oSe),e(v,Om),e(Om,iW),e(iW,rSe),e(Om,tSe),e(Om,l8),e(l8,aSe),e(Om,sSe),e(v,nSe),e(v,Xm),e(Xm,dW),e(dW,lSe),e(Xm,iSe),e(Xm,i8),e(i8,dSe),e(Xm,cSe),e(v,mSe),e(v,zm),e(zm,cW),e(cW,fSe),e(zm,gSe),e(zm,d8),e(d8,hSe),e(zm,uSe),e(v,pSe),e(v,Vm),e(Vm,mW),e(mW,_Se),e(Vm,bSe),e(Vm,c8),e(c8,vSe),e(Vm,TSe),e(v,FSe),e(v,Wm),e(Wm,fW),e(fW,CSe),e(Wm,MSe),e(Wm,m8),e(m8,ESe),e(Wm,ySe),e(v,wSe),e(v,Qm),e(Qm,gW),e(gW,ASe),e(Qm,LSe),e(Qm,f8),e(f8,BSe),e(Qm,xSe),e(v,kSe),e(v,Hm),e(Hm,hW),e(hW,RSe),e(Hm,SSe),e(Hm,g8),e(g8,PSe),e(Hm,$Se),e(v,ISe),e(v,Um),e(Um,uW),e(uW,jSe),e(Um,NSe),e(Um,h8),e(h8,DSe),e(Um,qSe),e(v,GSe),e(v,Jm),e(Jm,pW),e(pW,OSe),e(Jm,XSe),e(Jm,u8),e(u8,zSe),e(Jm,VSe),e(v,WSe),e(v,Ym),e(Ym,_W),e(_W,QSe),e(Ym,HSe),e(Ym,p8),e(p8,USe),e(Ym,JSe),e(v,YSe),e(v,Km),e(Km,bW),e(bW,KSe),e(Km,ZSe),e(Km,_8),e(_8,ePe),e(Km,oPe),e(v,rPe),e(v,Zm),e(Zm,vW),e(vW,tPe),e(Zm,aPe),e(Zm,b8),e(b8,sPe),e(Zm,nPe),e(v,lPe),e(v,ef),e(ef,TW),e(TW,iPe),e(ef,dPe),e(ef,v8),e(v8,cPe),e(ef,mPe),e(v,fPe),e(v,of),e(of,FW),e(FW,gPe),e(of,hPe),e(of,T8),e(T8,uPe),e(of,pPe),e(v,_Pe),e(v,rf),e(rf,CW),e(CW,bPe),e(rf,vPe),e(rf,F8),e(F8,TPe),e(rf,FPe),e(v,CPe),e(v,tf),e(tf,MW),e(MW,MPe),e(tf,EPe),e(tf,C8),e(C8,yPe),e(tf,wPe),e(v,APe),e(v,af),e(af,EW),e(EW,LPe),e(af,BPe),e(af,M8),e(M8,xPe),e(af,kPe),e(v,RPe),e(v,sf),e(sf,yW),e(yW,SPe),e(sf,PPe),e(sf,E8),e(E8,$Pe),e(sf,IPe),e(v,jPe),e(v,nf),e(nf,wW),e(wW,NPe),e(nf,DPe),e(nf,y8),e(y8,qPe),e(nf,GPe),e(v,OPe),e(v,lf),e(lf,AW),e(AW,XPe),e(lf,zPe),e(lf,w8),e(w8,VPe),e(lf,WPe),e(v,QPe),e(v,df),e(df,LW),e(LW,HPe),e(df,UPe),e(df,A8),e(A8,JPe),e(df,YPe),e(v,KPe),e(v,cf),e(cf,BW),e(BW,ZPe),e(cf,e$e),e(cf,L8),e(L8,o$e),e(cf,r$e),e(v,t$e),e(v,mf),e(mf,xW),e(xW,a$e),e(mf,s$e),e(mf,B8),e(B8,n$e),e(mf,l$e),e(v,i$e),e(v,ff),e(ff,kW),e(kW,d$e),e(ff,c$e),e(ff,x8),e(x8,m$e),e(ff,f$e),e(v,g$e),e(v,gf),e(gf,RW),e(RW,h$e),e(gf,u$e),e(gf,k8),e(k8,p$e),e(gf,_$e),e(v,b$e),e(v,hf),e(hf,SW),e(SW,v$e),e(hf,T$e),e(hf,R8),e(R8,F$e),e(hf,C$e),e(v,M$e),e(v,uf),e(uf,PW),e(PW,E$e),e(uf,y$e),e(uf,S8),e(S8,w$e),e(uf,A$e),e(v,L$e),e(v,pf),e(pf,$W),e($W,B$e),e(pf,x$e),e(pf,P8),e(P8,k$e),e(pf,R$e),e(v,S$e),e(v,_f),e(_f,IW),e(IW,P$e),e(_f,$$e),e(_f,$8),e($8,I$e),e(_f,j$e),e(v,N$e),e(v,bf),e(bf,jW),e(jW,D$e),e(bf,q$e),e(bf,I8),e(I8,G$e),e(bf,O$e),e(v,X$e),e(v,vf),e(vf,NW),e(NW,z$e),e(vf,V$e),e(vf,j8),e(j8,W$e),e(vf,Q$e),e(v,H$e),e(v,Tf),e(Tf,DW),e(DW,U$e),e(Tf,J$e),e(Tf,N8),e(N8,Y$e),e(Tf,K$e),e(v,Z$e),e(v,Ff),e(Ff,qW),e(qW,eIe),e(Ff,oIe),e(Ff,D8),e(D8,rIe),e(Ff,tIe),e(v,aIe),e(v,Cf),e(Cf,GW),e(GW,sIe),e(Cf,nIe),e(Cf,q8),e(q8,lIe),e(Cf,iIe),e(v,dIe),e(v,Mf),e(Mf,OW),e(OW,cIe),e(Mf,mIe),e(Mf,G8),e(G8,fIe),e(Mf,gIe),e(v,hIe),e(v,Ef),e(Ef,XW),e(XW,uIe),e(Ef,pIe),e(Ef,O8),e(O8,_Ie),e(Ef,bIe),e(v,vIe),e(v,yf),e(yf,zW),e(zW,TIe),e(yf,FIe),e(yf,X8),e(X8,CIe),e(yf,MIe),e(v,EIe),e(v,wf),e(wf,VW),e(VW,yIe),e(wf,wIe),e(wf,z8),e(z8,AIe),e(wf,LIe),e(v,BIe),e(v,Af),e(Af,WW),e(WW,xIe),e(Af,kIe),e(Af,V8),e(V8,RIe),e(Af,SIe),e(v,PIe),e(v,Lf),e(Lf,QW),e(QW,$Ie),e(Lf,IIe),e(Lf,W8),e(W8,jIe),e(Lf,NIe),e(v,DIe),e(v,Bf),e(Bf,HW),e(HW,qIe),e(Bf,GIe),e(Bf,Q8),e(Q8,OIe),e(Bf,XIe),e(v,zIe),e(v,xf),e(xf,UW),e(UW,VIe),e(xf,WIe),e(xf,H8),e(H8,QIe),e(xf,HIe),e(v,UIe),e(v,kf),e(kf,JW),e(JW,JIe),e(kf,YIe),e(kf,U8),e(U8,KIe),e(kf,ZIe),e(v,eje),e(v,Rf),e(Rf,YW),e(YW,oje),e(Rf,rje),e(Rf,J8),e(J8,tje),e(Rf,aje),e(v,sje),e(v,Sf),e(Sf,KW),e(KW,nje),e(Sf,lje),e(Sf,Y8),e(Y8,ije),e(Sf,dje),e(v,cje),e(v,Pf),e(Pf,ZW),e(ZW,mje),e(Pf,fje),e(Pf,K8),e(K8,gje),e(Pf,hje),e(v,uje),e(v,$f),e($f,eQ),e(eQ,pje),e($f,_je),e($f,Z8),e(Z8,bje),e($f,vje),e(v,Tje),e(v,If),e(If,oQ),e(oQ,Fje),e(If,Cje),e(If,e9),e(e9,Mje),e(If,Eje),e(v,yje),e(v,jf),e(jf,rQ),e(rQ,wje),e(jf,Aje),e(jf,o9),e(o9,Lje),e(jf,Bje),e(v,xje),e(v,Nf),e(Nf,tQ),e(tQ,kje),e(Nf,Rje),e(Nf,r9),e(r9,Sje),e(Nf,Pje),e(v,$je),e(v,Df),e(Df,aQ),e(aQ,Ije),e(Df,jje),e(Df,t9),e(t9,Nje),e(Df,Dje),e(v,qje),e(v,qf),e(qf,sQ),e(sQ,Gje),e(qf,Oje),e(qf,a9),e(a9,Xje),e(qf,zje),e(v,Vje),e(v,Gf),e(Gf,nQ),e(nQ,Wje),e(Gf,Qje),e(Gf,s9),e(s9,Hje),e(Gf,Uje),e(v,Jje),e(v,Of),e(Of,lQ),e(lQ,Yje),e(Of,Kje),e(Of,n9),e(n9,Zje),e(Of,eNe),e(v,oNe),e(v,Xf),e(Xf,iQ),e(iQ,rNe),e(Xf,tNe),e(Xf,l9),e(l9,aNe),e(Xf,sNe),e(v,nNe),e(v,zf),e(zf,dQ),e(dQ,lNe),e(zf,iNe),e(zf,i9),e(i9,dNe),e(zf,cNe),e(v,mNe),e(v,Vf),e(Vf,cQ),e(cQ,fNe),e(Vf,gNe),e(Vf,d9),e(d9,hNe),e(Vf,uNe),e(v,pNe),e(v,Wf),e(Wf,mQ),e(mQ,_Ne),e(Wf,bNe),e(Wf,c9),e(c9,vNe),e(Wf,TNe),e(v,FNe),e(v,Qf),e(Qf,fQ),e(fQ,CNe),e(Qf,MNe),e(Qf,m9),e(m9,ENe),e(Qf,yNe),e(v,wNe),e(v,Hf),e(Hf,gQ),e(gQ,ANe),e(Hf,LNe),e(Hf,f9),e(f9,BNe),e(Hf,xNe),e(v,kNe),e(v,Uf),e(Uf,hQ),e(hQ,RNe),e(Uf,SNe),e(Uf,g9),e(g9,PNe),e(Uf,$Ne),e(v,INe),e(v,Jf),e(Jf,uQ),e(uQ,jNe),e(Jf,NNe),e(Jf,h9),e(h9,DNe),e(Jf,qNe),e(v,GNe),e(v,Yf),e(Yf,pQ),e(pQ,ONe),e(Yf,XNe),e(Yf,u9),e(u9,zNe),e(Yf,VNe),e(v,WNe),e(v,Kf),e(Kf,_Q),e(_Q,QNe),e(Kf,HNe),e(Kf,p9),e(p9,UNe),e(Kf,JNe),e(v,YNe),e(v,Zf),e(Zf,bQ),e(bQ,KNe),e(Zf,ZNe),e(Zf,_9),e(_9,eDe),e(Zf,oDe),e(v,rDe),e(v,eg),e(eg,vQ),e(vQ,tDe),e(eg,aDe),e(eg,b9),e(b9,sDe),e(eg,nDe),e(v,lDe),e(v,og),e(og,TQ),e(TQ,iDe),e(og,dDe),e(og,v9),e(v9,cDe),e(og,mDe),e(v,fDe),e(v,rg),e(rg,FQ),e(FQ,gDe),e(rg,hDe),e(rg,T9),e(T9,uDe),e(rg,pDe),e(v,_De),e(v,tg),e(tg,CQ),e(CQ,bDe),e(tg,vDe),e(tg,F9),e(F9,TDe),e(tg,FDe),e(v,CDe),e(v,ag),e(ag,MQ),e(MQ,MDe),e(ag,EDe),e(ag,C9),e(C9,yDe),e(ag,wDe),e(v,ADe),e(v,sg),e(sg,EQ),e(EQ,LDe),e(sg,BDe),e(sg,M9),e(M9,xDe),e(sg,kDe),e(v,RDe),e(v,ng),e(ng,yQ),e(yQ,SDe),e(ng,PDe),e(ng,E9),e(E9,$De),e(ng,IDe),e(v,jDe),e(v,lg),e(lg,wQ),e(wQ,NDe),e(lg,DDe),e(lg,y9),e(y9,qDe),e(lg,GDe),e(v,ODe),e(v,ig),e(ig,AQ),e(AQ,XDe),e(ig,zDe),e(ig,w9),e(w9,VDe),e(ig,WDe),e(v,QDe),e(v,dg),e(dg,LQ),e(LQ,HDe),e(dg,UDe),e(dg,A9),e(A9,JDe),e(dg,YDe),e(v,KDe),e(v,cg),e(cg,BQ),e(BQ,ZDe),e(cg,eqe),e(cg,L9),e(L9,oqe),e(cg,rqe),e(v,tqe),e(v,mg),e(mg,xQ),e(xQ,aqe),e(mg,sqe),e(mg,B9),e(B9,nqe),e(mg,lqe),e(v,iqe),e(v,fg),e(fg,kQ),e(kQ,dqe),e(fg,cqe),e(fg,x9),e(x9,mqe),e(fg,fqe),e(v,gqe),e(v,gg),e(gg,RQ),e(RQ,hqe),e(gg,uqe),e(gg,k9),e(k9,pqe),e(gg,_qe),e(mo,bqe),e(mo,SQ),e(SQ,vqe),e(mo,Tqe),g(h5,mo,null),e(Go,Fqe),e(Go,hg),g(u5,hg,null),e(hg,Cqe),e(hg,PQ),e(PQ,Mqe),b(d,b8e,_),b(d,Ii,_),e(Ii,ug),e(ug,$Q),g(p5,$Q,null),e(Ii,Eqe),e(Ii,IQ),e(IQ,yqe),b(d,v8e,_),b(d,Oo,_),g(_5,Oo,null),e(Oo,wqe),e(Oo,b5),e(b5,Aqe),e(b5,R9),e(R9,Lqe),e(b5,Bqe),e(Oo,xqe),e(Oo,v5),e(v5,kqe),e(v5,jQ),e(jQ,Rqe),e(v5,Sqe),e(Oo,Pqe),e(Oo,fo),g(T5,fo,null),e(fo,$qe),e(fo,NQ),e(NQ,Iqe),e(fo,jqe),e(fo,ja),e(ja,Nqe),e(ja,DQ),e(DQ,Dqe),e(ja,qqe),e(ja,qQ),e(qQ,Gqe),e(ja,Oqe),e(ja,GQ),e(GQ,Xqe),e(ja,zqe),e(fo,Vqe),e(fo,M),e(M,Ns),e(Ns,OQ),e(OQ,Wqe),e(Ns,Qqe),e(Ns,S9),e(S9,Hqe),e(Ns,Uqe),e(Ns,P9),e(P9,Jqe),e(Ns,Yqe),e(M,Kqe),e(M,Ds),e(Ds,XQ),e(XQ,Zqe),e(Ds,eGe),e(Ds,$9),e($9,oGe),e(Ds,rGe),e(Ds,I9),e(I9,tGe),e(Ds,aGe),e(M,sGe),e(M,qs),e(qs,zQ),e(zQ,nGe),e(qs,lGe),e(qs,j9),e(j9,iGe),e(qs,dGe),e(qs,N9),e(N9,cGe),e(qs,mGe),e(M,fGe),e(M,pg),e(pg,VQ),e(VQ,gGe),e(pg,hGe),e(pg,D9),e(D9,uGe),e(pg,pGe),e(M,_Ge),e(M,Gs),e(Gs,WQ),e(WQ,bGe),e(Gs,vGe),e(Gs,q9),e(q9,TGe),e(Gs,FGe),e(Gs,G9),e(G9,CGe),e(Gs,MGe),e(M,EGe),e(M,_g),e(_g,QQ),e(QQ,yGe),e(_g,wGe),e(_g,O9),e(O9,AGe),e(_g,LGe),e(M,BGe),e(M,bg),e(bg,HQ),e(HQ,xGe),e(bg,kGe),e(bg,X9),e(X9,RGe),e(bg,SGe),e(M,PGe),e(M,vg),e(vg,UQ),e(UQ,$Ge),e(vg,IGe),e(vg,z9),e(z9,jGe),e(vg,NGe),e(M,DGe),e(M,Os),e(Os,JQ),e(JQ,qGe),e(Os,GGe),e(Os,V9),e(V9,OGe),e(Os,XGe),e(Os,W9),e(W9,zGe),e(Os,VGe),e(M,WGe),e(M,Xs),e(Xs,YQ),e(YQ,QGe),e(Xs,HGe),e(Xs,Q9),e(Q9,UGe),e(Xs,JGe),e(Xs,H9),e(H9,YGe),e(Xs,KGe),e(M,ZGe),e(M,zs),e(zs,KQ),e(KQ,eOe),e(zs,oOe),e(zs,U9),e(U9,rOe),e(zs,tOe),e(zs,J9),e(J9,aOe),e(zs,sOe),e(M,nOe),e(M,Tg),e(Tg,ZQ),e(ZQ,lOe),e(Tg,iOe),e(Tg,Y9),e(Y9,dOe),e(Tg,cOe),e(M,mOe),e(M,Fg),e(Fg,eH),e(eH,fOe),e(Fg,gOe),e(Fg,K9),e(K9,hOe),e(Fg,uOe),e(M,pOe),e(M,Vs),e(Vs,oH),e(oH,_Oe),e(Vs,bOe),e(Vs,Z9),e(Z9,vOe),e(Vs,TOe),e(Vs,eB),e(eB,FOe),e(Vs,COe),e(M,MOe),e(M,Cg),e(Cg,rH),e(rH,EOe),e(Cg,yOe),e(Cg,oB),e(oB,wOe),e(Cg,AOe),e(M,LOe),e(M,Ws),e(Ws,tH),e(tH,BOe),e(Ws,xOe),e(Ws,rB),e(rB,kOe),e(Ws,ROe),e(Ws,tB),e(tB,SOe),e(Ws,POe),e(M,$Oe),e(M,Qs),e(Qs,aH),e(aH,IOe),e(Qs,jOe),e(Qs,aB),e(aB,NOe),e(Qs,DOe),e(Qs,sB),e(sB,qOe),e(Qs,GOe),e(M,OOe),e(M,Hs),e(Hs,sH),e(sH,XOe),e(Hs,zOe),e(Hs,nB),e(nB,VOe),e(Hs,WOe),e(Hs,nH),e(nH,QOe),e(Hs,HOe),e(M,UOe),e(M,Mg),e(Mg,lH),e(lH,JOe),e(Mg,YOe),e(Mg,lB),e(lB,KOe),e(Mg,ZOe),e(M,eXe),e(M,Us),e(Us,iH),e(iH,oXe),e(Us,rXe),e(Us,iB),e(iB,tXe),e(Us,aXe),e(Us,dB),e(dB,sXe),e(Us,nXe),e(M,lXe),e(M,Eg),e(Eg,dH),e(dH,iXe),e(Eg,dXe),e(Eg,cB),e(cB,cXe),e(Eg,mXe),e(M,fXe),e(M,Js),e(Js,cH),e(cH,gXe),e(Js,hXe),e(Js,mB),e(mB,uXe),e(Js,pXe),e(Js,fB),e(fB,_Xe),e(Js,bXe),e(M,vXe),e(M,Ys),e(Ys,mH),e(mH,TXe),e(Ys,FXe),e(Ys,gB),e(gB,CXe),e(Ys,MXe),e(Ys,hB),e(hB,EXe),e(Ys,yXe),e(M,wXe),e(M,Ks),e(Ks,fH),e(fH,AXe),e(Ks,LXe),e(Ks,uB),e(uB,BXe),e(Ks,xXe),e(Ks,pB),e(pB,kXe),e(Ks,RXe),e(M,SXe),e(M,yg),e(yg,gH),e(gH,PXe),e(yg,$Xe),e(yg,_B),e(_B,IXe),e(yg,jXe),e(M,NXe),e(M,Zs),e(Zs,hH),e(hH,DXe),e(Zs,qXe),e(Zs,bB),e(bB,GXe),e(Zs,OXe),e(Zs,vB),e(vB,XXe),e(Zs,zXe),e(M,VXe),e(M,wg),e(wg,uH),e(uH,WXe),e(wg,QXe),e(wg,TB),e(TB,HXe),e(wg,UXe),e(M,JXe),e(M,en),e(en,pH),e(pH,YXe),e(en,KXe),e(en,FB),e(FB,ZXe),e(en,eze),e(en,CB),e(CB,oze),e(en,rze),e(M,tze),e(M,on),e(on,_H),e(_H,aze),e(on,sze),e(on,MB),e(MB,nze),e(on,lze),e(on,EB),e(EB,ize),e(on,dze),e(M,cze),e(M,rn),e(rn,bH),e(bH,mze),e(rn,fze),e(rn,yB),e(yB,gze),e(rn,hze),e(rn,wB),e(wB,uze),e(rn,pze),e(M,_ze),e(M,tn),e(tn,vH),e(vH,bze),e(tn,vze),e(tn,AB),e(AB,Tze),e(tn,Fze),e(tn,LB),e(LB,Cze),e(tn,Mze),e(M,Eze),e(M,Ag),e(Ag,TH),e(TH,yze),e(Ag,wze),e(Ag,BB),e(BB,Aze),e(Ag,Lze),e(M,Bze),e(M,an),e(an,FH),e(FH,xze),e(an,kze),e(an,xB),e(xB,Rze),e(an,Sze),e(an,kB),e(kB,Pze),e(an,$ze),e(M,Ize),e(M,sn),e(sn,CH),e(CH,jze),e(sn,Nze),e(sn,RB),e(RB,Dze),e(sn,qze),e(sn,SB),e(SB,Gze),e(sn,Oze),e(M,Xze),e(M,nn),e(nn,MH),e(MH,zze),e(nn,Vze),e(nn,PB),e(PB,Wze),e(nn,Qze),e(nn,$B),e($B,Hze),e(nn,Uze),e(M,Jze),e(M,ln),e(ln,EH),e(EH,Yze),e(ln,Kze),e(ln,IB),e(IB,Zze),e(ln,eVe),e(ln,jB),e(jB,oVe),e(ln,rVe),e(M,tVe),e(M,dn),e(dn,yH),e(yH,aVe),e(dn,sVe),e(dn,NB),e(NB,nVe),e(dn,lVe),e(dn,DB),e(DB,iVe),e(dn,dVe),e(M,cVe),e(M,cn),e(cn,wH),e(wH,mVe),e(cn,fVe),e(cn,qB),e(qB,gVe),e(cn,hVe),e(cn,GB),e(GB,uVe),e(cn,pVe),e(M,_Ve),e(M,Lg),e(Lg,AH),e(AH,bVe),e(Lg,vVe),e(Lg,OB),e(OB,TVe),e(Lg,FVe),e(M,CVe),e(M,mn),e(mn,LH),e(LH,MVe),e(mn,EVe),e(mn,XB),e(XB,yVe),e(mn,wVe),e(mn,zB),e(zB,AVe),e(mn,LVe),e(M,BVe),e(M,Bg),e(Bg,BH),e(BH,xVe),e(Bg,kVe),e(Bg,VB),e(VB,RVe),e(Bg,SVe),e(M,PVe),e(M,xg),e(xg,xH),e(xH,$Ve),e(xg,IVe),e(xg,WB),e(WB,jVe),e(xg,NVe),e(M,DVe),e(M,fn),e(fn,kH),e(kH,qVe),e(fn,GVe),e(fn,QB),e(QB,OVe),e(fn,XVe),e(fn,HB),e(HB,zVe),e(fn,VVe),e(M,WVe),e(M,gn),e(gn,RH),e(RH,QVe),e(gn,HVe),e(gn,UB),e(UB,UVe),e(gn,JVe),e(gn,JB),e(JB,YVe),e(gn,KVe),e(M,ZVe),e(M,kg),e(kg,SH),e(SH,eWe),e(kg,oWe),e(kg,YB),e(YB,rWe),e(kg,tWe),e(M,aWe),e(M,hn),e(hn,PH),e(PH,sWe),e(hn,nWe),e(hn,KB),e(KB,lWe),e(hn,iWe),e(hn,ZB),e(ZB,dWe),e(hn,cWe),e(M,mWe),e(M,un),e(un,$H),e($H,fWe),e(un,gWe),e(un,ex),e(ex,hWe),e(un,uWe),e(un,ox),e(ox,pWe),e(un,_We),e(M,bWe),e(M,pn),e(pn,IH),e(IH,vWe),e(pn,TWe),e(pn,rx),e(rx,FWe),e(pn,CWe),e(pn,tx),e(tx,MWe),e(pn,EWe),e(M,yWe),e(M,_n),e(_n,jH),e(jH,wWe),e(_n,AWe),e(_n,ax),e(ax,LWe),e(_n,BWe),e(_n,sx),e(sx,xWe),e(_n,kWe),e(M,RWe),e(M,bn),e(bn,NH),e(NH,SWe),e(bn,PWe),e(bn,nx),e(nx,$We),e(bn,IWe),e(bn,lx),e(lx,jWe),e(bn,NWe),e(M,DWe),e(M,Rg),e(Rg,DH),e(DH,qWe),e(Rg,GWe),e(Rg,ix),e(ix,OWe),e(Rg,XWe),e(M,zWe),e(M,Sg),e(Sg,qH),e(qH,VWe),e(Sg,WWe),e(Sg,dx),e(dx,QWe),e(Sg,HWe),e(M,UWe),e(M,Pg),e(Pg,GH),e(GH,JWe),e(Pg,YWe),e(Pg,cx),e(cx,KWe),e(Pg,ZWe),e(M,eQe),e(M,$g),e($g,OH),e(OH,oQe),e($g,rQe),e($g,mx),e(mx,tQe),e($g,aQe),e(M,sQe),e(M,vn),e(vn,XH),e(XH,nQe),e(vn,lQe),e(vn,fx),e(fx,iQe),e(vn,dQe),e(vn,gx),e(gx,cQe),e(vn,mQe),e(M,fQe),e(M,Ig),e(Ig,zH),e(zH,gQe),e(Ig,hQe),e(Ig,hx),e(hx,uQe),e(Ig,pQe),e(M,_Qe),e(M,Tn),e(Tn,VH),e(VH,bQe),e(Tn,vQe),e(Tn,ux),e(ux,TQe),e(Tn,FQe),e(Tn,px),e(px,CQe),e(Tn,MQe),e(M,EQe),e(M,Fn),e(Fn,WH),e(WH,yQe),e(Fn,wQe),e(Fn,_x),e(_x,AQe),e(Fn,LQe),e(Fn,bx),e(bx,BQe),e(Fn,xQe),e(M,kQe),e(M,Cn),e(Cn,QH),e(QH,RQe),e(Cn,SQe),e(Cn,vx),e(vx,PQe),e(Cn,$Qe),e(Cn,Tx),e(Tx,IQe),e(Cn,jQe),e(M,NQe),e(M,Mn),e(Mn,HH),e(HH,DQe),e(Mn,qQe),e(Mn,Fx),e(Fx,GQe),e(Mn,OQe),e(Mn,Cx),e(Cx,XQe),e(Mn,zQe),e(M,VQe),e(M,En),e(En,UH),e(UH,WQe),e(En,QQe),e(En,Mx),e(Mx,HQe),e(En,UQe),e(En,Ex),e(Ex,JQe),e(En,YQe),e(M,KQe),e(M,jg),e(jg,JH),e(JH,ZQe),e(jg,eHe),e(jg,yx),e(yx,oHe),e(jg,rHe),e(M,tHe),e(M,Ng),e(Ng,YH),e(YH,aHe),e(Ng,sHe),e(Ng,wx),e(wx,nHe),e(Ng,lHe),e(M,iHe),e(M,yn),e(yn,KH),e(KH,dHe),e(yn,cHe),e(yn,Ax),e(Ax,mHe),e(yn,fHe),e(yn,Lx),e(Lx,gHe),e(yn,hHe),e(M,uHe),e(M,wn),e(wn,ZH),e(ZH,pHe),e(wn,_He),e(wn,Bx),e(Bx,bHe),e(wn,vHe),e(wn,xx),e(xx,THe),e(wn,FHe),e(M,CHe),e(M,An),e(An,eU),e(eU,MHe),e(An,EHe),e(An,kx),e(kx,yHe),e(An,wHe),e(An,Rx),e(Rx,AHe),e(An,LHe),e(M,BHe),e(M,Dg),e(Dg,oU),e(oU,xHe),e(Dg,kHe),e(Dg,Sx),e(Sx,RHe),e(Dg,SHe),e(M,PHe),e(M,qg),e(qg,rU),e(rU,$He),e(qg,IHe),e(qg,Px),e(Px,jHe),e(qg,NHe),e(M,DHe),e(M,Gg),e(Gg,tU),e(tU,qHe),e(Gg,GHe),e(Gg,$x),e($x,OHe),e(Gg,XHe),e(M,zHe),e(M,Og),e(Og,aU),e(aU,VHe),e(Og,WHe),e(Og,Ix),e(Ix,QHe),e(Og,HHe),e(M,UHe),e(M,Ln),e(Ln,sU),e(sU,JHe),e(Ln,YHe),e(Ln,jx),e(jx,KHe),e(Ln,ZHe),e(Ln,Nx),e(Nx,eUe),e(Ln,oUe),e(M,rUe),e(M,Xg),e(Xg,nU),e(nU,tUe),e(Xg,aUe),e(Xg,Dx),e(Dx,sUe),e(Xg,nUe),e(M,lUe),e(M,zg),e(zg,lU),e(lU,iUe),e(zg,dUe),e(zg,qx),e(qx,cUe),e(zg,mUe),e(M,fUe),e(M,Bn),e(Bn,iU),e(iU,gUe),e(Bn,hUe),e(Bn,Gx),e(Gx,uUe),e(Bn,pUe),e(Bn,Ox),e(Ox,_Ue),e(Bn,bUe),e(M,vUe),e(M,xn),e(xn,dU),e(dU,TUe),e(xn,FUe),e(xn,Xx),e(Xx,CUe),e(xn,MUe),e(xn,zx),e(zx,EUe),e(xn,yUe),e(fo,wUe),e(fo,cU),e(cU,AUe),e(fo,LUe),g(F5,fo,null),e(Oo,BUe),e(Oo,Vg),g(C5,Vg,null),e(Vg,xUe),e(Vg,mU),e(mU,kUe),b(d,T8e,_),b(d,ji,_),e(ji,Wg),e(Wg,fU),g(M5,fU,null),e(ji,RUe),e(ji,gU),e(gU,SUe),b(d,F8e,_),b(d,Xo,_),g(E5,Xo,null),e(Xo,PUe),e(Xo,y5),e(y5,$Ue),e(y5,Vx),e(Vx,IUe),e(y5,jUe),e(Xo,NUe),e(Xo,w5),e(w5,DUe),e(w5,hU),e(hU,qUe),e(w5,GUe),e(Xo,OUe),e(Xo,Le),g(A5,Le,null),e(Le,XUe),e(Le,uU),e(uU,zUe),e(Le,VUe),e(Le,Na),e(Na,WUe),e(Na,pU),e(pU,QUe),e(Na,HUe),e(Na,_U),e(_U,UUe),e(Na,JUe),e(Na,bU),e(bU,YUe),e(Na,KUe),e(Le,ZUe),e(Le,ne),e(ne,Qg),e(Qg,vU),e(vU,eJe),e(Qg,oJe),e(Qg,Wx),e(Wx,rJe),e(Qg,tJe),e(ne,aJe),e(ne,Hg),e(Hg,TU),e(TU,sJe),e(Hg,nJe),e(Hg,Qx),e(Qx,lJe),e(Hg,iJe),e(ne,dJe),e(ne,Ug),e(Ug,FU),e(FU,cJe),e(Ug,mJe),e(Ug,Hx),e(Hx,fJe),e(Ug,gJe),e(ne,hJe),e(ne,Jg),e(Jg,CU),e(CU,uJe),e(Jg,pJe),e(Jg,Ux),e(Ux,_Je),e(Jg,bJe),e(ne,vJe),e(ne,Yg),e(Yg,MU),e(MU,TJe),e(Yg,FJe),e(Yg,Jx),e(Jx,CJe),e(Yg,MJe),e(ne,EJe),e(ne,Kg),e(Kg,EU),e(EU,yJe),e(Kg,wJe),e(Kg,Yx),e(Yx,AJe),e(Kg,LJe),e(ne,BJe),e(ne,Zg),e(Zg,yU),e(yU,xJe),e(Zg,kJe),e(Zg,Kx),e(Kx,RJe),e(Zg,SJe),e(ne,PJe),e(ne,eh),e(eh,wU),e(wU,$Je),e(eh,IJe),e(eh,Zx),e(Zx,jJe),e(eh,NJe),e(ne,DJe),e(ne,oh),e(oh,AU),e(AU,qJe),e(oh,GJe),e(oh,ek),e(ek,OJe),e(oh,XJe),e(ne,zJe),e(ne,rh),e(rh,LU),e(LU,VJe),e(rh,WJe),e(rh,ok),e(ok,QJe),e(rh,HJe),e(ne,UJe),e(ne,th),e(th,BU),e(BU,JJe),e(th,YJe),e(th,rk),e(rk,KJe),e(th,ZJe),e(ne,eYe),e(ne,ah),e(ah,xU),e(xU,oYe),e(ah,rYe),e(ah,tk),e(tk,tYe),e(ah,aYe),e(ne,sYe),e(ne,sh),e(sh,kU),e(kU,nYe),e(sh,lYe),e(sh,ak),e(ak,iYe),e(sh,dYe),e(ne,cYe),e(ne,nh),e(nh,RU),e(RU,mYe),e(nh,fYe),e(nh,sk),e(sk,gYe),e(nh,hYe),e(ne,uYe),e(ne,lh),e(lh,SU),e(SU,pYe),e(lh,_Ye),e(lh,nk),e(nk,bYe),e(lh,vYe),e(Le,TYe),g(ih,Le,null),e(Le,FYe),e(Le,PU),e(PU,CYe),e(Le,MYe),g(L5,Le,null),e(Xo,EYe),e(Xo,dh),g(B5,dh,null),e(dh,yYe),e(dh,$U),e($U,wYe),b(d,C8e,_),b(d,Ni,_),e(Ni,ch),e(ch,IU),g(x5,IU,null),e(Ni,AYe),e(Ni,jU),e(jU,LYe),b(d,M8e,_),b(d,zo,_),g(k5,zo,null),e(zo,BYe),e(zo,R5),e(R5,xYe),e(R5,lk),e(lk,kYe),e(R5,RYe),e(zo,SYe),e(zo,S5),e(S5,PYe),e(S5,NU),e(NU,$Ye),e(S5,IYe),e(zo,jYe),e(zo,Be),g(P5,Be,null),e(Be,NYe),e(Be,DU),e(DU,DYe),e(Be,qYe),e(Be,Di),e(Di,GYe),e(Di,qU),e(qU,OYe),e(Di,XYe),e(Di,GU),e(GU,zYe),e(Di,VYe),e(Be,WYe),e(Be,we),e(we,mh),e(mh,OU),e(OU,QYe),e(mh,HYe),e(mh,ik),e(ik,UYe),e(mh,JYe),e(we,YYe),e(we,fh),e(fh,XU),e(XU,KYe),e(fh,ZYe),e(fh,dk),e(dk,eKe),e(fh,oKe),e(we,rKe),e(we,gh),e(gh,zU),e(zU,tKe),e(gh,aKe),e(gh,ck),e(ck,sKe),e(gh,nKe),e(we,lKe),e(we,hh),e(hh,VU),e(VU,iKe),e(hh,dKe),e(hh,mk),e(mk,cKe),e(hh,mKe),e(we,fKe),e(we,uh),e(uh,WU),e(WU,gKe),e(uh,hKe),e(uh,fk),e(fk,uKe),e(uh,pKe),e(we,_Ke),e(we,ph),e(ph,QU),e(QU,bKe),e(ph,vKe),e(ph,gk),e(gk,TKe),e(ph,FKe),e(we,CKe),e(we,_h),e(_h,HU),e(HU,MKe),e(_h,EKe),e(_h,hk),e(hk,yKe),e(_h,wKe),e(we,AKe),e(we,bh),e(bh,UU),e(UU,LKe),e(bh,BKe),e(bh,uk),e(uk,xKe),e(bh,kKe),e(Be,RKe),g(vh,Be,null),e(Be,SKe),e(Be,JU),e(JU,PKe),e(Be,$Ke),g($5,Be,null),e(zo,IKe),e(zo,Th),g(I5,Th,null),e(Th,jKe),e(Th,YU),e(YU,NKe),b(d,E8e,_),b(d,qi,_),e(qi,Fh),e(Fh,KU),g(j5,KU,null),e(qi,DKe),e(qi,ZU),e(ZU,qKe),b(d,y8e,_),b(d,Vo,_),g(N5,Vo,null),e(Vo,GKe),e(Vo,Gi),e(Gi,OKe),e(Gi,eJ),e(eJ,XKe),e(Gi,zKe),e(Gi,oJ),e(oJ,VKe),e(Gi,WKe),e(Vo,QKe),e(Vo,D5),e(D5,HKe),e(D5,rJ),e(rJ,UKe),e(D5,JKe),e(Vo,YKe),e(Vo,Nr),g(q5,Nr,null),e(Nr,KKe),e(Nr,tJ),e(tJ,ZKe),e(Nr,eZe),e(Nr,Oi),e(Oi,oZe),e(Oi,aJ),e(aJ,rZe),e(Oi,tZe),e(Oi,sJ),e(sJ,aZe),e(Oi,sZe),e(Nr,nZe),e(Nr,nJ),e(nJ,lZe),e(Nr,iZe),g(G5,Nr,null),e(Vo,dZe),e(Vo,xe),g(O5,xe,null),e(xe,cZe),e(xe,lJ),e(lJ,mZe),e(xe,fZe),e(xe,Da),e(Da,gZe),e(Da,iJ),e(iJ,hZe),e(Da,uZe),e(Da,dJ),e(dJ,pZe),e(Da,_Ze),e(Da,cJ),e(cJ,bZe),e(Da,vZe),e(xe,TZe),e(xe,F),e(F,Ch),e(Ch,mJ),e(mJ,FZe),e(Ch,CZe),e(Ch,pk),e(pk,MZe),e(Ch,EZe),e(F,yZe),e(F,Mh),e(Mh,fJ),e(fJ,wZe),e(Mh,AZe),e(Mh,_k),e(_k,LZe),e(Mh,BZe),e(F,xZe),e(F,Eh),e(Eh,gJ),e(gJ,kZe),e(Eh,RZe),e(Eh,bk),e(bk,SZe),e(Eh,PZe),e(F,$Ze),e(F,yh),e(yh,hJ),e(hJ,IZe),e(yh,jZe),e(yh,vk),e(vk,NZe),e(yh,DZe),e(F,qZe),e(F,wh),e(wh,uJ),e(uJ,GZe),e(wh,OZe),e(wh,Tk),e(Tk,XZe),e(wh,zZe),e(F,VZe),e(F,Ah),e(Ah,pJ),e(pJ,WZe),e(Ah,QZe),e(Ah,Fk),e(Fk,HZe),e(Ah,UZe),e(F,JZe),e(F,Lh),e(Lh,_J),e(_J,YZe),e(Lh,KZe),e(Lh,Ck),e(Ck,ZZe),e(Lh,eeo),e(F,oeo),e(F,Bh),e(Bh,bJ),e(bJ,reo),e(Bh,teo),e(Bh,Mk),e(Mk,aeo),e(Bh,seo),e(F,neo),e(F,xh),e(xh,vJ),e(vJ,leo),e(xh,ieo),e(xh,Ek),e(Ek,deo),e(xh,ceo),e(F,meo),e(F,kh),e(kh,TJ),e(TJ,feo),e(kh,geo),e(kh,yk),e(yk,heo),e(kh,ueo),e(F,peo),e(F,Rh),e(Rh,FJ),e(FJ,_eo),e(Rh,beo),e(Rh,wk),e(wk,veo),e(Rh,Teo),e(F,Feo),e(F,Sh),e(Sh,CJ),e(CJ,Ceo),e(Sh,Meo),e(Sh,Ak),e(Ak,Eeo),e(Sh,yeo),e(F,weo),e(F,Ph),e(Ph,MJ),e(MJ,Aeo),e(Ph,Leo),e(Ph,Lk),e(Lk,Beo),e(Ph,xeo),e(F,keo),e(F,$h),e($h,EJ),e(EJ,Reo),e($h,Seo),e($h,Bk),e(Bk,Peo),e($h,$eo),e(F,Ieo),e(F,Ih),e(Ih,yJ),e(yJ,jeo),e(Ih,Neo),e(Ih,xk),e(xk,Deo),e(Ih,qeo),e(F,Geo),e(F,jh),e(jh,wJ),e(wJ,Oeo),e(jh,Xeo),e(jh,kk),e(kk,zeo),e(jh,Veo),e(F,Weo),e(F,Nh),e(Nh,AJ),e(AJ,Qeo),e(Nh,Heo),e(Nh,Rk),e(Rk,Ueo),e(Nh,Jeo),e(F,Yeo),e(F,Dh),e(Dh,LJ),e(LJ,Keo),e(Dh,Zeo),e(Dh,Sk),e(Sk,eoo),e(Dh,ooo),e(F,roo),e(F,qh),e(qh,BJ),e(BJ,too),e(qh,aoo),e(qh,Pk),e(Pk,soo),e(qh,noo),e(F,loo),e(F,Gh),e(Gh,xJ),e(xJ,ioo),e(Gh,doo),e(Gh,$k),e($k,coo),e(Gh,moo),e(F,foo),e(F,Oh),e(Oh,kJ),e(kJ,goo),e(Oh,hoo),e(Oh,Ik),e(Ik,uoo),e(Oh,poo),e(F,_oo),e(F,Xh),e(Xh,RJ),e(RJ,boo),e(Xh,voo),e(Xh,jk),e(jk,Too),e(Xh,Foo),e(F,Coo),e(F,zh),e(zh,SJ),e(SJ,Moo),e(zh,Eoo),e(zh,Nk),e(Nk,yoo),e(zh,woo),e(F,Aoo),e(F,Vh),e(Vh,PJ),e(PJ,Loo),e(Vh,Boo),e(Vh,Dk),e(Dk,xoo),e(Vh,koo),e(F,Roo),e(F,Wh),e(Wh,$J),e($J,Soo),e(Wh,Poo),e(Wh,qk),e(qk,$oo),e(Wh,Ioo),e(F,joo),e(F,kn),e(kn,IJ),e(IJ,Noo),e(kn,Doo),e(kn,Gk),e(Gk,qoo),e(kn,Goo),e(kn,Ok),e(Ok,Ooo),e(kn,Xoo),e(F,zoo),e(F,Qh),e(Qh,jJ),e(jJ,Voo),e(Qh,Woo),e(Qh,Xk),e(Xk,Qoo),e(Qh,Hoo),e(F,Uoo),e(F,Hh),e(Hh,NJ),e(NJ,Joo),e(Hh,Yoo),e(Hh,zk),e(zk,Koo),e(Hh,Zoo),e(F,ero),e(F,Uh),e(Uh,DJ),e(DJ,oro),e(Uh,rro),e(Uh,Vk),e(Vk,tro),e(Uh,aro),e(F,sro),e(F,Jh),e(Jh,qJ),e(qJ,nro),e(Jh,lro),e(Jh,Wk),e(Wk,iro),e(Jh,dro),e(F,cro),e(F,Yh),e(Yh,GJ),e(GJ,mro),e(Yh,fro),e(Yh,Qk),e(Qk,gro),e(Yh,hro),e(F,uro),e(F,Kh),e(Kh,OJ),e(OJ,pro),e(Kh,_ro),e(Kh,Hk),e(Hk,bro),e(Kh,vro),e(F,Tro),e(F,Zh),e(Zh,XJ),e(XJ,Fro),e(Zh,Cro),e(Zh,Uk),e(Uk,Mro),e(Zh,Ero),e(F,yro),e(F,eu),e(eu,zJ),e(zJ,wro),e(eu,Aro),e(eu,Jk),e(Jk,Lro),e(eu,Bro),e(F,xro),e(F,ou),e(ou,VJ),e(VJ,kro),e(ou,Rro),e(ou,Yk),e(Yk,Sro),e(ou,Pro),e(F,$ro),e(F,ru),e(ru,WJ),e(WJ,Iro),e(ru,jro),e(ru,Kk),e(Kk,Nro),e(ru,Dro),e(F,qro),e(F,tu),e(tu,QJ),e(QJ,Gro),e(tu,Oro),e(tu,Zk),e(Zk,Xro),e(tu,zro),e(F,Vro),e(F,au),e(au,HJ),e(HJ,Wro),e(au,Qro),e(au,eR),e(eR,Hro),e(au,Uro),e(F,Jro),e(F,su),e(su,UJ),e(UJ,Yro),e(su,Kro),e(su,oR),e(oR,Zro),e(su,eto),e(F,oto),e(F,nu),e(nu,JJ),e(JJ,rto),e(nu,tto),e(nu,rR),e(rR,ato),e(nu,sto),e(F,nto),e(F,lu),e(lu,YJ),e(YJ,lto),e(lu,ito),e(lu,tR),e(tR,dto),e(lu,cto),e(F,mto),e(F,iu),e(iu,KJ),e(KJ,fto),e(iu,gto),e(iu,aR),e(aR,hto),e(iu,uto),e(F,pto),e(F,du),e(du,ZJ),e(ZJ,_to),e(du,bto),e(du,sR),e(sR,vto),e(du,Tto),e(F,Fto),e(F,cu),e(cu,eY),e(eY,Cto),e(cu,Mto),e(cu,nR),e(nR,Eto),e(cu,yto),e(F,wto),e(F,mu),e(mu,oY),e(oY,Ato),e(mu,Lto),e(mu,lR),e(lR,Bto),e(mu,xto),e(F,kto),e(F,fu),e(fu,rY),e(rY,Rto),e(fu,Sto),e(fu,iR),e(iR,Pto),e(fu,$to),e(F,Ito),e(F,gu),e(gu,tY),e(tY,jto),e(gu,Nto),e(gu,dR),e(dR,Dto),e(gu,qto),e(F,Gto),e(F,hu),e(hu,aY),e(aY,Oto),e(hu,Xto),e(hu,cR),e(cR,zto),e(hu,Vto),e(F,Wto),e(F,uu),e(uu,sY),e(sY,Qto),e(uu,Hto),e(uu,mR),e(mR,Uto),e(uu,Jto),e(F,Yto),e(F,pu),e(pu,nY),e(nY,Kto),e(pu,Zto),e(pu,fR),e(fR,eao),e(pu,oao),e(F,rao),e(F,_u),e(_u,lY),e(lY,tao),e(_u,aao),e(_u,gR),e(gR,sao),e(_u,nao),e(F,lao),e(F,bu),e(bu,iY),e(iY,iao),e(bu,dao),e(bu,hR),e(hR,cao),e(bu,mao),e(F,fao),e(F,vu),e(vu,dY),e(dY,gao),e(vu,hao),e(vu,uR),e(uR,uao),e(vu,pao),e(F,_ao),e(F,Tu),e(Tu,cY),e(cY,bao),e(Tu,vao),e(Tu,pR),e(pR,Tao),e(Tu,Fao),e(F,Cao),e(F,Fu),e(Fu,mY),e(mY,Mao),e(Fu,Eao),e(Fu,_R),e(_R,yao),e(Fu,wao),e(F,Aao),e(F,Cu),e(Cu,fY),e(fY,Lao),e(Cu,Bao),e(Cu,bR),e(bR,xao),e(Cu,kao),e(F,Rao),e(F,Mu),e(Mu,gY),e(gY,Sao),e(Mu,Pao),e(Mu,vR),e(vR,$ao),e(Mu,Iao),e(F,jao),e(F,Eu),e(Eu,hY),e(hY,Nao),e(Eu,Dao),e(Eu,TR),e(TR,qao),e(Eu,Gao),e(F,Oao),e(F,yu),e(yu,uY),e(uY,Xao),e(yu,zao),e(yu,FR),e(FR,Vao),e(yu,Wao),e(F,Qao),e(F,wu),e(wu,pY),e(pY,Hao),e(wu,Uao),e(wu,CR),e(CR,Jao),e(wu,Yao),e(F,Kao),e(F,Au),e(Au,_Y),e(_Y,Zao),e(Au,eso),e(Au,MR),e(MR,oso),e(Au,rso),e(F,tso),e(F,Lu),e(Lu,bY),e(bY,aso),e(Lu,sso),e(Lu,ER),e(ER,nso),e(Lu,lso),e(F,iso),e(F,Bu),e(Bu,vY),e(vY,dso),e(Bu,cso),e(Bu,yR),e(yR,mso),e(Bu,fso),e(F,gso),e(F,xu),e(xu,TY),e(TY,hso),e(xu,uso),e(xu,wR),e(wR,pso),e(xu,_so),e(F,bso),e(F,ku),e(ku,FY),e(FY,vso),e(ku,Tso),e(ku,AR),e(AR,Fso),e(ku,Cso),e(F,Mso),e(F,Ru),e(Ru,CY),e(CY,Eso),e(Ru,yso),e(Ru,LR),e(LR,wso),e(Ru,Aso),e(F,Lso),e(F,Su),e(Su,MY),e(MY,Bso),e(Su,xso),e(Su,BR),e(BR,kso),e(Su,Rso),e(F,Sso),e(F,Pu),e(Pu,EY),e(EY,Pso),e(Pu,$so),e(Pu,xR),e(xR,Iso),e(Pu,jso),e(F,Nso),e(F,$u),e($u,yY),e(yY,Dso),e($u,qso),e($u,kR),e(kR,Gso),e($u,Oso),e(F,Xso),e(F,Iu),e(Iu,wY),e(wY,zso),e(Iu,Vso),e(Iu,RR),e(RR,Wso),e(Iu,Qso),e(F,Hso),e(F,ju),e(ju,AY),e(AY,Uso),e(ju,Jso),e(ju,SR),e(SR,Yso),e(ju,Kso),e(F,Zso),e(F,Nu),e(Nu,LY),e(LY,eno),e(Nu,ono),e(Nu,PR),e(PR,rno),e(Nu,tno),e(F,ano),e(F,Du),e(Du,BY),e(BY,sno),e(Du,nno),e(Du,$R),e($R,lno),e(Du,ino),e(F,dno),e(F,qu),e(qu,xY),e(xY,cno),e(qu,mno),e(qu,IR),e(IR,fno),e(qu,gno),e(F,hno),e(F,Gu),e(Gu,kY),e(kY,uno),e(Gu,pno),e(Gu,jR),e(jR,_no),e(Gu,bno),e(F,vno),e(F,Ou),e(Ou,RY),e(RY,Tno),e(Ou,Fno),e(Ou,NR),e(NR,Cno),e(Ou,Mno),e(F,Eno),e(F,Xu),e(Xu,SY),e(SY,yno),e(Xu,wno),e(Xu,DR),e(DR,Ano),e(Xu,Lno),e(F,Bno),e(F,zu),e(zu,PY),e(PY,xno),e(zu,kno),e(zu,qR),e(qR,Rno),e(zu,Sno),e(F,Pno),e(F,Vu),e(Vu,$Y),e($Y,$no),e(Vu,Ino),e(Vu,GR),e(GR,jno),e(Vu,Nno),e(F,Dno),e(F,Wu),e(Wu,IY),e(IY,qno),e(Wu,Gno),e(Wu,OR),e(OR,Ono),e(Wu,Xno),e(F,zno),e(F,Qu),e(Qu,jY),e(jY,Vno),e(Qu,Wno),e(Qu,XR),e(XR,Qno),e(Qu,Hno),e(F,Uno),e(F,Hu),e(Hu,NY),e(NY,Jno),e(Hu,Yno),e(Hu,zR),e(zR,Kno),e(Hu,Zno),e(F,elo),e(F,Uu),e(Uu,DY),e(DY,olo),e(Uu,rlo),e(Uu,VR),e(VR,tlo),e(Uu,alo),e(F,slo),e(F,Ju),e(Ju,qY),e(qY,nlo),e(Ju,llo),e(Ju,WR),e(WR,ilo),e(Ju,dlo),e(xe,clo),e(xe,Yu),e(Yu,mlo),e(Yu,GY),e(GY,flo),e(Yu,glo),e(Yu,OY),e(OY,hlo),e(xe,ulo),e(xe,XY),e(XY,plo),e(xe,_lo),g(X5,xe,null),b(d,w8e,_),b(d,Xi,_),e(Xi,Ku),e(Ku,zY),g(z5,zY,null),e(Xi,blo),e(Xi,VY),e(VY,vlo),b(d,A8e,_),b(d,Wo,_),g(V5,Wo,null),e(Wo,Tlo),e(Wo,zi),e(zi,Flo),e(zi,WY),e(WY,Clo),e(zi,Mlo),e(zi,QY),e(QY,Elo),e(zi,ylo),e(Wo,wlo),e(Wo,W5),e(W5,Alo),e(W5,HY),e(HY,Llo),e(W5,Blo),e(Wo,xlo),e(Wo,Dr),g(Q5,Dr,null),e(Dr,klo),e(Dr,UY),e(UY,Rlo),e(Dr,Slo),e(Dr,Vi),e(Vi,Plo),e(Vi,JY),e(JY,$lo),e(Vi,Ilo),e(Vi,YY),e(YY,jlo),e(Vi,Nlo),e(Dr,Dlo),e(Dr,KY),e(KY,qlo),e(Dr,Glo),g(H5,Dr,null),e(Wo,Olo),e(Wo,ke),g(U5,ke,null),e(ke,Xlo),e(ke,ZY),e(ZY,zlo),e(ke,Vlo),e(ke,qa),e(qa,Wlo),e(qa,eK),e(eK,Qlo),e(qa,Hlo),e(qa,oK),e(oK,Ulo),e(qa,Jlo),e(qa,rK),e(rK,Ylo),e(qa,Klo),e(ke,Zlo),e(ke,k),e(k,Zu),e(Zu,tK),e(tK,eio),e(Zu,oio),e(Zu,QR),e(QR,rio),e(Zu,tio),e(k,aio),e(k,ep),e(ep,aK),e(aK,sio),e(ep,nio),e(ep,HR),e(HR,lio),e(ep,iio),e(k,dio),e(k,op),e(op,sK),e(sK,cio),e(op,mio),e(op,UR),e(UR,fio),e(op,gio),e(k,hio),e(k,rp),e(rp,nK),e(nK,uio),e(rp,pio),e(rp,JR),e(JR,_io),e(rp,bio),e(k,vio),e(k,tp),e(tp,lK),e(lK,Tio),e(tp,Fio),e(tp,YR),e(YR,Cio),e(tp,Mio),e(k,Eio),e(k,ap),e(ap,iK),e(iK,yio),e(ap,wio),e(ap,KR),e(KR,Aio),e(ap,Lio),e(k,Bio),e(k,sp),e(sp,dK),e(dK,xio),e(sp,kio),e(sp,ZR),e(ZR,Rio),e(sp,Sio),e(k,Pio),e(k,np),e(np,cK),e(cK,$io),e(np,Iio),e(np,eS),e(eS,jio),e(np,Nio),e(k,Dio),e(k,lp),e(lp,mK),e(mK,qio),e(lp,Gio),e(lp,oS),e(oS,Oio),e(lp,Xio),e(k,zio),e(k,ip),e(ip,fK),e(fK,Vio),e(ip,Wio),e(ip,rS),e(rS,Qio),e(ip,Hio),e(k,Uio),e(k,dp),e(dp,gK),e(gK,Jio),e(dp,Yio),e(dp,tS),e(tS,Kio),e(dp,Zio),e(k,edo),e(k,cp),e(cp,hK),e(hK,odo),e(cp,rdo),e(cp,aS),e(aS,tdo),e(cp,ado),e(k,sdo),e(k,mp),e(mp,uK),e(uK,ndo),e(mp,ldo),e(mp,sS),e(sS,ido),e(mp,ddo),e(k,cdo),e(k,fp),e(fp,pK),e(pK,mdo),e(fp,fdo),e(fp,nS),e(nS,gdo),e(fp,hdo),e(k,udo),e(k,gp),e(gp,_K),e(_K,pdo),e(gp,_do),e(gp,lS),e(lS,bdo),e(gp,vdo),e(k,Tdo),e(k,hp),e(hp,bK),e(bK,Fdo),e(hp,Cdo),e(hp,iS),e(iS,Mdo),e(hp,Edo),e(k,ydo),e(k,up),e(up,vK),e(vK,wdo),e(up,Ado),e(up,dS),e(dS,Ldo),e(up,Bdo),e(k,xdo),e(k,pp),e(pp,TK),e(TK,kdo),e(pp,Rdo),e(pp,cS),e(cS,Sdo),e(pp,Pdo),e(k,$do),e(k,_p),e(_p,FK),e(FK,Ido),e(_p,jdo),e(_p,mS),e(mS,Ndo),e(_p,Ddo),e(k,qdo),e(k,bp),e(bp,CK),e(CK,Gdo),e(bp,Odo),e(bp,fS),e(fS,Xdo),e(bp,zdo),e(k,Vdo),e(k,vp),e(vp,MK),e(MK,Wdo),e(vp,Qdo),e(vp,gS),e(gS,Hdo),e(vp,Udo),e(k,Jdo),e(k,Tp),e(Tp,EK),e(EK,Ydo),e(Tp,Kdo),e(Tp,hS),e(hS,Zdo),e(Tp,eco),e(k,oco),e(k,Fp),e(Fp,yK),e(yK,rco),e(Fp,tco),e(Fp,uS),e(uS,aco),e(Fp,sco),e(k,nco),e(k,Cp),e(Cp,wK),e(wK,lco),e(Cp,ico),e(Cp,pS),e(pS,dco),e(Cp,cco),e(k,mco),e(k,Mp),e(Mp,AK),e(AK,fco),e(Mp,gco),e(Mp,_S),e(_S,hco),e(Mp,uco),e(k,pco),e(k,Ep),e(Ep,LK),e(LK,_co),e(Ep,bco),e(Ep,bS),e(bS,vco),e(Ep,Tco),e(k,Fco),e(k,yp),e(yp,BK),e(BK,Cco),e(yp,Mco),e(yp,vS),e(vS,Eco),e(yp,yco),e(k,wco),e(k,wp),e(wp,xK),e(xK,Aco),e(wp,Lco),e(wp,TS),e(TS,Bco),e(wp,xco),e(k,kco),e(k,Ap),e(Ap,kK),e(kK,Rco),e(Ap,Sco),e(Ap,FS),e(FS,Pco),e(Ap,$co),e(k,Ico),e(k,Lp),e(Lp,RK),e(RK,jco),e(Lp,Nco),e(Lp,CS),e(CS,Dco),e(Lp,qco),e(k,Gco),e(k,Bp),e(Bp,SK),e(SK,Oco),e(Bp,Xco),e(Bp,MS),e(MS,zco),e(Bp,Vco),e(k,Wco),e(k,xp),e(xp,PK),e(PK,Qco),e(xp,Hco),e(xp,ES),e(ES,Uco),e(xp,Jco),e(k,Yco),e(k,kp),e(kp,$K),e($K,Kco),e(kp,Zco),e(kp,yS),e(yS,emo),e(kp,omo),e(k,rmo),e(k,Rp),e(Rp,IK),e(IK,tmo),e(Rp,amo),e(Rp,wS),e(wS,smo),e(Rp,nmo),e(k,lmo),e(k,Sp),e(Sp,jK),e(jK,imo),e(Sp,dmo),e(Sp,AS),e(AS,cmo),e(Sp,mmo),e(k,fmo),e(k,Pp),e(Pp,NK),e(NK,gmo),e(Pp,hmo),e(Pp,LS),e(LS,umo),e(Pp,pmo),e(k,_mo),e(k,$p),e($p,DK),e(DK,bmo),e($p,vmo),e($p,BS),e(BS,Tmo),e($p,Fmo),e(k,Cmo),e(k,Ip),e(Ip,qK),e(qK,Mmo),e(Ip,Emo),e(Ip,xS),e(xS,ymo),e(Ip,wmo),e(ke,Amo),e(ke,jp),e(jp,Lmo),e(jp,GK),e(GK,Bmo),e(jp,xmo),e(jp,OK),e(OK,kmo),e(ke,Rmo),e(ke,XK),e(XK,Smo),e(ke,Pmo),g(J5,ke,null),b(d,L8e,_),b(d,Wi,_),e(Wi,Np),e(Np,zK),g(Y5,zK,null),e(Wi,$mo),e(Wi,VK),e(VK,Imo),b(d,B8e,_),b(d,Qo,_),g(K5,Qo,null),e(Qo,jmo),e(Qo,Qi),e(Qi,Nmo),e(Qi,WK),e(WK,Dmo),e(Qi,qmo),e(Qi,QK),e(QK,Gmo),e(Qi,Omo),e(Qo,Xmo),e(Qo,Z5),e(Z5,zmo),e(Z5,HK),e(HK,Vmo),e(Z5,Wmo),e(Qo,Qmo),e(Qo,qr),g(ey,qr,null),e(qr,Hmo),e(qr,UK),e(UK,Umo),e(qr,Jmo),e(qr,Hi),e(Hi,Ymo),e(Hi,JK),e(JK,Kmo),e(Hi,Zmo),e(Hi,YK),e(YK,efo),e(Hi,ofo),e(qr,rfo),e(qr,KK),e(KK,tfo),e(qr,afo),g(oy,qr,null),e(Qo,sfo),e(Qo,Re),g(ry,Re,null),e(Re,nfo),e(Re,ZK),e(ZK,lfo),e(Re,ifo),e(Re,Ga),e(Ga,dfo),e(Ga,eZ),e(eZ,cfo),e(Ga,mfo),e(Ga,oZ),e(oZ,ffo),e(Ga,gfo),e(Ga,rZ),e(rZ,hfo),e(Ga,ufo),e(Re,pfo),e(Re,$),e($,Dp),e(Dp,tZ),e(tZ,_fo),e(Dp,bfo),e(Dp,kS),e(kS,vfo),e(Dp,Tfo),e($,Ffo),e($,qp),e(qp,aZ),e(aZ,Cfo),e(qp,Mfo),e(qp,RS),e(RS,Efo),e(qp,yfo),e($,wfo),e($,Gp),e(Gp,sZ),e(sZ,Afo),e(Gp,Lfo),e(Gp,SS),e(SS,Bfo),e(Gp,xfo),e($,kfo),e($,Op),e(Op,nZ),e(nZ,Rfo),e(Op,Sfo),e(Op,PS),e(PS,Pfo),e(Op,$fo),e($,Ifo),e($,Xp),e(Xp,lZ),e(lZ,jfo),e(Xp,Nfo),e(Xp,$S),e($S,Dfo),e(Xp,qfo),e($,Gfo),e($,zp),e(zp,iZ),e(iZ,Ofo),e(zp,Xfo),e(zp,IS),e(IS,zfo),e(zp,Vfo),e($,Wfo),e($,Vp),e(Vp,dZ),e(dZ,Qfo),e(Vp,Hfo),e(Vp,jS),e(jS,Ufo),e(Vp,Jfo),e($,Yfo),e($,Wp),e(Wp,cZ),e(cZ,Kfo),e(Wp,Zfo),e(Wp,NS),e(NS,ego),e(Wp,ogo),e($,rgo),e($,Qp),e(Qp,mZ),e(mZ,tgo),e(Qp,ago),e(Qp,DS),e(DS,sgo),e(Qp,ngo),e($,lgo),e($,Hp),e(Hp,fZ),e(fZ,igo),e(Hp,dgo),e(Hp,qS),e(qS,cgo),e(Hp,mgo),e($,fgo),e($,Up),e(Up,gZ),e(gZ,ggo),e(Up,hgo),e(Up,GS),e(GS,ugo),e(Up,pgo),e($,_go),e($,Jp),e(Jp,hZ),e(hZ,bgo),e(Jp,vgo),e(Jp,OS),e(OS,Tgo),e(Jp,Fgo),e($,Cgo),e($,Yp),e(Yp,uZ),e(uZ,Mgo),e(Yp,Ego),e(Yp,XS),e(XS,ygo),e(Yp,wgo),e($,Ago),e($,Kp),e(Kp,pZ),e(pZ,Lgo),e(Kp,Bgo),e(Kp,zS),e(zS,xgo),e(Kp,kgo),e($,Rgo),e($,Zp),e(Zp,_Z),e(_Z,Sgo),e(Zp,Pgo),e(Zp,VS),e(VS,$go),e(Zp,Igo),e($,jgo),e($,e_),e(e_,bZ),e(bZ,Ngo),e(e_,Dgo),e(e_,WS),e(WS,qgo),e(e_,Ggo),e($,Ogo),e($,o_),e(o_,vZ),e(vZ,Xgo),e(o_,zgo),e(o_,QS),e(QS,Vgo),e(o_,Wgo),e($,Qgo),e($,r_),e(r_,TZ),e(TZ,Hgo),e(r_,Ugo),e(r_,HS),e(HS,Jgo),e(r_,Ygo),e($,Kgo),e($,t_),e(t_,FZ),e(FZ,Zgo),e(t_,eho),e(t_,US),e(US,oho),e(t_,rho),e($,tho),e($,a_),e(a_,CZ),e(CZ,aho),e(a_,sho),e(a_,JS),e(JS,nho),e(a_,lho),e($,iho),e($,s_),e(s_,MZ),e(MZ,dho),e(s_,cho),e(s_,YS),e(YS,mho),e(s_,fho),e($,gho),e($,n_),e(n_,EZ),e(EZ,hho),e(n_,uho),e(n_,KS),e(KS,pho),e(n_,_ho),e($,bho),e($,l_),e(l_,yZ),e(yZ,vho),e(l_,Tho),e(l_,ZS),e(ZS,Fho),e(l_,Cho),e($,Mho),e($,i_),e(i_,wZ),e(wZ,Eho),e(i_,yho),e(i_,eP),e(eP,who),e(i_,Aho),e($,Lho),e($,d_),e(d_,AZ),e(AZ,Bho),e(d_,xho),e(d_,oP),e(oP,kho),e(d_,Rho),e($,Sho),e($,c_),e(c_,LZ),e(LZ,Pho),e(c_,$ho),e(c_,rP),e(rP,Iho),e(c_,jho),e($,Nho),e($,m_),e(m_,BZ),e(BZ,Dho),e(m_,qho),e(m_,tP),e(tP,Gho),e(m_,Oho),e($,Xho),e($,f_),e(f_,xZ),e(xZ,zho),e(f_,Vho),e(f_,aP),e(aP,Who),e(f_,Qho),e($,Hho),e($,g_),e(g_,kZ),e(kZ,Uho),e(g_,Jho),e(g_,sP),e(sP,Yho),e(g_,Kho),e($,Zho),e($,h_),e(h_,RZ),e(RZ,euo),e(h_,ouo),e(h_,nP),e(nP,ruo),e(h_,tuo),e($,auo),e($,u_),e(u_,SZ),e(SZ,suo),e(u_,nuo),e(u_,lP),e(lP,luo),e(u_,iuo),e($,duo),e($,p_),e(p_,PZ),e(PZ,cuo),e(p_,muo),e(p_,iP),e(iP,fuo),e(p_,guo),e($,huo),e($,__),e(__,$Z),e($Z,uuo),e(__,puo),e(__,dP),e(dP,_uo),e(__,buo),e($,vuo),e($,b_),e(b_,IZ),e(IZ,Tuo),e(b_,Fuo),e(b_,cP),e(cP,Cuo),e(b_,Muo),e(Re,Euo),e(Re,v_),e(v_,yuo),e(v_,jZ),e(jZ,wuo),e(v_,Auo),e(v_,NZ),e(NZ,Luo),e(Re,Buo),e(Re,DZ),e(DZ,xuo),e(Re,kuo),g(ty,Re,null),b(d,x8e,_),b(d,Ui,_),e(Ui,T_),e(T_,qZ),g(ay,qZ,null),e(Ui,Ruo),e(Ui,GZ),e(GZ,Suo),b(d,k8e,_),b(d,Ho,_),g(sy,Ho,null),e(Ho,Puo),e(Ho,Ji),e(Ji,$uo),e(Ji,OZ),e(OZ,Iuo),e(Ji,juo),e(Ji,XZ),e(XZ,Nuo),e(Ji,Duo),e(Ho,quo),e(Ho,ny),e(ny,Guo),e(ny,zZ),e(zZ,Ouo),e(ny,Xuo),e(Ho,zuo),e(Ho,Gr),g(ly,Gr,null),e(Gr,Vuo),e(Gr,VZ),e(VZ,Wuo),e(Gr,Quo),e(Gr,Yi),e(Yi,Huo),e(Yi,WZ),e(WZ,Uuo),e(Yi,Juo),e(Yi,QZ),e(QZ,Yuo),e(Yi,Kuo),e(Gr,Zuo),e(Gr,HZ),e(HZ,epo),e(Gr,opo),g(iy,Gr,null),e(Ho,rpo),e(Ho,Se),g(dy,Se,null),e(Se,tpo),e(Se,UZ),e(UZ,apo),e(Se,spo),e(Se,Oa),e(Oa,npo),e(Oa,JZ),e(JZ,lpo),e(Oa,ipo),e(Oa,YZ),e(YZ,dpo),e(Oa,cpo),e(Oa,KZ),e(KZ,mpo),e(Oa,fpo),e(Se,gpo),e(Se,I),e(I,F_),e(F_,ZZ),e(ZZ,hpo),e(F_,upo),e(F_,mP),e(mP,ppo),e(F_,_po),e(I,bpo),e(I,C_),e(C_,eee),e(eee,vpo),e(C_,Tpo),e(C_,fP),e(fP,Fpo),e(C_,Cpo),e(I,Mpo),e(I,M_),e(M_,oee),e(oee,Epo),e(M_,ypo),e(M_,gP),e(gP,wpo),e(M_,Apo),e(I,Lpo),e(I,E_),e(E_,ree),e(ree,Bpo),e(E_,xpo),e(E_,hP),e(hP,kpo),e(E_,Rpo),e(I,Spo),e(I,y_),e(y_,tee),e(tee,Ppo),e(y_,$po),e(y_,uP),e(uP,Ipo),e(y_,jpo),e(I,Npo),e(I,w_),e(w_,aee),e(aee,Dpo),e(w_,qpo),e(w_,pP),e(pP,Gpo),e(w_,Opo),e(I,Xpo),e(I,A_),e(A_,see),e(see,zpo),e(A_,Vpo),e(A_,_P),e(_P,Wpo),e(A_,Qpo),e(I,Hpo),e(I,L_),e(L_,nee),e(nee,Upo),e(L_,Jpo),e(L_,bP),e(bP,Ypo),e(L_,Kpo),e(I,Zpo),e(I,B_),e(B_,lee),e(lee,e_o),e(B_,o_o),e(B_,vP),e(vP,r_o),e(B_,t_o),e(I,a_o),e(I,x_),e(x_,iee),e(iee,s_o),e(x_,n_o),e(x_,TP),e(TP,l_o),e(x_,i_o),e(I,d_o),e(I,k_),e(k_,dee),e(dee,c_o),e(k_,m_o),e(k_,FP),e(FP,f_o),e(k_,g_o),e(I,h_o),e(I,R_),e(R_,cee),e(cee,u_o),e(R_,p_o),e(R_,CP),e(CP,__o),e(R_,b_o),e(I,v_o),e(I,S_),e(S_,mee),e(mee,T_o),e(S_,F_o),e(S_,MP),e(MP,C_o),e(S_,M_o),e(I,E_o),e(I,P_),e(P_,fee),e(fee,y_o),e(P_,w_o),e(P_,EP),e(EP,A_o),e(P_,L_o),e(I,B_o),e(I,$_),e($_,gee),e(gee,x_o),e($_,k_o),e($_,yP),e(yP,R_o),e($_,S_o),e(I,P_o),e(I,I_),e(I_,hee),e(hee,$_o),e(I_,I_o),e(I_,wP),e(wP,j_o),e(I_,N_o),e(I,D_o),e(I,j_),e(j_,uee),e(uee,q_o),e(j_,G_o),e(j_,AP),e(AP,O_o),e(j_,X_o),e(I,z_o),e(I,N_),e(N_,pee),e(pee,V_o),e(N_,W_o),e(N_,LP),e(LP,Q_o),e(N_,H_o),e(I,U_o),e(I,D_),e(D_,_ee),e(_ee,J_o),e(D_,Y_o),e(D_,BP),e(BP,K_o),e(D_,Z_o),e(I,ebo),e(I,q_),e(q_,bee),e(bee,obo),e(q_,rbo),e(q_,xP),e(xP,tbo),e(q_,abo),e(I,sbo),e(I,G_),e(G_,vee),e(vee,nbo),e(G_,lbo),e(G_,kP),e(kP,ibo),e(G_,dbo),e(I,cbo),e(I,O_),e(O_,Tee),e(Tee,mbo),e(O_,fbo),e(O_,RP),e(RP,gbo),e(O_,hbo),e(I,ubo),e(I,X_),e(X_,Fee),e(Fee,pbo),e(X_,_bo),e(X_,SP),e(SP,bbo),e(X_,vbo),e(I,Tbo),e(I,z_),e(z_,Cee),e(Cee,Fbo),e(z_,Cbo),e(z_,PP),e(PP,Mbo),e(z_,Ebo),e(I,ybo),e(I,V_),e(V_,Mee),e(Mee,wbo),e(V_,Abo),e(V_,$P),e($P,Lbo),e(V_,Bbo),e(I,xbo),e(I,W_),e(W_,Eee),e(Eee,kbo),e(W_,Rbo),e(W_,IP),e(IP,Sbo),e(W_,Pbo),e(I,$bo),e(I,Q_),e(Q_,yee),e(yee,Ibo),e(Q_,jbo),e(Q_,jP),e(jP,Nbo),e(Q_,Dbo),e(I,qbo),e(I,H_),e(H_,wee),e(wee,Gbo),e(H_,Obo),e(H_,NP),e(NP,Xbo),e(H_,zbo),e(I,Vbo),e(I,U_),e(U_,Aee),e(Aee,Wbo),e(U_,Qbo),e(U_,DP),e(DP,Hbo),e(U_,Ubo),e(I,Jbo),e(I,J_),e(J_,Lee),e(Lee,Ybo),e(J_,Kbo),e(J_,Bee),e(Bee,Zbo),e(J_,e2o),e(I,o2o),e(I,Y_),e(Y_,xee),e(xee,r2o),e(Y_,t2o),e(Y_,qP),e(qP,a2o),e(Y_,s2o),e(I,n2o),e(I,K_),e(K_,kee),e(kee,l2o),e(K_,i2o),e(K_,GP),e(GP,d2o),e(K_,c2o),e(I,m2o),e(I,Z_),e(Z_,Ree),e(Ree,f2o),e(Z_,g2o),e(Z_,OP),e(OP,h2o),e(Z_,u2o),e(I,p2o),e(I,eb),e(eb,See),e(See,_2o),e(eb,b2o),e(eb,XP),e(XP,v2o),e(eb,T2o),e(Se,F2o),e(Se,ob),e(ob,C2o),e(ob,Pee),e(Pee,M2o),e(ob,E2o),e(ob,$ee),e($ee,y2o),e(Se,w2o),e(Se,Iee),e(Iee,A2o),e(Se,L2o),g(cy,Se,null),b(d,R8e,_),b(d,Ki,_),e(Ki,rb),e(rb,jee),g(my,jee,null),e(Ki,B2o),e(Ki,Nee),e(Nee,x2o),b(d,S8e,_),b(d,Uo,_),g(fy,Uo,null),e(Uo,k2o),e(Uo,Zi),e(Zi,R2o),e(Zi,Dee),e(Dee,S2o),e(Zi,P2o),e(Zi,qee),e(qee,$2o),e(Zi,I2o),e(Uo,j2o),e(Uo,gy),e(gy,N2o),e(gy,Gee),e(Gee,D2o),e(gy,q2o),e(Uo,G2o),e(Uo,Or),g(hy,Or,null),e(Or,O2o),e(Or,Oee),e(Oee,X2o),e(Or,z2o),e(Or,ed),e(ed,V2o),e(ed,Xee),e(Xee,W2o),e(ed,Q2o),e(ed,zee),e(zee,H2o),e(ed,U2o),e(Or,J2o),e(Or,Vee),e(Vee,Y2o),e(Or,K2o),g(uy,Or,null),e(Uo,Z2o),e(Uo,Pe),g(py,Pe,null),e(Pe,evo),e(Pe,Wee),e(Wee,ovo),e(Pe,rvo),e(Pe,Xa),e(Xa,tvo),e(Xa,Qee),e(Qee,avo),e(Xa,svo),e(Xa,Hee),e(Hee,nvo),e(Xa,lvo),e(Xa,Uee),e(Uee,ivo),e(Xa,dvo),e(Pe,cvo),e(Pe,ae),e(ae,tb),e(tb,Jee),e(Jee,mvo),e(tb,fvo),e(tb,zP),e(zP,gvo),e(tb,hvo),e(ae,uvo),e(ae,ab),e(ab,Yee),e(Yee,pvo),e(ab,_vo),e(ab,VP),e(VP,bvo),e(ab,vvo),e(ae,Tvo),e(ae,sb),e(sb,Kee),e(Kee,Fvo),e(sb,Cvo),e(sb,WP),e(WP,Mvo),e(sb,Evo),e(ae,yvo),e(ae,nb),e(nb,Zee),e(Zee,wvo),e(nb,Avo),e(nb,QP),e(QP,Lvo),e(nb,Bvo),e(ae,xvo),e(ae,lb),e(lb,eoe),e(eoe,kvo),e(lb,Rvo),e(lb,HP),e(HP,Svo),e(lb,Pvo),e(ae,$vo),e(ae,ib),e(ib,ooe),e(ooe,Ivo),e(ib,jvo),e(ib,UP),e(UP,Nvo),e(ib,Dvo),e(ae,qvo),e(ae,db),e(db,roe),e(roe,Gvo),e(db,Ovo),e(db,JP),e(JP,Xvo),e(db,zvo),e(ae,Vvo),e(ae,cb),e(cb,toe),e(toe,Wvo),e(cb,Qvo),e(cb,YP),e(YP,Hvo),e(cb,Uvo),e(ae,Jvo),e(ae,mb),e(mb,aoe),e(aoe,Yvo),e(mb,Kvo),e(mb,KP),e(KP,Zvo),e(mb,eTo),e(ae,oTo),e(ae,fb),e(fb,soe),e(soe,rTo),e(fb,tTo),e(fb,ZP),e(ZP,aTo),e(fb,sTo),e(ae,nTo),e(ae,gb),e(gb,noe),e(noe,lTo),e(gb,iTo),e(gb,e$),e(e$,dTo),e(gb,cTo),e(ae,mTo),e(ae,hb),e(hb,loe),e(loe,fTo),e(hb,gTo),e(hb,o$),e(o$,hTo),e(hb,uTo),e(ae,pTo),e(ae,ub),e(ub,ioe),e(ioe,_To),e(ub,bTo),e(ub,r$),e(r$,vTo),e(ub,TTo),e(ae,FTo),e(ae,pb),e(pb,doe),e(doe,CTo),e(pb,MTo),e(pb,t$),e(t$,ETo),e(pb,yTo),e(ae,wTo),e(ae,_b),e(_b,coe),e(coe,ATo),e(_b,LTo),e(_b,a$),e(a$,BTo),e(_b,xTo),e(ae,kTo),e(ae,bb),e(bb,moe),e(moe,RTo),e(bb,STo),e(bb,s$),e(s$,PTo),e(bb,$To),e(Pe,ITo),e(Pe,vb),e(vb,jTo),e(vb,foe),e(foe,NTo),e(vb,DTo),e(vb,goe),e(goe,qTo),e(Pe,GTo),e(Pe,hoe),e(hoe,OTo),e(Pe,XTo),g(_y,Pe,null),b(d,P8e,_),b(d,od,_),e(od,Tb),e(Tb,uoe),g(by,uoe,null),e(od,zTo),e(od,poe),e(poe,VTo),b(d,$8e,_),b(d,Jo,_),g(vy,Jo,null),e(Jo,WTo),e(Jo,rd),e(rd,QTo),e(rd,_oe),e(_oe,HTo),e(rd,UTo),e(rd,boe),e(boe,JTo),e(rd,YTo),e(Jo,KTo),e(Jo,Ty),e(Ty,ZTo),e(Ty,voe),e(voe,e1o),e(Ty,o1o),e(Jo,r1o),e(Jo,Xr),g(Fy,Xr,null),e(Xr,t1o),e(Xr,Toe),e(Toe,a1o),e(Xr,s1o),e(Xr,td),e(td,n1o),e(td,Foe),e(Foe,l1o),e(td,i1o),e(td,Coe),e(Coe,d1o),e(td,c1o),e(Xr,m1o),e(Xr,Moe),e(Moe,f1o),e(Xr,g1o),g(Cy,Xr,null),e(Jo,h1o),e(Jo,$e),g(My,$e,null),e($e,u1o),e($e,Eoe),e(Eoe,p1o),e($e,_1o),e($e,za),e(za,b1o),e(za,yoe),e(yoe,v1o),e(za,T1o),e(za,woe),e(woe,F1o),e(za,C1o),e(za,Aoe),e(Aoe,M1o),e(za,E1o),e($e,y1o),e($e,A),e(A,Fb),e(Fb,Loe),e(Loe,w1o),e(Fb,A1o),e(Fb,n$),e(n$,L1o),e(Fb,B1o),e(A,x1o),e(A,Cb),e(Cb,Boe),e(Boe,k1o),e(Cb,R1o),e(Cb,l$),e(l$,S1o),e(Cb,P1o),e(A,$1o),e(A,Mb),e(Mb,xoe),e(xoe,I1o),e(Mb,j1o),e(Mb,i$),e(i$,N1o),e(Mb,D1o),e(A,q1o),e(A,Eb),e(Eb,koe),e(koe,G1o),e(Eb,O1o),e(Eb,d$),e(d$,X1o),e(Eb,z1o),e(A,V1o),e(A,yb),e(yb,Roe),e(Roe,W1o),e(yb,Q1o),e(yb,c$),e(c$,H1o),e(yb,U1o),e(A,J1o),e(A,wb),e(wb,Soe),e(Soe,Y1o),e(wb,K1o),e(wb,m$),e(m$,Z1o),e(wb,eFo),e(A,oFo),e(A,Ab),e(Ab,Poe),e(Poe,rFo),e(Ab,tFo),e(Ab,f$),e(f$,aFo),e(Ab,sFo),e(A,nFo),e(A,Lb),e(Lb,$oe),e($oe,lFo),e(Lb,iFo),e(Lb,g$),e(g$,dFo),e(Lb,cFo),e(A,mFo),e(A,Bb),e(Bb,Ioe),e(Ioe,fFo),e(Bb,gFo),e(Bb,h$),e(h$,hFo),e(Bb,uFo),e(A,pFo),e(A,xb),e(xb,joe),e(joe,_Fo),e(xb,bFo),e(xb,u$),e(u$,vFo),e(xb,TFo),e(A,FFo),e(A,kb),e(kb,Noe),e(Noe,CFo),e(kb,MFo),e(kb,p$),e(p$,EFo),e(kb,yFo),e(A,wFo),e(A,Rb),e(Rb,Doe),e(Doe,AFo),e(Rb,LFo),e(Rb,_$),e(_$,BFo),e(Rb,xFo),e(A,kFo),e(A,Sb),e(Sb,qoe),e(qoe,RFo),e(Sb,SFo),e(Sb,b$),e(b$,PFo),e(Sb,$Fo),e(A,IFo),e(A,Pb),e(Pb,Goe),e(Goe,jFo),e(Pb,NFo),e(Pb,v$),e(v$,DFo),e(Pb,qFo),e(A,GFo),e(A,$b),e($b,Ooe),e(Ooe,OFo),e($b,XFo),e($b,T$),e(T$,zFo),e($b,VFo),e(A,WFo),e(A,Ib),e(Ib,Xoe),e(Xoe,QFo),e(Ib,HFo),e(Ib,F$),e(F$,UFo),e(Ib,JFo),e(A,YFo),e(A,jb),e(jb,zoe),e(zoe,KFo),e(jb,ZFo),e(jb,C$),e(C$,eCo),e(jb,oCo),e(A,rCo),e(A,Nb),e(Nb,Voe),e(Voe,tCo),e(Nb,aCo),e(Nb,M$),e(M$,sCo),e(Nb,nCo),e(A,lCo),e(A,Db),e(Db,Woe),e(Woe,iCo),e(Db,dCo),e(Db,E$),e(E$,cCo),e(Db,mCo),e(A,fCo),e(A,qb),e(qb,Qoe),e(Qoe,gCo),e(qb,hCo),e(qb,y$),e(y$,uCo),e(qb,pCo),e(A,_Co),e(A,Gb),e(Gb,Hoe),e(Hoe,bCo),e(Gb,vCo),e(Gb,w$),e(w$,TCo),e(Gb,FCo),e(A,CCo),e(A,Ob),e(Ob,Uoe),e(Uoe,MCo),e(Ob,ECo),e(Ob,A$),e(A$,yCo),e(Ob,wCo),e(A,ACo),e(A,Xb),e(Xb,Joe),e(Joe,LCo),e(Xb,BCo),e(Xb,L$),e(L$,xCo),e(Xb,kCo),e(A,RCo),e(A,zb),e(zb,Yoe),e(Yoe,SCo),e(zb,PCo),e(zb,B$),e(B$,$Co),e(zb,ICo),e(A,jCo),e(A,Vb),e(Vb,Koe),e(Koe,NCo),e(Vb,DCo),e(Vb,x$),e(x$,qCo),e(Vb,GCo),e(A,OCo),e(A,Wb),e(Wb,Zoe),e(Zoe,XCo),e(Wb,zCo),e(Wb,k$),e(k$,VCo),e(Wb,WCo),e(A,QCo),e(A,Qb),e(Qb,ere),e(ere,HCo),e(Qb,UCo),e(Qb,R$),e(R$,JCo),e(Qb,YCo),e(A,KCo),e(A,Hb),e(Hb,ore),e(ore,ZCo),e(Hb,e4o),e(Hb,S$),e(S$,o4o),e(Hb,r4o),e(A,t4o),e(A,Ub),e(Ub,rre),e(rre,a4o),e(Ub,s4o),e(Ub,P$),e(P$,n4o),e(Ub,l4o),e(A,i4o),e(A,Jb),e(Jb,tre),e(tre,d4o),e(Jb,c4o),e(Jb,$$),e($$,m4o),e(Jb,f4o),e(A,g4o),e(A,Yb),e(Yb,are),e(are,h4o),e(Yb,u4o),e(Yb,I$),e(I$,p4o),e(Yb,_4o),e(A,b4o),e(A,Kb),e(Kb,sre),e(sre,v4o),e(Kb,T4o),e(Kb,j$),e(j$,F4o),e(Kb,C4o),e(A,M4o),e(A,Zb),e(Zb,nre),e(nre,E4o),e(Zb,y4o),e(Zb,N$),e(N$,w4o),e(Zb,A4o),e(A,L4o),e(A,e2),e(e2,lre),e(lre,B4o),e(e2,x4o),e(e2,D$),e(D$,k4o),e(e2,R4o),e(A,S4o),e(A,o2),e(o2,ire),e(ire,P4o),e(o2,$4o),e(o2,q$),e(q$,I4o),e(o2,j4o),e(A,N4o),e(A,r2),e(r2,dre),e(dre,D4o),e(r2,q4o),e(r2,G$),e(G$,G4o),e(r2,O4o),e(A,X4o),e(A,t2),e(t2,cre),e(cre,z4o),e(t2,V4o),e(t2,O$),e(O$,W4o),e(t2,Q4o),e(A,H4o),e(A,a2),e(a2,mre),e(mre,U4o),e(a2,J4o),e(a2,X$),e(X$,Y4o),e(a2,K4o),e(A,Z4o),e(A,s2),e(s2,fre),e(fre,eMo),e(s2,oMo),e(s2,z$),e(z$,rMo),e(s2,tMo),e(A,aMo),e(A,n2),e(n2,gre),e(gre,sMo),e(n2,nMo),e(n2,V$),e(V$,lMo),e(n2,iMo),e(A,dMo),e(A,l2),e(l2,hre),e(hre,cMo),e(l2,mMo),e(l2,W$),e(W$,fMo),e(l2,gMo),e(A,hMo),e(A,i2),e(i2,ure),e(ure,uMo),e(i2,pMo),e(i2,Q$),e(Q$,_Mo),e(i2,bMo),e(A,vMo),e(A,d2),e(d2,pre),e(pre,TMo),e(d2,FMo),e(d2,H$),e(H$,CMo),e(d2,MMo),e(A,EMo),e(A,c2),e(c2,_re),e(_re,yMo),e(c2,wMo),e(c2,U$),e(U$,AMo),e(c2,LMo),e(A,BMo),e(A,m2),e(m2,bre),e(bre,xMo),e(m2,kMo),e(m2,J$),e(J$,RMo),e(m2,SMo),e($e,PMo),e($e,f2),e(f2,$Mo),e(f2,vre),e(vre,IMo),e(f2,jMo),e(f2,Tre),e(Tre,NMo),e($e,DMo),e($e,Fre),e(Fre,qMo),e($e,GMo),g(Ey,$e,null),b(d,I8e,_),b(d,ad,_),e(ad,g2),e(g2,Cre),g(yy,Cre,null),e(ad,OMo),e(ad,Mre),e(Mre,XMo),b(d,j8e,_),b(d,Yo,_),g(wy,Yo,null),e(Yo,zMo),e(Yo,sd),e(sd,VMo),e(sd,Ere),e(Ere,WMo),e(sd,QMo),e(sd,yre),e(yre,HMo),e(sd,UMo),e(Yo,JMo),e(Yo,Ay),e(Ay,YMo),e(Ay,wre),e(wre,KMo),e(Ay,ZMo),e(Yo,eEo),e(Yo,zr),g(Ly,zr,null),e(zr,oEo),e(zr,Are),e(Are,rEo),e(zr,tEo),e(zr,nd),e(nd,aEo),e(nd,Lre),e(Lre,sEo),e(nd,nEo),e(nd,Bre),e(Bre,lEo),e(nd,iEo),e(zr,dEo),e(zr,xre),e(xre,cEo),e(zr,mEo),g(By,zr,null),e(Yo,fEo),e(Yo,Ie),g(xy,Ie,null),e(Ie,gEo),e(Ie,kre),e(kre,hEo),e(Ie,uEo),e(Ie,Va),e(Va,pEo),e(Va,Rre),e(Rre,_Eo),e(Va,bEo),e(Va,Sre),e(Sre,vEo),e(Va,TEo),e(Va,Pre),e(Pre,FEo),e(Va,CEo),e(Ie,MEo),e(Ie,G),e(G,h2),e(h2,$re),e($re,EEo),e(h2,yEo),e(h2,Y$),e(Y$,wEo),e(h2,AEo),e(G,LEo),e(G,u2),e(u2,Ire),e(Ire,BEo),e(u2,xEo),e(u2,K$),e(K$,kEo),e(u2,REo),e(G,SEo),e(G,p2),e(p2,jre),e(jre,PEo),e(p2,$Eo),e(p2,Z$),e(Z$,IEo),e(p2,jEo),e(G,NEo),e(G,_2),e(_2,Nre),e(Nre,DEo),e(_2,qEo),e(_2,eI),e(eI,GEo),e(_2,OEo),e(G,XEo),e(G,b2),e(b2,Dre),e(Dre,zEo),e(b2,VEo),e(b2,oI),e(oI,WEo),e(b2,QEo),e(G,HEo),e(G,v2),e(v2,qre),e(qre,UEo),e(v2,JEo),e(v2,rI),e(rI,YEo),e(v2,KEo),e(G,ZEo),e(G,T2),e(T2,Gre),e(Gre,e3o),e(T2,o3o),e(T2,tI),e(tI,r3o),e(T2,t3o),e(G,a3o),e(G,F2),e(F2,Ore),e(Ore,s3o),e(F2,n3o),e(F2,aI),e(aI,l3o),e(F2,i3o),e(G,d3o),e(G,C2),e(C2,Xre),e(Xre,c3o),e(C2,m3o),e(C2,sI),e(sI,f3o),e(C2,g3o),e(G,h3o),e(G,M2),e(M2,zre),e(zre,u3o),e(M2,p3o),e(M2,nI),e(nI,_3o),e(M2,b3o),e(G,v3o),e(G,E2),e(E2,Vre),e(Vre,T3o),e(E2,F3o),e(E2,lI),e(lI,C3o),e(E2,M3o),e(G,E3o),e(G,y2),e(y2,Wre),e(Wre,y3o),e(y2,w3o),e(y2,iI),e(iI,A3o),e(y2,L3o),e(G,B3o),e(G,w2),e(w2,Qre),e(Qre,x3o),e(w2,k3o),e(w2,dI),e(dI,R3o),e(w2,S3o),e(G,P3o),e(G,A2),e(A2,Hre),e(Hre,$3o),e(A2,I3o),e(A2,cI),e(cI,j3o),e(A2,N3o),e(G,D3o),e(G,L2),e(L2,Ure),e(Ure,q3o),e(L2,G3o),e(L2,mI),e(mI,O3o),e(L2,X3o),e(G,z3o),e(G,B2),e(B2,Jre),e(Jre,V3o),e(B2,W3o),e(B2,fI),e(fI,Q3o),e(B2,H3o),e(G,U3o),e(G,x2),e(x2,Yre),e(Yre,J3o),e(x2,Y3o),e(x2,gI),e(gI,K3o),e(x2,Z3o),e(G,e5o),e(G,k2),e(k2,Kre),e(Kre,o5o),e(k2,r5o),e(k2,hI),e(hI,t5o),e(k2,a5o),e(G,s5o),e(G,R2),e(R2,Zre),e(Zre,n5o),e(R2,l5o),e(R2,uI),e(uI,i5o),e(R2,d5o),e(G,c5o),e(G,S2),e(S2,ete),e(ete,m5o),e(S2,f5o),e(S2,pI),e(pI,g5o),e(S2,h5o),e(G,u5o),e(G,P2),e(P2,ote),e(ote,p5o),e(P2,_5o),e(P2,_I),e(_I,b5o),e(P2,v5o),e(G,T5o),e(G,$2),e($2,rte),e(rte,F5o),e($2,C5o),e($2,bI),e(bI,M5o),e($2,E5o),e(G,y5o),e(G,I2),e(I2,tte),e(tte,w5o),e(I2,A5o),e(I2,vI),e(vI,L5o),e(I2,B5o),e(G,x5o),e(G,j2),e(j2,ate),e(ate,k5o),e(j2,R5o),e(j2,TI),e(TI,S5o),e(j2,P5o),e(G,$5o),e(G,N2),e(N2,ste),e(ste,I5o),e(N2,j5o),e(N2,FI),e(FI,N5o),e(N2,D5o),e(G,q5o),e(G,D2),e(D2,nte),e(nte,G5o),e(D2,O5o),e(D2,CI),e(CI,X5o),e(D2,z5o),e(G,V5o),e(G,q2),e(q2,lte),e(lte,W5o),e(q2,Q5o),e(q2,MI),e(MI,H5o),e(q2,U5o),e(Ie,J5o),e(Ie,G2),e(G2,Y5o),e(G2,ite),e(ite,K5o),e(G2,Z5o),e(G2,dte),e(dte,eyo),e(Ie,oyo),e(Ie,cte),e(cte,ryo),e(Ie,tyo),g(ky,Ie,null),b(d,N8e,_),b(d,ld,_),e(ld,O2),e(O2,mte),g(Ry,mte,null),e(ld,ayo),e(ld,fte),e(fte,syo),b(d,D8e,_),b(d,Ko,_),g(Sy,Ko,null),e(Ko,nyo),e(Ko,id),e(id,lyo),e(id,gte),e(gte,iyo),e(id,dyo),e(id,hte),e(hte,cyo),e(id,myo),e(Ko,fyo),e(Ko,Py),e(Py,gyo),e(Py,ute),e(ute,hyo),e(Py,uyo),e(Ko,pyo),e(Ko,Vr),g($y,Vr,null),e(Vr,_yo),e(Vr,pte),e(pte,byo),e(Vr,vyo),e(Vr,dd),e(dd,Tyo),e(dd,_te),e(_te,Fyo),e(dd,Cyo),e(dd,bte),e(bte,Myo),e(dd,Eyo),e(Vr,yyo),e(Vr,vte),e(vte,wyo),e(Vr,Ayo),g(Iy,Vr,null),e(Ko,Lyo),e(Ko,je),g(jy,je,null),e(je,Byo),e(je,Tte),e(Tte,xyo),e(je,kyo),e(je,Wa),e(Wa,Ryo),e(Wa,Fte),e(Fte,Syo),e(Wa,Pyo),e(Wa,Cte),e(Cte,$yo),e(Wa,Iyo),e(Wa,Mte),e(Mte,jyo),e(Wa,Nyo),e(je,Dyo),e(je,sa),e(sa,X2),e(X2,Ete),e(Ete,qyo),e(X2,Gyo),e(X2,EI),e(EI,Oyo),e(X2,Xyo),e(sa,zyo),e(sa,z2),e(z2,yte),e(yte,Vyo),e(z2,Wyo),e(z2,yI),e(yI,Qyo),e(z2,Hyo),e(sa,Uyo),e(sa,V2),e(V2,wte),e(wte,Jyo),e(V2,Yyo),e(V2,wI),e(wI,Kyo),e(V2,Zyo),e(sa,ewo),e(sa,W2),e(W2,Ate),e(Ate,owo),e(W2,rwo),e(W2,AI),e(AI,two),e(W2,awo),e(sa,swo),e(sa,Q2),e(Q2,Lte),e(Lte,nwo),e(Q2,lwo),e(Q2,LI),e(LI,iwo),e(Q2,dwo),e(je,cwo),e(je,H2),e(H2,mwo),e(H2,Bte),e(Bte,fwo),e(H2,gwo),e(H2,xte),e(xte,hwo),e(je,uwo),e(je,kte),e(kte,pwo),e(je,_wo),g(Ny,je,null),b(d,q8e,_),b(d,cd,_),e(cd,U2),e(U2,Rte),g(Dy,Rte,null),e(cd,bwo),e(cd,Ste),e(Ste,vwo),b(d,G8e,_),b(d,Zo,_),g(qy,Zo,null),e(Zo,Two),e(Zo,md),e(md,Fwo),e(md,Pte),e(Pte,Cwo),e(md,Mwo),e(md,$te),e($te,Ewo),e(md,ywo),e(Zo,wwo),e(Zo,Gy),e(Gy,Awo),e(Gy,Ite),e(Ite,Lwo),e(Gy,Bwo),e(Zo,xwo),e(Zo,Wr),g(Oy,Wr,null),e(Wr,kwo),e(Wr,jte),e(jte,Rwo),e(Wr,Swo),e(Wr,fd),e(fd,Pwo),e(fd,Nte),e(Nte,$wo),e(fd,Iwo),e(fd,Dte),e(Dte,jwo),e(fd,Nwo),e(Wr,Dwo),e(Wr,qte),e(qte,qwo),e(Wr,Gwo),g(Xy,Wr,null),e(Zo,Owo),e(Zo,Ne),g(zy,Ne,null),e(Ne,Xwo),e(Ne,Gte),e(Gte,zwo),e(Ne,Vwo),e(Ne,Qa),e(Qa,Wwo),e(Qa,Ote),e(Ote,Qwo),e(Qa,Hwo),e(Qa,Xte),e(Xte,Uwo),e(Qa,Jwo),e(Qa,zte),e(zte,Ywo),e(Qa,Kwo),e(Ne,Zwo),e(Ne,D),e(D,J2),e(J2,Vte),e(Vte,eAo),e(J2,oAo),e(J2,BI),e(BI,rAo),e(J2,tAo),e(D,aAo),e(D,Y2),e(Y2,Wte),e(Wte,sAo),e(Y2,nAo),e(Y2,xI),e(xI,lAo),e(Y2,iAo),e(D,dAo),e(D,K2),e(K2,Qte),e(Qte,cAo),e(K2,mAo),e(K2,kI),e(kI,fAo),e(K2,gAo),e(D,hAo),e(D,Z2),e(Z2,Hte),e(Hte,uAo),e(Z2,pAo),e(Z2,RI),e(RI,_Ao),e(Z2,bAo),e(D,vAo),e(D,ev),e(ev,Ute),e(Ute,TAo),e(ev,FAo),e(ev,SI),e(SI,CAo),e(ev,MAo),e(D,EAo),e(D,ov),e(ov,Jte),e(Jte,yAo),e(ov,wAo),e(ov,PI),e(PI,AAo),e(ov,LAo),e(D,BAo),e(D,rv),e(rv,Yte),e(Yte,xAo),e(rv,kAo),e(rv,$I),e($I,RAo),e(rv,SAo),e(D,PAo),e(D,tv),e(tv,Kte),e(Kte,$Ao),e(tv,IAo),e(tv,II),e(II,jAo),e(tv,NAo),e(D,DAo),e(D,av),e(av,Zte),e(Zte,qAo),e(av,GAo),e(av,jI),e(jI,OAo),e(av,XAo),e(D,zAo),e(D,sv),e(sv,eae),e(eae,VAo),e(sv,WAo),e(sv,NI),e(NI,QAo),e(sv,HAo),e(D,UAo),e(D,nv),e(nv,oae),e(oae,JAo),e(nv,YAo),e(nv,DI),e(DI,KAo),e(nv,ZAo),e(D,e6o),e(D,lv),e(lv,rae),e(rae,o6o),e(lv,r6o),e(lv,qI),e(qI,t6o),e(lv,a6o),e(D,s6o),e(D,iv),e(iv,tae),e(tae,n6o),e(iv,l6o),e(iv,GI),e(GI,i6o),e(iv,d6o),e(D,c6o),e(D,dv),e(dv,aae),e(aae,m6o),e(dv,f6o),e(dv,OI),e(OI,g6o),e(dv,h6o),e(D,u6o),e(D,cv),e(cv,sae),e(sae,p6o),e(cv,_6o),e(cv,XI),e(XI,b6o),e(cv,v6o),e(D,T6o),e(D,mv),e(mv,nae),e(nae,F6o),e(mv,C6o),e(mv,zI),e(zI,M6o),e(mv,E6o),e(D,y6o),e(D,fv),e(fv,lae),e(lae,w6o),e(fv,A6o),e(fv,VI),e(VI,L6o),e(fv,B6o),e(D,x6o),e(D,gv),e(gv,iae),e(iae,k6o),e(gv,R6o),e(gv,WI),e(WI,S6o),e(gv,P6o),e(D,$6o),e(D,hv),e(hv,dae),e(dae,I6o),e(hv,j6o),e(hv,QI),e(QI,N6o),e(hv,D6o),e(D,q6o),e(D,uv),e(uv,cae),e(cae,G6o),e(uv,O6o),e(uv,HI),e(HI,X6o),e(uv,z6o),e(D,V6o),e(D,pv),e(pv,mae),e(mae,W6o),e(pv,Q6o),e(pv,UI),e(UI,H6o),e(pv,U6o),e(D,J6o),e(D,_v),e(_v,fae),e(fae,Y6o),e(_v,K6o),e(_v,JI),e(JI,Z6o),e(_v,e0o),e(D,o0o),e(D,bv),e(bv,gae),e(gae,r0o),e(bv,t0o),e(bv,YI),e(YI,a0o),e(bv,s0o),e(D,n0o),e(D,vv),e(vv,hae),e(hae,l0o),e(vv,i0o),e(vv,KI),e(KI,d0o),e(vv,c0o),e(D,m0o),e(D,Tv),e(Tv,uae),e(uae,f0o),e(Tv,g0o),e(Tv,ZI),e(ZI,h0o),e(Tv,u0o),e(D,p0o),e(D,Fv),e(Fv,pae),e(pae,_0o),e(Fv,b0o),e(Fv,ej),e(ej,v0o),e(Fv,T0o),e(D,F0o),e(D,Cv),e(Cv,_ae),e(_ae,C0o),e(Cv,M0o),e(Cv,oj),e(oj,E0o),e(Cv,y0o),e(D,w0o),e(D,Mv),e(Mv,bae),e(bae,A0o),e(Mv,L0o),e(Mv,rj),e(rj,B0o),e(Mv,x0o),e(D,k0o),e(D,Ev),e(Ev,vae),e(vae,R0o),e(Ev,S0o),e(Ev,tj),e(tj,P0o),e(Ev,$0o),e(D,I0o),e(D,yv),e(yv,Tae),e(Tae,j0o),e(yv,N0o),e(yv,aj),e(aj,D0o),e(yv,q0o),e(D,G0o),e(D,wv),e(wv,Fae),e(Fae,O0o),e(wv,X0o),e(wv,sj),e(sj,z0o),e(wv,V0o),e(D,W0o),e(D,Av),e(Av,Cae),e(Cae,Q0o),e(Av,H0o),e(Av,nj),e(nj,U0o),e(Av,J0o),e(Ne,Y0o),e(Ne,Lv),e(Lv,K0o),e(Lv,Mae),e(Mae,Z0o),e(Lv,eLo),e(Lv,Eae),e(Eae,oLo),e(Ne,rLo),e(Ne,yae),e(yae,tLo),e(Ne,aLo),g(Vy,Ne,null),b(d,O8e,_),b(d,gd,_),e(gd,Bv),e(Bv,wae),g(Wy,wae,null),e(gd,sLo),e(gd,Aae),e(Aae,nLo),b(d,X8e,_),b(d,er,_),g(Qy,er,null),e(er,lLo),e(er,hd),e(hd,iLo),e(hd,Lae),e(Lae,dLo),e(hd,cLo),e(hd,Bae),e(Bae,mLo),e(hd,fLo),e(er,gLo),e(er,Hy),e(Hy,hLo),e(Hy,xae),e(xae,uLo),e(Hy,pLo),e(er,_Lo),e(er,Qr),g(Uy,Qr,null),e(Qr,bLo),e(Qr,kae),e(kae,vLo),e(Qr,TLo),e(Qr,ud),e(ud,FLo),e(ud,Rae),e(Rae,CLo),e(ud,MLo),e(ud,Sae),e(Sae,ELo),e(ud,yLo),e(Qr,wLo),e(Qr,Pae),e(Pae,ALo),e(Qr,LLo),g(Jy,Qr,null),e(er,BLo),e(er,De),g(Yy,De,null),e(De,xLo),e(De,$ae),e($ae,kLo),e(De,RLo),e(De,Ha),e(Ha,SLo),e(Ha,Iae),e(Iae,PLo),e(Ha,$Lo),e(Ha,jae),e(jae,ILo),e(Ha,jLo),e(Ha,Nae),e(Nae,NLo),e(Ha,DLo),e(De,qLo),e(De,R),e(R,xv),e(xv,Dae),e(Dae,GLo),e(xv,OLo),e(xv,lj),e(lj,XLo),e(xv,zLo),e(R,VLo),e(R,kv),e(kv,qae),e(qae,WLo),e(kv,QLo),e(kv,ij),e(ij,HLo),e(kv,ULo),e(R,JLo),e(R,Rv),e(Rv,Gae),e(Gae,YLo),e(Rv,KLo),e(Rv,dj),e(dj,ZLo),e(Rv,e7o),e(R,o7o),e(R,Sv),e(Sv,Oae),e(Oae,r7o),e(Sv,t7o),e(Sv,cj),e(cj,a7o),e(Sv,s7o),e(R,n7o),e(R,Pv),e(Pv,Xae),e(Xae,l7o),e(Pv,i7o),e(Pv,mj),e(mj,d7o),e(Pv,c7o),e(R,m7o),e(R,$v),e($v,zae),e(zae,f7o),e($v,g7o),e($v,fj),e(fj,h7o),e($v,u7o),e(R,p7o),e(R,Iv),e(Iv,Vae),e(Vae,_7o),e(Iv,b7o),e(Iv,gj),e(gj,v7o),e(Iv,T7o),e(R,F7o),e(R,jv),e(jv,Wae),e(Wae,C7o),e(jv,M7o),e(jv,hj),e(hj,E7o),e(jv,y7o),e(R,w7o),e(R,Nv),e(Nv,Qae),e(Qae,A7o),e(Nv,L7o),e(Nv,uj),e(uj,B7o),e(Nv,x7o),e(R,k7o),e(R,Dv),e(Dv,Hae),e(Hae,R7o),e(Dv,S7o),e(Dv,pj),e(pj,P7o),e(Dv,$7o),e(R,I7o),e(R,qv),e(qv,Uae),e(Uae,j7o),e(qv,N7o),e(qv,_j),e(_j,D7o),e(qv,q7o),e(R,G7o),e(R,Gv),e(Gv,Jae),e(Jae,O7o),e(Gv,X7o),e(Gv,bj),e(bj,z7o),e(Gv,V7o),e(R,W7o),e(R,Ov),e(Ov,Yae),e(Yae,Q7o),e(Ov,H7o),e(Ov,vj),e(vj,U7o),e(Ov,J7o),e(R,Y7o),e(R,Xv),e(Xv,Kae),e(Kae,K7o),e(Xv,Z7o),e(Xv,Tj),e(Tj,e8o),e(Xv,o8o),e(R,r8o),e(R,zv),e(zv,Zae),e(Zae,t8o),e(zv,a8o),e(zv,Fj),e(Fj,s8o),e(zv,n8o),e(R,l8o),e(R,Vv),e(Vv,ese),e(ese,i8o),e(Vv,d8o),e(Vv,Cj),e(Cj,c8o),e(Vv,m8o),e(R,f8o),e(R,Wv),e(Wv,ose),e(ose,g8o),e(Wv,h8o),e(Wv,Mj),e(Mj,u8o),e(Wv,p8o),e(R,_8o),e(R,Qv),e(Qv,rse),e(rse,b8o),e(Qv,v8o),e(Qv,Ej),e(Ej,T8o),e(Qv,F8o),e(R,C8o),e(R,Hv),e(Hv,tse),e(tse,M8o),e(Hv,E8o),e(Hv,yj),e(yj,y8o),e(Hv,w8o),e(R,A8o),e(R,Uv),e(Uv,ase),e(ase,L8o),e(Uv,B8o),e(Uv,wj),e(wj,x8o),e(Uv,k8o),e(R,R8o),e(R,Jv),e(Jv,sse),e(sse,S8o),e(Jv,P8o),e(Jv,Aj),e(Aj,$8o),e(Jv,I8o),e(R,j8o),e(R,Yv),e(Yv,nse),e(nse,N8o),e(Yv,D8o),e(Yv,Lj),e(Lj,q8o),e(Yv,G8o),e(R,O8o),e(R,Kv),e(Kv,lse),e(lse,X8o),e(Kv,z8o),e(Kv,Bj),e(Bj,V8o),e(Kv,W8o),e(R,Q8o),e(R,Zv),e(Zv,ise),e(ise,H8o),e(Zv,U8o),e(Zv,xj),e(xj,J8o),e(Zv,Y8o),e(R,K8o),e(R,eT),e(eT,dse),e(dse,Z8o),e(eT,e9o),e(eT,kj),e(kj,o9o),e(eT,r9o),e(R,t9o),e(R,oT),e(oT,cse),e(cse,a9o),e(oT,s9o),e(oT,Rj),e(Rj,n9o),e(oT,l9o),e(R,i9o),e(R,rT),e(rT,mse),e(mse,d9o),e(rT,c9o),e(rT,Sj),e(Sj,m9o),e(rT,f9o),e(R,g9o),e(R,tT),e(tT,fse),e(fse,h9o),e(tT,u9o),e(tT,Pj),e(Pj,p9o),e(tT,_9o),e(R,b9o),e(R,aT),e(aT,gse),e(gse,v9o),e(aT,T9o),e(aT,$j),e($j,F9o),e(aT,C9o),e(R,M9o),e(R,sT),e(sT,hse),e(hse,E9o),e(sT,y9o),e(sT,Ij),e(Ij,w9o),e(sT,A9o),e(R,L9o),e(R,nT),e(nT,use),e(use,B9o),e(nT,x9o),e(nT,jj),e(jj,k9o),e(nT,R9o),e(R,S9o),e(R,lT),e(lT,pse),e(pse,P9o),e(lT,$9o),e(lT,Nj),e(Nj,I9o),e(lT,j9o),e(R,N9o),e(R,iT),e(iT,_se),e(_se,D9o),e(iT,q9o),e(iT,Dj),e(Dj,G9o),e(iT,O9o),e(R,X9o),e(R,dT),e(dT,bse),e(bse,z9o),e(dT,V9o),e(dT,qj),e(qj,W9o),e(dT,Q9o),e(R,H9o),e(R,cT),e(cT,vse),e(vse,U9o),e(cT,J9o),e(cT,Gj),e(Gj,Y9o),e(cT,K9o),e(R,Z9o),e(R,mT),e(mT,Tse),e(Tse,eBo),e(mT,oBo),e(mT,Oj),e(Oj,rBo),e(mT,tBo),e(R,aBo),e(R,fT),e(fT,Fse),e(Fse,sBo),e(fT,nBo),e(fT,Xj),e(Xj,lBo),e(fT,iBo),e(R,dBo),e(R,gT),e(gT,Cse),e(Cse,cBo),e(gT,mBo),e(gT,zj),e(zj,fBo),e(gT,gBo),e(De,hBo),e(De,hT),e(hT,uBo),e(hT,Mse),e(Mse,pBo),e(hT,_Bo),e(hT,Ese),e(Ese,bBo),e(De,vBo),e(De,yse),e(yse,TBo),e(De,FBo),g(Ky,De,null),b(d,z8e,_),b(d,pd,_),e(pd,uT),e(uT,wse),g(Zy,wse,null),e(pd,CBo),e(pd,Ase),e(Ase,MBo),b(d,V8e,_),b(d,or,_),g(ew,or,null),e(or,EBo),e(or,_d),e(_d,yBo),e(_d,Lse),e(Lse,wBo),e(_d,ABo),e(_d,Bse),e(Bse,LBo),e(_d,BBo),e(or,xBo),e(or,ow),e(ow,kBo),e(ow,xse),e(xse,RBo),e(ow,SBo),e(or,PBo),e(or,Hr),g(rw,Hr,null),e(Hr,$Bo),e(Hr,kse),e(kse,IBo),e(Hr,jBo),e(Hr,bd),e(bd,NBo),e(bd,Rse),e(Rse,DBo),e(bd,qBo),e(bd,Sse),e(Sse,GBo),e(bd,OBo),e(Hr,XBo),e(Hr,Pse),e(Pse,zBo),e(Hr,VBo),g(tw,Hr,null),e(or,WBo),e(or,qe),g(aw,qe,null),e(qe,QBo),e(qe,$se),e($se,HBo),e(qe,UBo),e(qe,Ua),e(Ua,JBo),e(Ua,Ise),e(Ise,YBo),e(Ua,KBo),e(Ua,jse),e(jse,ZBo),e(Ua,exo),e(Ua,Nse),e(Nse,oxo),e(Ua,rxo),e(qe,txo),e(qe,Dse),e(Dse,pT),e(pT,qse),e(qse,axo),e(pT,sxo),e(pT,Vj),e(Vj,nxo),e(pT,lxo),e(qe,ixo),e(qe,_T),e(_T,dxo),e(_T,Gse),e(Gse,cxo),e(_T,mxo),e(_T,Ose),e(Ose,fxo),e(qe,gxo),e(qe,Xse),e(Xse,hxo),e(qe,uxo),g(sw,qe,null),b(d,W8e,_),b(d,vd,_),e(vd,bT),e(bT,zse),g(nw,zse,null),e(vd,pxo),e(vd,Vse),e(Vse,_xo),b(d,Q8e,_),b(d,rr,_),g(lw,rr,null),e(rr,bxo),e(rr,Td),e(Td,vxo),e(Td,Wse),e(Wse,Txo),e(Td,Fxo),e(Td,Qse),e(Qse,Cxo),e(Td,Mxo),e(rr,Exo),e(rr,iw),e(iw,yxo),e(iw,Hse),e(Hse,wxo),e(iw,Axo),e(rr,Lxo),e(rr,Ur),g(dw,Ur,null),e(Ur,Bxo),e(Ur,Use),e(Use,xxo),e(Ur,kxo),e(Ur,Fd),e(Fd,Rxo),e(Fd,Jse),e(Jse,Sxo),e(Fd,Pxo),e(Fd,Yse),e(Yse,$xo),e(Fd,Ixo),e(Ur,jxo),e(Ur,Kse),e(Kse,Nxo),e(Ur,Dxo),g(cw,Ur,null),e(rr,qxo),e(rr,Ge),g(mw,Ge,null),e(Ge,Gxo),e(Ge,Zse),e(Zse,Oxo),e(Ge,Xxo),e(Ge,Ja),e(Ja,zxo),e(Ja,ene),e(ene,Vxo),e(Ja,Wxo),e(Ja,one),e(one,Qxo),e(Ja,Hxo),e(Ja,rne),e(rne,Uxo),e(Ja,Jxo),e(Ge,Yxo),e(Ge,be),e(be,vT),e(vT,tne),e(tne,Kxo),e(vT,Zxo),e(vT,Wj),e(Wj,eko),e(vT,oko),e(be,rko),e(be,TT),e(TT,ane),e(ane,tko),e(TT,ako),e(TT,Qj),e(Qj,sko),e(TT,nko),e(be,lko),e(be,Rn),e(Rn,sne),e(sne,iko),e(Rn,dko),e(Rn,Hj),e(Hj,cko),e(Rn,mko),e(Rn,Uj),e(Uj,fko),e(Rn,gko),e(be,hko),e(be,FT),e(FT,nne),e(nne,uko),e(FT,pko),e(FT,Jj),e(Jj,_ko),e(FT,bko),e(be,vko),e(be,la),e(la,lne),e(lne,Tko),e(la,Fko),e(la,Yj),e(Yj,Cko),e(la,Mko),e(la,Kj),e(Kj,Eko),e(la,yko),e(la,Zj),e(Zj,wko),e(la,Ako),e(be,Lko),e(be,CT),e(CT,ine),e(ine,Bko),e(CT,xko),e(CT,eN),e(eN,kko),e(CT,Rko),e(be,Sko),e(be,MT),e(MT,dne),e(dne,Pko),e(MT,$ko),e(MT,oN),e(oN,Iko),e(MT,jko),e(be,Nko),e(be,ET),e(ET,cne),e(cne,Dko),e(ET,qko),e(ET,rN),e(rN,Gko),e(ET,Oko),e(be,Xko),e(be,yT),e(yT,mne),e(mne,zko),e(yT,Vko),e(yT,tN),e(tN,Wko),e(yT,Qko),e(Ge,Hko),e(Ge,wT),e(wT,Uko),e(wT,fne),e(fne,Jko),e(wT,Yko),e(wT,gne),e(gne,Kko),e(Ge,Zko),e(Ge,hne),e(hne,eRo),e(Ge,oRo),g(fw,Ge,null),b(d,H8e,_),b(d,Cd,_),e(Cd,AT),e(AT,une),g(gw,une,null),e(Cd,rRo),e(Cd,pne),e(pne,tRo),b(d,U8e,_),b(d,tr,_),g(hw,tr,null),e(tr,aRo),e(tr,Md),e(Md,sRo),e(Md,_ne),e(_ne,nRo),e(Md,lRo),e(Md,bne),e(bne,iRo),e(Md,dRo),e(tr,cRo),e(tr,uw),e(uw,mRo),e(uw,vne),e(vne,fRo),e(uw,gRo),e(tr,hRo),e(tr,Jr),g(pw,Jr,null),e(Jr,uRo),e(Jr,Tne),e(Tne,pRo),e(Jr,_Ro),e(Jr,Ed),e(Ed,bRo),e(Ed,Fne),e(Fne,vRo),e(Ed,TRo),e(Ed,Cne),e(Cne,FRo),e(Ed,CRo),e(Jr,MRo),e(Jr,Mne),e(Mne,ERo),e(Jr,yRo),g(_w,Jr,null),e(tr,wRo),e(tr,Oe),g(bw,Oe,null),e(Oe,ARo),e(Oe,Ene),e(Ene,LRo),e(Oe,BRo),e(Oe,Ya),e(Ya,xRo),e(Ya,yne),e(yne,kRo),e(Ya,RRo),e(Ya,wne),e(wne,SRo),e(Ya,PRo),e(Ya,Ane),e(Ane,$Ro),e(Ya,IRo),e(Oe,jRo),e(Oe,Lne),e(Lne,LT),e(LT,Bne),e(Bne,NRo),e(LT,DRo),e(LT,aN),e(aN,qRo),e(LT,GRo),e(Oe,ORo),e(Oe,BT),e(BT,XRo),e(BT,xne),e(xne,zRo),e(BT,VRo),e(BT,kne),e(kne,WRo),e(Oe,QRo),e(Oe,Rne),e(Rne,HRo),e(Oe,URo),g(vw,Oe,null),b(d,J8e,_),b(d,yd,_),e(yd,xT),e(xT,Sne),g(Tw,Sne,null),e(yd,JRo),e(yd,Pne),e(Pne,YRo),b(d,Y8e,_),b(d,ar,_),g(Fw,ar,null),e(ar,KRo),e(ar,wd),e(wd,ZRo),e(wd,$ne),e($ne,eSo),e(wd,oSo),e(wd,Ine),e(Ine,rSo),e(wd,tSo),e(ar,aSo),e(ar,Cw),e(Cw,sSo),e(Cw,jne),e(jne,nSo),e(Cw,lSo),e(ar,iSo),e(ar,Yr),g(Mw,Yr,null),e(Yr,dSo),e(Yr,Nne),e(Nne,cSo),e(Yr,mSo),e(Yr,Ad),e(Ad,fSo),e(Ad,Dne),e(Dne,gSo),e(Ad,hSo),e(Ad,qne),e(qne,uSo),e(Ad,pSo),e(Yr,_So),e(Yr,Gne),e(Gne,bSo),e(Yr,vSo),g(Ew,Yr,null),e(ar,TSo),e(ar,Xe),g(yw,Xe,null),e(Xe,FSo),e(Xe,One),e(One,CSo),e(Xe,MSo),e(Xe,Ka),e(Ka,ESo),e(Ka,Xne),e(Xne,ySo),e(Ka,wSo),e(Ka,zne),e(zne,ASo),e(Ka,LSo),e(Ka,Vne),e(Vne,BSo),e(Ka,xSo),e(Xe,kSo),e(Xe,ao),e(ao,kT),e(kT,Wne),e(Wne,RSo),e(kT,SSo),e(kT,sN),e(sN,PSo),e(kT,$So),e(ao,ISo),e(ao,RT),e(RT,Qne),e(Qne,jSo),e(RT,NSo),e(RT,nN),e(nN,DSo),e(RT,qSo),e(ao,GSo),e(ao,ST),e(ST,Hne),e(Hne,OSo),e(ST,XSo),e(ST,lN),e(lN,zSo),e(ST,VSo),e(ao,WSo),e(ao,PT),e(PT,Une),e(Une,QSo),e(PT,HSo),e(PT,iN),e(iN,USo),e(PT,JSo),e(ao,YSo),e(ao,$T),e($T,Jne),e(Jne,KSo),e($T,ZSo),e($T,dN),e(dN,ePo),e($T,oPo),e(ao,rPo),e(ao,IT),e(IT,Yne),e(Yne,tPo),e(IT,aPo),e(IT,cN),e(cN,sPo),e(IT,nPo),e(ao,lPo),e(ao,jT),e(jT,Kne),e(Kne,iPo),e(jT,dPo),e(jT,mN),e(mN,cPo),e(jT,mPo),e(Xe,fPo),e(Xe,NT),e(NT,gPo),e(NT,Zne),e(Zne,hPo),e(NT,uPo),e(NT,ele),e(ele,pPo),e(Xe,_Po),e(Xe,ole),e(ole,bPo),e(Xe,vPo),g(ww,Xe,null),b(d,K8e,_),b(d,Ld,_),e(Ld,DT),e(DT,rle),g(Aw,rle,null),e(Ld,TPo),e(Ld,tle),e(tle,FPo),b(d,Z8e,_),b(d,sr,_),g(Lw,sr,null),e(sr,CPo),e(sr,Bd),e(Bd,MPo),e(Bd,ale),e(ale,EPo),e(Bd,yPo),e(Bd,sle),e(sle,wPo),e(Bd,APo),e(sr,LPo),e(sr,Bw),e(Bw,BPo),e(Bw,nle),e(nle,xPo),e(Bw,kPo),e(sr,RPo),e(sr,Kr),g(xw,Kr,null),e(Kr,SPo),e(Kr,lle),e(lle,PPo),e(Kr,$Po),e(Kr,xd),e(xd,IPo),e(xd,ile),e(ile,jPo),e(xd,NPo),e(xd,dle),e(dle,DPo),e(xd,qPo),e(Kr,GPo),e(Kr,cle),e(cle,OPo),e(Kr,XPo),g(kw,Kr,null),e(sr,zPo),e(sr,ze),g(Rw,ze,null),e(ze,VPo),e(ze,mle),e(mle,WPo),e(ze,QPo),e(ze,Za),e(Za,HPo),e(Za,fle),e(fle,UPo),e(Za,JPo),e(Za,gle),e(gle,YPo),e(Za,KPo),e(Za,hle),e(hle,ZPo),e(Za,e$o),e(ze,o$o),e(ze,kd),e(kd,qT),e(qT,ule),e(ule,r$o),e(qT,t$o),e(qT,fN),e(fN,a$o),e(qT,s$o),e(kd,n$o),e(kd,GT),e(GT,ple),e(ple,l$o),e(GT,i$o),e(GT,gN),e(gN,d$o),e(GT,c$o),e(kd,m$o),e(kd,OT),e(OT,_le),e(_le,f$o),e(OT,g$o),e(OT,hN),e(hN,h$o),e(OT,u$o),e(ze,p$o),e(ze,XT),e(XT,_$o),e(XT,ble),e(ble,b$o),e(XT,v$o),e(XT,vle),e(vle,T$o),e(ze,F$o),e(ze,Tle),e(Tle,C$o),e(ze,M$o),g(Sw,ze,null),b(d,e9e,_),b(d,Rd,_),e(Rd,zT),e(zT,Fle),g(Pw,Fle,null),e(Rd,E$o),e(Rd,Cle),e(Cle,y$o),b(d,o9e,_),b(d,nr,_),g($w,nr,null),e(nr,w$o),e(nr,Sd),e(Sd,A$o),e(Sd,Mle),e(Mle,L$o),e(Sd,B$o),e(Sd,Ele),e(Ele,x$o),e(Sd,k$o),e(nr,R$o),e(nr,Iw),e(Iw,S$o),e(Iw,yle),e(yle,P$o),e(Iw,$$o),e(nr,I$o),e(nr,Zr),g(jw,Zr,null),e(Zr,j$o),e(Zr,wle),e(wle,N$o),e(Zr,D$o),e(Zr,Pd),e(Pd,q$o),e(Pd,Ale),e(Ale,G$o),e(Pd,O$o),e(Pd,Lle),e(Lle,X$o),e(Pd,z$o),e(Zr,V$o),e(Zr,Ble),e(Ble,W$o),e(Zr,Q$o),g(Nw,Zr,null),e(nr,H$o),e(nr,Ve),g(Dw,Ve,null),e(Ve,U$o),e(Ve,xle),e(xle,J$o),e(Ve,Y$o),e(Ve,es),e(es,K$o),e(es,kle),e(kle,Z$o),e(es,eIo),e(es,Rle),e(Rle,oIo),e(es,rIo),e(es,Sle),e(Sle,tIo),e(es,aIo),e(Ve,sIo),e(Ve,so),e(so,VT),e(VT,Ple),e(Ple,nIo),e(VT,lIo),e(VT,uN),e(uN,iIo),e(VT,dIo),e(so,cIo),e(so,WT),e(WT,$le),e($le,mIo),e(WT,fIo),e(WT,pN),e(pN,gIo),e(WT,hIo),e(so,uIo),e(so,QT),e(QT,Ile),e(Ile,pIo),e(QT,_Io),e(QT,_N),e(_N,bIo),e(QT,vIo),e(so,TIo),e(so,HT),e(HT,jle),e(jle,FIo),e(HT,CIo),e(HT,bN),e(bN,MIo),e(HT,EIo),e(so,yIo),e(so,UT),e(UT,Nle),e(Nle,wIo),e(UT,AIo),e(UT,vN),e(vN,LIo),e(UT,BIo),e(so,xIo),e(so,JT),e(JT,Dle),e(Dle,kIo),e(JT,RIo),e(JT,TN),e(TN,SIo),e(JT,PIo),e(so,$Io),e(so,YT),e(YT,qle),e(qle,IIo),e(YT,jIo),e(YT,FN),e(FN,NIo),e(YT,DIo),e(Ve,qIo),e(Ve,KT),e(KT,GIo),e(KT,Gle),e(Gle,OIo),e(KT,XIo),e(KT,Ole),e(Ole,zIo),e(Ve,VIo),e(Ve,Xle),e(Xle,WIo),e(Ve,QIo),g(qw,Ve,null),b(d,r9e,_),b(d,$d,_),e($d,ZT),e(ZT,zle),g(Gw,zle,null),e($d,HIo),e($d,Vle),e(Vle,UIo),b(d,t9e,_),b(d,lr,_),g(Ow,lr,null),e(lr,JIo),e(lr,Id),e(Id,YIo),e(Id,Wle),e(Wle,KIo),e(Id,ZIo),e(Id,Qle),e(Qle,ejo),e(Id,ojo),e(lr,rjo),e(lr,Xw),e(Xw,tjo),e(Xw,Hle),e(Hle,ajo),e(Xw,sjo),e(lr,njo),e(lr,et),g(zw,et,null),e(et,ljo),e(et,Ule),e(Ule,ijo),e(et,djo),e(et,jd),e(jd,cjo),e(jd,Jle),e(Jle,mjo),e(jd,fjo),e(jd,Yle),e(Yle,gjo),e(jd,hjo),e(et,ujo),e(et,Kle),e(Kle,pjo),e(et,_jo),g(Vw,et,null),e(lr,bjo),e(lr,We),g(Ww,We,null),e(We,vjo),e(We,Zle),e(Zle,Tjo),e(We,Fjo),e(We,os),e(os,Cjo),e(os,eie),e(eie,Mjo),e(os,Ejo),e(os,oie),e(oie,yjo),e(os,wjo),e(os,rie),e(rie,Ajo),e(os,Ljo),e(We,Bjo),e(We,Qw),e(Qw,e1),e(e1,tie),e(tie,xjo),e(e1,kjo),e(e1,CN),e(CN,Rjo),e(e1,Sjo),e(Qw,Pjo),e(Qw,o1),e(o1,aie),e(aie,$jo),e(o1,Ijo),e(o1,MN),e(MN,jjo),e(o1,Njo),e(We,Djo),e(We,r1),e(r1,qjo),e(r1,sie),e(sie,Gjo),e(r1,Ojo),e(r1,nie),e(nie,Xjo),e(We,zjo),e(We,lie),e(lie,Vjo),e(We,Wjo),g(Hw,We,null),b(d,a9e,_),b(d,Nd,_),e(Nd,t1),e(t1,iie),g(Uw,iie,null),e(Nd,Qjo),e(Nd,die),e(die,Hjo),b(d,s9e,_),b(d,ir,_),g(Jw,ir,null),e(ir,Ujo),e(ir,Dd),e(Dd,Jjo),e(Dd,cie),e(cie,Yjo),e(Dd,Kjo),e(Dd,mie),e(mie,Zjo),e(Dd,eNo),e(ir,oNo),e(ir,Yw),e(Yw,rNo),e(Yw,fie),e(fie,tNo),e(Yw,aNo),e(ir,sNo),e(ir,ot),g(Kw,ot,null),e(ot,nNo),e(ot,gie),e(gie,lNo),e(ot,iNo),e(ot,qd),e(qd,dNo),e(qd,hie),e(hie,cNo),e(qd,mNo),e(qd,uie),e(uie,fNo),e(qd,gNo),e(ot,hNo),e(ot,pie),e(pie,uNo),e(ot,pNo),g(Zw,ot,null),e(ir,_No),e(ir,Qe),g(eA,Qe,null),e(Qe,bNo),e(Qe,_ie),e(_ie,vNo),e(Qe,TNo),e(Qe,rs),e(rs,FNo),e(rs,bie),e(bie,CNo),e(rs,MNo),e(rs,vie),e(vie,ENo),e(rs,yNo),e(rs,Tie),e(Tie,wNo),e(rs,ANo),e(Qe,LNo),e(Qe,Gd),e(Gd,a1),e(a1,Fie),e(Fie,BNo),e(a1,xNo),e(a1,EN),e(EN,kNo),e(a1,RNo),e(Gd,SNo),e(Gd,s1),e(s1,Cie),e(Cie,PNo),e(s1,$No),e(s1,yN),e(yN,INo),e(s1,jNo),e(Gd,NNo),e(Gd,n1),e(n1,Mie),e(Mie,DNo),e(n1,qNo),e(n1,wN),e(wN,GNo),e(n1,ONo),e(Qe,XNo),e(Qe,l1),e(l1,zNo),e(l1,Eie),e(Eie,VNo),e(l1,WNo),e(l1,yie),e(yie,QNo),e(Qe,HNo),e(Qe,wie),e(wie,UNo),e(Qe,JNo),g(oA,Qe,null),b(d,n9e,_),b(d,Od,_),e(Od,i1),e(i1,Aie),g(rA,Aie,null),e(Od,YNo),e(Od,Lie),e(Lie,KNo),b(d,l9e,_),b(d,dr,_),g(tA,dr,null),e(dr,ZNo),e(dr,Xd),e(Xd,eDo),e(Xd,Bie),e(Bie,oDo),e(Xd,rDo),e(Xd,xie),e(xie,tDo),e(Xd,aDo),e(dr,sDo),e(dr,aA),e(aA,nDo),e(aA,kie),e(kie,lDo),e(aA,iDo),e(dr,dDo),e(dr,rt),g(sA,rt,null),e(rt,cDo),e(rt,Rie),e(Rie,mDo),e(rt,fDo),e(rt,zd),e(zd,gDo),e(zd,Sie),e(Sie,hDo),e(zd,uDo),e(zd,Pie),e(Pie,pDo),e(zd,_Do),e(rt,bDo),e(rt,$ie),e($ie,vDo),e(rt,TDo),g(nA,rt,null),e(dr,FDo),e(dr,He),g(lA,He,null),e(He,CDo),e(He,Iie),e(Iie,MDo),e(He,EDo),e(He,ts),e(ts,yDo),e(ts,jie),e(jie,wDo),e(ts,ADo),e(ts,Nie),e(Nie,LDo),e(ts,BDo),e(ts,Die),e(Die,xDo),e(ts,kDo),e(He,RDo),e(He,Vd),e(Vd,d1),e(d1,qie),e(qie,SDo),e(d1,PDo),e(d1,AN),e(AN,$Do),e(d1,IDo),e(Vd,jDo),e(Vd,c1),e(c1,Gie),e(Gie,NDo),e(c1,DDo),e(c1,LN),e(LN,qDo),e(c1,GDo),e(Vd,ODo),e(Vd,m1),e(m1,Oie),e(Oie,XDo),e(m1,zDo),e(m1,BN),e(BN,VDo),e(m1,WDo),e(He,QDo),e(He,f1),e(f1,HDo),e(f1,Xie),e(Xie,UDo),e(f1,JDo),e(f1,zie),e(zie,YDo),e(He,KDo),e(He,Vie),e(Vie,ZDo),e(He,eqo),g(iA,He,null),b(d,i9e,_),b(d,Wd,_),e(Wd,g1),e(g1,Wie),g(dA,Wie,null),e(Wd,oqo),e(Wd,Qie),e(Qie,rqo),b(d,d9e,_),b(d,cr,_),g(cA,cr,null),e(cr,tqo),e(cr,Qd),e(Qd,aqo),e(Qd,Hie),e(Hie,sqo),e(Qd,nqo),e(Qd,Uie),e(Uie,lqo),e(Qd,iqo),e(cr,dqo),e(cr,mA),e(mA,cqo),e(mA,Jie),e(Jie,mqo),e(mA,fqo),e(cr,gqo),e(cr,tt),g(fA,tt,null),e(tt,hqo),e(tt,Yie),e(Yie,uqo),e(tt,pqo),e(tt,Hd),e(Hd,_qo),e(Hd,Kie),e(Kie,bqo),e(Hd,vqo),e(Hd,Zie),e(Zie,Tqo),e(Hd,Fqo),e(tt,Cqo),e(tt,ede),e(ede,Mqo),e(tt,Eqo),g(gA,tt,null),e(cr,yqo),e(cr,Ue),g(hA,Ue,null),e(Ue,wqo),e(Ue,ode),e(ode,Aqo),e(Ue,Lqo),e(Ue,as),e(as,Bqo),e(as,rde),e(rde,xqo),e(as,kqo),e(as,tde),e(tde,Rqo),e(as,Sqo),e(as,ade),e(ade,Pqo),e(as,$qo),e(Ue,Iqo),e(Ue,sde),e(sde,h1),e(h1,nde),e(nde,jqo),e(h1,Nqo),e(h1,xN),e(xN,Dqo),e(h1,qqo),e(Ue,Gqo),e(Ue,u1),e(u1,Oqo),e(u1,lde),e(lde,Xqo),e(u1,zqo),e(u1,ide),e(ide,Vqo),e(Ue,Wqo),e(Ue,dde),e(dde,Qqo),e(Ue,Hqo),g(uA,Ue,null),b(d,c9e,_),b(d,Ud,_),e(Ud,p1),e(p1,cde),g(pA,cde,null),e(Ud,Uqo),e(Ud,mde),e(mde,Jqo),b(d,m9e,_),b(d,mr,_),g(_A,mr,null),e(mr,Yqo),e(mr,Jd),e(Jd,Kqo),e(Jd,fde),e(fde,Zqo),e(Jd,eGo),e(Jd,gde),e(gde,oGo),e(Jd,rGo),e(mr,tGo),e(mr,bA),e(bA,aGo),e(bA,hde),e(hde,sGo),e(bA,nGo),e(mr,lGo),e(mr,at),g(vA,at,null),e(at,iGo),e(at,ude),e(ude,dGo),e(at,cGo),e(at,Yd),e(Yd,mGo),e(Yd,pde),e(pde,fGo),e(Yd,gGo),e(Yd,_de),e(_de,hGo),e(Yd,uGo),e(at,pGo),e(at,bde),e(bde,_Go),e(at,bGo),g(TA,at,null),e(mr,vGo),e(mr,Je),g(FA,Je,null),e(Je,TGo),e(Je,vde),e(vde,FGo),e(Je,CGo),e(Je,ss),e(ss,MGo),e(ss,Tde),e(Tde,EGo),e(ss,yGo),e(ss,Fde),e(Fde,wGo),e(ss,AGo),e(ss,Cde),e(Cde,LGo),e(ss,BGo),e(Je,xGo),e(Je,Mde),e(Mde,_1),e(_1,Ede),e(Ede,kGo),e(_1,RGo),e(_1,kN),e(kN,SGo),e(_1,PGo),e(Je,$Go),e(Je,b1),e(b1,IGo),e(b1,yde),e(yde,jGo),e(b1,NGo),e(b1,wde),e(wde,DGo),e(Je,qGo),e(Je,Ade),e(Ade,GGo),e(Je,OGo),g(CA,Je,null),b(d,f9e,_),b(d,Kd,_),e(Kd,v1),e(v1,Lde),g(MA,Lde,null),e(Kd,XGo),e(Kd,Bde),e(Bde,zGo),b(d,g9e,_),b(d,fr,_),g(EA,fr,null),e(fr,VGo),e(fr,Zd),e(Zd,WGo),e(Zd,xde),e(xde,QGo),e(Zd,HGo),e(Zd,kde),e(kde,UGo),e(Zd,JGo),e(fr,YGo),e(fr,yA),e(yA,KGo),e(yA,Rde),e(Rde,ZGo),e(yA,eOo),e(fr,oOo),e(fr,st),g(wA,st,null),e(st,rOo),e(st,Sde),e(Sde,tOo),e(st,aOo),e(st,ec),e(ec,sOo),e(ec,Pde),e(Pde,nOo),e(ec,lOo),e(ec,$de),e($de,iOo),e(ec,dOo),e(st,cOo),e(st,Ide),e(Ide,mOo),e(st,fOo),g(AA,st,null),e(fr,gOo),e(fr,Ye),g(LA,Ye,null),e(Ye,hOo),e(Ye,jde),e(jde,uOo),e(Ye,pOo),e(Ye,ns),e(ns,_Oo),e(ns,Nde),e(Nde,bOo),e(ns,vOo),e(ns,Dde),e(Dde,TOo),e(ns,FOo),e(ns,qde),e(qde,COo),e(ns,MOo),e(Ye,EOo),e(Ye,BA),e(BA,T1),e(T1,Gde),e(Gde,yOo),e(T1,wOo),e(T1,RN),e(RN,AOo),e(T1,LOo),e(BA,BOo),e(BA,F1),e(F1,Ode),e(Ode,xOo),e(F1,kOo),e(F1,SN),e(SN,ROo),e(F1,SOo),e(Ye,POo),e(Ye,C1),e(C1,$Oo),e(C1,Xde),e(Xde,IOo),e(C1,jOo),e(C1,zde),e(zde,NOo),e(Ye,DOo),e(Ye,Vde),e(Vde,qOo),e(Ye,GOo),g(xA,Ye,null),b(d,h9e,_),b(d,oc,_),e(oc,M1),e(M1,Wde),g(kA,Wde,null),e(oc,OOo),e(oc,Qde),e(Qde,XOo),b(d,u9e,_),b(d,gr,_),g(RA,gr,null),e(gr,zOo),e(gr,rc),e(rc,VOo),e(rc,Hde),e(Hde,WOo),e(rc,QOo),e(rc,Ude),e(Ude,HOo),e(rc,UOo),e(gr,JOo),e(gr,SA),e(SA,YOo),e(SA,Jde),e(Jde,KOo),e(SA,ZOo),e(gr,eXo),e(gr,nt),g(PA,nt,null),e(nt,oXo),e(nt,Yde),e(Yde,rXo),e(nt,tXo),e(nt,tc),e(tc,aXo),e(tc,Kde),e(Kde,sXo),e(tc,nXo),e(tc,Zde),e(Zde,lXo),e(tc,iXo),e(nt,dXo),e(nt,ece),e(ece,cXo),e(nt,mXo),g($A,nt,null),e(gr,fXo),e(gr,go),g(IA,go,null),e(go,gXo),e(go,oce),e(oce,hXo),e(go,uXo),e(go,ls),e(ls,pXo),e(ls,rce),e(rce,_Xo),e(ls,bXo),e(ls,tce),e(tce,vXo),e(ls,TXo),e(ls,ace),e(ace,FXo),e(ls,CXo),e(go,MXo),e(go,B),e(B,E1),e(E1,sce),e(sce,EXo),e(E1,yXo),e(E1,PN),e(PN,wXo),e(E1,AXo),e(B,LXo),e(B,y1),e(y1,nce),e(nce,BXo),e(y1,xXo),e(y1,$N),e($N,kXo),e(y1,RXo),e(B,SXo),e(B,w1),e(w1,lce),e(lce,PXo),e(w1,$Xo),e(w1,IN),e(IN,IXo),e(w1,jXo),e(B,NXo),e(B,A1),e(A1,ice),e(ice,DXo),e(A1,qXo),e(A1,jN),e(jN,GXo),e(A1,OXo),e(B,XXo),e(B,L1),e(L1,dce),e(dce,zXo),e(L1,VXo),e(L1,NN),e(NN,WXo),e(L1,QXo),e(B,HXo),e(B,B1),e(B1,cce),e(cce,UXo),e(B1,JXo),e(B1,DN),e(DN,YXo),e(B1,KXo),e(B,ZXo),e(B,x1),e(x1,mce),e(mce,ezo),e(x1,ozo),e(x1,qN),e(qN,rzo),e(x1,tzo),e(B,azo),e(B,k1),e(k1,fce),e(fce,szo),e(k1,nzo),e(k1,GN),e(GN,lzo),e(k1,izo),e(B,dzo),e(B,R1),e(R1,gce),e(gce,czo),e(R1,mzo),e(R1,ON),e(ON,fzo),e(R1,gzo),e(B,hzo),e(B,S1),e(S1,hce),e(hce,uzo),e(S1,pzo),e(S1,XN),e(XN,_zo),e(S1,bzo),e(B,vzo),e(B,P1),e(P1,uce),e(uce,Tzo),e(P1,Fzo),e(P1,zN),e(zN,Czo),e(P1,Mzo),e(B,Ezo),e(B,$1),e($1,pce),e(pce,yzo),e($1,wzo),e($1,VN),e(VN,Azo),e($1,Lzo),e(B,Bzo),e(B,I1),e(I1,_ce),e(_ce,xzo),e(I1,kzo),e(I1,WN),e(WN,Rzo),e(I1,Szo),e(B,Pzo),e(B,j1),e(j1,bce),e(bce,$zo),e(j1,Izo),e(j1,QN),e(QN,jzo),e(j1,Nzo),e(B,Dzo),e(B,N1),e(N1,vce),e(vce,qzo),e(N1,Gzo),e(N1,HN),e(HN,Ozo),e(N1,Xzo),e(B,zzo),e(B,D1),e(D1,Tce),e(Tce,Vzo),e(D1,Wzo),e(D1,UN),e(UN,Qzo),e(D1,Hzo),e(B,Uzo),e(B,Sn),e(Sn,Fce),e(Fce,Jzo),e(Sn,Yzo),e(Sn,JN),e(JN,Kzo),e(Sn,Zzo),e(Sn,YN),e(YN,eVo),e(Sn,oVo),e(B,rVo),e(B,q1),e(q1,Cce),e(Cce,tVo),e(q1,aVo),e(q1,KN),e(KN,sVo),e(q1,nVo),e(B,lVo),e(B,G1),e(G1,Mce),e(Mce,iVo),e(G1,dVo),e(G1,ZN),e(ZN,cVo),e(G1,mVo),e(B,fVo),e(B,O1),e(O1,Ece),e(Ece,gVo),e(O1,hVo),e(O1,eD),e(eD,uVo),e(O1,pVo),e(B,_Vo),e(B,X1),e(X1,yce),e(yce,bVo),e(X1,vVo),e(X1,oD),e(oD,TVo),e(X1,FVo),e(B,CVo),e(B,z1),e(z1,wce),e(wce,MVo),e(z1,EVo),e(z1,rD),e(rD,yVo),e(z1,wVo),e(B,AVo),e(B,V1),e(V1,Ace),e(Ace,LVo),e(V1,BVo),e(V1,tD),e(tD,xVo),e(V1,kVo),e(B,RVo),e(B,W1),e(W1,Lce),e(Lce,SVo),e(W1,PVo),e(W1,aD),e(aD,$Vo),e(W1,IVo),e(B,jVo),e(B,Q1),e(Q1,Bce),e(Bce,NVo),e(Q1,DVo),e(Q1,sD),e(sD,qVo),e(Q1,GVo),e(B,OVo),e(B,H1),e(H1,xce),e(xce,XVo),e(H1,zVo),e(H1,nD),e(nD,VVo),e(H1,WVo),e(B,QVo),e(B,U1),e(U1,kce),e(kce,HVo),e(U1,UVo),e(U1,lD),e(lD,JVo),e(U1,YVo),e(B,KVo),e(B,J1),e(J1,Rce),e(Rce,ZVo),e(J1,eWo),e(J1,iD),e(iD,oWo),e(J1,rWo),e(B,tWo),e(B,Y1),e(Y1,Sce),e(Sce,aWo),e(Y1,sWo),e(Y1,dD),e(dD,nWo),e(Y1,lWo),e(B,iWo),e(B,K1),e(K1,Pce),e(Pce,dWo),e(K1,cWo),e(K1,cD),e(cD,mWo),e(K1,fWo),e(B,gWo),e(B,Z1),e(Z1,$ce),e($ce,hWo),e(Z1,uWo),e(Z1,mD),e(mD,pWo),e(Z1,_Wo),e(B,bWo),e(B,eF),e(eF,Ice),e(Ice,vWo),e(eF,TWo),e(eF,fD),e(fD,FWo),e(eF,CWo),e(B,MWo),e(B,oF),e(oF,jce),e(jce,EWo),e(oF,yWo),e(oF,gD),e(gD,wWo),e(oF,AWo),e(B,LWo),e(B,rF),e(rF,Nce),e(Nce,BWo),e(rF,xWo),e(rF,hD),e(hD,kWo),e(rF,RWo),e(B,SWo),e(B,tF),e(tF,Dce),e(Dce,PWo),e(tF,$Wo),e(tF,uD),e(uD,IWo),e(tF,jWo),e(B,NWo),e(B,aF),e(aF,qce),e(qce,DWo),e(aF,qWo),e(aF,pD),e(pD,GWo),e(aF,OWo),e(B,XWo),e(B,sF),e(sF,Gce),e(Gce,zWo),e(sF,VWo),e(sF,_D),e(_D,WWo),e(sF,QWo),e(B,HWo),e(B,nF),e(nF,Oce),e(Oce,UWo),e(nF,JWo),e(nF,bD),e(bD,YWo),e(nF,KWo),e(B,ZWo),e(B,lF),e(lF,Xce),e(Xce,eQo),e(lF,oQo),e(lF,vD),e(vD,rQo),e(lF,tQo),e(B,aQo),e(B,iF),e(iF,zce),e(zce,sQo),e(iF,nQo),e(iF,TD),e(TD,lQo),e(iF,iQo),e(B,dQo),e(B,dF),e(dF,Vce),e(Vce,cQo),e(dF,mQo),e(dF,FD),e(FD,fQo),e(dF,gQo),e(B,hQo),e(B,cF),e(cF,Wce),e(Wce,uQo),e(cF,pQo),e(cF,CD),e(CD,_Qo),e(cF,bQo),e(go,vQo),e(go,Qce),e(Qce,TQo),e(go,FQo),g(jA,go,null),b(d,p9e,_),b(d,ac,_),e(ac,mF),e(mF,Hce),g(NA,Hce,null),e(ac,CQo),e(ac,Uce),e(Uce,MQo),b(d,_9e,_),b(d,hr,_),g(DA,hr,null),e(hr,EQo),e(hr,sc),e(sc,yQo),e(sc,Jce),e(Jce,wQo),e(sc,AQo),e(sc,Yce),e(Yce,LQo),e(sc,BQo),e(hr,xQo),e(hr,qA),e(qA,kQo),e(qA,Kce),e(Kce,RQo),e(qA,SQo),e(hr,PQo),e(hr,lt),g(GA,lt,null),e(lt,$Qo),e(lt,Zce),e(Zce,IQo),e(lt,jQo),e(lt,nc),e(nc,NQo),e(nc,eme),e(eme,DQo),e(nc,qQo),e(nc,ome),e(ome,GQo),e(nc,OQo),e(lt,XQo),e(lt,rme),e(rme,zQo),e(lt,VQo),g(OA,lt,null),e(hr,WQo),e(hr,ho),g(XA,ho,null),e(ho,QQo),e(ho,tme),e(tme,HQo),e(ho,UQo),e(ho,is),e(is,JQo),e(is,ame),e(ame,YQo),e(is,KQo),e(is,sme),e(sme,ZQo),e(is,eHo),e(is,nme),e(nme,oHo),e(is,rHo),e(ho,tHo),e(ho,H),e(H,fF),e(fF,lme),e(lme,aHo),e(fF,sHo),e(fF,MD),e(MD,nHo),e(fF,lHo),e(H,iHo),e(H,gF),e(gF,ime),e(ime,dHo),e(gF,cHo),e(gF,ED),e(ED,mHo),e(gF,fHo),e(H,gHo),e(H,hF),e(hF,dme),e(dme,hHo),e(hF,uHo),e(hF,yD),e(yD,pHo),e(hF,_Ho),e(H,bHo),e(H,uF),e(uF,cme),e(cme,vHo),e(uF,THo),e(uF,wD),e(wD,FHo),e(uF,CHo),e(H,MHo),e(H,pF),e(pF,mme),e(mme,EHo),e(pF,yHo),e(pF,AD),e(AD,wHo),e(pF,AHo),e(H,LHo),e(H,_F),e(_F,fme),e(fme,BHo),e(_F,xHo),e(_F,LD),e(LD,kHo),e(_F,RHo),e(H,SHo),e(H,bF),e(bF,gme),e(gme,PHo),e(bF,$Ho),e(bF,BD),e(BD,IHo),e(bF,jHo),e(H,NHo),e(H,vF),e(vF,hme),e(hme,DHo),e(vF,qHo),e(vF,xD),e(xD,GHo),e(vF,OHo),e(H,XHo),e(H,TF),e(TF,ume),e(ume,zHo),e(TF,VHo),e(TF,kD),e(kD,WHo),e(TF,QHo),e(H,HHo),e(H,FF),e(FF,pme),e(pme,UHo),e(FF,JHo),e(FF,RD),e(RD,YHo),e(FF,KHo),e(H,ZHo),e(H,CF),e(CF,_me),e(_me,eUo),e(CF,oUo),e(CF,SD),e(SD,rUo),e(CF,tUo),e(H,aUo),e(H,MF),e(MF,bme),e(bme,sUo),e(MF,nUo),e(MF,PD),e(PD,lUo),e(MF,iUo),e(H,dUo),e(H,EF),e(EF,vme),e(vme,cUo),e(EF,mUo),e(EF,$D),e($D,fUo),e(EF,gUo),e(H,hUo),e(H,yF),e(yF,Tme),e(Tme,uUo),e(yF,pUo),e(yF,ID),e(ID,_Uo),e(yF,bUo),e(H,vUo),e(H,wF),e(wF,Fme),e(Fme,TUo),e(wF,FUo),e(wF,jD),e(jD,CUo),e(wF,MUo),e(H,EUo),e(H,AF),e(AF,Cme),e(Cme,yUo),e(AF,wUo),e(AF,ND),e(ND,AUo),e(AF,LUo),e(H,BUo),e(H,LF),e(LF,Mme),e(Mme,xUo),e(LF,kUo),e(LF,DD),e(DD,RUo),e(LF,SUo),e(H,PUo),e(H,BF),e(BF,Eme),e(Eme,$Uo),e(BF,IUo),e(BF,qD),e(qD,jUo),e(BF,NUo),e(H,DUo),e(H,xF),e(xF,yme),e(yme,qUo),e(xF,GUo),e(xF,GD),e(GD,OUo),e(xF,XUo),e(H,zUo),e(H,kF),e(kF,wme),e(wme,VUo),e(kF,WUo),e(kF,OD),e(OD,QUo),e(kF,HUo),e(H,UUo),e(H,RF),e(RF,Ame),e(Ame,JUo),e(RF,YUo),e(RF,XD),e(XD,KUo),e(RF,ZUo),e(H,eJo),e(H,SF),e(SF,Lme),e(Lme,oJo),e(SF,rJo),e(SF,zD),e(zD,tJo),e(SF,aJo),e(ho,sJo),e(ho,Bme),e(Bme,nJo),e(ho,lJo),g(zA,ho,null),b(d,b9e,_),b(d,lc,_),e(lc,PF),e(PF,xme),g(VA,xme,null),e(lc,iJo),e(lc,kme),e(kme,dJo),b(d,v9e,_),b(d,ur,_),g(WA,ur,null),e(ur,cJo),e(ur,ic),e(ic,mJo),e(ic,Rme),e(Rme,fJo),e(ic,gJo),e(ic,Sme),e(Sme,hJo),e(ic,uJo),e(ur,pJo),e(ur,QA),e(QA,_Jo),e(QA,Pme),e(Pme,bJo),e(QA,vJo),e(ur,TJo),e(ur,it),g(HA,it,null),e(it,FJo),e(it,$me),e($me,CJo),e(it,MJo),e(it,dc),e(dc,EJo),e(dc,Ime),e(Ime,yJo),e(dc,wJo),e(dc,jme),e(jme,AJo),e(dc,LJo),e(it,BJo),e(it,Nme),e(Nme,xJo),e(it,kJo),g(UA,it,null),e(ur,RJo),e(ur,uo),g(JA,uo,null),e(uo,SJo),e(uo,Dme),e(Dme,PJo),e(uo,$Jo),e(uo,ds),e(ds,IJo),e(ds,qme),e(qme,jJo),e(ds,NJo),e(ds,Gme),e(Gme,DJo),e(ds,qJo),e(ds,Ome),e(Ome,GJo),e(ds,OJo),e(uo,XJo),e(uo,he),e(he,$F),e($F,Xme),e(Xme,zJo),e($F,VJo),e($F,VD),e(VD,WJo),e($F,QJo),e(he,HJo),e(he,IF),e(IF,zme),e(zme,UJo),e(IF,JJo),e(IF,WD),e(WD,YJo),e(IF,KJo),e(he,ZJo),e(he,jF),e(jF,Vme),e(Vme,eYo),e(jF,oYo),e(jF,QD),e(QD,rYo),e(jF,tYo),e(he,aYo),e(he,NF),e(NF,Wme),e(Wme,sYo),e(NF,nYo),e(NF,HD),e(HD,lYo),e(NF,iYo),e(he,dYo),e(he,DF),e(DF,Qme),e(Qme,cYo),e(DF,mYo),e(DF,UD),e(UD,fYo),e(DF,gYo),e(he,hYo),e(he,qF),e(qF,Hme),e(Hme,uYo),e(qF,pYo),e(qF,JD),e(JD,_Yo),e(qF,bYo),e(he,vYo),e(he,GF),e(GF,Ume),e(Ume,TYo),e(GF,FYo),e(GF,YD),e(YD,CYo),e(GF,MYo),e(he,EYo),e(he,OF),e(OF,Jme),e(Jme,yYo),e(OF,wYo),e(OF,KD),e(KD,AYo),e(OF,LYo),e(he,BYo),e(he,XF),e(XF,Yme),e(Yme,xYo),e(XF,kYo),e(XF,ZD),e(ZD,RYo),e(XF,SYo),e(he,PYo),e(he,zF),e(zF,Kme),e(Kme,$Yo),e(zF,IYo),e(zF,eq),e(eq,jYo),e(zF,NYo),e(uo,DYo),e(uo,Zme),e(Zme,qYo),e(uo,GYo),g(YA,uo,null),b(d,T9e,_),b(d,cc,_),e(cc,VF),e(VF,efe),g(KA,efe,null),e(cc,OYo),e(cc,ofe),e(ofe,XYo),b(d,F9e,_),b(d,pr,_),g(ZA,pr,null),e(pr,zYo),e(pr,mc),e(mc,VYo),e(mc,rfe),e(rfe,WYo),e(mc,QYo),e(mc,tfe),e(tfe,HYo),e(mc,UYo),e(pr,JYo),e(pr,e6),e(e6,YYo),e(e6,afe),e(afe,KYo),e(e6,ZYo),e(pr,eKo),e(pr,dt),g(o6,dt,null),e(dt,oKo),e(dt,sfe),e(sfe,rKo),e(dt,tKo),e(dt,fc),e(fc,aKo),e(fc,nfe),e(nfe,sKo),e(fc,nKo),e(fc,lfe),e(lfe,lKo),e(fc,iKo),e(dt,dKo),e(dt,ife),e(ife,cKo),e(dt,mKo),g(r6,dt,null),e(pr,fKo),e(pr,po),g(t6,po,null),e(po,gKo),e(po,dfe),e(dfe,hKo),e(po,uKo),e(po,cs),e(cs,pKo),e(cs,cfe),e(cfe,_Ko),e(cs,bKo),e(cs,mfe),e(mfe,vKo),e(cs,TKo),e(cs,ffe),e(ffe,FKo),e(cs,CKo),e(po,MKo),e(po,a6),e(a6,WF),e(WF,gfe),e(gfe,EKo),e(WF,yKo),e(WF,oq),e(oq,wKo),e(WF,AKo),e(a6,LKo),e(a6,QF),e(QF,hfe),e(hfe,BKo),e(QF,xKo),e(QF,rq),e(rq,kKo),e(QF,RKo),e(po,SKo),e(po,ufe),e(ufe,PKo),e(po,$Ko),g(s6,po,null),b(d,C9e,_),b(d,gc,_),e(gc,HF),e(HF,pfe),g(n6,pfe,null),e(gc,IKo),e(gc,_fe),e(_fe,jKo),b(d,M9e,_),b(d,_r,_),g(l6,_r,null),e(_r,NKo),e(_r,hc),e(hc,DKo),e(hc,bfe),e(bfe,qKo),e(hc,GKo),e(hc,vfe),e(vfe,OKo),e(hc,XKo),e(_r,zKo),e(_r,i6),e(i6,VKo),e(i6,Tfe),e(Tfe,WKo),e(i6,QKo),e(_r,HKo),e(_r,ct),g(d6,ct,null),e(ct,UKo),e(ct,Ffe),e(Ffe,JKo),e(ct,YKo),e(ct,uc),e(uc,KKo),e(uc,Cfe),e(Cfe,ZKo),e(uc,eZo),e(uc,Mfe),e(Mfe,oZo),e(uc,rZo),e(ct,tZo),e(ct,Efe),e(Efe,aZo),e(ct,sZo),g(c6,ct,null),e(_r,nZo),e(_r,_o),g(m6,_o,null),e(_o,lZo),e(_o,yfe),e(yfe,iZo),e(_o,dZo),e(_o,ms),e(ms,cZo),e(ms,wfe),e(wfe,mZo),e(ms,fZo),e(ms,Afe),e(Afe,gZo),e(ms,hZo),e(ms,Lfe),e(Lfe,uZo),e(ms,pZo),e(_o,_Zo),e(_o,Y),e(Y,UF),e(UF,Bfe),e(Bfe,bZo),e(UF,vZo),e(UF,tq),e(tq,TZo),e(UF,FZo),e(Y,CZo),e(Y,JF),e(JF,xfe),e(xfe,MZo),e(JF,EZo),e(JF,aq),e(aq,yZo),e(JF,wZo),e(Y,AZo),e(Y,YF),e(YF,kfe),e(kfe,LZo),e(YF,BZo),e(YF,sq),e(sq,xZo),e(YF,kZo),e(Y,RZo),e(Y,KF),e(KF,Rfe),e(Rfe,SZo),e(KF,PZo),e(KF,nq),e(nq,$Zo),e(KF,IZo),e(Y,jZo),e(Y,ZF),e(ZF,Sfe),e(Sfe,NZo),e(ZF,DZo),e(ZF,lq),e(lq,qZo),e(ZF,GZo),e(Y,OZo),e(Y,eC),e(eC,Pfe),e(Pfe,XZo),e(eC,zZo),e(eC,iq),e(iq,VZo),e(eC,WZo),e(Y,QZo),e(Y,oC),e(oC,$fe),e($fe,HZo),e(oC,UZo),e(oC,dq),e(dq,JZo),e(oC,YZo),e(Y,KZo),e(Y,rC),e(rC,Ife),e(Ife,ZZo),e(rC,eer),e(rC,cq),e(cq,oer),e(rC,rer),e(Y,ter),e(Y,tC),e(tC,jfe),e(jfe,aer),e(tC,ser),e(tC,mq),e(mq,ner),e(tC,ler),e(Y,ier),e(Y,aC),e(aC,Nfe),e(Nfe,der),e(aC,cer),e(aC,fq),e(fq,mer),e(aC,fer),e(Y,ger),e(Y,sC),e(sC,Dfe),e(Dfe,her),e(sC,uer),e(sC,gq),e(gq,per),e(sC,_er),e(Y,ber),e(Y,nC),e(nC,qfe),e(qfe,ver),e(nC,Ter),e(nC,hq),e(hq,Fer),e(nC,Cer),e(Y,Mer),e(Y,lC),e(lC,Gfe),e(Gfe,Eer),e(lC,yer),e(lC,uq),e(uq,wer),e(lC,Aer),e(Y,Ler),e(Y,iC),e(iC,Ofe),e(Ofe,Ber),e(iC,xer),e(iC,pq),e(pq,ker),e(iC,Rer),e(Y,Ser),e(Y,dC),e(dC,Xfe),e(Xfe,Per),e(dC,$er),e(dC,_q),e(_q,Ier),e(dC,jer),e(Y,Ner),e(Y,cC),e(cC,zfe),e(zfe,Der),e(cC,qer),e(cC,bq),e(bq,Ger),e(cC,Oer),e(Y,Xer),e(Y,mC),e(mC,Vfe),e(Vfe,zer),e(mC,Ver),e(mC,vq),e(vq,Wer),e(mC,Qer),e(Y,Her),e(Y,fC),e(fC,Wfe),e(Wfe,Uer),e(fC,Jer),e(fC,Tq),e(Tq,Yer),e(fC,Ker),e(Y,Zer),e(Y,gC),e(gC,Qfe),e(Qfe,eor),e(gC,oor),e(gC,Fq),e(Fq,ror),e(gC,tor),e(Y,aor),e(Y,hC),e(hC,Hfe),e(Hfe,sor),e(hC,nor),e(hC,Cq),e(Cq,lor),e(hC,ior),e(_o,dor),e(_o,Ufe),e(Ufe,cor),e(_o,mor),g(f6,_o,null),b(d,E9e,_),b(d,pc,_),e(pc,uC),e(uC,Jfe),g(g6,Jfe,null),e(pc,gor),e(pc,Yfe),e(Yfe,hor),b(d,y9e,_),b(d,br,_),g(h6,br,null),e(br,uor),e(br,_c),e(_c,por),e(_c,Kfe),e(Kfe,_or),e(_c,bor),e(_c,Zfe),e(Zfe,vor),e(_c,Tor),e(br,For),e(br,u6),e(u6,Cor),e(u6,ege),e(ege,Mor),e(u6,Eor),e(br,yor),e(br,mt),g(p6,mt,null),e(mt,wor),e(mt,oge),e(oge,Aor),e(mt,Lor),e(mt,bc),e(bc,Bor),e(bc,rge),e(rge,xor),e(bc,kor),e(bc,tge),e(tge,Ror),e(bc,Sor),e(mt,Por),e(mt,age),e(age,$or),e(mt,Ior),g(_6,mt,null),e(br,jor),e(br,bo),g(b6,bo,null),e(bo,Nor),e(bo,sge),e(sge,Dor),e(bo,qor),e(bo,fs),e(fs,Gor),e(fs,nge),e(nge,Oor),e(fs,Xor),e(fs,lge),e(lge,zor),e(fs,Vor),e(fs,ige),e(ige,Wor),e(fs,Qor),e(bo,Hor),e(bo,ue),e(ue,pC),e(pC,dge),e(dge,Uor),e(pC,Jor),e(pC,Mq),e(Mq,Yor),e(pC,Kor),e(ue,Zor),e(ue,_C),e(_C,cge),e(cge,err),e(_C,orr),e(_C,Eq),e(Eq,rrr),e(_C,trr),e(ue,arr),e(ue,bC),e(bC,mge),e(mge,srr),e(bC,nrr),e(bC,yq),e(yq,lrr),e(bC,irr),e(ue,drr),e(ue,vC),e(vC,fge),e(fge,crr),e(vC,mrr),e(vC,wq),e(wq,frr),e(vC,grr),e(ue,hrr),e(ue,TC),e(TC,gge),e(gge,urr),e(TC,prr),e(TC,Aq),e(Aq,_rr),e(TC,brr),e(ue,vrr),e(ue,FC),e(FC,hge),e(hge,Trr),e(FC,Frr),e(FC,Lq),e(Lq,Crr),e(FC,Mrr),e(ue,Err),e(ue,CC),e(CC,uge),e(uge,yrr),e(CC,wrr),e(CC,Bq),e(Bq,Arr),e(CC,Lrr),e(ue,Brr),e(ue,MC),e(MC,pge),e(pge,xrr),e(MC,krr),e(MC,xq),e(xq,Rrr),e(MC,Srr),e(ue,Prr),e(ue,EC),e(EC,_ge),e(_ge,$rr),e(EC,Irr),e(EC,kq),e(kq,jrr),e(EC,Nrr),e(ue,Drr),e(ue,yC),e(yC,bge),e(bge,qrr),e(yC,Grr),e(yC,Rq),e(Rq,Orr),e(yC,Xrr),e(bo,zrr),e(bo,vge),e(vge,Vrr),e(bo,Wrr),g(v6,bo,null),b(d,w9e,_),b(d,vc,_),e(vc,wC),e(wC,Tge),g(T6,Tge,null),e(vc,Qrr),e(vc,Fge),e(Fge,Hrr),b(d,A9e,_),b(d,vr,_),g(F6,vr,null),e(vr,Urr),e(vr,Tc),e(Tc,Jrr),e(Tc,Cge),e(Cge,Yrr),e(Tc,Krr),e(Tc,Mge),e(Mge,Zrr),e(Tc,etr),e(vr,otr),e(vr,C6),e(C6,rtr),e(C6,Ege),e(Ege,ttr),e(C6,atr),e(vr,str),e(vr,ft),g(M6,ft,null),e(ft,ntr),e(ft,yge),e(yge,ltr),e(ft,itr),e(ft,Fc),e(Fc,dtr),e(Fc,wge),e(wge,ctr),e(Fc,mtr),e(Fc,Age),e(Age,ftr),e(Fc,gtr),e(ft,htr),e(ft,Lge),e(Lge,utr),e(ft,ptr),g(E6,ft,null),e(vr,_tr),e(vr,vo),g(y6,vo,null),e(vo,btr),e(vo,Bge),e(Bge,vtr),e(vo,Ttr),e(vo,gs),e(gs,Ftr),e(gs,xge),e(xge,Ctr),e(gs,Mtr),e(gs,kge),e(kge,Etr),e(gs,ytr),e(gs,Rge),e(Rge,wtr),e(gs,Atr),e(vo,Ltr),e(vo,X),e(X,AC),e(AC,Sge),e(Sge,Btr),e(AC,xtr),e(AC,Sq),e(Sq,ktr),e(AC,Rtr),e(X,Str),e(X,LC),e(LC,Pge),e(Pge,Ptr),e(LC,$tr),e(LC,Pq),e(Pq,Itr),e(LC,jtr),e(X,Ntr),e(X,BC),e(BC,$ge),e($ge,Dtr),e(BC,qtr),e(BC,$q),e($q,Gtr),e(BC,Otr),e(X,Xtr),e(X,xC),e(xC,Ige),e(Ige,ztr),e(xC,Vtr),e(xC,Iq),e(Iq,Wtr),e(xC,Qtr),e(X,Htr),e(X,kC),e(kC,jge),e(jge,Utr),e(kC,Jtr),e(kC,jq),e(jq,Ytr),e(kC,Ktr),e(X,Ztr),e(X,RC),e(RC,Nge),e(Nge,ear),e(RC,oar),e(RC,Nq),e(Nq,rar),e(RC,tar),e(X,aar),e(X,SC),e(SC,Dge),e(Dge,sar),e(SC,nar),e(SC,Dq),e(Dq,lar),e(SC,iar),e(X,dar),e(X,PC),e(PC,qge),e(qge,car),e(PC,mar),e(PC,qq),e(qq,far),e(PC,gar),e(X,har),e(X,$C),e($C,Gge),e(Gge,uar),e($C,par),e($C,Gq),e(Gq,_ar),e($C,bar),e(X,Tar),e(X,IC),e(IC,Oge),e(Oge,Far),e(IC,Car),e(IC,Oq),e(Oq,Mar),e(IC,Ear),e(X,yar),e(X,jC),e(jC,Xge),e(Xge,war),e(jC,Aar),e(jC,Xq),e(Xq,Lar),e(jC,Bar),e(X,xar),e(X,NC),e(NC,zge),e(zge,kar),e(NC,Rar),e(NC,zq),e(zq,Sar),e(NC,Par),e(X,$ar),e(X,DC),e(DC,Vge),e(Vge,Iar),e(DC,jar),e(DC,Vq),e(Vq,Nar),e(DC,Dar),e(X,qar),e(X,qC),e(qC,Wge),e(Wge,Gar),e(qC,Oar),e(qC,Wq),e(Wq,Xar),e(qC,zar),e(X,Var),e(X,GC),e(GC,Qge),e(Qge,War),e(GC,Qar),e(GC,Qq),e(Qq,Har),e(GC,Uar),e(X,Jar),e(X,OC),e(OC,Hge),e(Hge,Yar),e(OC,Kar),e(OC,Hq),e(Hq,Zar),e(OC,esr),e(X,osr),e(X,XC),e(XC,Uge),e(Uge,rsr),e(XC,tsr),e(XC,Uq),e(Uq,asr),e(XC,ssr),e(X,nsr),e(X,zC),e(zC,Jge),e(Jge,lsr),e(zC,isr),e(zC,Jq),e(Jq,dsr),e(zC,csr),e(X,msr),e(X,VC),e(VC,Yge),e(Yge,fsr),e(VC,gsr),e(VC,Yq),e(Yq,hsr),e(VC,usr),e(X,psr),e(X,WC),e(WC,Kge),e(Kge,_sr),e(WC,bsr),e(WC,Kq),e(Kq,vsr),e(WC,Tsr),e(X,Fsr),e(X,QC),e(QC,Zge),e(Zge,Csr),e(QC,Msr),e(QC,Zq),e(Zq,Esr),e(QC,ysr),e(X,wsr),e(X,HC),e(HC,ehe),e(ehe,Asr),e(HC,Lsr),e(HC,eG),e(eG,Bsr),e(HC,xsr),e(X,ksr),e(X,UC),e(UC,ohe),e(ohe,Rsr),e(UC,Ssr),e(UC,oG),e(oG,Psr),e(UC,$sr),e(X,Isr),e(X,JC),e(JC,rhe),e(rhe,jsr),e(JC,Nsr),e(JC,rG),e(rG,Dsr),e(JC,qsr),e(X,Gsr),e(X,YC),e(YC,the),e(the,Osr),e(YC,Xsr),e(YC,tG),e(tG,zsr),e(YC,Vsr),e(vo,Wsr),e(vo,ahe),e(ahe,Qsr),e(vo,Hsr),g(w6,vo,null),b(d,L9e,_),b(d,Cc,_),e(Cc,KC),e(KC,she),g(A6,she,null),e(Cc,Usr),e(Cc,nhe),e(nhe,Jsr),b(d,B9e,_),b(d,Tr,_),g(L6,Tr,null),e(Tr,Ysr),e(Tr,Mc),e(Mc,Ksr),e(Mc,lhe),e(lhe,Zsr),e(Mc,enr),e(Mc,ihe),e(ihe,onr),e(Mc,rnr),e(Tr,tnr),e(Tr,B6),e(B6,anr),e(B6,dhe),e(dhe,snr),e(B6,nnr),e(Tr,lnr),e(Tr,gt),g(x6,gt,null),e(gt,inr),e(gt,che),e(che,dnr),e(gt,cnr),e(gt,Ec),e(Ec,mnr),e(Ec,mhe),e(mhe,fnr),e(Ec,gnr),e(Ec,fhe),e(fhe,hnr),e(Ec,unr),e(gt,pnr),e(gt,ghe),e(ghe,_nr),e(gt,bnr),g(k6,gt,null),e(Tr,vnr),e(Tr,To),g(R6,To,null),e(To,Tnr),e(To,hhe),e(hhe,Fnr),e(To,Cnr),e(To,hs),e(hs,Mnr),e(hs,uhe),e(uhe,Enr),e(hs,ynr),e(hs,phe),e(phe,wnr),e(hs,Anr),e(hs,_he),e(_he,Lnr),e(hs,Bnr),e(To,xnr),e(To,te),e(te,ZC),e(ZC,bhe),e(bhe,knr),e(ZC,Rnr),e(ZC,aG),e(aG,Snr),e(ZC,Pnr),e(te,$nr),e(te,e4),e(e4,vhe),e(vhe,Inr),e(e4,jnr),e(e4,sG),e(sG,Nnr),e(e4,Dnr),e(te,qnr),e(te,o4),e(o4,The),e(The,Gnr),e(o4,Onr),e(o4,nG),e(nG,Xnr),e(o4,znr),e(te,Vnr),e(te,r4),e(r4,Fhe),e(Fhe,Wnr),e(r4,Qnr),e(r4,lG),e(lG,Hnr),e(r4,Unr),e(te,Jnr),e(te,t4),e(t4,Che),e(Che,Ynr),e(t4,Knr),e(t4,iG),e(iG,Znr),e(t4,elr),e(te,olr),e(te,a4),e(a4,Mhe),e(Mhe,rlr),e(a4,tlr),e(a4,dG),e(dG,alr),e(a4,slr),e(te,nlr),e(te,s4),e(s4,Ehe),e(Ehe,llr),e(s4,ilr),e(s4,cG),e(cG,dlr),e(s4,clr),e(te,mlr),e(te,n4),e(n4,yhe),e(yhe,flr),e(n4,glr),e(n4,mG),e(mG,hlr),e(n4,ulr),e(te,plr),e(te,l4),e(l4,whe),e(whe,_lr),e(l4,blr),e(l4,fG),e(fG,vlr),e(l4,Tlr),e(te,Flr),e(te,i4),e(i4,Ahe),e(Ahe,Clr),e(i4,Mlr),e(i4,gG),e(gG,Elr),e(i4,ylr),e(te,wlr),e(te,d4),e(d4,Lhe),e(Lhe,Alr),e(d4,Llr),e(d4,hG),e(hG,Blr),e(d4,xlr),e(te,klr),e(te,c4),e(c4,Bhe),e(Bhe,Rlr),e(c4,Slr),e(c4,uG),e(uG,Plr),e(c4,$lr),e(te,Ilr),e(te,m4),e(m4,xhe),e(xhe,jlr),e(m4,Nlr),e(m4,pG),e(pG,Dlr),e(m4,qlr),e(te,Glr),e(te,f4),e(f4,khe),e(khe,Olr),e(f4,Xlr),e(f4,_G),e(_G,zlr),e(f4,Vlr),e(te,Wlr),e(te,g4),e(g4,Rhe),e(Rhe,Qlr),e(g4,Hlr),e(g4,bG),e(bG,Ulr),e(g4,Jlr),e(te,Ylr),e(te,h4),e(h4,She),e(She,Klr),e(h4,Zlr),e(h4,vG),e(vG,eir),e(h4,oir),e(te,rir),e(te,u4),e(u4,Phe),e(Phe,tir),e(u4,air),e(u4,TG),e(TG,sir),e(u4,nir),e(To,lir),e(To,$he),e($he,iir),e(To,dir),g(S6,To,null),b(d,x9e,_),b(d,yc,_),e(yc,p4),e(p4,Ihe),g(P6,Ihe,null),e(yc,cir),e(yc,jhe),e(jhe,mir),b(d,k9e,_),b(d,Fr,_),g($6,Fr,null),e(Fr,fir),e(Fr,wc),e(wc,gir),e(wc,Nhe),e(Nhe,hir),e(wc,uir),e(wc,Dhe),e(Dhe,pir),e(wc,_ir),e(Fr,bir),e(Fr,I6),e(I6,vir),e(I6,qhe),e(qhe,Tir),e(I6,Fir),e(Fr,Cir),e(Fr,ht),g(j6,ht,null),e(ht,Mir),e(ht,Ghe),e(Ghe,Eir),e(ht,yir),e(ht,Ac),e(Ac,wir),e(Ac,Ohe),e(Ohe,Air),e(Ac,Lir),e(Ac,Xhe),e(Xhe,Bir),e(Ac,xir),e(ht,kir),e(ht,zhe),e(zhe,Rir),e(ht,Sir),g(N6,ht,null),e(Fr,Pir),e(Fr,Fo),g(D6,Fo,null),e(Fo,$ir),e(Fo,Vhe),e(Vhe,Iir),e(Fo,jir),e(Fo,us),e(us,Nir),e(us,Whe),e(Whe,Dir),e(us,qir),e(us,Qhe),e(Qhe,Gir),e(us,Oir),e(us,Hhe),e(Hhe,Xir),e(us,zir),e(Fo,Vir),e(Fo,Uhe),e(Uhe,_4),e(_4,Jhe),e(Jhe,Wir),e(_4,Qir),e(_4,FG),e(FG,Hir),e(_4,Uir),e(Fo,Jir),e(Fo,Yhe),e(Yhe,Yir),e(Fo,Kir),g(q6,Fo,null),b(d,R9e,_),b(d,Lc,_),e(Lc,b4),e(b4,Khe),g(G6,Khe,null),e(Lc,Zir),e(Lc,Zhe),e(Zhe,edr),b(d,S9e,_),b(d,Cr,_),g(O6,Cr,null),e(Cr,odr),e(Cr,Bc),e(Bc,rdr),e(Bc,eue),e(eue,tdr),e(Bc,adr),e(Bc,oue),e(oue,sdr),e(Bc,ndr),e(Cr,ldr),e(Cr,X6),e(X6,idr),e(X6,rue),e(rue,ddr),e(X6,cdr),e(Cr,mdr),e(Cr,ut),g(z6,ut,null),e(ut,fdr),e(ut,tue),e(tue,gdr),e(ut,hdr),e(ut,xc),e(xc,udr),e(xc,aue),e(aue,pdr),e(xc,_dr),e(xc,sue),e(sue,bdr),e(xc,vdr),e(ut,Tdr),e(ut,nue),e(nue,Fdr),e(ut,Cdr),g(V6,ut,null),e(Cr,Mdr),e(Cr,Co),g(W6,Co,null),e(Co,Edr),e(Co,lue),e(lue,ydr),e(Co,wdr),e(Co,ps),e(ps,Adr),e(ps,iue),e(iue,Ldr),e(ps,Bdr),e(ps,due),e(due,xdr),e(ps,kdr),e(ps,cue),e(cue,Rdr),e(ps,Sdr),e(Co,Pdr),e(Co,K),e(K,v4),e(v4,mue),e(mue,$dr),e(v4,Idr),e(v4,CG),e(CG,jdr),e(v4,Ndr),e(K,Ddr),e(K,T4),e(T4,fue),e(fue,qdr),e(T4,Gdr),e(T4,MG),e(MG,Odr),e(T4,Xdr),e(K,zdr),e(K,F4),e(F4,gue),e(gue,Vdr),e(F4,Wdr),e(F4,EG),e(EG,Qdr),e(F4,Hdr),e(K,Udr),e(K,C4),e(C4,hue),e(hue,Jdr),e(C4,Ydr),e(C4,yG),e(yG,Kdr),e(C4,Zdr),e(K,ecr),e(K,M4),e(M4,uue),e(uue,ocr),e(M4,rcr),e(M4,wG),e(wG,tcr),e(M4,acr),e(K,scr),e(K,E4),e(E4,pue),e(pue,ncr),e(E4,lcr),e(E4,AG),e(AG,icr),e(E4,dcr),e(K,ccr),e(K,y4),e(y4,_ue),e(_ue,mcr),e(y4,fcr),e(y4,LG),e(LG,gcr),e(y4,hcr),e(K,ucr),e(K,w4),e(w4,bue),e(bue,pcr),e(w4,_cr),e(w4,BG),e(BG,bcr),e(w4,vcr),e(K,Tcr),e(K,A4),e(A4,vue),e(vue,Fcr),e(A4,Ccr),e(A4,xG),e(xG,Mcr),e(A4,Ecr),e(K,ycr),e(K,L4),e(L4,Tue),e(Tue,wcr),e(L4,Acr),e(L4,kG),e(kG,Lcr),e(L4,Bcr),e(K,xcr),e(K,B4),e(B4,Fue),e(Fue,kcr),e(B4,Rcr),e(B4,RG),e(RG,Scr),e(B4,Pcr),e(K,$cr),e(K,x4),e(x4,Cue),e(Cue,Icr),e(x4,jcr),e(x4,SG),e(SG,Ncr),e(x4,Dcr),e(K,qcr),e(K,k4),e(k4,Mue),e(Mue,Gcr),e(k4,Ocr),e(k4,PG),e(PG,Xcr),e(k4,zcr),e(K,Vcr),e(K,R4),e(R4,Eue),e(Eue,Wcr),e(R4,Qcr),e(R4,$G),e($G,Hcr),e(R4,Ucr),e(K,Jcr),e(K,S4),e(S4,yue),e(yue,Ycr),e(S4,Kcr),e(S4,IG),e(IG,Zcr),e(S4,emr),e(K,omr),e(K,P4),e(P4,wue),e(wue,rmr),e(P4,tmr),e(P4,jG),e(jG,amr),e(P4,smr),e(K,nmr),e(K,$4),e($4,Aue),e(Aue,lmr),e($4,imr),e($4,NG),e(NG,dmr),e($4,cmr),e(K,mmr),e(K,I4),e(I4,Lue),e(Lue,fmr),e(I4,gmr),e(I4,DG),e(DG,hmr),e(I4,umr),e(K,pmr),e(K,j4),e(j4,Bue),e(Bue,_mr),e(j4,bmr),e(j4,qG),e(qG,vmr),e(j4,Tmr),e(K,Fmr),e(K,N4),e(N4,xue),e(xue,Cmr),e(N4,Mmr),e(N4,GG),e(GG,Emr),e(N4,ymr),e(Co,wmr),e(Co,kue),e(kue,Amr),e(Co,Lmr),g(Q6,Co,null),b(d,P9e,_),b(d,kc,_),e(kc,D4),e(D4,Rue),g(H6,Rue,null),e(kc,Bmr),e(kc,Sue),e(Sue,xmr),b(d,$9e,_),b(d,Mr,_),g(U6,Mr,null),e(Mr,kmr),e(Mr,Rc),e(Rc,Rmr),e(Rc,Pue),e(Pue,Smr),e(Rc,Pmr),e(Rc,$ue),e($ue,$mr),e(Rc,Imr),e(Mr,jmr),e(Mr,J6),e(J6,Nmr),e(J6,Iue),e(Iue,Dmr),e(J6,qmr),e(Mr,Gmr),e(Mr,pt),g(Y6,pt,null),e(pt,Omr),e(pt,jue),e(jue,Xmr),e(pt,zmr),e(pt,Sc),e(Sc,Vmr),e(Sc,Nue),e(Nue,Wmr),e(Sc,Qmr),e(Sc,Due),e(Due,Hmr),e(Sc,Umr),e(pt,Jmr),e(pt,que),e(que,Ymr),e(pt,Kmr),g(K6,pt,null),e(Mr,Zmr),e(Mr,Mo),g(Z6,Mo,null),e(Mo,efr),e(Mo,Gue),e(Gue,ofr),e(Mo,rfr),e(Mo,_s),e(_s,tfr),e(_s,Oue),e(Oue,afr),e(_s,sfr),e(_s,Xue),e(Xue,nfr),e(_s,lfr),e(_s,zue),e(zue,ifr),e(_s,dfr),e(Mo,cfr),e(Mo,Z),e(Z,q4),e(q4,Vue),e(Vue,mfr),e(q4,ffr),e(q4,OG),e(OG,gfr),e(q4,hfr),e(Z,ufr),e(Z,G4),e(G4,Wue),e(Wue,pfr),e(G4,_fr),e(G4,XG),e(XG,bfr),e(G4,vfr),e(Z,Tfr),e(Z,O4),e(O4,Que),e(Que,Ffr),e(O4,Cfr),e(O4,zG),e(zG,Mfr),e(O4,Efr),e(Z,yfr),e(Z,X4),e(X4,Hue),e(Hue,wfr),e(X4,Afr),e(X4,VG),e(VG,Lfr),e(X4,Bfr),e(Z,xfr),e(Z,z4),e(z4,Uue),e(Uue,kfr),e(z4,Rfr),e(z4,WG),e(WG,Sfr),e(z4,Pfr),e(Z,$fr),e(Z,V4),e(V4,Jue),e(Jue,Ifr),e(V4,jfr),e(V4,QG),e(QG,Nfr),e(V4,Dfr),e(Z,qfr),e(Z,W4),e(W4,Yue),e(Yue,Gfr),e(W4,Ofr),e(W4,HG),e(HG,Xfr),e(W4,zfr),e(Z,Vfr),e(Z,Q4),e(Q4,Kue),e(Kue,Wfr),e(Q4,Qfr),e(Q4,UG),e(UG,Hfr),e(Q4,Ufr),e(Z,Jfr),e(Z,H4),e(H4,Zue),e(Zue,Yfr),e(H4,Kfr),e(H4,JG),e(JG,Zfr),e(H4,egr),e(Z,ogr),e(Z,U4),e(U4,epe),e(epe,rgr),e(U4,tgr),e(U4,YG),e(YG,agr),e(U4,sgr),e(Z,ngr),e(Z,J4),e(J4,ope),e(ope,lgr),e(J4,igr),e(J4,KG),e(KG,dgr),e(J4,cgr),e(Z,mgr),e(Z,Y4),e(Y4,rpe),e(rpe,fgr),e(Y4,ggr),e(Y4,ZG),e(ZG,hgr),e(Y4,ugr),e(Z,pgr),e(Z,K4),e(K4,tpe),e(tpe,_gr),e(K4,bgr),e(K4,eO),e(eO,vgr),e(K4,Tgr),e(Z,Fgr),e(Z,Z4),e(Z4,ape),e(ape,Cgr),e(Z4,Mgr),e(Z4,oO),e(oO,Egr),e(Z4,ygr),e(Z,wgr),e(Z,eM),e(eM,spe),e(spe,Agr),e(eM,Lgr),e(eM,rO),e(rO,Bgr),e(eM,xgr),e(Z,kgr),e(Z,oM),e(oM,npe),e(npe,Rgr),e(oM,Sgr),e(oM,tO),e(tO,Pgr),e(oM,$gr),e(Z,Igr),e(Z,rM),e(rM,lpe),e(lpe,jgr),e(rM,Ngr),e(rM,aO),e(aO,Dgr),e(rM,qgr),e(Z,Ggr),e(Z,tM),e(tM,ipe),e(ipe,Ogr),e(tM,Xgr),e(tM,sO),e(sO,zgr),e(tM,Vgr),e(Z,Wgr),e(Z,aM),e(aM,dpe),e(dpe,Qgr),e(aM,Hgr),e(aM,nO),e(nO,Ugr),e(aM,Jgr),e(Mo,Ygr),e(Mo,cpe),e(cpe,Kgr),e(Mo,Zgr),g(e0,Mo,null),b(d,I9e,_),b(d,Pc,_),e(Pc,sM),e(sM,mpe),g(o0,mpe,null),e(Pc,ehr),e(Pc,fpe),e(fpe,ohr),b(d,j9e,_),b(d,Er,_),g(r0,Er,null),e(Er,rhr),e(Er,$c),e($c,thr),e($c,gpe),e(gpe,ahr),e($c,shr),e($c,hpe),e(hpe,nhr),e($c,lhr),e(Er,ihr),e(Er,t0),e(t0,dhr),e(t0,upe),e(upe,chr),e(t0,mhr),e(Er,fhr),e(Er,_t),g(a0,_t,null),e(_t,ghr),e(_t,ppe),e(ppe,hhr),e(_t,uhr),e(_t,Ic),e(Ic,phr),e(Ic,_pe),e(_pe,_hr),e(Ic,bhr),e(Ic,bpe),e(bpe,vhr),e(Ic,Thr),e(_t,Fhr),e(_t,vpe),e(vpe,Chr),e(_t,Mhr),g(s0,_t,null),e(Er,Ehr),e(Er,Eo),g(n0,Eo,null),e(Eo,yhr),e(Eo,Tpe),e(Tpe,whr),e(Eo,Ahr),e(Eo,bs),e(bs,Lhr),e(bs,Fpe),e(Fpe,Bhr),e(bs,xhr),e(bs,Cpe),e(Cpe,khr),e(bs,Rhr),e(bs,Mpe),e(Mpe,Shr),e(bs,Phr),e(Eo,$hr),e(Eo,Epe),e(Epe,nM),e(nM,ype),e(ype,Ihr),e(nM,jhr),e(nM,lO),e(lO,Nhr),e(nM,Dhr),e(Eo,qhr),e(Eo,wpe),e(wpe,Ghr),e(Eo,Ohr),g(l0,Eo,null),b(d,N9e,_),b(d,jc,_),e(jc,lM),e(lM,Ape),g(i0,Ape,null),e(jc,Xhr),e(jc,Lpe),e(Lpe,zhr),b(d,D9e,_),b(d,yr,_),g(d0,yr,null),e(yr,Vhr),e(yr,Nc),e(Nc,Whr),e(Nc,Bpe),e(Bpe,Qhr),e(Nc,Hhr),e(Nc,xpe),e(xpe,Uhr),e(Nc,Jhr),e(yr,Yhr),e(yr,c0),e(c0,Khr),e(c0,kpe),e(kpe,Zhr),e(c0,eur),e(yr,our),e(yr,bt),g(m0,bt,null),e(bt,rur),e(bt,Rpe),e(Rpe,tur),e(bt,aur),e(bt,Dc),e(Dc,sur),e(Dc,Spe),e(Spe,nur),e(Dc,lur),e(Dc,Ppe),e(Ppe,iur),e(Dc,dur),e(bt,cur),e(bt,$pe),e($pe,mur),e(bt,fur),g(f0,bt,null),e(yr,gur),e(yr,yo),g(g0,yo,null),e(yo,hur),e(yo,Ipe),e(Ipe,uur),e(yo,pur),e(yo,vs),e(vs,_ur),e(vs,jpe),e(jpe,bur),e(vs,vur),e(vs,Npe),e(Npe,Tur),e(vs,Fur),e(vs,Dpe),e(Dpe,Cur),e(vs,Mur),e(yo,Eur),e(yo,qpe),e(qpe,iM),e(iM,Gpe),e(Gpe,yur),e(iM,wur),e(iM,iO),e(iO,Aur),e(iM,Lur),e(yo,Bur),e(yo,Ope),e(Ope,xur),e(yo,kur),g(h0,yo,null),b(d,q9e,_),b(d,qc,_),e(qc,dM),e(dM,Xpe),g(u0,Xpe,null),e(qc,Rur),e(qc,zpe),e(zpe,Sur),b(d,G9e,_),b(d,wr,_),g(p0,wr,null),e(wr,Pur),e(wr,Gc),e(Gc,$ur),e(Gc,Vpe),e(Vpe,Iur),e(Gc,jur),e(Gc,Wpe),e(Wpe,Nur),e(Gc,Dur),e(wr,qur),e(wr,_0),e(_0,Gur),e(_0,Qpe),e(Qpe,Our),e(_0,Xur),e(wr,zur),e(wr,vt),g(b0,vt,null),e(vt,Vur),e(vt,Hpe),e(Hpe,Wur),e(vt,Qur),e(vt,Oc),e(Oc,Hur),e(Oc,Upe),e(Upe,Uur),e(Oc,Jur),e(Oc,Jpe),e(Jpe,Yur),e(Oc,Kur),e(vt,Zur),e(vt,Ype),e(Ype,epr),e(vt,opr),g(v0,vt,null),e(wr,rpr),e(wr,wo),g(T0,wo,null),e(wo,tpr),e(wo,Kpe),e(Kpe,apr),e(wo,spr),e(wo,Ts),e(Ts,npr),e(Ts,Zpe),e(Zpe,lpr),e(Ts,ipr),e(Ts,e_e),e(e_e,dpr),e(Ts,cpr),e(Ts,o_e),e(o_e,mpr),e(Ts,fpr),e(wo,gpr),e(wo,V),e(V,cM),e(cM,r_e),e(r_e,hpr),e(cM,upr),e(cM,dO),e(dO,ppr),e(cM,_pr),e(V,bpr),e(V,mM),e(mM,t_e),e(t_e,vpr),e(mM,Tpr),e(mM,cO),e(cO,Fpr),e(mM,Cpr),e(V,Mpr),e(V,fM),e(fM,a_e),e(a_e,Epr),e(fM,ypr),e(fM,mO),e(mO,wpr),e(fM,Apr),e(V,Lpr),e(V,gM),e(gM,s_e),e(s_e,Bpr),e(gM,xpr),e(gM,fO),e(fO,kpr),e(gM,Rpr),e(V,Spr),e(V,hM),e(hM,n_e),e(n_e,Ppr),e(hM,$pr),e(hM,gO),e(gO,Ipr),e(hM,jpr),e(V,Npr),e(V,uM),e(uM,l_e),e(l_e,Dpr),e(uM,qpr),e(uM,hO),e(hO,Gpr),e(uM,Opr),e(V,Xpr),e(V,pM),e(pM,i_e),e(i_e,zpr),e(pM,Vpr),e(pM,uO),e(uO,Wpr),e(pM,Qpr),e(V,Hpr),e(V,_M),e(_M,d_e),e(d_e,Upr),e(_M,Jpr),e(_M,pO),e(pO,Ypr),e(_M,Kpr),e(V,Zpr),e(V,bM),e(bM,c_e),e(c_e,e_r),e(bM,o_r),e(bM,_O),e(_O,r_r),e(bM,t_r),e(V,a_r),e(V,vM),e(vM,m_e),e(m_e,s_r),e(vM,n_r),e(vM,bO),e(bO,l_r),e(vM,i_r),e(V,d_r),e(V,TM),e(TM,f_e),e(f_e,c_r),e(TM,m_r),e(TM,vO),e(vO,f_r),e(TM,g_r),e(V,h_r),e(V,FM),e(FM,g_e),e(g_e,u_r),e(FM,p_r),e(FM,TO),e(TO,__r),e(FM,b_r),e(V,v_r),e(V,CM),e(CM,h_e),e(h_e,T_r),e(CM,F_r),e(CM,FO),e(FO,C_r),e(CM,M_r),e(V,E_r),e(V,MM),e(MM,u_e),e(u_e,y_r),e(MM,w_r),e(MM,CO),e(CO,A_r),e(MM,L_r),e(V,B_r),e(V,EM),e(EM,p_e),e(p_e,x_r),e(EM,k_r),e(EM,MO),e(MO,R_r),e(EM,S_r),e(V,P_r),e(V,yM),e(yM,__e),e(__e,$_r),e(yM,I_r),e(yM,EO),e(EO,j_r),e(yM,N_r),e(V,D_r),e(V,wM),e(wM,b_e),e(b_e,q_r),e(wM,G_r),e(wM,yO),e(yO,O_r),e(wM,X_r),e(V,z_r),e(V,AM),e(AM,v_e),e(v_e,V_r),e(AM,W_r),e(AM,wO),e(wO,Q_r),e(AM,H_r),e(V,U_r),e(V,LM),e(LM,T_e),e(T_e,J_r),e(LM,Y_r),e(LM,AO),e(AO,K_r),e(LM,Z_r),e(V,ebr),e(V,BM),e(BM,F_e),e(F_e,obr),e(BM,rbr),e(BM,LO),e(LO,tbr),e(BM,abr),e(V,sbr),e(V,xM),e(xM,C_e),e(C_e,nbr),e(xM,lbr),e(xM,BO),e(BO,ibr),e(xM,dbr),e(V,cbr),e(V,kM),e(kM,M_e),e(M_e,mbr),e(kM,fbr),e(kM,xO),e(xO,gbr),e(kM,hbr),e(V,ubr),e(V,RM),e(RM,E_e),e(E_e,pbr),e(RM,_br),e(RM,kO),e(kO,bbr),e(RM,vbr),e(V,Tbr),e(V,SM),e(SM,y_e),e(y_e,Fbr),e(SM,Cbr),e(SM,RO),e(RO,Mbr),e(SM,Ebr),e(wo,ybr),e(wo,w_e),e(w_e,wbr),e(wo,Abr),g(F0,wo,null),b(d,O9e,_),b(d,Xc,_),e(Xc,PM),e(PM,A_e),g(C0,A_e,null),e(Xc,Lbr),e(Xc,L_e),e(L_e,Bbr),b(d,X9e,_),b(d,Ar,_),g(M0,Ar,null),e(Ar,xbr),e(Ar,zc),e(zc,kbr),e(zc,B_e),e(B_e,Rbr),e(zc,Sbr),e(zc,x_e),e(x_e,Pbr),e(zc,$br),e(Ar,Ibr),e(Ar,E0),e(E0,jbr),e(E0,k_e),e(k_e,Nbr),e(E0,Dbr),e(Ar,qbr),e(Ar,Tt),g(y0,Tt,null),e(Tt,Gbr),e(Tt,R_e),e(R_e,Obr),e(Tt,Xbr),e(Tt,Vc),e(Vc,zbr),e(Vc,S_e),e(S_e,Vbr),e(Vc,Wbr),e(Vc,P_e),e(P_e,Qbr),e(Vc,Hbr),e(Tt,Ubr),e(Tt,$_e),e($_e,Jbr),e(Tt,Ybr),g(w0,Tt,null),e(Ar,Kbr),e(Ar,Ao),g(A0,Ao,null),e(Ao,Zbr),e(Ao,I_e),e(I_e,e2r),e(Ao,o2r),e(Ao,Fs),e(Fs,r2r),e(Fs,j_e),e(j_e,t2r),e(Fs,a2r),e(Fs,N_e),e(N_e,s2r),e(Fs,n2r),e(Fs,D_e),e(D_e,l2r),e(Fs,i2r),e(Ao,d2r),e(Ao,Cs),e(Cs,$M),e($M,q_e),e(q_e,c2r),e($M,m2r),e($M,SO),e(SO,f2r),e($M,g2r),e(Cs,h2r),e(Cs,IM),e(IM,G_e),e(G_e,u2r),e(IM,p2r),e(IM,PO),e(PO,_2r),e(IM,b2r),e(Cs,v2r),e(Cs,jM),e(jM,O_e),e(O_e,T2r),e(jM,F2r),e(jM,$O),e($O,C2r),e(jM,M2r),e(Cs,E2r),e(Cs,NM),e(NM,X_e),e(X_e,y2r),e(NM,w2r),e(NM,IO),e(IO,A2r),e(NM,L2r),e(Ao,B2r),e(Ao,z_e),e(z_e,x2r),e(Ao,k2r),g(L0,Ao,null),b(d,z9e,_),b(d,Wc,_),e(Wc,DM),e(DM,V_e),g(B0,V_e,null),e(Wc,R2r),e(Wc,W_e),e(W_e,S2r),b(d,V9e,_),b(d,Lr,_),g(x0,Lr,null),e(Lr,P2r),e(Lr,Qc),e(Qc,$2r),e(Qc,Q_e),e(Q_e,I2r),e(Qc,j2r),e(Qc,H_e),e(H_e,N2r),e(Qc,D2r),e(Lr,q2r),e(Lr,k0),e(k0,G2r),e(k0,U_e),e(U_e,O2r),e(k0,X2r),e(Lr,z2r),e(Lr,Ft),g(R0,Ft,null),e(Ft,V2r),e(Ft,J_e),e(J_e,W2r),e(Ft,Q2r),e(Ft,Hc),e(Hc,H2r),e(Hc,Y_e),e(Y_e,U2r),e(Hc,J2r),e(Hc,K_e),e(K_e,Y2r),e(Hc,K2r),e(Ft,Z2r),e(Ft,Z_e),e(Z_e,evr),e(Ft,ovr),g(S0,Ft,null),e(Lr,rvr),e(Lr,Lo),g(P0,Lo,null),e(Lo,tvr),e(Lo,ebe),e(ebe,avr),e(Lo,svr),e(Lo,Ms),e(Ms,nvr),e(Ms,obe),e(obe,lvr),e(Ms,ivr),e(Ms,rbe),e(rbe,dvr),e(Ms,cvr),e(Ms,tbe),e(tbe,mvr),e(Ms,fvr),e(Lo,gvr),e(Lo,me),e(me,qM),e(qM,abe),e(abe,hvr),e(qM,uvr),e(qM,jO),e(jO,pvr),e(qM,_vr),e(me,bvr),e(me,GM),e(GM,sbe),e(sbe,vvr),e(GM,Tvr),e(GM,NO),e(NO,Fvr),e(GM,Cvr),e(me,Mvr),e(me,OM),e(OM,nbe),e(nbe,Evr),e(OM,yvr),e(OM,DO),e(DO,wvr),e(OM,Avr),e(me,Lvr),e(me,XM),e(XM,lbe),e(lbe,Bvr),e(XM,xvr),e(XM,qO),e(qO,kvr),e(XM,Rvr),e(me,Svr),e(me,zM),e(zM,ibe),e(ibe,Pvr),e(zM,$vr),e(zM,GO),e(GO,Ivr),e(zM,jvr),e(me,Nvr),e(me,VM),e(VM,dbe),e(dbe,Dvr),e(VM,qvr),e(VM,OO),e(OO,Gvr),e(VM,Ovr),e(me,Xvr),e(me,WM),e(WM,cbe),e(cbe,zvr),e(WM,Vvr),e(WM,XO),e(XO,Wvr),e(WM,Qvr),e(me,Hvr),e(me,QM),e(QM,mbe),e(mbe,Uvr),e(QM,Jvr),e(QM,zO),e(zO,Yvr),e(QM,Kvr),e(me,Zvr),e(me,HM),e(HM,fbe),e(fbe,eTr),e(HM,oTr),e(HM,VO),e(VO,rTr),e(HM,tTr),e(me,aTr),e(me,UM),e(UM,gbe),e(gbe,sTr),e(UM,nTr),e(UM,WO),e(WO,lTr),e(UM,iTr),e(me,dTr),e(me,JM),e(JM,hbe),e(hbe,cTr),e(JM,mTr),e(JM,QO),e(QO,fTr),e(JM,gTr),e(Lo,hTr),e(Lo,ube),e(ube,uTr),e(Lo,pTr),g($0,Lo,null),b(d,W9e,_),b(d,Uc,_),e(Uc,YM),e(YM,pbe),g(I0,pbe,null),e(Uc,_Tr),e(Uc,_be),e(_be,bTr),b(d,Q9e,_),b(d,Br,_),g(j0,Br,null),e(Br,vTr),e(Br,Jc),e(Jc,TTr),e(Jc,bbe),e(bbe,FTr),e(Jc,CTr),e(Jc,vbe),e(vbe,MTr),e(Jc,ETr),e(Br,yTr),e(Br,N0),e(N0,wTr),e(N0,Tbe),e(Tbe,ATr),e(N0,LTr),e(Br,BTr),e(Br,Ct),g(D0,Ct,null),e(Ct,xTr),e(Ct,Fbe),e(Fbe,kTr),e(Ct,RTr),e(Ct,Yc),e(Yc,STr),e(Yc,Cbe),e(Cbe,PTr),e(Yc,$Tr),e(Yc,Mbe),e(Mbe,ITr),e(Yc,jTr),e(Ct,NTr),e(Ct,Ebe),e(Ebe,DTr),e(Ct,qTr),g(q0,Ct,null),e(Br,GTr),e(Br,Bo),g(G0,Bo,null),e(Bo,OTr),e(Bo,ybe),e(ybe,XTr),e(Bo,zTr),e(Bo,Es),e(Es,VTr),e(Es,wbe),e(wbe,WTr),e(Es,QTr),e(Es,Abe),e(Abe,HTr),e(Es,UTr),e(Es,Lbe),e(Lbe,JTr),e(Es,YTr),e(Bo,KTr),e(Bo,ve),e(ve,KM),e(KM,Bbe),e(Bbe,ZTr),e(KM,e1r),e(KM,HO),e(HO,o1r),e(KM,r1r),e(ve,t1r),e(ve,ZM),e(ZM,xbe),e(xbe,a1r),e(ZM,s1r),e(ZM,UO),e(UO,n1r),e(ZM,l1r),e(ve,i1r),e(ve,eE),e(eE,kbe),e(kbe,d1r),e(eE,c1r),e(eE,JO),e(JO,m1r),e(eE,f1r),e(ve,g1r),e(ve,oE),e(oE,Rbe),e(Rbe,h1r),e(oE,u1r),e(oE,YO),e(YO,p1r),e(oE,_1r),e(ve,b1r),e(ve,rE),e(rE,Sbe),e(Sbe,v1r),e(rE,T1r),e(rE,KO),e(KO,F1r),e(rE,C1r),e(ve,M1r),e(ve,tE),e(tE,Pbe),e(Pbe,E1r),e(tE,y1r),e(tE,ZO),e(ZO,w1r),e(tE,A1r),e(ve,L1r),e(ve,aE),e(aE,$be),e($be,B1r),e(aE,x1r),e(aE,eX),e(eX,k1r),e(aE,R1r),e(ve,S1r),e(ve,sE),e(sE,Ibe),e(Ibe,P1r),e(sE,$1r),e(sE,oX),e(oX,I1r),e(sE,j1r),e(ve,N1r),e(ve,nE),e(nE,jbe),e(jbe,D1r),e(nE,q1r),e(nE,rX),e(rX,G1r),e(nE,O1r),e(Bo,X1r),e(Bo,Nbe),e(Nbe,z1r),e(Bo,V1r),g(O0,Bo,null),b(d,H9e,_),b(d,Kc,_),e(Kc,lE),e(lE,Dbe),g(X0,Dbe,null),e(Kc,W1r),e(Kc,qbe),e(qbe,Q1r),b(d,U9e,_),b(d,xr,_),g(z0,xr,null),e(xr,H1r),e(xr,Zc),e(Zc,U1r),e(Zc,Gbe),e(Gbe,J1r),e(Zc,Y1r),e(Zc,Obe),e(Obe,K1r),e(Zc,Z1r),e(xr,eFr),e(xr,V0),e(V0,oFr),e(V0,Xbe),e(Xbe,rFr),e(V0,tFr),e(xr,aFr),e(xr,Mt),g(W0,Mt,null),e(Mt,sFr),e(Mt,zbe),e(zbe,nFr),e(Mt,lFr),e(Mt,em),e(em,iFr),e(em,Vbe),e(Vbe,dFr),e(em,cFr),e(em,Wbe),e(Wbe,mFr),e(em,fFr),e(Mt,gFr),e(Mt,Qbe),e(Qbe,hFr),e(Mt,uFr),g(Q0,Mt,null),e(xr,pFr),e(xr,xo),g(H0,xo,null),e(xo,_Fr),e(xo,Hbe),e(Hbe,bFr),e(xo,vFr),e(xo,ys),e(ys,TFr),e(ys,Ube),e(Ube,FFr),e(ys,CFr),e(ys,Jbe),e(Jbe,MFr),e(ys,EFr),e(ys,Ybe),e(Ybe,yFr),e(ys,wFr),e(xo,AFr),e(xo,Te),e(Te,iE),e(iE,Kbe),e(Kbe,LFr),e(iE,BFr),e(iE,tX),e(tX,xFr),e(iE,kFr),e(Te,RFr),e(Te,dE),e(dE,Zbe),e(Zbe,SFr),e(dE,PFr),e(dE,aX),e(aX,$Fr),e(dE,IFr),e(Te,jFr),e(Te,cE),e(cE,e2e),e(e2e,NFr),e(cE,DFr),e(cE,sX),e(sX,qFr),e(cE,GFr),e(Te,OFr),e(Te,mE),e(mE,o2e),e(o2e,XFr),e(mE,zFr),e(mE,nX),e(nX,VFr),e(mE,WFr),e(Te,QFr),e(Te,fE),e(fE,r2e),e(r2e,HFr),e(fE,UFr),e(fE,lX),e(lX,JFr),e(fE,YFr),e(Te,KFr),e(Te,gE),e(gE,t2e),e(t2e,ZFr),e(gE,eCr),e(gE,iX),e(iX,oCr),e(gE,rCr),e(Te,tCr),e(Te,hE),e(hE,a2e),e(a2e,aCr),e(hE,sCr),e(hE,dX),e(dX,nCr),e(hE,lCr),e(Te,iCr),e(Te,uE),e(uE,s2e),e(s2e,dCr),e(uE,cCr),e(uE,cX),e(cX,mCr),e(uE,fCr),e(Te,gCr),e(Te,pE),e(pE,n2e),e(n2e,hCr),e(pE,uCr),e(pE,mX),e(mX,pCr),e(pE,_Cr),e(xo,bCr),e(xo,l2e),e(l2e,vCr),e(xo,TCr),g(U0,xo,null),b(d,J9e,_),b(d,om,_),e(om,_E),e(_E,i2e),g(J0,i2e,null),e(om,FCr),e(om,d2e),e(d2e,CCr),b(d,Y9e,_),b(d,kr,_),g(Y0,kr,null),e(kr,MCr),e(kr,rm),e(rm,ECr),e(rm,c2e),e(c2e,yCr),e(rm,wCr),e(rm,m2e),e(m2e,ACr),e(rm,LCr),e(kr,BCr),e(kr,K0),e(K0,xCr),e(K0,f2e),e(f2e,kCr),e(K0,RCr),e(kr,SCr),e(kr,Et),g(Z0,Et,null),e(Et,PCr),e(Et,g2e),e(g2e,$Cr),e(Et,ICr),e(Et,tm),e(tm,jCr),e(tm,h2e),e(h2e,NCr),e(tm,DCr),e(tm,u2e),e(u2e,qCr),e(tm,GCr),e(Et,OCr),e(Et,p2e),e(p2e,XCr),e(Et,zCr),g(eL,Et,null),e(kr,VCr),e(kr,ko),g(oL,ko,null),e(ko,WCr),e(ko,_2e),e(_2e,QCr),e(ko,HCr),e(ko,ws),e(ws,UCr),e(ws,b2e),e(b2e,JCr),e(ws,YCr),e(ws,v2e),e(v2e,KCr),e(ws,ZCr),e(ws,T2e),e(T2e,e4r),e(ws,o4r),e(ko,r4r),e(ko,Fe),e(Fe,bE),e(bE,F2e),e(F2e,t4r),e(bE,a4r),e(bE,fX),e(fX,s4r),e(bE,n4r),e(Fe,l4r),e(Fe,vE),e(vE,C2e),e(C2e,i4r),e(vE,d4r),e(vE,gX),e(gX,c4r),e(vE,m4r),e(Fe,f4r),e(Fe,TE),e(TE,M2e),e(M2e,g4r),e(TE,h4r),e(TE,hX),e(hX,u4r),e(TE,p4r),e(Fe,_4r),e(Fe,FE),e(FE,E2e),e(E2e,b4r),e(FE,v4r),e(FE,uX),e(uX,T4r),e(FE,F4r),e(Fe,C4r),e(Fe,CE),e(CE,y2e),e(y2e,M4r),e(CE,E4r),e(CE,pX),e(pX,y4r),e(CE,w4r),e(Fe,A4r),e(Fe,ME),e(ME,w2e),e(w2e,L4r),e(ME,B4r),e(ME,_X),e(_X,x4r),e(ME,k4r),e(Fe,R4r),e(Fe,EE),e(EE,A2e),e(A2e,S4r),e(EE,P4r),e(EE,bX),e(bX,$4r),e(EE,I4r),e(Fe,j4r),e(Fe,yE),e(yE,L2e),e(L2e,N4r),e(yE,D4r),e(yE,vX),e(vX,q4r),e(yE,G4r),e(Fe,O4r),e(Fe,wE),e(wE,B2e),e(B2e,X4r),e(wE,z4r),e(wE,TX),e(TX,V4r),e(wE,W4r),e(ko,Q4r),e(ko,x2e),e(x2e,H4r),e(ko,U4r),g(rL,ko,null),b(d,K9e,_),b(d,am,_),e(am,AE),e(AE,k2e),g(tL,k2e,null),e(am,J4r),e(am,R2e),e(R2e,Y4r),b(d,Z9e,_),b(d,Rr,_),g(aL,Rr,null),e(Rr,K4r),e(Rr,sm),e(sm,Z4r),e(sm,S2e),e(S2e,eMr),e(sm,oMr),e(sm,P2e),e(P2e,rMr),e(sm,tMr),e(Rr,aMr),e(Rr,sL),e(sL,sMr),e(sL,$2e),e($2e,nMr),e(sL,lMr),e(Rr,iMr),e(Rr,yt),g(nL,yt,null),e(yt,dMr),e(yt,I2e),e(I2e,cMr),e(yt,mMr),e(yt,nm),e(nm,fMr),e(nm,j2e),e(j2e,gMr),e(nm,hMr),e(nm,N2e),e(N2e,uMr),e(nm,pMr),e(yt,_Mr),e(yt,D2e),e(D2e,bMr),e(yt,vMr),g(lL,yt,null),e(Rr,TMr),e(Rr,Ro),g(iL,Ro,null),e(Ro,FMr),e(Ro,q2e),e(q2e,CMr),e(Ro,MMr),e(Ro,As),e(As,EMr),e(As,G2e),e(G2e,yMr),e(As,wMr),e(As,O2e),e(O2e,AMr),e(As,LMr),e(As,X2e),e(X2e,BMr),e(As,xMr),e(Ro,kMr),e(Ro,Ce),e(Ce,LE),e(LE,z2e),e(z2e,RMr),e(LE,SMr),e(LE,FX),e(FX,PMr),e(LE,$Mr),e(Ce,IMr),e(Ce,BE),e(BE,V2e),e(V2e,jMr),e(BE,NMr),e(BE,CX),e(CX,DMr),e(BE,qMr),e(Ce,GMr),e(Ce,xE),e(xE,W2e),e(W2e,OMr),e(xE,XMr),e(xE,MX),e(MX,zMr),e(xE,VMr),e(Ce,WMr),e(Ce,kE),e(kE,Q2e),e(Q2e,QMr),e(kE,HMr),e(kE,EX),e(EX,UMr),e(kE,JMr),e(Ce,YMr),e(Ce,RE),e(RE,H2e),e(H2e,KMr),e(RE,ZMr),e(RE,yX),e(yX,eEr),e(RE,oEr),e(Ce,rEr),e(Ce,SE),e(SE,U2e),e(U2e,tEr),e(SE,aEr),e(SE,wX),e(wX,sEr),e(SE,nEr),e(Ce,lEr),e(Ce,PE),e(PE,J2e),e(J2e,iEr),e(PE,dEr),e(PE,AX),e(AX,cEr),e(PE,mEr),e(Ce,fEr),e(Ce,$E),e($E,Y2e),e(Y2e,gEr),e($E,hEr),e($E,LX),e(LX,uEr),e($E,pEr),e(Ce,_Er),e(Ce,IE),e(IE,K2e),e(K2e,bEr),e(IE,vEr),e(IE,BX),e(BX,TEr),e(IE,FEr),e(Ro,CEr),e(Ro,Z2e),e(Z2e,MEr),e(Ro,EEr),g(dL,Ro,null),b(d,eBe,_),b(d,lm,_),e(lm,jE),e(jE,eve),g(cL,eve,null),e(lm,yEr),e(lm,ove),e(ove,wEr),b(d,oBe,_),b(d,Sr,_),g(mL,Sr,null),e(Sr,AEr),e(Sr,im),e(im,LEr),e(im,rve),e(rve,BEr),e(im,xEr),e(im,tve),e(tve,kEr),e(im,REr),e(Sr,SEr),e(Sr,fL),e(fL,PEr),e(fL,ave),e(ave,$Er),e(fL,IEr),e(Sr,jEr),e(Sr,wt),g(gL,wt,null),e(wt,NEr),e(wt,sve),e(sve,DEr),e(wt,qEr),e(wt,dm),e(dm,GEr),e(dm,nve),e(nve,OEr),e(dm,XEr),e(dm,lve),e(lve,zEr),e(dm,VEr),e(wt,WEr),e(wt,ive),e(ive,QEr),e(wt,HEr),g(hL,wt,null),e(Sr,UEr),e(Sr,So),g(uL,So,null),e(So,JEr),e(So,dve),e(dve,YEr),e(So,KEr),e(So,Ls),e(Ls,ZEr),e(Ls,cve),e(cve,e3r),e(Ls,o3r),e(Ls,mve),e(mve,r3r),e(Ls,t3r),e(Ls,fve),e(fve,a3r),e(Ls,s3r),e(So,n3r),e(So,no),e(no,NE),e(NE,gve),e(gve,l3r),e(NE,i3r),e(NE,xX),e(xX,d3r),e(NE,c3r),e(no,m3r),e(no,DE),e(DE,hve),e(hve,f3r),e(DE,g3r),e(DE,kX),e(kX,h3r),e(DE,u3r),e(no,p3r),e(no,qE),e(qE,uve),e(uve,_3r),e(qE,b3r),e(qE,RX),e(RX,v3r),e(qE,T3r),e(no,F3r),e(no,GE),e(GE,pve),e(pve,C3r),e(GE,M3r),e(GE,SX),e(SX,E3r),e(GE,y3r),e(no,w3r),e(no,OE),e(OE,_ve),e(_ve,A3r),e(OE,L3r),e(OE,PX),e(PX,B3r),e(OE,x3r),e(no,k3r),e(no,XE),e(XE,bve),e(bve,R3r),e(XE,S3r),e(XE,$X),e($X,P3r),e(XE,$3r),e(no,I3r),e(no,zE),e(zE,vve),e(vve,j3r),e(zE,N3r),e(zE,IX),e(IX,D3r),e(zE,q3r),e(So,G3r),e(So,Tve),e(Tve,O3r),e(So,X3r),g(pL,So,null),b(d,rBe,_),b(d,cm,_),e(cm,VE),e(VE,Fve),g(_L,Fve,null),e(cm,z3r),e(cm,Cve),e(Cve,V3r),b(d,tBe,_),b(d,Pr,_),g(bL,Pr,null),e(Pr,W3r),e(Pr,mm),e(mm,Q3r),e(mm,Mve),e(Mve,H3r),e(mm,U3r),e(mm,Eve),e(Eve,J3r),e(mm,Y3r),e(Pr,K3r),e(Pr,vL),e(vL,Z3r),e(vL,yve),e(yve,e5r),e(vL,o5r),e(Pr,r5r),e(Pr,At),g(TL,At,null),e(At,t5r),e(At,wve),e(wve,a5r),e(At,s5r),e(At,fm),e(fm,n5r),e(fm,Ave),e(Ave,l5r),e(fm,i5r),e(fm,Lve),e(Lve,d5r),e(fm,c5r),e(At,m5r),e(At,Bve),e(Bve,f5r),e(At,g5r),g(FL,At,null),e(Pr,h5r),e(Pr,Po),g(CL,Po,null),e(Po,u5r),e(Po,xve),e(xve,p5r),e(Po,_5r),e(Po,Bs),e(Bs,b5r),e(Bs,kve),e(kve,v5r),e(Bs,T5r),e(Bs,Rve),e(Rve,F5r),e(Bs,C5r),e(Bs,Sve),e(Sve,M5r),e(Bs,E5r),e(Po,y5r),e(Po,lo),e(lo,WE),e(WE,Pve),e(Pve,w5r),e(WE,A5r),e(WE,jX),e(jX,L5r),e(WE,B5r),e(lo,x5r),e(lo,QE),e(QE,$ve),e($ve,k5r),e(QE,R5r),e(QE,NX),e(NX,S5r),e(QE,P5r),e(lo,$5r),e(lo,HE),e(HE,Ive),e(Ive,I5r),e(HE,j5r),e(HE,DX),e(DX,N5r),e(HE,D5r),e(lo,q5r),e(lo,UE),e(UE,jve),e(jve,G5r),e(UE,O5r),e(UE,qX),e(qX,X5r),e(UE,z5r),e(lo,V5r),e(lo,JE),e(JE,Nve),e(Nve,W5r),e(JE,Q5r),e(JE,GX),e(GX,H5r),e(JE,U5r),e(lo,J5r),e(lo,YE),e(YE,Dve),e(Dve,Y5r),e(YE,K5r),e(YE,OX),e(OX,Z5r),e(YE,eyr),e(lo,oyr),e(lo,KE),e(KE,qve),e(qve,ryr),e(KE,tyr),e(KE,XX),e(XX,ayr),e(KE,syr),e(Po,nyr),e(Po,Gve),e(Gve,lyr),e(Po,iyr),g(ML,Po,null),b(d,aBe,_),b(d,gm,_),e(gm,ZE),e(ZE,Ove),g(EL,Ove,null),e(gm,dyr),e(gm,Xve),e(Xve,cyr),b(d,sBe,_),b(d,$r,_),g(yL,$r,null),e($r,myr),e($r,hm),e(hm,fyr),e(hm,zve),e(zve,gyr),e(hm,hyr),e(hm,Vve),e(Vve,uyr),e(hm,pyr),e($r,_yr),e($r,wL),e(wL,byr),e(wL,Wve),e(Wve,vyr),e(wL,Tyr),e($r,Fyr),e($r,Lt),g(AL,Lt,null),e(Lt,Cyr),e(Lt,Qve),e(Qve,Myr),e(Lt,Eyr),e(Lt,um),e(um,yyr),e(um,Hve),e(Hve,wyr),e(um,Ayr),e(um,Uve),e(Uve,Lyr),e(um,Byr),e(Lt,xyr),e(Lt,Jve),e(Jve,kyr),e(Lt,Ryr),g(LL,Lt,null),e($r,Syr),e($r,$o),g(BL,$o,null),e($o,Pyr),e($o,Yve),e(Yve,$yr),e($o,Iyr),e($o,xs),e(xs,jyr),e(xs,Kve),e(Kve,Nyr),e(xs,Dyr),e(xs,Zve),e(Zve,qyr),e(xs,Gyr),e(xs,eTe),e(eTe,Oyr),e(xs,Xyr),e($o,zyr),e($o,oTe),e(oTe,e3),e(e3,rTe),e(rTe,Vyr),e(e3,Wyr),e(e3,zX),e(zX,Qyr),e(e3,Hyr),e($o,Uyr),e($o,tTe),e(tTe,Jyr),e($o,Yyr),g(xL,$o,null),b(d,nBe,_),b(d,pm,_),e(pm,o3),e(o3,aTe),g(kL,aTe,null),e(pm,Kyr),e(pm,sTe),e(sTe,Zyr),b(d,lBe,_),b(d,Ir,_),g(RL,Ir,null),e(Ir,ewr),e(Ir,_m),e(_m,owr),e(_m,nTe),e(nTe,rwr),e(_m,twr),e(_m,lTe),e(lTe,awr),e(_m,swr),e(Ir,nwr),e(Ir,SL),e(SL,lwr),e(SL,iTe),e(iTe,iwr),e(SL,dwr),e(Ir,cwr),e(Ir,Bt),g(PL,Bt,null),e(Bt,mwr),e(Bt,dTe),e(dTe,fwr),e(Bt,gwr),e(Bt,bm),e(bm,hwr),e(bm,cTe),e(cTe,uwr),e(bm,pwr),e(bm,mTe),e(mTe,_wr),e(bm,bwr),e(Bt,vwr),e(Bt,fTe),e(fTe,Twr),e(Bt,Fwr),g($L,Bt,null),e(Ir,Cwr),e(Ir,Io),g(IL,Io,null),e(Io,Mwr),e(Io,gTe),e(gTe,Ewr),e(Io,ywr),e(Io,ks),e(ks,wwr),e(ks,hTe),e(hTe,Awr),e(ks,Lwr),e(ks,uTe),e(uTe,Bwr),e(ks,xwr),e(ks,pTe),e(pTe,kwr),e(ks,Rwr),e(Io,Swr),e(Io,jL),e(jL,r3),e(r3,_Te),e(_Te,Pwr),e(r3,$wr),e(r3,VX),e(VX,Iwr),e(r3,jwr),e(jL,Nwr),e(jL,t3),e(t3,bTe),e(bTe,Dwr),e(t3,qwr),e(t3,WX),e(WX,Gwr),e(t3,Owr),e(Io,Xwr),e(Io,vTe),e(vTe,zwr),e(Io,Vwr),g(NL,Io,null),b(d,iBe,_),b(d,vm,_),e(vm,a3),e(a3,TTe),g(DL,TTe,null),e(vm,Wwr),e(vm,FTe),e(FTe,Qwr),b(d,dBe,_),b(d,jr,_),g(qL,jr,null),e(jr,Hwr),e(jr,Tm),e(Tm,Uwr),e(Tm,CTe),e(CTe,Jwr),e(Tm,Ywr),e(Tm,MTe),e(MTe,Kwr),e(Tm,Zwr),e(jr,eAr),e(jr,GL),e(GL,oAr),e(GL,ETe),e(ETe,rAr),e(GL,tAr),e(jr,aAr),e(jr,xt),g(OL,xt,null),e(xt,sAr),e(xt,yTe),e(yTe,nAr),e(xt,lAr),e(xt,Fm),e(Fm,iAr),e(Fm,wTe),e(wTe,dAr),e(Fm,cAr),e(Fm,ATe),e(ATe,mAr),e(Fm,fAr),e(xt,gAr),e(xt,LTe),e(LTe,hAr),e(xt,uAr),g(XL,xt,null),e(jr,pAr),e(jr,jo),g(zL,jo,null),e(jo,_Ar),e(jo,BTe),e(BTe,bAr),e(jo,vAr),e(jo,Rs),e(Rs,TAr),e(Rs,xTe),e(xTe,FAr),e(Rs,CAr),e(Rs,kTe),e(kTe,MAr),e(Rs,EAr),e(Rs,RTe),e(RTe,yAr),e(Rs,wAr),e(jo,AAr),e(jo,STe),e(STe,s3),e(s3,PTe),e(PTe,LAr),e(s3,BAr),e(s3,QX),e(QX,xAr),e(s3,kAr),e(jo,RAr),e(jo,$Te),e($Te,SAr),e(jo,PAr),g(VL,jo,null),cBe=!0},p(d,[_]){const WL={};_&2&&(WL.$$scope={dirty:_,ctx:d}),Lm.$set(WL);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:d}),ih.$set(ITe);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:d}),vh.$set(jTe)},i(d){cBe||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(l5.$$.fragment,d),h(i5.$$.fragment,d),h(Lm.$$.fragment,d),h(d5.$$.fragment,d),h(c5.$$.fragment,d),h(g5.$$.fragment,d),h(h5.$$.fragment,d),h(u5.$$.fragment,d),h(p5.$$.fragment,d),h(_5.$$.fragment,d),h(T5.$$.fragment,d),h(F5.$$.fragment,d),h(C5.$$.fragment,d),h(M5.$$.fragment,d),h(E5.$$.fragment,d),h(A5.$$.fragment,d),h(ih.$$.fragment,d),h(L5.$$.fragment,d),h(B5.$$.fragment,d),h(x5.$$.fragment,d),h(k5.$$.fragment,d),h(P5.$$.fragment,d),h(vh.$$.fragment,d),h($5.$$.fragment,d),h(I5.$$.fragment,d),h(j5.$$.fragment,d),h(N5.$$.fragment,d),h(q5.$$.fragment,d),h(G5.$$.fragment,d),h(O5.$$.fragment,d),h(X5.$$.fragment,d),h(z5.$$.fragment,d),h(V5.$$.fragment,d),h(Q5.$$.fragment,d),h(H5.$$.fragment,d),h(U5.$$.fragment,d),h(J5.$$.fragment,d),h(Y5.$$.fragment,d),h(K5.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(my.$$.fragment,d),h(fy.$$.fragment,d),h(hy.$$.fragment,d),h(uy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Vy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(sw.$$.fragment,d),h(nw.$$.fragment,d),h(lw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(fw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(sA.$$.fragment,d),h(nA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(uA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(DA.$$.fragment,d),h(GA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(VA.$$.fragment,d),h(WA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(s6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(m6.$$.fragment,d),h(f6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h($6.$$.fragment,d),h(j6.$$.fragment,d),h(N6.$$.fragment,d),h(D6.$$.fragment,d),h(q6.$$.fragment,d),h(G6.$$.fragment,d),h(O6.$$.fragment,d),h(z6.$$.fragment,d),h(V6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(U6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(Z6.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(a0.$$.fragment,d),h(s0.$$.fragment,d),h(n0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(m0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(u0.$$.fragment,d),h(p0.$$.fragment,d),h(b0.$$.fragment,d),h(v0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(y0.$$.fragment,d),h(w0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(R0.$$.fragment,d),h(S0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(D0.$$.fragment,d),h(q0.$$.fragment,d),h(G0.$$.fragment,d),h(O0.$$.fragment,d),h(X0.$$.fragment,d),h(z0.$$.fragment,d),h(W0.$$.fragment,d),h(Q0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(Z0.$$.fragment,d),h(eL.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(lL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(hL.$$.fragment,d),h(uL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(bL.$$.fragment,d),h(TL.$$.fragment,d),h(FL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(AL.$$.fragment,d),h(LL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(PL.$$.fragment,d),h($L.$$.fragment,d),h(IL.$$.fragment,d),h(NL.$$.fragment,d),h(DL.$$.fragment,d),h(qL.$$.fragment,d),h(OL.$$.fragment,d),h(XL.$$.fragment,d),h(zL.$$.fragment,d),h(VL.$$.fragment,d),cBe=!0)},o(d){u(ce.$$.fragment,d),u($a.$$.fragment,d),u(l5.$$.fragment,d),u(i5.$$.fragment,d),u(Lm.$$.fragment,d),u(d5.$$.fragment,d),u(c5.$$.fragment,d),u(g5.$$.fragment,d),u(h5.$$.fragment,d),u(u5.$$.fragment,d),u(p5.$$.fragment,d),u(_5.$$.fragment,d),u(T5.$$.fragment,d),u(F5.$$.fragment,d),u(C5.$$.fragment,d),u(M5.$$.fragment,d),u(E5.$$.fragment,d),u(A5.$$.fragment,d),u(ih.$$.fragment,d),u(L5.$$.fragment,d),u(B5.$$.fragment,d),u(x5.$$.fragment,d),u(k5.$$.fragment,d),u(P5.$$.fragment,d),u(vh.$$.fragment,d),u($5.$$.fragment,d),u(I5.$$.fragment,d),u(j5.$$.fragment,d),u(N5.$$.fragment,d),u(q5.$$.fragment,d),u(G5.$$.fragment,d),u(O5.$$.fragment,d),u(X5.$$.fragment,d),u(z5.$$.fragment,d),u(V5.$$.fragment,d),u(Q5.$$.fragment,d),u(H5.$$.fragment,d),u(U5.$$.fragment,d),u(J5.$$.fragment,d),u(Y5.$$.fragment,d),u(K5.$$.fragment,d),u(ey.$$.fragment,d),u(oy.$$.fragment,d),u(ry.$$.fragment,d),u(ty.$$.fragment,d),u(ay.$$.fragment,d),u(sy.$$.fragment,d),u(ly.$$.fragment,d),u(iy.$$.fragment,d),u(dy.$$.fragment,d),u(cy.$$.fragment,d),u(my.$$.fragment,d),u(fy.$$.fragment,d),u(hy.$$.fragment,d),u(uy.$$.fragment,d),u(py.$$.fragment,d),u(_y.$$.fragment,d),u(by.$$.fragment,d),u(vy.$$.fragment,d),u(Fy.$$.fragment,d),u(Cy.$$.fragment,d),u(My.$$.fragment,d),u(Ey.$$.fragment,d),u(yy.$$.fragment,d),u(wy.$$.fragment,d),u(Ly.$$.fragment,d),u(By.$$.fragment,d),u(xy.$$.fragment,d),u(ky.$$.fragment,d),u(Ry.$$.fragment,d),u(Sy.$$.fragment,d),u($y.$$.fragment,d),u(Iy.$$.fragment,d),u(jy.$$.fragment,d),u(Ny.$$.fragment,d),u(Dy.$$.fragment,d),u(qy.$$.fragment,d),u(Oy.$$.fragment,d),u(Xy.$$.fragment,d),u(zy.$$.fragment,d),u(Vy.$$.fragment,d),u(Wy.$$.fragment,d),u(Qy.$$.fragment,d),u(Uy.$$.fragment,d),u(Jy.$$.fragment,d),u(Yy.$$.fragment,d),u(Ky.$$.fragment,d),u(Zy.$$.fragment,d),u(ew.$$.fragment,d),u(rw.$$.fragment,d),u(tw.$$.fragment,d),u(aw.$$.fragment,d),u(sw.$$.fragment,d),u(nw.$$.fragment,d),u(lw.$$.fragment,d),u(dw.$$.fragment,d),u(cw.$$.fragment,d),u(mw.$$.fragment,d),u(fw.$$.fragment,d),u(gw.$$.fragment,d),u(hw.$$.fragment,d),u(pw.$$.fragment,d),u(_w.$$.fragment,d),u(bw.$$.fragment,d),u(vw.$$.fragment,d),u(Tw.$$.fragment,d),u(Fw.$$.fragment,d),u(Mw.$$.fragment,d),u(Ew.$$.fragment,d),u(yw.$$.fragment,d),u(ww.$$.fragment,d),u(Aw.$$.fragment,d),u(Lw.$$.fragment,d),u(xw.$$.fragment,d),u(kw.$$.fragment,d),u(Rw.$$.fragment,d),u(Sw.$$.fragment,d),u(Pw.$$.fragment,d),u($w.$$.fragment,d),u(jw.$$.fragment,d),u(Nw.$$.fragment,d),u(Dw.$$.fragment,d),u(qw.$$.fragment,d),u(Gw.$$.fragment,d),u(Ow.$$.fragment,d),u(zw.$$.fragment,d),u(Vw.$$.fragment,d),u(Ww.$$.fragment,d),u(Hw.$$.fragment,d),u(Uw.$$.fragment,d),u(Jw.$$.fragment,d),u(Kw.$$.fragment,d),u(Zw.$$.fragment,d),u(eA.$$.fragment,d),u(oA.$$.fragment,d),u(rA.$$.fragment,d),u(tA.$$.fragment,d),u(sA.$$.fragment,d),u(nA.$$.fragment,d),u(lA.$$.fragment,d),u(iA.$$.fragment,d),u(dA.$$.fragment,d),u(cA.$$.fragment,d),u(fA.$$.fragment,d),u(gA.$$.fragment,d),u(hA.$$.fragment,d),u(uA.$$.fragment,d),u(pA.$$.fragment,d),u(_A.$$.fragment,d),u(vA.$$.fragment,d),u(TA.$$.fragment,d),u(FA.$$.fragment,d),u(CA.$$.fragment,d),u(MA.$$.fragment,d),u(EA.$$.fragment,d),u(wA.$$.fragment,d),u(AA.$$.fragment,d),u(LA.$$.fragment,d),u(xA.$$.fragment,d),u(kA.$$.fragment,d),u(RA.$$.fragment,d),u(PA.$$.fragment,d),u($A.$$.fragment,d),u(IA.$$.fragment,d),u(jA.$$.fragment,d),u(NA.$$.fragment,d),u(DA.$$.fragment,d),u(GA.$$.fragment,d),u(OA.$$.fragment,d),u(XA.$$.fragment,d),u(zA.$$.fragment,d),u(VA.$$.fragment,d),u(WA.$$.fragment,d),u(HA.$$.fragment,d),u(UA.$$.fragment,d),u(JA.$$.fragment,d),u(YA.$$.fragment,d),u(KA.$$.fragment,d),u(ZA.$$.fragment,d),u(o6.$$.fragment,d),u(r6.$$.fragment,d),u(t6.$$.fragment,d),u(s6.$$.fragment,d),u(n6.$$.fragment,d),u(l6.$$.fragment,d),u(d6.$$.fragment,d),u(c6.$$.fragment,d),u(m6.$$.fragment,d),u(f6.$$.fragment,d),u(g6.$$.fragment,d),u(h6.$$.fragment,d),u(p6.$$.fragment,d),u(_6.$$.fragment,d),u(b6.$$.fragment,d),u(v6.$$.fragment,d),u(T6.$$.fragment,d),u(F6.$$.fragment,d),u(M6.$$.fragment,d),u(E6.$$.fragment,d),u(y6.$$.fragment,d),u(w6.$$.fragment,d),u(A6.$$.fragment,d),u(L6.$$.fragment,d),u(x6.$$.fragment,d),u(k6.$$.fragment,d),u(R6.$$.fragment,d),u(S6.$$.fragment,d),u(P6.$$.fragment,d),u($6.$$.fragment,d),u(j6.$$.fragment,d),u(N6.$$.fragment,d),u(D6.$$.fragment,d),u(q6.$$.fragment,d),u(G6.$$.fragment,d),u(O6.$$.fragment,d),u(z6.$$.fragment,d),u(V6.$$.fragment,d),u(W6.$$.fragment,d),u(Q6.$$.fragment,d),u(H6.$$.fragment,d),u(U6.$$.fragment,d),u(Y6.$$.fragment,d),u(K6.$$.fragment,d),u(Z6.$$.fragment,d),u(e0.$$.fragment,d),u(o0.$$.fragment,d),u(r0.$$.fragment,d),u(a0.$$.fragment,d),u(s0.$$.fragment,d),u(n0.$$.fragment,d),u(l0.$$.fragment,d),u(i0.$$.fragment,d),u(d0.$$.fragment,d),u(m0.$$.fragment,d),u(f0.$$.fragment,d),u(g0.$$.fragment,d),u(h0.$$.fragment,d),u(u0.$$.fragment,d),u(p0.$$.fragment,d),u(b0.$$.fragment,d),u(v0.$$.fragment,d),u(T0.$$.fragment,d),u(F0.$$.fragment,d),u(C0.$$.fragment,d),u(M0.$$.fragment,d),u(y0.$$.fragment,d),u(w0.$$.fragment,d),u(A0.$$.fragment,d),u(L0.$$.fragment,d),u(B0.$$.fragment,d),u(x0.$$.fragment,d),u(R0.$$.fragment,d),u(S0.$$.fragment,d),u(P0.$$.fragment,d),u($0.$$.fragment,d),u(I0.$$.fragment,d),u(j0.$$.fragment,d),u(D0.$$.fragment,d),u(q0.$$.fragment,d),u(G0.$$.fragment,d),u(O0.$$.fragment,d),u(X0.$$.fragment,d),u(z0.$$.fragment,d),u(W0.$$.fragment,d),u(Q0.$$.fragment,d),u(H0.$$.fragment,d),u(U0.$$.fragment,d),u(J0.$$.fragment,d),u(Y0.$$.fragment,d),u(Z0.$$.fragment,d),u(eL.$$.fragment,d),u(oL.$$.fragment,d),u(rL.$$.fragment,d),u(tL.$$.fragment,d),u(aL.$$.fragment,d),u(nL.$$.fragment,d),u(lL.$$.fragment,d),u(iL.$$.fragment,d),u(dL.$$.fragment,d),u(cL.$$.fragment,d),u(mL.$$.fragment,d),u(gL.$$.fragment,d),u(hL.$$.fragment,d),u(uL.$$.fragment,d),u(pL.$$.fragment,d),u(_L.$$.fragment,d),u(bL.$$.fragment,d),u(TL.$$.fragment,d),u(FL.$$.fragment,d),u(CL.$$.fragment,d),u(ML.$$.fragment,d),u(EL.$$.fragment,d),u(yL.$$.fragment,d),u(AL.$$.fragment,d),u(LL.$$.fragment,d),u(BL.$$.fragment,d),u(xL.$$.fragment,d),u(kL.$$.fragment,d),u(RL.$$.fragment,d),u(PL.$$.fragment,d),u($L.$$.fragment,d),u(IL.$$.fragment,d),u(NL.$$.fragment,d),u(DL.$$.fragment,d),u(qL.$$.fragment,d),u(OL.$$.fragment,d),u(XL.$$.fragment,d),u(zL.$$.fragment,d),u(VL.$$.fragment,d),cBe=!1},d(d){t(J),d&&t(Ae),d&&t(ie),p(ce),d&&t(Mm),d&&t(na),d&&t(ye),d&&t(io),d&&t(ym),p($a,d),d&&t(co),d&&t(ge),d&&t(qo),d&&t(Ia),d&&t(m8e),d&&t(Si),p(l5),d&&t(f8e),d&&t(js),d&&t(g8e),p(i5,d),d&&t(h8e),d&&t(Q7),d&&t(u8e),p(Lm,d),d&&t(p8e),d&&t(Pi),p(d5),d&&t(_8e),d&&t(Go),p(c5),p(g5),p(h5),p(u5),d&&t(b8e),d&&t(Ii),p(p5),d&&t(v8e),d&&t(Oo),p(_5),p(T5),p(F5),p(C5),d&&t(T8e),d&&t(ji),p(M5),d&&t(F8e),d&&t(Xo),p(E5),p(A5),p(ih),p(L5),p(B5),d&&t(C8e),d&&t(Ni),p(x5),d&&t(M8e),d&&t(zo),p(k5),p(P5),p(vh),p($5),p(I5),d&&t(E8e),d&&t(qi),p(j5),d&&t(y8e),d&&t(Vo),p(N5),p(q5),p(G5),p(O5),p(X5),d&&t(w8e),d&&t(Xi),p(z5),d&&t(A8e),d&&t(Wo),p(V5),p(Q5),p(H5),p(U5),p(J5),d&&t(L8e),d&&t(Wi),p(Y5),d&&t(B8e),d&&t(Qo),p(K5),p(ey),p(oy),p(ry),p(ty),d&&t(x8e),d&&t(Ui),p(ay),d&&t(k8e),d&&t(Ho),p(sy),p(ly),p(iy),p(dy),p(cy),d&&t(R8e),d&&t(Ki),p(my),d&&t(S8e),d&&t(Uo),p(fy),p(hy),p(uy),p(py),p(_y),d&&t(P8e),d&&t(od),p(by),d&&t($8e),d&&t(Jo),p(vy),p(Fy),p(Cy),p(My),p(Ey),d&&t(I8e),d&&t(ad),p(yy),d&&t(j8e),d&&t(Yo),p(wy),p(Ly),p(By),p(xy),p(ky),d&&t(N8e),d&&t(ld),p(Ry),d&&t(D8e),d&&t(Ko),p(Sy),p($y),p(Iy),p(jy),p(Ny),d&&t(q8e),d&&t(cd),p(Dy),d&&t(G8e),d&&t(Zo),p(qy),p(Oy),p(Xy),p(zy),p(Vy),d&&t(O8e),d&&t(gd),p(Wy),d&&t(X8e),d&&t(er),p(Qy),p(Uy),p(Jy),p(Yy),p(Ky),d&&t(z8e),d&&t(pd),p(Zy),d&&t(V8e),d&&t(or),p(ew),p(rw),p(tw),p(aw),p(sw),d&&t(W8e),d&&t(vd),p(nw),d&&t(Q8e),d&&t(rr),p(lw),p(dw),p(cw),p(mw),p(fw),d&&t(H8e),d&&t(Cd),p(gw),d&&t(U8e),d&&t(tr),p(hw),p(pw),p(_w),p(bw),p(vw),d&&t(J8e),d&&t(yd),p(Tw),d&&t(Y8e),d&&t(ar),p(Fw),p(Mw),p(Ew),p(yw),p(ww),d&&t(K8e),d&&t(Ld),p(Aw),d&&t(Z8e),d&&t(sr),p(Lw),p(xw),p(kw),p(Rw),p(Sw),d&&t(e9e),d&&t(Rd),p(Pw),d&&t(o9e),d&&t(nr),p($w),p(jw),p(Nw),p(Dw),p(qw),d&&t(r9e),d&&t($d),p(Gw),d&&t(t9e),d&&t(lr),p(Ow),p(zw),p(Vw),p(Ww),p(Hw),d&&t(a9e),d&&t(Nd),p(Uw),d&&t(s9e),d&&t(ir),p(Jw),p(Kw),p(Zw),p(eA),p(oA),d&&t(n9e),d&&t(Od),p(rA),d&&t(l9e),d&&t(dr),p(tA),p(sA),p(nA),p(lA),p(iA),d&&t(i9e),d&&t(Wd),p(dA),d&&t(d9e),d&&t(cr),p(cA),p(fA),p(gA),p(hA),p(uA),d&&t(c9e),d&&t(Ud),p(pA),d&&t(m9e),d&&t(mr),p(_A),p(vA),p(TA),p(FA),p(CA),d&&t(f9e),d&&t(Kd),p(MA),d&&t(g9e),d&&t(fr),p(EA),p(wA),p(AA),p(LA),p(xA),d&&t(h9e),d&&t(oc),p(kA),d&&t(u9e),d&&t(gr),p(RA),p(PA),p($A),p(IA),p(jA),d&&t(p9e),d&&t(ac),p(NA),d&&t(_9e),d&&t(hr),p(DA),p(GA),p(OA),p(XA),p(zA),d&&t(b9e),d&&t(lc),p(VA),d&&t(v9e),d&&t(ur),p(WA),p(HA),p(UA),p(JA),p(YA),d&&t(T9e),d&&t(cc),p(KA),d&&t(F9e),d&&t(pr),p(ZA),p(o6),p(r6),p(t6),p(s6),d&&t(C9e),d&&t(gc),p(n6),d&&t(M9e),d&&t(_r),p(l6),p(d6),p(c6),p(m6),p(f6),d&&t(E9e),d&&t(pc),p(g6),d&&t(y9e),d&&t(br),p(h6),p(p6),p(_6),p(b6),p(v6),d&&t(w9e),d&&t(vc),p(T6),d&&t(A9e),d&&t(vr),p(F6),p(M6),p(E6),p(y6),p(w6),d&&t(L9e),d&&t(Cc),p(A6),d&&t(B9e),d&&t(Tr),p(L6),p(x6),p(k6),p(R6),p(S6),d&&t(x9e),d&&t(yc),p(P6),d&&t(k9e),d&&t(Fr),p($6),p(j6),p(N6),p(D6),p(q6),d&&t(R9e),d&&t(Lc),p(G6),d&&t(S9e),d&&t(Cr),p(O6),p(z6),p(V6),p(W6),p(Q6),d&&t(P9e),d&&t(kc),p(H6),d&&t($9e),d&&t(Mr),p(U6),p(Y6),p(K6),p(Z6),p(e0),d&&t(I9e),d&&t(Pc),p(o0),d&&t(j9e),d&&t(Er),p(r0),p(a0),p(s0),p(n0),p(l0),d&&t(N9e),d&&t(jc),p(i0),d&&t(D9e),d&&t(yr),p(d0),p(m0),p(f0),p(g0),p(h0),d&&t(q9e),d&&t(qc),p(u0),d&&t(G9e),d&&t(wr),p(p0),p(b0),p(v0),p(T0),p(F0),d&&t(O9e),d&&t(Xc),p(C0),d&&t(X9e),d&&t(Ar),p(M0),p(y0),p(w0),p(A0),p(L0),d&&t(z9e),d&&t(Wc),p(B0),d&&t(V9e),d&&t(Lr),p(x0),p(R0),p(S0),p(P0),p($0),d&&t(W9e),d&&t(Uc),p(I0),d&&t(Q9e),d&&t(Br),p(j0),p(D0),p(q0),p(G0),p(O0),d&&t(H9e),d&&t(Kc),p(X0),d&&t(U9e),d&&t(xr),p(z0),p(W0),p(Q0),p(H0),p(U0),d&&t(J9e),d&&t(om),p(J0),d&&t(Y9e),d&&t(kr),p(Y0),p(Z0),p(eL),p(oL),p(rL),d&&t(K9e),d&&t(am),p(tL),d&&t(Z9e),d&&t(Rr),p(aL),p(nL),p(lL),p(iL),p(dL),d&&t(eBe),d&&t(lm),p(cL),d&&t(oBe),d&&t(Sr),p(mL),p(gL),p(hL),p(uL),p(pL),d&&t(rBe),d&&t(cm),p(_L),d&&t(tBe),d&&t(Pr),p(bL),p(TL),p(FL),p(CL),p(ML),d&&t(aBe),d&&t(gm),p(EL),d&&t(sBe),d&&t($r),p(yL),p(AL),p(LL),p(BL),p(xL),d&&t(nBe),d&&t(pm),p(kL),d&&t(lBe),d&&t(Ir),p(RL),p(PL),p($L),p(IL),p(NL),d&&t(iBe),d&&t(vm),p(DL),d&&t(dBe),d&&t(jr),p(qL),p(OL),p(XL),p(zL),p(VL)}}}const Qpt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Hpt(yi,J,Ae){let{fw:ie}=J;return yi.$$set=fe=>{"fw"in fe&&Ae(0,ie=fe.fw)},[ie]}class o_t extends Dpt{constructor(J){super();qpt(this,J,Hpt,Wpt,Gpt,{fw:0})}}export{o_t as default,Qpt as metadata};
