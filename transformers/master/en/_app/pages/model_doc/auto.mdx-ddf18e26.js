import{S as ECt,i as yCt,s as wCt,e as a,k as l,w as m,t as o,M as ACt,c as s,d as t,m as i,a as n,x as f,h as r,b as c,F as e,g as b,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as Z9r}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function LCt(Ii){let J,Pe,de,ge,io,me,Te,Vo,ji,$m,ma,Di,Ni,W5,Im,Le,co,qi,qs,Q5,Os,Gs,H5,Oi,Xs,U5,Gi,jm,qa;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),me=a("code"),Te=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),$m=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),W5=o(")."),Im=l(),Le=a("p"),co=o("Likewise, if your "),qi=a("code"),qs=o("NewModel"),Q5=o(" is a subclass of "),Os=a("a"),Gs=o("PreTrainedModel"),H5=o(`, make sure its
`),Oi=a("code"),Xs=o("config_class"),U5=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jm=o("NewModelConfig"),qa=o(")."),this.h()},l(mo){J=s(mo,"P",{});var he=n(J);Pe=r(he,"If your "),de=s(he,"CODE",{});var N7=n(de);ge=r(N7,"NewModelConfig"),N7.forEach(t),io=r(he," is a subclass of "),me=s(he,"CODE",{});var Xi=n(me);Te=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(he,`, make sure its
`),ji=s(he,"CODE",{});var q7=n(ji);$m=r(q7,"model_type"),q7.forEach(t),ma=r(he," attribute is set to the same key you use when registering the config (here "),Di=s(he,"CODE",{});var O7=n(Di);Ni=r(O7,'"new-model"'),O7.forEach(t),W5=r(he,")."),he.forEach(t),Im=i(mo),Le=s(mo,"P",{});var zo=n(Le);co=r(zo,"Likewise, if your "),qi=s(zo,"CODE",{});var Oa=n(qi);qs=r(Oa,"NewModel"),Oa.forEach(t),Q5=r(zo," is a subclass of "),Os=s(zo,"A",{href:!0});var G7=n(Os);Gs=r(G7,"PreTrainedModel"),G7.forEach(t),H5=r(zo,`, make sure its
`),Oi=s(zo,"CODE",{});var Dm=n(Oi);Xs=r(Dm,"config_class"),Dm.forEach(t),U5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=s(zo,"CODE",{});var X7=n(Gi);jm=r(X7,"NewModelConfig"),X7.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){c(Os,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel")},m(mo,he){b(mo,J,he),e(J,Pe),e(J,de),e(de,ge),e(J,io),e(J,me),e(me,Te),e(J,Vo),e(J,ji),e(ji,$m),e(J,ma),e(J,Di),e(Di,Ni),e(J,W5),b(mo,Im,he),b(mo,Le,he),e(Le,co),e(Le,qi),e(qi,qs),e(Le,Q5),e(Le,Os),e(Os,Gs),e(Le,H5),e(Le,Oi),e(Oi,Xs),e(Le,U5),e(Le,Gi),e(Gi,jm),e(Le,qa)},d(mo){mo&&t(J),mo&&t(Im),mo&&t(Le)}}}function BCt(Ii){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Te=n(J);Pe=r(Te,"Passing "),de=s(Te,"CODE",{});var Vo=n(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(me,Te){b(me,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(me){me&&t(J)}}}function xCt(Ii){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Te=n(J);Pe=r(Te,"Passing "),de=s(Te,"CODE",{});var Vo=n(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(me,Te){b(me,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(me){me&&t(J)}}}function kCt(Ii){let J,Pe,de,ge,io,me,Te,Vo,ji,$m,ma,Di,Ni,W5,Im,Le,co,qi,qs,Q5,Os,Gs,H5,Oi,Xs,U5,Gi,jm,qa,mo,he,N7,Xi,q7,O7,zo,Oa,G7,Dm,X7,pPe,rxe,Vi,Nm,fQ,J5,_Pe,gQ,bPe,txe,Vs,vPe,hQ,TPe,FPe,uQ,CPe,MPe,axe,Y5,sxe,V7,EPe,nxe,qm,lxe,zi,Om,pQ,K5,yPe,_Q,wPe,ixe,Wo,Z5,APe,ey,LPe,z7,BPe,xPe,kPe,oy,RPe,bQ,SPe,PPe,$Pe,fo,ry,IPe,vQ,jPe,DPe,Wi,NPe,TQ,qPe,OPe,FQ,GPe,XPe,VPe,v,Gm,CQ,zPe,WPe,W7,QPe,HPe,UPe,Xm,MQ,JPe,YPe,Q7,KPe,ZPe,e$e,Vm,EQ,o$e,r$e,H7,t$e,a$e,s$e,zm,yQ,n$e,l$e,U7,i$e,d$e,c$e,Wm,wQ,m$e,f$e,J7,g$e,h$e,u$e,Qm,AQ,p$e,_$e,Y7,b$e,v$e,T$e,Hm,LQ,F$e,C$e,K7,M$e,E$e,y$e,Um,BQ,w$e,A$e,Z7,L$e,B$e,x$e,Jm,xQ,k$e,R$e,e9,S$e,P$e,$$e,Ym,kQ,I$e,j$e,o9,D$e,N$e,q$e,Km,RQ,O$e,G$e,r9,X$e,V$e,z$e,Zm,SQ,W$e,Q$e,t9,H$e,U$e,J$e,ef,PQ,Y$e,K$e,a9,Z$e,eIe,oIe,of,$Q,rIe,tIe,s9,aIe,sIe,nIe,rf,IQ,lIe,iIe,n9,dIe,cIe,mIe,tf,jQ,fIe,gIe,l9,hIe,uIe,pIe,af,DQ,_Ie,bIe,i9,vIe,TIe,FIe,sf,NQ,CIe,MIe,d9,EIe,yIe,wIe,nf,qQ,AIe,LIe,c9,BIe,xIe,kIe,lf,OQ,RIe,SIe,m9,PIe,$Ie,IIe,df,GQ,jIe,DIe,f9,NIe,qIe,OIe,cf,XQ,GIe,XIe,g9,VIe,zIe,WIe,mf,VQ,QIe,HIe,h9,UIe,JIe,YIe,ff,zQ,KIe,ZIe,u9,eje,oje,rje,gf,WQ,tje,aje,p9,sje,nje,lje,hf,QQ,ije,dje,_9,cje,mje,fje,uf,HQ,gje,hje,b9,uje,pje,_je,pf,UQ,bje,vje,v9,Tje,Fje,Cje,_f,JQ,Mje,Eje,T9,yje,wje,Aje,bf,YQ,Lje,Bje,F9,xje,kje,Rje,vf,KQ,Sje,Pje,C9,$je,Ije,jje,Tf,ZQ,Dje,Nje,M9,qje,Oje,Gje,Ff,eH,Xje,Vje,E9,zje,Wje,Qje,Cf,oH,Hje,Uje,y9,Jje,Yje,Kje,Mf,rH,Zje,eDe,w9,oDe,rDe,tDe,Ef,tH,aDe,sDe,A9,nDe,lDe,iDe,yf,aH,dDe,cDe,L9,mDe,fDe,gDe,wf,sH,hDe,uDe,B9,pDe,_De,bDe,Af,nH,vDe,TDe,x9,FDe,CDe,MDe,Lf,lH,EDe,yDe,k9,wDe,ADe,LDe,Bf,iH,BDe,xDe,R9,kDe,RDe,SDe,xf,dH,PDe,$De,S9,IDe,jDe,DDe,kf,cH,NDe,qDe,P9,ODe,GDe,XDe,Rf,mH,VDe,zDe,$9,WDe,QDe,HDe,Sf,fH,UDe,JDe,I9,YDe,KDe,ZDe,Pf,gH,eNe,oNe,j9,rNe,tNe,aNe,$f,hH,sNe,nNe,D9,lNe,iNe,dNe,If,uH,cNe,mNe,N9,fNe,gNe,hNe,jf,pH,uNe,pNe,q9,_Ne,bNe,vNe,Df,_H,TNe,FNe,O9,CNe,MNe,ENe,Nf,bH,yNe,wNe,G9,ANe,LNe,BNe,qf,vH,xNe,kNe,X9,RNe,SNe,PNe,Of,TH,$Ne,INe,V9,jNe,DNe,NNe,Gf,FH,qNe,ONe,z9,GNe,XNe,VNe,Xf,CH,zNe,WNe,W9,QNe,HNe,UNe,Vf,MH,JNe,YNe,Q9,KNe,ZNe,eqe,zf,EH,oqe,rqe,H9,tqe,aqe,sqe,Wf,yH,nqe,lqe,U9,iqe,dqe,cqe,Qf,wH,mqe,fqe,J9,gqe,hqe,uqe,Hf,AH,pqe,_qe,Y9,bqe,vqe,Tqe,Uf,LH,Fqe,Cqe,K9,Mqe,Eqe,yqe,Jf,BH,wqe,Aqe,Z9,Lqe,Bqe,xqe,Yf,xH,kqe,Rqe,eB,Sqe,Pqe,$qe,Kf,kH,Iqe,jqe,oB,Dqe,Nqe,qqe,Zf,RH,Oqe,Gqe,rB,Xqe,Vqe,zqe,eg,SH,Wqe,Qqe,tB,Hqe,Uqe,Jqe,og,PH,Yqe,Kqe,aB,Zqe,eOe,oOe,rg,$H,rOe,tOe,sB,aOe,sOe,nOe,tg,IH,lOe,iOe,nB,dOe,cOe,mOe,ag,jH,fOe,gOe,lB,hOe,uOe,pOe,sg,DH,_Oe,bOe,iB,vOe,TOe,FOe,ng,NH,COe,MOe,dB,EOe,yOe,wOe,lg,qH,AOe,LOe,cB,BOe,xOe,kOe,ig,OH,ROe,SOe,mB,POe,$Oe,IOe,dg,GH,jOe,DOe,fB,NOe,qOe,OOe,cg,XH,GOe,XOe,gB,VOe,zOe,WOe,mg,VH,QOe,HOe,hB,UOe,JOe,YOe,fg,zH,KOe,ZOe,uB,eGe,oGe,rGe,gg,WH,tGe,aGe,pB,sGe,nGe,lGe,hg,QH,iGe,dGe,_B,cGe,mGe,fGe,ug,HH,gGe,hGe,bB,uGe,pGe,_Ge,pg,UH,bGe,vGe,vB,TGe,FGe,CGe,_g,JH,MGe,EGe,TB,yGe,wGe,AGe,bg,YH,LGe,BGe,FB,xGe,kGe,RGe,vg,KH,SGe,PGe,CB,$Ge,IGe,jGe,Tg,ZH,DGe,NGe,MB,qGe,OGe,GGe,Fg,eU,XGe,VGe,EB,zGe,WGe,QGe,Cg,oU,HGe,UGe,yB,JGe,YGe,KGe,Mg,rU,ZGe,eXe,wB,oXe,rXe,tXe,Eg,tU,aXe,sXe,AB,nXe,lXe,iXe,yg,aU,dXe,cXe,LB,mXe,fXe,gXe,wg,sU,hXe,uXe,BB,pXe,_Xe,bXe,Ag,nU,vXe,TXe,xB,FXe,CXe,MXe,Lg,lU,EXe,yXe,kB,wXe,AXe,LXe,iU,BXe,xXe,ty,kXe,Bg,ay,RXe,dU,SXe,dxe,Qi,xg,cU,sy,PXe,mU,$Xe,cxe,Qo,ny,IXe,ly,jXe,RB,DXe,NXe,qXe,iy,OXe,fU,GXe,XXe,VXe,go,dy,zXe,gU,WXe,QXe,Ga,HXe,hU,UXe,JXe,uU,YXe,KXe,pU,ZXe,eVe,oVe,E,zs,_U,rVe,tVe,SB,aVe,sVe,PB,nVe,lVe,iVe,Ws,bU,dVe,cVe,$B,mVe,fVe,IB,gVe,hVe,uVe,Qs,vU,pVe,_Ve,jB,bVe,vVe,DB,TVe,FVe,CVe,kg,TU,MVe,EVe,NB,yVe,wVe,AVe,Hs,FU,LVe,BVe,qB,xVe,kVe,OB,RVe,SVe,PVe,Rg,CU,$Ve,IVe,GB,jVe,DVe,NVe,Sg,MU,qVe,OVe,XB,GVe,XVe,VVe,Pg,EU,zVe,WVe,VB,QVe,HVe,UVe,Us,yU,JVe,YVe,zB,KVe,ZVe,WB,eze,oze,rze,Js,wU,tze,aze,QB,sze,nze,HB,lze,ize,dze,Ys,AU,cze,mze,UB,fze,gze,JB,hze,uze,pze,$g,LU,_ze,bze,YB,vze,Tze,Fze,Ig,BU,Cze,Mze,KB,Eze,yze,wze,Ks,xU,Aze,Lze,ZB,Bze,xze,ex,kze,Rze,Sze,jg,kU,Pze,$ze,ox,Ize,jze,Dze,Zs,RU,Nze,qze,rx,Oze,Gze,tx,Xze,Vze,zze,en,SU,Wze,Qze,ax,Hze,Uze,sx,Jze,Yze,Kze,on,PU,Zze,eWe,nx,oWe,rWe,$U,tWe,aWe,sWe,Dg,IU,nWe,lWe,lx,iWe,dWe,cWe,rn,jU,mWe,fWe,ix,gWe,hWe,dx,uWe,pWe,_We,Ng,DU,bWe,vWe,cx,TWe,FWe,CWe,tn,NU,MWe,EWe,mx,yWe,wWe,fx,AWe,LWe,BWe,an,qU,xWe,kWe,gx,RWe,SWe,hx,PWe,$We,IWe,sn,OU,jWe,DWe,ux,NWe,qWe,px,OWe,GWe,XWe,qg,GU,VWe,zWe,_x,WWe,QWe,HWe,nn,XU,UWe,JWe,bx,YWe,KWe,vx,ZWe,eQe,oQe,Og,VU,rQe,tQe,Tx,aQe,sQe,nQe,ln,zU,lQe,iQe,Fx,dQe,cQe,Cx,mQe,fQe,gQe,dn,WU,hQe,uQe,Mx,pQe,_Qe,Ex,bQe,vQe,TQe,cn,QU,FQe,CQe,yx,MQe,EQe,wx,yQe,wQe,AQe,mn,HU,LQe,BQe,Ax,xQe,kQe,Lx,RQe,SQe,PQe,Gg,UU,$Qe,IQe,Bx,jQe,DQe,NQe,fn,JU,qQe,OQe,xx,GQe,XQe,kx,VQe,zQe,WQe,gn,YU,QQe,HQe,Rx,UQe,JQe,Sx,YQe,KQe,ZQe,hn,KU,eHe,oHe,Px,rHe,tHe,$x,aHe,sHe,nHe,un,ZU,lHe,iHe,Ix,dHe,cHe,jx,mHe,fHe,gHe,pn,eJ,hHe,uHe,Dx,pHe,_He,Nx,bHe,vHe,THe,_n,oJ,FHe,CHe,qx,MHe,EHe,Ox,yHe,wHe,AHe,Xg,rJ,LHe,BHe,Gx,xHe,kHe,RHe,bn,tJ,SHe,PHe,Xx,$He,IHe,Vx,jHe,DHe,NHe,Vg,aJ,qHe,OHe,zx,GHe,XHe,VHe,zg,sJ,zHe,WHe,Wx,QHe,HHe,UHe,vn,nJ,JHe,YHe,Qx,KHe,ZHe,Hx,eUe,oUe,rUe,Tn,lJ,tUe,aUe,Ux,sUe,nUe,Jx,lUe,iUe,dUe,Wg,iJ,cUe,mUe,Yx,fUe,gUe,hUe,Fn,dJ,uUe,pUe,Kx,_Ue,bUe,Zx,vUe,TUe,FUe,Cn,cJ,CUe,MUe,ek,EUe,yUe,ok,wUe,AUe,LUe,Mn,mJ,BUe,xUe,rk,kUe,RUe,tk,SUe,PUe,$Ue,En,fJ,IUe,jUe,ak,DUe,NUe,sk,qUe,OUe,GUe,yn,gJ,XUe,VUe,nk,zUe,WUe,lk,QUe,HUe,UUe,Qg,hJ,JUe,YUe,ik,KUe,ZUe,eJe,Hg,uJ,oJe,rJe,dk,tJe,aJe,sJe,Ug,pJ,nJe,lJe,ck,iJe,dJe,cJe,Jg,_J,mJe,fJe,mk,gJe,hJe,uJe,wn,bJ,pJe,_Je,fk,bJe,vJe,gk,TJe,FJe,CJe,Yg,vJ,MJe,EJe,hk,yJe,wJe,AJe,An,TJ,LJe,BJe,uk,xJe,kJe,pk,RJe,SJe,PJe,Ln,FJ,$Je,IJe,_k,jJe,DJe,bk,NJe,qJe,OJe,Bn,CJ,GJe,XJe,vk,VJe,zJe,Tk,WJe,QJe,HJe,xn,MJ,UJe,JJe,Fk,YJe,KJe,Ck,ZJe,eYe,oYe,kn,EJ,rYe,tYe,Mk,aYe,sYe,Ek,nYe,lYe,iYe,Rn,yJ,dYe,cYe,yk,mYe,fYe,wk,gYe,hYe,uYe,Kg,wJ,pYe,_Ye,Ak,bYe,vYe,TYe,Zg,AJ,FYe,CYe,Lk,MYe,EYe,yYe,Sn,LJ,wYe,AYe,Bk,LYe,BYe,xk,xYe,kYe,RYe,Pn,BJ,SYe,PYe,kk,$Ye,IYe,Rk,jYe,DYe,NYe,$n,xJ,qYe,OYe,Sk,GYe,XYe,Pk,VYe,zYe,WYe,eh,kJ,QYe,HYe,$k,UYe,JYe,YYe,oh,RJ,KYe,ZYe,Ik,eKe,oKe,rKe,rh,SJ,tKe,aKe,jk,sKe,nKe,lKe,th,PJ,iKe,dKe,Dk,cKe,mKe,fKe,In,$J,gKe,hKe,Nk,uKe,pKe,qk,_Ke,bKe,vKe,ah,IJ,TKe,FKe,Ok,CKe,MKe,EKe,sh,jJ,yKe,wKe,Gk,AKe,LKe,BKe,jn,DJ,xKe,kKe,Xk,RKe,SKe,Vk,PKe,$Ke,IKe,Dn,NJ,jKe,DKe,zk,NKe,qKe,Wk,OKe,GKe,XKe,qJ,VKe,zKe,cy,WKe,nh,my,QKe,OJ,HKe,mxe,Hi,lh,GJ,fy,UKe,XJ,JKe,fxe,Ho,gy,YKe,hy,KKe,Qk,ZKe,eZe,oZe,uy,rZe,VJ,tZe,aZe,sZe,$e,py,nZe,zJ,lZe,iZe,Xa,dZe,WJ,cZe,mZe,QJ,fZe,gZe,HJ,hZe,uZe,pZe,ae,ih,UJ,_Ze,bZe,Hk,vZe,TZe,FZe,dh,JJ,CZe,MZe,Uk,EZe,yZe,wZe,ch,YJ,AZe,LZe,Jk,BZe,xZe,kZe,mh,KJ,RZe,SZe,Yk,PZe,$Ze,IZe,fh,ZJ,jZe,DZe,Kk,NZe,qZe,OZe,gh,eY,GZe,XZe,Zk,VZe,zZe,WZe,hh,oY,QZe,HZe,eR,UZe,JZe,YZe,uh,rY,KZe,ZZe,oR,eeo,oeo,reo,ph,tY,teo,aeo,rR,seo,neo,leo,_h,aY,ieo,deo,tR,ceo,meo,feo,bh,sY,geo,heo,aR,ueo,peo,_eo,vh,nY,beo,veo,sR,Teo,Feo,Ceo,Th,lY,Meo,Eeo,nR,yeo,weo,Aeo,Fh,iY,Leo,Beo,lR,xeo,keo,Reo,Ch,dY,Seo,Peo,iR,$eo,Ieo,jeo,Mh,cY,Deo,Neo,dR,qeo,Oeo,Geo,Eh,Xeo,mY,Veo,zeo,_y,Weo,yh,by,Qeo,fY,Heo,gxe,Ui,wh,gY,vy,Ueo,hY,Jeo,hxe,Uo,Ty,Yeo,Fy,Keo,cR,Zeo,eoo,ooo,Cy,roo,uY,too,aoo,soo,Ie,My,noo,pY,loo,ioo,Ji,doo,_Y,coo,moo,bY,foo,goo,hoo,Be,Ah,vY,uoo,poo,mR,_oo,boo,voo,Lh,TY,Too,Foo,fR,Coo,Moo,Eoo,Bh,FY,yoo,woo,gR,Aoo,Loo,Boo,xh,CY,xoo,koo,hR,Roo,Soo,Poo,kh,MY,$oo,Ioo,uR,joo,Doo,Noo,Rh,EY,qoo,Ooo,pR,Goo,Xoo,Voo,Sh,yY,zoo,Woo,_R,Qoo,Hoo,Uoo,Ph,wY,Joo,Yoo,bR,Koo,Zoo,ero,$h,oro,AY,rro,tro,Ey,aro,Ih,yy,sro,LY,nro,uxe,Yi,jh,BY,wy,lro,xY,iro,pxe,Jo,Ay,dro,Ki,cro,kY,mro,fro,RY,gro,hro,uro,Ly,pro,SY,_ro,bro,vro,Vr,By,Tro,PY,Fro,Cro,Zi,Mro,$Y,Ero,yro,IY,wro,Aro,Lro,jY,Bro,xro,xy,kro,je,ky,Rro,DY,Sro,Pro,Va,$ro,NY,Iro,jro,qY,Dro,Nro,OY,qro,Oro,Gro,F,Dh,GY,Xro,Vro,vR,zro,Wro,Qro,Nh,XY,Hro,Uro,TR,Jro,Yro,Kro,qh,VY,Zro,eto,FR,oto,rto,tto,Oh,zY,ato,sto,CR,nto,lto,ito,Gh,WY,dto,cto,MR,mto,fto,gto,Xh,QY,hto,uto,ER,pto,_to,bto,Vh,HY,vto,Tto,yR,Fto,Cto,Mto,zh,UY,Eto,yto,wR,wto,Ato,Lto,Wh,JY,Bto,xto,AR,kto,Rto,Sto,Qh,YY,Pto,$to,LR,Ito,jto,Dto,Hh,KY,Nto,qto,BR,Oto,Gto,Xto,Uh,ZY,Vto,zto,xR,Wto,Qto,Hto,Jh,eK,Uto,Jto,kR,Yto,Kto,Zto,Yh,oK,eao,oao,RR,rao,tao,aao,Kh,rK,sao,nao,SR,lao,iao,dao,Zh,tK,cao,mao,PR,fao,gao,hao,eu,aK,uao,pao,$R,_ao,bao,vao,ou,sK,Tao,Fao,IR,Cao,Mao,Eao,ru,nK,yao,wao,jR,Aao,Lao,Bao,tu,lK,xao,kao,DR,Rao,Sao,Pao,au,iK,$ao,Iao,NR,jao,Dao,Nao,su,dK,qao,Oao,qR,Gao,Xao,Vao,nu,cK,zao,Wao,OR,Qao,Hao,Uao,lu,mK,Jao,Yao,GR,Kao,Zao,eso,iu,fK,oso,rso,XR,tso,aso,sso,du,gK,nso,lso,VR,iso,dso,cso,cu,hK,mso,fso,zR,gso,hso,uso,Nn,uK,pso,_so,WR,bso,vso,QR,Tso,Fso,Cso,mu,pK,Mso,Eso,HR,yso,wso,Aso,fu,_K,Lso,Bso,UR,xso,kso,Rso,gu,bK,Sso,Pso,JR,$so,Iso,jso,hu,vK,Dso,Nso,YR,qso,Oso,Gso,uu,TK,Xso,Vso,KR,zso,Wso,Qso,pu,FK,Hso,Uso,ZR,Jso,Yso,Kso,_u,CK,Zso,eno,eS,ono,rno,tno,bu,MK,ano,sno,oS,nno,lno,ino,vu,EK,dno,cno,rS,mno,fno,gno,Tu,yK,hno,uno,tS,pno,_no,bno,Fu,wK,vno,Tno,aS,Fno,Cno,Mno,Cu,AK,Eno,yno,sS,wno,Ano,Lno,Mu,LK,Bno,xno,nS,kno,Rno,Sno,Eu,BK,Pno,$no,lS,Ino,jno,Dno,yu,xK,Nno,qno,iS,Ono,Gno,Xno,wu,kK,Vno,zno,dS,Wno,Qno,Hno,Au,RK,Uno,Jno,cS,Yno,Kno,Zno,Lu,SK,elo,olo,mS,rlo,tlo,alo,Bu,PK,slo,nlo,fS,llo,ilo,dlo,xu,$K,clo,mlo,gS,flo,glo,hlo,ku,IK,ulo,plo,hS,_lo,blo,vlo,Ru,jK,Tlo,Flo,uS,Clo,Mlo,Elo,Su,DK,ylo,wlo,pS,Alo,Llo,Blo,Pu,NK,xlo,klo,_S,Rlo,Slo,Plo,$u,qK,$lo,Ilo,bS,jlo,Dlo,Nlo,Iu,OK,qlo,Olo,vS,Glo,Xlo,Vlo,ju,GK,zlo,Wlo,TS,Qlo,Hlo,Ulo,Du,XK,Jlo,Ylo,FS,Klo,Zlo,eio,Nu,VK,oio,rio,CS,tio,aio,sio,qu,zK,nio,lio,MS,iio,dio,cio,Ou,WK,mio,fio,ES,gio,hio,uio,Gu,QK,pio,_io,yS,bio,vio,Tio,Xu,HK,Fio,Cio,wS,Mio,Eio,yio,Vu,UK,wio,Aio,AS,Lio,Bio,xio,zu,JK,kio,Rio,LS,Sio,Pio,$io,Wu,YK,Iio,jio,BS,Dio,Nio,qio,Qu,KK,Oio,Gio,xS,Xio,Vio,zio,Hu,ZK,Wio,Qio,kS,Hio,Uio,Jio,Uu,eZ,Yio,Kio,RS,Zio,edo,odo,Ju,oZ,rdo,tdo,SS,ado,sdo,ndo,Yu,rZ,ldo,ido,PS,ddo,cdo,mdo,Ku,tZ,fdo,gdo,$S,hdo,udo,pdo,Zu,aZ,_do,bdo,IS,vdo,Tdo,Fdo,ep,sZ,Cdo,Mdo,jS,Edo,ydo,wdo,op,nZ,Ado,Ldo,DS,Bdo,xdo,kdo,rp,lZ,Rdo,Sdo,NS,Pdo,$do,Ido,tp,iZ,jdo,Ddo,qS,Ndo,qdo,Odo,ap,dZ,Gdo,Xdo,OS,Vdo,zdo,Wdo,sp,cZ,Qdo,Hdo,GS,Udo,Jdo,Ydo,np,mZ,Kdo,Zdo,XS,eco,oco,rco,lp,fZ,tco,aco,VS,sco,nco,lco,ip,gZ,ico,dco,zS,cco,mco,fco,dp,hZ,gco,hco,WS,uco,pco,_co,cp,uZ,bco,vco,QS,Tco,Fco,Cco,mp,pZ,Mco,Eco,HS,yco,wco,Aco,fp,_Z,Lco,Bco,US,xco,kco,Rco,gp,bZ,Sco,Pco,JS,$co,Ico,jco,hp,vZ,Dco,Nco,YS,qco,Oco,Gco,up,TZ,Xco,Vco,KS,zco,Wco,Qco,pp,Hco,FZ,Uco,Jco,CZ,Yco,Kco,MZ,Zco,emo,Ry,_xe,ed,_p,EZ,Sy,omo,yZ,rmo,bxe,Yo,Py,tmo,od,amo,wZ,smo,nmo,AZ,lmo,imo,dmo,$y,cmo,LZ,mmo,fmo,gmo,zr,Iy,hmo,BZ,umo,pmo,rd,_mo,xZ,bmo,vmo,kZ,Tmo,Fmo,Cmo,RZ,Mmo,Emo,jy,ymo,De,Dy,wmo,SZ,Amo,Lmo,za,Bmo,PZ,xmo,kmo,$Z,Rmo,Smo,IZ,Pmo,$mo,Imo,k,bp,jZ,jmo,Dmo,ZS,Nmo,qmo,Omo,vp,DZ,Gmo,Xmo,eP,Vmo,zmo,Wmo,Tp,NZ,Qmo,Hmo,oP,Umo,Jmo,Ymo,Fp,qZ,Kmo,Zmo,rP,efo,ofo,rfo,Cp,OZ,tfo,afo,tP,sfo,nfo,lfo,Mp,GZ,ifo,dfo,aP,cfo,mfo,ffo,Ep,XZ,gfo,hfo,sP,ufo,pfo,_fo,yp,VZ,bfo,vfo,nP,Tfo,Ffo,Cfo,wp,zZ,Mfo,Efo,lP,yfo,wfo,Afo,Ap,WZ,Lfo,Bfo,iP,xfo,kfo,Rfo,Lp,QZ,Sfo,Pfo,dP,$fo,Ifo,jfo,Bp,HZ,Dfo,Nfo,cP,qfo,Ofo,Gfo,xp,UZ,Xfo,Vfo,mP,zfo,Wfo,Qfo,kp,JZ,Hfo,Ufo,fP,Jfo,Yfo,Kfo,Rp,YZ,Zfo,ego,gP,ogo,rgo,tgo,Sp,KZ,ago,sgo,hP,ngo,lgo,igo,Pp,ZZ,dgo,cgo,uP,mgo,fgo,ggo,$p,eee,hgo,ugo,pP,pgo,_go,bgo,Ip,oee,vgo,Tgo,_P,Fgo,Cgo,Mgo,jp,ree,Ego,ygo,bP,wgo,Ago,Lgo,Dp,tee,Bgo,xgo,vP,kgo,Rgo,Sgo,Np,aee,Pgo,$go,TP,Igo,jgo,Dgo,qp,see,Ngo,qgo,FP,Ogo,Ggo,Xgo,Op,nee,Vgo,zgo,CP,Wgo,Qgo,Hgo,Gp,lee,Ugo,Jgo,MP,Ygo,Kgo,Zgo,Xp,iee,eho,oho,EP,rho,tho,aho,Vp,dee,sho,nho,yP,lho,iho,dho,zp,cee,cho,mho,wP,fho,gho,hho,Wp,mee,uho,pho,AP,_ho,bho,vho,Qp,fee,Tho,Fho,LP,Cho,Mho,Eho,Hp,gee,yho,who,BP,Aho,Lho,Bho,Up,hee,xho,kho,xP,Rho,Sho,Pho,Jp,uee,$ho,Iho,kP,jho,Dho,Nho,Yp,pee,qho,Oho,RP,Gho,Xho,Vho,Kp,_ee,zho,Who,SP,Qho,Hho,Uho,Zp,bee,Jho,Yho,PP,Kho,Zho,euo,e_,vee,ouo,ruo,$P,tuo,auo,suo,o_,Tee,nuo,luo,IP,iuo,duo,cuo,r_,Fee,muo,fuo,jP,guo,huo,uuo,t_,puo,Cee,_uo,buo,Mee,vuo,Tuo,Eee,Fuo,Cuo,Ny,vxe,td,a_,yee,qy,Muo,wee,Euo,Txe,Ko,Oy,yuo,ad,wuo,Aee,Auo,Luo,Lee,Buo,xuo,kuo,Gy,Ruo,Bee,Suo,Puo,$uo,Wr,Xy,Iuo,xee,juo,Duo,sd,Nuo,kee,quo,Ouo,Ree,Guo,Xuo,Vuo,See,zuo,Wuo,Vy,Quo,Ne,zy,Huo,Pee,Uuo,Juo,Wa,Yuo,$ee,Kuo,Zuo,Iee,epo,opo,jee,rpo,tpo,apo,$,s_,Dee,spo,npo,DP,lpo,ipo,dpo,n_,Nee,cpo,mpo,NP,fpo,gpo,hpo,l_,qee,upo,ppo,qP,_po,bpo,vpo,i_,Oee,Tpo,Fpo,OP,Cpo,Mpo,Epo,d_,Gee,ypo,wpo,GP,Apo,Lpo,Bpo,c_,Xee,xpo,kpo,XP,Rpo,Spo,Ppo,m_,Vee,$po,Ipo,VP,jpo,Dpo,Npo,f_,zee,qpo,Opo,zP,Gpo,Xpo,Vpo,g_,Wee,zpo,Wpo,WP,Qpo,Hpo,Upo,h_,Qee,Jpo,Ypo,QP,Kpo,Zpo,e_o,u_,Hee,o_o,r_o,HP,t_o,a_o,s_o,p_,Uee,n_o,l_o,UP,i_o,d_o,c_o,__,Jee,m_o,f_o,JP,g_o,h_o,u_o,b_,Yee,p_o,__o,YP,b_o,v_o,T_o,v_,Kee,F_o,C_o,KP,M_o,E_o,y_o,T_,Zee,w_o,A_o,ZP,L_o,B_o,x_o,F_,eoe,k_o,R_o,e$,S_o,P_o,$_o,C_,ooe,I_o,j_o,o$,D_o,N_o,q_o,M_,roe,O_o,G_o,r$,X_o,V_o,z_o,E_,toe,W_o,Q_o,t$,H_o,U_o,J_o,y_,aoe,Y_o,K_o,a$,Z_o,ebo,obo,w_,soe,rbo,tbo,s$,abo,sbo,nbo,A_,noe,lbo,ibo,n$,dbo,cbo,mbo,L_,loe,fbo,gbo,l$,hbo,ubo,pbo,B_,ioe,_bo,bbo,i$,vbo,Tbo,Fbo,x_,doe,Cbo,Mbo,d$,Ebo,ybo,wbo,k_,coe,Abo,Lbo,c$,Bbo,xbo,kbo,R_,moe,Rbo,Sbo,m$,Pbo,$bo,Ibo,S_,foe,jbo,Dbo,f$,Nbo,qbo,Obo,P_,goe,Gbo,Xbo,g$,Vbo,zbo,Wbo,$_,hoe,Qbo,Hbo,h$,Ubo,Jbo,Ybo,I_,uoe,Kbo,Zbo,u$,e2o,o2o,r2o,j_,poe,t2o,a2o,p$,s2o,n2o,l2o,D_,_oe,i2o,d2o,_$,c2o,m2o,f2o,N_,boe,g2o,h2o,b$,u2o,p2o,_2o,q_,b2o,voe,v2o,T2o,Toe,F2o,C2o,Foe,M2o,E2o,Wy,Fxe,nd,O_,Coe,Qy,y2o,Moe,w2o,Cxe,Zo,Hy,A2o,ld,L2o,Eoe,B2o,x2o,yoe,k2o,R2o,S2o,Uy,P2o,woe,$2o,I2o,j2o,Qr,Jy,D2o,Aoe,N2o,q2o,id,O2o,Loe,G2o,X2o,Boe,V2o,z2o,W2o,xoe,Q2o,H2o,Yy,U2o,qe,Ky,J2o,koe,Y2o,K2o,Qa,Z2o,Roe,evo,ovo,Soe,rvo,tvo,Poe,avo,svo,nvo,I,G_,$oe,lvo,ivo,v$,dvo,cvo,mvo,X_,Ioe,fvo,gvo,T$,hvo,uvo,pvo,V_,joe,_vo,bvo,F$,vvo,Tvo,Fvo,z_,Doe,Cvo,Mvo,C$,Evo,yvo,wvo,W_,Noe,Avo,Lvo,M$,Bvo,xvo,kvo,Q_,qoe,Rvo,Svo,E$,Pvo,$vo,Ivo,H_,Ooe,jvo,Dvo,y$,Nvo,qvo,Ovo,U_,Goe,Gvo,Xvo,w$,Vvo,zvo,Wvo,J_,Xoe,Qvo,Hvo,A$,Uvo,Jvo,Yvo,Y_,Voe,Kvo,Zvo,L$,eTo,oTo,rTo,K_,zoe,tTo,aTo,B$,sTo,nTo,lTo,Z_,Woe,iTo,dTo,x$,cTo,mTo,fTo,eb,Qoe,gTo,hTo,k$,uTo,pTo,_To,ob,Hoe,bTo,vTo,R$,TTo,FTo,CTo,rb,Uoe,MTo,ETo,S$,yTo,wTo,ATo,tb,Joe,LTo,BTo,P$,xTo,kTo,RTo,ab,Yoe,STo,PTo,$$,$To,ITo,jTo,sb,Koe,DTo,NTo,I$,qTo,OTo,GTo,nb,Zoe,XTo,VTo,j$,zTo,WTo,QTo,lb,ere,HTo,UTo,D$,JTo,YTo,KTo,ib,ore,ZTo,e1o,N$,o1o,r1o,t1o,db,rre,a1o,s1o,q$,n1o,l1o,i1o,cb,tre,d1o,c1o,O$,m1o,f1o,g1o,mb,are,h1o,u1o,G$,p1o,_1o,b1o,fb,sre,v1o,T1o,X$,F1o,C1o,M1o,gb,nre,E1o,y1o,V$,w1o,A1o,L1o,hb,lre,B1o,x1o,z$,k1o,R1o,S1o,ub,ire,P1o,$1o,W$,I1o,j1o,D1o,pb,dre,N1o,q1o,Q$,O1o,G1o,X1o,_b,cre,V1o,z1o,H$,W1o,Q1o,H1o,bb,mre,U1o,J1o,fre,Y1o,K1o,Z1o,vb,gre,eFo,oFo,U$,rFo,tFo,aFo,Tb,hre,sFo,nFo,J$,lFo,iFo,dFo,Fb,ure,cFo,mFo,Y$,fFo,gFo,hFo,Cb,pre,uFo,pFo,K$,_Fo,bFo,vFo,Mb,TFo,_re,FFo,CFo,bre,MFo,EFo,vre,yFo,wFo,Zy,Mxe,dd,Eb,Tre,ew,AFo,Fre,LFo,Exe,er,ow,BFo,cd,xFo,Cre,kFo,RFo,Mre,SFo,PFo,$Fo,rw,IFo,Ere,jFo,DFo,NFo,Hr,tw,qFo,yre,OFo,GFo,md,XFo,wre,VFo,zFo,Are,WFo,QFo,HFo,Lre,UFo,JFo,aw,YFo,Oe,sw,KFo,Bre,ZFo,eCo,Ha,oCo,xre,rCo,tCo,kre,aCo,sCo,Rre,nCo,lCo,iCo,se,yb,Sre,dCo,cCo,Z$,mCo,fCo,gCo,wb,Pre,hCo,uCo,eI,pCo,_Co,bCo,Ab,$re,vCo,TCo,oI,FCo,CCo,MCo,Lb,Ire,ECo,yCo,rI,wCo,ACo,LCo,Bb,jre,BCo,xCo,tI,kCo,RCo,SCo,xb,Dre,PCo,$Co,aI,ICo,jCo,DCo,kb,Nre,NCo,qCo,sI,OCo,GCo,XCo,Rb,qre,VCo,zCo,nI,WCo,QCo,HCo,Sb,Ore,UCo,JCo,lI,YCo,KCo,ZCo,Pb,Gre,eMo,oMo,iI,rMo,tMo,aMo,$b,Xre,sMo,nMo,dI,lMo,iMo,dMo,Ib,Vre,cMo,mMo,cI,fMo,gMo,hMo,jb,zre,uMo,pMo,mI,_Mo,bMo,vMo,Db,Wre,TMo,FMo,fI,CMo,MMo,EMo,Nb,Qre,yMo,wMo,gI,AMo,LMo,BMo,qb,Hre,xMo,kMo,hI,RMo,SMo,PMo,Ob,$Mo,Ure,IMo,jMo,Jre,DMo,NMo,Yre,qMo,OMo,nw,yxe,fd,Gb,Kre,lw,GMo,Zre,XMo,wxe,or,iw,VMo,gd,zMo,ete,WMo,QMo,ote,HMo,UMo,JMo,dw,YMo,rte,KMo,ZMo,e4o,Ur,cw,o4o,tte,r4o,t4o,hd,a4o,ate,s4o,n4o,ste,l4o,i4o,d4o,nte,c4o,m4o,mw,f4o,Ge,fw,g4o,lte,h4o,u4o,Ua,p4o,ite,_4o,b4o,dte,v4o,T4o,cte,F4o,C4o,M4o,A,Xb,mte,E4o,y4o,uI,w4o,A4o,L4o,Vb,fte,B4o,x4o,pI,k4o,R4o,S4o,zb,gte,P4o,$4o,_I,I4o,j4o,D4o,Wb,hte,N4o,q4o,bI,O4o,G4o,X4o,Qb,ute,V4o,z4o,vI,W4o,Q4o,H4o,Hb,pte,U4o,J4o,TI,Y4o,K4o,Z4o,Ub,_te,eEo,oEo,FI,rEo,tEo,aEo,Jb,bte,sEo,nEo,CI,lEo,iEo,dEo,Yb,vte,cEo,mEo,MI,fEo,gEo,hEo,Kb,Tte,uEo,pEo,EI,_Eo,bEo,vEo,Zb,Fte,TEo,FEo,yI,CEo,MEo,EEo,e2,Cte,yEo,wEo,wI,AEo,LEo,BEo,o2,Mte,xEo,kEo,AI,REo,SEo,PEo,r2,Ete,$Eo,IEo,LI,jEo,DEo,NEo,t2,yte,qEo,OEo,BI,GEo,XEo,VEo,a2,wte,zEo,WEo,xI,QEo,HEo,UEo,s2,Ate,JEo,YEo,kI,KEo,ZEo,e3o,n2,Lte,o3o,r3o,RI,t3o,a3o,s3o,l2,Bte,n3o,l3o,SI,i3o,d3o,c3o,i2,xte,m3o,f3o,PI,g3o,h3o,u3o,d2,kte,p3o,_3o,$I,b3o,v3o,T3o,c2,Rte,F3o,C3o,II,M3o,E3o,y3o,m2,Ste,w3o,A3o,jI,L3o,B3o,x3o,f2,Pte,k3o,R3o,DI,S3o,P3o,$3o,g2,$te,I3o,j3o,NI,D3o,N3o,q3o,h2,Ite,O3o,G3o,qI,X3o,V3o,z3o,u2,jte,W3o,Q3o,OI,H3o,U3o,J3o,p2,Dte,Y3o,K3o,GI,Z3o,e5o,o5o,_2,Nte,r5o,t5o,XI,a5o,s5o,n5o,b2,qte,l5o,i5o,VI,d5o,c5o,m5o,v2,Ote,f5o,g5o,zI,h5o,u5o,p5o,T2,Gte,_5o,b5o,WI,v5o,T5o,F5o,F2,Xte,C5o,M5o,QI,E5o,y5o,w5o,C2,Vte,A5o,L5o,HI,B5o,x5o,k5o,M2,zte,R5o,S5o,UI,P5o,$5o,I5o,E2,Wte,j5o,D5o,JI,N5o,q5o,O5o,y2,Qte,G5o,X5o,YI,V5o,z5o,W5o,w2,Hte,Q5o,H5o,KI,U5o,J5o,Y5o,A2,Ute,K5o,Z5o,ZI,eyo,oyo,ryo,L2,Jte,tyo,ayo,ej,syo,nyo,lyo,B2,Yte,iyo,dyo,oj,cyo,myo,fyo,x2,Kte,gyo,hyo,rj,uyo,pyo,_yo,k2,Zte,byo,vyo,tj,Tyo,Fyo,Cyo,R2,eae,Myo,Eyo,aj,yyo,wyo,Ayo,S2,oae,Lyo,Byo,sj,xyo,kyo,Ryo,P2,rae,Syo,Pyo,nj,$yo,Iyo,jyo,$2,Dyo,tae,Nyo,qyo,aae,Oyo,Gyo,sae,Xyo,Vyo,gw,Axe,ud,I2,nae,hw,zyo,lae,Wyo,Lxe,rr,uw,Qyo,pd,Hyo,iae,Uyo,Jyo,dae,Yyo,Kyo,Zyo,pw,ewo,cae,owo,rwo,two,Jr,_w,awo,mae,swo,nwo,_d,lwo,fae,iwo,dwo,gae,cwo,mwo,fwo,hae,gwo,hwo,bw,uwo,Xe,vw,pwo,uae,_wo,bwo,Ja,vwo,pae,Two,Fwo,_ae,Cwo,Mwo,bae,Ewo,ywo,wwo,O,j2,vae,Awo,Lwo,lj,Bwo,xwo,kwo,D2,Tae,Rwo,Swo,ij,Pwo,$wo,Iwo,N2,Fae,jwo,Dwo,dj,Nwo,qwo,Owo,q2,Cae,Gwo,Xwo,cj,Vwo,zwo,Wwo,O2,Mae,Qwo,Hwo,mj,Uwo,Jwo,Ywo,G2,Eae,Kwo,Zwo,fj,e6o,o6o,r6o,X2,yae,t6o,a6o,gj,s6o,n6o,l6o,V2,wae,i6o,d6o,hj,c6o,m6o,f6o,z2,Aae,g6o,h6o,uj,u6o,p6o,_6o,W2,Lae,b6o,v6o,pj,T6o,F6o,C6o,Q2,Bae,M6o,E6o,_j,y6o,w6o,A6o,H2,xae,L6o,B6o,bj,x6o,k6o,R6o,U2,kae,S6o,P6o,vj,$6o,I6o,j6o,J2,Rae,D6o,N6o,Tj,q6o,O6o,G6o,Y2,Sae,X6o,V6o,Fj,z6o,W6o,Q6o,K2,Pae,H6o,U6o,Cj,J6o,Y6o,K6o,Z2,$ae,Z6o,eAo,Mj,oAo,rAo,tAo,ev,Iae,aAo,sAo,Ej,nAo,lAo,iAo,ov,jae,dAo,cAo,yj,mAo,fAo,gAo,rv,Dae,hAo,uAo,wj,pAo,_Ao,bAo,tv,Nae,vAo,TAo,Aj,FAo,CAo,MAo,av,qae,EAo,yAo,Lj,wAo,AAo,LAo,sv,Oae,BAo,xAo,Bj,kAo,RAo,SAo,nv,Gae,PAo,$Ao,xj,IAo,jAo,DAo,lv,Xae,NAo,qAo,kj,OAo,GAo,XAo,iv,Vae,VAo,zAo,Rj,WAo,QAo,HAo,dv,zae,UAo,JAo,Sj,YAo,KAo,ZAo,cv,Wae,e0o,o0o,Pj,r0o,t0o,a0o,mv,s0o,Qae,n0o,l0o,Hae,i0o,d0o,Uae,c0o,m0o,Tw,Bxe,bd,fv,Jae,Fw,f0o,Yae,g0o,xxe,tr,Cw,h0o,vd,u0o,Kae,p0o,_0o,Zae,b0o,v0o,T0o,Mw,F0o,ese,C0o,M0o,E0o,Yr,Ew,y0o,ose,w0o,A0o,Td,L0o,rse,B0o,x0o,tse,k0o,R0o,S0o,ase,P0o,$0o,yw,I0o,Ve,ww,j0o,sse,D0o,N0o,Ya,q0o,nse,O0o,G0o,lse,X0o,V0o,ise,z0o,W0o,Q0o,da,gv,dse,H0o,U0o,$j,J0o,Y0o,K0o,hv,cse,Z0o,eLo,Ij,oLo,rLo,tLo,uv,mse,aLo,sLo,jj,nLo,lLo,iLo,pv,fse,dLo,cLo,Dj,mLo,fLo,gLo,_v,gse,hLo,uLo,Nj,pLo,_Lo,bLo,bv,vLo,hse,TLo,FLo,use,CLo,MLo,pse,ELo,yLo,Aw,kxe,Fd,vv,_se,Lw,wLo,bse,ALo,Rxe,ar,Bw,LLo,Cd,BLo,vse,xLo,kLo,Tse,RLo,SLo,PLo,xw,$Lo,Fse,ILo,jLo,DLo,Kr,kw,NLo,Cse,qLo,OLo,Md,GLo,Mse,XLo,VLo,Ese,zLo,WLo,QLo,yse,HLo,ULo,Rw,JLo,ze,Sw,YLo,wse,KLo,ZLo,Ka,e8o,Ase,o8o,r8o,Lse,t8o,a8o,Bse,s8o,n8o,l8o,N,Tv,xse,i8o,d8o,qj,c8o,m8o,f8o,Fv,kse,g8o,h8o,Oj,u8o,p8o,_8o,Cv,Rse,b8o,v8o,Gj,T8o,F8o,C8o,Mv,Sse,M8o,E8o,Xj,y8o,w8o,A8o,Ev,Pse,L8o,B8o,Vj,x8o,k8o,R8o,yv,$se,S8o,P8o,zj,$8o,I8o,j8o,wv,Ise,D8o,N8o,Wj,q8o,O8o,G8o,Av,jse,X8o,V8o,Qj,z8o,W8o,Q8o,Lv,Dse,H8o,U8o,Hj,J8o,Y8o,K8o,Bv,Nse,Z8o,e7o,Uj,o7o,r7o,t7o,xv,qse,a7o,s7o,Jj,n7o,l7o,i7o,kv,Ose,d7o,c7o,Yj,m7o,f7o,g7o,Rv,Gse,h7o,u7o,Kj,p7o,_7o,b7o,Sv,Xse,v7o,T7o,Zj,F7o,C7o,M7o,Pv,Vse,E7o,y7o,eD,w7o,A7o,L7o,$v,zse,B7o,x7o,oD,k7o,R7o,S7o,Iv,Wse,P7o,$7o,rD,I7o,j7o,D7o,jv,Qse,N7o,q7o,tD,O7o,G7o,X7o,Dv,Hse,V7o,z7o,aD,W7o,Q7o,H7o,Nv,Use,U7o,J7o,sD,Y7o,K7o,Z7o,qv,Jse,e9o,o9o,nD,r9o,t9o,a9o,Ov,Yse,s9o,n9o,lD,l9o,i9o,d9o,Gv,Kse,c9o,m9o,iD,f9o,g9o,h9o,Xv,Zse,u9o,p9o,dD,_9o,b9o,v9o,Vv,ene,T9o,F9o,cD,C9o,M9o,E9o,zv,one,y9o,w9o,mD,A9o,L9o,B9o,Wv,rne,x9o,k9o,fD,R9o,S9o,P9o,Qv,tne,$9o,I9o,gD,j9o,D9o,N9o,Hv,ane,q9o,O9o,hD,G9o,X9o,V9o,Uv,sne,z9o,W9o,uD,Q9o,H9o,U9o,Jv,nne,J9o,Y9o,pD,K9o,Z9o,eBo,Yv,lne,oBo,rBo,_D,tBo,aBo,sBo,Kv,ine,nBo,lBo,bD,iBo,dBo,cBo,Zv,mBo,dne,fBo,gBo,cne,hBo,uBo,mne,pBo,_Bo,Pw,Sxe,Ed,eT,fne,$w,bBo,gne,vBo,Pxe,sr,Iw,TBo,yd,FBo,hne,CBo,MBo,une,EBo,yBo,wBo,jw,ABo,pne,LBo,BBo,xBo,Zr,Dw,kBo,_ne,RBo,SBo,wd,PBo,bne,$Bo,IBo,vne,jBo,DBo,NBo,Tne,qBo,OBo,Nw,GBo,We,qw,XBo,Fne,VBo,zBo,Za,WBo,Cne,QBo,HBo,Mne,UBo,JBo,Ene,YBo,KBo,ZBo,R,oT,yne,exo,oxo,vD,rxo,txo,axo,rT,wne,sxo,nxo,TD,lxo,ixo,dxo,tT,Ane,cxo,mxo,FD,fxo,gxo,hxo,aT,Lne,uxo,pxo,CD,_xo,bxo,vxo,sT,Bne,Txo,Fxo,MD,Cxo,Mxo,Exo,nT,xne,yxo,wxo,ED,Axo,Lxo,Bxo,lT,kne,xxo,kxo,yD,Rxo,Sxo,Pxo,iT,Rne,$xo,Ixo,wD,jxo,Dxo,Nxo,dT,Sne,qxo,Oxo,AD,Gxo,Xxo,Vxo,cT,Pne,zxo,Wxo,LD,Qxo,Hxo,Uxo,mT,$ne,Jxo,Yxo,BD,Kxo,Zxo,eko,fT,Ine,oko,rko,xD,tko,ako,sko,gT,jne,nko,lko,kD,iko,dko,cko,hT,Dne,mko,fko,RD,gko,hko,uko,uT,Nne,pko,_ko,SD,bko,vko,Tko,pT,qne,Fko,Cko,PD,Mko,Eko,yko,_T,One,wko,Ako,$D,Lko,Bko,xko,bT,Gne,kko,Rko,ID,Sko,Pko,$ko,vT,Xne,Iko,jko,jD,Dko,Nko,qko,TT,Vne,Oko,Gko,DD,Xko,Vko,zko,FT,zne,Wko,Qko,ND,Hko,Uko,Jko,CT,Wne,Yko,Kko,qD,Zko,eRo,oRo,MT,Qne,rRo,tRo,OD,aRo,sRo,nRo,ET,Hne,lRo,iRo,GD,dRo,cRo,mRo,yT,Une,fRo,gRo,XD,hRo,uRo,pRo,wT,Jne,_Ro,bRo,VD,vRo,TRo,FRo,AT,Yne,CRo,MRo,zD,ERo,yRo,wRo,LT,Kne,ARo,LRo,WD,BRo,xRo,kRo,BT,Zne,RRo,SRo,QD,PRo,$Ro,IRo,xT,ele,jRo,DRo,HD,NRo,qRo,ORo,kT,ole,GRo,XRo,UD,VRo,zRo,WRo,RT,rle,QRo,HRo,JD,URo,JRo,YRo,ST,tle,KRo,ZRo,YD,eSo,oSo,rSo,PT,ale,tSo,aSo,KD,sSo,nSo,lSo,$T,sle,iSo,dSo,ZD,cSo,mSo,fSo,IT,nle,gSo,hSo,eN,uSo,pSo,_So,jT,lle,bSo,vSo,oN,TSo,FSo,CSo,DT,ile,MSo,ESo,rN,ySo,wSo,ASo,NT,dle,LSo,BSo,tN,xSo,kSo,RSo,qT,SSo,cle,PSo,$So,mle,ISo,jSo,fle,DSo,NSo,Ow,$xe,Ad,OT,gle,Gw,qSo,hle,OSo,Ixe,nr,Xw,GSo,Ld,XSo,ule,VSo,zSo,ple,WSo,QSo,HSo,Vw,USo,_le,JSo,YSo,KSo,et,zw,ZSo,ble,ePo,oPo,Bd,rPo,vle,tPo,aPo,Tle,sPo,nPo,lPo,Fle,iPo,dPo,Ww,cPo,Qe,Qw,mPo,Cle,fPo,gPo,es,hPo,Mle,uPo,pPo,Ele,_Po,bPo,yle,vPo,TPo,FPo,wle,GT,Ale,CPo,MPo,aN,EPo,yPo,wPo,XT,APo,Lle,LPo,BPo,Ble,xPo,kPo,xle,RPo,SPo,Hw,jxe,xd,VT,kle,Uw,PPo,Rle,$Po,Dxe,lr,Jw,IPo,kd,jPo,Sle,DPo,NPo,Ple,qPo,OPo,GPo,Yw,XPo,$le,VPo,zPo,WPo,ot,Kw,QPo,Ile,HPo,UPo,Rd,JPo,jle,YPo,KPo,Dle,ZPo,e$o,o$o,Nle,r$o,t$o,Zw,a$o,He,e6,s$o,qle,n$o,l$o,os,i$o,Ole,d$o,c$o,Gle,m$o,f$o,Xle,g$o,h$o,u$o,Fe,zT,Vle,p$o,_$o,sN,b$o,v$o,T$o,WT,zle,F$o,C$o,nN,M$o,E$o,y$o,qn,Wle,w$o,A$o,lN,L$o,B$o,iN,x$o,k$o,R$o,QT,Qle,S$o,P$o,dN,$$o,I$o,j$o,fa,Hle,D$o,N$o,cN,q$o,O$o,mN,G$o,X$o,fN,V$o,z$o,W$o,HT,Ule,Q$o,H$o,gN,U$o,J$o,Y$o,UT,Jle,K$o,Z$o,hN,eIo,oIo,rIo,JT,Yle,tIo,aIo,uN,sIo,nIo,lIo,YT,Kle,iIo,dIo,pN,cIo,mIo,fIo,KT,gIo,Zle,hIo,uIo,eie,pIo,_Io,oie,bIo,vIo,o6,Nxe,Sd,ZT,rie,r6,TIo,tie,FIo,qxe,ir,t6,CIo,Pd,MIo,aie,EIo,yIo,sie,wIo,AIo,LIo,a6,BIo,nie,xIo,kIo,RIo,rt,s6,SIo,lie,PIo,$Io,$d,IIo,iie,jIo,DIo,die,NIo,qIo,OIo,cie,GIo,XIo,n6,VIo,Ue,l6,zIo,mie,WIo,QIo,rs,HIo,fie,UIo,JIo,gie,YIo,KIo,hie,ZIo,ejo,ojo,uie,e1,pie,rjo,tjo,_N,ajo,sjo,njo,o1,ljo,_ie,ijo,djo,bie,cjo,mjo,vie,fjo,gjo,i6,Oxe,Id,r1,Tie,d6,hjo,Fie,ujo,Gxe,dr,c6,pjo,jd,_jo,Cie,bjo,vjo,Mie,Tjo,Fjo,Cjo,m6,Mjo,Eie,Ejo,yjo,wjo,tt,f6,Ajo,yie,Ljo,Bjo,Dd,xjo,wie,kjo,Rjo,Aie,Sjo,Pjo,$jo,Lie,Ijo,jjo,g6,Djo,Je,h6,Njo,Bie,qjo,Ojo,ts,Gjo,xie,Xjo,Vjo,kie,zjo,Wjo,Rie,Qjo,Hjo,Ujo,xe,t1,Sie,Jjo,Yjo,bN,Kjo,Zjo,eDo,a1,Pie,oDo,rDo,vN,tDo,aDo,sDo,s1,$ie,nDo,lDo,TN,iDo,dDo,cDo,n1,Iie,mDo,fDo,FN,gDo,hDo,uDo,l1,jie,pDo,_Do,CN,bDo,vDo,TDo,i1,Die,FDo,CDo,MN,MDo,EDo,yDo,d1,Nie,wDo,ADo,EN,LDo,BDo,xDo,c1,qie,kDo,RDo,yN,SDo,PDo,$Do,m1,IDo,Oie,jDo,DDo,Gie,NDo,qDo,Xie,ODo,GDo,u6,Xxe,Nd,f1,Vie,p6,XDo,zie,VDo,Vxe,cr,_6,zDo,qd,WDo,Wie,QDo,HDo,Qie,UDo,JDo,YDo,b6,KDo,Hie,ZDo,eNo,oNo,at,v6,rNo,Uie,tNo,aNo,Od,sNo,Jie,nNo,lNo,Yie,iNo,dNo,cNo,Kie,mNo,fNo,T6,gNo,Ye,F6,hNo,Zie,uNo,pNo,as,_No,ede,bNo,vNo,ode,TNo,FNo,rde,CNo,MNo,ENo,ss,g1,tde,yNo,wNo,wN,ANo,LNo,BNo,h1,ade,xNo,kNo,AN,RNo,SNo,PNo,u1,sde,$No,INo,LN,jNo,DNo,NNo,p1,nde,qNo,ONo,BN,GNo,XNo,VNo,_1,zNo,lde,WNo,QNo,ide,HNo,UNo,dde,JNo,YNo,C6,zxe,Gd,b1,cde,M6,KNo,mde,ZNo,Wxe,mr,E6,eqo,Xd,oqo,fde,rqo,tqo,gde,aqo,sqo,nqo,y6,lqo,hde,iqo,dqo,cqo,st,w6,mqo,ude,fqo,gqo,Vd,hqo,pde,uqo,pqo,_de,_qo,bqo,vqo,bde,Tqo,Fqo,A6,Cqo,Ke,L6,Mqo,vde,Eqo,yqo,ns,wqo,Tde,Aqo,Lqo,Fde,Bqo,xqo,Cde,kqo,Rqo,Sqo,ke,v1,Mde,Pqo,$qo,xN,Iqo,jqo,Dqo,T1,Ede,Nqo,qqo,kN,Oqo,Gqo,Xqo,F1,yde,Vqo,zqo,RN,Wqo,Qqo,Hqo,C1,wde,Uqo,Jqo,SN,Yqo,Kqo,Zqo,M1,Ade,eOo,oOo,PN,rOo,tOo,aOo,E1,Lde,sOo,nOo,$N,lOo,iOo,dOo,y1,Bde,cOo,mOo,IN,fOo,gOo,hOo,w1,xde,uOo,pOo,jN,_Oo,bOo,vOo,A1,TOo,kde,FOo,COo,Rde,MOo,EOo,Sde,yOo,wOo,B6,Qxe,zd,L1,Pde,x6,AOo,$de,LOo,Hxe,fr,k6,BOo,Wd,xOo,Ide,kOo,ROo,jde,SOo,POo,$Oo,R6,IOo,Dde,jOo,DOo,NOo,nt,S6,qOo,Nde,OOo,GOo,Qd,XOo,qde,VOo,zOo,Ode,WOo,QOo,HOo,Gde,UOo,JOo,P6,YOo,Ze,$6,KOo,Xde,ZOo,eGo,ls,oGo,Vde,rGo,tGo,zde,aGo,sGo,Wde,nGo,lGo,iGo,I6,B1,Qde,dGo,cGo,DN,mGo,fGo,gGo,x1,Hde,hGo,uGo,NN,pGo,_Go,bGo,k1,vGo,Ude,TGo,FGo,Jde,CGo,MGo,Yde,EGo,yGo,j6,Uxe,Hd,R1,Kde,D6,wGo,Zde,AGo,Jxe,gr,N6,LGo,Ud,BGo,ece,xGo,kGo,oce,RGo,SGo,PGo,q6,$Go,rce,IGo,jGo,DGo,lt,O6,NGo,tce,qGo,OGo,Jd,GGo,ace,XGo,VGo,sce,zGo,WGo,QGo,nce,HGo,UGo,G6,JGo,eo,X6,YGo,lce,KGo,ZGo,is,eXo,ice,oXo,rXo,dce,tXo,aXo,cce,sXo,nXo,lXo,ds,S1,mce,iXo,dXo,qN,cXo,mXo,fXo,P1,fce,gXo,hXo,ON,uXo,pXo,_Xo,$1,gce,bXo,vXo,GN,TXo,FXo,CXo,I1,hce,MXo,EXo,XN,yXo,wXo,AXo,j1,LXo,uce,BXo,xXo,pce,kXo,RXo,_ce,SXo,PXo,V6,Yxe,Yd,D1,bce,z6,$Xo,vce,IXo,Kxe,hr,W6,jXo,Kd,DXo,Tce,NXo,qXo,Fce,OXo,GXo,XXo,Q6,VXo,Cce,zXo,WXo,QXo,it,H6,HXo,Mce,UXo,JXo,Zd,YXo,Ece,KXo,ZXo,yce,eVo,oVo,rVo,wce,tVo,aVo,U6,sVo,oo,J6,nVo,Ace,lVo,iVo,cs,dVo,Lce,cVo,mVo,Bce,fVo,gVo,xce,hVo,uVo,pVo,ec,N1,kce,_Vo,bVo,VN,vVo,TVo,FVo,q1,Rce,CVo,MVo,zN,EVo,yVo,wVo,O1,Sce,AVo,LVo,WN,BVo,xVo,kVo,G1,RVo,Pce,SVo,PVo,$ce,$Vo,IVo,Ice,jVo,DVo,Y6,Zxe,oc,X1,jce,K6,NVo,Dce,qVo,eke,ur,Z6,OVo,rc,GVo,Nce,XVo,VVo,qce,zVo,WVo,QVo,eA,HVo,Oce,UVo,JVo,YVo,dt,oA,KVo,Gce,ZVo,ezo,tc,ozo,Xce,rzo,tzo,Vce,azo,szo,nzo,zce,lzo,izo,rA,dzo,ro,tA,czo,Wce,mzo,fzo,ms,gzo,Qce,hzo,uzo,Hce,pzo,_zo,Uce,bzo,vzo,Tzo,Jce,V1,Yce,Fzo,Czo,QN,Mzo,Ezo,yzo,z1,wzo,Kce,Azo,Lzo,Zce,Bzo,xzo,eme,kzo,Rzo,aA,oke,ac,W1,ome,sA,Szo,rme,Pzo,rke,pr,nA,$zo,sc,Izo,tme,jzo,Dzo,ame,Nzo,qzo,Ozo,lA,Gzo,sme,Xzo,Vzo,zzo,ct,iA,Wzo,nme,Qzo,Hzo,nc,Uzo,lme,Jzo,Yzo,ime,Kzo,Zzo,eWo,dme,oWo,rWo,dA,tWo,to,cA,aWo,cme,sWo,nWo,fs,lWo,mme,iWo,dWo,fme,cWo,mWo,gme,fWo,gWo,hWo,hme,Q1,ume,uWo,pWo,HN,_Wo,bWo,vWo,H1,TWo,pme,FWo,CWo,_me,MWo,EWo,bme,yWo,wWo,mA,tke,lc,U1,vme,fA,AWo,Tme,LWo,ake,_r,gA,BWo,ic,xWo,Fme,kWo,RWo,Cme,SWo,PWo,$Wo,hA,IWo,Mme,jWo,DWo,NWo,mt,uA,qWo,Eme,OWo,GWo,dc,XWo,yme,VWo,zWo,wme,WWo,QWo,HWo,Ame,UWo,JWo,pA,YWo,ao,_A,KWo,Lme,ZWo,eQo,gs,oQo,Bme,rQo,tQo,xme,aQo,sQo,kme,nQo,lQo,iQo,bA,J1,Rme,dQo,cQo,UN,mQo,fQo,gQo,Y1,Sme,hQo,uQo,JN,pQo,_Qo,bQo,K1,vQo,Pme,TQo,FQo,$me,CQo,MQo,Ime,EQo,yQo,vA,ske,cc,Z1,jme,TA,wQo,Dme,AQo,nke,br,FA,LQo,mc,BQo,Nme,xQo,kQo,qme,RQo,SQo,PQo,CA,$Qo,Ome,IQo,jQo,DQo,ft,MA,NQo,Gme,qQo,OQo,fc,GQo,Xme,XQo,VQo,Vme,zQo,WQo,QQo,zme,HQo,UQo,EA,JQo,so,yA,YQo,Wme,KQo,ZQo,hs,eHo,Qme,oHo,rHo,Hme,tHo,aHo,Ume,sHo,nHo,lHo,Jme,eF,Yme,iHo,dHo,YN,cHo,mHo,fHo,oF,gHo,Kme,hHo,uHo,Zme,pHo,_Ho,efe,bHo,vHo,wA,lke,gc,rF,ofe,AA,THo,rfe,FHo,ike,vr,LA,CHo,hc,MHo,tfe,EHo,yHo,afe,wHo,AHo,LHo,BA,BHo,sfe,xHo,kHo,RHo,gt,xA,SHo,nfe,PHo,$Ho,uc,IHo,lfe,jHo,DHo,ife,NHo,qHo,OHo,dfe,GHo,XHo,kA,VHo,ho,RA,zHo,cfe,WHo,QHo,us,HHo,mfe,UHo,JHo,ffe,YHo,KHo,gfe,ZHo,eUo,oUo,B,tF,hfe,rUo,tUo,KN,aUo,sUo,nUo,aF,ufe,lUo,iUo,ZN,dUo,cUo,mUo,sF,pfe,fUo,gUo,eq,hUo,uUo,pUo,nF,_fe,_Uo,bUo,oq,vUo,TUo,FUo,lF,bfe,CUo,MUo,rq,EUo,yUo,wUo,iF,vfe,AUo,LUo,tq,BUo,xUo,kUo,dF,Tfe,RUo,SUo,aq,PUo,$Uo,IUo,cF,Ffe,jUo,DUo,sq,NUo,qUo,OUo,mF,Cfe,GUo,XUo,nq,VUo,zUo,WUo,fF,Mfe,QUo,HUo,lq,UUo,JUo,YUo,gF,Efe,KUo,ZUo,iq,eJo,oJo,rJo,hF,yfe,tJo,aJo,dq,sJo,nJo,lJo,uF,wfe,iJo,dJo,cq,cJo,mJo,fJo,pF,Afe,gJo,hJo,mq,uJo,pJo,_Jo,_F,Lfe,bJo,vJo,fq,TJo,FJo,CJo,bF,Bfe,MJo,EJo,gq,yJo,wJo,AJo,On,xfe,LJo,BJo,hq,xJo,kJo,uq,RJo,SJo,PJo,vF,kfe,$Jo,IJo,pq,jJo,DJo,NJo,TF,Rfe,qJo,OJo,_q,GJo,XJo,VJo,FF,Sfe,zJo,WJo,bq,QJo,HJo,UJo,CF,Pfe,JJo,YJo,vq,KJo,ZJo,eYo,MF,$fe,oYo,rYo,Tq,tYo,aYo,sYo,EF,Ife,nYo,lYo,Fq,iYo,dYo,cYo,yF,jfe,mYo,fYo,Cq,gYo,hYo,uYo,wF,Dfe,pYo,_Yo,Mq,bYo,vYo,TYo,AF,Nfe,FYo,CYo,Eq,MYo,EYo,yYo,LF,qfe,wYo,AYo,yq,LYo,BYo,xYo,BF,Ofe,kYo,RYo,wq,SYo,PYo,$Yo,xF,Gfe,IYo,jYo,Aq,DYo,NYo,qYo,kF,Xfe,OYo,GYo,Lq,XYo,VYo,zYo,RF,Vfe,WYo,QYo,Bq,HYo,UYo,JYo,SF,zfe,YYo,KYo,xq,ZYo,eKo,oKo,PF,Wfe,rKo,tKo,kq,aKo,sKo,nKo,$F,Qfe,lKo,iKo,Rq,dKo,cKo,mKo,IF,Hfe,fKo,gKo,Sq,hKo,uKo,pKo,jF,Ufe,_Ko,bKo,Pq,vKo,TKo,FKo,DF,Jfe,CKo,MKo,$q,EKo,yKo,wKo,NF,Yfe,AKo,LKo,Iq,BKo,xKo,kKo,qF,Kfe,RKo,SKo,jq,PKo,$Ko,IKo,OF,Zfe,jKo,DKo,Dq,NKo,qKo,OKo,GF,ege,GKo,XKo,Nq,VKo,zKo,WKo,XF,oge,QKo,HKo,qq,UKo,JKo,YKo,rge,KKo,ZKo,SA,dke,pc,VF,tge,PA,eZo,age,oZo,cke,Tr,$A,rZo,_c,tZo,sge,aZo,sZo,nge,nZo,lZo,iZo,IA,dZo,lge,cZo,mZo,fZo,ht,jA,gZo,ige,hZo,uZo,bc,pZo,dge,_Zo,bZo,cge,vZo,TZo,FZo,mge,CZo,MZo,DA,EZo,uo,NA,yZo,fge,wZo,AZo,ps,LZo,gge,BZo,xZo,hge,kZo,RZo,uge,SZo,PZo,$Zo,H,zF,pge,IZo,jZo,Oq,DZo,NZo,qZo,WF,_ge,OZo,GZo,Gq,XZo,VZo,zZo,QF,bge,WZo,QZo,Xq,HZo,UZo,JZo,HF,vge,YZo,KZo,Vq,ZZo,eer,oer,UF,Tge,rer,ter,zq,aer,ser,ner,JF,Fge,ler,ier,Wq,der,cer,mer,YF,Cge,fer,ger,Qq,her,uer,per,KF,Mge,_er,ber,Hq,ver,Ter,Fer,ZF,Ege,Cer,Mer,Uq,Eer,yer,wer,eC,yge,Aer,Ler,Jq,Ber,xer,ker,oC,wge,Rer,Ser,Yq,Per,$er,Ier,rC,Age,jer,Der,Kq,Ner,qer,Oer,tC,Lge,Ger,Xer,Zq,Ver,zer,Wer,aC,Bge,Qer,Her,eO,Uer,Jer,Yer,sC,xge,Ker,Zer,oO,eor,oor,ror,nC,kge,tor,aor,rO,sor,nor,lor,lC,Rge,ior,dor,tO,cor,mor,gor,iC,Sge,hor,uor,aO,por,_or,bor,dC,Pge,vor,Tor,sO,For,Cor,Mor,cC,$ge,Eor,yor,nO,wor,Aor,Lor,mC,Ige,Bor,xor,lO,kor,Ror,Sor,fC,jge,Por,$or,iO,Ior,jor,Dor,Dge,Nor,qor,qA,mke,vc,gC,Nge,OA,Oor,qge,Gor,fke,Fr,GA,Xor,Tc,Vor,Oge,zor,Wor,Gge,Qor,Hor,Uor,XA,Jor,Xge,Yor,Kor,Zor,ut,VA,err,Vge,orr,rrr,Fc,trr,zge,arr,srr,Wge,nrr,lrr,irr,Qge,drr,crr,zA,mrr,po,WA,frr,Hge,grr,hrr,_s,urr,Uge,prr,_rr,Jge,brr,vrr,Yge,Trr,Frr,Crr,ue,hC,Kge,Mrr,Err,dO,yrr,wrr,Arr,uC,Zge,Lrr,Brr,cO,xrr,krr,Rrr,pC,ehe,Srr,Prr,mO,$rr,Irr,jrr,_C,ohe,Drr,Nrr,fO,qrr,Orr,Grr,bC,rhe,Xrr,Vrr,gO,zrr,Wrr,Qrr,vC,the,Hrr,Urr,hO,Jrr,Yrr,Krr,TC,ahe,Zrr,etr,uO,otr,rtr,ttr,FC,she,atr,str,pO,ntr,ltr,itr,CC,nhe,dtr,ctr,_O,mtr,ftr,gtr,MC,lhe,htr,utr,bO,ptr,_tr,btr,ihe,vtr,Ttr,QA,gke,Cc,EC,dhe,HA,Ftr,che,Ctr,hke,Cr,UA,Mtr,Mc,Etr,mhe,ytr,wtr,fhe,Atr,Ltr,Btr,JA,xtr,ghe,ktr,Rtr,Str,pt,YA,Ptr,hhe,$tr,Itr,Ec,jtr,uhe,Dtr,Ntr,phe,qtr,Otr,Gtr,_he,Xtr,Vtr,KA,ztr,_o,ZA,Wtr,bhe,Qtr,Htr,bs,Utr,vhe,Jtr,Ytr,The,Ktr,Ztr,Fhe,ear,oar,rar,e0,yC,Che,tar,aar,vO,sar,nar,lar,wC,Mhe,iar,dar,TO,car,mar,far,Ehe,gar,har,o0,uke,yc,AC,yhe,r0,uar,whe,par,pke,Mr,t0,_ar,wc,bar,Ahe,Tar,Far,Lhe,Car,Mar,Ear,a0,yar,Bhe,war,Aar,Lar,_t,s0,Bar,xhe,xar,kar,Ac,Rar,khe,Sar,Par,Rhe,$ar,Iar,jar,She,Dar,Nar,n0,qar,bo,l0,Oar,Phe,Gar,Xar,vs,Var,$he,zar,War,Ihe,Qar,Har,jhe,Uar,Jar,Yar,Y,LC,Dhe,Kar,Zar,FO,esr,osr,rsr,BC,Nhe,tsr,asr,CO,ssr,nsr,lsr,xC,qhe,isr,dsr,MO,csr,msr,fsr,kC,Ohe,gsr,hsr,EO,usr,psr,_sr,RC,Ghe,bsr,vsr,yO,Tsr,Fsr,Csr,SC,Xhe,Msr,Esr,wO,ysr,wsr,Asr,PC,Vhe,Lsr,Bsr,AO,xsr,ksr,Rsr,$C,zhe,Ssr,Psr,LO,$sr,Isr,jsr,IC,Whe,Dsr,Nsr,BO,qsr,Osr,Gsr,jC,Qhe,Xsr,Vsr,xO,zsr,Wsr,Qsr,DC,Hhe,Hsr,Usr,kO,Jsr,Ysr,Ksr,NC,Uhe,Zsr,enr,RO,onr,rnr,tnr,qC,Jhe,anr,snr,SO,nnr,lnr,inr,OC,Yhe,dnr,cnr,PO,mnr,fnr,gnr,GC,Khe,hnr,unr,$O,pnr,_nr,bnr,XC,Zhe,vnr,Tnr,IO,Fnr,Cnr,Mnr,VC,eue,Enr,ynr,jO,wnr,Anr,Lnr,zC,oue,Bnr,xnr,DO,knr,Rnr,Snr,WC,rue,Pnr,$nr,NO,Inr,jnr,Dnr,QC,tue,Nnr,qnr,qO,Onr,Gnr,Xnr,aue,Vnr,znr,i0,_ke,Lc,HC,sue,d0,Wnr,nue,Qnr,bke,Er,c0,Hnr,Bc,Unr,lue,Jnr,Ynr,iue,Knr,Znr,elr,m0,olr,due,rlr,tlr,alr,bt,f0,slr,cue,nlr,llr,xc,ilr,mue,dlr,clr,fue,mlr,flr,glr,gue,hlr,ulr,g0,plr,vo,h0,_lr,hue,blr,vlr,Ts,Tlr,uue,Flr,Clr,pue,Mlr,Elr,_ue,ylr,wlr,Alr,pe,UC,bue,Llr,Blr,OO,xlr,klr,Rlr,JC,vue,Slr,Plr,GO,$lr,Ilr,jlr,YC,Tue,Dlr,Nlr,XO,qlr,Olr,Glr,KC,Fue,Xlr,Vlr,VO,zlr,Wlr,Qlr,ZC,Cue,Hlr,Ulr,zO,Jlr,Ylr,Klr,eM,Mue,Zlr,eir,WO,oir,rir,tir,oM,Eue,air,sir,QO,nir,lir,iir,rM,yue,dir,cir,HO,mir,fir,gir,tM,wue,hir,uir,UO,pir,_ir,bir,aM,Aue,vir,Tir,JO,Fir,Cir,Mir,Lue,Eir,yir,u0,vke,kc,sM,Bue,p0,wir,xue,Air,Tke,yr,_0,Lir,Rc,Bir,kue,xir,kir,Rue,Rir,Sir,Pir,b0,$ir,Sue,Iir,jir,Dir,vt,v0,Nir,Pue,qir,Oir,Sc,Gir,$ue,Xir,Vir,Iue,zir,Wir,Qir,jue,Hir,Uir,T0,Jir,To,F0,Yir,Due,Kir,Zir,Fs,edr,Nue,odr,rdr,que,tdr,adr,Oue,sdr,ndr,ldr,V,nM,Gue,idr,ddr,YO,cdr,mdr,fdr,lM,Xue,gdr,hdr,KO,udr,pdr,_dr,iM,Vue,bdr,vdr,ZO,Tdr,Fdr,Cdr,dM,zue,Mdr,Edr,eG,ydr,wdr,Adr,cM,Wue,Ldr,Bdr,oG,xdr,kdr,Rdr,mM,Que,Sdr,Pdr,rG,$dr,Idr,jdr,fM,Hue,Ddr,Ndr,tG,qdr,Odr,Gdr,gM,Uue,Xdr,Vdr,aG,zdr,Wdr,Qdr,hM,Jue,Hdr,Udr,sG,Jdr,Ydr,Kdr,uM,Yue,Zdr,ecr,nG,ocr,rcr,tcr,pM,Kue,acr,scr,lG,ncr,lcr,icr,_M,Zue,dcr,ccr,iG,mcr,fcr,gcr,bM,epe,hcr,ucr,dG,pcr,_cr,bcr,vM,ope,vcr,Tcr,cG,Fcr,Ccr,Mcr,TM,rpe,Ecr,ycr,mG,wcr,Acr,Lcr,FM,tpe,Bcr,xcr,fG,kcr,Rcr,Scr,CM,ape,Pcr,$cr,gG,Icr,jcr,Dcr,MM,spe,Ncr,qcr,hG,Ocr,Gcr,Xcr,EM,npe,Vcr,zcr,uG,Wcr,Qcr,Hcr,yM,lpe,Ucr,Jcr,pG,Ycr,Kcr,Zcr,wM,ipe,emr,omr,_G,rmr,tmr,amr,AM,dpe,smr,nmr,bG,lmr,imr,dmr,LM,cpe,cmr,mmr,vG,fmr,gmr,hmr,BM,mpe,umr,pmr,TG,_mr,bmr,vmr,xM,fpe,Tmr,Fmr,FG,Cmr,Mmr,Emr,gpe,ymr,wmr,C0,Fke,Pc,kM,hpe,M0,Amr,upe,Lmr,Cke,wr,E0,Bmr,$c,xmr,ppe,kmr,Rmr,_pe,Smr,Pmr,$mr,y0,Imr,bpe,jmr,Dmr,Nmr,Tt,w0,qmr,vpe,Omr,Gmr,Ic,Xmr,Tpe,Vmr,zmr,Fpe,Wmr,Qmr,Hmr,Cpe,Umr,Jmr,A0,Ymr,Fo,L0,Kmr,Mpe,Zmr,efr,Cs,ofr,Epe,rfr,tfr,ype,afr,sfr,wpe,nfr,lfr,ifr,te,RM,Ape,dfr,cfr,CG,mfr,ffr,gfr,SM,Lpe,hfr,ufr,MG,pfr,_fr,bfr,PM,Bpe,vfr,Tfr,EG,Ffr,Cfr,Mfr,$M,xpe,Efr,yfr,yG,wfr,Afr,Lfr,IM,kpe,Bfr,xfr,wG,kfr,Rfr,Sfr,jM,Rpe,Pfr,$fr,AG,Ifr,jfr,Dfr,DM,Spe,Nfr,qfr,LG,Ofr,Gfr,Xfr,NM,Ppe,Vfr,zfr,BG,Wfr,Qfr,Hfr,qM,$pe,Ufr,Jfr,xG,Yfr,Kfr,Zfr,OM,Ipe,egr,ogr,kG,rgr,tgr,agr,GM,jpe,sgr,ngr,RG,lgr,igr,dgr,XM,Dpe,cgr,mgr,SG,fgr,ggr,hgr,VM,Npe,ugr,pgr,PG,_gr,bgr,vgr,zM,qpe,Tgr,Fgr,$G,Cgr,Mgr,Egr,WM,Ope,ygr,wgr,IG,Agr,Lgr,Bgr,QM,Gpe,xgr,kgr,jG,Rgr,Sgr,Pgr,HM,Xpe,$gr,Igr,DG,jgr,Dgr,Ngr,Vpe,qgr,Ogr,B0,Mke,jc,UM,zpe,x0,Ggr,Wpe,Xgr,Eke,Ar,k0,Vgr,Dc,zgr,Qpe,Wgr,Qgr,Hpe,Hgr,Ugr,Jgr,R0,Ygr,Upe,Kgr,Zgr,ehr,Ft,S0,ohr,Jpe,rhr,thr,Nc,ahr,Ype,shr,nhr,Kpe,lhr,ihr,dhr,Zpe,chr,mhr,P0,fhr,Co,$0,ghr,e_e,hhr,uhr,Ms,phr,o_e,_hr,bhr,r_e,vhr,Thr,t_e,Fhr,Chr,Mhr,a_e,JM,s_e,Ehr,yhr,NG,whr,Ahr,Lhr,n_e,Bhr,xhr,I0,yke,qc,YM,l_e,j0,khr,i_e,Rhr,wke,Lr,D0,Shr,Oc,Phr,d_e,$hr,Ihr,c_e,jhr,Dhr,Nhr,N0,qhr,m_e,Ohr,Ghr,Xhr,Ct,q0,Vhr,f_e,zhr,Whr,Gc,Qhr,g_e,Hhr,Uhr,h_e,Jhr,Yhr,Khr,u_e,Zhr,eur,O0,our,Mo,G0,rur,p_e,tur,aur,Es,sur,__e,nur,lur,b_e,iur,dur,v_e,cur,mur,fur,K,KM,T_e,gur,hur,qG,uur,pur,_ur,ZM,F_e,bur,vur,OG,Tur,Fur,Cur,e4,C_e,Mur,Eur,GG,yur,wur,Aur,o4,M_e,Lur,Bur,XG,xur,kur,Rur,r4,E_e,Sur,Pur,VG,$ur,Iur,jur,t4,y_e,Dur,Nur,zG,qur,Our,Gur,a4,w_e,Xur,Vur,WG,zur,Wur,Qur,s4,A_e,Hur,Uur,QG,Jur,Yur,Kur,n4,L_e,Zur,epr,HG,opr,rpr,tpr,l4,B_e,apr,spr,UG,npr,lpr,ipr,i4,x_e,dpr,cpr,JG,mpr,fpr,gpr,d4,k_e,hpr,upr,YG,ppr,_pr,bpr,c4,R_e,vpr,Tpr,KG,Fpr,Cpr,Mpr,m4,S_e,Epr,ypr,ZG,wpr,Apr,Lpr,f4,P_e,Bpr,xpr,eX,kpr,Rpr,Spr,g4,$_e,Ppr,$pr,oX,Ipr,jpr,Dpr,h4,I_e,Npr,qpr,rX,Opr,Gpr,Xpr,u4,j_e,Vpr,zpr,tX,Wpr,Qpr,Hpr,p4,D_e,Upr,Jpr,aX,Ypr,Kpr,Zpr,_4,N_e,e_r,o_r,sX,r_r,t_r,a_r,q_e,s_r,n_r,X0,Ake,Xc,b4,O_e,V0,l_r,G_e,i_r,Lke,Br,z0,d_r,Vc,c_r,X_e,m_r,f_r,V_e,g_r,h_r,u_r,W0,p_r,z_e,__r,b_r,v_r,Mt,Q0,T_r,W_e,F_r,C_r,zc,M_r,Q_e,E_r,y_r,H_e,w_r,A_r,L_r,U_e,B_r,x_r,H0,k_r,Eo,U0,R_r,J_e,S_r,P_r,ys,$_r,Y_e,I_r,j_r,K_e,D_r,N_r,Z_e,q_r,O_r,G_r,Z,v4,ebe,X_r,V_r,nX,z_r,W_r,Q_r,T4,obe,H_r,U_r,lX,J_r,Y_r,K_r,F4,rbe,Z_r,ebr,iX,obr,rbr,tbr,C4,tbe,abr,sbr,dX,nbr,lbr,ibr,M4,abe,dbr,cbr,cX,mbr,fbr,gbr,E4,sbe,hbr,ubr,mX,pbr,_br,bbr,y4,nbe,vbr,Tbr,fX,Fbr,Cbr,Mbr,w4,lbe,Ebr,ybr,gX,wbr,Abr,Lbr,A4,ibe,Bbr,xbr,hX,kbr,Rbr,Sbr,L4,dbe,Pbr,$br,uX,Ibr,jbr,Dbr,B4,cbe,Nbr,qbr,pX,Obr,Gbr,Xbr,x4,mbe,Vbr,zbr,_X,Wbr,Qbr,Hbr,k4,fbe,Ubr,Jbr,bX,Ybr,Kbr,Zbr,R4,gbe,e2r,o2r,vX,r2r,t2r,a2r,S4,hbe,s2r,n2r,TX,l2r,i2r,d2r,P4,ube,c2r,m2r,FX,f2r,g2r,h2r,$4,pbe,u2r,p2r,CX,_2r,b2r,v2r,I4,_be,T2r,F2r,MX,C2r,M2r,E2r,j4,bbe,y2r,w2r,EX,A2r,L2r,B2r,vbe,x2r,k2r,J0,Bke,Wc,D4,Tbe,Y0,R2r,Fbe,S2r,xke,xr,K0,P2r,Qc,$2r,Cbe,I2r,j2r,Mbe,D2r,N2r,q2r,Z0,O2r,Ebe,G2r,X2r,V2r,Et,eL,z2r,ybe,W2r,Q2r,Hc,H2r,wbe,U2r,J2r,Abe,Y2r,K2r,Z2r,Lbe,evr,ovr,oL,rvr,yo,rL,tvr,Bbe,avr,svr,ws,nvr,xbe,lvr,ivr,kbe,dvr,cvr,Rbe,mvr,fvr,gvr,Sbe,N4,Pbe,hvr,uvr,yX,pvr,_vr,bvr,$be,vvr,Tvr,tL,kke,Uc,q4,Ibe,aL,Fvr,jbe,Cvr,Rke,kr,sL,Mvr,Jc,Evr,Dbe,yvr,wvr,Nbe,Avr,Lvr,Bvr,nL,xvr,qbe,kvr,Rvr,Svr,yt,lL,Pvr,Obe,$vr,Ivr,Yc,jvr,Gbe,Dvr,Nvr,Xbe,qvr,Ovr,Gvr,Vbe,Xvr,Vvr,iL,zvr,wo,dL,Wvr,zbe,Qvr,Hvr,As,Uvr,Wbe,Jvr,Yvr,Qbe,Kvr,Zvr,Hbe,eTr,oTr,rTr,Ube,O4,Jbe,tTr,aTr,wX,sTr,nTr,lTr,Ybe,iTr,dTr,cL,Ske,Kc,G4,Kbe,mL,cTr,Zbe,mTr,Pke,Rr,fL,fTr,Zc,gTr,e2e,hTr,uTr,o2e,pTr,_Tr,bTr,gL,vTr,r2e,TTr,FTr,CTr,wt,hL,MTr,t2e,ETr,yTr,em,wTr,a2e,ATr,LTr,s2e,BTr,xTr,kTr,n2e,RTr,STr,uL,PTr,Ao,pL,$Tr,l2e,ITr,jTr,Ls,DTr,i2e,NTr,qTr,d2e,OTr,GTr,c2e,XTr,VTr,zTr,z,X4,m2e,WTr,QTr,AX,HTr,UTr,JTr,V4,f2e,YTr,KTr,LX,ZTr,e1r,o1r,z4,g2e,r1r,t1r,BX,a1r,s1r,n1r,W4,h2e,l1r,i1r,xX,d1r,c1r,m1r,Q4,u2e,f1r,g1r,kX,h1r,u1r,p1r,H4,p2e,_1r,b1r,RX,v1r,T1r,F1r,U4,_2e,C1r,M1r,SX,E1r,y1r,w1r,J4,b2e,A1r,L1r,PX,B1r,x1r,k1r,Y4,v2e,R1r,S1r,$X,P1r,$1r,I1r,K4,T2e,j1r,D1r,IX,N1r,q1r,O1r,Z4,F2e,G1r,X1r,jX,V1r,z1r,W1r,eE,C2e,Q1r,H1r,DX,U1r,J1r,Y1r,oE,M2e,K1r,Z1r,NX,eFr,oFr,rFr,rE,E2e,tFr,aFr,qX,sFr,nFr,lFr,tE,y2e,iFr,dFr,OX,cFr,mFr,fFr,aE,w2e,gFr,hFr,GX,uFr,pFr,_Fr,sE,A2e,bFr,vFr,XX,TFr,FFr,CFr,nE,L2e,MFr,EFr,VX,yFr,wFr,AFr,lE,B2e,LFr,BFr,zX,xFr,kFr,RFr,iE,x2e,SFr,PFr,WX,$Fr,IFr,jFr,dE,k2e,DFr,NFr,QX,qFr,OFr,GFr,cE,R2e,XFr,VFr,HX,zFr,WFr,QFr,mE,S2e,HFr,UFr,UX,JFr,YFr,KFr,fE,P2e,ZFr,eCr,JX,oCr,rCr,tCr,gE,$2e,aCr,sCr,YX,nCr,lCr,iCr,I2e,dCr,cCr,_L,$ke,om,hE,j2e,bL,mCr,D2e,fCr,Ike,Sr,vL,gCr,rm,hCr,N2e,uCr,pCr,q2e,_Cr,bCr,vCr,TL,TCr,O2e,FCr,CCr,MCr,At,FL,ECr,G2e,yCr,wCr,tm,ACr,X2e,LCr,BCr,V2e,xCr,kCr,RCr,z2e,SCr,PCr,CL,$Cr,Lo,ML,ICr,W2e,jCr,DCr,Bs,NCr,Q2e,qCr,OCr,H2e,GCr,XCr,U2e,VCr,zCr,WCr,ca,uE,J2e,QCr,HCr,KX,UCr,JCr,YCr,pE,Y2e,KCr,ZCr,ZX,eMr,oMr,rMr,_E,K2e,tMr,aMr,eV,sMr,nMr,lMr,bE,Z2e,iMr,dMr,oV,cMr,mMr,fMr,vE,eve,gMr,hMr,rV,uMr,pMr,_Mr,ove,bMr,vMr,EL,jke,am,TE,rve,yL,TMr,tve,FMr,Dke,Pr,wL,CMr,sm,MMr,ave,EMr,yMr,sve,wMr,AMr,LMr,AL,BMr,nve,xMr,kMr,RMr,Lt,LL,SMr,lve,PMr,$Mr,nm,IMr,ive,jMr,DMr,dve,NMr,qMr,OMr,cve,GMr,XMr,BL,VMr,Bo,xL,zMr,mve,WMr,QMr,xs,HMr,fve,UMr,JMr,gve,YMr,KMr,hve,ZMr,e4r,o4r,ce,FE,uve,r4r,t4r,tV,a4r,s4r,n4r,CE,pve,l4r,i4r,aV,d4r,c4r,m4r,ME,_ve,f4r,g4r,sV,h4r,u4r,p4r,EE,bve,_4r,b4r,nV,v4r,T4r,F4r,yE,vve,C4r,M4r,lV,E4r,y4r,w4r,wE,Tve,A4r,L4r,iV,B4r,x4r,k4r,AE,Fve,R4r,S4r,dV,P4r,$4r,I4r,LE,Cve,j4r,D4r,cV,N4r,q4r,O4r,BE,Mve,G4r,X4r,mV,V4r,z4r,W4r,xE,Eve,Q4r,H4r,fV,U4r,J4r,Y4r,kE,yve,K4r,Z4r,gV,eEr,oEr,rEr,RE,wve,tEr,aEr,hV,sEr,nEr,lEr,Ave,iEr,dEr,kL,Nke,lm,SE,Lve,RL,cEr,Bve,mEr,qke,$r,SL,fEr,im,gEr,xve,hEr,uEr,kve,pEr,_Er,bEr,PL,vEr,Rve,TEr,FEr,CEr,Bt,$L,MEr,Sve,EEr,yEr,dm,wEr,Pve,AEr,LEr,$ve,BEr,xEr,kEr,Ive,REr,SEr,IL,PEr,xo,jL,$Er,jve,IEr,jEr,ks,DEr,Dve,NEr,qEr,Nve,OEr,GEr,qve,XEr,VEr,zEr,_e,PE,Ove,WEr,QEr,uV,HEr,UEr,JEr,$E,Gve,YEr,KEr,pV,ZEr,e3r,o3r,IE,Xve,r3r,t3r,_V,a3r,s3r,n3r,jE,Vve,l3r,i3r,bV,d3r,c3r,m3r,DE,zve,f3r,g3r,vV,h3r,u3r,p3r,NE,Wve,_3r,b3r,TV,v3r,T3r,F3r,qE,Qve,C3r,M3r,FV,E3r,y3r,w3r,OE,Hve,A3r,L3r,CV,B3r,x3r,k3r,GE,Uve,R3r,S3r,MV,P3r,$3r,I3r,XE,Jve,j3r,D3r,EV,N3r,q3r,O3r,Yve,G3r,X3r,DL,Oke,cm,VE,Kve,NL,V3r,Zve,z3r,Gke,Ir,qL,W3r,mm,Q3r,eTe,H3r,U3r,oTe,J3r,Y3r,K3r,OL,Z3r,rTe,e5r,o5r,r5r,xt,GL,t5r,tTe,a5r,s5r,fm,n5r,aTe,l5r,i5r,sTe,d5r,c5r,m5r,nTe,f5r,g5r,XL,h5r,ko,VL,u5r,lTe,p5r,_5r,Rs,b5r,iTe,v5r,T5r,dTe,F5r,C5r,cTe,M5r,E5r,y5r,Ce,zE,mTe,w5r,A5r,yV,L5r,B5r,x5r,WE,fTe,k5r,R5r,wV,S5r,P5r,$5r,QE,gTe,I5r,j5r,AV,D5r,N5r,q5r,HE,hTe,O5r,G5r,LV,X5r,V5r,z5r,UE,uTe,W5r,Q5r,BV,H5r,U5r,J5r,JE,pTe,Y5r,K5r,xV,Z5r,eyr,oyr,YE,_Te,ryr,tyr,kV,ayr,syr,nyr,KE,bTe,lyr,iyr,RV,dyr,cyr,myr,ZE,vTe,fyr,gyr,SV,hyr,uyr,pyr,TTe,_yr,byr,zL,Xke,gm,e3,FTe,WL,vyr,CTe,Tyr,Vke,jr,QL,Fyr,hm,Cyr,MTe,Myr,Eyr,ETe,yyr,wyr,Ayr,HL,Lyr,yTe,Byr,xyr,kyr,kt,UL,Ryr,wTe,Syr,Pyr,um,$yr,ATe,Iyr,jyr,LTe,Dyr,Nyr,qyr,BTe,Oyr,Gyr,JL,Xyr,Ro,YL,Vyr,xTe,zyr,Wyr,Ss,Qyr,kTe,Hyr,Uyr,RTe,Jyr,Yyr,STe,Kyr,Zyr,ewr,be,o3,PTe,owr,rwr,PV,twr,awr,swr,r3,$Te,nwr,lwr,$V,iwr,dwr,cwr,t3,ITe,mwr,fwr,IV,gwr,hwr,uwr,a3,jTe,pwr,_wr,jV,bwr,vwr,Twr,s3,DTe,Fwr,Cwr,DV,Mwr,Ewr,ywr,n3,NTe,wwr,Awr,NV,Lwr,Bwr,xwr,l3,qTe,kwr,Rwr,qV,Swr,Pwr,$wr,i3,OTe,Iwr,jwr,OV,Dwr,Nwr,qwr,d3,GTe,Owr,Gwr,GV,Xwr,Vwr,zwr,c3,XTe,Wwr,Qwr,XV,Hwr,Uwr,Jwr,VTe,Ywr,Kwr,KL,zke,pm,m3,zTe,ZL,Zwr,WTe,e6r,Wke,Dr,e8,o6r,_m,r6r,QTe,t6r,a6r,HTe,s6r,n6r,l6r,o8,i6r,UTe,d6r,c6r,m6r,Rt,r8,f6r,JTe,g6r,h6r,bm,u6r,YTe,p6r,_6r,KTe,b6r,v6r,T6r,ZTe,F6r,C6r,t8,M6r,So,a8,E6r,e1e,y6r,w6r,Ps,A6r,o1e,L6r,B6r,r1e,x6r,k6r,t1e,R6r,S6r,P6r,ve,f3,a1e,$6r,I6r,VV,j6r,D6r,N6r,g3,s1e,q6r,O6r,zV,G6r,X6r,V6r,h3,n1e,z6r,W6r,WV,Q6r,H6r,U6r,u3,l1e,J6r,Y6r,QV,K6r,Z6r,eAr,p3,i1e,oAr,rAr,HV,tAr,aAr,sAr,_3,d1e,nAr,lAr,UV,iAr,dAr,cAr,b3,c1e,mAr,fAr,JV,gAr,hAr,uAr,v3,m1e,pAr,_Ar,YV,bAr,vAr,TAr,T3,f1e,FAr,CAr,KV,MAr,EAr,yAr,F3,g1e,wAr,AAr,ZV,LAr,BAr,xAr,h1e,kAr,RAr,s8,Qke,vm,C3,u1e,n8,SAr,p1e,PAr,Hke,Nr,l8,$Ar,Tm,IAr,_1e,jAr,DAr,b1e,NAr,qAr,OAr,i8,GAr,v1e,XAr,VAr,zAr,St,d8,WAr,T1e,QAr,HAr,Fm,UAr,F1e,JAr,YAr,C1e,KAr,ZAr,e0r,M1e,o0r,r0r,c8,t0r,Po,m8,a0r,E1e,s0r,n0r,$s,l0r,y1e,i0r,d0r,w1e,c0r,m0r,A1e,f0r,g0r,h0r,Re,M3,L1e,u0r,p0r,ez,_0r,b0r,v0r,E3,B1e,T0r,F0r,oz,C0r,M0r,E0r,y3,x1e,y0r,w0r,rz,A0r,L0r,B0r,w3,k1e,x0r,k0r,tz,R0r,S0r,P0r,A3,R1e,$0r,I0r,az,j0r,D0r,N0r,L3,S1e,q0r,O0r,sz,G0r,X0r,V0r,B3,P1e,z0r,W0r,nz,Q0r,H0r,U0r,x3,$1e,J0r,Y0r,lz,K0r,Z0r,eLr,I1e,oLr,rLr,f8,Uke,Cm,k3,j1e,g8,tLr,D1e,aLr,Jke,qr,h8,sLr,Mm,nLr,N1e,lLr,iLr,q1e,dLr,cLr,mLr,u8,fLr,O1e,gLr,hLr,uLr,Pt,p8,pLr,G1e,_Lr,bLr,Em,vLr,X1e,TLr,FLr,V1e,CLr,MLr,ELr,z1e,yLr,wLr,_8,ALr,$o,b8,LLr,W1e,BLr,xLr,Is,kLr,Q1e,RLr,SLr,H1e,PLr,$Lr,U1e,ILr,jLr,DLr,Se,R3,J1e,NLr,qLr,iz,OLr,GLr,XLr,S3,Y1e,VLr,zLr,dz,WLr,QLr,HLr,P3,K1e,ULr,JLr,cz,YLr,KLr,ZLr,$3,Z1e,e8r,o8r,mz,r8r,t8r,a8r,I3,eFe,s8r,n8r,fz,l8r,i8r,d8r,j3,oFe,c8r,m8r,gz,f8r,g8r,h8r,D3,rFe,u8r,p8r,hz,_8r,b8r,v8r,N3,tFe,T8r,F8r,uz,C8r,M8r,E8r,aFe,y8r,w8r,v8,Yke,ym,q3,sFe,T8,A8r,nFe,L8r,Kke,Or,F8,B8r,wm,x8r,lFe,k8r,R8r,iFe,S8r,P8r,$8r,C8,I8r,dFe,j8r,D8r,N8r,$t,M8,q8r,cFe,O8r,G8r,Am,X8r,mFe,V8r,z8r,fFe,W8r,Q8r,H8r,gFe,U8r,J8r,E8,Y8r,Io,y8,K8r,hFe,Z8r,e7r,js,o7r,uFe,r7r,t7r,pFe,a7r,s7r,_Fe,n7r,l7r,i7r,bFe,O3,vFe,d7r,c7r,pz,m7r,f7r,g7r,TFe,h7r,u7r,w8,Zke,Lm,G3,FFe,A8,p7r,CFe,_7r,eRe,Gr,L8,b7r,Bm,v7r,MFe,T7r,F7r,EFe,C7r,M7r,E7r,B8,y7r,yFe,w7r,A7r,L7r,It,x8,B7r,wFe,x7r,k7r,xm,R7r,AFe,S7r,P7r,LFe,$7r,I7r,j7r,BFe,D7r,N7r,k8,q7r,jo,R8,O7r,xFe,G7r,X7r,Ds,V7r,kFe,z7r,W7r,RFe,Q7r,H7r,SFe,U7r,J7r,Y7r,S8,X3,PFe,K7r,Z7r,_z,e9r,o9r,r9r,V3,$Fe,t9r,a9r,bz,s9r,n9r,l9r,IFe,i9r,d9r,P8,oRe,km,z3,jFe,$8,c9r,DFe,m9r,rRe,Xr,I8,f9r,Rm,g9r,NFe,h9r,u9r,qFe,p9r,_9r,b9r,j8,v9r,OFe,T9r,F9r,C9r,jt,D8,M9r,GFe,E9r,y9r,Sm,w9r,XFe,A9r,L9r,VFe,B9r,x9r,k9r,zFe,R9r,S9r,N8,P9r,Do,q8,$9r,WFe,I9r,j9r,Ns,D9r,QFe,N9r,q9r,HFe,O9r,G9r,UFe,X9r,V9r,z9r,JFe,W3,YFe,W9r,Q9r,vz,H9r,U9r,J9r,KFe,Y9r,K9r,O8,tRe;return me=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),J5=new X({}),Y5=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new Z9r({props:{warning:"&lcub;true}",$$slots:{default:[LCt]},$$scope:{ctx:Ii}}}),K5=new X({}),Z5=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L526"}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),ty=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),ay=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),sy=new X({}),ny=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L352"}}),dy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),my=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),fy=new X({}),gy=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),py=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new Z9r({props:{$$slots:{default:[BCt]},$$scope:{ctx:Ii}}}),_y=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),by=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),vy=new X({}),Ty=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L71"}}),My=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),$h=new Z9r({props:{$$slots:{default:[xCt]},$$scope:{ctx:Ii}}}),Ey=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),yy=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),wy=new X({}),Ay=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L697"}}),By=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new X({}),Py=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L704"}}),Iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Oy=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L719"}}),Xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Hy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L726"}}),Jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new X({}),ow=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L733"}}),tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L742"}}),cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new X({}),uw=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L776"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),vw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),Cw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L783"}}),Ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new X({}),Bw=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L769"}}),kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new X({}),Iw=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L751"}}),Dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Xw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L758"}}),zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L792"}}),Kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),e6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r6=new X({}),t6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L831"}}),s6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),l6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d6=new X({}),c6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L838"}}),f6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),g6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),h6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new X({}),_6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L861"}}),v6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),T6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),F6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M6=new X({}),E6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L845"}}),w6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),A6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),L6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x6=new X({}),k6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L852"}}),S6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),P6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),$6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D6=new X({}),N6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L870"}}),O6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),G6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),X6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z6=new X({}),W6=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L877"}}),H6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),J6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K6=new X({}),Z6=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L824"}}),oA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),tA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),nA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L799"}}),iA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),cA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),gA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L806"}}),uA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),_A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),FA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L815"}}),MA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),yA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),LA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),xA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),RA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new X({}),$A=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),jA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),NA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),GA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),VA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),WA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new X({}),UA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),YA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),ZA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r0=new X({}),t0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),l0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d0=new X({}),c0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),f0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),g0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),h0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new X({}),_0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),v0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),T0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),F0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new X({}),E0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),w0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),A0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),L0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new X({}),k0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),S0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),P0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),$0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),q0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),G0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V0=new X({}),z0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Q0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),H0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),U0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new X({}),K0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),eL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),rL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),sL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),lL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),dL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),fL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),hL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),pL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),vL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),FL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),CL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),ML=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),wL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),LL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),BL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),xL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RL=new X({}),SL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),$L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),IL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),jL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),qL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),GL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),VL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WL=new X({}),QL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),UL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),JL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),YL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZL=new X({}),e8=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),r8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),t8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),a8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n8=new X({}),l8=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),d8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),c8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),m8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g8=new X({}),h8=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),p8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),b8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T8=new X({}),F8=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),M8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),E8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),y8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A8=new X({}),L8=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),x8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),k8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),R8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$8=new X({}),I8=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),D8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),N8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),q8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),ge=a("a"),io=a("span"),m(me.$$.fragment),Te=l(),Vo=a("span"),ji=o("Auto Classes"),$m=l(),ma=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),W5=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),qi=o("Instantiating one of "),qs=a("a"),Q5=o("AutoConfig"),Os=o(", "),Gs=a("a"),H5=o("AutoModel"),Oi=o(`, and
`),Xs=a("a"),U5=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jm=l(),m(qa.$$.fragment),mo=l(),he=a("p"),N7=o("will create a model that is an instance of "),Xi=a("a"),q7=o("BertModel"),O7=o("."),zo=l(),Oa=a("p"),G7=o("There is one class of "),Dm=a("code"),X7=o("AutoModel"),pPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rxe=l(),Vi=a("h2"),Nm=a("a"),fQ=a("span"),m(J5.$$.fragment),_Pe=l(),gQ=a("span"),bPe=o("Extending the Auto Classes"),txe=l(),Vs=a("p"),vPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hQ=a("code"),TPe=o("NewModel"),FPe=o(", make sure you have a "),uQ=a("code"),CPe=o("NewModelConfig"),MPe=o(` then you can add those to the auto
classes like this:`),axe=l(),m(Y5.$$.fragment),sxe=l(),V7=a("p"),EPe=o("You will then be able to use the auto classes like you would usually do!"),nxe=l(),m(qm.$$.fragment),lxe=l(),zi=a("h2"),Om=a("a"),pQ=a("span"),m(K5.$$.fragment),yPe=l(),_Q=a("span"),wPe=o("AutoConfig"),ixe=l(),Wo=a("div"),m(Z5.$$.fragment),APe=l(),ey=a("p"),LPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),z7=a("a"),BPe=o("from_pretrained()"),xPe=o(" class method."),kPe=l(),oy=a("p"),RPe=o("This class cannot be instantiated directly using "),bQ=a("code"),SPe=o("__init__()"),PPe=o(" (throws an error)."),$Pe=l(),fo=a("div"),m(ry.$$.fragment),IPe=l(),vQ=a("p"),jPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),DPe=l(),Wi=a("p"),NPe=o("The configuration class to instantiate is selected based on the "),TQ=a("code"),qPe=o("model_type"),OPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FQ=a("code"),GPe=o("pretrained_model_name_or_path"),XPe=o(":"),VPe=l(),v=a("ul"),Gm=a("li"),CQ=a("strong"),zPe=o("albert"),WPe=o(" \u2014 "),W7=a("a"),QPe=o("AlbertConfig"),HPe=o(" (ALBERT model)"),UPe=l(),Xm=a("li"),MQ=a("strong"),JPe=o("bart"),YPe=o(" \u2014 "),Q7=a("a"),KPe=o("BartConfig"),ZPe=o(" (BART model)"),e$e=l(),Vm=a("li"),EQ=a("strong"),o$e=o("beit"),r$e=o(" \u2014 "),H7=a("a"),t$e=o("BeitConfig"),a$e=o(" (BEiT model)"),s$e=l(),zm=a("li"),yQ=a("strong"),n$e=o("bert"),l$e=o(" \u2014 "),U7=a("a"),i$e=o("BertConfig"),d$e=o(" (BERT model)"),c$e=l(),Wm=a("li"),wQ=a("strong"),m$e=o("bert-generation"),f$e=o(" \u2014 "),J7=a("a"),g$e=o("BertGenerationConfig"),h$e=o(" (Bert Generation model)"),u$e=l(),Qm=a("li"),AQ=a("strong"),p$e=o("big_bird"),_$e=o(" \u2014 "),Y7=a("a"),b$e=o("BigBirdConfig"),v$e=o(" (BigBird model)"),T$e=l(),Hm=a("li"),LQ=a("strong"),F$e=o("bigbird_pegasus"),C$e=o(" \u2014 "),K7=a("a"),M$e=o("BigBirdPegasusConfig"),E$e=o(" (BigBirdPegasus model)"),y$e=l(),Um=a("li"),BQ=a("strong"),w$e=o("blenderbot"),A$e=o(" \u2014 "),Z7=a("a"),L$e=o("BlenderbotConfig"),B$e=o(" (Blenderbot model)"),x$e=l(),Jm=a("li"),xQ=a("strong"),k$e=o("blenderbot-small"),R$e=o(" \u2014 "),e9=a("a"),S$e=o("BlenderbotSmallConfig"),P$e=o(" (BlenderbotSmall model)"),$$e=l(),Ym=a("li"),kQ=a("strong"),I$e=o("camembert"),j$e=o(" \u2014 "),o9=a("a"),D$e=o("CamembertConfig"),N$e=o(" (CamemBERT model)"),q$e=l(),Km=a("li"),RQ=a("strong"),O$e=o("canine"),G$e=o(" \u2014 "),r9=a("a"),X$e=o("CanineConfig"),V$e=o(" (Canine model)"),z$e=l(),Zm=a("li"),SQ=a("strong"),W$e=o("clip"),Q$e=o(" \u2014 "),t9=a("a"),H$e=o("CLIPConfig"),U$e=o(" (CLIP model)"),J$e=l(),ef=a("li"),PQ=a("strong"),Y$e=o("convbert"),K$e=o(" \u2014 "),a9=a("a"),Z$e=o("ConvBertConfig"),eIe=o(" (ConvBERT model)"),oIe=l(),of=a("li"),$Q=a("strong"),rIe=o("convnext"),tIe=o(" \u2014 "),s9=a("a"),aIe=o("ConvNextConfig"),sIe=o(" (ConvNext model)"),nIe=l(),rf=a("li"),IQ=a("strong"),lIe=o("ctrl"),iIe=o(" \u2014 "),n9=a("a"),dIe=o("CTRLConfig"),cIe=o(" (CTRL model)"),mIe=l(),tf=a("li"),jQ=a("strong"),fIe=o("data2vec-audio"),gIe=o(" \u2014 "),l9=a("a"),hIe=o("Data2VecAudioConfig"),uIe=o(" (Data2VecAudio model)"),pIe=l(),af=a("li"),DQ=a("strong"),_Ie=o("data2vec-text"),bIe=o(" \u2014 "),i9=a("a"),vIe=o("Data2VecTextConfig"),TIe=o(" (Data2VecText model)"),FIe=l(),sf=a("li"),NQ=a("strong"),CIe=o("deberta"),MIe=o(" \u2014 "),d9=a("a"),EIe=o("DebertaConfig"),yIe=o(" (DeBERTa model)"),wIe=l(),nf=a("li"),qQ=a("strong"),AIe=o("deberta-v2"),LIe=o(" \u2014 "),c9=a("a"),BIe=o("DebertaV2Config"),xIe=o(" (DeBERTa-v2 model)"),kIe=l(),lf=a("li"),OQ=a("strong"),RIe=o("deit"),SIe=o(" \u2014 "),m9=a("a"),PIe=o("DeiTConfig"),$Ie=o(" (DeiT model)"),IIe=l(),df=a("li"),GQ=a("strong"),jIe=o("detr"),DIe=o(" \u2014 "),f9=a("a"),NIe=o("DetrConfig"),qIe=o(" (DETR model)"),OIe=l(),cf=a("li"),XQ=a("strong"),GIe=o("distilbert"),XIe=o(" \u2014 "),g9=a("a"),VIe=o("DistilBertConfig"),zIe=o(" (DistilBERT model)"),WIe=l(),mf=a("li"),VQ=a("strong"),QIe=o("dpr"),HIe=o(" \u2014 "),h9=a("a"),UIe=o("DPRConfig"),JIe=o(" (DPR model)"),YIe=l(),ff=a("li"),zQ=a("strong"),KIe=o("electra"),ZIe=o(" \u2014 "),u9=a("a"),eje=o("ElectraConfig"),oje=o(" (ELECTRA model)"),rje=l(),gf=a("li"),WQ=a("strong"),tje=o("encoder-decoder"),aje=o(" \u2014 "),p9=a("a"),sje=o("EncoderDecoderConfig"),nje=o(" (Encoder decoder model)"),lje=l(),hf=a("li"),QQ=a("strong"),ije=o("flaubert"),dje=o(" \u2014 "),_9=a("a"),cje=o("FlaubertConfig"),mje=o(" (FlauBERT model)"),fje=l(),uf=a("li"),HQ=a("strong"),gje=o("fnet"),hje=o(" \u2014 "),b9=a("a"),uje=o("FNetConfig"),pje=o(" (FNet model)"),_je=l(),pf=a("li"),UQ=a("strong"),bje=o("fsmt"),vje=o(" \u2014 "),v9=a("a"),Tje=o("FSMTConfig"),Fje=o(" (FairSeq Machine-Translation model)"),Cje=l(),_f=a("li"),JQ=a("strong"),Mje=o("funnel"),Eje=o(" \u2014 "),T9=a("a"),yje=o("FunnelConfig"),wje=o(" (Funnel Transformer model)"),Aje=l(),bf=a("li"),YQ=a("strong"),Lje=o("gpt2"),Bje=o(" \u2014 "),F9=a("a"),xje=o("GPT2Config"),kje=o(" (OpenAI GPT-2 model)"),Rje=l(),vf=a("li"),KQ=a("strong"),Sje=o("gpt_neo"),Pje=o(" \u2014 "),C9=a("a"),$je=o("GPTNeoConfig"),Ije=o(" (GPT Neo model)"),jje=l(),Tf=a("li"),ZQ=a("strong"),Dje=o("gptj"),Nje=o(" \u2014 "),M9=a("a"),qje=o("GPTJConfig"),Oje=o(" (GPT-J model)"),Gje=l(),Ff=a("li"),eH=a("strong"),Xje=o("hubert"),Vje=o(" \u2014 "),E9=a("a"),zje=o("HubertConfig"),Wje=o(" (Hubert model)"),Qje=l(),Cf=a("li"),oH=a("strong"),Hje=o("ibert"),Uje=o(" \u2014 "),y9=a("a"),Jje=o("IBertConfig"),Yje=o(" (I-BERT model)"),Kje=l(),Mf=a("li"),rH=a("strong"),Zje=o("imagegpt"),eDe=o(" \u2014 "),w9=a("a"),oDe=o("ImageGPTConfig"),rDe=o(" (ImageGPT model)"),tDe=l(),Ef=a("li"),tH=a("strong"),aDe=o("layoutlm"),sDe=o(" \u2014 "),A9=a("a"),nDe=o("LayoutLMConfig"),lDe=o(" (LayoutLM model)"),iDe=l(),yf=a("li"),aH=a("strong"),dDe=o("layoutlmv2"),cDe=o(" \u2014 "),L9=a("a"),mDe=o("LayoutLMv2Config"),fDe=o(" (LayoutLMv2 model)"),gDe=l(),wf=a("li"),sH=a("strong"),hDe=o("led"),uDe=o(" \u2014 "),B9=a("a"),pDe=o("LEDConfig"),_De=o(" (LED model)"),bDe=l(),Af=a("li"),nH=a("strong"),vDe=o("longformer"),TDe=o(" \u2014 "),x9=a("a"),FDe=o("LongformerConfig"),CDe=o(" (Longformer model)"),MDe=l(),Lf=a("li"),lH=a("strong"),EDe=o("luke"),yDe=o(" \u2014 "),k9=a("a"),wDe=o("LukeConfig"),ADe=o(" (LUKE model)"),LDe=l(),Bf=a("li"),iH=a("strong"),BDe=o("lxmert"),xDe=o(" \u2014 "),R9=a("a"),kDe=o("LxmertConfig"),RDe=o(" (LXMERT model)"),SDe=l(),xf=a("li"),dH=a("strong"),PDe=o("m2m_100"),$De=o(" \u2014 "),S9=a("a"),IDe=o("M2M100Config"),jDe=o(" (M2M100 model)"),DDe=l(),kf=a("li"),cH=a("strong"),NDe=o("marian"),qDe=o(" \u2014 "),P9=a("a"),ODe=o("MarianConfig"),GDe=o(" (Marian model)"),XDe=l(),Rf=a("li"),mH=a("strong"),VDe=o("maskformer"),zDe=o(" \u2014 "),$9=a("a"),WDe=o("MaskFormerConfig"),QDe=o(" (MaskFormer model)"),HDe=l(),Sf=a("li"),fH=a("strong"),UDe=o("mbart"),JDe=o(" \u2014 "),I9=a("a"),YDe=o("MBartConfig"),KDe=o(" (mBART model)"),ZDe=l(),Pf=a("li"),gH=a("strong"),eNe=o("megatron-bert"),oNe=o(" \u2014 "),j9=a("a"),rNe=o("MegatronBertConfig"),tNe=o(" (MegatronBert model)"),aNe=l(),$f=a("li"),hH=a("strong"),sNe=o("mobilebert"),nNe=o(" \u2014 "),D9=a("a"),lNe=o("MobileBertConfig"),iNe=o(" (MobileBERT model)"),dNe=l(),If=a("li"),uH=a("strong"),cNe=o("mpnet"),mNe=o(" \u2014 "),N9=a("a"),fNe=o("MPNetConfig"),gNe=o(" (MPNet model)"),hNe=l(),jf=a("li"),pH=a("strong"),uNe=o("mt5"),pNe=o(" \u2014 "),q9=a("a"),_Ne=o("MT5Config"),bNe=o(" (mT5 model)"),vNe=l(),Df=a("li"),_H=a("strong"),TNe=o("nystromformer"),FNe=o(" \u2014 "),O9=a("a"),CNe=o("NystromformerConfig"),MNe=o(" (Nystromformer model)"),ENe=l(),Nf=a("li"),bH=a("strong"),yNe=o("openai-gpt"),wNe=o(" \u2014 "),G9=a("a"),ANe=o("OpenAIGPTConfig"),LNe=o(" (OpenAI GPT model)"),BNe=l(),qf=a("li"),vH=a("strong"),xNe=o("pegasus"),kNe=o(" \u2014 "),X9=a("a"),RNe=o("PegasusConfig"),SNe=o(" (Pegasus model)"),PNe=l(),Of=a("li"),TH=a("strong"),$Ne=o("perceiver"),INe=o(" \u2014 "),V9=a("a"),jNe=o("PerceiverConfig"),DNe=o(" (Perceiver model)"),NNe=l(),Gf=a("li"),FH=a("strong"),qNe=o("plbart"),ONe=o(" \u2014 "),z9=a("a"),GNe=o("PLBartConfig"),XNe=o(" (PLBart model)"),VNe=l(),Xf=a("li"),CH=a("strong"),zNe=o("poolformer"),WNe=o(" \u2014 "),W9=a("a"),QNe=o("PoolFormerConfig"),HNe=o(" (PoolFormer model)"),UNe=l(),Vf=a("li"),MH=a("strong"),JNe=o("prophetnet"),YNe=o(" \u2014 "),Q9=a("a"),KNe=o("ProphetNetConfig"),ZNe=o(" (ProphetNet model)"),eqe=l(),zf=a("li"),EH=a("strong"),oqe=o("qdqbert"),rqe=o(" \u2014 "),H9=a("a"),tqe=o("QDQBertConfig"),aqe=o(" (QDQBert model)"),sqe=l(),Wf=a("li"),yH=a("strong"),nqe=o("rag"),lqe=o(" \u2014 "),U9=a("a"),iqe=o("RagConfig"),dqe=o(" (RAG model)"),cqe=l(),Qf=a("li"),wH=a("strong"),mqe=o("realm"),fqe=o(" \u2014 "),J9=a("a"),gqe=o("RealmConfig"),hqe=o(" (Realm model)"),uqe=l(),Hf=a("li"),AH=a("strong"),pqe=o("reformer"),_qe=o(" \u2014 "),Y9=a("a"),bqe=o("ReformerConfig"),vqe=o(" (Reformer model)"),Tqe=l(),Uf=a("li"),LH=a("strong"),Fqe=o("rembert"),Cqe=o(" \u2014 "),K9=a("a"),Mqe=o("RemBertConfig"),Eqe=o(" (RemBERT model)"),yqe=l(),Jf=a("li"),BH=a("strong"),wqe=o("retribert"),Aqe=o(" \u2014 "),Z9=a("a"),Lqe=o("RetriBertConfig"),Bqe=o(" (RetriBERT model)"),xqe=l(),Yf=a("li"),xH=a("strong"),kqe=o("roberta"),Rqe=o(" \u2014 "),eB=a("a"),Sqe=o("RobertaConfig"),Pqe=o(" (RoBERTa model)"),$qe=l(),Kf=a("li"),kH=a("strong"),Iqe=o("roformer"),jqe=o(" \u2014 "),oB=a("a"),Dqe=o("RoFormerConfig"),Nqe=o(" (RoFormer model)"),qqe=l(),Zf=a("li"),RH=a("strong"),Oqe=o("segformer"),Gqe=o(" \u2014 "),rB=a("a"),Xqe=o("SegformerConfig"),Vqe=o(" (SegFormer model)"),zqe=l(),eg=a("li"),SH=a("strong"),Wqe=o("sew"),Qqe=o(" \u2014 "),tB=a("a"),Hqe=o("SEWConfig"),Uqe=o(" (SEW model)"),Jqe=l(),og=a("li"),PH=a("strong"),Yqe=o("sew-d"),Kqe=o(" \u2014 "),aB=a("a"),Zqe=o("SEWDConfig"),eOe=o(" (SEW-D model)"),oOe=l(),rg=a("li"),$H=a("strong"),rOe=o("speech-encoder-decoder"),tOe=o(" \u2014 "),sB=a("a"),aOe=o("SpeechEncoderDecoderConfig"),sOe=o(" (Speech Encoder decoder model)"),nOe=l(),tg=a("li"),IH=a("strong"),lOe=o("speech_to_text"),iOe=o(" \u2014 "),nB=a("a"),dOe=o("Speech2TextConfig"),cOe=o(" (Speech2Text model)"),mOe=l(),ag=a("li"),jH=a("strong"),fOe=o("speech_to_text_2"),gOe=o(" \u2014 "),lB=a("a"),hOe=o("Speech2Text2Config"),uOe=o(" (Speech2Text2 model)"),pOe=l(),sg=a("li"),DH=a("strong"),_Oe=o("splinter"),bOe=o(" \u2014 "),iB=a("a"),vOe=o("SplinterConfig"),TOe=o(" (Splinter model)"),FOe=l(),ng=a("li"),NH=a("strong"),COe=o("squeezebert"),MOe=o(" \u2014 "),dB=a("a"),EOe=o("SqueezeBertConfig"),yOe=o(" (SqueezeBERT model)"),wOe=l(),lg=a("li"),qH=a("strong"),AOe=o("swin"),LOe=o(" \u2014 "),cB=a("a"),BOe=o("SwinConfig"),xOe=o(" (Swin model)"),kOe=l(),ig=a("li"),OH=a("strong"),ROe=o("t5"),SOe=o(" \u2014 "),mB=a("a"),POe=o("T5Config"),$Oe=o(" (T5 model)"),IOe=l(),dg=a("li"),GH=a("strong"),jOe=o("tapas"),DOe=o(" \u2014 "),fB=a("a"),NOe=o("TapasConfig"),qOe=o(" (TAPAS model)"),OOe=l(),cg=a("li"),XH=a("strong"),GOe=o("transfo-xl"),XOe=o(" \u2014 "),gB=a("a"),VOe=o("TransfoXLConfig"),zOe=o(" (Transformer-XL model)"),WOe=l(),mg=a("li"),VH=a("strong"),QOe=o("trocr"),HOe=o(" \u2014 "),hB=a("a"),UOe=o("TrOCRConfig"),JOe=o(" (TrOCR model)"),YOe=l(),fg=a("li"),zH=a("strong"),KOe=o("unispeech"),ZOe=o(" \u2014 "),uB=a("a"),eGe=o("UniSpeechConfig"),oGe=o(" (UniSpeech model)"),rGe=l(),gg=a("li"),WH=a("strong"),tGe=o("unispeech-sat"),aGe=o(" \u2014 "),pB=a("a"),sGe=o("UniSpeechSatConfig"),nGe=o(" (UniSpeechSat model)"),lGe=l(),hg=a("li"),QH=a("strong"),iGe=o("vilt"),dGe=o(" \u2014 "),_B=a("a"),cGe=o("ViltConfig"),mGe=o(" (ViLT model)"),fGe=l(),ug=a("li"),HH=a("strong"),gGe=o("vision-encoder-decoder"),hGe=o(" \u2014 "),bB=a("a"),uGe=o("VisionEncoderDecoderConfig"),pGe=o(" (Vision Encoder decoder model)"),_Ge=l(),pg=a("li"),UH=a("strong"),bGe=o("vision-text-dual-encoder"),vGe=o(" \u2014 "),vB=a("a"),TGe=o("VisionTextDualEncoderConfig"),FGe=o(" (VisionTextDualEncoder model)"),CGe=l(),_g=a("li"),JH=a("strong"),MGe=o("visual_bert"),EGe=o(" \u2014 "),TB=a("a"),yGe=o("VisualBertConfig"),wGe=o(" (VisualBert model)"),AGe=l(),bg=a("li"),YH=a("strong"),LGe=o("vit"),BGe=o(" \u2014 "),FB=a("a"),xGe=o("ViTConfig"),kGe=o(" (ViT model)"),RGe=l(),vg=a("li"),KH=a("strong"),SGe=o("vit_mae"),PGe=o(" \u2014 "),CB=a("a"),$Ge=o("ViTMAEConfig"),IGe=o(" (ViTMAE model)"),jGe=l(),Tg=a("li"),ZH=a("strong"),DGe=o("wav2vec2"),NGe=o(" \u2014 "),MB=a("a"),qGe=o("Wav2Vec2Config"),OGe=o(" (Wav2Vec2 model)"),GGe=l(),Fg=a("li"),eU=a("strong"),XGe=o("wavlm"),VGe=o(" \u2014 "),EB=a("a"),zGe=o("WavLMConfig"),WGe=o(" (WavLM model)"),QGe=l(),Cg=a("li"),oU=a("strong"),HGe=o("xglm"),UGe=o(" \u2014 "),yB=a("a"),JGe=o("XGLMConfig"),YGe=o(" (XGLM model)"),KGe=l(),Mg=a("li"),rU=a("strong"),ZGe=o("xlm"),eXe=o(" \u2014 "),wB=a("a"),oXe=o("XLMConfig"),rXe=o(" (XLM model)"),tXe=l(),Eg=a("li"),tU=a("strong"),aXe=o("xlm-prophetnet"),sXe=o(" \u2014 "),AB=a("a"),nXe=o("XLMProphetNetConfig"),lXe=o(" (XLMProphetNet model)"),iXe=l(),yg=a("li"),aU=a("strong"),dXe=o("xlm-roberta"),cXe=o(" \u2014 "),LB=a("a"),mXe=o("XLMRobertaConfig"),fXe=o(" (XLM-RoBERTa model)"),gXe=l(),wg=a("li"),sU=a("strong"),hXe=o("xlm-roberta-xl"),uXe=o(" \u2014 "),BB=a("a"),pXe=o("XLMRobertaXLConfig"),_Xe=o(" (XLM-RoBERTa-XL model)"),bXe=l(),Ag=a("li"),nU=a("strong"),vXe=o("xlnet"),TXe=o(" \u2014 "),xB=a("a"),FXe=o("XLNetConfig"),CXe=o(" (XLNet model)"),MXe=l(),Lg=a("li"),lU=a("strong"),EXe=o("yoso"),yXe=o(" \u2014 "),kB=a("a"),wXe=o("YosoConfig"),AXe=o(" (YOSO model)"),LXe=l(),iU=a("p"),BXe=o("Examples:"),xXe=l(),m(ty.$$.fragment),kXe=l(),Bg=a("div"),m(ay.$$.fragment),RXe=l(),dU=a("p"),SXe=o("Register a new configuration for this class."),dxe=l(),Qi=a("h2"),xg=a("a"),cU=a("span"),m(sy.$$.fragment),PXe=l(),mU=a("span"),$Xe=o("AutoTokenizer"),cxe=l(),Qo=a("div"),m(ny.$$.fragment),IXe=l(),ly=a("p"),jXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RB=a("a"),DXe=o("AutoTokenizer.from_pretrained()"),NXe=o(" class method."),qXe=l(),iy=a("p"),OXe=o("This class cannot be instantiated directly using "),fU=a("code"),GXe=o("__init__()"),XXe=o(" (throws an error)."),VXe=l(),go=a("div"),m(dy.$$.fragment),zXe=l(),gU=a("p"),WXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QXe=l(),Ga=a("p"),HXe=o("The tokenizer class to instantiate is selected based on the "),hU=a("code"),UXe=o("model_type"),JXe=o(` property of the config object (either
passed as an argument or loaded from `),uU=a("code"),YXe=o("pretrained_model_name_or_path"),KXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pU=a("code"),ZXe=o("pretrained_model_name_or_path"),eVe=o(":"),oVe=l(),E=a("ul"),zs=a("li"),_U=a("strong"),rVe=o("albert"),tVe=o(" \u2014 "),SB=a("a"),aVe=o("AlbertTokenizer"),sVe=o(" or "),PB=a("a"),nVe=o("AlbertTokenizerFast"),lVe=o(" (ALBERT model)"),iVe=l(),Ws=a("li"),bU=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),$B=a("a"),mVe=o("BartTokenizer"),fVe=o(" or "),IB=a("a"),gVe=o("BartTokenizerFast"),hVe=o(" (BART model)"),uVe=l(),Qs=a("li"),vU=a("strong"),pVe=o("barthez"),_Ve=o(" \u2014 "),jB=a("a"),bVe=o("BarthezTokenizer"),vVe=o(" or "),DB=a("a"),TVe=o("BarthezTokenizerFast"),FVe=o(" (BARThez model)"),CVe=l(),kg=a("li"),TU=a("strong"),MVe=o("bartpho"),EVe=o(" \u2014 "),NB=a("a"),yVe=o("BartphoTokenizer"),wVe=o(" (BARTpho model)"),AVe=l(),Hs=a("li"),FU=a("strong"),LVe=o("bert"),BVe=o(" \u2014 "),qB=a("a"),xVe=o("BertTokenizer"),kVe=o(" or "),OB=a("a"),RVe=o("BertTokenizerFast"),SVe=o(" (BERT model)"),PVe=l(),Rg=a("li"),CU=a("strong"),$Ve=o("bert-generation"),IVe=o(" \u2014 "),GB=a("a"),jVe=o("BertGenerationTokenizer"),DVe=o(" (Bert Generation model)"),NVe=l(),Sg=a("li"),MU=a("strong"),qVe=o("bert-japanese"),OVe=o(" \u2014 "),XB=a("a"),GVe=o("BertJapaneseTokenizer"),XVe=o(" (BertJapanese model)"),VVe=l(),Pg=a("li"),EU=a("strong"),zVe=o("bertweet"),WVe=o(" \u2014 "),VB=a("a"),QVe=o("BertweetTokenizer"),HVe=o(" (Bertweet model)"),UVe=l(),Us=a("li"),yU=a("strong"),JVe=o("big_bird"),YVe=o(" \u2014 "),zB=a("a"),KVe=o("BigBirdTokenizer"),ZVe=o(" or "),WB=a("a"),eze=o("BigBirdTokenizerFast"),oze=o(" (BigBird model)"),rze=l(),Js=a("li"),wU=a("strong"),tze=o("bigbird_pegasus"),aze=o(" \u2014 "),QB=a("a"),sze=o("PegasusTokenizer"),nze=o(" or "),HB=a("a"),lze=o("PegasusTokenizerFast"),ize=o(" (BigBirdPegasus model)"),dze=l(),Ys=a("li"),AU=a("strong"),cze=o("blenderbot"),mze=o(" \u2014 "),UB=a("a"),fze=o("BlenderbotTokenizer"),gze=o(" or "),JB=a("a"),hze=o("BlenderbotTokenizerFast"),uze=o(" (Blenderbot model)"),pze=l(),$g=a("li"),LU=a("strong"),_ze=o("blenderbot-small"),bze=o(" \u2014 "),YB=a("a"),vze=o("BlenderbotSmallTokenizer"),Tze=o(" (BlenderbotSmall model)"),Fze=l(),Ig=a("li"),BU=a("strong"),Cze=o("byt5"),Mze=o(" \u2014 "),KB=a("a"),Eze=o("ByT5Tokenizer"),yze=o(" (ByT5 model)"),wze=l(),Ks=a("li"),xU=a("strong"),Aze=o("camembert"),Lze=o(" \u2014 "),ZB=a("a"),Bze=o("CamembertTokenizer"),xze=o(" or "),ex=a("a"),kze=o("CamembertTokenizerFast"),Rze=o(" (CamemBERT model)"),Sze=l(),jg=a("li"),kU=a("strong"),Pze=o("canine"),$ze=o(" \u2014 "),ox=a("a"),Ize=o("CanineTokenizer"),jze=o(" (Canine model)"),Dze=l(),Zs=a("li"),RU=a("strong"),Nze=o("clip"),qze=o(" \u2014 "),rx=a("a"),Oze=o("CLIPTokenizer"),Gze=o(" or "),tx=a("a"),Xze=o("CLIPTokenizerFast"),Vze=o(" (CLIP model)"),zze=l(),en=a("li"),SU=a("strong"),Wze=o("convbert"),Qze=o(" \u2014 "),ax=a("a"),Hze=o("ConvBertTokenizer"),Uze=o(" or "),sx=a("a"),Jze=o("ConvBertTokenizerFast"),Yze=o(" (ConvBERT model)"),Kze=l(),on=a("li"),PU=a("strong"),Zze=o("cpm"),eWe=o(" \u2014 "),nx=a("a"),oWe=o("CpmTokenizer"),rWe=o(" or "),$U=a("code"),tWe=o("CpmTokenizerFast"),aWe=o(" (CPM model)"),sWe=l(),Dg=a("li"),IU=a("strong"),nWe=o("ctrl"),lWe=o(" \u2014 "),lx=a("a"),iWe=o("CTRLTokenizer"),dWe=o(" (CTRL model)"),cWe=l(),rn=a("li"),jU=a("strong"),mWe=o("deberta"),fWe=o(" \u2014 "),ix=a("a"),gWe=o("DebertaTokenizer"),hWe=o(" or "),dx=a("a"),uWe=o("DebertaTokenizerFast"),pWe=o(" (DeBERTa model)"),_We=l(),Ng=a("li"),DU=a("strong"),bWe=o("deberta-v2"),vWe=o(" \u2014 "),cx=a("a"),TWe=o("DebertaV2Tokenizer"),FWe=o(" (DeBERTa-v2 model)"),CWe=l(),tn=a("li"),NU=a("strong"),MWe=o("distilbert"),EWe=o(" \u2014 "),mx=a("a"),yWe=o("DistilBertTokenizer"),wWe=o(" or "),fx=a("a"),AWe=o("DistilBertTokenizerFast"),LWe=o(" (DistilBERT model)"),BWe=l(),an=a("li"),qU=a("strong"),xWe=o("dpr"),kWe=o(" \u2014 "),gx=a("a"),RWe=o("DPRQuestionEncoderTokenizer"),SWe=o(" or "),hx=a("a"),PWe=o("DPRQuestionEncoderTokenizerFast"),$We=o(" (DPR model)"),IWe=l(),sn=a("li"),OU=a("strong"),jWe=o("electra"),DWe=o(" \u2014 "),ux=a("a"),NWe=o("ElectraTokenizer"),qWe=o(" or "),px=a("a"),OWe=o("ElectraTokenizerFast"),GWe=o(" (ELECTRA model)"),XWe=l(),qg=a("li"),GU=a("strong"),VWe=o("flaubert"),zWe=o(" \u2014 "),_x=a("a"),WWe=o("FlaubertTokenizer"),QWe=o(" (FlauBERT model)"),HWe=l(),nn=a("li"),XU=a("strong"),UWe=o("fnet"),JWe=o(" \u2014 "),bx=a("a"),YWe=o("FNetTokenizer"),KWe=o(" or "),vx=a("a"),ZWe=o("FNetTokenizerFast"),eQe=o(" (FNet model)"),oQe=l(),Og=a("li"),VU=a("strong"),rQe=o("fsmt"),tQe=o(" \u2014 "),Tx=a("a"),aQe=o("FSMTTokenizer"),sQe=o(" (FairSeq Machine-Translation model)"),nQe=l(),ln=a("li"),zU=a("strong"),lQe=o("funnel"),iQe=o(" \u2014 "),Fx=a("a"),dQe=o("FunnelTokenizer"),cQe=o(" or "),Cx=a("a"),mQe=o("FunnelTokenizerFast"),fQe=o(" (Funnel Transformer model)"),gQe=l(),dn=a("li"),WU=a("strong"),hQe=o("gpt2"),uQe=o(" \u2014 "),Mx=a("a"),pQe=o("GPT2Tokenizer"),_Qe=o(" or "),Ex=a("a"),bQe=o("GPT2TokenizerFast"),vQe=o(" (OpenAI GPT-2 model)"),TQe=l(),cn=a("li"),QU=a("strong"),FQe=o("gpt_neo"),CQe=o(" \u2014 "),yx=a("a"),MQe=o("GPT2Tokenizer"),EQe=o(" or "),wx=a("a"),yQe=o("GPT2TokenizerFast"),wQe=o(" (GPT Neo model)"),AQe=l(),mn=a("li"),HU=a("strong"),LQe=o("herbert"),BQe=o(" \u2014 "),Ax=a("a"),xQe=o("HerbertTokenizer"),kQe=o(" or "),Lx=a("a"),RQe=o("HerbertTokenizerFast"),SQe=o(" (HerBERT model)"),PQe=l(),Gg=a("li"),UU=a("strong"),$Qe=o("hubert"),IQe=o(" \u2014 "),Bx=a("a"),jQe=o("Wav2Vec2CTCTokenizer"),DQe=o(" (Hubert model)"),NQe=l(),fn=a("li"),JU=a("strong"),qQe=o("ibert"),OQe=o(" \u2014 "),xx=a("a"),GQe=o("RobertaTokenizer"),XQe=o(" or "),kx=a("a"),VQe=o("RobertaTokenizerFast"),zQe=o(" (I-BERT model)"),WQe=l(),gn=a("li"),YU=a("strong"),QQe=o("layoutlm"),HQe=o(" \u2014 "),Rx=a("a"),UQe=o("LayoutLMTokenizer"),JQe=o(" or "),Sx=a("a"),YQe=o("LayoutLMTokenizerFast"),KQe=o(" (LayoutLM model)"),ZQe=l(),hn=a("li"),KU=a("strong"),eHe=o("layoutlmv2"),oHe=o(" \u2014 "),Px=a("a"),rHe=o("LayoutLMv2Tokenizer"),tHe=o(" or "),$x=a("a"),aHe=o("LayoutLMv2TokenizerFast"),sHe=o(" (LayoutLMv2 model)"),nHe=l(),un=a("li"),ZU=a("strong"),lHe=o("layoutxlm"),iHe=o(" \u2014 "),Ix=a("a"),dHe=o("LayoutXLMTokenizer"),cHe=o(" or "),jx=a("a"),mHe=o("LayoutXLMTokenizerFast"),fHe=o(" (LayoutXLM model)"),gHe=l(),pn=a("li"),eJ=a("strong"),hHe=o("led"),uHe=o(" \u2014 "),Dx=a("a"),pHe=o("LEDTokenizer"),_He=o(" or "),Nx=a("a"),bHe=o("LEDTokenizerFast"),vHe=o(" (LED model)"),THe=l(),_n=a("li"),oJ=a("strong"),FHe=o("longformer"),CHe=o(" \u2014 "),qx=a("a"),MHe=o("LongformerTokenizer"),EHe=o(" or "),Ox=a("a"),yHe=o("LongformerTokenizerFast"),wHe=o(" (Longformer model)"),AHe=l(),Xg=a("li"),rJ=a("strong"),LHe=o("luke"),BHe=o(" \u2014 "),Gx=a("a"),xHe=o("LukeTokenizer"),kHe=o(" (LUKE model)"),RHe=l(),bn=a("li"),tJ=a("strong"),SHe=o("lxmert"),PHe=o(" \u2014 "),Xx=a("a"),$He=o("LxmertTokenizer"),IHe=o(" or "),Vx=a("a"),jHe=o("LxmertTokenizerFast"),DHe=o(" (LXMERT model)"),NHe=l(),Vg=a("li"),aJ=a("strong"),qHe=o("m2m_100"),OHe=o(" \u2014 "),zx=a("a"),GHe=o("M2M100Tokenizer"),XHe=o(" (M2M100 model)"),VHe=l(),zg=a("li"),sJ=a("strong"),zHe=o("marian"),WHe=o(" \u2014 "),Wx=a("a"),QHe=o("MarianTokenizer"),HHe=o(" (Marian model)"),UHe=l(),vn=a("li"),nJ=a("strong"),JHe=o("mbart"),YHe=o(" \u2014 "),Qx=a("a"),KHe=o("MBartTokenizer"),ZHe=o(" or "),Hx=a("a"),eUe=o("MBartTokenizerFast"),oUe=o(" (mBART model)"),rUe=l(),Tn=a("li"),lJ=a("strong"),tUe=o("mbart50"),aUe=o(" \u2014 "),Ux=a("a"),sUe=o("MBart50Tokenizer"),nUe=o(" or "),Jx=a("a"),lUe=o("MBart50TokenizerFast"),iUe=o(" (mBART-50 model)"),dUe=l(),Wg=a("li"),iJ=a("strong"),cUe=o("mluke"),mUe=o(" \u2014 "),Yx=a("a"),fUe=o("MLukeTokenizer"),gUe=o(" (mLUKE model)"),hUe=l(),Fn=a("li"),dJ=a("strong"),uUe=o("mobilebert"),pUe=o(" \u2014 "),Kx=a("a"),_Ue=o("MobileBertTokenizer"),bUe=o(" or "),Zx=a("a"),vUe=o("MobileBertTokenizerFast"),TUe=o(" (MobileBERT model)"),FUe=l(),Cn=a("li"),cJ=a("strong"),CUe=o("mpnet"),MUe=o(" \u2014 "),ek=a("a"),EUe=o("MPNetTokenizer"),yUe=o(" or "),ok=a("a"),wUe=o("MPNetTokenizerFast"),AUe=o(" (MPNet model)"),LUe=l(),Mn=a("li"),mJ=a("strong"),BUe=o("mt5"),xUe=o(" \u2014 "),rk=a("a"),kUe=o("MT5Tokenizer"),RUe=o(" or "),tk=a("a"),SUe=o("MT5TokenizerFast"),PUe=o(" (mT5 model)"),$Ue=l(),En=a("li"),fJ=a("strong"),IUe=o("openai-gpt"),jUe=o(" \u2014 "),ak=a("a"),DUe=o("OpenAIGPTTokenizer"),NUe=o(" or "),sk=a("a"),qUe=o("OpenAIGPTTokenizerFast"),OUe=o(" (OpenAI GPT model)"),GUe=l(),yn=a("li"),gJ=a("strong"),XUe=o("pegasus"),VUe=o(" \u2014 "),nk=a("a"),zUe=o("PegasusTokenizer"),WUe=o(" or "),lk=a("a"),QUe=o("PegasusTokenizerFast"),HUe=o(" (Pegasus model)"),UUe=l(),Qg=a("li"),hJ=a("strong"),JUe=o("perceiver"),YUe=o(" \u2014 "),ik=a("a"),KUe=o("PerceiverTokenizer"),ZUe=o(" (Perceiver model)"),eJe=l(),Hg=a("li"),uJ=a("strong"),oJe=o("phobert"),rJe=o(" \u2014 "),dk=a("a"),tJe=o("PhobertTokenizer"),aJe=o(" (PhoBERT model)"),sJe=l(),Ug=a("li"),pJ=a("strong"),nJe=o("plbart"),lJe=o(" \u2014 "),ck=a("a"),iJe=o("PLBartTokenizer"),dJe=o(" (PLBart model)"),cJe=l(),Jg=a("li"),_J=a("strong"),mJe=o("prophetnet"),fJe=o(" \u2014 "),mk=a("a"),gJe=o("ProphetNetTokenizer"),hJe=o(" (ProphetNet model)"),uJe=l(),wn=a("li"),bJ=a("strong"),pJe=o("qdqbert"),_Je=o(" \u2014 "),fk=a("a"),bJe=o("BertTokenizer"),vJe=o(" or "),gk=a("a"),TJe=o("BertTokenizerFast"),FJe=o(" (QDQBert model)"),CJe=l(),Yg=a("li"),vJ=a("strong"),MJe=o("rag"),EJe=o(" \u2014 "),hk=a("a"),yJe=o("RagTokenizer"),wJe=o(" (RAG model)"),AJe=l(),An=a("li"),TJ=a("strong"),LJe=o("realm"),BJe=o(" \u2014 "),uk=a("a"),xJe=o("RealmTokenizer"),kJe=o(" or "),pk=a("a"),RJe=o("RealmTokenizerFast"),SJe=o(" (Realm model)"),PJe=l(),Ln=a("li"),FJ=a("strong"),$Je=o("reformer"),IJe=o(" \u2014 "),_k=a("a"),jJe=o("ReformerTokenizer"),DJe=o(" or "),bk=a("a"),NJe=o("ReformerTokenizerFast"),qJe=o(" (Reformer model)"),OJe=l(),Bn=a("li"),CJ=a("strong"),GJe=o("rembert"),XJe=o(" \u2014 "),vk=a("a"),VJe=o("RemBertTokenizer"),zJe=o(" or "),Tk=a("a"),WJe=o("RemBertTokenizerFast"),QJe=o(" (RemBERT model)"),HJe=l(),xn=a("li"),MJ=a("strong"),UJe=o("retribert"),JJe=o(" \u2014 "),Fk=a("a"),YJe=o("RetriBertTokenizer"),KJe=o(" or "),Ck=a("a"),ZJe=o("RetriBertTokenizerFast"),eYe=o(" (RetriBERT model)"),oYe=l(),kn=a("li"),EJ=a("strong"),rYe=o("roberta"),tYe=o(" \u2014 "),Mk=a("a"),aYe=o("RobertaTokenizer"),sYe=o(" or "),Ek=a("a"),nYe=o("RobertaTokenizerFast"),lYe=o(" (RoBERTa model)"),iYe=l(),Rn=a("li"),yJ=a("strong"),dYe=o("roformer"),cYe=o(" \u2014 "),yk=a("a"),mYe=o("RoFormerTokenizer"),fYe=o(" or "),wk=a("a"),gYe=o("RoFormerTokenizerFast"),hYe=o(" (RoFormer model)"),uYe=l(),Kg=a("li"),wJ=a("strong"),pYe=o("speech_to_text"),_Ye=o(" \u2014 "),Ak=a("a"),bYe=o("Speech2TextTokenizer"),vYe=o(" (Speech2Text model)"),TYe=l(),Zg=a("li"),AJ=a("strong"),FYe=o("speech_to_text_2"),CYe=o(" \u2014 "),Lk=a("a"),MYe=o("Speech2Text2Tokenizer"),EYe=o(" (Speech2Text2 model)"),yYe=l(),Sn=a("li"),LJ=a("strong"),wYe=o("splinter"),AYe=o(" \u2014 "),Bk=a("a"),LYe=o("SplinterTokenizer"),BYe=o(" or "),xk=a("a"),xYe=o("SplinterTokenizerFast"),kYe=o(" (Splinter model)"),RYe=l(),Pn=a("li"),BJ=a("strong"),SYe=o("squeezebert"),PYe=o(" \u2014 "),kk=a("a"),$Ye=o("SqueezeBertTokenizer"),IYe=o(" or "),Rk=a("a"),jYe=o("SqueezeBertTokenizerFast"),DYe=o(" (SqueezeBERT model)"),NYe=l(),$n=a("li"),xJ=a("strong"),qYe=o("t5"),OYe=o(" \u2014 "),Sk=a("a"),GYe=o("T5Tokenizer"),XYe=o(" or "),Pk=a("a"),VYe=o("T5TokenizerFast"),zYe=o(" (T5 model)"),WYe=l(),eh=a("li"),kJ=a("strong"),QYe=o("tapas"),HYe=o(" \u2014 "),$k=a("a"),UYe=o("TapasTokenizer"),JYe=o(" (TAPAS model)"),YYe=l(),oh=a("li"),RJ=a("strong"),KYe=o("transfo-xl"),ZYe=o(" \u2014 "),Ik=a("a"),eKe=o("TransfoXLTokenizer"),oKe=o(" (Transformer-XL model)"),rKe=l(),rh=a("li"),SJ=a("strong"),tKe=o("wav2vec2"),aKe=o(" \u2014 "),jk=a("a"),sKe=o("Wav2Vec2CTCTokenizer"),nKe=o(" (Wav2Vec2 model)"),lKe=l(),th=a("li"),PJ=a("strong"),iKe=o("wav2vec2_phoneme"),dKe=o(" \u2014 "),Dk=a("a"),cKe=o("Wav2Vec2PhonemeCTCTokenizer"),mKe=o(" (Wav2Vec2Phoneme model)"),fKe=l(),In=a("li"),$J=a("strong"),gKe=o("xglm"),hKe=o(" \u2014 "),Nk=a("a"),uKe=o("XGLMTokenizer"),pKe=o(" or "),qk=a("a"),_Ke=o("XGLMTokenizerFast"),bKe=o(" (XGLM model)"),vKe=l(),ah=a("li"),IJ=a("strong"),TKe=o("xlm"),FKe=o(" \u2014 "),Ok=a("a"),CKe=o("XLMTokenizer"),MKe=o(" (XLM model)"),EKe=l(),sh=a("li"),jJ=a("strong"),yKe=o("xlm-prophetnet"),wKe=o(" \u2014 "),Gk=a("a"),AKe=o("XLMProphetNetTokenizer"),LKe=o(" (XLMProphetNet model)"),BKe=l(),jn=a("li"),DJ=a("strong"),xKe=o("xlm-roberta"),kKe=o(" \u2014 "),Xk=a("a"),RKe=o("XLMRobertaTokenizer"),SKe=o(" or "),Vk=a("a"),PKe=o("XLMRobertaTokenizerFast"),$Ke=o(" (XLM-RoBERTa model)"),IKe=l(),Dn=a("li"),NJ=a("strong"),jKe=o("xlnet"),DKe=o(" \u2014 "),zk=a("a"),NKe=o("XLNetTokenizer"),qKe=o(" or "),Wk=a("a"),OKe=o("XLNetTokenizerFast"),GKe=o(" (XLNet model)"),XKe=l(),qJ=a("p"),VKe=o("Examples:"),zKe=l(),m(cy.$$.fragment),WKe=l(),nh=a("div"),m(my.$$.fragment),QKe=l(),OJ=a("p"),HKe=o("Register a new tokenizer in this mapping."),mxe=l(),Hi=a("h2"),lh=a("a"),GJ=a("span"),m(fy.$$.fragment),UKe=l(),XJ=a("span"),JKe=o("AutoFeatureExtractor"),fxe=l(),Ho=a("div"),m(gy.$$.fragment),YKe=l(),hy=a("p"),KKe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Qk=a("a"),ZKe=o("AutoFeatureExtractor.from_pretrained()"),eZe=o(" class method."),oZe=l(),uy=a("p"),rZe=o("This class cannot be instantiated directly using "),VJ=a("code"),tZe=o("__init__()"),aZe=o(" (throws an error)."),sZe=l(),$e=a("div"),m(py.$$.fragment),nZe=l(),zJ=a("p"),lZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),iZe=l(),Xa=a("p"),dZe=o("The feature extractor class to instantiate is selected based on the "),WJ=a("code"),cZe=o("model_type"),mZe=o(` property of the config object
(either passed as an argument or loaded from `),QJ=a("code"),fZe=o("pretrained_model_name_or_path"),gZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),HJ=a("code"),hZe=o("pretrained_model_name_or_path"),uZe=o(":"),pZe=l(),ae=a("ul"),ih=a("li"),UJ=a("strong"),_Ze=o("beit"),bZe=o(" \u2014 "),Hk=a("a"),vZe=o("BeitFeatureExtractor"),TZe=o(" (BEiT model)"),FZe=l(),dh=a("li"),JJ=a("strong"),CZe=o("clip"),MZe=o(" \u2014 "),Uk=a("a"),EZe=o("CLIPFeatureExtractor"),yZe=o(" (CLIP model)"),wZe=l(),ch=a("li"),YJ=a("strong"),AZe=o("convnext"),LZe=o(" \u2014 "),Jk=a("a"),BZe=o("ConvNextFeatureExtractor"),xZe=o(" (ConvNext model)"),kZe=l(),mh=a("li"),KJ=a("strong"),RZe=o("deit"),SZe=o(" \u2014 "),Yk=a("a"),PZe=o("DeiTFeatureExtractor"),$Ze=o(" (DeiT model)"),IZe=l(),fh=a("li"),ZJ=a("strong"),jZe=o("detr"),DZe=o(" \u2014 "),Kk=a("a"),NZe=o("DetrFeatureExtractor"),qZe=o(" (DETR model)"),OZe=l(),gh=a("li"),eY=a("strong"),GZe=o("hubert"),XZe=o(" \u2014 "),Zk=a("a"),VZe=o("Wav2Vec2FeatureExtractor"),zZe=o(" (Hubert model)"),WZe=l(),hh=a("li"),oY=a("strong"),QZe=o("layoutlmv2"),HZe=o(" \u2014 "),eR=a("a"),UZe=o("LayoutLMv2FeatureExtractor"),JZe=o(" (LayoutLMv2 model)"),YZe=l(),uh=a("li"),rY=a("strong"),KZe=o("maskformer"),ZZe=o(" \u2014 "),oR=a("a"),eeo=o("MaskFormerFeatureExtractor"),oeo=o(" (MaskFormer model)"),reo=l(),ph=a("li"),tY=a("strong"),teo=o("perceiver"),aeo=o(" \u2014 "),rR=a("a"),seo=o("PerceiverFeatureExtractor"),neo=o(" (Perceiver model)"),leo=l(),_h=a("li"),aY=a("strong"),ieo=o("poolformer"),deo=o(" \u2014 "),tR=a("a"),ceo=o("PoolFormerFeatureExtractor"),meo=o(" (PoolFormer model)"),feo=l(),bh=a("li"),sY=a("strong"),geo=o("segformer"),heo=o(" \u2014 "),aR=a("a"),ueo=o("SegformerFeatureExtractor"),peo=o(" (SegFormer model)"),_eo=l(),vh=a("li"),nY=a("strong"),beo=o("speech_to_text"),veo=o(" \u2014 "),sR=a("a"),Teo=o("Speech2TextFeatureExtractor"),Feo=o(" (Speech2Text model)"),Ceo=l(),Th=a("li"),lY=a("strong"),Meo=o("swin"),Eeo=o(" \u2014 "),nR=a("a"),yeo=o("ViTFeatureExtractor"),weo=o(" (Swin model)"),Aeo=l(),Fh=a("li"),iY=a("strong"),Leo=o("vit"),Beo=o(" \u2014 "),lR=a("a"),xeo=o("ViTFeatureExtractor"),keo=o(" (ViT model)"),Reo=l(),Ch=a("li"),dY=a("strong"),Seo=o("vit_mae"),Peo=o(" \u2014 "),iR=a("a"),$eo=o("ViTFeatureExtractor"),Ieo=o(" (ViTMAE model)"),jeo=l(),Mh=a("li"),cY=a("strong"),Deo=o("wav2vec2"),Neo=o(" \u2014 "),dR=a("a"),qeo=o("Wav2Vec2FeatureExtractor"),Oeo=o(" (Wav2Vec2 model)"),Geo=l(),m(Eh.$$.fragment),Xeo=l(),mY=a("p"),Veo=o("Examples:"),zeo=l(),m(_y.$$.fragment),Weo=l(),yh=a("div"),m(by.$$.fragment),Qeo=l(),fY=a("p"),Heo=o("Register a new feature extractor for this class."),gxe=l(),Ui=a("h2"),wh=a("a"),gY=a("span"),m(vy.$$.fragment),Ueo=l(),hY=a("span"),Jeo=o("AutoProcessor"),hxe=l(),Uo=a("div"),m(Ty.$$.fragment),Yeo=l(),Fy=a("p"),Keo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cR=a("a"),Zeo=o("AutoProcessor.from_pretrained()"),eoo=o(" class method."),ooo=l(),Cy=a("p"),roo=o("This class cannot be instantiated directly using "),uY=a("code"),too=o("__init__()"),aoo=o(" (throws an error)."),soo=l(),Ie=a("div"),m(My.$$.fragment),noo=l(),pY=a("p"),loo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ioo=l(),Ji=a("p"),doo=o("The processor class to instantiate is selected based on the "),_Y=a("code"),coo=o("model_type"),moo=o(` property of the config object (either
passed as an argument or loaded from `),bY=a("code"),foo=o("pretrained_model_name_or_path"),goo=o(" if possible):"),hoo=l(),Be=a("ul"),Ah=a("li"),vY=a("strong"),uoo=o("clip"),poo=o(" \u2014 "),mR=a("a"),_oo=o("CLIPProcessor"),boo=o(" (CLIP model)"),voo=l(),Lh=a("li"),TY=a("strong"),Too=o("layoutlmv2"),Foo=o(" \u2014 "),fR=a("a"),Coo=o("LayoutLMv2Processor"),Moo=o(" (LayoutLMv2 model)"),Eoo=l(),Bh=a("li"),FY=a("strong"),yoo=o("layoutxlm"),woo=o(" \u2014 "),gR=a("a"),Aoo=o("LayoutXLMProcessor"),Loo=o(" (LayoutXLM model)"),Boo=l(),xh=a("li"),CY=a("strong"),xoo=o("speech_to_text"),koo=o(" \u2014 "),hR=a("a"),Roo=o("Speech2TextProcessor"),Soo=o(" (Speech2Text model)"),Poo=l(),kh=a("li"),MY=a("strong"),$oo=o("speech_to_text_2"),Ioo=o(" \u2014 "),uR=a("a"),joo=o("Speech2Text2Processor"),Doo=o(" (Speech2Text2 model)"),Noo=l(),Rh=a("li"),EY=a("strong"),qoo=o("trocr"),Ooo=o(" \u2014 "),pR=a("a"),Goo=o("TrOCRProcessor"),Xoo=o(" (TrOCR model)"),Voo=l(),Sh=a("li"),yY=a("strong"),zoo=o("vision-text-dual-encoder"),Woo=o(" \u2014 "),_R=a("a"),Qoo=o("VisionTextDualEncoderProcessor"),Hoo=o(" (VisionTextDualEncoder model)"),Uoo=l(),Ph=a("li"),wY=a("strong"),Joo=o("wav2vec2"),Yoo=o(" \u2014 "),bR=a("a"),Koo=o("Wav2Vec2Processor"),Zoo=o(" (Wav2Vec2 model)"),ero=l(),m($h.$$.fragment),oro=l(),AY=a("p"),rro=o("Examples:"),tro=l(),m(Ey.$$.fragment),aro=l(),Ih=a("div"),m(yy.$$.fragment),sro=l(),LY=a("p"),nro=o("Register a new processor for this class."),uxe=l(),Yi=a("h2"),jh=a("a"),BY=a("span"),m(wy.$$.fragment),lro=l(),xY=a("span"),iro=o("AutoModel"),pxe=l(),Jo=a("div"),m(Ay.$$.fragment),dro=l(),Ki=a("p"),cro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=a("code"),mro=o("from_pretrained()"),fro=o("class method or the "),RY=a("code"),gro=o("from_config()"),hro=o(`class
method.`),uro=l(),Ly=a("p"),pro=o("This class cannot be instantiated directly using "),SY=a("code"),_ro=o("__init__()"),bro=o(" (throws an error)."),vro=l(),Vr=a("div"),m(By.$$.fragment),Tro=l(),PY=a("p"),Fro=o("Instantiates one of the base model classes of the library from a configuration."),Cro=l(),Zi=a("p"),Mro=o(`Note:
Loading a model from its configuration file does `),$Y=a("strong"),Ero=o("not"),yro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("code"),wro=o("from_pretrained()"),Aro=o("to load the model weights."),Lro=l(),jY=a("p"),Bro=o("Examples:"),xro=l(),m(xy.$$.fragment),kro=l(),je=a("div"),m(ky.$$.fragment),Rro=l(),DY=a("p"),Sro=o("Instantiate one of the base model classes of the library from a pretrained model."),Pro=l(),Va=a("p"),$ro=o("The model class to instantiate is selected based on the "),NY=a("code"),Iro=o("model_type"),jro=o(` property of the config object (either
passed as an argument or loaded from `),qY=a("code"),Dro=o("pretrained_model_name_or_path"),Nro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OY=a("code"),qro=o("pretrained_model_name_or_path"),Oro=o(":"),Gro=l(),F=a("ul"),Dh=a("li"),GY=a("strong"),Xro=o("albert"),Vro=o(" \u2014 "),vR=a("a"),zro=o("AlbertModel"),Wro=o(" (ALBERT model)"),Qro=l(),Nh=a("li"),XY=a("strong"),Hro=o("bart"),Uro=o(" \u2014 "),TR=a("a"),Jro=o("BartModel"),Yro=o(" (BART model)"),Kro=l(),qh=a("li"),VY=a("strong"),Zro=o("beit"),eto=o(" \u2014 "),FR=a("a"),oto=o("BeitModel"),rto=o(" (BEiT model)"),tto=l(),Oh=a("li"),zY=a("strong"),ato=o("bert"),sto=o(" \u2014 "),CR=a("a"),nto=o("BertModel"),lto=o(" (BERT model)"),ito=l(),Gh=a("li"),WY=a("strong"),dto=o("bert-generation"),cto=o(" \u2014 "),MR=a("a"),mto=o("BertGenerationEncoder"),fto=o(" (Bert Generation model)"),gto=l(),Xh=a("li"),QY=a("strong"),hto=o("big_bird"),uto=o(" \u2014 "),ER=a("a"),pto=o("BigBirdModel"),_to=o(" (BigBird model)"),bto=l(),Vh=a("li"),HY=a("strong"),vto=o("bigbird_pegasus"),Tto=o(" \u2014 "),yR=a("a"),Fto=o("BigBirdPegasusModel"),Cto=o(" (BigBirdPegasus model)"),Mto=l(),zh=a("li"),UY=a("strong"),Eto=o("blenderbot"),yto=o(" \u2014 "),wR=a("a"),wto=o("BlenderbotModel"),Ato=o(" (Blenderbot model)"),Lto=l(),Wh=a("li"),JY=a("strong"),Bto=o("blenderbot-small"),xto=o(" \u2014 "),AR=a("a"),kto=o("BlenderbotSmallModel"),Rto=o(" (BlenderbotSmall model)"),Sto=l(),Qh=a("li"),YY=a("strong"),Pto=o("camembert"),$to=o(" \u2014 "),LR=a("a"),Ito=o("CamembertModel"),jto=o(" (CamemBERT model)"),Dto=l(),Hh=a("li"),KY=a("strong"),Nto=o("canine"),qto=o(" \u2014 "),BR=a("a"),Oto=o("CanineModel"),Gto=o(" (Canine model)"),Xto=l(),Uh=a("li"),ZY=a("strong"),Vto=o("clip"),zto=o(" \u2014 "),xR=a("a"),Wto=o("CLIPModel"),Qto=o(" (CLIP model)"),Hto=l(),Jh=a("li"),eK=a("strong"),Uto=o("convbert"),Jto=o(" \u2014 "),kR=a("a"),Yto=o("ConvBertModel"),Kto=o(" (ConvBERT model)"),Zto=l(),Yh=a("li"),oK=a("strong"),eao=o("convnext"),oao=o(" \u2014 "),RR=a("a"),rao=o("ConvNextModel"),tao=o(" (ConvNext model)"),aao=l(),Kh=a("li"),rK=a("strong"),sao=o("ctrl"),nao=o(" \u2014 "),SR=a("a"),lao=o("CTRLModel"),iao=o(" (CTRL model)"),dao=l(),Zh=a("li"),tK=a("strong"),cao=o("data2vec-audio"),mao=o(" \u2014 "),PR=a("a"),fao=o("Data2VecAudioModel"),gao=o(" (Data2VecAudio model)"),hao=l(),eu=a("li"),aK=a("strong"),uao=o("data2vec-text"),pao=o(" \u2014 "),$R=a("a"),_ao=o("Data2VecTextModel"),bao=o(" (Data2VecText model)"),vao=l(),ou=a("li"),sK=a("strong"),Tao=o("deberta"),Fao=o(" \u2014 "),IR=a("a"),Cao=o("DebertaModel"),Mao=o(" (DeBERTa model)"),Eao=l(),ru=a("li"),nK=a("strong"),yao=o("deberta-v2"),wao=o(" \u2014 "),jR=a("a"),Aao=o("DebertaV2Model"),Lao=o(" (DeBERTa-v2 model)"),Bao=l(),tu=a("li"),lK=a("strong"),xao=o("deit"),kao=o(" \u2014 "),DR=a("a"),Rao=o("DeiTModel"),Sao=o(" (DeiT model)"),Pao=l(),au=a("li"),iK=a("strong"),$ao=o("detr"),Iao=o(" \u2014 "),NR=a("a"),jao=o("DetrModel"),Dao=o(" (DETR model)"),Nao=l(),su=a("li"),dK=a("strong"),qao=o("distilbert"),Oao=o(" \u2014 "),qR=a("a"),Gao=o("DistilBertModel"),Xao=o(" (DistilBERT model)"),Vao=l(),nu=a("li"),cK=a("strong"),zao=o("dpr"),Wao=o(" \u2014 "),OR=a("a"),Qao=o("DPRQuestionEncoder"),Hao=o(" (DPR model)"),Uao=l(),lu=a("li"),mK=a("strong"),Jao=o("electra"),Yao=o(" \u2014 "),GR=a("a"),Kao=o("ElectraModel"),Zao=o(" (ELECTRA model)"),eso=l(),iu=a("li"),fK=a("strong"),oso=o("flaubert"),rso=o(" \u2014 "),XR=a("a"),tso=o("FlaubertModel"),aso=o(" (FlauBERT model)"),sso=l(),du=a("li"),gK=a("strong"),nso=o("fnet"),lso=o(" \u2014 "),VR=a("a"),iso=o("FNetModel"),dso=o(" (FNet model)"),cso=l(),cu=a("li"),hK=a("strong"),mso=o("fsmt"),fso=o(" \u2014 "),zR=a("a"),gso=o("FSMTModel"),hso=o(" (FairSeq Machine-Translation model)"),uso=l(),Nn=a("li"),uK=a("strong"),pso=o("funnel"),_so=o(" \u2014 "),WR=a("a"),bso=o("FunnelModel"),vso=o(" or "),QR=a("a"),Tso=o("FunnelBaseModel"),Fso=o(" (Funnel Transformer model)"),Cso=l(),mu=a("li"),pK=a("strong"),Mso=o("gpt2"),Eso=o(" \u2014 "),HR=a("a"),yso=o("GPT2Model"),wso=o(" (OpenAI GPT-2 model)"),Aso=l(),fu=a("li"),_K=a("strong"),Lso=o("gpt_neo"),Bso=o(" \u2014 "),UR=a("a"),xso=o("GPTNeoModel"),kso=o(" (GPT Neo model)"),Rso=l(),gu=a("li"),bK=a("strong"),Sso=o("gptj"),Pso=o(" \u2014 "),JR=a("a"),$so=o("GPTJModel"),Iso=o(" (GPT-J model)"),jso=l(),hu=a("li"),vK=a("strong"),Dso=o("hubert"),Nso=o(" \u2014 "),YR=a("a"),qso=o("HubertModel"),Oso=o(" (Hubert model)"),Gso=l(),uu=a("li"),TK=a("strong"),Xso=o("ibert"),Vso=o(" \u2014 "),KR=a("a"),zso=o("IBertModel"),Wso=o(" (I-BERT model)"),Qso=l(),pu=a("li"),FK=a("strong"),Hso=o("imagegpt"),Uso=o(" \u2014 "),ZR=a("a"),Jso=o("ImageGPTModel"),Yso=o(" (ImageGPT model)"),Kso=l(),_u=a("li"),CK=a("strong"),Zso=o("layoutlm"),eno=o(" \u2014 "),eS=a("a"),ono=o("LayoutLMModel"),rno=o(" (LayoutLM model)"),tno=l(),bu=a("li"),MK=a("strong"),ano=o("layoutlmv2"),sno=o(" \u2014 "),oS=a("a"),nno=o("LayoutLMv2Model"),lno=o(" (LayoutLMv2 model)"),ino=l(),vu=a("li"),EK=a("strong"),dno=o("led"),cno=o(" \u2014 "),rS=a("a"),mno=o("LEDModel"),fno=o(" (LED model)"),gno=l(),Tu=a("li"),yK=a("strong"),hno=o("longformer"),uno=o(" \u2014 "),tS=a("a"),pno=o("LongformerModel"),_no=o(" (Longformer model)"),bno=l(),Fu=a("li"),wK=a("strong"),vno=o("luke"),Tno=o(" \u2014 "),aS=a("a"),Fno=o("LukeModel"),Cno=o(" (LUKE model)"),Mno=l(),Cu=a("li"),AK=a("strong"),Eno=o("lxmert"),yno=o(" \u2014 "),sS=a("a"),wno=o("LxmertModel"),Ano=o(" (LXMERT model)"),Lno=l(),Mu=a("li"),LK=a("strong"),Bno=o("m2m_100"),xno=o(" \u2014 "),nS=a("a"),kno=o("M2M100Model"),Rno=o(" (M2M100 model)"),Sno=l(),Eu=a("li"),BK=a("strong"),Pno=o("marian"),$no=o(" \u2014 "),lS=a("a"),Ino=o("MarianModel"),jno=o(" (Marian model)"),Dno=l(),yu=a("li"),xK=a("strong"),Nno=o("maskformer"),qno=o(" \u2014 "),iS=a("a"),Ono=o("MaskFormerModel"),Gno=o(" (MaskFormer model)"),Xno=l(),wu=a("li"),kK=a("strong"),Vno=o("mbart"),zno=o(" \u2014 "),dS=a("a"),Wno=o("MBartModel"),Qno=o(" (mBART model)"),Hno=l(),Au=a("li"),RK=a("strong"),Uno=o("megatron-bert"),Jno=o(" \u2014 "),cS=a("a"),Yno=o("MegatronBertModel"),Kno=o(" (MegatronBert model)"),Zno=l(),Lu=a("li"),SK=a("strong"),elo=o("mobilebert"),olo=o(" \u2014 "),mS=a("a"),rlo=o("MobileBertModel"),tlo=o(" (MobileBERT model)"),alo=l(),Bu=a("li"),PK=a("strong"),slo=o("mpnet"),nlo=o(" \u2014 "),fS=a("a"),llo=o("MPNetModel"),ilo=o(" (MPNet model)"),dlo=l(),xu=a("li"),$K=a("strong"),clo=o("mt5"),mlo=o(" \u2014 "),gS=a("a"),flo=o("MT5Model"),glo=o(" (mT5 model)"),hlo=l(),ku=a("li"),IK=a("strong"),ulo=o("nystromformer"),plo=o(" \u2014 "),hS=a("a"),_lo=o("NystromformerModel"),blo=o(" (Nystromformer model)"),vlo=l(),Ru=a("li"),jK=a("strong"),Tlo=o("openai-gpt"),Flo=o(" \u2014 "),uS=a("a"),Clo=o("OpenAIGPTModel"),Mlo=o(" (OpenAI GPT model)"),Elo=l(),Su=a("li"),DK=a("strong"),ylo=o("pegasus"),wlo=o(" \u2014 "),pS=a("a"),Alo=o("PegasusModel"),Llo=o(" (Pegasus model)"),Blo=l(),Pu=a("li"),NK=a("strong"),xlo=o("perceiver"),klo=o(" \u2014 "),_S=a("a"),Rlo=o("PerceiverModel"),Slo=o(" (Perceiver model)"),Plo=l(),$u=a("li"),qK=a("strong"),$lo=o("plbart"),Ilo=o(" \u2014 "),bS=a("a"),jlo=o("PLBartModel"),Dlo=o(" (PLBart model)"),Nlo=l(),Iu=a("li"),OK=a("strong"),qlo=o("poolformer"),Olo=o(" \u2014 "),vS=a("a"),Glo=o("PoolFormerModel"),Xlo=o(" (PoolFormer model)"),Vlo=l(),ju=a("li"),GK=a("strong"),zlo=o("prophetnet"),Wlo=o(" \u2014 "),TS=a("a"),Qlo=o("ProphetNetModel"),Hlo=o(" (ProphetNet model)"),Ulo=l(),Du=a("li"),XK=a("strong"),Jlo=o("qdqbert"),Ylo=o(" \u2014 "),FS=a("a"),Klo=o("QDQBertModel"),Zlo=o(" (QDQBert model)"),eio=l(),Nu=a("li"),VK=a("strong"),oio=o("reformer"),rio=o(" \u2014 "),CS=a("a"),tio=o("ReformerModel"),aio=o(" (Reformer model)"),sio=l(),qu=a("li"),zK=a("strong"),nio=o("rembert"),lio=o(" \u2014 "),MS=a("a"),iio=o("RemBertModel"),dio=o(" (RemBERT model)"),cio=l(),Ou=a("li"),WK=a("strong"),mio=o("retribert"),fio=o(" \u2014 "),ES=a("a"),gio=o("RetriBertModel"),hio=o(" (RetriBERT model)"),uio=l(),Gu=a("li"),QK=a("strong"),pio=o("roberta"),_io=o(" \u2014 "),yS=a("a"),bio=o("RobertaModel"),vio=o(" (RoBERTa model)"),Tio=l(),Xu=a("li"),HK=a("strong"),Fio=o("roformer"),Cio=o(" \u2014 "),wS=a("a"),Mio=o("RoFormerModel"),Eio=o(" (RoFormer model)"),yio=l(),Vu=a("li"),UK=a("strong"),wio=o("segformer"),Aio=o(" \u2014 "),AS=a("a"),Lio=o("SegformerModel"),Bio=o(" (SegFormer model)"),xio=l(),zu=a("li"),JK=a("strong"),kio=o("sew"),Rio=o(" \u2014 "),LS=a("a"),Sio=o("SEWModel"),Pio=o(" (SEW model)"),$io=l(),Wu=a("li"),YK=a("strong"),Iio=o("sew-d"),jio=o(" \u2014 "),BS=a("a"),Dio=o("SEWDModel"),Nio=o(" (SEW-D model)"),qio=l(),Qu=a("li"),KK=a("strong"),Oio=o("speech_to_text"),Gio=o(" \u2014 "),xS=a("a"),Xio=o("Speech2TextModel"),Vio=o(" (Speech2Text model)"),zio=l(),Hu=a("li"),ZK=a("strong"),Wio=o("splinter"),Qio=o(" \u2014 "),kS=a("a"),Hio=o("SplinterModel"),Uio=o(" (Splinter model)"),Jio=l(),Uu=a("li"),eZ=a("strong"),Yio=o("squeezebert"),Kio=o(" \u2014 "),RS=a("a"),Zio=o("SqueezeBertModel"),edo=o(" (SqueezeBERT model)"),odo=l(),Ju=a("li"),oZ=a("strong"),rdo=o("swin"),tdo=o(" \u2014 "),SS=a("a"),ado=o("SwinModel"),sdo=o(" (Swin model)"),ndo=l(),Yu=a("li"),rZ=a("strong"),ldo=o("t5"),ido=o(" \u2014 "),PS=a("a"),ddo=o("T5Model"),cdo=o(" (T5 model)"),mdo=l(),Ku=a("li"),tZ=a("strong"),fdo=o("tapas"),gdo=o(" \u2014 "),$S=a("a"),hdo=o("TapasModel"),udo=o(" (TAPAS model)"),pdo=l(),Zu=a("li"),aZ=a("strong"),_do=o("transfo-xl"),bdo=o(" \u2014 "),IS=a("a"),vdo=o("TransfoXLModel"),Tdo=o(" (Transformer-XL model)"),Fdo=l(),ep=a("li"),sZ=a("strong"),Cdo=o("unispeech"),Mdo=o(" \u2014 "),jS=a("a"),Edo=o("UniSpeechModel"),ydo=o(" (UniSpeech model)"),wdo=l(),op=a("li"),nZ=a("strong"),Ado=o("unispeech-sat"),Ldo=o(" \u2014 "),DS=a("a"),Bdo=o("UniSpeechSatModel"),xdo=o(" (UniSpeechSat model)"),kdo=l(),rp=a("li"),lZ=a("strong"),Rdo=o("vilt"),Sdo=o(" \u2014 "),NS=a("a"),Pdo=o("ViltModel"),$do=o(" (ViLT model)"),Ido=l(),tp=a("li"),iZ=a("strong"),jdo=o("vision-text-dual-encoder"),Ddo=o(" \u2014 "),qS=a("a"),Ndo=o("VisionTextDualEncoderModel"),qdo=o(" (VisionTextDualEncoder model)"),Odo=l(),ap=a("li"),dZ=a("strong"),Gdo=o("visual_bert"),Xdo=o(" \u2014 "),OS=a("a"),Vdo=o("VisualBertModel"),zdo=o(" (VisualBert model)"),Wdo=l(),sp=a("li"),cZ=a("strong"),Qdo=o("vit"),Hdo=o(" \u2014 "),GS=a("a"),Udo=o("ViTModel"),Jdo=o(" (ViT model)"),Ydo=l(),np=a("li"),mZ=a("strong"),Kdo=o("vit_mae"),Zdo=o(" \u2014 "),XS=a("a"),eco=o("ViTMAEModel"),oco=o(" (ViTMAE model)"),rco=l(),lp=a("li"),fZ=a("strong"),tco=o("wav2vec2"),aco=o(" \u2014 "),VS=a("a"),sco=o("Wav2Vec2Model"),nco=o(" (Wav2Vec2 model)"),lco=l(),ip=a("li"),gZ=a("strong"),ico=o("wavlm"),dco=o(" \u2014 "),zS=a("a"),cco=o("WavLMModel"),mco=o(" (WavLM model)"),fco=l(),dp=a("li"),hZ=a("strong"),gco=o("xglm"),hco=o(" \u2014 "),WS=a("a"),uco=o("XGLMModel"),pco=o(" (XGLM model)"),_co=l(),cp=a("li"),uZ=a("strong"),bco=o("xlm"),vco=o(" \u2014 "),QS=a("a"),Tco=o("XLMModel"),Fco=o(" (XLM model)"),Cco=l(),mp=a("li"),pZ=a("strong"),Mco=o("xlm-prophetnet"),Eco=o(" \u2014 "),HS=a("a"),yco=o("XLMProphetNetModel"),wco=o(" (XLMProphetNet model)"),Aco=l(),fp=a("li"),_Z=a("strong"),Lco=o("xlm-roberta"),Bco=o(" \u2014 "),US=a("a"),xco=o("XLMRobertaModel"),kco=o(" (XLM-RoBERTa model)"),Rco=l(),gp=a("li"),bZ=a("strong"),Sco=o("xlm-roberta-xl"),Pco=o(" \u2014 "),JS=a("a"),$co=o("XLMRobertaXLModel"),Ico=o(" (XLM-RoBERTa-XL model)"),jco=l(),hp=a("li"),vZ=a("strong"),Dco=o("xlnet"),Nco=o(" \u2014 "),YS=a("a"),qco=o("XLNetModel"),Oco=o(" (XLNet model)"),Gco=l(),up=a("li"),TZ=a("strong"),Xco=o("yoso"),Vco=o(" \u2014 "),KS=a("a"),zco=o("YosoModel"),Wco=o(" (YOSO model)"),Qco=l(),pp=a("p"),Hco=o("The model is set in evaluation mode by default using "),FZ=a("code"),Uco=o("model.eval()"),Jco=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CZ=a("code"),Yco=o("model.train()"),Kco=l(),MZ=a("p"),Zco=o("Examples:"),emo=l(),m(Ry.$$.fragment),_xe=l(),ed=a("h2"),_p=a("a"),EZ=a("span"),m(Sy.$$.fragment),omo=l(),yZ=a("span"),rmo=o("AutoModelForPreTraining"),bxe=l(),Yo=a("div"),m(Py.$$.fragment),tmo=l(),od=a("p"),amo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=a("code"),smo=o("from_pretrained()"),nmo=o("class method or the "),AZ=a("code"),lmo=o("from_config()"),imo=o(`class
method.`),dmo=l(),$y=a("p"),cmo=o("This class cannot be instantiated directly using "),LZ=a("code"),mmo=o("__init__()"),fmo=o(" (throws an error)."),gmo=l(),zr=a("div"),m(Iy.$$.fragment),hmo=l(),BZ=a("p"),umo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pmo=l(),rd=a("p"),_mo=o(`Note:
Loading a model from its configuration file does `),xZ=a("strong"),bmo=o("not"),vmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("code"),Tmo=o("from_pretrained()"),Fmo=o("to load the model weights."),Cmo=l(),RZ=a("p"),Mmo=o("Examples:"),Emo=l(),m(jy.$$.fragment),ymo=l(),De=a("div"),m(Dy.$$.fragment),wmo=l(),SZ=a("p"),Amo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lmo=l(),za=a("p"),Bmo=o("The model class to instantiate is selected based on the "),PZ=a("code"),xmo=o("model_type"),kmo=o(` property of the config object (either
passed as an argument or loaded from `),$Z=a("code"),Rmo=o("pretrained_model_name_or_path"),Smo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IZ=a("code"),Pmo=o("pretrained_model_name_or_path"),$mo=o(":"),Imo=l(),k=a("ul"),bp=a("li"),jZ=a("strong"),jmo=o("albert"),Dmo=o(" \u2014 "),ZS=a("a"),Nmo=o("AlbertForPreTraining"),qmo=o(" (ALBERT model)"),Omo=l(),vp=a("li"),DZ=a("strong"),Gmo=o("bart"),Xmo=o(" \u2014 "),eP=a("a"),Vmo=o("BartForConditionalGeneration"),zmo=o(" (BART model)"),Wmo=l(),Tp=a("li"),NZ=a("strong"),Qmo=o("bert"),Hmo=o(" \u2014 "),oP=a("a"),Umo=o("BertForPreTraining"),Jmo=o(" (BERT model)"),Ymo=l(),Fp=a("li"),qZ=a("strong"),Kmo=o("big_bird"),Zmo=o(" \u2014 "),rP=a("a"),efo=o("BigBirdForPreTraining"),ofo=o(" (BigBird model)"),rfo=l(),Cp=a("li"),OZ=a("strong"),tfo=o("camembert"),afo=o(" \u2014 "),tP=a("a"),sfo=o("CamembertForMaskedLM"),nfo=o(" (CamemBERT model)"),lfo=l(),Mp=a("li"),GZ=a("strong"),ifo=o("ctrl"),dfo=o(" \u2014 "),aP=a("a"),cfo=o("CTRLLMHeadModel"),mfo=o(" (CTRL model)"),ffo=l(),Ep=a("li"),XZ=a("strong"),gfo=o("data2vec-text"),hfo=o(" \u2014 "),sP=a("a"),ufo=o("Data2VecTextForMaskedLM"),pfo=o(" (Data2VecText model)"),_fo=l(),yp=a("li"),VZ=a("strong"),bfo=o("deberta"),vfo=o(" \u2014 "),nP=a("a"),Tfo=o("DebertaForMaskedLM"),Ffo=o(" (DeBERTa model)"),Cfo=l(),wp=a("li"),zZ=a("strong"),Mfo=o("deberta-v2"),Efo=o(" \u2014 "),lP=a("a"),yfo=o("DebertaV2ForMaskedLM"),wfo=o(" (DeBERTa-v2 model)"),Afo=l(),Ap=a("li"),WZ=a("strong"),Lfo=o("distilbert"),Bfo=o(" \u2014 "),iP=a("a"),xfo=o("DistilBertForMaskedLM"),kfo=o(" (DistilBERT model)"),Rfo=l(),Lp=a("li"),QZ=a("strong"),Sfo=o("electra"),Pfo=o(" \u2014 "),dP=a("a"),$fo=o("ElectraForPreTraining"),Ifo=o(" (ELECTRA model)"),jfo=l(),Bp=a("li"),HZ=a("strong"),Dfo=o("flaubert"),Nfo=o(" \u2014 "),cP=a("a"),qfo=o("FlaubertWithLMHeadModel"),Ofo=o(" (FlauBERT model)"),Gfo=l(),xp=a("li"),UZ=a("strong"),Xfo=o("fnet"),Vfo=o(" \u2014 "),mP=a("a"),zfo=o("FNetForPreTraining"),Wfo=o(" (FNet model)"),Qfo=l(),kp=a("li"),JZ=a("strong"),Hfo=o("fsmt"),Ufo=o(" \u2014 "),fP=a("a"),Jfo=o("FSMTForConditionalGeneration"),Yfo=o(" (FairSeq Machine-Translation model)"),Kfo=l(),Rp=a("li"),YZ=a("strong"),Zfo=o("funnel"),ego=o(" \u2014 "),gP=a("a"),ogo=o("FunnelForPreTraining"),rgo=o(" (Funnel Transformer model)"),tgo=l(),Sp=a("li"),KZ=a("strong"),ago=o("gpt2"),sgo=o(" \u2014 "),hP=a("a"),ngo=o("GPT2LMHeadModel"),lgo=o(" (OpenAI GPT-2 model)"),igo=l(),Pp=a("li"),ZZ=a("strong"),dgo=o("ibert"),cgo=o(" \u2014 "),uP=a("a"),mgo=o("IBertForMaskedLM"),fgo=o(" (I-BERT model)"),ggo=l(),$p=a("li"),eee=a("strong"),hgo=o("layoutlm"),ugo=o(" \u2014 "),pP=a("a"),pgo=o("LayoutLMForMaskedLM"),_go=o(" (LayoutLM model)"),bgo=l(),Ip=a("li"),oee=a("strong"),vgo=o("longformer"),Tgo=o(" \u2014 "),_P=a("a"),Fgo=o("LongformerForMaskedLM"),Cgo=o(" (Longformer model)"),Mgo=l(),jp=a("li"),ree=a("strong"),Ego=o("lxmert"),ygo=o(" \u2014 "),bP=a("a"),wgo=o("LxmertForPreTraining"),Ago=o(" (LXMERT model)"),Lgo=l(),Dp=a("li"),tee=a("strong"),Bgo=o("megatron-bert"),xgo=o(" \u2014 "),vP=a("a"),kgo=o("MegatronBertForPreTraining"),Rgo=o(" (MegatronBert model)"),Sgo=l(),Np=a("li"),aee=a("strong"),Pgo=o("mobilebert"),$go=o(" \u2014 "),TP=a("a"),Igo=o("MobileBertForPreTraining"),jgo=o(" (MobileBERT model)"),Dgo=l(),qp=a("li"),see=a("strong"),Ngo=o("mpnet"),qgo=o(" \u2014 "),FP=a("a"),Ogo=o("MPNetForMaskedLM"),Ggo=o(" (MPNet model)"),Xgo=l(),Op=a("li"),nee=a("strong"),Vgo=o("openai-gpt"),zgo=o(" \u2014 "),CP=a("a"),Wgo=o("OpenAIGPTLMHeadModel"),Qgo=o(" (OpenAI GPT model)"),Hgo=l(),Gp=a("li"),lee=a("strong"),Ugo=o("retribert"),Jgo=o(" \u2014 "),MP=a("a"),Ygo=o("RetriBertModel"),Kgo=o(" (RetriBERT model)"),Zgo=l(),Xp=a("li"),iee=a("strong"),eho=o("roberta"),oho=o(" \u2014 "),EP=a("a"),rho=o("RobertaForMaskedLM"),tho=o(" (RoBERTa model)"),aho=l(),Vp=a("li"),dee=a("strong"),sho=o("squeezebert"),nho=o(" \u2014 "),yP=a("a"),lho=o("SqueezeBertForMaskedLM"),iho=o(" (SqueezeBERT model)"),dho=l(),zp=a("li"),cee=a("strong"),cho=o("t5"),mho=o(" \u2014 "),wP=a("a"),fho=o("T5ForConditionalGeneration"),gho=o(" (T5 model)"),hho=l(),Wp=a("li"),mee=a("strong"),uho=o("tapas"),pho=o(" \u2014 "),AP=a("a"),_ho=o("TapasForMaskedLM"),bho=o(" (TAPAS model)"),vho=l(),Qp=a("li"),fee=a("strong"),Tho=o("transfo-xl"),Fho=o(" \u2014 "),LP=a("a"),Cho=o("TransfoXLLMHeadModel"),Mho=o(" (Transformer-XL model)"),Eho=l(),Hp=a("li"),gee=a("strong"),yho=o("unispeech"),who=o(" \u2014 "),BP=a("a"),Aho=o("UniSpeechForPreTraining"),Lho=o(" (UniSpeech model)"),Bho=l(),Up=a("li"),hee=a("strong"),xho=o("unispeech-sat"),kho=o(" \u2014 "),xP=a("a"),Rho=o("UniSpeechSatForPreTraining"),Sho=o(" (UniSpeechSat model)"),Pho=l(),Jp=a("li"),uee=a("strong"),$ho=o("visual_bert"),Iho=o(" \u2014 "),kP=a("a"),jho=o("VisualBertForPreTraining"),Dho=o(" (VisualBert model)"),Nho=l(),Yp=a("li"),pee=a("strong"),qho=o("vit_mae"),Oho=o(" \u2014 "),RP=a("a"),Gho=o("ViTMAEForPreTraining"),Xho=o(" (ViTMAE model)"),Vho=l(),Kp=a("li"),_ee=a("strong"),zho=o("wav2vec2"),Who=o(" \u2014 "),SP=a("a"),Qho=o("Wav2Vec2ForPreTraining"),Hho=o(" (Wav2Vec2 model)"),Uho=l(),Zp=a("li"),bee=a("strong"),Jho=o("xlm"),Yho=o(" \u2014 "),PP=a("a"),Kho=o("XLMWithLMHeadModel"),Zho=o(" (XLM model)"),euo=l(),e_=a("li"),vee=a("strong"),ouo=o("xlm-roberta"),ruo=o(" \u2014 "),$P=a("a"),tuo=o("XLMRobertaForMaskedLM"),auo=o(" (XLM-RoBERTa model)"),suo=l(),o_=a("li"),Tee=a("strong"),nuo=o("xlm-roberta-xl"),luo=o(" \u2014 "),IP=a("a"),iuo=o("XLMRobertaXLForMaskedLM"),duo=o(" (XLM-RoBERTa-XL model)"),cuo=l(),r_=a("li"),Fee=a("strong"),muo=o("xlnet"),fuo=o(" \u2014 "),jP=a("a"),guo=o("XLNetLMHeadModel"),huo=o(" (XLNet model)"),uuo=l(),t_=a("p"),puo=o("The model is set in evaluation mode by default using "),Cee=a("code"),_uo=o("model.eval()"),buo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mee=a("code"),vuo=o("model.train()"),Tuo=l(),Eee=a("p"),Fuo=o("Examples:"),Cuo=l(),m(Ny.$$.fragment),vxe=l(),td=a("h2"),a_=a("a"),yee=a("span"),m(qy.$$.fragment),Muo=l(),wee=a("span"),Euo=o("AutoModelForCausalLM"),Txe=l(),Ko=a("div"),m(Oy.$$.fragment),yuo=l(),ad=a("p"),wuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=a("code"),Auo=o("from_pretrained()"),Luo=o("class method or the "),Lee=a("code"),Buo=o("from_config()"),xuo=o(`class
method.`),kuo=l(),Gy=a("p"),Ruo=o("This class cannot be instantiated directly using "),Bee=a("code"),Suo=o("__init__()"),Puo=o(" (throws an error)."),$uo=l(),Wr=a("div"),m(Xy.$$.fragment),Iuo=l(),xee=a("p"),juo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Duo=l(),sd=a("p"),Nuo=o(`Note:
Loading a model from its configuration file does `),kee=a("strong"),quo=o("not"),Ouo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("code"),Guo=o("from_pretrained()"),Xuo=o("to load the model weights."),Vuo=l(),See=a("p"),zuo=o("Examples:"),Wuo=l(),m(Vy.$$.fragment),Quo=l(),Ne=a("div"),m(zy.$$.fragment),Huo=l(),Pee=a("p"),Uuo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Juo=l(),Wa=a("p"),Yuo=o("The model class to instantiate is selected based on the "),$ee=a("code"),Kuo=o("model_type"),Zuo=o(` property of the config object (either
passed as an argument or loaded from `),Iee=a("code"),epo=o("pretrained_model_name_or_path"),opo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jee=a("code"),rpo=o("pretrained_model_name_or_path"),tpo=o(":"),apo=l(),$=a("ul"),s_=a("li"),Dee=a("strong"),spo=o("bart"),npo=o(" \u2014 "),DP=a("a"),lpo=o("BartForCausalLM"),ipo=o(" (BART model)"),dpo=l(),n_=a("li"),Nee=a("strong"),cpo=o("bert"),mpo=o(" \u2014 "),NP=a("a"),fpo=o("BertLMHeadModel"),gpo=o(" (BERT model)"),hpo=l(),l_=a("li"),qee=a("strong"),upo=o("bert-generation"),ppo=o(" \u2014 "),qP=a("a"),_po=o("BertGenerationDecoder"),bpo=o(" (Bert Generation model)"),vpo=l(),i_=a("li"),Oee=a("strong"),Tpo=o("big_bird"),Fpo=o(" \u2014 "),OP=a("a"),Cpo=o("BigBirdForCausalLM"),Mpo=o(" (BigBird model)"),Epo=l(),d_=a("li"),Gee=a("strong"),ypo=o("bigbird_pegasus"),wpo=o(" \u2014 "),GP=a("a"),Apo=o("BigBirdPegasusForCausalLM"),Lpo=o(" (BigBirdPegasus model)"),Bpo=l(),c_=a("li"),Xee=a("strong"),xpo=o("blenderbot"),kpo=o(" \u2014 "),XP=a("a"),Rpo=o("BlenderbotForCausalLM"),Spo=o(" (Blenderbot model)"),Ppo=l(),m_=a("li"),Vee=a("strong"),$po=o("blenderbot-small"),Ipo=o(" \u2014 "),VP=a("a"),jpo=o("BlenderbotSmallForCausalLM"),Dpo=o(" (BlenderbotSmall model)"),Npo=l(),f_=a("li"),zee=a("strong"),qpo=o("camembert"),Opo=o(" \u2014 "),zP=a("a"),Gpo=o("CamembertForCausalLM"),Xpo=o(" (CamemBERT model)"),Vpo=l(),g_=a("li"),Wee=a("strong"),zpo=o("ctrl"),Wpo=o(" \u2014 "),WP=a("a"),Qpo=o("CTRLLMHeadModel"),Hpo=o(" (CTRL model)"),Upo=l(),h_=a("li"),Qee=a("strong"),Jpo=o("data2vec-text"),Ypo=o(" \u2014 "),QP=a("a"),Kpo=o("Data2VecTextForCausalLM"),Zpo=o(" (Data2VecText model)"),e_o=l(),u_=a("li"),Hee=a("strong"),o_o=o("electra"),r_o=o(" \u2014 "),HP=a("a"),t_o=o("ElectraForCausalLM"),a_o=o(" (ELECTRA model)"),s_o=l(),p_=a("li"),Uee=a("strong"),n_o=o("gpt2"),l_o=o(" \u2014 "),UP=a("a"),i_o=o("GPT2LMHeadModel"),d_o=o(" (OpenAI GPT-2 model)"),c_o=l(),__=a("li"),Jee=a("strong"),m_o=o("gpt_neo"),f_o=o(" \u2014 "),JP=a("a"),g_o=o("GPTNeoForCausalLM"),h_o=o(" (GPT Neo model)"),u_o=l(),b_=a("li"),Yee=a("strong"),p_o=o("gptj"),__o=o(" \u2014 "),YP=a("a"),b_o=o("GPTJForCausalLM"),v_o=o(" (GPT-J model)"),T_o=l(),v_=a("li"),Kee=a("strong"),F_o=o("marian"),C_o=o(" \u2014 "),KP=a("a"),M_o=o("MarianForCausalLM"),E_o=o(" (Marian model)"),y_o=l(),T_=a("li"),Zee=a("strong"),w_o=o("mbart"),A_o=o(" \u2014 "),ZP=a("a"),L_o=o("MBartForCausalLM"),B_o=o(" (mBART model)"),x_o=l(),F_=a("li"),eoe=a("strong"),k_o=o("megatron-bert"),R_o=o(" \u2014 "),e$=a("a"),S_o=o("MegatronBertForCausalLM"),P_o=o(" (MegatronBert model)"),$_o=l(),C_=a("li"),ooe=a("strong"),I_o=o("openai-gpt"),j_o=o(" \u2014 "),o$=a("a"),D_o=o("OpenAIGPTLMHeadModel"),N_o=o(" (OpenAI GPT model)"),q_o=l(),M_=a("li"),roe=a("strong"),O_o=o("pegasus"),G_o=o(" \u2014 "),r$=a("a"),X_o=o("PegasusForCausalLM"),V_o=o(" (Pegasus model)"),z_o=l(),E_=a("li"),toe=a("strong"),W_o=o("plbart"),Q_o=o(" \u2014 "),t$=a("a"),H_o=o("PLBartForCausalLM"),U_o=o(" (PLBart model)"),J_o=l(),y_=a("li"),aoe=a("strong"),Y_o=o("prophetnet"),K_o=o(" \u2014 "),a$=a("a"),Z_o=o("ProphetNetForCausalLM"),ebo=o(" (ProphetNet model)"),obo=l(),w_=a("li"),soe=a("strong"),rbo=o("qdqbert"),tbo=o(" \u2014 "),s$=a("a"),abo=o("QDQBertLMHeadModel"),sbo=o(" (QDQBert model)"),nbo=l(),A_=a("li"),noe=a("strong"),lbo=o("reformer"),ibo=o(" \u2014 "),n$=a("a"),dbo=o("ReformerModelWithLMHead"),cbo=o(" (Reformer model)"),mbo=l(),L_=a("li"),loe=a("strong"),fbo=o("rembert"),gbo=o(" \u2014 "),l$=a("a"),hbo=o("RemBertForCausalLM"),ubo=o(" (RemBERT model)"),pbo=l(),B_=a("li"),ioe=a("strong"),_bo=o("roberta"),bbo=o(" \u2014 "),i$=a("a"),vbo=o("RobertaForCausalLM"),Tbo=o(" (RoBERTa model)"),Fbo=l(),x_=a("li"),doe=a("strong"),Cbo=o("roformer"),Mbo=o(" \u2014 "),d$=a("a"),Ebo=o("RoFormerForCausalLM"),ybo=o(" (RoFormer model)"),wbo=l(),k_=a("li"),coe=a("strong"),Abo=o("speech_to_text_2"),Lbo=o(" \u2014 "),c$=a("a"),Bbo=o("Speech2Text2ForCausalLM"),xbo=o(" (Speech2Text2 model)"),kbo=l(),R_=a("li"),moe=a("strong"),Rbo=o("transfo-xl"),Sbo=o(" \u2014 "),m$=a("a"),Pbo=o("TransfoXLLMHeadModel"),$bo=o(" (Transformer-XL model)"),Ibo=l(),S_=a("li"),foe=a("strong"),jbo=o("trocr"),Dbo=o(" \u2014 "),f$=a("a"),Nbo=o("TrOCRForCausalLM"),qbo=o(" (TrOCR model)"),Obo=l(),P_=a("li"),goe=a("strong"),Gbo=o("xglm"),Xbo=o(" \u2014 "),g$=a("a"),Vbo=o("XGLMForCausalLM"),zbo=o(" (XGLM model)"),Wbo=l(),$_=a("li"),hoe=a("strong"),Qbo=o("xlm"),Hbo=o(" \u2014 "),h$=a("a"),Ubo=o("XLMWithLMHeadModel"),Jbo=o(" (XLM model)"),Ybo=l(),I_=a("li"),uoe=a("strong"),Kbo=o("xlm-prophetnet"),Zbo=o(" \u2014 "),u$=a("a"),e2o=o("XLMProphetNetForCausalLM"),o2o=o(" (XLMProphetNet model)"),r2o=l(),j_=a("li"),poe=a("strong"),t2o=o("xlm-roberta"),a2o=o(" \u2014 "),p$=a("a"),s2o=o("XLMRobertaForCausalLM"),n2o=o(" (XLM-RoBERTa model)"),l2o=l(),D_=a("li"),_oe=a("strong"),i2o=o("xlm-roberta-xl"),d2o=o(" \u2014 "),_$=a("a"),c2o=o("XLMRobertaXLForCausalLM"),m2o=o(" (XLM-RoBERTa-XL model)"),f2o=l(),N_=a("li"),boe=a("strong"),g2o=o("xlnet"),h2o=o(" \u2014 "),b$=a("a"),u2o=o("XLNetLMHeadModel"),p2o=o(" (XLNet model)"),_2o=l(),q_=a("p"),b2o=o("The model is set in evaluation mode by default using "),voe=a("code"),v2o=o("model.eval()"),T2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Toe=a("code"),F2o=o("model.train()"),C2o=l(),Foe=a("p"),M2o=o("Examples:"),E2o=l(),m(Wy.$$.fragment),Fxe=l(),nd=a("h2"),O_=a("a"),Coe=a("span"),m(Qy.$$.fragment),y2o=l(),Moe=a("span"),w2o=o("AutoModelForMaskedLM"),Cxe=l(),Zo=a("div"),m(Hy.$$.fragment),A2o=l(),ld=a("p"),L2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eoe=a("code"),B2o=o("from_pretrained()"),x2o=o("class method or the "),yoe=a("code"),k2o=o("from_config()"),R2o=o(`class
method.`),S2o=l(),Uy=a("p"),P2o=o("This class cannot be instantiated directly using "),woe=a("code"),$2o=o("__init__()"),I2o=o(" (throws an error)."),j2o=l(),Qr=a("div"),m(Jy.$$.fragment),D2o=l(),Aoe=a("p"),N2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q2o=l(),id=a("p"),O2o=o(`Note:
Loading a model from its configuration file does `),Loe=a("strong"),G2o=o("not"),X2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=a("code"),V2o=o("from_pretrained()"),z2o=o("to load the model weights."),W2o=l(),xoe=a("p"),Q2o=o("Examples:"),H2o=l(),m(Yy.$$.fragment),U2o=l(),qe=a("div"),m(Ky.$$.fragment),J2o=l(),koe=a("p"),Y2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K2o=l(),Qa=a("p"),Z2o=o("The model class to instantiate is selected based on the "),Roe=a("code"),evo=o("model_type"),ovo=o(` property of the config object (either
passed as an argument or loaded from `),Soe=a("code"),rvo=o("pretrained_model_name_or_path"),tvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Poe=a("code"),avo=o("pretrained_model_name_or_path"),svo=o(":"),nvo=l(),I=a("ul"),G_=a("li"),$oe=a("strong"),lvo=o("albert"),ivo=o(" \u2014 "),v$=a("a"),dvo=o("AlbertForMaskedLM"),cvo=o(" (ALBERT model)"),mvo=l(),X_=a("li"),Ioe=a("strong"),fvo=o("bart"),gvo=o(" \u2014 "),T$=a("a"),hvo=o("BartForConditionalGeneration"),uvo=o(" (BART model)"),pvo=l(),V_=a("li"),joe=a("strong"),_vo=o("bert"),bvo=o(" \u2014 "),F$=a("a"),vvo=o("BertForMaskedLM"),Tvo=o(" (BERT model)"),Fvo=l(),z_=a("li"),Doe=a("strong"),Cvo=o("big_bird"),Mvo=o(" \u2014 "),C$=a("a"),Evo=o("BigBirdForMaskedLM"),yvo=o(" (BigBird model)"),wvo=l(),W_=a("li"),Noe=a("strong"),Avo=o("camembert"),Lvo=o(" \u2014 "),M$=a("a"),Bvo=o("CamembertForMaskedLM"),xvo=o(" (CamemBERT model)"),kvo=l(),Q_=a("li"),qoe=a("strong"),Rvo=o("convbert"),Svo=o(" \u2014 "),E$=a("a"),Pvo=o("ConvBertForMaskedLM"),$vo=o(" (ConvBERT model)"),Ivo=l(),H_=a("li"),Ooe=a("strong"),jvo=o("data2vec-text"),Dvo=o(" \u2014 "),y$=a("a"),Nvo=o("Data2VecTextForMaskedLM"),qvo=o(" (Data2VecText model)"),Ovo=l(),U_=a("li"),Goe=a("strong"),Gvo=o("deberta"),Xvo=o(" \u2014 "),w$=a("a"),Vvo=o("DebertaForMaskedLM"),zvo=o(" (DeBERTa model)"),Wvo=l(),J_=a("li"),Xoe=a("strong"),Qvo=o("deberta-v2"),Hvo=o(" \u2014 "),A$=a("a"),Uvo=o("DebertaV2ForMaskedLM"),Jvo=o(" (DeBERTa-v2 model)"),Yvo=l(),Y_=a("li"),Voe=a("strong"),Kvo=o("distilbert"),Zvo=o(" \u2014 "),L$=a("a"),eTo=o("DistilBertForMaskedLM"),oTo=o(" (DistilBERT model)"),rTo=l(),K_=a("li"),zoe=a("strong"),tTo=o("electra"),aTo=o(" \u2014 "),B$=a("a"),sTo=o("ElectraForMaskedLM"),nTo=o(" (ELECTRA model)"),lTo=l(),Z_=a("li"),Woe=a("strong"),iTo=o("flaubert"),dTo=o(" \u2014 "),x$=a("a"),cTo=o("FlaubertWithLMHeadModel"),mTo=o(" (FlauBERT model)"),fTo=l(),eb=a("li"),Qoe=a("strong"),gTo=o("fnet"),hTo=o(" \u2014 "),k$=a("a"),uTo=o("FNetForMaskedLM"),pTo=o(" (FNet model)"),_To=l(),ob=a("li"),Hoe=a("strong"),bTo=o("funnel"),vTo=o(" \u2014 "),R$=a("a"),TTo=o("FunnelForMaskedLM"),FTo=o(" (Funnel Transformer model)"),CTo=l(),rb=a("li"),Uoe=a("strong"),MTo=o("ibert"),ETo=o(" \u2014 "),S$=a("a"),yTo=o("IBertForMaskedLM"),wTo=o(" (I-BERT model)"),ATo=l(),tb=a("li"),Joe=a("strong"),LTo=o("layoutlm"),BTo=o(" \u2014 "),P$=a("a"),xTo=o("LayoutLMForMaskedLM"),kTo=o(" (LayoutLM model)"),RTo=l(),ab=a("li"),Yoe=a("strong"),STo=o("longformer"),PTo=o(" \u2014 "),$$=a("a"),$To=o("LongformerForMaskedLM"),ITo=o(" (Longformer model)"),jTo=l(),sb=a("li"),Koe=a("strong"),DTo=o("mbart"),NTo=o(" \u2014 "),I$=a("a"),qTo=o("MBartForConditionalGeneration"),OTo=o(" (mBART model)"),GTo=l(),nb=a("li"),Zoe=a("strong"),XTo=o("megatron-bert"),VTo=o(" \u2014 "),j$=a("a"),zTo=o("MegatronBertForMaskedLM"),WTo=o(" (MegatronBert model)"),QTo=l(),lb=a("li"),ere=a("strong"),HTo=o("mobilebert"),UTo=o(" \u2014 "),D$=a("a"),JTo=o("MobileBertForMaskedLM"),YTo=o(" (MobileBERT model)"),KTo=l(),ib=a("li"),ore=a("strong"),ZTo=o("mpnet"),e1o=o(" \u2014 "),N$=a("a"),o1o=o("MPNetForMaskedLM"),r1o=o(" (MPNet model)"),t1o=l(),db=a("li"),rre=a("strong"),a1o=o("nystromformer"),s1o=o(" \u2014 "),q$=a("a"),n1o=o("NystromformerForMaskedLM"),l1o=o(" (Nystromformer model)"),i1o=l(),cb=a("li"),tre=a("strong"),d1o=o("perceiver"),c1o=o(" \u2014 "),O$=a("a"),m1o=o("PerceiverForMaskedLM"),f1o=o(" (Perceiver model)"),g1o=l(),mb=a("li"),are=a("strong"),h1o=o("qdqbert"),u1o=o(" \u2014 "),G$=a("a"),p1o=o("QDQBertForMaskedLM"),_1o=o(" (QDQBert model)"),b1o=l(),fb=a("li"),sre=a("strong"),v1o=o("reformer"),T1o=o(" \u2014 "),X$=a("a"),F1o=o("ReformerForMaskedLM"),C1o=o(" (Reformer model)"),M1o=l(),gb=a("li"),nre=a("strong"),E1o=o("rembert"),y1o=o(" \u2014 "),V$=a("a"),w1o=o("RemBertForMaskedLM"),A1o=o(" (RemBERT model)"),L1o=l(),hb=a("li"),lre=a("strong"),B1o=o("roberta"),x1o=o(" \u2014 "),z$=a("a"),k1o=o("RobertaForMaskedLM"),R1o=o(" (RoBERTa model)"),S1o=l(),ub=a("li"),ire=a("strong"),P1o=o("roformer"),$1o=o(" \u2014 "),W$=a("a"),I1o=o("RoFormerForMaskedLM"),j1o=o(" (RoFormer model)"),D1o=l(),pb=a("li"),dre=a("strong"),N1o=o("squeezebert"),q1o=o(" \u2014 "),Q$=a("a"),O1o=o("SqueezeBertForMaskedLM"),G1o=o(" (SqueezeBERT model)"),X1o=l(),_b=a("li"),cre=a("strong"),V1o=o("tapas"),z1o=o(" \u2014 "),H$=a("a"),W1o=o("TapasForMaskedLM"),Q1o=o(" (TAPAS model)"),H1o=l(),bb=a("li"),mre=a("strong"),U1o=o("wav2vec2"),J1o=o(" \u2014 "),fre=a("code"),Y1o=o("Wav2Vec2ForMaskedLM"),K1o=o("(Wav2Vec2 model)"),Z1o=l(),vb=a("li"),gre=a("strong"),eFo=o("xlm"),oFo=o(" \u2014 "),U$=a("a"),rFo=o("XLMWithLMHeadModel"),tFo=o(" (XLM model)"),aFo=l(),Tb=a("li"),hre=a("strong"),sFo=o("xlm-roberta"),nFo=o(" \u2014 "),J$=a("a"),lFo=o("XLMRobertaForMaskedLM"),iFo=o(" (XLM-RoBERTa model)"),dFo=l(),Fb=a("li"),ure=a("strong"),cFo=o("xlm-roberta-xl"),mFo=o(" \u2014 "),Y$=a("a"),fFo=o("XLMRobertaXLForMaskedLM"),gFo=o(" (XLM-RoBERTa-XL model)"),hFo=l(),Cb=a("li"),pre=a("strong"),uFo=o("yoso"),pFo=o(" \u2014 "),K$=a("a"),_Fo=o("YosoForMaskedLM"),bFo=o(" (YOSO model)"),vFo=l(),Mb=a("p"),TFo=o("The model is set in evaluation mode by default using "),_re=a("code"),FFo=o("model.eval()"),CFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bre=a("code"),MFo=o("model.train()"),EFo=l(),vre=a("p"),yFo=o("Examples:"),wFo=l(),m(Zy.$$.fragment),Mxe=l(),dd=a("h2"),Eb=a("a"),Tre=a("span"),m(ew.$$.fragment),AFo=l(),Fre=a("span"),LFo=o("AutoModelForSeq2SeqLM"),Exe=l(),er=a("div"),m(ow.$$.fragment),BFo=l(),cd=a("p"),xFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cre=a("code"),kFo=o("from_pretrained()"),RFo=o("class method or the "),Mre=a("code"),SFo=o("from_config()"),PFo=o(`class
method.`),$Fo=l(),rw=a("p"),IFo=o("This class cannot be instantiated directly using "),Ere=a("code"),jFo=o("__init__()"),DFo=o(" (throws an error)."),NFo=l(),Hr=a("div"),m(tw.$$.fragment),qFo=l(),yre=a("p"),OFo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GFo=l(),md=a("p"),XFo=o(`Note:
Loading a model from its configuration file does `),wre=a("strong"),VFo=o("not"),zFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("code"),WFo=o("from_pretrained()"),QFo=o("to load the model weights."),HFo=l(),Lre=a("p"),UFo=o("Examples:"),JFo=l(),m(aw.$$.fragment),YFo=l(),Oe=a("div"),m(sw.$$.fragment),KFo=l(),Bre=a("p"),ZFo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eCo=l(),Ha=a("p"),oCo=o("The model class to instantiate is selected based on the "),xre=a("code"),rCo=o("model_type"),tCo=o(` property of the config object (either
passed as an argument or loaded from `),kre=a("code"),aCo=o("pretrained_model_name_or_path"),sCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rre=a("code"),nCo=o("pretrained_model_name_or_path"),lCo=o(":"),iCo=l(),se=a("ul"),yb=a("li"),Sre=a("strong"),dCo=o("bart"),cCo=o(" \u2014 "),Z$=a("a"),mCo=o("BartForConditionalGeneration"),fCo=o(" (BART model)"),gCo=l(),wb=a("li"),Pre=a("strong"),hCo=o("bigbird_pegasus"),uCo=o(" \u2014 "),eI=a("a"),pCo=o("BigBirdPegasusForConditionalGeneration"),_Co=o(" (BigBirdPegasus model)"),bCo=l(),Ab=a("li"),$re=a("strong"),vCo=o("blenderbot"),TCo=o(" \u2014 "),oI=a("a"),FCo=o("BlenderbotForConditionalGeneration"),CCo=o(" (Blenderbot model)"),MCo=l(),Lb=a("li"),Ire=a("strong"),ECo=o("blenderbot-small"),yCo=o(" \u2014 "),rI=a("a"),wCo=o("BlenderbotSmallForConditionalGeneration"),ACo=o(" (BlenderbotSmall model)"),LCo=l(),Bb=a("li"),jre=a("strong"),BCo=o("encoder-decoder"),xCo=o(" \u2014 "),tI=a("a"),kCo=o("EncoderDecoderModel"),RCo=o(" (Encoder decoder model)"),SCo=l(),xb=a("li"),Dre=a("strong"),PCo=o("fsmt"),$Co=o(" \u2014 "),aI=a("a"),ICo=o("FSMTForConditionalGeneration"),jCo=o(" (FairSeq Machine-Translation model)"),DCo=l(),kb=a("li"),Nre=a("strong"),NCo=o("led"),qCo=o(" \u2014 "),sI=a("a"),OCo=o("LEDForConditionalGeneration"),GCo=o(" (LED model)"),XCo=l(),Rb=a("li"),qre=a("strong"),VCo=o("m2m_100"),zCo=o(" \u2014 "),nI=a("a"),WCo=o("M2M100ForConditionalGeneration"),QCo=o(" (M2M100 model)"),HCo=l(),Sb=a("li"),Ore=a("strong"),UCo=o("marian"),JCo=o(" \u2014 "),lI=a("a"),YCo=o("MarianMTModel"),KCo=o(" (Marian model)"),ZCo=l(),Pb=a("li"),Gre=a("strong"),eMo=o("mbart"),oMo=o(" \u2014 "),iI=a("a"),rMo=o("MBartForConditionalGeneration"),tMo=o(" (mBART model)"),aMo=l(),$b=a("li"),Xre=a("strong"),sMo=o("mt5"),nMo=o(" \u2014 "),dI=a("a"),lMo=o("MT5ForConditionalGeneration"),iMo=o(" (mT5 model)"),dMo=l(),Ib=a("li"),Vre=a("strong"),cMo=o("pegasus"),mMo=o(" \u2014 "),cI=a("a"),fMo=o("PegasusForConditionalGeneration"),gMo=o(" (Pegasus model)"),hMo=l(),jb=a("li"),zre=a("strong"),uMo=o("plbart"),pMo=o(" \u2014 "),mI=a("a"),_Mo=o("PLBartForConditionalGeneration"),bMo=o(" (PLBart model)"),vMo=l(),Db=a("li"),Wre=a("strong"),TMo=o("prophetnet"),FMo=o(" \u2014 "),fI=a("a"),CMo=o("ProphetNetForConditionalGeneration"),MMo=o(" (ProphetNet model)"),EMo=l(),Nb=a("li"),Qre=a("strong"),yMo=o("t5"),wMo=o(" \u2014 "),gI=a("a"),AMo=o("T5ForConditionalGeneration"),LMo=o(" (T5 model)"),BMo=l(),qb=a("li"),Hre=a("strong"),xMo=o("xlm-prophetnet"),kMo=o(" \u2014 "),hI=a("a"),RMo=o("XLMProphetNetForConditionalGeneration"),SMo=o(" (XLMProphetNet model)"),PMo=l(),Ob=a("p"),$Mo=o("The model is set in evaluation mode by default using "),Ure=a("code"),IMo=o("model.eval()"),jMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jre=a("code"),DMo=o("model.train()"),NMo=l(),Yre=a("p"),qMo=o("Examples:"),OMo=l(),m(nw.$$.fragment),yxe=l(),fd=a("h2"),Gb=a("a"),Kre=a("span"),m(lw.$$.fragment),GMo=l(),Zre=a("span"),XMo=o("AutoModelForSequenceClassification"),wxe=l(),or=a("div"),m(iw.$$.fragment),VMo=l(),gd=a("p"),zMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ete=a("code"),WMo=o("from_pretrained()"),QMo=o("class method or the "),ote=a("code"),HMo=o("from_config()"),UMo=o(`class
method.`),JMo=l(),dw=a("p"),YMo=o("This class cannot be instantiated directly using "),rte=a("code"),KMo=o("__init__()"),ZMo=o(" (throws an error)."),e4o=l(),Ur=a("div"),m(cw.$$.fragment),o4o=l(),tte=a("p"),r4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),t4o=l(),hd=a("p"),a4o=o(`Note:
Loading a model from its configuration file does `),ate=a("strong"),s4o=o("not"),n4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=a("code"),l4o=o("from_pretrained()"),i4o=o("to load the model weights."),d4o=l(),nte=a("p"),c4o=o("Examples:"),m4o=l(),m(mw.$$.fragment),f4o=l(),Ge=a("div"),m(fw.$$.fragment),g4o=l(),lte=a("p"),h4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u4o=l(),Ua=a("p"),p4o=o("The model class to instantiate is selected based on the "),ite=a("code"),_4o=o("model_type"),b4o=o(` property of the config object (either
passed as an argument or loaded from `),dte=a("code"),v4o=o("pretrained_model_name_or_path"),T4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=a("code"),F4o=o("pretrained_model_name_or_path"),C4o=o(":"),M4o=l(),A=a("ul"),Xb=a("li"),mte=a("strong"),E4o=o("albert"),y4o=o(" \u2014 "),uI=a("a"),w4o=o("AlbertForSequenceClassification"),A4o=o(" (ALBERT model)"),L4o=l(),Vb=a("li"),fte=a("strong"),B4o=o("bart"),x4o=o(" \u2014 "),pI=a("a"),k4o=o("BartForSequenceClassification"),R4o=o(" (BART model)"),S4o=l(),zb=a("li"),gte=a("strong"),P4o=o("bert"),$4o=o(" \u2014 "),_I=a("a"),I4o=o("BertForSequenceClassification"),j4o=o(" (BERT model)"),D4o=l(),Wb=a("li"),hte=a("strong"),N4o=o("big_bird"),q4o=o(" \u2014 "),bI=a("a"),O4o=o("BigBirdForSequenceClassification"),G4o=o(" (BigBird model)"),X4o=l(),Qb=a("li"),ute=a("strong"),V4o=o("bigbird_pegasus"),z4o=o(" \u2014 "),vI=a("a"),W4o=o("BigBirdPegasusForSequenceClassification"),Q4o=o(" (BigBirdPegasus model)"),H4o=l(),Hb=a("li"),pte=a("strong"),U4o=o("camembert"),J4o=o(" \u2014 "),TI=a("a"),Y4o=o("CamembertForSequenceClassification"),K4o=o(" (CamemBERT model)"),Z4o=l(),Ub=a("li"),_te=a("strong"),eEo=o("canine"),oEo=o(" \u2014 "),FI=a("a"),rEo=o("CanineForSequenceClassification"),tEo=o(" (Canine model)"),aEo=l(),Jb=a("li"),bte=a("strong"),sEo=o("convbert"),nEo=o(" \u2014 "),CI=a("a"),lEo=o("ConvBertForSequenceClassification"),iEo=o(" (ConvBERT model)"),dEo=l(),Yb=a("li"),vte=a("strong"),cEo=o("ctrl"),mEo=o(" \u2014 "),MI=a("a"),fEo=o("CTRLForSequenceClassification"),gEo=o(" (CTRL model)"),hEo=l(),Kb=a("li"),Tte=a("strong"),uEo=o("data2vec-text"),pEo=o(" \u2014 "),EI=a("a"),_Eo=o("Data2VecTextForSequenceClassification"),bEo=o(" (Data2VecText model)"),vEo=l(),Zb=a("li"),Fte=a("strong"),TEo=o("deberta"),FEo=o(" \u2014 "),yI=a("a"),CEo=o("DebertaForSequenceClassification"),MEo=o(" (DeBERTa model)"),EEo=l(),e2=a("li"),Cte=a("strong"),yEo=o("deberta-v2"),wEo=o(" \u2014 "),wI=a("a"),AEo=o("DebertaV2ForSequenceClassification"),LEo=o(" (DeBERTa-v2 model)"),BEo=l(),o2=a("li"),Mte=a("strong"),xEo=o("distilbert"),kEo=o(" \u2014 "),AI=a("a"),REo=o("DistilBertForSequenceClassification"),SEo=o(" (DistilBERT model)"),PEo=l(),r2=a("li"),Ete=a("strong"),$Eo=o("electra"),IEo=o(" \u2014 "),LI=a("a"),jEo=o("ElectraForSequenceClassification"),DEo=o(" (ELECTRA model)"),NEo=l(),t2=a("li"),yte=a("strong"),qEo=o("flaubert"),OEo=o(" \u2014 "),BI=a("a"),GEo=o("FlaubertForSequenceClassification"),XEo=o(" (FlauBERT model)"),VEo=l(),a2=a("li"),wte=a("strong"),zEo=o("fnet"),WEo=o(" \u2014 "),xI=a("a"),QEo=o("FNetForSequenceClassification"),HEo=o(" (FNet model)"),UEo=l(),s2=a("li"),Ate=a("strong"),JEo=o("funnel"),YEo=o(" \u2014 "),kI=a("a"),KEo=o("FunnelForSequenceClassification"),ZEo=o(" (Funnel Transformer model)"),e3o=l(),n2=a("li"),Lte=a("strong"),o3o=o("gpt2"),r3o=o(" \u2014 "),RI=a("a"),t3o=o("GPT2ForSequenceClassification"),a3o=o(" (OpenAI GPT-2 model)"),s3o=l(),l2=a("li"),Bte=a("strong"),n3o=o("gpt_neo"),l3o=o(" \u2014 "),SI=a("a"),i3o=o("GPTNeoForSequenceClassification"),d3o=o(" (GPT Neo model)"),c3o=l(),i2=a("li"),xte=a("strong"),m3o=o("gptj"),f3o=o(" \u2014 "),PI=a("a"),g3o=o("GPTJForSequenceClassification"),h3o=o(" (GPT-J model)"),u3o=l(),d2=a("li"),kte=a("strong"),p3o=o("ibert"),_3o=o(" \u2014 "),$I=a("a"),b3o=o("IBertForSequenceClassification"),v3o=o(" (I-BERT model)"),T3o=l(),c2=a("li"),Rte=a("strong"),F3o=o("layoutlm"),C3o=o(" \u2014 "),II=a("a"),M3o=o("LayoutLMForSequenceClassification"),E3o=o(" (LayoutLM model)"),y3o=l(),m2=a("li"),Ste=a("strong"),w3o=o("layoutlmv2"),A3o=o(" \u2014 "),jI=a("a"),L3o=o("LayoutLMv2ForSequenceClassification"),B3o=o(" (LayoutLMv2 model)"),x3o=l(),f2=a("li"),Pte=a("strong"),k3o=o("led"),R3o=o(" \u2014 "),DI=a("a"),S3o=o("LEDForSequenceClassification"),P3o=o(" (LED model)"),$3o=l(),g2=a("li"),$te=a("strong"),I3o=o("longformer"),j3o=o(" \u2014 "),NI=a("a"),D3o=o("LongformerForSequenceClassification"),N3o=o(" (Longformer model)"),q3o=l(),h2=a("li"),Ite=a("strong"),O3o=o("mbart"),G3o=o(" \u2014 "),qI=a("a"),X3o=o("MBartForSequenceClassification"),V3o=o(" (mBART model)"),z3o=l(),u2=a("li"),jte=a("strong"),W3o=o("megatron-bert"),Q3o=o(" \u2014 "),OI=a("a"),H3o=o("MegatronBertForSequenceClassification"),U3o=o(" (MegatronBert model)"),J3o=l(),p2=a("li"),Dte=a("strong"),Y3o=o("mobilebert"),K3o=o(" \u2014 "),GI=a("a"),Z3o=o("MobileBertForSequenceClassification"),e5o=o(" (MobileBERT model)"),o5o=l(),_2=a("li"),Nte=a("strong"),r5o=o("mpnet"),t5o=o(" \u2014 "),XI=a("a"),a5o=o("MPNetForSequenceClassification"),s5o=o(" (MPNet model)"),n5o=l(),b2=a("li"),qte=a("strong"),l5o=o("nystromformer"),i5o=o(" \u2014 "),VI=a("a"),d5o=o("NystromformerForSequenceClassification"),c5o=o(" (Nystromformer model)"),m5o=l(),v2=a("li"),Ote=a("strong"),f5o=o("openai-gpt"),g5o=o(" \u2014 "),zI=a("a"),h5o=o("OpenAIGPTForSequenceClassification"),u5o=o(" (OpenAI GPT model)"),p5o=l(),T2=a("li"),Gte=a("strong"),_5o=o("perceiver"),b5o=o(" \u2014 "),WI=a("a"),v5o=o("PerceiverForSequenceClassification"),T5o=o(" (Perceiver model)"),F5o=l(),F2=a("li"),Xte=a("strong"),C5o=o("plbart"),M5o=o(" \u2014 "),QI=a("a"),E5o=o("PLBartForSequenceClassification"),y5o=o(" (PLBart model)"),w5o=l(),C2=a("li"),Vte=a("strong"),A5o=o("qdqbert"),L5o=o(" \u2014 "),HI=a("a"),B5o=o("QDQBertForSequenceClassification"),x5o=o(" (QDQBert model)"),k5o=l(),M2=a("li"),zte=a("strong"),R5o=o("reformer"),S5o=o(" \u2014 "),UI=a("a"),P5o=o("ReformerForSequenceClassification"),$5o=o(" (Reformer model)"),I5o=l(),E2=a("li"),Wte=a("strong"),j5o=o("rembert"),D5o=o(" \u2014 "),JI=a("a"),N5o=o("RemBertForSequenceClassification"),q5o=o(" (RemBERT model)"),O5o=l(),y2=a("li"),Qte=a("strong"),G5o=o("roberta"),X5o=o(" \u2014 "),YI=a("a"),V5o=o("RobertaForSequenceClassification"),z5o=o(" (RoBERTa model)"),W5o=l(),w2=a("li"),Hte=a("strong"),Q5o=o("roformer"),H5o=o(" \u2014 "),KI=a("a"),U5o=o("RoFormerForSequenceClassification"),J5o=o(" (RoFormer model)"),Y5o=l(),A2=a("li"),Ute=a("strong"),K5o=o("squeezebert"),Z5o=o(" \u2014 "),ZI=a("a"),eyo=o("SqueezeBertForSequenceClassification"),oyo=o(" (SqueezeBERT model)"),ryo=l(),L2=a("li"),Jte=a("strong"),tyo=o("tapas"),ayo=o(" \u2014 "),ej=a("a"),syo=o("TapasForSequenceClassification"),nyo=o(" (TAPAS model)"),lyo=l(),B2=a("li"),Yte=a("strong"),iyo=o("transfo-xl"),dyo=o(" \u2014 "),oj=a("a"),cyo=o("TransfoXLForSequenceClassification"),myo=o(" (Transformer-XL model)"),fyo=l(),x2=a("li"),Kte=a("strong"),gyo=o("xlm"),hyo=o(" \u2014 "),rj=a("a"),uyo=o("XLMForSequenceClassification"),pyo=o(" (XLM model)"),_yo=l(),k2=a("li"),Zte=a("strong"),byo=o("xlm-roberta"),vyo=o(" \u2014 "),tj=a("a"),Tyo=o("XLMRobertaForSequenceClassification"),Fyo=o(" (XLM-RoBERTa model)"),Cyo=l(),R2=a("li"),eae=a("strong"),Myo=o("xlm-roberta-xl"),Eyo=o(" \u2014 "),aj=a("a"),yyo=o("XLMRobertaXLForSequenceClassification"),wyo=o(" (XLM-RoBERTa-XL model)"),Ayo=l(),S2=a("li"),oae=a("strong"),Lyo=o("xlnet"),Byo=o(" \u2014 "),sj=a("a"),xyo=o("XLNetForSequenceClassification"),kyo=o(" (XLNet model)"),Ryo=l(),P2=a("li"),rae=a("strong"),Syo=o("yoso"),Pyo=o(" \u2014 "),nj=a("a"),$yo=o("YosoForSequenceClassification"),Iyo=o(" (YOSO model)"),jyo=l(),$2=a("p"),Dyo=o("The model is set in evaluation mode by default using "),tae=a("code"),Nyo=o("model.eval()"),qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=a("code"),Oyo=o("model.train()"),Gyo=l(),sae=a("p"),Xyo=o("Examples:"),Vyo=l(),m(gw.$$.fragment),Axe=l(),ud=a("h2"),I2=a("a"),nae=a("span"),m(hw.$$.fragment),zyo=l(),lae=a("span"),Wyo=o("AutoModelForMultipleChoice"),Lxe=l(),rr=a("div"),m(uw.$$.fragment),Qyo=l(),pd=a("p"),Hyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iae=a("code"),Uyo=o("from_pretrained()"),Jyo=o("class method or the "),dae=a("code"),Yyo=o("from_config()"),Kyo=o(`class
method.`),Zyo=l(),pw=a("p"),ewo=o("This class cannot be instantiated directly using "),cae=a("code"),owo=o("__init__()"),rwo=o(" (throws an error)."),two=l(),Jr=a("div"),m(_w.$$.fragment),awo=l(),mae=a("p"),swo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nwo=l(),_d=a("p"),lwo=o(`Note:
Loading a model from its configuration file does `),fae=a("strong"),iwo=o("not"),dwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=a("code"),cwo=o("from_pretrained()"),mwo=o("to load the model weights."),fwo=l(),hae=a("p"),gwo=o("Examples:"),hwo=l(),m(bw.$$.fragment),uwo=l(),Xe=a("div"),m(vw.$$.fragment),pwo=l(),uae=a("p"),_wo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bwo=l(),Ja=a("p"),vwo=o("The model class to instantiate is selected based on the "),pae=a("code"),Two=o("model_type"),Fwo=o(` property of the config object (either
passed as an argument or loaded from `),_ae=a("code"),Cwo=o("pretrained_model_name_or_path"),Mwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bae=a("code"),Ewo=o("pretrained_model_name_or_path"),ywo=o(":"),wwo=l(),O=a("ul"),j2=a("li"),vae=a("strong"),Awo=o("albert"),Lwo=o(" \u2014 "),lj=a("a"),Bwo=o("AlbertForMultipleChoice"),xwo=o(" (ALBERT model)"),kwo=l(),D2=a("li"),Tae=a("strong"),Rwo=o("bert"),Swo=o(" \u2014 "),ij=a("a"),Pwo=o("BertForMultipleChoice"),$wo=o(" (BERT model)"),Iwo=l(),N2=a("li"),Fae=a("strong"),jwo=o("big_bird"),Dwo=o(" \u2014 "),dj=a("a"),Nwo=o("BigBirdForMultipleChoice"),qwo=o(" (BigBird model)"),Owo=l(),q2=a("li"),Cae=a("strong"),Gwo=o("camembert"),Xwo=o(" \u2014 "),cj=a("a"),Vwo=o("CamembertForMultipleChoice"),zwo=o(" (CamemBERT model)"),Wwo=l(),O2=a("li"),Mae=a("strong"),Qwo=o("canine"),Hwo=o(" \u2014 "),mj=a("a"),Uwo=o("CanineForMultipleChoice"),Jwo=o(" (Canine model)"),Ywo=l(),G2=a("li"),Eae=a("strong"),Kwo=o("convbert"),Zwo=o(" \u2014 "),fj=a("a"),e6o=o("ConvBertForMultipleChoice"),o6o=o(" (ConvBERT model)"),r6o=l(),X2=a("li"),yae=a("strong"),t6o=o("data2vec-text"),a6o=o(" \u2014 "),gj=a("a"),s6o=o("Data2VecTextForMultipleChoice"),n6o=o(" (Data2VecText model)"),l6o=l(),V2=a("li"),wae=a("strong"),i6o=o("distilbert"),d6o=o(" \u2014 "),hj=a("a"),c6o=o("DistilBertForMultipleChoice"),m6o=o(" (DistilBERT model)"),f6o=l(),z2=a("li"),Aae=a("strong"),g6o=o("electra"),h6o=o(" \u2014 "),uj=a("a"),u6o=o("ElectraForMultipleChoice"),p6o=o(" (ELECTRA model)"),_6o=l(),W2=a("li"),Lae=a("strong"),b6o=o("flaubert"),v6o=o(" \u2014 "),pj=a("a"),T6o=o("FlaubertForMultipleChoice"),F6o=o(" (FlauBERT model)"),C6o=l(),Q2=a("li"),Bae=a("strong"),M6o=o("fnet"),E6o=o(" \u2014 "),_j=a("a"),y6o=o("FNetForMultipleChoice"),w6o=o(" (FNet model)"),A6o=l(),H2=a("li"),xae=a("strong"),L6o=o("funnel"),B6o=o(" \u2014 "),bj=a("a"),x6o=o("FunnelForMultipleChoice"),k6o=o(" (Funnel Transformer model)"),R6o=l(),U2=a("li"),kae=a("strong"),S6o=o("ibert"),P6o=o(" \u2014 "),vj=a("a"),$6o=o("IBertForMultipleChoice"),I6o=o(" (I-BERT model)"),j6o=l(),J2=a("li"),Rae=a("strong"),D6o=o("longformer"),N6o=o(" \u2014 "),Tj=a("a"),q6o=o("LongformerForMultipleChoice"),O6o=o(" (Longformer model)"),G6o=l(),Y2=a("li"),Sae=a("strong"),X6o=o("megatron-bert"),V6o=o(" \u2014 "),Fj=a("a"),z6o=o("MegatronBertForMultipleChoice"),W6o=o(" (MegatronBert model)"),Q6o=l(),K2=a("li"),Pae=a("strong"),H6o=o("mobilebert"),U6o=o(" \u2014 "),Cj=a("a"),J6o=o("MobileBertForMultipleChoice"),Y6o=o(" (MobileBERT model)"),K6o=l(),Z2=a("li"),$ae=a("strong"),Z6o=o("mpnet"),eAo=o(" \u2014 "),Mj=a("a"),oAo=o("MPNetForMultipleChoice"),rAo=o(" (MPNet model)"),tAo=l(),ev=a("li"),Iae=a("strong"),aAo=o("nystromformer"),sAo=o(" \u2014 "),Ej=a("a"),nAo=o("NystromformerForMultipleChoice"),lAo=o(" (Nystromformer model)"),iAo=l(),ov=a("li"),jae=a("strong"),dAo=o("qdqbert"),cAo=o(" \u2014 "),yj=a("a"),mAo=o("QDQBertForMultipleChoice"),fAo=o(" (QDQBert model)"),gAo=l(),rv=a("li"),Dae=a("strong"),hAo=o("rembert"),uAo=o(" \u2014 "),wj=a("a"),pAo=o("RemBertForMultipleChoice"),_Ao=o(" (RemBERT model)"),bAo=l(),tv=a("li"),Nae=a("strong"),vAo=o("roberta"),TAo=o(" \u2014 "),Aj=a("a"),FAo=o("RobertaForMultipleChoice"),CAo=o(" (RoBERTa model)"),MAo=l(),av=a("li"),qae=a("strong"),EAo=o("roformer"),yAo=o(" \u2014 "),Lj=a("a"),wAo=o("RoFormerForMultipleChoice"),AAo=o(" (RoFormer model)"),LAo=l(),sv=a("li"),Oae=a("strong"),BAo=o("squeezebert"),xAo=o(" \u2014 "),Bj=a("a"),kAo=o("SqueezeBertForMultipleChoice"),RAo=o(" (SqueezeBERT model)"),SAo=l(),nv=a("li"),Gae=a("strong"),PAo=o("xlm"),$Ao=o(" \u2014 "),xj=a("a"),IAo=o("XLMForMultipleChoice"),jAo=o(" (XLM model)"),DAo=l(),lv=a("li"),Xae=a("strong"),NAo=o("xlm-roberta"),qAo=o(" \u2014 "),kj=a("a"),OAo=o("XLMRobertaForMultipleChoice"),GAo=o(" (XLM-RoBERTa model)"),XAo=l(),iv=a("li"),Vae=a("strong"),VAo=o("xlm-roberta-xl"),zAo=o(" \u2014 "),Rj=a("a"),WAo=o("XLMRobertaXLForMultipleChoice"),QAo=o(" (XLM-RoBERTa-XL model)"),HAo=l(),dv=a("li"),zae=a("strong"),UAo=o("xlnet"),JAo=o(" \u2014 "),Sj=a("a"),YAo=o("XLNetForMultipleChoice"),KAo=o(" (XLNet model)"),ZAo=l(),cv=a("li"),Wae=a("strong"),e0o=o("yoso"),o0o=o(" \u2014 "),Pj=a("a"),r0o=o("YosoForMultipleChoice"),t0o=o(" (YOSO model)"),a0o=l(),mv=a("p"),s0o=o("The model is set in evaluation mode by default using "),Qae=a("code"),n0o=o("model.eval()"),l0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),i0o=o("model.train()"),d0o=l(),Uae=a("p"),c0o=o("Examples:"),m0o=l(),m(Tw.$$.fragment),Bxe=l(),bd=a("h2"),fv=a("a"),Jae=a("span"),m(Fw.$$.fragment),f0o=l(),Yae=a("span"),g0o=o("AutoModelForNextSentencePrediction"),xxe=l(),tr=a("div"),m(Cw.$$.fragment),h0o=l(),vd=a("p"),u0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kae=a("code"),p0o=o("from_pretrained()"),_0o=o("class method or the "),Zae=a("code"),b0o=o("from_config()"),v0o=o(`class
method.`),T0o=l(),Mw=a("p"),F0o=o("This class cannot be instantiated directly using "),ese=a("code"),C0o=o("__init__()"),M0o=o(" (throws an error)."),E0o=l(),Yr=a("div"),m(Ew.$$.fragment),y0o=l(),ose=a("p"),w0o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A0o=l(),Td=a("p"),L0o=o(`Note:
Loading a model from its configuration file does `),rse=a("strong"),B0o=o("not"),x0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=a("code"),k0o=o("from_pretrained()"),R0o=o("to load the model weights."),S0o=l(),ase=a("p"),P0o=o("Examples:"),$0o=l(),m(yw.$$.fragment),I0o=l(),Ve=a("div"),m(ww.$$.fragment),j0o=l(),sse=a("p"),D0o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N0o=l(),Ya=a("p"),q0o=o("The model class to instantiate is selected based on the "),nse=a("code"),O0o=o("model_type"),G0o=o(` property of the config object (either
passed as an argument or loaded from `),lse=a("code"),X0o=o("pretrained_model_name_or_path"),V0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ise=a("code"),z0o=o("pretrained_model_name_or_path"),W0o=o(":"),Q0o=l(),da=a("ul"),gv=a("li"),dse=a("strong"),H0o=o("bert"),U0o=o(" \u2014 "),$j=a("a"),J0o=o("BertForNextSentencePrediction"),Y0o=o(" (BERT model)"),K0o=l(),hv=a("li"),cse=a("strong"),Z0o=o("fnet"),eLo=o(" \u2014 "),Ij=a("a"),oLo=o("FNetForNextSentencePrediction"),rLo=o(" (FNet model)"),tLo=l(),uv=a("li"),mse=a("strong"),aLo=o("megatron-bert"),sLo=o(" \u2014 "),jj=a("a"),nLo=o("MegatronBertForNextSentencePrediction"),lLo=o(" (MegatronBert model)"),iLo=l(),pv=a("li"),fse=a("strong"),dLo=o("mobilebert"),cLo=o(" \u2014 "),Dj=a("a"),mLo=o("MobileBertForNextSentencePrediction"),fLo=o(" (MobileBERT model)"),gLo=l(),_v=a("li"),gse=a("strong"),hLo=o("qdqbert"),uLo=o(" \u2014 "),Nj=a("a"),pLo=o("QDQBertForNextSentencePrediction"),_Lo=o(" (QDQBert model)"),bLo=l(),bv=a("p"),vLo=o("The model is set in evaluation mode by default using "),hse=a("code"),TLo=o("model.eval()"),FLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),CLo=o("model.train()"),MLo=l(),pse=a("p"),ELo=o("Examples:"),yLo=l(),m(Aw.$$.fragment),kxe=l(),Fd=a("h2"),vv=a("a"),_se=a("span"),m(Lw.$$.fragment),wLo=l(),bse=a("span"),ALo=o("AutoModelForTokenClassification"),Rxe=l(),ar=a("div"),m(Bw.$$.fragment),LLo=l(),Cd=a("p"),BLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vse=a("code"),xLo=o("from_pretrained()"),kLo=o("class method or the "),Tse=a("code"),RLo=o("from_config()"),SLo=o(`class
method.`),PLo=l(),xw=a("p"),$Lo=o("This class cannot be instantiated directly using "),Fse=a("code"),ILo=o("__init__()"),jLo=o(" (throws an error)."),DLo=l(),Kr=a("div"),m(kw.$$.fragment),NLo=l(),Cse=a("p"),qLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OLo=l(),Md=a("p"),GLo=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),XLo=o("not"),VLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ese=a("code"),zLo=o("from_pretrained()"),WLo=o("to load the model weights."),QLo=l(),yse=a("p"),HLo=o("Examples:"),ULo=l(),m(Rw.$$.fragment),JLo=l(),ze=a("div"),m(Sw.$$.fragment),YLo=l(),wse=a("p"),KLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZLo=l(),Ka=a("p"),e8o=o("The model class to instantiate is selected based on the "),Ase=a("code"),o8o=o("model_type"),r8o=o(` property of the config object (either
passed as an argument or loaded from `),Lse=a("code"),t8o=o("pretrained_model_name_or_path"),a8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),s8o=o("pretrained_model_name_or_path"),n8o=o(":"),l8o=l(),N=a("ul"),Tv=a("li"),xse=a("strong"),i8o=o("albert"),d8o=o(" \u2014 "),qj=a("a"),c8o=o("AlbertForTokenClassification"),m8o=o(" (ALBERT model)"),f8o=l(),Fv=a("li"),kse=a("strong"),g8o=o("bert"),h8o=o(" \u2014 "),Oj=a("a"),u8o=o("BertForTokenClassification"),p8o=o(" (BERT model)"),_8o=l(),Cv=a("li"),Rse=a("strong"),b8o=o("big_bird"),v8o=o(" \u2014 "),Gj=a("a"),T8o=o("BigBirdForTokenClassification"),F8o=o(" (BigBird model)"),C8o=l(),Mv=a("li"),Sse=a("strong"),M8o=o("camembert"),E8o=o(" \u2014 "),Xj=a("a"),y8o=o("CamembertForTokenClassification"),w8o=o(" (CamemBERT model)"),A8o=l(),Ev=a("li"),Pse=a("strong"),L8o=o("canine"),B8o=o(" \u2014 "),Vj=a("a"),x8o=o("CanineForTokenClassification"),k8o=o(" (Canine model)"),R8o=l(),yv=a("li"),$se=a("strong"),S8o=o("convbert"),P8o=o(" \u2014 "),zj=a("a"),$8o=o("ConvBertForTokenClassification"),I8o=o(" (ConvBERT model)"),j8o=l(),wv=a("li"),Ise=a("strong"),D8o=o("data2vec-text"),N8o=o(" \u2014 "),Wj=a("a"),q8o=o("Data2VecTextForTokenClassification"),O8o=o(" (Data2VecText model)"),G8o=l(),Av=a("li"),jse=a("strong"),X8o=o("deberta"),V8o=o(" \u2014 "),Qj=a("a"),z8o=o("DebertaForTokenClassification"),W8o=o(" (DeBERTa model)"),Q8o=l(),Lv=a("li"),Dse=a("strong"),H8o=o("deberta-v2"),U8o=o(" \u2014 "),Hj=a("a"),J8o=o("DebertaV2ForTokenClassification"),Y8o=o(" (DeBERTa-v2 model)"),K8o=l(),Bv=a("li"),Nse=a("strong"),Z8o=o("distilbert"),e7o=o(" \u2014 "),Uj=a("a"),o7o=o("DistilBertForTokenClassification"),r7o=o(" (DistilBERT model)"),t7o=l(),xv=a("li"),qse=a("strong"),a7o=o("electra"),s7o=o(" \u2014 "),Jj=a("a"),n7o=o("ElectraForTokenClassification"),l7o=o(" (ELECTRA model)"),i7o=l(),kv=a("li"),Ose=a("strong"),d7o=o("flaubert"),c7o=o(" \u2014 "),Yj=a("a"),m7o=o("FlaubertForTokenClassification"),f7o=o(" (FlauBERT model)"),g7o=l(),Rv=a("li"),Gse=a("strong"),h7o=o("fnet"),u7o=o(" \u2014 "),Kj=a("a"),p7o=o("FNetForTokenClassification"),_7o=o(" (FNet model)"),b7o=l(),Sv=a("li"),Xse=a("strong"),v7o=o("funnel"),T7o=o(" \u2014 "),Zj=a("a"),F7o=o("FunnelForTokenClassification"),C7o=o(" (Funnel Transformer model)"),M7o=l(),Pv=a("li"),Vse=a("strong"),E7o=o("gpt2"),y7o=o(" \u2014 "),eD=a("a"),w7o=o("GPT2ForTokenClassification"),A7o=o(" (OpenAI GPT-2 model)"),L7o=l(),$v=a("li"),zse=a("strong"),B7o=o("ibert"),x7o=o(" \u2014 "),oD=a("a"),k7o=o("IBertForTokenClassification"),R7o=o(" (I-BERT model)"),S7o=l(),Iv=a("li"),Wse=a("strong"),P7o=o("layoutlm"),$7o=o(" \u2014 "),rD=a("a"),I7o=o("LayoutLMForTokenClassification"),j7o=o(" (LayoutLM model)"),D7o=l(),jv=a("li"),Qse=a("strong"),N7o=o("layoutlmv2"),q7o=o(" \u2014 "),tD=a("a"),O7o=o("LayoutLMv2ForTokenClassification"),G7o=o(" (LayoutLMv2 model)"),X7o=l(),Dv=a("li"),Hse=a("strong"),V7o=o("longformer"),z7o=o(" \u2014 "),aD=a("a"),W7o=o("LongformerForTokenClassification"),Q7o=o(" (Longformer model)"),H7o=l(),Nv=a("li"),Use=a("strong"),U7o=o("megatron-bert"),J7o=o(" \u2014 "),sD=a("a"),Y7o=o("MegatronBertForTokenClassification"),K7o=o(" (MegatronBert model)"),Z7o=l(),qv=a("li"),Jse=a("strong"),e9o=o("mobilebert"),o9o=o(" \u2014 "),nD=a("a"),r9o=o("MobileBertForTokenClassification"),t9o=o(" (MobileBERT model)"),a9o=l(),Ov=a("li"),Yse=a("strong"),s9o=o("mpnet"),n9o=o(" \u2014 "),lD=a("a"),l9o=o("MPNetForTokenClassification"),i9o=o(" (MPNet model)"),d9o=l(),Gv=a("li"),Kse=a("strong"),c9o=o("nystromformer"),m9o=o(" \u2014 "),iD=a("a"),f9o=o("NystromformerForTokenClassification"),g9o=o(" (Nystromformer model)"),h9o=l(),Xv=a("li"),Zse=a("strong"),u9o=o("qdqbert"),p9o=o(" \u2014 "),dD=a("a"),_9o=o("QDQBertForTokenClassification"),b9o=o(" (QDQBert model)"),v9o=l(),Vv=a("li"),ene=a("strong"),T9o=o("rembert"),F9o=o(" \u2014 "),cD=a("a"),C9o=o("RemBertForTokenClassification"),M9o=o(" (RemBERT model)"),E9o=l(),zv=a("li"),one=a("strong"),y9o=o("roberta"),w9o=o(" \u2014 "),mD=a("a"),A9o=o("RobertaForTokenClassification"),L9o=o(" (RoBERTa model)"),B9o=l(),Wv=a("li"),rne=a("strong"),x9o=o("roformer"),k9o=o(" \u2014 "),fD=a("a"),R9o=o("RoFormerForTokenClassification"),S9o=o(" (RoFormer model)"),P9o=l(),Qv=a("li"),tne=a("strong"),$9o=o("squeezebert"),I9o=o(" \u2014 "),gD=a("a"),j9o=o("SqueezeBertForTokenClassification"),D9o=o(" (SqueezeBERT model)"),N9o=l(),Hv=a("li"),ane=a("strong"),q9o=o("xlm"),O9o=o(" \u2014 "),hD=a("a"),G9o=o("XLMForTokenClassification"),X9o=o(" (XLM model)"),V9o=l(),Uv=a("li"),sne=a("strong"),z9o=o("xlm-roberta"),W9o=o(" \u2014 "),uD=a("a"),Q9o=o("XLMRobertaForTokenClassification"),H9o=o(" (XLM-RoBERTa model)"),U9o=l(),Jv=a("li"),nne=a("strong"),J9o=o("xlm-roberta-xl"),Y9o=o(" \u2014 "),pD=a("a"),K9o=o("XLMRobertaXLForTokenClassification"),Z9o=o(" (XLM-RoBERTa-XL model)"),eBo=l(),Yv=a("li"),lne=a("strong"),oBo=o("xlnet"),rBo=o(" \u2014 "),_D=a("a"),tBo=o("XLNetForTokenClassification"),aBo=o(" (XLNet model)"),sBo=l(),Kv=a("li"),ine=a("strong"),nBo=o("yoso"),lBo=o(" \u2014 "),bD=a("a"),iBo=o("YosoForTokenClassification"),dBo=o(" (YOSO model)"),cBo=l(),Zv=a("p"),mBo=o("The model is set in evaluation mode by default using "),dne=a("code"),fBo=o("model.eval()"),gBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cne=a("code"),hBo=o("model.train()"),uBo=l(),mne=a("p"),pBo=o("Examples:"),_Bo=l(),m(Pw.$$.fragment),Sxe=l(),Ed=a("h2"),eT=a("a"),fne=a("span"),m($w.$$.fragment),bBo=l(),gne=a("span"),vBo=o("AutoModelForQuestionAnswering"),Pxe=l(),sr=a("div"),m(Iw.$$.fragment),TBo=l(),yd=a("p"),FBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hne=a("code"),CBo=o("from_pretrained()"),MBo=o("class method or the "),une=a("code"),EBo=o("from_config()"),yBo=o(`class
method.`),wBo=l(),jw=a("p"),ABo=o("This class cannot be instantiated directly using "),pne=a("code"),LBo=o("__init__()"),BBo=o(" (throws an error)."),xBo=l(),Zr=a("div"),m(Dw.$$.fragment),kBo=l(),_ne=a("p"),RBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SBo=l(),wd=a("p"),PBo=o(`Note:
Loading a model from its configuration file does `),bne=a("strong"),$Bo=o("not"),IBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=a("code"),jBo=o("from_pretrained()"),DBo=o("to load the model weights."),NBo=l(),Tne=a("p"),qBo=o("Examples:"),OBo=l(),m(Nw.$$.fragment),GBo=l(),We=a("div"),m(qw.$$.fragment),XBo=l(),Fne=a("p"),VBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zBo=l(),Za=a("p"),WBo=o("The model class to instantiate is selected based on the "),Cne=a("code"),QBo=o("model_type"),HBo=o(` property of the config object (either
passed as an argument or loaded from `),Mne=a("code"),UBo=o("pretrained_model_name_or_path"),JBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=a("code"),YBo=o("pretrained_model_name_or_path"),KBo=o(":"),ZBo=l(),R=a("ul"),oT=a("li"),yne=a("strong"),exo=o("albert"),oxo=o(" \u2014 "),vD=a("a"),rxo=o("AlbertForQuestionAnswering"),txo=o(" (ALBERT model)"),axo=l(),rT=a("li"),wne=a("strong"),sxo=o("bart"),nxo=o(" \u2014 "),TD=a("a"),lxo=o("BartForQuestionAnswering"),ixo=o(" (BART model)"),dxo=l(),tT=a("li"),Ane=a("strong"),cxo=o("bert"),mxo=o(" \u2014 "),FD=a("a"),fxo=o("BertForQuestionAnswering"),gxo=o(" (BERT model)"),hxo=l(),aT=a("li"),Lne=a("strong"),uxo=o("big_bird"),pxo=o(" \u2014 "),CD=a("a"),_xo=o("BigBirdForQuestionAnswering"),bxo=o(" (BigBird model)"),vxo=l(),sT=a("li"),Bne=a("strong"),Txo=o("bigbird_pegasus"),Fxo=o(" \u2014 "),MD=a("a"),Cxo=o("BigBirdPegasusForQuestionAnswering"),Mxo=o(" (BigBirdPegasus model)"),Exo=l(),nT=a("li"),xne=a("strong"),yxo=o("camembert"),wxo=o(" \u2014 "),ED=a("a"),Axo=o("CamembertForQuestionAnswering"),Lxo=o(" (CamemBERT model)"),Bxo=l(),lT=a("li"),kne=a("strong"),xxo=o("canine"),kxo=o(" \u2014 "),yD=a("a"),Rxo=o("CanineForQuestionAnswering"),Sxo=o(" (Canine model)"),Pxo=l(),iT=a("li"),Rne=a("strong"),$xo=o("convbert"),Ixo=o(" \u2014 "),wD=a("a"),jxo=o("ConvBertForQuestionAnswering"),Dxo=o(" (ConvBERT model)"),Nxo=l(),dT=a("li"),Sne=a("strong"),qxo=o("data2vec-text"),Oxo=o(" \u2014 "),AD=a("a"),Gxo=o("Data2VecTextForQuestionAnswering"),Xxo=o(" (Data2VecText model)"),Vxo=l(),cT=a("li"),Pne=a("strong"),zxo=o("deberta"),Wxo=o(" \u2014 "),LD=a("a"),Qxo=o("DebertaForQuestionAnswering"),Hxo=o(" (DeBERTa model)"),Uxo=l(),mT=a("li"),$ne=a("strong"),Jxo=o("deberta-v2"),Yxo=o(" \u2014 "),BD=a("a"),Kxo=o("DebertaV2ForQuestionAnswering"),Zxo=o(" (DeBERTa-v2 model)"),eko=l(),fT=a("li"),Ine=a("strong"),oko=o("distilbert"),rko=o(" \u2014 "),xD=a("a"),tko=o("DistilBertForQuestionAnswering"),ako=o(" (DistilBERT model)"),sko=l(),gT=a("li"),jne=a("strong"),nko=o("electra"),lko=o(" \u2014 "),kD=a("a"),iko=o("ElectraForQuestionAnswering"),dko=o(" (ELECTRA model)"),cko=l(),hT=a("li"),Dne=a("strong"),mko=o("flaubert"),fko=o(" \u2014 "),RD=a("a"),gko=o("FlaubertForQuestionAnsweringSimple"),hko=o(" (FlauBERT model)"),uko=l(),uT=a("li"),Nne=a("strong"),pko=o("fnet"),_ko=o(" \u2014 "),SD=a("a"),bko=o("FNetForQuestionAnswering"),vko=o(" (FNet model)"),Tko=l(),pT=a("li"),qne=a("strong"),Fko=o("funnel"),Cko=o(" \u2014 "),PD=a("a"),Mko=o("FunnelForQuestionAnswering"),Eko=o(" (Funnel Transformer model)"),yko=l(),_T=a("li"),One=a("strong"),wko=o("gptj"),Ako=o(" \u2014 "),$D=a("a"),Lko=o("GPTJForQuestionAnswering"),Bko=o(" (GPT-J model)"),xko=l(),bT=a("li"),Gne=a("strong"),kko=o("ibert"),Rko=o(" \u2014 "),ID=a("a"),Sko=o("IBertForQuestionAnswering"),Pko=o(" (I-BERT model)"),$ko=l(),vT=a("li"),Xne=a("strong"),Iko=o("layoutlmv2"),jko=o(" \u2014 "),jD=a("a"),Dko=o("LayoutLMv2ForQuestionAnswering"),Nko=o(" (LayoutLMv2 model)"),qko=l(),TT=a("li"),Vne=a("strong"),Oko=o("led"),Gko=o(" \u2014 "),DD=a("a"),Xko=o("LEDForQuestionAnswering"),Vko=o(" (LED model)"),zko=l(),FT=a("li"),zne=a("strong"),Wko=o("longformer"),Qko=o(" \u2014 "),ND=a("a"),Hko=o("LongformerForQuestionAnswering"),Uko=o(" (Longformer model)"),Jko=l(),CT=a("li"),Wne=a("strong"),Yko=o("lxmert"),Kko=o(" \u2014 "),qD=a("a"),Zko=o("LxmertForQuestionAnswering"),eRo=o(" (LXMERT model)"),oRo=l(),MT=a("li"),Qne=a("strong"),rRo=o("mbart"),tRo=o(" \u2014 "),OD=a("a"),aRo=o("MBartForQuestionAnswering"),sRo=o(" (mBART model)"),nRo=l(),ET=a("li"),Hne=a("strong"),lRo=o("megatron-bert"),iRo=o(" \u2014 "),GD=a("a"),dRo=o("MegatronBertForQuestionAnswering"),cRo=o(" (MegatronBert model)"),mRo=l(),yT=a("li"),Une=a("strong"),fRo=o("mobilebert"),gRo=o(" \u2014 "),XD=a("a"),hRo=o("MobileBertForQuestionAnswering"),uRo=o(" (MobileBERT model)"),pRo=l(),wT=a("li"),Jne=a("strong"),_Ro=o("mpnet"),bRo=o(" \u2014 "),VD=a("a"),vRo=o("MPNetForQuestionAnswering"),TRo=o(" (MPNet model)"),FRo=l(),AT=a("li"),Yne=a("strong"),CRo=o("nystromformer"),MRo=o(" \u2014 "),zD=a("a"),ERo=o("NystromformerForQuestionAnswering"),yRo=o(" (Nystromformer model)"),wRo=l(),LT=a("li"),Kne=a("strong"),ARo=o("qdqbert"),LRo=o(" \u2014 "),WD=a("a"),BRo=o("QDQBertForQuestionAnswering"),xRo=o(" (QDQBert model)"),kRo=l(),BT=a("li"),Zne=a("strong"),RRo=o("reformer"),SRo=o(" \u2014 "),QD=a("a"),PRo=o("ReformerForQuestionAnswering"),$Ro=o(" (Reformer model)"),IRo=l(),xT=a("li"),ele=a("strong"),jRo=o("rembert"),DRo=o(" \u2014 "),HD=a("a"),NRo=o("RemBertForQuestionAnswering"),qRo=o(" (RemBERT model)"),ORo=l(),kT=a("li"),ole=a("strong"),GRo=o("roberta"),XRo=o(" \u2014 "),UD=a("a"),VRo=o("RobertaForQuestionAnswering"),zRo=o(" (RoBERTa model)"),WRo=l(),RT=a("li"),rle=a("strong"),QRo=o("roformer"),HRo=o(" \u2014 "),JD=a("a"),URo=o("RoFormerForQuestionAnswering"),JRo=o(" (RoFormer model)"),YRo=l(),ST=a("li"),tle=a("strong"),KRo=o("splinter"),ZRo=o(" \u2014 "),YD=a("a"),eSo=o("SplinterForQuestionAnswering"),oSo=o(" (Splinter model)"),rSo=l(),PT=a("li"),ale=a("strong"),tSo=o("squeezebert"),aSo=o(" \u2014 "),KD=a("a"),sSo=o("SqueezeBertForQuestionAnswering"),nSo=o(" (SqueezeBERT model)"),lSo=l(),$T=a("li"),sle=a("strong"),iSo=o("xlm"),dSo=o(" \u2014 "),ZD=a("a"),cSo=o("XLMForQuestionAnsweringSimple"),mSo=o(" (XLM model)"),fSo=l(),IT=a("li"),nle=a("strong"),gSo=o("xlm-roberta"),hSo=o(" \u2014 "),eN=a("a"),uSo=o("XLMRobertaForQuestionAnswering"),pSo=o(" (XLM-RoBERTa model)"),_So=l(),jT=a("li"),lle=a("strong"),bSo=o("xlm-roberta-xl"),vSo=o(" \u2014 "),oN=a("a"),TSo=o("XLMRobertaXLForQuestionAnswering"),FSo=o(" (XLM-RoBERTa-XL model)"),CSo=l(),DT=a("li"),ile=a("strong"),MSo=o("xlnet"),ESo=o(" \u2014 "),rN=a("a"),ySo=o("XLNetForQuestionAnsweringSimple"),wSo=o(" (XLNet model)"),ASo=l(),NT=a("li"),dle=a("strong"),LSo=o("yoso"),BSo=o(" \u2014 "),tN=a("a"),xSo=o("YosoForQuestionAnswering"),kSo=o(" (YOSO model)"),RSo=l(),qT=a("p"),SSo=o("The model is set in evaluation mode by default using "),cle=a("code"),PSo=o("model.eval()"),$So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=a("code"),ISo=o("model.train()"),jSo=l(),fle=a("p"),DSo=o("Examples:"),NSo=l(),m(Ow.$$.fragment),$xe=l(),Ad=a("h2"),OT=a("a"),gle=a("span"),m(Gw.$$.fragment),qSo=l(),hle=a("span"),OSo=o("AutoModelForTableQuestionAnswering"),Ixe=l(),nr=a("div"),m(Xw.$$.fragment),GSo=l(),Ld=a("p"),XSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ule=a("code"),VSo=o("from_pretrained()"),zSo=o("class method or the "),ple=a("code"),WSo=o("from_config()"),QSo=o(`class
method.`),HSo=l(),Vw=a("p"),USo=o("This class cannot be instantiated directly using "),_le=a("code"),JSo=o("__init__()"),YSo=o(" (throws an error)."),KSo=l(),et=a("div"),m(zw.$$.fragment),ZSo=l(),ble=a("p"),ePo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oPo=l(),Bd=a("p"),rPo=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),tPo=o("not"),aPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=a("code"),sPo=o("from_pretrained()"),nPo=o("to load the model weights."),lPo=l(),Fle=a("p"),iPo=o("Examples:"),dPo=l(),m(Ww.$$.fragment),cPo=l(),Qe=a("div"),m(Qw.$$.fragment),mPo=l(),Cle=a("p"),fPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gPo=l(),es=a("p"),hPo=o("The model class to instantiate is selected based on the "),Mle=a("code"),uPo=o("model_type"),pPo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),_Po=o("pretrained_model_name_or_path"),bPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),vPo=o("pretrained_model_name_or_path"),TPo=o(":"),FPo=l(),wle=a("ul"),GT=a("li"),Ale=a("strong"),CPo=o("tapas"),MPo=o(" \u2014 "),aN=a("a"),EPo=o("TapasForQuestionAnswering"),yPo=o(" (TAPAS model)"),wPo=l(),XT=a("p"),APo=o("The model is set in evaluation mode by default using "),Lle=a("code"),LPo=o("model.eval()"),BPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),xPo=o("model.train()"),kPo=l(),xle=a("p"),RPo=o("Examples:"),SPo=l(),m(Hw.$$.fragment),jxe=l(),xd=a("h2"),VT=a("a"),kle=a("span"),m(Uw.$$.fragment),PPo=l(),Rle=a("span"),$Po=o("AutoModelForImageClassification"),Dxe=l(),lr=a("div"),m(Jw.$$.fragment),IPo=l(),kd=a("p"),jPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sle=a("code"),DPo=o("from_pretrained()"),NPo=o("class method or the "),Ple=a("code"),qPo=o("from_config()"),OPo=o(`class
method.`),GPo=l(),Yw=a("p"),XPo=o("This class cannot be instantiated directly using "),$le=a("code"),VPo=o("__init__()"),zPo=o(" (throws an error)."),WPo=l(),ot=a("div"),m(Kw.$$.fragment),QPo=l(),Ile=a("p"),HPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UPo=l(),Rd=a("p"),JPo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),YPo=o("not"),KPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=a("code"),ZPo=o("from_pretrained()"),e$o=o("to load the model weights."),o$o=l(),Nle=a("p"),r$o=o("Examples:"),t$o=l(),m(Zw.$$.fragment),a$o=l(),He=a("div"),m(e6.$$.fragment),s$o=l(),qle=a("p"),n$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),l$o=l(),os=a("p"),i$o=o("The model class to instantiate is selected based on the "),Ole=a("code"),d$o=o("model_type"),c$o=o(` property of the config object (either
passed as an argument or loaded from `),Gle=a("code"),m$o=o("pretrained_model_name_or_path"),f$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),g$o=o("pretrained_model_name_or_path"),h$o=o(":"),u$o=l(),Fe=a("ul"),zT=a("li"),Vle=a("strong"),p$o=o("beit"),_$o=o(" \u2014 "),sN=a("a"),b$o=o("BeitForImageClassification"),v$o=o(" (BEiT model)"),T$o=l(),WT=a("li"),zle=a("strong"),F$o=o("convnext"),C$o=o(" \u2014 "),nN=a("a"),M$o=o("ConvNextForImageClassification"),E$o=o(" (ConvNext model)"),y$o=l(),qn=a("li"),Wle=a("strong"),w$o=o("deit"),A$o=o(" \u2014 "),lN=a("a"),L$o=o("DeiTForImageClassification"),B$o=o(" or "),iN=a("a"),x$o=o("DeiTForImageClassificationWithTeacher"),k$o=o(" (DeiT model)"),R$o=l(),QT=a("li"),Qle=a("strong"),S$o=o("imagegpt"),P$o=o(" \u2014 "),dN=a("a"),$$o=o("ImageGPTForImageClassification"),I$o=o(" (ImageGPT model)"),j$o=l(),fa=a("li"),Hle=a("strong"),D$o=o("perceiver"),N$o=o(" \u2014 "),cN=a("a"),q$o=o("PerceiverForImageClassificationLearned"),O$o=o(" or "),mN=a("a"),G$o=o("PerceiverForImageClassificationFourier"),X$o=o(" or "),fN=a("a"),V$o=o("PerceiverForImageClassificationConvProcessing"),z$o=o(" (Perceiver model)"),W$o=l(),HT=a("li"),Ule=a("strong"),Q$o=o("poolformer"),H$o=o(" \u2014 "),gN=a("a"),U$o=o("PoolFormerForImageClassification"),J$o=o(" (PoolFormer model)"),Y$o=l(),UT=a("li"),Jle=a("strong"),K$o=o("segformer"),Z$o=o(" \u2014 "),hN=a("a"),eIo=o("SegformerForImageClassification"),oIo=o(" (SegFormer model)"),rIo=l(),JT=a("li"),Yle=a("strong"),tIo=o("swin"),aIo=o(" \u2014 "),uN=a("a"),sIo=o("SwinForImageClassification"),nIo=o(" (Swin model)"),lIo=l(),YT=a("li"),Kle=a("strong"),iIo=o("vit"),dIo=o(" \u2014 "),pN=a("a"),cIo=o("ViTForImageClassification"),mIo=o(" (ViT model)"),fIo=l(),KT=a("p"),gIo=o("The model is set in evaluation mode by default using "),Zle=a("code"),hIo=o("model.eval()"),uIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=a("code"),pIo=o("model.train()"),_Io=l(),oie=a("p"),bIo=o("Examples:"),vIo=l(),m(o6.$$.fragment),Nxe=l(),Sd=a("h2"),ZT=a("a"),rie=a("span"),m(r6.$$.fragment),TIo=l(),tie=a("span"),FIo=o("AutoModelForVision2Seq"),qxe=l(),ir=a("div"),m(t6.$$.fragment),CIo=l(),Pd=a("p"),MIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aie=a("code"),EIo=o("from_pretrained()"),yIo=o("class method or the "),sie=a("code"),wIo=o("from_config()"),AIo=o(`class
method.`),LIo=l(),a6=a("p"),BIo=o("This class cannot be instantiated directly using "),nie=a("code"),xIo=o("__init__()"),kIo=o(" (throws an error)."),RIo=l(),rt=a("div"),m(s6.$$.fragment),SIo=l(),lie=a("p"),PIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Io=l(),$d=a("p"),IIo=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),jIo=o("not"),DIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),die=a("code"),NIo=o("from_pretrained()"),qIo=o("to load the model weights."),OIo=l(),cie=a("p"),GIo=o("Examples:"),XIo=l(),m(n6.$$.fragment),VIo=l(),Ue=a("div"),m(l6.$$.fragment),zIo=l(),mie=a("p"),WIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QIo=l(),rs=a("p"),HIo=o("The model class to instantiate is selected based on the "),fie=a("code"),UIo=o("model_type"),JIo=o(` property of the config object (either
passed as an argument or loaded from `),gie=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=a("code"),ZIo=o("pretrained_model_name_or_path"),ejo=o(":"),ojo=l(),uie=a("ul"),e1=a("li"),pie=a("strong"),rjo=o("vision-encoder-decoder"),tjo=o(" \u2014 "),_N=a("a"),ajo=o("VisionEncoderDecoderModel"),sjo=o(" (Vision Encoder decoder model)"),njo=l(),o1=a("p"),ljo=o("The model is set in evaluation mode by default using "),_ie=a("code"),ijo=o("model.eval()"),djo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),cjo=o("model.train()"),mjo=l(),vie=a("p"),fjo=o("Examples:"),gjo=l(),m(i6.$$.fragment),Oxe=l(),Id=a("h2"),r1=a("a"),Tie=a("span"),m(d6.$$.fragment),hjo=l(),Fie=a("span"),ujo=o("AutoModelForAudioClassification"),Gxe=l(),dr=a("div"),m(c6.$$.fragment),pjo=l(),jd=a("p"),_jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cie=a("code"),bjo=o("from_pretrained()"),vjo=o("class method or the "),Mie=a("code"),Tjo=o("from_config()"),Fjo=o(`class
method.`),Cjo=l(),m6=a("p"),Mjo=o("This class cannot be instantiated directly using "),Eie=a("code"),Ejo=o("__init__()"),yjo=o(" (throws an error)."),wjo=l(),tt=a("div"),m(f6.$$.fragment),Ajo=l(),yie=a("p"),Ljo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bjo=l(),Dd=a("p"),xjo=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),kjo=o("not"),Rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=a("code"),Sjo=o("from_pretrained()"),Pjo=o("to load the model weights."),$jo=l(),Lie=a("p"),Ijo=o("Examples:"),jjo=l(),m(g6.$$.fragment),Djo=l(),Je=a("div"),m(h6.$$.fragment),Njo=l(),Bie=a("p"),qjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ojo=l(),ts=a("p"),Gjo=o("The model class to instantiate is selected based on the "),xie=a("code"),Xjo=o("model_type"),Vjo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),zjo=o("pretrained_model_name_or_path"),Wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),Qjo=o("pretrained_model_name_or_path"),Hjo=o(":"),Ujo=l(),xe=a("ul"),t1=a("li"),Sie=a("strong"),Jjo=o("data2vec-audio"),Yjo=o(" \u2014 "),bN=a("a"),Kjo=o("Data2VecAudioForSequenceClassification"),Zjo=o(" (Data2VecAudio model)"),eDo=l(),a1=a("li"),Pie=a("strong"),oDo=o("hubert"),rDo=o(" \u2014 "),vN=a("a"),tDo=o("HubertForSequenceClassification"),aDo=o(" (Hubert model)"),sDo=l(),s1=a("li"),$ie=a("strong"),nDo=o("sew"),lDo=o(" \u2014 "),TN=a("a"),iDo=o("SEWForSequenceClassification"),dDo=o(" (SEW model)"),cDo=l(),n1=a("li"),Iie=a("strong"),mDo=o("sew-d"),fDo=o(" \u2014 "),FN=a("a"),gDo=o("SEWDForSequenceClassification"),hDo=o(" (SEW-D model)"),uDo=l(),l1=a("li"),jie=a("strong"),pDo=o("unispeech"),_Do=o(" \u2014 "),CN=a("a"),bDo=o("UniSpeechForSequenceClassification"),vDo=o(" (UniSpeech model)"),TDo=l(),i1=a("li"),Die=a("strong"),FDo=o("unispeech-sat"),CDo=o(" \u2014 "),MN=a("a"),MDo=o("UniSpeechSatForSequenceClassification"),EDo=o(" (UniSpeechSat model)"),yDo=l(),d1=a("li"),Nie=a("strong"),wDo=o("wav2vec2"),ADo=o(" \u2014 "),EN=a("a"),LDo=o("Wav2Vec2ForSequenceClassification"),BDo=o(" (Wav2Vec2 model)"),xDo=l(),c1=a("li"),qie=a("strong"),kDo=o("wavlm"),RDo=o(" \u2014 "),yN=a("a"),SDo=o("WavLMForSequenceClassification"),PDo=o(" (WavLM model)"),$Do=l(),m1=a("p"),IDo=o("The model is set in evaluation mode by default using "),Oie=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),NDo=o("model.train()"),qDo=l(),Xie=a("p"),ODo=o("Examples:"),GDo=l(),m(u6.$$.fragment),Xxe=l(),Nd=a("h2"),f1=a("a"),Vie=a("span"),m(p6.$$.fragment),XDo=l(),zie=a("span"),VDo=o("AutoModelForAudioFrameClassification"),Vxe=l(),cr=a("div"),m(_6.$$.fragment),zDo=l(),qd=a("p"),WDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wie=a("code"),QDo=o("from_pretrained()"),HDo=o("class method or the "),Qie=a("code"),UDo=o("from_config()"),JDo=o(`class
method.`),YDo=l(),b6=a("p"),KDo=o("This class cannot be instantiated directly using "),Hie=a("code"),ZDo=o("__init__()"),eNo=o(" (throws an error)."),oNo=l(),at=a("div"),m(v6.$$.fragment),rNo=l(),Uie=a("p"),tNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),aNo=l(),Od=a("p"),sNo=o(`Note:
Loading a model from its configuration file does `),Jie=a("strong"),nNo=o("not"),lNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=a("code"),iNo=o("from_pretrained()"),dNo=o("to load the model weights."),cNo=l(),Kie=a("p"),mNo=o("Examples:"),fNo=l(),m(T6.$$.fragment),gNo=l(),Ye=a("div"),m(F6.$$.fragment),hNo=l(),Zie=a("p"),uNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pNo=l(),as=a("p"),_No=o("The model class to instantiate is selected based on the "),ede=a("code"),bNo=o("model_type"),vNo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),TNo=o("pretrained_model_name_or_path"),FNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),CNo=o("pretrained_model_name_or_path"),MNo=o(":"),ENo=l(),ss=a("ul"),g1=a("li"),tde=a("strong"),yNo=o("data2vec-audio"),wNo=o(" \u2014 "),wN=a("a"),ANo=o("Data2VecAudioForAudioFrameClassification"),LNo=o(" (Data2VecAudio model)"),BNo=l(),h1=a("li"),ade=a("strong"),xNo=o("unispeech-sat"),kNo=o(" \u2014 "),AN=a("a"),RNo=o("UniSpeechSatForAudioFrameClassification"),SNo=o(" (UniSpeechSat model)"),PNo=l(),u1=a("li"),sde=a("strong"),$No=o("wav2vec2"),INo=o(" \u2014 "),LN=a("a"),jNo=o("Wav2Vec2ForAudioFrameClassification"),DNo=o(" (Wav2Vec2 model)"),NNo=l(),p1=a("li"),nde=a("strong"),qNo=o("wavlm"),ONo=o(" \u2014 "),BN=a("a"),GNo=o("WavLMForAudioFrameClassification"),XNo=o(" (WavLM model)"),VNo=l(),_1=a("p"),zNo=o("The model is set in evaluation mode by default using "),lde=a("code"),WNo=o("model.eval()"),QNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),HNo=o("model.train()"),UNo=l(),dde=a("p"),JNo=o("Examples:"),YNo=l(),m(C6.$$.fragment),zxe=l(),Gd=a("h2"),b1=a("a"),cde=a("span"),m(M6.$$.fragment),KNo=l(),mde=a("span"),ZNo=o("AutoModelForCTC"),Wxe=l(),mr=a("div"),m(E6.$$.fragment),eqo=l(),Xd=a("p"),oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fde=a("code"),rqo=o("from_pretrained()"),tqo=o("class method or the "),gde=a("code"),aqo=o("from_config()"),sqo=o(`class
method.`),nqo=l(),y6=a("p"),lqo=o("This class cannot be instantiated directly using "),hde=a("code"),iqo=o("__init__()"),dqo=o(" (throws an error)."),cqo=l(),st=a("div"),m(w6.$$.fragment),mqo=l(),ude=a("p"),fqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gqo=l(),Vd=a("p"),hqo=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),uqo=o("not"),pqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=a("code"),_qo=o("from_pretrained()"),bqo=o("to load the model weights."),vqo=l(),bde=a("p"),Tqo=o("Examples:"),Fqo=l(),m(A6.$$.fragment),Cqo=l(),Ke=a("div"),m(L6.$$.fragment),Mqo=l(),vde=a("p"),Eqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yqo=l(),ns=a("p"),wqo=o("The model class to instantiate is selected based on the "),Tde=a("code"),Aqo=o("model_type"),Lqo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),Bqo=o("pretrained_model_name_or_path"),xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),kqo=o("pretrained_model_name_or_path"),Rqo=o(":"),Sqo=l(),ke=a("ul"),v1=a("li"),Mde=a("strong"),Pqo=o("data2vec-audio"),$qo=o(" \u2014 "),xN=a("a"),Iqo=o("Data2VecAudioForCTC"),jqo=o(" (Data2VecAudio model)"),Dqo=l(),T1=a("li"),Ede=a("strong"),Nqo=o("hubert"),qqo=o(" \u2014 "),kN=a("a"),Oqo=o("HubertForCTC"),Gqo=o(" (Hubert model)"),Xqo=l(),F1=a("li"),yde=a("strong"),Vqo=o("sew"),zqo=o(" \u2014 "),RN=a("a"),Wqo=o("SEWForCTC"),Qqo=o(" (SEW model)"),Hqo=l(),C1=a("li"),wde=a("strong"),Uqo=o("sew-d"),Jqo=o(" \u2014 "),SN=a("a"),Yqo=o("SEWDForCTC"),Kqo=o(" (SEW-D model)"),Zqo=l(),M1=a("li"),Ade=a("strong"),eOo=o("unispeech"),oOo=o(" \u2014 "),PN=a("a"),rOo=o("UniSpeechForCTC"),tOo=o(" (UniSpeech model)"),aOo=l(),E1=a("li"),Lde=a("strong"),sOo=o("unispeech-sat"),nOo=o(" \u2014 "),$N=a("a"),lOo=o("UniSpeechSatForCTC"),iOo=o(" (UniSpeechSat model)"),dOo=l(),y1=a("li"),Bde=a("strong"),cOo=o("wav2vec2"),mOo=o(" \u2014 "),IN=a("a"),fOo=o("Wav2Vec2ForCTC"),gOo=o(" (Wav2Vec2 model)"),hOo=l(),w1=a("li"),xde=a("strong"),uOo=o("wavlm"),pOo=o(" \u2014 "),jN=a("a"),_Oo=o("WavLMForCTC"),bOo=o(" (WavLM model)"),vOo=l(),A1=a("p"),TOo=o("The model is set in evaluation mode by default using "),kde=a("code"),FOo=o("model.eval()"),COo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),MOo=o("model.train()"),EOo=l(),Sde=a("p"),yOo=o("Examples:"),wOo=l(),m(B6.$$.fragment),Qxe=l(),zd=a("h2"),L1=a("a"),Pde=a("span"),m(x6.$$.fragment),AOo=l(),$de=a("span"),LOo=o("AutoModelForSpeechSeq2Seq"),Hxe=l(),fr=a("div"),m(k6.$$.fragment),BOo=l(),Wd=a("p"),xOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ide=a("code"),kOo=o("from_pretrained()"),ROo=o("class method or the "),jde=a("code"),SOo=o("from_config()"),POo=o(`class
method.`),$Oo=l(),R6=a("p"),IOo=o("This class cannot be instantiated directly using "),Dde=a("code"),jOo=o("__init__()"),DOo=o(" (throws an error)."),NOo=l(),nt=a("div"),m(S6.$$.fragment),qOo=l(),Nde=a("p"),OOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GOo=l(),Qd=a("p"),XOo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),VOo=o("not"),zOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ode=a("code"),WOo=o("from_pretrained()"),QOo=o("to load the model weights."),HOo=l(),Gde=a("p"),UOo=o("Examples:"),JOo=l(),m(P6.$$.fragment),YOo=l(),Ze=a("div"),m($6.$$.fragment),KOo=l(),Xde=a("p"),ZOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eGo=l(),ls=a("p"),oGo=o("The model class to instantiate is selected based on the "),Vde=a("code"),rGo=o("model_type"),tGo=o(` property of the config object (either
passed as an argument or loaded from `),zde=a("code"),aGo=o("pretrained_model_name_or_path"),sGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=a("code"),nGo=o("pretrained_model_name_or_path"),lGo=o(":"),iGo=l(),I6=a("ul"),B1=a("li"),Qde=a("strong"),dGo=o("speech-encoder-decoder"),cGo=o(" \u2014 "),DN=a("a"),mGo=o("SpeechEncoderDecoderModel"),fGo=o(" (Speech Encoder decoder model)"),gGo=l(),x1=a("li"),Hde=a("strong"),hGo=o("speech_to_text"),uGo=o(" \u2014 "),NN=a("a"),pGo=o("Speech2TextForConditionalGeneration"),_Go=o(" (Speech2Text model)"),bGo=l(),k1=a("p"),vGo=o("The model is set in evaluation mode by default using "),Ude=a("code"),TGo=o("model.eval()"),FGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),CGo=o("model.train()"),MGo=l(),Yde=a("p"),EGo=o("Examples:"),yGo=l(),m(j6.$$.fragment),Uxe=l(),Hd=a("h2"),R1=a("a"),Kde=a("span"),m(D6.$$.fragment),wGo=l(),Zde=a("span"),AGo=o("AutoModelForAudioXVector"),Jxe=l(),gr=a("div"),m(N6.$$.fragment),LGo=l(),Ud=a("p"),BGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ece=a("code"),xGo=o("from_pretrained()"),kGo=o("class method or the "),oce=a("code"),RGo=o("from_config()"),SGo=o(`class
method.`),PGo=l(),q6=a("p"),$Go=o("This class cannot be instantiated directly using "),rce=a("code"),IGo=o("__init__()"),jGo=o(" (throws an error)."),DGo=l(),lt=a("div"),m(O6.$$.fragment),NGo=l(),tce=a("p"),qGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),OGo=l(),Jd=a("p"),GGo=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),XGo=o("not"),VGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sce=a("code"),zGo=o("from_pretrained()"),WGo=o("to load the model weights."),QGo=l(),nce=a("p"),HGo=o("Examples:"),UGo=l(),m(G6.$$.fragment),JGo=l(),eo=a("div"),m(X6.$$.fragment),YGo=l(),lce=a("p"),KGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ZGo=l(),is=a("p"),eXo=o("The model class to instantiate is selected based on the "),ice=a("code"),oXo=o("model_type"),rXo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),tXo=o("pretrained_model_name_or_path"),aXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),sXo=o("pretrained_model_name_or_path"),nXo=o(":"),lXo=l(),ds=a("ul"),S1=a("li"),mce=a("strong"),iXo=o("data2vec-audio"),dXo=o(" \u2014 "),qN=a("a"),cXo=o("Data2VecAudioForXVector"),mXo=o(" (Data2VecAudio model)"),fXo=l(),P1=a("li"),fce=a("strong"),gXo=o("unispeech-sat"),hXo=o(" \u2014 "),ON=a("a"),uXo=o("UniSpeechSatForXVector"),pXo=o(" (UniSpeechSat model)"),_Xo=l(),$1=a("li"),gce=a("strong"),bXo=o("wav2vec2"),vXo=o(" \u2014 "),GN=a("a"),TXo=o("Wav2Vec2ForXVector"),FXo=o(" (Wav2Vec2 model)"),CXo=l(),I1=a("li"),hce=a("strong"),MXo=o("wavlm"),EXo=o(" \u2014 "),XN=a("a"),yXo=o("WavLMForXVector"),wXo=o(" (WavLM model)"),AXo=l(),j1=a("p"),LXo=o("The model is set in evaluation mode by default using "),uce=a("code"),BXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),kXo=o("model.train()"),RXo=l(),_ce=a("p"),SXo=o("Examples:"),PXo=l(),m(V6.$$.fragment),Yxe=l(),Yd=a("h2"),D1=a("a"),bce=a("span"),m(z6.$$.fragment),$Xo=l(),vce=a("span"),IXo=o("AutoModelForMaskedImageModeling"),Kxe=l(),hr=a("div"),m(W6.$$.fragment),jXo=l(),Kd=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tce=a("code"),NXo=o("from_pretrained()"),qXo=o("class method or the "),Fce=a("code"),OXo=o("from_config()"),GXo=o(`class
method.`),XXo=l(),Q6=a("p"),VXo=o("This class cannot be instantiated directly using "),Cce=a("code"),zXo=o("__init__()"),WXo=o(" (throws an error)."),QXo=l(),it=a("div"),m(H6.$$.fragment),HXo=l(),Mce=a("p"),UXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),JXo=l(),Zd=a("p"),YXo=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),KXo=o("not"),ZXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=a("code"),eVo=o("from_pretrained()"),oVo=o("to load the model weights."),rVo=l(),wce=a("p"),tVo=o("Examples:"),aVo=l(),m(U6.$$.fragment),sVo=l(),oo=a("div"),m(J6.$$.fragment),nVo=l(),Ace=a("p"),lVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iVo=l(),cs=a("p"),dVo=o("The model class to instantiate is selected based on the "),Lce=a("code"),cVo=o("model_type"),mVo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),fVo=o("pretrained_model_name_or_path"),gVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),hVo=o("pretrained_model_name_or_path"),uVo=o(":"),pVo=l(),ec=a("ul"),N1=a("li"),kce=a("strong"),_Vo=o("deit"),bVo=o(" \u2014 "),VN=a("a"),vVo=o("DeiTForMaskedImageModeling"),TVo=o(" (DeiT model)"),FVo=l(),q1=a("li"),Rce=a("strong"),CVo=o("swin"),MVo=o(" \u2014 "),zN=a("a"),EVo=o("SwinForMaskedImageModeling"),yVo=o(" (Swin model)"),wVo=l(),O1=a("li"),Sce=a("strong"),AVo=o("vit"),LVo=o(" \u2014 "),WN=a("a"),BVo=o("ViTForMaskedImageModeling"),xVo=o(" (ViT model)"),kVo=l(),G1=a("p"),RVo=o("The model is set in evaluation mode by default using "),Pce=a("code"),SVo=o("model.eval()"),PVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),$Vo=o("model.train()"),IVo=l(),Ice=a("p"),jVo=o("Examples:"),DVo=l(),m(Y6.$$.fragment),Zxe=l(),oc=a("h2"),X1=a("a"),jce=a("span"),m(K6.$$.fragment),NVo=l(),Dce=a("span"),qVo=o("AutoModelForObjectDetection"),eke=l(),ur=a("div"),m(Z6.$$.fragment),OVo=l(),rc=a("p"),GVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nce=a("code"),XVo=o("from_pretrained()"),VVo=o("class method or the "),qce=a("code"),zVo=o("from_config()"),WVo=o(`class
method.`),QVo=l(),eA=a("p"),HVo=o("This class cannot be instantiated directly using "),Oce=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),dt=a("div"),m(oA.$$.fragment),KVo=l(),Gce=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ezo=l(),tc=a("p"),ozo=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),rzo=o("not"),tzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=a("code"),azo=o("from_pretrained()"),szo=o("to load the model weights."),nzo=l(),zce=a("p"),lzo=o("Examples:"),izo=l(),m(rA.$$.fragment),dzo=l(),ro=a("div"),m(tA.$$.fragment),czo=l(),Wce=a("p"),mzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fzo=l(),ms=a("p"),gzo=o("The model class to instantiate is selected based on the "),Qce=a("code"),hzo=o("model_type"),uzo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),pzo=o("pretrained_model_name_or_path"),_zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),bzo=o("pretrained_model_name_or_path"),vzo=o(":"),Tzo=l(),Jce=a("ul"),V1=a("li"),Yce=a("strong"),Fzo=o("detr"),Czo=o(" \u2014 "),QN=a("a"),Mzo=o("DetrForObjectDetection"),Ezo=o(" (DETR model)"),yzo=l(),z1=a("p"),wzo=o("The model is set in evaluation mode by default using "),Kce=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),Bzo=o("model.train()"),xzo=l(),eme=a("p"),kzo=o("Examples:"),Rzo=l(),m(aA.$$.fragment),oke=l(),ac=a("h2"),W1=a("a"),ome=a("span"),m(sA.$$.fragment),Szo=l(),rme=a("span"),Pzo=o("AutoModelForImageSegmentation"),rke=l(),pr=a("div"),m(nA.$$.fragment),$zo=l(),sc=a("p"),Izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tme=a("code"),jzo=o("from_pretrained()"),Dzo=o("class method or the "),ame=a("code"),Nzo=o("from_config()"),qzo=o(`class
method.`),Ozo=l(),lA=a("p"),Gzo=o("This class cannot be instantiated directly using "),sme=a("code"),Xzo=o("__init__()"),Vzo=o(" (throws an error)."),zzo=l(),ct=a("div"),m(iA.$$.fragment),Wzo=l(),nme=a("p"),Qzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hzo=l(),nc=a("p"),Uzo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),Jzo=o("not"),Yzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=a("code"),Kzo=o("from_pretrained()"),Zzo=o("to load the model weights."),eWo=l(),dme=a("p"),oWo=o("Examples:"),rWo=l(),m(dA.$$.fragment),tWo=l(),to=a("div"),m(cA.$$.fragment),aWo=l(),cme=a("p"),sWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nWo=l(),fs=a("p"),lWo=o("The model class to instantiate is selected based on the "),mme=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),cWo=o("pretrained_model_name_or_path"),mWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),fWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),hme=a("ul"),Q1=a("li"),ume=a("strong"),uWo=o("detr"),pWo=o(" \u2014 "),HN=a("a"),_Wo=o("DetrForSegmentation"),bWo=o(" (DETR model)"),vWo=l(),H1=a("p"),TWo=o("The model is set in evaluation mode by default using "),pme=a("code"),FWo=o("model.eval()"),CWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),MWo=o("model.train()"),EWo=l(),bme=a("p"),yWo=o("Examples:"),wWo=l(),m(mA.$$.fragment),tke=l(),lc=a("h2"),U1=a("a"),vme=a("span"),m(fA.$$.fragment),AWo=l(),Tme=a("span"),LWo=o("AutoModelForSemanticSegmentation"),ake=l(),_r=a("div"),m(gA.$$.fragment),BWo=l(),ic=a("p"),xWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fme=a("code"),kWo=o("from_pretrained()"),RWo=o("class method or the "),Cme=a("code"),SWo=o("from_config()"),PWo=o(`class
method.`),$Wo=l(),hA=a("p"),IWo=o("This class cannot be instantiated directly using "),Mme=a("code"),jWo=o("__init__()"),DWo=o(" (throws an error)."),NWo=l(),mt=a("div"),m(uA.$$.fragment),qWo=l(),Eme=a("p"),OWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GWo=l(),dc=a("p"),XWo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),VWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wme=a("code"),WWo=o("from_pretrained()"),QWo=o("to load the model weights."),HWo=l(),Ame=a("p"),UWo=o("Examples:"),JWo=l(),m(pA.$$.fragment),YWo=l(),ao=a("div"),m(_A.$$.fragment),KWo=l(),Lme=a("p"),ZWo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eQo=l(),gs=a("p"),oQo=o("The model class to instantiate is selected based on the "),Bme=a("code"),rQo=o("model_type"),tQo=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),aQo=o("pretrained_model_name_or_path"),sQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),nQo=o("pretrained_model_name_or_path"),lQo=o(":"),iQo=l(),bA=a("ul"),J1=a("li"),Rme=a("strong"),dQo=o("beit"),cQo=o(" \u2014 "),UN=a("a"),mQo=o("BeitForSemanticSegmentation"),fQo=o(" (BEiT model)"),gQo=l(),Y1=a("li"),Sme=a("strong"),hQo=o("segformer"),uQo=o(" \u2014 "),JN=a("a"),pQo=o("SegformerForSemanticSegmentation"),_Qo=o(" (SegFormer model)"),bQo=l(),K1=a("p"),vQo=o("The model is set in evaluation mode by default using "),Pme=a("code"),TQo=o("model.eval()"),FQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=a("code"),CQo=o("model.train()"),MQo=l(),Ime=a("p"),EQo=o("Examples:"),yQo=l(),m(vA.$$.fragment),ske=l(),cc=a("h2"),Z1=a("a"),jme=a("span"),m(TA.$$.fragment),wQo=l(),Dme=a("span"),AQo=o("AutoModelForInstanceSegmentation"),nke=l(),br=a("div"),m(FA.$$.fragment),LQo=l(),mc=a("p"),BQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Nme=a("code"),xQo=o("from_pretrained()"),kQo=o("class method or the "),qme=a("code"),RQo=o("from_config()"),SQo=o(`class
method.`),PQo=l(),CA=a("p"),$Qo=o("This class cannot be instantiated directly using "),Ome=a("code"),IQo=o("__init__()"),jQo=o(" (throws an error)."),DQo=l(),ft=a("div"),m(MA.$$.fragment),NQo=l(),Gme=a("p"),qQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OQo=l(),fc=a("p"),GQo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),XQo=o("not"),VQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vme=a("code"),zQo=o("from_pretrained()"),WQo=o("to load the model weights."),QQo=l(),zme=a("p"),HQo=o("Examples:"),UQo=l(),m(EA.$$.fragment),JQo=l(),so=a("div"),m(yA.$$.fragment),YQo=l(),Wme=a("p"),KQo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ZQo=l(),hs=a("p"),eHo=o("The model class to instantiate is selected based on the "),Qme=a("code"),oHo=o("model_type"),rHo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),tHo=o("pretrained_model_name_or_path"),aHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),sHo=o("pretrained_model_name_or_path"),nHo=o(":"),lHo=l(),Jme=a("ul"),eF=a("li"),Yme=a("strong"),iHo=o("maskformer"),dHo=o(" \u2014 "),YN=a("a"),cHo=o("MaskFormerForInstanceSegmentation"),mHo=o(" (MaskFormer model)"),fHo=l(),oF=a("p"),gHo=o("The model is set in evaluation mode by default using "),Kme=a("code"),hHo=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),pHo=o("model.train()"),_Ho=l(),efe=a("p"),bHo=o("Examples:"),vHo=l(),m(wA.$$.fragment),lke=l(),gc=a("h2"),rF=a("a"),ofe=a("span"),m(AA.$$.fragment),THo=l(),rfe=a("span"),FHo=o("TFAutoModel"),ike=l(),vr=a("div"),m(LA.$$.fragment),CHo=l(),hc=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tfe=a("code"),EHo=o("from_pretrained()"),yHo=o("class method or the "),afe=a("code"),wHo=o("from_config()"),AHo=o(`class
method.`),LHo=l(),BA=a("p"),BHo=o("This class cannot be instantiated directly using "),sfe=a("code"),xHo=o("__init__()"),kHo=o(" (throws an error)."),RHo=l(),gt=a("div"),m(xA.$$.fragment),SHo=l(),nfe=a("p"),PHo=o("Instantiates one of the base model classes of the library from a configuration."),$Ho=l(),uc=a("p"),IHo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),jHo=o("not"),DHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=a("code"),NHo=o("from_pretrained()"),qHo=o("to load the model weights."),OHo=l(),dfe=a("p"),GHo=o("Examples:"),XHo=l(),m(kA.$$.fragment),VHo=l(),ho=a("div"),m(RA.$$.fragment),zHo=l(),cfe=a("p"),WHo=o("Instantiate one of the base model classes of the library from a pretrained model."),QHo=l(),us=a("p"),HHo=o("The model class to instantiate is selected based on the "),mfe=a("code"),UHo=o("model_type"),JHo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),YHo=o("pretrained_model_name_or_path"),KHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),ZHo=o("pretrained_model_name_or_path"),eUo=o(":"),oUo=l(),B=a("ul"),tF=a("li"),hfe=a("strong"),rUo=o("albert"),tUo=o(" \u2014 "),KN=a("a"),aUo=o("TFAlbertModel"),sUo=o(" (ALBERT model)"),nUo=l(),aF=a("li"),ufe=a("strong"),lUo=o("bart"),iUo=o(" \u2014 "),ZN=a("a"),dUo=o("TFBartModel"),cUo=o(" (BART model)"),mUo=l(),sF=a("li"),pfe=a("strong"),fUo=o("bert"),gUo=o(" \u2014 "),eq=a("a"),hUo=o("TFBertModel"),uUo=o(" (BERT model)"),pUo=l(),nF=a("li"),_fe=a("strong"),_Uo=o("blenderbot"),bUo=o(" \u2014 "),oq=a("a"),vUo=o("TFBlenderbotModel"),TUo=o(" (Blenderbot model)"),FUo=l(),lF=a("li"),bfe=a("strong"),CUo=o("blenderbot-small"),MUo=o(" \u2014 "),rq=a("a"),EUo=o("TFBlenderbotSmallModel"),yUo=o(" (BlenderbotSmall model)"),wUo=l(),iF=a("li"),vfe=a("strong"),AUo=o("camembert"),LUo=o(" \u2014 "),tq=a("a"),BUo=o("TFCamembertModel"),xUo=o(" (CamemBERT model)"),kUo=l(),dF=a("li"),Tfe=a("strong"),RUo=o("clip"),SUo=o(" \u2014 "),aq=a("a"),PUo=o("TFCLIPModel"),$Uo=o(" (CLIP model)"),IUo=l(),cF=a("li"),Ffe=a("strong"),jUo=o("convbert"),DUo=o(" \u2014 "),sq=a("a"),NUo=o("TFConvBertModel"),qUo=o(" (ConvBERT model)"),OUo=l(),mF=a("li"),Cfe=a("strong"),GUo=o("convnext"),XUo=o(" \u2014 "),nq=a("a"),VUo=o("TFConvNextModel"),zUo=o(" (ConvNext model)"),WUo=l(),fF=a("li"),Mfe=a("strong"),QUo=o("ctrl"),HUo=o(" \u2014 "),lq=a("a"),UUo=o("TFCTRLModel"),JUo=o(" (CTRL model)"),YUo=l(),gF=a("li"),Efe=a("strong"),KUo=o("deberta"),ZUo=o(" \u2014 "),iq=a("a"),eJo=o("TFDebertaModel"),oJo=o(" (DeBERTa model)"),rJo=l(),hF=a("li"),yfe=a("strong"),tJo=o("deberta-v2"),aJo=o(" \u2014 "),dq=a("a"),sJo=o("TFDebertaV2Model"),nJo=o(" (DeBERTa-v2 model)"),lJo=l(),uF=a("li"),wfe=a("strong"),iJo=o("distilbert"),dJo=o(" \u2014 "),cq=a("a"),cJo=o("TFDistilBertModel"),mJo=o(" (DistilBERT model)"),fJo=l(),pF=a("li"),Afe=a("strong"),gJo=o("dpr"),hJo=o(" \u2014 "),mq=a("a"),uJo=o("TFDPRQuestionEncoder"),pJo=o(" (DPR model)"),_Jo=l(),_F=a("li"),Lfe=a("strong"),bJo=o("electra"),vJo=o(" \u2014 "),fq=a("a"),TJo=o("TFElectraModel"),FJo=o(" (ELECTRA model)"),CJo=l(),bF=a("li"),Bfe=a("strong"),MJo=o("flaubert"),EJo=o(" \u2014 "),gq=a("a"),yJo=o("TFFlaubertModel"),wJo=o(" (FlauBERT model)"),AJo=l(),On=a("li"),xfe=a("strong"),LJo=o("funnel"),BJo=o(" \u2014 "),hq=a("a"),xJo=o("TFFunnelModel"),kJo=o(" or "),uq=a("a"),RJo=o("TFFunnelBaseModel"),SJo=o(" (Funnel Transformer model)"),PJo=l(),vF=a("li"),kfe=a("strong"),$Jo=o("gpt2"),IJo=o(" \u2014 "),pq=a("a"),jJo=o("TFGPT2Model"),DJo=o(" (OpenAI GPT-2 model)"),NJo=l(),TF=a("li"),Rfe=a("strong"),qJo=o("hubert"),OJo=o(" \u2014 "),_q=a("a"),GJo=o("TFHubertModel"),XJo=o(" (Hubert model)"),VJo=l(),FF=a("li"),Sfe=a("strong"),zJo=o("layoutlm"),WJo=o(" \u2014 "),bq=a("a"),QJo=o("TFLayoutLMModel"),HJo=o(" (LayoutLM model)"),UJo=l(),CF=a("li"),Pfe=a("strong"),JJo=o("led"),YJo=o(" \u2014 "),vq=a("a"),KJo=o("TFLEDModel"),ZJo=o(" (LED model)"),eYo=l(),MF=a("li"),$fe=a("strong"),oYo=o("longformer"),rYo=o(" \u2014 "),Tq=a("a"),tYo=o("TFLongformerModel"),aYo=o(" (Longformer model)"),sYo=l(),EF=a("li"),Ife=a("strong"),nYo=o("lxmert"),lYo=o(" \u2014 "),Fq=a("a"),iYo=o("TFLxmertModel"),dYo=o(" (LXMERT model)"),cYo=l(),yF=a("li"),jfe=a("strong"),mYo=o("marian"),fYo=o(" \u2014 "),Cq=a("a"),gYo=o("TFMarianModel"),hYo=o(" (Marian model)"),uYo=l(),wF=a("li"),Dfe=a("strong"),pYo=o("mbart"),_Yo=o(" \u2014 "),Mq=a("a"),bYo=o("TFMBartModel"),vYo=o(" (mBART model)"),TYo=l(),AF=a("li"),Nfe=a("strong"),FYo=o("mobilebert"),CYo=o(" \u2014 "),Eq=a("a"),MYo=o("TFMobileBertModel"),EYo=o(" (MobileBERT model)"),yYo=l(),LF=a("li"),qfe=a("strong"),wYo=o("mpnet"),AYo=o(" \u2014 "),yq=a("a"),LYo=o("TFMPNetModel"),BYo=o(" (MPNet model)"),xYo=l(),BF=a("li"),Ofe=a("strong"),kYo=o("mt5"),RYo=o(" \u2014 "),wq=a("a"),SYo=o("TFMT5Model"),PYo=o(" (mT5 model)"),$Yo=l(),xF=a("li"),Gfe=a("strong"),IYo=o("openai-gpt"),jYo=o(" \u2014 "),Aq=a("a"),DYo=o("TFOpenAIGPTModel"),NYo=o(" (OpenAI GPT model)"),qYo=l(),kF=a("li"),Xfe=a("strong"),OYo=o("pegasus"),GYo=o(" \u2014 "),Lq=a("a"),XYo=o("TFPegasusModel"),VYo=o(" (Pegasus model)"),zYo=l(),RF=a("li"),Vfe=a("strong"),WYo=o("rembert"),QYo=o(" \u2014 "),Bq=a("a"),HYo=o("TFRemBertModel"),UYo=o(" (RemBERT model)"),JYo=l(),SF=a("li"),zfe=a("strong"),YYo=o("roberta"),KYo=o(" \u2014 "),xq=a("a"),ZYo=o("TFRobertaModel"),eKo=o(" (RoBERTa model)"),oKo=l(),PF=a("li"),Wfe=a("strong"),rKo=o("roformer"),tKo=o(" \u2014 "),kq=a("a"),aKo=o("TFRoFormerModel"),sKo=o(" (RoFormer model)"),nKo=l(),$F=a("li"),Qfe=a("strong"),lKo=o("speech_to_text"),iKo=o(" \u2014 "),Rq=a("a"),dKo=o("TFSpeech2TextModel"),cKo=o(" (Speech2Text model)"),mKo=l(),IF=a("li"),Hfe=a("strong"),fKo=o("t5"),gKo=o(" \u2014 "),Sq=a("a"),hKo=o("TFT5Model"),uKo=o(" (T5 model)"),pKo=l(),jF=a("li"),Ufe=a("strong"),_Ko=o("tapas"),bKo=o(" \u2014 "),Pq=a("a"),vKo=o("TFTapasModel"),TKo=o(" (TAPAS model)"),FKo=l(),DF=a("li"),Jfe=a("strong"),CKo=o("transfo-xl"),MKo=o(" \u2014 "),$q=a("a"),EKo=o("TFTransfoXLModel"),yKo=o(" (Transformer-XL model)"),wKo=l(),NF=a("li"),Yfe=a("strong"),AKo=o("vit"),LKo=o(" \u2014 "),Iq=a("a"),BKo=o("TFViTModel"),xKo=o(" (ViT model)"),kKo=l(),qF=a("li"),Kfe=a("strong"),RKo=o("wav2vec2"),SKo=o(" \u2014 "),jq=a("a"),PKo=o("TFWav2Vec2Model"),$Ko=o(" (Wav2Vec2 model)"),IKo=l(),OF=a("li"),Zfe=a("strong"),jKo=o("xlm"),DKo=o(" \u2014 "),Dq=a("a"),NKo=o("TFXLMModel"),qKo=o(" (XLM model)"),OKo=l(),GF=a("li"),ege=a("strong"),GKo=o("xlm-roberta"),XKo=o(" \u2014 "),Nq=a("a"),VKo=o("TFXLMRobertaModel"),zKo=o(" (XLM-RoBERTa model)"),WKo=l(),XF=a("li"),oge=a("strong"),QKo=o("xlnet"),HKo=o(" \u2014 "),qq=a("a"),UKo=o("TFXLNetModel"),JKo=o(" (XLNet model)"),YKo=l(),rge=a("p"),KKo=o("Examples:"),ZKo=l(),m(SA.$$.fragment),dke=l(),pc=a("h2"),VF=a("a"),tge=a("span"),m(PA.$$.fragment),eZo=l(),age=a("span"),oZo=o("TFAutoModelForPreTraining"),cke=l(),Tr=a("div"),m($A.$$.fragment),rZo=l(),_c=a("p"),tZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sge=a("code"),aZo=o("from_pretrained()"),sZo=o("class method or the "),nge=a("code"),nZo=o("from_config()"),lZo=o(`class
method.`),iZo=l(),IA=a("p"),dZo=o("This class cannot be instantiated directly using "),lge=a("code"),cZo=o("__init__()"),mZo=o(" (throws an error)."),fZo=l(),ht=a("div"),m(jA.$$.fragment),gZo=l(),ige=a("p"),hZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uZo=l(),bc=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),_Zo=o("not"),bZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=a("code"),vZo=o("from_pretrained()"),TZo=o("to load the model weights."),FZo=l(),mge=a("p"),CZo=o("Examples:"),MZo=l(),m(DA.$$.fragment),EZo=l(),uo=a("div"),m(NA.$$.fragment),yZo=l(),fge=a("p"),wZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AZo=l(),ps=a("p"),LZo=o("The model class to instantiate is selected based on the "),gge=a("code"),BZo=o("model_type"),xZo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),kZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),SZo=o("pretrained_model_name_or_path"),PZo=o(":"),$Zo=l(),H=a("ul"),zF=a("li"),pge=a("strong"),IZo=o("albert"),jZo=o(" \u2014 "),Oq=a("a"),DZo=o("TFAlbertForPreTraining"),NZo=o(" (ALBERT model)"),qZo=l(),WF=a("li"),_ge=a("strong"),OZo=o("bart"),GZo=o(" \u2014 "),Gq=a("a"),XZo=o("TFBartForConditionalGeneration"),VZo=o(" (BART model)"),zZo=l(),QF=a("li"),bge=a("strong"),WZo=o("bert"),QZo=o(" \u2014 "),Xq=a("a"),HZo=o("TFBertForPreTraining"),UZo=o(" (BERT model)"),JZo=l(),HF=a("li"),vge=a("strong"),YZo=o("camembert"),KZo=o(" \u2014 "),Vq=a("a"),ZZo=o("TFCamembertForMaskedLM"),eer=o(" (CamemBERT model)"),oer=l(),UF=a("li"),Tge=a("strong"),rer=o("ctrl"),ter=o(" \u2014 "),zq=a("a"),aer=o("TFCTRLLMHeadModel"),ser=o(" (CTRL model)"),ner=l(),JF=a("li"),Fge=a("strong"),ler=o("distilbert"),ier=o(" \u2014 "),Wq=a("a"),der=o("TFDistilBertForMaskedLM"),cer=o(" (DistilBERT model)"),mer=l(),YF=a("li"),Cge=a("strong"),fer=o("electra"),ger=o(" \u2014 "),Qq=a("a"),her=o("TFElectraForPreTraining"),uer=o(" (ELECTRA model)"),per=l(),KF=a("li"),Mge=a("strong"),_er=o("flaubert"),ber=o(" \u2014 "),Hq=a("a"),ver=o("TFFlaubertWithLMHeadModel"),Ter=o(" (FlauBERT model)"),Fer=l(),ZF=a("li"),Ege=a("strong"),Cer=o("funnel"),Mer=o(" \u2014 "),Uq=a("a"),Eer=o("TFFunnelForPreTraining"),yer=o(" (Funnel Transformer model)"),wer=l(),eC=a("li"),yge=a("strong"),Aer=o("gpt2"),Ler=o(" \u2014 "),Jq=a("a"),Ber=o("TFGPT2LMHeadModel"),xer=o(" (OpenAI GPT-2 model)"),ker=l(),oC=a("li"),wge=a("strong"),Rer=o("layoutlm"),Ser=o(" \u2014 "),Yq=a("a"),Per=o("TFLayoutLMForMaskedLM"),$er=o(" (LayoutLM model)"),Ier=l(),rC=a("li"),Age=a("strong"),jer=o("lxmert"),Der=o(" \u2014 "),Kq=a("a"),Ner=o("TFLxmertForPreTraining"),qer=o(" (LXMERT model)"),Oer=l(),tC=a("li"),Lge=a("strong"),Ger=o("mobilebert"),Xer=o(" \u2014 "),Zq=a("a"),Ver=o("TFMobileBertForPreTraining"),zer=o(" (MobileBERT model)"),Wer=l(),aC=a("li"),Bge=a("strong"),Qer=o("mpnet"),Her=o(" \u2014 "),eO=a("a"),Uer=o("TFMPNetForMaskedLM"),Jer=o(" (MPNet model)"),Yer=l(),sC=a("li"),xge=a("strong"),Ker=o("openai-gpt"),Zer=o(" \u2014 "),oO=a("a"),eor=o("TFOpenAIGPTLMHeadModel"),oor=o(" (OpenAI GPT model)"),ror=l(),nC=a("li"),kge=a("strong"),tor=o("roberta"),aor=o(" \u2014 "),rO=a("a"),sor=o("TFRobertaForMaskedLM"),nor=o(" (RoBERTa model)"),lor=l(),lC=a("li"),Rge=a("strong"),ior=o("t5"),dor=o(" \u2014 "),tO=a("a"),cor=o("TFT5ForConditionalGeneration"),mor=o(" (T5 model)"),gor=l(),iC=a("li"),Sge=a("strong"),hor=o("tapas"),uor=o(" \u2014 "),aO=a("a"),por=o("TFTapasForMaskedLM"),_or=o(" (TAPAS model)"),bor=l(),dC=a("li"),Pge=a("strong"),vor=o("transfo-xl"),Tor=o(" \u2014 "),sO=a("a"),For=o("TFTransfoXLLMHeadModel"),Cor=o(" (Transformer-XL model)"),Mor=l(),cC=a("li"),$ge=a("strong"),Eor=o("xlm"),yor=o(" \u2014 "),nO=a("a"),wor=o("TFXLMWithLMHeadModel"),Aor=o(" (XLM model)"),Lor=l(),mC=a("li"),Ige=a("strong"),Bor=o("xlm-roberta"),xor=o(" \u2014 "),lO=a("a"),kor=o("TFXLMRobertaForMaskedLM"),Ror=o(" (XLM-RoBERTa model)"),Sor=l(),fC=a("li"),jge=a("strong"),Por=o("xlnet"),$or=o(" \u2014 "),iO=a("a"),Ior=o("TFXLNetLMHeadModel"),jor=o(" (XLNet model)"),Dor=l(),Dge=a("p"),Nor=o("Examples:"),qor=l(),m(qA.$$.fragment),mke=l(),vc=a("h2"),gC=a("a"),Nge=a("span"),m(OA.$$.fragment),Oor=l(),qge=a("span"),Gor=o("TFAutoModelForCausalLM"),fke=l(),Fr=a("div"),m(GA.$$.fragment),Xor=l(),Tc=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oge=a("code"),zor=o("from_pretrained()"),Wor=o("class method or the "),Gge=a("code"),Qor=o("from_config()"),Hor=o(`class
method.`),Uor=l(),XA=a("p"),Jor=o("This class cannot be instantiated directly using "),Xge=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),ut=a("div"),m(VA.$$.fragment),err=l(),Vge=a("p"),orr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rrr=l(),Fc=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),arr=o("not"),srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wge=a("code"),nrr=o("from_pretrained()"),lrr=o("to load the model weights."),irr=l(),Qge=a("p"),drr=o("Examples:"),crr=l(),m(zA.$$.fragment),mrr=l(),po=a("div"),m(WA.$$.fragment),frr=l(),Hge=a("p"),grr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hrr=l(),_s=a("p"),urr=o("The model class to instantiate is selected based on the "),Uge=a("code"),prr=o("model_type"),_rr=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),Trr=o("pretrained_model_name_or_path"),Frr=o(":"),Crr=l(),ue=a("ul"),hC=a("li"),Kge=a("strong"),Mrr=o("bert"),Err=o(" \u2014 "),dO=a("a"),yrr=o("TFBertLMHeadModel"),wrr=o(" (BERT model)"),Arr=l(),uC=a("li"),Zge=a("strong"),Lrr=o("ctrl"),Brr=o(" \u2014 "),cO=a("a"),xrr=o("TFCTRLLMHeadModel"),krr=o(" (CTRL model)"),Rrr=l(),pC=a("li"),ehe=a("strong"),Srr=o("gpt2"),Prr=o(" \u2014 "),mO=a("a"),$rr=o("TFGPT2LMHeadModel"),Irr=o(" (OpenAI GPT-2 model)"),jrr=l(),_C=a("li"),ohe=a("strong"),Drr=o("openai-gpt"),Nrr=o(" \u2014 "),fO=a("a"),qrr=o("TFOpenAIGPTLMHeadModel"),Orr=o(" (OpenAI GPT model)"),Grr=l(),bC=a("li"),rhe=a("strong"),Xrr=o("rembert"),Vrr=o(" \u2014 "),gO=a("a"),zrr=o("TFRemBertForCausalLM"),Wrr=o(" (RemBERT model)"),Qrr=l(),vC=a("li"),the=a("strong"),Hrr=o("roberta"),Urr=o(" \u2014 "),hO=a("a"),Jrr=o("TFRobertaForCausalLM"),Yrr=o(" (RoBERTa model)"),Krr=l(),TC=a("li"),ahe=a("strong"),Zrr=o("roformer"),etr=o(" \u2014 "),uO=a("a"),otr=o("TFRoFormerForCausalLM"),rtr=o(" (RoFormer model)"),ttr=l(),FC=a("li"),she=a("strong"),atr=o("transfo-xl"),str=o(" \u2014 "),pO=a("a"),ntr=o("TFTransfoXLLMHeadModel"),ltr=o(" (Transformer-XL model)"),itr=l(),CC=a("li"),nhe=a("strong"),dtr=o("xlm"),ctr=o(" \u2014 "),_O=a("a"),mtr=o("TFXLMWithLMHeadModel"),ftr=o(" (XLM model)"),gtr=l(),MC=a("li"),lhe=a("strong"),htr=o("xlnet"),utr=o(" \u2014 "),bO=a("a"),ptr=o("TFXLNetLMHeadModel"),_tr=o(" (XLNet model)"),btr=l(),ihe=a("p"),vtr=o("Examples:"),Ttr=l(),m(QA.$$.fragment),gke=l(),Cc=a("h2"),EC=a("a"),dhe=a("span"),m(HA.$$.fragment),Ftr=l(),che=a("span"),Ctr=o("TFAutoModelForImageClassification"),hke=l(),Cr=a("div"),m(UA.$$.fragment),Mtr=l(),Mc=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mhe=a("code"),ytr=o("from_pretrained()"),wtr=o("class method or the "),fhe=a("code"),Atr=o("from_config()"),Ltr=o(`class
method.`),Btr=l(),JA=a("p"),xtr=o("This class cannot be instantiated directly using "),ghe=a("code"),ktr=o("__init__()"),Rtr=o(" (throws an error)."),Str=l(),pt=a("div"),m(YA.$$.fragment),Ptr=l(),hhe=a("p"),$tr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Itr=l(),Ec=a("p"),jtr=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),Dtr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),phe=a("code"),qtr=o("from_pretrained()"),Otr=o("to load the model weights."),Gtr=l(),_he=a("p"),Xtr=o("Examples:"),Vtr=l(),m(KA.$$.fragment),ztr=l(),_o=a("div"),m(ZA.$$.fragment),Wtr=l(),bhe=a("p"),Qtr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Htr=l(),bs=a("p"),Utr=o("The model class to instantiate is selected based on the "),vhe=a("code"),Jtr=o("model_type"),Ytr=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),Ktr=o("pretrained_model_name_or_path"),Ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(":"),rar=l(),e0=a("ul"),yC=a("li"),Che=a("strong"),tar=o("convnext"),aar=o(" \u2014 "),vO=a("a"),sar=o("TFConvNextForImageClassification"),nar=o(" (ConvNext model)"),lar=l(),wC=a("li"),Mhe=a("strong"),iar=o("vit"),dar=o(" \u2014 "),TO=a("a"),car=o("TFViTForImageClassification"),mar=o(" (ViT model)"),far=l(),Ehe=a("p"),gar=o("Examples:"),har=l(),m(o0.$$.fragment),uke=l(),yc=a("h2"),AC=a("a"),yhe=a("span"),m(r0.$$.fragment),uar=l(),whe=a("span"),par=o("TFAutoModelForMaskedLM"),pke=l(),Mr=a("div"),m(t0.$$.fragment),_ar=l(),wc=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ahe=a("code"),Tar=o("from_pretrained()"),Far=o("class method or the "),Lhe=a("code"),Car=o("from_config()"),Mar=o(`class
method.`),Ear=l(),a0=a("p"),yar=o("This class cannot be instantiated directly using "),Bhe=a("code"),war=o("__init__()"),Aar=o(" (throws an error)."),Lar=l(),_t=a("div"),m(s0.$$.fragment),Bar=l(),xhe=a("p"),xar=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kar=l(),Ac=a("p"),Rar=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),Sar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=a("code"),$ar=o("from_pretrained()"),Iar=o("to load the model weights."),jar=l(),She=a("p"),Dar=o("Examples:"),Nar=l(),m(n0.$$.fragment),qar=l(),bo=a("div"),m(l0.$$.fragment),Oar=l(),Phe=a("p"),Gar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xar=l(),vs=a("p"),Var=o("The model class to instantiate is selected based on the "),$he=a("code"),zar=o("model_type"),War=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(":"),Yar=l(),Y=a("ul"),LC=a("li"),Dhe=a("strong"),Kar=o("albert"),Zar=o(" \u2014 "),FO=a("a"),esr=o("TFAlbertForMaskedLM"),osr=o(" (ALBERT model)"),rsr=l(),BC=a("li"),Nhe=a("strong"),tsr=o("bert"),asr=o(" \u2014 "),CO=a("a"),ssr=o("TFBertForMaskedLM"),nsr=o(" (BERT model)"),lsr=l(),xC=a("li"),qhe=a("strong"),isr=o("camembert"),dsr=o(" \u2014 "),MO=a("a"),csr=o("TFCamembertForMaskedLM"),msr=o(" (CamemBERT model)"),fsr=l(),kC=a("li"),Ohe=a("strong"),gsr=o("convbert"),hsr=o(" \u2014 "),EO=a("a"),usr=o("TFConvBertForMaskedLM"),psr=o(" (ConvBERT model)"),_sr=l(),RC=a("li"),Ghe=a("strong"),bsr=o("deberta"),vsr=o(" \u2014 "),yO=a("a"),Tsr=o("TFDebertaForMaskedLM"),Fsr=o(" (DeBERTa model)"),Csr=l(),SC=a("li"),Xhe=a("strong"),Msr=o("deberta-v2"),Esr=o(" \u2014 "),wO=a("a"),ysr=o("TFDebertaV2ForMaskedLM"),wsr=o(" (DeBERTa-v2 model)"),Asr=l(),PC=a("li"),Vhe=a("strong"),Lsr=o("distilbert"),Bsr=o(" \u2014 "),AO=a("a"),xsr=o("TFDistilBertForMaskedLM"),ksr=o(" (DistilBERT model)"),Rsr=l(),$C=a("li"),zhe=a("strong"),Ssr=o("electra"),Psr=o(" \u2014 "),LO=a("a"),$sr=o("TFElectraForMaskedLM"),Isr=o(" (ELECTRA model)"),jsr=l(),IC=a("li"),Whe=a("strong"),Dsr=o("flaubert"),Nsr=o(" \u2014 "),BO=a("a"),qsr=o("TFFlaubertWithLMHeadModel"),Osr=o(" (FlauBERT model)"),Gsr=l(),jC=a("li"),Qhe=a("strong"),Xsr=o("funnel"),Vsr=o(" \u2014 "),xO=a("a"),zsr=o("TFFunnelForMaskedLM"),Wsr=o(" (Funnel Transformer model)"),Qsr=l(),DC=a("li"),Hhe=a("strong"),Hsr=o("layoutlm"),Usr=o(" \u2014 "),kO=a("a"),Jsr=o("TFLayoutLMForMaskedLM"),Ysr=o(" (LayoutLM model)"),Ksr=l(),NC=a("li"),Uhe=a("strong"),Zsr=o("longformer"),enr=o(" \u2014 "),RO=a("a"),onr=o("TFLongformerForMaskedLM"),rnr=o(" (Longformer model)"),tnr=l(),qC=a("li"),Jhe=a("strong"),anr=o("mobilebert"),snr=o(" \u2014 "),SO=a("a"),nnr=o("TFMobileBertForMaskedLM"),lnr=o(" (MobileBERT model)"),inr=l(),OC=a("li"),Yhe=a("strong"),dnr=o("mpnet"),cnr=o(" \u2014 "),PO=a("a"),mnr=o("TFMPNetForMaskedLM"),fnr=o(" (MPNet model)"),gnr=l(),GC=a("li"),Khe=a("strong"),hnr=o("rembert"),unr=o(" \u2014 "),$O=a("a"),pnr=o("TFRemBertForMaskedLM"),_nr=o(" (RemBERT model)"),bnr=l(),XC=a("li"),Zhe=a("strong"),vnr=o("roberta"),Tnr=o(" \u2014 "),IO=a("a"),Fnr=o("TFRobertaForMaskedLM"),Cnr=o(" (RoBERTa model)"),Mnr=l(),VC=a("li"),eue=a("strong"),Enr=o("roformer"),ynr=o(" \u2014 "),jO=a("a"),wnr=o("TFRoFormerForMaskedLM"),Anr=o(" (RoFormer model)"),Lnr=l(),zC=a("li"),oue=a("strong"),Bnr=o("tapas"),xnr=o(" \u2014 "),DO=a("a"),knr=o("TFTapasForMaskedLM"),Rnr=o(" (TAPAS model)"),Snr=l(),WC=a("li"),rue=a("strong"),Pnr=o("xlm"),$nr=o(" \u2014 "),NO=a("a"),Inr=o("TFXLMWithLMHeadModel"),jnr=o(" (XLM model)"),Dnr=l(),QC=a("li"),tue=a("strong"),Nnr=o("xlm-roberta"),qnr=o(" \u2014 "),qO=a("a"),Onr=o("TFXLMRobertaForMaskedLM"),Gnr=o(" (XLM-RoBERTa model)"),Xnr=l(),aue=a("p"),Vnr=o("Examples:"),znr=l(),m(i0.$$.fragment),_ke=l(),Lc=a("h2"),HC=a("a"),sue=a("span"),m(d0.$$.fragment),Wnr=l(),nue=a("span"),Qnr=o("TFAutoModelForSeq2SeqLM"),bke=l(),Er=a("div"),m(c0.$$.fragment),Hnr=l(),Bc=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lue=a("code"),Jnr=o("from_pretrained()"),Ynr=o("class method or the "),iue=a("code"),Knr=o("from_config()"),Znr=o(`class
method.`),elr=l(),m0=a("p"),olr=o("This class cannot be instantiated directly using "),due=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),bt=a("div"),m(f0.$$.fragment),slr=l(),cue=a("p"),nlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),llr=l(),xc=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fue=a("code"),mlr=o("from_pretrained()"),flr=o("to load the model weights."),glr=l(),gue=a("p"),hlr=o("Examples:"),ulr=l(),m(g0.$$.fragment),plr=l(),vo=a("div"),m(h0.$$.fragment),_lr=l(),hue=a("p"),blr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vlr=l(),Ts=a("p"),Tlr=o("The model class to instantiate is selected based on the "),uue=a("code"),Flr=o("model_type"),Clr=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),Mlr=o("pretrained_model_name_or_path"),Elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),ylr=o("pretrained_model_name_or_path"),wlr=o(":"),Alr=l(),pe=a("ul"),UC=a("li"),bue=a("strong"),Llr=o("bart"),Blr=o(" \u2014 "),OO=a("a"),xlr=o("TFBartForConditionalGeneration"),klr=o(" (BART model)"),Rlr=l(),JC=a("li"),vue=a("strong"),Slr=o("blenderbot"),Plr=o(" \u2014 "),GO=a("a"),$lr=o("TFBlenderbotForConditionalGeneration"),Ilr=o(" (Blenderbot model)"),jlr=l(),YC=a("li"),Tue=a("strong"),Dlr=o("blenderbot-small"),Nlr=o(" \u2014 "),XO=a("a"),qlr=o("TFBlenderbotSmallForConditionalGeneration"),Olr=o(" (BlenderbotSmall model)"),Glr=l(),KC=a("li"),Fue=a("strong"),Xlr=o("encoder-decoder"),Vlr=o(" \u2014 "),VO=a("a"),zlr=o("TFEncoderDecoderModel"),Wlr=o(" (Encoder decoder model)"),Qlr=l(),ZC=a("li"),Cue=a("strong"),Hlr=o("led"),Ulr=o(" \u2014 "),zO=a("a"),Jlr=o("TFLEDForConditionalGeneration"),Ylr=o(" (LED model)"),Klr=l(),eM=a("li"),Mue=a("strong"),Zlr=o("marian"),eir=o(" \u2014 "),WO=a("a"),oir=o("TFMarianMTModel"),rir=o(" (Marian model)"),tir=l(),oM=a("li"),Eue=a("strong"),air=o("mbart"),sir=o(" \u2014 "),QO=a("a"),nir=o("TFMBartForConditionalGeneration"),lir=o(" (mBART model)"),iir=l(),rM=a("li"),yue=a("strong"),dir=o("mt5"),cir=o(" \u2014 "),HO=a("a"),mir=o("TFMT5ForConditionalGeneration"),fir=o(" (mT5 model)"),gir=l(),tM=a("li"),wue=a("strong"),hir=o("pegasus"),uir=o(" \u2014 "),UO=a("a"),pir=o("TFPegasusForConditionalGeneration"),_ir=o(" (Pegasus model)"),bir=l(),aM=a("li"),Aue=a("strong"),vir=o("t5"),Tir=o(" \u2014 "),JO=a("a"),Fir=o("TFT5ForConditionalGeneration"),Cir=o(" (T5 model)"),Mir=l(),Lue=a("p"),Eir=o("Examples:"),yir=l(),m(u0.$$.fragment),vke=l(),kc=a("h2"),sM=a("a"),Bue=a("span"),m(p0.$$.fragment),wir=l(),xue=a("span"),Air=o("TFAutoModelForSequenceClassification"),Tke=l(),yr=a("div"),m(_0.$$.fragment),Lir=l(),Rc=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kue=a("code"),xir=o("from_pretrained()"),kir=o("class method or the "),Rue=a("code"),Rir=o("from_config()"),Sir=o(`class
method.`),Pir=l(),b0=a("p"),$ir=o("This class cannot be instantiated directly using "),Sue=a("code"),Iir=o("__init__()"),jir=o(" (throws an error)."),Dir=l(),vt=a("div"),m(v0.$$.fragment),Nir=l(),Pue=a("p"),qir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oir=l(),Sc=a("p"),Gir=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),Xir=o("not"),Vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iue=a("code"),zir=o("from_pretrained()"),Wir=o("to load the model weights."),Qir=l(),jue=a("p"),Hir=o("Examples:"),Uir=l(),m(T0.$$.fragment),Jir=l(),To=a("div"),m(F0.$$.fragment),Yir=l(),Due=a("p"),Kir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zir=l(),Fs=a("p"),edr=o("The model class to instantiate is selected based on the "),Nue=a("code"),odr=o("model_type"),rdr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),sdr=o("pretrained_model_name_or_path"),ndr=o(":"),ldr=l(),V=a("ul"),nM=a("li"),Gue=a("strong"),idr=o("albert"),ddr=o(" \u2014 "),YO=a("a"),cdr=o("TFAlbertForSequenceClassification"),mdr=o(" (ALBERT model)"),fdr=l(),lM=a("li"),Xue=a("strong"),gdr=o("bert"),hdr=o(" \u2014 "),KO=a("a"),udr=o("TFBertForSequenceClassification"),pdr=o(" (BERT model)"),_dr=l(),iM=a("li"),Vue=a("strong"),bdr=o("camembert"),vdr=o(" \u2014 "),ZO=a("a"),Tdr=o("TFCamembertForSequenceClassification"),Fdr=o(" (CamemBERT model)"),Cdr=l(),dM=a("li"),zue=a("strong"),Mdr=o("convbert"),Edr=o(" \u2014 "),eG=a("a"),ydr=o("TFConvBertForSequenceClassification"),wdr=o(" (ConvBERT model)"),Adr=l(),cM=a("li"),Wue=a("strong"),Ldr=o("ctrl"),Bdr=o(" \u2014 "),oG=a("a"),xdr=o("TFCTRLForSequenceClassification"),kdr=o(" (CTRL model)"),Rdr=l(),mM=a("li"),Que=a("strong"),Sdr=o("deberta"),Pdr=o(" \u2014 "),rG=a("a"),$dr=o("TFDebertaForSequenceClassification"),Idr=o(" (DeBERTa model)"),jdr=l(),fM=a("li"),Hue=a("strong"),Ddr=o("deberta-v2"),Ndr=o(" \u2014 "),tG=a("a"),qdr=o("TFDebertaV2ForSequenceClassification"),Odr=o(" (DeBERTa-v2 model)"),Gdr=l(),gM=a("li"),Uue=a("strong"),Xdr=o("distilbert"),Vdr=o(" \u2014 "),aG=a("a"),zdr=o("TFDistilBertForSequenceClassification"),Wdr=o(" (DistilBERT model)"),Qdr=l(),hM=a("li"),Jue=a("strong"),Hdr=o("electra"),Udr=o(" \u2014 "),sG=a("a"),Jdr=o("TFElectraForSequenceClassification"),Ydr=o(" (ELECTRA model)"),Kdr=l(),uM=a("li"),Yue=a("strong"),Zdr=o("flaubert"),ecr=o(" \u2014 "),nG=a("a"),ocr=o("TFFlaubertForSequenceClassification"),rcr=o(" (FlauBERT model)"),tcr=l(),pM=a("li"),Kue=a("strong"),acr=o("funnel"),scr=o(" \u2014 "),lG=a("a"),ncr=o("TFFunnelForSequenceClassification"),lcr=o(" (Funnel Transformer model)"),icr=l(),_M=a("li"),Zue=a("strong"),dcr=o("gpt2"),ccr=o(" \u2014 "),iG=a("a"),mcr=o("TFGPT2ForSequenceClassification"),fcr=o(" (OpenAI GPT-2 model)"),gcr=l(),bM=a("li"),epe=a("strong"),hcr=o("layoutlm"),ucr=o(" \u2014 "),dG=a("a"),pcr=o("TFLayoutLMForSequenceClassification"),_cr=o(" (LayoutLM model)"),bcr=l(),vM=a("li"),ope=a("strong"),vcr=o("longformer"),Tcr=o(" \u2014 "),cG=a("a"),Fcr=o("TFLongformerForSequenceClassification"),Ccr=o(" (Longformer model)"),Mcr=l(),TM=a("li"),rpe=a("strong"),Ecr=o("mobilebert"),ycr=o(" \u2014 "),mG=a("a"),wcr=o("TFMobileBertForSequenceClassification"),Acr=o(" (MobileBERT model)"),Lcr=l(),FM=a("li"),tpe=a("strong"),Bcr=o("mpnet"),xcr=o(" \u2014 "),fG=a("a"),kcr=o("TFMPNetForSequenceClassification"),Rcr=o(" (MPNet model)"),Scr=l(),CM=a("li"),ape=a("strong"),Pcr=o("openai-gpt"),$cr=o(" \u2014 "),gG=a("a"),Icr=o("TFOpenAIGPTForSequenceClassification"),jcr=o(" (OpenAI GPT model)"),Dcr=l(),MM=a("li"),spe=a("strong"),Ncr=o("rembert"),qcr=o(" \u2014 "),hG=a("a"),Ocr=o("TFRemBertForSequenceClassification"),Gcr=o(" (RemBERT model)"),Xcr=l(),EM=a("li"),npe=a("strong"),Vcr=o("roberta"),zcr=o(" \u2014 "),uG=a("a"),Wcr=o("TFRobertaForSequenceClassification"),Qcr=o(" (RoBERTa model)"),Hcr=l(),yM=a("li"),lpe=a("strong"),Ucr=o("roformer"),Jcr=o(" \u2014 "),pG=a("a"),Ycr=o("TFRoFormerForSequenceClassification"),Kcr=o(" (RoFormer model)"),Zcr=l(),wM=a("li"),ipe=a("strong"),emr=o("tapas"),omr=o(" \u2014 "),_G=a("a"),rmr=o("TFTapasForSequenceClassification"),tmr=o(" (TAPAS model)"),amr=l(),AM=a("li"),dpe=a("strong"),smr=o("transfo-xl"),nmr=o(" \u2014 "),bG=a("a"),lmr=o("TFTransfoXLForSequenceClassification"),imr=o(" (Transformer-XL model)"),dmr=l(),LM=a("li"),cpe=a("strong"),cmr=o("xlm"),mmr=o(" \u2014 "),vG=a("a"),fmr=o("TFXLMForSequenceClassification"),gmr=o(" (XLM model)"),hmr=l(),BM=a("li"),mpe=a("strong"),umr=o("xlm-roberta"),pmr=o(" \u2014 "),TG=a("a"),_mr=o("TFXLMRobertaForSequenceClassification"),bmr=o(" (XLM-RoBERTa model)"),vmr=l(),xM=a("li"),fpe=a("strong"),Tmr=o("xlnet"),Fmr=o(" \u2014 "),FG=a("a"),Cmr=o("TFXLNetForSequenceClassification"),Mmr=o(" (XLNet model)"),Emr=l(),gpe=a("p"),ymr=o("Examples:"),wmr=l(),m(C0.$$.fragment),Fke=l(),Pc=a("h2"),kM=a("a"),hpe=a("span"),m(M0.$$.fragment),Amr=l(),upe=a("span"),Lmr=o("TFAutoModelForMultipleChoice"),Cke=l(),wr=a("div"),m(E0.$$.fragment),Bmr=l(),$c=a("p"),xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ppe=a("code"),kmr=o("from_pretrained()"),Rmr=o("class method or the "),_pe=a("code"),Smr=o("from_config()"),Pmr=o(`class
method.`),$mr=l(),y0=a("p"),Imr=o("This class cannot be instantiated directly using "),bpe=a("code"),jmr=o("__init__()"),Dmr=o(" (throws an error)."),Nmr=l(),Tt=a("div"),m(w0.$$.fragment),qmr=l(),vpe=a("p"),Omr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Gmr=l(),Ic=a("p"),Xmr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Vmr=o("not"),zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),Wmr=o("from_pretrained()"),Qmr=o("to load the model weights."),Hmr=l(),Cpe=a("p"),Umr=o("Examples:"),Jmr=l(),m(A0.$$.fragment),Ymr=l(),Fo=a("div"),m(L0.$$.fragment),Kmr=l(),Mpe=a("p"),Zmr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),efr=l(),Cs=a("p"),ofr=o("The model class to instantiate is selected based on the "),Epe=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),afr=o("pretrained_model_name_or_path"),sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),nfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),te=a("ul"),RM=a("li"),Ape=a("strong"),dfr=o("albert"),cfr=o(" \u2014 "),CG=a("a"),mfr=o("TFAlbertForMultipleChoice"),ffr=o(" (ALBERT model)"),gfr=l(),SM=a("li"),Lpe=a("strong"),hfr=o("bert"),ufr=o(" \u2014 "),MG=a("a"),pfr=o("TFBertForMultipleChoice"),_fr=o(" (BERT model)"),bfr=l(),PM=a("li"),Bpe=a("strong"),vfr=o("camembert"),Tfr=o(" \u2014 "),EG=a("a"),Ffr=o("TFCamembertForMultipleChoice"),Cfr=o(" (CamemBERT model)"),Mfr=l(),$M=a("li"),xpe=a("strong"),Efr=o("convbert"),yfr=o(" \u2014 "),yG=a("a"),wfr=o("TFConvBertForMultipleChoice"),Afr=o(" (ConvBERT model)"),Lfr=l(),IM=a("li"),kpe=a("strong"),Bfr=o("distilbert"),xfr=o(" \u2014 "),wG=a("a"),kfr=o("TFDistilBertForMultipleChoice"),Rfr=o(" (DistilBERT model)"),Sfr=l(),jM=a("li"),Rpe=a("strong"),Pfr=o("electra"),$fr=o(" \u2014 "),AG=a("a"),Ifr=o("TFElectraForMultipleChoice"),jfr=o(" (ELECTRA model)"),Dfr=l(),DM=a("li"),Spe=a("strong"),Nfr=o("flaubert"),qfr=o(" \u2014 "),LG=a("a"),Ofr=o("TFFlaubertForMultipleChoice"),Gfr=o(" (FlauBERT model)"),Xfr=l(),NM=a("li"),Ppe=a("strong"),Vfr=o("funnel"),zfr=o(" \u2014 "),BG=a("a"),Wfr=o("TFFunnelForMultipleChoice"),Qfr=o(" (Funnel Transformer model)"),Hfr=l(),qM=a("li"),$pe=a("strong"),Ufr=o("longformer"),Jfr=o(" \u2014 "),xG=a("a"),Yfr=o("TFLongformerForMultipleChoice"),Kfr=o(" (Longformer model)"),Zfr=l(),OM=a("li"),Ipe=a("strong"),egr=o("mobilebert"),ogr=o(" \u2014 "),kG=a("a"),rgr=o("TFMobileBertForMultipleChoice"),tgr=o(" (MobileBERT model)"),agr=l(),GM=a("li"),jpe=a("strong"),sgr=o("mpnet"),ngr=o(" \u2014 "),RG=a("a"),lgr=o("TFMPNetForMultipleChoice"),igr=o(" (MPNet model)"),dgr=l(),XM=a("li"),Dpe=a("strong"),cgr=o("rembert"),mgr=o(" \u2014 "),SG=a("a"),fgr=o("TFRemBertForMultipleChoice"),ggr=o(" (RemBERT model)"),hgr=l(),VM=a("li"),Npe=a("strong"),ugr=o("roberta"),pgr=o(" \u2014 "),PG=a("a"),_gr=o("TFRobertaForMultipleChoice"),bgr=o(" (RoBERTa model)"),vgr=l(),zM=a("li"),qpe=a("strong"),Tgr=o("roformer"),Fgr=o(" \u2014 "),$G=a("a"),Cgr=o("TFRoFormerForMultipleChoice"),Mgr=o(" (RoFormer model)"),Egr=l(),WM=a("li"),Ope=a("strong"),ygr=o("xlm"),wgr=o(" \u2014 "),IG=a("a"),Agr=o("TFXLMForMultipleChoice"),Lgr=o(" (XLM model)"),Bgr=l(),QM=a("li"),Gpe=a("strong"),xgr=o("xlm-roberta"),kgr=o(" \u2014 "),jG=a("a"),Rgr=o("TFXLMRobertaForMultipleChoice"),Sgr=o(" (XLM-RoBERTa model)"),Pgr=l(),HM=a("li"),Xpe=a("strong"),$gr=o("xlnet"),Igr=o(" \u2014 "),DG=a("a"),jgr=o("TFXLNetForMultipleChoice"),Dgr=o(" (XLNet model)"),Ngr=l(),Vpe=a("p"),qgr=o("Examples:"),Ogr=l(),m(B0.$$.fragment),Mke=l(),jc=a("h2"),UM=a("a"),zpe=a("span"),m(x0.$$.fragment),Ggr=l(),Wpe=a("span"),Xgr=o("TFAutoModelForTableQuestionAnswering"),Eke=l(),Ar=a("div"),m(k0.$$.fragment),Vgr=l(),Dc=a("p"),zgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qpe=a("code"),Wgr=o("from_pretrained()"),Qgr=o("class method or the "),Hpe=a("code"),Hgr=o("from_config()"),Ugr=o(`class
method.`),Jgr=l(),R0=a("p"),Ygr=o("This class cannot be instantiated directly using "),Upe=a("code"),Kgr=o("__init__()"),Zgr=o(" (throws an error)."),ehr=l(),Ft=a("div"),m(S0.$$.fragment),ohr=l(),Jpe=a("p"),rhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),thr=l(),Nc=a("p"),ahr=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),shr=o("not"),nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kpe=a("code"),lhr=o("from_pretrained()"),ihr=o("to load the model weights."),dhr=l(),Zpe=a("p"),chr=o("Examples:"),mhr=l(),m(P0.$$.fragment),fhr=l(),Co=a("div"),m($0.$$.fragment),ghr=l(),e_e=a("p"),hhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uhr=l(),Ms=a("p"),phr=o("The model class to instantiate is selected based on the "),o_e=a("code"),_hr=o("model_type"),bhr=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),vhr=o("pretrained_model_name_or_path"),Thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),Fhr=o("pretrained_model_name_or_path"),Chr=o(":"),Mhr=l(),a_e=a("ul"),JM=a("li"),s_e=a("strong"),Ehr=o("tapas"),yhr=o(" \u2014 "),NG=a("a"),whr=o("TFTapasForQuestionAnswering"),Ahr=o(" (TAPAS model)"),Lhr=l(),n_e=a("p"),Bhr=o("Examples:"),xhr=l(),m(I0.$$.fragment),yke=l(),qc=a("h2"),YM=a("a"),l_e=a("span"),m(j0.$$.fragment),khr=l(),i_e=a("span"),Rhr=o("TFAutoModelForTokenClassification"),wke=l(),Lr=a("div"),m(D0.$$.fragment),Shr=l(),Oc=a("p"),Phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),d_e=a("code"),$hr=o("from_pretrained()"),Ihr=o("class method or the "),c_e=a("code"),jhr=o("from_config()"),Dhr=o(`class
method.`),Nhr=l(),N0=a("p"),qhr=o("This class cannot be instantiated directly using "),m_e=a("code"),Ohr=o("__init__()"),Ghr=o(" (throws an error)."),Xhr=l(),Ct=a("div"),m(q0.$$.fragment),Vhr=l(),f_e=a("p"),zhr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Whr=l(),Gc=a("p"),Qhr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Hhr=o("not"),Uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h_e=a("code"),Jhr=o("from_pretrained()"),Yhr=o("to load the model weights."),Khr=l(),u_e=a("p"),Zhr=o("Examples:"),eur=l(),m(O0.$$.fragment),our=l(),Mo=a("div"),m(G0.$$.fragment),rur=l(),p_e=a("p"),tur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aur=l(),Es=a("p"),sur=o("The model class to instantiate is selected based on the "),__e=a("code"),nur=o("model_type"),lur=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),iur=o("pretrained_model_name_or_path"),dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),cur=o("pretrained_model_name_or_path"),mur=o(":"),fur=l(),K=a("ul"),KM=a("li"),T_e=a("strong"),gur=o("albert"),hur=o(" \u2014 "),qG=a("a"),uur=o("TFAlbertForTokenClassification"),pur=o(" (ALBERT model)"),_ur=l(),ZM=a("li"),F_e=a("strong"),bur=o("bert"),vur=o(" \u2014 "),OG=a("a"),Tur=o("TFBertForTokenClassification"),Fur=o(" (BERT model)"),Cur=l(),e4=a("li"),C_e=a("strong"),Mur=o("camembert"),Eur=o(" \u2014 "),GG=a("a"),yur=o("TFCamembertForTokenClassification"),wur=o(" (CamemBERT model)"),Aur=l(),o4=a("li"),M_e=a("strong"),Lur=o("convbert"),Bur=o(" \u2014 "),XG=a("a"),xur=o("TFConvBertForTokenClassification"),kur=o(" (ConvBERT model)"),Rur=l(),r4=a("li"),E_e=a("strong"),Sur=o("deberta"),Pur=o(" \u2014 "),VG=a("a"),$ur=o("TFDebertaForTokenClassification"),Iur=o(" (DeBERTa model)"),jur=l(),t4=a("li"),y_e=a("strong"),Dur=o("deberta-v2"),Nur=o(" \u2014 "),zG=a("a"),qur=o("TFDebertaV2ForTokenClassification"),Our=o(" (DeBERTa-v2 model)"),Gur=l(),a4=a("li"),w_e=a("strong"),Xur=o("distilbert"),Vur=o(" \u2014 "),WG=a("a"),zur=o("TFDistilBertForTokenClassification"),Wur=o(" (DistilBERT model)"),Qur=l(),s4=a("li"),A_e=a("strong"),Hur=o("electra"),Uur=o(" \u2014 "),QG=a("a"),Jur=o("TFElectraForTokenClassification"),Yur=o(" (ELECTRA model)"),Kur=l(),n4=a("li"),L_e=a("strong"),Zur=o("flaubert"),epr=o(" \u2014 "),HG=a("a"),opr=o("TFFlaubertForTokenClassification"),rpr=o(" (FlauBERT model)"),tpr=l(),l4=a("li"),B_e=a("strong"),apr=o("funnel"),spr=o(" \u2014 "),UG=a("a"),npr=o("TFFunnelForTokenClassification"),lpr=o(" (Funnel Transformer model)"),ipr=l(),i4=a("li"),x_e=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),JG=a("a"),mpr=o("TFLayoutLMForTokenClassification"),fpr=o(" (LayoutLM model)"),gpr=l(),d4=a("li"),k_e=a("strong"),hpr=o("longformer"),upr=o(" \u2014 "),YG=a("a"),ppr=o("TFLongformerForTokenClassification"),_pr=o(" (Longformer model)"),bpr=l(),c4=a("li"),R_e=a("strong"),vpr=o("mobilebert"),Tpr=o(" \u2014 "),KG=a("a"),Fpr=o("TFMobileBertForTokenClassification"),Cpr=o(" (MobileBERT model)"),Mpr=l(),m4=a("li"),S_e=a("strong"),Epr=o("mpnet"),ypr=o(" \u2014 "),ZG=a("a"),wpr=o("TFMPNetForTokenClassification"),Apr=o(" (MPNet model)"),Lpr=l(),f4=a("li"),P_e=a("strong"),Bpr=o("rembert"),xpr=o(" \u2014 "),eX=a("a"),kpr=o("TFRemBertForTokenClassification"),Rpr=o(" (RemBERT model)"),Spr=l(),g4=a("li"),$_e=a("strong"),Ppr=o("roberta"),$pr=o(" \u2014 "),oX=a("a"),Ipr=o("TFRobertaForTokenClassification"),jpr=o(" (RoBERTa model)"),Dpr=l(),h4=a("li"),I_e=a("strong"),Npr=o("roformer"),qpr=o(" \u2014 "),rX=a("a"),Opr=o("TFRoFormerForTokenClassification"),Gpr=o(" (RoFormer model)"),Xpr=l(),u4=a("li"),j_e=a("strong"),Vpr=o("xlm"),zpr=o(" \u2014 "),tX=a("a"),Wpr=o("TFXLMForTokenClassification"),Qpr=o(" (XLM model)"),Hpr=l(),p4=a("li"),D_e=a("strong"),Upr=o("xlm-roberta"),Jpr=o(" \u2014 "),aX=a("a"),Ypr=o("TFXLMRobertaForTokenClassification"),Kpr=o(" (XLM-RoBERTa model)"),Zpr=l(),_4=a("li"),N_e=a("strong"),e_r=o("xlnet"),o_r=o(" \u2014 "),sX=a("a"),r_r=o("TFXLNetForTokenClassification"),t_r=o(" (XLNet model)"),a_r=l(),q_e=a("p"),s_r=o("Examples:"),n_r=l(),m(X0.$$.fragment),Ake=l(),Xc=a("h2"),b4=a("a"),O_e=a("span"),m(V0.$$.fragment),l_r=l(),G_e=a("span"),i_r=o("TFAutoModelForQuestionAnswering"),Lke=l(),Br=a("div"),m(z0.$$.fragment),d_r=l(),Vc=a("p"),c_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),X_e=a("code"),m_r=o("from_pretrained()"),f_r=o("class method or the "),V_e=a("code"),g_r=o("from_config()"),h_r=o(`class
method.`),u_r=l(),W0=a("p"),p_r=o("This class cannot be instantiated directly using "),z_e=a("code"),__r=o("__init__()"),b_r=o(" (throws an error)."),v_r=l(),Mt=a("div"),m(Q0.$$.fragment),T_r=l(),W_e=a("p"),F_r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C_r=l(),zc=a("p"),M_r=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),E_r=o("not"),y_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=a("code"),w_r=o("from_pretrained()"),A_r=o("to load the model weights."),L_r=l(),U_e=a("p"),B_r=o("Examples:"),x_r=l(),m(H0.$$.fragment),k_r=l(),Eo=a("div"),m(U0.$$.fragment),R_r=l(),J_e=a("p"),S_r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),P_r=l(),ys=a("p"),$_r=o("The model class to instantiate is selected based on the "),Y_e=a("code"),I_r=o("model_type"),j_r=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),D_r=o("pretrained_model_name_or_path"),N_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),q_r=o("pretrained_model_name_or_path"),O_r=o(":"),G_r=l(),Z=a("ul"),v4=a("li"),ebe=a("strong"),X_r=o("albert"),V_r=o(" \u2014 "),nX=a("a"),z_r=o("TFAlbertForQuestionAnswering"),W_r=o(" (ALBERT model)"),Q_r=l(),T4=a("li"),obe=a("strong"),H_r=o("bert"),U_r=o(" \u2014 "),lX=a("a"),J_r=o("TFBertForQuestionAnswering"),Y_r=o(" (BERT model)"),K_r=l(),F4=a("li"),rbe=a("strong"),Z_r=o("camembert"),ebr=o(" \u2014 "),iX=a("a"),obr=o("TFCamembertForQuestionAnswering"),rbr=o(" (CamemBERT model)"),tbr=l(),C4=a("li"),tbe=a("strong"),abr=o("convbert"),sbr=o(" \u2014 "),dX=a("a"),nbr=o("TFConvBertForQuestionAnswering"),lbr=o(" (ConvBERT model)"),ibr=l(),M4=a("li"),abe=a("strong"),dbr=o("deberta"),cbr=o(" \u2014 "),cX=a("a"),mbr=o("TFDebertaForQuestionAnswering"),fbr=o(" (DeBERTa model)"),gbr=l(),E4=a("li"),sbe=a("strong"),hbr=o("deberta-v2"),ubr=o(" \u2014 "),mX=a("a"),pbr=o("TFDebertaV2ForQuestionAnswering"),_br=o(" (DeBERTa-v2 model)"),bbr=l(),y4=a("li"),nbe=a("strong"),vbr=o("distilbert"),Tbr=o(" \u2014 "),fX=a("a"),Fbr=o("TFDistilBertForQuestionAnswering"),Cbr=o(" (DistilBERT model)"),Mbr=l(),w4=a("li"),lbe=a("strong"),Ebr=o("electra"),ybr=o(" \u2014 "),gX=a("a"),wbr=o("TFElectraForQuestionAnswering"),Abr=o(" (ELECTRA model)"),Lbr=l(),A4=a("li"),ibe=a("strong"),Bbr=o("flaubert"),xbr=o(" \u2014 "),hX=a("a"),kbr=o("TFFlaubertForQuestionAnsweringSimple"),Rbr=o(" (FlauBERT model)"),Sbr=l(),L4=a("li"),dbe=a("strong"),Pbr=o("funnel"),$br=o(" \u2014 "),uX=a("a"),Ibr=o("TFFunnelForQuestionAnswering"),jbr=o(" (Funnel Transformer model)"),Dbr=l(),B4=a("li"),cbe=a("strong"),Nbr=o("longformer"),qbr=o(" \u2014 "),pX=a("a"),Obr=o("TFLongformerForQuestionAnswering"),Gbr=o(" (Longformer model)"),Xbr=l(),x4=a("li"),mbe=a("strong"),Vbr=o("mobilebert"),zbr=o(" \u2014 "),_X=a("a"),Wbr=o("TFMobileBertForQuestionAnswering"),Qbr=o(" (MobileBERT model)"),Hbr=l(),k4=a("li"),fbe=a("strong"),Ubr=o("mpnet"),Jbr=o(" \u2014 "),bX=a("a"),Ybr=o("TFMPNetForQuestionAnswering"),Kbr=o(" (MPNet model)"),Zbr=l(),R4=a("li"),gbe=a("strong"),e2r=o("rembert"),o2r=o(" \u2014 "),vX=a("a"),r2r=o("TFRemBertForQuestionAnswering"),t2r=o(" (RemBERT model)"),a2r=l(),S4=a("li"),hbe=a("strong"),s2r=o("roberta"),n2r=o(" \u2014 "),TX=a("a"),l2r=o("TFRobertaForQuestionAnswering"),i2r=o(" (RoBERTa model)"),d2r=l(),P4=a("li"),ube=a("strong"),c2r=o("roformer"),m2r=o(" \u2014 "),FX=a("a"),f2r=o("TFRoFormerForQuestionAnswering"),g2r=o(" (RoFormer model)"),h2r=l(),$4=a("li"),pbe=a("strong"),u2r=o("xlm"),p2r=o(" \u2014 "),CX=a("a"),_2r=o("TFXLMForQuestionAnsweringSimple"),b2r=o(" (XLM model)"),v2r=l(),I4=a("li"),_be=a("strong"),T2r=o("xlm-roberta"),F2r=o(" \u2014 "),MX=a("a"),C2r=o("TFXLMRobertaForQuestionAnswering"),M2r=o(" (XLM-RoBERTa model)"),E2r=l(),j4=a("li"),bbe=a("strong"),y2r=o("xlnet"),w2r=o(" \u2014 "),EX=a("a"),A2r=o("TFXLNetForQuestionAnsweringSimple"),L2r=o(" (XLNet model)"),B2r=l(),vbe=a("p"),x2r=o("Examples:"),k2r=l(),m(J0.$$.fragment),Bke=l(),Wc=a("h2"),D4=a("a"),Tbe=a("span"),m(Y0.$$.fragment),R2r=l(),Fbe=a("span"),S2r=o("TFAutoModelForVision2Seq"),xke=l(),xr=a("div"),m(K0.$$.fragment),P2r=l(),Qc=a("p"),$2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cbe=a("code"),I2r=o("from_pretrained()"),j2r=o("class method or the "),Mbe=a("code"),D2r=o("from_config()"),N2r=o(`class
method.`),q2r=l(),Z0=a("p"),O2r=o("This class cannot be instantiated directly using "),Ebe=a("code"),G2r=o("__init__()"),X2r=o(" (throws an error)."),V2r=l(),Et=a("div"),m(eL.$$.fragment),z2r=l(),ybe=a("p"),W2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q2r=l(),Hc=a("p"),H2r=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),U2r=o("not"),J2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=a("code"),Y2r=o("from_pretrained()"),K2r=o("to load the model weights."),Z2r=l(),Lbe=a("p"),evr=o("Examples:"),ovr=l(),m(oL.$$.fragment),rvr=l(),yo=a("div"),m(rL.$$.fragment),tvr=l(),Bbe=a("p"),avr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),svr=l(),ws=a("p"),nvr=o("The model class to instantiate is selected based on the "),xbe=a("code"),lvr=o("model_type"),ivr=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),mvr=o("pretrained_model_name_or_path"),fvr=o(":"),gvr=l(),Sbe=a("ul"),N4=a("li"),Pbe=a("strong"),hvr=o("vision-encoder-decoder"),uvr=o(" \u2014 "),yX=a("a"),pvr=o("TFVisionEncoderDecoderModel"),_vr=o(" (Vision Encoder decoder model)"),bvr=l(),$be=a("p"),vvr=o("Examples:"),Tvr=l(),m(tL.$$.fragment),kke=l(),Uc=a("h2"),q4=a("a"),Ibe=a("span"),m(aL.$$.fragment),Fvr=l(),jbe=a("span"),Cvr=o("TFAutoModelForSpeechSeq2Seq"),Rke=l(),kr=a("div"),m(sL.$$.fragment),Mvr=l(),Jc=a("p"),Evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dbe=a("code"),yvr=o("from_pretrained()"),wvr=o("class method or the "),Nbe=a("code"),Avr=o("from_config()"),Lvr=o(`class
method.`),Bvr=l(),nL=a("p"),xvr=o("This class cannot be instantiated directly using "),qbe=a("code"),kvr=o("__init__()"),Rvr=o(" (throws an error)."),Svr=l(),yt=a("div"),m(lL.$$.fragment),Pvr=l(),Obe=a("p"),$vr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ivr=l(),Yc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),Dvr=o("not"),Nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=a("code"),qvr=o("from_pretrained()"),Ovr=o("to load the model weights."),Gvr=l(),Vbe=a("p"),Xvr=o("Examples:"),Vvr=l(),m(iL.$$.fragment),zvr=l(),wo=a("div"),m(dL.$$.fragment),Wvr=l(),zbe=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hvr=l(),As=a("p"),Uvr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(":"),rTr=l(),Ube=a("ul"),O4=a("li"),Jbe=a("strong"),tTr=o("speech_to_text"),aTr=o(" \u2014 "),wX=a("a"),sTr=o("TFSpeech2TextForConditionalGeneration"),nTr=o(" (Speech2Text model)"),lTr=l(),Ybe=a("p"),iTr=o("Examples:"),dTr=l(),m(cL.$$.fragment),Ske=l(),Kc=a("h2"),G4=a("a"),Kbe=a("span"),m(mL.$$.fragment),cTr=l(),Zbe=a("span"),mTr=o("FlaxAutoModel"),Pke=l(),Rr=a("div"),m(fL.$$.fragment),fTr=l(),Zc=a("p"),gTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),e2e=a("code"),hTr=o("from_pretrained()"),uTr=o("class method or the "),o2e=a("code"),pTr=o("from_config()"),_Tr=o(`class
method.`),bTr=l(),gL=a("p"),vTr=o("This class cannot be instantiated directly using "),r2e=a("code"),TTr=o("__init__()"),FTr=o(" (throws an error)."),CTr=l(),wt=a("div"),m(hL.$$.fragment),MTr=l(),t2e=a("p"),ETr=o("Instantiates one of the base model classes of the library from a configuration."),yTr=l(),em=a("p"),wTr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),ATr=o("not"),LTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s2e=a("code"),BTr=o("from_pretrained()"),xTr=o("to load the model weights."),kTr=l(),n2e=a("p"),RTr=o("Examples:"),STr=l(),m(uL.$$.fragment),PTr=l(),Ao=a("div"),m(pL.$$.fragment),$Tr=l(),l2e=a("p"),ITr=o("Instantiate one of the base model classes of the library from a pretrained model."),jTr=l(),Ls=a("p"),DTr=o("The model class to instantiate is selected based on the "),i2e=a("code"),NTr=o("model_type"),qTr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),OTr=o("pretrained_model_name_or_path"),GTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),XTr=o("pretrained_model_name_or_path"),VTr=o(":"),zTr=l(),z=a("ul"),X4=a("li"),m2e=a("strong"),WTr=o("albert"),QTr=o(" \u2014 "),AX=a("a"),HTr=o("FlaxAlbertModel"),UTr=o(" (ALBERT model)"),JTr=l(),V4=a("li"),f2e=a("strong"),YTr=o("bart"),KTr=o(" \u2014 "),LX=a("a"),ZTr=o("FlaxBartModel"),e1r=o(" (BART model)"),o1r=l(),z4=a("li"),g2e=a("strong"),r1r=o("beit"),t1r=o(" \u2014 "),BX=a("a"),a1r=o("FlaxBeitModel"),s1r=o(" (BEiT model)"),n1r=l(),W4=a("li"),h2e=a("strong"),l1r=o("bert"),i1r=o(" \u2014 "),xX=a("a"),d1r=o("FlaxBertModel"),c1r=o(" (BERT model)"),m1r=l(),Q4=a("li"),u2e=a("strong"),f1r=o("big_bird"),g1r=o(" \u2014 "),kX=a("a"),h1r=o("FlaxBigBirdModel"),u1r=o(" (BigBird model)"),p1r=l(),H4=a("li"),p2e=a("strong"),_1r=o("blenderbot"),b1r=o(" \u2014 "),RX=a("a"),v1r=o("FlaxBlenderbotModel"),T1r=o(" (Blenderbot model)"),F1r=l(),U4=a("li"),_2e=a("strong"),C1r=o("blenderbot-small"),M1r=o(" \u2014 "),SX=a("a"),E1r=o("FlaxBlenderbotSmallModel"),y1r=o(" (BlenderbotSmall model)"),w1r=l(),J4=a("li"),b2e=a("strong"),A1r=o("clip"),L1r=o(" \u2014 "),PX=a("a"),B1r=o("FlaxCLIPModel"),x1r=o(" (CLIP model)"),k1r=l(),Y4=a("li"),v2e=a("strong"),R1r=o("distilbert"),S1r=o(" \u2014 "),$X=a("a"),P1r=o("FlaxDistilBertModel"),$1r=o(" (DistilBERT model)"),I1r=l(),K4=a("li"),T2e=a("strong"),j1r=o("electra"),D1r=o(" \u2014 "),IX=a("a"),N1r=o("FlaxElectraModel"),q1r=o(" (ELECTRA model)"),O1r=l(),Z4=a("li"),F2e=a("strong"),G1r=o("gpt2"),X1r=o(" \u2014 "),jX=a("a"),V1r=o("FlaxGPT2Model"),z1r=o(" (OpenAI GPT-2 model)"),W1r=l(),eE=a("li"),C2e=a("strong"),Q1r=o("gpt_neo"),H1r=o(" \u2014 "),DX=a("a"),U1r=o("FlaxGPTNeoModel"),J1r=o(" (GPT Neo model)"),Y1r=l(),oE=a("li"),M2e=a("strong"),K1r=o("gptj"),Z1r=o(" \u2014 "),NX=a("a"),eFr=o("FlaxGPTJModel"),oFr=o(" (GPT-J model)"),rFr=l(),rE=a("li"),E2e=a("strong"),tFr=o("marian"),aFr=o(" \u2014 "),qX=a("a"),sFr=o("FlaxMarianModel"),nFr=o(" (Marian model)"),lFr=l(),tE=a("li"),y2e=a("strong"),iFr=o("mbart"),dFr=o(" \u2014 "),OX=a("a"),cFr=o("FlaxMBartModel"),mFr=o(" (mBART model)"),fFr=l(),aE=a("li"),w2e=a("strong"),gFr=o("mt5"),hFr=o(" \u2014 "),GX=a("a"),uFr=o("FlaxMT5Model"),pFr=o(" (mT5 model)"),_Fr=l(),sE=a("li"),A2e=a("strong"),bFr=o("pegasus"),vFr=o(" \u2014 "),XX=a("a"),TFr=o("FlaxPegasusModel"),FFr=o(" (Pegasus model)"),CFr=l(),nE=a("li"),L2e=a("strong"),MFr=o("roberta"),EFr=o(" \u2014 "),VX=a("a"),yFr=o("FlaxRobertaModel"),wFr=o(" (RoBERTa model)"),AFr=l(),lE=a("li"),B2e=a("strong"),LFr=o("roformer"),BFr=o(" \u2014 "),zX=a("a"),xFr=o("FlaxRoFormerModel"),kFr=o(" (RoFormer model)"),RFr=l(),iE=a("li"),x2e=a("strong"),SFr=o("t5"),PFr=o(" \u2014 "),WX=a("a"),$Fr=o("FlaxT5Model"),IFr=o(" (T5 model)"),jFr=l(),dE=a("li"),k2e=a("strong"),DFr=o("vision-text-dual-encoder"),NFr=o(" \u2014 "),QX=a("a"),qFr=o("FlaxVisionTextDualEncoderModel"),OFr=o(" (VisionTextDualEncoder model)"),GFr=l(),cE=a("li"),R2e=a("strong"),XFr=o("vit"),VFr=o(" \u2014 "),HX=a("a"),zFr=o("FlaxViTModel"),WFr=o(" (ViT model)"),QFr=l(),mE=a("li"),S2e=a("strong"),HFr=o("wav2vec2"),UFr=o(" \u2014 "),UX=a("a"),JFr=o("FlaxWav2Vec2Model"),YFr=o(" (Wav2Vec2 model)"),KFr=l(),fE=a("li"),P2e=a("strong"),ZFr=o("xglm"),eCr=o(" \u2014 "),JX=a("a"),oCr=o("FlaxXGLMModel"),rCr=o(" (XGLM model)"),tCr=l(),gE=a("li"),$2e=a("strong"),aCr=o("xlm-roberta"),sCr=o(" \u2014 "),YX=a("a"),nCr=o("FlaxXLMRobertaModel"),lCr=o(" (XLM-RoBERTa model)"),iCr=l(),I2e=a("p"),dCr=o("Examples:"),cCr=l(),m(_L.$$.fragment),$ke=l(),om=a("h2"),hE=a("a"),j2e=a("span"),m(bL.$$.fragment),mCr=l(),D2e=a("span"),fCr=o("FlaxAutoModelForCausalLM"),Ike=l(),Sr=a("div"),m(vL.$$.fragment),gCr=l(),rm=a("p"),hCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),N2e=a("code"),uCr=o("from_pretrained()"),pCr=o("class method or the "),q2e=a("code"),_Cr=o("from_config()"),bCr=o(`class
method.`),vCr=l(),TL=a("p"),TCr=o("This class cannot be instantiated directly using "),O2e=a("code"),FCr=o("__init__()"),CCr=o(" (throws an error)."),MCr=l(),At=a("div"),m(FL.$$.fragment),ECr=l(),G2e=a("p"),yCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wCr=l(),tm=a("p"),ACr=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),LCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=a("code"),xCr=o("from_pretrained()"),kCr=o("to load the model weights."),RCr=l(),z2e=a("p"),SCr=o("Examples:"),PCr=l(),m(CL.$$.fragment),$Cr=l(),Lo=a("div"),m(ML.$$.fragment),ICr=l(),W2e=a("p"),jCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DCr=l(),Bs=a("p"),NCr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),qCr=o("model_type"),OCr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),GCr=o("pretrained_model_name_or_path"),XCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),VCr=o("pretrained_model_name_or_path"),zCr=o(":"),WCr=l(),ca=a("ul"),uE=a("li"),J2e=a("strong"),QCr=o("bart"),HCr=o(" \u2014 "),KX=a("a"),UCr=o("FlaxBartForCausalLM"),JCr=o(" (BART model)"),YCr=l(),pE=a("li"),Y2e=a("strong"),KCr=o("gpt2"),ZCr=o(" \u2014 "),ZX=a("a"),eMr=o("FlaxGPT2LMHeadModel"),oMr=o(" (OpenAI GPT-2 model)"),rMr=l(),_E=a("li"),K2e=a("strong"),tMr=o("gpt_neo"),aMr=o(" \u2014 "),eV=a("a"),sMr=o("FlaxGPTNeoForCausalLM"),nMr=o(" (GPT Neo model)"),lMr=l(),bE=a("li"),Z2e=a("strong"),iMr=o("gptj"),dMr=o(" \u2014 "),oV=a("a"),cMr=o("FlaxGPTJForCausalLM"),mMr=o(" (GPT-J model)"),fMr=l(),vE=a("li"),eve=a("strong"),gMr=o("xglm"),hMr=o(" \u2014 "),rV=a("a"),uMr=o("FlaxXGLMForCausalLM"),pMr=o(" (XGLM model)"),_Mr=l(),ove=a("p"),bMr=o("Examples:"),vMr=l(),m(EL.$$.fragment),jke=l(),am=a("h2"),TE=a("a"),rve=a("span"),m(yL.$$.fragment),TMr=l(),tve=a("span"),FMr=o("FlaxAutoModelForPreTraining"),Dke=l(),Pr=a("div"),m(wL.$$.fragment),CMr=l(),sm=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ave=a("code"),EMr=o("from_pretrained()"),yMr=o("class method or the "),sve=a("code"),wMr=o("from_config()"),AMr=o(`class
method.`),LMr=l(),AL=a("p"),BMr=o("This class cannot be instantiated directly using "),nve=a("code"),xMr=o("__init__()"),kMr=o(" (throws an error)."),RMr=l(),Lt=a("div"),m(LL.$$.fragment),SMr=l(),lve=a("p"),PMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Mr=l(),nm=a("p"),IMr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),jMr=o("not"),DMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dve=a("code"),NMr=o("from_pretrained()"),qMr=o("to load the model weights."),OMr=l(),cve=a("p"),GMr=o("Examples:"),XMr=l(),m(BL.$$.fragment),VMr=l(),Bo=a("div"),m(xL.$$.fragment),zMr=l(),mve=a("p"),WMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QMr=l(),xs=a("p"),HMr=o("The model class to instantiate is selected based on the "),fve=a("code"),UMr=o("model_type"),JMr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),ZMr=o("pretrained_model_name_or_path"),e4r=o(":"),o4r=l(),ce=a("ul"),FE=a("li"),uve=a("strong"),r4r=o("albert"),t4r=o(" \u2014 "),tV=a("a"),a4r=o("FlaxAlbertForPreTraining"),s4r=o(" (ALBERT model)"),n4r=l(),CE=a("li"),pve=a("strong"),l4r=o("bart"),i4r=o(" \u2014 "),aV=a("a"),d4r=o("FlaxBartForConditionalGeneration"),c4r=o(" (BART model)"),m4r=l(),ME=a("li"),_ve=a("strong"),f4r=o("bert"),g4r=o(" \u2014 "),sV=a("a"),h4r=o("FlaxBertForPreTraining"),u4r=o(" (BERT model)"),p4r=l(),EE=a("li"),bve=a("strong"),_4r=o("big_bird"),b4r=o(" \u2014 "),nV=a("a"),v4r=o("FlaxBigBirdForPreTraining"),T4r=o(" (BigBird model)"),F4r=l(),yE=a("li"),vve=a("strong"),C4r=o("electra"),M4r=o(" \u2014 "),lV=a("a"),E4r=o("FlaxElectraForPreTraining"),y4r=o(" (ELECTRA model)"),w4r=l(),wE=a("li"),Tve=a("strong"),A4r=o("mbart"),L4r=o(" \u2014 "),iV=a("a"),B4r=o("FlaxMBartForConditionalGeneration"),x4r=o(" (mBART model)"),k4r=l(),AE=a("li"),Fve=a("strong"),R4r=o("mt5"),S4r=o(" \u2014 "),dV=a("a"),P4r=o("FlaxMT5ForConditionalGeneration"),$4r=o(" (mT5 model)"),I4r=l(),LE=a("li"),Cve=a("strong"),j4r=o("roberta"),D4r=o(" \u2014 "),cV=a("a"),N4r=o("FlaxRobertaForMaskedLM"),q4r=o(" (RoBERTa model)"),O4r=l(),BE=a("li"),Mve=a("strong"),G4r=o("roformer"),X4r=o(" \u2014 "),mV=a("a"),V4r=o("FlaxRoFormerForMaskedLM"),z4r=o(" (RoFormer model)"),W4r=l(),xE=a("li"),Eve=a("strong"),Q4r=o("t5"),H4r=o(" \u2014 "),fV=a("a"),U4r=o("FlaxT5ForConditionalGeneration"),J4r=o(" (T5 model)"),Y4r=l(),kE=a("li"),yve=a("strong"),K4r=o("wav2vec2"),Z4r=o(" \u2014 "),gV=a("a"),eEr=o("FlaxWav2Vec2ForPreTraining"),oEr=o(" (Wav2Vec2 model)"),rEr=l(),RE=a("li"),wve=a("strong"),tEr=o("xlm-roberta"),aEr=o(" \u2014 "),hV=a("a"),sEr=o("FlaxXLMRobertaForMaskedLM"),nEr=o(" (XLM-RoBERTa model)"),lEr=l(),Ave=a("p"),iEr=o("Examples:"),dEr=l(),m(kL.$$.fragment),Nke=l(),lm=a("h2"),SE=a("a"),Lve=a("span"),m(RL.$$.fragment),cEr=l(),Bve=a("span"),mEr=o("FlaxAutoModelForMaskedLM"),qke=l(),$r=a("div"),m(SL.$$.fragment),fEr=l(),im=a("p"),gEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xve=a("code"),hEr=o("from_pretrained()"),uEr=o("class method or the "),kve=a("code"),pEr=o("from_config()"),_Er=o(`class
method.`),bEr=l(),PL=a("p"),vEr=o("This class cannot be instantiated directly using "),Rve=a("code"),TEr=o("__init__()"),FEr=o(" (throws an error)."),CEr=l(),Bt=a("div"),m($L.$$.fragment),MEr=l(),Sve=a("p"),EEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yEr=l(),dm=a("p"),wEr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),AEr=o("not"),LEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=a("code"),BEr=o("from_pretrained()"),xEr=o("to load the model weights."),kEr=l(),Ive=a("p"),REr=o("Examples:"),SEr=l(),m(IL.$$.fragment),PEr=l(),xo=a("div"),m(jL.$$.fragment),$Er=l(),jve=a("p"),IEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jEr=l(),ks=a("p"),DEr=o("The model class to instantiate is selected based on the "),Dve=a("code"),NEr=o("model_type"),qEr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),OEr=o("pretrained_model_name_or_path"),GEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),XEr=o("pretrained_model_name_or_path"),VEr=o(":"),zEr=l(),_e=a("ul"),PE=a("li"),Ove=a("strong"),WEr=o("albert"),QEr=o(" \u2014 "),uV=a("a"),HEr=o("FlaxAlbertForMaskedLM"),UEr=o(" (ALBERT model)"),JEr=l(),$E=a("li"),Gve=a("strong"),YEr=o("bart"),KEr=o(" \u2014 "),pV=a("a"),ZEr=o("FlaxBartForConditionalGeneration"),e3r=o(" (BART model)"),o3r=l(),IE=a("li"),Xve=a("strong"),r3r=o("bert"),t3r=o(" \u2014 "),_V=a("a"),a3r=o("FlaxBertForMaskedLM"),s3r=o(" (BERT model)"),n3r=l(),jE=a("li"),Vve=a("strong"),l3r=o("big_bird"),i3r=o(" \u2014 "),bV=a("a"),d3r=o("FlaxBigBirdForMaskedLM"),c3r=o(" (BigBird model)"),m3r=l(),DE=a("li"),zve=a("strong"),f3r=o("distilbert"),g3r=o(" \u2014 "),vV=a("a"),h3r=o("FlaxDistilBertForMaskedLM"),u3r=o(" (DistilBERT model)"),p3r=l(),NE=a("li"),Wve=a("strong"),_3r=o("electra"),b3r=o(" \u2014 "),TV=a("a"),v3r=o("FlaxElectraForMaskedLM"),T3r=o(" (ELECTRA model)"),F3r=l(),qE=a("li"),Qve=a("strong"),C3r=o("mbart"),M3r=o(" \u2014 "),FV=a("a"),E3r=o("FlaxMBartForConditionalGeneration"),y3r=o(" (mBART model)"),w3r=l(),OE=a("li"),Hve=a("strong"),A3r=o("roberta"),L3r=o(" \u2014 "),CV=a("a"),B3r=o("FlaxRobertaForMaskedLM"),x3r=o(" (RoBERTa model)"),k3r=l(),GE=a("li"),Uve=a("strong"),R3r=o("roformer"),S3r=o(" \u2014 "),MV=a("a"),P3r=o("FlaxRoFormerForMaskedLM"),$3r=o(" (RoFormer model)"),I3r=l(),XE=a("li"),Jve=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),EV=a("a"),N3r=o("FlaxXLMRobertaForMaskedLM"),q3r=o(" (XLM-RoBERTa model)"),O3r=l(),Yve=a("p"),G3r=o("Examples:"),X3r=l(),m(DL.$$.fragment),Oke=l(),cm=a("h2"),VE=a("a"),Kve=a("span"),m(NL.$$.fragment),V3r=l(),Zve=a("span"),z3r=o("FlaxAutoModelForSeq2SeqLM"),Gke=l(),Ir=a("div"),m(qL.$$.fragment),W3r=l(),mm=a("p"),Q3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eTe=a("code"),H3r=o("from_pretrained()"),U3r=o("class method or the "),oTe=a("code"),J3r=o("from_config()"),Y3r=o(`class
method.`),K3r=l(),OL=a("p"),Z3r=o("This class cannot be instantiated directly using "),rTe=a("code"),e5r=o("__init__()"),o5r=o(" (throws an error)."),r5r=l(),xt=a("div"),m(GL.$$.fragment),t5r=l(),tTe=a("p"),a5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),s5r=l(),fm=a("p"),n5r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),l5r=o("not"),i5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sTe=a("code"),d5r=o("from_pretrained()"),c5r=o("to load the model weights."),m5r=l(),nTe=a("p"),f5r=o("Examples:"),g5r=l(),m(XL.$$.fragment),h5r=l(),ko=a("div"),m(VL.$$.fragment),u5r=l(),lTe=a("p"),p5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_5r=l(),Rs=a("p"),b5r=o("The model class to instantiate is selected based on the "),iTe=a("code"),v5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),F5r=o("pretrained_model_name_or_path"),C5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(":"),y5r=l(),Ce=a("ul"),zE=a("li"),mTe=a("strong"),w5r=o("bart"),A5r=o(" \u2014 "),yV=a("a"),L5r=o("FlaxBartForConditionalGeneration"),B5r=o(" (BART model)"),x5r=l(),WE=a("li"),fTe=a("strong"),k5r=o("blenderbot"),R5r=o(" \u2014 "),wV=a("a"),S5r=o("FlaxBlenderbotForConditionalGeneration"),P5r=o(" (Blenderbot model)"),$5r=l(),QE=a("li"),gTe=a("strong"),I5r=o("blenderbot-small"),j5r=o(" \u2014 "),AV=a("a"),D5r=o("FlaxBlenderbotSmallForConditionalGeneration"),N5r=o(" (BlenderbotSmall model)"),q5r=l(),HE=a("li"),hTe=a("strong"),O5r=o("encoder-decoder"),G5r=o(" \u2014 "),LV=a("a"),X5r=o("FlaxEncoderDecoderModel"),V5r=o(" (Encoder decoder model)"),z5r=l(),UE=a("li"),uTe=a("strong"),W5r=o("marian"),Q5r=o(" \u2014 "),BV=a("a"),H5r=o("FlaxMarianMTModel"),U5r=o(" (Marian model)"),J5r=l(),JE=a("li"),pTe=a("strong"),Y5r=o("mbart"),K5r=o(" \u2014 "),xV=a("a"),Z5r=o("FlaxMBartForConditionalGeneration"),eyr=o(" (mBART model)"),oyr=l(),YE=a("li"),_Te=a("strong"),ryr=o("mt5"),tyr=o(" \u2014 "),kV=a("a"),ayr=o("FlaxMT5ForConditionalGeneration"),syr=o(" (mT5 model)"),nyr=l(),KE=a("li"),bTe=a("strong"),lyr=o("pegasus"),iyr=o(" \u2014 "),RV=a("a"),dyr=o("FlaxPegasusForConditionalGeneration"),cyr=o(" (Pegasus model)"),myr=l(),ZE=a("li"),vTe=a("strong"),fyr=o("t5"),gyr=o(" \u2014 "),SV=a("a"),hyr=o("FlaxT5ForConditionalGeneration"),uyr=o(" (T5 model)"),pyr=l(),TTe=a("p"),_yr=o("Examples:"),byr=l(),m(zL.$$.fragment),Xke=l(),gm=a("h2"),e3=a("a"),FTe=a("span"),m(WL.$$.fragment),vyr=l(),CTe=a("span"),Tyr=o("FlaxAutoModelForSequenceClassification"),Vke=l(),jr=a("div"),m(QL.$$.fragment),Fyr=l(),hm=a("p"),Cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MTe=a("code"),Myr=o("from_pretrained()"),Eyr=o("class method or the "),ETe=a("code"),yyr=o("from_config()"),wyr=o(`class
method.`),Ayr=l(),HL=a("p"),Lyr=o("This class cannot be instantiated directly using "),yTe=a("code"),Byr=o("__init__()"),xyr=o(" (throws an error)."),kyr=l(),kt=a("div"),m(UL.$$.fragment),Ryr=l(),wTe=a("p"),Syr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pyr=l(),um=a("p"),$yr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),Iyr=o("not"),jyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LTe=a("code"),Dyr=o("from_pretrained()"),Nyr=o("to load the model weights."),qyr=l(),BTe=a("p"),Oyr=o("Examples:"),Gyr=l(),m(JL.$$.fragment),Xyr=l(),Ro=a("div"),m(YL.$$.fragment),Vyr=l(),xTe=a("p"),zyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wyr=l(),Ss=a("p"),Qyr=o("The model class to instantiate is selected based on the "),kTe=a("code"),Hyr=o("model_type"),Uyr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),Kyr=o("pretrained_model_name_or_path"),Zyr=o(":"),ewr=l(),be=a("ul"),o3=a("li"),PTe=a("strong"),owr=o("albert"),rwr=o(" \u2014 "),PV=a("a"),twr=o("FlaxAlbertForSequenceClassification"),awr=o(" (ALBERT model)"),swr=l(),r3=a("li"),$Te=a("strong"),nwr=o("bart"),lwr=o(" \u2014 "),$V=a("a"),iwr=o("FlaxBartForSequenceClassification"),dwr=o(" (BART model)"),cwr=l(),t3=a("li"),ITe=a("strong"),mwr=o("bert"),fwr=o(" \u2014 "),IV=a("a"),gwr=o("FlaxBertForSequenceClassification"),hwr=o(" (BERT model)"),uwr=l(),a3=a("li"),jTe=a("strong"),pwr=o("big_bird"),_wr=o(" \u2014 "),jV=a("a"),bwr=o("FlaxBigBirdForSequenceClassification"),vwr=o(" (BigBird model)"),Twr=l(),s3=a("li"),DTe=a("strong"),Fwr=o("distilbert"),Cwr=o(" \u2014 "),DV=a("a"),Mwr=o("FlaxDistilBertForSequenceClassification"),Ewr=o(" (DistilBERT model)"),ywr=l(),n3=a("li"),NTe=a("strong"),wwr=o("electra"),Awr=o(" \u2014 "),NV=a("a"),Lwr=o("FlaxElectraForSequenceClassification"),Bwr=o(" (ELECTRA model)"),xwr=l(),l3=a("li"),qTe=a("strong"),kwr=o("mbart"),Rwr=o(" \u2014 "),qV=a("a"),Swr=o("FlaxMBartForSequenceClassification"),Pwr=o(" (mBART model)"),$wr=l(),i3=a("li"),OTe=a("strong"),Iwr=o("roberta"),jwr=o(" \u2014 "),OV=a("a"),Dwr=o("FlaxRobertaForSequenceClassification"),Nwr=o(" (RoBERTa model)"),qwr=l(),d3=a("li"),GTe=a("strong"),Owr=o("roformer"),Gwr=o(" \u2014 "),GV=a("a"),Xwr=o("FlaxRoFormerForSequenceClassification"),Vwr=o(" (RoFormer model)"),zwr=l(),c3=a("li"),XTe=a("strong"),Wwr=o("xlm-roberta"),Qwr=o(" \u2014 "),XV=a("a"),Hwr=o("FlaxXLMRobertaForSequenceClassification"),Uwr=o(" (XLM-RoBERTa model)"),Jwr=l(),VTe=a("p"),Ywr=o("Examples:"),Kwr=l(),m(KL.$$.fragment),zke=l(),pm=a("h2"),m3=a("a"),zTe=a("span"),m(ZL.$$.fragment),Zwr=l(),WTe=a("span"),e6r=o("FlaxAutoModelForQuestionAnswering"),Wke=l(),Dr=a("div"),m(e8.$$.fragment),o6r=l(),_m=a("p"),r6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QTe=a("code"),t6r=o("from_pretrained()"),a6r=o("class method or the "),HTe=a("code"),s6r=o("from_config()"),n6r=o(`class
method.`),l6r=l(),o8=a("p"),i6r=o("This class cannot be instantiated directly using "),UTe=a("code"),d6r=o("__init__()"),c6r=o(" (throws an error)."),m6r=l(),Rt=a("div"),m(r8.$$.fragment),f6r=l(),JTe=a("p"),g6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h6r=l(),bm=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),p6r=o("not"),_6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KTe=a("code"),b6r=o("from_pretrained()"),v6r=o("to load the model weights."),T6r=l(),ZTe=a("p"),F6r=o("Examples:"),C6r=l(),m(t8.$$.fragment),M6r=l(),So=a("div"),m(a8.$$.fragment),E6r=l(),e1e=a("p"),y6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w6r=l(),Ps=a("p"),A6r=o("The model class to instantiate is selected based on the "),o1e=a("code"),L6r=o("model_type"),B6r=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),x6r=o("pretrained_model_name_or_path"),k6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),R6r=o("pretrained_model_name_or_path"),S6r=o(":"),P6r=l(),ve=a("ul"),f3=a("li"),a1e=a("strong"),$6r=o("albert"),I6r=o(" \u2014 "),VV=a("a"),j6r=o("FlaxAlbertForQuestionAnswering"),D6r=o(" (ALBERT model)"),N6r=l(),g3=a("li"),s1e=a("strong"),q6r=o("bart"),O6r=o(" \u2014 "),zV=a("a"),G6r=o("FlaxBartForQuestionAnswering"),X6r=o(" (BART model)"),V6r=l(),h3=a("li"),n1e=a("strong"),z6r=o("bert"),W6r=o(" \u2014 "),WV=a("a"),Q6r=o("FlaxBertForQuestionAnswering"),H6r=o(" (BERT model)"),U6r=l(),u3=a("li"),l1e=a("strong"),J6r=o("big_bird"),Y6r=o(" \u2014 "),QV=a("a"),K6r=o("FlaxBigBirdForQuestionAnswering"),Z6r=o(" (BigBird model)"),eAr=l(),p3=a("li"),i1e=a("strong"),oAr=o("distilbert"),rAr=o(" \u2014 "),HV=a("a"),tAr=o("FlaxDistilBertForQuestionAnswering"),aAr=o(" (DistilBERT model)"),sAr=l(),_3=a("li"),d1e=a("strong"),nAr=o("electra"),lAr=o(" \u2014 "),UV=a("a"),iAr=o("FlaxElectraForQuestionAnswering"),dAr=o(" (ELECTRA model)"),cAr=l(),b3=a("li"),c1e=a("strong"),mAr=o("mbart"),fAr=o(" \u2014 "),JV=a("a"),gAr=o("FlaxMBartForQuestionAnswering"),hAr=o(" (mBART model)"),uAr=l(),v3=a("li"),m1e=a("strong"),pAr=o("roberta"),_Ar=o(" \u2014 "),YV=a("a"),bAr=o("FlaxRobertaForQuestionAnswering"),vAr=o(" (RoBERTa model)"),TAr=l(),T3=a("li"),f1e=a("strong"),FAr=o("roformer"),CAr=o(" \u2014 "),KV=a("a"),MAr=o("FlaxRoFormerForQuestionAnswering"),EAr=o(" (RoFormer model)"),yAr=l(),F3=a("li"),g1e=a("strong"),wAr=o("xlm-roberta"),AAr=o(" \u2014 "),ZV=a("a"),LAr=o("FlaxXLMRobertaForQuestionAnswering"),BAr=o(" (XLM-RoBERTa model)"),xAr=l(),h1e=a("p"),kAr=o("Examples:"),RAr=l(),m(s8.$$.fragment),Qke=l(),vm=a("h2"),C3=a("a"),u1e=a("span"),m(n8.$$.fragment),SAr=l(),p1e=a("span"),PAr=o("FlaxAutoModelForTokenClassification"),Hke=l(),Nr=a("div"),m(l8.$$.fragment),$Ar=l(),Tm=a("p"),IAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_1e=a("code"),jAr=o("from_pretrained()"),DAr=o("class method or the "),b1e=a("code"),NAr=o("from_config()"),qAr=o(`class
method.`),OAr=l(),i8=a("p"),GAr=o("This class cannot be instantiated directly using "),v1e=a("code"),XAr=o("__init__()"),VAr=o(" (throws an error)."),zAr=l(),St=a("div"),m(d8.$$.fragment),WAr=l(),T1e=a("p"),QAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HAr=l(),Fm=a("p"),UAr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),JAr=o("not"),YAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C1e=a("code"),KAr=o("from_pretrained()"),ZAr=o("to load the model weights."),e0r=l(),M1e=a("p"),o0r=o("Examples:"),r0r=l(),m(c8.$$.fragment),t0r=l(),Po=a("div"),m(m8.$$.fragment),a0r=l(),E1e=a("p"),s0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n0r=l(),$s=a("p"),l0r=o("The model class to instantiate is selected based on the "),y1e=a("code"),i0r=o("model_type"),d0r=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),c0r=o("pretrained_model_name_or_path"),m0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),f0r=o("pretrained_model_name_or_path"),g0r=o(":"),h0r=l(),Re=a("ul"),M3=a("li"),L1e=a("strong"),u0r=o("albert"),p0r=o(" \u2014 "),ez=a("a"),_0r=o("FlaxAlbertForTokenClassification"),b0r=o(" (ALBERT model)"),v0r=l(),E3=a("li"),B1e=a("strong"),T0r=o("bert"),F0r=o(" \u2014 "),oz=a("a"),C0r=o("FlaxBertForTokenClassification"),M0r=o(" (BERT model)"),E0r=l(),y3=a("li"),x1e=a("strong"),y0r=o("big_bird"),w0r=o(" \u2014 "),rz=a("a"),A0r=o("FlaxBigBirdForTokenClassification"),L0r=o(" (BigBird model)"),B0r=l(),w3=a("li"),k1e=a("strong"),x0r=o("distilbert"),k0r=o(" \u2014 "),tz=a("a"),R0r=o("FlaxDistilBertForTokenClassification"),S0r=o(" (DistilBERT model)"),P0r=l(),A3=a("li"),R1e=a("strong"),$0r=o("electra"),I0r=o(" \u2014 "),az=a("a"),j0r=o("FlaxElectraForTokenClassification"),D0r=o(" (ELECTRA model)"),N0r=l(),L3=a("li"),S1e=a("strong"),q0r=o("roberta"),O0r=o(" \u2014 "),sz=a("a"),G0r=o("FlaxRobertaForTokenClassification"),X0r=o(" (RoBERTa model)"),V0r=l(),B3=a("li"),P1e=a("strong"),z0r=o("roformer"),W0r=o(" \u2014 "),nz=a("a"),Q0r=o("FlaxRoFormerForTokenClassification"),H0r=o(" (RoFormer model)"),U0r=l(),x3=a("li"),$1e=a("strong"),J0r=o("xlm-roberta"),Y0r=o(" \u2014 "),lz=a("a"),K0r=o("FlaxXLMRobertaForTokenClassification"),Z0r=o(" (XLM-RoBERTa model)"),eLr=l(),I1e=a("p"),oLr=o("Examples:"),rLr=l(),m(f8.$$.fragment),Uke=l(),Cm=a("h2"),k3=a("a"),j1e=a("span"),m(g8.$$.fragment),tLr=l(),D1e=a("span"),aLr=o("FlaxAutoModelForMultipleChoice"),Jke=l(),qr=a("div"),m(h8.$$.fragment),sLr=l(),Mm=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),N1e=a("code"),lLr=o("from_pretrained()"),iLr=o("class method or the "),q1e=a("code"),dLr=o("from_config()"),cLr=o(`class
method.`),mLr=l(),u8=a("p"),fLr=o("This class cannot be instantiated directly using "),O1e=a("code"),gLr=o("__init__()"),hLr=o(" (throws an error)."),uLr=l(),Pt=a("div"),m(p8.$$.fragment),pLr=l(),G1e=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bLr=l(),Em=a("p"),vLr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),TLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=a("code"),CLr=o("from_pretrained()"),MLr=o("to load the model weights."),ELr=l(),z1e=a("p"),yLr=o("Examples:"),wLr=l(),m(_8.$$.fragment),ALr=l(),$o=a("div"),m(b8.$$.fragment),LLr=l(),W1e=a("p"),BLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xLr=l(),Is=a("p"),kLr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),RLr=o("model_type"),SLr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),PLr=o("pretrained_model_name_or_path"),$Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),ILr=o("pretrained_model_name_or_path"),jLr=o(":"),DLr=l(),Se=a("ul"),R3=a("li"),J1e=a("strong"),NLr=o("albert"),qLr=o(" \u2014 "),iz=a("a"),OLr=o("FlaxAlbertForMultipleChoice"),GLr=o(" (ALBERT model)"),XLr=l(),S3=a("li"),Y1e=a("strong"),VLr=o("bert"),zLr=o(" \u2014 "),dz=a("a"),WLr=o("FlaxBertForMultipleChoice"),QLr=o(" (BERT model)"),HLr=l(),P3=a("li"),K1e=a("strong"),ULr=o("big_bird"),JLr=o(" \u2014 "),cz=a("a"),YLr=o("FlaxBigBirdForMultipleChoice"),KLr=o(" (BigBird model)"),ZLr=l(),$3=a("li"),Z1e=a("strong"),e8r=o("distilbert"),o8r=o(" \u2014 "),mz=a("a"),r8r=o("FlaxDistilBertForMultipleChoice"),t8r=o(" (DistilBERT model)"),a8r=l(),I3=a("li"),eFe=a("strong"),s8r=o("electra"),n8r=o(" \u2014 "),fz=a("a"),l8r=o("FlaxElectraForMultipleChoice"),i8r=o(" (ELECTRA model)"),d8r=l(),j3=a("li"),oFe=a("strong"),c8r=o("roberta"),m8r=o(" \u2014 "),gz=a("a"),f8r=o("FlaxRobertaForMultipleChoice"),g8r=o(" (RoBERTa model)"),h8r=l(),D3=a("li"),rFe=a("strong"),u8r=o("roformer"),p8r=o(" \u2014 "),hz=a("a"),_8r=o("FlaxRoFormerForMultipleChoice"),b8r=o(" (RoFormer model)"),v8r=l(),N3=a("li"),tFe=a("strong"),T8r=o("xlm-roberta"),F8r=o(" \u2014 "),uz=a("a"),C8r=o("FlaxXLMRobertaForMultipleChoice"),M8r=o(" (XLM-RoBERTa model)"),E8r=l(),aFe=a("p"),y8r=o("Examples:"),w8r=l(),m(v8.$$.fragment),Yke=l(),ym=a("h2"),q3=a("a"),sFe=a("span"),m(T8.$$.fragment),A8r=l(),nFe=a("span"),L8r=o("FlaxAutoModelForNextSentencePrediction"),Kke=l(),Or=a("div"),m(F8.$$.fragment),B8r=l(),wm=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lFe=a("code"),k8r=o("from_pretrained()"),R8r=o("class method or the "),iFe=a("code"),S8r=o("from_config()"),P8r=o(`class
method.`),$8r=l(),C8=a("p"),I8r=o("This class cannot be instantiated directly using "),dFe=a("code"),j8r=o("__init__()"),D8r=o(" (throws an error)."),N8r=l(),$t=a("div"),m(M8.$$.fragment),q8r=l(),cFe=a("p"),O8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),G8r=l(),Am=a("p"),X8r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),V8r=o("not"),z8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fFe=a("code"),W8r=o("from_pretrained()"),Q8r=o("to load the model weights."),H8r=l(),gFe=a("p"),U8r=o("Examples:"),J8r=l(),m(E8.$$.fragment),Y8r=l(),Io=a("div"),m(y8.$$.fragment),K8r=l(),hFe=a("p"),Z8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e7r=l(),js=a("p"),o7r=o("The model class to instantiate is selected based on the "),uFe=a("code"),r7r=o("model_type"),t7r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),a7r=o("pretrained_model_name_or_path"),s7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),n7r=o("pretrained_model_name_or_path"),l7r=o(":"),i7r=l(),bFe=a("ul"),O3=a("li"),vFe=a("strong"),d7r=o("bert"),c7r=o(" \u2014 "),pz=a("a"),m7r=o("FlaxBertForNextSentencePrediction"),f7r=o(" (BERT model)"),g7r=l(),TFe=a("p"),h7r=o("Examples:"),u7r=l(),m(w8.$$.fragment),Zke=l(),Lm=a("h2"),G3=a("a"),FFe=a("span"),m(A8.$$.fragment),p7r=l(),CFe=a("span"),_7r=o("FlaxAutoModelForImageClassification"),eRe=l(),Gr=a("div"),m(L8.$$.fragment),b7r=l(),Bm=a("p"),v7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MFe=a("code"),T7r=o("from_pretrained()"),F7r=o("class method or the "),EFe=a("code"),C7r=o("from_config()"),M7r=o(`class
method.`),E7r=l(),B8=a("p"),y7r=o("This class cannot be instantiated directly using "),yFe=a("code"),w7r=o("__init__()"),A7r=o(" (throws an error)."),L7r=l(),It=a("div"),m(x8.$$.fragment),B7r=l(),wFe=a("p"),x7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),k7r=l(),xm=a("p"),R7r=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),S7r=o("not"),P7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LFe=a("code"),$7r=o("from_pretrained()"),I7r=o("to load the model weights."),j7r=l(),BFe=a("p"),D7r=o("Examples:"),N7r=l(),m(k8.$$.fragment),q7r=l(),jo=a("div"),m(R8.$$.fragment),O7r=l(),xFe=a("p"),G7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X7r=l(),Ds=a("p"),V7r=o("The model class to instantiate is selected based on the "),kFe=a("code"),z7r=o("model_type"),W7r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),Q7r=o("pretrained_model_name_or_path"),H7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),U7r=o("pretrained_model_name_or_path"),J7r=o(":"),Y7r=l(),S8=a("ul"),X3=a("li"),PFe=a("strong"),K7r=o("beit"),Z7r=o(" \u2014 "),_z=a("a"),e9r=o("FlaxBeitForImageClassification"),o9r=o(" (BEiT model)"),r9r=l(),V3=a("li"),$Fe=a("strong"),t9r=o("vit"),a9r=o(" \u2014 "),bz=a("a"),s9r=o("FlaxViTForImageClassification"),n9r=o(" (ViT model)"),l9r=l(),IFe=a("p"),i9r=o("Examples:"),d9r=l(),m(P8.$$.fragment),oRe=l(),km=a("h2"),z3=a("a"),jFe=a("span"),m($8.$$.fragment),c9r=l(),DFe=a("span"),m9r=o("FlaxAutoModelForVision2Seq"),rRe=l(),Xr=a("div"),m(I8.$$.fragment),f9r=l(),Rm=a("p"),g9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NFe=a("code"),h9r=o("from_pretrained()"),u9r=o("class method or the "),qFe=a("code"),p9r=o("from_config()"),_9r=o(`class
method.`),b9r=l(),j8=a("p"),v9r=o("This class cannot be instantiated directly using "),OFe=a("code"),T9r=o("__init__()"),F9r=o(" (throws an error)."),C9r=l(),jt=a("div"),m(D8.$$.fragment),M9r=l(),GFe=a("p"),E9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y9r=l(),Sm=a("p"),w9r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),A9r=o("not"),L9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VFe=a("code"),B9r=o("from_pretrained()"),x9r=o("to load the model weights."),k9r=l(),zFe=a("p"),R9r=o("Examples:"),S9r=l(),m(N8.$$.fragment),P9r=l(),Do=a("div"),m(q8.$$.fragment),$9r=l(),WFe=a("p"),I9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j9r=l(),Ns=a("p"),D9r=o("The model class to instantiate is selected based on the "),QFe=a("code"),N9r=o("model_type"),q9r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),O9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),X9r=o("pretrained_model_name_or_path"),V9r=o(":"),z9r=l(),JFe=a("ul"),W3=a("li"),YFe=a("strong"),W9r=o("vision-encoder-decoder"),Q9r=o(" \u2014 "),vz=a("a"),H9r=o("FlaxVisionEncoderDecoderModel"),U9r=o(" (Vision Encoder decoder model)"),J9r=l(),KFe=a("p"),Y9r=o("Examples:"),K9r=l(),m(O8.$$.fragment),this.h()},l(d){const _=ACt('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(t),Pe=i(d),de=s(d,"H1",{class:!0});var G8=n(de);ge=s(G8,"A",{id:!0,class:!0,href:!0});var ZFe=n(ge);io=s(ZFe,"SPAN",{});var eCe=n(io);f(me.$$.fragment,eCe),eCe.forEach(t),ZFe.forEach(t),Te=i(G8),Vo=s(G8,"SPAN",{});var eBr=n(Vo);ji=r(eBr,"Auto Classes"),eBr.forEach(t),G8.forEach(t),$m=i(d),ma=s(d,"P",{});var aRe=n(ma);Di=r(aRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=s(aRe,"CODE",{});var oBr=n(Ni);W5=r(oBr,"from_pretrained()"),oBr.forEach(t),Im=r(aRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),aRe.forEach(t),Le=i(d),co=s(d,"P",{});var Q3=n(co);qi=r(Q3,"Instantiating one of "),qs=s(Q3,"A",{href:!0});var rBr=n(qs);Q5=r(rBr,"AutoConfig"),rBr.forEach(t),Os=r(Q3,", "),Gs=s(Q3,"A",{href:!0});var tBr=n(Gs);H5=r(tBr,"AutoModel"),tBr.forEach(t),Oi=r(Q3,`, and
`),Xs=s(Q3,"A",{href:!0});var aBr=n(Xs);U5=r(aBr,"AutoTokenizer"),aBr.forEach(t),Gi=r(Q3," will directly create a class of the relevant architecture. For instance"),Q3.forEach(t),jm=i(d),f(qa.$$.fragment,d),mo=i(d),he=s(d,"P",{});var sRe=n(he);N7=r(sRe,"will create a model that is an instance of "),Xi=s(sRe,"A",{href:!0});var sBr=n(Xi);q7=r(sBr,"BertModel"),sBr.forEach(t),O7=r(sRe,"."),sRe.forEach(t),zo=i(d),Oa=s(d,"P",{});var nRe=n(Oa);G7=r(nRe,"There is one class of "),Dm=s(nRe,"CODE",{});var nBr=n(Dm);X7=r(nBr,"AutoModel"),nBr.forEach(t),pPe=r(nRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nRe.forEach(t),rxe=i(d),Vi=s(d,"H2",{class:!0});var lRe=n(Vi);Nm=s(lRe,"A",{id:!0,class:!0,href:!0});var lBr=n(Nm);fQ=s(lBr,"SPAN",{});var iBr=n(fQ);f(J5.$$.fragment,iBr),iBr.forEach(t),lBr.forEach(t),_Pe=i(lRe),gQ=s(lRe,"SPAN",{});var dBr=n(gQ);bPe=r(dBr,"Extending the Auto Classes"),dBr.forEach(t),lRe.forEach(t),txe=i(d),Vs=s(d,"P",{});var Tz=n(Vs);vPe=r(Tz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hQ=s(Tz,"CODE",{});var cBr=n(hQ);TPe=r(cBr,"NewModel"),cBr.forEach(t),FPe=r(Tz,", make sure you have a "),uQ=s(Tz,"CODE",{});var mBr=n(uQ);CPe=r(mBr,"NewModelConfig"),mBr.forEach(t),MPe=r(Tz,` then you can add those to the auto
classes like this:`),Tz.forEach(t),axe=i(d),f(Y5.$$.fragment,d),sxe=i(d),V7=s(d,"P",{});var fBr=n(V7);EPe=r(fBr,"You will then be able to use the auto classes like you would usually do!"),fBr.forEach(t),nxe=i(d),f(qm.$$.fragment,d),lxe=i(d),zi=s(d,"H2",{class:!0});var iRe=n(zi);Om=s(iRe,"A",{id:!0,class:!0,href:!0});var gBr=n(Om);pQ=s(gBr,"SPAN",{});var hBr=n(pQ);f(K5.$$.fragment,hBr),hBr.forEach(t),gBr.forEach(t),yPe=i(iRe),_Q=s(iRe,"SPAN",{});var uBr=n(_Q);wPe=r(uBr,"AutoConfig"),uBr.forEach(t),iRe.forEach(t),ixe=i(d),Wo=s(d,"DIV",{class:!0});var Gn=n(Wo);f(Z5.$$.fragment,Gn),APe=i(Gn),ey=s(Gn,"P",{});var dRe=n(ey);LPe=r(dRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),z7=s(dRe,"A",{href:!0});var pBr=n(z7);BPe=r(pBr,"from_pretrained()"),pBr.forEach(t),xPe=r(dRe," class method."),dRe.forEach(t),kPe=i(Gn),oy=s(Gn,"P",{});var cRe=n(oy);RPe=r(cRe,"This class cannot be instantiated directly using "),bQ=s(cRe,"CODE",{});var _Br=n(bQ);SPe=r(_Br,"__init__()"),_Br.forEach(t),PPe=r(cRe," (throws an error)."),cRe.forEach(t),$Pe=i(Gn),fo=s(Gn,"DIV",{class:!0});var ga=n(fo);f(ry.$$.fragment,ga),IPe=i(ga),vQ=s(ga,"P",{});var bBr=n(vQ);jPe=r(bBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bBr.forEach(t),DPe=i(ga),Wi=s(ga,"P",{});var Fz=n(Wi);NPe=r(Fz,"The configuration class to instantiate is selected based on the "),TQ=s(Fz,"CODE",{});var vBr=n(TQ);qPe=r(vBr,"model_type"),vBr.forEach(t),OPe=r(Fz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FQ=s(Fz,"CODE",{});var TBr=n(FQ);GPe=r(TBr,"pretrained_model_name_or_path"),TBr.forEach(t),XPe=r(Fz,":"),Fz.forEach(t),VPe=i(ga),v=s(ga,"UL",{});var T=n(v);Gm=s(T,"LI",{});var oCe=n(Gm);CQ=s(oCe,"STRONG",{});var FBr=n(CQ);zPe=r(FBr,"albert"),FBr.forEach(t),WPe=r(oCe," \u2014 "),W7=s(oCe,"A",{href:!0});var CBr=n(W7);QPe=r(CBr,"AlbertConfig"),CBr.forEach(t),HPe=r(oCe," (ALBERT model)"),oCe.forEach(t),UPe=i(T),Xm=s(T,"LI",{});var rCe=n(Xm);MQ=s(rCe,"STRONG",{});var MBr=n(MQ);JPe=r(MBr,"bart"),MBr.forEach(t),YPe=r(rCe," \u2014 "),Q7=s(rCe,"A",{href:!0});var EBr=n(Q7);KPe=r(EBr,"BartConfig"),EBr.forEach(t),ZPe=r(rCe," (BART model)"),rCe.forEach(t),e$e=i(T),Vm=s(T,"LI",{});var tCe=n(Vm);EQ=s(tCe,"STRONG",{});var yBr=n(EQ);o$e=r(yBr,"beit"),yBr.forEach(t),r$e=r(tCe," \u2014 "),H7=s(tCe,"A",{href:!0});var wBr=n(H7);t$e=r(wBr,"BeitConfig"),wBr.forEach(t),a$e=r(tCe," (BEiT model)"),tCe.forEach(t),s$e=i(T),zm=s(T,"LI",{});var aCe=n(zm);yQ=s(aCe,"STRONG",{});var ABr=n(yQ);n$e=r(ABr,"bert"),ABr.forEach(t),l$e=r(aCe," \u2014 "),U7=s(aCe,"A",{href:!0});var LBr=n(U7);i$e=r(LBr,"BertConfig"),LBr.forEach(t),d$e=r(aCe," (BERT model)"),aCe.forEach(t),c$e=i(T),Wm=s(T,"LI",{});var sCe=n(Wm);wQ=s(sCe,"STRONG",{});var BBr=n(wQ);m$e=r(BBr,"bert-generation"),BBr.forEach(t),f$e=r(sCe," \u2014 "),J7=s(sCe,"A",{href:!0});var xBr=n(J7);g$e=r(xBr,"BertGenerationConfig"),xBr.forEach(t),h$e=r(sCe," (Bert Generation model)"),sCe.forEach(t),u$e=i(T),Qm=s(T,"LI",{});var nCe=n(Qm);AQ=s(nCe,"STRONG",{});var kBr=n(AQ);p$e=r(kBr,"big_bird"),kBr.forEach(t),_$e=r(nCe," \u2014 "),Y7=s(nCe,"A",{href:!0});var RBr=n(Y7);b$e=r(RBr,"BigBirdConfig"),RBr.forEach(t),v$e=r(nCe," (BigBird model)"),nCe.forEach(t),T$e=i(T),Hm=s(T,"LI",{});var lCe=n(Hm);LQ=s(lCe,"STRONG",{});var SBr=n(LQ);F$e=r(SBr,"bigbird_pegasus"),SBr.forEach(t),C$e=r(lCe," \u2014 "),K7=s(lCe,"A",{href:!0});var PBr=n(K7);M$e=r(PBr,"BigBirdPegasusConfig"),PBr.forEach(t),E$e=r(lCe," (BigBirdPegasus model)"),lCe.forEach(t),y$e=i(T),Um=s(T,"LI",{});var iCe=n(Um);BQ=s(iCe,"STRONG",{});var $Br=n(BQ);w$e=r($Br,"blenderbot"),$Br.forEach(t),A$e=r(iCe," \u2014 "),Z7=s(iCe,"A",{href:!0});var IBr=n(Z7);L$e=r(IBr,"BlenderbotConfig"),IBr.forEach(t),B$e=r(iCe," (Blenderbot model)"),iCe.forEach(t),x$e=i(T),Jm=s(T,"LI",{});var dCe=n(Jm);xQ=s(dCe,"STRONG",{});var jBr=n(xQ);k$e=r(jBr,"blenderbot-small"),jBr.forEach(t),R$e=r(dCe," \u2014 "),e9=s(dCe,"A",{href:!0});var DBr=n(e9);S$e=r(DBr,"BlenderbotSmallConfig"),DBr.forEach(t),P$e=r(dCe," (BlenderbotSmall model)"),dCe.forEach(t),$$e=i(T),Ym=s(T,"LI",{});var cCe=n(Ym);kQ=s(cCe,"STRONG",{});var NBr=n(kQ);I$e=r(NBr,"camembert"),NBr.forEach(t),j$e=r(cCe," \u2014 "),o9=s(cCe,"A",{href:!0});var qBr=n(o9);D$e=r(qBr,"CamembertConfig"),qBr.forEach(t),N$e=r(cCe," (CamemBERT model)"),cCe.forEach(t),q$e=i(T),Km=s(T,"LI",{});var mCe=n(Km);RQ=s(mCe,"STRONG",{});var OBr=n(RQ);O$e=r(OBr,"canine"),OBr.forEach(t),G$e=r(mCe," \u2014 "),r9=s(mCe,"A",{href:!0});var GBr=n(r9);X$e=r(GBr,"CanineConfig"),GBr.forEach(t),V$e=r(mCe," (Canine model)"),mCe.forEach(t),z$e=i(T),Zm=s(T,"LI",{});var fCe=n(Zm);SQ=s(fCe,"STRONG",{});var XBr=n(SQ);W$e=r(XBr,"clip"),XBr.forEach(t),Q$e=r(fCe," \u2014 "),t9=s(fCe,"A",{href:!0});var VBr=n(t9);H$e=r(VBr,"CLIPConfig"),VBr.forEach(t),U$e=r(fCe," (CLIP model)"),fCe.forEach(t),J$e=i(T),ef=s(T,"LI",{});var gCe=n(ef);PQ=s(gCe,"STRONG",{});var zBr=n(PQ);Y$e=r(zBr,"convbert"),zBr.forEach(t),K$e=r(gCe," \u2014 "),a9=s(gCe,"A",{href:!0});var WBr=n(a9);Z$e=r(WBr,"ConvBertConfig"),WBr.forEach(t),eIe=r(gCe," (ConvBERT model)"),gCe.forEach(t),oIe=i(T),of=s(T,"LI",{});var hCe=n(of);$Q=s(hCe,"STRONG",{});var QBr=n($Q);rIe=r(QBr,"convnext"),QBr.forEach(t),tIe=r(hCe," \u2014 "),s9=s(hCe,"A",{href:!0});var HBr=n(s9);aIe=r(HBr,"ConvNextConfig"),HBr.forEach(t),sIe=r(hCe," (ConvNext model)"),hCe.forEach(t),nIe=i(T),rf=s(T,"LI",{});var uCe=n(rf);IQ=s(uCe,"STRONG",{});var UBr=n(IQ);lIe=r(UBr,"ctrl"),UBr.forEach(t),iIe=r(uCe," \u2014 "),n9=s(uCe,"A",{href:!0});var JBr=n(n9);dIe=r(JBr,"CTRLConfig"),JBr.forEach(t),cIe=r(uCe," (CTRL model)"),uCe.forEach(t),mIe=i(T),tf=s(T,"LI",{});var pCe=n(tf);jQ=s(pCe,"STRONG",{});var YBr=n(jQ);fIe=r(YBr,"data2vec-audio"),YBr.forEach(t),gIe=r(pCe," \u2014 "),l9=s(pCe,"A",{href:!0});var KBr=n(l9);hIe=r(KBr,"Data2VecAudioConfig"),KBr.forEach(t),uIe=r(pCe," (Data2VecAudio model)"),pCe.forEach(t),pIe=i(T),af=s(T,"LI",{});var _Ce=n(af);DQ=s(_Ce,"STRONG",{});var ZBr=n(DQ);_Ie=r(ZBr,"data2vec-text"),ZBr.forEach(t),bIe=r(_Ce," \u2014 "),i9=s(_Ce,"A",{href:!0});var exr=n(i9);vIe=r(exr,"Data2VecTextConfig"),exr.forEach(t),TIe=r(_Ce," (Data2VecText model)"),_Ce.forEach(t),FIe=i(T),sf=s(T,"LI",{});var bCe=n(sf);NQ=s(bCe,"STRONG",{});var oxr=n(NQ);CIe=r(oxr,"deberta"),oxr.forEach(t),MIe=r(bCe," \u2014 "),d9=s(bCe,"A",{href:!0});var rxr=n(d9);EIe=r(rxr,"DebertaConfig"),rxr.forEach(t),yIe=r(bCe," (DeBERTa model)"),bCe.forEach(t),wIe=i(T),nf=s(T,"LI",{});var vCe=n(nf);qQ=s(vCe,"STRONG",{});var txr=n(qQ);AIe=r(txr,"deberta-v2"),txr.forEach(t),LIe=r(vCe," \u2014 "),c9=s(vCe,"A",{href:!0});var axr=n(c9);BIe=r(axr,"DebertaV2Config"),axr.forEach(t),xIe=r(vCe," (DeBERTa-v2 model)"),vCe.forEach(t),kIe=i(T),lf=s(T,"LI",{});var TCe=n(lf);OQ=s(TCe,"STRONG",{});var sxr=n(OQ);RIe=r(sxr,"deit"),sxr.forEach(t),SIe=r(TCe," \u2014 "),m9=s(TCe,"A",{href:!0});var nxr=n(m9);PIe=r(nxr,"DeiTConfig"),nxr.forEach(t),$Ie=r(TCe," (DeiT model)"),TCe.forEach(t),IIe=i(T),df=s(T,"LI",{});var FCe=n(df);GQ=s(FCe,"STRONG",{});var lxr=n(GQ);jIe=r(lxr,"detr"),lxr.forEach(t),DIe=r(FCe," \u2014 "),f9=s(FCe,"A",{href:!0});var ixr=n(f9);NIe=r(ixr,"DetrConfig"),ixr.forEach(t),qIe=r(FCe," (DETR model)"),FCe.forEach(t),OIe=i(T),cf=s(T,"LI",{});var CCe=n(cf);XQ=s(CCe,"STRONG",{});var dxr=n(XQ);GIe=r(dxr,"distilbert"),dxr.forEach(t),XIe=r(CCe," \u2014 "),g9=s(CCe,"A",{href:!0});var cxr=n(g9);VIe=r(cxr,"DistilBertConfig"),cxr.forEach(t),zIe=r(CCe," (DistilBERT model)"),CCe.forEach(t),WIe=i(T),mf=s(T,"LI",{});var MCe=n(mf);VQ=s(MCe,"STRONG",{});var mxr=n(VQ);QIe=r(mxr,"dpr"),mxr.forEach(t),HIe=r(MCe," \u2014 "),h9=s(MCe,"A",{href:!0});var fxr=n(h9);UIe=r(fxr,"DPRConfig"),fxr.forEach(t),JIe=r(MCe," (DPR model)"),MCe.forEach(t),YIe=i(T),ff=s(T,"LI",{});var ECe=n(ff);zQ=s(ECe,"STRONG",{});var gxr=n(zQ);KIe=r(gxr,"electra"),gxr.forEach(t),ZIe=r(ECe," \u2014 "),u9=s(ECe,"A",{href:!0});var hxr=n(u9);eje=r(hxr,"ElectraConfig"),hxr.forEach(t),oje=r(ECe," (ELECTRA model)"),ECe.forEach(t),rje=i(T),gf=s(T,"LI",{});var yCe=n(gf);WQ=s(yCe,"STRONG",{});var uxr=n(WQ);tje=r(uxr,"encoder-decoder"),uxr.forEach(t),aje=r(yCe," \u2014 "),p9=s(yCe,"A",{href:!0});var pxr=n(p9);sje=r(pxr,"EncoderDecoderConfig"),pxr.forEach(t),nje=r(yCe," (Encoder decoder model)"),yCe.forEach(t),lje=i(T),hf=s(T,"LI",{});var wCe=n(hf);QQ=s(wCe,"STRONG",{});var _xr=n(QQ);ije=r(_xr,"flaubert"),_xr.forEach(t),dje=r(wCe," \u2014 "),_9=s(wCe,"A",{href:!0});var bxr=n(_9);cje=r(bxr,"FlaubertConfig"),bxr.forEach(t),mje=r(wCe," (FlauBERT model)"),wCe.forEach(t),fje=i(T),uf=s(T,"LI",{});var ACe=n(uf);HQ=s(ACe,"STRONG",{});var vxr=n(HQ);gje=r(vxr,"fnet"),vxr.forEach(t),hje=r(ACe," \u2014 "),b9=s(ACe,"A",{href:!0});var Txr=n(b9);uje=r(Txr,"FNetConfig"),Txr.forEach(t),pje=r(ACe," (FNet model)"),ACe.forEach(t),_je=i(T),pf=s(T,"LI",{});var LCe=n(pf);UQ=s(LCe,"STRONG",{});var Fxr=n(UQ);bje=r(Fxr,"fsmt"),Fxr.forEach(t),vje=r(LCe," \u2014 "),v9=s(LCe,"A",{href:!0});var Cxr=n(v9);Tje=r(Cxr,"FSMTConfig"),Cxr.forEach(t),Fje=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),Cje=i(T),_f=s(T,"LI",{});var BCe=n(_f);JQ=s(BCe,"STRONG",{});var Mxr=n(JQ);Mje=r(Mxr,"funnel"),Mxr.forEach(t),Eje=r(BCe," \u2014 "),T9=s(BCe,"A",{href:!0});var Exr=n(T9);yje=r(Exr,"FunnelConfig"),Exr.forEach(t),wje=r(BCe," (Funnel Transformer model)"),BCe.forEach(t),Aje=i(T),bf=s(T,"LI",{});var xCe=n(bf);YQ=s(xCe,"STRONG",{});var yxr=n(YQ);Lje=r(yxr,"gpt2"),yxr.forEach(t),Bje=r(xCe," \u2014 "),F9=s(xCe,"A",{href:!0});var wxr=n(F9);xje=r(wxr,"GPT2Config"),wxr.forEach(t),kje=r(xCe," (OpenAI GPT-2 model)"),xCe.forEach(t),Rje=i(T),vf=s(T,"LI",{});var kCe=n(vf);KQ=s(kCe,"STRONG",{});var Axr=n(KQ);Sje=r(Axr,"gpt_neo"),Axr.forEach(t),Pje=r(kCe," \u2014 "),C9=s(kCe,"A",{href:!0});var Lxr=n(C9);$je=r(Lxr,"GPTNeoConfig"),Lxr.forEach(t),Ije=r(kCe," (GPT Neo model)"),kCe.forEach(t),jje=i(T),Tf=s(T,"LI",{});var RCe=n(Tf);ZQ=s(RCe,"STRONG",{});var Bxr=n(ZQ);Dje=r(Bxr,"gptj"),Bxr.forEach(t),Nje=r(RCe," \u2014 "),M9=s(RCe,"A",{href:!0});var xxr=n(M9);qje=r(xxr,"GPTJConfig"),xxr.forEach(t),Oje=r(RCe," (GPT-J model)"),RCe.forEach(t),Gje=i(T),Ff=s(T,"LI",{});var SCe=n(Ff);eH=s(SCe,"STRONG",{});var kxr=n(eH);Xje=r(kxr,"hubert"),kxr.forEach(t),Vje=r(SCe," \u2014 "),E9=s(SCe,"A",{href:!0});var Rxr=n(E9);zje=r(Rxr,"HubertConfig"),Rxr.forEach(t),Wje=r(SCe," (Hubert model)"),SCe.forEach(t),Qje=i(T),Cf=s(T,"LI",{});var PCe=n(Cf);oH=s(PCe,"STRONG",{});var Sxr=n(oH);Hje=r(Sxr,"ibert"),Sxr.forEach(t),Uje=r(PCe," \u2014 "),y9=s(PCe,"A",{href:!0});var Pxr=n(y9);Jje=r(Pxr,"IBertConfig"),Pxr.forEach(t),Yje=r(PCe," (I-BERT model)"),PCe.forEach(t),Kje=i(T),Mf=s(T,"LI",{});var $Ce=n(Mf);rH=s($Ce,"STRONG",{});var $xr=n(rH);Zje=r($xr,"imagegpt"),$xr.forEach(t),eDe=r($Ce," \u2014 "),w9=s($Ce,"A",{href:!0});var Ixr=n(w9);oDe=r(Ixr,"ImageGPTConfig"),Ixr.forEach(t),rDe=r($Ce," (ImageGPT model)"),$Ce.forEach(t),tDe=i(T),Ef=s(T,"LI",{});var ICe=n(Ef);tH=s(ICe,"STRONG",{});var jxr=n(tH);aDe=r(jxr,"layoutlm"),jxr.forEach(t),sDe=r(ICe," \u2014 "),A9=s(ICe,"A",{href:!0});var Dxr=n(A9);nDe=r(Dxr,"LayoutLMConfig"),Dxr.forEach(t),lDe=r(ICe," (LayoutLM model)"),ICe.forEach(t),iDe=i(T),yf=s(T,"LI",{});var jCe=n(yf);aH=s(jCe,"STRONG",{});var Nxr=n(aH);dDe=r(Nxr,"layoutlmv2"),Nxr.forEach(t),cDe=r(jCe," \u2014 "),L9=s(jCe,"A",{href:!0});var qxr=n(L9);mDe=r(qxr,"LayoutLMv2Config"),qxr.forEach(t),fDe=r(jCe," (LayoutLMv2 model)"),jCe.forEach(t),gDe=i(T),wf=s(T,"LI",{});var DCe=n(wf);sH=s(DCe,"STRONG",{});var Oxr=n(sH);hDe=r(Oxr,"led"),Oxr.forEach(t),uDe=r(DCe," \u2014 "),B9=s(DCe,"A",{href:!0});var Gxr=n(B9);pDe=r(Gxr,"LEDConfig"),Gxr.forEach(t),_De=r(DCe," (LED model)"),DCe.forEach(t),bDe=i(T),Af=s(T,"LI",{});var NCe=n(Af);nH=s(NCe,"STRONG",{});var Xxr=n(nH);vDe=r(Xxr,"longformer"),Xxr.forEach(t),TDe=r(NCe," \u2014 "),x9=s(NCe,"A",{href:!0});var Vxr=n(x9);FDe=r(Vxr,"LongformerConfig"),Vxr.forEach(t),CDe=r(NCe," (Longformer model)"),NCe.forEach(t),MDe=i(T),Lf=s(T,"LI",{});var qCe=n(Lf);lH=s(qCe,"STRONG",{});var zxr=n(lH);EDe=r(zxr,"luke"),zxr.forEach(t),yDe=r(qCe," \u2014 "),k9=s(qCe,"A",{href:!0});var Wxr=n(k9);wDe=r(Wxr,"LukeConfig"),Wxr.forEach(t),ADe=r(qCe," (LUKE model)"),qCe.forEach(t),LDe=i(T),Bf=s(T,"LI",{});var OCe=n(Bf);iH=s(OCe,"STRONG",{});var Qxr=n(iH);BDe=r(Qxr,"lxmert"),Qxr.forEach(t),xDe=r(OCe," \u2014 "),R9=s(OCe,"A",{href:!0});var Hxr=n(R9);kDe=r(Hxr,"LxmertConfig"),Hxr.forEach(t),RDe=r(OCe," (LXMERT model)"),OCe.forEach(t),SDe=i(T),xf=s(T,"LI",{});var GCe=n(xf);dH=s(GCe,"STRONG",{});var Uxr=n(dH);PDe=r(Uxr,"m2m_100"),Uxr.forEach(t),$De=r(GCe," \u2014 "),S9=s(GCe,"A",{href:!0});var Jxr=n(S9);IDe=r(Jxr,"M2M100Config"),Jxr.forEach(t),jDe=r(GCe," (M2M100 model)"),GCe.forEach(t),DDe=i(T),kf=s(T,"LI",{});var XCe=n(kf);cH=s(XCe,"STRONG",{});var Yxr=n(cH);NDe=r(Yxr,"marian"),Yxr.forEach(t),qDe=r(XCe," \u2014 "),P9=s(XCe,"A",{href:!0});var Kxr=n(P9);ODe=r(Kxr,"MarianConfig"),Kxr.forEach(t),GDe=r(XCe," (Marian model)"),XCe.forEach(t),XDe=i(T),Rf=s(T,"LI",{});var VCe=n(Rf);mH=s(VCe,"STRONG",{});var Zxr=n(mH);VDe=r(Zxr,"maskformer"),Zxr.forEach(t),zDe=r(VCe," \u2014 "),$9=s(VCe,"A",{href:!0});var ekr=n($9);WDe=r(ekr,"MaskFormerConfig"),ekr.forEach(t),QDe=r(VCe," (MaskFormer model)"),VCe.forEach(t),HDe=i(T),Sf=s(T,"LI",{});var zCe=n(Sf);fH=s(zCe,"STRONG",{});var okr=n(fH);UDe=r(okr,"mbart"),okr.forEach(t),JDe=r(zCe," \u2014 "),I9=s(zCe,"A",{href:!0});var rkr=n(I9);YDe=r(rkr,"MBartConfig"),rkr.forEach(t),KDe=r(zCe," (mBART model)"),zCe.forEach(t),ZDe=i(T),Pf=s(T,"LI",{});var WCe=n(Pf);gH=s(WCe,"STRONG",{});var tkr=n(gH);eNe=r(tkr,"megatron-bert"),tkr.forEach(t),oNe=r(WCe," \u2014 "),j9=s(WCe,"A",{href:!0});var akr=n(j9);rNe=r(akr,"MegatronBertConfig"),akr.forEach(t),tNe=r(WCe," (MegatronBert model)"),WCe.forEach(t),aNe=i(T),$f=s(T,"LI",{});var QCe=n($f);hH=s(QCe,"STRONG",{});var skr=n(hH);sNe=r(skr,"mobilebert"),skr.forEach(t),nNe=r(QCe," \u2014 "),D9=s(QCe,"A",{href:!0});var nkr=n(D9);lNe=r(nkr,"MobileBertConfig"),nkr.forEach(t),iNe=r(QCe," (MobileBERT model)"),QCe.forEach(t),dNe=i(T),If=s(T,"LI",{});var HCe=n(If);uH=s(HCe,"STRONG",{});var lkr=n(uH);cNe=r(lkr,"mpnet"),lkr.forEach(t),mNe=r(HCe," \u2014 "),N9=s(HCe,"A",{href:!0});var ikr=n(N9);fNe=r(ikr,"MPNetConfig"),ikr.forEach(t),gNe=r(HCe," (MPNet model)"),HCe.forEach(t),hNe=i(T),jf=s(T,"LI",{});var UCe=n(jf);pH=s(UCe,"STRONG",{});var dkr=n(pH);uNe=r(dkr,"mt5"),dkr.forEach(t),pNe=r(UCe," \u2014 "),q9=s(UCe,"A",{href:!0});var ckr=n(q9);_Ne=r(ckr,"MT5Config"),ckr.forEach(t),bNe=r(UCe," (mT5 model)"),UCe.forEach(t),vNe=i(T),Df=s(T,"LI",{});var JCe=n(Df);_H=s(JCe,"STRONG",{});var mkr=n(_H);TNe=r(mkr,"nystromformer"),mkr.forEach(t),FNe=r(JCe," \u2014 "),O9=s(JCe,"A",{href:!0});var fkr=n(O9);CNe=r(fkr,"NystromformerConfig"),fkr.forEach(t),MNe=r(JCe," (Nystromformer model)"),JCe.forEach(t),ENe=i(T),Nf=s(T,"LI",{});var YCe=n(Nf);bH=s(YCe,"STRONG",{});var gkr=n(bH);yNe=r(gkr,"openai-gpt"),gkr.forEach(t),wNe=r(YCe," \u2014 "),G9=s(YCe,"A",{href:!0});var hkr=n(G9);ANe=r(hkr,"OpenAIGPTConfig"),hkr.forEach(t),LNe=r(YCe," (OpenAI GPT model)"),YCe.forEach(t),BNe=i(T),qf=s(T,"LI",{});var KCe=n(qf);vH=s(KCe,"STRONG",{});var ukr=n(vH);xNe=r(ukr,"pegasus"),ukr.forEach(t),kNe=r(KCe," \u2014 "),X9=s(KCe,"A",{href:!0});var pkr=n(X9);RNe=r(pkr,"PegasusConfig"),pkr.forEach(t),SNe=r(KCe," (Pegasus model)"),KCe.forEach(t),PNe=i(T),Of=s(T,"LI",{});var ZCe=n(Of);TH=s(ZCe,"STRONG",{});var _kr=n(TH);$Ne=r(_kr,"perceiver"),_kr.forEach(t),INe=r(ZCe," \u2014 "),V9=s(ZCe,"A",{href:!0});var bkr=n(V9);jNe=r(bkr,"PerceiverConfig"),bkr.forEach(t),DNe=r(ZCe," (Perceiver model)"),ZCe.forEach(t),NNe=i(T),Gf=s(T,"LI",{});var eMe=n(Gf);FH=s(eMe,"STRONG",{});var vkr=n(FH);qNe=r(vkr,"plbart"),vkr.forEach(t),ONe=r(eMe," \u2014 "),z9=s(eMe,"A",{href:!0});var Tkr=n(z9);GNe=r(Tkr,"PLBartConfig"),Tkr.forEach(t),XNe=r(eMe," (PLBart model)"),eMe.forEach(t),VNe=i(T),Xf=s(T,"LI",{});var oMe=n(Xf);CH=s(oMe,"STRONG",{});var Fkr=n(CH);zNe=r(Fkr,"poolformer"),Fkr.forEach(t),WNe=r(oMe," \u2014 "),W9=s(oMe,"A",{href:!0});var Ckr=n(W9);QNe=r(Ckr,"PoolFormerConfig"),Ckr.forEach(t),HNe=r(oMe," (PoolFormer model)"),oMe.forEach(t),UNe=i(T),Vf=s(T,"LI",{});var rMe=n(Vf);MH=s(rMe,"STRONG",{});var Mkr=n(MH);JNe=r(Mkr,"prophetnet"),Mkr.forEach(t),YNe=r(rMe," \u2014 "),Q9=s(rMe,"A",{href:!0});var Ekr=n(Q9);KNe=r(Ekr,"ProphetNetConfig"),Ekr.forEach(t),ZNe=r(rMe," (ProphetNet model)"),rMe.forEach(t),eqe=i(T),zf=s(T,"LI",{});var tMe=n(zf);EH=s(tMe,"STRONG",{});var ykr=n(EH);oqe=r(ykr,"qdqbert"),ykr.forEach(t),rqe=r(tMe," \u2014 "),H9=s(tMe,"A",{href:!0});var wkr=n(H9);tqe=r(wkr,"QDQBertConfig"),wkr.forEach(t),aqe=r(tMe," (QDQBert model)"),tMe.forEach(t),sqe=i(T),Wf=s(T,"LI",{});var aMe=n(Wf);yH=s(aMe,"STRONG",{});var Akr=n(yH);nqe=r(Akr,"rag"),Akr.forEach(t),lqe=r(aMe," \u2014 "),U9=s(aMe,"A",{href:!0});var Lkr=n(U9);iqe=r(Lkr,"RagConfig"),Lkr.forEach(t),dqe=r(aMe," (RAG model)"),aMe.forEach(t),cqe=i(T),Qf=s(T,"LI",{});var sMe=n(Qf);wH=s(sMe,"STRONG",{});var Bkr=n(wH);mqe=r(Bkr,"realm"),Bkr.forEach(t),fqe=r(sMe," \u2014 "),J9=s(sMe,"A",{href:!0});var xkr=n(J9);gqe=r(xkr,"RealmConfig"),xkr.forEach(t),hqe=r(sMe," (Realm model)"),sMe.forEach(t),uqe=i(T),Hf=s(T,"LI",{});var nMe=n(Hf);AH=s(nMe,"STRONG",{});var kkr=n(AH);pqe=r(kkr,"reformer"),kkr.forEach(t),_qe=r(nMe," \u2014 "),Y9=s(nMe,"A",{href:!0});var Rkr=n(Y9);bqe=r(Rkr,"ReformerConfig"),Rkr.forEach(t),vqe=r(nMe," (Reformer model)"),nMe.forEach(t),Tqe=i(T),Uf=s(T,"LI",{});var lMe=n(Uf);LH=s(lMe,"STRONG",{});var Skr=n(LH);Fqe=r(Skr,"rembert"),Skr.forEach(t),Cqe=r(lMe," \u2014 "),K9=s(lMe,"A",{href:!0});var Pkr=n(K9);Mqe=r(Pkr,"RemBertConfig"),Pkr.forEach(t),Eqe=r(lMe," (RemBERT model)"),lMe.forEach(t),yqe=i(T),Jf=s(T,"LI",{});var iMe=n(Jf);BH=s(iMe,"STRONG",{});var $kr=n(BH);wqe=r($kr,"retribert"),$kr.forEach(t),Aqe=r(iMe," \u2014 "),Z9=s(iMe,"A",{href:!0});var Ikr=n(Z9);Lqe=r(Ikr,"RetriBertConfig"),Ikr.forEach(t),Bqe=r(iMe," (RetriBERT model)"),iMe.forEach(t),xqe=i(T),Yf=s(T,"LI",{});var dMe=n(Yf);xH=s(dMe,"STRONG",{});var jkr=n(xH);kqe=r(jkr,"roberta"),jkr.forEach(t),Rqe=r(dMe," \u2014 "),eB=s(dMe,"A",{href:!0});var Dkr=n(eB);Sqe=r(Dkr,"RobertaConfig"),Dkr.forEach(t),Pqe=r(dMe," (RoBERTa model)"),dMe.forEach(t),$qe=i(T),Kf=s(T,"LI",{});var cMe=n(Kf);kH=s(cMe,"STRONG",{});var Nkr=n(kH);Iqe=r(Nkr,"roformer"),Nkr.forEach(t),jqe=r(cMe," \u2014 "),oB=s(cMe,"A",{href:!0});var qkr=n(oB);Dqe=r(qkr,"RoFormerConfig"),qkr.forEach(t),Nqe=r(cMe," (RoFormer model)"),cMe.forEach(t),qqe=i(T),Zf=s(T,"LI",{});var mMe=n(Zf);RH=s(mMe,"STRONG",{});var Okr=n(RH);Oqe=r(Okr,"segformer"),Okr.forEach(t),Gqe=r(mMe," \u2014 "),rB=s(mMe,"A",{href:!0});var Gkr=n(rB);Xqe=r(Gkr,"SegformerConfig"),Gkr.forEach(t),Vqe=r(mMe," (SegFormer model)"),mMe.forEach(t),zqe=i(T),eg=s(T,"LI",{});var fMe=n(eg);SH=s(fMe,"STRONG",{});var Xkr=n(SH);Wqe=r(Xkr,"sew"),Xkr.forEach(t),Qqe=r(fMe," \u2014 "),tB=s(fMe,"A",{href:!0});var Vkr=n(tB);Hqe=r(Vkr,"SEWConfig"),Vkr.forEach(t),Uqe=r(fMe," (SEW model)"),fMe.forEach(t),Jqe=i(T),og=s(T,"LI",{});var gMe=n(og);PH=s(gMe,"STRONG",{});var zkr=n(PH);Yqe=r(zkr,"sew-d"),zkr.forEach(t),Kqe=r(gMe," \u2014 "),aB=s(gMe,"A",{href:!0});var Wkr=n(aB);Zqe=r(Wkr,"SEWDConfig"),Wkr.forEach(t),eOe=r(gMe," (SEW-D model)"),gMe.forEach(t),oOe=i(T),rg=s(T,"LI",{});var hMe=n(rg);$H=s(hMe,"STRONG",{});var Qkr=n($H);rOe=r(Qkr,"speech-encoder-decoder"),Qkr.forEach(t),tOe=r(hMe," \u2014 "),sB=s(hMe,"A",{href:!0});var Hkr=n(sB);aOe=r(Hkr,"SpeechEncoderDecoderConfig"),Hkr.forEach(t),sOe=r(hMe," (Speech Encoder decoder model)"),hMe.forEach(t),nOe=i(T),tg=s(T,"LI",{});var uMe=n(tg);IH=s(uMe,"STRONG",{});var Ukr=n(IH);lOe=r(Ukr,"speech_to_text"),Ukr.forEach(t),iOe=r(uMe," \u2014 "),nB=s(uMe,"A",{href:!0});var Jkr=n(nB);dOe=r(Jkr,"Speech2TextConfig"),Jkr.forEach(t),cOe=r(uMe," (Speech2Text model)"),uMe.forEach(t),mOe=i(T),ag=s(T,"LI",{});var pMe=n(ag);jH=s(pMe,"STRONG",{});var Ykr=n(jH);fOe=r(Ykr,"speech_to_text_2"),Ykr.forEach(t),gOe=r(pMe," \u2014 "),lB=s(pMe,"A",{href:!0});var Kkr=n(lB);hOe=r(Kkr,"Speech2Text2Config"),Kkr.forEach(t),uOe=r(pMe," (Speech2Text2 model)"),pMe.forEach(t),pOe=i(T),sg=s(T,"LI",{});var _Me=n(sg);DH=s(_Me,"STRONG",{});var Zkr=n(DH);_Oe=r(Zkr,"splinter"),Zkr.forEach(t),bOe=r(_Me," \u2014 "),iB=s(_Me,"A",{href:!0});var eRr=n(iB);vOe=r(eRr,"SplinterConfig"),eRr.forEach(t),TOe=r(_Me," (Splinter model)"),_Me.forEach(t),FOe=i(T),ng=s(T,"LI",{});var bMe=n(ng);NH=s(bMe,"STRONG",{});var oRr=n(NH);COe=r(oRr,"squeezebert"),oRr.forEach(t),MOe=r(bMe," \u2014 "),dB=s(bMe,"A",{href:!0});var rRr=n(dB);EOe=r(rRr,"SqueezeBertConfig"),rRr.forEach(t),yOe=r(bMe," (SqueezeBERT model)"),bMe.forEach(t),wOe=i(T),lg=s(T,"LI",{});var vMe=n(lg);qH=s(vMe,"STRONG",{});var tRr=n(qH);AOe=r(tRr,"swin"),tRr.forEach(t),LOe=r(vMe," \u2014 "),cB=s(vMe,"A",{href:!0});var aRr=n(cB);BOe=r(aRr,"SwinConfig"),aRr.forEach(t),xOe=r(vMe," (Swin model)"),vMe.forEach(t),kOe=i(T),ig=s(T,"LI",{});var TMe=n(ig);OH=s(TMe,"STRONG",{});var sRr=n(OH);ROe=r(sRr,"t5"),sRr.forEach(t),SOe=r(TMe," \u2014 "),mB=s(TMe,"A",{href:!0});var nRr=n(mB);POe=r(nRr,"T5Config"),nRr.forEach(t),$Oe=r(TMe," (T5 model)"),TMe.forEach(t),IOe=i(T),dg=s(T,"LI",{});var FMe=n(dg);GH=s(FMe,"STRONG",{});var lRr=n(GH);jOe=r(lRr,"tapas"),lRr.forEach(t),DOe=r(FMe," \u2014 "),fB=s(FMe,"A",{href:!0});var iRr=n(fB);NOe=r(iRr,"TapasConfig"),iRr.forEach(t),qOe=r(FMe," (TAPAS model)"),FMe.forEach(t),OOe=i(T),cg=s(T,"LI",{});var CMe=n(cg);XH=s(CMe,"STRONG",{});var dRr=n(XH);GOe=r(dRr,"transfo-xl"),dRr.forEach(t),XOe=r(CMe," \u2014 "),gB=s(CMe,"A",{href:!0});var cRr=n(gB);VOe=r(cRr,"TransfoXLConfig"),cRr.forEach(t),zOe=r(CMe," (Transformer-XL model)"),CMe.forEach(t),WOe=i(T),mg=s(T,"LI",{});var MMe=n(mg);VH=s(MMe,"STRONG",{});var mRr=n(VH);QOe=r(mRr,"trocr"),mRr.forEach(t),HOe=r(MMe," \u2014 "),hB=s(MMe,"A",{href:!0});var fRr=n(hB);UOe=r(fRr,"TrOCRConfig"),fRr.forEach(t),JOe=r(MMe," (TrOCR model)"),MMe.forEach(t),YOe=i(T),fg=s(T,"LI",{});var EMe=n(fg);zH=s(EMe,"STRONG",{});var gRr=n(zH);KOe=r(gRr,"unispeech"),gRr.forEach(t),ZOe=r(EMe," \u2014 "),uB=s(EMe,"A",{href:!0});var hRr=n(uB);eGe=r(hRr,"UniSpeechConfig"),hRr.forEach(t),oGe=r(EMe," (UniSpeech model)"),EMe.forEach(t),rGe=i(T),gg=s(T,"LI",{});var yMe=n(gg);WH=s(yMe,"STRONG",{});var uRr=n(WH);tGe=r(uRr,"unispeech-sat"),uRr.forEach(t),aGe=r(yMe," \u2014 "),pB=s(yMe,"A",{href:!0});var pRr=n(pB);sGe=r(pRr,"UniSpeechSatConfig"),pRr.forEach(t),nGe=r(yMe," (UniSpeechSat model)"),yMe.forEach(t),lGe=i(T),hg=s(T,"LI",{});var wMe=n(hg);QH=s(wMe,"STRONG",{});var _Rr=n(QH);iGe=r(_Rr,"vilt"),_Rr.forEach(t),dGe=r(wMe," \u2014 "),_B=s(wMe,"A",{href:!0});var bRr=n(_B);cGe=r(bRr,"ViltConfig"),bRr.forEach(t),mGe=r(wMe," (ViLT model)"),wMe.forEach(t),fGe=i(T),ug=s(T,"LI",{});var AMe=n(ug);HH=s(AMe,"STRONG",{});var vRr=n(HH);gGe=r(vRr,"vision-encoder-decoder"),vRr.forEach(t),hGe=r(AMe," \u2014 "),bB=s(AMe,"A",{href:!0});var TRr=n(bB);uGe=r(TRr,"VisionEncoderDecoderConfig"),TRr.forEach(t),pGe=r(AMe," (Vision Encoder decoder model)"),AMe.forEach(t),_Ge=i(T),pg=s(T,"LI",{});var LMe=n(pg);UH=s(LMe,"STRONG",{});var FRr=n(UH);bGe=r(FRr,"vision-text-dual-encoder"),FRr.forEach(t),vGe=r(LMe," \u2014 "),vB=s(LMe,"A",{href:!0});var CRr=n(vB);TGe=r(CRr,"VisionTextDualEncoderConfig"),CRr.forEach(t),FGe=r(LMe," (VisionTextDualEncoder model)"),LMe.forEach(t),CGe=i(T),_g=s(T,"LI",{});var BMe=n(_g);JH=s(BMe,"STRONG",{});var MRr=n(JH);MGe=r(MRr,"visual_bert"),MRr.forEach(t),EGe=r(BMe," \u2014 "),TB=s(BMe,"A",{href:!0});var ERr=n(TB);yGe=r(ERr,"VisualBertConfig"),ERr.forEach(t),wGe=r(BMe," (VisualBert model)"),BMe.forEach(t),AGe=i(T),bg=s(T,"LI",{});var xMe=n(bg);YH=s(xMe,"STRONG",{});var yRr=n(YH);LGe=r(yRr,"vit"),yRr.forEach(t),BGe=r(xMe," \u2014 "),FB=s(xMe,"A",{href:!0});var wRr=n(FB);xGe=r(wRr,"ViTConfig"),wRr.forEach(t),kGe=r(xMe," (ViT model)"),xMe.forEach(t),RGe=i(T),vg=s(T,"LI",{});var kMe=n(vg);KH=s(kMe,"STRONG",{});var ARr=n(KH);SGe=r(ARr,"vit_mae"),ARr.forEach(t),PGe=r(kMe," \u2014 "),CB=s(kMe,"A",{href:!0});var LRr=n(CB);$Ge=r(LRr,"ViTMAEConfig"),LRr.forEach(t),IGe=r(kMe," (ViTMAE model)"),kMe.forEach(t),jGe=i(T),Tg=s(T,"LI",{});var RMe=n(Tg);ZH=s(RMe,"STRONG",{});var BRr=n(ZH);DGe=r(BRr,"wav2vec2"),BRr.forEach(t),NGe=r(RMe," \u2014 "),MB=s(RMe,"A",{href:!0});var xRr=n(MB);qGe=r(xRr,"Wav2Vec2Config"),xRr.forEach(t),OGe=r(RMe," (Wav2Vec2 model)"),RMe.forEach(t),GGe=i(T),Fg=s(T,"LI",{});var SMe=n(Fg);eU=s(SMe,"STRONG",{});var kRr=n(eU);XGe=r(kRr,"wavlm"),kRr.forEach(t),VGe=r(SMe," \u2014 "),EB=s(SMe,"A",{href:!0});var RRr=n(EB);zGe=r(RRr,"WavLMConfig"),RRr.forEach(t),WGe=r(SMe," (WavLM model)"),SMe.forEach(t),QGe=i(T),Cg=s(T,"LI",{});var PMe=n(Cg);oU=s(PMe,"STRONG",{});var SRr=n(oU);HGe=r(SRr,"xglm"),SRr.forEach(t),UGe=r(PMe," \u2014 "),yB=s(PMe,"A",{href:!0});var PRr=n(yB);JGe=r(PRr,"XGLMConfig"),PRr.forEach(t),YGe=r(PMe," (XGLM model)"),PMe.forEach(t),KGe=i(T),Mg=s(T,"LI",{});var $Me=n(Mg);rU=s($Me,"STRONG",{});var $Rr=n(rU);ZGe=r($Rr,"xlm"),$Rr.forEach(t),eXe=r($Me," \u2014 "),wB=s($Me,"A",{href:!0});var IRr=n(wB);oXe=r(IRr,"XLMConfig"),IRr.forEach(t),rXe=r($Me," (XLM model)"),$Me.forEach(t),tXe=i(T),Eg=s(T,"LI",{});var IMe=n(Eg);tU=s(IMe,"STRONG",{});var jRr=n(tU);aXe=r(jRr,"xlm-prophetnet"),jRr.forEach(t),sXe=r(IMe," \u2014 "),AB=s(IMe,"A",{href:!0});var DRr=n(AB);nXe=r(DRr,"XLMProphetNetConfig"),DRr.forEach(t),lXe=r(IMe," (XLMProphetNet model)"),IMe.forEach(t),iXe=i(T),yg=s(T,"LI",{});var jMe=n(yg);aU=s(jMe,"STRONG",{});var NRr=n(aU);dXe=r(NRr,"xlm-roberta"),NRr.forEach(t),cXe=r(jMe," \u2014 "),LB=s(jMe,"A",{href:!0});var qRr=n(LB);mXe=r(qRr,"XLMRobertaConfig"),qRr.forEach(t),fXe=r(jMe," (XLM-RoBERTa model)"),jMe.forEach(t),gXe=i(T),wg=s(T,"LI",{});var DMe=n(wg);sU=s(DMe,"STRONG",{});var ORr=n(sU);hXe=r(ORr,"xlm-roberta-xl"),ORr.forEach(t),uXe=r(DMe," \u2014 "),BB=s(DMe,"A",{href:!0});var GRr=n(BB);pXe=r(GRr,"XLMRobertaXLConfig"),GRr.forEach(t),_Xe=r(DMe," (XLM-RoBERTa-XL model)"),DMe.forEach(t),bXe=i(T),Ag=s(T,"LI",{});var NMe=n(Ag);nU=s(NMe,"STRONG",{});var XRr=n(nU);vXe=r(XRr,"xlnet"),XRr.forEach(t),TXe=r(NMe," \u2014 "),xB=s(NMe,"A",{href:!0});var VRr=n(xB);FXe=r(VRr,"XLNetConfig"),VRr.forEach(t),CXe=r(NMe," (XLNet model)"),NMe.forEach(t),MXe=i(T),Lg=s(T,"LI",{});var qMe=n(Lg);lU=s(qMe,"STRONG",{});var zRr=n(lU);EXe=r(zRr,"yoso"),zRr.forEach(t),yXe=r(qMe," \u2014 "),kB=s(qMe,"A",{href:!0});var WRr=n(kB);wXe=r(WRr,"YosoConfig"),WRr.forEach(t),AXe=r(qMe," (YOSO model)"),qMe.forEach(t),T.forEach(t),LXe=i(ga),iU=s(ga,"P",{});var QRr=n(iU);BXe=r(QRr,"Examples:"),QRr.forEach(t),xXe=i(ga),f(ty.$$.fragment,ga),ga.forEach(t),kXe=i(Gn),Bg=s(Gn,"DIV",{class:!0});var mRe=n(Bg);f(ay.$$.fragment,mRe),RXe=i(mRe),dU=s(mRe,"P",{});var HRr=n(dU);SXe=r(HRr,"Register a new configuration for this class."),HRr.forEach(t),mRe.forEach(t),Gn.forEach(t),dxe=i(d),Qi=s(d,"H2",{class:!0});var fRe=n(Qi);xg=s(fRe,"A",{id:!0,class:!0,href:!0});var URr=n(xg);cU=s(URr,"SPAN",{});var JRr=n(cU);f(sy.$$.fragment,JRr),JRr.forEach(t),URr.forEach(t),PXe=i(fRe),mU=s(fRe,"SPAN",{});var YRr=n(mU);$Xe=r(YRr,"AutoTokenizer"),YRr.forEach(t),fRe.forEach(t),cxe=i(d),Qo=s(d,"DIV",{class:!0});var Xn=n(Qo);f(ny.$$.fragment,Xn),IXe=i(Xn),ly=s(Xn,"P",{});var gRe=n(ly);jXe=r(gRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RB=s(gRe,"A",{href:!0});var KRr=n(RB);DXe=r(KRr,"AutoTokenizer.from_pretrained()"),KRr.forEach(t),NXe=r(gRe," class method."),gRe.forEach(t),qXe=i(Xn),iy=s(Xn,"P",{});var hRe=n(iy);OXe=r(hRe,"This class cannot be instantiated directly using "),fU=s(hRe,"CODE",{});var ZRr=n(fU);GXe=r(ZRr,"__init__()"),ZRr.forEach(t),XXe=r(hRe," (throws an error)."),hRe.forEach(t),VXe=i(Xn),go=s(Xn,"DIV",{class:!0});var ha=n(go);f(dy.$$.fragment,ha),zXe=i(ha),gU=s(ha,"P",{});var eSr=n(gU);WXe=r(eSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eSr.forEach(t),QXe=i(ha),Ga=s(ha,"P",{});var H3=n(Ga);HXe=r(H3,"The tokenizer class to instantiate is selected based on the "),hU=s(H3,"CODE",{});var oSr=n(hU);UXe=r(oSr,"model_type"),oSr.forEach(t),JXe=r(H3,` property of the config object (either
passed as an argument or loaded from `),uU=s(H3,"CODE",{});var rSr=n(uU);YXe=r(rSr,"pretrained_model_name_or_path"),rSr.forEach(t),KXe=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pU=s(H3,"CODE",{});var tSr=n(pU);ZXe=r(tSr,"pretrained_model_name_or_path"),tSr.forEach(t),eVe=r(H3,":"),H3.forEach(t),oVe=i(ha),E=s(ha,"UL",{});var y=n(E);zs=s(y,"LI",{});var X8=n(zs);_U=s(X8,"STRONG",{});var aSr=n(_U);rVe=r(aSr,"albert"),aSr.forEach(t),tVe=r(X8," \u2014 "),SB=s(X8,"A",{href:!0});var sSr=n(SB);aVe=r(sSr,"AlbertTokenizer"),sSr.forEach(t),sVe=r(X8," or "),PB=s(X8,"A",{href:!0});var nSr=n(PB);nVe=r(nSr,"AlbertTokenizerFast"),nSr.forEach(t),lVe=r(X8," (ALBERT model)"),X8.forEach(t),iVe=i(y),Ws=s(y,"LI",{});var V8=n(Ws);bU=s(V8,"STRONG",{});var lSr=n(bU);dVe=r(lSr,"bart"),lSr.forEach(t),cVe=r(V8," \u2014 "),$B=s(V8,"A",{href:!0});var iSr=n($B);mVe=r(iSr,"BartTokenizer"),iSr.forEach(t),fVe=r(V8," or "),IB=s(V8,"A",{href:!0});var dSr=n(IB);gVe=r(dSr,"BartTokenizerFast"),dSr.forEach(t),hVe=r(V8," (BART model)"),V8.forEach(t),uVe=i(y),Qs=s(y,"LI",{});var z8=n(Qs);vU=s(z8,"STRONG",{});var cSr=n(vU);pVe=r(cSr,"barthez"),cSr.forEach(t),_Ve=r(z8," \u2014 "),jB=s(z8,"A",{href:!0});var mSr=n(jB);bVe=r(mSr,"BarthezTokenizer"),mSr.forEach(t),vVe=r(z8," or "),DB=s(z8,"A",{href:!0});var fSr=n(DB);TVe=r(fSr,"BarthezTokenizerFast"),fSr.forEach(t),FVe=r(z8," (BARThez model)"),z8.forEach(t),CVe=i(y),kg=s(y,"LI",{});var OMe=n(kg);TU=s(OMe,"STRONG",{});var gSr=n(TU);MVe=r(gSr,"bartpho"),gSr.forEach(t),EVe=r(OMe," \u2014 "),NB=s(OMe,"A",{href:!0});var hSr=n(NB);yVe=r(hSr,"BartphoTokenizer"),hSr.forEach(t),wVe=r(OMe," (BARTpho model)"),OMe.forEach(t),AVe=i(y),Hs=s(y,"LI",{});var W8=n(Hs);FU=s(W8,"STRONG",{});var uSr=n(FU);LVe=r(uSr,"bert"),uSr.forEach(t),BVe=r(W8," \u2014 "),qB=s(W8,"A",{href:!0});var pSr=n(qB);xVe=r(pSr,"BertTokenizer"),pSr.forEach(t),kVe=r(W8," or "),OB=s(W8,"A",{href:!0});var _Sr=n(OB);RVe=r(_Sr,"BertTokenizerFast"),_Sr.forEach(t),SVe=r(W8," (BERT model)"),W8.forEach(t),PVe=i(y),Rg=s(y,"LI",{});var GMe=n(Rg);CU=s(GMe,"STRONG",{});var bSr=n(CU);$Ve=r(bSr,"bert-generation"),bSr.forEach(t),IVe=r(GMe," \u2014 "),GB=s(GMe,"A",{href:!0});var vSr=n(GB);jVe=r(vSr,"BertGenerationTokenizer"),vSr.forEach(t),DVe=r(GMe," (Bert Generation model)"),GMe.forEach(t),NVe=i(y),Sg=s(y,"LI",{});var XMe=n(Sg);MU=s(XMe,"STRONG",{});var TSr=n(MU);qVe=r(TSr,"bert-japanese"),TSr.forEach(t),OVe=r(XMe," \u2014 "),XB=s(XMe,"A",{href:!0});var FSr=n(XB);GVe=r(FSr,"BertJapaneseTokenizer"),FSr.forEach(t),XVe=r(XMe," (BertJapanese model)"),XMe.forEach(t),VVe=i(y),Pg=s(y,"LI",{});var VMe=n(Pg);EU=s(VMe,"STRONG",{});var CSr=n(EU);zVe=r(CSr,"bertweet"),CSr.forEach(t),WVe=r(VMe," \u2014 "),VB=s(VMe,"A",{href:!0});var MSr=n(VB);QVe=r(MSr,"BertweetTokenizer"),MSr.forEach(t),HVe=r(VMe," (Bertweet model)"),VMe.forEach(t),UVe=i(y),Us=s(y,"LI",{});var Q8=n(Us);yU=s(Q8,"STRONG",{});var ESr=n(yU);JVe=r(ESr,"big_bird"),ESr.forEach(t),YVe=r(Q8," \u2014 "),zB=s(Q8,"A",{href:!0});var ySr=n(zB);KVe=r(ySr,"BigBirdTokenizer"),ySr.forEach(t),ZVe=r(Q8," or "),WB=s(Q8,"A",{href:!0});var wSr=n(WB);eze=r(wSr,"BigBirdTokenizerFast"),wSr.forEach(t),oze=r(Q8," (BigBird model)"),Q8.forEach(t),rze=i(y),Js=s(y,"LI",{});var H8=n(Js);wU=s(H8,"STRONG",{});var ASr=n(wU);tze=r(ASr,"bigbird_pegasus"),ASr.forEach(t),aze=r(H8," \u2014 "),QB=s(H8,"A",{href:!0});var LSr=n(QB);sze=r(LSr,"PegasusTokenizer"),LSr.forEach(t),nze=r(H8," or "),HB=s(H8,"A",{href:!0});var BSr=n(HB);lze=r(BSr,"PegasusTokenizerFast"),BSr.forEach(t),ize=r(H8," (BigBirdPegasus model)"),H8.forEach(t),dze=i(y),Ys=s(y,"LI",{});var U8=n(Ys);AU=s(U8,"STRONG",{});var xSr=n(AU);cze=r(xSr,"blenderbot"),xSr.forEach(t),mze=r(U8," \u2014 "),UB=s(U8,"A",{href:!0});var kSr=n(UB);fze=r(kSr,"BlenderbotTokenizer"),kSr.forEach(t),gze=r(U8," or "),JB=s(U8,"A",{href:!0});var RSr=n(JB);hze=r(RSr,"BlenderbotTokenizerFast"),RSr.forEach(t),uze=r(U8," (Blenderbot model)"),U8.forEach(t),pze=i(y),$g=s(y,"LI",{});var zMe=n($g);LU=s(zMe,"STRONG",{});var SSr=n(LU);_ze=r(SSr,"blenderbot-small"),SSr.forEach(t),bze=r(zMe," \u2014 "),YB=s(zMe,"A",{href:!0});var PSr=n(YB);vze=r(PSr,"BlenderbotSmallTokenizer"),PSr.forEach(t),Tze=r(zMe," (BlenderbotSmall model)"),zMe.forEach(t),Fze=i(y),Ig=s(y,"LI",{});var WMe=n(Ig);BU=s(WMe,"STRONG",{});var $Sr=n(BU);Cze=r($Sr,"byt5"),$Sr.forEach(t),Mze=r(WMe," \u2014 "),KB=s(WMe,"A",{href:!0});var ISr=n(KB);Eze=r(ISr,"ByT5Tokenizer"),ISr.forEach(t),yze=r(WMe," (ByT5 model)"),WMe.forEach(t),wze=i(y),Ks=s(y,"LI",{});var J8=n(Ks);xU=s(J8,"STRONG",{});var jSr=n(xU);Aze=r(jSr,"camembert"),jSr.forEach(t),Lze=r(J8," \u2014 "),ZB=s(J8,"A",{href:!0});var DSr=n(ZB);Bze=r(DSr,"CamembertTokenizer"),DSr.forEach(t),xze=r(J8," or "),ex=s(J8,"A",{href:!0});var NSr=n(ex);kze=r(NSr,"CamembertTokenizerFast"),NSr.forEach(t),Rze=r(J8," (CamemBERT model)"),J8.forEach(t),Sze=i(y),jg=s(y,"LI",{});var QMe=n(jg);kU=s(QMe,"STRONG",{});var qSr=n(kU);Pze=r(qSr,"canine"),qSr.forEach(t),$ze=r(QMe," \u2014 "),ox=s(QMe,"A",{href:!0});var OSr=n(ox);Ize=r(OSr,"CanineTokenizer"),OSr.forEach(t),jze=r(QMe," (Canine model)"),QMe.forEach(t),Dze=i(y),Zs=s(y,"LI",{});var Y8=n(Zs);RU=s(Y8,"STRONG",{});var GSr=n(RU);Nze=r(GSr,"clip"),GSr.forEach(t),qze=r(Y8," \u2014 "),rx=s(Y8,"A",{href:!0});var XSr=n(rx);Oze=r(XSr,"CLIPTokenizer"),XSr.forEach(t),Gze=r(Y8," or "),tx=s(Y8,"A",{href:!0});var VSr=n(tx);Xze=r(VSr,"CLIPTokenizerFast"),VSr.forEach(t),Vze=r(Y8," (CLIP model)"),Y8.forEach(t),zze=i(y),en=s(y,"LI",{});var K8=n(en);SU=s(K8,"STRONG",{});var zSr=n(SU);Wze=r(zSr,"convbert"),zSr.forEach(t),Qze=r(K8," \u2014 "),ax=s(K8,"A",{href:!0});var WSr=n(ax);Hze=r(WSr,"ConvBertTokenizer"),WSr.forEach(t),Uze=r(K8," or "),sx=s(K8,"A",{href:!0});var QSr=n(sx);Jze=r(QSr,"ConvBertTokenizerFast"),QSr.forEach(t),Yze=r(K8," (ConvBERT model)"),K8.forEach(t),Kze=i(y),on=s(y,"LI",{});var Z8=n(on);PU=s(Z8,"STRONG",{});var HSr=n(PU);Zze=r(HSr,"cpm"),HSr.forEach(t),eWe=r(Z8," \u2014 "),nx=s(Z8,"A",{href:!0});var USr=n(nx);oWe=r(USr,"CpmTokenizer"),USr.forEach(t),rWe=r(Z8," or "),$U=s(Z8,"CODE",{});var JSr=n($U);tWe=r(JSr,"CpmTokenizerFast"),JSr.forEach(t),aWe=r(Z8," (CPM model)"),Z8.forEach(t),sWe=i(y),Dg=s(y,"LI",{});var HMe=n(Dg);IU=s(HMe,"STRONG",{});var YSr=n(IU);nWe=r(YSr,"ctrl"),YSr.forEach(t),lWe=r(HMe," \u2014 "),lx=s(HMe,"A",{href:!0});var KSr=n(lx);iWe=r(KSr,"CTRLTokenizer"),KSr.forEach(t),dWe=r(HMe," (CTRL model)"),HMe.forEach(t),cWe=i(y),rn=s(y,"LI",{});var e7=n(rn);jU=s(e7,"STRONG",{});var ZSr=n(jU);mWe=r(ZSr,"deberta"),ZSr.forEach(t),fWe=r(e7," \u2014 "),ix=s(e7,"A",{href:!0});var ePr=n(ix);gWe=r(ePr,"DebertaTokenizer"),ePr.forEach(t),hWe=r(e7," or "),dx=s(e7,"A",{href:!0});var oPr=n(dx);uWe=r(oPr,"DebertaTokenizerFast"),oPr.forEach(t),pWe=r(e7," (DeBERTa model)"),e7.forEach(t),_We=i(y),Ng=s(y,"LI",{});var UMe=n(Ng);DU=s(UMe,"STRONG",{});var rPr=n(DU);bWe=r(rPr,"deberta-v2"),rPr.forEach(t),vWe=r(UMe," \u2014 "),cx=s(UMe,"A",{href:!0});var tPr=n(cx);TWe=r(tPr,"DebertaV2Tokenizer"),tPr.forEach(t),FWe=r(UMe," (DeBERTa-v2 model)"),UMe.forEach(t),CWe=i(y),tn=s(y,"LI",{});var o7=n(tn);NU=s(o7,"STRONG",{});var aPr=n(NU);MWe=r(aPr,"distilbert"),aPr.forEach(t),EWe=r(o7," \u2014 "),mx=s(o7,"A",{href:!0});var sPr=n(mx);yWe=r(sPr,"DistilBertTokenizer"),sPr.forEach(t),wWe=r(o7," or "),fx=s(o7,"A",{href:!0});var nPr=n(fx);AWe=r(nPr,"DistilBertTokenizerFast"),nPr.forEach(t),LWe=r(o7," (DistilBERT model)"),o7.forEach(t),BWe=i(y),an=s(y,"LI",{});var r7=n(an);qU=s(r7,"STRONG",{});var lPr=n(qU);xWe=r(lPr,"dpr"),lPr.forEach(t),kWe=r(r7," \u2014 "),gx=s(r7,"A",{href:!0});var iPr=n(gx);RWe=r(iPr,"DPRQuestionEncoderTokenizer"),iPr.forEach(t),SWe=r(r7," or "),hx=s(r7,"A",{href:!0});var dPr=n(hx);PWe=r(dPr,"DPRQuestionEncoderTokenizerFast"),dPr.forEach(t),$We=r(r7," (DPR model)"),r7.forEach(t),IWe=i(y),sn=s(y,"LI",{});var t7=n(sn);OU=s(t7,"STRONG",{});var cPr=n(OU);jWe=r(cPr,"electra"),cPr.forEach(t),DWe=r(t7," \u2014 "),ux=s(t7,"A",{href:!0});var mPr=n(ux);NWe=r(mPr,"ElectraTokenizer"),mPr.forEach(t),qWe=r(t7," or "),px=s(t7,"A",{href:!0});var fPr=n(px);OWe=r(fPr,"ElectraTokenizerFast"),fPr.forEach(t),GWe=r(t7," (ELECTRA model)"),t7.forEach(t),XWe=i(y),qg=s(y,"LI",{});var JMe=n(qg);GU=s(JMe,"STRONG",{});var gPr=n(GU);VWe=r(gPr,"flaubert"),gPr.forEach(t),zWe=r(JMe," \u2014 "),_x=s(JMe,"A",{href:!0});var hPr=n(_x);WWe=r(hPr,"FlaubertTokenizer"),hPr.forEach(t),QWe=r(JMe," (FlauBERT model)"),JMe.forEach(t),HWe=i(y),nn=s(y,"LI",{});var a7=n(nn);XU=s(a7,"STRONG",{});var uPr=n(XU);UWe=r(uPr,"fnet"),uPr.forEach(t),JWe=r(a7," \u2014 "),bx=s(a7,"A",{href:!0});var pPr=n(bx);YWe=r(pPr,"FNetTokenizer"),pPr.forEach(t),KWe=r(a7," or "),vx=s(a7,"A",{href:!0});var _Pr=n(vx);ZWe=r(_Pr,"FNetTokenizerFast"),_Pr.forEach(t),eQe=r(a7," (FNet model)"),a7.forEach(t),oQe=i(y),Og=s(y,"LI",{});var YMe=n(Og);VU=s(YMe,"STRONG",{});var bPr=n(VU);rQe=r(bPr,"fsmt"),bPr.forEach(t),tQe=r(YMe," \u2014 "),Tx=s(YMe,"A",{href:!0});var vPr=n(Tx);aQe=r(vPr,"FSMTTokenizer"),vPr.forEach(t),sQe=r(YMe," (FairSeq Machine-Translation model)"),YMe.forEach(t),nQe=i(y),ln=s(y,"LI",{});var s7=n(ln);zU=s(s7,"STRONG",{});var TPr=n(zU);lQe=r(TPr,"funnel"),TPr.forEach(t),iQe=r(s7," \u2014 "),Fx=s(s7,"A",{href:!0});var FPr=n(Fx);dQe=r(FPr,"FunnelTokenizer"),FPr.forEach(t),cQe=r(s7," or "),Cx=s(s7,"A",{href:!0});var CPr=n(Cx);mQe=r(CPr,"FunnelTokenizerFast"),CPr.forEach(t),fQe=r(s7," (Funnel Transformer model)"),s7.forEach(t),gQe=i(y),dn=s(y,"LI",{});var n7=n(dn);WU=s(n7,"STRONG",{});var MPr=n(WU);hQe=r(MPr,"gpt2"),MPr.forEach(t),uQe=r(n7," \u2014 "),Mx=s(n7,"A",{href:!0});var EPr=n(Mx);pQe=r(EPr,"GPT2Tokenizer"),EPr.forEach(t),_Qe=r(n7," or "),Ex=s(n7,"A",{href:!0});var yPr=n(Ex);bQe=r(yPr,"GPT2TokenizerFast"),yPr.forEach(t),vQe=r(n7," (OpenAI GPT-2 model)"),n7.forEach(t),TQe=i(y),cn=s(y,"LI",{});var l7=n(cn);QU=s(l7,"STRONG",{});var wPr=n(QU);FQe=r(wPr,"gpt_neo"),wPr.forEach(t),CQe=r(l7," \u2014 "),yx=s(l7,"A",{href:!0});var APr=n(yx);MQe=r(APr,"GPT2Tokenizer"),APr.forEach(t),EQe=r(l7," or "),wx=s(l7,"A",{href:!0});var LPr=n(wx);yQe=r(LPr,"GPT2TokenizerFast"),LPr.forEach(t),wQe=r(l7," (GPT Neo model)"),l7.forEach(t),AQe=i(y),mn=s(y,"LI",{});var i7=n(mn);HU=s(i7,"STRONG",{});var BPr=n(HU);LQe=r(BPr,"herbert"),BPr.forEach(t),BQe=r(i7," \u2014 "),Ax=s(i7,"A",{href:!0});var xPr=n(Ax);xQe=r(xPr,"HerbertTokenizer"),xPr.forEach(t),kQe=r(i7," or "),Lx=s(i7,"A",{href:!0});var kPr=n(Lx);RQe=r(kPr,"HerbertTokenizerFast"),kPr.forEach(t),SQe=r(i7," (HerBERT model)"),i7.forEach(t),PQe=i(y),Gg=s(y,"LI",{});var KMe=n(Gg);UU=s(KMe,"STRONG",{});var RPr=n(UU);$Qe=r(RPr,"hubert"),RPr.forEach(t),IQe=r(KMe," \u2014 "),Bx=s(KMe,"A",{href:!0});var SPr=n(Bx);jQe=r(SPr,"Wav2Vec2CTCTokenizer"),SPr.forEach(t),DQe=r(KMe," (Hubert model)"),KMe.forEach(t),NQe=i(y),fn=s(y,"LI",{});var d7=n(fn);JU=s(d7,"STRONG",{});var PPr=n(JU);qQe=r(PPr,"ibert"),PPr.forEach(t),OQe=r(d7," \u2014 "),xx=s(d7,"A",{href:!0});var $Pr=n(xx);GQe=r($Pr,"RobertaTokenizer"),$Pr.forEach(t),XQe=r(d7," or "),kx=s(d7,"A",{href:!0});var IPr=n(kx);VQe=r(IPr,"RobertaTokenizerFast"),IPr.forEach(t),zQe=r(d7," (I-BERT model)"),d7.forEach(t),WQe=i(y),gn=s(y,"LI",{});var c7=n(gn);YU=s(c7,"STRONG",{});var jPr=n(YU);QQe=r(jPr,"layoutlm"),jPr.forEach(t),HQe=r(c7," \u2014 "),Rx=s(c7,"A",{href:!0});var DPr=n(Rx);UQe=r(DPr,"LayoutLMTokenizer"),DPr.forEach(t),JQe=r(c7," or "),Sx=s(c7,"A",{href:!0});var NPr=n(Sx);YQe=r(NPr,"LayoutLMTokenizerFast"),NPr.forEach(t),KQe=r(c7," (LayoutLM model)"),c7.forEach(t),ZQe=i(y),hn=s(y,"LI",{});var m7=n(hn);KU=s(m7,"STRONG",{});var qPr=n(KU);eHe=r(qPr,"layoutlmv2"),qPr.forEach(t),oHe=r(m7," \u2014 "),Px=s(m7,"A",{href:!0});var OPr=n(Px);rHe=r(OPr,"LayoutLMv2Tokenizer"),OPr.forEach(t),tHe=r(m7," or "),$x=s(m7,"A",{href:!0});var GPr=n($x);aHe=r(GPr,"LayoutLMv2TokenizerFast"),GPr.forEach(t),sHe=r(m7," (LayoutLMv2 model)"),m7.forEach(t),nHe=i(y),un=s(y,"LI",{});var f7=n(un);ZU=s(f7,"STRONG",{});var XPr=n(ZU);lHe=r(XPr,"layoutxlm"),XPr.forEach(t),iHe=r(f7," \u2014 "),Ix=s(f7,"A",{href:!0});var VPr=n(Ix);dHe=r(VPr,"LayoutXLMTokenizer"),VPr.forEach(t),cHe=r(f7," or "),jx=s(f7,"A",{href:!0});var zPr=n(jx);mHe=r(zPr,"LayoutXLMTokenizerFast"),zPr.forEach(t),fHe=r(f7," (LayoutXLM model)"),f7.forEach(t),gHe=i(y),pn=s(y,"LI",{});var g7=n(pn);eJ=s(g7,"STRONG",{});var WPr=n(eJ);hHe=r(WPr,"led"),WPr.forEach(t),uHe=r(g7," \u2014 "),Dx=s(g7,"A",{href:!0});var QPr=n(Dx);pHe=r(QPr,"LEDTokenizer"),QPr.forEach(t),_He=r(g7," or "),Nx=s(g7,"A",{href:!0});var HPr=n(Nx);bHe=r(HPr,"LEDTokenizerFast"),HPr.forEach(t),vHe=r(g7," (LED model)"),g7.forEach(t),THe=i(y),_n=s(y,"LI",{});var h7=n(_n);oJ=s(h7,"STRONG",{});var UPr=n(oJ);FHe=r(UPr,"longformer"),UPr.forEach(t),CHe=r(h7," \u2014 "),qx=s(h7,"A",{href:!0});var JPr=n(qx);MHe=r(JPr,"LongformerTokenizer"),JPr.forEach(t),EHe=r(h7," or "),Ox=s(h7,"A",{href:!0});var YPr=n(Ox);yHe=r(YPr,"LongformerTokenizerFast"),YPr.forEach(t),wHe=r(h7," (Longformer model)"),h7.forEach(t),AHe=i(y),Xg=s(y,"LI",{});var ZMe=n(Xg);rJ=s(ZMe,"STRONG",{});var KPr=n(rJ);LHe=r(KPr,"luke"),KPr.forEach(t),BHe=r(ZMe," \u2014 "),Gx=s(ZMe,"A",{href:!0});var ZPr=n(Gx);xHe=r(ZPr,"LukeTokenizer"),ZPr.forEach(t),kHe=r(ZMe," (LUKE model)"),ZMe.forEach(t),RHe=i(y),bn=s(y,"LI",{});var u7=n(bn);tJ=s(u7,"STRONG",{});var e$r=n(tJ);SHe=r(e$r,"lxmert"),e$r.forEach(t),PHe=r(u7," \u2014 "),Xx=s(u7,"A",{href:!0});var o$r=n(Xx);$He=r(o$r,"LxmertTokenizer"),o$r.forEach(t),IHe=r(u7," or "),Vx=s(u7,"A",{href:!0});var r$r=n(Vx);jHe=r(r$r,"LxmertTokenizerFast"),r$r.forEach(t),DHe=r(u7," (LXMERT model)"),u7.forEach(t),NHe=i(y),Vg=s(y,"LI",{});var e4e=n(Vg);aJ=s(e4e,"STRONG",{});var t$r=n(aJ);qHe=r(t$r,"m2m_100"),t$r.forEach(t),OHe=r(e4e," \u2014 "),zx=s(e4e,"A",{href:!0});var a$r=n(zx);GHe=r(a$r,"M2M100Tokenizer"),a$r.forEach(t),XHe=r(e4e," (M2M100 model)"),e4e.forEach(t),VHe=i(y),zg=s(y,"LI",{});var o4e=n(zg);sJ=s(o4e,"STRONG",{});var s$r=n(sJ);zHe=r(s$r,"marian"),s$r.forEach(t),WHe=r(o4e," \u2014 "),Wx=s(o4e,"A",{href:!0});var n$r=n(Wx);QHe=r(n$r,"MarianTokenizer"),n$r.forEach(t),HHe=r(o4e," (Marian model)"),o4e.forEach(t),UHe=i(y),vn=s(y,"LI",{});var p7=n(vn);nJ=s(p7,"STRONG",{});var l$r=n(nJ);JHe=r(l$r,"mbart"),l$r.forEach(t),YHe=r(p7," \u2014 "),Qx=s(p7,"A",{href:!0});var i$r=n(Qx);KHe=r(i$r,"MBartTokenizer"),i$r.forEach(t),ZHe=r(p7," or "),Hx=s(p7,"A",{href:!0});var d$r=n(Hx);eUe=r(d$r,"MBartTokenizerFast"),d$r.forEach(t),oUe=r(p7," (mBART model)"),p7.forEach(t),rUe=i(y),Tn=s(y,"LI",{});var _7=n(Tn);lJ=s(_7,"STRONG",{});var c$r=n(lJ);tUe=r(c$r,"mbart50"),c$r.forEach(t),aUe=r(_7," \u2014 "),Ux=s(_7,"A",{href:!0});var m$r=n(Ux);sUe=r(m$r,"MBart50Tokenizer"),m$r.forEach(t),nUe=r(_7," or "),Jx=s(_7,"A",{href:!0});var f$r=n(Jx);lUe=r(f$r,"MBart50TokenizerFast"),f$r.forEach(t),iUe=r(_7," (mBART-50 model)"),_7.forEach(t),dUe=i(y),Wg=s(y,"LI",{});var r4e=n(Wg);iJ=s(r4e,"STRONG",{});var g$r=n(iJ);cUe=r(g$r,"mluke"),g$r.forEach(t),mUe=r(r4e," \u2014 "),Yx=s(r4e,"A",{href:!0});var h$r=n(Yx);fUe=r(h$r,"MLukeTokenizer"),h$r.forEach(t),gUe=r(r4e," (mLUKE model)"),r4e.forEach(t),hUe=i(y),Fn=s(y,"LI",{});var b7=n(Fn);dJ=s(b7,"STRONG",{});var u$r=n(dJ);uUe=r(u$r,"mobilebert"),u$r.forEach(t),pUe=r(b7," \u2014 "),Kx=s(b7,"A",{href:!0});var p$r=n(Kx);_Ue=r(p$r,"MobileBertTokenizer"),p$r.forEach(t),bUe=r(b7," or "),Zx=s(b7,"A",{href:!0});var _$r=n(Zx);vUe=r(_$r,"MobileBertTokenizerFast"),_$r.forEach(t),TUe=r(b7," (MobileBERT model)"),b7.forEach(t),FUe=i(y),Cn=s(y,"LI",{});var v7=n(Cn);cJ=s(v7,"STRONG",{});var b$r=n(cJ);CUe=r(b$r,"mpnet"),b$r.forEach(t),MUe=r(v7," \u2014 "),ek=s(v7,"A",{href:!0});var v$r=n(ek);EUe=r(v$r,"MPNetTokenizer"),v$r.forEach(t),yUe=r(v7," or "),ok=s(v7,"A",{href:!0});var T$r=n(ok);wUe=r(T$r,"MPNetTokenizerFast"),T$r.forEach(t),AUe=r(v7," (MPNet model)"),v7.forEach(t),LUe=i(y),Mn=s(y,"LI",{});var T7=n(Mn);mJ=s(T7,"STRONG",{});var F$r=n(mJ);BUe=r(F$r,"mt5"),F$r.forEach(t),xUe=r(T7," \u2014 "),rk=s(T7,"A",{href:!0});var C$r=n(rk);kUe=r(C$r,"MT5Tokenizer"),C$r.forEach(t),RUe=r(T7," or "),tk=s(T7,"A",{href:!0});var M$r=n(tk);SUe=r(M$r,"MT5TokenizerFast"),M$r.forEach(t),PUe=r(T7," (mT5 model)"),T7.forEach(t),$Ue=i(y),En=s(y,"LI",{});var F7=n(En);fJ=s(F7,"STRONG",{});var E$r=n(fJ);IUe=r(E$r,"openai-gpt"),E$r.forEach(t),jUe=r(F7," \u2014 "),ak=s(F7,"A",{href:!0});var y$r=n(ak);DUe=r(y$r,"OpenAIGPTTokenizer"),y$r.forEach(t),NUe=r(F7," or "),sk=s(F7,"A",{href:!0});var w$r=n(sk);qUe=r(w$r,"OpenAIGPTTokenizerFast"),w$r.forEach(t),OUe=r(F7," (OpenAI GPT model)"),F7.forEach(t),GUe=i(y),yn=s(y,"LI",{});var C7=n(yn);gJ=s(C7,"STRONG",{});var A$r=n(gJ);XUe=r(A$r,"pegasus"),A$r.forEach(t),VUe=r(C7," \u2014 "),nk=s(C7,"A",{href:!0});var L$r=n(nk);zUe=r(L$r,"PegasusTokenizer"),L$r.forEach(t),WUe=r(C7," or "),lk=s(C7,"A",{href:!0});var B$r=n(lk);QUe=r(B$r,"PegasusTokenizerFast"),B$r.forEach(t),HUe=r(C7," (Pegasus model)"),C7.forEach(t),UUe=i(y),Qg=s(y,"LI",{});var t4e=n(Qg);hJ=s(t4e,"STRONG",{});var x$r=n(hJ);JUe=r(x$r,"perceiver"),x$r.forEach(t),YUe=r(t4e," \u2014 "),ik=s(t4e,"A",{href:!0});var k$r=n(ik);KUe=r(k$r,"PerceiverTokenizer"),k$r.forEach(t),ZUe=r(t4e," (Perceiver model)"),t4e.forEach(t),eJe=i(y),Hg=s(y,"LI",{});var a4e=n(Hg);uJ=s(a4e,"STRONG",{});var R$r=n(uJ);oJe=r(R$r,"phobert"),R$r.forEach(t),rJe=r(a4e," \u2014 "),dk=s(a4e,"A",{href:!0});var S$r=n(dk);tJe=r(S$r,"PhobertTokenizer"),S$r.forEach(t),aJe=r(a4e," (PhoBERT model)"),a4e.forEach(t),sJe=i(y),Ug=s(y,"LI",{});var s4e=n(Ug);pJ=s(s4e,"STRONG",{});var P$r=n(pJ);nJe=r(P$r,"plbart"),P$r.forEach(t),lJe=r(s4e," \u2014 "),ck=s(s4e,"A",{href:!0});var $$r=n(ck);iJe=r($$r,"PLBartTokenizer"),$$r.forEach(t),dJe=r(s4e," (PLBart model)"),s4e.forEach(t),cJe=i(y),Jg=s(y,"LI",{});var n4e=n(Jg);_J=s(n4e,"STRONG",{});var I$r=n(_J);mJe=r(I$r,"prophetnet"),I$r.forEach(t),fJe=r(n4e," \u2014 "),mk=s(n4e,"A",{href:!0});var j$r=n(mk);gJe=r(j$r,"ProphetNetTokenizer"),j$r.forEach(t),hJe=r(n4e," (ProphetNet model)"),n4e.forEach(t),uJe=i(y),wn=s(y,"LI",{});var M7=n(wn);bJ=s(M7,"STRONG",{});var D$r=n(bJ);pJe=r(D$r,"qdqbert"),D$r.forEach(t),_Je=r(M7," \u2014 "),fk=s(M7,"A",{href:!0});var N$r=n(fk);bJe=r(N$r,"BertTokenizer"),N$r.forEach(t),vJe=r(M7," or "),gk=s(M7,"A",{href:!0});var q$r=n(gk);TJe=r(q$r,"BertTokenizerFast"),q$r.forEach(t),FJe=r(M7," (QDQBert model)"),M7.forEach(t),CJe=i(y),Yg=s(y,"LI",{});var l4e=n(Yg);vJ=s(l4e,"STRONG",{});var O$r=n(vJ);MJe=r(O$r,"rag"),O$r.forEach(t),EJe=r(l4e," \u2014 "),hk=s(l4e,"A",{href:!0});var G$r=n(hk);yJe=r(G$r,"RagTokenizer"),G$r.forEach(t),wJe=r(l4e," (RAG model)"),l4e.forEach(t),AJe=i(y),An=s(y,"LI",{});var E7=n(An);TJ=s(E7,"STRONG",{});var X$r=n(TJ);LJe=r(X$r,"realm"),X$r.forEach(t),BJe=r(E7," \u2014 "),uk=s(E7,"A",{href:!0});var V$r=n(uk);xJe=r(V$r,"RealmTokenizer"),V$r.forEach(t),kJe=r(E7," or "),pk=s(E7,"A",{href:!0});var z$r=n(pk);RJe=r(z$r,"RealmTokenizerFast"),z$r.forEach(t),SJe=r(E7," (Realm model)"),E7.forEach(t),PJe=i(y),Ln=s(y,"LI",{});var y7=n(Ln);FJ=s(y7,"STRONG",{});var W$r=n(FJ);$Je=r(W$r,"reformer"),W$r.forEach(t),IJe=r(y7," \u2014 "),_k=s(y7,"A",{href:!0});var Q$r=n(_k);jJe=r(Q$r,"ReformerTokenizer"),Q$r.forEach(t),DJe=r(y7," or "),bk=s(y7,"A",{href:!0});var H$r=n(bk);NJe=r(H$r,"ReformerTokenizerFast"),H$r.forEach(t),qJe=r(y7," (Reformer model)"),y7.forEach(t),OJe=i(y),Bn=s(y,"LI",{});var w7=n(Bn);CJ=s(w7,"STRONG",{});var U$r=n(CJ);GJe=r(U$r,"rembert"),U$r.forEach(t),XJe=r(w7," \u2014 "),vk=s(w7,"A",{href:!0});var J$r=n(vk);VJe=r(J$r,"RemBertTokenizer"),J$r.forEach(t),zJe=r(w7," or "),Tk=s(w7,"A",{href:!0});var Y$r=n(Tk);WJe=r(Y$r,"RemBertTokenizerFast"),Y$r.forEach(t),QJe=r(w7," (RemBERT model)"),w7.forEach(t),HJe=i(y),xn=s(y,"LI",{});var A7=n(xn);MJ=s(A7,"STRONG",{});var K$r=n(MJ);UJe=r(K$r,"retribert"),K$r.forEach(t),JJe=r(A7," \u2014 "),Fk=s(A7,"A",{href:!0});var Z$r=n(Fk);YJe=r(Z$r,"RetriBertTokenizer"),Z$r.forEach(t),KJe=r(A7," or "),Ck=s(A7,"A",{href:!0});var eIr=n(Ck);ZJe=r(eIr,"RetriBertTokenizerFast"),eIr.forEach(t),eYe=r(A7," (RetriBERT model)"),A7.forEach(t),oYe=i(y),kn=s(y,"LI",{});var L7=n(kn);EJ=s(L7,"STRONG",{});var oIr=n(EJ);rYe=r(oIr,"roberta"),oIr.forEach(t),tYe=r(L7," \u2014 "),Mk=s(L7,"A",{href:!0});var rIr=n(Mk);aYe=r(rIr,"RobertaTokenizer"),rIr.forEach(t),sYe=r(L7," or "),Ek=s(L7,"A",{href:!0});var tIr=n(Ek);nYe=r(tIr,"RobertaTokenizerFast"),tIr.forEach(t),lYe=r(L7," (RoBERTa model)"),L7.forEach(t),iYe=i(y),Rn=s(y,"LI",{});var B7=n(Rn);yJ=s(B7,"STRONG",{});var aIr=n(yJ);dYe=r(aIr,"roformer"),aIr.forEach(t),cYe=r(B7," \u2014 "),yk=s(B7,"A",{href:!0});var sIr=n(yk);mYe=r(sIr,"RoFormerTokenizer"),sIr.forEach(t),fYe=r(B7," or "),wk=s(B7,"A",{href:!0});var nIr=n(wk);gYe=r(nIr,"RoFormerTokenizerFast"),nIr.forEach(t),hYe=r(B7," (RoFormer model)"),B7.forEach(t),uYe=i(y),Kg=s(y,"LI",{});var i4e=n(Kg);wJ=s(i4e,"STRONG",{});var lIr=n(wJ);pYe=r(lIr,"speech_to_text"),lIr.forEach(t),_Ye=r(i4e," \u2014 "),Ak=s(i4e,"A",{href:!0});var iIr=n(Ak);bYe=r(iIr,"Speech2TextTokenizer"),iIr.forEach(t),vYe=r(i4e," (Speech2Text model)"),i4e.forEach(t),TYe=i(y),Zg=s(y,"LI",{});var d4e=n(Zg);AJ=s(d4e,"STRONG",{});var dIr=n(AJ);FYe=r(dIr,"speech_to_text_2"),dIr.forEach(t),CYe=r(d4e," \u2014 "),Lk=s(d4e,"A",{href:!0});var cIr=n(Lk);MYe=r(cIr,"Speech2Text2Tokenizer"),cIr.forEach(t),EYe=r(d4e," (Speech2Text2 model)"),d4e.forEach(t),yYe=i(y),Sn=s(y,"LI",{});var x7=n(Sn);LJ=s(x7,"STRONG",{});var mIr=n(LJ);wYe=r(mIr,"splinter"),mIr.forEach(t),AYe=r(x7," \u2014 "),Bk=s(x7,"A",{href:!0});var fIr=n(Bk);LYe=r(fIr,"SplinterTokenizer"),fIr.forEach(t),BYe=r(x7," or "),xk=s(x7,"A",{href:!0});var gIr=n(xk);xYe=r(gIr,"SplinterTokenizerFast"),gIr.forEach(t),kYe=r(x7," (Splinter model)"),x7.forEach(t),RYe=i(y),Pn=s(y,"LI",{});var k7=n(Pn);BJ=s(k7,"STRONG",{});var hIr=n(BJ);SYe=r(hIr,"squeezebert"),hIr.forEach(t),PYe=r(k7," \u2014 "),kk=s(k7,"A",{href:!0});var uIr=n(kk);$Ye=r(uIr,"SqueezeBertTokenizer"),uIr.forEach(t),IYe=r(k7," or "),Rk=s(k7,"A",{href:!0});var pIr=n(Rk);jYe=r(pIr,"SqueezeBertTokenizerFast"),pIr.forEach(t),DYe=r(k7," (SqueezeBERT model)"),k7.forEach(t),NYe=i(y),$n=s(y,"LI",{});var R7=n($n);xJ=s(R7,"STRONG",{});var _Ir=n(xJ);qYe=r(_Ir,"t5"),_Ir.forEach(t),OYe=r(R7," \u2014 "),Sk=s(R7,"A",{href:!0});var bIr=n(Sk);GYe=r(bIr,"T5Tokenizer"),bIr.forEach(t),XYe=r(R7," or "),Pk=s(R7,"A",{href:!0});var vIr=n(Pk);VYe=r(vIr,"T5TokenizerFast"),vIr.forEach(t),zYe=r(R7," (T5 model)"),R7.forEach(t),WYe=i(y),eh=s(y,"LI",{});var c4e=n(eh);kJ=s(c4e,"STRONG",{});var TIr=n(kJ);QYe=r(TIr,"tapas"),TIr.forEach(t),HYe=r(c4e," \u2014 "),$k=s(c4e,"A",{href:!0});var FIr=n($k);UYe=r(FIr,"TapasTokenizer"),FIr.forEach(t),JYe=r(c4e," (TAPAS model)"),c4e.forEach(t),YYe=i(y),oh=s(y,"LI",{});var m4e=n(oh);RJ=s(m4e,"STRONG",{});var CIr=n(RJ);KYe=r(CIr,"transfo-xl"),CIr.forEach(t),ZYe=r(m4e," \u2014 "),Ik=s(m4e,"A",{href:!0});var MIr=n(Ik);eKe=r(MIr,"TransfoXLTokenizer"),MIr.forEach(t),oKe=r(m4e," (Transformer-XL model)"),m4e.forEach(t),rKe=i(y),rh=s(y,"LI",{});var f4e=n(rh);SJ=s(f4e,"STRONG",{});var EIr=n(SJ);tKe=r(EIr,"wav2vec2"),EIr.forEach(t),aKe=r(f4e," \u2014 "),jk=s(f4e,"A",{href:!0});var yIr=n(jk);sKe=r(yIr,"Wav2Vec2CTCTokenizer"),yIr.forEach(t),nKe=r(f4e," (Wav2Vec2 model)"),f4e.forEach(t),lKe=i(y),th=s(y,"LI",{});var g4e=n(th);PJ=s(g4e,"STRONG",{});var wIr=n(PJ);iKe=r(wIr,"wav2vec2_phoneme"),wIr.forEach(t),dKe=r(g4e," \u2014 "),Dk=s(g4e,"A",{href:!0});var AIr=n(Dk);cKe=r(AIr,"Wav2Vec2PhonemeCTCTokenizer"),AIr.forEach(t),mKe=r(g4e," (Wav2Vec2Phoneme model)"),g4e.forEach(t),fKe=i(y),In=s(y,"LI",{});var S7=n(In);$J=s(S7,"STRONG",{});var LIr=n($J);gKe=r(LIr,"xglm"),LIr.forEach(t),hKe=r(S7," \u2014 "),Nk=s(S7,"A",{href:!0});var BIr=n(Nk);uKe=r(BIr,"XGLMTokenizer"),BIr.forEach(t),pKe=r(S7," or "),qk=s(S7,"A",{href:!0});var xIr=n(qk);_Ke=r(xIr,"XGLMTokenizerFast"),xIr.forEach(t),bKe=r(S7," (XGLM model)"),S7.forEach(t),vKe=i(y),ah=s(y,"LI",{});var h4e=n(ah);IJ=s(h4e,"STRONG",{});var kIr=n(IJ);TKe=r(kIr,"xlm"),kIr.forEach(t),FKe=r(h4e," \u2014 "),Ok=s(h4e,"A",{href:!0});var RIr=n(Ok);CKe=r(RIr,"XLMTokenizer"),RIr.forEach(t),MKe=r(h4e," (XLM model)"),h4e.forEach(t),EKe=i(y),sh=s(y,"LI",{});var u4e=n(sh);jJ=s(u4e,"STRONG",{});var SIr=n(jJ);yKe=r(SIr,"xlm-prophetnet"),SIr.forEach(t),wKe=r(u4e," \u2014 "),Gk=s(u4e,"A",{href:!0});var PIr=n(Gk);AKe=r(PIr,"XLMProphetNetTokenizer"),PIr.forEach(t),LKe=r(u4e," (XLMProphetNet model)"),u4e.forEach(t),BKe=i(y),jn=s(y,"LI",{});var P7=n(jn);DJ=s(P7,"STRONG",{});var $Ir=n(DJ);xKe=r($Ir,"xlm-roberta"),$Ir.forEach(t),kKe=r(P7," \u2014 "),Xk=s(P7,"A",{href:!0});var IIr=n(Xk);RKe=r(IIr,"XLMRobertaTokenizer"),IIr.forEach(t),SKe=r(P7," or "),Vk=s(P7,"A",{href:!0});var jIr=n(Vk);PKe=r(jIr,"XLMRobertaTokenizerFast"),jIr.forEach(t),$Ke=r(P7," (XLM-RoBERTa model)"),P7.forEach(t),IKe=i(y),Dn=s(y,"LI",{});var $7=n(Dn);NJ=s($7,"STRONG",{});var DIr=n(NJ);jKe=r(DIr,"xlnet"),DIr.forEach(t),DKe=r($7," \u2014 "),zk=s($7,"A",{href:!0});var NIr=n(zk);NKe=r(NIr,"XLNetTokenizer"),NIr.forEach(t),qKe=r($7," or "),Wk=s($7,"A",{href:!0});var qIr=n(Wk);OKe=r(qIr,"XLNetTokenizerFast"),qIr.forEach(t),GKe=r($7," (XLNet model)"),$7.forEach(t),y.forEach(t),XKe=i(ha),qJ=s(ha,"P",{});var OIr=n(qJ);VKe=r(OIr,"Examples:"),OIr.forEach(t),zKe=i(ha),f(cy.$$.fragment,ha),ha.forEach(t),WKe=i(Xn),nh=s(Xn,"DIV",{class:!0});var uRe=n(nh);f(my.$$.fragment,uRe),QKe=i(uRe),OJ=s(uRe,"P",{});var GIr=n(OJ);HKe=r(GIr,"Register a new tokenizer in this mapping."),GIr.forEach(t),uRe.forEach(t),Xn.forEach(t),mxe=i(d),Hi=s(d,"H2",{class:!0});var pRe=n(Hi);lh=s(pRe,"A",{id:!0,class:!0,href:!0});var XIr=n(lh);GJ=s(XIr,"SPAN",{});var VIr=n(GJ);f(fy.$$.fragment,VIr),VIr.forEach(t),XIr.forEach(t),UKe=i(pRe),XJ=s(pRe,"SPAN",{});var zIr=n(XJ);JKe=r(zIr,"AutoFeatureExtractor"),zIr.forEach(t),pRe.forEach(t),fxe=i(d),Ho=s(d,"DIV",{class:!0});var Vn=n(Ho);f(gy.$$.fragment,Vn),YKe=i(Vn),hy=s(Vn,"P",{});var _Re=n(hy);KKe=r(_Re,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Qk=s(_Re,"A",{href:!0});var WIr=n(Qk);ZKe=r(WIr,"AutoFeatureExtractor.from_pretrained()"),WIr.forEach(t),eZe=r(_Re," class method."),_Re.forEach(t),oZe=i(Vn),uy=s(Vn,"P",{});var bRe=n(uy);rZe=r(bRe,"This class cannot be instantiated directly using "),VJ=s(bRe,"CODE",{});var QIr=n(VJ);tZe=r(QIr,"__init__()"),QIr.forEach(t),aZe=r(bRe," (throws an error)."),bRe.forEach(t),sZe=i(Vn),$e=s(Vn,"DIV",{class:!0});var Dt=n($e);f(py.$$.fragment,Dt),nZe=i(Dt),zJ=s(Dt,"P",{});var HIr=n(zJ);lZe=r(HIr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HIr.forEach(t),iZe=i(Dt),Xa=s(Dt,"P",{});var U3=n(Xa);dZe=r(U3,"The feature extractor class to instantiate is selected based on the "),WJ=s(U3,"CODE",{});var UIr=n(WJ);cZe=r(UIr,"model_type"),UIr.forEach(t),mZe=r(U3,` property of the config object
(either passed as an argument or loaded from `),QJ=s(U3,"CODE",{});var JIr=n(QJ);fZe=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),gZe=r(U3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),HJ=s(U3,"CODE",{});var YIr=n(HJ);hZe=r(YIr,"pretrained_model_name_or_path"),YIr.forEach(t),uZe=r(U3,":"),U3.forEach(t),pZe=i(Dt),ae=s(Dt,"UL",{});var le=n(ae);ih=s(le,"LI",{});var p4e=n(ih);UJ=s(p4e,"STRONG",{});var KIr=n(UJ);_Ze=r(KIr,"beit"),KIr.forEach(t),bZe=r(p4e," \u2014 "),Hk=s(p4e,"A",{href:!0});var ZIr=n(Hk);vZe=r(ZIr,"BeitFeatureExtractor"),ZIr.forEach(t),TZe=r(p4e," (BEiT model)"),p4e.forEach(t),FZe=i(le),dh=s(le,"LI",{});var _4e=n(dh);JJ=s(_4e,"STRONG",{});var ejr=n(JJ);CZe=r(ejr,"clip"),ejr.forEach(t),MZe=r(_4e," \u2014 "),Uk=s(_4e,"A",{href:!0});var ojr=n(Uk);EZe=r(ojr,"CLIPFeatureExtractor"),ojr.forEach(t),yZe=r(_4e," (CLIP model)"),_4e.forEach(t),wZe=i(le),ch=s(le,"LI",{});var b4e=n(ch);YJ=s(b4e,"STRONG",{});var rjr=n(YJ);AZe=r(rjr,"convnext"),rjr.forEach(t),LZe=r(b4e," \u2014 "),Jk=s(b4e,"A",{href:!0});var tjr=n(Jk);BZe=r(tjr,"ConvNextFeatureExtractor"),tjr.forEach(t),xZe=r(b4e," (ConvNext model)"),b4e.forEach(t),kZe=i(le),mh=s(le,"LI",{});var v4e=n(mh);KJ=s(v4e,"STRONG",{});var ajr=n(KJ);RZe=r(ajr,"deit"),ajr.forEach(t),SZe=r(v4e," \u2014 "),Yk=s(v4e,"A",{href:!0});var sjr=n(Yk);PZe=r(sjr,"DeiTFeatureExtractor"),sjr.forEach(t),$Ze=r(v4e," (DeiT model)"),v4e.forEach(t),IZe=i(le),fh=s(le,"LI",{});var T4e=n(fh);ZJ=s(T4e,"STRONG",{});var njr=n(ZJ);jZe=r(njr,"detr"),njr.forEach(t),DZe=r(T4e," \u2014 "),Kk=s(T4e,"A",{href:!0});var ljr=n(Kk);NZe=r(ljr,"DetrFeatureExtractor"),ljr.forEach(t),qZe=r(T4e," (DETR model)"),T4e.forEach(t),OZe=i(le),gh=s(le,"LI",{});var F4e=n(gh);eY=s(F4e,"STRONG",{});var ijr=n(eY);GZe=r(ijr,"hubert"),ijr.forEach(t),XZe=r(F4e," \u2014 "),Zk=s(F4e,"A",{href:!0});var djr=n(Zk);VZe=r(djr,"Wav2Vec2FeatureExtractor"),djr.forEach(t),zZe=r(F4e," (Hubert model)"),F4e.forEach(t),WZe=i(le),hh=s(le,"LI",{});var C4e=n(hh);oY=s(C4e,"STRONG",{});var cjr=n(oY);QZe=r(cjr,"layoutlmv2"),cjr.forEach(t),HZe=r(C4e," \u2014 "),eR=s(C4e,"A",{href:!0});var mjr=n(eR);UZe=r(mjr,"LayoutLMv2FeatureExtractor"),mjr.forEach(t),JZe=r(C4e," (LayoutLMv2 model)"),C4e.forEach(t),YZe=i(le),uh=s(le,"LI",{});var M4e=n(uh);rY=s(M4e,"STRONG",{});var fjr=n(rY);KZe=r(fjr,"maskformer"),fjr.forEach(t),ZZe=r(M4e," \u2014 "),oR=s(M4e,"A",{href:!0});var gjr=n(oR);eeo=r(gjr,"MaskFormerFeatureExtractor"),gjr.forEach(t),oeo=r(M4e," (MaskFormer model)"),M4e.forEach(t),reo=i(le),ph=s(le,"LI",{});var E4e=n(ph);tY=s(E4e,"STRONG",{});var hjr=n(tY);teo=r(hjr,"perceiver"),hjr.forEach(t),aeo=r(E4e," \u2014 "),rR=s(E4e,"A",{href:!0});var ujr=n(rR);seo=r(ujr,"PerceiverFeatureExtractor"),ujr.forEach(t),neo=r(E4e," (Perceiver model)"),E4e.forEach(t),leo=i(le),_h=s(le,"LI",{});var y4e=n(_h);aY=s(y4e,"STRONG",{});var pjr=n(aY);ieo=r(pjr,"poolformer"),pjr.forEach(t),deo=r(y4e," \u2014 "),tR=s(y4e,"A",{href:!0});var _jr=n(tR);ceo=r(_jr,"PoolFormerFeatureExtractor"),_jr.forEach(t),meo=r(y4e," (PoolFormer model)"),y4e.forEach(t),feo=i(le),bh=s(le,"LI",{});var w4e=n(bh);sY=s(w4e,"STRONG",{});var bjr=n(sY);geo=r(bjr,"segformer"),bjr.forEach(t),heo=r(w4e," \u2014 "),aR=s(w4e,"A",{href:!0});var vjr=n(aR);ueo=r(vjr,"SegformerFeatureExtractor"),vjr.forEach(t),peo=r(w4e," (SegFormer model)"),w4e.forEach(t),_eo=i(le),vh=s(le,"LI",{});var A4e=n(vh);nY=s(A4e,"STRONG",{});var Tjr=n(nY);beo=r(Tjr,"speech_to_text"),Tjr.forEach(t),veo=r(A4e," \u2014 "),sR=s(A4e,"A",{href:!0});var Fjr=n(sR);Teo=r(Fjr,"Speech2TextFeatureExtractor"),Fjr.forEach(t),Feo=r(A4e," (Speech2Text model)"),A4e.forEach(t),Ceo=i(le),Th=s(le,"LI",{});var L4e=n(Th);lY=s(L4e,"STRONG",{});var Cjr=n(lY);Meo=r(Cjr,"swin"),Cjr.forEach(t),Eeo=r(L4e," \u2014 "),nR=s(L4e,"A",{href:!0});var Mjr=n(nR);yeo=r(Mjr,"ViTFeatureExtractor"),Mjr.forEach(t),weo=r(L4e," (Swin model)"),L4e.forEach(t),Aeo=i(le),Fh=s(le,"LI",{});var B4e=n(Fh);iY=s(B4e,"STRONG",{});var Ejr=n(iY);Leo=r(Ejr,"vit"),Ejr.forEach(t),Beo=r(B4e," \u2014 "),lR=s(B4e,"A",{href:!0});var yjr=n(lR);xeo=r(yjr,"ViTFeatureExtractor"),yjr.forEach(t),keo=r(B4e," (ViT model)"),B4e.forEach(t),Reo=i(le),Ch=s(le,"LI",{});var x4e=n(Ch);dY=s(x4e,"STRONG",{});var wjr=n(dY);Seo=r(wjr,"vit_mae"),wjr.forEach(t),Peo=r(x4e," \u2014 "),iR=s(x4e,"A",{href:!0});var Ajr=n(iR);$eo=r(Ajr,"ViTFeatureExtractor"),Ajr.forEach(t),Ieo=r(x4e," (ViTMAE model)"),x4e.forEach(t),jeo=i(le),Mh=s(le,"LI",{});var k4e=n(Mh);cY=s(k4e,"STRONG",{});var Ljr=n(cY);Deo=r(Ljr,"wav2vec2"),Ljr.forEach(t),Neo=r(k4e," \u2014 "),dR=s(k4e,"A",{href:!0});var Bjr=n(dR);qeo=r(Bjr,"Wav2Vec2FeatureExtractor"),Bjr.forEach(t),Oeo=r(k4e," (Wav2Vec2 model)"),k4e.forEach(t),le.forEach(t),Geo=i(Dt),f(Eh.$$.fragment,Dt),Xeo=i(Dt),mY=s(Dt,"P",{});var xjr=n(mY);Veo=r(xjr,"Examples:"),xjr.forEach(t),zeo=i(Dt),f(_y.$$.fragment,Dt),Dt.forEach(t),Weo=i(Vn),yh=s(Vn,"DIV",{class:!0});var vRe=n(yh);f(by.$$.fragment,vRe),Qeo=i(vRe),fY=s(vRe,"P",{});var kjr=n(fY);Heo=r(kjr,"Register a new feature extractor for this class."),kjr.forEach(t),vRe.forEach(t),Vn.forEach(t),gxe=i(d),Ui=s(d,"H2",{class:!0});var TRe=n(Ui);wh=s(TRe,"A",{id:!0,class:!0,href:!0});var Rjr=n(wh);gY=s(Rjr,"SPAN",{});var Sjr=n(gY);f(vy.$$.fragment,Sjr),Sjr.forEach(t),Rjr.forEach(t),Ueo=i(TRe),hY=s(TRe,"SPAN",{});var Pjr=n(hY);Jeo=r(Pjr,"AutoProcessor"),Pjr.forEach(t),TRe.forEach(t),hxe=i(d),Uo=s(d,"DIV",{class:!0});var zn=n(Uo);f(Ty.$$.fragment,zn),Yeo=i(zn),Fy=s(zn,"P",{});var FRe=n(Fy);Keo=r(FRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cR=s(FRe,"A",{href:!0});var $jr=n(cR);Zeo=r($jr,"AutoProcessor.from_pretrained()"),$jr.forEach(t),eoo=r(FRe," class method."),FRe.forEach(t),ooo=i(zn),Cy=s(zn,"P",{});var CRe=n(Cy);roo=r(CRe,"This class cannot be instantiated directly using "),uY=s(CRe,"CODE",{});var Ijr=n(uY);too=r(Ijr,"__init__()"),Ijr.forEach(t),aoo=r(CRe," (throws an error)."),CRe.forEach(t),soo=i(zn),Ie=s(zn,"DIV",{class:!0});var Nt=n(Ie);f(My.$$.fragment,Nt),noo=i(Nt),pY=s(Nt,"P",{});var jjr=n(pY);loo=r(jjr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jjr.forEach(t),ioo=i(Nt),Ji=s(Nt,"P",{});var Cz=n(Ji);doo=r(Cz,"The processor class to instantiate is selected based on the "),_Y=s(Cz,"CODE",{});var Djr=n(_Y);coo=r(Djr,"model_type"),Djr.forEach(t),moo=r(Cz,` property of the config object (either
passed as an argument or loaded from `),bY=s(Cz,"CODE",{});var Njr=n(bY);foo=r(Njr,"pretrained_model_name_or_path"),Njr.forEach(t),goo=r(Cz," if possible):"),Cz.forEach(t),hoo=i(Nt),Be=s(Nt,"UL",{});var No=n(Be);Ah=s(No,"LI",{});var R4e=n(Ah);vY=s(R4e,"STRONG",{});var qjr=n(vY);uoo=r(qjr,"clip"),qjr.forEach(t),poo=r(R4e," \u2014 "),mR=s(R4e,"A",{href:!0});var Ojr=n(mR);_oo=r(Ojr,"CLIPProcessor"),Ojr.forEach(t),boo=r(R4e," (CLIP model)"),R4e.forEach(t),voo=i(No),Lh=s(No,"LI",{});var S4e=n(Lh);TY=s(S4e,"STRONG",{});var Gjr=n(TY);Too=r(Gjr,"layoutlmv2"),Gjr.forEach(t),Foo=r(S4e," \u2014 "),fR=s(S4e,"A",{href:!0});var Xjr=n(fR);Coo=r(Xjr,"LayoutLMv2Processor"),Xjr.forEach(t),Moo=r(S4e," (LayoutLMv2 model)"),S4e.forEach(t),Eoo=i(No),Bh=s(No,"LI",{});var P4e=n(Bh);FY=s(P4e,"STRONG",{});var Vjr=n(FY);yoo=r(Vjr,"layoutxlm"),Vjr.forEach(t),woo=r(P4e," \u2014 "),gR=s(P4e,"A",{href:!0});var zjr=n(gR);Aoo=r(zjr,"LayoutXLMProcessor"),zjr.forEach(t),Loo=r(P4e," (LayoutXLM model)"),P4e.forEach(t),Boo=i(No),xh=s(No,"LI",{});var $4e=n(xh);CY=s($4e,"STRONG",{});var Wjr=n(CY);xoo=r(Wjr,"speech_to_text"),Wjr.forEach(t),koo=r($4e," \u2014 "),hR=s($4e,"A",{href:!0});var Qjr=n(hR);Roo=r(Qjr,"Speech2TextProcessor"),Qjr.forEach(t),Soo=r($4e," (Speech2Text model)"),$4e.forEach(t),Poo=i(No),kh=s(No,"LI",{});var I4e=n(kh);MY=s(I4e,"STRONG",{});var Hjr=n(MY);$oo=r(Hjr,"speech_to_text_2"),Hjr.forEach(t),Ioo=r(I4e," \u2014 "),uR=s(I4e,"A",{href:!0});var Ujr=n(uR);joo=r(Ujr,"Speech2Text2Processor"),Ujr.forEach(t),Doo=r(I4e," (Speech2Text2 model)"),I4e.forEach(t),Noo=i(No),Rh=s(No,"LI",{});var j4e=n(Rh);EY=s(j4e,"STRONG",{});var Jjr=n(EY);qoo=r(Jjr,"trocr"),Jjr.forEach(t),Ooo=r(j4e," \u2014 "),pR=s(j4e,"A",{href:!0});var Yjr=n(pR);Goo=r(Yjr,"TrOCRProcessor"),Yjr.forEach(t),Xoo=r(j4e," (TrOCR model)"),j4e.forEach(t),Voo=i(No),Sh=s(No,"LI",{});var D4e=n(Sh);yY=s(D4e,"STRONG",{});var Kjr=n(yY);zoo=r(Kjr,"vision-text-dual-encoder"),Kjr.forEach(t),Woo=r(D4e," \u2014 "),_R=s(D4e,"A",{href:!0});var Zjr=n(_R);Qoo=r(Zjr,"VisionTextDualEncoderProcessor"),Zjr.forEach(t),Hoo=r(D4e," (VisionTextDualEncoder model)"),D4e.forEach(t),Uoo=i(No),Ph=s(No,"LI",{});var N4e=n(Ph);wY=s(N4e,"STRONG",{});var eDr=n(wY);Joo=r(eDr,"wav2vec2"),eDr.forEach(t),Yoo=r(N4e," \u2014 "),bR=s(N4e,"A",{href:!0});var oDr=n(bR);Koo=r(oDr,"Wav2Vec2Processor"),oDr.forEach(t),Zoo=r(N4e," (Wav2Vec2 model)"),N4e.forEach(t),No.forEach(t),ero=i(Nt),f($h.$$.fragment,Nt),oro=i(Nt),AY=s(Nt,"P",{});var rDr=n(AY);rro=r(rDr,"Examples:"),rDr.forEach(t),tro=i(Nt),f(Ey.$$.fragment,Nt),Nt.forEach(t),aro=i(zn),Ih=s(zn,"DIV",{class:!0});var MRe=n(Ih);f(yy.$$.fragment,MRe),sro=i(MRe),LY=s(MRe,"P",{});var tDr=n(LY);nro=r(tDr,"Register a new processor for this class."),tDr.forEach(t),MRe.forEach(t),zn.forEach(t),uxe=i(d),Yi=s(d,"H2",{class:!0});var ERe=n(Yi);jh=s(ERe,"A",{id:!0,class:!0,href:!0});var aDr=n(jh);BY=s(aDr,"SPAN",{});var sDr=n(BY);f(wy.$$.fragment,sDr),sDr.forEach(t),aDr.forEach(t),lro=i(ERe),xY=s(ERe,"SPAN",{});var nDr=n(xY);iro=r(nDr,"AutoModel"),nDr.forEach(t),ERe.forEach(t),pxe=i(d),Jo=s(d,"DIV",{class:!0});var Wn=n(Jo);f(Ay.$$.fragment,Wn),dro=i(Wn),Ki=s(Wn,"P",{});var Mz=n(Ki);cro=r(Mz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=s(Mz,"CODE",{});var lDr=n(kY);mro=r(lDr,"from_pretrained()"),lDr.forEach(t),fro=r(Mz,"class method or the "),RY=s(Mz,"CODE",{});var iDr=n(RY);gro=r(iDr,"from_config()"),iDr.forEach(t),hro=r(Mz,`class
method.`),Mz.forEach(t),uro=i(Wn),Ly=s(Wn,"P",{});var yRe=n(Ly);pro=r(yRe,"This class cannot be instantiated directly using "),SY=s(yRe,"CODE",{});var dDr=n(SY);_ro=r(dDr,"__init__()"),dDr.forEach(t),bro=r(yRe," (throws an error)."),yRe.forEach(t),vro=i(Wn),Vr=s(Wn,"DIV",{class:!0});var Qn=n(Vr);f(By.$$.fragment,Qn),Tro=i(Qn),PY=s(Qn,"P",{});var cDr=n(PY);Fro=r(cDr,"Instantiates one of the base model classes of the library from a configuration."),cDr.forEach(t),Cro=i(Qn),Zi=s(Qn,"P",{});var Ez=n(Zi);Mro=r(Ez,`Note:
Loading a model from its configuration file does `),$Y=s(Ez,"STRONG",{});var mDr=n($Y);Ero=r(mDr,"not"),mDr.forEach(t),yro=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=s(Ez,"CODE",{});var fDr=n(IY);wro=r(fDr,"from_pretrained()"),fDr.forEach(t),Aro=r(Ez,"to load the model weights."),Ez.forEach(t),Lro=i(Qn),jY=s(Qn,"P",{});var gDr=n(jY);Bro=r(gDr,"Examples:"),gDr.forEach(t),xro=i(Qn),f(xy.$$.fragment,Qn),Qn.forEach(t),kro=i(Wn),je=s(Wn,"DIV",{class:!0});var qt=n(je);f(ky.$$.fragment,qt),Rro=i(qt),DY=s(qt,"P",{});var hDr=n(DY);Sro=r(hDr,"Instantiate one of the base model classes of the library from a pretrained model."),hDr.forEach(t),Pro=i(qt),Va=s(qt,"P",{});var J3=n(Va);$ro=r(J3,"The model class to instantiate is selected based on the "),NY=s(J3,"CODE",{});var uDr=n(NY);Iro=r(uDr,"model_type"),uDr.forEach(t),jro=r(J3,` property of the config object (either
passed as an argument or loaded from `),qY=s(J3,"CODE",{});var pDr=n(qY);Dro=r(pDr,"pretrained_model_name_or_path"),pDr.forEach(t),Nro=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OY=s(J3,"CODE",{});var _Dr=n(OY);qro=r(_Dr,"pretrained_model_name_or_path"),_Dr.forEach(t),Oro=r(J3,":"),J3.forEach(t),Gro=i(qt),F=s(qt,"UL",{});var C=n(F);Dh=s(C,"LI",{});var q4e=n(Dh);GY=s(q4e,"STRONG",{});var bDr=n(GY);Xro=r(bDr,"albert"),bDr.forEach(t),Vro=r(q4e," \u2014 "),vR=s(q4e,"A",{href:!0});var vDr=n(vR);zro=r(vDr,"AlbertModel"),vDr.forEach(t),Wro=r(q4e," (ALBERT model)"),q4e.forEach(t),Qro=i(C),Nh=s(C,"LI",{});var O4e=n(Nh);XY=s(O4e,"STRONG",{});var TDr=n(XY);Hro=r(TDr,"bart"),TDr.forEach(t),Uro=r(O4e," \u2014 "),TR=s(O4e,"A",{href:!0});var FDr=n(TR);Jro=r(FDr,"BartModel"),FDr.forEach(t),Yro=r(O4e," (BART model)"),O4e.forEach(t),Kro=i(C),qh=s(C,"LI",{});var G4e=n(qh);VY=s(G4e,"STRONG",{});var CDr=n(VY);Zro=r(CDr,"beit"),CDr.forEach(t),eto=r(G4e," \u2014 "),FR=s(G4e,"A",{href:!0});var MDr=n(FR);oto=r(MDr,"BeitModel"),MDr.forEach(t),rto=r(G4e," (BEiT model)"),G4e.forEach(t),tto=i(C),Oh=s(C,"LI",{});var X4e=n(Oh);zY=s(X4e,"STRONG",{});var EDr=n(zY);ato=r(EDr,"bert"),EDr.forEach(t),sto=r(X4e," \u2014 "),CR=s(X4e,"A",{href:!0});var yDr=n(CR);nto=r(yDr,"BertModel"),yDr.forEach(t),lto=r(X4e," (BERT model)"),X4e.forEach(t),ito=i(C),Gh=s(C,"LI",{});var V4e=n(Gh);WY=s(V4e,"STRONG",{});var wDr=n(WY);dto=r(wDr,"bert-generation"),wDr.forEach(t),cto=r(V4e," \u2014 "),MR=s(V4e,"A",{href:!0});var ADr=n(MR);mto=r(ADr,"BertGenerationEncoder"),ADr.forEach(t),fto=r(V4e," (Bert Generation model)"),V4e.forEach(t),gto=i(C),Xh=s(C,"LI",{});var z4e=n(Xh);QY=s(z4e,"STRONG",{});var LDr=n(QY);hto=r(LDr,"big_bird"),LDr.forEach(t),uto=r(z4e," \u2014 "),ER=s(z4e,"A",{href:!0});var BDr=n(ER);pto=r(BDr,"BigBirdModel"),BDr.forEach(t),_to=r(z4e," (BigBird model)"),z4e.forEach(t),bto=i(C),Vh=s(C,"LI",{});var W4e=n(Vh);HY=s(W4e,"STRONG",{});var xDr=n(HY);vto=r(xDr,"bigbird_pegasus"),xDr.forEach(t),Tto=r(W4e," \u2014 "),yR=s(W4e,"A",{href:!0});var kDr=n(yR);Fto=r(kDr,"BigBirdPegasusModel"),kDr.forEach(t),Cto=r(W4e," (BigBirdPegasus model)"),W4e.forEach(t),Mto=i(C),zh=s(C,"LI",{});var Q4e=n(zh);UY=s(Q4e,"STRONG",{});var RDr=n(UY);Eto=r(RDr,"blenderbot"),RDr.forEach(t),yto=r(Q4e," \u2014 "),wR=s(Q4e,"A",{href:!0});var SDr=n(wR);wto=r(SDr,"BlenderbotModel"),SDr.forEach(t),Ato=r(Q4e," (Blenderbot model)"),Q4e.forEach(t),Lto=i(C),Wh=s(C,"LI",{});var H4e=n(Wh);JY=s(H4e,"STRONG",{});var PDr=n(JY);Bto=r(PDr,"blenderbot-small"),PDr.forEach(t),xto=r(H4e," \u2014 "),AR=s(H4e,"A",{href:!0});var $Dr=n(AR);kto=r($Dr,"BlenderbotSmallModel"),$Dr.forEach(t),Rto=r(H4e," (BlenderbotSmall model)"),H4e.forEach(t),Sto=i(C),Qh=s(C,"LI",{});var U4e=n(Qh);YY=s(U4e,"STRONG",{});var IDr=n(YY);Pto=r(IDr,"camembert"),IDr.forEach(t),$to=r(U4e," \u2014 "),LR=s(U4e,"A",{href:!0});var jDr=n(LR);Ito=r(jDr,"CamembertModel"),jDr.forEach(t),jto=r(U4e," (CamemBERT model)"),U4e.forEach(t),Dto=i(C),Hh=s(C,"LI",{});var J4e=n(Hh);KY=s(J4e,"STRONG",{});var DDr=n(KY);Nto=r(DDr,"canine"),DDr.forEach(t),qto=r(J4e," \u2014 "),BR=s(J4e,"A",{href:!0});var NDr=n(BR);Oto=r(NDr,"CanineModel"),NDr.forEach(t),Gto=r(J4e," (Canine model)"),J4e.forEach(t),Xto=i(C),Uh=s(C,"LI",{});var Y4e=n(Uh);ZY=s(Y4e,"STRONG",{});var qDr=n(ZY);Vto=r(qDr,"clip"),qDr.forEach(t),zto=r(Y4e," \u2014 "),xR=s(Y4e,"A",{href:!0});var ODr=n(xR);Wto=r(ODr,"CLIPModel"),ODr.forEach(t),Qto=r(Y4e," (CLIP model)"),Y4e.forEach(t),Hto=i(C),Jh=s(C,"LI",{});var K4e=n(Jh);eK=s(K4e,"STRONG",{});var GDr=n(eK);Uto=r(GDr,"convbert"),GDr.forEach(t),Jto=r(K4e," \u2014 "),kR=s(K4e,"A",{href:!0});var XDr=n(kR);Yto=r(XDr,"ConvBertModel"),XDr.forEach(t),Kto=r(K4e," (ConvBERT model)"),K4e.forEach(t),Zto=i(C),Yh=s(C,"LI",{});var Z4e=n(Yh);oK=s(Z4e,"STRONG",{});var VDr=n(oK);eao=r(VDr,"convnext"),VDr.forEach(t),oao=r(Z4e," \u2014 "),RR=s(Z4e,"A",{href:!0});var zDr=n(RR);rao=r(zDr,"ConvNextModel"),zDr.forEach(t),tao=r(Z4e," (ConvNext model)"),Z4e.forEach(t),aao=i(C),Kh=s(C,"LI",{});var eEe=n(Kh);rK=s(eEe,"STRONG",{});var WDr=n(rK);sao=r(WDr,"ctrl"),WDr.forEach(t),nao=r(eEe," \u2014 "),SR=s(eEe,"A",{href:!0});var QDr=n(SR);lao=r(QDr,"CTRLModel"),QDr.forEach(t),iao=r(eEe," (CTRL model)"),eEe.forEach(t),dao=i(C),Zh=s(C,"LI",{});var oEe=n(Zh);tK=s(oEe,"STRONG",{});var HDr=n(tK);cao=r(HDr,"data2vec-audio"),HDr.forEach(t),mao=r(oEe," \u2014 "),PR=s(oEe,"A",{href:!0});var UDr=n(PR);fao=r(UDr,"Data2VecAudioModel"),UDr.forEach(t),gao=r(oEe," (Data2VecAudio model)"),oEe.forEach(t),hao=i(C),eu=s(C,"LI",{});var rEe=n(eu);aK=s(rEe,"STRONG",{});var JDr=n(aK);uao=r(JDr,"data2vec-text"),JDr.forEach(t),pao=r(rEe," \u2014 "),$R=s(rEe,"A",{href:!0});var YDr=n($R);_ao=r(YDr,"Data2VecTextModel"),YDr.forEach(t),bao=r(rEe," (Data2VecText model)"),rEe.forEach(t),vao=i(C),ou=s(C,"LI",{});var tEe=n(ou);sK=s(tEe,"STRONG",{});var KDr=n(sK);Tao=r(KDr,"deberta"),KDr.forEach(t),Fao=r(tEe," \u2014 "),IR=s(tEe,"A",{href:!0});var ZDr=n(IR);Cao=r(ZDr,"DebertaModel"),ZDr.forEach(t),Mao=r(tEe," (DeBERTa model)"),tEe.forEach(t),Eao=i(C),ru=s(C,"LI",{});var aEe=n(ru);nK=s(aEe,"STRONG",{});var eNr=n(nK);yao=r(eNr,"deberta-v2"),eNr.forEach(t),wao=r(aEe," \u2014 "),jR=s(aEe,"A",{href:!0});var oNr=n(jR);Aao=r(oNr,"DebertaV2Model"),oNr.forEach(t),Lao=r(aEe," (DeBERTa-v2 model)"),aEe.forEach(t),Bao=i(C),tu=s(C,"LI",{});var sEe=n(tu);lK=s(sEe,"STRONG",{});var rNr=n(lK);xao=r(rNr,"deit"),rNr.forEach(t),kao=r(sEe," \u2014 "),DR=s(sEe,"A",{href:!0});var tNr=n(DR);Rao=r(tNr,"DeiTModel"),tNr.forEach(t),Sao=r(sEe," (DeiT model)"),sEe.forEach(t),Pao=i(C),au=s(C,"LI",{});var nEe=n(au);iK=s(nEe,"STRONG",{});var aNr=n(iK);$ao=r(aNr,"detr"),aNr.forEach(t),Iao=r(nEe," \u2014 "),NR=s(nEe,"A",{href:!0});var sNr=n(NR);jao=r(sNr,"DetrModel"),sNr.forEach(t),Dao=r(nEe," (DETR model)"),nEe.forEach(t),Nao=i(C),su=s(C,"LI",{});var lEe=n(su);dK=s(lEe,"STRONG",{});var nNr=n(dK);qao=r(nNr,"distilbert"),nNr.forEach(t),Oao=r(lEe," \u2014 "),qR=s(lEe,"A",{href:!0});var lNr=n(qR);Gao=r(lNr,"DistilBertModel"),lNr.forEach(t),Xao=r(lEe," (DistilBERT model)"),lEe.forEach(t),Vao=i(C),nu=s(C,"LI",{});var iEe=n(nu);cK=s(iEe,"STRONG",{});var iNr=n(cK);zao=r(iNr,"dpr"),iNr.forEach(t),Wao=r(iEe," \u2014 "),OR=s(iEe,"A",{href:!0});var dNr=n(OR);Qao=r(dNr,"DPRQuestionEncoder"),dNr.forEach(t),Hao=r(iEe," (DPR model)"),iEe.forEach(t),Uao=i(C),lu=s(C,"LI",{});var dEe=n(lu);mK=s(dEe,"STRONG",{});var cNr=n(mK);Jao=r(cNr,"electra"),cNr.forEach(t),Yao=r(dEe," \u2014 "),GR=s(dEe,"A",{href:!0});var mNr=n(GR);Kao=r(mNr,"ElectraModel"),mNr.forEach(t),Zao=r(dEe," (ELECTRA model)"),dEe.forEach(t),eso=i(C),iu=s(C,"LI",{});var cEe=n(iu);fK=s(cEe,"STRONG",{});var fNr=n(fK);oso=r(fNr,"flaubert"),fNr.forEach(t),rso=r(cEe," \u2014 "),XR=s(cEe,"A",{href:!0});var gNr=n(XR);tso=r(gNr,"FlaubertModel"),gNr.forEach(t),aso=r(cEe," (FlauBERT model)"),cEe.forEach(t),sso=i(C),du=s(C,"LI",{});var mEe=n(du);gK=s(mEe,"STRONG",{});var hNr=n(gK);nso=r(hNr,"fnet"),hNr.forEach(t),lso=r(mEe," \u2014 "),VR=s(mEe,"A",{href:!0});var uNr=n(VR);iso=r(uNr,"FNetModel"),uNr.forEach(t),dso=r(mEe," (FNet model)"),mEe.forEach(t),cso=i(C),cu=s(C,"LI",{});var fEe=n(cu);hK=s(fEe,"STRONG",{});var pNr=n(hK);mso=r(pNr,"fsmt"),pNr.forEach(t),fso=r(fEe," \u2014 "),zR=s(fEe,"A",{href:!0});var _Nr=n(zR);gso=r(_Nr,"FSMTModel"),_Nr.forEach(t),hso=r(fEe," (FairSeq Machine-Translation model)"),fEe.forEach(t),uso=i(C),Nn=s(C,"LI",{});var I7=n(Nn);uK=s(I7,"STRONG",{});var bNr=n(uK);pso=r(bNr,"funnel"),bNr.forEach(t),_so=r(I7," \u2014 "),WR=s(I7,"A",{href:!0});var vNr=n(WR);bso=r(vNr,"FunnelModel"),vNr.forEach(t),vso=r(I7," or "),QR=s(I7,"A",{href:!0});var TNr=n(QR);Tso=r(TNr,"FunnelBaseModel"),TNr.forEach(t),Fso=r(I7," (Funnel Transformer model)"),I7.forEach(t),Cso=i(C),mu=s(C,"LI",{});var gEe=n(mu);pK=s(gEe,"STRONG",{});var FNr=n(pK);Mso=r(FNr,"gpt2"),FNr.forEach(t),Eso=r(gEe," \u2014 "),HR=s(gEe,"A",{href:!0});var CNr=n(HR);yso=r(CNr,"GPT2Model"),CNr.forEach(t),wso=r(gEe," (OpenAI GPT-2 model)"),gEe.forEach(t),Aso=i(C),fu=s(C,"LI",{});var hEe=n(fu);_K=s(hEe,"STRONG",{});var MNr=n(_K);Lso=r(MNr,"gpt_neo"),MNr.forEach(t),Bso=r(hEe," \u2014 "),UR=s(hEe,"A",{href:!0});var ENr=n(UR);xso=r(ENr,"GPTNeoModel"),ENr.forEach(t),kso=r(hEe," (GPT Neo model)"),hEe.forEach(t),Rso=i(C),gu=s(C,"LI",{});var uEe=n(gu);bK=s(uEe,"STRONG",{});var yNr=n(bK);Sso=r(yNr,"gptj"),yNr.forEach(t),Pso=r(uEe," \u2014 "),JR=s(uEe,"A",{href:!0});var wNr=n(JR);$so=r(wNr,"GPTJModel"),wNr.forEach(t),Iso=r(uEe," (GPT-J model)"),uEe.forEach(t),jso=i(C),hu=s(C,"LI",{});var pEe=n(hu);vK=s(pEe,"STRONG",{});var ANr=n(vK);Dso=r(ANr,"hubert"),ANr.forEach(t),Nso=r(pEe," \u2014 "),YR=s(pEe,"A",{href:!0});var LNr=n(YR);qso=r(LNr,"HubertModel"),LNr.forEach(t),Oso=r(pEe," (Hubert model)"),pEe.forEach(t),Gso=i(C),uu=s(C,"LI",{});var _Ee=n(uu);TK=s(_Ee,"STRONG",{});var BNr=n(TK);Xso=r(BNr,"ibert"),BNr.forEach(t),Vso=r(_Ee," \u2014 "),KR=s(_Ee,"A",{href:!0});var xNr=n(KR);zso=r(xNr,"IBertModel"),xNr.forEach(t),Wso=r(_Ee," (I-BERT model)"),_Ee.forEach(t),Qso=i(C),pu=s(C,"LI",{});var bEe=n(pu);FK=s(bEe,"STRONG",{});var kNr=n(FK);Hso=r(kNr,"imagegpt"),kNr.forEach(t),Uso=r(bEe," \u2014 "),ZR=s(bEe,"A",{href:!0});var RNr=n(ZR);Jso=r(RNr,"ImageGPTModel"),RNr.forEach(t),Yso=r(bEe," (ImageGPT model)"),bEe.forEach(t),Kso=i(C),_u=s(C,"LI",{});var vEe=n(_u);CK=s(vEe,"STRONG",{});var SNr=n(CK);Zso=r(SNr,"layoutlm"),SNr.forEach(t),eno=r(vEe," \u2014 "),eS=s(vEe,"A",{href:!0});var PNr=n(eS);ono=r(PNr,"LayoutLMModel"),PNr.forEach(t),rno=r(vEe," (LayoutLM model)"),vEe.forEach(t),tno=i(C),bu=s(C,"LI",{});var TEe=n(bu);MK=s(TEe,"STRONG",{});var $Nr=n(MK);ano=r($Nr,"layoutlmv2"),$Nr.forEach(t),sno=r(TEe," \u2014 "),oS=s(TEe,"A",{href:!0});var INr=n(oS);nno=r(INr,"LayoutLMv2Model"),INr.forEach(t),lno=r(TEe," (LayoutLMv2 model)"),TEe.forEach(t),ino=i(C),vu=s(C,"LI",{});var FEe=n(vu);EK=s(FEe,"STRONG",{});var jNr=n(EK);dno=r(jNr,"led"),jNr.forEach(t),cno=r(FEe," \u2014 "),rS=s(FEe,"A",{href:!0});var DNr=n(rS);mno=r(DNr,"LEDModel"),DNr.forEach(t),fno=r(FEe," (LED model)"),FEe.forEach(t),gno=i(C),Tu=s(C,"LI",{});var CEe=n(Tu);yK=s(CEe,"STRONG",{});var NNr=n(yK);hno=r(NNr,"longformer"),NNr.forEach(t),uno=r(CEe," \u2014 "),tS=s(CEe,"A",{href:!0});var qNr=n(tS);pno=r(qNr,"LongformerModel"),qNr.forEach(t),_no=r(CEe," (Longformer model)"),CEe.forEach(t),bno=i(C),Fu=s(C,"LI",{});var MEe=n(Fu);wK=s(MEe,"STRONG",{});var ONr=n(wK);vno=r(ONr,"luke"),ONr.forEach(t),Tno=r(MEe," \u2014 "),aS=s(MEe,"A",{href:!0});var GNr=n(aS);Fno=r(GNr,"LukeModel"),GNr.forEach(t),Cno=r(MEe," (LUKE model)"),MEe.forEach(t),Mno=i(C),Cu=s(C,"LI",{});var EEe=n(Cu);AK=s(EEe,"STRONG",{});var XNr=n(AK);Eno=r(XNr,"lxmert"),XNr.forEach(t),yno=r(EEe," \u2014 "),sS=s(EEe,"A",{href:!0});var VNr=n(sS);wno=r(VNr,"LxmertModel"),VNr.forEach(t),Ano=r(EEe," (LXMERT model)"),EEe.forEach(t),Lno=i(C),Mu=s(C,"LI",{});var yEe=n(Mu);LK=s(yEe,"STRONG",{});var zNr=n(LK);Bno=r(zNr,"m2m_100"),zNr.forEach(t),xno=r(yEe," \u2014 "),nS=s(yEe,"A",{href:!0});var WNr=n(nS);kno=r(WNr,"M2M100Model"),WNr.forEach(t),Rno=r(yEe," (M2M100 model)"),yEe.forEach(t),Sno=i(C),Eu=s(C,"LI",{});var wEe=n(Eu);BK=s(wEe,"STRONG",{});var QNr=n(BK);Pno=r(QNr,"marian"),QNr.forEach(t),$no=r(wEe," \u2014 "),lS=s(wEe,"A",{href:!0});var HNr=n(lS);Ino=r(HNr,"MarianModel"),HNr.forEach(t),jno=r(wEe," (Marian model)"),wEe.forEach(t),Dno=i(C),yu=s(C,"LI",{});var AEe=n(yu);xK=s(AEe,"STRONG",{});var UNr=n(xK);Nno=r(UNr,"maskformer"),UNr.forEach(t),qno=r(AEe," \u2014 "),iS=s(AEe,"A",{href:!0});var JNr=n(iS);Ono=r(JNr,"MaskFormerModel"),JNr.forEach(t),Gno=r(AEe," (MaskFormer model)"),AEe.forEach(t),Xno=i(C),wu=s(C,"LI",{});var LEe=n(wu);kK=s(LEe,"STRONG",{});var YNr=n(kK);Vno=r(YNr,"mbart"),YNr.forEach(t),zno=r(LEe," \u2014 "),dS=s(LEe,"A",{href:!0});var KNr=n(dS);Wno=r(KNr,"MBartModel"),KNr.forEach(t),Qno=r(LEe," (mBART model)"),LEe.forEach(t),Hno=i(C),Au=s(C,"LI",{});var BEe=n(Au);RK=s(BEe,"STRONG",{});var ZNr=n(RK);Uno=r(ZNr,"megatron-bert"),ZNr.forEach(t),Jno=r(BEe," \u2014 "),cS=s(BEe,"A",{href:!0});var eqr=n(cS);Yno=r(eqr,"MegatronBertModel"),eqr.forEach(t),Kno=r(BEe," (MegatronBert model)"),BEe.forEach(t),Zno=i(C),Lu=s(C,"LI",{});var xEe=n(Lu);SK=s(xEe,"STRONG",{});var oqr=n(SK);elo=r(oqr,"mobilebert"),oqr.forEach(t),olo=r(xEe," \u2014 "),mS=s(xEe,"A",{href:!0});var rqr=n(mS);rlo=r(rqr,"MobileBertModel"),rqr.forEach(t),tlo=r(xEe," (MobileBERT model)"),xEe.forEach(t),alo=i(C),Bu=s(C,"LI",{});var kEe=n(Bu);PK=s(kEe,"STRONG",{});var tqr=n(PK);slo=r(tqr,"mpnet"),tqr.forEach(t),nlo=r(kEe," \u2014 "),fS=s(kEe,"A",{href:!0});var aqr=n(fS);llo=r(aqr,"MPNetModel"),aqr.forEach(t),ilo=r(kEe," (MPNet model)"),kEe.forEach(t),dlo=i(C),xu=s(C,"LI",{});var REe=n(xu);$K=s(REe,"STRONG",{});var sqr=n($K);clo=r(sqr,"mt5"),sqr.forEach(t),mlo=r(REe," \u2014 "),gS=s(REe,"A",{href:!0});var nqr=n(gS);flo=r(nqr,"MT5Model"),nqr.forEach(t),glo=r(REe," (mT5 model)"),REe.forEach(t),hlo=i(C),ku=s(C,"LI",{});var SEe=n(ku);IK=s(SEe,"STRONG",{});var lqr=n(IK);ulo=r(lqr,"nystromformer"),lqr.forEach(t),plo=r(SEe," \u2014 "),hS=s(SEe,"A",{href:!0});var iqr=n(hS);_lo=r(iqr,"NystromformerModel"),iqr.forEach(t),blo=r(SEe," (Nystromformer model)"),SEe.forEach(t),vlo=i(C),Ru=s(C,"LI",{});var PEe=n(Ru);jK=s(PEe,"STRONG",{});var dqr=n(jK);Tlo=r(dqr,"openai-gpt"),dqr.forEach(t),Flo=r(PEe," \u2014 "),uS=s(PEe,"A",{href:!0});var cqr=n(uS);Clo=r(cqr,"OpenAIGPTModel"),cqr.forEach(t),Mlo=r(PEe," (OpenAI GPT model)"),PEe.forEach(t),Elo=i(C),Su=s(C,"LI",{});var $Ee=n(Su);DK=s($Ee,"STRONG",{});var mqr=n(DK);ylo=r(mqr,"pegasus"),mqr.forEach(t),wlo=r($Ee," \u2014 "),pS=s($Ee,"A",{href:!0});var fqr=n(pS);Alo=r(fqr,"PegasusModel"),fqr.forEach(t),Llo=r($Ee," (Pegasus model)"),$Ee.forEach(t),Blo=i(C),Pu=s(C,"LI",{});var IEe=n(Pu);NK=s(IEe,"STRONG",{});var gqr=n(NK);xlo=r(gqr,"perceiver"),gqr.forEach(t),klo=r(IEe," \u2014 "),_S=s(IEe,"A",{href:!0});var hqr=n(_S);Rlo=r(hqr,"PerceiverModel"),hqr.forEach(t),Slo=r(IEe," (Perceiver model)"),IEe.forEach(t),Plo=i(C),$u=s(C,"LI",{});var jEe=n($u);qK=s(jEe,"STRONG",{});var uqr=n(qK);$lo=r(uqr,"plbart"),uqr.forEach(t),Ilo=r(jEe," \u2014 "),bS=s(jEe,"A",{href:!0});var pqr=n(bS);jlo=r(pqr,"PLBartModel"),pqr.forEach(t),Dlo=r(jEe," (PLBart model)"),jEe.forEach(t),Nlo=i(C),Iu=s(C,"LI",{});var DEe=n(Iu);OK=s(DEe,"STRONG",{});var _qr=n(OK);qlo=r(_qr,"poolformer"),_qr.forEach(t),Olo=r(DEe," \u2014 "),vS=s(DEe,"A",{href:!0});var bqr=n(vS);Glo=r(bqr,"PoolFormerModel"),bqr.forEach(t),Xlo=r(DEe," (PoolFormer model)"),DEe.forEach(t),Vlo=i(C),ju=s(C,"LI",{});var NEe=n(ju);GK=s(NEe,"STRONG",{});var vqr=n(GK);zlo=r(vqr,"prophetnet"),vqr.forEach(t),Wlo=r(NEe," \u2014 "),TS=s(NEe,"A",{href:!0});var Tqr=n(TS);Qlo=r(Tqr,"ProphetNetModel"),Tqr.forEach(t),Hlo=r(NEe," (ProphetNet model)"),NEe.forEach(t),Ulo=i(C),Du=s(C,"LI",{});var qEe=n(Du);XK=s(qEe,"STRONG",{});var Fqr=n(XK);Jlo=r(Fqr,"qdqbert"),Fqr.forEach(t),Ylo=r(qEe," \u2014 "),FS=s(qEe,"A",{href:!0});var Cqr=n(FS);Klo=r(Cqr,"QDQBertModel"),Cqr.forEach(t),Zlo=r(qEe," (QDQBert model)"),qEe.forEach(t),eio=i(C),Nu=s(C,"LI",{});var OEe=n(Nu);VK=s(OEe,"STRONG",{});var Mqr=n(VK);oio=r(Mqr,"reformer"),Mqr.forEach(t),rio=r(OEe," \u2014 "),CS=s(OEe,"A",{href:!0});var Eqr=n(CS);tio=r(Eqr,"ReformerModel"),Eqr.forEach(t),aio=r(OEe," (Reformer model)"),OEe.forEach(t),sio=i(C),qu=s(C,"LI",{});var GEe=n(qu);zK=s(GEe,"STRONG",{});var yqr=n(zK);nio=r(yqr,"rembert"),yqr.forEach(t),lio=r(GEe," \u2014 "),MS=s(GEe,"A",{href:!0});var wqr=n(MS);iio=r(wqr,"RemBertModel"),wqr.forEach(t),dio=r(GEe," (RemBERT model)"),GEe.forEach(t),cio=i(C),Ou=s(C,"LI",{});var XEe=n(Ou);WK=s(XEe,"STRONG",{});var Aqr=n(WK);mio=r(Aqr,"retribert"),Aqr.forEach(t),fio=r(XEe," \u2014 "),ES=s(XEe,"A",{href:!0});var Lqr=n(ES);gio=r(Lqr,"RetriBertModel"),Lqr.forEach(t),hio=r(XEe," (RetriBERT model)"),XEe.forEach(t),uio=i(C),Gu=s(C,"LI",{});var VEe=n(Gu);QK=s(VEe,"STRONG",{});var Bqr=n(QK);pio=r(Bqr,"roberta"),Bqr.forEach(t),_io=r(VEe," \u2014 "),yS=s(VEe,"A",{href:!0});var xqr=n(yS);bio=r(xqr,"RobertaModel"),xqr.forEach(t),vio=r(VEe," (RoBERTa model)"),VEe.forEach(t),Tio=i(C),Xu=s(C,"LI",{});var zEe=n(Xu);HK=s(zEe,"STRONG",{});var kqr=n(HK);Fio=r(kqr,"roformer"),kqr.forEach(t),Cio=r(zEe," \u2014 "),wS=s(zEe,"A",{href:!0});var Rqr=n(wS);Mio=r(Rqr,"RoFormerModel"),Rqr.forEach(t),Eio=r(zEe," (RoFormer model)"),zEe.forEach(t),yio=i(C),Vu=s(C,"LI",{});var WEe=n(Vu);UK=s(WEe,"STRONG",{});var Sqr=n(UK);wio=r(Sqr,"segformer"),Sqr.forEach(t),Aio=r(WEe," \u2014 "),AS=s(WEe,"A",{href:!0});var Pqr=n(AS);Lio=r(Pqr,"SegformerModel"),Pqr.forEach(t),Bio=r(WEe," (SegFormer model)"),WEe.forEach(t),xio=i(C),zu=s(C,"LI",{});var QEe=n(zu);JK=s(QEe,"STRONG",{});var $qr=n(JK);kio=r($qr,"sew"),$qr.forEach(t),Rio=r(QEe," \u2014 "),LS=s(QEe,"A",{href:!0});var Iqr=n(LS);Sio=r(Iqr,"SEWModel"),Iqr.forEach(t),Pio=r(QEe," (SEW model)"),QEe.forEach(t),$io=i(C),Wu=s(C,"LI",{});var HEe=n(Wu);YK=s(HEe,"STRONG",{});var jqr=n(YK);Iio=r(jqr,"sew-d"),jqr.forEach(t),jio=r(HEe," \u2014 "),BS=s(HEe,"A",{href:!0});var Dqr=n(BS);Dio=r(Dqr,"SEWDModel"),Dqr.forEach(t),Nio=r(HEe," (SEW-D model)"),HEe.forEach(t),qio=i(C),Qu=s(C,"LI",{});var UEe=n(Qu);KK=s(UEe,"STRONG",{});var Nqr=n(KK);Oio=r(Nqr,"speech_to_text"),Nqr.forEach(t),Gio=r(UEe," \u2014 "),xS=s(UEe,"A",{href:!0});var qqr=n(xS);Xio=r(qqr,"Speech2TextModel"),qqr.forEach(t),Vio=r(UEe," (Speech2Text model)"),UEe.forEach(t),zio=i(C),Hu=s(C,"LI",{});var JEe=n(Hu);ZK=s(JEe,"STRONG",{});var Oqr=n(ZK);Wio=r(Oqr,"splinter"),Oqr.forEach(t),Qio=r(JEe," \u2014 "),kS=s(JEe,"A",{href:!0});var Gqr=n(kS);Hio=r(Gqr,"SplinterModel"),Gqr.forEach(t),Uio=r(JEe," (Splinter model)"),JEe.forEach(t),Jio=i(C),Uu=s(C,"LI",{});var YEe=n(Uu);eZ=s(YEe,"STRONG",{});var Xqr=n(eZ);Yio=r(Xqr,"squeezebert"),Xqr.forEach(t),Kio=r(YEe," \u2014 "),RS=s(YEe,"A",{href:!0});var Vqr=n(RS);Zio=r(Vqr,"SqueezeBertModel"),Vqr.forEach(t),edo=r(YEe," (SqueezeBERT model)"),YEe.forEach(t),odo=i(C),Ju=s(C,"LI",{});var KEe=n(Ju);oZ=s(KEe,"STRONG",{});var zqr=n(oZ);rdo=r(zqr,"swin"),zqr.forEach(t),tdo=r(KEe," \u2014 "),SS=s(KEe,"A",{href:!0});var Wqr=n(SS);ado=r(Wqr,"SwinModel"),Wqr.forEach(t),sdo=r(KEe," (Swin model)"),KEe.forEach(t),ndo=i(C),Yu=s(C,"LI",{});var ZEe=n(Yu);rZ=s(ZEe,"STRONG",{});var Qqr=n(rZ);ldo=r(Qqr,"t5"),Qqr.forEach(t),ido=r(ZEe," \u2014 "),PS=s(ZEe,"A",{href:!0});var Hqr=n(PS);ddo=r(Hqr,"T5Model"),Hqr.forEach(t),cdo=r(ZEe," (T5 model)"),ZEe.forEach(t),mdo=i(C),Ku=s(C,"LI",{});var e3e=n(Ku);tZ=s(e3e,"STRONG",{});var Uqr=n(tZ);fdo=r(Uqr,"tapas"),Uqr.forEach(t),gdo=r(e3e," \u2014 "),$S=s(e3e,"A",{href:!0});var Jqr=n($S);hdo=r(Jqr,"TapasModel"),Jqr.forEach(t),udo=r(e3e," (TAPAS model)"),e3e.forEach(t),pdo=i(C),Zu=s(C,"LI",{});var o3e=n(Zu);aZ=s(o3e,"STRONG",{});var Yqr=n(aZ);_do=r(Yqr,"transfo-xl"),Yqr.forEach(t),bdo=r(o3e," \u2014 "),IS=s(o3e,"A",{href:!0});var Kqr=n(IS);vdo=r(Kqr,"TransfoXLModel"),Kqr.forEach(t),Tdo=r(o3e," (Transformer-XL model)"),o3e.forEach(t),Fdo=i(C),ep=s(C,"LI",{});var r3e=n(ep);sZ=s(r3e,"STRONG",{});var Zqr=n(sZ);Cdo=r(Zqr,"unispeech"),Zqr.forEach(t),Mdo=r(r3e," \u2014 "),jS=s(r3e,"A",{href:!0});var eOr=n(jS);Edo=r(eOr,"UniSpeechModel"),eOr.forEach(t),ydo=r(r3e," (UniSpeech model)"),r3e.forEach(t),wdo=i(C),op=s(C,"LI",{});var t3e=n(op);nZ=s(t3e,"STRONG",{});var oOr=n(nZ);Ado=r(oOr,"unispeech-sat"),oOr.forEach(t),Ldo=r(t3e," \u2014 "),DS=s(t3e,"A",{href:!0});var rOr=n(DS);Bdo=r(rOr,"UniSpeechSatModel"),rOr.forEach(t),xdo=r(t3e," (UniSpeechSat model)"),t3e.forEach(t),kdo=i(C),rp=s(C,"LI",{});var a3e=n(rp);lZ=s(a3e,"STRONG",{});var tOr=n(lZ);Rdo=r(tOr,"vilt"),tOr.forEach(t),Sdo=r(a3e," \u2014 "),NS=s(a3e,"A",{href:!0});var aOr=n(NS);Pdo=r(aOr,"ViltModel"),aOr.forEach(t),$do=r(a3e," (ViLT model)"),a3e.forEach(t),Ido=i(C),tp=s(C,"LI",{});var s3e=n(tp);iZ=s(s3e,"STRONG",{});var sOr=n(iZ);jdo=r(sOr,"vision-text-dual-encoder"),sOr.forEach(t),Ddo=r(s3e," \u2014 "),qS=s(s3e,"A",{href:!0});var nOr=n(qS);Ndo=r(nOr,"VisionTextDualEncoderModel"),nOr.forEach(t),qdo=r(s3e," (VisionTextDualEncoder model)"),s3e.forEach(t),Odo=i(C),ap=s(C,"LI",{});var n3e=n(ap);dZ=s(n3e,"STRONG",{});var lOr=n(dZ);Gdo=r(lOr,"visual_bert"),lOr.forEach(t),Xdo=r(n3e," \u2014 "),OS=s(n3e,"A",{href:!0});var iOr=n(OS);Vdo=r(iOr,"VisualBertModel"),iOr.forEach(t),zdo=r(n3e," (VisualBert model)"),n3e.forEach(t),Wdo=i(C),sp=s(C,"LI",{});var l3e=n(sp);cZ=s(l3e,"STRONG",{});var dOr=n(cZ);Qdo=r(dOr,"vit"),dOr.forEach(t),Hdo=r(l3e," \u2014 "),GS=s(l3e,"A",{href:!0});var cOr=n(GS);Udo=r(cOr,"ViTModel"),cOr.forEach(t),Jdo=r(l3e," (ViT model)"),l3e.forEach(t),Ydo=i(C),np=s(C,"LI",{});var i3e=n(np);mZ=s(i3e,"STRONG",{});var mOr=n(mZ);Kdo=r(mOr,"vit_mae"),mOr.forEach(t),Zdo=r(i3e," \u2014 "),XS=s(i3e,"A",{href:!0});var fOr=n(XS);eco=r(fOr,"ViTMAEModel"),fOr.forEach(t),oco=r(i3e," (ViTMAE model)"),i3e.forEach(t),rco=i(C),lp=s(C,"LI",{});var d3e=n(lp);fZ=s(d3e,"STRONG",{});var gOr=n(fZ);tco=r(gOr,"wav2vec2"),gOr.forEach(t),aco=r(d3e," \u2014 "),VS=s(d3e,"A",{href:!0});var hOr=n(VS);sco=r(hOr,"Wav2Vec2Model"),hOr.forEach(t),nco=r(d3e," (Wav2Vec2 model)"),d3e.forEach(t),lco=i(C),ip=s(C,"LI",{});var c3e=n(ip);gZ=s(c3e,"STRONG",{});var uOr=n(gZ);ico=r(uOr,"wavlm"),uOr.forEach(t),dco=r(c3e," \u2014 "),zS=s(c3e,"A",{href:!0});var pOr=n(zS);cco=r(pOr,"WavLMModel"),pOr.forEach(t),mco=r(c3e," (WavLM model)"),c3e.forEach(t),fco=i(C),dp=s(C,"LI",{});var m3e=n(dp);hZ=s(m3e,"STRONG",{});var _Or=n(hZ);gco=r(_Or,"xglm"),_Or.forEach(t),hco=r(m3e," \u2014 "),WS=s(m3e,"A",{href:!0});var bOr=n(WS);uco=r(bOr,"XGLMModel"),bOr.forEach(t),pco=r(m3e," (XGLM model)"),m3e.forEach(t),_co=i(C),cp=s(C,"LI",{});var f3e=n(cp);uZ=s(f3e,"STRONG",{});var vOr=n(uZ);bco=r(vOr,"xlm"),vOr.forEach(t),vco=r(f3e," \u2014 "),QS=s(f3e,"A",{href:!0});var TOr=n(QS);Tco=r(TOr,"XLMModel"),TOr.forEach(t),Fco=r(f3e," (XLM model)"),f3e.forEach(t),Cco=i(C),mp=s(C,"LI",{});var g3e=n(mp);pZ=s(g3e,"STRONG",{});var FOr=n(pZ);Mco=r(FOr,"xlm-prophetnet"),FOr.forEach(t),Eco=r(g3e," \u2014 "),HS=s(g3e,"A",{href:!0});var COr=n(HS);yco=r(COr,"XLMProphetNetModel"),COr.forEach(t),wco=r(g3e," (XLMProphetNet model)"),g3e.forEach(t),Aco=i(C),fp=s(C,"LI",{});var h3e=n(fp);_Z=s(h3e,"STRONG",{});var MOr=n(_Z);Lco=r(MOr,"xlm-roberta"),MOr.forEach(t),Bco=r(h3e," \u2014 "),US=s(h3e,"A",{href:!0});var EOr=n(US);xco=r(EOr,"XLMRobertaModel"),EOr.forEach(t),kco=r(h3e," (XLM-RoBERTa model)"),h3e.forEach(t),Rco=i(C),gp=s(C,"LI",{});var u3e=n(gp);bZ=s(u3e,"STRONG",{});var yOr=n(bZ);Sco=r(yOr,"xlm-roberta-xl"),yOr.forEach(t),Pco=r(u3e," \u2014 "),JS=s(u3e,"A",{href:!0});var wOr=n(JS);$co=r(wOr,"XLMRobertaXLModel"),wOr.forEach(t),Ico=r(u3e," (XLM-RoBERTa-XL model)"),u3e.forEach(t),jco=i(C),hp=s(C,"LI",{});var p3e=n(hp);vZ=s(p3e,"STRONG",{});var AOr=n(vZ);Dco=r(AOr,"xlnet"),AOr.forEach(t),Nco=r(p3e," \u2014 "),YS=s(p3e,"A",{href:!0});var LOr=n(YS);qco=r(LOr,"XLNetModel"),LOr.forEach(t),Oco=r(p3e," (XLNet model)"),p3e.forEach(t),Gco=i(C),up=s(C,"LI",{});var _3e=n(up);TZ=s(_3e,"STRONG",{});var BOr=n(TZ);Xco=r(BOr,"yoso"),BOr.forEach(t),Vco=r(_3e," \u2014 "),KS=s(_3e,"A",{href:!0});var xOr=n(KS);zco=r(xOr,"YosoModel"),xOr.forEach(t),Wco=r(_3e," (YOSO model)"),_3e.forEach(t),C.forEach(t),Qco=i(qt),pp=s(qt,"P",{});var b3e=n(pp);Hco=r(b3e,"The model is set in evaluation mode by default using "),FZ=s(b3e,"CODE",{});var kOr=n(FZ);Uco=r(kOr,"model.eval()"),kOr.forEach(t),Jco=r(b3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CZ=s(b3e,"CODE",{});var ROr=n(CZ);Yco=r(ROr,"model.train()"),ROr.forEach(t),b3e.forEach(t),Kco=i(qt),MZ=s(qt,"P",{});var SOr=n(MZ);Zco=r(SOr,"Examples:"),SOr.forEach(t),emo=i(qt),f(Ry.$$.fragment,qt),qt.forEach(t),Wn.forEach(t),_xe=i(d),ed=s(d,"H2",{class:!0});var wRe=n(ed);_p=s(wRe,"A",{id:!0,class:!0,href:!0});var POr=n(_p);EZ=s(POr,"SPAN",{});var $Or=n(EZ);f(Sy.$$.fragment,$Or),$Or.forEach(t),POr.forEach(t),omo=i(wRe),yZ=s(wRe,"SPAN",{});var IOr=n(yZ);rmo=r(IOr,"AutoModelForPreTraining"),IOr.forEach(t),wRe.forEach(t),bxe=i(d),Yo=s(d,"DIV",{class:!0});var Hn=n(Yo);f(Py.$$.fragment,Hn),tmo=i(Hn),od=s(Hn,"P",{});var yz=n(od);amo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=s(yz,"CODE",{});var jOr=n(wZ);smo=r(jOr,"from_pretrained()"),jOr.forEach(t),nmo=r(yz,"class method or the "),AZ=s(yz,"CODE",{});var DOr=n(AZ);lmo=r(DOr,"from_config()"),DOr.forEach(t),imo=r(yz,`class
method.`),yz.forEach(t),dmo=i(Hn),$y=s(Hn,"P",{});var ARe=n($y);cmo=r(ARe,"This class cannot be instantiated directly using "),LZ=s(ARe,"CODE",{});var NOr=n(LZ);mmo=r(NOr,"__init__()"),NOr.forEach(t),fmo=r(ARe," (throws an error)."),ARe.forEach(t),gmo=i(Hn),zr=s(Hn,"DIV",{class:!0});var Un=n(zr);f(Iy.$$.fragment,Un),hmo=i(Un),BZ=s(Un,"P",{});var qOr=n(BZ);umo=r(qOr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qOr.forEach(t),pmo=i(Un),rd=s(Un,"P",{});var wz=n(rd);_mo=r(wz,`Note:
Loading a model from its configuration file does `),xZ=s(wz,"STRONG",{});var OOr=n(xZ);bmo=r(OOr,"not"),OOr.forEach(t),vmo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=s(wz,"CODE",{});var GOr=n(kZ);Tmo=r(GOr,"from_pretrained()"),GOr.forEach(t),Fmo=r(wz,"to load the model weights."),wz.forEach(t),Cmo=i(Un),RZ=s(Un,"P",{});var XOr=n(RZ);Mmo=r(XOr,"Examples:"),XOr.forEach(t),Emo=i(Un),f(jy.$$.fragment,Un),Un.forEach(t),ymo=i(Hn),De=s(Hn,"DIV",{class:!0});var Ot=n(De);f(Dy.$$.fragment,Ot),wmo=i(Ot),SZ=s(Ot,"P",{});var VOr=n(SZ);Amo=r(VOr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VOr.forEach(t),Lmo=i(Ot),za=s(Ot,"P",{});var Y3=n(za);Bmo=r(Y3,"The model class to instantiate is selected based on the "),PZ=s(Y3,"CODE",{});var zOr=n(PZ);xmo=r(zOr,"model_type"),zOr.forEach(t),kmo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),$Z=s(Y3,"CODE",{});var WOr=n($Z);Rmo=r(WOr,"pretrained_model_name_or_path"),WOr.forEach(t),Smo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IZ=s(Y3,"CODE",{});var QOr=n(IZ);Pmo=r(QOr,"pretrained_model_name_or_path"),QOr.forEach(t),$mo=r(Y3,":"),Y3.forEach(t),Imo=i(Ot),k=s(Ot,"UL",{});var S=n(k);bp=s(S,"LI",{});var v3e=n(bp);jZ=s(v3e,"STRONG",{});var HOr=n(jZ);jmo=r(HOr,"albert"),HOr.forEach(t),Dmo=r(v3e," \u2014 "),ZS=s(v3e,"A",{href:!0});var UOr=n(ZS);Nmo=r(UOr,"AlbertForPreTraining"),UOr.forEach(t),qmo=r(v3e," (ALBERT model)"),v3e.forEach(t),Omo=i(S),vp=s(S,"LI",{});var T3e=n(vp);DZ=s(T3e,"STRONG",{});var JOr=n(DZ);Gmo=r(JOr,"bart"),JOr.forEach(t),Xmo=r(T3e," \u2014 "),eP=s(T3e,"A",{href:!0});var YOr=n(eP);Vmo=r(YOr,"BartForConditionalGeneration"),YOr.forEach(t),zmo=r(T3e," (BART model)"),T3e.forEach(t),Wmo=i(S),Tp=s(S,"LI",{});var F3e=n(Tp);NZ=s(F3e,"STRONG",{});var KOr=n(NZ);Qmo=r(KOr,"bert"),KOr.forEach(t),Hmo=r(F3e," \u2014 "),oP=s(F3e,"A",{href:!0});var ZOr=n(oP);Umo=r(ZOr,"BertForPreTraining"),ZOr.forEach(t),Jmo=r(F3e," (BERT model)"),F3e.forEach(t),Ymo=i(S),Fp=s(S,"LI",{});var C3e=n(Fp);qZ=s(C3e,"STRONG",{});var eGr=n(qZ);Kmo=r(eGr,"big_bird"),eGr.forEach(t),Zmo=r(C3e," \u2014 "),rP=s(C3e,"A",{href:!0});var oGr=n(rP);efo=r(oGr,"BigBirdForPreTraining"),oGr.forEach(t),ofo=r(C3e," (BigBird model)"),C3e.forEach(t),rfo=i(S),Cp=s(S,"LI",{});var M3e=n(Cp);OZ=s(M3e,"STRONG",{});var rGr=n(OZ);tfo=r(rGr,"camembert"),rGr.forEach(t),afo=r(M3e," \u2014 "),tP=s(M3e,"A",{href:!0});var tGr=n(tP);sfo=r(tGr,"CamembertForMaskedLM"),tGr.forEach(t),nfo=r(M3e," (CamemBERT model)"),M3e.forEach(t),lfo=i(S),Mp=s(S,"LI",{});var E3e=n(Mp);GZ=s(E3e,"STRONG",{});var aGr=n(GZ);ifo=r(aGr,"ctrl"),aGr.forEach(t),dfo=r(E3e," \u2014 "),aP=s(E3e,"A",{href:!0});var sGr=n(aP);cfo=r(sGr,"CTRLLMHeadModel"),sGr.forEach(t),mfo=r(E3e," (CTRL model)"),E3e.forEach(t),ffo=i(S),Ep=s(S,"LI",{});var y3e=n(Ep);XZ=s(y3e,"STRONG",{});var nGr=n(XZ);gfo=r(nGr,"data2vec-text"),nGr.forEach(t),hfo=r(y3e," \u2014 "),sP=s(y3e,"A",{href:!0});var lGr=n(sP);ufo=r(lGr,"Data2VecTextForMaskedLM"),lGr.forEach(t),pfo=r(y3e," (Data2VecText model)"),y3e.forEach(t),_fo=i(S),yp=s(S,"LI",{});var w3e=n(yp);VZ=s(w3e,"STRONG",{});var iGr=n(VZ);bfo=r(iGr,"deberta"),iGr.forEach(t),vfo=r(w3e," \u2014 "),nP=s(w3e,"A",{href:!0});var dGr=n(nP);Tfo=r(dGr,"DebertaForMaskedLM"),dGr.forEach(t),Ffo=r(w3e," (DeBERTa model)"),w3e.forEach(t),Cfo=i(S),wp=s(S,"LI",{});var A3e=n(wp);zZ=s(A3e,"STRONG",{});var cGr=n(zZ);Mfo=r(cGr,"deberta-v2"),cGr.forEach(t),Efo=r(A3e," \u2014 "),lP=s(A3e,"A",{href:!0});var mGr=n(lP);yfo=r(mGr,"DebertaV2ForMaskedLM"),mGr.forEach(t),wfo=r(A3e," (DeBERTa-v2 model)"),A3e.forEach(t),Afo=i(S),Ap=s(S,"LI",{});var L3e=n(Ap);WZ=s(L3e,"STRONG",{});var fGr=n(WZ);Lfo=r(fGr,"distilbert"),fGr.forEach(t),Bfo=r(L3e," \u2014 "),iP=s(L3e,"A",{href:!0});var gGr=n(iP);xfo=r(gGr,"DistilBertForMaskedLM"),gGr.forEach(t),kfo=r(L3e," (DistilBERT model)"),L3e.forEach(t),Rfo=i(S),Lp=s(S,"LI",{});var B3e=n(Lp);QZ=s(B3e,"STRONG",{});var hGr=n(QZ);Sfo=r(hGr,"electra"),hGr.forEach(t),Pfo=r(B3e," \u2014 "),dP=s(B3e,"A",{href:!0});var uGr=n(dP);$fo=r(uGr,"ElectraForPreTraining"),uGr.forEach(t),Ifo=r(B3e," (ELECTRA model)"),B3e.forEach(t),jfo=i(S),Bp=s(S,"LI",{});var x3e=n(Bp);HZ=s(x3e,"STRONG",{});var pGr=n(HZ);Dfo=r(pGr,"flaubert"),pGr.forEach(t),Nfo=r(x3e," \u2014 "),cP=s(x3e,"A",{href:!0});var _Gr=n(cP);qfo=r(_Gr,"FlaubertWithLMHeadModel"),_Gr.forEach(t),Ofo=r(x3e," (FlauBERT model)"),x3e.forEach(t),Gfo=i(S),xp=s(S,"LI",{});var k3e=n(xp);UZ=s(k3e,"STRONG",{});var bGr=n(UZ);Xfo=r(bGr,"fnet"),bGr.forEach(t),Vfo=r(k3e," \u2014 "),mP=s(k3e,"A",{href:!0});var vGr=n(mP);zfo=r(vGr,"FNetForPreTraining"),vGr.forEach(t),Wfo=r(k3e," (FNet model)"),k3e.forEach(t),Qfo=i(S),kp=s(S,"LI",{});var R3e=n(kp);JZ=s(R3e,"STRONG",{});var TGr=n(JZ);Hfo=r(TGr,"fsmt"),TGr.forEach(t),Ufo=r(R3e," \u2014 "),fP=s(R3e,"A",{href:!0});var FGr=n(fP);Jfo=r(FGr,"FSMTForConditionalGeneration"),FGr.forEach(t),Yfo=r(R3e," (FairSeq Machine-Translation model)"),R3e.forEach(t),Kfo=i(S),Rp=s(S,"LI",{});var S3e=n(Rp);YZ=s(S3e,"STRONG",{});var CGr=n(YZ);Zfo=r(CGr,"funnel"),CGr.forEach(t),ego=r(S3e," \u2014 "),gP=s(S3e,"A",{href:!0});var MGr=n(gP);ogo=r(MGr,"FunnelForPreTraining"),MGr.forEach(t),rgo=r(S3e," (Funnel Transformer model)"),S3e.forEach(t),tgo=i(S),Sp=s(S,"LI",{});var P3e=n(Sp);KZ=s(P3e,"STRONG",{});var EGr=n(KZ);ago=r(EGr,"gpt2"),EGr.forEach(t),sgo=r(P3e," \u2014 "),hP=s(P3e,"A",{href:!0});var yGr=n(hP);ngo=r(yGr,"GPT2LMHeadModel"),yGr.forEach(t),lgo=r(P3e," (OpenAI GPT-2 model)"),P3e.forEach(t),igo=i(S),Pp=s(S,"LI",{});var $3e=n(Pp);ZZ=s($3e,"STRONG",{});var wGr=n(ZZ);dgo=r(wGr,"ibert"),wGr.forEach(t),cgo=r($3e," \u2014 "),uP=s($3e,"A",{href:!0});var AGr=n(uP);mgo=r(AGr,"IBertForMaskedLM"),AGr.forEach(t),fgo=r($3e," (I-BERT model)"),$3e.forEach(t),ggo=i(S),$p=s(S,"LI",{});var I3e=n($p);eee=s(I3e,"STRONG",{});var LGr=n(eee);hgo=r(LGr,"layoutlm"),LGr.forEach(t),ugo=r(I3e," \u2014 "),pP=s(I3e,"A",{href:!0});var BGr=n(pP);pgo=r(BGr,"LayoutLMForMaskedLM"),BGr.forEach(t),_go=r(I3e," (LayoutLM model)"),I3e.forEach(t),bgo=i(S),Ip=s(S,"LI",{});var j3e=n(Ip);oee=s(j3e,"STRONG",{});var xGr=n(oee);vgo=r(xGr,"longformer"),xGr.forEach(t),Tgo=r(j3e," \u2014 "),_P=s(j3e,"A",{href:!0});var kGr=n(_P);Fgo=r(kGr,"LongformerForMaskedLM"),kGr.forEach(t),Cgo=r(j3e," (Longformer model)"),j3e.forEach(t),Mgo=i(S),jp=s(S,"LI",{});var D3e=n(jp);ree=s(D3e,"STRONG",{});var RGr=n(ree);Ego=r(RGr,"lxmert"),RGr.forEach(t),ygo=r(D3e," \u2014 "),bP=s(D3e,"A",{href:!0});var SGr=n(bP);wgo=r(SGr,"LxmertForPreTraining"),SGr.forEach(t),Ago=r(D3e," (LXMERT model)"),D3e.forEach(t),Lgo=i(S),Dp=s(S,"LI",{});var N3e=n(Dp);tee=s(N3e,"STRONG",{});var PGr=n(tee);Bgo=r(PGr,"megatron-bert"),PGr.forEach(t),xgo=r(N3e," \u2014 "),vP=s(N3e,"A",{href:!0});var $Gr=n(vP);kgo=r($Gr,"MegatronBertForPreTraining"),$Gr.forEach(t),Rgo=r(N3e," (MegatronBert model)"),N3e.forEach(t),Sgo=i(S),Np=s(S,"LI",{});var q3e=n(Np);aee=s(q3e,"STRONG",{});var IGr=n(aee);Pgo=r(IGr,"mobilebert"),IGr.forEach(t),$go=r(q3e," \u2014 "),TP=s(q3e,"A",{href:!0});var jGr=n(TP);Igo=r(jGr,"MobileBertForPreTraining"),jGr.forEach(t),jgo=r(q3e," (MobileBERT model)"),q3e.forEach(t),Dgo=i(S),qp=s(S,"LI",{});var O3e=n(qp);see=s(O3e,"STRONG",{});var DGr=n(see);Ngo=r(DGr,"mpnet"),DGr.forEach(t),qgo=r(O3e," \u2014 "),FP=s(O3e,"A",{href:!0});var NGr=n(FP);Ogo=r(NGr,"MPNetForMaskedLM"),NGr.forEach(t),Ggo=r(O3e," (MPNet model)"),O3e.forEach(t),Xgo=i(S),Op=s(S,"LI",{});var G3e=n(Op);nee=s(G3e,"STRONG",{});var qGr=n(nee);Vgo=r(qGr,"openai-gpt"),qGr.forEach(t),zgo=r(G3e," \u2014 "),CP=s(G3e,"A",{href:!0});var OGr=n(CP);Wgo=r(OGr,"OpenAIGPTLMHeadModel"),OGr.forEach(t),Qgo=r(G3e," (OpenAI GPT model)"),G3e.forEach(t),Hgo=i(S),Gp=s(S,"LI",{});var X3e=n(Gp);lee=s(X3e,"STRONG",{});var GGr=n(lee);Ugo=r(GGr,"retribert"),GGr.forEach(t),Jgo=r(X3e," \u2014 "),MP=s(X3e,"A",{href:!0});var XGr=n(MP);Ygo=r(XGr,"RetriBertModel"),XGr.forEach(t),Kgo=r(X3e," (RetriBERT model)"),X3e.forEach(t),Zgo=i(S),Xp=s(S,"LI",{});var V3e=n(Xp);iee=s(V3e,"STRONG",{});var VGr=n(iee);eho=r(VGr,"roberta"),VGr.forEach(t),oho=r(V3e," \u2014 "),EP=s(V3e,"A",{href:!0});var zGr=n(EP);rho=r(zGr,"RobertaForMaskedLM"),zGr.forEach(t),tho=r(V3e," (RoBERTa model)"),V3e.forEach(t),aho=i(S),Vp=s(S,"LI",{});var z3e=n(Vp);dee=s(z3e,"STRONG",{});var WGr=n(dee);sho=r(WGr,"squeezebert"),WGr.forEach(t),nho=r(z3e," \u2014 "),yP=s(z3e,"A",{href:!0});var QGr=n(yP);lho=r(QGr,"SqueezeBertForMaskedLM"),QGr.forEach(t),iho=r(z3e," (SqueezeBERT model)"),z3e.forEach(t),dho=i(S),zp=s(S,"LI",{});var W3e=n(zp);cee=s(W3e,"STRONG",{});var HGr=n(cee);cho=r(HGr,"t5"),HGr.forEach(t),mho=r(W3e," \u2014 "),wP=s(W3e,"A",{href:!0});var UGr=n(wP);fho=r(UGr,"T5ForConditionalGeneration"),UGr.forEach(t),gho=r(W3e," (T5 model)"),W3e.forEach(t),hho=i(S),Wp=s(S,"LI",{});var Q3e=n(Wp);mee=s(Q3e,"STRONG",{});var JGr=n(mee);uho=r(JGr,"tapas"),JGr.forEach(t),pho=r(Q3e," \u2014 "),AP=s(Q3e,"A",{href:!0});var YGr=n(AP);_ho=r(YGr,"TapasForMaskedLM"),YGr.forEach(t),bho=r(Q3e," (TAPAS model)"),Q3e.forEach(t),vho=i(S),Qp=s(S,"LI",{});var H3e=n(Qp);fee=s(H3e,"STRONG",{});var KGr=n(fee);Tho=r(KGr,"transfo-xl"),KGr.forEach(t),Fho=r(H3e," \u2014 "),LP=s(H3e,"A",{href:!0});var ZGr=n(LP);Cho=r(ZGr,"TransfoXLLMHeadModel"),ZGr.forEach(t),Mho=r(H3e," (Transformer-XL model)"),H3e.forEach(t),Eho=i(S),Hp=s(S,"LI",{});var U3e=n(Hp);gee=s(U3e,"STRONG",{});var eXr=n(gee);yho=r(eXr,"unispeech"),eXr.forEach(t),who=r(U3e," \u2014 "),BP=s(U3e,"A",{href:!0});var oXr=n(BP);Aho=r(oXr,"UniSpeechForPreTraining"),oXr.forEach(t),Lho=r(U3e," (UniSpeech model)"),U3e.forEach(t),Bho=i(S),Up=s(S,"LI",{});var J3e=n(Up);hee=s(J3e,"STRONG",{});var rXr=n(hee);xho=r(rXr,"unispeech-sat"),rXr.forEach(t),kho=r(J3e," \u2014 "),xP=s(J3e,"A",{href:!0});var tXr=n(xP);Rho=r(tXr,"UniSpeechSatForPreTraining"),tXr.forEach(t),Sho=r(J3e," (UniSpeechSat model)"),J3e.forEach(t),Pho=i(S),Jp=s(S,"LI",{});var Y3e=n(Jp);uee=s(Y3e,"STRONG",{});var aXr=n(uee);$ho=r(aXr,"visual_bert"),aXr.forEach(t),Iho=r(Y3e," \u2014 "),kP=s(Y3e,"A",{href:!0});var sXr=n(kP);jho=r(sXr,"VisualBertForPreTraining"),sXr.forEach(t),Dho=r(Y3e," (VisualBert model)"),Y3e.forEach(t),Nho=i(S),Yp=s(S,"LI",{});var K3e=n(Yp);pee=s(K3e,"STRONG",{});var nXr=n(pee);qho=r(nXr,"vit_mae"),nXr.forEach(t),Oho=r(K3e," \u2014 "),RP=s(K3e,"A",{href:!0});var lXr=n(RP);Gho=r(lXr,"ViTMAEForPreTraining"),lXr.forEach(t),Xho=r(K3e," (ViTMAE model)"),K3e.forEach(t),Vho=i(S),Kp=s(S,"LI",{});var Z3e=n(Kp);_ee=s(Z3e,"STRONG",{});var iXr=n(_ee);zho=r(iXr,"wav2vec2"),iXr.forEach(t),Who=r(Z3e," \u2014 "),SP=s(Z3e,"A",{href:!0});var dXr=n(SP);Qho=r(dXr,"Wav2Vec2ForPreTraining"),dXr.forEach(t),Hho=r(Z3e," (Wav2Vec2 model)"),Z3e.forEach(t),Uho=i(S),Zp=s(S,"LI",{});var e5e=n(Zp);bee=s(e5e,"STRONG",{});var cXr=n(bee);Jho=r(cXr,"xlm"),cXr.forEach(t),Yho=r(e5e," \u2014 "),PP=s(e5e,"A",{href:!0});var mXr=n(PP);Kho=r(mXr,"XLMWithLMHeadModel"),mXr.forEach(t),Zho=r(e5e," (XLM model)"),e5e.forEach(t),euo=i(S),e_=s(S,"LI",{});var o5e=n(e_);vee=s(o5e,"STRONG",{});var fXr=n(vee);ouo=r(fXr,"xlm-roberta"),fXr.forEach(t),ruo=r(o5e," \u2014 "),$P=s(o5e,"A",{href:!0});var gXr=n($P);tuo=r(gXr,"XLMRobertaForMaskedLM"),gXr.forEach(t),auo=r(o5e," (XLM-RoBERTa model)"),o5e.forEach(t),suo=i(S),o_=s(S,"LI",{});var r5e=n(o_);Tee=s(r5e,"STRONG",{});var hXr=n(Tee);nuo=r(hXr,"xlm-roberta-xl"),hXr.forEach(t),luo=r(r5e," \u2014 "),IP=s(r5e,"A",{href:!0});var uXr=n(IP);iuo=r(uXr,"XLMRobertaXLForMaskedLM"),uXr.forEach(t),duo=r(r5e," (XLM-RoBERTa-XL model)"),r5e.forEach(t),cuo=i(S),r_=s(S,"LI",{});var t5e=n(r_);Fee=s(t5e,"STRONG",{});var pXr=n(Fee);muo=r(pXr,"xlnet"),pXr.forEach(t),fuo=r(t5e," \u2014 "),jP=s(t5e,"A",{href:!0});var _Xr=n(jP);guo=r(_Xr,"XLNetLMHeadModel"),_Xr.forEach(t),huo=r(t5e," (XLNet model)"),t5e.forEach(t),S.forEach(t),uuo=i(Ot),t_=s(Ot,"P",{});var a5e=n(t_);puo=r(a5e,"The model is set in evaluation mode by default using "),Cee=s(a5e,"CODE",{});var bXr=n(Cee);_uo=r(bXr,"model.eval()"),bXr.forEach(t),buo=r(a5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mee=s(a5e,"CODE",{});var vXr=n(Mee);vuo=r(vXr,"model.train()"),vXr.forEach(t),a5e.forEach(t),Tuo=i(Ot),Eee=s(Ot,"P",{});var TXr=n(Eee);Fuo=r(TXr,"Examples:"),TXr.forEach(t),Cuo=i(Ot),f(Ny.$$.fragment,Ot),Ot.forEach(t),Hn.forEach(t),vxe=i(d),td=s(d,"H2",{class:!0});var LRe=n(td);a_=s(LRe,"A",{id:!0,class:!0,href:!0});var FXr=n(a_);yee=s(FXr,"SPAN",{});var CXr=n(yee);f(qy.$$.fragment,CXr),CXr.forEach(t),FXr.forEach(t),Muo=i(LRe),wee=s(LRe,"SPAN",{});var MXr=n(wee);Euo=r(MXr,"AutoModelForCausalLM"),MXr.forEach(t),LRe.forEach(t),Txe=i(d),Ko=s(d,"DIV",{class:!0});var Jn=n(Ko);f(Oy.$$.fragment,Jn),yuo=i(Jn),ad=s(Jn,"P",{});var Az=n(ad);wuo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=s(Az,"CODE",{});var EXr=n(Aee);Auo=r(EXr,"from_pretrained()"),EXr.forEach(t),Luo=r(Az,"class method or the "),Lee=s(Az,"CODE",{});var yXr=n(Lee);Buo=r(yXr,"from_config()"),yXr.forEach(t),xuo=r(Az,`class
method.`),Az.forEach(t),kuo=i(Jn),Gy=s(Jn,"P",{});var BRe=n(Gy);Ruo=r(BRe,"This class cannot be instantiated directly using "),Bee=s(BRe,"CODE",{});var wXr=n(Bee);Suo=r(wXr,"__init__()"),wXr.forEach(t),Puo=r(BRe," (throws an error)."),BRe.forEach(t),$uo=i(Jn),Wr=s(Jn,"DIV",{class:!0});var Yn=n(Wr);f(Xy.$$.fragment,Yn),Iuo=i(Yn),xee=s(Yn,"P",{});var AXr=n(xee);juo=r(AXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AXr.forEach(t),Duo=i(Yn),sd=s(Yn,"P",{});var Lz=n(sd);Nuo=r(Lz,`Note:
Loading a model from its configuration file does `),kee=s(Lz,"STRONG",{});var LXr=n(kee);quo=r(LXr,"not"),LXr.forEach(t),Ouo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=s(Lz,"CODE",{});var BXr=n(Ree);Guo=r(BXr,"from_pretrained()"),BXr.forEach(t),Xuo=r(Lz,"to load the model weights."),Lz.forEach(t),Vuo=i(Yn),See=s(Yn,"P",{});var xXr=n(See);zuo=r(xXr,"Examples:"),xXr.forEach(t),Wuo=i(Yn),f(Vy.$$.fragment,Yn),Yn.forEach(t),Quo=i(Jn),Ne=s(Jn,"DIV",{class:!0});var Gt=n(Ne);f(zy.$$.fragment,Gt),Huo=i(Gt),Pee=s(Gt,"P",{});var kXr=n(Pee);Uuo=r(kXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kXr.forEach(t),Juo=i(Gt),Wa=s(Gt,"P",{});var K3=n(Wa);Yuo=r(K3,"The model class to instantiate is selected based on the "),$ee=s(K3,"CODE",{});var RXr=n($ee);Kuo=r(RXr,"model_type"),RXr.forEach(t),Zuo=r(K3,` property of the config object (either
passed as an argument or loaded from `),Iee=s(K3,"CODE",{});var SXr=n(Iee);epo=r(SXr,"pretrained_model_name_or_path"),SXr.forEach(t),opo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jee=s(K3,"CODE",{});var PXr=n(jee);rpo=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),tpo=r(K3,":"),K3.forEach(t),apo=i(Gt),$=s(Gt,"UL",{});var j=n($);s_=s(j,"LI",{});var s5e=n(s_);Dee=s(s5e,"STRONG",{});var $Xr=n(Dee);spo=r($Xr,"bart"),$Xr.forEach(t),npo=r(s5e," \u2014 "),DP=s(s5e,"A",{href:!0});var IXr=n(DP);lpo=r(IXr,"BartForCausalLM"),IXr.forEach(t),ipo=r(s5e," (BART model)"),s5e.forEach(t),dpo=i(j),n_=s(j,"LI",{});var n5e=n(n_);Nee=s(n5e,"STRONG",{});var jXr=n(Nee);cpo=r(jXr,"bert"),jXr.forEach(t),mpo=r(n5e," \u2014 "),NP=s(n5e,"A",{href:!0});var DXr=n(NP);fpo=r(DXr,"BertLMHeadModel"),DXr.forEach(t),gpo=r(n5e," (BERT model)"),n5e.forEach(t),hpo=i(j),l_=s(j,"LI",{});var l5e=n(l_);qee=s(l5e,"STRONG",{});var NXr=n(qee);upo=r(NXr,"bert-generation"),NXr.forEach(t),ppo=r(l5e," \u2014 "),qP=s(l5e,"A",{href:!0});var qXr=n(qP);_po=r(qXr,"BertGenerationDecoder"),qXr.forEach(t),bpo=r(l5e," (Bert Generation model)"),l5e.forEach(t),vpo=i(j),i_=s(j,"LI",{});var i5e=n(i_);Oee=s(i5e,"STRONG",{});var OXr=n(Oee);Tpo=r(OXr,"big_bird"),OXr.forEach(t),Fpo=r(i5e," \u2014 "),OP=s(i5e,"A",{href:!0});var GXr=n(OP);Cpo=r(GXr,"BigBirdForCausalLM"),GXr.forEach(t),Mpo=r(i5e," (BigBird model)"),i5e.forEach(t),Epo=i(j),d_=s(j,"LI",{});var d5e=n(d_);Gee=s(d5e,"STRONG",{});var XXr=n(Gee);ypo=r(XXr,"bigbird_pegasus"),XXr.forEach(t),wpo=r(d5e," \u2014 "),GP=s(d5e,"A",{href:!0});var VXr=n(GP);Apo=r(VXr,"BigBirdPegasusForCausalLM"),VXr.forEach(t),Lpo=r(d5e," (BigBirdPegasus model)"),d5e.forEach(t),Bpo=i(j),c_=s(j,"LI",{});var c5e=n(c_);Xee=s(c5e,"STRONG",{});var zXr=n(Xee);xpo=r(zXr,"blenderbot"),zXr.forEach(t),kpo=r(c5e," \u2014 "),XP=s(c5e,"A",{href:!0});var WXr=n(XP);Rpo=r(WXr,"BlenderbotForCausalLM"),WXr.forEach(t),Spo=r(c5e," (Blenderbot model)"),c5e.forEach(t),Ppo=i(j),m_=s(j,"LI",{});var m5e=n(m_);Vee=s(m5e,"STRONG",{});var QXr=n(Vee);$po=r(QXr,"blenderbot-small"),QXr.forEach(t),Ipo=r(m5e," \u2014 "),VP=s(m5e,"A",{href:!0});var HXr=n(VP);jpo=r(HXr,"BlenderbotSmallForCausalLM"),HXr.forEach(t),Dpo=r(m5e," (BlenderbotSmall model)"),m5e.forEach(t),Npo=i(j),f_=s(j,"LI",{});var f5e=n(f_);zee=s(f5e,"STRONG",{});var UXr=n(zee);qpo=r(UXr,"camembert"),UXr.forEach(t),Opo=r(f5e," \u2014 "),zP=s(f5e,"A",{href:!0});var JXr=n(zP);Gpo=r(JXr,"CamembertForCausalLM"),JXr.forEach(t),Xpo=r(f5e," (CamemBERT model)"),f5e.forEach(t),Vpo=i(j),g_=s(j,"LI",{});var g5e=n(g_);Wee=s(g5e,"STRONG",{});var YXr=n(Wee);zpo=r(YXr,"ctrl"),YXr.forEach(t),Wpo=r(g5e," \u2014 "),WP=s(g5e,"A",{href:!0});var KXr=n(WP);Qpo=r(KXr,"CTRLLMHeadModel"),KXr.forEach(t),Hpo=r(g5e," (CTRL model)"),g5e.forEach(t),Upo=i(j),h_=s(j,"LI",{});var h5e=n(h_);Qee=s(h5e,"STRONG",{});var ZXr=n(Qee);Jpo=r(ZXr,"data2vec-text"),ZXr.forEach(t),Ypo=r(h5e," \u2014 "),QP=s(h5e,"A",{href:!0});var eVr=n(QP);Kpo=r(eVr,"Data2VecTextForCausalLM"),eVr.forEach(t),Zpo=r(h5e," (Data2VecText model)"),h5e.forEach(t),e_o=i(j),u_=s(j,"LI",{});var u5e=n(u_);Hee=s(u5e,"STRONG",{});var oVr=n(Hee);o_o=r(oVr,"electra"),oVr.forEach(t),r_o=r(u5e," \u2014 "),HP=s(u5e,"A",{href:!0});var rVr=n(HP);t_o=r(rVr,"ElectraForCausalLM"),rVr.forEach(t),a_o=r(u5e," (ELECTRA model)"),u5e.forEach(t),s_o=i(j),p_=s(j,"LI",{});var p5e=n(p_);Uee=s(p5e,"STRONG",{});var tVr=n(Uee);n_o=r(tVr,"gpt2"),tVr.forEach(t),l_o=r(p5e," \u2014 "),UP=s(p5e,"A",{href:!0});var aVr=n(UP);i_o=r(aVr,"GPT2LMHeadModel"),aVr.forEach(t),d_o=r(p5e," (OpenAI GPT-2 model)"),p5e.forEach(t),c_o=i(j),__=s(j,"LI",{});var _5e=n(__);Jee=s(_5e,"STRONG",{});var sVr=n(Jee);m_o=r(sVr,"gpt_neo"),sVr.forEach(t),f_o=r(_5e," \u2014 "),JP=s(_5e,"A",{href:!0});var nVr=n(JP);g_o=r(nVr,"GPTNeoForCausalLM"),nVr.forEach(t),h_o=r(_5e," (GPT Neo model)"),_5e.forEach(t),u_o=i(j),b_=s(j,"LI",{});var b5e=n(b_);Yee=s(b5e,"STRONG",{});var lVr=n(Yee);p_o=r(lVr,"gptj"),lVr.forEach(t),__o=r(b5e," \u2014 "),YP=s(b5e,"A",{href:!0});var iVr=n(YP);b_o=r(iVr,"GPTJForCausalLM"),iVr.forEach(t),v_o=r(b5e," (GPT-J model)"),b5e.forEach(t),T_o=i(j),v_=s(j,"LI",{});var v5e=n(v_);Kee=s(v5e,"STRONG",{});var dVr=n(Kee);F_o=r(dVr,"marian"),dVr.forEach(t),C_o=r(v5e," \u2014 "),KP=s(v5e,"A",{href:!0});var cVr=n(KP);M_o=r(cVr,"MarianForCausalLM"),cVr.forEach(t),E_o=r(v5e," (Marian model)"),v5e.forEach(t),y_o=i(j),T_=s(j,"LI",{});var T5e=n(T_);Zee=s(T5e,"STRONG",{});var mVr=n(Zee);w_o=r(mVr,"mbart"),mVr.forEach(t),A_o=r(T5e," \u2014 "),ZP=s(T5e,"A",{href:!0});var fVr=n(ZP);L_o=r(fVr,"MBartForCausalLM"),fVr.forEach(t),B_o=r(T5e," (mBART model)"),T5e.forEach(t),x_o=i(j),F_=s(j,"LI",{});var F5e=n(F_);eoe=s(F5e,"STRONG",{});var gVr=n(eoe);k_o=r(gVr,"megatron-bert"),gVr.forEach(t),R_o=r(F5e," \u2014 "),e$=s(F5e,"A",{href:!0});var hVr=n(e$);S_o=r(hVr,"MegatronBertForCausalLM"),hVr.forEach(t),P_o=r(F5e," (MegatronBert model)"),F5e.forEach(t),$_o=i(j),C_=s(j,"LI",{});var C5e=n(C_);ooe=s(C5e,"STRONG",{});var uVr=n(ooe);I_o=r(uVr,"openai-gpt"),uVr.forEach(t),j_o=r(C5e," \u2014 "),o$=s(C5e,"A",{href:!0});var pVr=n(o$);D_o=r(pVr,"OpenAIGPTLMHeadModel"),pVr.forEach(t),N_o=r(C5e," (OpenAI GPT model)"),C5e.forEach(t),q_o=i(j),M_=s(j,"LI",{});var M5e=n(M_);roe=s(M5e,"STRONG",{});var _Vr=n(roe);O_o=r(_Vr,"pegasus"),_Vr.forEach(t),G_o=r(M5e," \u2014 "),r$=s(M5e,"A",{href:!0});var bVr=n(r$);X_o=r(bVr,"PegasusForCausalLM"),bVr.forEach(t),V_o=r(M5e," (Pegasus model)"),M5e.forEach(t),z_o=i(j),E_=s(j,"LI",{});var E5e=n(E_);toe=s(E5e,"STRONG",{});var vVr=n(toe);W_o=r(vVr,"plbart"),vVr.forEach(t),Q_o=r(E5e," \u2014 "),t$=s(E5e,"A",{href:!0});var TVr=n(t$);H_o=r(TVr,"PLBartForCausalLM"),TVr.forEach(t),U_o=r(E5e," (PLBart model)"),E5e.forEach(t),J_o=i(j),y_=s(j,"LI",{});var y5e=n(y_);aoe=s(y5e,"STRONG",{});var FVr=n(aoe);Y_o=r(FVr,"prophetnet"),FVr.forEach(t),K_o=r(y5e," \u2014 "),a$=s(y5e,"A",{href:!0});var CVr=n(a$);Z_o=r(CVr,"ProphetNetForCausalLM"),CVr.forEach(t),ebo=r(y5e," (ProphetNet model)"),y5e.forEach(t),obo=i(j),w_=s(j,"LI",{});var w5e=n(w_);soe=s(w5e,"STRONG",{});var MVr=n(soe);rbo=r(MVr,"qdqbert"),MVr.forEach(t),tbo=r(w5e," \u2014 "),s$=s(w5e,"A",{href:!0});var EVr=n(s$);abo=r(EVr,"QDQBertLMHeadModel"),EVr.forEach(t),sbo=r(w5e," (QDQBert model)"),w5e.forEach(t),nbo=i(j),A_=s(j,"LI",{});var A5e=n(A_);noe=s(A5e,"STRONG",{});var yVr=n(noe);lbo=r(yVr,"reformer"),yVr.forEach(t),ibo=r(A5e," \u2014 "),n$=s(A5e,"A",{href:!0});var wVr=n(n$);dbo=r(wVr,"ReformerModelWithLMHead"),wVr.forEach(t),cbo=r(A5e," (Reformer model)"),A5e.forEach(t),mbo=i(j),L_=s(j,"LI",{});var L5e=n(L_);loe=s(L5e,"STRONG",{});var AVr=n(loe);fbo=r(AVr,"rembert"),AVr.forEach(t),gbo=r(L5e," \u2014 "),l$=s(L5e,"A",{href:!0});var LVr=n(l$);hbo=r(LVr,"RemBertForCausalLM"),LVr.forEach(t),ubo=r(L5e," (RemBERT model)"),L5e.forEach(t),pbo=i(j),B_=s(j,"LI",{});var B5e=n(B_);ioe=s(B5e,"STRONG",{});var BVr=n(ioe);_bo=r(BVr,"roberta"),BVr.forEach(t),bbo=r(B5e," \u2014 "),i$=s(B5e,"A",{href:!0});var xVr=n(i$);vbo=r(xVr,"RobertaForCausalLM"),xVr.forEach(t),Tbo=r(B5e," (RoBERTa model)"),B5e.forEach(t),Fbo=i(j),x_=s(j,"LI",{});var x5e=n(x_);doe=s(x5e,"STRONG",{});var kVr=n(doe);Cbo=r(kVr,"roformer"),kVr.forEach(t),Mbo=r(x5e," \u2014 "),d$=s(x5e,"A",{href:!0});var RVr=n(d$);Ebo=r(RVr,"RoFormerForCausalLM"),RVr.forEach(t),ybo=r(x5e," (RoFormer model)"),x5e.forEach(t),wbo=i(j),k_=s(j,"LI",{});var k5e=n(k_);coe=s(k5e,"STRONG",{});var SVr=n(coe);Abo=r(SVr,"speech_to_text_2"),SVr.forEach(t),Lbo=r(k5e," \u2014 "),c$=s(k5e,"A",{href:!0});var PVr=n(c$);Bbo=r(PVr,"Speech2Text2ForCausalLM"),PVr.forEach(t),xbo=r(k5e," (Speech2Text2 model)"),k5e.forEach(t),kbo=i(j),R_=s(j,"LI",{});var R5e=n(R_);moe=s(R5e,"STRONG",{});var $Vr=n(moe);Rbo=r($Vr,"transfo-xl"),$Vr.forEach(t),Sbo=r(R5e," \u2014 "),m$=s(R5e,"A",{href:!0});var IVr=n(m$);Pbo=r(IVr,"TransfoXLLMHeadModel"),IVr.forEach(t),$bo=r(R5e," (Transformer-XL model)"),R5e.forEach(t),Ibo=i(j),S_=s(j,"LI",{});var S5e=n(S_);foe=s(S5e,"STRONG",{});var jVr=n(foe);jbo=r(jVr,"trocr"),jVr.forEach(t),Dbo=r(S5e," \u2014 "),f$=s(S5e,"A",{href:!0});var DVr=n(f$);Nbo=r(DVr,"TrOCRForCausalLM"),DVr.forEach(t),qbo=r(S5e," (TrOCR model)"),S5e.forEach(t),Obo=i(j),P_=s(j,"LI",{});var P5e=n(P_);goe=s(P5e,"STRONG",{});var NVr=n(goe);Gbo=r(NVr,"xglm"),NVr.forEach(t),Xbo=r(P5e," \u2014 "),g$=s(P5e,"A",{href:!0});var qVr=n(g$);Vbo=r(qVr,"XGLMForCausalLM"),qVr.forEach(t),zbo=r(P5e," (XGLM model)"),P5e.forEach(t),Wbo=i(j),$_=s(j,"LI",{});var $5e=n($_);hoe=s($5e,"STRONG",{});var OVr=n(hoe);Qbo=r(OVr,"xlm"),OVr.forEach(t),Hbo=r($5e," \u2014 "),h$=s($5e,"A",{href:!0});var GVr=n(h$);Ubo=r(GVr,"XLMWithLMHeadModel"),GVr.forEach(t),Jbo=r($5e," (XLM model)"),$5e.forEach(t),Ybo=i(j),I_=s(j,"LI",{});var I5e=n(I_);uoe=s(I5e,"STRONG",{});var XVr=n(uoe);Kbo=r(XVr,"xlm-prophetnet"),XVr.forEach(t),Zbo=r(I5e," \u2014 "),u$=s(I5e,"A",{href:!0});var VVr=n(u$);e2o=r(VVr,"XLMProphetNetForCausalLM"),VVr.forEach(t),o2o=r(I5e," (XLMProphetNet model)"),I5e.forEach(t),r2o=i(j),j_=s(j,"LI",{});var j5e=n(j_);poe=s(j5e,"STRONG",{});var zVr=n(poe);t2o=r(zVr,"xlm-roberta"),zVr.forEach(t),a2o=r(j5e," \u2014 "),p$=s(j5e,"A",{href:!0});var WVr=n(p$);s2o=r(WVr,"XLMRobertaForCausalLM"),WVr.forEach(t),n2o=r(j5e," (XLM-RoBERTa model)"),j5e.forEach(t),l2o=i(j),D_=s(j,"LI",{});var D5e=n(D_);_oe=s(D5e,"STRONG",{});var QVr=n(_oe);i2o=r(QVr,"xlm-roberta-xl"),QVr.forEach(t),d2o=r(D5e," \u2014 "),_$=s(D5e,"A",{href:!0});var HVr=n(_$);c2o=r(HVr,"XLMRobertaXLForCausalLM"),HVr.forEach(t),m2o=r(D5e," (XLM-RoBERTa-XL model)"),D5e.forEach(t),f2o=i(j),N_=s(j,"LI",{});var N5e=n(N_);boe=s(N5e,"STRONG",{});var UVr=n(boe);g2o=r(UVr,"xlnet"),UVr.forEach(t),h2o=r(N5e," \u2014 "),b$=s(N5e,"A",{href:!0});var JVr=n(b$);u2o=r(JVr,"XLNetLMHeadModel"),JVr.forEach(t),p2o=r(N5e," (XLNet model)"),N5e.forEach(t),j.forEach(t),_2o=i(Gt),q_=s(Gt,"P",{});var q5e=n(q_);b2o=r(q5e,"The model is set in evaluation mode by default using "),voe=s(q5e,"CODE",{});var YVr=n(voe);v2o=r(YVr,"model.eval()"),YVr.forEach(t),T2o=r(q5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Toe=s(q5e,"CODE",{});var KVr=n(Toe);F2o=r(KVr,"model.train()"),KVr.forEach(t),q5e.forEach(t),C2o=i(Gt),Foe=s(Gt,"P",{});var ZVr=n(Foe);M2o=r(ZVr,"Examples:"),ZVr.forEach(t),E2o=i(Gt),f(Wy.$$.fragment,Gt),Gt.forEach(t),Jn.forEach(t),Fxe=i(d),nd=s(d,"H2",{class:!0});var xRe=n(nd);O_=s(xRe,"A",{id:!0,class:!0,href:!0});var ezr=n(O_);Coe=s(ezr,"SPAN",{});var ozr=n(Coe);f(Qy.$$.fragment,ozr),ozr.forEach(t),ezr.forEach(t),y2o=i(xRe),Moe=s(xRe,"SPAN",{});var rzr=n(Moe);w2o=r(rzr,"AutoModelForMaskedLM"),rzr.forEach(t),xRe.forEach(t),Cxe=i(d),Zo=s(d,"DIV",{class:!0});var Kn=n(Zo);f(Hy.$$.fragment,Kn),A2o=i(Kn),ld=s(Kn,"P",{});var Bz=n(ld);L2o=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eoe=s(Bz,"CODE",{});var tzr=n(Eoe);B2o=r(tzr,"from_pretrained()"),tzr.forEach(t),x2o=r(Bz,"class method or the "),yoe=s(Bz,"CODE",{});var azr=n(yoe);k2o=r(azr,"from_config()"),azr.forEach(t),R2o=r(Bz,`class
method.`),Bz.forEach(t),S2o=i(Kn),Uy=s(Kn,"P",{});var kRe=n(Uy);P2o=r(kRe,"This class cannot be instantiated directly using "),woe=s(kRe,"CODE",{});var szr=n(woe);$2o=r(szr,"__init__()"),szr.forEach(t),I2o=r(kRe," (throws an error)."),kRe.forEach(t),j2o=i(Kn),Qr=s(Kn,"DIV",{class:!0});var Zn=n(Qr);f(Jy.$$.fragment,Zn),D2o=i(Zn),Aoe=s(Zn,"P",{});var nzr=n(Aoe);N2o=r(nzr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nzr.forEach(t),q2o=i(Zn),id=s(Zn,"P",{});var xz=n(id);O2o=r(xz,`Note:
Loading a model from its configuration file does `),Loe=s(xz,"STRONG",{});var lzr=n(Loe);G2o=r(lzr,"not"),lzr.forEach(t),X2o=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=s(xz,"CODE",{});var izr=n(Boe);V2o=r(izr,"from_pretrained()"),izr.forEach(t),z2o=r(xz,"to load the model weights."),xz.forEach(t),W2o=i(Zn),xoe=s(Zn,"P",{});var dzr=n(xoe);Q2o=r(dzr,"Examples:"),dzr.forEach(t),H2o=i(Zn),f(Yy.$$.fragment,Zn),Zn.forEach(t),U2o=i(Kn),qe=s(Kn,"DIV",{class:!0});var Xt=n(qe);f(Ky.$$.fragment,Xt),J2o=i(Xt),koe=s(Xt,"P",{});var czr=n(koe);Y2o=r(czr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),czr.forEach(t),K2o=i(Xt),Qa=s(Xt,"P",{});var Z3=n(Qa);Z2o=r(Z3,"The model class to instantiate is selected based on the "),Roe=s(Z3,"CODE",{});var mzr=n(Roe);evo=r(mzr,"model_type"),mzr.forEach(t),ovo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Soe=s(Z3,"CODE",{});var fzr=n(Soe);rvo=r(fzr,"pretrained_model_name_or_path"),fzr.forEach(t),tvo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Poe=s(Z3,"CODE",{});var gzr=n(Poe);avo=r(gzr,"pretrained_model_name_or_path"),gzr.forEach(t),svo=r(Z3,":"),Z3.forEach(t),nvo=i(Xt),I=s(Xt,"UL",{});var D=n(I);G_=s(D,"LI",{});var O5e=n(G_);$oe=s(O5e,"STRONG",{});var hzr=n($oe);lvo=r(hzr,"albert"),hzr.forEach(t),ivo=r(O5e," \u2014 "),v$=s(O5e,"A",{href:!0});var uzr=n(v$);dvo=r(uzr,"AlbertForMaskedLM"),uzr.forEach(t),cvo=r(O5e," (ALBERT model)"),O5e.forEach(t),mvo=i(D),X_=s(D,"LI",{});var G5e=n(X_);Ioe=s(G5e,"STRONG",{});var pzr=n(Ioe);fvo=r(pzr,"bart"),pzr.forEach(t),gvo=r(G5e," \u2014 "),T$=s(G5e,"A",{href:!0});var _zr=n(T$);hvo=r(_zr,"BartForConditionalGeneration"),_zr.forEach(t),uvo=r(G5e," (BART model)"),G5e.forEach(t),pvo=i(D),V_=s(D,"LI",{});var X5e=n(V_);joe=s(X5e,"STRONG",{});var bzr=n(joe);_vo=r(bzr,"bert"),bzr.forEach(t),bvo=r(X5e," \u2014 "),F$=s(X5e,"A",{href:!0});var vzr=n(F$);vvo=r(vzr,"BertForMaskedLM"),vzr.forEach(t),Tvo=r(X5e," (BERT model)"),X5e.forEach(t),Fvo=i(D),z_=s(D,"LI",{});var V5e=n(z_);Doe=s(V5e,"STRONG",{});var Tzr=n(Doe);Cvo=r(Tzr,"big_bird"),Tzr.forEach(t),Mvo=r(V5e," \u2014 "),C$=s(V5e,"A",{href:!0});var Fzr=n(C$);Evo=r(Fzr,"BigBirdForMaskedLM"),Fzr.forEach(t),yvo=r(V5e," (BigBird model)"),V5e.forEach(t),wvo=i(D),W_=s(D,"LI",{});var z5e=n(W_);Noe=s(z5e,"STRONG",{});var Czr=n(Noe);Avo=r(Czr,"camembert"),Czr.forEach(t),Lvo=r(z5e," \u2014 "),M$=s(z5e,"A",{href:!0});var Mzr=n(M$);Bvo=r(Mzr,"CamembertForMaskedLM"),Mzr.forEach(t),xvo=r(z5e," (CamemBERT model)"),z5e.forEach(t),kvo=i(D),Q_=s(D,"LI",{});var W5e=n(Q_);qoe=s(W5e,"STRONG",{});var Ezr=n(qoe);Rvo=r(Ezr,"convbert"),Ezr.forEach(t),Svo=r(W5e," \u2014 "),E$=s(W5e,"A",{href:!0});var yzr=n(E$);Pvo=r(yzr,"ConvBertForMaskedLM"),yzr.forEach(t),$vo=r(W5e," (ConvBERT model)"),W5e.forEach(t),Ivo=i(D),H_=s(D,"LI",{});var Q5e=n(H_);Ooe=s(Q5e,"STRONG",{});var wzr=n(Ooe);jvo=r(wzr,"data2vec-text"),wzr.forEach(t),Dvo=r(Q5e," \u2014 "),y$=s(Q5e,"A",{href:!0});var Azr=n(y$);Nvo=r(Azr,"Data2VecTextForMaskedLM"),Azr.forEach(t),qvo=r(Q5e," (Data2VecText model)"),Q5e.forEach(t),Ovo=i(D),U_=s(D,"LI",{});var H5e=n(U_);Goe=s(H5e,"STRONG",{});var Lzr=n(Goe);Gvo=r(Lzr,"deberta"),Lzr.forEach(t),Xvo=r(H5e," \u2014 "),w$=s(H5e,"A",{href:!0});var Bzr=n(w$);Vvo=r(Bzr,"DebertaForMaskedLM"),Bzr.forEach(t),zvo=r(H5e," (DeBERTa model)"),H5e.forEach(t),Wvo=i(D),J_=s(D,"LI",{});var U5e=n(J_);Xoe=s(U5e,"STRONG",{});var xzr=n(Xoe);Qvo=r(xzr,"deberta-v2"),xzr.forEach(t),Hvo=r(U5e," \u2014 "),A$=s(U5e,"A",{href:!0});var kzr=n(A$);Uvo=r(kzr,"DebertaV2ForMaskedLM"),kzr.forEach(t),Jvo=r(U5e," (DeBERTa-v2 model)"),U5e.forEach(t),Yvo=i(D),Y_=s(D,"LI",{});var J5e=n(Y_);Voe=s(J5e,"STRONG",{});var Rzr=n(Voe);Kvo=r(Rzr,"distilbert"),Rzr.forEach(t),Zvo=r(J5e," \u2014 "),L$=s(J5e,"A",{href:!0});var Szr=n(L$);eTo=r(Szr,"DistilBertForMaskedLM"),Szr.forEach(t),oTo=r(J5e," (DistilBERT model)"),J5e.forEach(t),rTo=i(D),K_=s(D,"LI",{});var Y5e=n(K_);zoe=s(Y5e,"STRONG",{});var Pzr=n(zoe);tTo=r(Pzr,"electra"),Pzr.forEach(t),aTo=r(Y5e," \u2014 "),B$=s(Y5e,"A",{href:!0});var $zr=n(B$);sTo=r($zr,"ElectraForMaskedLM"),$zr.forEach(t),nTo=r(Y5e," (ELECTRA model)"),Y5e.forEach(t),lTo=i(D),Z_=s(D,"LI",{});var K5e=n(Z_);Woe=s(K5e,"STRONG",{});var Izr=n(Woe);iTo=r(Izr,"flaubert"),Izr.forEach(t),dTo=r(K5e," \u2014 "),x$=s(K5e,"A",{href:!0});var jzr=n(x$);cTo=r(jzr,"FlaubertWithLMHeadModel"),jzr.forEach(t),mTo=r(K5e," (FlauBERT model)"),K5e.forEach(t),fTo=i(D),eb=s(D,"LI",{});var Z5e=n(eb);Qoe=s(Z5e,"STRONG",{});var Dzr=n(Qoe);gTo=r(Dzr,"fnet"),Dzr.forEach(t),hTo=r(Z5e," \u2014 "),k$=s(Z5e,"A",{href:!0});var Nzr=n(k$);uTo=r(Nzr,"FNetForMaskedLM"),Nzr.forEach(t),pTo=r(Z5e," (FNet model)"),Z5e.forEach(t),_To=i(D),ob=s(D,"LI",{});var eye=n(ob);Hoe=s(eye,"STRONG",{});var qzr=n(Hoe);bTo=r(qzr,"funnel"),qzr.forEach(t),vTo=r(eye," \u2014 "),R$=s(eye,"A",{href:!0});var Ozr=n(R$);TTo=r(Ozr,"FunnelForMaskedLM"),Ozr.forEach(t),FTo=r(eye," (Funnel Transformer model)"),eye.forEach(t),CTo=i(D),rb=s(D,"LI",{});var oye=n(rb);Uoe=s(oye,"STRONG",{});var Gzr=n(Uoe);MTo=r(Gzr,"ibert"),Gzr.forEach(t),ETo=r(oye," \u2014 "),S$=s(oye,"A",{href:!0});var Xzr=n(S$);yTo=r(Xzr,"IBertForMaskedLM"),Xzr.forEach(t),wTo=r(oye," (I-BERT model)"),oye.forEach(t),ATo=i(D),tb=s(D,"LI",{});var rye=n(tb);Joe=s(rye,"STRONG",{});var Vzr=n(Joe);LTo=r(Vzr,"layoutlm"),Vzr.forEach(t),BTo=r(rye," \u2014 "),P$=s(rye,"A",{href:!0});var zzr=n(P$);xTo=r(zzr,"LayoutLMForMaskedLM"),zzr.forEach(t),kTo=r(rye," (LayoutLM model)"),rye.forEach(t),RTo=i(D),ab=s(D,"LI",{});var tye=n(ab);Yoe=s(tye,"STRONG",{});var Wzr=n(Yoe);STo=r(Wzr,"longformer"),Wzr.forEach(t),PTo=r(tye," \u2014 "),$$=s(tye,"A",{href:!0});var Qzr=n($$);$To=r(Qzr,"LongformerForMaskedLM"),Qzr.forEach(t),ITo=r(tye," (Longformer model)"),tye.forEach(t),jTo=i(D),sb=s(D,"LI",{});var aye=n(sb);Koe=s(aye,"STRONG",{});var Hzr=n(Koe);DTo=r(Hzr,"mbart"),Hzr.forEach(t),NTo=r(aye," \u2014 "),I$=s(aye,"A",{href:!0});var Uzr=n(I$);qTo=r(Uzr,"MBartForConditionalGeneration"),Uzr.forEach(t),OTo=r(aye," (mBART model)"),aye.forEach(t),GTo=i(D),nb=s(D,"LI",{});var sye=n(nb);Zoe=s(sye,"STRONG",{});var Jzr=n(Zoe);XTo=r(Jzr,"megatron-bert"),Jzr.forEach(t),VTo=r(sye," \u2014 "),j$=s(sye,"A",{href:!0});var Yzr=n(j$);zTo=r(Yzr,"MegatronBertForMaskedLM"),Yzr.forEach(t),WTo=r(sye," (MegatronBert model)"),sye.forEach(t),QTo=i(D),lb=s(D,"LI",{});var nye=n(lb);ere=s(nye,"STRONG",{});var Kzr=n(ere);HTo=r(Kzr,"mobilebert"),Kzr.forEach(t),UTo=r(nye," \u2014 "),D$=s(nye,"A",{href:!0});var Zzr=n(D$);JTo=r(Zzr,"MobileBertForMaskedLM"),Zzr.forEach(t),YTo=r(nye," (MobileBERT model)"),nye.forEach(t),KTo=i(D),ib=s(D,"LI",{});var lye=n(ib);ore=s(lye,"STRONG",{});var eWr=n(ore);ZTo=r(eWr,"mpnet"),eWr.forEach(t),e1o=r(lye," \u2014 "),N$=s(lye,"A",{href:!0});var oWr=n(N$);o1o=r(oWr,"MPNetForMaskedLM"),oWr.forEach(t),r1o=r(lye," (MPNet model)"),lye.forEach(t),t1o=i(D),db=s(D,"LI",{});var iye=n(db);rre=s(iye,"STRONG",{});var rWr=n(rre);a1o=r(rWr,"nystromformer"),rWr.forEach(t),s1o=r(iye," \u2014 "),q$=s(iye,"A",{href:!0});var tWr=n(q$);n1o=r(tWr,"NystromformerForMaskedLM"),tWr.forEach(t),l1o=r(iye," (Nystromformer model)"),iye.forEach(t),i1o=i(D),cb=s(D,"LI",{});var dye=n(cb);tre=s(dye,"STRONG",{});var aWr=n(tre);d1o=r(aWr,"perceiver"),aWr.forEach(t),c1o=r(dye," \u2014 "),O$=s(dye,"A",{href:!0});var sWr=n(O$);m1o=r(sWr,"PerceiverForMaskedLM"),sWr.forEach(t),f1o=r(dye," (Perceiver model)"),dye.forEach(t),g1o=i(D),mb=s(D,"LI",{});var cye=n(mb);are=s(cye,"STRONG",{});var nWr=n(are);h1o=r(nWr,"qdqbert"),nWr.forEach(t),u1o=r(cye," \u2014 "),G$=s(cye,"A",{href:!0});var lWr=n(G$);p1o=r(lWr,"QDQBertForMaskedLM"),lWr.forEach(t),_1o=r(cye," (QDQBert model)"),cye.forEach(t),b1o=i(D),fb=s(D,"LI",{});var mye=n(fb);sre=s(mye,"STRONG",{});var iWr=n(sre);v1o=r(iWr,"reformer"),iWr.forEach(t),T1o=r(mye," \u2014 "),X$=s(mye,"A",{href:!0});var dWr=n(X$);F1o=r(dWr,"ReformerForMaskedLM"),dWr.forEach(t),C1o=r(mye," (Reformer model)"),mye.forEach(t),M1o=i(D),gb=s(D,"LI",{});var fye=n(gb);nre=s(fye,"STRONG",{});var cWr=n(nre);E1o=r(cWr,"rembert"),cWr.forEach(t),y1o=r(fye," \u2014 "),V$=s(fye,"A",{href:!0});var mWr=n(V$);w1o=r(mWr,"RemBertForMaskedLM"),mWr.forEach(t),A1o=r(fye," (RemBERT model)"),fye.forEach(t),L1o=i(D),hb=s(D,"LI",{});var gye=n(hb);lre=s(gye,"STRONG",{});var fWr=n(lre);B1o=r(fWr,"roberta"),fWr.forEach(t),x1o=r(gye," \u2014 "),z$=s(gye,"A",{href:!0});var gWr=n(z$);k1o=r(gWr,"RobertaForMaskedLM"),gWr.forEach(t),R1o=r(gye," (RoBERTa model)"),gye.forEach(t),S1o=i(D),ub=s(D,"LI",{});var hye=n(ub);ire=s(hye,"STRONG",{});var hWr=n(ire);P1o=r(hWr,"roformer"),hWr.forEach(t),$1o=r(hye," \u2014 "),W$=s(hye,"A",{href:!0});var uWr=n(W$);I1o=r(uWr,"RoFormerForMaskedLM"),uWr.forEach(t),j1o=r(hye," (RoFormer model)"),hye.forEach(t),D1o=i(D),pb=s(D,"LI",{});var uye=n(pb);dre=s(uye,"STRONG",{});var pWr=n(dre);N1o=r(pWr,"squeezebert"),pWr.forEach(t),q1o=r(uye," \u2014 "),Q$=s(uye,"A",{href:!0});var _Wr=n(Q$);O1o=r(_Wr,"SqueezeBertForMaskedLM"),_Wr.forEach(t),G1o=r(uye," (SqueezeBERT model)"),uye.forEach(t),X1o=i(D),_b=s(D,"LI",{});var pye=n(_b);cre=s(pye,"STRONG",{});var bWr=n(cre);V1o=r(bWr,"tapas"),bWr.forEach(t),z1o=r(pye," \u2014 "),H$=s(pye,"A",{href:!0});var vWr=n(H$);W1o=r(vWr,"TapasForMaskedLM"),vWr.forEach(t),Q1o=r(pye," (TAPAS model)"),pye.forEach(t),H1o=i(D),bb=s(D,"LI",{});var _ye=n(bb);mre=s(_ye,"STRONG",{});var TWr=n(mre);U1o=r(TWr,"wav2vec2"),TWr.forEach(t),J1o=r(_ye," \u2014 "),fre=s(_ye,"CODE",{});var FWr=n(fre);Y1o=r(FWr,"Wav2Vec2ForMaskedLM"),FWr.forEach(t),K1o=r(_ye,"(Wav2Vec2 model)"),_ye.forEach(t),Z1o=i(D),vb=s(D,"LI",{});var bye=n(vb);gre=s(bye,"STRONG",{});var CWr=n(gre);eFo=r(CWr,"xlm"),CWr.forEach(t),oFo=r(bye," \u2014 "),U$=s(bye,"A",{href:!0});var MWr=n(U$);rFo=r(MWr,"XLMWithLMHeadModel"),MWr.forEach(t),tFo=r(bye," (XLM model)"),bye.forEach(t),aFo=i(D),Tb=s(D,"LI",{});var vye=n(Tb);hre=s(vye,"STRONG",{});var EWr=n(hre);sFo=r(EWr,"xlm-roberta"),EWr.forEach(t),nFo=r(vye," \u2014 "),J$=s(vye,"A",{href:!0});var yWr=n(J$);lFo=r(yWr,"XLMRobertaForMaskedLM"),yWr.forEach(t),iFo=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),dFo=i(D),Fb=s(D,"LI",{});var Tye=n(Fb);ure=s(Tye,"STRONG",{});var wWr=n(ure);cFo=r(wWr,"xlm-roberta-xl"),wWr.forEach(t),mFo=r(Tye," \u2014 "),Y$=s(Tye,"A",{href:!0});var AWr=n(Y$);fFo=r(AWr,"XLMRobertaXLForMaskedLM"),AWr.forEach(t),gFo=r(Tye," (XLM-RoBERTa-XL model)"),Tye.forEach(t),hFo=i(D),Cb=s(D,"LI",{});var Fye=n(Cb);pre=s(Fye,"STRONG",{});var LWr=n(pre);uFo=r(LWr,"yoso"),LWr.forEach(t),pFo=r(Fye," \u2014 "),K$=s(Fye,"A",{href:!0});var BWr=n(K$);_Fo=r(BWr,"YosoForMaskedLM"),BWr.forEach(t),bFo=r(Fye," (YOSO model)"),Fye.forEach(t),D.forEach(t),vFo=i(Xt),Mb=s(Xt,"P",{});var Cye=n(Mb);TFo=r(Cye,"The model is set in evaluation mode by default using "),_re=s(Cye,"CODE",{});var xWr=n(_re);FFo=r(xWr,"model.eval()"),xWr.forEach(t),CFo=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bre=s(Cye,"CODE",{});var kWr=n(bre);MFo=r(kWr,"model.train()"),kWr.forEach(t),Cye.forEach(t),EFo=i(Xt),vre=s(Xt,"P",{});var RWr=n(vre);yFo=r(RWr,"Examples:"),RWr.forEach(t),wFo=i(Xt),f(Zy.$$.fragment,Xt),Xt.forEach(t),Kn.forEach(t),Mxe=i(d),dd=s(d,"H2",{class:!0});var RRe=n(dd);Eb=s(RRe,"A",{id:!0,class:!0,href:!0});var SWr=n(Eb);Tre=s(SWr,"SPAN",{});var PWr=n(Tre);f(ew.$$.fragment,PWr),PWr.forEach(t),SWr.forEach(t),AFo=i(RRe),Fre=s(RRe,"SPAN",{});var $Wr=n(Fre);LFo=r($Wr,"AutoModelForSeq2SeqLM"),$Wr.forEach(t),RRe.forEach(t),Exe=i(d),er=s(d,"DIV",{class:!0});var el=n(er);f(ow.$$.fragment,el),BFo=i(el),cd=s(el,"P",{});var kz=n(cd);xFo=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cre=s(kz,"CODE",{});var IWr=n(Cre);kFo=r(IWr,"from_pretrained()"),IWr.forEach(t),RFo=r(kz,"class method or the "),Mre=s(kz,"CODE",{});var jWr=n(Mre);SFo=r(jWr,"from_config()"),jWr.forEach(t),PFo=r(kz,`class
method.`),kz.forEach(t),$Fo=i(el),rw=s(el,"P",{});var SRe=n(rw);IFo=r(SRe,"This class cannot be instantiated directly using "),Ere=s(SRe,"CODE",{});var DWr=n(Ere);jFo=r(DWr,"__init__()"),DWr.forEach(t),DFo=r(SRe," (throws an error)."),SRe.forEach(t),NFo=i(el),Hr=s(el,"DIV",{class:!0});var ol=n(Hr);f(tw.$$.fragment,ol),qFo=i(ol),yre=s(ol,"P",{});var NWr=n(yre);OFo=r(NWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NWr.forEach(t),GFo=i(ol),md=s(ol,"P",{});var Rz=n(md);XFo=r(Rz,`Note:
Loading a model from its configuration file does `),wre=s(Rz,"STRONG",{});var qWr=n(wre);VFo=r(qWr,"not"),qWr.forEach(t),zFo=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=s(Rz,"CODE",{});var OWr=n(Are);WFo=r(OWr,"from_pretrained()"),OWr.forEach(t),QFo=r(Rz,"to load the model weights."),Rz.forEach(t),HFo=i(ol),Lre=s(ol,"P",{});var GWr=n(Lre);UFo=r(GWr,"Examples:"),GWr.forEach(t),JFo=i(ol),f(aw.$$.fragment,ol),ol.forEach(t),YFo=i(el),Oe=s(el,"DIV",{class:!0});var Vt=n(Oe);f(sw.$$.fragment,Vt),KFo=i(Vt),Bre=s(Vt,"P",{});var XWr=n(Bre);ZFo=r(XWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XWr.forEach(t),eCo=i(Vt),Ha=s(Vt,"P",{});var e5=n(Ha);oCo=r(e5,"The model class to instantiate is selected based on the "),xre=s(e5,"CODE",{});var VWr=n(xre);rCo=r(VWr,"model_type"),VWr.forEach(t),tCo=r(e5,` property of the config object (either
passed as an argument or loaded from `),kre=s(e5,"CODE",{});var zWr=n(kre);aCo=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),sCo=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rre=s(e5,"CODE",{});var WWr=n(Rre);nCo=r(WWr,"pretrained_model_name_or_path"),WWr.forEach(t),lCo=r(e5,":"),e5.forEach(t),iCo=i(Vt),se=s(Vt,"UL",{});var ie=n(se);yb=s(ie,"LI",{});var Mye=n(yb);Sre=s(Mye,"STRONG",{});var QWr=n(Sre);dCo=r(QWr,"bart"),QWr.forEach(t),cCo=r(Mye," \u2014 "),Z$=s(Mye,"A",{href:!0});var HWr=n(Z$);mCo=r(HWr,"BartForConditionalGeneration"),HWr.forEach(t),fCo=r(Mye," (BART model)"),Mye.forEach(t),gCo=i(ie),wb=s(ie,"LI",{});var Eye=n(wb);Pre=s(Eye,"STRONG",{});var UWr=n(Pre);hCo=r(UWr,"bigbird_pegasus"),UWr.forEach(t),uCo=r(Eye," \u2014 "),eI=s(Eye,"A",{href:!0});var JWr=n(eI);pCo=r(JWr,"BigBirdPegasusForConditionalGeneration"),JWr.forEach(t),_Co=r(Eye," (BigBirdPegasus model)"),Eye.forEach(t),bCo=i(ie),Ab=s(ie,"LI",{});var yye=n(Ab);$re=s(yye,"STRONG",{});var YWr=n($re);vCo=r(YWr,"blenderbot"),YWr.forEach(t),TCo=r(yye," \u2014 "),oI=s(yye,"A",{href:!0});var KWr=n(oI);FCo=r(KWr,"BlenderbotForConditionalGeneration"),KWr.forEach(t),CCo=r(yye," (Blenderbot model)"),yye.forEach(t),MCo=i(ie),Lb=s(ie,"LI",{});var wye=n(Lb);Ire=s(wye,"STRONG",{});var ZWr=n(Ire);ECo=r(ZWr,"blenderbot-small"),ZWr.forEach(t),yCo=r(wye," \u2014 "),rI=s(wye,"A",{href:!0});var eQr=n(rI);wCo=r(eQr,"BlenderbotSmallForConditionalGeneration"),eQr.forEach(t),ACo=r(wye," (BlenderbotSmall model)"),wye.forEach(t),LCo=i(ie),Bb=s(ie,"LI",{});var Aye=n(Bb);jre=s(Aye,"STRONG",{});var oQr=n(jre);BCo=r(oQr,"encoder-decoder"),oQr.forEach(t),xCo=r(Aye," \u2014 "),tI=s(Aye,"A",{href:!0});var rQr=n(tI);kCo=r(rQr,"EncoderDecoderModel"),rQr.forEach(t),RCo=r(Aye," (Encoder decoder model)"),Aye.forEach(t),SCo=i(ie),xb=s(ie,"LI",{});var Lye=n(xb);Dre=s(Lye,"STRONG",{});var tQr=n(Dre);PCo=r(tQr,"fsmt"),tQr.forEach(t),$Co=r(Lye," \u2014 "),aI=s(Lye,"A",{href:!0});var aQr=n(aI);ICo=r(aQr,"FSMTForConditionalGeneration"),aQr.forEach(t),jCo=r(Lye," (FairSeq Machine-Translation model)"),Lye.forEach(t),DCo=i(ie),kb=s(ie,"LI",{});var Bye=n(kb);Nre=s(Bye,"STRONG",{});var sQr=n(Nre);NCo=r(sQr,"led"),sQr.forEach(t),qCo=r(Bye," \u2014 "),sI=s(Bye,"A",{href:!0});var nQr=n(sI);OCo=r(nQr,"LEDForConditionalGeneration"),nQr.forEach(t),GCo=r(Bye," (LED model)"),Bye.forEach(t),XCo=i(ie),Rb=s(ie,"LI",{});var xye=n(Rb);qre=s(xye,"STRONG",{});var lQr=n(qre);VCo=r(lQr,"m2m_100"),lQr.forEach(t),zCo=r(xye," \u2014 "),nI=s(xye,"A",{href:!0});var iQr=n(nI);WCo=r(iQr,"M2M100ForConditionalGeneration"),iQr.forEach(t),QCo=r(xye," (M2M100 model)"),xye.forEach(t),HCo=i(ie),Sb=s(ie,"LI",{});var kye=n(Sb);Ore=s(kye,"STRONG",{});var dQr=n(Ore);UCo=r(dQr,"marian"),dQr.forEach(t),JCo=r(kye," \u2014 "),lI=s(kye,"A",{href:!0});var cQr=n(lI);YCo=r(cQr,"MarianMTModel"),cQr.forEach(t),KCo=r(kye," (Marian model)"),kye.forEach(t),ZCo=i(ie),Pb=s(ie,"LI",{});var Rye=n(Pb);Gre=s(Rye,"STRONG",{});var mQr=n(Gre);eMo=r(mQr,"mbart"),mQr.forEach(t),oMo=r(Rye," \u2014 "),iI=s(Rye,"A",{href:!0});var fQr=n(iI);rMo=r(fQr,"MBartForConditionalGeneration"),fQr.forEach(t),tMo=r(Rye," (mBART model)"),Rye.forEach(t),aMo=i(ie),$b=s(ie,"LI",{});var Sye=n($b);Xre=s(Sye,"STRONG",{});var gQr=n(Xre);sMo=r(gQr,"mt5"),gQr.forEach(t),nMo=r(Sye," \u2014 "),dI=s(Sye,"A",{href:!0});var hQr=n(dI);lMo=r(hQr,"MT5ForConditionalGeneration"),hQr.forEach(t),iMo=r(Sye," (mT5 model)"),Sye.forEach(t),dMo=i(ie),Ib=s(ie,"LI",{});var Pye=n(Ib);Vre=s(Pye,"STRONG",{});var uQr=n(Vre);cMo=r(uQr,"pegasus"),uQr.forEach(t),mMo=r(Pye," \u2014 "),cI=s(Pye,"A",{href:!0});var pQr=n(cI);fMo=r(pQr,"PegasusForConditionalGeneration"),pQr.forEach(t),gMo=r(Pye," (Pegasus model)"),Pye.forEach(t),hMo=i(ie),jb=s(ie,"LI",{});var $ye=n(jb);zre=s($ye,"STRONG",{});var _Qr=n(zre);uMo=r(_Qr,"plbart"),_Qr.forEach(t),pMo=r($ye," \u2014 "),mI=s($ye,"A",{href:!0});var bQr=n(mI);_Mo=r(bQr,"PLBartForConditionalGeneration"),bQr.forEach(t),bMo=r($ye," (PLBart model)"),$ye.forEach(t),vMo=i(ie),Db=s(ie,"LI",{});var Iye=n(Db);Wre=s(Iye,"STRONG",{});var vQr=n(Wre);TMo=r(vQr,"prophetnet"),vQr.forEach(t),FMo=r(Iye," \u2014 "),fI=s(Iye,"A",{href:!0});var TQr=n(fI);CMo=r(TQr,"ProphetNetForConditionalGeneration"),TQr.forEach(t),MMo=r(Iye," (ProphetNet model)"),Iye.forEach(t),EMo=i(ie),Nb=s(ie,"LI",{});var jye=n(Nb);Qre=s(jye,"STRONG",{});var FQr=n(Qre);yMo=r(FQr,"t5"),FQr.forEach(t),wMo=r(jye," \u2014 "),gI=s(jye,"A",{href:!0});var CQr=n(gI);AMo=r(CQr,"T5ForConditionalGeneration"),CQr.forEach(t),LMo=r(jye," (T5 model)"),jye.forEach(t),BMo=i(ie),qb=s(ie,"LI",{});var Dye=n(qb);Hre=s(Dye,"STRONG",{});var MQr=n(Hre);xMo=r(MQr,"xlm-prophetnet"),MQr.forEach(t),kMo=r(Dye," \u2014 "),hI=s(Dye,"A",{href:!0});var EQr=n(hI);RMo=r(EQr,"XLMProphetNetForConditionalGeneration"),EQr.forEach(t),SMo=r(Dye," (XLMProphetNet model)"),Dye.forEach(t),ie.forEach(t),PMo=i(Vt),Ob=s(Vt,"P",{});var Nye=n(Ob);$Mo=r(Nye,"The model is set in evaluation mode by default using "),Ure=s(Nye,"CODE",{});var yQr=n(Ure);IMo=r(yQr,"model.eval()"),yQr.forEach(t),jMo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jre=s(Nye,"CODE",{});var wQr=n(Jre);DMo=r(wQr,"model.train()"),wQr.forEach(t),Nye.forEach(t),NMo=i(Vt),Yre=s(Vt,"P",{});var AQr=n(Yre);qMo=r(AQr,"Examples:"),AQr.forEach(t),OMo=i(Vt),f(nw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),yxe=i(d),fd=s(d,"H2",{class:!0});var PRe=n(fd);Gb=s(PRe,"A",{id:!0,class:!0,href:!0});var LQr=n(Gb);Kre=s(LQr,"SPAN",{});var BQr=n(Kre);f(lw.$$.fragment,BQr),BQr.forEach(t),LQr.forEach(t),GMo=i(PRe),Zre=s(PRe,"SPAN",{});var xQr=n(Zre);XMo=r(xQr,"AutoModelForSequenceClassification"),xQr.forEach(t),PRe.forEach(t),wxe=i(d),or=s(d,"DIV",{class:!0});var rl=n(or);f(iw.$$.fragment,rl),VMo=i(rl),gd=s(rl,"P",{});var Sz=n(gd);zMo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ete=s(Sz,"CODE",{});var kQr=n(ete);WMo=r(kQr,"from_pretrained()"),kQr.forEach(t),QMo=r(Sz,"class method or the "),ote=s(Sz,"CODE",{});var RQr=n(ote);HMo=r(RQr,"from_config()"),RQr.forEach(t),UMo=r(Sz,`class
method.`),Sz.forEach(t),JMo=i(rl),dw=s(rl,"P",{});var $Re=n(dw);YMo=r($Re,"This class cannot be instantiated directly using "),rte=s($Re,"CODE",{});var SQr=n(rte);KMo=r(SQr,"__init__()"),SQr.forEach(t),ZMo=r($Re," (throws an error)."),$Re.forEach(t),e4o=i(rl),Ur=s(rl,"DIV",{class:!0});var tl=n(Ur);f(cw.$$.fragment,tl),o4o=i(tl),tte=s(tl,"P",{});var PQr=n(tte);r4o=r(PQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PQr.forEach(t),t4o=i(tl),hd=s(tl,"P",{});var Pz=n(hd);a4o=r(Pz,`Note:
Loading a model from its configuration file does `),ate=s(Pz,"STRONG",{});var $Qr=n(ate);s4o=r($Qr,"not"),$Qr.forEach(t),n4o=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=s(Pz,"CODE",{});var IQr=n(ste);l4o=r(IQr,"from_pretrained()"),IQr.forEach(t),i4o=r(Pz,"to load the model weights."),Pz.forEach(t),d4o=i(tl),nte=s(tl,"P",{});var jQr=n(nte);c4o=r(jQr,"Examples:"),jQr.forEach(t),m4o=i(tl),f(mw.$$.fragment,tl),tl.forEach(t),f4o=i(rl),Ge=s(rl,"DIV",{class:!0});var zt=n(Ge);f(fw.$$.fragment,zt),g4o=i(zt),lte=s(zt,"P",{});var DQr=n(lte);h4o=r(DQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DQr.forEach(t),u4o=i(zt),Ua=s(zt,"P",{});var o5=n(Ua);p4o=r(o5,"The model class to instantiate is selected based on the "),ite=s(o5,"CODE",{});var NQr=n(ite);_4o=r(NQr,"model_type"),NQr.forEach(t),b4o=r(o5,` property of the config object (either
passed as an argument or loaded from `),dte=s(o5,"CODE",{});var qQr=n(dte);v4o=r(qQr,"pretrained_model_name_or_path"),qQr.forEach(t),T4o=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=s(o5,"CODE",{});var OQr=n(cte);F4o=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),C4o=r(o5,":"),o5.forEach(t),M4o=i(zt),A=s(zt,"UL",{});var L=n(A);Xb=s(L,"LI",{});var qye=n(Xb);mte=s(qye,"STRONG",{});var GQr=n(mte);E4o=r(GQr,"albert"),GQr.forEach(t),y4o=r(qye," \u2014 "),uI=s(qye,"A",{href:!0});var XQr=n(uI);w4o=r(XQr,"AlbertForSequenceClassification"),XQr.forEach(t),A4o=r(qye," (ALBERT model)"),qye.forEach(t),L4o=i(L),Vb=s(L,"LI",{});var Oye=n(Vb);fte=s(Oye,"STRONG",{});var VQr=n(fte);B4o=r(VQr,"bart"),VQr.forEach(t),x4o=r(Oye," \u2014 "),pI=s(Oye,"A",{href:!0});var zQr=n(pI);k4o=r(zQr,"BartForSequenceClassification"),zQr.forEach(t),R4o=r(Oye," (BART model)"),Oye.forEach(t),S4o=i(L),zb=s(L,"LI",{});var Gye=n(zb);gte=s(Gye,"STRONG",{});var WQr=n(gte);P4o=r(WQr,"bert"),WQr.forEach(t),$4o=r(Gye," \u2014 "),_I=s(Gye,"A",{href:!0});var QQr=n(_I);I4o=r(QQr,"BertForSequenceClassification"),QQr.forEach(t),j4o=r(Gye," (BERT model)"),Gye.forEach(t),D4o=i(L),Wb=s(L,"LI",{});var Xye=n(Wb);hte=s(Xye,"STRONG",{});var HQr=n(hte);N4o=r(HQr,"big_bird"),HQr.forEach(t),q4o=r(Xye," \u2014 "),bI=s(Xye,"A",{href:!0});var UQr=n(bI);O4o=r(UQr,"BigBirdForSequenceClassification"),UQr.forEach(t),G4o=r(Xye," (BigBird model)"),Xye.forEach(t),X4o=i(L),Qb=s(L,"LI",{});var Vye=n(Qb);ute=s(Vye,"STRONG",{});var JQr=n(ute);V4o=r(JQr,"bigbird_pegasus"),JQr.forEach(t),z4o=r(Vye," \u2014 "),vI=s(Vye,"A",{href:!0});var YQr=n(vI);W4o=r(YQr,"BigBirdPegasusForSequenceClassification"),YQr.forEach(t),Q4o=r(Vye," (BigBirdPegasus model)"),Vye.forEach(t),H4o=i(L),Hb=s(L,"LI",{});var zye=n(Hb);pte=s(zye,"STRONG",{});var KQr=n(pte);U4o=r(KQr,"camembert"),KQr.forEach(t),J4o=r(zye," \u2014 "),TI=s(zye,"A",{href:!0});var ZQr=n(TI);Y4o=r(ZQr,"CamembertForSequenceClassification"),ZQr.forEach(t),K4o=r(zye," (CamemBERT model)"),zye.forEach(t),Z4o=i(L),Ub=s(L,"LI",{});var Wye=n(Ub);_te=s(Wye,"STRONG",{});var eHr=n(_te);eEo=r(eHr,"canine"),eHr.forEach(t),oEo=r(Wye," \u2014 "),FI=s(Wye,"A",{href:!0});var oHr=n(FI);rEo=r(oHr,"CanineForSequenceClassification"),oHr.forEach(t),tEo=r(Wye," (Canine model)"),Wye.forEach(t),aEo=i(L),Jb=s(L,"LI",{});var Qye=n(Jb);bte=s(Qye,"STRONG",{});var rHr=n(bte);sEo=r(rHr,"convbert"),rHr.forEach(t),nEo=r(Qye," \u2014 "),CI=s(Qye,"A",{href:!0});var tHr=n(CI);lEo=r(tHr,"ConvBertForSequenceClassification"),tHr.forEach(t),iEo=r(Qye," (ConvBERT model)"),Qye.forEach(t),dEo=i(L),Yb=s(L,"LI",{});var Hye=n(Yb);vte=s(Hye,"STRONG",{});var aHr=n(vte);cEo=r(aHr,"ctrl"),aHr.forEach(t),mEo=r(Hye," \u2014 "),MI=s(Hye,"A",{href:!0});var sHr=n(MI);fEo=r(sHr,"CTRLForSequenceClassification"),sHr.forEach(t),gEo=r(Hye," (CTRL model)"),Hye.forEach(t),hEo=i(L),Kb=s(L,"LI",{});var Uye=n(Kb);Tte=s(Uye,"STRONG",{});var nHr=n(Tte);uEo=r(nHr,"data2vec-text"),nHr.forEach(t),pEo=r(Uye," \u2014 "),EI=s(Uye,"A",{href:!0});var lHr=n(EI);_Eo=r(lHr,"Data2VecTextForSequenceClassification"),lHr.forEach(t),bEo=r(Uye," (Data2VecText model)"),Uye.forEach(t),vEo=i(L),Zb=s(L,"LI",{});var Jye=n(Zb);Fte=s(Jye,"STRONG",{});var iHr=n(Fte);TEo=r(iHr,"deberta"),iHr.forEach(t),FEo=r(Jye," \u2014 "),yI=s(Jye,"A",{href:!0});var dHr=n(yI);CEo=r(dHr,"DebertaForSequenceClassification"),dHr.forEach(t),MEo=r(Jye," (DeBERTa model)"),Jye.forEach(t),EEo=i(L),e2=s(L,"LI",{});var Yye=n(e2);Cte=s(Yye,"STRONG",{});var cHr=n(Cte);yEo=r(cHr,"deberta-v2"),cHr.forEach(t),wEo=r(Yye," \u2014 "),wI=s(Yye,"A",{href:!0});var mHr=n(wI);AEo=r(mHr,"DebertaV2ForSequenceClassification"),mHr.forEach(t),LEo=r(Yye," (DeBERTa-v2 model)"),Yye.forEach(t),BEo=i(L),o2=s(L,"LI",{});var Kye=n(o2);Mte=s(Kye,"STRONG",{});var fHr=n(Mte);xEo=r(fHr,"distilbert"),fHr.forEach(t),kEo=r(Kye," \u2014 "),AI=s(Kye,"A",{href:!0});var gHr=n(AI);REo=r(gHr,"DistilBertForSequenceClassification"),gHr.forEach(t),SEo=r(Kye," (DistilBERT model)"),Kye.forEach(t),PEo=i(L),r2=s(L,"LI",{});var Zye=n(r2);Ete=s(Zye,"STRONG",{});var hHr=n(Ete);$Eo=r(hHr,"electra"),hHr.forEach(t),IEo=r(Zye," \u2014 "),LI=s(Zye,"A",{href:!0});var uHr=n(LI);jEo=r(uHr,"ElectraForSequenceClassification"),uHr.forEach(t),DEo=r(Zye," (ELECTRA model)"),Zye.forEach(t),NEo=i(L),t2=s(L,"LI",{});var ewe=n(t2);yte=s(ewe,"STRONG",{});var pHr=n(yte);qEo=r(pHr,"flaubert"),pHr.forEach(t),OEo=r(ewe," \u2014 "),BI=s(ewe,"A",{href:!0});var _Hr=n(BI);GEo=r(_Hr,"FlaubertForSequenceClassification"),_Hr.forEach(t),XEo=r(ewe," (FlauBERT model)"),ewe.forEach(t),VEo=i(L),a2=s(L,"LI",{});var owe=n(a2);wte=s(owe,"STRONG",{});var bHr=n(wte);zEo=r(bHr,"fnet"),bHr.forEach(t),WEo=r(owe," \u2014 "),xI=s(owe,"A",{href:!0});var vHr=n(xI);QEo=r(vHr,"FNetForSequenceClassification"),vHr.forEach(t),HEo=r(owe," (FNet model)"),owe.forEach(t),UEo=i(L),s2=s(L,"LI",{});var rwe=n(s2);Ate=s(rwe,"STRONG",{});var THr=n(Ate);JEo=r(THr,"funnel"),THr.forEach(t),YEo=r(rwe," \u2014 "),kI=s(rwe,"A",{href:!0});var FHr=n(kI);KEo=r(FHr,"FunnelForSequenceClassification"),FHr.forEach(t),ZEo=r(rwe," (Funnel Transformer model)"),rwe.forEach(t),e3o=i(L),n2=s(L,"LI",{});var twe=n(n2);Lte=s(twe,"STRONG",{});var CHr=n(Lte);o3o=r(CHr,"gpt2"),CHr.forEach(t),r3o=r(twe," \u2014 "),RI=s(twe,"A",{href:!0});var MHr=n(RI);t3o=r(MHr,"GPT2ForSequenceClassification"),MHr.forEach(t),a3o=r(twe," (OpenAI GPT-2 model)"),twe.forEach(t),s3o=i(L),l2=s(L,"LI",{});var awe=n(l2);Bte=s(awe,"STRONG",{});var EHr=n(Bte);n3o=r(EHr,"gpt_neo"),EHr.forEach(t),l3o=r(awe," \u2014 "),SI=s(awe,"A",{href:!0});var yHr=n(SI);i3o=r(yHr,"GPTNeoForSequenceClassification"),yHr.forEach(t),d3o=r(awe," (GPT Neo model)"),awe.forEach(t),c3o=i(L),i2=s(L,"LI",{});var swe=n(i2);xte=s(swe,"STRONG",{});var wHr=n(xte);m3o=r(wHr,"gptj"),wHr.forEach(t),f3o=r(swe," \u2014 "),PI=s(swe,"A",{href:!0});var AHr=n(PI);g3o=r(AHr,"GPTJForSequenceClassification"),AHr.forEach(t),h3o=r(swe," (GPT-J model)"),swe.forEach(t),u3o=i(L),d2=s(L,"LI",{});var nwe=n(d2);kte=s(nwe,"STRONG",{});var LHr=n(kte);p3o=r(LHr,"ibert"),LHr.forEach(t),_3o=r(nwe," \u2014 "),$I=s(nwe,"A",{href:!0});var BHr=n($I);b3o=r(BHr,"IBertForSequenceClassification"),BHr.forEach(t),v3o=r(nwe," (I-BERT model)"),nwe.forEach(t),T3o=i(L),c2=s(L,"LI",{});var lwe=n(c2);Rte=s(lwe,"STRONG",{});var xHr=n(Rte);F3o=r(xHr,"layoutlm"),xHr.forEach(t),C3o=r(lwe," \u2014 "),II=s(lwe,"A",{href:!0});var kHr=n(II);M3o=r(kHr,"LayoutLMForSequenceClassification"),kHr.forEach(t),E3o=r(lwe," (LayoutLM model)"),lwe.forEach(t),y3o=i(L),m2=s(L,"LI",{});var iwe=n(m2);Ste=s(iwe,"STRONG",{});var RHr=n(Ste);w3o=r(RHr,"layoutlmv2"),RHr.forEach(t),A3o=r(iwe," \u2014 "),jI=s(iwe,"A",{href:!0});var SHr=n(jI);L3o=r(SHr,"LayoutLMv2ForSequenceClassification"),SHr.forEach(t),B3o=r(iwe," (LayoutLMv2 model)"),iwe.forEach(t),x3o=i(L),f2=s(L,"LI",{});var dwe=n(f2);Pte=s(dwe,"STRONG",{});var PHr=n(Pte);k3o=r(PHr,"led"),PHr.forEach(t),R3o=r(dwe," \u2014 "),DI=s(dwe,"A",{href:!0});var $Hr=n(DI);S3o=r($Hr,"LEDForSequenceClassification"),$Hr.forEach(t),P3o=r(dwe," (LED model)"),dwe.forEach(t),$3o=i(L),g2=s(L,"LI",{});var cwe=n(g2);$te=s(cwe,"STRONG",{});var IHr=n($te);I3o=r(IHr,"longformer"),IHr.forEach(t),j3o=r(cwe," \u2014 "),NI=s(cwe,"A",{href:!0});var jHr=n(NI);D3o=r(jHr,"LongformerForSequenceClassification"),jHr.forEach(t),N3o=r(cwe," (Longformer model)"),cwe.forEach(t),q3o=i(L),h2=s(L,"LI",{});var mwe=n(h2);Ite=s(mwe,"STRONG",{});var DHr=n(Ite);O3o=r(DHr,"mbart"),DHr.forEach(t),G3o=r(mwe," \u2014 "),qI=s(mwe,"A",{href:!0});var NHr=n(qI);X3o=r(NHr,"MBartForSequenceClassification"),NHr.forEach(t),V3o=r(mwe," (mBART model)"),mwe.forEach(t),z3o=i(L),u2=s(L,"LI",{});var fwe=n(u2);jte=s(fwe,"STRONG",{});var qHr=n(jte);W3o=r(qHr,"megatron-bert"),qHr.forEach(t),Q3o=r(fwe," \u2014 "),OI=s(fwe,"A",{href:!0});var OHr=n(OI);H3o=r(OHr,"MegatronBertForSequenceClassification"),OHr.forEach(t),U3o=r(fwe," (MegatronBert model)"),fwe.forEach(t),J3o=i(L),p2=s(L,"LI",{});var gwe=n(p2);Dte=s(gwe,"STRONG",{});var GHr=n(Dte);Y3o=r(GHr,"mobilebert"),GHr.forEach(t),K3o=r(gwe," \u2014 "),GI=s(gwe,"A",{href:!0});var XHr=n(GI);Z3o=r(XHr,"MobileBertForSequenceClassification"),XHr.forEach(t),e5o=r(gwe," (MobileBERT model)"),gwe.forEach(t),o5o=i(L),_2=s(L,"LI",{});var hwe=n(_2);Nte=s(hwe,"STRONG",{});var VHr=n(Nte);r5o=r(VHr,"mpnet"),VHr.forEach(t),t5o=r(hwe," \u2014 "),XI=s(hwe,"A",{href:!0});var zHr=n(XI);a5o=r(zHr,"MPNetForSequenceClassification"),zHr.forEach(t),s5o=r(hwe," (MPNet model)"),hwe.forEach(t),n5o=i(L),b2=s(L,"LI",{});var uwe=n(b2);qte=s(uwe,"STRONG",{});var WHr=n(qte);l5o=r(WHr,"nystromformer"),WHr.forEach(t),i5o=r(uwe," \u2014 "),VI=s(uwe,"A",{href:!0});var QHr=n(VI);d5o=r(QHr,"NystromformerForSequenceClassification"),QHr.forEach(t),c5o=r(uwe," (Nystromformer model)"),uwe.forEach(t),m5o=i(L),v2=s(L,"LI",{});var pwe=n(v2);Ote=s(pwe,"STRONG",{});var HHr=n(Ote);f5o=r(HHr,"openai-gpt"),HHr.forEach(t),g5o=r(pwe," \u2014 "),zI=s(pwe,"A",{href:!0});var UHr=n(zI);h5o=r(UHr,"OpenAIGPTForSequenceClassification"),UHr.forEach(t),u5o=r(pwe," (OpenAI GPT model)"),pwe.forEach(t),p5o=i(L),T2=s(L,"LI",{});var _we=n(T2);Gte=s(_we,"STRONG",{});var JHr=n(Gte);_5o=r(JHr,"perceiver"),JHr.forEach(t),b5o=r(_we," \u2014 "),WI=s(_we,"A",{href:!0});var YHr=n(WI);v5o=r(YHr,"PerceiverForSequenceClassification"),YHr.forEach(t),T5o=r(_we," (Perceiver model)"),_we.forEach(t),F5o=i(L),F2=s(L,"LI",{});var bwe=n(F2);Xte=s(bwe,"STRONG",{});var KHr=n(Xte);C5o=r(KHr,"plbart"),KHr.forEach(t),M5o=r(bwe," \u2014 "),QI=s(bwe,"A",{href:!0});var ZHr=n(QI);E5o=r(ZHr,"PLBartForSequenceClassification"),ZHr.forEach(t),y5o=r(bwe," (PLBart model)"),bwe.forEach(t),w5o=i(L),C2=s(L,"LI",{});var vwe=n(C2);Vte=s(vwe,"STRONG",{});var eUr=n(Vte);A5o=r(eUr,"qdqbert"),eUr.forEach(t),L5o=r(vwe," \u2014 "),HI=s(vwe,"A",{href:!0});var oUr=n(HI);B5o=r(oUr,"QDQBertForSequenceClassification"),oUr.forEach(t),x5o=r(vwe," (QDQBert model)"),vwe.forEach(t),k5o=i(L),M2=s(L,"LI",{});var Twe=n(M2);zte=s(Twe,"STRONG",{});var rUr=n(zte);R5o=r(rUr,"reformer"),rUr.forEach(t),S5o=r(Twe," \u2014 "),UI=s(Twe,"A",{href:!0});var tUr=n(UI);P5o=r(tUr,"ReformerForSequenceClassification"),tUr.forEach(t),$5o=r(Twe," (Reformer model)"),Twe.forEach(t),I5o=i(L),E2=s(L,"LI",{});var Fwe=n(E2);Wte=s(Fwe,"STRONG",{});var aUr=n(Wte);j5o=r(aUr,"rembert"),aUr.forEach(t),D5o=r(Fwe," \u2014 "),JI=s(Fwe,"A",{href:!0});var sUr=n(JI);N5o=r(sUr,"RemBertForSequenceClassification"),sUr.forEach(t),q5o=r(Fwe," (RemBERT model)"),Fwe.forEach(t),O5o=i(L),y2=s(L,"LI",{});var Cwe=n(y2);Qte=s(Cwe,"STRONG",{});var nUr=n(Qte);G5o=r(nUr,"roberta"),nUr.forEach(t),X5o=r(Cwe," \u2014 "),YI=s(Cwe,"A",{href:!0});var lUr=n(YI);V5o=r(lUr,"RobertaForSequenceClassification"),lUr.forEach(t),z5o=r(Cwe," (RoBERTa model)"),Cwe.forEach(t),W5o=i(L),w2=s(L,"LI",{});var Mwe=n(w2);Hte=s(Mwe,"STRONG",{});var iUr=n(Hte);Q5o=r(iUr,"roformer"),iUr.forEach(t),H5o=r(Mwe," \u2014 "),KI=s(Mwe,"A",{href:!0});var dUr=n(KI);U5o=r(dUr,"RoFormerForSequenceClassification"),dUr.forEach(t),J5o=r(Mwe," (RoFormer model)"),Mwe.forEach(t),Y5o=i(L),A2=s(L,"LI",{});var Ewe=n(A2);Ute=s(Ewe,"STRONG",{});var cUr=n(Ute);K5o=r(cUr,"squeezebert"),cUr.forEach(t),Z5o=r(Ewe," \u2014 "),ZI=s(Ewe,"A",{href:!0});var mUr=n(ZI);eyo=r(mUr,"SqueezeBertForSequenceClassification"),mUr.forEach(t),oyo=r(Ewe," (SqueezeBERT model)"),Ewe.forEach(t),ryo=i(L),L2=s(L,"LI",{});var ywe=n(L2);Jte=s(ywe,"STRONG",{});var fUr=n(Jte);tyo=r(fUr,"tapas"),fUr.forEach(t),ayo=r(ywe," \u2014 "),ej=s(ywe,"A",{href:!0});var gUr=n(ej);syo=r(gUr,"TapasForSequenceClassification"),gUr.forEach(t),nyo=r(ywe," (TAPAS model)"),ywe.forEach(t),lyo=i(L),B2=s(L,"LI",{});var wwe=n(B2);Yte=s(wwe,"STRONG",{});var hUr=n(Yte);iyo=r(hUr,"transfo-xl"),hUr.forEach(t),dyo=r(wwe," \u2014 "),oj=s(wwe,"A",{href:!0});var uUr=n(oj);cyo=r(uUr,"TransfoXLForSequenceClassification"),uUr.forEach(t),myo=r(wwe," (Transformer-XL model)"),wwe.forEach(t),fyo=i(L),x2=s(L,"LI",{});var Awe=n(x2);Kte=s(Awe,"STRONG",{});var pUr=n(Kte);gyo=r(pUr,"xlm"),pUr.forEach(t),hyo=r(Awe," \u2014 "),rj=s(Awe,"A",{href:!0});var _Ur=n(rj);uyo=r(_Ur,"XLMForSequenceClassification"),_Ur.forEach(t),pyo=r(Awe," (XLM model)"),Awe.forEach(t),_yo=i(L),k2=s(L,"LI",{});var Lwe=n(k2);Zte=s(Lwe,"STRONG",{});var bUr=n(Zte);byo=r(bUr,"xlm-roberta"),bUr.forEach(t),vyo=r(Lwe," \u2014 "),tj=s(Lwe,"A",{href:!0});var vUr=n(tj);Tyo=r(vUr,"XLMRobertaForSequenceClassification"),vUr.forEach(t),Fyo=r(Lwe," (XLM-RoBERTa model)"),Lwe.forEach(t),Cyo=i(L),R2=s(L,"LI",{});var Bwe=n(R2);eae=s(Bwe,"STRONG",{});var TUr=n(eae);Myo=r(TUr,"xlm-roberta-xl"),TUr.forEach(t),Eyo=r(Bwe," \u2014 "),aj=s(Bwe,"A",{href:!0});var FUr=n(aj);yyo=r(FUr,"XLMRobertaXLForSequenceClassification"),FUr.forEach(t),wyo=r(Bwe," (XLM-RoBERTa-XL model)"),Bwe.forEach(t),Ayo=i(L),S2=s(L,"LI",{});var xwe=n(S2);oae=s(xwe,"STRONG",{});var CUr=n(oae);Lyo=r(CUr,"xlnet"),CUr.forEach(t),Byo=r(xwe," \u2014 "),sj=s(xwe,"A",{href:!0});var MUr=n(sj);xyo=r(MUr,"XLNetForSequenceClassification"),MUr.forEach(t),kyo=r(xwe," (XLNet model)"),xwe.forEach(t),Ryo=i(L),P2=s(L,"LI",{});var kwe=n(P2);rae=s(kwe,"STRONG",{});var EUr=n(rae);Syo=r(EUr,"yoso"),EUr.forEach(t),Pyo=r(kwe," \u2014 "),nj=s(kwe,"A",{href:!0});var yUr=n(nj);$yo=r(yUr,"YosoForSequenceClassification"),yUr.forEach(t),Iyo=r(kwe," (YOSO model)"),kwe.forEach(t),L.forEach(t),jyo=i(zt),$2=s(zt,"P",{});var Rwe=n($2);Dyo=r(Rwe,"The model is set in evaluation mode by default using "),tae=s(Rwe,"CODE",{});var wUr=n(tae);Nyo=r(wUr,"model.eval()"),wUr.forEach(t),qyo=r(Rwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=s(Rwe,"CODE",{});var AUr=n(aae);Oyo=r(AUr,"model.train()"),AUr.forEach(t),Rwe.forEach(t),Gyo=i(zt),sae=s(zt,"P",{});var LUr=n(sae);Xyo=r(LUr,"Examples:"),LUr.forEach(t),Vyo=i(zt),f(gw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Axe=i(d),ud=s(d,"H2",{class:!0});var IRe=n(ud);I2=s(IRe,"A",{id:!0,class:!0,href:!0});var BUr=n(I2);nae=s(BUr,"SPAN",{});var xUr=n(nae);f(hw.$$.fragment,xUr),xUr.forEach(t),BUr.forEach(t),zyo=i(IRe),lae=s(IRe,"SPAN",{});var kUr=n(lae);Wyo=r(kUr,"AutoModelForMultipleChoice"),kUr.forEach(t),IRe.forEach(t),Lxe=i(d),rr=s(d,"DIV",{class:!0});var al=n(rr);f(uw.$$.fragment,al),Qyo=i(al),pd=s(al,"P",{});var $z=n(pd);Hyo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iae=s($z,"CODE",{});var RUr=n(iae);Uyo=r(RUr,"from_pretrained()"),RUr.forEach(t),Jyo=r($z,"class method or the "),dae=s($z,"CODE",{});var SUr=n(dae);Yyo=r(SUr,"from_config()"),SUr.forEach(t),Kyo=r($z,`class
method.`),$z.forEach(t),Zyo=i(al),pw=s(al,"P",{});var jRe=n(pw);ewo=r(jRe,"This class cannot be instantiated directly using "),cae=s(jRe,"CODE",{});var PUr=n(cae);owo=r(PUr,"__init__()"),PUr.forEach(t),rwo=r(jRe," (throws an error)."),jRe.forEach(t),two=i(al),Jr=s(al,"DIV",{class:!0});var sl=n(Jr);f(_w.$$.fragment,sl),awo=i(sl),mae=s(sl,"P",{});var $Ur=n(mae);swo=r($Ur,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Ur.forEach(t),nwo=i(sl),_d=s(sl,"P",{});var Iz=n(_d);lwo=r(Iz,`Note:
Loading a model from its configuration file does `),fae=s(Iz,"STRONG",{});var IUr=n(fae);iwo=r(IUr,"not"),IUr.forEach(t),dwo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=s(Iz,"CODE",{});var jUr=n(gae);cwo=r(jUr,"from_pretrained()"),jUr.forEach(t),mwo=r(Iz,"to load the model weights."),Iz.forEach(t),fwo=i(sl),hae=s(sl,"P",{});var DUr=n(hae);gwo=r(DUr,"Examples:"),DUr.forEach(t),hwo=i(sl),f(bw.$$.fragment,sl),sl.forEach(t),uwo=i(al),Xe=s(al,"DIV",{class:!0});var Wt=n(Xe);f(vw.$$.fragment,Wt),pwo=i(Wt),uae=s(Wt,"P",{});var NUr=n(uae);_wo=r(NUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NUr.forEach(t),bwo=i(Wt),Ja=s(Wt,"P",{});var r5=n(Ja);vwo=r(r5,"The model class to instantiate is selected based on the "),pae=s(r5,"CODE",{});var qUr=n(pae);Two=r(qUr,"model_type"),qUr.forEach(t),Fwo=r(r5,` property of the config object (either
passed as an argument or loaded from `),_ae=s(r5,"CODE",{});var OUr=n(_ae);Cwo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),Mwo=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bae=s(r5,"CODE",{});var GUr=n(bae);Ewo=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),ywo=r(r5,":"),r5.forEach(t),wwo=i(Wt),O=s(Wt,"UL",{});var G=n(O);j2=s(G,"LI",{});var Swe=n(j2);vae=s(Swe,"STRONG",{});var XUr=n(vae);Awo=r(XUr,"albert"),XUr.forEach(t),Lwo=r(Swe," \u2014 "),lj=s(Swe,"A",{href:!0});var VUr=n(lj);Bwo=r(VUr,"AlbertForMultipleChoice"),VUr.forEach(t),xwo=r(Swe," (ALBERT model)"),Swe.forEach(t),kwo=i(G),D2=s(G,"LI",{});var Pwe=n(D2);Tae=s(Pwe,"STRONG",{});var zUr=n(Tae);Rwo=r(zUr,"bert"),zUr.forEach(t),Swo=r(Pwe," \u2014 "),ij=s(Pwe,"A",{href:!0});var WUr=n(ij);Pwo=r(WUr,"BertForMultipleChoice"),WUr.forEach(t),$wo=r(Pwe," (BERT model)"),Pwe.forEach(t),Iwo=i(G),N2=s(G,"LI",{});var $we=n(N2);Fae=s($we,"STRONG",{});var QUr=n(Fae);jwo=r(QUr,"big_bird"),QUr.forEach(t),Dwo=r($we," \u2014 "),dj=s($we,"A",{href:!0});var HUr=n(dj);Nwo=r(HUr,"BigBirdForMultipleChoice"),HUr.forEach(t),qwo=r($we," (BigBird model)"),$we.forEach(t),Owo=i(G),q2=s(G,"LI",{});var Iwe=n(q2);Cae=s(Iwe,"STRONG",{});var UUr=n(Cae);Gwo=r(UUr,"camembert"),UUr.forEach(t),Xwo=r(Iwe," \u2014 "),cj=s(Iwe,"A",{href:!0});var JUr=n(cj);Vwo=r(JUr,"CamembertForMultipleChoice"),JUr.forEach(t),zwo=r(Iwe," (CamemBERT model)"),Iwe.forEach(t),Wwo=i(G),O2=s(G,"LI",{});var jwe=n(O2);Mae=s(jwe,"STRONG",{});var YUr=n(Mae);Qwo=r(YUr,"canine"),YUr.forEach(t),Hwo=r(jwe," \u2014 "),mj=s(jwe,"A",{href:!0});var KUr=n(mj);Uwo=r(KUr,"CanineForMultipleChoice"),KUr.forEach(t),Jwo=r(jwe," (Canine model)"),jwe.forEach(t),Ywo=i(G),G2=s(G,"LI",{});var Dwe=n(G2);Eae=s(Dwe,"STRONG",{});var ZUr=n(Eae);Kwo=r(ZUr,"convbert"),ZUr.forEach(t),Zwo=r(Dwe," \u2014 "),fj=s(Dwe,"A",{href:!0});var eJr=n(fj);e6o=r(eJr,"ConvBertForMultipleChoice"),eJr.forEach(t),o6o=r(Dwe," (ConvBERT model)"),Dwe.forEach(t),r6o=i(G),X2=s(G,"LI",{});var Nwe=n(X2);yae=s(Nwe,"STRONG",{});var oJr=n(yae);t6o=r(oJr,"data2vec-text"),oJr.forEach(t),a6o=r(Nwe," \u2014 "),gj=s(Nwe,"A",{href:!0});var rJr=n(gj);s6o=r(rJr,"Data2VecTextForMultipleChoice"),rJr.forEach(t),n6o=r(Nwe," (Data2VecText model)"),Nwe.forEach(t),l6o=i(G),V2=s(G,"LI",{});var qwe=n(V2);wae=s(qwe,"STRONG",{});var tJr=n(wae);i6o=r(tJr,"distilbert"),tJr.forEach(t),d6o=r(qwe," \u2014 "),hj=s(qwe,"A",{href:!0});var aJr=n(hj);c6o=r(aJr,"DistilBertForMultipleChoice"),aJr.forEach(t),m6o=r(qwe," (DistilBERT model)"),qwe.forEach(t),f6o=i(G),z2=s(G,"LI",{});var Owe=n(z2);Aae=s(Owe,"STRONG",{});var sJr=n(Aae);g6o=r(sJr,"electra"),sJr.forEach(t),h6o=r(Owe," \u2014 "),uj=s(Owe,"A",{href:!0});var nJr=n(uj);u6o=r(nJr,"ElectraForMultipleChoice"),nJr.forEach(t),p6o=r(Owe," (ELECTRA model)"),Owe.forEach(t),_6o=i(G),W2=s(G,"LI",{});var Gwe=n(W2);Lae=s(Gwe,"STRONG",{});var lJr=n(Lae);b6o=r(lJr,"flaubert"),lJr.forEach(t),v6o=r(Gwe," \u2014 "),pj=s(Gwe,"A",{href:!0});var iJr=n(pj);T6o=r(iJr,"FlaubertForMultipleChoice"),iJr.forEach(t),F6o=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),C6o=i(G),Q2=s(G,"LI",{});var Xwe=n(Q2);Bae=s(Xwe,"STRONG",{});var dJr=n(Bae);M6o=r(dJr,"fnet"),dJr.forEach(t),E6o=r(Xwe," \u2014 "),_j=s(Xwe,"A",{href:!0});var cJr=n(_j);y6o=r(cJr,"FNetForMultipleChoice"),cJr.forEach(t),w6o=r(Xwe," (FNet model)"),Xwe.forEach(t),A6o=i(G),H2=s(G,"LI",{});var Vwe=n(H2);xae=s(Vwe,"STRONG",{});var mJr=n(xae);L6o=r(mJr,"funnel"),mJr.forEach(t),B6o=r(Vwe," \u2014 "),bj=s(Vwe,"A",{href:!0});var fJr=n(bj);x6o=r(fJr,"FunnelForMultipleChoice"),fJr.forEach(t),k6o=r(Vwe," (Funnel Transformer model)"),Vwe.forEach(t),R6o=i(G),U2=s(G,"LI",{});var zwe=n(U2);kae=s(zwe,"STRONG",{});var gJr=n(kae);S6o=r(gJr,"ibert"),gJr.forEach(t),P6o=r(zwe," \u2014 "),vj=s(zwe,"A",{href:!0});var hJr=n(vj);$6o=r(hJr,"IBertForMultipleChoice"),hJr.forEach(t),I6o=r(zwe," (I-BERT model)"),zwe.forEach(t),j6o=i(G),J2=s(G,"LI",{});var Wwe=n(J2);Rae=s(Wwe,"STRONG",{});var uJr=n(Rae);D6o=r(uJr,"longformer"),uJr.forEach(t),N6o=r(Wwe," \u2014 "),Tj=s(Wwe,"A",{href:!0});var pJr=n(Tj);q6o=r(pJr,"LongformerForMultipleChoice"),pJr.forEach(t),O6o=r(Wwe," (Longformer model)"),Wwe.forEach(t),G6o=i(G),Y2=s(G,"LI",{});var Qwe=n(Y2);Sae=s(Qwe,"STRONG",{});var _Jr=n(Sae);X6o=r(_Jr,"megatron-bert"),_Jr.forEach(t),V6o=r(Qwe," \u2014 "),Fj=s(Qwe,"A",{href:!0});var bJr=n(Fj);z6o=r(bJr,"MegatronBertForMultipleChoice"),bJr.forEach(t),W6o=r(Qwe," (MegatronBert model)"),Qwe.forEach(t),Q6o=i(G),K2=s(G,"LI",{});var Hwe=n(K2);Pae=s(Hwe,"STRONG",{});var vJr=n(Pae);H6o=r(vJr,"mobilebert"),vJr.forEach(t),U6o=r(Hwe," \u2014 "),Cj=s(Hwe,"A",{href:!0});var TJr=n(Cj);J6o=r(TJr,"MobileBertForMultipleChoice"),TJr.forEach(t),Y6o=r(Hwe," (MobileBERT model)"),Hwe.forEach(t),K6o=i(G),Z2=s(G,"LI",{});var Uwe=n(Z2);$ae=s(Uwe,"STRONG",{});var FJr=n($ae);Z6o=r(FJr,"mpnet"),FJr.forEach(t),eAo=r(Uwe," \u2014 "),Mj=s(Uwe,"A",{href:!0});var CJr=n(Mj);oAo=r(CJr,"MPNetForMultipleChoice"),CJr.forEach(t),rAo=r(Uwe," (MPNet model)"),Uwe.forEach(t),tAo=i(G),ev=s(G,"LI",{});var Jwe=n(ev);Iae=s(Jwe,"STRONG",{});var MJr=n(Iae);aAo=r(MJr,"nystromformer"),MJr.forEach(t),sAo=r(Jwe," \u2014 "),Ej=s(Jwe,"A",{href:!0});var EJr=n(Ej);nAo=r(EJr,"NystromformerForMultipleChoice"),EJr.forEach(t),lAo=r(Jwe," (Nystromformer model)"),Jwe.forEach(t),iAo=i(G),ov=s(G,"LI",{});var Ywe=n(ov);jae=s(Ywe,"STRONG",{});var yJr=n(jae);dAo=r(yJr,"qdqbert"),yJr.forEach(t),cAo=r(Ywe," \u2014 "),yj=s(Ywe,"A",{href:!0});var wJr=n(yj);mAo=r(wJr,"QDQBertForMultipleChoice"),wJr.forEach(t),fAo=r(Ywe," (QDQBert model)"),Ywe.forEach(t),gAo=i(G),rv=s(G,"LI",{});var Kwe=n(rv);Dae=s(Kwe,"STRONG",{});var AJr=n(Dae);hAo=r(AJr,"rembert"),AJr.forEach(t),uAo=r(Kwe," \u2014 "),wj=s(Kwe,"A",{href:!0});var LJr=n(wj);pAo=r(LJr,"RemBertForMultipleChoice"),LJr.forEach(t),_Ao=r(Kwe," (RemBERT model)"),Kwe.forEach(t),bAo=i(G),tv=s(G,"LI",{});var Zwe=n(tv);Nae=s(Zwe,"STRONG",{});var BJr=n(Nae);vAo=r(BJr,"roberta"),BJr.forEach(t),TAo=r(Zwe," \u2014 "),Aj=s(Zwe,"A",{href:!0});var xJr=n(Aj);FAo=r(xJr,"RobertaForMultipleChoice"),xJr.forEach(t),CAo=r(Zwe," (RoBERTa model)"),Zwe.forEach(t),MAo=i(G),av=s(G,"LI",{});var e6e=n(av);qae=s(e6e,"STRONG",{});var kJr=n(qae);EAo=r(kJr,"roformer"),kJr.forEach(t),yAo=r(e6e," \u2014 "),Lj=s(e6e,"A",{href:!0});var RJr=n(Lj);wAo=r(RJr,"RoFormerForMultipleChoice"),RJr.forEach(t),AAo=r(e6e," (RoFormer model)"),e6e.forEach(t),LAo=i(G),sv=s(G,"LI",{});var o6e=n(sv);Oae=s(o6e,"STRONG",{});var SJr=n(Oae);BAo=r(SJr,"squeezebert"),SJr.forEach(t),xAo=r(o6e," \u2014 "),Bj=s(o6e,"A",{href:!0});var PJr=n(Bj);kAo=r(PJr,"SqueezeBertForMultipleChoice"),PJr.forEach(t),RAo=r(o6e," (SqueezeBERT model)"),o6e.forEach(t),SAo=i(G),nv=s(G,"LI",{});var r6e=n(nv);Gae=s(r6e,"STRONG",{});var $Jr=n(Gae);PAo=r($Jr,"xlm"),$Jr.forEach(t),$Ao=r(r6e," \u2014 "),xj=s(r6e,"A",{href:!0});var IJr=n(xj);IAo=r(IJr,"XLMForMultipleChoice"),IJr.forEach(t),jAo=r(r6e," (XLM model)"),r6e.forEach(t),DAo=i(G),lv=s(G,"LI",{});var t6e=n(lv);Xae=s(t6e,"STRONG",{});var jJr=n(Xae);NAo=r(jJr,"xlm-roberta"),jJr.forEach(t),qAo=r(t6e," \u2014 "),kj=s(t6e,"A",{href:!0});var DJr=n(kj);OAo=r(DJr,"XLMRobertaForMultipleChoice"),DJr.forEach(t),GAo=r(t6e," (XLM-RoBERTa model)"),t6e.forEach(t),XAo=i(G),iv=s(G,"LI",{});var a6e=n(iv);Vae=s(a6e,"STRONG",{});var NJr=n(Vae);VAo=r(NJr,"xlm-roberta-xl"),NJr.forEach(t),zAo=r(a6e," \u2014 "),Rj=s(a6e,"A",{href:!0});var qJr=n(Rj);WAo=r(qJr,"XLMRobertaXLForMultipleChoice"),qJr.forEach(t),QAo=r(a6e," (XLM-RoBERTa-XL model)"),a6e.forEach(t),HAo=i(G),dv=s(G,"LI",{});var s6e=n(dv);zae=s(s6e,"STRONG",{});var OJr=n(zae);UAo=r(OJr,"xlnet"),OJr.forEach(t),JAo=r(s6e," \u2014 "),Sj=s(s6e,"A",{href:!0});var GJr=n(Sj);YAo=r(GJr,"XLNetForMultipleChoice"),GJr.forEach(t),KAo=r(s6e," (XLNet model)"),s6e.forEach(t),ZAo=i(G),cv=s(G,"LI",{});var n6e=n(cv);Wae=s(n6e,"STRONG",{});var XJr=n(Wae);e0o=r(XJr,"yoso"),XJr.forEach(t),o0o=r(n6e," \u2014 "),Pj=s(n6e,"A",{href:!0});var VJr=n(Pj);r0o=r(VJr,"YosoForMultipleChoice"),VJr.forEach(t),t0o=r(n6e," (YOSO model)"),n6e.forEach(t),G.forEach(t),a0o=i(Wt),mv=s(Wt,"P",{});var l6e=n(mv);s0o=r(l6e,"The model is set in evaluation mode by default using "),Qae=s(l6e,"CODE",{});var zJr=n(Qae);n0o=r(zJr,"model.eval()"),zJr.forEach(t),l0o=r(l6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=s(l6e,"CODE",{});var WJr=n(Hae);i0o=r(WJr,"model.train()"),WJr.forEach(t),l6e.forEach(t),d0o=i(Wt),Uae=s(Wt,"P",{});var QJr=n(Uae);c0o=r(QJr,"Examples:"),QJr.forEach(t),m0o=i(Wt),f(Tw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Bxe=i(d),bd=s(d,"H2",{class:!0});var DRe=n(bd);fv=s(DRe,"A",{id:!0,class:!0,href:!0});var HJr=n(fv);Jae=s(HJr,"SPAN",{});var UJr=n(Jae);f(Fw.$$.fragment,UJr),UJr.forEach(t),HJr.forEach(t),f0o=i(DRe),Yae=s(DRe,"SPAN",{});var JJr=n(Yae);g0o=r(JJr,"AutoModelForNextSentencePrediction"),JJr.forEach(t),DRe.forEach(t),xxe=i(d),tr=s(d,"DIV",{class:!0});var nl=n(tr);f(Cw.$$.fragment,nl),h0o=i(nl),vd=s(nl,"P",{});var jz=n(vd);u0o=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kae=s(jz,"CODE",{});var YJr=n(Kae);p0o=r(YJr,"from_pretrained()"),YJr.forEach(t),_0o=r(jz,"class method or the "),Zae=s(jz,"CODE",{});var KJr=n(Zae);b0o=r(KJr,"from_config()"),KJr.forEach(t),v0o=r(jz,`class
method.`),jz.forEach(t),T0o=i(nl),Mw=s(nl,"P",{});var NRe=n(Mw);F0o=r(NRe,"This class cannot be instantiated directly using "),ese=s(NRe,"CODE",{});var ZJr=n(ese);C0o=r(ZJr,"__init__()"),ZJr.forEach(t),M0o=r(NRe," (throws an error)."),NRe.forEach(t),E0o=i(nl),Yr=s(nl,"DIV",{class:!0});var ll=n(Yr);f(Ew.$$.fragment,ll),y0o=i(ll),ose=s(ll,"P",{});var eYr=n(ose);w0o=r(eYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eYr.forEach(t),A0o=i(ll),Td=s(ll,"P",{});var Dz=n(Td);L0o=r(Dz,`Note:
Loading a model from its configuration file does `),rse=s(Dz,"STRONG",{});var oYr=n(rse);B0o=r(oYr,"not"),oYr.forEach(t),x0o=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=s(Dz,"CODE",{});var rYr=n(tse);k0o=r(rYr,"from_pretrained()"),rYr.forEach(t),R0o=r(Dz,"to load the model weights."),Dz.forEach(t),S0o=i(ll),ase=s(ll,"P",{});var tYr=n(ase);P0o=r(tYr,"Examples:"),tYr.forEach(t),$0o=i(ll),f(yw.$$.fragment,ll),ll.forEach(t),I0o=i(nl),Ve=s(nl,"DIV",{class:!0});var Qt=n(Ve);f(ww.$$.fragment,Qt),j0o=i(Qt),sse=s(Qt,"P",{});var aYr=n(sse);D0o=r(aYr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aYr.forEach(t),N0o=i(Qt),Ya=s(Qt,"P",{});var t5=n(Ya);q0o=r(t5,"The model class to instantiate is selected based on the "),nse=s(t5,"CODE",{});var sYr=n(nse);O0o=r(sYr,"model_type"),sYr.forEach(t),G0o=r(t5,` property of the config object (either
passed as an argument or loaded from `),lse=s(t5,"CODE",{});var nYr=n(lse);X0o=r(nYr,"pretrained_model_name_or_path"),nYr.forEach(t),V0o=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ise=s(t5,"CODE",{});var lYr=n(ise);z0o=r(lYr,"pretrained_model_name_or_path"),lYr.forEach(t),W0o=r(t5,":"),t5.forEach(t),Q0o=i(Qt),da=s(Qt,"UL",{});var il=n(da);gv=s(il,"LI",{});var i6e=n(gv);dse=s(i6e,"STRONG",{});var iYr=n(dse);H0o=r(iYr,"bert"),iYr.forEach(t),U0o=r(i6e," \u2014 "),$j=s(i6e,"A",{href:!0});var dYr=n($j);J0o=r(dYr,"BertForNextSentencePrediction"),dYr.forEach(t),Y0o=r(i6e," (BERT model)"),i6e.forEach(t),K0o=i(il),hv=s(il,"LI",{});var d6e=n(hv);cse=s(d6e,"STRONG",{});var cYr=n(cse);Z0o=r(cYr,"fnet"),cYr.forEach(t),eLo=r(d6e," \u2014 "),Ij=s(d6e,"A",{href:!0});var mYr=n(Ij);oLo=r(mYr,"FNetForNextSentencePrediction"),mYr.forEach(t),rLo=r(d6e," (FNet model)"),d6e.forEach(t),tLo=i(il),uv=s(il,"LI",{});var c6e=n(uv);mse=s(c6e,"STRONG",{});var fYr=n(mse);aLo=r(fYr,"megatron-bert"),fYr.forEach(t),sLo=r(c6e," \u2014 "),jj=s(c6e,"A",{href:!0});var gYr=n(jj);nLo=r(gYr,"MegatronBertForNextSentencePrediction"),gYr.forEach(t),lLo=r(c6e," (MegatronBert model)"),c6e.forEach(t),iLo=i(il),pv=s(il,"LI",{});var m6e=n(pv);fse=s(m6e,"STRONG",{});var hYr=n(fse);dLo=r(hYr,"mobilebert"),hYr.forEach(t),cLo=r(m6e," \u2014 "),Dj=s(m6e,"A",{href:!0});var uYr=n(Dj);mLo=r(uYr,"MobileBertForNextSentencePrediction"),uYr.forEach(t),fLo=r(m6e," (MobileBERT model)"),m6e.forEach(t),gLo=i(il),_v=s(il,"LI",{});var f6e=n(_v);gse=s(f6e,"STRONG",{});var pYr=n(gse);hLo=r(pYr,"qdqbert"),pYr.forEach(t),uLo=r(f6e," \u2014 "),Nj=s(f6e,"A",{href:!0});var _Yr=n(Nj);pLo=r(_Yr,"QDQBertForNextSentencePrediction"),_Yr.forEach(t),_Lo=r(f6e," (QDQBert model)"),f6e.forEach(t),il.forEach(t),bLo=i(Qt),bv=s(Qt,"P",{});var g6e=n(bv);vLo=r(g6e,"The model is set in evaluation mode by default using "),hse=s(g6e,"CODE",{});var bYr=n(hse);TLo=r(bYr,"model.eval()"),bYr.forEach(t),FLo=r(g6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=s(g6e,"CODE",{});var vYr=n(use);CLo=r(vYr,"model.train()"),vYr.forEach(t),g6e.forEach(t),MLo=i(Qt),pse=s(Qt,"P",{});var TYr=n(pse);ELo=r(TYr,"Examples:"),TYr.forEach(t),yLo=i(Qt),f(Aw.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),kxe=i(d),Fd=s(d,"H2",{class:!0});var qRe=n(Fd);vv=s(qRe,"A",{id:!0,class:!0,href:!0});var FYr=n(vv);_se=s(FYr,"SPAN",{});var CYr=n(_se);f(Lw.$$.fragment,CYr),CYr.forEach(t),FYr.forEach(t),wLo=i(qRe),bse=s(qRe,"SPAN",{});var MYr=n(bse);ALo=r(MYr,"AutoModelForTokenClassification"),MYr.forEach(t),qRe.forEach(t),Rxe=i(d),ar=s(d,"DIV",{class:!0});var dl=n(ar);f(Bw.$$.fragment,dl),LLo=i(dl),Cd=s(dl,"P",{});var Nz=n(Cd);BLo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vse=s(Nz,"CODE",{});var EYr=n(vse);xLo=r(EYr,"from_pretrained()"),EYr.forEach(t),kLo=r(Nz,"class method or the "),Tse=s(Nz,"CODE",{});var yYr=n(Tse);RLo=r(yYr,"from_config()"),yYr.forEach(t),SLo=r(Nz,`class
method.`),Nz.forEach(t),PLo=i(dl),xw=s(dl,"P",{});var ORe=n(xw);$Lo=r(ORe,"This class cannot be instantiated directly using "),Fse=s(ORe,"CODE",{});var wYr=n(Fse);ILo=r(wYr,"__init__()"),wYr.forEach(t),jLo=r(ORe," (throws an error)."),ORe.forEach(t),DLo=i(dl),Kr=s(dl,"DIV",{class:!0});var cl=n(Kr);f(kw.$$.fragment,cl),NLo=i(cl),Cse=s(cl,"P",{});var AYr=n(Cse);qLo=r(AYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AYr.forEach(t),OLo=i(cl),Md=s(cl,"P",{});var qz=n(Md);GLo=r(qz,`Note:
Loading a model from its configuration file does `),Mse=s(qz,"STRONG",{});var LYr=n(Mse);XLo=r(LYr,"not"),LYr.forEach(t),VLo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ese=s(qz,"CODE",{});var BYr=n(Ese);zLo=r(BYr,"from_pretrained()"),BYr.forEach(t),WLo=r(qz,"to load the model weights."),qz.forEach(t),QLo=i(cl),yse=s(cl,"P",{});var xYr=n(yse);HLo=r(xYr,"Examples:"),xYr.forEach(t),ULo=i(cl),f(Rw.$$.fragment,cl),cl.forEach(t),JLo=i(dl),ze=s(dl,"DIV",{class:!0});var Ht=n(ze);f(Sw.$$.fragment,Ht),YLo=i(Ht),wse=s(Ht,"P",{});var kYr=n(wse);KLo=r(kYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kYr.forEach(t),ZLo=i(Ht),Ka=s(Ht,"P",{});var a5=n(Ka);e8o=r(a5,"The model class to instantiate is selected based on the "),Ase=s(a5,"CODE",{});var RYr=n(Ase);o8o=r(RYr,"model_type"),RYr.forEach(t),r8o=r(a5,` property of the config object (either
passed as an argument or loaded from `),Lse=s(a5,"CODE",{});var SYr=n(Lse);t8o=r(SYr,"pretrained_model_name_or_path"),SYr.forEach(t),a8o=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=s(a5,"CODE",{});var PYr=n(Bse);s8o=r(PYr,"pretrained_model_name_or_path"),PYr.forEach(t),n8o=r(a5,":"),a5.forEach(t),l8o=i(Ht),N=s(Ht,"UL",{});var q=n(N);Tv=s(q,"LI",{});var h6e=n(Tv);xse=s(h6e,"STRONG",{});var $Yr=n(xse);i8o=r($Yr,"albert"),$Yr.forEach(t),d8o=r(h6e," \u2014 "),qj=s(h6e,"A",{href:!0});var IYr=n(qj);c8o=r(IYr,"AlbertForTokenClassification"),IYr.forEach(t),m8o=r(h6e," (ALBERT model)"),h6e.forEach(t),f8o=i(q),Fv=s(q,"LI",{});var u6e=n(Fv);kse=s(u6e,"STRONG",{});var jYr=n(kse);g8o=r(jYr,"bert"),jYr.forEach(t),h8o=r(u6e," \u2014 "),Oj=s(u6e,"A",{href:!0});var DYr=n(Oj);u8o=r(DYr,"BertForTokenClassification"),DYr.forEach(t),p8o=r(u6e," (BERT model)"),u6e.forEach(t),_8o=i(q),Cv=s(q,"LI",{});var p6e=n(Cv);Rse=s(p6e,"STRONG",{});var NYr=n(Rse);b8o=r(NYr,"big_bird"),NYr.forEach(t),v8o=r(p6e," \u2014 "),Gj=s(p6e,"A",{href:!0});var qYr=n(Gj);T8o=r(qYr,"BigBirdForTokenClassification"),qYr.forEach(t),F8o=r(p6e," (BigBird model)"),p6e.forEach(t),C8o=i(q),Mv=s(q,"LI",{});var _6e=n(Mv);Sse=s(_6e,"STRONG",{});var OYr=n(Sse);M8o=r(OYr,"camembert"),OYr.forEach(t),E8o=r(_6e," \u2014 "),Xj=s(_6e,"A",{href:!0});var GYr=n(Xj);y8o=r(GYr,"CamembertForTokenClassification"),GYr.forEach(t),w8o=r(_6e," (CamemBERT model)"),_6e.forEach(t),A8o=i(q),Ev=s(q,"LI",{});var b6e=n(Ev);Pse=s(b6e,"STRONG",{});var XYr=n(Pse);L8o=r(XYr,"canine"),XYr.forEach(t),B8o=r(b6e," \u2014 "),Vj=s(b6e,"A",{href:!0});var VYr=n(Vj);x8o=r(VYr,"CanineForTokenClassification"),VYr.forEach(t),k8o=r(b6e," (Canine model)"),b6e.forEach(t),R8o=i(q),yv=s(q,"LI",{});var v6e=n(yv);$se=s(v6e,"STRONG",{});var zYr=n($se);S8o=r(zYr,"convbert"),zYr.forEach(t),P8o=r(v6e," \u2014 "),zj=s(v6e,"A",{href:!0});var WYr=n(zj);$8o=r(WYr,"ConvBertForTokenClassification"),WYr.forEach(t),I8o=r(v6e," (ConvBERT model)"),v6e.forEach(t),j8o=i(q),wv=s(q,"LI",{});var T6e=n(wv);Ise=s(T6e,"STRONG",{});var QYr=n(Ise);D8o=r(QYr,"data2vec-text"),QYr.forEach(t),N8o=r(T6e," \u2014 "),Wj=s(T6e,"A",{href:!0});var HYr=n(Wj);q8o=r(HYr,"Data2VecTextForTokenClassification"),HYr.forEach(t),O8o=r(T6e," (Data2VecText model)"),T6e.forEach(t),G8o=i(q),Av=s(q,"LI",{});var F6e=n(Av);jse=s(F6e,"STRONG",{});var UYr=n(jse);X8o=r(UYr,"deberta"),UYr.forEach(t),V8o=r(F6e," \u2014 "),Qj=s(F6e,"A",{href:!0});var JYr=n(Qj);z8o=r(JYr,"DebertaForTokenClassification"),JYr.forEach(t),W8o=r(F6e," (DeBERTa model)"),F6e.forEach(t),Q8o=i(q),Lv=s(q,"LI",{});var C6e=n(Lv);Dse=s(C6e,"STRONG",{});var YYr=n(Dse);H8o=r(YYr,"deberta-v2"),YYr.forEach(t),U8o=r(C6e," \u2014 "),Hj=s(C6e,"A",{href:!0});var KYr=n(Hj);J8o=r(KYr,"DebertaV2ForTokenClassification"),KYr.forEach(t),Y8o=r(C6e," (DeBERTa-v2 model)"),C6e.forEach(t),K8o=i(q),Bv=s(q,"LI",{});var M6e=n(Bv);Nse=s(M6e,"STRONG",{});var ZYr=n(Nse);Z8o=r(ZYr,"distilbert"),ZYr.forEach(t),e7o=r(M6e," \u2014 "),Uj=s(M6e,"A",{href:!0});var eKr=n(Uj);o7o=r(eKr,"DistilBertForTokenClassification"),eKr.forEach(t),r7o=r(M6e," (DistilBERT model)"),M6e.forEach(t),t7o=i(q),xv=s(q,"LI",{});var E6e=n(xv);qse=s(E6e,"STRONG",{});var oKr=n(qse);a7o=r(oKr,"electra"),oKr.forEach(t),s7o=r(E6e," \u2014 "),Jj=s(E6e,"A",{href:!0});var rKr=n(Jj);n7o=r(rKr,"ElectraForTokenClassification"),rKr.forEach(t),l7o=r(E6e," (ELECTRA model)"),E6e.forEach(t),i7o=i(q),kv=s(q,"LI",{});var y6e=n(kv);Ose=s(y6e,"STRONG",{});var tKr=n(Ose);d7o=r(tKr,"flaubert"),tKr.forEach(t),c7o=r(y6e," \u2014 "),Yj=s(y6e,"A",{href:!0});var aKr=n(Yj);m7o=r(aKr,"FlaubertForTokenClassification"),aKr.forEach(t),f7o=r(y6e," (FlauBERT model)"),y6e.forEach(t),g7o=i(q),Rv=s(q,"LI",{});var w6e=n(Rv);Gse=s(w6e,"STRONG",{});var sKr=n(Gse);h7o=r(sKr,"fnet"),sKr.forEach(t),u7o=r(w6e," \u2014 "),Kj=s(w6e,"A",{href:!0});var nKr=n(Kj);p7o=r(nKr,"FNetForTokenClassification"),nKr.forEach(t),_7o=r(w6e," (FNet model)"),w6e.forEach(t),b7o=i(q),Sv=s(q,"LI",{});var A6e=n(Sv);Xse=s(A6e,"STRONG",{});var lKr=n(Xse);v7o=r(lKr,"funnel"),lKr.forEach(t),T7o=r(A6e," \u2014 "),Zj=s(A6e,"A",{href:!0});var iKr=n(Zj);F7o=r(iKr,"FunnelForTokenClassification"),iKr.forEach(t),C7o=r(A6e," (Funnel Transformer model)"),A6e.forEach(t),M7o=i(q),Pv=s(q,"LI",{});var L6e=n(Pv);Vse=s(L6e,"STRONG",{});var dKr=n(Vse);E7o=r(dKr,"gpt2"),dKr.forEach(t),y7o=r(L6e," \u2014 "),eD=s(L6e,"A",{href:!0});var cKr=n(eD);w7o=r(cKr,"GPT2ForTokenClassification"),cKr.forEach(t),A7o=r(L6e," (OpenAI GPT-2 model)"),L6e.forEach(t),L7o=i(q),$v=s(q,"LI",{});var B6e=n($v);zse=s(B6e,"STRONG",{});var mKr=n(zse);B7o=r(mKr,"ibert"),mKr.forEach(t),x7o=r(B6e," \u2014 "),oD=s(B6e,"A",{href:!0});var fKr=n(oD);k7o=r(fKr,"IBertForTokenClassification"),fKr.forEach(t),R7o=r(B6e," (I-BERT model)"),B6e.forEach(t),S7o=i(q),Iv=s(q,"LI",{});var x6e=n(Iv);Wse=s(x6e,"STRONG",{});var gKr=n(Wse);P7o=r(gKr,"layoutlm"),gKr.forEach(t),$7o=r(x6e," \u2014 "),rD=s(x6e,"A",{href:!0});var hKr=n(rD);I7o=r(hKr,"LayoutLMForTokenClassification"),hKr.forEach(t),j7o=r(x6e," (LayoutLM model)"),x6e.forEach(t),D7o=i(q),jv=s(q,"LI",{});var k6e=n(jv);Qse=s(k6e,"STRONG",{});var uKr=n(Qse);N7o=r(uKr,"layoutlmv2"),uKr.forEach(t),q7o=r(k6e," \u2014 "),tD=s(k6e,"A",{href:!0});var pKr=n(tD);O7o=r(pKr,"LayoutLMv2ForTokenClassification"),pKr.forEach(t),G7o=r(k6e," (LayoutLMv2 model)"),k6e.forEach(t),X7o=i(q),Dv=s(q,"LI",{});var R6e=n(Dv);Hse=s(R6e,"STRONG",{});var _Kr=n(Hse);V7o=r(_Kr,"longformer"),_Kr.forEach(t),z7o=r(R6e," \u2014 "),aD=s(R6e,"A",{href:!0});var bKr=n(aD);W7o=r(bKr,"LongformerForTokenClassification"),bKr.forEach(t),Q7o=r(R6e," (Longformer model)"),R6e.forEach(t),H7o=i(q),Nv=s(q,"LI",{});var S6e=n(Nv);Use=s(S6e,"STRONG",{});var vKr=n(Use);U7o=r(vKr,"megatron-bert"),vKr.forEach(t),J7o=r(S6e," \u2014 "),sD=s(S6e,"A",{href:!0});var TKr=n(sD);Y7o=r(TKr,"MegatronBertForTokenClassification"),TKr.forEach(t),K7o=r(S6e," (MegatronBert model)"),S6e.forEach(t),Z7o=i(q),qv=s(q,"LI",{});var P6e=n(qv);Jse=s(P6e,"STRONG",{});var FKr=n(Jse);e9o=r(FKr,"mobilebert"),FKr.forEach(t),o9o=r(P6e," \u2014 "),nD=s(P6e,"A",{href:!0});var CKr=n(nD);r9o=r(CKr,"MobileBertForTokenClassification"),CKr.forEach(t),t9o=r(P6e," (MobileBERT model)"),P6e.forEach(t),a9o=i(q),Ov=s(q,"LI",{});var $6e=n(Ov);Yse=s($6e,"STRONG",{});var MKr=n(Yse);s9o=r(MKr,"mpnet"),MKr.forEach(t),n9o=r($6e," \u2014 "),lD=s($6e,"A",{href:!0});var EKr=n(lD);l9o=r(EKr,"MPNetForTokenClassification"),EKr.forEach(t),i9o=r($6e," (MPNet model)"),$6e.forEach(t),d9o=i(q),Gv=s(q,"LI",{});var I6e=n(Gv);Kse=s(I6e,"STRONG",{});var yKr=n(Kse);c9o=r(yKr,"nystromformer"),yKr.forEach(t),m9o=r(I6e," \u2014 "),iD=s(I6e,"A",{href:!0});var wKr=n(iD);f9o=r(wKr,"NystromformerForTokenClassification"),wKr.forEach(t),g9o=r(I6e," (Nystromformer model)"),I6e.forEach(t),h9o=i(q),Xv=s(q,"LI",{});var j6e=n(Xv);Zse=s(j6e,"STRONG",{});var AKr=n(Zse);u9o=r(AKr,"qdqbert"),AKr.forEach(t),p9o=r(j6e," \u2014 "),dD=s(j6e,"A",{href:!0});var LKr=n(dD);_9o=r(LKr,"QDQBertForTokenClassification"),LKr.forEach(t),b9o=r(j6e," (QDQBert model)"),j6e.forEach(t),v9o=i(q),Vv=s(q,"LI",{});var D6e=n(Vv);ene=s(D6e,"STRONG",{});var BKr=n(ene);T9o=r(BKr,"rembert"),BKr.forEach(t),F9o=r(D6e," \u2014 "),cD=s(D6e,"A",{href:!0});var xKr=n(cD);C9o=r(xKr,"RemBertForTokenClassification"),xKr.forEach(t),M9o=r(D6e," (RemBERT model)"),D6e.forEach(t),E9o=i(q),zv=s(q,"LI",{});var N6e=n(zv);one=s(N6e,"STRONG",{});var kKr=n(one);y9o=r(kKr,"roberta"),kKr.forEach(t),w9o=r(N6e," \u2014 "),mD=s(N6e,"A",{href:!0});var RKr=n(mD);A9o=r(RKr,"RobertaForTokenClassification"),RKr.forEach(t),L9o=r(N6e," (RoBERTa model)"),N6e.forEach(t),B9o=i(q),Wv=s(q,"LI",{});var q6e=n(Wv);rne=s(q6e,"STRONG",{});var SKr=n(rne);x9o=r(SKr,"roformer"),SKr.forEach(t),k9o=r(q6e," \u2014 "),fD=s(q6e,"A",{href:!0});var PKr=n(fD);R9o=r(PKr,"RoFormerForTokenClassification"),PKr.forEach(t),S9o=r(q6e," (RoFormer model)"),q6e.forEach(t),P9o=i(q),Qv=s(q,"LI",{});var O6e=n(Qv);tne=s(O6e,"STRONG",{});var $Kr=n(tne);$9o=r($Kr,"squeezebert"),$Kr.forEach(t),I9o=r(O6e," \u2014 "),gD=s(O6e,"A",{href:!0});var IKr=n(gD);j9o=r(IKr,"SqueezeBertForTokenClassification"),IKr.forEach(t),D9o=r(O6e," (SqueezeBERT model)"),O6e.forEach(t),N9o=i(q),Hv=s(q,"LI",{});var G6e=n(Hv);ane=s(G6e,"STRONG",{});var jKr=n(ane);q9o=r(jKr,"xlm"),jKr.forEach(t),O9o=r(G6e," \u2014 "),hD=s(G6e,"A",{href:!0});var DKr=n(hD);G9o=r(DKr,"XLMForTokenClassification"),DKr.forEach(t),X9o=r(G6e," (XLM model)"),G6e.forEach(t),V9o=i(q),Uv=s(q,"LI",{});var X6e=n(Uv);sne=s(X6e,"STRONG",{});var NKr=n(sne);z9o=r(NKr,"xlm-roberta"),NKr.forEach(t),W9o=r(X6e," \u2014 "),uD=s(X6e,"A",{href:!0});var qKr=n(uD);Q9o=r(qKr,"XLMRobertaForTokenClassification"),qKr.forEach(t),H9o=r(X6e," (XLM-RoBERTa model)"),X6e.forEach(t),U9o=i(q),Jv=s(q,"LI",{});var V6e=n(Jv);nne=s(V6e,"STRONG",{});var OKr=n(nne);J9o=r(OKr,"xlm-roberta-xl"),OKr.forEach(t),Y9o=r(V6e," \u2014 "),pD=s(V6e,"A",{href:!0});var GKr=n(pD);K9o=r(GKr,"XLMRobertaXLForTokenClassification"),GKr.forEach(t),Z9o=r(V6e," (XLM-RoBERTa-XL model)"),V6e.forEach(t),eBo=i(q),Yv=s(q,"LI",{});var z6e=n(Yv);lne=s(z6e,"STRONG",{});var XKr=n(lne);oBo=r(XKr,"xlnet"),XKr.forEach(t),rBo=r(z6e," \u2014 "),_D=s(z6e,"A",{href:!0});var VKr=n(_D);tBo=r(VKr,"XLNetForTokenClassification"),VKr.forEach(t),aBo=r(z6e," (XLNet model)"),z6e.forEach(t),sBo=i(q),Kv=s(q,"LI",{});var W6e=n(Kv);ine=s(W6e,"STRONG",{});var zKr=n(ine);nBo=r(zKr,"yoso"),zKr.forEach(t),lBo=r(W6e," \u2014 "),bD=s(W6e,"A",{href:!0});var WKr=n(bD);iBo=r(WKr,"YosoForTokenClassification"),WKr.forEach(t),dBo=r(W6e," (YOSO model)"),W6e.forEach(t),q.forEach(t),cBo=i(Ht),Zv=s(Ht,"P",{});var Q6e=n(Zv);mBo=r(Q6e,"The model is set in evaluation mode by default using "),dne=s(Q6e,"CODE",{});var QKr=n(dne);fBo=r(QKr,"model.eval()"),QKr.forEach(t),gBo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cne=s(Q6e,"CODE",{});var HKr=n(cne);hBo=r(HKr,"model.train()"),HKr.forEach(t),Q6e.forEach(t),uBo=i(Ht),mne=s(Ht,"P",{});var UKr=n(mne);pBo=r(UKr,"Examples:"),UKr.forEach(t),_Bo=i(Ht),f(Pw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Sxe=i(d),Ed=s(d,"H2",{class:!0});var GRe=n(Ed);eT=s(GRe,"A",{id:!0,class:!0,href:!0});var JKr=n(eT);fne=s(JKr,"SPAN",{});var YKr=n(fne);f($w.$$.fragment,YKr),YKr.forEach(t),JKr.forEach(t),bBo=i(GRe),gne=s(GRe,"SPAN",{});var KKr=n(gne);vBo=r(KKr,"AutoModelForQuestionAnswering"),KKr.forEach(t),GRe.forEach(t),Pxe=i(d),sr=s(d,"DIV",{class:!0});var ml=n(sr);f(Iw.$$.fragment,ml),TBo=i(ml),yd=s(ml,"P",{});var Oz=n(yd);FBo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hne=s(Oz,"CODE",{});var ZKr=n(hne);CBo=r(ZKr,"from_pretrained()"),ZKr.forEach(t),MBo=r(Oz,"class method or the "),une=s(Oz,"CODE",{});var eZr=n(une);EBo=r(eZr,"from_config()"),eZr.forEach(t),yBo=r(Oz,`class
method.`),Oz.forEach(t),wBo=i(ml),jw=s(ml,"P",{});var XRe=n(jw);ABo=r(XRe,"This class cannot be instantiated directly using "),pne=s(XRe,"CODE",{});var oZr=n(pne);LBo=r(oZr,"__init__()"),oZr.forEach(t),BBo=r(XRe," (throws an error)."),XRe.forEach(t),xBo=i(ml),Zr=s(ml,"DIV",{class:!0});var fl=n(Zr);f(Dw.$$.fragment,fl),kBo=i(fl),_ne=s(fl,"P",{});var rZr=n(_ne);RBo=r(rZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rZr.forEach(t),SBo=i(fl),wd=s(fl,"P",{});var Gz=n(wd);PBo=r(Gz,`Note:
Loading a model from its configuration file does `),bne=s(Gz,"STRONG",{});var tZr=n(bne);$Bo=r(tZr,"not"),tZr.forEach(t),IBo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=s(Gz,"CODE",{});var aZr=n(vne);jBo=r(aZr,"from_pretrained()"),aZr.forEach(t),DBo=r(Gz,"to load the model weights."),Gz.forEach(t),NBo=i(fl),Tne=s(fl,"P",{});var sZr=n(Tne);qBo=r(sZr,"Examples:"),sZr.forEach(t),OBo=i(fl),f(Nw.$$.fragment,fl),fl.forEach(t),GBo=i(ml),We=s(ml,"DIV",{class:!0});var Ut=n(We);f(qw.$$.fragment,Ut),XBo=i(Ut),Fne=s(Ut,"P",{});var nZr=n(Fne);VBo=r(nZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nZr.forEach(t),zBo=i(Ut),Za=s(Ut,"P",{});var s5=n(Za);WBo=r(s5,"The model class to instantiate is selected based on the "),Cne=s(s5,"CODE",{});var lZr=n(Cne);QBo=r(lZr,"model_type"),lZr.forEach(t),HBo=r(s5,` property of the config object (either
passed as an argument or loaded from `),Mne=s(s5,"CODE",{});var iZr=n(Mne);UBo=r(iZr,"pretrained_model_name_or_path"),iZr.forEach(t),JBo=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=s(s5,"CODE",{});var dZr=n(Ene);YBo=r(dZr,"pretrained_model_name_or_path"),dZr.forEach(t),KBo=r(s5,":"),s5.forEach(t),ZBo=i(Ut),R=s(Ut,"UL",{});var P=n(R);oT=s(P,"LI",{});var H6e=n(oT);yne=s(H6e,"STRONG",{});var cZr=n(yne);exo=r(cZr,"albert"),cZr.forEach(t),oxo=r(H6e," \u2014 "),vD=s(H6e,"A",{href:!0});var mZr=n(vD);rxo=r(mZr,"AlbertForQuestionAnswering"),mZr.forEach(t),txo=r(H6e," (ALBERT model)"),H6e.forEach(t),axo=i(P),rT=s(P,"LI",{});var U6e=n(rT);wne=s(U6e,"STRONG",{});var fZr=n(wne);sxo=r(fZr,"bart"),fZr.forEach(t),nxo=r(U6e," \u2014 "),TD=s(U6e,"A",{href:!0});var gZr=n(TD);lxo=r(gZr,"BartForQuestionAnswering"),gZr.forEach(t),ixo=r(U6e," (BART model)"),U6e.forEach(t),dxo=i(P),tT=s(P,"LI",{});var J6e=n(tT);Ane=s(J6e,"STRONG",{});var hZr=n(Ane);cxo=r(hZr,"bert"),hZr.forEach(t),mxo=r(J6e," \u2014 "),FD=s(J6e,"A",{href:!0});var uZr=n(FD);fxo=r(uZr,"BertForQuestionAnswering"),uZr.forEach(t),gxo=r(J6e," (BERT model)"),J6e.forEach(t),hxo=i(P),aT=s(P,"LI",{});var Y6e=n(aT);Lne=s(Y6e,"STRONG",{});var pZr=n(Lne);uxo=r(pZr,"big_bird"),pZr.forEach(t),pxo=r(Y6e," \u2014 "),CD=s(Y6e,"A",{href:!0});var _Zr=n(CD);_xo=r(_Zr,"BigBirdForQuestionAnswering"),_Zr.forEach(t),bxo=r(Y6e," (BigBird model)"),Y6e.forEach(t),vxo=i(P),sT=s(P,"LI",{});var K6e=n(sT);Bne=s(K6e,"STRONG",{});var bZr=n(Bne);Txo=r(bZr,"bigbird_pegasus"),bZr.forEach(t),Fxo=r(K6e," \u2014 "),MD=s(K6e,"A",{href:!0});var vZr=n(MD);Cxo=r(vZr,"BigBirdPegasusForQuestionAnswering"),vZr.forEach(t),Mxo=r(K6e," (BigBirdPegasus model)"),K6e.forEach(t),Exo=i(P),nT=s(P,"LI",{});var Z6e=n(nT);xne=s(Z6e,"STRONG",{});var TZr=n(xne);yxo=r(TZr,"camembert"),TZr.forEach(t),wxo=r(Z6e," \u2014 "),ED=s(Z6e,"A",{href:!0});var FZr=n(ED);Axo=r(FZr,"CamembertForQuestionAnswering"),FZr.forEach(t),Lxo=r(Z6e," (CamemBERT model)"),Z6e.forEach(t),Bxo=i(P),lT=s(P,"LI",{});var eAe=n(lT);kne=s(eAe,"STRONG",{});var CZr=n(kne);xxo=r(CZr,"canine"),CZr.forEach(t),kxo=r(eAe," \u2014 "),yD=s(eAe,"A",{href:!0});var MZr=n(yD);Rxo=r(MZr,"CanineForQuestionAnswering"),MZr.forEach(t),Sxo=r(eAe," (Canine model)"),eAe.forEach(t),Pxo=i(P),iT=s(P,"LI",{});var oAe=n(iT);Rne=s(oAe,"STRONG",{});var EZr=n(Rne);$xo=r(EZr,"convbert"),EZr.forEach(t),Ixo=r(oAe," \u2014 "),wD=s(oAe,"A",{href:!0});var yZr=n(wD);jxo=r(yZr,"ConvBertForQuestionAnswering"),yZr.forEach(t),Dxo=r(oAe," (ConvBERT model)"),oAe.forEach(t),Nxo=i(P),dT=s(P,"LI",{});var rAe=n(dT);Sne=s(rAe,"STRONG",{});var wZr=n(Sne);qxo=r(wZr,"data2vec-text"),wZr.forEach(t),Oxo=r(rAe," \u2014 "),AD=s(rAe,"A",{href:!0});var AZr=n(AD);Gxo=r(AZr,"Data2VecTextForQuestionAnswering"),AZr.forEach(t),Xxo=r(rAe," (Data2VecText model)"),rAe.forEach(t),Vxo=i(P),cT=s(P,"LI",{});var tAe=n(cT);Pne=s(tAe,"STRONG",{});var LZr=n(Pne);zxo=r(LZr,"deberta"),LZr.forEach(t),Wxo=r(tAe," \u2014 "),LD=s(tAe,"A",{href:!0});var BZr=n(LD);Qxo=r(BZr,"DebertaForQuestionAnswering"),BZr.forEach(t),Hxo=r(tAe," (DeBERTa model)"),tAe.forEach(t),Uxo=i(P),mT=s(P,"LI",{});var aAe=n(mT);$ne=s(aAe,"STRONG",{});var xZr=n($ne);Jxo=r(xZr,"deberta-v2"),xZr.forEach(t),Yxo=r(aAe," \u2014 "),BD=s(aAe,"A",{href:!0});var kZr=n(BD);Kxo=r(kZr,"DebertaV2ForQuestionAnswering"),kZr.forEach(t),Zxo=r(aAe," (DeBERTa-v2 model)"),aAe.forEach(t),eko=i(P),fT=s(P,"LI",{});var sAe=n(fT);Ine=s(sAe,"STRONG",{});var RZr=n(Ine);oko=r(RZr,"distilbert"),RZr.forEach(t),rko=r(sAe," \u2014 "),xD=s(sAe,"A",{href:!0});var SZr=n(xD);tko=r(SZr,"DistilBertForQuestionAnswering"),SZr.forEach(t),ako=r(sAe," (DistilBERT model)"),sAe.forEach(t),sko=i(P),gT=s(P,"LI",{});var nAe=n(gT);jne=s(nAe,"STRONG",{});var PZr=n(jne);nko=r(PZr,"electra"),PZr.forEach(t),lko=r(nAe," \u2014 "),kD=s(nAe,"A",{href:!0});var $Zr=n(kD);iko=r($Zr,"ElectraForQuestionAnswering"),$Zr.forEach(t),dko=r(nAe," (ELECTRA model)"),nAe.forEach(t),cko=i(P),hT=s(P,"LI",{});var lAe=n(hT);Dne=s(lAe,"STRONG",{});var IZr=n(Dne);mko=r(IZr,"flaubert"),IZr.forEach(t),fko=r(lAe," \u2014 "),RD=s(lAe,"A",{href:!0});var jZr=n(RD);gko=r(jZr,"FlaubertForQuestionAnsweringSimple"),jZr.forEach(t),hko=r(lAe," (FlauBERT model)"),lAe.forEach(t),uko=i(P),uT=s(P,"LI",{});var iAe=n(uT);Nne=s(iAe,"STRONG",{});var DZr=n(Nne);pko=r(DZr,"fnet"),DZr.forEach(t),_ko=r(iAe," \u2014 "),SD=s(iAe,"A",{href:!0});var NZr=n(SD);bko=r(NZr,"FNetForQuestionAnswering"),NZr.forEach(t),vko=r(iAe," (FNet model)"),iAe.forEach(t),Tko=i(P),pT=s(P,"LI",{});var dAe=n(pT);qne=s(dAe,"STRONG",{});var qZr=n(qne);Fko=r(qZr,"funnel"),qZr.forEach(t),Cko=r(dAe," \u2014 "),PD=s(dAe,"A",{href:!0});var OZr=n(PD);Mko=r(OZr,"FunnelForQuestionAnswering"),OZr.forEach(t),Eko=r(dAe," (Funnel Transformer model)"),dAe.forEach(t),yko=i(P),_T=s(P,"LI",{});var cAe=n(_T);One=s(cAe,"STRONG",{});var GZr=n(One);wko=r(GZr,"gptj"),GZr.forEach(t),Ako=r(cAe," \u2014 "),$D=s(cAe,"A",{href:!0});var XZr=n($D);Lko=r(XZr,"GPTJForQuestionAnswering"),XZr.forEach(t),Bko=r(cAe," (GPT-J model)"),cAe.forEach(t),xko=i(P),bT=s(P,"LI",{});var mAe=n(bT);Gne=s(mAe,"STRONG",{});var VZr=n(Gne);kko=r(VZr,"ibert"),VZr.forEach(t),Rko=r(mAe," \u2014 "),ID=s(mAe,"A",{href:!0});var zZr=n(ID);Sko=r(zZr,"IBertForQuestionAnswering"),zZr.forEach(t),Pko=r(mAe," (I-BERT model)"),mAe.forEach(t),$ko=i(P),vT=s(P,"LI",{});var fAe=n(vT);Xne=s(fAe,"STRONG",{});var WZr=n(Xne);Iko=r(WZr,"layoutlmv2"),WZr.forEach(t),jko=r(fAe," \u2014 "),jD=s(fAe,"A",{href:!0});var QZr=n(jD);Dko=r(QZr,"LayoutLMv2ForQuestionAnswering"),QZr.forEach(t),Nko=r(fAe," (LayoutLMv2 model)"),fAe.forEach(t),qko=i(P),TT=s(P,"LI",{});var gAe=n(TT);Vne=s(gAe,"STRONG",{});var HZr=n(Vne);Oko=r(HZr,"led"),HZr.forEach(t),Gko=r(gAe," \u2014 "),DD=s(gAe,"A",{href:!0});var UZr=n(DD);Xko=r(UZr,"LEDForQuestionAnswering"),UZr.forEach(t),Vko=r(gAe," (LED model)"),gAe.forEach(t),zko=i(P),FT=s(P,"LI",{});var hAe=n(FT);zne=s(hAe,"STRONG",{});var JZr=n(zne);Wko=r(JZr,"longformer"),JZr.forEach(t),Qko=r(hAe," \u2014 "),ND=s(hAe,"A",{href:!0});var YZr=n(ND);Hko=r(YZr,"LongformerForQuestionAnswering"),YZr.forEach(t),Uko=r(hAe," (Longformer model)"),hAe.forEach(t),Jko=i(P),CT=s(P,"LI",{});var uAe=n(CT);Wne=s(uAe,"STRONG",{});var KZr=n(Wne);Yko=r(KZr,"lxmert"),KZr.forEach(t),Kko=r(uAe," \u2014 "),qD=s(uAe,"A",{href:!0});var ZZr=n(qD);Zko=r(ZZr,"LxmertForQuestionAnswering"),ZZr.forEach(t),eRo=r(uAe," (LXMERT model)"),uAe.forEach(t),oRo=i(P),MT=s(P,"LI",{});var pAe=n(MT);Qne=s(pAe,"STRONG",{});var eet=n(Qne);rRo=r(eet,"mbart"),eet.forEach(t),tRo=r(pAe," \u2014 "),OD=s(pAe,"A",{href:!0});var oet=n(OD);aRo=r(oet,"MBartForQuestionAnswering"),oet.forEach(t),sRo=r(pAe," (mBART model)"),pAe.forEach(t),nRo=i(P),ET=s(P,"LI",{});var _Ae=n(ET);Hne=s(_Ae,"STRONG",{});var ret=n(Hne);lRo=r(ret,"megatron-bert"),ret.forEach(t),iRo=r(_Ae," \u2014 "),GD=s(_Ae,"A",{href:!0});var tet=n(GD);dRo=r(tet,"MegatronBertForQuestionAnswering"),tet.forEach(t),cRo=r(_Ae," (MegatronBert model)"),_Ae.forEach(t),mRo=i(P),yT=s(P,"LI",{});var bAe=n(yT);Une=s(bAe,"STRONG",{});var aet=n(Une);fRo=r(aet,"mobilebert"),aet.forEach(t),gRo=r(bAe," \u2014 "),XD=s(bAe,"A",{href:!0});var set=n(XD);hRo=r(set,"MobileBertForQuestionAnswering"),set.forEach(t),uRo=r(bAe," (MobileBERT model)"),bAe.forEach(t),pRo=i(P),wT=s(P,"LI",{});var vAe=n(wT);Jne=s(vAe,"STRONG",{});var net=n(Jne);_Ro=r(net,"mpnet"),net.forEach(t),bRo=r(vAe," \u2014 "),VD=s(vAe,"A",{href:!0});var iet=n(VD);vRo=r(iet,"MPNetForQuestionAnswering"),iet.forEach(t),TRo=r(vAe," (MPNet model)"),vAe.forEach(t),FRo=i(P),AT=s(P,"LI",{});var TAe=n(AT);Yne=s(TAe,"STRONG",{});var det=n(Yne);CRo=r(det,"nystromformer"),det.forEach(t),MRo=r(TAe," \u2014 "),zD=s(TAe,"A",{href:!0});var cet=n(zD);ERo=r(cet,"NystromformerForQuestionAnswering"),cet.forEach(t),yRo=r(TAe," (Nystromformer model)"),TAe.forEach(t),wRo=i(P),LT=s(P,"LI",{});var FAe=n(LT);Kne=s(FAe,"STRONG",{});var met=n(Kne);ARo=r(met,"qdqbert"),met.forEach(t),LRo=r(FAe," \u2014 "),WD=s(FAe,"A",{href:!0});var fet=n(WD);BRo=r(fet,"QDQBertForQuestionAnswering"),fet.forEach(t),xRo=r(FAe," (QDQBert model)"),FAe.forEach(t),kRo=i(P),BT=s(P,"LI",{});var CAe=n(BT);Zne=s(CAe,"STRONG",{});var get=n(Zne);RRo=r(get,"reformer"),get.forEach(t),SRo=r(CAe," \u2014 "),QD=s(CAe,"A",{href:!0});var het=n(QD);PRo=r(het,"ReformerForQuestionAnswering"),het.forEach(t),$Ro=r(CAe," (Reformer model)"),CAe.forEach(t),IRo=i(P),xT=s(P,"LI",{});var MAe=n(xT);ele=s(MAe,"STRONG",{});var uet=n(ele);jRo=r(uet,"rembert"),uet.forEach(t),DRo=r(MAe," \u2014 "),HD=s(MAe,"A",{href:!0});var pet=n(HD);NRo=r(pet,"RemBertForQuestionAnswering"),pet.forEach(t),qRo=r(MAe," (RemBERT model)"),MAe.forEach(t),ORo=i(P),kT=s(P,"LI",{});var EAe=n(kT);ole=s(EAe,"STRONG",{});var _et=n(ole);GRo=r(_et,"roberta"),_et.forEach(t),XRo=r(EAe," \u2014 "),UD=s(EAe,"A",{href:!0});var bet=n(UD);VRo=r(bet,"RobertaForQuestionAnswering"),bet.forEach(t),zRo=r(EAe," (RoBERTa model)"),EAe.forEach(t),WRo=i(P),RT=s(P,"LI",{});var yAe=n(RT);rle=s(yAe,"STRONG",{});var vet=n(rle);QRo=r(vet,"roformer"),vet.forEach(t),HRo=r(yAe," \u2014 "),JD=s(yAe,"A",{href:!0});var Tet=n(JD);URo=r(Tet,"RoFormerForQuestionAnswering"),Tet.forEach(t),JRo=r(yAe," (RoFormer model)"),yAe.forEach(t),YRo=i(P),ST=s(P,"LI",{});var wAe=n(ST);tle=s(wAe,"STRONG",{});var Fet=n(tle);KRo=r(Fet,"splinter"),Fet.forEach(t),ZRo=r(wAe," \u2014 "),YD=s(wAe,"A",{href:!0});var Cet=n(YD);eSo=r(Cet,"SplinterForQuestionAnswering"),Cet.forEach(t),oSo=r(wAe," (Splinter model)"),wAe.forEach(t),rSo=i(P),PT=s(P,"LI",{});var AAe=n(PT);ale=s(AAe,"STRONG",{});var Met=n(ale);tSo=r(Met,"squeezebert"),Met.forEach(t),aSo=r(AAe," \u2014 "),KD=s(AAe,"A",{href:!0});var Eet=n(KD);sSo=r(Eet,"SqueezeBertForQuestionAnswering"),Eet.forEach(t),nSo=r(AAe," (SqueezeBERT model)"),AAe.forEach(t),lSo=i(P),$T=s(P,"LI",{});var LAe=n($T);sle=s(LAe,"STRONG",{});var yet=n(sle);iSo=r(yet,"xlm"),yet.forEach(t),dSo=r(LAe," \u2014 "),ZD=s(LAe,"A",{href:!0});var wet=n(ZD);cSo=r(wet,"XLMForQuestionAnsweringSimple"),wet.forEach(t),mSo=r(LAe," (XLM model)"),LAe.forEach(t),fSo=i(P),IT=s(P,"LI",{});var BAe=n(IT);nle=s(BAe,"STRONG",{});var Aet=n(nle);gSo=r(Aet,"xlm-roberta"),Aet.forEach(t),hSo=r(BAe," \u2014 "),eN=s(BAe,"A",{href:!0});var Let=n(eN);uSo=r(Let,"XLMRobertaForQuestionAnswering"),Let.forEach(t),pSo=r(BAe," (XLM-RoBERTa model)"),BAe.forEach(t),_So=i(P),jT=s(P,"LI",{});var xAe=n(jT);lle=s(xAe,"STRONG",{});var Bet=n(lle);bSo=r(Bet,"xlm-roberta-xl"),Bet.forEach(t),vSo=r(xAe," \u2014 "),oN=s(xAe,"A",{href:!0});var xet=n(oN);TSo=r(xet,"XLMRobertaXLForQuestionAnswering"),xet.forEach(t),FSo=r(xAe," (XLM-RoBERTa-XL model)"),xAe.forEach(t),CSo=i(P),DT=s(P,"LI",{});var kAe=n(DT);ile=s(kAe,"STRONG",{});var ket=n(ile);MSo=r(ket,"xlnet"),ket.forEach(t),ESo=r(kAe," \u2014 "),rN=s(kAe,"A",{href:!0});var Ret=n(rN);ySo=r(Ret,"XLNetForQuestionAnsweringSimple"),Ret.forEach(t),wSo=r(kAe," (XLNet model)"),kAe.forEach(t),ASo=i(P),NT=s(P,"LI",{});var RAe=n(NT);dle=s(RAe,"STRONG",{});var Set=n(dle);LSo=r(Set,"yoso"),Set.forEach(t),BSo=r(RAe," \u2014 "),tN=s(RAe,"A",{href:!0});var Pet=n(tN);xSo=r(Pet,"YosoForQuestionAnswering"),Pet.forEach(t),kSo=r(RAe," (YOSO model)"),RAe.forEach(t),P.forEach(t),RSo=i(Ut),qT=s(Ut,"P",{});var SAe=n(qT);SSo=r(SAe,"The model is set in evaluation mode by default using "),cle=s(SAe,"CODE",{});var $et=n(cle);PSo=r($et,"model.eval()"),$et.forEach(t),$So=r(SAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=s(SAe,"CODE",{});var Iet=n(mle);ISo=r(Iet,"model.train()"),Iet.forEach(t),SAe.forEach(t),jSo=i(Ut),fle=s(Ut,"P",{});var jet=n(fle);DSo=r(jet,"Examples:"),jet.forEach(t),NSo=i(Ut),f(Ow.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),$xe=i(d),Ad=s(d,"H2",{class:!0});var VRe=n(Ad);OT=s(VRe,"A",{id:!0,class:!0,href:!0});var Det=n(OT);gle=s(Det,"SPAN",{});var Net=n(gle);f(Gw.$$.fragment,Net),Net.forEach(t),Det.forEach(t),qSo=i(VRe),hle=s(VRe,"SPAN",{});var qet=n(hle);OSo=r(qet,"AutoModelForTableQuestionAnswering"),qet.forEach(t),VRe.forEach(t),Ixe=i(d),nr=s(d,"DIV",{class:!0});var gl=n(nr);f(Xw.$$.fragment,gl),GSo=i(gl),Ld=s(gl,"P",{});var Xz=n(Ld);XSo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ule=s(Xz,"CODE",{});var Oet=n(ule);VSo=r(Oet,"from_pretrained()"),Oet.forEach(t),zSo=r(Xz,"class method or the "),ple=s(Xz,"CODE",{});var Get=n(ple);WSo=r(Get,"from_config()"),Get.forEach(t),QSo=r(Xz,`class
method.`),Xz.forEach(t),HSo=i(gl),Vw=s(gl,"P",{});var zRe=n(Vw);USo=r(zRe,"This class cannot be instantiated directly using "),_le=s(zRe,"CODE",{});var Xet=n(_le);JSo=r(Xet,"__init__()"),Xet.forEach(t),YSo=r(zRe," (throws an error)."),zRe.forEach(t),KSo=i(gl),et=s(gl,"DIV",{class:!0});var hl=n(et);f(zw.$$.fragment,hl),ZSo=i(hl),ble=s(hl,"P",{});var Vet=n(ble);ePo=r(Vet,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vet.forEach(t),oPo=i(hl),Bd=s(hl,"P",{});var Vz=n(Bd);rPo=r(Vz,`Note:
Loading a model from its configuration file does `),vle=s(Vz,"STRONG",{});var zet=n(vle);tPo=r(zet,"not"),zet.forEach(t),aPo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=s(Vz,"CODE",{});var Wet=n(Tle);sPo=r(Wet,"from_pretrained()"),Wet.forEach(t),nPo=r(Vz,"to load the model weights."),Vz.forEach(t),lPo=i(hl),Fle=s(hl,"P",{});var Qet=n(Fle);iPo=r(Qet,"Examples:"),Qet.forEach(t),dPo=i(hl),f(Ww.$$.fragment,hl),hl.forEach(t),cPo=i(gl),Qe=s(gl,"DIV",{class:!0});var Jt=n(Qe);f(Qw.$$.fragment,Jt),mPo=i(Jt),Cle=s(Jt,"P",{});var Het=n(Cle);fPo=r(Het,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Het.forEach(t),gPo=i(Jt),es=s(Jt,"P",{});var n5=n(es);hPo=r(n5,"The model class to instantiate is selected based on the "),Mle=s(n5,"CODE",{});var Uet=n(Mle);uPo=r(Uet,"model_type"),Uet.forEach(t),pPo=r(n5,` property of the config object (either
passed as an argument or loaded from `),Ele=s(n5,"CODE",{});var Jet=n(Ele);_Po=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),bPo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=s(n5,"CODE",{});var Yet=n(yle);vPo=r(Yet,"pretrained_model_name_or_path"),Yet.forEach(t),TPo=r(n5,":"),n5.forEach(t),FPo=i(Jt),wle=s(Jt,"UL",{});var Ket=n(wle);GT=s(Ket,"LI",{});var PAe=n(GT);Ale=s(PAe,"STRONG",{});var Zet=n(Ale);CPo=r(Zet,"tapas"),Zet.forEach(t),MPo=r(PAe," \u2014 "),aN=s(PAe,"A",{href:!0});var eot=n(aN);EPo=r(eot,"TapasForQuestionAnswering"),eot.forEach(t),yPo=r(PAe," (TAPAS model)"),PAe.forEach(t),Ket.forEach(t),wPo=i(Jt),XT=s(Jt,"P",{});var $Ae=n(XT);APo=r($Ae,"The model is set in evaluation mode by default using "),Lle=s($Ae,"CODE",{});var oot=n(Lle);LPo=r(oot,"model.eval()"),oot.forEach(t),BPo=r($Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=s($Ae,"CODE",{});var rot=n(Ble);xPo=r(rot,"model.train()"),rot.forEach(t),$Ae.forEach(t),kPo=i(Jt),xle=s(Jt,"P",{});var tot=n(xle);RPo=r(tot,"Examples:"),tot.forEach(t),SPo=i(Jt),f(Hw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),jxe=i(d),xd=s(d,"H2",{class:!0});var WRe=n(xd);VT=s(WRe,"A",{id:!0,class:!0,href:!0});var aot=n(VT);kle=s(aot,"SPAN",{});var sot=n(kle);f(Uw.$$.fragment,sot),sot.forEach(t),aot.forEach(t),PPo=i(WRe),Rle=s(WRe,"SPAN",{});var not=n(Rle);$Po=r(not,"AutoModelForImageClassification"),not.forEach(t),WRe.forEach(t),Dxe=i(d),lr=s(d,"DIV",{class:!0});var ul=n(lr);f(Jw.$$.fragment,ul),IPo=i(ul),kd=s(ul,"P",{});var zz=n(kd);jPo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sle=s(zz,"CODE",{});var lot=n(Sle);DPo=r(lot,"from_pretrained()"),lot.forEach(t),NPo=r(zz,"class method or the "),Ple=s(zz,"CODE",{});var iot=n(Ple);qPo=r(iot,"from_config()"),iot.forEach(t),OPo=r(zz,`class
method.`),zz.forEach(t),GPo=i(ul),Yw=s(ul,"P",{});var QRe=n(Yw);XPo=r(QRe,"This class cannot be instantiated directly using "),$le=s(QRe,"CODE",{});var dot=n($le);VPo=r(dot,"__init__()"),dot.forEach(t),zPo=r(QRe," (throws an error)."),QRe.forEach(t),WPo=i(ul),ot=s(ul,"DIV",{class:!0});var pl=n(ot);f(Kw.$$.fragment,pl),QPo=i(pl),Ile=s(pl,"P",{});var cot=n(Ile);HPo=r(cot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cot.forEach(t),UPo=i(pl),Rd=s(pl,"P",{});var Wz=n(Rd);JPo=r(Wz,`Note:
Loading a model from its configuration file does `),jle=s(Wz,"STRONG",{});var mot=n(jle);YPo=r(mot,"not"),mot.forEach(t),KPo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=s(Wz,"CODE",{});var fot=n(Dle);ZPo=r(fot,"from_pretrained()"),fot.forEach(t),e$o=r(Wz,"to load the model weights."),Wz.forEach(t),o$o=i(pl),Nle=s(pl,"P",{});var got=n(Nle);r$o=r(got,"Examples:"),got.forEach(t),t$o=i(pl),f(Zw.$$.fragment,pl),pl.forEach(t),a$o=i(ul),He=s(ul,"DIV",{class:!0});var Yt=n(He);f(e6.$$.fragment,Yt),s$o=i(Yt),qle=s(Yt,"P",{});var hot=n(qle);n$o=r(hot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hot.forEach(t),l$o=i(Yt),os=s(Yt,"P",{});var l5=n(os);i$o=r(l5,"The model class to instantiate is selected based on the "),Ole=s(l5,"CODE",{});var uot=n(Ole);d$o=r(uot,"model_type"),uot.forEach(t),c$o=r(l5,` property of the config object (either
passed as an argument or loaded from `),Gle=s(l5,"CODE",{});var pot=n(Gle);m$o=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),f$o=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=s(l5,"CODE",{});var _ot=n(Xle);g$o=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),h$o=r(l5,":"),l5.forEach(t),u$o=i(Yt),Fe=s(Yt,"UL",{});var no=n(Fe);zT=s(no,"LI",{});var IAe=n(zT);Vle=s(IAe,"STRONG",{});var bot=n(Vle);p$o=r(bot,"beit"),bot.forEach(t),_$o=r(IAe," \u2014 "),sN=s(IAe,"A",{href:!0});var vot=n(sN);b$o=r(vot,"BeitForImageClassification"),vot.forEach(t),v$o=r(IAe," (BEiT model)"),IAe.forEach(t),T$o=i(no),WT=s(no,"LI",{});var jAe=n(WT);zle=s(jAe,"STRONG",{});var Tot=n(zle);F$o=r(Tot,"convnext"),Tot.forEach(t),C$o=r(jAe," \u2014 "),nN=s(jAe,"A",{href:!0});var Fot=n(nN);M$o=r(Fot,"ConvNextForImageClassification"),Fot.forEach(t),E$o=r(jAe," (ConvNext model)"),jAe.forEach(t),y$o=i(no),qn=s(no,"LI",{});var j7=n(qn);Wle=s(j7,"STRONG",{});var Cot=n(Wle);w$o=r(Cot,"deit"),Cot.forEach(t),A$o=r(j7," \u2014 "),lN=s(j7,"A",{href:!0});var Mot=n(lN);L$o=r(Mot,"DeiTForImageClassification"),Mot.forEach(t),B$o=r(j7," or "),iN=s(j7,"A",{href:!0});var Eot=n(iN);x$o=r(Eot,"DeiTForImageClassificationWithTeacher"),Eot.forEach(t),k$o=r(j7," (DeiT model)"),j7.forEach(t),R$o=i(no),QT=s(no,"LI",{});var DAe=n(QT);Qle=s(DAe,"STRONG",{});var yot=n(Qle);S$o=r(yot,"imagegpt"),yot.forEach(t),P$o=r(DAe," \u2014 "),dN=s(DAe,"A",{href:!0});var wot=n(dN);$$o=r(wot,"ImageGPTForImageClassification"),wot.forEach(t),I$o=r(DAe," (ImageGPT model)"),DAe.forEach(t),j$o=i(no),fa=s(no,"LI",{});var Pm=n(fa);Hle=s(Pm,"STRONG",{});var Aot=n(Hle);D$o=r(Aot,"perceiver"),Aot.forEach(t),N$o=r(Pm," \u2014 "),cN=s(Pm,"A",{href:!0});var Lot=n(cN);q$o=r(Lot,"PerceiverForImageClassificationLearned"),Lot.forEach(t),O$o=r(Pm," or "),mN=s(Pm,"A",{href:!0});var Bot=n(mN);G$o=r(Bot,"PerceiverForImageClassificationFourier"),Bot.forEach(t),X$o=r(Pm," or "),fN=s(Pm,"A",{href:!0});var xot=n(fN);V$o=r(xot,"PerceiverForImageClassificationConvProcessing"),xot.forEach(t),z$o=r(Pm," (Perceiver model)"),Pm.forEach(t),W$o=i(no),HT=s(no,"LI",{});var NAe=n(HT);Ule=s(NAe,"STRONG",{});var kot=n(Ule);Q$o=r(kot,"poolformer"),kot.forEach(t),H$o=r(NAe," \u2014 "),gN=s(NAe,"A",{href:!0});var Rot=n(gN);U$o=r(Rot,"PoolFormerForImageClassification"),Rot.forEach(t),J$o=r(NAe," (PoolFormer model)"),NAe.forEach(t),Y$o=i(no),UT=s(no,"LI",{});var qAe=n(UT);Jle=s(qAe,"STRONG",{});var Sot=n(Jle);K$o=r(Sot,"segformer"),Sot.forEach(t),Z$o=r(qAe," \u2014 "),hN=s(qAe,"A",{href:!0});var Pot=n(hN);eIo=r(Pot,"SegformerForImageClassification"),Pot.forEach(t),oIo=r(qAe," (SegFormer model)"),qAe.forEach(t),rIo=i(no),JT=s(no,"LI",{});var OAe=n(JT);Yle=s(OAe,"STRONG",{});var $ot=n(Yle);tIo=r($ot,"swin"),$ot.forEach(t),aIo=r(OAe," \u2014 "),uN=s(OAe,"A",{href:!0});var Iot=n(uN);sIo=r(Iot,"SwinForImageClassification"),Iot.forEach(t),nIo=r(OAe," (Swin model)"),OAe.forEach(t),lIo=i(no),YT=s(no,"LI",{});var GAe=n(YT);Kle=s(GAe,"STRONG",{});var jot=n(Kle);iIo=r(jot,"vit"),jot.forEach(t),dIo=r(GAe," \u2014 "),pN=s(GAe,"A",{href:!0});var Dot=n(pN);cIo=r(Dot,"ViTForImageClassification"),Dot.forEach(t),mIo=r(GAe," (ViT model)"),GAe.forEach(t),no.forEach(t),fIo=i(Yt),KT=s(Yt,"P",{});var XAe=n(KT);gIo=r(XAe,"The model is set in evaluation mode by default using "),Zle=s(XAe,"CODE",{});var Not=n(Zle);hIo=r(Not,"model.eval()"),Not.forEach(t),uIo=r(XAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=s(XAe,"CODE",{});var qot=n(eie);pIo=r(qot,"model.train()"),qot.forEach(t),XAe.forEach(t),_Io=i(Yt),oie=s(Yt,"P",{});var Oot=n(oie);bIo=r(Oot,"Examples:"),Oot.forEach(t),vIo=i(Yt),f(o6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),Nxe=i(d),Sd=s(d,"H2",{class:!0});var HRe=n(Sd);ZT=s(HRe,"A",{id:!0,class:!0,href:!0});var Got=n(ZT);rie=s(Got,"SPAN",{});var Xot=n(rie);f(r6.$$.fragment,Xot),Xot.forEach(t),Got.forEach(t),TIo=i(HRe),tie=s(HRe,"SPAN",{});var Vot=n(tie);FIo=r(Vot,"AutoModelForVision2Seq"),Vot.forEach(t),HRe.forEach(t),qxe=i(d),ir=s(d,"DIV",{class:!0});var _l=n(ir);f(t6.$$.fragment,_l),CIo=i(_l),Pd=s(_l,"P",{});var Qz=n(Pd);MIo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aie=s(Qz,"CODE",{});var zot=n(aie);EIo=r(zot,"from_pretrained()"),zot.forEach(t),yIo=r(Qz,"class method or the "),sie=s(Qz,"CODE",{});var Wot=n(sie);wIo=r(Wot,"from_config()"),Wot.forEach(t),AIo=r(Qz,`class
method.`),Qz.forEach(t),LIo=i(_l),a6=s(_l,"P",{});var URe=n(a6);BIo=r(URe,"This class cannot be instantiated directly using "),nie=s(URe,"CODE",{});var Qot=n(nie);xIo=r(Qot,"__init__()"),Qot.forEach(t),kIo=r(URe," (throws an error)."),URe.forEach(t),RIo=i(_l),rt=s(_l,"DIV",{class:!0});var bl=n(rt);f(s6.$$.fragment,bl),SIo=i(bl),lie=s(bl,"P",{});var Hot=n(lie);PIo=r(Hot,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hot.forEach(t),$Io=i(bl),$d=s(bl,"P",{});var Hz=n($d);IIo=r(Hz,`Note:
Loading a model from its configuration file does `),iie=s(Hz,"STRONG",{});var Uot=n(iie);jIo=r(Uot,"not"),Uot.forEach(t),DIo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),die=s(Hz,"CODE",{});var Jot=n(die);NIo=r(Jot,"from_pretrained()"),Jot.forEach(t),qIo=r(Hz,"to load the model weights."),Hz.forEach(t),OIo=i(bl),cie=s(bl,"P",{});var Yot=n(cie);GIo=r(Yot,"Examples:"),Yot.forEach(t),XIo=i(bl),f(n6.$$.fragment,bl),bl.forEach(t),VIo=i(_l),Ue=s(_l,"DIV",{class:!0});var Kt=n(Ue);f(l6.$$.fragment,Kt),zIo=i(Kt),mie=s(Kt,"P",{});var Kot=n(mie);WIo=r(Kot,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kot.forEach(t),QIo=i(Kt),rs=s(Kt,"P",{});var i5=n(rs);HIo=r(i5,"The model class to instantiate is selected based on the "),fie=s(i5,"CODE",{});var Zot=n(fie);UIo=r(Zot,"model_type"),Zot.forEach(t),JIo=r(i5,` property of the config object (either
passed as an argument or loaded from `),gie=s(i5,"CODE",{});var ert=n(gie);YIo=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),KIo=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=s(i5,"CODE",{});var ort=n(hie);ZIo=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),ejo=r(i5,":"),i5.forEach(t),ojo=i(Kt),uie=s(Kt,"UL",{});var rrt=n(uie);e1=s(rrt,"LI",{});var VAe=n(e1);pie=s(VAe,"STRONG",{});var trt=n(pie);rjo=r(trt,"vision-encoder-decoder"),trt.forEach(t),tjo=r(VAe," \u2014 "),_N=s(VAe,"A",{href:!0});var art=n(_N);ajo=r(art,"VisionEncoderDecoderModel"),art.forEach(t),sjo=r(VAe," (Vision Encoder decoder model)"),VAe.forEach(t),rrt.forEach(t),njo=i(Kt),o1=s(Kt,"P",{});var zAe=n(o1);ljo=r(zAe,"The model is set in evaluation mode by default using "),_ie=s(zAe,"CODE",{});var srt=n(_ie);ijo=r(srt,"model.eval()"),srt.forEach(t),djo=r(zAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=s(zAe,"CODE",{});var nrt=n(bie);cjo=r(nrt,"model.train()"),nrt.forEach(t),zAe.forEach(t),mjo=i(Kt),vie=s(Kt,"P",{});var lrt=n(vie);fjo=r(lrt,"Examples:"),lrt.forEach(t),gjo=i(Kt),f(i6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),Oxe=i(d),Id=s(d,"H2",{class:!0});var JRe=n(Id);r1=s(JRe,"A",{id:!0,class:!0,href:!0});var irt=n(r1);Tie=s(irt,"SPAN",{});var drt=n(Tie);f(d6.$$.fragment,drt),drt.forEach(t),irt.forEach(t),hjo=i(JRe),Fie=s(JRe,"SPAN",{});var crt=n(Fie);ujo=r(crt,"AutoModelForAudioClassification"),crt.forEach(t),JRe.forEach(t),Gxe=i(d),dr=s(d,"DIV",{class:!0});var vl=n(dr);f(c6.$$.fragment,vl),pjo=i(vl),jd=s(vl,"P",{});var Uz=n(jd);_jo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cie=s(Uz,"CODE",{});var mrt=n(Cie);bjo=r(mrt,"from_pretrained()"),mrt.forEach(t),vjo=r(Uz,"class method or the "),Mie=s(Uz,"CODE",{});var frt=n(Mie);Tjo=r(frt,"from_config()"),frt.forEach(t),Fjo=r(Uz,`class
method.`),Uz.forEach(t),Cjo=i(vl),m6=s(vl,"P",{});var YRe=n(m6);Mjo=r(YRe,"This class cannot be instantiated directly using "),Eie=s(YRe,"CODE",{});var grt=n(Eie);Ejo=r(grt,"__init__()"),grt.forEach(t),yjo=r(YRe," (throws an error)."),YRe.forEach(t),wjo=i(vl),tt=s(vl,"DIV",{class:!0});var Tl=n(tt);f(f6.$$.fragment,Tl),Ajo=i(Tl),yie=s(Tl,"P",{});var hrt=n(yie);Ljo=r(hrt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hrt.forEach(t),Bjo=i(Tl),Dd=s(Tl,"P",{});var Jz=n(Dd);xjo=r(Jz,`Note:
Loading a model from its configuration file does `),wie=s(Jz,"STRONG",{});var urt=n(wie);kjo=r(urt,"not"),urt.forEach(t),Rjo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=s(Jz,"CODE",{});var prt=n(Aie);Sjo=r(prt,"from_pretrained()"),prt.forEach(t),Pjo=r(Jz,"to load the model weights."),Jz.forEach(t),$jo=i(Tl),Lie=s(Tl,"P",{});var _rt=n(Lie);Ijo=r(_rt,"Examples:"),_rt.forEach(t),jjo=i(Tl),f(g6.$$.fragment,Tl),Tl.forEach(t),Djo=i(vl),Je=s(vl,"DIV",{class:!0});var Zt=n(Je);f(h6.$$.fragment,Zt),Njo=i(Zt),Bie=s(Zt,"P",{});var brt=n(Bie);qjo=r(brt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),brt.forEach(t),Ojo=i(Zt),ts=s(Zt,"P",{});var d5=n(ts);Gjo=r(d5,"The model class to instantiate is selected based on the "),xie=s(d5,"CODE",{});var vrt=n(xie);Xjo=r(vrt,"model_type"),vrt.forEach(t),Vjo=r(d5,` property of the config object (either
passed as an argument or loaded from `),kie=s(d5,"CODE",{});var Trt=n(kie);zjo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),Wjo=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=s(d5,"CODE",{});var Frt=n(Rie);Qjo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),Hjo=r(d5,":"),d5.forEach(t),Ujo=i(Zt),xe=s(Zt,"UL",{});var qo=n(xe);t1=s(qo,"LI",{});var WAe=n(t1);Sie=s(WAe,"STRONG",{});var Crt=n(Sie);Jjo=r(Crt,"data2vec-audio"),Crt.forEach(t),Yjo=r(WAe," \u2014 "),bN=s(WAe,"A",{href:!0});var Mrt=n(bN);Kjo=r(Mrt,"Data2VecAudioForSequenceClassification"),Mrt.forEach(t),Zjo=r(WAe," (Data2VecAudio model)"),WAe.forEach(t),eDo=i(qo),a1=s(qo,"LI",{});var QAe=n(a1);Pie=s(QAe,"STRONG",{});var Ert=n(Pie);oDo=r(Ert,"hubert"),Ert.forEach(t),rDo=r(QAe," \u2014 "),vN=s(QAe,"A",{href:!0});var yrt=n(vN);tDo=r(yrt,"HubertForSequenceClassification"),yrt.forEach(t),aDo=r(QAe," (Hubert model)"),QAe.forEach(t),sDo=i(qo),s1=s(qo,"LI",{});var HAe=n(s1);$ie=s(HAe,"STRONG",{});var wrt=n($ie);nDo=r(wrt,"sew"),wrt.forEach(t),lDo=r(HAe," \u2014 "),TN=s(HAe,"A",{href:!0});var Art=n(TN);iDo=r(Art,"SEWForSequenceClassification"),Art.forEach(t),dDo=r(HAe," (SEW model)"),HAe.forEach(t),cDo=i(qo),n1=s(qo,"LI",{});var UAe=n(n1);Iie=s(UAe,"STRONG",{});var Lrt=n(Iie);mDo=r(Lrt,"sew-d"),Lrt.forEach(t),fDo=r(UAe," \u2014 "),FN=s(UAe,"A",{href:!0});var Brt=n(FN);gDo=r(Brt,"SEWDForSequenceClassification"),Brt.forEach(t),hDo=r(UAe," (SEW-D model)"),UAe.forEach(t),uDo=i(qo),l1=s(qo,"LI",{});var JAe=n(l1);jie=s(JAe,"STRONG",{});var xrt=n(jie);pDo=r(xrt,"unispeech"),xrt.forEach(t),_Do=r(JAe," \u2014 "),CN=s(JAe,"A",{href:!0});var krt=n(CN);bDo=r(krt,"UniSpeechForSequenceClassification"),krt.forEach(t),vDo=r(JAe," (UniSpeech model)"),JAe.forEach(t),TDo=i(qo),i1=s(qo,"LI",{});var YAe=n(i1);Die=s(YAe,"STRONG",{});var Rrt=n(Die);FDo=r(Rrt,"unispeech-sat"),Rrt.forEach(t),CDo=r(YAe," \u2014 "),MN=s(YAe,"A",{href:!0});var Srt=n(MN);MDo=r(Srt,"UniSpeechSatForSequenceClassification"),Srt.forEach(t),EDo=r(YAe," (UniSpeechSat model)"),YAe.forEach(t),yDo=i(qo),d1=s(qo,"LI",{});var KAe=n(d1);Nie=s(KAe,"STRONG",{});var Prt=n(Nie);wDo=r(Prt,"wav2vec2"),Prt.forEach(t),ADo=r(KAe," \u2014 "),EN=s(KAe,"A",{href:!0});var $rt=n(EN);LDo=r($rt,"Wav2Vec2ForSequenceClassification"),$rt.forEach(t),BDo=r(KAe," (Wav2Vec2 model)"),KAe.forEach(t),xDo=i(qo),c1=s(qo,"LI",{});var ZAe=n(c1);qie=s(ZAe,"STRONG",{});var Irt=n(qie);kDo=r(Irt,"wavlm"),Irt.forEach(t),RDo=r(ZAe," \u2014 "),yN=s(ZAe,"A",{href:!0});var jrt=n(yN);SDo=r(jrt,"WavLMForSequenceClassification"),jrt.forEach(t),PDo=r(ZAe," (WavLM model)"),ZAe.forEach(t),qo.forEach(t),$Do=i(Zt),m1=s(Zt,"P",{});var e0e=n(m1);IDo=r(e0e,"The model is set in evaluation mode by default using "),Oie=s(e0e,"CODE",{});var Drt=n(Oie);jDo=r(Drt,"model.eval()"),Drt.forEach(t),DDo=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=s(e0e,"CODE",{});var Nrt=n(Gie);NDo=r(Nrt,"model.train()"),Nrt.forEach(t),e0e.forEach(t),qDo=i(Zt),Xie=s(Zt,"P",{});var qrt=n(Xie);ODo=r(qrt,"Examples:"),qrt.forEach(t),GDo=i(Zt),f(u6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Xxe=i(d),Nd=s(d,"H2",{class:!0});var KRe=n(Nd);f1=s(KRe,"A",{id:!0,class:!0,href:!0});var Ort=n(f1);Vie=s(Ort,"SPAN",{});var Grt=n(Vie);f(p6.$$.fragment,Grt),Grt.forEach(t),Ort.forEach(t),XDo=i(KRe),zie=s(KRe,"SPAN",{});var Xrt=n(zie);VDo=r(Xrt,"AutoModelForAudioFrameClassification"),Xrt.forEach(t),KRe.forEach(t),Vxe=i(d),cr=s(d,"DIV",{class:!0});var Fl=n(cr);f(_6.$$.fragment,Fl),zDo=i(Fl),qd=s(Fl,"P",{});var Yz=n(qd);WDo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wie=s(Yz,"CODE",{});var Vrt=n(Wie);QDo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),HDo=r(Yz,"class method or the "),Qie=s(Yz,"CODE",{});var zrt=n(Qie);UDo=r(zrt,"from_config()"),zrt.forEach(t),JDo=r(Yz,`class
method.`),Yz.forEach(t),YDo=i(Fl),b6=s(Fl,"P",{});var ZRe=n(b6);KDo=r(ZRe,"This class cannot be instantiated directly using "),Hie=s(ZRe,"CODE",{});var Wrt=n(Hie);ZDo=r(Wrt,"__init__()"),Wrt.forEach(t),eNo=r(ZRe," (throws an error)."),ZRe.forEach(t),oNo=i(Fl),at=s(Fl,"DIV",{class:!0});var Cl=n(at);f(v6.$$.fragment,Cl),rNo=i(Cl),Uie=s(Cl,"P",{});var Qrt=n(Uie);tNo=r(Qrt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Qrt.forEach(t),aNo=i(Cl),Od=s(Cl,"P",{});var Kz=n(Od);sNo=r(Kz,`Note:
Loading a model from its configuration file does `),Jie=s(Kz,"STRONG",{});var Hrt=n(Jie);nNo=r(Hrt,"not"),Hrt.forEach(t),lNo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=s(Kz,"CODE",{});var Urt=n(Yie);iNo=r(Urt,"from_pretrained()"),Urt.forEach(t),dNo=r(Kz,"to load the model weights."),Kz.forEach(t),cNo=i(Cl),Kie=s(Cl,"P",{});var Jrt=n(Kie);mNo=r(Jrt,"Examples:"),Jrt.forEach(t),fNo=i(Cl),f(T6.$$.fragment,Cl),Cl.forEach(t),gNo=i(Fl),Ye=s(Fl,"DIV",{class:!0});var ea=n(Ye);f(F6.$$.fragment,ea),hNo=i(ea),Zie=s(ea,"P",{});var Yrt=n(Zie);uNo=r(Yrt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yrt.forEach(t),pNo=i(ea),as=s(ea,"P",{});var c5=n(as);_No=r(c5,"The model class to instantiate is selected based on the "),ede=s(c5,"CODE",{});var Krt=n(ede);bNo=r(Krt,"model_type"),Krt.forEach(t),vNo=r(c5,` property of the config object (either
passed as an argument or loaded from `),ode=s(c5,"CODE",{});var Zrt=n(ode);TNo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),FNo=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=s(c5,"CODE",{});var ett=n(rde);CNo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),MNo=r(c5,":"),c5.forEach(t),ENo=i(ea),ss=s(ea,"UL",{});var m5=n(ss);g1=s(m5,"LI",{});var o0e=n(g1);tde=s(o0e,"STRONG",{});var ott=n(tde);yNo=r(ott,"data2vec-audio"),ott.forEach(t),wNo=r(o0e," \u2014 "),wN=s(o0e,"A",{href:!0});var rtt=n(wN);ANo=r(rtt,"Data2VecAudioForAudioFrameClassification"),rtt.forEach(t),LNo=r(o0e," (Data2VecAudio model)"),o0e.forEach(t),BNo=i(m5),h1=s(m5,"LI",{});var r0e=n(h1);ade=s(r0e,"STRONG",{});var ttt=n(ade);xNo=r(ttt,"unispeech-sat"),ttt.forEach(t),kNo=r(r0e," \u2014 "),AN=s(r0e,"A",{href:!0});var att=n(AN);RNo=r(att,"UniSpeechSatForAudioFrameClassification"),att.forEach(t),SNo=r(r0e," (UniSpeechSat model)"),r0e.forEach(t),PNo=i(m5),u1=s(m5,"LI",{});var t0e=n(u1);sde=s(t0e,"STRONG",{});var stt=n(sde);$No=r(stt,"wav2vec2"),stt.forEach(t),INo=r(t0e," \u2014 "),LN=s(t0e,"A",{href:!0});var ntt=n(LN);jNo=r(ntt,"Wav2Vec2ForAudioFrameClassification"),ntt.forEach(t),DNo=r(t0e," (Wav2Vec2 model)"),t0e.forEach(t),NNo=i(m5),p1=s(m5,"LI",{});var a0e=n(p1);nde=s(a0e,"STRONG",{});var ltt=n(nde);qNo=r(ltt,"wavlm"),ltt.forEach(t),ONo=r(a0e," \u2014 "),BN=s(a0e,"A",{href:!0});var itt=n(BN);GNo=r(itt,"WavLMForAudioFrameClassification"),itt.forEach(t),XNo=r(a0e," (WavLM model)"),a0e.forEach(t),m5.forEach(t),VNo=i(ea),_1=s(ea,"P",{});var s0e=n(_1);zNo=r(s0e,"The model is set in evaluation mode by default using "),lde=s(s0e,"CODE",{});var dtt=n(lde);WNo=r(dtt,"model.eval()"),dtt.forEach(t),QNo=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=s(s0e,"CODE",{});var ctt=n(ide);HNo=r(ctt,"model.train()"),ctt.forEach(t),s0e.forEach(t),UNo=i(ea),dde=s(ea,"P",{});var mtt=n(dde);JNo=r(mtt,"Examples:"),mtt.forEach(t),YNo=i(ea),f(C6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),zxe=i(d),Gd=s(d,"H2",{class:!0});var eSe=n(Gd);b1=s(eSe,"A",{id:!0,class:!0,href:!0});var ftt=n(b1);cde=s(ftt,"SPAN",{});var gtt=n(cde);f(M6.$$.fragment,gtt),gtt.forEach(t),ftt.forEach(t),KNo=i(eSe),mde=s(eSe,"SPAN",{});var htt=n(mde);ZNo=r(htt,"AutoModelForCTC"),htt.forEach(t),eSe.forEach(t),Wxe=i(d),mr=s(d,"DIV",{class:!0});var Ml=n(mr);f(E6.$$.fragment,Ml),eqo=i(Ml),Xd=s(Ml,"P",{});var Zz=n(Xd);oqo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fde=s(Zz,"CODE",{});var utt=n(fde);rqo=r(utt,"from_pretrained()"),utt.forEach(t),tqo=r(Zz,"class method or the "),gde=s(Zz,"CODE",{});var ptt=n(gde);aqo=r(ptt,"from_config()"),ptt.forEach(t),sqo=r(Zz,`class
method.`),Zz.forEach(t),nqo=i(Ml),y6=s(Ml,"P",{});var oSe=n(y6);lqo=r(oSe,"This class cannot be instantiated directly using "),hde=s(oSe,"CODE",{});var _tt=n(hde);iqo=r(_tt,"__init__()"),_tt.forEach(t),dqo=r(oSe," (throws an error)."),oSe.forEach(t),cqo=i(Ml),st=s(Ml,"DIV",{class:!0});var El=n(st);f(w6.$$.fragment,El),mqo=i(El),ude=s(El,"P",{});var btt=n(ude);fqo=r(btt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),btt.forEach(t),gqo=i(El),Vd=s(El,"P",{});var eW=n(Vd);hqo=r(eW,`Note:
Loading a model from its configuration file does `),pde=s(eW,"STRONG",{});var vtt=n(pde);uqo=r(vtt,"not"),vtt.forEach(t),pqo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=s(eW,"CODE",{});var Ttt=n(_de);_qo=r(Ttt,"from_pretrained()"),Ttt.forEach(t),bqo=r(eW,"to load the model weights."),eW.forEach(t),vqo=i(El),bde=s(El,"P",{});var Ftt=n(bde);Tqo=r(Ftt,"Examples:"),Ftt.forEach(t),Fqo=i(El),f(A6.$$.fragment,El),El.forEach(t),Cqo=i(Ml),Ke=s(Ml,"DIV",{class:!0});var oa=n(Ke);f(L6.$$.fragment,oa),Mqo=i(oa),vde=s(oa,"P",{});var Ctt=n(vde);Eqo=r(Ctt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ctt.forEach(t),yqo=i(oa),ns=s(oa,"P",{});var f5=n(ns);wqo=r(f5,"The model class to instantiate is selected based on the "),Tde=s(f5,"CODE",{});var Mtt=n(Tde);Aqo=r(Mtt,"model_type"),Mtt.forEach(t),Lqo=r(f5,` property of the config object (either
passed as an argument or loaded from `),Fde=s(f5,"CODE",{});var Ett=n(Fde);Bqo=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),xqo=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=s(f5,"CODE",{});var ytt=n(Cde);kqo=r(ytt,"pretrained_model_name_or_path"),ytt.forEach(t),Rqo=r(f5,":"),f5.forEach(t),Sqo=i(oa),ke=s(oa,"UL",{});var Oo=n(ke);v1=s(Oo,"LI",{});var n0e=n(v1);Mde=s(n0e,"STRONG",{});var wtt=n(Mde);Pqo=r(wtt,"data2vec-audio"),wtt.forEach(t),$qo=r(n0e," \u2014 "),xN=s(n0e,"A",{href:!0});var Att=n(xN);Iqo=r(Att,"Data2VecAudioForCTC"),Att.forEach(t),jqo=r(n0e," (Data2VecAudio model)"),n0e.forEach(t),Dqo=i(Oo),T1=s(Oo,"LI",{});var l0e=n(T1);Ede=s(l0e,"STRONG",{});var Ltt=n(Ede);Nqo=r(Ltt,"hubert"),Ltt.forEach(t),qqo=r(l0e," \u2014 "),kN=s(l0e,"A",{href:!0});var Btt=n(kN);Oqo=r(Btt,"HubertForCTC"),Btt.forEach(t),Gqo=r(l0e," (Hubert model)"),l0e.forEach(t),Xqo=i(Oo),F1=s(Oo,"LI",{});var i0e=n(F1);yde=s(i0e,"STRONG",{});var xtt=n(yde);Vqo=r(xtt,"sew"),xtt.forEach(t),zqo=r(i0e," \u2014 "),RN=s(i0e,"A",{href:!0});var ktt=n(RN);Wqo=r(ktt,"SEWForCTC"),ktt.forEach(t),Qqo=r(i0e," (SEW model)"),i0e.forEach(t),Hqo=i(Oo),C1=s(Oo,"LI",{});var d0e=n(C1);wde=s(d0e,"STRONG",{});var Rtt=n(wde);Uqo=r(Rtt,"sew-d"),Rtt.forEach(t),Jqo=r(d0e," \u2014 "),SN=s(d0e,"A",{href:!0});var Stt=n(SN);Yqo=r(Stt,"SEWDForCTC"),Stt.forEach(t),Kqo=r(d0e," (SEW-D model)"),d0e.forEach(t),Zqo=i(Oo),M1=s(Oo,"LI",{});var c0e=n(M1);Ade=s(c0e,"STRONG",{});var Ptt=n(Ade);eOo=r(Ptt,"unispeech"),Ptt.forEach(t),oOo=r(c0e," \u2014 "),PN=s(c0e,"A",{href:!0});var $tt=n(PN);rOo=r($tt,"UniSpeechForCTC"),$tt.forEach(t),tOo=r(c0e," (UniSpeech model)"),c0e.forEach(t),aOo=i(Oo),E1=s(Oo,"LI",{});var m0e=n(E1);Lde=s(m0e,"STRONG",{});var Itt=n(Lde);sOo=r(Itt,"unispeech-sat"),Itt.forEach(t),nOo=r(m0e," \u2014 "),$N=s(m0e,"A",{href:!0});var jtt=n($N);lOo=r(jtt,"UniSpeechSatForCTC"),jtt.forEach(t),iOo=r(m0e," (UniSpeechSat model)"),m0e.forEach(t),dOo=i(Oo),y1=s(Oo,"LI",{});var f0e=n(y1);Bde=s(f0e,"STRONG",{});var Dtt=n(Bde);cOo=r(Dtt,"wav2vec2"),Dtt.forEach(t),mOo=r(f0e," \u2014 "),IN=s(f0e,"A",{href:!0});var Ntt=n(IN);fOo=r(Ntt,"Wav2Vec2ForCTC"),Ntt.forEach(t),gOo=r(f0e," (Wav2Vec2 model)"),f0e.forEach(t),hOo=i(Oo),w1=s(Oo,"LI",{});var g0e=n(w1);xde=s(g0e,"STRONG",{});var qtt=n(xde);uOo=r(qtt,"wavlm"),qtt.forEach(t),pOo=r(g0e," \u2014 "),jN=s(g0e,"A",{href:!0});var Ott=n(jN);_Oo=r(Ott,"WavLMForCTC"),Ott.forEach(t),bOo=r(g0e," (WavLM model)"),g0e.forEach(t),Oo.forEach(t),vOo=i(oa),A1=s(oa,"P",{});var h0e=n(A1);TOo=r(h0e,"The model is set in evaluation mode by default using "),kde=s(h0e,"CODE",{});var Gtt=n(kde);FOo=r(Gtt,"model.eval()"),Gtt.forEach(t),COo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=s(h0e,"CODE",{});var Xtt=n(Rde);MOo=r(Xtt,"model.train()"),Xtt.forEach(t),h0e.forEach(t),EOo=i(oa),Sde=s(oa,"P",{});var Vtt=n(Sde);yOo=r(Vtt,"Examples:"),Vtt.forEach(t),wOo=i(oa),f(B6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Qxe=i(d),zd=s(d,"H2",{class:!0});var rSe=n(zd);L1=s(rSe,"A",{id:!0,class:!0,href:!0});var ztt=n(L1);Pde=s(ztt,"SPAN",{});var Wtt=n(Pde);f(x6.$$.fragment,Wtt),Wtt.forEach(t),ztt.forEach(t),AOo=i(rSe),$de=s(rSe,"SPAN",{});var Qtt=n($de);LOo=r(Qtt,"AutoModelForSpeechSeq2Seq"),Qtt.forEach(t),rSe.forEach(t),Hxe=i(d),fr=s(d,"DIV",{class:!0});var yl=n(fr);f(k6.$$.fragment,yl),BOo=i(yl),Wd=s(yl,"P",{});var oW=n(Wd);xOo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ide=s(oW,"CODE",{});var Htt=n(Ide);kOo=r(Htt,"from_pretrained()"),Htt.forEach(t),ROo=r(oW,"class method or the "),jde=s(oW,"CODE",{});var Utt=n(jde);SOo=r(Utt,"from_config()"),Utt.forEach(t),POo=r(oW,`class
method.`),oW.forEach(t),$Oo=i(yl),R6=s(yl,"P",{});var tSe=n(R6);IOo=r(tSe,"This class cannot be instantiated directly using "),Dde=s(tSe,"CODE",{});var Jtt=n(Dde);jOo=r(Jtt,"__init__()"),Jtt.forEach(t),DOo=r(tSe," (throws an error)."),tSe.forEach(t),NOo=i(yl),nt=s(yl,"DIV",{class:!0});var wl=n(nt);f(S6.$$.fragment,wl),qOo=i(wl),Nde=s(wl,"P",{});var Ytt=n(Nde);OOo=r(Ytt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ytt.forEach(t),GOo=i(wl),Qd=s(wl,"P",{});var rW=n(Qd);XOo=r(rW,`Note:
Loading a model from its configuration file does `),qde=s(rW,"STRONG",{});var Ktt=n(qde);VOo=r(Ktt,"not"),Ktt.forEach(t),zOo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ode=s(rW,"CODE",{});var Ztt=n(Ode);WOo=r(Ztt,"from_pretrained()"),Ztt.forEach(t),QOo=r(rW,"to load the model weights."),rW.forEach(t),HOo=i(wl),Gde=s(wl,"P",{});var eat=n(Gde);UOo=r(eat,"Examples:"),eat.forEach(t),JOo=i(wl),f(P6.$$.fragment,wl),wl.forEach(t),YOo=i(yl),Ze=s(yl,"DIV",{class:!0});var ra=n(Ze);f($6.$$.fragment,ra),KOo=i(ra),Xde=s(ra,"P",{});var oat=n(Xde);ZOo=r(oat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oat.forEach(t),eGo=i(ra),ls=s(ra,"P",{});var g5=n(ls);oGo=r(g5,"The model class to instantiate is selected based on the "),Vde=s(g5,"CODE",{});var rat=n(Vde);rGo=r(rat,"model_type"),rat.forEach(t),tGo=r(g5,` property of the config object (either
passed as an argument or loaded from `),zde=s(g5,"CODE",{});var tat=n(zde);aGo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),sGo=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=s(g5,"CODE",{});var aat=n(Wde);nGo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),lGo=r(g5,":"),g5.forEach(t),iGo=i(ra),I6=s(ra,"UL",{});var aSe=n(I6);B1=s(aSe,"LI",{});var u0e=n(B1);Qde=s(u0e,"STRONG",{});var sat=n(Qde);dGo=r(sat,"speech-encoder-decoder"),sat.forEach(t),cGo=r(u0e," \u2014 "),DN=s(u0e,"A",{href:!0});var nat=n(DN);mGo=r(nat,"SpeechEncoderDecoderModel"),nat.forEach(t),fGo=r(u0e," (Speech Encoder decoder model)"),u0e.forEach(t),gGo=i(aSe),x1=s(aSe,"LI",{});var p0e=n(x1);Hde=s(p0e,"STRONG",{});var lat=n(Hde);hGo=r(lat,"speech_to_text"),lat.forEach(t),uGo=r(p0e," \u2014 "),NN=s(p0e,"A",{href:!0});var iat=n(NN);pGo=r(iat,"Speech2TextForConditionalGeneration"),iat.forEach(t),_Go=r(p0e," (Speech2Text model)"),p0e.forEach(t),aSe.forEach(t),bGo=i(ra),k1=s(ra,"P",{});var _0e=n(k1);vGo=r(_0e,"The model is set in evaluation mode by default using "),Ude=s(_0e,"CODE",{});var dat=n(Ude);TGo=r(dat,"model.eval()"),dat.forEach(t),FGo=r(_0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=s(_0e,"CODE",{});var cat=n(Jde);CGo=r(cat,"model.train()"),cat.forEach(t),_0e.forEach(t),MGo=i(ra),Yde=s(ra,"P",{});var mat=n(Yde);EGo=r(mat,"Examples:"),mat.forEach(t),yGo=i(ra),f(j6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Uxe=i(d),Hd=s(d,"H2",{class:!0});var sSe=n(Hd);R1=s(sSe,"A",{id:!0,class:!0,href:!0});var fat=n(R1);Kde=s(fat,"SPAN",{});var gat=n(Kde);f(D6.$$.fragment,gat),gat.forEach(t),fat.forEach(t),wGo=i(sSe),Zde=s(sSe,"SPAN",{});var hat=n(Zde);AGo=r(hat,"AutoModelForAudioXVector"),hat.forEach(t),sSe.forEach(t),Jxe=i(d),gr=s(d,"DIV",{class:!0});var Al=n(gr);f(N6.$$.fragment,Al),LGo=i(Al),Ud=s(Al,"P",{});var tW=n(Ud);BGo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ece=s(tW,"CODE",{});var uat=n(ece);xGo=r(uat,"from_pretrained()"),uat.forEach(t),kGo=r(tW,"class method or the "),oce=s(tW,"CODE",{});var pat=n(oce);RGo=r(pat,"from_config()"),pat.forEach(t),SGo=r(tW,`class
method.`),tW.forEach(t),PGo=i(Al),q6=s(Al,"P",{});var nSe=n(q6);$Go=r(nSe,"This class cannot be instantiated directly using "),rce=s(nSe,"CODE",{});var _at=n(rce);IGo=r(_at,"__init__()"),_at.forEach(t),jGo=r(nSe," (throws an error)."),nSe.forEach(t),DGo=i(Al),lt=s(Al,"DIV",{class:!0});var Ll=n(lt);f(O6.$$.fragment,Ll),NGo=i(Ll),tce=s(Ll,"P",{});var bat=n(tce);qGo=r(bat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bat.forEach(t),OGo=i(Ll),Jd=s(Ll,"P",{});var aW=n(Jd);GGo=r(aW,`Note:
Loading a model from its configuration file does `),ace=s(aW,"STRONG",{});var vat=n(ace);XGo=r(vat,"not"),vat.forEach(t),VGo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sce=s(aW,"CODE",{});var Tat=n(sce);zGo=r(Tat,"from_pretrained()"),Tat.forEach(t),WGo=r(aW,"to load the model weights."),aW.forEach(t),QGo=i(Ll),nce=s(Ll,"P",{});var Fat=n(nce);HGo=r(Fat,"Examples:"),Fat.forEach(t),UGo=i(Ll),f(G6.$$.fragment,Ll),Ll.forEach(t),JGo=i(Al),eo=s(Al,"DIV",{class:!0});var ta=n(eo);f(X6.$$.fragment,ta),YGo=i(ta),lce=s(ta,"P",{});var Cat=n(lce);KGo=r(Cat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Cat.forEach(t),ZGo=i(ta),is=s(ta,"P",{});var h5=n(is);eXo=r(h5,"The model class to instantiate is selected based on the "),ice=s(h5,"CODE",{});var Mat=n(ice);oXo=r(Mat,"model_type"),Mat.forEach(t),rXo=r(h5,` property of the config object (either
passed as an argument or loaded from `),dce=s(h5,"CODE",{});var Eat=n(dce);tXo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),aXo=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=s(h5,"CODE",{});var yat=n(cce);sXo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),nXo=r(h5,":"),h5.forEach(t),lXo=i(ta),ds=s(ta,"UL",{});var u5=n(ds);S1=s(u5,"LI",{});var b0e=n(S1);mce=s(b0e,"STRONG",{});var wat=n(mce);iXo=r(wat,"data2vec-audio"),wat.forEach(t),dXo=r(b0e," \u2014 "),qN=s(b0e,"A",{href:!0});var Aat=n(qN);cXo=r(Aat,"Data2VecAudioForXVector"),Aat.forEach(t),mXo=r(b0e," (Data2VecAudio model)"),b0e.forEach(t),fXo=i(u5),P1=s(u5,"LI",{});var v0e=n(P1);fce=s(v0e,"STRONG",{});var Lat=n(fce);gXo=r(Lat,"unispeech-sat"),Lat.forEach(t),hXo=r(v0e," \u2014 "),ON=s(v0e,"A",{href:!0});var Bat=n(ON);uXo=r(Bat,"UniSpeechSatForXVector"),Bat.forEach(t),pXo=r(v0e," (UniSpeechSat model)"),v0e.forEach(t),_Xo=i(u5),$1=s(u5,"LI",{});var T0e=n($1);gce=s(T0e,"STRONG",{});var xat=n(gce);bXo=r(xat,"wav2vec2"),xat.forEach(t),vXo=r(T0e," \u2014 "),GN=s(T0e,"A",{href:!0});var kat=n(GN);TXo=r(kat,"Wav2Vec2ForXVector"),kat.forEach(t),FXo=r(T0e," (Wav2Vec2 model)"),T0e.forEach(t),CXo=i(u5),I1=s(u5,"LI",{});var F0e=n(I1);hce=s(F0e,"STRONG",{});var Rat=n(hce);MXo=r(Rat,"wavlm"),Rat.forEach(t),EXo=r(F0e," \u2014 "),XN=s(F0e,"A",{href:!0});var Sat=n(XN);yXo=r(Sat,"WavLMForXVector"),Sat.forEach(t),wXo=r(F0e," (WavLM model)"),F0e.forEach(t),u5.forEach(t),AXo=i(ta),j1=s(ta,"P",{});var C0e=n(j1);LXo=r(C0e,"The model is set in evaluation mode by default using "),uce=s(C0e,"CODE",{});var Pat=n(uce);BXo=r(Pat,"model.eval()"),Pat.forEach(t),xXo=r(C0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=s(C0e,"CODE",{});var $at=n(pce);kXo=r($at,"model.train()"),$at.forEach(t),C0e.forEach(t),RXo=i(ta),_ce=s(ta,"P",{});var Iat=n(_ce);SXo=r(Iat,"Examples:"),Iat.forEach(t),PXo=i(ta),f(V6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Yxe=i(d),Yd=s(d,"H2",{class:!0});var lSe=n(Yd);D1=s(lSe,"A",{id:!0,class:!0,href:!0});var jat=n(D1);bce=s(jat,"SPAN",{});var Dat=n(bce);f(z6.$$.fragment,Dat),Dat.forEach(t),jat.forEach(t),$Xo=i(lSe),vce=s(lSe,"SPAN",{});var Nat=n(vce);IXo=r(Nat,"AutoModelForMaskedImageModeling"),Nat.forEach(t),lSe.forEach(t),Kxe=i(d),hr=s(d,"DIV",{class:!0});var Bl=n(hr);f(W6.$$.fragment,Bl),jXo=i(Bl),Kd=s(Bl,"P",{});var sW=n(Kd);DXo=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tce=s(sW,"CODE",{});var qat=n(Tce);NXo=r(qat,"from_pretrained()"),qat.forEach(t),qXo=r(sW,"class method or the "),Fce=s(sW,"CODE",{});var Oat=n(Fce);OXo=r(Oat,"from_config()"),Oat.forEach(t),GXo=r(sW,`class
method.`),sW.forEach(t),XXo=i(Bl),Q6=s(Bl,"P",{});var iSe=n(Q6);VXo=r(iSe,"This class cannot be instantiated directly using "),Cce=s(iSe,"CODE",{});var Gat=n(Cce);zXo=r(Gat,"__init__()"),Gat.forEach(t),WXo=r(iSe," (throws an error)."),iSe.forEach(t),QXo=i(Bl),it=s(Bl,"DIV",{class:!0});var xl=n(it);f(H6.$$.fragment,xl),HXo=i(xl),Mce=s(xl,"P",{});var Xat=n(Mce);UXo=r(Xat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xat.forEach(t),JXo=i(xl),Zd=s(xl,"P",{});var nW=n(Zd);YXo=r(nW,`Note:
Loading a model from its configuration file does `),Ece=s(nW,"STRONG",{});var Vat=n(Ece);KXo=r(Vat,"not"),Vat.forEach(t),ZXo=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=s(nW,"CODE",{});var zat=n(yce);eVo=r(zat,"from_pretrained()"),zat.forEach(t),oVo=r(nW,"to load the model weights."),nW.forEach(t),rVo=i(xl),wce=s(xl,"P",{});var Wat=n(wce);tVo=r(Wat,"Examples:"),Wat.forEach(t),aVo=i(xl),f(U6.$$.fragment,xl),xl.forEach(t),sVo=i(Bl),oo=s(Bl,"DIV",{class:!0});var aa=n(oo);f(J6.$$.fragment,aa),nVo=i(aa),Ace=s(aa,"P",{});var Qat=n(Ace);lVo=r(Qat,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qat.forEach(t),iVo=i(aa),cs=s(aa,"P",{});var p5=n(cs);dVo=r(p5,"The model class to instantiate is selected based on the "),Lce=s(p5,"CODE",{});var Hat=n(Lce);cVo=r(Hat,"model_type"),Hat.forEach(t),mVo=r(p5,` property of the config object (either
passed as an argument or loaded from `),Bce=s(p5,"CODE",{});var Uat=n(Bce);fVo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),gVo=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=s(p5,"CODE",{});var Jat=n(xce);hVo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),uVo=r(p5,":"),p5.forEach(t),pVo=i(aa),ec=s(aa,"UL",{});var lW=n(ec);N1=s(lW,"LI",{});var M0e=n(N1);kce=s(M0e,"STRONG",{});var Yat=n(kce);_Vo=r(Yat,"deit"),Yat.forEach(t),bVo=r(M0e," \u2014 "),VN=s(M0e,"A",{href:!0});var Kat=n(VN);vVo=r(Kat,"DeiTForMaskedImageModeling"),Kat.forEach(t),TVo=r(M0e," (DeiT model)"),M0e.forEach(t),FVo=i(lW),q1=s(lW,"LI",{});var E0e=n(q1);Rce=s(E0e,"STRONG",{});var Zat=n(Rce);CVo=r(Zat,"swin"),Zat.forEach(t),MVo=r(E0e," \u2014 "),zN=s(E0e,"A",{href:!0});var est=n(zN);EVo=r(est,"SwinForMaskedImageModeling"),est.forEach(t),yVo=r(E0e," (Swin model)"),E0e.forEach(t),wVo=i(lW),O1=s(lW,"LI",{});var y0e=n(O1);Sce=s(y0e,"STRONG",{});var ost=n(Sce);AVo=r(ost,"vit"),ost.forEach(t),LVo=r(y0e," \u2014 "),WN=s(y0e,"A",{href:!0});var rst=n(WN);BVo=r(rst,"ViTForMaskedImageModeling"),rst.forEach(t),xVo=r(y0e," (ViT model)"),y0e.forEach(t),lW.forEach(t),kVo=i(aa),G1=s(aa,"P",{});var w0e=n(G1);RVo=r(w0e,"The model is set in evaluation mode by default using "),Pce=s(w0e,"CODE",{});var tst=n(Pce);SVo=r(tst,"model.eval()"),tst.forEach(t),PVo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=s(w0e,"CODE",{});var ast=n($ce);$Vo=r(ast,"model.train()"),ast.forEach(t),w0e.forEach(t),IVo=i(aa),Ice=s(aa,"P",{});var sst=n(Ice);jVo=r(sst,"Examples:"),sst.forEach(t),DVo=i(aa),f(Y6.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Zxe=i(d),oc=s(d,"H2",{class:!0});var dSe=n(oc);X1=s(dSe,"A",{id:!0,class:!0,href:!0});var nst=n(X1);jce=s(nst,"SPAN",{});var lst=n(jce);f(K6.$$.fragment,lst),lst.forEach(t),nst.forEach(t),NVo=i(dSe),Dce=s(dSe,"SPAN",{});var ist=n(Dce);qVo=r(ist,"AutoModelForObjectDetection"),ist.forEach(t),dSe.forEach(t),eke=i(d),ur=s(d,"DIV",{class:!0});var kl=n(ur);f(Z6.$$.fragment,kl),OVo=i(kl),rc=s(kl,"P",{});var iW=n(rc);GVo=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nce=s(iW,"CODE",{});var dst=n(Nce);XVo=r(dst,"from_pretrained()"),dst.forEach(t),VVo=r(iW,"class method or the "),qce=s(iW,"CODE",{});var cst=n(qce);zVo=r(cst,"from_config()"),cst.forEach(t),WVo=r(iW,`class
method.`),iW.forEach(t),QVo=i(kl),eA=s(kl,"P",{});var cSe=n(eA);HVo=r(cSe,"This class cannot be instantiated directly using "),Oce=s(cSe,"CODE",{});var mst=n(Oce);UVo=r(mst,"__init__()"),mst.forEach(t),JVo=r(cSe," (throws an error)."),cSe.forEach(t),YVo=i(kl),dt=s(kl,"DIV",{class:!0});var Rl=n(dt);f(oA.$$.fragment,Rl),KVo=i(Rl),Gce=s(Rl,"P",{});var fst=n(Gce);ZVo=r(fst,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fst.forEach(t),ezo=i(Rl),tc=s(Rl,"P",{});var dW=n(tc);ozo=r(dW,`Note:
Loading a model from its configuration file does `),Xce=s(dW,"STRONG",{});var gst=n(Xce);rzo=r(gst,"not"),gst.forEach(t),tzo=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=s(dW,"CODE",{});var hst=n(Vce);azo=r(hst,"from_pretrained()"),hst.forEach(t),szo=r(dW,"to load the model weights."),dW.forEach(t),nzo=i(Rl),zce=s(Rl,"P",{});var ust=n(zce);lzo=r(ust,"Examples:"),ust.forEach(t),izo=i(Rl),f(rA.$$.fragment,Rl),Rl.forEach(t),dzo=i(kl),ro=s(kl,"DIV",{class:!0});var sa=n(ro);f(tA.$$.fragment,sa),czo=i(sa),Wce=s(sa,"P",{});var pst=n(Wce);mzo=r(pst,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pst.forEach(t),fzo=i(sa),ms=s(sa,"P",{});var _5=n(ms);gzo=r(_5,"The model class to instantiate is selected based on the "),Qce=s(_5,"CODE",{});var _st=n(Qce);hzo=r(_st,"model_type"),_st.forEach(t),uzo=r(_5,` property of the config object (either
passed as an argument or loaded from `),Hce=s(_5,"CODE",{});var bst=n(Hce);pzo=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),_zo=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=s(_5,"CODE",{});var vst=n(Uce);bzo=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),vzo=r(_5,":"),_5.forEach(t),Tzo=i(sa),Jce=s(sa,"UL",{});var Tst=n(Jce);V1=s(Tst,"LI",{});var A0e=n(V1);Yce=s(A0e,"STRONG",{});var Fst=n(Yce);Fzo=r(Fst,"detr"),Fst.forEach(t),Czo=r(A0e," \u2014 "),QN=s(A0e,"A",{href:!0});var Cst=n(QN);Mzo=r(Cst,"DetrForObjectDetection"),Cst.forEach(t),Ezo=r(A0e," (DETR model)"),A0e.forEach(t),Tst.forEach(t),yzo=i(sa),z1=s(sa,"P",{});var L0e=n(z1);wzo=r(L0e,"The model is set in evaluation mode by default using "),Kce=s(L0e,"CODE",{});var Mst=n(Kce);Azo=r(Mst,"model.eval()"),Mst.forEach(t),Lzo=r(L0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=s(L0e,"CODE",{});var Est=n(Zce);Bzo=r(Est,"model.train()"),Est.forEach(t),L0e.forEach(t),xzo=i(sa),eme=s(sa,"P",{});var yst=n(eme);kzo=r(yst,"Examples:"),yst.forEach(t),Rzo=i(sa),f(aA.$$.fragment,sa),sa.forEach(t),kl.forEach(t),oke=i(d),ac=s(d,"H2",{class:!0});var mSe=n(ac);W1=s(mSe,"A",{id:!0,class:!0,href:!0});var wst=n(W1);ome=s(wst,"SPAN",{});var Ast=n(ome);f(sA.$$.fragment,Ast),Ast.forEach(t),wst.forEach(t),Szo=i(mSe),rme=s(mSe,"SPAN",{});var Lst=n(rme);Pzo=r(Lst,"AutoModelForImageSegmentation"),Lst.forEach(t),mSe.forEach(t),rke=i(d),pr=s(d,"DIV",{class:!0});var Sl=n(pr);f(nA.$$.fragment,Sl),$zo=i(Sl),sc=s(Sl,"P",{});var cW=n(sc);Izo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tme=s(cW,"CODE",{});var Bst=n(tme);jzo=r(Bst,"from_pretrained()"),Bst.forEach(t),Dzo=r(cW,"class method or the "),ame=s(cW,"CODE",{});var xst=n(ame);Nzo=r(xst,"from_config()"),xst.forEach(t),qzo=r(cW,`class
method.`),cW.forEach(t),Ozo=i(Sl),lA=s(Sl,"P",{});var fSe=n(lA);Gzo=r(fSe,"This class cannot be instantiated directly using "),sme=s(fSe,"CODE",{});var kst=n(sme);Xzo=r(kst,"__init__()"),kst.forEach(t),Vzo=r(fSe," (throws an error)."),fSe.forEach(t),zzo=i(Sl),ct=s(Sl,"DIV",{class:!0});var Pl=n(ct);f(iA.$$.fragment,Pl),Wzo=i(Pl),nme=s(Pl,"P",{});var Rst=n(nme);Qzo=r(Rst,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rst.forEach(t),Hzo=i(Pl),nc=s(Pl,"P",{});var mW=n(nc);Uzo=r(mW,`Note:
Loading a model from its configuration file does `),lme=s(mW,"STRONG",{});var Sst=n(lme);Jzo=r(Sst,"not"),Sst.forEach(t),Yzo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=s(mW,"CODE",{});var Pst=n(ime);Kzo=r(Pst,"from_pretrained()"),Pst.forEach(t),Zzo=r(mW,"to load the model weights."),mW.forEach(t),eWo=i(Pl),dme=s(Pl,"P",{});var $st=n(dme);oWo=r($st,"Examples:"),$st.forEach(t),rWo=i(Pl),f(dA.$$.fragment,Pl),Pl.forEach(t),tWo=i(Sl),to=s(Sl,"DIV",{class:!0});var na=n(to);f(cA.$$.fragment,na),aWo=i(na),cme=s(na,"P",{});var Ist=n(cme);sWo=r(Ist,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ist.forEach(t),nWo=i(na),fs=s(na,"P",{});var b5=n(fs);lWo=r(b5,"The model class to instantiate is selected based on the "),mme=s(b5,"CODE",{});var jst=n(mme);iWo=r(jst,"model_type"),jst.forEach(t),dWo=r(b5,` property of the config object (either
passed as an argument or loaded from `),fme=s(b5,"CODE",{});var Dst=n(fme);cWo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),mWo=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=s(b5,"CODE",{});var Nst=n(gme);fWo=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),gWo=r(b5,":"),b5.forEach(t),hWo=i(na),hme=s(na,"UL",{});var qst=n(hme);Q1=s(qst,"LI",{});var B0e=n(Q1);ume=s(B0e,"STRONG",{});var Ost=n(ume);uWo=r(Ost,"detr"),Ost.forEach(t),pWo=r(B0e," \u2014 "),HN=s(B0e,"A",{href:!0});var Gst=n(HN);_Wo=r(Gst,"DetrForSegmentation"),Gst.forEach(t),bWo=r(B0e," (DETR model)"),B0e.forEach(t),qst.forEach(t),vWo=i(na),H1=s(na,"P",{});var x0e=n(H1);TWo=r(x0e,"The model is set in evaluation mode by default using "),pme=s(x0e,"CODE",{});var Xst=n(pme);FWo=r(Xst,"model.eval()"),Xst.forEach(t),CWo=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=s(x0e,"CODE",{});var Vst=n(_me);MWo=r(Vst,"model.train()"),Vst.forEach(t),x0e.forEach(t),EWo=i(na),bme=s(na,"P",{});var zst=n(bme);yWo=r(zst,"Examples:"),zst.forEach(t),wWo=i(na),f(mA.$$.fragment,na),na.forEach(t),Sl.forEach(t),tke=i(d),lc=s(d,"H2",{class:!0});var gSe=n(lc);U1=s(gSe,"A",{id:!0,class:!0,href:!0});var Wst=n(U1);vme=s(Wst,"SPAN",{});var Qst=n(vme);f(fA.$$.fragment,Qst),Qst.forEach(t),Wst.forEach(t),AWo=i(gSe),Tme=s(gSe,"SPAN",{});var Hst=n(Tme);LWo=r(Hst,"AutoModelForSemanticSegmentation"),Hst.forEach(t),gSe.forEach(t),ake=i(d),_r=s(d,"DIV",{class:!0});var $l=n(_r);f(gA.$$.fragment,$l),BWo=i($l),ic=s($l,"P",{});var fW=n(ic);xWo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fme=s(fW,"CODE",{});var Ust=n(Fme);kWo=r(Ust,"from_pretrained()"),Ust.forEach(t),RWo=r(fW,"class method or the "),Cme=s(fW,"CODE",{});var Jst=n(Cme);SWo=r(Jst,"from_config()"),Jst.forEach(t),PWo=r(fW,`class
method.`),fW.forEach(t),$Wo=i($l),hA=s($l,"P",{});var hSe=n(hA);IWo=r(hSe,"This class cannot be instantiated directly using "),Mme=s(hSe,"CODE",{});var Yst=n(Mme);jWo=r(Yst,"__init__()"),Yst.forEach(t),DWo=r(hSe," (throws an error)."),hSe.forEach(t),NWo=i($l),mt=s($l,"DIV",{class:!0});var Il=n(mt);f(uA.$$.fragment,Il),qWo=i(Il),Eme=s(Il,"P",{});var Kst=n(Eme);OWo=r(Kst,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kst.forEach(t),GWo=i(Il),dc=s(Il,"P",{});var gW=n(dc);XWo=r(gW,`Note:
Loading a model from its configuration file does `),yme=s(gW,"STRONG",{});var Zst=n(yme);VWo=r(Zst,"not"),Zst.forEach(t),zWo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wme=s(gW,"CODE",{});var ent=n(wme);WWo=r(ent,"from_pretrained()"),ent.forEach(t),QWo=r(gW,"to load the model weights."),gW.forEach(t),HWo=i(Il),Ame=s(Il,"P",{});var ont=n(Ame);UWo=r(ont,"Examples:"),ont.forEach(t),JWo=i(Il),f(pA.$$.fragment,Il),Il.forEach(t),YWo=i($l),ao=s($l,"DIV",{class:!0});var la=n(ao);f(_A.$$.fragment,la),KWo=i(la),Lme=s(la,"P",{});var rnt=n(Lme);ZWo=r(rnt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rnt.forEach(t),eQo=i(la),gs=s(la,"P",{});var v5=n(gs);oQo=r(v5,"The model class to instantiate is selected based on the "),Bme=s(v5,"CODE",{});var tnt=n(Bme);rQo=r(tnt,"model_type"),tnt.forEach(t),tQo=r(v5,` property of the config object (either
passed as an argument or loaded from `),xme=s(v5,"CODE",{});var ant=n(xme);aQo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),sQo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=s(v5,"CODE",{});var snt=n(kme);nQo=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),lQo=r(v5,":"),v5.forEach(t),iQo=i(la),bA=s(la,"UL",{});var uSe=n(bA);J1=s(uSe,"LI",{});var k0e=n(J1);Rme=s(k0e,"STRONG",{});var nnt=n(Rme);dQo=r(nnt,"beit"),nnt.forEach(t),cQo=r(k0e," \u2014 "),UN=s(k0e,"A",{href:!0});var lnt=n(UN);mQo=r(lnt,"BeitForSemanticSegmentation"),lnt.forEach(t),fQo=r(k0e," (BEiT model)"),k0e.forEach(t),gQo=i(uSe),Y1=s(uSe,"LI",{});var R0e=n(Y1);Sme=s(R0e,"STRONG",{});var int=n(Sme);hQo=r(int,"segformer"),int.forEach(t),uQo=r(R0e," \u2014 "),JN=s(R0e,"A",{href:!0});var dnt=n(JN);pQo=r(dnt,"SegformerForSemanticSegmentation"),dnt.forEach(t),_Qo=r(R0e," (SegFormer model)"),R0e.forEach(t),uSe.forEach(t),bQo=i(la),K1=s(la,"P",{});var S0e=n(K1);vQo=r(S0e,"The model is set in evaluation mode by default using "),Pme=s(S0e,"CODE",{});var cnt=n(Pme);TQo=r(cnt,"model.eval()"),cnt.forEach(t),FQo=r(S0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=s(S0e,"CODE",{});var mnt=n($me);CQo=r(mnt,"model.train()"),mnt.forEach(t),S0e.forEach(t),MQo=i(la),Ime=s(la,"P",{});var fnt=n(Ime);EQo=r(fnt,"Examples:"),fnt.forEach(t),yQo=i(la),f(vA.$$.fragment,la),la.forEach(t),$l.forEach(t),ske=i(d),cc=s(d,"H2",{class:!0});var pSe=n(cc);Z1=s(pSe,"A",{id:!0,class:!0,href:!0});var gnt=n(Z1);jme=s(gnt,"SPAN",{});var hnt=n(jme);f(TA.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),wQo=i(pSe),Dme=s(pSe,"SPAN",{});var unt=n(Dme);AQo=r(unt,"AutoModelForInstanceSegmentation"),unt.forEach(t),pSe.forEach(t),nke=i(d),br=s(d,"DIV",{class:!0});var jl=n(br);f(FA.$$.fragment,jl),LQo=i(jl),mc=s(jl,"P",{});var hW=n(mc);BQo=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Nme=s(hW,"CODE",{});var pnt=n(Nme);xQo=r(pnt,"from_pretrained()"),pnt.forEach(t),kQo=r(hW,"class method or the "),qme=s(hW,"CODE",{});var _nt=n(qme);RQo=r(_nt,"from_config()"),_nt.forEach(t),SQo=r(hW,`class
method.`),hW.forEach(t),PQo=i(jl),CA=s(jl,"P",{});var _Se=n(CA);$Qo=r(_Se,"This class cannot be instantiated directly using "),Ome=s(_Se,"CODE",{});var bnt=n(Ome);IQo=r(bnt,"__init__()"),bnt.forEach(t),jQo=r(_Se," (throws an error)."),_Se.forEach(t),DQo=i(jl),ft=s(jl,"DIV",{class:!0});var Dl=n(ft);f(MA.$$.fragment,Dl),NQo=i(Dl),Gme=s(Dl,"P",{});var vnt=n(Gme);qQo=r(vnt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vnt.forEach(t),OQo=i(Dl),fc=s(Dl,"P",{});var uW=n(fc);GQo=r(uW,`Note:
Loading a model from its configuration file does `),Xme=s(uW,"STRONG",{});var Tnt=n(Xme);XQo=r(Tnt,"not"),Tnt.forEach(t),VQo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vme=s(uW,"CODE",{});var Fnt=n(Vme);zQo=r(Fnt,"from_pretrained()"),Fnt.forEach(t),WQo=r(uW,"to load the model weights."),uW.forEach(t),QQo=i(Dl),zme=s(Dl,"P",{});var Cnt=n(zme);HQo=r(Cnt,"Examples:"),Cnt.forEach(t),UQo=i(Dl),f(EA.$$.fragment,Dl),Dl.forEach(t),JQo=i(jl),so=s(jl,"DIV",{class:!0});var ia=n(so);f(yA.$$.fragment,ia),YQo=i(ia),Wme=s(ia,"P",{});var Mnt=n(Wme);KQo=r(Mnt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mnt.forEach(t),ZQo=i(ia),hs=s(ia,"P",{});var T5=n(hs);eHo=r(T5,"The model class to instantiate is selected based on the "),Qme=s(T5,"CODE",{});var Ent=n(Qme);oHo=r(Ent,"model_type"),Ent.forEach(t),rHo=r(T5,` property of the config object (either
passed as an argument or loaded from `),Hme=s(T5,"CODE",{});var ynt=n(Hme);tHo=r(ynt,"pretrained_model_name_or_path"),ynt.forEach(t),aHo=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=s(T5,"CODE",{});var wnt=n(Ume);sHo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),nHo=r(T5,":"),T5.forEach(t),lHo=i(ia),Jme=s(ia,"UL",{});var Ant=n(Jme);eF=s(Ant,"LI",{});var P0e=n(eF);Yme=s(P0e,"STRONG",{});var Lnt=n(Yme);iHo=r(Lnt,"maskformer"),Lnt.forEach(t),dHo=r(P0e," \u2014 "),YN=s(P0e,"A",{href:!0});var Bnt=n(YN);cHo=r(Bnt,"MaskFormerForInstanceSegmentation"),Bnt.forEach(t),mHo=r(P0e," (MaskFormer model)"),P0e.forEach(t),Ant.forEach(t),fHo=i(ia),oF=s(ia,"P",{});var $0e=n(oF);gHo=r($0e,"The model is set in evaluation mode by default using "),Kme=s($0e,"CODE",{});var xnt=n(Kme);hHo=r(xnt,"model.eval()"),xnt.forEach(t),uHo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=s($0e,"CODE",{});var knt=n(Zme);pHo=r(knt,"model.train()"),knt.forEach(t),$0e.forEach(t),_Ho=i(ia),efe=s(ia,"P",{});var Rnt=n(efe);bHo=r(Rnt,"Examples:"),Rnt.forEach(t),vHo=i(ia),f(wA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),lke=i(d),gc=s(d,"H2",{class:!0});var bSe=n(gc);rF=s(bSe,"A",{id:!0,class:!0,href:!0});var Snt=n(rF);ofe=s(Snt,"SPAN",{});var Pnt=n(ofe);f(AA.$$.fragment,Pnt),Pnt.forEach(t),Snt.forEach(t),THo=i(bSe),rfe=s(bSe,"SPAN",{});var $nt=n(rfe);FHo=r($nt,"TFAutoModel"),$nt.forEach(t),bSe.forEach(t),ike=i(d),vr=s(d,"DIV",{class:!0});var Nl=n(vr);f(LA.$$.fragment,Nl),CHo=i(Nl),hc=s(Nl,"P",{});var pW=n(hc);MHo=r(pW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tfe=s(pW,"CODE",{});var Int=n(tfe);EHo=r(Int,"from_pretrained()"),Int.forEach(t),yHo=r(pW,"class method or the "),afe=s(pW,"CODE",{});var jnt=n(afe);wHo=r(jnt,"from_config()"),jnt.forEach(t),AHo=r(pW,`class
method.`),pW.forEach(t),LHo=i(Nl),BA=s(Nl,"P",{});var vSe=n(BA);BHo=r(vSe,"This class cannot be instantiated directly using "),sfe=s(vSe,"CODE",{});var Dnt=n(sfe);xHo=r(Dnt,"__init__()"),Dnt.forEach(t),kHo=r(vSe," (throws an error)."),vSe.forEach(t),RHo=i(Nl),gt=s(Nl,"DIV",{class:!0});var ql=n(gt);f(xA.$$.fragment,ql),SHo=i(ql),nfe=s(ql,"P",{});var Nnt=n(nfe);PHo=r(Nnt,"Instantiates one of the base model classes of the library from a configuration."),Nnt.forEach(t),$Ho=i(ql),uc=s(ql,"P",{});var _W=n(uc);IHo=r(_W,`Note:
Loading a model from its configuration file does `),lfe=s(_W,"STRONG",{});var qnt=n(lfe);jHo=r(qnt,"not"),qnt.forEach(t),DHo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=s(_W,"CODE",{});var Ont=n(ife);NHo=r(Ont,"from_pretrained()"),Ont.forEach(t),qHo=r(_W,"to load the model weights."),_W.forEach(t),OHo=i(ql),dfe=s(ql,"P",{});var Gnt=n(dfe);GHo=r(Gnt,"Examples:"),Gnt.forEach(t),XHo=i(ql),f(kA.$$.fragment,ql),ql.forEach(t),VHo=i(Nl),ho=s(Nl,"DIV",{class:!0});var ua=n(ho);f(RA.$$.fragment,ua),zHo=i(ua),cfe=s(ua,"P",{});var Xnt=n(cfe);WHo=r(Xnt,"Instantiate one of the base model classes of the library from a pretrained model."),Xnt.forEach(t),QHo=i(ua),us=s(ua,"P",{});var F5=n(us);HHo=r(F5,"The model class to instantiate is selected based on the "),mfe=s(F5,"CODE",{});var Vnt=n(mfe);UHo=r(Vnt,"model_type"),Vnt.forEach(t),JHo=r(F5,` property of the config object (either
passed as an argument or loaded from `),ffe=s(F5,"CODE",{});var znt=n(ffe);YHo=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),KHo=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=s(F5,"CODE",{});var Wnt=n(gfe);ZHo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),eUo=r(F5,":"),F5.forEach(t),oUo=i(ua),B=s(ua,"UL",{});var x=n(B);tF=s(x,"LI",{});var I0e=n(tF);hfe=s(I0e,"STRONG",{});var Qnt=n(hfe);rUo=r(Qnt,"albert"),Qnt.forEach(t),tUo=r(I0e," \u2014 "),KN=s(I0e,"A",{href:!0});var Hnt=n(KN);aUo=r(Hnt,"TFAlbertModel"),Hnt.forEach(t),sUo=r(I0e," (ALBERT model)"),I0e.forEach(t),nUo=i(x),aF=s(x,"LI",{});var j0e=n(aF);ufe=s(j0e,"STRONG",{});var Unt=n(ufe);lUo=r(Unt,"bart"),Unt.forEach(t),iUo=r(j0e," \u2014 "),ZN=s(j0e,"A",{href:!0});var Jnt=n(ZN);dUo=r(Jnt,"TFBartModel"),Jnt.forEach(t),cUo=r(j0e," (BART model)"),j0e.forEach(t),mUo=i(x),sF=s(x,"LI",{});var D0e=n(sF);pfe=s(D0e,"STRONG",{});var Ynt=n(pfe);fUo=r(Ynt,"bert"),Ynt.forEach(t),gUo=r(D0e," \u2014 "),eq=s(D0e,"A",{href:!0});var Knt=n(eq);hUo=r(Knt,"TFBertModel"),Knt.forEach(t),uUo=r(D0e," (BERT model)"),D0e.forEach(t),pUo=i(x),nF=s(x,"LI",{});var N0e=n(nF);_fe=s(N0e,"STRONG",{});var Znt=n(_fe);_Uo=r(Znt,"blenderbot"),Znt.forEach(t),bUo=r(N0e," \u2014 "),oq=s(N0e,"A",{href:!0});var elt=n(oq);vUo=r(elt,"TFBlenderbotModel"),elt.forEach(t),TUo=r(N0e," (Blenderbot model)"),N0e.forEach(t),FUo=i(x),lF=s(x,"LI",{});var q0e=n(lF);bfe=s(q0e,"STRONG",{});var olt=n(bfe);CUo=r(olt,"blenderbot-small"),olt.forEach(t),MUo=r(q0e," \u2014 "),rq=s(q0e,"A",{href:!0});var rlt=n(rq);EUo=r(rlt,"TFBlenderbotSmallModel"),rlt.forEach(t),yUo=r(q0e," (BlenderbotSmall model)"),q0e.forEach(t),wUo=i(x),iF=s(x,"LI",{});var O0e=n(iF);vfe=s(O0e,"STRONG",{});var tlt=n(vfe);AUo=r(tlt,"camembert"),tlt.forEach(t),LUo=r(O0e," \u2014 "),tq=s(O0e,"A",{href:!0});var alt=n(tq);BUo=r(alt,"TFCamembertModel"),alt.forEach(t),xUo=r(O0e," (CamemBERT model)"),O0e.forEach(t),kUo=i(x),dF=s(x,"LI",{});var G0e=n(dF);Tfe=s(G0e,"STRONG",{});var slt=n(Tfe);RUo=r(slt,"clip"),slt.forEach(t),SUo=r(G0e," \u2014 "),aq=s(G0e,"A",{href:!0});var nlt=n(aq);PUo=r(nlt,"TFCLIPModel"),nlt.forEach(t),$Uo=r(G0e," (CLIP model)"),G0e.forEach(t),IUo=i(x),cF=s(x,"LI",{});var X0e=n(cF);Ffe=s(X0e,"STRONG",{});var llt=n(Ffe);jUo=r(llt,"convbert"),llt.forEach(t),DUo=r(X0e," \u2014 "),sq=s(X0e,"A",{href:!0});var ilt=n(sq);NUo=r(ilt,"TFConvBertModel"),ilt.forEach(t),qUo=r(X0e," (ConvBERT model)"),X0e.forEach(t),OUo=i(x),mF=s(x,"LI",{});var V0e=n(mF);Cfe=s(V0e,"STRONG",{});var dlt=n(Cfe);GUo=r(dlt,"convnext"),dlt.forEach(t),XUo=r(V0e," \u2014 "),nq=s(V0e,"A",{href:!0});var clt=n(nq);VUo=r(clt,"TFConvNextModel"),clt.forEach(t),zUo=r(V0e," (ConvNext model)"),V0e.forEach(t),WUo=i(x),fF=s(x,"LI",{});var z0e=n(fF);Mfe=s(z0e,"STRONG",{});var mlt=n(Mfe);QUo=r(mlt,"ctrl"),mlt.forEach(t),HUo=r(z0e," \u2014 "),lq=s(z0e,"A",{href:!0});var flt=n(lq);UUo=r(flt,"TFCTRLModel"),flt.forEach(t),JUo=r(z0e," (CTRL model)"),z0e.forEach(t),YUo=i(x),gF=s(x,"LI",{});var W0e=n(gF);Efe=s(W0e,"STRONG",{});var glt=n(Efe);KUo=r(glt,"deberta"),glt.forEach(t),ZUo=r(W0e," \u2014 "),iq=s(W0e,"A",{href:!0});var hlt=n(iq);eJo=r(hlt,"TFDebertaModel"),hlt.forEach(t),oJo=r(W0e," (DeBERTa model)"),W0e.forEach(t),rJo=i(x),hF=s(x,"LI",{});var Q0e=n(hF);yfe=s(Q0e,"STRONG",{});var ult=n(yfe);tJo=r(ult,"deberta-v2"),ult.forEach(t),aJo=r(Q0e," \u2014 "),dq=s(Q0e,"A",{href:!0});var plt=n(dq);sJo=r(plt,"TFDebertaV2Model"),plt.forEach(t),nJo=r(Q0e," (DeBERTa-v2 model)"),Q0e.forEach(t),lJo=i(x),uF=s(x,"LI",{});var H0e=n(uF);wfe=s(H0e,"STRONG",{});var _lt=n(wfe);iJo=r(_lt,"distilbert"),_lt.forEach(t),dJo=r(H0e," \u2014 "),cq=s(H0e,"A",{href:!0});var blt=n(cq);cJo=r(blt,"TFDistilBertModel"),blt.forEach(t),mJo=r(H0e," (DistilBERT model)"),H0e.forEach(t),fJo=i(x),pF=s(x,"LI",{});var U0e=n(pF);Afe=s(U0e,"STRONG",{});var vlt=n(Afe);gJo=r(vlt,"dpr"),vlt.forEach(t),hJo=r(U0e," \u2014 "),mq=s(U0e,"A",{href:!0});var Tlt=n(mq);uJo=r(Tlt,"TFDPRQuestionEncoder"),Tlt.forEach(t),pJo=r(U0e," (DPR model)"),U0e.forEach(t),_Jo=i(x),_F=s(x,"LI",{});var J0e=n(_F);Lfe=s(J0e,"STRONG",{});var Flt=n(Lfe);bJo=r(Flt,"electra"),Flt.forEach(t),vJo=r(J0e," \u2014 "),fq=s(J0e,"A",{href:!0});var Clt=n(fq);TJo=r(Clt,"TFElectraModel"),Clt.forEach(t),FJo=r(J0e," (ELECTRA model)"),J0e.forEach(t),CJo=i(x),bF=s(x,"LI",{});var Y0e=n(bF);Bfe=s(Y0e,"STRONG",{});var Mlt=n(Bfe);MJo=r(Mlt,"flaubert"),Mlt.forEach(t),EJo=r(Y0e," \u2014 "),gq=s(Y0e,"A",{href:!0});var Elt=n(gq);yJo=r(Elt,"TFFlaubertModel"),Elt.forEach(t),wJo=r(Y0e," (FlauBERT model)"),Y0e.forEach(t),AJo=i(x),On=s(x,"LI",{});var D7=n(On);xfe=s(D7,"STRONG",{});var ylt=n(xfe);LJo=r(ylt,"funnel"),ylt.forEach(t),BJo=r(D7," \u2014 "),hq=s(D7,"A",{href:!0});var wlt=n(hq);xJo=r(wlt,"TFFunnelModel"),wlt.forEach(t),kJo=r(D7," or "),uq=s(D7,"A",{href:!0});var Alt=n(uq);RJo=r(Alt,"TFFunnelBaseModel"),Alt.forEach(t),SJo=r(D7," (Funnel Transformer model)"),D7.forEach(t),PJo=i(x),vF=s(x,"LI",{});var K0e=n(vF);kfe=s(K0e,"STRONG",{});var Llt=n(kfe);$Jo=r(Llt,"gpt2"),Llt.forEach(t),IJo=r(K0e," \u2014 "),pq=s(K0e,"A",{href:!0});var Blt=n(pq);jJo=r(Blt,"TFGPT2Model"),Blt.forEach(t),DJo=r(K0e," (OpenAI GPT-2 model)"),K0e.forEach(t),NJo=i(x),TF=s(x,"LI",{});var Z0e=n(TF);Rfe=s(Z0e,"STRONG",{});var xlt=n(Rfe);qJo=r(xlt,"hubert"),xlt.forEach(t),OJo=r(Z0e," \u2014 "),_q=s(Z0e,"A",{href:!0});var klt=n(_q);GJo=r(klt,"TFHubertModel"),klt.forEach(t),XJo=r(Z0e," (Hubert model)"),Z0e.forEach(t),VJo=i(x),FF=s(x,"LI",{});var eLe=n(FF);Sfe=s(eLe,"STRONG",{});var Rlt=n(Sfe);zJo=r(Rlt,"layoutlm"),Rlt.forEach(t),WJo=r(eLe," \u2014 "),bq=s(eLe,"A",{href:!0});var Slt=n(bq);QJo=r(Slt,"TFLayoutLMModel"),Slt.forEach(t),HJo=r(eLe," (LayoutLM model)"),eLe.forEach(t),UJo=i(x),CF=s(x,"LI",{});var oLe=n(CF);Pfe=s(oLe,"STRONG",{});var Plt=n(Pfe);JJo=r(Plt,"led"),Plt.forEach(t),YJo=r(oLe," \u2014 "),vq=s(oLe,"A",{href:!0});var $lt=n(vq);KJo=r($lt,"TFLEDModel"),$lt.forEach(t),ZJo=r(oLe," (LED model)"),oLe.forEach(t),eYo=i(x),MF=s(x,"LI",{});var rLe=n(MF);$fe=s(rLe,"STRONG",{});var Ilt=n($fe);oYo=r(Ilt,"longformer"),Ilt.forEach(t),rYo=r(rLe," \u2014 "),Tq=s(rLe,"A",{href:!0});var jlt=n(Tq);tYo=r(jlt,"TFLongformerModel"),jlt.forEach(t),aYo=r(rLe," (Longformer model)"),rLe.forEach(t),sYo=i(x),EF=s(x,"LI",{});var tLe=n(EF);Ife=s(tLe,"STRONG",{});var Dlt=n(Ife);nYo=r(Dlt,"lxmert"),Dlt.forEach(t),lYo=r(tLe," \u2014 "),Fq=s(tLe,"A",{href:!0});var Nlt=n(Fq);iYo=r(Nlt,"TFLxmertModel"),Nlt.forEach(t),dYo=r(tLe," (LXMERT model)"),tLe.forEach(t),cYo=i(x),yF=s(x,"LI",{});var aLe=n(yF);jfe=s(aLe,"STRONG",{});var qlt=n(jfe);mYo=r(qlt,"marian"),qlt.forEach(t),fYo=r(aLe," \u2014 "),Cq=s(aLe,"A",{href:!0});var Olt=n(Cq);gYo=r(Olt,"TFMarianModel"),Olt.forEach(t),hYo=r(aLe," (Marian model)"),aLe.forEach(t),uYo=i(x),wF=s(x,"LI",{});var sLe=n(wF);Dfe=s(sLe,"STRONG",{});var Glt=n(Dfe);pYo=r(Glt,"mbart"),Glt.forEach(t),_Yo=r(sLe," \u2014 "),Mq=s(sLe,"A",{href:!0});var Xlt=n(Mq);bYo=r(Xlt,"TFMBartModel"),Xlt.forEach(t),vYo=r(sLe," (mBART model)"),sLe.forEach(t),TYo=i(x),AF=s(x,"LI",{});var nLe=n(AF);Nfe=s(nLe,"STRONG",{});var Vlt=n(Nfe);FYo=r(Vlt,"mobilebert"),Vlt.forEach(t),CYo=r(nLe," \u2014 "),Eq=s(nLe,"A",{href:!0});var zlt=n(Eq);MYo=r(zlt,"TFMobileBertModel"),zlt.forEach(t),EYo=r(nLe," (MobileBERT model)"),nLe.forEach(t),yYo=i(x),LF=s(x,"LI",{});var lLe=n(LF);qfe=s(lLe,"STRONG",{});var Wlt=n(qfe);wYo=r(Wlt,"mpnet"),Wlt.forEach(t),AYo=r(lLe," \u2014 "),yq=s(lLe,"A",{href:!0});var Qlt=n(yq);LYo=r(Qlt,"TFMPNetModel"),Qlt.forEach(t),BYo=r(lLe," (MPNet model)"),lLe.forEach(t),xYo=i(x),BF=s(x,"LI",{});var iLe=n(BF);Ofe=s(iLe,"STRONG",{});var Hlt=n(Ofe);kYo=r(Hlt,"mt5"),Hlt.forEach(t),RYo=r(iLe," \u2014 "),wq=s(iLe,"A",{href:!0});var Ult=n(wq);SYo=r(Ult,"TFMT5Model"),Ult.forEach(t),PYo=r(iLe," (mT5 model)"),iLe.forEach(t),$Yo=i(x),xF=s(x,"LI",{});var dLe=n(xF);Gfe=s(dLe,"STRONG",{});var Jlt=n(Gfe);IYo=r(Jlt,"openai-gpt"),Jlt.forEach(t),jYo=r(dLe," \u2014 "),Aq=s(dLe,"A",{href:!0});var Ylt=n(Aq);DYo=r(Ylt,"TFOpenAIGPTModel"),Ylt.forEach(t),NYo=r(dLe," (OpenAI GPT model)"),dLe.forEach(t),qYo=i(x),kF=s(x,"LI",{});var cLe=n(kF);Xfe=s(cLe,"STRONG",{});var Klt=n(Xfe);OYo=r(Klt,"pegasus"),Klt.forEach(t),GYo=r(cLe," \u2014 "),Lq=s(cLe,"A",{href:!0});var Zlt=n(Lq);XYo=r(Zlt,"TFPegasusModel"),Zlt.forEach(t),VYo=r(cLe," (Pegasus model)"),cLe.forEach(t),zYo=i(x),RF=s(x,"LI",{});var mLe=n(RF);Vfe=s(mLe,"STRONG",{});var eit=n(Vfe);WYo=r(eit,"rembert"),eit.forEach(t),QYo=r(mLe," \u2014 "),Bq=s(mLe,"A",{href:!0});var oit=n(Bq);HYo=r(oit,"TFRemBertModel"),oit.forEach(t),UYo=r(mLe," (RemBERT model)"),mLe.forEach(t),JYo=i(x),SF=s(x,"LI",{});var fLe=n(SF);zfe=s(fLe,"STRONG",{});var rit=n(zfe);YYo=r(rit,"roberta"),rit.forEach(t),KYo=r(fLe," \u2014 "),xq=s(fLe,"A",{href:!0});var tit=n(xq);ZYo=r(tit,"TFRobertaModel"),tit.forEach(t),eKo=r(fLe," (RoBERTa model)"),fLe.forEach(t),oKo=i(x),PF=s(x,"LI",{});var gLe=n(PF);Wfe=s(gLe,"STRONG",{});var ait=n(Wfe);rKo=r(ait,"roformer"),ait.forEach(t),tKo=r(gLe," \u2014 "),kq=s(gLe,"A",{href:!0});var sit=n(kq);aKo=r(sit,"TFRoFormerModel"),sit.forEach(t),sKo=r(gLe," (RoFormer model)"),gLe.forEach(t),nKo=i(x),$F=s(x,"LI",{});var hLe=n($F);Qfe=s(hLe,"STRONG",{});var nit=n(Qfe);lKo=r(nit,"speech_to_text"),nit.forEach(t),iKo=r(hLe," \u2014 "),Rq=s(hLe,"A",{href:!0});var lit=n(Rq);dKo=r(lit,"TFSpeech2TextModel"),lit.forEach(t),cKo=r(hLe," (Speech2Text model)"),hLe.forEach(t),mKo=i(x),IF=s(x,"LI",{});var uLe=n(IF);Hfe=s(uLe,"STRONG",{});var iit=n(Hfe);fKo=r(iit,"t5"),iit.forEach(t),gKo=r(uLe," \u2014 "),Sq=s(uLe,"A",{href:!0});var dit=n(Sq);hKo=r(dit,"TFT5Model"),dit.forEach(t),uKo=r(uLe," (T5 model)"),uLe.forEach(t),pKo=i(x),jF=s(x,"LI",{});var pLe=n(jF);Ufe=s(pLe,"STRONG",{});var cit=n(Ufe);_Ko=r(cit,"tapas"),cit.forEach(t),bKo=r(pLe," \u2014 "),Pq=s(pLe,"A",{href:!0});var mit=n(Pq);vKo=r(mit,"TFTapasModel"),mit.forEach(t),TKo=r(pLe," (TAPAS model)"),pLe.forEach(t),FKo=i(x),DF=s(x,"LI",{});var _Le=n(DF);Jfe=s(_Le,"STRONG",{});var fit=n(Jfe);CKo=r(fit,"transfo-xl"),fit.forEach(t),MKo=r(_Le," \u2014 "),$q=s(_Le,"A",{href:!0});var git=n($q);EKo=r(git,"TFTransfoXLModel"),git.forEach(t),yKo=r(_Le," (Transformer-XL model)"),_Le.forEach(t),wKo=i(x),NF=s(x,"LI",{});var bLe=n(NF);Yfe=s(bLe,"STRONG",{});var hit=n(Yfe);AKo=r(hit,"vit"),hit.forEach(t),LKo=r(bLe," \u2014 "),Iq=s(bLe,"A",{href:!0});var uit=n(Iq);BKo=r(uit,"TFViTModel"),uit.forEach(t),xKo=r(bLe," (ViT model)"),bLe.forEach(t),kKo=i(x),qF=s(x,"LI",{});var vLe=n(qF);Kfe=s(vLe,"STRONG",{});var pit=n(Kfe);RKo=r(pit,"wav2vec2"),pit.forEach(t),SKo=r(vLe," \u2014 "),jq=s(vLe,"A",{href:!0});var _it=n(jq);PKo=r(_it,"TFWav2Vec2Model"),_it.forEach(t),$Ko=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),IKo=i(x),OF=s(x,"LI",{});var TLe=n(OF);Zfe=s(TLe,"STRONG",{});var bit=n(Zfe);jKo=r(bit,"xlm"),bit.forEach(t),DKo=r(TLe," \u2014 "),Dq=s(TLe,"A",{href:!0});var vit=n(Dq);NKo=r(vit,"TFXLMModel"),vit.forEach(t),qKo=r(TLe," (XLM model)"),TLe.forEach(t),OKo=i(x),GF=s(x,"LI",{});var FLe=n(GF);ege=s(FLe,"STRONG",{});var Tit=n(ege);GKo=r(Tit,"xlm-roberta"),Tit.forEach(t),XKo=r(FLe," \u2014 "),Nq=s(FLe,"A",{href:!0});var Fit=n(Nq);VKo=r(Fit,"TFXLMRobertaModel"),Fit.forEach(t),zKo=r(FLe," (XLM-RoBERTa model)"),FLe.forEach(t),WKo=i(x),XF=s(x,"LI",{});var CLe=n(XF);oge=s(CLe,"STRONG",{});var Cit=n(oge);QKo=r(Cit,"xlnet"),Cit.forEach(t),HKo=r(CLe," \u2014 "),qq=s(CLe,"A",{href:!0});var Mit=n(qq);UKo=r(Mit,"TFXLNetModel"),Mit.forEach(t),JKo=r(CLe," (XLNet model)"),CLe.forEach(t),x.forEach(t),YKo=i(ua),rge=s(ua,"P",{});var Eit=n(rge);KKo=r(Eit,"Examples:"),Eit.forEach(t),ZKo=i(ua),f(SA.$$.fragment,ua),ua.forEach(t),Nl.forEach(t),dke=i(d),pc=s(d,"H2",{class:!0});var TSe=n(pc);VF=s(TSe,"A",{id:!0,class:!0,href:!0});var yit=n(VF);tge=s(yit,"SPAN",{});var wit=n(tge);f(PA.$$.fragment,wit),wit.forEach(t),yit.forEach(t),eZo=i(TSe),age=s(TSe,"SPAN",{});var Ait=n(age);oZo=r(Ait,"TFAutoModelForPreTraining"),Ait.forEach(t),TSe.forEach(t),cke=i(d),Tr=s(d,"DIV",{class:!0});var Ol=n(Tr);f($A.$$.fragment,Ol),rZo=i(Ol),_c=s(Ol,"P",{});var bW=n(_c);tZo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sge=s(bW,"CODE",{});var Lit=n(sge);aZo=r(Lit,"from_pretrained()"),Lit.forEach(t),sZo=r(bW,"class method or the "),nge=s(bW,"CODE",{});var Bit=n(nge);nZo=r(Bit,"from_config()"),Bit.forEach(t),lZo=r(bW,`class
method.`),bW.forEach(t),iZo=i(Ol),IA=s(Ol,"P",{});var FSe=n(IA);dZo=r(FSe,"This class cannot be instantiated directly using "),lge=s(FSe,"CODE",{});var xit=n(lge);cZo=r(xit,"__init__()"),xit.forEach(t),mZo=r(FSe," (throws an error)."),FSe.forEach(t),fZo=i(Ol),ht=s(Ol,"DIV",{class:!0});var Gl=n(ht);f(jA.$$.fragment,Gl),gZo=i(Gl),ige=s(Gl,"P",{});var kit=n(ige);hZo=r(kit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kit.forEach(t),uZo=i(Gl),bc=s(Gl,"P",{});var vW=n(bc);pZo=r(vW,`Note:
Loading a model from its configuration file does `),dge=s(vW,"STRONG",{});var Rit=n(dge);_Zo=r(Rit,"not"),Rit.forEach(t),bZo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=s(vW,"CODE",{});var Sit=n(cge);vZo=r(Sit,"from_pretrained()"),Sit.forEach(t),TZo=r(vW,"to load the model weights."),vW.forEach(t),FZo=i(Gl),mge=s(Gl,"P",{});var Pit=n(mge);CZo=r(Pit,"Examples:"),Pit.forEach(t),MZo=i(Gl),f(DA.$$.fragment,Gl),Gl.forEach(t),EZo=i(Ol),uo=s(Ol,"DIV",{class:!0});var pa=n(uo);f(NA.$$.fragment,pa),yZo=i(pa),fge=s(pa,"P",{});var $it=n(fge);wZo=r($it,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$it.forEach(t),AZo=i(pa),ps=s(pa,"P",{});var C5=n(ps);LZo=r(C5,"The model class to instantiate is selected based on the "),gge=s(C5,"CODE",{});var Iit=n(gge);BZo=r(Iit,"model_type"),Iit.forEach(t),xZo=r(C5,` property of the config object (either
passed as an argument or loaded from `),hge=s(C5,"CODE",{});var jit=n(hge);kZo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),RZo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=s(C5,"CODE",{});var Dit=n(uge);SZo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),PZo=r(C5,":"),C5.forEach(t),$Zo=i(pa),H=s(pa,"UL",{});var U=n(H);zF=s(U,"LI",{});var MLe=n(zF);pge=s(MLe,"STRONG",{});var Nit=n(pge);IZo=r(Nit,"albert"),Nit.forEach(t),jZo=r(MLe," \u2014 "),Oq=s(MLe,"A",{href:!0});var qit=n(Oq);DZo=r(qit,"TFAlbertForPreTraining"),qit.forEach(t),NZo=r(MLe," (ALBERT model)"),MLe.forEach(t),qZo=i(U),WF=s(U,"LI",{});var ELe=n(WF);_ge=s(ELe,"STRONG",{});var Oit=n(_ge);OZo=r(Oit,"bart"),Oit.forEach(t),GZo=r(ELe," \u2014 "),Gq=s(ELe,"A",{href:!0});var Git=n(Gq);XZo=r(Git,"TFBartForConditionalGeneration"),Git.forEach(t),VZo=r(ELe," (BART model)"),ELe.forEach(t),zZo=i(U),QF=s(U,"LI",{});var yLe=n(QF);bge=s(yLe,"STRONG",{});var Xit=n(bge);WZo=r(Xit,"bert"),Xit.forEach(t),QZo=r(yLe," \u2014 "),Xq=s(yLe,"A",{href:!0});var Vit=n(Xq);HZo=r(Vit,"TFBertForPreTraining"),Vit.forEach(t),UZo=r(yLe," (BERT model)"),yLe.forEach(t),JZo=i(U),HF=s(U,"LI",{});var wLe=n(HF);vge=s(wLe,"STRONG",{});var zit=n(vge);YZo=r(zit,"camembert"),zit.forEach(t),KZo=r(wLe," \u2014 "),Vq=s(wLe,"A",{href:!0});var Wit=n(Vq);ZZo=r(Wit,"TFCamembertForMaskedLM"),Wit.forEach(t),eer=r(wLe," (CamemBERT model)"),wLe.forEach(t),oer=i(U),UF=s(U,"LI",{});var ALe=n(UF);Tge=s(ALe,"STRONG",{});var Qit=n(Tge);rer=r(Qit,"ctrl"),Qit.forEach(t),ter=r(ALe," \u2014 "),zq=s(ALe,"A",{href:!0});var Hit=n(zq);aer=r(Hit,"TFCTRLLMHeadModel"),Hit.forEach(t),ser=r(ALe," (CTRL model)"),ALe.forEach(t),ner=i(U),JF=s(U,"LI",{});var LLe=n(JF);Fge=s(LLe,"STRONG",{});var Uit=n(Fge);ler=r(Uit,"distilbert"),Uit.forEach(t),ier=r(LLe," \u2014 "),Wq=s(LLe,"A",{href:!0});var Jit=n(Wq);der=r(Jit,"TFDistilBertForMaskedLM"),Jit.forEach(t),cer=r(LLe," (DistilBERT model)"),LLe.forEach(t),mer=i(U),YF=s(U,"LI",{});var BLe=n(YF);Cge=s(BLe,"STRONG",{});var Yit=n(Cge);fer=r(Yit,"electra"),Yit.forEach(t),ger=r(BLe," \u2014 "),Qq=s(BLe,"A",{href:!0});var Kit=n(Qq);her=r(Kit,"TFElectraForPreTraining"),Kit.forEach(t),uer=r(BLe," (ELECTRA model)"),BLe.forEach(t),per=i(U),KF=s(U,"LI",{});var xLe=n(KF);Mge=s(xLe,"STRONG",{});var Zit=n(Mge);_er=r(Zit,"flaubert"),Zit.forEach(t),ber=r(xLe," \u2014 "),Hq=s(xLe,"A",{href:!0});var edt=n(Hq);ver=r(edt,"TFFlaubertWithLMHeadModel"),edt.forEach(t),Ter=r(xLe," (FlauBERT model)"),xLe.forEach(t),Fer=i(U),ZF=s(U,"LI",{});var kLe=n(ZF);Ege=s(kLe,"STRONG",{});var odt=n(Ege);Cer=r(odt,"funnel"),odt.forEach(t),Mer=r(kLe," \u2014 "),Uq=s(kLe,"A",{href:!0});var rdt=n(Uq);Eer=r(rdt,"TFFunnelForPreTraining"),rdt.forEach(t),yer=r(kLe," (Funnel Transformer model)"),kLe.forEach(t),wer=i(U),eC=s(U,"LI",{});var RLe=n(eC);yge=s(RLe,"STRONG",{});var tdt=n(yge);Aer=r(tdt,"gpt2"),tdt.forEach(t),Ler=r(RLe," \u2014 "),Jq=s(RLe,"A",{href:!0});var adt=n(Jq);Ber=r(adt,"TFGPT2LMHeadModel"),adt.forEach(t),xer=r(RLe," (OpenAI GPT-2 model)"),RLe.forEach(t),ker=i(U),oC=s(U,"LI",{});var SLe=n(oC);wge=s(SLe,"STRONG",{});var sdt=n(wge);Rer=r(sdt,"layoutlm"),sdt.forEach(t),Ser=r(SLe," \u2014 "),Yq=s(SLe,"A",{href:!0});var ndt=n(Yq);Per=r(ndt,"TFLayoutLMForMaskedLM"),ndt.forEach(t),$er=r(SLe," (LayoutLM model)"),SLe.forEach(t),Ier=i(U),rC=s(U,"LI",{});var PLe=n(rC);Age=s(PLe,"STRONG",{});var ldt=n(Age);jer=r(ldt,"lxmert"),ldt.forEach(t),Der=r(PLe," \u2014 "),Kq=s(PLe,"A",{href:!0});var idt=n(Kq);Ner=r(idt,"TFLxmertForPreTraining"),idt.forEach(t),qer=r(PLe," (LXMERT model)"),PLe.forEach(t),Oer=i(U),tC=s(U,"LI",{});var $Le=n(tC);Lge=s($Le,"STRONG",{});var ddt=n(Lge);Ger=r(ddt,"mobilebert"),ddt.forEach(t),Xer=r($Le," \u2014 "),Zq=s($Le,"A",{href:!0});var cdt=n(Zq);Ver=r(cdt,"TFMobileBertForPreTraining"),cdt.forEach(t),zer=r($Le," (MobileBERT model)"),$Le.forEach(t),Wer=i(U),aC=s(U,"LI",{});var ILe=n(aC);Bge=s(ILe,"STRONG",{});var mdt=n(Bge);Qer=r(mdt,"mpnet"),mdt.forEach(t),Her=r(ILe," \u2014 "),eO=s(ILe,"A",{href:!0});var fdt=n(eO);Uer=r(fdt,"TFMPNetForMaskedLM"),fdt.forEach(t),Jer=r(ILe," (MPNet model)"),ILe.forEach(t),Yer=i(U),sC=s(U,"LI",{});var jLe=n(sC);xge=s(jLe,"STRONG",{});var gdt=n(xge);Ker=r(gdt,"openai-gpt"),gdt.forEach(t),Zer=r(jLe," \u2014 "),oO=s(jLe,"A",{href:!0});var hdt=n(oO);eor=r(hdt,"TFOpenAIGPTLMHeadModel"),hdt.forEach(t),oor=r(jLe," (OpenAI GPT model)"),jLe.forEach(t),ror=i(U),nC=s(U,"LI",{});var DLe=n(nC);kge=s(DLe,"STRONG",{});var udt=n(kge);tor=r(udt,"roberta"),udt.forEach(t),aor=r(DLe," \u2014 "),rO=s(DLe,"A",{href:!0});var pdt=n(rO);sor=r(pdt,"TFRobertaForMaskedLM"),pdt.forEach(t),nor=r(DLe," (RoBERTa model)"),DLe.forEach(t),lor=i(U),lC=s(U,"LI",{});var NLe=n(lC);Rge=s(NLe,"STRONG",{});var _dt=n(Rge);ior=r(_dt,"t5"),_dt.forEach(t),dor=r(NLe," \u2014 "),tO=s(NLe,"A",{href:!0});var bdt=n(tO);cor=r(bdt,"TFT5ForConditionalGeneration"),bdt.forEach(t),mor=r(NLe," (T5 model)"),NLe.forEach(t),gor=i(U),iC=s(U,"LI",{});var qLe=n(iC);Sge=s(qLe,"STRONG",{});var vdt=n(Sge);hor=r(vdt,"tapas"),vdt.forEach(t),uor=r(qLe," \u2014 "),aO=s(qLe,"A",{href:!0});var Tdt=n(aO);por=r(Tdt,"TFTapasForMaskedLM"),Tdt.forEach(t),_or=r(qLe," (TAPAS model)"),qLe.forEach(t),bor=i(U),dC=s(U,"LI",{});var OLe=n(dC);Pge=s(OLe,"STRONG",{});var Fdt=n(Pge);vor=r(Fdt,"transfo-xl"),Fdt.forEach(t),Tor=r(OLe," \u2014 "),sO=s(OLe,"A",{href:!0});var Cdt=n(sO);For=r(Cdt,"TFTransfoXLLMHeadModel"),Cdt.forEach(t),Cor=r(OLe," (Transformer-XL model)"),OLe.forEach(t),Mor=i(U),cC=s(U,"LI",{});var GLe=n(cC);$ge=s(GLe,"STRONG",{});var Mdt=n($ge);Eor=r(Mdt,"xlm"),Mdt.forEach(t),yor=r(GLe," \u2014 "),nO=s(GLe,"A",{href:!0});var Edt=n(nO);wor=r(Edt,"TFXLMWithLMHeadModel"),Edt.forEach(t),Aor=r(GLe," (XLM model)"),GLe.forEach(t),Lor=i(U),mC=s(U,"LI",{});var XLe=n(mC);Ige=s(XLe,"STRONG",{});var ydt=n(Ige);Bor=r(ydt,"xlm-roberta"),ydt.forEach(t),xor=r(XLe," \u2014 "),lO=s(XLe,"A",{href:!0});var wdt=n(lO);kor=r(wdt,"TFXLMRobertaForMaskedLM"),wdt.forEach(t),Ror=r(XLe," (XLM-RoBERTa model)"),XLe.forEach(t),Sor=i(U),fC=s(U,"LI",{});var VLe=n(fC);jge=s(VLe,"STRONG",{});var Adt=n(jge);Por=r(Adt,"xlnet"),Adt.forEach(t),$or=r(VLe," \u2014 "),iO=s(VLe,"A",{href:!0});var Ldt=n(iO);Ior=r(Ldt,"TFXLNetLMHeadModel"),Ldt.forEach(t),jor=r(VLe," (XLNet model)"),VLe.forEach(t),U.forEach(t),Dor=i(pa),Dge=s(pa,"P",{});var Bdt=n(Dge);Nor=r(Bdt,"Examples:"),Bdt.forEach(t),qor=i(pa),f(qA.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),mke=i(d),vc=s(d,"H2",{class:!0});var CSe=n(vc);gC=s(CSe,"A",{id:!0,class:!0,href:!0});var xdt=n(gC);Nge=s(xdt,"SPAN",{});var kdt=n(Nge);f(OA.$$.fragment,kdt),kdt.forEach(t),xdt.forEach(t),Oor=i(CSe),qge=s(CSe,"SPAN",{});var Rdt=n(qge);Gor=r(Rdt,"TFAutoModelForCausalLM"),Rdt.forEach(t),CSe.forEach(t),fke=i(d),Fr=s(d,"DIV",{class:!0});var Xl=n(Fr);f(GA.$$.fragment,Xl),Xor=i(Xl),Tc=s(Xl,"P",{});var TW=n(Tc);Vor=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oge=s(TW,"CODE",{});var Sdt=n(Oge);zor=r(Sdt,"from_pretrained()"),Sdt.forEach(t),Wor=r(TW,"class method or the "),Gge=s(TW,"CODE",{});var Pdt=n(Gge);Qor=r(Pdt,"from_config()"),Pdt.forEach(t),Hor=r(TW,`class
method.`),TW.forEach(t),Uor=i(Xl),XA=s(Xl,"P",{});var MSe=n(XA);Jor=r(MSe,"This class cannot be instantiated directly using "),Xge=s(MSe,"CODE",{});var $dt=n(Xge);Yor=r($dt,"__init__()"),$dt.forEach(t),Kor=r(MSe," (throws an error)."),MSe.forEach(t),Zor=i(Xl),ut=s(Xl,"DIV",{class:!0});var Vl=n(ut);f(VA.$$.fragment,Vl),err=i(Vl),Vge=s(Vl,"P",{});var Idt=n(Vge);orr=r(Idt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Idt.forEach(t),rrr=i(Vl),Fc=s(Vl,"P",{});var FW=n(Fc);trr=r(FW,`Note:
Loading a model from its configuration file does `),zge=s(FW,"STRONG",{});var jdt=n(zge);arr=r(jdt,"not"),jdt.forEach(t),srr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wge=s(FW,"CODE",{});var Ddt=n(Wge);nrr=r(Ddt,"from_pretrained()"),Ddt.forEach(t),lrr=r(FW,"to load the model weights."),FW.forEach(t),irr=i(Vl),Qge=s(Vl,"P",{});var Ndt=n(Qge);drr=r(Ndt,"Examples:"),Ndt.forEach(t),crr=i(Vl),f(zA.$$.fragment,Vl),Vl.forEach(t),mrr=i(Xl),po=s(Xl,"DIV",{class:!0});var _a=n(po);f(WA.$$.fragment,_a),frr=i(_a),Hge=s(_a,"P",{});var qdt=n(Hge);grr=r(qdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qdt.forEach(t),hrr=i(_a),_s=s(_a,"P",{});var M5=n(_s);urr=r(M5,"The model class to instantiate is selected based on the "),Uge=s(M5,"CODE",{});var Odt=n(Uge);prr=r(Odt,"model_type"),Odt.forEach(t),_rr=r(M5,` property of the config object (either
passed as an argument or loaded from `),Jge=s(M5,"CODE",{});var Gdt=n(Jge);brr=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),vrr=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=s(M5,"CODE",{});var Xdt=n(Yge);Trr=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),Frr=r(M5,":"),M5.forEach(t),Crr=i(_a),ue=s(_a,"UL",{});var Me=n(ue);hC=s(Me,"LI",{});var zLe=n(hC);Kge=s(zLe,"STRONG",{});var Vdt=n(Kge);Mrr=r(Vdt,"bert"),Vdt.forEach(t),Err=r(zLe," \u2014 "),dO=s(zLe,"A",{href:!0});var zdt=n(dO);yrr=r(zdt,"TFBertLMHeadModel"),zdt.forEach(t),wrr=r(zLe," (BERT model)"),zLe.forEach(t),Arr=i(Me),uC=s(Me,"LI",{});var WLe=n(uC);Zge=s(WLe,"STRONG",{});var Wdt=n(Zge);Lrr=r(Wdt,"ctrl"),Wdt.forEach(t),Brr=r(WLe," \u2014 "),cO=s(WLe,"A",{href:!0});var Qdt=n(cO);xrr=r(Qdt,"TFCTRLLMHeadModel"),Qdt.forEach(t),krr=r(WLe," (CTRL model)"),WLe.forEach(t),Rrr=i(Me),pC=s(Me,"LI",{});var QLe=n(pC);ehe=s(QLe,"STRONG",{});var Hdt=n(ehe);Srr=r(Hdt,"gpt2"),Hdt.forEach(t),Prr=r(QLe," \u2014 "),mO=s(QLe,"A",{href:!0});var Udt=n(mO);$rr=r(Udt,"TFGPT2LMHeadModel"),Udt.forEach(t),Irr=r(QLe," (OpenAI GPT-2 model)"),QLe.forEach(t),jrr=i(Me),_C=s(Me,"LI",{});var HLe=n(_C);ohe=s(HLe,"STRONG",{});var Jdt=n(ohe);Drr=r(Jdt,"openai-gpt"),Jdt.forEach(t),Nrr=r(HLe," \u2014 "),fO=s(HLe,"A",{href:!0});var Ydt=n(fO);qrr=r(Ydt,"TFOpenAIGPTLMHeadModel"),Ydt.forEach(t),Orr=r(HLe," (OpenAI GPT model)"),HLe.forEach(t),Grr=i(Me),bC=s(Me,"LI",{});var ULe=n(bC);rhe=s(ULe,"STRONG",{});var Kdt=n(rhe);Xrr=r(Kdt,"rembert"),Kdt.forEach(t),Vrr=r(ULe," \u2014 "),gO=s(ULe,"A",{href:!0});var Zdt=n(gO);zrr=r(Zdt,"TFRemBertForCausalLM"),Zdt.forEach(t),Wrr=r(ULe," (RemBERT model)"),ULe.forEach(t),Qrr=i(Me),vC=s(Me,"LI",{});var JLe=n(vC);the=s(JLe,"STRONG",{});var ect=n(the);Hrr=r(ect,"roberta"),ect.forEach(t),Urr=r(JLe," \u2014 "),hO=s(JLe,"A",{href:!0});var oct=n(hO);Jrr=r(oct,"TFRobertaForCausalLM"),oct.forEach(t),Yrr=r(JLe," (RoBERTa model)"),JLe.forEach(t),Krr=i(Me),TC=s(Me,"LI",{});var YLe=n(TC);ahe=s(YLe,"STRONG",{});var rct=n(ahe);Zrr=r(rct,"roformer"),rct.forEach(t),etr=r(YLe," \u2014 "),uO=s(YLe,"A",{href:!0});var tct=n(uO);otr=r(tct,"TFRoFormerForCausalLM"),tct.forEach(t),rtr=r(YLe," (RoFormer model)"),YLe.forEach(t),ttr=i(Me),FC=s(Me,"LI",{});var KLe=n(FC);she=s(KLe,"STRONG",{});var act=n(she);atr=r(act,"transfo-xl"),act.forEach(t),str=r(KLe," \u2014 "),pO=s(KLe,"A",{href:!0});var sct=n(pO);ntr=r(sct,"TFTransfoXLLMHeadModel"),sct.forEach(t),ltr=r(KLe," (Transformer-XL model)"),KLe.forEach(t),itr=i(Me),CC=s(Me,"LI",{});var ZLe=n(CC);nhe=s(ZLe,"STRONG",{});var nct=n(nhe);dtr=r(nct,"xlm"),nct.forEach(t),ctr=r(ZLe," \u2014 "),_O=s(ZLe,"A",{href:!0});var lct=n(_O);mtr=r(lct,"TFXLMWithLMHeadModel"),lct.forEach(t),ftr=r(ZLe," (XLM model)"),ZLe.forEach(t),gtr=i(Me),MC=s(Me,"LI",{});var e8e=n(MC);lhe=s(e8e,"STRONG",{});var ict=n(lhe);htr=r(ict,"xlnet"),ict.forEach(t),utr=r(e8e," \u2014 "),bO=s(e8e,"A",{href:!0});var dct=n(bO);ptr=r(dct,"TFXLNetLMHeadModel"),dct.forEach(t),_tr=r(e8e," (XLNet model)"),e8e.forEach(t),Me.forEach(t),btr=i(_a),ihe=s(_a,"P",{});var cct=n(ihe);vtr=r(cct,"Examples:"),cct.forEach(t),Ttr=i(_a),f(QA.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),gke=i(d),Cc=s(d,"H2",{class:!0});var ESe=n(Cc);EC=s(ESe,"A",{id:!0,class:!0,href:!0});var mct=n(EC);dhe=s(mct,"SPAN",{});var fct=n(dhe);f(HA.$$.fragment,fct),fct.forEach(t),mct.forEach(t),Ftr=i(ESe),che=s(ESe,"SPAN",{});var gct=n(che);Ctr=r(gct,"TFAutoModelForImageClassification"),gct.forEach(t),ESe.forEach(t),hke=i(d),Cr=s(d,"DIV",{class:!0});var zl=n(Cr);f(UA.$$.fragment,zl),Mtr=i(zl),Mc=s(zl,"P",{});var CW=n(Mc);Etr=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mhe=s(CW,"CODE",{});var hct=n(mhe);ytr=r(hct,"from_pretrained()"),hct.forEach(t),wtr=r(CW,"class method or the "),fhe=s(CW,"CODE",{});var uct=n(fhe);Atr=r(uct,"from_config()"),uct.forEach(t),Ltr=r(CW,`class
method.`),CW.forEach(t),Btr=i(zl),JA=s(zl,"P",{});var ySe=n(JA);xtr=r(ySe,"This class cannot be instantiated directly using "),ghe=s(ySe,"CODE",{});var pct=n(ghe);ktr=r(pct,"__init__()"),pct.forEach(t),Rtr=r(ySe," (throws an error)."),ySe.forEach(t),Str=i(zl),pt=s(zl,"DIV",{class:!0});var Wl=n(pt);f(YA.$$.fragment,Wl),Ptr=i(Wl),hhe=s(Wl,"P",{});var _ct=n(hhe);$tr=r(_ct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_ct.forEach(t),Itr=i(Wl),Ec=s(Wl,"P",{});var MW=n(Ec);jtr=r(MW,`Note:
Loading a model from its configuration file does `),uhe=s(MW,"STRONG",{});var bct=n(uhe);Dtr=r(bct,"not"),bct.forEach(t),Ntr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),phe=s(MW,"CODE",{});var vct=n(phe);qtr=r(vct,"from_pretrained()"),vct.forEach(t),Otr=r(MW,"to load the model weights."),MW.forEach(t),Gtr=i(Wl),_he=s(Wl,"P",{});var Tct=n(_he);Xtr=r(Tct,"Examples:"),Tct.forEach(t),Vtr=i(Wl),f(KA.$$.fragment,Wl),Wl.forEach(t),ztr=i(zl),_o=s(zl,"DIV",{class:!0});var ba=n(_o);f(ZA.$$.fragment,ba),Wtr=i(ba),bhe=s(ba,"P",{});var Fct=n(bhe);Qtr=r(Fct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fct.forEach(t),Htr=i(ba),bs=s(ba,"P",{});var E5=n(bs);Utr=r(E5,"The model class to instantiate is selected based on the "),vhe=s(E5,"CODE",{});var Cct=n(vhe);Jtr=r(Cct,"model_type"),Cct.forEach(t),Ytr=r(E5,` property of the config object (either
passed as an argument or loaded from `),The=s(E5,"CODE",{});var Mct=n(The);Ktr=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),Ztr=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=s(E5,"CODE",{});var Ect=n(Fhe);ear=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),oar=r(E5,":"),E5.forEach(t),rar=i(ba),e0=s(ba,"UL",{});var wSe=n(e0);yC=s(wSe,"LI",{});var o8e=n(yC);Che=s(o8e,"STRONG",{});var yct=n(Che);tar=r(yct,"convnext"),yct.forEach(t),aar=r(o8e," \u2014 "),vO=s(o8e,"A",{href:!0});var wct=n(vO);sar=r(wct,"TFConvNextForImageClassification"),wct.forEach(t),nar=r(o8e," (ConvNext model)"),o8e.forEach(t),lar=i(wSe),wC=s(wSe,"LI",{});var r8e=n(wC);Mhe=s(r8e,"STRONG",{});var Act=n(Mhe);iar=r(Act,"vit"),Act.forEach(t),dar=r(r8e," \u2014 "),TO=s(r8e,"A",{href:!0});var Lct=n(TO);car=r(Lct,"TFViTForImageClassification"),Lct.forEach(t),mar=r(r8e," (ViT model)"),r8e.forEach(t),wSe.forEach(t),far=i(ba),Ehe=s(ba,"P",{});var Bct=n(Ehe);gar=r(Bct,"Examples:"),Bct.forEach(t),har=i(ba),f(o0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),uke=i(d),yc=s(d,"H2",{class:!0});var ASe=n(yc);AC=s(ASe,"A",{id:!0,class:!0,href:!0});var xct=n(AC);yhe=s(xct,"SPAN",{});var kct=n(yhe);f(r0.$$.fragment,kct),kct.forEach(t),xct.forEach(t),uar=i(ASe),whe=s(ASe,"SPAN",{});var Rct=n(whe);par=r(Rct,"TFAutoModelForMaskedLM"),Rct.forEach(t),ASe.forEach(t),pke=i(d),Mr=s(d,"DIV",{class:!0});var Ql=n(Mr);f(t0.$$.fragment,Ql),_ar=i(Ql),wc=s(Ql,"P",{});var EW=n(wc);bar=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ahe=s(EW,"CODE",{});var Sct=n(Ahe);Tar=r(Sct,"from_pretrained()"),Sct.forEach(t),Far=r(EW,"class method or the "),Lhe=s(EW,"CODE",{});var Pct=n(Lhe);Car=r(Pct,"from_config()"),Pct.forEach(t),Mar=r(EW,`class
method.`),EW.forEach(t),Ear=i(Ql),a0=s(Ql,"P",{});var LSe=n(a0);yar=r(LSe,"This class cannot be instantiated directly using "),Bhe=s(LSe,"CODE",{});var $ct=n(Bhe);war=r($ct,"__init__()"),$ct.forEach(t),Aar=r(LSe," (throws an error)."),LSe.forEach(t),Lar=i(Ql),_t=s(Ql,"DIV",{class:!0});var Hl=n(_t);f(s0.$$.fragment,Hl),Bar=i(Hl),xhe=s(Hl,"P",{});var Ict=n(xhe);xar=r(Ict,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ict.forEach(t),kar=i(Hl),Ac=s(Hl,"P",{});var yW=n(Ac);Rar=r(yW,`Note:
Loading a model from its configuration file does `),khe=s(yW,"STRONG",{});var jct=n(khe);Sar=r(jct,"not"),jct.forEach(t),Par=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=s(yW,"CODE",{});var Dct=n(Rhe);$ar=r(Dct,"from_pretrained()"),Dct.forEach(t),Iar=r(yW,"to load the model weights."),yW.forEach(t),jar=i(Hl),She=s(Hl,"P",{});var Nct=n(She);Dar=r(Nct,"Examples:"),Nct.forEach(t),Nar=i(Hl),f(n0.$$.fragment,Hl),Hl.forEach(t),qar=i(Ql),bo=s(Ql,"DIV",{class:!0});var va=n(bo);f(l0.$$.fragment,va),Oar=i(va),Phe=s(va,"P",{});var qct=n(Phe);Gar=r(qct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qct.forEach(t),Xar=i(va),vs=s(va,"P",{});var y5=n(vs);Var=r(y5,"The model class to instantiate is selected based on the "),$he=s(y5,"CODE",{});var Oct=n($he);zar=r(Oct,"model_type"),Oct.forEach(t),War=r(y5,` property of the config object (either
passed as an argument or loaded from `),Ihe=s(y5,"CODE",{});var Gct=n(Ihe);Qar=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),Har=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=s(y5,"CODE",{});var Xct=n(jhe);Uar=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),Jar=r(y5,":"),y5.forEach(t),Yar=i(va),Y=s(va,"UL",{});var ee=n(Y);LC=s(ee,"LI",{});var t8e=n(LC);Dhe=s(t8e,"STRONG",{});var Vct=n(Dhe);Kar=r(Vct,"albert"),Vct.forEach(t),Zar=r(t8e," \u2014 "),FO=s(t8e,"A",{href:!0});var zct=n(FO);esr=r(zct,"TFAlbertForMaskedLM"),zct.forEach(t),osr=r(t8e," (ALBERT model)"),t8e.forEach(t),rsr=i(ee),BC=s(ee,"LI",{});var a8e=n(BC);Nhe=s(a8e,"STRONG",{});var Wct=n(Nhe);tsr=r(Wct,"bert"),Wct.forEach(t),asr=r(a8e," \u2014 "),CO=s(a8e,"A",{href:!0});var Qct=n(CO);ssr=r(Qct,"TFBertForMaskedLM"),Qct.forEach(t),nsr=r(a8e," (BERT model)"),a8e.forEach(t),lsr=i(ee),xC=s(ee,"LI",{});var s8e=n(xC);qhe=s(s8e,"STRONG",{});var Hct=n(qhe);isr=r(Hct,"camembert"),Hct.forEach(t),dsr=r(s8e," \u2014 "),MO=s(s8e,"A",{href:!0});var Uct=n(MO);csr=r(Uct,"TFCamembertForMaskedLM"),Uct.forEach(t),msr=r(s8e," (CamemBERT model)"),s8e.forEach(t),fsr=i(ee),kC=s(ee,"LI",{});var n8e=n(kC);Ohe=s(n8e,"STRONG",{});var Jct=n(Ohe);gsr=r(Jct,"convbert"),Jct.forEach(t),hsr=r(n8e," \u2014 "),EO=s(n8e,"A",{href:!0});var Yct=n(EO);usr=r(Yct,"TFConvBertForMaskedLM"),Yct.forEach(t),psr=r(n8e," (ConvBERT model)"),n8e.forEach(t),_sr=i(ee),RC=s(ee,"LI",{});var l8e=n(RC);Ghe=s(l8e,"STRONG",{});var Kct=n(Ghe);bsr=r(Kct,"deberta"),Kct.forEach(t),vsr=r(l8e," \u2014 "),yO=s(l8e,"A",{href:!0});var Zct=n(yO);Tsr=r(Zct,"TFDebertaForMaskedLM"),Zct.forEach(t),Fsr=r(l8e," (DeBERTa model)"),l8e.forEach(t),Csr=i(ee),SC=s(ee,"LI",{});var i8e=n(SC);Xhe=s(i8e,"STRONG",{});var emt=n(Xhe);Msr=r(emt,"deberta-v2"),emt.forEach(t),Esr=r(i8e," \u2014 "),wO=s(i8e,"A",{href:!0});var omt=n(wO);ysr=r(omt,"TFDebertaV2ForMaskedLM"),omt.forEach(t),wsr=r(i8e," (DeBERTa-v2 model)"),i8e.forEach(t),Asr=i(ee),PC=s(ee,"LI",{});var d8e=n(PC);Vhe=s(d8e,"STRONG",{});var rmt=n(Vhe);Lsr=r(rmt,"distilbert"),rmt.forEach(t),Bsr=r(d8e," \u2014 "),AO=s(d8e,"A",{href:!0});var tmt=n(AO);xsr=r(tmt,"TFDistilBertForMaskedLM"),tmt.forEach(t),ksr=r(d8e," (DistilBERT model)"),d8e.forEach(t),Rsr=i(ee),$C=s(ee,"LI",{});var c8e=n($C);zhe=s(c8e,"STRONG",{});var amt=n(zhe);Ssr=r(amt,"electra"),amt.forEach(t),Psr=r(c8e," \u2014 "),LO=s(c8e,"A",{href:!0});var smt=n(LO);$sr=r(smt,"TFElectraForMaskedLM"),smt.forEach(t),Isr=r(c8e," (ELECTRA model)"),c8e.forEach(t),jsr=i(ee),IC=s(ee,"LI",{});var m8e=n(IC);Whe=s(m8e,"STRONG",{});var nmt=n(Whe);Dsr=r(nmt,"flaubert"),nmt.forEach(t),Nsr=r(m8e," \u2014 "),BO=s(m8e,"A",{href:!0});var lmt=n(BO);qsr=r(lmt,"TFFlaubertWithLMHeadModel"),lmt.forEach(t),Osr=r(m8e," (FlauBERT model)"),m8e.forEach(t),Gsr=i(ee),jC=s(ee,"LI",{});var f8e=n(jC);Qhe=s(f8e,"STRONG",{});var imt=n(Qhe);Xsr=r(imt,"funnel"),imt.forEach(t),Vsr=r(f8e," \u2014 "),xO=s(f8e,"A",{href:!0});var dmt=n(xO);zsr=r(dmt,"TFFunnelForMaskedLM"),dmt.forEach(t),Wsr=r(f8e," (Funnel Transformer model)"),f8e.forEach(t),Qsr=i(ee),DC=s(ee,"LI",{});var g8e=n(DC);Hhe=s(g8e,"STRONG",{});var cmt=n(Hhe);Hsr=r(cmt,"layoutlm"),cmt.forEach(t),Usr=r(g8e," \u2014 "),kO=s(g8e,"A",{href:!0});var mmt=n(kO);Jsr=r(mmt,"TFLayoutLMForMaskedLM"),mmt.forEach(t),Ysr=r(g8e," (LayoutLM model)"),g8e.forEach(t),Ksr=i(ee),NC=s(ee,"LI",{});var h8e=n(NC);Uhe=s(h8e,"STRONG",{});var fmt=n(Uhe);Zsr=r(fmt,"longformer"),fmt.forEach(t),enr=r(h8e," \u2014 "),RO=s(h8e,"A",{href:!0});var gmt=n(RO);onr=r(gmt,"TFLongformerForMaskedLM"),gmt.forEach(t),rnr=r(h8e," (Longformer model)"),h8e.forEach(t),tnr=i(ee),qC=s(ee,"LI",{});var u8e=n(qC);Jhe=s(u8e,"STRONG",{});var hmt=n(Jhe);anr=r(hmt,"mobilebert"),hmt.forEach(t),snr=r(u8e," \u2014 "),SO=s(u8e,"A",{href:!0});var umt=n(SO);nnr=r(umt,"TFMobileBertForMaskedLM"),umt.forEach(t),lnr=r(u8e," (MobileBERT model)"),u8e.forEach(t),inr=i(ee),OC=s(ee,"LI",{});var p8e=n(OC);Yhe=s(p8e,"STRONG",{});var pmt=n(Yhe);dnr=r(pmt,"mpnet"),pmt.forEach(t),cnr=r(p8e," \u2014 "),PO=s(p8e,"A",{href:!0});var _mt=n(PO);mnr=r(_mt,"TFMPNetForMaskedLM"),_mt.forEach(t),fnr=r(p8e," (MPNet model)"),p8e.forEach(t),gnr=i(ee),GC=s(ee,"LI",{});var _8e=n(GC);Khe=s(_8e,"STRONG",{});var bmt=n(Khe);hnr=r(bmt,"rembert"),bmt.forEach(t),unr=r(_8e," \u2014 "),$O=s(_8e,"A",{href:!0});var vmt=n($O);pnr=r(vmt,"TFRemBertForMaskedLM"),vmt.forEach(t),_nr=r(_8e," (RemBERT model)"),_8e.forEach(t),bnr=i(ee),XC=s(ee,"LI",{});var b8e=n(XC);Zhe=s(b8e,"STRONG",{});var Tmt=n(Zhe);vnr=r(Tmt,"roberta"),Tmt.forEach(t),Tnr=r(b8e," \u2014 "),IO=s(b8e,"A",{href:!0});var Fmt=n(IO);Fnr=r(Fmt,"TFRobertaForMaskedLM"),Fmt.forEach(t),Cnr=r(b8e," (RoBERTa model)"),b8e.forEach(t),Mnr=i(ee),VC=s(ee,"LI",{});var v8e=n(VC);eue=s(v8e,"STRONG",{});var Cmt=n(eue);Enr=r(Cmt,"roformer"),Cmt.forEach(t),ynr=r(v8e," \u2014 "),jO=s(v8e,"A",{href:!0});var Mmt=n(jO);wnr=r(Mmt,"TFRoFormerForMaskedLM"),Mmt.forEach(t),Anr=r(v8e," (RoFormer model)"),v8e.forEach(t),Lnr=i(ee),zC=s(ee,"LI",{});var T8e=n(zC);oue=s(T8e,"STRONG",{});var Emt=n(oue);Bnr=r(Emt,"tapas"),Emt.forEach(t),xnr=r(T8e," \u2014 "),DO=s(T8e,"A",{href:!0});var ymt=n(DO);knr=r(ymt,"TFTapasForMaskedLM"),ymt.forEach(t),Rnr=r(T8e," (TAPAS model)"),T8e.forEach(t),Snr=i(ee),WC=s(ee,"LI",{});var F8e=n(WC);rue=s(F8e,"STRONG",{});var wmt=n(rue);Pnr=r(wmt,"xlm"),wmt.forEach(t),$nr=r(F8e," \u2014 "),NO=s(F8e,"A",{href:!0});var Amt=n(NO);Inr=r(Amt,"TFXLMWithLMHeadModel"),Amt.forEach(t),jnr=r(F8e," (XLM model)"),F8e.forEach(t),Dnr=i(ee),QC=s(ee,"LI",{});var C8e=n(QC);tue=s(C8e,"STRONG",{});var Lmt=n(tue);Nnr=r(Lmt,"xlm-roberta"),Lmt.forEach(t),qnr=r(C8e," \u2014 "),qO=s(C8e,"A",{href:!0});var Bmt=n(qO);Onr=r(Bmt,"TFXLMRobertaForMaskedLM"),Bmt.forEach(t),Gnr=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),ee.forEach(t),Xnr=i(va),aue=s(va,"P",{});var xmt=n(aue);Vnr=r(xmt,"Examples:"),xmt.forEach(t),znr=i(va),f(i0.$$.fragment,va),va.forEach(t),Ql.forEach(t),_ke=i(d),Lc=s(d,"H2",{class:!0});var BSe=n(Lc);HC=s(BSe,"A",{id:!0,class:!0,href:!0});var kmt=n(HC);sue=s(kmt,"SPAN",{});var Rmt=n(sue);f(d0.$$.fragment,Rmt),Rmt.forEach(t),kmt.forEach(t),Wnr=i(BSe),nue=s(BSe,"SPAN",{});var Smt=n(nue);Qnr=r(Smt,"TFAutoModelForSeq2SeqLM"),Smt.forEach(t),BSe.forEach(t),bke=i(d),Er=s(d,"DIV",{class:!0});var Ul=n(Er);f(c0.$$.fragment,Ul),Hnr=i(Ul),Bc=s(Ul,"P",{});var wW=n(Bc);Unr=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lue=s(wW,"CODE",{});var Pmt=n(lue);Jnr=r(Pmt,"from_pretrained()"),Pmt.forEach(t),Ynr=r(wW,"class method or the "),iue=s(wW,"CODE",{});var $mt=n(iue);Knr=r($mt,"from_config()"),$mt.forEach(t),Znr=r(wW,`class
method.`),wW.forEach(t),elr=i(Ul),m0=s(Ul,"P",{});var xSe=n(m0);olr=r(xSe,"This class cannot be instantiated directly using "),due=s(xSe,"CODE",{});var Imt=n(due);rlr=r(Imt,"__init__()"),Imt.forEach(t),tlr=r(xSe," (throws an error)."),xSe.forEach(t),alr=i(Ul),bt=s(Ul,"DIV",{class:!0});var Jl=n(bt);f(f0.$$.fragment,Jl),slr=i(Jl),cue=s(Jl,"P",{});var jmt=n(cue);nlr=r(jmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jmt.forEach(t),llr=i(Jl),xc=s(Jl,"P",{});var AW=n(xc);ilr=r(AW,`Note:
Loading a model from its configuration file does `),mue=s(AW,"STRONG",{});var Dmt=n(mue);dlr=r(Dmt,"not"),Dmt.forEach(t),clr=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fue=s(AW,"CODE",{});var Nmt=n(fue);mlr=r(Nmt,"from_pretrained()"),Nmt.forEach(t),flr=r(AW,"to load the model weights."),AW.forEach(t),glr=i(Jl),gue=s(Jl,"P",{});var qmt=n(gue);hlr=r(qmt,"Examples:"),qmt.forEach(t),ulr=i(Jl),f(g0.$$.fragment,Jl),Jl.forEach(t),plr=i(Ul),vo=s(Ul,"DIV",{class:!0});var Ta=n(vo);f(h0.$$.fragment,Ta),_lr=i(Ta),hue=s(Ta,"P",{});var Omt=n(hue);blr=r(Omt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Omt.forEach(t),vlr=i(Ta),Ts=s(Ta,"P",{});var w5=n(Ts);Tlr=r(w5,"The model class to instantiate is selected based on the "),uue=s(w5,"CODE",{});var Gmt=n(uue);Flr=r(Gmt,"model_type"),Gmt.forEach(t),Clr=r(w5,` property of the config object (either
passed as an argument or loaded from `),pue=s(w5,"CODE",{});var Xmt=n(pue);Mlr=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),Elr=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=s(w5,"CODE",{});var Vmt=n(_ue);ylr=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),wlr=r(w5,":"),w5.forEach(t),Alr=i(Ta),pe=s(Ta,"UL",{});var Ee=n(pe);UC=s(Ee,"LI",{});var M8e=n(UC);bue=s(M8e,"STRONG",{});var zmt=n(bue);Llr=r(zmt,"bart"),zmt.forEach(t),Blr=r(M8e," \u2014 "),OO=s(M8e,"A",{href:!0});var Wmt=n(OO);xlr=r(Wmt,"TFBartForConditionalGeneration"),Wmt.forEach(t),klr=r(M8e," (BART model)"),M8e.forEach(t),Rlr=i(Ee),JC=s(Ee,"LI",{});var E8e=n(JC);vue=s(E8e,"STRONG",{});var Qmt=n(vue);Slr=r(Qmt,"blenderbot"),Qmt.forEach(t),Plr=r(E8e," \u2014 "),GO=s(E8e,"A",{href:!0});var Hmt=n(GO);$lr=r(Hmt,"TFBlenderbotForConditionalGeneration"),Hmt.forEach(t),Ilr=r(E8e," (Blenderbot model)"),E8e.forEach(t),jlr=i(Ee),YC=s(Ee,"LI",{});var y8e=n(YC);Tue=s(y8e,"STRONG",{});var Umt=n(Tue);Dlr=r(Umt,"blenderbot-small"),Umt.forEach(t),Nlr=r(y8e," \u2014 "),XO=s(y8e,"A",{href:!0});var Jmt=n(XO);qlr=r(Jmt,"TFBlenderbotSmallForConditionalGeneration"),Jmt.forEach(t),Olr=r(y8e," (BlenderbotSmall model)"),y8e.forEach(t),Glr=i(Ee),KC=s(Ee,"LI",{});var w8e=n(KC);Fue=s(w8e,"STRONG",{});var Ymt=n(Fue);Xlr=r(Ymt,"encoder-decoder"),Ymt.forEach(t),Vlr=r(w8e," \u2014 "),VO=s(w8e,"A",{href:!0});var Kmt=n(VO);zlr=r(Kmt,"TFEncoderDecoderModel"),Kmt.forEach(t),Wlr=r(w8e," (Encoder decoder model)"),w8e.forEach(t),Qlr=i(Ee),ZC=s(Ee,"LI",{});var A8e=n(ZC);Cue=s(A8e,"STRONG",{});var Zmt=n(Cue);Hlr=r(Zmt,"led"),Zmt.forEach(t),Ulr=r(A8e," \u2014 "),zO=s(A8e,"A",{href:!0});var eft=n(zO);Jlr=r(eft,"TFLEDForConditionalGeneration"),eft.forEach(t),Ylr=r(A8e," (LED model)"),A8e.forEach(t),Klr=i(Ee),eM=s(Ee,"LI",{});var L8e=n(eM);Mue=s(L8e,"STRONG",{});var oft=n(Mue);Zlr=r(oft,"marian"),oft.forEach(t),eir=r(L8e," \u2014 "),WO=s(L8e,"A",{href:!0});var rft=n(WO);oir=r(rft,"TFMarianMTModel"),rft.forEach(t),rir=r(L8e," (Marian model)"),L8e.forEach(t),tir=i(Ee),oM=s(Ee,"LI",{});var B8e=n(oM);Eue=s(B8e,"STRONG",{});var tft=n(Eue);air=r(tft,"mbart"),tft.forEach(t),sir=r(B8e," \u2014 "),QO=s(B8e,"A",{href:!0});var aft=n(QO);nir=r(aft,"TFMBartForConditionalGeneration"),aft.forEach(t),lir=r(B8e," (mBART model)"),B8e.forEach(t),iir=i(Ee),rM=s(Ee,"LI",{});var x8e=n(rM);yue=s(x8e,"STRONG",{});var sft=n(yue);dir=r(sft,"mt5"),sft.forEach(t),cir=r(x8e," \u2014 "),HO=s(x8e,"A",{href:!0});var nft=n(HO);mir=r(nft,"TFMT5ForConditionalGeneration"),nft.forEach(t),fir=r(x8e," (mT5 model)"),x8e.forEach(t),gir=i(Ee),tM=s(Ee,"LI",{});var k8e=n(tM);wue=s(k8e,"STRONG",{});var lft=n(wue);hir=r(lft,"pegasus"),lft.forEach(t),uir=r(k8e," \u2014 "),UO=s(k8e,"A",{href:!0});var ift=n(UO);pir=r(ift,"TFPegasusForConditionalGeneration"),ift.forEach(t),_ir=r(k8e," (Pegasus model)"),k8e.forEach(t),bir=i(Ee),aM=s(Ee,"LI",{});var R8e=n(aM);Aue=s(R8e,"STRONG",{});var dft=n(Aue);vir=r(dft,"t5"),dft.forEach(t),Tir=r(R8e," \u2014 "),JO=s(R8e,"A",{href:!0});var cft=n(JO);Fir=r(cft,"TFT5ForConditionalGeneration"),cft.forEach(t),Cir=r(R8e," (T5 model)"),R8e.forEach(t),Ee.forEach(t),Mir=i(Ta),Lue=s(Ta,"P",{});var mft=n(Lue);Eir=r(mft,"Examples:"),mft.forEach(t),yir=i(Ta),f(u0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),vke=i(d),kc=s(d,"H2",{class:!0});var kSe=n(kc);sM=s(kSe,"A",{id:!0,class:!0,href:!0});var fft=n(sM);Bue=s(fft,"SPAN",{});var gft=n(Bue);f(p0.$$.fragment,gft),gft.forEach(t),fft.forEach(t),wir=i(kSe),xue=s(kSe,"SPAN",{});var hft=n(xue);Air=r(hft,"TFAutoModelForSequenceClassification"),hft.forEach(t),kSe.forEach(t),Tke=i(d),yr=s(d,"DIV",{class:!0});var Yl=n(yr);f(_0.$$.fragment,Yl),Lir=i(Yl),Rc=s(Yl,"P",{});var LW=n(Rc);Bir=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kue=s(LW,"CODE",{});var uft=n(kue);xir=r(uft,"from_pretrained()"),uft.forEach(t),kir=r(LW,"class method or the "),Rue=s(LW,"CODE",{});var pft=n(Rue);Rir=r(pft,"from_config()"),pft.forEach(t),Sir=r(LW,`class
method.`),LW.forEach(t),Pir=i(Yl),b0=s(Yl,"P",{});var RSe=n(b0);$ir=r(RSe,"This class cannot be instantiated directly using "),Sue=s(RSe,"CODE",{});var _ft=n(Sue);Iir=r(_ft,"__init__()"),_ft.forEach(t),jir=r(RSe," (throws an error)."),RSe.forEach(t),Dir=i(Yl),vt=s(Yl,"DIV",{class:!0});var Kl=n(vt);f(v0.$$.fragment,Kl),Nir=i(Kl),Pue=s(Kl,"P",{});var bft=n(Pue);qir=r(bft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bft.forEach(t),Oir=i(Kl),Sc=s(Kl,"P",{});var BW=n(Sc);Gir=r(BW,`Note:
Loading a model from its configuration file does `),$ue=s(BW,"STRONG",{});var vft=n($ue);Xir=r(vft,"not"),vft.forEach(t),Vir=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iue=s(BW,"CODE",{});var Tft=n(Iue);zir=r(Tft,"from_pretrained()"),Tft.forEach(t),Wir=r(BW,"to load the model weights."),BW.forEach(t),Qir=i(Kl),jue=s(Kl,"P",{});var Fft=n(jue);Hir=r(Fft,"Examples:"),Fft.forEach(t),Uir=i(Kl),f(T0.$$.fragment,Kl),Kl.forEach(t),Jir=i(Yl),To=s(Yl,"DIV",{class:!0});var Fa=n(To);f(F0.$$.fragment,Fa),Yir=i(Fa),Due=s(Fa,"P",{});var Cft=n(Due);Kir=r(Cft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cft.forEach(t),Zir=i(Fa),Fs=s(Fa,"P",{});var A5=n(Fs);edr=r(A5,"The model class to instantiate is selected based on the "),Nue=s(A5,"CODE",{});var Mft=n(Nue);odr=r(Mft,"model_type"),Mft.forEach(t),rdr=r(A5,` property of the config object (either
passed as an argument or loaded from `),que=s(A5,"CODE",{});var Eft=n(que);tdr=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),adr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=s(A5,"CODE",{});var yft=n(Oue);sdr=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),ndr=r(A5,":"),A5.forEach(t),ldr=i(Fa),V=s(Fa,"UL",{});var W=n(V);nM=s(W,"LI",{});var S8e=n(nM);Gue=s(S8e,"STRONG",{});var wft=n(Gue);idr=r(wft,"albert"),wft.forEach(t),ddr=r(S8e," \u2014 "),YO=s(S8e,"A",{href:!0});var Aft=n(YO);cdr=r(Aft,"TFAlbertForSequenceClassification"),Aft.forEach(t),mdr=r(S8e," (ALBERT model)"),S8e.forEach(t),fdr=i(W),lM=s(W,"LI",{});var P8e=n(lM);Xue=s(P8e,"STRONG",{});var Lft=n(Xue);gdr=r(Lft,"bert"),Lft.forEach(t),hdr=r(P8e," \u2014 "),KO=s(P8e,"A",{href:!0});var Bft=n(KO);udr=r(Bft,"TFBertForSequenceClassification"),Bft.forEach(t),pdr=r(P8e," (BERT model)"),P8e.forEach(t),_dr=i(W),iM=s(W,"LI",{});var $8e=n(iM);Vue=s($8e,"STRONG",{});var xft=n(Vue);bdr=r(xft,"camembert"),xft.forEach(t),vdr=r($8e," \u2014 "),ZO=s($8e,"A",{href:!0});var kft=n(ZO);Tdr=r(kft,"TFCamembertForSequenceClassification"),kft.forEach(t),Fdr=r($8e," (CamemBERT model)"),$8e.forEach(t),Cdr=i(W),dM=s(W,"LI",{});var I8e=n(dM);zue=s(I8e,"STRONG",{});var Rft=n(zue);Mdr=r(Rft,"convbert"),Rft.forEach(t),Edr=r(I8e," \u2014 "),eG=s(I8e,"A",{href:!0});var Sft=n(eG);ydr=r(Sft,"TFConvBertForSequenceClassification"),Sft.forEach(t),wdr=r(I8e," (ConvBERT model)"),I8e.forEach(t),Adr=i(W),cM=s(W,"LI",{});var j8e=n(cM);Wue=s(j8e,"STRONG",{});var Pft=n(Wue);Ldr=r(Pft,"ctrl"),Pft.forEach(t),Bdr=r(j8e," \u2014 "),oG=s(j8e,"A",{href:!0});var $ft=n(oG);xdr=r($ft,"TFCTRLForSequenceClassification"),$ft.forEach(t),kdr=r(j8e," (CTRL model)"),j8e.forEach(t),Rdr=i(W),mM=s(W,"LI",{});var D8e=n(mM);Que=s(D8e,"STRONG",{});var Ift=n(Que);Sdr=r(Ift,"deberta"),Ift.forEach(t),Pdr=r(D8e," \u2014 "),rG=s(D8e,"A",{href:!0});var jft=n(rG);$dr=r(jft,"TFDebertaForSequenceClassification"),jft.forEach(t),Idr=r(D8e," (DeBERTa model)"),D8e.forEach(t),jdr=i(W),fM=s(W,"LI",{});var N8e=n(fM);Hue=s(N8e,"STRONG",{});var Dft=n(Hue);Ddr=r(Dft,"deberta-v2"),Dft.forEach(t),Ndr=r(N8e," \u2014 "),tG=s(N8e,"A",{href:!0});var Nft=n(tG);qdr=r(Nft,"TFDebertaV2ForSequenceClassification"),Nft.forEach(t),Odr=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),Gdr=i(W),gM=s(W,"LI",{});var q8e=n(gM);Uue=s(q8e,"STRONG",{});var qft=n(Uue);Xdr=r(qft,"distilbert"),qft.forEach(t),Vdr=r(q8e," \u2014 "),aG=s(q8e,"A",{href:!0});var Oft=n(aG);zdr=r(Oft,"TFDistilBertForSequenceClassification"),Oft.forEach(t),Wdr=r(q8e," (DistilBERT model)"),q8e.forEach(t),Qdr=i(W),hM=s(W,"LI",{});var O8e=n(hM);Jue=s(O8e,"STRONG",{});var Gft=n(Jue);Hdr=r(Gft,"electra"),Gft.forEach(t),Udr=r(O8e," \u2014 "),sG=s(O8e,"A",{href:!0});var Xft=n(sG);Jdr=r(Xft,"TFElectraForSequenceClassification"),Xft.forEach(t),Ydr=r(O8e," (ELECTRA model)"),O8e.forEach(t),Kdr=i(W),uM=s(W,"LI",{});var G8e=n(uM);Yue=s(G8e,"STRONG",{});var Vft=n(Yue);Zdr=r(Vft,"flaubert"),Vft.forEach(t),ecr=r(G8e," \u2014 "),nG=s(G8e,"A",{href:!0});var zft=n(nG);ocr=r(zft,"TFFlaubertForSequenceClassification"),zft.forEach(t),rcr=r(G8e," (FlauBERT model)"),G8e.forEach(t),tcr=i(W),pM=s(W,"LI",{});var X8e=n(pM);Kue=s(X8e,"STRONG",{});var Wft=n(Kue);acr=r(Wft,"funnel"),Wft.forEach(t),scr=r(X8e," \u2014 "),lG=s(X8e,"A",{href:!0});var Qft=n(lG);ncr=r(Qft,"TFFunnelForSequenceClassification"),Qft.forEach(t),lcr=r(X8e," (Funnel Transformer model)"),X8e.forEach(t),icr=i(W),_M=s(W,"LI",{});var V8e=n(_M);Zue=s(V8e,"STRONG",{});var Hft=n(Zue);dcr=r(Hft,"gpt2"),Hft.forEach(t),ccr=r(V8e," \u2014 "),iG=s(V8e,"A",{href:!0});var Uft=n(iG);mcr=r(Uft,"TFGPT2ForSequenceClassification"),Uft.forEach(t),fcr=r(V8e," (OpenAI GPT-2 model)"),V8e.forEach(t),gcr=i(W),bM=s(W,"LI",{});var z8e=n(bM);epe=s(z8e,"STRONG",{});var Jft=n(epe);hcr=r(Jft,"layoutlm"),Jft.forEach(t),ucr=r(z8e," \u2014 "),dG=s(z8e,"A",{href:!0});var Yft=n(dG);pcr=r(Yft,"TFLayoutLMForSequenceClassification"),Yft.forEach(t),_cr=r(z8e," (LayoutLM model)"),z8e.forEach(t),bcr=i(W),vM=s(W,"LI",{});var W8e=n(vM);ope=s(W8e,"STRONG",{});var Kft=n(ope);vcr=r(Kft,"longformer"),Kft.forEach(t),Tcr=r(W8e," \u2014 "),cG=s(W8e,"A",{href:!0});var Zft=n(cG);Fcr=r(Zft,"TFLongformerForSequenceClassification"),Zft.forEach(t),Ccr=r(W8e," (Longformer model)"),W8e.forEach(t),Mcr=i(W),TM=s(W,"LI",{});var Q8e=n(TM);rpe=s(Q8e,"STRONG",{});var egt=n(rpe);Ecr=r(egt,"mobilebert"),egt.forEach(t),ycr=r(Q8e," \u2014 "),mG=s(Q8e,"A",{href:!0});var ogt=n(mG);wcr=r(ogt,"TFMobileBertForSequenceClassification"),ogt.forEach(t),Acr=r(Q8e," (MobileBERT model)"),Q8e.forEach(t),Lcr=i(W),FM=s(W,"LI",{});var H8e=n(FM);tpe=s(H8e,"STRONG",{});var rgt=n(tpe);Bcr=r(rgt,"mpnet"),rgt.forEach(t),xcr=r(H8e," \u2014 "),fG=s(H8e,"A",{href:!0});var tgt=n(fG);kcr=r(tgt,"TFMPNetForSequenceClassification"),tgt.forEach(t),Rcr=r(H8e," (MPNet model)"),H8e.forEach(t),Scr=i(W),CM=s(W,"LI",{});var U8e=n(CM);ape=s(U8e,"STRONG",{});var agt=n(ape);Pcr=r(agt,"openai-gpt"),agt.forEach(t),$cr=r(U8e," \u2014 "),gG=s(U8e,"A",{href:!0});var sgt=n(gG);Icr=r(sgt,"TFOpenAIGPTForSequenceClassification"),sgt.forEach(t),jcr=r(U8e," (OpenAI GPT model)"),U8e.forEach(t),Dcr=i(W),MM=s(W,"LI",{});var J8e=n(MM);spe=s(J8e,"STRONG",{});var ngt=n(spe);Ncr=r(ngt,"rembert"),ngt.forEach(t),qcr=r(J8e," \u2014 "),hG=s(J8e,"A",{href:!0});var lgt=n(hG);Ocr=r(lgt,"TFRemBertForSequenceClassification"),lgt.forEach(t),Gcr=r(J8e," (RemBERT model)"),J8e.forEach(t),Xcr=i(W),EM=s(W,"LI",{});var Y8e=n(EM);npe=s(Y8e,"STRONG",{});var igt=n(npe);Vcr=r(igt,"roberta"),igt.forEach(t),zcr=r(Y8e," \u2014 "),uG=s(Y8e,"A",{href:!0});var dgt=n(uG);Wcr=r(dgt,"TFRobertaForSequenceClassification"),dgt.forEach(t),Qcr=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),Hcr=i(W),yM=s(W,"LI",{});var K8e=n(yM);lpe=s(K8e,"STRONG",{});var cgt=n(lpe);Ucr=r(cgt,"roformer"),cgt.forEach(t),Jcr=r(K8e," \u2014 "),pG=s(K8e,"A",{href:!0});var mgt=n(pG);Ycr=r(mgt,"TFRoFormerForSequenceClassification"),mgt.forEach(t),Kcr=r(K8e," (RoFormer model)"),K8e.forEach(t),Zcr=i(W),wM=s(W,"LI",{});var Z8e=n(wM);ipe=s(Z8e,"STRONG",{});var fgt=n(ipe);emr=r(fgt,"tapas"),fgt.forEach(t),omr=r(Z8e," \u2014 "),_G=s(Z8e,"A",{href:!0});var ggt=n(_G);rmr=r(ggt,"TFTapasForSequenceClassification"),ggt.forEach(t),tmr=r(Z8e," (TAPAS model)"),Z8e.forEach(t),amr=i(W),AM=s(W,"LI",{});var e7e=n(AM);dpe=s(e7e,"STRONG",{});var hgt=n(dpe);smr=r(hgt,"transfo-xl"),hgt.forEach(t),nmr=r(e7e," \u2014 "),bG=s(e7e,"A",{href:!0});var ugt=n(bG);lmr=r(ugt,"TFTransfoXLForSequenceClassification"),ugt.forEach(t),imr=r(e7e," (Transformer-XL model)"),e7e.forEach(t),dmr=i(W),LM=s(W,"LI",{});var o7e=n(LM);cpe=s(o7e,"STRONG",{});var pgt=n(cpe);cmr=r(pgt,"xlm"),pgt.forEach(t),mmr=r(o7e," \u2014 "),vG=s(o7e,"A",{href:!0});var _gt=n(vG);fmr=r(_gt,"TFXLMForSequenceClassification"),_gt.forEach(t),gmr=r(o7e," (XLM model)"),o7e.forEach(t),hmr=i(W),BM=s(W,"LI",{});var r7e=n(BM);mpe=s(r7e,"STRONG",{});var bgt=n(mpe);umr=r(bgt,"xlm-roberta"),bgt.forEach(t),pmr=r(r7e," \u2014 "),TG=s(r7e,"A",{href:!0});var vgt=n(TG);_mr=r(vgt,"TFXLMRobertaForSequenceClassification"),vgt.forEach(t),bmr=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),vmr=i(W),xM=s(W,"LI",{});var t7e=n(xM);fpe=s(t7e,"STRONG",{});var Tgt=n(fpe);Tmr=r(Tgt,"xlnet"),Tgt.forEach(t),Fmr=r(t7e," \u2014 "),FG=s(t7e,"A",{href:!0});var Fgt=n(FG);Cmr=r(Fgt,"TFXLNetForSequenceClassification"),Fgt.forEach(t),Mmr=r(t7e," (XLNet model)"),t7e.forEach(t),W.forEach(t),Emr=i(Fa),gpe=s(Fa,"P",{});var Cgt=n(gpe);ymr=r(Cgt,"Examples:"),Cgt.forEach(t),wmr=i(Fa),f(C0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),Fke=i(d),Pc=s(d,"H2",{class:!0});var SSe=n(Pc);kM=s(SSe,"A",{id:!0,class:!0,href:!0});var Mgt=n(kM);hpe=s(Mgt,"SPAN",{});var Egt=n(hpe);f(M0.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),Amr=i(SSe),upe=s(SSe,"SPAN",{});var ygt=n(upe);Lmr=r(ygt,"TFAutoModelForMultipleChoice"),ygt.forEach(t),SSe.forEach(t),Cke=i(d),wr=s(d,"DIV",{class:!0});var Zl=n(wr);f(E0.$$.fragment,Zl),Bmr=i(Zl),$c=s(Zl,"P",{});var xW=n($c);xmr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ppe=s(xW,"CODE",{});var wgt=n(ppe);kmr=r(wgt,"from_pretrained()"),wgt.forEach(t),Rmr=r(xW,"class method or the "),_pe=s(xW,"CODE",{});var Agt=n(_pe);Smr=r(Agt,"from_config()"),Agt.forEach(t),Pmr=r(xW,`class
method.`),xW.forEach(t),$mr=i(Zl),y0=s(Zl,"P",{});var PSe=n(y0);Imr=r(PSe,"This class cannot be instantiated directly using "),bpe=s(PSe,"CODE",{});var Lgt=n(bpe);jmr=r(Lgt,"__init__()"),Lgt.forEach(t),Dmr=r(PSe," (throws an error)."),PSe.forEach(t),Nmr=i(Zl),Tt=s(Zl,"DIV",{class:!0});var ei=n(Tt);f(w0.$$.fragment,ei),qmr=i(ei),vpe=s(ei,"P",{});var Bgt=n(vpe);Omr=r(Bgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bgt.forEach(t),Gmr=i(ei),Ic=s(ei,"P",{});var kW=n(Ic);Xmr=r(kW,`Note:
Loading a model from its configuration file does `),Tpe=s(kW,"STRONG",{});var xgt=n(Tpe);Vmr=r(xgt,"not"),xgt.forEach(t),zmr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=s(kW,"CODE",{});var kgt=n(Fpe);Wmr=r(kgt,"from_pretrained()"),kgt.forEach(t),Qmr=r(kW,"to load the model weights."),kW.forEach(t),Hmr=i(ei),Cpe=s(ei,"P",{});var Rgt=n(Cpe);Umr=r(Rgt,"Examples:"),Rgt.forEach(t),Jmr=i(ei),f(A0.$$.fragment,ei),ei.forEach(t),Ymr=i(Zl),Fo=s(Zl,"DIV",{class:!0});var Ca=n(Fo);f(L0.$$.fragment,Ca),Kmr=i(Ca),Mpe=s(Ca,"P",{});var Sgt=n(Mpe);Zmr=r(Sgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sgt.forEach(t),efr=i(Ca),Cs=s(Ca,"P",{});var L5=n(Cs);ofr=r(L5,"The model class to instantiate is selected based on the "),Epe=s(L5,"CODE",{});var Pgt=n(Epe);rfr=r(Pgt,"model_type"),Pgt.forEach(t),tfr=r(L5,` property of the config object (either
passed as an argument or loaded from `),ype=s(L5,"CODE",{});var $gt=n(ype);afr=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),sfr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=s(L5,"CODE",{});var Igt=n(wpe);nfr=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),lfr=r(L5,":"),L5.forEach(t),ifr=i(Ca),te=s(Ca,"UL",{});var ne=n(te);RM=s(ne,"LI",{});var a7e=n(RM);Ape=s(a7e,"STRONG",{});var jgt=n(Ape);dfr=r(jgt,"albert"),jgt.forEach(t),cfr=r(a7e," \u2014 "),CG=s(a7e,"A",{href:!0});var Dgt=n(CG);mfr=r(Dgt,"TFAlbertForMultipleChoice"),Dgt.forEach(t),ffr=r(a7e," (ALBERT model)"),a7e.forEach(t),gfr=i(ne),SM=s(ne,"LI",{});var s7e=n(SM);Lpe=s(s7e,"STRONG",{});var Ngt=n(Lpe);hfr=r(Ngt,"bert"),Ngt.forEach(t),ufr=r(s7e," \u2014 "),MG=s(s7e,"A",{href:!0});var qgt=n(MG);pfr=r(qgt,"TFBertForMultipleChoice"),qgt.forEach(t),_fr=r(s7e," (BERT model)"),s7e.forEach(t),bfr=i(ne),PM=s(ne,"LI",{});var n7e=n(PM);Bpe=s(n7e,"STRONG",{});var Ogt=n(Bpe);vfr=r(Ogt,"camembert"),Ogt.forEach(t),Tfr=r(n7e," \u2014 "),EG=s(n7e,"A",{href:!0});var Ggt=n(EG);Ffr=r(Ggt,"TFCamembertForMultipleChoice"),Ggt.forEach(t),Cfr=r(n7e," (CamemBERT model)"),n7e.forEach(t),Mfr=i(ne),$M=s(ne,"LI",{});var l7e=n($M);xpe=s(l7e,"STRONG",{});var Xgt=n(xpe);Efr=r(Xgt,"convbert"),Xgt.forEach(t),yfr=r(l7e," \u2014 "),yG=s(l7e,"A",{href:!0});var Vgt=n(yG);wfr=r(Vgt,"TFConvBertForMultipleChoice"),Vgt.forEach(t),Afr=r(l7e," (ConvBERT model)"),l7e.forEach(t),Lfr=i(ne),IM=s(ne,"LI",{});var i7e=n(IM);kpe=s(i7e,"STRONG",{});var zgt=n(kpe);Bfr=r(zgt,"distilbert"),zgt.forEach(t),xfr=r(i7e," \u2014 "),wG=s(i7e,"A",{href:!0});var Wgt=n(wG);kfr=r(Wgt,"TFDistilBertForMultipleChoice"),Wgt.forEach(t),Rfr=r(i7e," (DistilBERT model)"),i7e.forEach(t),Sfr=i(ne),jM=s(ne,"LI",{});var d7e=n(jM);Rpe=s(d7e,"STRONG",{});var Qgt=n(Rpe);Pfr=r(Qgt,"electra"),Qgt.forEach(t),$fr=r(d7e," \u2014 "),AG=s(d7e,"A",{href:!0});var Hgt=n(AG);Ifr=r(Hgt,"TFElectraForMultipleChoice"),Hgt.forEach(t),jfr=r(d7e," (ELECTRA model)"),d7e.forEach(t),Dfr=i(ne),DM=s(ne,"LI",{});var c7e=n(DM);Spe=s(c7e,"STRONG",{});var Ugt=n(Spe);Nfr=r(Ugt,"flaubert"),Ugt.forEach(t),qfr=r(c7e," \u2014 "),LG=s(c7e,"A",{href:!0});var Jgt=n(LG);Ofr=r(Jgt,"TFFlaubertForMultipleChoice"),Jgt.forEach(t),Gfr=r(c7e," (FlauBERT model)"),c7e.forEach(t),Xfr=i(ne),NM=s(ne,"LI",{});var m7e=n(NM);Ppe=s(m7e,"STRONG",{});var Ygt=n(Ppe);Vfr=r(Ygt,"funnel"),Ygt.forEach(t),zfr=r(m7e," \u2014 "),BG=s(m7e,"A",{href:!0});var Kgt=n(BG);Wfr=r(Kgt,"TFFunnelForMultipleChoice"),Kgt.forEach(t),Qfr=r(m7e," (Funnel Transformer model)"),m7e.forEach(t),Hfr=i(ne),qM=s(ne,"LI",{});var f7e=n(qM);$pe=s(f7e,"STRONG",{});var Zgt=n($pe);Ufr=r(Zgt,"longformer"),Zgt.forEach(t),Jfr=r(f7e," \u2014 "),xG=s(f7e,"A",{href:!0});var eht=n(xG);Yfr=r(eht,"TFLongformerForMultipleChoice"),eht.forEach(t),Kfr=r(f7e," (Longformer model)"),f7e.forEach(t),Zfr=i(ne),OM=s(ne,"LI",{});var g7e=n(OM);Ipe=s(g7e,"STRONG",{});var oht=n(Ipe);egr=r(oht,"mobilebert"),oht.forEach(t),ogr=r(g7e," \u2014 "),kG=s(g7e,"A",{href:!0});var rht=n(kG);rgr=r(rht,"TFMobileBertForMultipleChoice"),rht.forEach(t),tgr=r(g7e," (MobileBERT model)"),g7e.forEach(t),agr=i(ne),GM=s(ne,"LI",{});var h7e=n(GM);jpe=s(h7e,"STRONG",{});var tht=n(jpe);sgr=r(tht,"mpnet"),tht.forEach(t),ngr=r(h7e," \u2014 "),RG=s(h7e,"A",{href:!0});var aht=n(RG);lgr=r(aht,"TFMPNetForMultipleChoice"),aht.forEach(t),igr=r(h7e," (MPNet model)"),h7e.forEach(t),dgr=i(ne),XM=s(ne,"LI",{});var u7e=n(XM);Dpe=s(u7e,"STRONG",{});var sht=n(Dpe);cgr=r(sht,"rembert"),sht.forEach(t),mgr=r(u7e," \u2014 "),SG=s(u7e,"A",{href:!0});var nht=n(SG);fgr=r(nht,"TFRemBertForMultipleChoice"),nht.forEach(t),ggr=r(u7e," (RemBERT model)"),u7e.forEach(t),hgr=i(ne),VM=s(ne,"LI",{});var p7e=n(VM);Npe=s(p7e,"STRONG",{});var lht=n(Npe);ugr=r(lht,"roberta"),lht.forEach(t),pgr=r(p7e," \u2014 "),PG=s(p7e,"A",{href:!0});var iht=n(PG);_gr=r(iht,"TFRobertaForMultipleChoice"),iht.forEach(t),bgr=r(p7e," (RoBERTa model)"),p7e.forEach(t),vgr=i(ne),zM=s(ne,"LI",{});var _7e=n(zM);qpe=s(_7e,"STRONG",{});var dht=n(qpe);Tgr=r(dht,"roformer"),dht.forEach(t),Fgr=r(_7e," \u2014 "),$G=s(_7e,"A",{href:!0});var cht=n($G);Cgr=r(cht,"TFRoFormerForMultipleChoice"),cht.forEach(t),Mgr=r(_7e," (RoFormer model)"),_7e.forEach(t),Egr=i(ne),WM=s(ne,"LI",{});var b7e=n(WM);Ope=s(b7e,"STRONG",{});var mht=n(Ope);ygr=r(mht,"xlm"),mht.forEach(t),wgr=r(b7e," \u2014 "),IG=s(b7e,"A",{href:!0});var fht=n(IG);Agr=r(fht,"TFXLMForMultipleChoice"),fht.forEach(t),Lgr=r(b7e," (XLM model)"),b7e.forEach(t),Bgr=i(ne),QM=s(ne,"LI",{});var v7e=n(QM);Gpe=s(v7e,"STRONG",{});var ght=n(Gpe);xgr=r(ght,"xlm-roberta"),ght.forEach(t),kgr=r(v7e," \u2014 "),jG=s(v7e,"A",{href:!0});var hht=n(jG);Rgr=r(hht,"TFXLMRobertaForMultipleChoice"),hht.forEach(t),Sgr=r(v7e," (XLM-RoBERTa model)"),v7e.forEach(t),Pgr=i(ne),HM=s(ne,"LI",{});var T7e=n(HM);Xpe=s(T7e,"STRONG",{});var uht=n(Xpe);$gr=r(uht,"xlnet"),uht.forEach(t),Igr=r(T7e," \u2014 "),DG=s(T7e,"A",{href:!0});var pht=n(DG);jgr=r(pht,"TFXLNetForMultipleChoice"),pht.forEach(t),Dgr=r(T7e," (XLNet model)"),T7e.forEach(t),ne.forEach(t),Ngr=i(Ca),Vpe=s(Ca,"P",{});var _ht=n(Vpe);qgr=r(_ht,"Examples:"),_ht.forEach(t),Ogr=i(Ca),f(B0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Mke=i(d),jc=s(d,"H2",{class:!0});var $Se=n(jc);UM=s($Se,"A",{id:!0,class:!0,href:!0});var bht=n(UM);zpe=s(bht,"SPAN",{});var vht=n(zpe);f(x0.$$.fragment,vht),vht.forEach(t),bht.forEach(t),Ggr=i($Se),Wpe=s($Se,"SPAN",{});var Tht=n(Wpe);Xgr=r(Tht,"TFAutoModelForTableQuestionAnswering"),Tht.forEach(t),$Se.forEach(t),Eke=i(d),Ar=s(d,"DIV",{class:!0});var oi=n(Ar);f(k0.$$.fragment,oi),Vgr=i(oi),Dc=s(oi,"P",{});var RW=n(Dc);zgr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qpe=s(RW,"CODE",{});var Fht=n(Qpe);Wgr=r(Fht,"from_pretrained()"),Fht.forEach(t),Qgr=r(RW,"class method or the "),Hpe=s(RW,"CODE",{});var Cht=n(Hpe);Hgr=r(Cht,"from_config()"),Cht.forEach(t),Ugr=r(RW,`class
method.`),RW.forEach(t),Jgr=i(oi),R0=s(oi,"P",{});var ISe=n(R0);Ygr=r(ISe,"This class cannot be instantiated directly using "),Upe=s(ISe,"CODE",{});var Mht=n(Upe);Kgr=r(Mht,"__init__()"),Mht.forEach(t),Zgr=r(ISe," (throws an error)."),ISe.forEach(t),ehr=i(oi),Ft=s(oi,"DIV",{class:!0});var ri=n(Ft);f(S0.$$.fragment,ri),ohr=i(ri),Jpe=s(ri,"P",{});var Eht=n(Jpe);rhr=r(Eht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Eht.forEach(t),thr=i(ri),Nc=s(ri,"P",{});var SW=n(Nc);ahr=r(SW,`Note:
Loading a model from its configuration file does `),Ype=s(SW,"STRONG",{});var yht=n(Ype);shr=r(yht,"not"),yht.forEach(t),nhr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kpe=s(SW,"CODE",{});var wht=n(Kpe);lhr=r(wht,"from_pretrained()"),wht.forEach(t),ihr=r(SW,"to load the model weights."),SW.forEach(t),dhr=i(ri),Zpe=s(ri,"P",{});var Aht=n(Zpe);chr=r(Aht,"Examples:"),Aht.forEach(t),mhr=i(ri),f(P0.$$.fragment,ri),ri.forEach(t),fhr=i(oi),Co=s(oi,"DIV",{class:!0});var Ma=n(Co);f($0.$$.fragment,Ma),ghr=i(Ma),e_e=s(Ma,"P",{});var Lht=n(e_e);hhr=r(Lht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lht.forEach(t),uhr=i(Ma),Ms=s(Ma,"P",{});var B5=n(Ms);phr=r(B5,"The model class to instantiate is selected based on the "),o_e=s(B5,"CODE",{});var Bht=n(o_e);_hr=r(Bht,"model_type"),Bht.forEach(t),bhr=r(B5,` property of the config object (either
passed as an argument or loaded from `),r_e=s(B5,"CODE",{});var xht=n(r_e);vhr=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),Thr=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=s(B5,"CODE",{});var kht=n(t_e);Fhr=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),Chr=r(B5,":"),B5.forEach(t),Mhr=i(Ma),a_e=s(Ma,"UL",{});var Rht=n(a_e);JM=s(Rht,"LI",{});var F7e=n(JM);s_e=s(F7e,"STRONG",{});var Sht=n(s_e);Ehr=r(Sht,"tapas"),Sht.forEach(t),yhr=r(F7e," \u2014 "),NG=s(F7e,"A",{href:!0});var Pht=n(NG);whr=r(Pht,"TFTapasForQuestionAnswering"),Pht.forEach(t),Ahr=r(F7e," (TAPAS model)"),F7e.forEach(t),Rht.forEach(t),Lhr=i(Ma),n_e=s(Ma,"P",{});var $ht=n(n_e);Bhr=r($ht,"Examples:"),$ht.forEach(t),xhr=i(Ma),f(I0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),yke=i(d),qc=s(d,"H2",{class:!0});var jSe=n(qc);YM=s(jSe,"A",{id:!0,class:!0,href:!0});var Iht=n(YM);l_e=s(Iht,"SPAN",{});var jht=n(l_e);f(j0.$$.fragment,jht),jht.forEach(t),Iht.forEach(t),khr=i(jSe),i_e=s(jSe,"SPAN",{});var Dht=n(i_e);Rhr=r(Dht,"TFAutoModelForTokenClassification"),Dht.forEach(t),jSe.forEach(t),wke=i(d),Lr=s(d,"DIV",{class:!0});var ti=n(Lr);f(D0.$$.fragment,ti),Shr=i(ti),Oc=s(ti,"P",{});var PW=n(Oc);Phr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),d_e=s(PW,"CODE",{});var Nht=n(d_e);$hr=r(Nht,"from_pretrained()"),Nht.forEach(t),Ihr=r(PW,"class method or the "),c_e=s(PW,"CODE",{});var qht=n(c_e);jhr=r(qht,"from_config()"),qht.forEach(t),Dhr=r(PW,`class
method.`),PW.forEach(t),Nhr=i(ti),N0=s(ti,"P",{});var DSe=n(N0);qhr=r(DSe,"This class cannot be instantiated directly using "),m_e=s(DSe,"CODE",{});var Oht=n(m_e);Ohr=r(Oht,"__init__()"),Oht.forEach(t),Ghr=r(DSe," (throws an error)."),DSe.forEach(t),Xhr=i(ti),Ct=s(ti,"DIV",{class:!0});var ai=n(Ct);f(q0.$$.fragment,ai),Vhr=i(ai),f_e=s(ai,"P",{});var Ght=n(f_e);zhr=r(Ght,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ght.forEach(t),Whr=i(ai),Gc=s(ai,"P",{});var $W=n(Gc);Qhr=r($W,`Note:
Loading a model from its configuration file does `),g_e=s($W,"STRONG",{});var Xht=n(g_e);Hhr=r(Xht,"not"),Xht.forEach(t),Uhr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),h_e=s($W,"CODE",{});var Vht=n(h_e);Jhr=r(Vht,"from_pretrained()"),Vht.forEach(t),Yhr=r($W,"to load the model weights."),$W.forEach(t),Khr=i(ai),u_e=s(ai,"P",{});var zht=n(u_e);Zhr=r(zht,"Examples:"),zht.forEach(t),eur=i(ai),f(O0.$$.fragment,ai),ai.forEach(t),our=i(ti),Mo=s(ti,"DIV",{class:!0});var Ea=n(Mo);f(G0.$$.fragment,Ea),rur=i(Ea),p_e=s(Ea,"P",{});var Wht=n(p_e);tur=r(Wht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wht.forEach(t),aur=i(Ea),Es=s(Ea,"P",{});var x5=n(Es);sur=r(x5,"The model class to instantiate is selected based on the "),__e=s(x5,"CODE",{});var Qht=n(__e);nur=r(Qht,"model_type"),Qht.forEach(t),lur=r(x5,` property of the config object (either
passed as an argument or loaded from `),b_e=s(x5,"CODE",{});var Hht=n(b_e);iur=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),dur=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=s(x5,"CODE",{});var Uht=n(v_e);cur=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),mur=r(x5,":"),x5.forEach(t),fur=i(Ea),K=s(Ea,"UL",{});var oe=n(K);KM=s(oe,"LI",{});var C7e=n(KM);T_e=s(C7e,"STRONG",{});var Jht=n(T_e);gur=r(Jht,"albert"),Jht.forEach(t),hur=r(C7e," \u2014 "),qG=s(C7e,"A",{href:!0});var Yht=n(qG);uur=r(Yht,"TFAlbertForTokenClassification"),Yht.forEach(t),pur=r(C7e," (ALBERT model)"),C7e.forEach(t),_ur=i(oe),ZM=s(oe,"LI",{});var M7e=n(ZM);F_e=s(M7e,"STRONG",{});var Kht=n(F_e);bur=r(Kht,"bert"),Kht.forEach(t),vur=r(M7e," \u2014 "),OG=s(M7e,"A",{href:!0});var Zht=n(OG);Tur=r(Zht,"TFBertForTokenClassification"),Zht.forEach(t),Fur=r(M7e," (BERT model)"),M7e.forEach(t),Cur=i(oe),e4=s(oe,"LI",{});var E7e=n(e4);C_e=s(E7e,"STRONG",{});var eut=n(C_e);Mur=r(eut,"camembert"),eut.forEach(t),Eur=r(E7e," \u2014 "),GG=s(E7e,"A",{href:!0});var out=n(GG);yur=r(out,"TFCamembertForTokenClassification"),out.forEach(t),wur=r(E7e," (CamemBERT model)"),E7e.forEach(t),Aur=i(oe),o4=s(oe,"LI",{});var y7e=n(o4);M_e=s(y7e,"STRONG",{});var rut=n(M_e);Lur=r(rut,"convbert"),rut.forEach(t),Bur=r(y7e," \u2014 "),XG=s(y7e,"A",{href:!0});var tut=n(XG);xur=r(tut,"TFConvBertForTokenClassification"),tut.forEach(t),kur=r(y7e," (ConvBERT model)"),y7e.forEach(t),Rur=i(oe),r4=s(oe,"LI",{});var w7e=n(r4);E_e=s(w7e,"STRONG",{});var aut=n(E_e);Sur=r(aut,"deberta"),aut.forEach(t),Pur=r(w7e," \u2014 "),VG=s(w7e,"A",{href:!0});var sut=n(VG);$ur=r(sut,"TFDebertaForTokenClassification"),sut.forEach(t),Iur=r(w7e," (DeBERTa model)"),w7e.forEach(t),jur=i(oe),t4=s(oe,"LI",{});var A7e=n(t4);y_e=s(A7e,"STRONG",{});var nut=n(y_e);Dur=r(nut,"deberta-v2"),nut.forEach(t),Nur=r(A7e," \u2014 "),zG=s(A7e,"A",{href:!0});var lut=n(zG);qur=r(lut,"TFDebertaV2ForTokenClassification"),lut.forEach(t),Our=r(A7e," (DeBERTa-v2 model)"),A7e.forEach(t),Gur=i(oe),a4=s(oe,"LI",{});var L7e=n(a4);w_e=s(L7e,"STRONG",{});var iut=n(w_e);Xur=r(iut,"distilbert"),iut.forEach(t),Vur=r(L7e," \u2014 "),WG=s(L7e,"A",{href:!0});var dut=n(WG);zur=r(dut,"TFDistilBertForTokenClassification"),dut.forEach(t),Wur=r(L7e," (DistilBERT model)"),L7e.forEach(t),Qur=i(oe),s4=s(oe,"LI",{});var B7e=n(s4);A_e=s(B7e,"STRONG",{});var cut=n(A_e);Hur=r(cut,"electra"),cut.forEach(t),Uur=r(B7e," \u2014 "),QG=s(B7e,"A",{href:!0});var mut=n(QG);Jur=r(mut,"TFElectraForTokenClassification"),mut.forEach(t),Yur=r(B7e," (ELECTRA model)"),B7e.forEach(t),Kur=i(oe),n4=s(oe,"LI",{});var x7e=n(n4);L_e=s(x7e,"STRONG",{});var fut=n(L_e);Zur=r(fut,"flaubert"),fut.forEach(t),epr=r(x7e," \u2014 "),HG=s(x7e,"A",{href:!0});var gut=n(HG);opr=r(gut,"TFFlaubertForTokenClassification"),gut.forEach(t),rpr=r(x7e," (FlauBERT model)"),x7e.forEach(t),tpr=i(oe),l4=s(oe,"LI",{});var k7e=n(l4);B_e=s(k7e,"STRONG",{});var hut=n(B_e);apr=r(hut,"funnel"),hut.forEach(t),spr=r(k7e," \u2014 "),UG=s(k7e,"A",{href:!0});var uut=n(UG);npr=r(uut,"TFFunnelForTokenClassification"),uut.forEach(t),lpr=r(k7e," (Funnel Transformer model)"),k7e.forEach(t),ipr=i(oe),i4=s(oe,"LI",{});var R7e=n(i4);x_e=s(R7e,"STRONG",{});var put=n(x_e);dpr=r(put,"layoutlm"),put.forEach(t),cpr=r(R7e," \u2014 "),JG=s(R7e,"A",{href:!0});var _ut=n(JG);mpr=r(_ut,"TFLayoutLMForTokenClassification"),_ut.forEach(t),fpr=r(R7e," (LayoutLM model)"),R7e.forEach(t),gpr=i(oe),d4=s(oe,"LI",{});var S7e=n(d4);k_e=s(S7e,"STRONG",{});var but=n(k_e);hpr=r(but,"longformer"),but.forEach(t),upr=r(S7e," \u2014 "),YG=s(S7e,"A",{href:!0});var vut=n(YG);ppr=r(vut,"TFLongformerForTokenClassification"),vut.forEach(t),_pr=r(S7e," (Longformer model)"),S7e.forEach(t),bpr=i(oe),c4=s(oe,"LI",{});var P7e=n(c4);R_e=s(P7e,"STRONG",{});var Tut=n(R_e);vpr=r(Tut,"mobilebert"),Tut.forEach(t),Tpr=r(P7e," \u2014 "),KG=s(P7e,"A",{href:!0});var Fut=n(KG);Fpr=r(Fut,"TFMobileBertForTokenClassification"),Fut.forEach(t),Cpr=r(P7e," (MobileBERT model)"),P7e.forEach(t),Mpr=i(oe),m4=s(oe,"LI",{});var $7e=n(m4);S_e=s($7e,"STRONG",{});var Cut=n(S_e);Epr=r(Cut,"mpnet"),Cut.forEach(t),ypr=r($7e," \u2014 "),ZG=s($7e,"A",{href:!0});var Mut=n(ZG);wpr=r(Mut,"TFMPNetForTokenClassification"),Mut.forEach(t),Apr=r($7e," (MPNet model)"),$7e.forEach(t),Lpr=i(oe),f4=s(oe,"LI",{});var I7e=n(f4);P_e=s(I7e,"STRONG",{});var Eut=n(P_e);Bpr=r(Eut,"rembert"),Eut.forEach(t),xpr=r(I7e," \u2014 "),eX=s(I7e,"A",{href:!0});var yut=n(eX);kpr=r(yut,"TFRemBertForTokenClassification"),yut.forEach(t),Rpr=r(I7e," (RemBERT model)"),I7e.forEach(t),Spr=i(oe),g4=s(oe,"LI",{});var j7e=n(g4);$_e=s(j7e,"STRONG",{});var wut=n($_e);Ppr=r(wut,"roberta"),wut.forEach(t),$pr=r(j7e," \u2014 "),oX=s(j7e,"A",{href:!0});var Aut=n(oX);Ipr=r(Aut,"TFRobertaForTokenClassification"),Aut.forEach(t),jpr=r(j7e," (RoBERTa model)"),j7e.forEach(t),Dpr=i(oe),h4=s(oe,"LI",{});var D7e=n(h4);I_e=s(D7e,"STRONG",{});var Lut=n(I_e);Npr=r(Lut,"roformer"),Lut.forEach(t),qpr=r(D7e," \u2014 "),rX=s(D7e,"A",{href:!0});var But=n(rX);Opr=r(But,"TFRoFormerForTokenClassification"),But.forEach(t),Gpr=r(D7e," (RoFormer model)"),D7e.forEach(t),Xpr=i(oe),u4=s(oe,"LI",{});var N7e=n(u4);j_e=s(N7e,"STRONG",{});var xut=n(j_e);Vpr=r(xut,"xlm"),xut.forEach(t),zpr=r(N7e," \u2014 "),tX=s(N7e,"A",{href:!0});var kut=n(tX);Wpr=r(kut,"TFXLMForTokenClassification"),kut.forEach(t),Qpr=r(N7e," (XLM model)"),N7e.forEach(t),Hpr=i(oe),p4=s(oe,"LI",{});var q7e=n(p4);D_e=s(q7e,"STRONG",{});var Rut=n(D_e);Upr=r(Rut,"xlm-roberta"),Rut.forEach(t),Jpr=r(q7e," \u2014 "),aX=s(q7e,"A",{href:!0});var Sut=n(aX);Ypr=r(Sut,"TFXLMRobertaForTokenClassification"),Sut.forEach(t),Kpr=r(q7e," (XLM-RoBERTa model)"),q7e.forEach(t),Zpr=i(oe),_4=s(oe,"LI",{});var O7e=n(_4);N_e=s(O7e,"STRONG",{});var Put=n(N_e);e_r=r(Put,"xlnet"),Put.forEach(t),o_r=r(O7e," \u2014 "),sX=s(O7e,"A",{href:!0});var $ut=n(sX);r_r=r($ut,"TFXLNetForTokenClassification"),$ut.forEach(t),t_r=r(O7e," (XLNet model)"),O7e.forEach(t),oe.forEach(t),a_r=i(Ea),q_e=s(Ea,"P",{});var Iut=n(q_e);s_r=r(Iut,"Examples:"),Iut.forEach(t),n_r=i(Ea),f(X0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),Ake=i(d),Xc=s(d,"H2",{class:!0});var NSe=n(Xc);b4=s(NSe,"A",{id:!0,class:!0,href:!0});var jut=n(b4);O_e=s(jut,"SPAN",{});var Dut=n(O_e);f(V0.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),l_r=i(NSe),G_e=s(NSe,"SPAN",{});var Nut=n(G_e);i_r=r(Nut,"TFAutoModelForQuestionAnswering"),Nut.forEach(t),NSe.forEach(t),Lke=i(d),Br=s(d,"DIV",{class:!0});var si=n(Br);f(z0.$$.fragment,si),d_r=i(si),Vc=s(si,"P",{});var IW=n(Vc);c_r=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),X_e=s(IW,"CODE",{});var qut=n(X_e);m_r=r(qut,"from_pretrained()"),qut.forEach(t),f_r=r(IW,"class method or the "),V_e=s(IW,"CODE",{});var Out=n(V_e);g_r=r(Out,"from_config()"),Out.forEach(t),h_r=r(IW,`class
method.`),IW.forEach(t),u_r=i(si),W0=s(si,"P",{});var qSe=n(W0);p_r=r(qSe,"This class cannot be instantiated directly using "),z_e=s(qSe,"CODE",{});var Gut=n(z_e);__r=r(Gut,"__init__()"),Gut.forEach(t),b_r=r(qSe," (throws an error)."),qSe.forEach(t),v_r=i(si),Mt=s(si,"DIV",{class:!0});var ni=n(Mt);f(Q0.$$.fragment,ni),T_r=i(ni),W_e=s(ni,"P",{});var Xut=n(W_e);F_r=r(Xut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xut.forEach(t),C_r=i(ni),zc=s(ni,"P",{});var jW=n(zc);M_r=r(jW,`Note:
Loading a model from its configuration file does `),Q_e=s(jW,"STRONG",{});var Vut=n(Q_e);E_r=r(Vut,"not"),Vut.forEach(t),y_r=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=s(jW,"CODE",{});var zut=n(H_e);w_r=r(zut,"from_pretrained()"),zut.forEach(t),A_r=r(jW,"to load the model weights."),jW.forEach(t),L_r=i(ni),U_e=s(ni,"P",{});var Wut=n(U_e);B_r=r(Wut,"Examples:"),Wut.forEach(t),x_r=i(ni),f(H0.$$.fragment,ni),ni.forEach(t),k_r=i(si),Eo=s(si,"DIV",{class:!0});var ya=n(Eo);f(U0.$$.fragment,ya),R_r=i(ya),J_e=s(ya,"P",{});var Qut=n(J_e);S_r=r(Qut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qut.forEach(t),P_r=i(ya),ys=s(ya,"P",{});var k5=n(ys);$_r=r(k5,"The model class to instantiate is selected based on the "),Y_e=s(k5,"CODE",{});var Hut=n(Y_e);I_r=r(Hut,"model_type"),Hut.forEach(t),j_r=r(k5,` property of the config object (either
passed as an argument or loaded from `),K_e=s(k5,"CODE",{});var Uut=n(K_e);D_r=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),N_r=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=s(k5,"CODE",{});var Jut=n(Z_e);q_r=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),O_r=r(k5,":"),k5.forEach(t),G_r=i(ya),Z=s(ya,"UL",{});var re=n(Z);v4=s(re,"LI",{});var G7e=n(v4);ebe=s(G7e,"STRONG",{});var Yut=n(ebe);X_r=r(Yut,"albert"),Yut.forEach(t),V_r=r(G7e," \u2014 "),nX=s(G7e,"A",{href:!0});var Kut=n(nX);z_r=r(Kut,"TFAlbertForQuestionAnswering"),Kut.forEach(t),W_r=r(G7e," (ALBERT model)"),G7e.forEach(t),Q_r=i(re),T4=s(re,"LI",{});var X7e=n(T4);obe=s(X7e,"STRONG",{});var Zut=n(obe);H_r=r(Zut,"bert"),Zut.forEach(t),U_r=r(X7e," \u2014 "),lX=s(X7e,"A",{href:!0});var ept=n(lX);J_r=r(ept,"TFBertForQuestionAnswering"),ept.forEach(t),Y_r=r(X7e," (BERT model)"),X7e.forEach(t),K_r=i(re),F4=s(re,"LI",{});var V7e=n(F4);rbe=s(V7e,"STRONG",{});var opt=n(rbe);Z_r=r(opt,"camembert"),opt.forEach(t),ebr=r(V7e," \u2014 "),iX=s(V7e,"A",{href:!0});var rpt=n(iX);obr=r(rpt,"TFCamembertForQuestionAnswering"),rpt.forEach(t),rbr=r(V7e," (CamemBERT model)"),V7e.forEach(t),tbr=i(re),C4=s(re,"LI",{});var z7e=n(C4);tbe=s(z7e,"STRONG",{});var tpt=n(tbe);abr=r(tpt,"convbert"),tpt.forEach(t),sbr=r(z7e," \u2014 "),dX=s(z7e,"A",{href:!0});var apt=n(dX);nbr=r(apt,"TFConvBertForQuestionAnswering"),apt.forEach(t),lbr=r(z7e," (ConvBERT model)"),z7e.forEach(t),ibr=i(re),M4=s(re,"LI",{});var W7e=n(M4);abe=s(W7e,"STRONG",{});var spt=n(abe);dbr=r(spt,"deberta"),spt.forEach(t),cbr=r(W7e," \u2014 "),cX=s(W7e,"A",{href:!0});var npt=n(cX);mbr=r(npt,"TFDebertaForQuestionAnswering"),npt.forEach(t),fbr=r(W7e," (DeBERTa model)"),W7e.forEach(t),gbr=i(re),E4=s(re,"LI",{});var Q7e=n(E4);sbe=s(Q7e,"STRONG",{});var lpt=n(sbe);hbr=r(lpt,"deberta-v2"),lpt.forEach(t),ubr=r(Q7e," \u2014 "),mX=s(Q7e,"A",{href:!0});var ipt=n(mX);pbr=r(ipt,"TFDebertaV2ForQuestionAnswering"),ipt.forEach(t),_br=r(Q7e," (DeBERTa-v2 model)"),Q7e.forEach(t),bbr=i(re),y4=s(re,"LI",{});var H7e=n(y4);nbe=s(H7e,"STRONG",{});var dpt=n(nbe);vbr=r(dpt,"distilbert"),dpt.forEach(t),Tbr=r(H7e," \u2014 "),fX=s(H7e,"A",{href:!0});var cpt=n(fX);Fbr=r(cpt,"TFDistilBertForQuestionAnswering"),cpt.forEach(t),Cbr=r(H7e," (DistilBERT model)"),H7e.forEach(t),Mbr=i(re),w4=s(re,"LI",{});var U7e=n(w4);lbe=s(U7e,"STRONG",{});var mpt=n(lbe);Ebr=r(mpt,"electra"),mpt.forEach(t),ybr=r(U7e," \u2014 "),gX=s(U7e,"A",{href:!0});var fpt=n(gX);wbr=r(fpt,"TFElectraForQuestionAnswering"),fpt.forEach(t),Abr=r(U7e," (ELECTRA model)"),U7e.forEach(t),Lbr=i(re),A4=s(re,"LI",{});var J7e=n(A4);ibe=s(J7e,"STRONG",{});var gpt=n(ibe);Bbr=r(gpt,"flaubert"),gpt.forEach(t),xbr=r(J7e," \u2014 "),hX=s(J7e,"A",{href:!0});var hpt=n(hX);kbr=r(hpt,"TFFlaubertForQuestionAnsweringSimple"),hpt.forEach(t),Rbr=r(J7e," (FlauBERT model)"),J7e.forEach(t),Sbr=i(re),L4=s(re,"LI",{});var Y7e=n(L4);dbe=s(Y7e,"STRONG",{});var upt=n(dbe);Pbr=r(upt,"funnel"),upt.forEach(t),$br=r(Y7e," \u2014 "),uX=s(Y7e,"A",{href:!0});var ppt=n(uX);Ibr=r(ppt,"TFFunnelForQuestionAnswering"),ppt.forEach(t),jbr=r(Y7e," (Funnel Transformer model)"),Y7e.forEach(t),Dbr=i(re),B4=s(re,"LI",{});var K7e=n(B4);cbe=s(K7e,"STRONG",{});var _pt=n(cbe);Nbr=r(_pt,"longformer"),_pt.forEach(t),qbr=r(K7e," \u2014 "),pX=s(K7e,"A",{href:!0});var bpt=n(pX);Obr=r(bpt,"TFLongformerForQuestionAnswering"),bpt.forEach(t),Gbr=r(K7e," (Longformer model)"),K7e.forEach(t),Xbr=i(re),x4=s(re,"LI",{});var Z7e=n(x4);mbe=s(Z7e,"STRONG",{});var vpt=n(mbe);Vbr=r(vpt,"mobilebert"),vpt.forEach(t),zbr=r(Z7e," \u2014 "),_X=s(Z7e,"A",{href:!0});var Tpt=n(_X);Wbr=r(Tpt,"TFMobileBertForQuestionAnswering"),Tpt.forEach(t),Qbr=r(Z7e," (MobileBERT model)"),Z7e.forEach(t),Hbr=i(re),k4=s(re,"LI",{});var e9e=n(k4);fbe=s(e9e,"STRONG",{});var Fpt=n(fbe);Ubr=r(Fpt,"mpnet"),Fpt.forEach(t),Jbr=r(e9e," \u2014 "),bX=s(e9e,"A",{href:!0});var Cpt=n(bX);Ybr=r(Cpt,"TFMPNetForQuestionAnswering"),Cpt.forEach(t),Kbr=r(e9e," (MPNet model)"),e9e.forEach(t),Zbr=i(re),R4=s(re,"LI",{});var o9e=n(R4);gbe=s(o9e,"STRONG",{});var Mpt=n(gbe);e2r=r(Mpt,"rembert"),Mpt.forEach(t),o2r=r(o9e," \u2014 "),vX=s(o9e,"A",{href:!0});var Ept=n(vX);r2r=r(Ept,"TFRemBertForQuestionAnswering"),Ept.forEach(t),t2r=r(o9e," (RemBERT model)"),o9e.forEach(t),a2r=i(re),S4=s(re,"LI",{});var r9e=n(S4);hbe=s(r9e,"STRONG",{});var ypt=n(hbe);s2r=r(ypt,"roberta"),ypt.forEach(t),n2r=r(r9e," \u2014 "),TX=s(r9e,"A",{href:!0});var wpt=n(TX);l2r=r(wpt,"TFRobertaForQuestionAnswering"),wpt.forEach(t),i2r=r(r9e," (RoBERTa model)"),r9e.forEach(t),d2r=i(re),P4=s(re,"LI",{});var t9e=n(P4);ube=s(t9e,"STRONG",{});var Apt=n(ube);c2r=r(Apt,"roformer"),Apt.forEach(t),m2r=r(t9e," \u2014 "),FX=s(t9e,"A",{href:!0});var Lpt=n(FX);f2r=r(Lpt,"TFRoFormerForQuestionAnswering"),Lpt.forEach(t),g2r=r(t9e," (RoFormer model)"),t9e.forEach(t),h2r=i(re),$4=s(re,"LI",{});var a9e=n($4);pbe=s(a9e,"STRONG",{});var Bpt=n(pbe);u2r=r(Bpt,"xlm"),Bpt.forEach(t),p2r=r(a9e," \u2014 "),CX=s(a9e,"A",{href:!0});var xpt=n(CX);_2r=r(xpt,"TFXLMForQuestionAnsweringSimple"),xpt.forEach(t),b2r=r(a9e," (XLM model)"),a9e.forEach(t),v2r=i(re),I4=s(re,"LI",{});var s9e=n(I4);_be=s(s9e,"STRONG",{});var kpt=n(_be);T2r=r(kpt,"xlm-roberta"),kpt.forEach(t),F2r=r(s9e," \u2014 "),MX=s(s9e,"A",{href:!0});var Rpt=n(MX);C2r=r(Rpt,"TFXLMRobertaForQuestionAnswering"),Rpt.forEach(t),M2r=r(s9e," (XLM-RoBERTa model)"),s9e.forEach(t),E2r=i(re),j4=s(re,"LI",{});var n9e=n(j4);bbe=s(n9e,"STRONG",{});var Spt=n(bbe);y2r=r(Spt,"xlnet"),Spt.forEach(t),w2r=r(n9e," \u2014 "),EX=s(n9e,"A",{href:!0});var Ppt=n(EX);A2r=r(Ppt,"TFXLNetForQuestionAnsweringSimple"),Ppt.forEach(t),L2r=r(n9e," (XLNet model)"),n9e.forEach(t),re.forEach(t),B2r=i(ya),vbe=s(ya,"P",{});var $pt=n(vbe);x2r=r($pt,"Examples:"),$pt.forEach(t),k2r=i(ya),f(J0.$$.fragment,ya),ya.forEach(t),si.forEach(t),Bke=i(d),Wc=s(d,"H2",{class:!0});var OSe=n(Wc);D4=s(OSe,"A",{id:!0,class:!0,href:!0});var Ipt=n(D4);Tbe=s(Ipt,"SPAN",{});var jpt=n(Tbe);f(Y0.$$.fragment,jpt),jpt.forEach(t),Ipt.forEach(t),R2r=i(OSe),Fbe=s(OSe,"SPAN",{});var Dpt=n(Fbe);S2r=r(Dpt,"TFAutoModelForVision2Seq"),Dpt.forEach(t),OSe.forEach(t),xke=i(d),xr=s(d,"DIV",{class:!0});var li=n(xr);f(K0.$$.fragment,li),P2r=i(li),Qc=s(li,"P",{});var DW=n(Qc);$2r=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cbe=s(DW,"CODE",{});var Npt=n(Cbe);I2r=r(Npt,"from_pretrained()"),Npt.forEach(t),j2r=r(DW,"class method or the "),Mbe=s(DW,"CODE",{});var qpt=n(Mbe);D2r=r(qpt,"from_config()"),qpt.forEach(t),N2r=r(DW,`class
method.`),DW.forEach(t),q2r=i(li),Z0=s(li,"P",{});var GSe=n(Z0);O2r=r(GSe,"This class cannot be instantiated directly using "),Ebe=s(GSe,"CODE",{});var Opt=n(Ebe);G2r=r(Opt,"__init__()"),Opt.forEach(t),X2r=r(GSe," (throws an error)."),GSe.forEach(t),V2r=i(li),Et=s(li,"DIV",{class:!0});var ii=n(Et);f(eL.$$.fragment,ii),z2r=i(ii),ybe=s(ii,"P",{});var Gpt=n(ybe);W2r=r(Gpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gpt.forEach(t),Q2r=i(ii),Hc=s(ii,"P",{});var NW=n(Hc);H2r=r(NW,`Note:
Loading a model from its configuration file does `),wbe=s(NW,"STRONG",{});var Xpt=n(wbe);U2r=r(Xpt,"not"),Xpt.forEach(t),J2r=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=s(NW,"CODE",{});var Vpt=n(Abe);Y2r=r(Vpt,"from_pretrained()"),Vpt.forEach(t),K2r=r(NW,"to load the model weights."),NW.forEach(t),Z2r=i(ii),Lbe=s(ii,"P",{});var zpt=n(Lbe);evr=r(zpt,"Examples:"),zpt.forEach(t),ovr=i(ii),f(oL.$$.fragment,ii),ii.forEach(t),rvr=i(li),yo=s(li,"DIV",{class:!0});var wa=n(yo);f(rL.$$.fragment,wa),tvr=i(wa),Bbe=s(wa,"P",{});var Wpt=n(Bbe);avr=r(Wpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wpt.forEach(t),svr=i(wa),ws=s(wa,"P",{});var R5=n(ws);nvr=r(R5,"The model class to instantiate is selected based on the "),xbe=s(R5,"CODE",{});var Qpt=n(xbe);lvr=r(Qpt,"model_type"),Qpt.forEach(t),ivr=r(R5,` property of the config object (either
passed as an argument or loaded from `),kbe=s(R5,"CODE",{});var Hpt=n(kbe);dvr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),cvr=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=s(R5,"CODE",{});var Upt=n(Rbe);mvr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),fvr=r(R5,":"),R5.forEach(t),gvr=i(wa),Sbe=s(wa,"UL",{});var Jpt=n(Sbe);N4=s(Jpt,"LI",{});var l9e=n(N4);Pbe=s(l9e,"STRONG",{});var Ypt=n(Pbe);hvr=r(Ypt,"vision-encoder-decoder"),Ypt.forEach(t),uvr=r(l9e," \u2014 "),yX=s(l9e,"A",{href:!0});var Kpt=n(yX);pvr=r(Kpt,"TFVisionEncoderDecoderModel"),Kpt.forEach(t),_vr=r(l9e," (Vision Encoder decoder model)"),l9e.forEach(t),Jpt.forEach(t),bvr=i(wa),$be=s(wa,"P",{});var Zpt=n($be);vvr=r(Zpt,"Examples:"),Zpt.forEach(t),Tvr=i(wa),f(tL.$$.fragment,wa),wa.forEach(t),li.forEach(t),kke=i(d),Uc=s(d,"H2",{class:!0});var XSe=n(Uc);q4=s(XSe,"A",{id:!0,class:!0,href:!0});var e_t=n(q4);Ibe=s(e_t,"SPAN",{});var o_t=n(Ibe);f(aL.$$.fragment,o_t),o_t.forEach(t),e_t.forEach(t),Fvr=i(XSe),jbe=s(XSe,"SPAN",{});var r_t=n(jbe);Cvr=r(r_t,"TFAutoModelForSpeechSeq2Seq"),r_t.forEach(t),XSe.forEach(t),Rke=i(d),kr=s(d,"DIV",{class:!0});var di=n(kr);f(sL.$$.fragment,di),Mvr=i(di),Jc=s(di,"P",{});var qW=n(Jc);Evr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dbe=s(qW,"CODE",{});var t_t=n(Dbe);yvr=r(t_t,"from_pretrained()"),t_t.forEach(t),wvr=r(qW,"class method or the "),Nbe=s(qW,"CODE",{});var a_t=n(Nbe);Avr=r(a_t,"from_config()"),a_t.forEach(t),Lvr=r(qW,`class
method.`),qW.forEach(t),Bvr=i(di),nL=s(di,"P",{});var VSe=n(nL);xvr=r(VSe,"This class cannot be instantiated directly using "),qbe=s(VSe,"CODE",{});var s_t=n(qbe);kvr=r(s_t,"__init__()"),s_t.forEach(t),Rvr=r(VSe," (throws an error)."),VSe.forEach(t),Svr=i(di),yt=s(di,"DIV",{class:!0});var ci=n(yt);f(lL.$$.fragment,ci),Pvr=i(ci),Obe=s(ci,"P",{});var n_t=n(Obe);$vr=r(n_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n_t.forEach(t),Ivr=i(ci),Yc=s(ci,"P",{});var OW=n(Yc);jvr=r(OW,`Note:
Loading a model from its configuration file does `),Gbe=s(OW,"STRONG",{});var l_t=n(Gbe);Dvr=r(l_t,"not"),l_t.forEach(t),Nvr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=s(OW,"CODE",{});var i_t=n(Xbe);qvr=r(i_t,"from_pretrained()"),i_t.forEach(t),Ovr=r(OW,"to load the model weights."),OW.forEach(t),Gvr=i(ci),Vbe=s(ci,"P",{});var d_t=n(Vbe);Xvr=r(d_t,"Examples:"),d_t.forEach(t),Vvr=i(ci),f(iL.$$.fragment,ci),ci.forEach(t),zvr=i(di),wo=s(di,"DIV",{class:!0});var Aa=n(wo);f(dL.$$.fragment,Aa),Wvr=i(Aa),zbe=s(Aa,"P",{});var c_t=n(zbe);Qvr=r(c_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),c_t.forEach(t),Hvr=i(Aa),As=s(Aa,"P",{});var S5=n(As);Uvr=r(S5,"The model class to instantiate is selected based on the "),Wbe=s(S5,"CODE",{});var m_t=n(Wbe);Jvr=r(m_t,"model_type"),m_t.forEach(t),Yvr=r(S5,` property of the config object (either
passed as an argument or loaded from `),Qbe=s(S5,"CODE",{});var f_t=n(Qbe);Kvr=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),Zvr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=s(S5,"CODE",{});var g_t=n(Hbe);eTr=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),oTr=r(S5,":"),S5.forEach(t),rTr=i(Aa),Ube=s(Aa,"UL",{});var h_t=n(Ube);O4=s(h_t,"LI",{});var i9e=n(O4);Jbe=s(i9e,"STRONG",{});var u_t=n(Jbe);tTr=r(u_t,"speech_to_text"),u_t.forEach(t),aTr=r(i9e," \u2014 "),wX=s(i9e,"A",{href:!0});var p_t=n(wX);sTr=r(p_t,"TFSpeech2TextForConditionalGeneration"),p_t.forEach(t),nTr=r(i9e," (Speech2Text model)"),i9e.forEach(t),h_t.forEach(t),lTr=i(Aa),Ybe=s(Aa,"P",{});var __t=n(Ybe);iTr=r(__t,"Examples:"),__t.forEach(t),dTr=i(Aa),f(cL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),Ske=i(d),Kc=s(d,"H2",{class:!0});var zSe=n(Kc);G4=s(zSe,"A",{id:!0,class:!0,href:!0});var b_t=n(G4);Kbe=s(b_t,"SPAN",{});var v_t=n(Kbe);f(mL.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),cTr=i(zSe),Zbe=s(zSe,"SPAN",{});var T_t=n(Zbe);mTr=r(T_t,"FlaxAutoModel"),T_t.forEach(t),zSe.forEach(t),Pke=i(d),Rr=s(d,"DIV",{class:!0});var mi=n(Rr);f(fL.$$.fragment,mi),fTr=i(mi),Zc=s(mi,"P",{});var GW=n(Zc);gTr=r(GW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),e2e=s(GW,"CODE",{});var F_t=n(e2e);hTr=r(F_t,"from_pretrained()"),F_t.forEach(t),uTr=r(GW,"class method or the "),o2e=s(GW,"CODE",{});var C_t=n(o2e);pTr=r(C_t,"from_config()"),C_t.forEach(t),_Tr=r(GW,`class
method.`),GW.forEach(t),bTr=i(mi),gL=s(mi,"P",{});var WSe=n(gL);vTr=r(WSe,"This class cannot be instantiated directly using "),r2e=s(WSe,"CODE",{});var M_t=n(r2e);TTr=r(M_t,"__init__()"),M_t.forEach(t),FTr=r(WSe," (throws an error)."),WSe.forEach(t),CTr=i(mi),wt=s(mi,"DIV",{class:!0});var fi=n(wt);f(hL.$$.fragment,fi),MTr=i(fi),t2e=s(fi,"P",{});var E_t=n(t2e);ETr=r(E_t,"Instantiates one of the base model classes of the library from a configuration."),E_t.forEach(t),yTr=i(fi),em=s(fi,"P",{});var XW=n(em);wTr=r(XW,`Note:
Loading a model from its configuration file does `),a2e=s(XW,"STRONG",{});var y_t=n(a2e);ATr=r(y_t,"not"),y_t.forEach(t),LTr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),s2e=s(XW,"CODE",{});var w_t=n(s2e);BTr=r(w_t,"from_pretrained()"),w_t.forEach(t),xTr=r(XW,"to load the model weights."),XW.forEach(t),kTr=i(fi),n2e=s(fi,"P",{});var A_t=n(n2e);RTr=r(A_t,"Examples:"),A_t.forEach(t),STr=i(fi),f(uL.$$.fragment,fi),fi.forEach(t),PTr=i(mi),Ao=s(mi,"DIV",{class:!0});var La=n(Ao);f(pL.$$.fragment,La),$Tr=i(La),l2e=s(La,"P",{});var L_t=n(l2e);ITr=r(L_t,"Instantiate one of the base model classes of the library from a pretrained model."),L_t.forEach(t),jTr=i(La),Ls=s(La,"P",{});var P5=n(Ls);DTr=r(P5,"The model class to instantiate is selected based on the "),i2e=s(P5,"CODE",{});var B_t=n(i2e);NTr=r(B_t,"model_type"),B_t.forEach(t),qTr=r(P5,` property of the config object (either
passed as an argument or loaded from `),d2e=s(P5,"CODE",{});var x_t=n(d2e);OTr=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),GTr=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=s(P5,"CODE",{});var k_t=n(c2e);XTr=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),VTr=r(P5,":"),P5.forEach(t),zTr=i(La),z=s(La,"UL",{});var Q=n(z);X4=s(Q,"LI",{});var d9e=n(X4);m2e=s(d9e,"STRONG",{});var R_t=n(m2e);WTr=r(R_t,"albert"),R_t.forEach(t),QTr=r(d9e," \u2014 "),AX=s(d9e,"A",{href:!0});var S_t=n(AX);HTr=r(S_t,"FlaxAlbertModel"),S_t.forEach(t),UTr=r(d9e," (ALBERT model)"),d9e.forEach(t),JTr=i(Q),V4=s(Q,"LI",{});var c9e=n(V4);f2e=s(c9e,"STRONG",{});var P_t=n(f2e);YTr=r(P_t,"bart"),P_t.forEach(t),KTr=r(c9e," \u2014 "),LX=s(c9e,"A",{href:!0});var $_t=n(LX);ZTr=r($_t,"FlaxBartModel"),$_t.forEach(t),e1r=r(c9e," (BART model)"),c9e.forEach(t),o1r=i(Q),z4=s(Q,"LI",{});var m9e=n(z4);g2e=s(m9e,"STRONG",{});var I_t=n(g2e);r1r=r(I_t,"beit"),I_t.forEach(t),t1r=r(m9e," \u2014 "),BX=s(m9e,"A",{href:!0});var j_t=n(BX);a1r=r(j_t,"FlaxBeitModel"),j_t.forEach(t),s1r=r(m9e," (BEiT model)"),m9e.forEach(t),n1r=i(Q),W4=s(Q,"LI",{});var f9e=n(W4);h2e=s(f9e,"STRONG",{});var D_t=n(h2e);l1r=r(D_t,"bert"),D_t.forEach(t),i1r=r(f9e," \u2014 "),xX=s(f9e,"A",{href:!0});var N_t=n(xX);d1r=r(N_t,"FlaxBertModel"),N_t.forEach(t),c1r=r(f9e," (BERT model)"),f9e.forEach(t),m1r=i(Q),Q4=s(Q,"LI",{});var g9e=n(Q4);u2e=s(g9e,"STRONG",{});var q_t=n(u2e);f1r=r(q_t,"big_bird"),q_t.forEach(t),g1r=r(g9e," \u2014 "),kX=s(g9e,"A",{href:!0});var O_t=n(kX);h1r=r(O_t,"FlaxBigBirdModel"),O_t.forEach(t),u1r=r(g9e," (BigBird model)"),g9e.forEach(t),p1r=i(Q),H4=s(Q,"LI",{});var h9e=n(H4);p2e=s(h9e,"STRONG",{});var G_t=n(p2e);_1r=r(G_t,"blenderbot"),G_t.forEach(t),b1r=r(h9e," \u2014 "),RX=s(h9e,"A",{href:!0});var X_t=n(RX);v1r=r(X_t,"FlaxBlenderbotModel"),X_t.forEach(t),T1r=r(h9e," (Blenderbot model)"),h9e.forEach(t),F1r=i(Q),U4=s(Q,"LI",{});var u9e=n(U4);_2e=s(u9e,"STRONG",{});var V_t=n(_2e);C1r=r(V_t,"blenderbot-small"),V_t.forEach(t),M1r=r(u9e," \u2014 "),SX=s(u9e,"A",{href:!0});var z_t=n(SX);E1r=r(z_t,"FlaxBlenderbotSmallModel"),z_t.forEach(t),y1r=r(u9e," (BlenderbotSmall model)"),u9e.forEach(t),w1r=i(Q),J4=s(Q,"LI",{});var p9e=n(J4);b2e=s(p9e,"STRONG",{});var W_t=n(b2e);A1r=r(W_t,"clip"),W_t.forEach(t),L1r=r(p9e," \u2014 "),PX=s(p9e,"A",{href:!0});var Q_t=n(PX);B1r=r(Q_t,"FlaxCLIPModel"),Q_t.forEach(t),x1r=r(p9e," (CLIP model)"),p9e.forEach(t),k1r=i(Q),Y4=s(Q,"LI",{});var _9e=n(Y4);v2e=s(_9e,"STRONG",{});var H_t=n(v2e);R1r=r(H_t,"distilbert"),H_t.forEach(t),S1r=r(_9e," \u2014 "),$X=s(_9e,"A",{href:!0});var U_t=n($X);P1r=r(U_t,"FlaxDistilBertModel"),U_t.forEach(t),$1r=r(_9e," (DistilBERT model)"),_9e.forEach(t),I1r=i(Q),K4=s(Q,"LI",{});var b9e=n(K4);T2e=s(b9e,"STRONG",{});var J_t=n(T2e);j1r=r(J_t,"electra"),J_t.forEach(t),D1r=r(b9e," \u2014 "),IX=s(b9e,"A",{href:!0});var Y_t=n(IX);N1r=r(Y_t,"FlaxElectraModel"),Y_t.forEach(t),q1r=r(b9e," (ELECTRA model)"),b9e.forEach(t),O1r=i(Q),Z4=s(Q,"LI",{});var v9e=n(Z4);F2e=s(v9e,"STRONG",{});var K_t=n(F2e);G1r=r(K_t,"gpt2"),K_t.forEach(t),X1r=r(v9e," \u2014 "),jX=s(v9e,"A",{href:!0});var Z_t=n(jX);V1r=r(Z_t,"FlaxGPT2Model"),Z_t.forEach(t),z1r=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),W1r=i(Q),eE=s(Q,"LI",{});var T9e=n(eE);C2e=s(T9e,"STRONG",{});var ebt=n(C2e);Q1r=r(ebt,"gpt_neo"),ebt.forEach(t),H1r=r(T9e," \u2014 "),DX=s(T9e,"A",{href:!0});var obt=n(DX);U1r=r(obt,"FlaxGPTNeoModel"),obt.forEach(t),J1r=r(T9e," (GPT Neo model)"),T9e.forEach(t),Y1r=i(Q),oE=s(Q,"LI",{});var F9e=n(oE);M2e=s(F9e,"STRONG",{});var rbt=n(M2e);K1r=r(rbt,"gptj"),rbt.forEach(t),Z1r=r(F9e," \u2014 "),NX=s(F9e,"A",{href:!0});var tbt=n(NX);eFr=r(tbt,"FlaxGPTJModel"),tbt.forEach(t),oFr=r(F9e," (GPT-J model)"),F9e.forEach(t),rFr=i(Q),rE=s(Q,"LI",{});var C9e=n(rE);E2e=s(C9e,"STRONG",{});var abt=n(E2e);tFr=r(abt,"marian"),abt.forEach(t),aFr=r(C9e," \u2014 "),qX=s(C9e,"A",{href:!0});var sbt=n(qX);sFr=r(sbt,"FlaxMarianModel"),sbt.forEach(t),nFr=r(C9e," (Marian model)"),C9e.forEach(t),lFr=i(Q),tE=s(Q,"LI",{});var M9e=n(tE);y2e=s(M9e,"STRONG",{});var nbt=n(y2e);iFr=r(nbt,"mbart"),nbt.forEach(t),dFr=r(M9e," \u2014 "),OX=s(M9e,"A",{href:!0});var lbt=n(OX);cFr=r(lbt,"FlaxMBartModel"),lbt.forEach(t),mFr=r(M9e," (mBART model)"),M9e.forEach(t),fFr=i(Q),aE=s(Q,"LI",{});var E9e=n(aE);w2e=s(E9e,"STRONG",{});var ibt=n(w2e);gFr=r(ibt,"mt5"),ibt.forEach(t),hFr=r(E9e," \u2014 "),GX=s(E9e,"A",{href:!0});var dbt=n(GX);uFr=r(dbt,"FlaxMT5Model"),dbt.forEach(t),pFr=r(E9e," (mT5 model)"),E9e.forEach(t),_Fr=i(Q),sE=s(Q,"LI",{});var y9e=n(sE);A2e=s(y9e,"STRONG",{});var cbt=n(A2e);bFr=r(cbt,"pegasus"),cbt.forEach(t),vFr=r(y9e," \u2014 "),XX=s(y9e,"A",{href:!0});var mbt=n(XX);TFr=r(mbt,"FlaxPegasusModel"),mbt.forEach(t),FFr=r(y9e," (Pegasus model)"),y9e.forEach(t),CFr=i(Q),nE=s(Q,"LI",{});var w9e=n(nE);L2e=s(w9e,"STRONG",{});var fbt=n(L2e);MFr=r(fbt,"roberta"),fbt.forEach(t),EFr=r(w9e," \u2014 "),VX=s(w9e,"A",{href:!0});var gbt=n(VX);yFr=r(gbt,"FlaxRobertaModel"),gbt.forEach(t),wFr=r(w9e," (RoBERTa model)"),w9e.forEach(t),AFr=i(Q),lE=s(Q,"LI",{});var A9e=n(lE);B2e=s(A9e,"STRONG",{});var hbt=n(B2e);LFr=r(hbt,"roformer"),hbt.forEach(t),BFr=r(A9e," \u2014 "),zX=s(A9e,"A",{href:!0});var ubt=n(zX);xFr=r(ubt,"FlaxRoFormerModel"),ubt.forEach(t),kFr=r(A9e," (RoFormer model)"),A9e.forEach(t),RFr=i(Q),iE=s(Q,"LI",{});var L9e=n(iE);x2e=s(L9e,"STRONG",{});var pbt=n(x2e);SFr=r(pbt,"t5"),pbt.forEach(t),PFr=r(L9e," \u2014 "),WX=s(L9e,"A",{href:!0});var _bt=n(WX);$Fr=r(_bt,"FlaxT5Model"),_bt.forEach(t),IFr=r(L9e," (T5 model)"),L9e.forEach(t),jFr=i(Q),dE=s(Q,"LI",{});var B9e=n(dE);k2e=s(B9e,"STRONG",{});var bbt=n(k2e);DFr=r(bbt,"vision-text-dual-encoder"),bbt.forEach(t),NFr=r(B9e," \u2014 "),QX=s(B9e,"A",{href:!0});var vbt=n(QX);qFr=r(vbt,"FlaxVisionTextDualEncoderModel"),vbt.forEach(t),OFr=r(B9e," (VisionTextDualEncoder model)"),B9e.forEach(t),GFr=i(Q),cE=s(Q,"LI",{});var x9e=n(cE);R2e=s(x9e,"STRONG",{});var Tbt=n(R2e);XFr=r(Tbt,"vit"),Tbt.forEach(t),VFr=r(x9e," \u2014 "),HX=s(x9e,"A",{href:!0});var Fbt=n(HX);zFr=r(Fbt,"FlaxViTModel"),Fbt.forEach(t),WFr=r(x9e," (ViT model)"),x9e.forEach(t),QFr=i(Q),mE=s(Q,"LI",{});var k9e=n(mE);S2e=s(k9e,"STRONG",{});var Cbt=n(S2e);HFr=r(Cbt,"wav2vec2"),Cbt.forEach(t),UFr=r(k9e," \u2014 "),UX=s(k9e,"A",{href:!0});var Mbt=n(UX);JFr=r(Mbt,"FlaxWav2Vec2Model"),Mbt.forEach(t),YFr=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),KFr=i(Q),fE=s(Q,"LI",{});var R9e=n(fE);P2e=s(R9e,"STRONG",{});var Ebt=n(P2e);ZFr=r(Ebt,"xglm"),Ebt.forEach(t),eCr=r(R9e," \u2014 "),JX=s(R9e,"A",{href:!0});var ybt=n(JX);oCr=r(ybt,"FlaxXGLMModel"),ybt.forEach(t),rCr=r(R9e," (XGLM model)"),R9e.forEach(t),tCr=i(Q),gE=s(Q,"LI",{});var S9e=n(gE);$2e=s(S9e,"STRONG",{});var wbt=n($2e);aCr=r(wbt,"xlm-roberta"),wbt.forEach(t),sCr=r(S9e," \u2014 "),YX=s(S9e,"A",{href:!0});var Abt=n(YX);nCr=r(Abt,"FlaxXLMRobertaModel"),Abt.forEach(t),lCr=r(S9e," (XLM-RoBERTa model)"),S9e.forEach(t),Q.forEach(t),iCr=i(La),I2e=s(La,"P",{});var Lbt=n(I2e);dCr=r(Lbt,"Examples:"),Lbt.forEach(t),cCr=i(La),f(_L.$$.fragment,La),La.forEach(t),mi.forEach(t),$ke=i(d),om=s(d,"H2",{class:!0});var QSe=n(om);hE=s(QSe,"A",{id:!0,class:!0,href:!0});var Bbt=n(hE);j2e=s(Bbt,"SPAN",{});var xbt=n(j2e);f(bL.$$.fragment,xbt),xbt.forEach(t),Bbt.forEach(t),mCr=i(QSe),D2e=s(QSe,"SPAN",{});var kbt=n(D2e);fCr=r(kbt,"FlaxAutoModelForCausalLM"),kbt.forEach(t),QSe.forEach(t),Ike=i(d),Sr=s(d,"DIV",{class:!0});var gi=n(Sr);f(vL.$$.fragment,gi),gCr=i(gi),rm=s(gi,"P",{});var VW=n(rm);hCr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),N2e=s(VW,"CODE",{});var Rbt=n(N2e);uCr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),pCr=r(VW,"class method or the "),q2e=s(VW,"CODE",{});var Sbt=n(q2e);_Cr=r(Sbt,"from_config()"),Sbt.forEach(t),bCr=r(VW,`class
method.`),VW.forEach(t),vCr=i(gi),TL=s(gi,"P",{});var HSe=n(TL);TCr=r(HSe,"This class cannot be instantiated directly using "),O2e=s(HSe,"CODE",{});var Pbt=n(O2e);FCr=r(Pbt,"__init__()"),Pbt.forEach(t),CCr=r(HSe," (throws an error)."),HSe.forEach(t),MCr=i(gi),At=s(gi,"DIV",{class:!0});var hi=n(At);f(FL.$$.fragment,hi),ECr=i(hi),G2e=s(hi,"P",{});var $bt=n(G2e);yCr=r($bt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$bt.forEach(t),wCr=i(hi),tm=s(hi,"P",{});var zW=n(tm);ACr=r(zW,`Note:
Loading a model from its configuration file does `),X2e=s(zW,"STRONG",{});var Ibt=n(X2e);LCr=r(Ibt,"not"),Ibt.forEach(t),BCr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=s(zW,"CODE",{});var jbt=n(V2e);xCr=r(jbt,"from_pretrained()"),jbt.forEach(t),kCr=r(zW,"to load the model weights."),zW.forEach(t),RCr=i(hi),z2e=s(hi,"P",{});var Dbt=n(z2e);SCr=r(Dbt,"Examples:"),Dbt.forEach(t),PCr=i(hi),f(CL.$$.fragment,hi),hi.forEach(t),$Cr=i(gi),Lo=s(gi,"DIV",{class:!0});var Ba=n(Lo);f(ML.$$.fragment,Ba),ICr=i(Ba),W2e=s(Ba,"P",{});var Nbt=n(W2e);jCr=r(Nbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nbt.forEach(t),DCr=i(Ba),Bs=s(Ba,"P",{});var $5=n(Bs);NCr=r($5,"The model class to instantiate is selected based on the "),Q2e=s($5,"CODE",{});var qbt=n(Q2e);qCr=r(qbt,"model_type"),qbt.forEach(t),OCr=r($5,` property of the config object (either
passed as an argument or loaded from `),H2e=s($5,"CODE",{});var Obt=n(H2e);GCr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),XCr=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=s($5,"CODE",{});var Gbt=n(U2e);VCr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),zCr=r($5,":"),$5.forEach(t),WCr=i(Ba),ca=s(Ba,"UL",{});var ui=n(ca);uE=s(ui,"LI",{});var P9e=n(uE);J2e=s(P9e,"STRONG",{});var Xbt=n(J2e);QCr=r(Xbt,"bart"),Xbt.forEach(t),HCr=r(P9e," \u2014 "),KX=s(P9e,"A",{href:!0});var Vbt=n(KX);UCr=r(Vbt,"FlaxBartForCausalLM"),Vbt.forEach(t),JCr=r(P9e," (BART model)"),P9e.forEach(t),YCr=i(ui),pE=s(ui,"LI",{});var $9e=n(pE);Y2e=s($9e,"STRONG",{});var zbt=n(Y2e);KCr=r(zbt,"gpt2"),zbt.forEach(t),ZCr=r($9e," \u2014 "),ZX=s($9e,"A",{href:!0});var Wbt=n(ZX);eMr=r(Wbt,"FlaxGPT2LMHeadModel"),Wbt.forEach(t),oMr=r($9e," (OpenAI GPT-2 model)"),$9e.forEach(t),rMr=i(ui),_E=s(ui,"LI",{});var I9e=n(_E);K2e=s(I9e,"STRONG",{});var Qbt=n(K2e);tMr=r(Qbt,"gpt_neo"),Qbt.forEach(t),aMr=r(I9e," \u2014 "),eV=s(I9e,"A",{href:!0});var Hbt=n(eV);sMr=r(Hbt,"FlaxGPTNeoForCausalLM"),Hbt.forEach(t),nMr=r(I9e," (GPT Neo model)"),I9e.forEach(t),lMr=i(ui),bE=s(ui,"LI",{});var j9e=n(bE);Z2e=s(j9e,"STRONG",{});var Ubt=n(Z2e);iMr=r(Ubt,"gptj"),Ubt.forEach(t),dMr=r(j9e," \u2014 "),oV=s(j9e,"A",{href:!0});var Jbt=n(oV);cMr=r(Jbt,"FlaxGPTJForCausalLM"),Jbt.forEach(t),mMr=r(j9e," (GPT-J model)"),j9e.forEach(t),fMr=i(ui),vE=s(ui,"LI",{});var D9e=n(vE);eve=s(D9e,"STRONG",{});var Ybt=n(eve);gMr=r(Ybt,"xglm"),Ybt.forEach(t),hMr=r(D9e," \u2014 "),rV=s(D9e,"A",{href:!0});var Kbt=n(rV);uMr=r(Kbt,"FlaxXGLMForCausalLM"),Kbt.forEach(t),pMr=r(D9e," (XGLM model)"),D9e.forEach(t),ui.forEach(t),_Mr=i(Ba),ove=s(Ba,"P",{});var Zbt=n(ove);bMr=r(Zbt,"Examples:"),Zbt.forEach(t),vMr=i(Ba),f(EL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),jke=i(d),am=s(d,"H2",{class:!0});var USe=n(am);TE=s(USe,"A",{id:!0,class:!0,href:!0});var e2t=n(TE);rve=s(e2t,"SPAN",{});var o2t=n(rve);f(yL.$$.fragment,o2t),o2t.forEach(t),e2t.forEach(t),TMr=i(USe),tve=s(USe,"SPAN",{});var r2t=n(tve);FMr=r(r2t,"FlaxAutoModelForPreTraining"),r2t.forEach(t),USe.forEach(t),Dke=i(d),Pr=s(d,"DIV",{class:!0});var pi=n(Pr);f(wL.$$.fragment,pi),CMr=i(pi),sm=s(pi,"P",{});var WW=n(sm);MMr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ave=s(WW,"CODE",{});var t2t=n(ave);EMr=r(t2t,"from_pretrained()"),t2t.forEach(t),yMr=r(WW,"class method or the "),sve=s(WW,"CODE",{});var a2t=n(sve);wMr=r(a2t,"from_config()"),a2t.forEach(t),AMr=r(WW,`class
method.`),WW.forEach(t),LMr=i(pi),AL=s(pi,"P",{});var JSe=n(AL);BMr=r(JSe,"This class cannot be instantiated directly using "),nve=s(JSe,"CODE",{});var s2t=n(nve);xMr=r(s2t,"__init__()"),s2t.forEach(t),kMr=r(JSe," (throws an error)."),JSe.forEach(t),RMr=i(pi),Lt=s(pi,"DIV",{class:!0});var _i=n(Lt);f(LL.$$.fragment,_i),SMr=i(_i),lve=s(_i,"P",{});var n2t=n(lve);PMr=r(n2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n2t.forEach(t),$Mr=i(_i),nm=s(_i,"P",{});var QW=n(nm);IMr=r(QW,`Note:
Loading a model from its configuration file does `),ive=s(QW,"STRONG",{});var l2t=n(ive);jMr=r(l2t,"not"),l2t.forEach(t),DMr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dve=s(QW,"CODE",{});var i2t=n(dve);NMr=r(i2t,"from_pretrained()"),i2t.forEach(t),qMr=r(QW,"to load the model weights."),QW.forEach(t),OMr=i(_i),cve=s(_i,"P",{});var d2t=n(cve);GMr=r(d2t,"Examples:"),d2t.forEach(t),XMr=i(_i),f(BL.$$.fragment,_i),_i.forEach(t),VMr=i(pi),Bo=s(pi,"DIV",{class:!0});var xa=n(Bo);f(xL.$$.fragment,xa),zMr=i(xa),mve=s(xa,"P",{});var c2t=n(mve);WMr=r(c2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c2t.forEach(t),QMr=i(xa),xs=s(xa,"P",{});var I5=n(xs);HMr=r(I5,"The model class to instantiate is selected based on the "),fve=s(I5,"CODE",{});var m2t=n(fve);UMr=r(m2t,"model_type"),m2t.forEach(t),JMr=r(I5,` property of the config object (either
passed as an argument or loaded from `),gve=s(I5,"CODE",{});var f2t=n(gve);YMr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),KMr=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=s(I5,"CODE",{});var g2t=n(hve);ZMr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),e4r=r(I5,":"),I5.forEach(t),o4r=i(xa),ce=s(xa,"UL",{});var fe=n(ce);FE=s(fe,"LI",{});var N9e=n(FE);uve=s(N9e,"STRONG",{});var h2t=n(uve);r4r=r(h2t,"albert"),h2t.forEach(t),t4r=r(N9e," \u2014 "),tV=s(N9e,"A",{href:!0});var u2t=n(tV);a4r=r(u2t,"FlaxAlbertForPreTraining"),u2t.forEach(t),s4r=r(N9e," (ALBERT model)"),N9e.forEach(t),n4r=i(fe),CE=s(fe,"LI",{});var q9e=n(CE);pve=s(q9e,"STRONG",{});var p2t=n(pve);l4r=r(p2t,"bart"),p2t.forEach(t),i4r=r(q9e," \u2014 "),aV=s(q9e,"A",{href:!0});var _2t=n(aV);d4r=r(_2t,"FlaxBartForConditionalGeneration"),_2t.forEach(t),c4r=r(q9e," (BART model)"),q9e.forEach(t),m4r=i(fe),ME=s(fe,"LI",{});var O9e=n(ME);_ve=s(O9e,"STRONG",{});var b2t=n(_ve);f4r=r(b2t,"bert"),b2t.forEach(t),g4r=r(O9e," \u2014 "),sV=s(O9e,"A",{href:!0});var v2t=n(sV);h4r=r(v2t,"FlaxBertForPreTraining"),v2t.forEach(t),u4r=r(O9e," (BERT model)"),O9e.forEach(t),p4r=i(fe),EE=s(fe,"LI",{});var G9e=n(EE);bve=s(G9e,"STRONG",{});var T2t=n(bve);_4r=r(T2t,"big_bird"),T2t.forEach(t),b4r=r(G9e," \u2014 "),nV=s(G9e,"A",{href:!0});var F2t=n(nV);v4r=r(F2t,"FlaxBigBirdForPreTraining"),F2t.forEach(t),T4r=r(G9e," (BigBird model)"),G9e.forEach(t),F4r=i(fe),yE=s(fe,"LI",{});var X9e=n(yE);vve=s(X9e,"STRONG",{});var C2t=n(vve);C4r=r(C2t,"electra"),C2t.forEach(t),M4r=r(X9e," \u2014 "),lV=s(X9e,"A",{href:!0});var M2t=n(lV);E4r=r(M2t,"FlaxElectraForPreTraining"),M2t.forEach(t),y4r=r(X9e," (ELECTRA model)"),X9e.forEach(t),w4r=i(fe),wE=s(fe,"LI",{});var V9e=n(wE);Tve=s(V9e,"STRONG",{});var E2t=n(Tve);A4r=r(E2t,"mbart"),E2t.forEach(t),L4r=r(V9e," \u2014 "),iV=s(V9e,"A",{href:!0});var y2t=n(iV);B4r=r(y2t,"FlaxMBartForConditionalGeneration"),y2t.forEach(t),x4r=r(V9e," (mBART model)"),V9e.forEach(t),k4r=i(fe),AE=s(fe,"LI",{});var z9e=n(AE);Fve=s(z9e,"STRONG",{});var w2t=n(Fve);R4r=r(w2t,"mt5"),w2t.forEach(t),S4r=r(z9e," \u2014 "),dV=s(z9e,"A",{href:!0});var A2t=n(dV);P4r=r(A2t,"FlaxMT5ForConditionalGeneration"),A2t.forEach(t),$4r=r(z9e," (mT5 model)"),z9e.forEach(t),I4r=i(fe),LE=s(fe,"LI",{});var W9e=n(LE);Cve=s(W9e,"STRONG",{});var L2t=n(Cve);j4r=r(L2t,"roberta"),L2t.forEach(t),D4r=r(W9e," \u2014 "),cV=s(W9e,"A",{href:!0});var B2t=n(cV);N4r=r(B2t,"FlaxRobertaForMaskedLM"),B2t.forEach(t),q4r=r(W9e," (RoBERTa model)"),W9e.forEach(t),O4r=i(fe),BE=s(fe,"LI",{});var Q9e=n(BE);Mve=s(Q9e,"STRONG",{});var x2t=n(Mve);G4r=r(x2t,"roformer"),x2t.forEach(t),X4r=r(Q9e," \u2014 "),mV=s(Q9e,"A",{href:!0});var k2t=n(mV);V4r=r(k2t,"FlaxRoFormerForMaskedLM"),k2t.forEach(t),z4r=r(Q9e," (RoFormer model)"),Q9e.forEach(t),W4r=i(fe),xE=s(fe,"LI",{});var H9e=n(xE);Eve=s(H9e,"STRONG",{});var R2t=n(Eve);Q4r=r(R2t,"t5"),R2t.forEach(t),H4r=r(H9e," \u2014 "),fV=s(H9e,"A",{href:!0});var S2t=n(fV);U4r=r(S2t,"FlaxT5ForConditionalGeneration"),S2t.forEach(t),J4r=r(H9e," (T5 model)"),H9e.forEach(t),Y4r=i(fe),kE=s(fe,"LI",{});var U9e=n(kE);yve=s(U9e,"STRONG",{});var P2t=n(yve);K4r=r(P2t,"wav2vec2"),P2t.forEach(t),Z4r=r(U9e," \u2014 "),gV=s(U9e,"A",{href:!0});var $2t=n(gV);eEr=r($2t,"FlaxWav2Vec2ForPreTraining"),$2t.forEach(t),oEr=r(U9e," (Wav2Vec2 model)"),U9e.forEach(t),rEr=i(fe),RE=s(fe,"LI",{});var J9e=n(RE);wve=s(J9e,"STRONG",{});var I2t=n(wve);tEr=r(I2t,"xlm-roberta"),I2t.forEach(t),aEr=r(J9e," \u2014 "),hV=s(J9e,"A",{href:!0});var j2t=n(hV);sEr=r(j2t,"FlaxXLMRobertaForMaskedLM"),j2t.forEach(t),nEr=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),fe.forEach(t),lEr=i(xa),Ave=s(xa,"P",{});var D2t=n(Ave);iEr=r(D2t,"Examples:"),D2t.forEach(t),dEr=i(xa),f(kL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),Nke=i(d),lm=s(d,"H2",{class:!0});var YSe=n(lm);SE=s(YSe,"A",{id:!0,class:!0,href:!0});var N2t=n(SE);Lve=s(N2t,"SPAN",{});var q2t=n(Lve);f(RL.$$.fragment,q2t),q2t.forEach(t),N2t.forEach(t),cEr=i(YSe),Bve=s(YSe,"SPAN",{});var O2t=n(Bve);mEr=r(O2t,"FlaxAutoModelForMaskedLM"),O2t.forEach(t),YSe.forEach(t),qke=i(d),$r=s(d,"DIV",{class:!0});var bi=n($r);f(SL.$$.fragment,bi),fEr=i(bi),im=s(bi,"P",{});var HW=n(im);gEr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xve=s(HW,"CODE",{});var G2t=n(xve);hEr=r(G2t,"from_pretrained()"),G2t.forEach(t),uEr=r(HW,"class method or the "),kve=s(HW,"CODE",{});var X2t=n(kve);pEr=r(X2t,"from_config()"),X2t.forEach(t),_Er=r(HW,`class
method.`),HW.forEach(t),bEr=i(bi),PL=s(bi,"P",{});var KSe=n(PL);vEr=r(KSe,"This class cannot be instantiated directly using "),Rve=s(KSe,"CODE",{});var V2t=n(Rve);TEr=r(V2t,"__init__()"),V2t.forEach(t),FEr=r(KSe," (throws an error)."),KSe.forEach(t),CEr=i(bi),Bt=s(bi,"DIV",{class:!0});var vi=n(Bt);f($L.$$.fragment,vi),MEr=i(vi),Sve=s(vi,"P",{});var z2t=n(Sve);EEr=r(z2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),z2t.forEach(t),yEr=i(vi),dm=s(vi,"P",{});var UW=n(dm);wEr=r(UW,`Note:
Loading a model from its configuration file does `),Pve=s(UW,"STRONG",{});var W2t=n(Pve);AEr=r(W2t,"not"),W2t.forEach(t),LEr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=s(UW,"CODE",{});var Q2t=n($ve);BEr=r(Q2t,"from_pretrained()"),Q2t.forEach(t),xEr=r(UW,"to load the model weights."),UW.forEach(t),kEr=i(vi),Ive=s(vi,"P",{});var H2t=n(Ive);REr=r(H2t,"Examples:"),H2t.forEach(t),SEr=i(vi),f(IL.$$.fragment,vi),vi.forEach(t),PEr=i(bi),xo=s(bi,"DIV",{class:!0});var ka=n(xo);f(jL.$$.fragment,ka),$Er=i(ka),jve=s(ka,"P",{});var U2t=n(jve);IEr=r(U2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U2t.forEach(t),jEr=i(ka),ks=s(ka,"P",{});var j5=n(ks);DEr=r(j5,"The model class to instantiate is selected based on the "),Dve=s(j5,"CODE",{});var J2t=n(Dve);NEr=r(J2t,"model_type"),J2t.forEach(t),qEr=r(j5,` property of the config object (either
passed as an argument or loaded from `),Nve=s(j5,"CODE",{});var Y2t=n(Nve);OEr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),GEr=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=s(j5,"CODE",{});var K2t=n(qve);XEr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),VEr=r(j5,":"),j5.forEach(t),zEr=i(ka),_e=s(ka,"UL",{});var ye=n(_e);PE=s(ye,"LI",{});var Y9e=n(PE);Ove=s(Y9e,"STRONG",{});var Z2t=n(Ove);WEr=r(Z2t,"albert"),Z2t.forEach(t),QEr=r(Y9e," \u2014 "),uV=s(Y9e,"A",{href:!0});var evt=n(uV);HEr=r(evt,"FlaxAlbertForMaskedLM"),evt.forEach(t),UEr=r(Y9e," (ALBERT model)"),Y9e.forEach(t),JEr=i(ye),$E=s(ye,"LI",{});var K9e=n($E);Gve=s(K9e,"STRONG",{});var ovt=n(Gve);YEr=r(ovt,"bart"),ovt.forEach(t),KEr=r(K9e," \u2014 "),pV=s(K9e,"A",{href:!0});var rvt=n(pV);ZEr=r(rvt,"FlaxBartForConditionalGeneration"),rvt.forEach(t),e3r=r(K9e," (BART model)"),K9e.forEach(t),o3r=i(ye),IE=s(ye,"LI",{});var Z9e=n(IE);Xve=s(Z9e,"STRONG",{});var tvt=n(Xve);r3r=r(tvt,"bert"),tvt.forEach(t),t3r=r(Z9e," \u2014 "),_V=s(Z9e,"A",{href:!0});var avt=n(_V);a3r=r(avt,"FlaxBertForMaskedLM"),avt.forEach(t),s3r=r(Z9e," (BERT model)"),Z9e.forEach(t),n3r=i(ye),jE=s(ye,"LI",{});var eBe=n(jE);Vve=s(eBe,"STRONG",{});var svt=n(Vve);l3r=r(svt,"big_bird"),svt.forEach(t),i3r=r(eBe," \u2014 "),bV=s(eBe,"A",{href:!0});var nvt=n(bV);d3r=r(nvt,"FlaxBigBirdForMaskedLM"),nvt.forEach(t),c3r=r(eBe," (BigBird model)"),eBe.forEach(t),m3r=i(ye),DE=s(ye,"LI",{});var oBe=n(DE);zve=s(oBe,"STRONG",{});var lvt=n(zve);f3r=r(lvt,"distilbert"),lvt.forEach(t),g3r=r(oBe," \u2014 "),vV=s(oBe,"A",{href:!0});var ivt=n(vV);h3r=r(ivt,"FlaxDistilBertForMaskedLM"),ivt.forEach(t),u3r=r(oBe," (DistilBERT model)"),oBe.forEach(t),p3r=i(ye),NE=s(ye,"LI",{});var rBe=n(NE);Wve=s(rBe,"STRONG",{});var dvt=n(Wve);_3r=r(dvt,"electra"),dvt.forEach(t),b3r=r(rBe," \u2014 "),TV=s(rBe,"A",{href:!0});var cvt=n(TV);v3r=r(cvt,"FlaxElectraForMaskedLM"),cvt.forEach(t),T3r=r(rBe," (ELECTRA model)"),rBe.forEach(t),F3r=i(ye),qE=s(ye,"LI",{});var tBe=n(qE);Qve=s(tBe,"STRONG",{});var mvt=n(Qve);C3r=r(mvt,"mbart"),mvt.forEach(t),M3r=r(tBe," \u2014 "),FV=s(tBe,"A",{href:!0});var fvt=n(FV);E3r=r(fvt,"FlaxMBartForConditionalGeneration"),fvt.forEach(t),y3r=r(tBe," (mBART model)"),tBe.forEach(t),w3r=i(ye),OE=s(ye,"LI",{});var aBe=n(OE);Hve=s(aBe,"STRONG",{});var gvt=n(Hve);A3r=r(gvt,"roberta"),gvt.forEach(t),L3r=r(aBe," \u2014 "),CV=s(aBe,"A",{href:!0});var hvt=n(CV);B3r=r(hvt,"FlaxRobertaForMaskedLM"),hvt.forEach(t),x3r=r(aBe," (RoBERTa model)"),aBe.forEach(t),k3r=i(ye),GE=s(ye,"LI",{});var sBe=n(GE);Uve=s(sBe,"STRONG",{});var uvt=n(Uve);R3r=r(uvt,"roformer"),uvt.forEach(t),S3r=r(sBe," \u2014 "),MV=s(sBe,"A",{href:!0});var pvt=n(MV);P3r=r(pvt,"FlaxRoFormerForMaskedLM"),pvt.forEach(t),$3r=r(sBe," (RoFormer model)"),sBe.forEach(t),I3r=i(ye),XE=s(ye,"LI",{});var nBe=n(XE);Jve=s(nBe,"STRONG",{});var _vt=n(Jve);j3r=r(_vt,"xlm-roberta"),_vt.forEach(t),D3r=r(nBe," \u2014 "),EV=s(nBe,"A",{href:!0});var bvt=n(EV);N3r=r(bvt,"FlaxXLMRobertaForMaskedLM"),bvt.forEach(t),q3r=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),ye.forEach(t),O3r=i(ka),Yve=s(ka,"P",{});var vvt=n(Yve);G3r=r(vvt,"Examples:"),vvt.forEach(t),X3r=i(ka),f(DL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),Oke=i(d),cm=s(d,"H2",{class:!0});var ZSe=n(cm);VE=s(ZSe,"A",{id:!0,class:!0,href:!0});var Tvt=n(VE);Kve=s(Tvt,"SPAN",{});var Fvt=n(Kve);f(NL.$$.fragment,Fvt),Fvt.forEach(t),Tvt.forEach(t),V3r=i(ZSe),Zve=s(ZSe,"SPAN",{});var Cvt=n(Zve);z3r=r(Cvt,"FlaxAutoModelForSeq2SeqLM"),Cvt.forEach(t),ZSe.forEach(t),Gke=i(d),Ir=s(d,"DIV",{class:!0});var Ti=n(Ir);f(qL.$$.fragment,Ti),W3r=i(Ti),mm=s(Ti,"P",{});var JW=n(mm);Q3r=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eTe=s(JW,"CODE",{});var Mvt=n(eTe);H3r=r(Mvt,"from_pretrained()"),Mvt.forEach(t),U3r=r(JW,"class method or the "),oTe=s(JW,"CODE",{});var Evt=n(oTe);J3r=r(Evt,"from_config()"),Evt.forEach(t),Y3r=r(JW,`class
method.`),JW.forEach(t),K3r=i(Ti),OL=s(Ti,"P",{});var ePe=n(OL);Z3r=r(ePe,"This class cannot be instantiated directly using "),rTe=s(ePe,"CODE",{});var yvt=n(rTe);e5r=r(yvt,"__init__()"),yvt.forEach(t),o5r=r(ePe," (throws an error)."),ePe.forEach(t),r5r=i(Ti),xt=s(Ti,"DIV",{class:!0});var Fi=n(xt);f(GL.$$.fragment,Fi),t5r=i(Fi),tTe=s(Fi,"P",{});var wvt=n(tTe);a5r=r(wvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wvt.forEach(t),s5r=i(Fi),fm=s(Fi,"P",{});var YW=n(fm);n5r=r(YW,`Note:
Loading a model from its configuration file does `),aTe=s(YW,"STRONG",{});var Avt=n(aTe);l5r=r(Avt,"not"),Avt.forEach(t),i5r=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sTe=s(YW,"CODE",{});var Lvt=n(sTe);d5r=r(Lvt,"from_pretrained()"),Lvt.forEach(t),c5r=r(YW,"to load the model weights."),YW.forEach(t),m5r=i(Fi),nTe=s(Fi,"P",{});var Bvt=n(nTe);f5r=r(Bvt,"Examples:"),Bvt.forEach(t),g5r=i(Fi),f(XL.$$.fragment,Fi),Fi.forEach(t),h5r=i(Ti),ko=s(Ti,"DIV",{class:!0});var Ra=n(ko);f(VL.$$.fragment,Ra),u5r=i(Ra),lTe=s(Ra,"P",{});var xvt=n(lTe);p5r=r(xvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xvt.forEach(t),_5r=i(Ra),Rs=s(Ra,"P",{});var D5=n(Rs);b5r=r(D5,"The model class to instantiate is selected based on the "),iTe=s(D5,"CODE",{});var kvt=n(iTe);v5r=r(kvt,"model_type"),kvt.forEach(t),T5r=r(D5,` property of the config object (either
passed as an argument or loaded from `),dTe=s(D5,"CODE",{});var Rvt=n(dTe);F5r=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),C5r=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=s(D5,"CODE",{});var Svt=n(cTe);M5r=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),E5r=r(D5,":"),D5.forEach(t),y5r=i(Ra),Ce=s(Ra,"UL",{});var lo=n(Ce);zE=s(lo,"LI",{});var lBe=n(zE);mTe=s(lBe,"STRONG",{});var Pvt=n(mTe);w5r=r(Pvt,"bart"),Pvt.forEach(t),A5r=r(lBe," \u2014 "),yV=s(lBe,"A",{href:!0});var $vt=n(yV);L5r=r($vt,"FlaxBartForConditionalGeneration"),$vt.forEach(t),B5r=r(lBe," (BART model)"),lBe.forEach(t),x5r=i(lo),WE=s(lo,"LI",{});var iBe=n(WE);fTe=s(iBe,"STRONG",{});var Ivt=n(fTe);k5r=r(Ivt,"blenderbot"),Ivt.forEach(t),R5r=r(iBe," \u2014 "),wV=s(iBe,"A",{href:!0});var jvt=n(wV);S5r=r(jvt,"FlaxBlenderbotForConditionalGeneration"),jvt.forEach(t),P5r=r(iBe," (Blenderbot model)"),iBe.forEach(t),$5r=i(lo),QE=s(lo,"LI",{});var dBe=n(QE);gTe=s(dBe,"STRONG",{});var Dvt=n(gTe);I5r=r(Dvt,"blenderbot-small"),Dvt.forEach(t),j5r=r(dBe," \u2014 "),AV=s(dBe,"A",{href:!0});var Nvt=n(AV);D5r=r(Nvt,"FlaxBlenderbotSmallForConditionalGeneration"),Nvt.forEach(t),N5r=r(dBe," (BlenderbotSmall model)"),dBe.forEach(t),q5r=i(lo),HE=s(lo,"LI",{});var cBe=n(HE);hTe=s(cBe,"STRONG",{});var qvt=n(hTe);O5r=r(qvt,"encoder-decoder"),qvt.forEach(t),G5r=r(cBe," \u2014 "),LV=s(cBe,"A",{href:!0});var Ovt=n(LV);X5r=r(Ovt,"FlaxEncoderDecoderModel"),Ovt.forEach(t),V5r=r(cBe," (Encoder decoder model)"),cBe.forEach(t),z5r=i(lo),UE=s(lo,"LI",{});var mBe=n(UE);uTe=s(mBe,"STRONG",{});var Gvt=n(uTe);W5r=r(Gvt,"marian"),Gvt.forEach(t),Q5r=r(mBe," \u2014 "),BV=s(mBe,"A",{href:!0});var Xvt=n(BV);H5r=r(Xvt,"FlaxMarianMTModel"),Xvt.forEach(t),U5r=r(mBe," (Marian model)"),mBe.forEach(t),J5r=i(lo),JE=s(lo,"LI",{});var fBe=n(JE);pTe=s(fBe,"STRONG",{});var Vvt=n(pTe);Y5r=r(Vvt,"mbart"),Vvt.forEach(t),K5r=r(fBe," \u2014 "),xV=s(fBe,"A",{href:!0});var zvt=n(xV);Z5r=r(zvt,"FlaxMBartForConditionalGeneration"),zvt.forEach(t),eyr=r(fBe," (mBART model)"),fBe.forEach(t),oyr=i(lo),YE=s(lo,"LI",{});var gBe=n(YE);_Te=s(gBe,"STRONG",{});var Wvt=n(_Te);ryr=r(Wvt,"mt5"),Wvt.forEach(t),tyr=r(gBe," \u2014 "),kV=s(gBe,"A",{href:!0});var Qvt=n(kV);ayr=r(Qvt,"FlaxMT5ForConditionalGeneration"),Qvt.forEach(t),syr=r(gBe," (mT5 model)"),gBe.forEach(t),nyr=i(lo),KE=s(lo,"LI",{});var hBe=n(KE);bTe=s(hBe,"STRONG",{});var Hvt=n(bTe);lyr=r(Hvt,"pegasus"),Hvt.forEach(t),iyr=r(hBe," \u2014 "),RV=s(hBe,"A",{href:!0});var Uvt=n(RV);dyr=r(Uvt,"FlaxPegasusForConditionalGeneration"),Uvt.forEach(t),cyr=r(hBe," (Pegasus model)"),hBe.forEach(t),myr=i(lo),ZE=s(lo,"LI",{});var uBe=n(ZE);vTe=s(uBe,"STRONG",{});var Jvt=n(vTe);fyr=r(Jvt,"t5"),Jvt.forEach(t),gyr=r(uBe," \u2014 "),SV=s(uBe,"A",{href:!0});var Yvt=n(SV);hyr=r(Yvt,"FlaxT5ForConditionalGeneration"),Yvt.forEach(t),uyr=r(uBe," (T5 model)"),uBe.forEach(t),lo.forEach(t),pyr=i(Ra),TTe=s(Ra,"P",{});var Kvt=n(TTe);_yr=r(Kvt,"Examples:"),Kvt.forEach(t),byr=i(Ra),f(zL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),Xke=i(d),gm=s(d,"H2",{class:!0});var oPe=n(gm);e3=s(oPe,"A",{id:!0,class:!0,href:!0});var Zvt=n(e3);FTe=s(Zvt,"SPAN",{});var eTt=n(FTe);f(WL.$$.fragment,eTt),eTt.forEach(t),Zvt.forEach(t),vyr=i(oPe),CTe=s(oPe,"SPAN",{});var oTt=n(CTe);Tyr=r(oTt,"FlaxAutoModelForSequenceClassification"),oTt.forEach(t),oPe.forEach(t),Vke=i(d),jr=s(d,"DIV",{class:!0});var Ci=n(jr);f(QL.$$.fragment,Ci),Fyr=i(Ci),hm=s(Ci,"P",{});var KW=n(hm);Cyr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MTe=s(KW,"CODE",{});var rTt=n(MTe);Myr=r(rTt,"from_pretrained()"),rTt.forEach(t),Eyr=r(KW,"class method or the "),ETe=s(KW,"CODE",{});var tTt=n(ETe);yyr=r(tTt,"from_config()"),tTt.forEach(t),wyr=r(KW,`class
method.`),KW.forEach(t),Ayr=i(Ci),HL=s(Ci,"P",{});var rPe=n(HL);Lyr=r(rPe,"This class cannot be instantiated directly using "),yTe=s(rPe,"CODE",{});var aTt=n(yTe);Byr=r(aTt,"__init__()"),aTt.forEach(t),xyr=r(rPe," (throws an error)."),rPe.forEach(t),kyr=i(Ci),kt=s(Ci,"DIV",{class:!0});var Mi=n(kt);f(UL.$$.fragment,Mi),Ryr=i(Mi),wTe=s(Mi,"P",{});var sTt=n(wTe);Syr=r(sTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sTt.forEach(t),Pyr=i(Mi),um=s(Mi,"P",{});var ZW=n(um);$yr=r(ZW,`Note:
Loading a model from its configuration file does `),ATe=s(ZW,"STRONG",{});var nTt=n(ATe);Iyr=r(nTt,"not"),nTt.forEach(t),jyr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),LTe=s(ZW,"CODE",{});var lTt=n(LTe);Dyr=r(lTt,"from_pretrained()"),lTt.forEach(t),Nyr=r(ZW,"to load the model weights."),ZW.forEach(t),qyr=i(Mi),BTe=s(Mi,"P",{});var iTt=n(BTe);Oyr=r(iTt,"Examples:"),iTt.forEach(t),Gyr=i(Mi),f(JL.$$.fragment,Mi),Mi.forEach(t),Xyr=i(Ci),Ro=s(Ci,"DIV",{class:!0});var Sa=n(Ro);f(YL.$$.fragment,Sa),Vyr=i(Sa),xTe=s(Sa,"P",{});var dTt=n(xTe);zyr=r(dTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dTt.forEach(t),Wyr=i(Sa),Ss=s(Sa,"P",{});var N5=n(Ss);Qyr=r(N5,"The model class to instantiate is selected based on the "),kTe=s(N5,"CODE",{});var cTt=n(kTe);Hyr=r(cTt,"model_type"),cTt.forEach(t),Uyr=r(N5,` property of the config object (either
passed as an argument or loaded from `),RTe=s(N5,"CODE",{});var mTt=n(RTe);Jyr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),Yyr=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=s(N5,"CODE",{});var fTt=n(STe);Kyr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),Zyr=r(N5,":"),N5.forEach(t),ewr=i(Sa),be=s(Sa,"UL",{});var we=n(be);o3=s(we,"LI",{});var pBe=n(o3);PTe=s(pBe,"STRONG",{});var gTt=n(PTe);owr=r(gTt,"albert"),gTt.forEach(t),rwr=r(pBe," \u2014 "),PV=s(pBe,"A",{href:!0});var hTt=n(PV);twr=r(hTt,"FlaxAlbertForSequenceClassification"),hTt.forEach(t),awr=r(pBe," (ALBERT model)"),pBe.forEach(t),swr=i(we),r3=s(we,"LI",{});var _Be=n(r3);$Te=s(_Be,"STRONG",{});var uTt=n($Te);nwr=r(uTt,"bart"),uTt.forEach(t),lwr=r(_Be," \u2014 "),$V=s(_Be,"A",{href:!0});var pTt=n($V);iwr=r(pTt,"FlaxBartForSequenceClassification"),pTt.forEach(t),dwr=r(_Be," (BART model)"),_Be.forEach(t),cwr=i(we),t3=s(we,"LI",{});var bBe=n(t3);ITe=s(bBe,"STRONG",{});var _Tt=n(ITe);mwr=r(_Tt,"bert"),_Tt.forEach(t),fwr=r(bBe," \u2014 "),IV=s(bBe,"A",{href:!0});var bTt=n(IV);gwr=r(bTt,"FlaxBertForSequenceClassification"),bTt.forEach(t),hwr=r(bBe," (BERT model)"),bBe.forEach(t),uwr=i(we),a3=s(we,"LI",{});var vBe=n(a3);jTe=s(vBe,"STRONG",{});var vTt=n(jTe);pwr=r(vTt,"big_bird"),vTt.forEach(t),_wr=r(vBe," \u2014 "),jV=s(vBe,"A",{href:!0});var TTt=n(jV);bwr=r(TTt,"FlaxBigBirdForSequenceClassification"),TTt.forEach(t),vwr=r(vBe," (BigBird model)"),vBe.forEach(t),Twr=i(we),s3=s(we,"LI",{});var TBe=n(s3);DTe=s(TBe,"STRONG",{});var FTt=n(DTe);Fwr=r(FTt,"distilbert"),FTt.forEach(t),Cwr=r(TBe," \u2014 "),DV=s(TBe,"A",{href:!0});var CTt=n(DV);Mwr=r(CTt,"FlaxDistilBertForSequenceClassification"),CTt.forEach(t),Ewr=r(TBe," (DistilBERT model)"),TBe.forEach(t),ywr=i(we),n3=s(we,"LI",{});var FBe=n(n3);NTe=s(FBe,"STRONG",{});var MTt=n(NTe);wwr=r(MTt,"electra"),MTt.forEach(t),Awr=r(FBe," \u2014 "),NV=s(FBe,"A",{href:!0});var ETt=n(NV);Lwr=r(ETt,"FlaxElectraForSequenceClassification"),ETt.forEach(t),Bwr=r(FBe," (ELECTRA model)"),FBe.forEach(t),xwr=i(we),l3=s(we,"LI",{});var CBe=n(l3);qTe=s(CBe,"STRONG",{});var yTt=n(qTe);kwr=r(yTt,"mbart"),yTt.forEach(t),Rwr=r(CBe," \u2014 "),qV=s(CBe,"A",{href:!0});var wTt=n(qV);Swr=r(wTt,"FlaxMBartForSequenceClassification"),wTt.forEach(t),Pwr=r(CBe," (mBART model)"),CBe.forEach(t),$wr=i(we),i3=s(we,"LI",{});var MBe=n(i3);OTe=s(MBe,"STRONG",{});var ATt=n(OTe);Iwr=r(ATt,"roberta"),ATt.forEach(t),jwr=r(MBe," \u2014 "),OV=s(MBe,"A",{href:!0});var LTt=n(OV);Dwr=r(LTt,"FlaxRobertaForSequenceClassification"),LTt.forEach(t),Nwr=r(MBe," (RoBERTa model)"),MBe.forEach(t),qwr=i(we),d3=s(we,"LI",{});var EBe=n(d3);GTe=s(EBe,"STRONG",{});var BTt=n(GTe);Owr=r(BTt,"roformer"),BTt.forEach(t),Gwr=r(EBe," \u2014 "),GV=s(EBe,"A",{href:!0});var xTt=n(GV);Xwr=r(xTt,"FlaxRoFormerForSequenceClassification"),xTt.forEach(t),Vwr=r(EBe," (RoFormer model)"),EBe.forEach(t),zwr=i(we),c3=s(we,"LI",{});var yBe=n(c3);XTe=s(yBe,"STRONG",{});var kTt=n(XTe);Wwr=r(kTt,"xlm-roberta"),kTt.forEach(t),Qwr=r(yBe," \u2014 "),XV=s(yBe,"A",{href:!0});var RTt=n(XV);Hwr=r(RTt,"FlaxXLMRobertaForSequenceClassification"),RTt.forEach(t),Uwr=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),we.forEach(t),Jwr=i(Sa),VTe=s(Sa,"P",{});var STt=n(VTe);Ywr=r(STt,"Examples:"),STt.forEach(t),Kwr=i(Sa),f(KL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),zke=i(d),pm=s(d,"H2",{class:!0});var tPe=n(pm);m3=s(tPe,"A",{id:!0,class:!0,href:!0});var PTt=n(m3);zTe=s(PTt,"SPAN",{});var $Tt=n(zTe);f(ZL.$$.fragment,$Tt),$Tt.forEach(t),PTt.forEach(t),Zwr=i(tPe),WTe=s(tPe,"SPAN",{});var ITt=n(WTe);e6r=r(ITt,"FlaxAutoModelForQuestionAnswering"),ITt.forEach(t),tPe.forEach(t),Wke=i(d),Dr=s(d,"DIV",{class:!0});var Ei=n(Dr);f(e8.$$.fragment,Ei),o6r=i(Ei),_m=s(Ei,"P",{});var eQ=n(_m);r6r=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QTe=s(eQ,"CODE",{});var jTt=n(QTe);t6r=r(jTt,"from_pretrained()"),jTt.forEach(t),a6r=r(eQ,"class method or the "),HTe=s(eQ,"CODE",{});var DTt=n(HTe);s6r=r(DTt,"from_config()"),DTt.forEach(t),n6r=r(eQ,`class
method.`),eQ.forEach(t),l6r=i(Ei),o8=s(Ei,"P",{});var aPe=n(o8);i6r=r(aPe,"This class cannot be instantiated directly using "),UTe=s(aPe,"CODE",{});var NTt=n(UTe);d6r=r(NTt,"__init__()"),NTt.forEach(t),c6r=r(aPe," (throws an error)."),aPe.forEach(t),m6r=i(Ei),Rt=s(Ei,"DIV",{class:!0});var yi=n(Rt);f(r8.$$.fragment,yi),f6r=i(yi),JTe=s(yi,"P",{});var qTt=n(JTe);g6r=r(qTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qTt.forEach(t),h6r=i(yi),bm=s(yi,"P",{});var oQ=n(bm);u6r=r(oQ,`Note:
Loading a model from its configuration file does `),YTe=s(oQ,"STRONG",{});var OTt=n(YTe);p6r=r(OTt,"not"),OTt.forEach(t),_6r=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KTe=s(oQ,"CODE",{});var GTt=n(KTe);b6r=r(GTt,"from_pretrained()"),GTt.forEach(t),v6r=r(oQ,"to load the model weights."),oQ.forEach(t),T6r=i(yi),ZTe=s(yi,"P",{});var XTt=n(ZTe);F6r=r(XTt,"Examples:"),XTt.forEach(t),C6r=i(yi),f(t8.$$.fragment,yi),yi.forEach(t),M6r=i(Ei),So=s(Ei,"DIV",{class:!0});var Pa=n(So);f(a8.$$.fragment,Pa),E6r=i(Pa),e1e=s(Pa,"P",{});var VTt=n(e1e);y6r=r(VTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VTt.forEach(t),w6r=i(Pa),Ps=s(Pa,"P",{});var q5=n(Ps);A6r=r(q5,"The model class to instantiate is selected based on the "),o1e=s(q5,"CODE",{});var zTt=n(o1e);L6r=r(zTt,"model_type"),zTt.forEach(t),B6r=r(q5,` property of the config object (either
passed as an argument or loaded from `),r1e=s(q5,"CODE",{});var WTt=n(r1e);x6r=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),k6r=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=s(q5,"CODE",{});var QTt=n(t1e);R6r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),S6r=r(q5,":"),q5.forEach(t),P6r=i(Pa),ve=s(Pa,"UL",{});var Ae=n(ve);f3=s(Ae,"LI",{});var wBe=n(f3);a1e=s(wBe,"STRONG",{});var HTt=n(a1e);$6r=r(HTt,"albert"),HTt.forEach(t),I6r=r(wBe," \u2014 "),VV=s(wBe,"A",{href:!0});var UTt=n(VV);j6r=r(UTt,"FlaxAlbertForQuestionAnswering"),UTt.forEach(t),D6r=r(wBe," (ALBERT model)"),wBe.forEach(t),N6r=i(Ae),g3=s(Ae,"LI",{});var ABe=n(g3);s1e=s(ABe,"STRONG",{});var JTt=n(s1e);q6r=r(JTt,"bart"),JTt.forEach(t),O6r=r(ABe," \u2014 "),zV=s(ABe,"A",{href:!0});var YTt=n(zV);G6r=r(YTt,"FlaxBartForQuestionAnswering"),YTt.forEach(t),X6r=r(ABe," (BART model)"),ABe.forEach(t),V6r=i(Ae),h3=s(Ae,"LI",{});var LBe=n(h3);n1e=s(LBe,"STRONG",{});var KTt=n(n1e);z6r=r(KTt,"bert"),KTt.forEach(t),W6r=r(LBe," \u2014 "),WV=s(LBe,"A",{href:!0});var ZTt=n(WV);Q6r=r(ZTt,"FlaxBertForQuestionAnswering"),ZTt.forEach(t),H6r=r(LBe," (BERT model)"),LBe.forEach(t),U6r=i(Ae),u3=s(Ae,"LI",{});var BBe=n(u3);l1e=s(BBe,"STRONG",{});var e1t=n(l1e);J6r=r(e1t,"big_bird"),e1t.forEach(t),Y6r=r(BBe," \u2014 "),QV=s(BBe,"A",{href:!0});var o1t=n(QV);K6r=r(o1t,"FlaxBigBirdForQuestionAnswering"),o1t.forEach(t),Z6r=r(BBe," (BigBird model)"),BBe.forEach(t),eAr=i(Ae),p3=s(Ae,"LI",{});var xBe=n(p3);i1e=s(xBe,"STRONG",{});var r1t=n(i1e);oAr=r(r1t,"distilbert"),r1t.forEach(t),rAr=r(xBe," \u2014 "),HV=s(xBe,"A",{href:!0});var t1t=n(HV);tAr=r(t1t,"FlaxDistilBertForQuestionAnswering"),t1t.forEach(t),aAr=r(xBe," (DistilBERT model)"),xBe.forEach(t),sAr=i(Ae),_3=s(Ae,"LI",{});var kBe=n(_3);d1e=s(kBe,"STRONG",{});var a1t=n(d1e);nAr=r(a1t,"electra"),a1t.forEach(t),lAr=r(kBe," \u2014 "),UV=s(kBe,"A",{href:!0});var s1t=n(UV);iAr=r(s1t,"FlaxElectraForQuestionAnswering"),s1t.forEach(t),dAr=r(kBe," (ELECTRA model)"),kBe.forEach(t),cAr=i(Ae),b3=s(Ae,"LI",{});var RBe=n(b3);c1e=s(RBe,"STRONG",{});var n1t=n(c1e);mAr=r(n1t,"mbart"),n1t.forEach(t),fAr=r(RBe," \u2014 "),JV=s(RBe,"A",{href:!0});var l1t=n(JV);gAr=r(l1t,"FlaxMBartForQuestionAnswering"),l1t.forEach(t),hAr=r(RBe," (mBART model)"),RBe.forEach(t),uAr=i(Ae),v3=s(Ae,"LI",{});var SBe=n(v3);m1e=s(SBe,"STRONG",{});var i1t=n(m1e);pAr=r(i1t,"roberta"),i1t.forEach(t),_Ar=r(SBe," \u2014 "),YV=s(SBe,"A",{href:!0});var d1t=n(YV);bAr=r(d1t,"FlaxRobertaForQuestionAnswering"),d1t.forEach(t),vAr=r(SBe," (RoBERTa model)"),SBe.forEach(t),TAr=i(Ae),T3=s(Ae,"LI",{});var PBe=n(T3);f1e=s(PBe,"STRONG",{});var c1t=n(f1e);FAr=r(c1t,"roformer"),c1t.forEach(t),CAr=r(PBe," \u2014 "),KV=s(PBe,"A",{href:!0});var m1t=n(KV);MAr=r(m1t,"FlaxRoFormerForQuestionAnswering"),m1t.forEach(t),EAr=r(PBe," (RoFormer model)"),PBe.forEach(t),yAr=i(Ae),F3=s(Ae,"LI",{});var $Be=n(F3);g1e=s($Be,"STRONG",{});var f1t=n(g1e);wAr=r(f1t,"xlm-roberta"),f1t.forEach(t),AAr=r($Be," \u2014 "),ZV=s($Be,"A",{href:!0});var g1t=n(ZV);LAr=r(g1t,"FlaxXLMRobertaForQuestionAnswering"),g1t.forEach(t),BAr=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Ae.forEach(t),xAr=i(Pa),h1e=s(Pa,"P",{});var h1t=n(h1e);kAr=r(h1t,"Examples:"),h1t.forEach(t),RAr=i(Pa),f(s8.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),Qke=i(d),vm=s(d,"H2",{class:!0});var sPe=n(vm);C3=s(sPe,"A",{id:!0,class:!0,href:!0});var u1t=n(C3);u1e=s(u1t,"SPAN",{});var p1t=n(u1e);f(n8.$$.fragment,p1t),p1t.forEach(t),u1t.forEach(t),SAr=i(sPe),p1e=s(sPe,"SPAN",{});var _1t=n(p1e);PAr=r(_1t,"FlaxAutoModelForTokenClassification"),_1t.forEach(t),sPe.forEach(t),Hke=i(d),Nr=s(d,"DIV",{class:!0});var wi=n(Nr);f(l8.$$.fragment,wi),$Ar=i(wi),Tm=s(wi,"P",{});var rQ=n(Tm);IAr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_1e=s(rQ,"CODE",{});var b1t=n(_1e);jAr=r(b1t,"from_pretrained()"),b1t.forEach(t),DAr=r(rQ,"class method or the "),b1e=s(rQ,"CODE",{});var v1t=n(b1e);NAr=r(v1t,"from_config()"),v1t.forEach(t),qAr=r(rQ,`class
method.`),rQ.forEach(t),OAr=i(wi),i8=s(wi,"P",{});var nPe=n(i8);GAr=r(nPe,"This class cannot be instantiated directly using "),v1e=s(nPe,"CODE",{});var T1t=n(v1e);XAr=r(T1t,"__init__()"),T1t.forEach(t),VAr=r(nPe," (throws an error)."),nPe.forEach(t),zAr=i(wi),St=s(wi,"DIV",{class:!0});var Ai=n(St);f(d8.$$.fragment,Ai),WAr=i(Ai),T1e=s(Ai,"P",{});var F1t=n(T1e);QAr=r(F1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F1t.forEach(t),HAr=i(Ai),Fm=s(Ai,"P",{});var tQ=n(Fm);UAr=r(tQ,`Note:
Loading a model from its configuration file does `),F1e=s(tQ,"STRONG",{});var C1t=n(F1e);JAr=r(C1t,"not"),C1t.forEach(t),YAr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C1e=s(tQ,"CODE",{});var M1t=n(C1e);KAr=r(M1t,"from_pretrained()"),M1t.forEach(t),ZAr=r(tQ,"to load the model weights."),tQ.forEach(t),e0r=i(Ai),M1e=s(Ai,"P",{});var E1t=n(M1e);o0r=r(E1t,"Examples:"),E1t.forEach(t),r0r=i(Ai),f(c8.$$.fragment,Ai),Ai.forEach(t),t0r=i(wi),Po=s(wi,"DIV",{class:!0});var $a=n(Po);f(m8.$$.fragment,$a),a0r=i($a),E1e=s($a,"P",{});var y1t=n(E1e);s0r=r(y1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y1t.forEach(t),n0r=i($a),$s=s($a,"P",{});var O5=n($s);l0r=r(O5,"The model class to instantiate is selected based on the "),y1e=s(O5,"CODE",{});var w1t=n(y1e);i0r=r(w1t,"model_type"),w1t.forEach(t),d0r=r(O5,` property of the config object (either
passed as an argument or loaded from `),w1e=s(O5,"CODE",{});var A1t=n(w1e);c0r=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),m0r=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=s(O5,"CODE",{});var L1t=n(A1e);f0r=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),g0r=r(O5,":"),O5.forEach(t),h0r=i($a),Re=s($a,"UL",{});var Go=n(Re);M3=s(Go,"LI",{});var IBe=n(M3);L1e=s(IBe,"STRONG",{});var B1t=n(L1e);u0r=r(B1t,"albert"),B1t.forEach(t),p0r=r(IBe," \u2014 "),ez=s(IBe,"A",{href:!0});var x1t=n(ez);_0r=r(x1t,"FlaxAlbertForTokenClassification"),x1t.forEach(t),b0r=r(IBe," (ALBERT model)"),IBe.forEach(t),v0r=i(Go),E3=s(Go,"LI",{});var jBe=n(E3);B1e=s(jBe,"STRONG",{});var k1t=n(B1e);T0r=r(k1t,"bert"),k1t.forEach(t),F0r=r(jBe," \u2014 "),oz=s(jBe,"A",{href:!0});var R1t=n(oz);C0r=r(R1t,"FlaxBertForTokenClassification"),R1t.forEach(t),M0r=r(jBe," (BERT model)"),jBe.forEach(t),E0r=i(Go),y3=s(Go,"LI",{});var DBe=n(y3);x1e=s(DBe,"STRONG",{});var S1t=n(x1e);y0r=r(S1t,"big_bird"),S1t.forEach(t),w0r=r(DBe," \u2014 "),rz=s(DBe,"A",{href:!0});var P1t=n(rz);A0r=r(P1t,"FlaxBigBirdForTokenClassification"),P1t.forEach(t),L0r=r(DBe," (BigBird model)"),DBe.forEach(t),B0r=i(Go),w3=s(Go,"LI",{});var NBe=n(w3);k1e=s(NBe,"STRONG",{});var $1t=n(k1e);x0r=r($1t,"distilbert"),$1t.forEach(t),k0r=r(NBe," \u2014 "),tz=s(NBe,"A",{href:!0});var I1t=n(tz);R0r=r(I1t,"FlaxDistilBertForTokenClassification"),I1t.forEach(t),S0r=r(NBe," (DistilBERT model)"),NBe.forEach(t),P0r=i(Go),A3=s(Go,"LI",{});var qBe=n(A3);R1e=s(qBe,"STRONG",{});var j1t=n(R1e);$0r=r(j1t,"electra"),j1t.forEach(t),I0r=r(qBe," \u2014 "),az=s(qBe,"A",{href:!0});var D1t=n(az);j0r=r(D1t,"FlaxElectraForTokenClassification"),D1t.forEach(t),D0r=r(qBe," (ELECTRA model)"),qBe.forEach(t),N0r=i(Go),L3=s(Go,"LI",{});var OBe=n(L3);S1e=s(OBe,"STRONG",{});var N1t=n(S1e);q0r=r(N1t,"roberta"),N1t.forEach(t),O0r=r(OBe," \u2014 "),sz=s(OBe,"A",{href:!0});var q1t=n(sz);G0r=r(q1t,"FlaxRobertaForTokenClassification"),q1t.forEach(t),X0r=r(OBe," (RoBERTa model)"),OBe.forEach(t),V0r=i(Go),B3=s(Go,"LI",{});var GBe=n(B3);P1e=s(GBe,"STRONG",{});var O1t=n(P1e);z0r=r(O1t,"roformer"),O1t.forEach(t),W0r=r(GBe," \u2014 "),nz=s(GBe,"A",{href:!0});var G1t=n(nz);Q0r=r(G1t,"FlaxRoFormerForTokenClassification"),G1t.forEach(t),H0r=r(GBe," (RoFormer model)"),GBe.forEach(t),U0r=i(Go),x3=s(Go,"LI",{});var XBe=n(x3);$1e=s(XBe,"STRONG",{});var X1t=n($1e);J0r=r(X1t,"xlm-roberta"),X1t.forEach(t),Y0r=r(XBe," \u2014 "),lz=s(XBe,"A",{href:!0});var V1t=n(lz);K0r=r(V1t,"FlaxXLMRobertaForTokenClassification"),V1t.forEach(t),Z0r=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),Go.forEach(t),eLr=i($a),I1e=s($a,"P",{});var z1t=n(I1e);oLr=r(z1t,"Examples:"),z1t.forEach(t),rLr=i($a),f(f8.$$.fragment,$a),$a.forEach(t),wi.forEach(t),Uke=i(d),Cm=s(d,"H2",{class:!0});var lPe=n(Cm);k3=s(lPe,"A",{id:!0,class:!0,href:!0});var W1t=n(k3);j1e=s(W1t,"SPAN",{});var Q1t=n(j1e);f(g8.$$.fragment,Q1t),Q1t.forEach(t),W1t.forEach(t),tLr=i(lPe),D1e=s(lPe,"SPAN",{});var H1t=n(D1e);aLr=r(H1t,"FlaxAutoModelForMultipleChoice"),H1t.forEach(t),lPe.forEach(t),Jke=i(d),qr=s(d,"DIV",{class:!0});var Li=n(qr);f(h8.$$.fragment,Li),sLr=i(Li),Mm=s(Li,"P",{});var aQ=n(Mm);nLr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),N1e=s(aQ,"CODE",{});var U1t=n(N1e);lLr=r(U1t,"from_pretrained()"),U1t.forEach(t),iLr=r(aQ,"class method or the "),q1e=s(aQ,"CODE",{});var J1t=n(q1e);dLr=r(J1t,"from_config()"),J1t.forEach(t),cLr=r(aQ,`class
method.`),aQ.forEach(t),mLr=i(Li),u8=s(Li,"P",{});var iPe=n(u8);fLr=r(iPe,"This class cannot be instantiated directly using "),O1e=s(iPe,"CODE",{});var Y1t=n(O1e);gLr=r(Y1t,"__init__()"),Y1t.forEach(t),hLr=r(iPe," (throws an error)."),iPe.forEach(t),uLr=i(Li),Pt=s(Li,"DIV",{class:!0});var Bi=n(Pt);f(p8.$$.fragment,Bi),pLr=i(Bi),G1e=s(Bi,"P",{});var K1t=n(G1e);_Lr=r(K1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K1t.forEach(t),bLr=i(Bi),Em=s(Bi,"P",{});var sQ=n(Em);vLr=r(sQ,`Note:
Loading a model from its configuration file does `),X1e=s(sQ,"STRONG",{});var Z1t=n(X1e);TLr=r(Z1t,"not"),Z1t.forEach(t),FLr=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=s(sQ,"CODE",{});var eFt=n(V1e);CLr=r(eFt,"from_pretrained()"),eFt.forEach(t),MLr=r(sQ,"to load the model weights."),sQ.forEach(t),ELr=i(Bi),z1e=s(Bi,"P",{});var oFt=n(z1e);yLr=r(oFt,"Examples:"),oFt.forEach(t),wLr=i(Bi),f(_8.$$.fragment,Bi),Bi.forEach(t),ALr=i(Li),$o=s(Li,"DIV",{class:!0});var Ia=n($o);f(b8.$$.fragment,Ia),LLr=i(Ia),W1e=s(Ia,"P",{});var rFt=n(W1e);BLr=r(rFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rFt.forEach(t),xLr=i(Ia),Is=s(Ia,"P",{});var G5=n(Is);kLr=r(G5,"The model class to instantiate is selected based on the "),Q1e=s(G5,"CODE",{});var tFt=n(Q1e);RLr=r(tFt,"model_type"),tFt.forEach(t),SLr=r(G5,` property of the config object (either
passed as an argument or loaded from `),H1e=s(G5,"CODE",{});var aFt=n(H1e);PLr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),$Lr=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=s(G5,"CODE",{});var sFt=n(U1e);ILr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),jLr=r(G5,":"),G5.forEach(t),DLr=i(Ia),Se=s(Ia,"UL",{});var Xo=n(Se);R3=s(Xo,"LI",{});var VBe=n(R3);J1e=s(VBe,"STRONG",{});var nFt=n(J1e);NLr=r(nFt,"albert"),nFt.forEach(t),qLr=r(VBe," \u2014 "),iz=s(VBe,"A",{href:!0});var lFt=n(iz);OLr=r(lFt,"FlaxAlbertForMultipleChoice"),lFt.forEach(t),GLr=r(VBe," (ALBERT model)"),VBe.forEach(t),XLr=i(Xo),S3=s(Xo,"LI",{});var zBe=n(S3);Y1e=s(zBe,"STRONG",{});var iFt=n(Y1e);VLr=r(iFt,"bert"),iFt.forEach(t),zLr=r(zBe," \u2014 "),dz=s(zBe,"A",{href:!0});var dFt=n(dz);WLr=r(dFt,"FlaxBertForMultipleChoice"),dFt.forEach(t),QLr=r(zBe," (BERT model)"),zBe.forEach(t),HLr=i(Xo),P3=s(Xo,"LI",{});var WBe=n(P3);K1e=s(WBe,"STRONG",{});var cFt=n(K1e);ULr=r(cFt,"big_bird"),cFt.forEach(t),JLr=r(WBe," \u2014 "),cz=s(WBe,"A",{href:!0});var mFt=n(cz);YLr=r(mFt,"FlaxBigBirdForMultipleChoice"),mFt.forEach(t),KLr=r(WBe," (BigBird model)"),WBe.forEach(t),ZLr=i(Xo),$3=s(Xo,"LI",{});var QBe=n($3);Z1e=s(QBe,"STRONG",{});var fFt=n(Z1e);e8r=r(fFt,"distilbert"),fFt.forEach(t),o8r=r(QBe," \u2014 "),mz=s(QBe,"A",{href:!0});var gFt=n(mz);r8r=r(gFt,"FlaxDistilBertForMultipleChoice"),gFt.forEach(t),t8r=r(QBe," (DistilBERT model)"),QBe.forEach(t),a8r=i(Xo),I3=s(Xo,"LI",{});var HBe=n(I3);eFe=s(HBe,"STRONG",{});var hFt=n(eFe);s8r=r(hFt,"electra"),hFt.forEach(t),n8r=r(HBe," \u2014 "),fz=s(HBe,"A",{href:!0});var uFt=n(fz);l8r=r(uFt,"FlaxElectraForMultipleChoice"),uFt.forEach(t),i8r=r(HBe," (ELECTRA model)"),HBe.forEach(t),d8r=i(Xo),j3=s(Xo,"LI",{});var UBe=n(j3);oFe=s(UBe,"STRONG",{});var pFt=n(oFe);c8r=r(pFt,"roberta"),pFt.forEach(t),m8r=r(UBe," \u2014 "),gz=s(UBe,"A",{href:!0});var _Ft=n(gz);f8r=r(_Ft,"FlaxRobertaForMultipleChoice"),_Ft.forEach(t),g8r=r(UBe," (RoBERTa model)"),UBe.forEach(t),h8r=i(Xo),D3=s(Xo,"LI",{});var JBe=n(D3);rFe=s(JBe,"STRONG",{});var bFt=n(rFe);u8r=r(bFt,"roformer"),bFt.forEach(t),p8r=r(JBe," \u2014 "),hz=s(JBe,"A",{href:!0});var vFt=n(hz);_8r=r(vFt,"FlaxRoFormerForMultipleChoice"),vFt.forEach(t),b8r=r(JBe," (RoFormer model)"),JBe.forEach(t),v8r=i(Xo),N3=s(Xo,"LI",{});var YBe=n(N3);tFe=s(YBe,"STRONG",{});var TFt=n(tFe);T8r=r(TFt,"xlm-roberta"),TFt.forEach(t),F8r=r(YBe," \u2014 "),uz=s(YBe,"A",{href:!0});var FFt=n(uz);C8r=r(FFt,"FlaxXLMRobertaForMultipleChoice"),FFt.forEach(t),M8r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Xo.forEach(t),E8r=i(Ia),aFe=s(Ia,"P",{});var CFt=n(aFe);y8r=r(CFt,"Examples:"),CFt.forEach(t),w8r=i(Ia),f(v8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),Yke=i(d),ym=s(d,"H2",{class:!0});var dPe=n(ym);q3=s(dPe,"A",{id:!0,class:!0,href:!0});var MFt=n(q3);sFe=s(MFt,"SPAN",{});var EFt=n(sFe);f(T8.$$.fragment,EFt),EFt.forEach(t),MFt.forEach(t),A8r=i(dPe),nFe=s(dPe,"SPAN",{});var yFt=n(nFe);L8r=r(yFt,"FlaxAutoModelForNextSentencePrediction"),yFt.forEach(t),dPe.forEach(t),Kke=i(d),Or=s(d,"DIV",{class:!0});var xi=n(Or);f(F8.$$.fragment,xi),B8r=i(xi),wm=s(xi,"P",{});var nQ=n(wm);x8r=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lFe=s(nQ,"CODE",{});var wFt=n(lFe);k8r=r(wFt,"from_pretrained()"),wFt.forEach(t),R8r=r(nQ,"class method or the "),iFe=s(nQ,"CODE",{});var AFt=n(iFe);S8r=r(AFt,"from_config()"),AFt.forEach(t),P8r=r(nQ,`class
method.`),nQ.forEach(t),$8r=i(xi),C8=s(xi,"P",{});var cPe=n(C8);I8r=r(cPe,"This class cannot be instantiated directly using "),dFe=s(cPe,"CODE",{});var LFt=n(dFe);j8r=r(LFt,"__init__()"),LFt.forEach(t),D8r=r(cPe," (throws an error)."),cPe.forEach(t),N8r=i(xi),$t=s(xi,"DIV",{class:!0});var ki=n($t);f(M8.$$.fragment,ki),q8r=i(ki),cFe=s(ki,"P",{});var BFt=n(cFe);O8r=r(BFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BFt.forEach(t),G8r=i(ki),Am=s(ki,"P",{});var lQ=n(Am);X8r=r(lQ,`Note:
Loading a model from its configuration file does `),mFe=s(lQ,"STRONG",{});var xFt=n(mFe);V8r=r(xFt,"not"),xFt.forEach(t),z8r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fFe=s(lQ,"CODE",{});var kFt=n(fFe);W8r=r(kFt,"from_pretrained()"),kFt.forEach(t),Q8r=r(lQ,"to load the model weights."),lQ.forEach(t),H8r=i(ki),gFe=s(ki,"P",{});var RFt=n(gFe);U8r=r(RFt,"Examples:"),RFt.forEach(t),J8r=i(ki),f(E8.$$.fragment,ki),ki.forEach(t),Y8r=i(xi),Io=s(xi,"DIV",{class:!0});var ja=n(Io);f(y8.$$.fragment,ja),K8r=i(ja),hFe=s(ja,"P",{});var SFt=n(hFe);Z8r=r(SFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SFt.forEach(t),e7r=i(ja),js=s(ja,"P",{});var X5=n(js);o7r=r(X5,"The model class to instantiate is selected based on the "),uFe=s(X5,"CODE",{});var PFt=n(uFe);r7r=r(PFt,"model_type"),PFt.forEach(t),t7r=r(X5,` property of the config object (either
passed as an argument or loaded from `),pFe=s(X5,"CODE",{});var $Ft=n(pFe);a7r=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),s7r=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=s(X5,"CODE",{});var IFt=n(_Fe);n7r=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),l7r=r(X5,":"),X5.forEach(t),i7r=i(ja),bFe=s(ja,"UL",{});var jFt=n(bFe);O3=s(jFt,"LI",{});var KBe=n(O3);vFe=s(KBe,"STRONG",{});var DFt=n(vFe);d7r=r(DFt,"bert"),DFt.forEach(t),c7r=r(KBe," \u2014 "),pz=s(KBe,"A",{href:!0});var NFt=n(pz);m7r=r(NFt,"FlaxBertForNextSentencePrediction"),NFt.forEach(t),f7r=r(KBe," (BERT model)"),KBe.forEach(t),jFt.forEach(t),g7r=i(ja),TFe=s(ja,"P",{});var qFt=n(TFe);h7r=r(qFt,"Examples:"),qFt.forEach(t),u7r=i(ja),f(w8.$$.fragment,ja),ja.forEach(t),xi.forEach(t),Zke=i(d),Lm=s(d,"H2",{class:!0});var mPe=n(Lm);G3=s(mPe,"A",{id:!0,class:!0,href:!0});var OFt=n(G3);FFe=s(OFt,"SPAN",{});var GFt=n(FFe);f(A8.$$.fragment,GFt),GFt.forEach(t),OFt.forEach(t),p7r=i(mPe),CFe=s(mPe,"SPAN",{});var XFt=n(CFe);_7r=r(XFt,"FlaxAutoModelForImageClassification"),XFt.forEach(t),mPe.forEach(t),eRe=i(d),Gr=s(d,"DIV",{class:!0});var Ri=n(Gr);f(L8.$$.fragment,Ri),b7r=i(Ri),Bm=s(Ri,"P",{});var iQ=n(Bm);v7r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MFe=s(iQ,"CODE",{});var VFt=n(MFe);T7r=r(VFt,"from_pretrained()"),VFt.forEach(t),F7r=r(iQ,"class method or the "),EFe=s(iQ,"CODE",{});var zFt=n(EFe);C7r=r(zFt,"from_config()"),zFt.forEach(t),M7r=r(iQ,`class
method.`),iQ.forEach(t),E7r=i(Ri),B8=s(Ri,"P",{});var fPe=n(B8);y7r=r(fPe,"This class cannot be instantiated directly using "),yFe=s(fPe,"CODE",{});var WFt=n(yFe);w7r=r(WFt,"__init__()"),WFt.forEach(t),A7r=r(fPe," (throws an error)."),fPe.forEach(t),L7r=i(Ri),It=s(Ri,"DIV",{class:!0});var Si=n(It);f(x8.$$.fragment,Si),B7r=i(Si),wFe=s(Si,"P",{});var QFt=n(wFe);x7r=r(QFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QFt.forEach(t),k7r=i(Si),xm=s(Si,"P",{});var dQ=n(xm);R7r=r(dQ,`Note:
Loading a model from its configuration file does `),AFe=s(dQ,"STRONG",{});var HFt=n(AFe);S7r=r(HFt,"not"),HFt.forEach(t),P7r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LFe=s(dQ,"CODE",{});var UFt=n(LFe);$7r=r(UFt,"from_pretrained()"),UFt.forEach(t),I7r=r(dQ,"to load the model weights."),dQ.forEach(t),j7r=i(Si),BFe=s(Si,"P",{});var JFt=n(BFe);D7r=r(JFt,"Examples:"),JFt.forEach(t),N7r=i(Si),f(k8.$$.fragment,Si),Si.forEach(t),q7r=i(Ri),jo=s(Ri,"DIV",{class:!0});var Da=n(jo);f(R8.$$.fragment,Da),O7r=i(Da),xFe=s(Da,"P",{});var YFt=n(xFe);G7r=r(YFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),YFt.forEach(t),X7r=i(Da),Ds=s(Da,"P",{});var V5=n(Ds);V7r=r(V5,"The model class to instantiate is selected based on the "),kFe=s(V5,"CODE",{});var KFt=n(kFe);z7r=r(KFt,"model_type"),KFt.forEach(t),W7r=r(V5,` property of the config object (either
passed as an argument or loaded from `),RFe=s(V5,"CODE",{});var ZFt=n(RFe);Q7r=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),H7r=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=s(V5,"CODE",{});var eCt=n(SFe);U7r=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),J7r=r(V5,":"),V5.forEach(t),Y7r=i(Da),S8=s(Da,"UL",{});var gPe=n(S8);X3=s(gPe,"LI",{});var ZBe=n(X3);PFe=s(ZBe,"STRONG",{});var oCt=n(PFe);K7r=r(oCt,"beit"),oCt.forEach(t),Z7r=r(ZBe," \u2014 "),_z=s(ZBe,"A",{href:!0});var rCt=n(_z);e9r=r(rCt,"FlaxBeitForImageClassification"),rCt.forEach(t),o9r=r(ZBe," (BEiT model)"),ZBe.forEach(t),r9r=i(gPe),V3=s(gPe,"LI",{});var exe=n(V3);$Fe=s(exe,"STRONG",{});var tCt=n($Fe);t9r=r(tCt,"vit"),tCt.forEach(t),a9r=r(exe," \u2014 "),bz=s(exe,"A",{href:!0});var aCt=n(bz);s9r=r(aCt,"FlaxViTForImageClassification"),aCt.forEach(t),n9r=r(exe," (ViT model)"),exe.forEach(t),gPe.forEach(t),l9r=i(Da),IFe=s(Da,"P",{});var sCt=n(IFe);i9r=r(sCt,"Examples:"),sCt.forEach(t),d9r=i(Da),f(P8.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),oRe=i(d),km=s(d,"H2",{class:!0});var hPe=n(km);z3=s(hPe,"A",{id:!0,class:!0,href:!0});var nCt=n(z3);jFe=s(nCt,"SPAN",{});var lCt=n(jFe);f($8.$$.fragment,lCt),lCt.forEach(t),nCt.forEach(t),c9r=i(hPe),DFe=s(hPe,"SPAN",{});var iCt=n(DFe);m9r=r(iCt,"FlaxAutoModelForVision2Seq"),iCt.forEach(t),hPe.forEach(t),rRe=i(d),Xr=s(d,"DIV",{class:!0});var Pi=n(Xr);f(I8.$$.fragment,Pi),f9r=i(Pi),Rm=s(Pi,"P",{});var cQ=n(Rm);g9r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NFe=s(cQ,"CODE",{});var dCt=n(NFe);h9r=r(dCt,"from_pretrained()"),dCt.forEach(t),u9r=r(cQ,"class method or the "),qFe=s(cQ,"CODE",{});var cCt=n(qFe);p9r=r(cCt,"from_config()"),cCt.forEach(t),_9r=r(cQ,`class
method.`),cQ.forEach(t),b9r=i(Pi),j8=s(Pi,"P",{});var uPe=n(j8);v9r=r(uPe,"This class cannot be instantiated directly using "),OFe=s(uPe,"CODE",{});var mCt=n(OFe);T9r=r(mCt,"__init__()"),mCt.forEach(t),F9r=r(uPe," (throws an error)."),uPe.forEach(t),C9r=i(Pi),jt=s(Pi,"DIV",{class:!0});var $i=n(jt);f(D8.$$.fragment,$i),M9r=i($i),GFe=s($i,"P",{});var fCt=n(GFe);E9r=r(fCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fCt.forEach(t),y9r=i($i),Sm=s($i,"P",{});var mQ=n(Sm);w9r=r(mQ,`Note:
Loading a model from its configuration file does `),XFe=s(mQ,"STRONG",{});var gCt=n(XFe);A9r=r(gCt,"not"),gCt.forEach(t),L9r=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VFe=s(mQ,"CODE",{});var hCt=n(VFe);B9r=r(hCt,"from_pretrained()"),hCt.forEach(t),x9r=r(mQ,"to load the model weights."),mQ.forEach(t),k9r=i($i),zFe=s($i,"P",{});var uCt=n(zFe);R9r=r(uCt,"Examples:"),uCt.forEach(t),S9r=i($i),f(N8.$$.fragment,$i),$i.forEach(t),P9r=i(Pi),Do=s(Pi,"DIV",{class:!0});var Na=n(Do);f(q8.$$.fragment,Na),$9r=i(Na),WFe=s(Na,"P",{});var pCt=n(WFe);I9r=r(pCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pCt.forEach(t),j9r=i(Na),Ns=s(Na,"P",{});var z5=n(Ns);D9r=r(z5,"The model class to instantiate is selected based on the "),QFe=s(z5,"CODE",{});var _Ct=n(QFe);N9r=r(_Ct,"model_type"),_Ct.forEach(t),q9r=r(z5,` property of the config object (either
passed as an argument or loaded from `),HFe=s(z5,"CODE",{});var bCt=n(HFe);O9r=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),G9r=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=s(z5,"CODE",{});var vCt=n(UFe);X9r=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),V9r=r(z5,":"),z5.forEach(t),z9r=i(Na),JFe=s(Na,"UL",{});var TCt=n(JFe);W3=s(TCt,"LI",{});var oxe=n(W3);YFe=s(oxe,"STRONG",{});var FCt=n(YFe);W9r=r(FCt,"vision-encoder-decoder"),FCt.forEach(t),Q9r=r(oxe," \u2014 "),vz=s(oxe,"A",{href:!0});var CCt=n(vz);H9r=r(CCt,"FlaxVisionEncoderDecoderModel"),CCt.forEach(t),U9r=r(oxe," (Vision Encoder decoder model)"),oxe.forEach(t),TCt.forEach(t),J9r=i(Na),KFe=s(Na,"P",{});var MCt=n(KFe);Y9r=r(MCt,"Examples:"),MCt.forEach(t),K9r=i(Na),f(O8.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(RCt)),c(ge,"id","auto-classes"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#auto-classes"),c(de,"class","relative group"),c(qs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig"),c(Gs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),c(Xs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),c(Xi,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(Nm,"id","extending-the-auto-classes"),c(Nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nm,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Om,"id","transformers.AutoConfig"),c(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Om,"href","#transformers.AutoConfig"),c(zi,"class","relative group"),c(z7,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(W7,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig"),c(Q7,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartConfig"),c(H7,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig"),c(U7,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertConfig"),c(J7,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Y7,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig"),c(K7,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Z7,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(e9,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(o9,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig"),c(r9,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig"),c(t9,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig"),c(a9,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig"),c(s9,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig"),c(n9,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig"),c(l9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(i9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(d9,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig"),c(c9,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(m9,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig"),c(f9,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig"),c(g9,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),c(h9,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig"),c(u9,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig"),c(p9,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_9,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig"),c(b9,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig"),c(v9,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig"),c(T9,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig"),c(F9,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config"),c(C9,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(M9,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig"),c(E9,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig"),c(y9,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig"),c(w9,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(A9,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(L9,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(B9,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDConfig"),c(x9,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig"),c(k9,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig"),c(R9,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig"),c(S9,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config"),c(P9,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig"),c($9,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(I9,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig"),c(j9,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(D9,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(N9,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig"),c(q9,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config"),c(O9,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(G9,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(X9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig"),c(V9,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig"),c(z9,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig"),c(W9,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Q9,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(H9,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(U9,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagConfig"),c(J9,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmConfig"),c(Y9,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig"),c(K9,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig"),c(Z9,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig"),c(eB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig"),c(oB,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig"),c(rB,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig"),c(tB,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig"),c(aB,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig"),c(sB,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(nB,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(lB,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(iB,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig"),c(dB,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(cB,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig"),c(mB,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Config"),c(fB,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig"),c(gB,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(hB,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"),c(uB,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(pB,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(_B,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig"),c(bB,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(vB,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(TB,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(FB,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig"),c(CB,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(MB,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(EB,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig"),c(yB,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig"),c(wB,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig"),c(AB,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(LB,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(BB,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(xB,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig"),c(kB,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(Bg,"class","docstring"),c(Wo,"class","docstring"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Qi,"class","relative group"),c(RB,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(SB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizer"),c(PB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($B,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),c(IB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizerFast"),c(jB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizer"),c(DB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NB,"href","/docs/transformers/master/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(XB,"href","/docs/transformers/master/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(VB,"href","/docs/transformers/master/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(zB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(WB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(QB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(JB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(YB,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(KB,"href","/docs/transformers/master/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ZB,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ex,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ox,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineTokenizer"),c(rx,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizer"),c(tx,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ax,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sx,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nx,"href","/docs/transformers/master/en/model_doc/cpm#transformers.CpmTokenizer"),c(lx,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ix,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dx,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cx,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ux,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizer"),c(px,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_x,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bx,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizer"),c(vx,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Tx,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Fx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Cx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Mx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ex,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Ax,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Lx,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Bx,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Rx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Sx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Px,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($x,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Ix,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jx,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Dx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizer"),c(Nx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizerFast"),c(qx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Ox,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Gx,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeTokenizer"),c(Xx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Vx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(zx,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Wx,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianTokenizer"),c(Qx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizer"),c(Hx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Ux,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Jx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Yx,"href","/docs/transformers/master/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Kx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Zx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ek,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ok,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),c(tk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ak,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sk,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ik,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dk,"href","/docs/transformers/master/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ck,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mk,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(gk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(hk,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagTokenizer"),c(uk,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizer"),c(pk,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_k,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bk,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Tk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Fk,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Ck,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Mk,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Ek,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yk,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(wk,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Ak,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Lk,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Bk,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizer"),c(xk,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Rk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Sk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),c(Pk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),c($k,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasTokenizer"),c(Ik,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Dk,"href","/docs/transformers/master/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Nk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Ok,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMTokenizer"),c(Gk,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Xk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Vk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(zk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Wk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(nh,"class","docstring"),c(Qo,"class","docstring"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Hi,"class","relative group"),c(Qk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Hk,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Uk,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Jk,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Yk,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Kk,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Zk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(oR,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(rR,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(tR,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(aR,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(sR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(yh,"class","docstring"),c(Ho,"class","docstring"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Ui,"class","relative group"),c(cR,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPProcessor"),c(fR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gR,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(hR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(uR,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pR,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_R,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(bR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c(Ih,"class","docstring"),c(Uo,"class","docstring"),c(jh,"id","transformers.AutoModel"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoModel"),c(Yi,"class","relative group"),c(Vr,"class","docstring"),c(vR,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel"),c(TR,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartModel"),c(FR,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitModel"),c(CR,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(MR,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ER,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel"),c(yR,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(wR,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(AR,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(LR,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel"),c(BR,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineModel"),c(xR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel"),c(kR,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel"),c(RR,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel"),c(SR,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel"),c(PR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c($R,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(IR,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel"),c(jR,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(DR,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel"),c(NR,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrModel"),c(qR,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel"),c(OR,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GR,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel"),c(XR,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel"),c(VR,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel"),c(zR,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel"),c(WR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel"),c(QR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel"),c(HR,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model"),c(UR,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(JR,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel"),c(YR,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel"),c(KR,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel"),c(ZR,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(eS,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(oS,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(rS,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDModel"),c(tS,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel"),c(aS,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeModel"),c(sS,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel"),c(nS,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model"),c(lS,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianModel"),c(iS,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dS,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel"),c(cS,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mS,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fS,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel"),c(gS,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model"),c(hS,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel"),c(uS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pS,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel"),c(_S,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel"),c(bS,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel"),c(vS,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel"),c(TS,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(FS,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CS,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel"),c(MS,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel"),c(ES,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(yS,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel"),c(wS,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel"),c(AS,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel"),c(LS,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWModel"),c(BS,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel"),c(xS,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kS,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel"),c(RS,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SS,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinModel"),c(PS,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Model"),c($S,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel"),c(IS,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel"),c(DS,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(NS,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel"),c(qS,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(OS,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel"),c(GS,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTModel"),c(XS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(VS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zS,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel"),c(WS,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel"),c(QS,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel"),c(HS,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(US,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(JS,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(YS,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel"),c(KS,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(_p,"id","transformers.AutoModelForPreTraining"),c(_p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_p,"href","#transformers.AutoModelForPreTraining"),c(ed,"class","relative group"),c(zr,"class","docstring"),c(ZS,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining"),c(eP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining"),c(rP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nP,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lP,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iP,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining"),c(cP,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mP,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining"),c(fP,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gP,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(hP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uP,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pP,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_P,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bP,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(vP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TP,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(FP,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(CP,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MP,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(EP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yP,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wP,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(AP,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LP,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BP,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(xP,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kP,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(RP,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(SP,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(PP,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($P,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(IP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(a_,"id","transformers.AutoModelForCausalLM"),c(a_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a_,"href","#transformers.AutoModelForCausalLM"),c(td,"class","relative group"),c(Wr,"class","docstring"),c(DP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM"),c(NP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel"),c(qP,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(OP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(GP,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(XP,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(VP,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(QP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(HP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM"),c(UP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JP,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(YP,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KP,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZP,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM"),c(e$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(o$,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(r$,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(t$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(a$,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(s$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(n$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(l$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(i$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(d$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(c$,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(m$,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(f$,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(g$,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(h$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(u$,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(p$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(b$,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(O_,"id","transformers.AutoModelForMaskedLM"),c(O_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O_,"href","#transformers.AutoModelForMaskedLM"),c(nd,"class","relative group"),c(Qr,"class","docstring"),c(v$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(T$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(F$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM"),c(C$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(M$,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(E$,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(y$,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(w$,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(A$,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(L$,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(B$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(x$,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(k$,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(R$,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(S$,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(P$,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($$,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(I$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(j$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(D$,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(N$,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(q$,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(O$,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(G$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(X$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(V$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(z$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(W$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Q$,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(H$,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(U$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(J$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Y$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(K$,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(Eb,"id","transformers.AutoModelForSeq2SeqLM"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForSeq2SeqLM"),c(dd,"class","relative group"),c(Hr,"class","docstring"),c(Z$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(oI,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(rI,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(tI,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(aI,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nI,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(lI,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel"),c(iI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dI,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(cI,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(mI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(fI,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(gI,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(hI,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(fd,"class","relative group"),c(Ur,"class","docstring"),c(uI,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(pI,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification"),c(_I,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification"),c(bI,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(vI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(CI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MI,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(EI,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(yI,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wI,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AI,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LI,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(BI,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(xI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(RI,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(SI,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PI,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c($I,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(II,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jI,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification"),c(NI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(zI,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(WI,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(QI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(HI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(UI,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(JI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(YI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(KI,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ZI,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ej,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(oj,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(rj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(tj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(aj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(sj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(I2,"id","transformers.AutoModelForMultipleChoice"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForMultipleChoice"),c(ud,"class","relative group"),c(Jr,"class","docstring"),c(lj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ij,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pj,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_j,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bj,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vj,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Tj,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Fj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Cj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Mj,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Ej,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(yj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wj,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Aj,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Lj,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Bj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Rj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Sj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Pj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(fv,"id","transformers.AutoModelForNextSentencePrediction"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForNextSentencePrediction"),c(bd,"class","relative group"),c(Yr,"class","docstring"),c($j,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Ij,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Dj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Nj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(vv,"id","transformers.AutoModelForTokenClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(Kr,"class","docstring"),c(qj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Oj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification"),c(Gj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Xj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Vj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification"),c(zj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Wj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Qj,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Hj,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Uj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Jj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Yj,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Kj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Zj,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(eD,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(oD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(rD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(tD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(aD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(nD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(dD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(cD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(gD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(hD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(uD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pD,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_D,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(bD,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(eT,"id","transformers.AutoModelForQuestionAnswering"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(Zr,"class","docstring"),c(vD,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TD,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CD,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MD,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ED,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(yD,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wD,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AD,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LD,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(BD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(kD,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(PD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c($D,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(ID,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DD,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ND,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qD,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OD,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(GD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(VD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(QD,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YD,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eN,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oN,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rN,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tN,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(sr,"class","docstring"),c(OT,"id","transformers.AutoModelForTableQuestionAnswering"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(et,"class","docstring"),c(aN,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(nr,"class","docstring"),c(VT,"id","transformers.AutoModelForImageClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c(ot,"class","docstring"),c(sN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification"),c(nN,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(lN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dN,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(mN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gN,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(uN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification"),c(pN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(ZT,"id","transformers.AutoModelForVision2Seq"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForVision2Seq"),c(Sd,"class","relative group"),c(rt,"class","docstring"),c(_N,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(r1,"id","transformers.AutoModelForAudioClassification"),c(r1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r1,"href","#transformers.AutoModelForAudioClassification"),c(Id,"class","relative group"),c(tt,"class","docstring"),c(bN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(vN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(CN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(yN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(f1,"id","transformers.AutoModelForAudioFrameClassification"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForAudioFrameClassification"),c(Nd,"class","relative group"),c(at,"class","docstring"),c(wN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(AN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(LN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(BN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(b1,"id","transformers.AutoModelForCTC"),c(b1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b1,"href","#transformers.AutoModelForCTC"),c(Gd,"class","relative group"),c(st,"class","docstring"),c(xN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(kN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC"),c(RN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC"),c(SN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC"),c(PN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($N,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(IN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(jN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(mr,"class","docstring"),c(L1,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(zd,"class","relative group"),c(nt,"class","docstring"),c(DN,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(fr,"class","docstring"),c(R1,"id","transformers.AutoModelForAudioXVector"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForAudioXVector"),c(Hd,"class","relative group"),c(lt,"class","docstring"),c(qN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(ON,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(XN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(D1,"id","transformers.AutoModelForMaskedImageModeling"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForMaskedImageModeling"),c(Yd,"class","relative group"),c(it,"class","docstring"),c(VN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(X1,"id","transformers.AutoModelForObjectDetection"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForObjectDetection"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(QN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(ur,"class","docstring"),c(W1,"id","transformers.AutoModelForImageSegmentation"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForImageSegmentation"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(HN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(pr,"class","docstring"),c(U1,"id","transformers.AutoModelForSemanticSegmentation"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForSemanticSegmentation"),c(lc,"class","relative group"),c(mt,"class","docstring"),c(UN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(JN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(_r,"class","docstring"),c(Z1,"id","transformers.AutoModelForInstanceSegmentation"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForInstanceSegmentation"),c(cc,"class","relative group"),c(ft,"class","docstring"),c(YN,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(so,"class","docstring"),c(br,"class","docstring"),c(rF,"id","transformers.TFAutoModel"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.TFAutoModel"),c(gc,"class","relative group"),c(gt,"class","docstring"),c(KN,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel"),c(ZN,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel"),c(eq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel"),c(oq,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(rq,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(tq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel"),c(aq,"href","/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel"),c(sq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel"),c(nq,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel"),c(lq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel"),c(iq,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel"),c(dq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(cq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mq,"href","/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(fq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel"),c(gq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(hq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel"),c(uq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(pq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_q,"href","/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel"),c(bq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(vq,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel"),c(Tq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel"),c(Fq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Cq,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel"),c(Mq,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel"),c(Eq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel"),c(wq,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model"),c(Aq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Lq,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Bq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel"),c(xq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel"),c(kq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Rq,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Sq,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model"),c(Pq,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel"),c($q,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Iq,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel"),c(jq,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Dq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel"),c(Nq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(VF,"id","transformers.TFAutoModelForPreTraining"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.TFAutoModelForPreTraining"),c(pc,"class","relative group"),c(ht,"class","docstring"),c(Oq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Gq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Xq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Vq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Wq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Qq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Hq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Uq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Jq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Yq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Kq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Zq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(eO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(aO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(uo,"class","docstring"),c(Tr,"class","docstring"),c(gC,"id","transformers.TFAutoModelForCausalLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForCausalLM"),c(vc,"class","relative group"),c(ut,"class","docstring"),c(dO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(cO,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(uO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(pO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_O,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c(EC,"id","transformers.TFAutoModelForImageClassification"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForImageClassification"),c(Cc,"class","relative group"),c(pt,"class","docstring"),c(vO,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TO,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(AC,"id","transformers.TFAutoModelForMaskedLM"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForMaskedLM"),c(yc,"class","relative group"),c(_t,"class","docstring"),c(FO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(MO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yO,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(wO,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(AO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(kO,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RO,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(SO,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(PO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($O,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(IO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(HC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(bt,"class","docstring"),c(OO,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GO,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XO,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VO,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zO,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WO,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel"),c(QO,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HO,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UO,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(sM,"id","transformers.TFAutoModelForSequenceClassification"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(vt,"class","docstring"),c(YO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(KO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(ZO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(eG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(oG,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(rG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(tG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(aG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(lG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(iG,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(dG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(mG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(fG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gG,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(uG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(pG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_G,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bG,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(TG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(FG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(kM,"id","transformers.TFAutoModelForMultipleChoice"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Pc,"class","relative group"),c(Tt,"class","docstring"),c(CG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(MG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(EG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(yG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(AG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(LG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(BG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(SG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c($G,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(jG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(DG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(UM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(jc,"class","relative group"),c(Ft,"class","docstring"),c(NG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(YM,"id","transformers.TFAutoModelForTokenClassification"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForTokenClassification"),c(qc,"class","relative group"),c(Ct,"class","docstring"),c(qG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(OG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(GG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(XG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(VG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(zG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(HG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(UG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(JG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(YG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(KG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(ZG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(eX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(oX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(aX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(sX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(b4,"id","transformers.TFAutoModelForQuestionAnswering"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(Mt,"class","docstring"),c(nX,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(lX,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(iX,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(dX,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(cX,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(mX,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(fX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(gX,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(hX,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uX,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(pX,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(_X,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(bX,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(vX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(TX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(MX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(EX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(D4,"id","transformers.TFAutoModelForVision2Seq"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForVision2Seq"),c(Wc,"class","relative group"),c(Et,"class","docstring"),c(yX,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(q4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Uc,"class","relative group"),c(yt,"class","docstring"),c(wX,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(G4,"id","transformers.FlaxAutoModel"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.FlaxAutoModel"),c(Kc,"class","relative group"),c(wt,"class","docstring"),c(AX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel"),c(LX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel"),c(BX,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel"),c(xX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel"),c(kX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RX,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(SX,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(PX,"href","/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel"),c($X,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(IX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel"),c(jX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(DX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(NX,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(qX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel"),c(OX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(VX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(zX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(WX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model"),c(QX,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(HX,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel"),c(UX,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(JX,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(YX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(hE,"id","transformers.FlaxAutoModelForCausalLM"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.FlaxAutoModelForCausalLM"),c(om,"class","relative group"),c(At,"class","docstring"),c(KX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ZX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eV,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oV,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rV,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(TE,"id","transformers.FlaxAutoModelForPreTraining"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.FlaxAutoModelForPreTraining"),c(am,"class","relative group"),c(Lt,"class","docstring"),c(tV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(aV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(nV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(lV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(iV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(mV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gV,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(SE,"id","transformers.FlaxAutoModelForMaskedLM"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(lm,"class","relative group"),c(Bt,"class","docstring"),c(uV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(pV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_V,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(TV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(FV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(VE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(cm,"class","relative group"),c(xt,"class","docstring"),c(yV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wV,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(AV,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(LV,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(BV,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RV,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(SV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(e3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(gm,"class","relative group"),c(kt,"class","docstring"),c(PV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c($V,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(IV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(DV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(NV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(qV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(OV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(GV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(XV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(m3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(pm,"class","relative group"),c(Rt,"class","docstring"),c(VV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(zV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(WV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(QV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(HV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(UV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(JV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(YV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ZV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(C3,"id","transformers.FlaxAutoModelForTokenClassification"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(vm,"class","relative group"),c(St,"class","docstring"),c(ez,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(az,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(sz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(nz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(k3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Cm,"class","relative group"),c(Pt,"class","docstring"),c(iz,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(dz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(cz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(gz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(hz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(uz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(q3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ym,"class","relative group"),c($t,"class","docstring"),c(pz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(G3,"id","transformers.FlaxAutoModelForImageClassification"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForImageClassification"),c(Lm,"class","relative group"),c(It,"class","docstring"),c(_z,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(bz,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(z3,"id","transformers.FlaxAutoModelForVision2Seq"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(km,"class","relative group"),c(jt,"class","docstring"),c(vz,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,_){e(document.head,J),b(d,Pe,_),b(d,de,_),e(de,ge),e(ge,io),g(me,io,null),e(de,Te),e(de,Vo),e(Vo,ji),b(d,$m,_),b(d,ma,_),e(ma,Di),e(ma,Ni),e(Ni,W5),e(ma,Im),b(d,Le,_),b(d,co,_),e(co,qi),e(co,qs),e(qs,Q5),e(co,Os),e(co,Gs),e(Gs,H5),e(co,Oi),e(co,Xs),e(Xs,U5),e(co,Gi),b(d,jm,_),g(qa,d,_),b(d,mo,_),b(d,he,_),e(he,N7),e(he,Xi),e(Xi,q7),e(he,O7),b(d,zo,_),b(d,Oa,_),e(Oa,G7),e(Oa,Dm),e(Dm,X7),e(Oa,pPe),b(d,rxe,_),b(d,Vi,_),e(Vi,Nm),e(Nm,fQ),g(J5,fQ,null),e(Vi,_Pe),e(Vi,gQ),e(gQ,bPe),b(d,txe,_),b(d,Vs,_),e(Vs,vPe),e(Vs,hQ),e(hQ,TPe),e(Vs,FPe),e(Vs,uQ),e(uQ,CPe),e(Vs,MPe),b(d,axe,_),g(Y5,d,_),b(d,sxe,_),b(d,V7,_),e(V7,EPe),b(d,nxe,_),g(qm,d,_),b(d,lxe,_),b(d,zi,_),e(zi,Om),e(Om,pQ),g(K5,pQ,null),e(zi,yPe),e(zi,_Q),e(_Q,wPe),b(d,ixe,_),b(d,Wo,_),g(Z5,Wo,null),e(Wo,APe),e(Wo,ey),e(ey,LPe),e(ey,z7),e(z7,BPe),e(ey,xPe),e(Wo,kPe),e(Wo,oy),e(oy,RPe),e(oy,bQ),e(bQ,SPe),e(oy,PPe),e(Wo,$Pe),e(Wo,fo),g(ry,fo,null),e(fo,IPe),e(fo,vQ),e(vQ,jPe),e(fo,DPe),e(fo,Wi),e(Wi,NPe),e(Wi,TQ),e(TQ,qPe),e(Wi,OPe),e(Wi,FQ),e(FQ,GPe),e(Wi,XPe),e(fo,VPe),e(fo,v),e(v,Gm),e(Gm,CQ),e(CQ,zPe),e(Gm,WPe),e(Gm,W7),e(W7,QPe),e(Gm,HPe),e(v,UPe),e(v,Xm),e(Xm,MQ),e(MQ,JPe),e(Xm,YPe),e(Xm,Q7),e(Q7,KPe),e(Xm,ZPe),e(v,e$e),e(v,Vm),e(Vm,EQ),e(EQ,o$e),e(Vm,r$e),e(Vm,H7),e(H7,t$e),e(Vm,a$e),e(v,s$e),e(v,zm),e(zm,yQ),e(yQ,n$e),e(zm,l$e),e(zm,U7),e(U7,i$e),e(zm,d$e),e(v,c$e),e(v,Wm),e(Wm,wQ),e(wQ,m$e),e(Wm,f$e),e(Wm,J7),e(J7,g$e),e(Wm,h$e),e(v,u$e),e(v,Qm),e(Qm,AQ),e(AQ,p$e),e(Qm,_$e),e(Qm,Y7),e(Y7,b$e),e(Qm,v$e),e(v,T$e),e(v,Hm),e(Hm,LQ),e(LQ,F$e),e(Hm,C$e),e(Hm,K7),e(K7,M$e),e(Hm,E$e),e(v,y$e),e(v,Um),e(Um,BQ),e(BQ,w$e),e(Um,A$e),e(Um,Z7),e(Z7,L$e),e(Um,B$e),e(v,x$e),e(v,Jm),e(Jm,xQ),e(xQ,k$e),e(Jm,R$e),e(Jm,e9),e(e9,S$e),e(Jm,P$e),e(v,$$e),e(v,Ym),e(Ym,kQ),e(kQ,I$e),e(Ym,j$e),e(Ym,o9),e(o9,D$e),e(Ym,N$e),e(v,q$e),e(v,Km),e(Km,RQ),e(RQ,O$e),e(Km,G$e),e(Km,r9),e(r9,X$e),e(Km,V$e),e(v,z$e),e(v,Zm),e(Zm,SQ),e(SQ,W$e),e(Zm,Q$e),e(Zm,t9),e(t9,H$e),e(Zm,U$e),e(v,J$e),e(v,ef),e(ef,PQ),e(PQ,Y$e),e(ef,K$e),e(ef,a9),e(a9,Z$e),e(ef,eIe),e(v,oIe),e(v,of),e(of,$Q),e($Q,rIe),e(of,tIe),e(of,s9),e(s9,aIe),e(of,sIe),e(v,nIe),e(v,rf),e(rf,IQ),e(IQ,lIe),e(rf,iIe),e(rf,n9),e(n9,dIe),e(rf,cIe),e(v,mIe),e(v,tf),e(tf,jQ),e(jQ,fIe),e(tf,gIe),e(tf,l9),e(l9,hIe),e(tf,uIe),e(v,pIe),e(v,af),e(af,DQ),e(DQ,_Ie),e(af,bIe),e(af,i9),e(i9,vIe),e(af,TIe),e(v,FIe),e(v,sf),e(sf,NQ),e(NQ,CIe),e(sf,MIe),e(sf,d9),e(d9,EIe),e(sf,yIe),e(v,wIe),e(v,nf),e(nf,qQ),e(qQ,AIe),e(nf,LIe),e(nf,c9),e(c9,BIe),e(nf,xIe),e(v,kIe),e(v,lf),e(lf,OQ),e(OQ,RIe),e(lf,SIe),e(lf,m9),e(m9,PIe),e(lf,$Ie),e(v,IIe),e(v,df),e(df,GQ),e(GQ,jIe),e(df,DIe),e(df,f9),e(f9,NIe),e(df,qIe),e(v,OIe),e(v,cf),e(cf,XQ),e(XQ,GIe),e(cf,XIe),e(cf,g9),e(g9,VIe),e(cf,zIe),e(v,WIe),e(v,mf),e(mf,VQ),e(VQ,QIe),e(mf,HIe),e(mf,h9),e(h9,UIe),e(mf,JIe),e(v,YIe),e(v,ff),e(ff,zQ),e(zQ,KIe),e(ff,ZIe),e(ff,u9),e(u9,eje),e(ff,oje),e(v,rje),e(v,gf),e(gf,WQ),e(WQ,tje),e(gf,aje),e(gf,p9),e(p9,sje),e(gf,nje),e(v,lje),e(v,hf),e(hf,QQ),e(QQ,ije),e(hf,dje),e(hf,_9),e(_9,cje),e(hf,mje),e(v,fje),e(v,uf),e(uf,HQ),e(HQ,gje),e(uf,hje),e(uf,b9),e(b9,uje),e(uf,pje),e(v,_je),e(v,pf),e(pf,UQ),e(UQ,bje),e(pf,vje),e(pf,v9),e(v9,Tje),e(pf,Fje),e(v,Cje),e(v,_f),e(_f,JQ),e(JQ,Mje),e(_f,Eje),e(_f,T9),e(T9,yje),e(_f,wje),e(v,Aje),e(v,bf),e(bf,YQ),e(YQ,Lje),e(bf,Bje),e(bf,F9),e(F9,xje),e(bf,kje),e(v,Rje),e(v,vf),e(vf,KQ),e(KQ,Sje),e(vf,Pje),e(vf,C9),e(C9,$je),e(vf,Ije),e(v,jje),e(v,Tf),e(Tf,ZQ),e(ZQ,Dje),e(Tf,Nje),e(Tf,M9),e(M9,qje),e(Tf,Oje),e(v,Gje),e(v,Ff),e(Ff,eH),e(eH,Xje),e(Ff,Vje),e(Ff,E9),e(E9,zje),e(Ff,Wje),e(v,Qje),e(v,Cf),e(Cf,oH),e(oH,Hje),e(Cf,Uje),e(Cf,y9),e(y9,Jje),e(Cf,Yje),e(v,Kje),e(v,Mf),e(Mf,rH),e(rH,Zje),e(Mf,eDe),e(Mf,w9),e(w9,oDe),e(Mf,rDe),e(v,tDe),e(v,Ef),e(Ef,tH),e(tH,aDe),e(Ef,sDe),e(Ef,A9),e(A9,nDe),e(Ef,lDe),e(v,iDe),e(v,yf),e(yf,aH),e(aH,dDe),e(yf,cDe),e(yf,L9),e(L9,mDe),e(yf,fDe),e(v,gDe),e(v,wf),e(wf,sH),e(sH,hDe),e(wf,uDe),e(wf,B9),e(B9,pDe),e(wf,_De),e(v,bDe),e(v,Af),e(Af,nH),e(nH,vDe),e(Af,TDe),e(Af,x9),e(x9,FDe),e(Af,CDe),e(v,MDe),e(v,Lf),e(Lf,lH),e(lH,EDe),e(Lf,yDe),e(Lf,k9),e(k9,wDe),e(Lf,ADe),e(v,LDe),e(v,Bf),e(Bf,iH),e(iH,BDe),e(Bf,xDe),e(Bf,R9),e(R9,kDe),e(Bf,RDe),e(v,SDe),e(v,xf),e(xf,dH),e(dH,PDe),e(xf,$De),e(xf,S9),e(S9,IDe),e(xf,jDe),e(v,DDe),e(v,kf),e(kf,cH),e(cH,NDe),e(kf,qDe),e(kf,P9),e(P9,ODe),e(kf,GDe),e(v,XDe),e(v,Rf),e(Rf,mH),e(mH,VDe),e(Rf,zDe),e(Rf,$9),e($9,WDe),e(Rf,QDe),e(v,HDe),e(v,Sf),e(Sf,fH),e(fH,UDe),e(Sf,JDe),e(Sf,I9),e(I9,YDe),e(Sf,KDe),e(v,ZDe),e(v,Pf),e(Pf,gH),e(gH,eNe),e(Pf,oNe),e(Pf,j9),e(j9,rNe),e(Pf,tNe),e(v,aNe),e(v,$f),e($f,hH),e(hH,sNe),e($f,nNe),e($f,D9),e(D9,lNe),e($f,iNe),e(v,dNe),e(v,If),e(If,uH),e(uH,cNe),e(If,mNe),e(If,N9),e(N9,fNe),e(If,gNe),e(v,hNe),e(v,jf),e(jf,pH),e(pH,uNe),e(jf,pNe),e(jf,q9),e(q9,_Ne),e(jf,bNe),e(v,vNe),e(v,Df),e(Df,_H),e(_H,TNe),e(Df,FNe),e(Df,O9),e(O9,CNe),e(Df,MNe),e(v,ENe),e(v,Nf),e(Nf,bH),e(bH,yNe),e(Nf,wNe),e(Nf,G9),e(G9,ANe),e(Nf,LNe),e(v,BNe),e(v,qf),e(qf,vH),e(vH,xNe),e(qf,kNe),e(qf,X9),e(X9,RNe),e(qf,SNe),e(v,PNe),e(v,Of),e(Of,TH),e(TH,$Ne),e(Of,INe),e(Of,V9),e(V9,jNe),e(Of,DNe),e(v,NNe),e(v,Gf),e(Gf,FH),e(FH,qNe),e(Gf,ONe),e(Gf,z9),e(z9,GNe),e(Gf,XNe),e(v,VNe),e(v,Xf),e(Xf,CH),e(CH,zNe),e(Xf,WNe),e(Xf,W9),e(W9,QNe),e(Xf,HNe),e(v,UNe),e(v,Vf),e(Vf,MH),e(MH,JNe),e(Vf,YNe),e(Vf,Q9),e(Q9,KNe),e(Vf,ZNe),e(v,eqe),e(v,zf),e(zf,EH),e(EH,oqe),e(zf,rqe),e(zf,H9),e(H9,tqe),e(zf,aqe),e(v,sqe),e(v,Wf),e(Wf,yH),e(yH,nqe),e(Wf,lqe),e(Wf,U9),e(U9,iqe),e(Wf,dqe),e(v,cqe),e(v,Qf),e(Qf,wH),e(wH,mqe),e(Qf,fqe),e(Qf,J9),e(J9,gqe),e(Qf,hqe),e(v,uqe),e(v,Hf),e(Hf,AH),e(AH,pqe),e(Hf,_qe),e(Hf,Y9),e(Y9,bqe),e(Hf,vqe),e(v,Tqe),e(v,Uf),e(Uf,LH),e(LH,Fqe),e(Uf,Cqe),e(Uf,K9),e(K9,Mqe),e(Uf,Eqe),e(v,yqe),e(v,Jf),e(Jf,BH),e(BH,wqe),e(Jf,Aqe),e(Jf,Z9),e(Z9,Lqe),e(Jf,Bqe),e(v,xqe),e(v,Yf),e(Yf,xH),e(xH,kqe),e(Yf,Rqe),e(Yf,eB),e(eB,Sqe),e(Yf,Pqe),e(v,$qe),e(v,Kf),e(Kf,kH),e(kH,Iqe),e(Kf,jqe),e(Kf,oB),e(oB,Dqe),e(Kf,Nqe),e(v,qqe),e(v,Zf),e(Zf,RH),e(RH,Oqe),e(Zf,Gqe),e(Zf,rB),e(rB,Xqe),e(Zf,Vqe),e(v,zqe),e(v,eg),e(eg,SH),e(SH,Wqe),e(eg,Qqe),e(eg,tB),e(tB,Hqe),e(eg,Uqe),e(v,Jqe),e(v,og),e(og,PH),e(PH,Yqe),e(og,Kqe),e(og,aB),e(aB,Zqe),e(og,eOe),e(v,oOe),e(v,rg),e(rg,$H),e($H,rOe),e(rg,tOe),e(rg,sB),e(sB,aOe),e(rg,sOe),e(v,nOe),e(v,tg),e(tg,IH),e(IH,lOe),e(tg,iOe),e(tg,nB),e(nB,dOe),e(tg,cOe),e(v,mOe),e(v,ag),e(ag,jH),e(jH,fOe),e(ag,gOe),e(ag,lB),e(lB,hOe),e(ag,uOe),e(v,pOe),e(v,sg),e(sg,DH),e(DH,_Oe),e(sg,bOe),e(sg,iB),e(iB,vOe),e(sg,TOe),e(v,FOe),e(v,ng),e(ng,NH),e(NH,COe),e(ng,MOe),e(ng,dB),e(dB,EOe),e(ng,yOe),e(v,wOe),e(v,lg),e(lg,qH),e(qH,AOe),e(lg,LOe),e(lg,cB),e(cB,BOe),e(lg,xOe),e(v,kOe),e(v,ig),e(ig,OH),e(OH,ROe),e(ig,SOe),e(ig,mB),e(mB,POe),e(ig,$Oe),e(v,IOe),e(v,dg),e(dg,GH),e(GH,jOe),e(dg,DOe),e(dg,fB),e(fB,NOe),e(dg,qOe),e(v,OOe),e(v,cg),e(cg,XH),e(XH,GOe),e(cg,XOe),e(cg,gB),e(gB,VOe),e(cg,zOe),e(v,WOe),e(v,mg),e(mg,VH),e(VH,QOe),e(mg,HOe),e(mg,hB),e(hB,UOe),e(mg,JOe),e(v,YOe),e(v,fg),e(fg,zH),e(zH,KOe),e(fg,ZOe),e(fg,uB),e(uB,eGe),e(fg,oGe),e(v,rGe),e(v,gg),e(gg,WH),e(WH,tGe),e(gg,aGe),e(gg,pB),e(pB,sGe),e(gg,nGe),e(v,lGe),e(v,hg),e(hg,QH),e(QH,iGe),e(hg,dGe),e(hg,_B),e(_B,cGe),e(hg,mGe),e(v,fGe),e(v,ug),e(ug,HH),e(HH,gGe),e(ug,hGe),e(ug,bB),e(bB,uGe),e(ug,pGe),e(v,_Ge),e(v,pg),e(pg,UH),e(UH,bGe),e(pg,vGe),e(pg,vB),e(vB,TGe),e(pg,FGe),e(v,CGe),e(v,_g),e(_g,JH),e(JH,MGe),e(_g,EGe),e(_g,TB),e(TB,yGe),e(_g,wGe),e(v,AGe),e(v,bg),e(bg,YH),e(YH,LGe),e(bg,BGe),e(bg,FB),e(FB,xGe),e(bg,kGe),e(v,RGe),e(v,vg),e(vg,KH),e(KH,SGe),e(vg,PGe),e(vg,CB),e(CB,$Ge),e(vg,IGe),e(v,jGe),e(v,Tg),e(Tg,ZH),e(ZH,DGe),e(Tg,NGe),e(Tg,MB),e(MB,qGe),e(Tg,OGe),e(v,GGe),e(v,Fg),e(Fg,eU),e(eU,XGe),e(Fg,VGe),e(Fg,EB),e(EB,zGe),e(Fg,WGe),e(v,QGe),e(v,Cg),e(Cg,oU),e(oU,HGe),e(Cg,UGe),e(Cg,yB),e(yB,JGe),e(Cg,YGe),e(v,KGe),e(v,Mg),e(Mg,rU),e(rU,ZGe),e(Mg,eXe),e(Mg,wB),e(wB,oXe),e(Mg,rXe),e(v,tXe),e(v,Eg),e(Eg,tU),e(tU,aXe),e(Eg,sXe),e(Eg,AB),e(AB,nXe),e(Eg,lXe),e(v,iXe),e(v,yg),e(yg,aU),e(aU,dXe),e(yg,cXe),e(yg,LB),e(LB,mXe),e(yg,fXe),e(v,gXe),e(v,wg),e(wg,sU),e(sU,hXe),e(wg,uXe),e(wg,BB),e(BB,pXe),e(wg,_Xe),e(v,bXe),e(v,Ag),e(Ag,nU),e(nU,vXe),e(Ag,TXe),e(Ag,xB),e(xB,FXe),e(Ag,CXe),e(v,MXe),e(v,Lg),e(Lg,lU),e(lU,EXe),e(Lg,yXe),e(Lg,kB),e(kB,wXe),e(Lg,AXe),e(fo,LXe),e(fo,iU),e(iU,BXe),e(fo,xXe),g(ty,fo,null),e(Wo,kXe),e(Wo,Bg),g(ay,Bg,null),e(Bg,RXe),e(Bg,dU),e(dU,SXe),b(d,dxe,_),b(d,Qi,_),e(Qi,xg),e(xg,cU),g(sy,cU,null),e(Qi,PXe),e(Qi,mU),e(mU,$Xe),b(d,cxe,_),b(d,Qo,_),g(ny,Qo,null),e(Qo,IXe),e(Qo,ly),e(ly,jXe),e(ly,RB),e(RB,DXe),e(ly,NXe),e(Qo,qXe),e(Qo,iy),e(iy,OXe),e(iy,fU),e(fU,GXe),e(iy,XXe),e(Qo,VXe),e(Qo,go),g(dy,go,null),e(go,zXe),e(go,gU),e(gU,WXe),e(go,QXe),e(go,Ga),e(Ga,HXe),e(Ga,hU),e(hU,UXe),e(Ga,JXe),e(Ga,uU),e(uU,YXe),e(Ga,KXe),e(Ga,pU),e(pU,ZXe),e(Ga,eVe),e(go,oVe),e(go,E),e(E,zs),e(zs,_U),e(_U,rVe),e(zs,tVe),e(zs,SB),e(SB,aVe),e(zs,sVe),e(zs,PB),e(PB,nVe),e(zs,lVe),e(E,iVe),e(E,Ws),e(Ws,bU),e(bU,dVe),e(Ws,cVe),e(Ws,$B),e($B,mVe),e(Ws,fVe),e(Ws,IB),e(IB,gVe),e(Ws,hVe),e(E,uVe),e(E,Qs),e(Qs,vU),e(vU,pVe),e(Qs,_Ve),e(Qs,jB),e(jB,bVe),e(Qs,vVe),e(Qs,DB),e(DB,TVe),e(Qs,FVe),e(E,CVe),e(E,kg),e(kg,TU),e(TU,MVe),e(kg,EVe),e(kg,NB),e(NB,yVe),e(kg,wVe),e(E,AVe),e(E,Hs),e(Hs,FU),e(FU,LVe),e(Hs,BVe),e(Hs,qB),e(qB,xVe),e(Hs,kVe),e(Hs,OB),e(OB,RVe),e(Hs,SVe),e(E,PVe),e(E,Rg),e(Rg,CU),e(CU,$Ve),e(Rg,IVe),e(Rg,GB),e(GB,jVe),e(Rg,DVe),e(E,NVe),e(E,Sg),e(Sg,MU),e(MU,qVe),e(Sg,OVe),e(Sg,XB),e(XB,GVe),e(Sg,XVe),e(E,VVe),e(E,Pg),e(Pg,EU),e(EU,zVe),e(Pg,WVe),e(Pg,VB),e(VB,QVe),e(Pg,HVe),e(E,UVe),e(E,Us),e(Us,yU),e(yU,JVe),e(Us,YVe),e(Us,zB),e(zB,KVe),e(Us,ZVe),e(Us,WB),e(WB,eze),e(Us,oze),e(E,rze),e(E,Js),e(Js,wU),e(wU,tze),e(Js,aze),e(Js,QB),e(QB,sze),e(Js,nze),e(Js,HB),e(HB,lze),e(Js,ize),e(E,dze),e(E,Ys),e(Ys,AU),e(AU,cze),e(Ys,mze),e(Ys,UB),e(UB,fze),e(Ys,gze),e(Ys,JB),e(JB,hze),e(Ys,uze),e(E,pze),e(E,$g),e($g,LU),e(LU,_ze),e($g,bze),e($g,YB),e(YB,vze),e($g,Tze),e(E,Fze),e(E,Ig),e(Ig,BU),e(BU,Cze),e(Ig,Mze),e(Ig,KB),e(KB,Eze),e(Ig,yze),e(E,wze),e(E,Ks),e(Ks,xU),e(xU,Aze),e(Ks,Lze),e(Ks,ZB),e(ZB,Bze),e(Ks,xze),e(Ks,ex),e(ex,kze),e(Ks,Rze),e(E,Sze),e(E,jg),e(jg,kU),e(kU,Pze),e(jg,$ze),e(jg,ox),e(ox,Ize),e(jg,jze),e(E,Dze),e(E,Zs),e(Zs,RU),e(RU,Nze),e(Zs,qze),e(Zs,rx),e(rx,Oze),e(Zs,Gze),e(Zs,tx),e(tx,Xze),e(Zs,Vze),e(E,zze),e(E,en),e(en,SU),e(SU,Wze),e(en,Qze),e(en,ax),e(ax,Hze),e(en,Uze),e(en,sx),e(sx,Jze),e(en,Yze),e(E,Kze),e(E,on),e(on,PU),e(PU,Zze),e(on,eWe),e(on,nx),e(nx,oWe),e(on,rWe),e(on,$U),e($U,tWe),e(on,aWe),e(E,sWe),e(E,Dg),e(Dg,IU),e(IU,nWe),e(Dg,lWe),e(Dg,lx),e(lx,iWe),e(Dg,dWe),e(E,cWe),e(E,rn),e(rn,jU),e(jU,mWe),e(rn,fWe),e(rn,ix),e(ix,gWe),e(rn,hWe),e(rn,dx),e(dx,uWe),e(rn,pWe),e(E,_We),e(E,Ng),e(Ng,DU),e(DU,bWe),e(Ng,vWe),e(Ng,cx),e(cx,TWe),e(Ng,FWe),e(E,CWe),e(E,tn),e(tn,NU),e(NU,MWe),e(tn,EWe),e(tn,mx),e(mx,yWe),e(tn,wWe),e(tn,fx),e(fx,AWe),e(tn,LWe),e(E,BWe),e(E,an),e(an,qU),e(qU,xWe),e(an,kWe),e(an,gx),e(gx,RWe),e(an,SWe),e(an,hx),e(hx,PWe),e(an,$We),e(E,IWe),e(E,sn),e(sn,OU),e(OU,jWe),e(sn,DWe),e(sn,ux),e(ux,NWe),e(sn,qWe),e(sn,px),e(px,OWe),e(sn,GWe),e(E,XWe),e(E,qg),e(qg,GU),e(GU,VWe),e(qg,zWe),e(qg,_x),e(_x,WWe),e(qg,QWe),e(E,HWe),e(E,nn),e(nn,XU),e(XU,UWe),e(nn,JWe),e(nn,bx),e(bx,YWe),e(nn,KWe),e(nn,vx),e(vx,ZWe),e(nn,eQe),e(E,oQe),e(E,Og),e(Og,VU),e(VU,rQe),e(Og,tQe),e(Og,Tx),e(Tx,aQe),e(Og,sQe),e(E,nQe),e(E,ln),e(ln,zU),e(zU,lQe),e(ln,iQe),e(ln,Fx),e(Fx,dQe),e(ln,cQe),e(ln,Cx),e(Cx,mQe),e(ln,fQe),e(E,gQe),e(E,dn),e(dn,WU),e(WU,hQe),e(dn,uQe),e(dn,Mx),e(Mx,pQe),e(dn,_Qe),e(dn,Ex),e(Ex,bQe),e(dn,vQe),e(E,TQe),e(E,cn),e(cn,QU),e(QU,FQe),e(cn,CQe),e(cn,yx),e(yx,MQe),e(cn,EQe),e(cn,wx),e(wx,yQe),e(cn,wQe),e(E,AQe),e(E,mn),e(mn,HU),e(HU,LQe),e(mn,BQe),e(mn,Ax),e(Ax,xQe),e(mn,kQe),e(mn,Lx),e(Lx,RQe),e(mn,SQe),e(E,PQe),e(E,Gg),e(Gg,UU),e(UU,$Qe),e(Gg,IQe),e(Gg,Bx),e(Bx,jQe),e(Gg,DQe),e(E,NQe),e(E,fn),e(fn,JU),e(JU,qQe),e(fn,OQe),e(fn,xx),e(xx,GQe),e(fn,XQe),e(fn,kx),e(kx,VQe),e(fn,zQe),e(E,WQe),e(E,gn),e(gn,YU),e(YU,QQe),e(gn,HQe),e(gn,Rx),e(Rx,UQe),e(gn,JQe),e(gn,Sx),e(Sx,YQe),e(gn,KQe),e(E,ZQe),e(E,hn),e(hn,KU),e(KU,eHe),e(hn,oHe),e(hn,Px),e(Px,rHe),e(hn,tHe),e(hn,$x),e($x,aHe),e(hn,sHe),e(E,nHe),e(E,un),e(un,ZU),e(ZU,lHe),e(un,iHe),e(un,Ix),e(Ix,dHe),e(un,cHe),e(un,jx),e(jx,mHe),e(un,fHe),e(E,gHe),e(E,pn),e(pn,eJ),e(eJ,hHe),e(pn,uHe),e(pn,Dx),e(Dx,pHe),e(pn,_He),e(pn,Nx),e(Nx,bHe),e(pn,vHe),e(E,THe),e(E,_n),e(_n,oJ),e(oJ,FHe),e(_n,CHe),e(_n,qx),e(qx,MHe),e(_n,EHe),e(_n,Ox),e(Ox,yHe),e(_n,wHe),e(E,AHe),e(E,Xg),e(Xg,rJ),e(rJ,LHe),e(Xg,BHe),e(Xg,Gx),e(Gx,xHe),e(Xg,kHe),e(E,RHe),e(E,bn),e(bn,tJ),e(tJ,SHe),e(bn,PHe),e(bn,Xx),e(Xx,$He),e(bn,IHe),e(bn,Vx),e(Vx,jHe),e(bn,DHe),e(E,NHe),e(E,Vg),e(Vg,aJ),e(aJ,qHe),e(Vg,OHe),e(Vg,zx),e(zx,GHe),e(Vg,XHe),e(E,VHe),e(E,zg),e(zg,sJ),e(sJ,zHe),e(zg,WHe),e(zg,Wx),e(Wx,QHe),e(zg,HHe),e(E,UHe),e(E,vn),e(vn,nJ),e(nJ,JHe),e(vn,YHe),e(vn,Qx),e(Qx,KHe),e(vn,ZHe),e(vn,Hx),e(Hx,eUe),e(vn,oUe),e(E,rUe),e(E,Tn),e(Tn,lJ),e(lJ,tUe),e(Tn,aUe),e(Tn,Ux),e(Ux,sUe),e(Tn,nUe),e(Tn,Jx),e(Jx,lUe),e(Tn,iUe),e(E,dUe),e(E,Wg),e(Wg,iJ),e(iJ,cUe),e(Wg,mUe),e(Wg,Yx),e(Yx,fUe),e(Wg,gUe),e(E,hUe),e(E,Fn),e(Fn,dJ),e(dJ,uUe),e(Fn,pUe),e(Fn,Kx),e(Kx,_Ue),e(Fn,bUe),e(Fn,Zx),e(Zx,vUe),e(Fn,TUe),e(E,FUe),e(E,Cn),e(Cn,cJ),e(cJ,CUe),e(Cn,MUe),e(Cn,ek),e(ek,EUe),e(Cn,yUe),e(Cn,ok),e(ok,wUe),e(Cn,AUe),e(E,LUe),e(E,Mn),e(Mn,mJ),e(mJ,BUe),e(Mn,xUe),e(Mn,rk),e(rk,kUe),e(Mn,RUe),e(Mn,tk),e(tk,SUe),e(Mn,PUe),e(E,$Ue),e(E,En),e(En,fJ),e(fJ,IUe),e(En,jUe),e(En,ak),e(ak,DUe),e(En,NUe),e(En,sk),e(sk,qUe),e(En,OUe),e(E,GUe),e(E,yn),e(yn,gJ),e(gJ,XUe),e(yn,VUe),e(yn,nk),e(nk,zUe),e(yn,WUe),e(yn,lk),e(lk,QUe),e(yn,HUe),e(E,UUe),e(E,Qg),e(Qg,hJ),e(hJ,JUe),e(Qg,YUe),e(Qg,ik),e(ik,KUe),e(Qg,ZUe),e(E,eJe),e(E,Hg),e(Hg,uJ),e(uJ,oJe),e(Hg,rJe),e(Hg,dk),e(dk,tJe),e(Hg,aJe),e(E,sJe),e(E,Ug),e(Ug,pJ),e(pJ,nJe),e(Ug,lJe),e(Ug,ck),e(ck,iJe),e(Ug,dJe),e(E,cJe),e(E,Jg),e(Jg,_J),e(_J,mJe),e(Jg,fJe),e(Jg,mk),e(mk,gJe),e(Jg,hJe),e(E,uJe),e(E,wn),e(wn,bJ),e(bJ,pJe),e(wn,_Je),e(wn,fk),e(fk,bJe),e(wn,vJe),e(wn,gk),e(gk,TJe),e(wn,FJe),e(E,CJe),e(E,Yg),e(Yg,vJ),e(vJ,MJe),e(Yg,EJe),e(Yg,hk),e(hk,yJe),e(Yg,wJe),e(E,AJe),e(E,An),e(An,TJ),e(TJ,LJe),e(An,BJe),e(An,uk),e(uk,xJe),e(An,kJe),e(An,pk),e(pk,RJe),e(An,SJe),e(E,PJe),e(E,Ln),e(Ln,FJ),e(FJ,$Je),e(Ln,IJe),e(Ln,_k),e(_k,jJe),e(Ln,DJe),e(Ln,bk),e(bk,NJe),e(Ln,qJe),e(E,OJe),e(E,Bn),e(Bn,CJ),e(CJ,GJe),e(Bn,XJe),e(Bn,vk),e(vk,VJe),e(Bn,zJe),e(Bn,Tk),e(Tk,WJe),e(Bn,QJe),e(E,HJe),e(E,xn),e(xn,MJ),e(MJ,UJe),e(xn,JJe),e(xn,Fk),e(Fk,YJe),e(xn,KJe),e(xn,Ck),e(Ck,ZJe),e(xn,eYe),e(E,oYe),e(E,kn),e(kn,EJ),e(EJ,rYe),e(kn,tYe),e(kn,Mk),e(Mk,aYe),e(kn,sYe),e(kn,Ek),e(Ek,nYe),e(kn,lYe),e(E,iYe),e(E,Rn),e(Rn,yJ),e(yJ,dYe),e(Rn,cYe),e(Rn,yk),e(yk,mYe),e(Rn,fYe),e(Rn,wk),e(wk,gYe),e(Rn,hYe),e(E,uYe),e(E,Kg),e(Kg,wJ),e(wJ,pYe),e(Kg,_Ye),e(Kg,Ak),e(Ak,bYe),e(Kg,vYe),e(E,TYe),e(E,Zg),e(Zg,AJ),e(AJ,FYe),e(Zg,CYe),e(Zg,Lk),e(Lk,MYe),e(Zg,EYe),e(E,yYe),e(E,Sn),e(Sn,LJ),e(LJ,wYe),e(Sn,AYe),e(Sn,Bk),e(Bk,LYe),e(Sn,BYe),e(Sn,xk),e(xk,xYe),e(Sn,kYe),e(E,RYe),e(E,Pn),e(Pn,BJ),e(BJ,SYe),e(Pn,PYe),e(Pn,kk),e(kk,$Ye),e(Pn,IYe),e(Pn,Rk),e(Rk,jYe),e(Pn,DYe),e(E,NYe),e(E,$n),e($n,xJ),e(xJ,qYe),e($n,OYe),e($n,Sk),e(Sk,GYe),e($n,XYe),e($n,Pk),e(Pk,VYe),e($n,zYe),e(E,WYe),e(E,eh),e(eh,kJ),e(kJ,QYe),e(eh,HYe),e(eh,$k),e($k,UYe),e(eh,JYe),e(E,YYe),e(E,oh),e(oh,RJ),e(RJ,KYe),e(oh,ZYe),e(oh,Ik),e(Ik,eKe),e(oh,oKe),e(E,rKe),e(E,rh),e(rh,SJ),e(SJ,tKe),e(rh,aKe),e(rh,jk),e(jk,sKe),e(rh,nKe),e(E,lKe),e(E,th),e(th,PJ),e(PJ,iKe),e(th,dKe),e(th,Dk),e(Dk,cKe),e(th,mKe),e(E,fKe),e(E,In),e(In,$J),e($J,gKe),e(In,hKe),e(In,Nk),e(Nk,uKe),e(In,pKe),e(In,qk),e(qk,_Ke),e(In,bKe),e(E,vKe),e(E,ah),e(ah,IJ),e(IJ,TKe),e(ah,FKe),e(ah,Ok),e(Ok,CKe),e(ah,MKe),e(E,EKe),e(E,sh),e(sh,jJ),e(jJ,yKe),e(sh,wKe),e(sh,Gk),e(Gk,AKe),e(sh,LKe),e(E,BKe),e(E,jn),e(jn,DJ),e(DJ,xKe),e(jn,kKe),e(jn,Xk),e(Xk,RKe),e(jn,SKe),e(jn,Vk),e(Vk,PKe),e(jn,$Ke),e(E,IKe),e(E,Dn),e(Dn,NJ),e(NJ,jKe),e(Dn,DKe),e(Dn,zk),e(zk,NKe),e(Dn,qKe),e(Dn,Wk),e(Wk,OKe),e(Dn,GKe),e(go,XKe),e(go,qJ),e(qJ,VKe),e(go,zKe),g(cy,go,null),e(Qo,WKe),e(Qo,nh),g(my,nh,null),e(nh,QKe),e(nh,OJ),e(OJ,HKe),b(d,mxe,_),b(d,Hi,_),e(Hi,lh),e(lh,GJ),g(fy,GJ,null),e(Hi,UKe),e(Hi,XJ),e(XJ,JKe),b(d,fxe,_),b(d,Ho,_),g(gy,Ho,null),e(Ho,YKe),e(Ho,hy),e(hy,KKe),e(hy,Qk),e(Qk,ZKe),e(hy,eZe),e(Ho,oZe),e(Ho,uy),e(uy,rZe),e(uy,VJ),e(VJ,tZe),e(uy,aZe),e(Ho,sZe),e(Ho,$e),g(py,$e,null),e($e,nZe),e($e,zJ),e(zJ,lZe),e($e,iZe),e($e,Xa),e(Xa,dZe),e(Xa,WJ),e(WJ,cZe),e(Xa,mZe),e(Xa,QJ),e(QJ,fZe),e(Xa,gZe),e(Xa,HJ),e(HJ,hZe),e(Xa,uZe),e($e,pZe),e($e,ae),e(ae,ih),e(ih,UJ),e(UJ,_Ze),e(ih,bZe),e(ih,Hk),e(Hk,vZe),e(ih,TZe),e(ae,FZe),e(ae,dh),e(dh,JJ),e(JJ,CZe),e(dh,MZe),e(dh,Uk),e(Uk,EZe),e(dh,yZe),e(ae,wZe),e(ae,ch),e(ch,YJ),e(YJ,AZe),e(ch,LZe),e(ch,Jk),e(Jk,BZe),e(ch,xZe),e(ae,kZe),e(ae,mh),e(mh,KJ),e(KJ,RZe),e(mh,SZe),e(mh,Yk),e(Yk,PZe),e(mh,$Ze),e(ae,IZe),e(ae,fh),e(fh,ZJ),e(ZJ,jZe),e(fh,DZe),e(fh,Kk),e(Kk,NZe),e(fh,qZe),e(ae,OZe),e(ae,gh),e(gh,eY),e(eY,GZe),e(gh,XZe),e(gh,Zk),e(Zk,VZe),e(gh,zZe),e(ae,WZe),e(ae,hh),e(hh,oY),e(oY,QZe),e(hh,HZe),e(hh,eR),e(eR,UZe),e(hh,JZe),e(ae,YZe),e(ae,uh),e(uh,rY),e(rY,KZe),e(uh,ZZe),e(uh,oR),e(oR,eeo),e(uh,oeo),e(ae,reo),e(ae,ph),e(ph,tY),e(tY,teo),e(ph,aeo),e(ph,rR),e(rR,seo),e(ph,neo),e(ae,leo),e(ae,_h),e(_h,aY),e(aY,ieo),e(_h,deo),e(_h,tR),e(tR,ceo),e(_h,meo),e(ae,feo),e(ae,bh),e(bh,sY),e(sY,geo),e(bh,heo),e(bh,aR),e(aR,ueo),e(bh,peo),e(ae,_eo),e(ae,vh),e(vh,nY),e(nY,beo),e(vh,veo),e(vh,sR),e(sR,Teo),e(vh,Feo),e(ae,Ceo),e(ae,Th),e(Th,lY),e(lY,Meo),e(Th,Eeo),e(Th,nR),e(nR,yeo),e(Th,weo),e(ae,Aeo),e(ae,Fh),e(Fh,iY),e(iY,Leo),e(Fh,Beo),e(Fh,lR),e(lR,xeo),e(Fh,keo),e(ae,Reo),e(ae,Ch),e(Ch,dY),e(dY,Seo),e(Ch,Peo),e(Ch,iR),e(iR,$eo),e(Ch,Ieo),e(ae,jeo),e(ae,Mh),e(Mh,cY),e(cY,Deo),e(Mh,Neo),e(Mh,dR),e(dR,qeo),e(Mh,Oeo),e($e,Geo),g(Eh,$e,null),e($e,Xeo),e($e,mY),e(mY,Veo),e($e,zeo),g(_y,$e,null),e(Ho,Weo),e(Ho,yh),g(by,yh,null),e(yh,Qeo),e(yh,fY),e(fY,Heo),b(d,gxe,_),b(d,Ui,_),e(Ui,wh),e(wh,gY),g(vy,gY,null),e(Ui,Ueo),e(Ui,hY),e(hY,Jeo),b(d,hxe,_),b(d,Uo,_),g(Ty,Uo,null),e(Uo,Yeo),e(Uo,Fy),e(Fy,Keo),e(Fy,cR),e(cR,Zeo),e(Fy,eoo),e(Uo,ooo),e(Uo,Cy),e(Cy,roo),e(Cy,uY),e(uY,too),e(Cy,aoo),e(Uo,soo),e(Uo,Ie),g(My,Ie,null),e(Ie,noo),e(Ie,pY),e(pY,loo),e(Ie,ioo),e(Ie,Ji),e(Ji,doo),e(Ji,_Y),e(_Y,coo),e(Ji,moo),e(Ji,bY),e(bY,foo),e(Ji,goo),e(Ie,hoo),e(Ie,Be),e(Be,Ah),e(Ah,vY),e(vY,uoo),e(Ah,poo),e(Ah,mR),e(mR,_oo),e(Ah,boo),e(Be,voo),e(Be,Lh),e(Lh,TY),e(TY,Too),e(Lh,Foo),e(Lh,fR),e(fR,Coo),e(Lh,Moo),e(Be,Eoo),e(Be,Bh),e(Bh,FY),e(FY,yoo),e(Bh,woo),e(Bh,gR),e(gR,Aoo),e(Bh,Loo),e(Be,Boo),e(Be,xh),e(xh,CY),e(CY,xoo),e(xh,koo),e(xh,hR),e(hR,Roo),e(xh,Soo),e(Be,Poo),e(Be,kh),e(kh,MY),e(MY,$oo),e(kh,Ioo),e(kh,uR),e(uR,joo),e(kh,Doo),e(Be,Noo),e(Be,Rh),e(Rh,EY),e(EY,qoo),e(Rh,Ooo),e(Rh,pR),e(pR,Goo),e(Rh,Xoo),e(Be,Voo),e(Be,Sh),e(Sh,yY),e(yY,zoo),e(Sh,Woo),e(Sh,_R),e(_R,Qoo),e(Sh,Hoo),e(Be,Uoo),e(Be,Ph),e(Ph,wY),e(wY,Joo),e(Ph,Yoo),e(Ph,bR),e(bR,Koo),e(Ph,Zoo),e(Ie,ero),g($h,Ie,null),e(Ie,oro),e(Ie,AY),e(AY,rro),e(Ie,tro),g(Ey,Ie,null),e(Uo,aro),e(Uo,Ih),g(yy,Ih,null),e(Ih,sro),e(Ih,LY),e(LY,nro),b(d,uxe,_),b(d,Yi,_),e(Yi,jh),e(jh,BY),g(wy,BY,null),e(Yi,lro),e(Yi,xY),e(xY,iro),b(d,pxe,_),b(d,Jo,_),g(Ay,Jo,null),e(Jo,dro),e(Jo,Ki),e(Ki,cro),e(Ki,kY),e(kY,mro),e(Ki,fro),e(Ki,RY),e(RY,gro),e(Ki,hro),e(Jo,uro),e(Jo,Ly),e(Ly,pro),e(Ly,SY),e(SY,_ro),e(Ly,bro),e(Jo,vro),e(Jo,Vr),g(By,Vr,null),e(Vr,Tro),e(Vr,PY),e(PY,Fro),e(Vr,Cro),e(Vr,Zi),e(Zi,Mro),e(Zi,$Y),e($Y,Ero),e(Zi,yro),e(Zi,IY),e(IY,wro),e(Zi,Aro),e(Vr,Lro),e(Vr,jY),e(jY,Bro),e(Vr,xro),g(xy,Vr,null),e(Jo,kro),e(Jo,je),g(ky,je,null),e(je,Rro),e(je,DY),e(DY,Sro),e(je,Pro),e(je,Va),e(Va,$ro),e(Va,NY),e(NY,Iro),e(Va,jro),e(Va,qY),e(qY,Dro),e(Va,Nro),e(Va,OY),e(OY,qro),e(Va,Oro),e(je,Gro),e(je,F),e(F,Dh),e(Dh,GY),e(GY,Xro),e(Dh,Vro),e(Dh,vR),e(vR,zro),e(Dh,Wro),e(F,Qro),e(F,Nh),e(Nh,XY),e(XY,Hro),e(Nh,Uro),e(Nh,TR),e(TR,Jro),e(Nh,Yro),e(F,Kro),e(F,qh),e(qh,VY),e(VY,Zro),e(qh,eto),e(qh,FR),e(FR,oto),e(qh,rto),e(F,tto),e(F,Oh),e(Oh,zY),e(zY,ato),e(Oh,sto),e(Oh,CR),e(CR,nto),e(Oh,lto),e(F,ito),e(F,Gh),e(Gh,WY),e(WY,dto),e(Gh,cto),e(Gh,MR),e(MR,mto),e(Gh,fto),e(F,gto),e(F,Xh),e(Xh,QY),e(QY,hto),e(Xh,uto),e(Xh,ER),e(ER,pto),e(Xh,_to),e(F,bto),e(F,Vh),e(Vh,HY),e(HY,vto),e(Vh,Tto),e(Vh,yR),e(yR,Fto),e(Vh,Cto),e(F,Mto),e(F,zh),e(zh,UY),e(UY,Eto),e(zh,yto),e(zh,wR),e(wR,wto),e(zh,Ato),e(F,Lto),e(F,Wh),e(Wh,JY),e(JY,Bto),e(Wh,xto),e(Wh,AR),e(AR,kto),e(Wh,Rto),e(F,Sto),e(F,Qh),e(Qh,YY),e(YY,Pto),e(Qh,$to),e(Qh,LR),e(LR,Ito),e(Qh,jto),e(F,Dto),e(F,Hh),e(Hh,KY),e(KY,Nto),e(Hh,qto),e(Hh,BR),e(BR,Oto),e(Hh,Gto),e(F,Xto),e(F,Uh),e(Uh,ZY),e(ZY,Vto),e(Uh,zto),e(Uh,xR),e(xR,Wto),e(Uh,Qto),e(F,Hto),e(F,Jh),e(Jh,eK),e(eK,Uto),e(Jh,Jto),e(Jh,kR),e(kR,Yto),e(Jh,Kto),e(F,Zto),e(F,Yh),e(Yh,oK),e(oK,eao),e(Yh,oao),e(Yh,RR),e(RR,rao),e(Yh,tao),e(F,aao),e(F,Kh),e(Kh,rK),e(rK,sao),e(Kh,nao),e(Kh,SR),e(SR,lao),e(Kh,iao),e(F,dao),e(F,Zh),e(Zh,tK),e(tK,cao),e(Zh,mao),e(Zh,PR),e(PR,fao),e(Zh,gao),e(F,hao),e(F,eu),e(eu,aK),e(aK,uao),e(eu,pao),e(eu,$R),e($R,_ao),e(eu,bao),e(F,vao),e(F,ou),e(ou,sK),e(sK,Tao),e(ou,Fao),e(ou,IR),e(IR,Cao),e(ou,Mao),e(F,Eao),e(F,ru),e(ru,nK),e(nK,yao),e(ru,wao),e(ru,jR),e(jR,Aao),e(ru,Lao),e(F,Bao),e(F,tu),e(tu,lK),e(lK,xao),e(tu,kao),e(tu,DR),e(DR,Rao),e(tu,Sao),e(F,Pao),e(F,au),e(au,iK),e(iK,$ao),e(au,Iao),e(au,NR),e(NR,jao),e(au,Dao),e(F,Nao),e(F,su),e(su,dK),e(dK,qao),e(su,Oao),e(su,qR),e(qR,Gao),e(su,Xao),e(F,Vao),e(F,nu),e(nu,cK),e(cK,zao),e(nu,Wao),e(nu,OR),e(OR,Qao),e(nu,Hao),e(F,Uao),e(F,lu),e(lu,mK),e(mK,Jao),e(lu,Yao),e(lu,GR),e(GR,Kao),e(lu,Zao),e(F,eso),e(F,iu),e(iu,fK),e(fK,oso),e(iu,rso),e(iu,XR),e(XR,tso),e(iu,aso),e(F,sso),e(F,du),e(du,gK),e(gK,nso),e(du,lso),e(du,VR),e(VR,iso),e(du,dso),e(F,cso),e(F,cu),e(cu,hK),e(hK,mso),e(cu,fso),e(cu,zR),e(zR,gso),e(cu,hso),e(F,uso),e(F,Nn),e(Nn,uK),e(uK,pso),e(Nn,_so),e(Nn,WR),e(WR,bso),e(Nn,vso),e(Nn,QR),e(QR,Tso),e(Nn,Fso),e(F,Cso),e(F,mu),e(mu,pK),e(pK,Mso),e(mu,Eso),e(mu,HR),e(HR,yso),e(mu,wso),e(F,Aso),e(F,fu),e(fu,_K),e(_K,Lso),e(fu,Bso),e(fu,UR),e(UR,xso),e(fu,kso),e(F,Rso),e(F,gu),e(gu,bK),e(bK,Sso),e(gu,Pso),e(gu,JR),e(JR,$so),e(gu,Iso),e(F,jso),e(F,hu),e(hu,vK),e(vK,Dso),e(hu,Nso),e(hu,YR),e(YR,qso),e(hu,Oso),e(F,Gso),e(F,uu),e(uu,TK),e(TK,Xso),e(uu,Vso),e(uu,KR),e(KR,zso),e(uu,Wso),e(F,Qso),e(F,pu),e(pu,FK),e(FK,Hso),e(pu,Uso),e(pu,ZR),e(ZR,Jso),e(pu,Yso),e(F,Kso),e(F,_u),e(_u,CK),e(CK,Zso),e(_u,eno),e(_u,eS),e(eS,ono),e(_u,rno),e(F,tno),e(F,bu),e(bu,MK),e(MK,ano),e(bu,sno),e(bu,oS),e(oS,nno),e(bu,lno),e(F,ino),e(F,vu),e(vu,EK),e(EK,dno),e(vu,cno),e(vu,rS),e(rS,mno),e(vu,fno),e(F,gno),e(F,Tu),e(Tu,yK),e(yK,hno),e(Tu,uno),e(Tu,tS),e(tS,pno),e(Tu,_no),e(F,bno),e(F,Fu),e(Fu,wK),e(wK,vno),e(Fu,Tno),e(Fu,aS),e(aS,Fno),e(Fu,Cno),e(F,Mno),e(F,Cu),e(Cu,AK),e(AK,Eno),e(Cu,yno),e(Cu,sS),e(sS,wno),e(Cu,Ano),e(F,Lno),e(F,Mu),e(Mu,LK),e(LK,Bno),e(Mu,xno),e(Mu,nS),e(nS,kno),e(Mu,Rno),e(F,Sno),e(F,Eu),e(Eu,BK),e(BK,Pno),e(Eu,$no),e(Eu,lS),e(lS,Ino),e(Eu,jno),e(F,Dno),e(F,yu),e(yu,xK),e(xK,Nno),e(yu,qno),e(yu,iS),e(iS,Ono),e(yu,Gno),e(F,Xno),e(F,wu),e(wu,kK),e(kK,Vno),e(wu,zno),e(wu,dS),e(dS,Wno),e(wu,Qno),e(F,Hno),e(F,Au),e(Au,RK),e(RK,Uno),e(Au,Jno),e(Au,cS),e(cS,Yno),e(Au,Kno),e(F,Zno),e(F,Lu),e(Lu,SK),e(SK,elo),e(Lu,olo),e(Lu,mS),e(mS,rlo),e(Lu,tlo),e(F,alo),e(F,Bu),e(Bu,PK),e(PK,slo),e(Bu,nlo),e(Bu,fS),e(fS,llo),e(Bu,ilo),e(F,dlo),e(F,xu),e(xu,$K),e($K,clo),e(xu,mlo),e(xu,gS),e(gS,flo),e(xu,glo),e(F,hlo),e(F,ku),e(ku,IK),e(IK,ulo),e(ku,plo),e(ku,hS),e(hS,_lo),e(ku,blo),e(F,vlo),e(F,Ru),e(Ru,jK),e(jK,Tlo),e(Ru,Flo),e(Ru,uS),e(uS,Clo),e(Ru,Mlo),e(F,Elo),e(F,Su),e(Su,DK),e(DK,ylo),e(Su,wlo),e(Su,pS),e(pS,Alo),e(Su,Llo),e(F,Blo),e(F,Pu),e(Pu,NK),e(NK,xlo),e(Pu,klo),e(Pu,_S),e(_S,Rlo),e(Pu,Slo),e(F,Plo),e(F,$u),e($u,qK),e(qK,$lo),e($u,Ilo),e($u,bS),e(bS,jlo),e($u,Dlo),e(F,Nlo),e(F,Iu),e(Iu,OK),e(OK,qlo),e(Iu,Olo),e(Iu,vS),e(vS,Glo),e(Iu,Xlo),e(F,Vlo),e(F,ju),e(ju,GK),e(GK,zlo),e(ju,Wlo),e(ju,TS),e(TS,Qlo),e(ju,Hlo),e(F,Ulo),e(F,Du),e(Du,XK),e(XK,Jlo),e(Du,Ylo),e(Du,FS),e(FS,Klo),e(Du,Zlo),e(F,eio),e(F,Nu),e(Nu,VK),e(VK,oio),e(Nu,rio),e(Nu,CS),e(CS,tio),e(Nu,aio),e(F,sio),e(F,qu),e(qu,zK),e(zK,nio),e(qu,lio),e(qu,MS),e(MS,iio),e(qu,dio),e(F,cio),e(F,Ou),e(Ou,WK),e(WK,mio),e(Ou,fio),e(Ou,ES),e(ES,gio),e(Ou,hio),e(F,uio),e(F,Gu),e(Gu,QK),e(QK,pio),e(Gu,_io),e(Gu,yS),e(yS,bio),e(Gu,vio),e(F,Tio),e(F,Xu),e(Xu,HK),e(HK,Fio),e(Xu,Cio),e(Xu,wS),e(wS,Mio),e(Xu,Eio),e(F,yio),e(F,Vu),e(Vu,UK),e(UK,wio),e(Vu,Aio),e(Vu,AS),e(AS,Lio),e(Vu,Bio),e(F,xio),e(F,zu),e(zu,JK),e(JK,kio),e(zu,Rio),e(zu,LS),e(LS,Sio),e(zu,Pio),e(F,$io),e(F,Wu),e(Wu,YK),e(YK,Iio),e(Wu,jio),e(Wu,BS),e(BS,Dio),e(Wu,Nio),e(F,qio),e(F,Qu),e(Qu,KK),e(KK,Oio),e(Qu,Gio),e(Qu,xS),e(xS,Xio),e(Qu,Vio),e(F,zio),e(F,Hu),e(Hu,ZK),e(ZK,Wio),e(Hu,Qio),e(Hu,kS),e(kS,Hio),e(Hu,Uio),e(F,Jio),e(F,Uu),e(Uu,eZ),e(eZ,Yio),e(Uu,Kio),e(Uu,RS),e(RS,Zio),e(Uu,edo),e(F,odo),e(F,Ju),e(Ju,oZ),e(oZ,rdo),e(Ju,tdo),e(Ju,SS),e(SS,ado),e(Ju,sdo),e(F,ndo),e(F,Yu),e(Yu,rZ),e(rZ,ldo),e(Yu,ido),e(Yu,PS),e(PS,ddo),e(Yu,cdo),e(F,mdo),e(F,Ku),e(Ku,tZ),e(tZ,fdo),e(Ku,gdo),e(Ku,$S),e($S,hdo),e(Ku,udo),e(F,pdo),e(F,Zu),e(Zu,aZ),e(aZ,_do),e(Zu,bdo),e(Zu,IS),e(IS,vdo),e(Zu,Tdo),e(F,Fdo),e(F,ep),e(ep,sZ),e(sZ,Cdo),e(ep,Mdo),e(ep,jS),e(jS,Edo),e(ep,ydo),e(F,wdo),e(F,op),e(op,nZ),e(nZ,Ado),e(op,Ldo),e(op,DS),e(DS,Bdo),e(op,xdo),e(F,kdo),e(F,rp),e(rp,lZ),e(lZ,Rdo),e(rp,Sdo),e(rp,NS),e(NS,Pdo),e(rp,$do),e(F,Ido),e(F,tp),e(tp,iZ),e(iZ,jdo),e(tp,Ddo),e(tp,qS),e(qS,Ndo),e(tp,qdo),e(F,Odo),e(F,ap),e(ap,dZ),e(dZ,Gdo),e(ap,Xdo),e(ap,OS),e(OS,Vdo),e(ap,zdo),e(F,Wdo),e(F,sp),e(sp,cZ),e(cZ,Qdo),e(sp,Hdo),e(sp,GS),e(GS,Udo),e(sp,Jdo),e(F,Ydo),e(F,np),e(np,mZ),e(mZ,Kdo),e(np,Zdo),e(np,XS),e(XS,eco),e(np,oco),e(F,rco),e(F,lp),e(lp,fZ),e(fZ,tco),e(lp,aco),e(lp,VS),e(VS,sco),e(lp,nco),e(F,lco),e(F,ip),e(ip,gZ),e(gZ,ico),e(ip,dco),e(ip,zS),e(zS,cco),e(ip,mco),e(F,fco),e(F,dp),e(dp,hZ),e(hZ,gco),e(dp,hco),e(dp,WS),e(WS,uco),e(dp,pco),e(F,_co),e(F,cp),e(cp,uZ),e(uZ,bco),e(cp,vco),e(cp,QS),e(QS,Tco),e(cp,Fco),e(F,Cco),e(F,mp),e(mp,pZ),e(pZ,Mco),e(mp,Eco),e(mp,HS),e(HS,yco),e(mp,wco),e(F,Aco),e(F,fp),e(fp,_Z),e(_Z,Lco),e(fp,Bco),e(fp,US),e(US,xco),e(fp,kco),e(F,Rco),e(F,gp),e(gp,bZ),e(bZ,Sco),e(gp,Pco),e(gp,JS),e(JS,$co),e(gp,Ico),e(F,jco),e(F,hp),e(hp,vZ),e(vZ,Dco),e(hp,Nco),e(hp,YS),e(YS,qco),e(hp,Oco),e(F,Gco),e(F,up),e(up,TZ),e(TZ,Xco),e(up,Vco),e(up,KS),e(KS,zco),e(up,Wco),e(je,Qco),e(je,pp),e(pp,Hco),e(pp,FZ),e(FZ,Uco),e(pp,Jco),e(pp,CZ),e(CZ,Yco),e(je,Kco),e(je,MZ),e(MZ,Zco),e(je,emo),g(Ry,je,null),b(d,_xe,_),b(d,ed,_),e(ed,_p),e(_p,EZ),g(Sy,EZ,null),e(ed,omo),e(ed,yZ),e(yZ,rmo),b(d,bxe,_),b(d,Yo,_),g(Py,Yo,null),e(Yo,tmo),e(Yo,od),e(od,amo),e(od,wZ),e(wZ,smo),e(od,nmo),e(od,AZ),e(AZ,lmo),e(od,imo),e(Yo,dmo),e(Yo,$y),e($y,cmo),e($y,LZ),e(LZ,mmo),e($y,fmo),e(Yo,gmo),e(Yo,zr),g(Iy,zr,null),e(zr,hmo),e(zr,BZ),e(BZ,umo),e(zr,pmo),e(zr,rd),e(rd,_mo),e(rd,xZ),e(xZ,bmo),e(rd,vmo),e(rd,kZ),e(kZ,Tmo),e(rd,Fmo),e(zr,Cmo),e(zr,RZ),e(RZ,Mmo),e(zr,Emo),g(jy,zr,null),e(Yo,ymo),e(Yo,De),g(Dy,De,null),e(De,wmo),e(De,SZ),e(SZ,Amo),e(De,Lmo),e(De,za),e(za,Bmo),e(za,PZ),e(PZ,xmo),e(za,kmo),e(za,$Z),e($Z,Rmo),e(za,Smo),e(za,IZ),e(IZ,Pmo),e(za,$mo),e(De,Imo),e(De,k),e(k,bp),e(bp,jZ),e(jZ,jmo),e(bp,Dmo),e(bp,ZS),e(ZS,Nmo),e(bp,qmo),e(k,Omo),e(k,vp),e(vp,DZ),e(DZ,Gmo),e(vp,Xmo),e(vp,eP),e(eP,Vmo),e(vp,zmo),e(k,Wmo),e(k,Tp),e(Tp,NZ),e(NZ,Qmo),e(Tp,Hmo),e(Tp,oP),e(oP,Umo),e(Tp,Jmo),e(k,Ymo),e(k,Fp),e(Fp,qZ),e(qZ,Kmo),e(Fp,Zmo),e(Fp,rP),e(rP,efo),e(Fp,ofo),e(k,rfo),e(k,Cp),e(Cp,OZ),e(OZ,tfo),e(Cp,afo),e(Cp,tP),e(tP,sfo),e(Cp,nfo),e(k,lfo),e(k,Mp),e(Mp,GZ),e(GZ,ifo),e(Mp,dfo),e(Mp,aP),e(aP,cfo),e(Mp,mfo),e(k,ffo),e(k,Ep),e(Ep,XZ),e(XZ,gfo),e(Ep,hfo),e(Ep,sP),e(sP,ufo),e(Ep,pfo),e(k,_fo),e(k,yp),e(yp,VZ),e(VZ,bfo),e(yp,vfo),e(yp,nP),e(nP,Tfo),e(yp,Ffo),e(k,Cfo),e(k,wp),e(wp,zZ),e(zZ,Mfo),e(wp,Efo),e(wp,lP),e(lP,yfo),e(wp,wfo),e(k,Afo),e(k,Ap),e(Ap,WZ),e(WZ,Lfo),e(Ap,Bfo),e(Ap,iP),e(iP,xfo),e(Ap,kfo),e(k,Rfo),e(k,Lp),e(Lp,QZ),e(QZ,Sfo),e(Lp,Pfo),e(Lp,dP),e(dP,$fo),e(Lp,Ifo),e(k,jfo),e(k,Bp),e(Bp,HZ),e(HZ,Dfo),e(Bp,Nfo),e(Bp,cP),e(cP,qfo),e(Bp,Ofo),e(k,Gfo),e(k,xp),e(xp,UZ),e(UZ,Xfo),e(xp,Vfo),e(xp,mP),e(mP,zfo),e(xp,Wfo),e(k,Qfo),e(k,kp),e(kp,JZ),e(JZ,Hfo),e(kp,Ufo),e(kp,fP),e(fP,Jfo),e(kp,Yfo),e(k,Kfo),e(k,Rp),e(Rp,YZ),e(YZ,Zfo),e(Rp,ego),e(Rp,gP),e(gP,ogo),e(Rp,rgo),e(k,tgo),e(k,Sp),e(Sp,KZ),e(KZ,ago),e(Sp,sgo),e(Sp,hP),e(hP,ngo),e(Sp,lgo),e(k,igo),e(k,Pp),e(Pp,ZZ),e(ZZ,dgo),e(Pp,cgo),e(Pp,uP),e(uP,mgo),e(Pp,fgo),e(k,ggo),e(k,$p),e($p,eee),e(eee,hgo),e($p,ugo),e($p,pP),e(pP,pgo),e($p,_go),e(k,bgo),e(k,Ip),e(Ip,oee),e(oee,vgo),e(Ip,Tgo),e(Ip,_P),e(_P,Fgo),e(Ip,Cgo),e(k,Mgo),e(k,jp),e(jp,ree),e(ree,Ego),e(jp,ygo),e(jp,bP),e(bP,wgo),e(jp,Ago),e(k,Lgo),e(k,Dp),e(Dp,tee),e(tee,Bgo),e(Dp,xgo),e(Dp,vP),e(vP,kgo),e(Dp,Rgo),e(k,Sgo),e(k,Np),e(Np,aee),e(aee,Pgo),e(Np,$go),e(Np,TP),e(TP,Igo),e(Np,jgo),e(k,Dgo),e(k,qp),e(qp,see),e(see,Ngo),e(qp,qgo),e(qp,FP),e(FP,Ogo),e(qp,Ggo),e(k,Xgo),e(k,Op),e(Op,nee),e(nee,Vgo),e(Op,zgo),e(Op,CP),e(CP,Wgo),e(Op,Qgo),e(k,Hgo),e(k,Gp),e(Gp,lee),e(lee,Ugo),e(Gp,Jgo),e(Gp,MP),e(MP,Ygo),e(Gp,Kgo),e(k,Zgo),e(k,Xp),e(Xp,iee),e(iee,eho),e(Xp,oho),e(Xp,EP),e(EP,rho),e(Xp,tho),e(k,aho),e(k,Vp),e(Vp,dee),e(dee,sho),e(Vp,nho),e(Vp,yP),e(yP,lho),e(Vp,iho),e(k,dho),e(k,zp),e(zp,cee),e(cee,cho),e(zp,mho),e(zp,wP),e(wP,fho),e(zp,gho),e(k,hho),e(k,Wp),e(Wp,mee),e(mee,uho),e(Wp,pho),e(Wp,AP),e(AP,_ho),e(Wp,bho),e(k,vho),e(k,Qp),e(Qp,fee),e(fee,Tho),e(Qp,Fho),e(Qp,LP),e(LP,Cho),e(Qp,Mho),e(k,Eho),e(k,Hp),e(Hp,gee),e(gee,yho),e(Hp,who),e(Hp,BP),e(BP,Aho),e(Hp,Lho),e(k,Bho),e(k,Up),e(Up,hee),e(hee,xho),e(Up,kho),e(Up,xP),e(xP,Rho),e(Up,Sho),e(k,Pho),e(k,Jp),e(Jp,uee),e(uee,$ho),e(Jp,Iho),e(Jp,kP),e(kP,jho),e(Jp,Dho),e(k,Nho),e(k,Yp),e(Yp,pee),e(pee,qho),e(Yp,Oho),e(Yp,RP),e(RP,Gho),e(Yp,Xho),e(k,Vho),e(k,Kp),e(Kp,_ee),e(_ee,zho),e(Kp,Who),e(Kp,SP),e(SP,Qho),e(Kp,Hho),e(k,Uho),e(k,Zp),e(Zp,bee),e(bee,Jho),e(Zp,Yho),e(Zp,PP),e(PP,Kho),e(Zp,Zho),e(k,euo),e(k,e_),e(e_,vee),e(vee,ouo),e(e_,ruo),e(e_,$P),e($P,tuo),e(e_,auo),e(k,suo),e(k,o_),e(o_,Tee),e(Tee,nuo),e(o_,luo),e(o_,IP),e(IP,iuo),e(o_,duo),e(k,cuo),e(k,r_),e(r_,Fee),e(Fee,muo),e(r_,fuo),e(r_,jP),e(jP,guo),e(r_,huo),e(De,uuo),e(De,t_),e(t_,puo),e(t_,Cee),e(Cee,_uo),e(t_,buo),e(t_,Mee),e(Mee,vuo),e(De,Tuo),e(De,Eee),e(Eee,Fuo),e(De,Cuo),g(Ny,De,null),b(d,vxe,_),b(d,td,_),e(td,a_),e(a_,yee),g(qy,yee,null),e(td,Muo),e(td,wee),e(wee,Euo),b(d,Txe,_),b(d,Ko,_),g(Oy,Ko,null),e(Ko,yuo),e(Ko,ad),e(ad,wuo),e(ad,Aee),e(Aee,Auo),e(ad,Luo),e(ad,Lee),e(Lee,Buo),e(ad,xuo),e(Ko,kuo),e(Ko,Gy),e(Gy,Ruo),e(Gy,Bee),e(Bee,Suo),e(Gy,Puo),e(Ko,$uo),e(Ko,Wr),g(Xy,Wr,null),e(Wr,Iuo),e(Wr,xee),e(xee,juo),e(Wr,Duo),e(Wr,sd),e(sd,Nuo),e(sd,kee),e(kee,quo),e(sd,Ouo),e(sd,Ree),e(Ree,Guo),e(sd,Xuo),e(Wr,Vuo),e(Wr,See),e(See,zuo),e(Wr,Wuo),g(Vy,Wr,null),e(Ko,Quo),e(Ko,Ne),g(zy,Ne,null),e(Ne,Huo),e(Ne,Pee),e(Pee,Uuo),e(Ne,Juo),e(Ne,Wa),e(Wa,Yuo),e(Wa,$ee),e($ee,Kuo),e(Wa,Zuo),e(Wa,Iee),e(Iee,epo),e(Wa,opo),e(Wa,jee),e(jee,rpo),e(Wa,tpo),e(Ne,apo),e(Ne,$),e($,s_),e(s_,Dee),e(Dee,spo),e(s_,npo),e(s_,DP),e(DP,lpo),e(s_,ipo),e($,dpo),e($,n_),e(n_,Nee),e(Nee,cpo),e(n_,mpo),e(n_,NP),e(NP,fpo),e(n_,gpo),e($,hpo),e($,l_),e(l_,qee),e(qee,upo),e(l_,ppo),e(l_,qP),e(qP,_po),e(l_,bpo),e($,vpo),e($,i_),e(i_,Oee),e(Oee,Tpo),e(i_,Fpo),e(i_,OP),e(OP,Cpo),e(i_,Mpo),e($,Epo),e($,d_),e(d_,Gee),e(Gee,ypo),e(d_,wpo),e(d_,GP),e(GP,Apo),e(d_,Lpo),e($,Bpo),e($,c_),e(c_,Xee),e(Xee,xpo),e(c_,kpo),e(c_,XP),e(XP,Rpo),e(c_,Spo),e($,Ppo),e($,m_),e(m_,Vee),e(Vee,$po),e(m_,Ipo),e(m_,VP),e(VP,jpo),e(m_,Dpo),e($,Npo),e($,f_),e(f_,zee),e(zee,qpo),e(f_,Opo),e(f_,zP),e(zP,Gpo),e(f_,Xpo),e($,Vpo),e($,g_),e(g_,Wee),e(Wee,zpo),e(g_,Wpo),e(g_,WP),e(WP,Qpo),e(g_,Hpo),e($,Upo),e($,h_),e(h_,Qee),e(Qee,Jpo),e(h_,Ypo),e(h_,QP),e(QP,Kpo),e(h_,Zpo),e($,e_o),e($,u_),e(u_,Hee),e(Hee,o_o),e(u_,r_o),e(u_,HP),e(HP,t_o),e(u_,a_o),e($,s_o),e($,p_),e(p_,Uee),e(Uee,n_o),e(p_,l_o),e(p_,UP),e(UP,i_o),e(p_,d_o),e($,c_o),e($,__),e(__,Jee),e(Jee,m_o),e(__,f_o),e(__,JP),e(JP,g_o),e(__,h_o),e($,u_o),e($,b_),e(b_,Yee),e(Yee,p_o),e(b_,__o),e(b_,YP),e(YP,b_o),e(b_,v_o),e($,T_o),e($,v_),e(v_,Kee),e(Kee,F_o),e(v_,C_o),e(v_,KP),e(KP,M_o),e(v_,E_o),e($,y_o),e($,T_),e(T_,Zee),e(Zee,w_o),e(T_,A_o),e(T_,ZP),e(ZP,L_o),e(T_,B_o),e($,x_o),e($,F_),e(F_,eoe),e(eoe,k_o),e(F_,R_o),e(F_,e$),e(e$,S_o),e(F_,P_o),e($,$_o),e($,C_),e(C_,ooe),e(ooe,I_o),e(C_,j_o),e(C_,o$),e(o$,D_o),e(C_,N_o),e($,q_o),e($,M_),e(M_,roe),e(roe,O_o),e(M_,G_o),e(M_,r$),e(r$,X_o),e(M_,V_o),e($,z_o),e($,E_),e(E_,toe),e(toe,W_o),e(E_,Q_o),e(E_,t$),e(t$,H_o),e(E_,U_o),e($,J_o),e($,y_),e(y_,aoe),e(aoe,Y_o),e(y_,K_o),e(y_,a$),e(a$,Z_o),e(y_,ebo),e($,obo),e($,w_),e(w_,soe),e(soe,rbo),e(w_,tbo),e(w_,s$),e(s$,abo),e(w_,sbo),e($,nbo),e($,A_),e(A_,noe),e(noe,lbo),e(A_,ibo),e(A_,n$),e(n$,dbo),e(A_,cbo),e($,mbo),e($,L_),e(L_,loe),e(loe,fbo),e(L_,gbo),e(L_,l$),e(l$,hbo),e(L_,ubo),e($,pbo),e($,B_),e(B_,ioe),e(ioe,_bo),e(B_,bbo),e(B_,i$),e(i$,vbo),e(B_,Tbo),e($,Fbo),e($,x_),e(x_,doe),e(doe,Cbo),e(x_,Mbo),e(x_,d$),e(d$,Ebo),e(x_,ybo),e($,wbo),e($,k_),e(k_,coe),e(coe,Abo),e(k_,Lbo),e(k_,c$),e(c$,Bbo),e(k_,xbo),e($,kbo),e($,R_),e(R_,moe),e(moe,Rbo),e(R_,Sbo),e(R_,m$),e(m$,Pbo),e(R_,$bo),e($,Ibo),e($,S_),e(S_,foe),e(foe,jbo),e(S_,Dbo),e(S_,f$),e(f$,Nbo),e(S_,qbo),e($,Obo),e($,P_),e(P_,goe),e(goe,Gbo),e(P_,Xbo),e(P_,g$),e(g$,Vbo),e(P_,zbo),e($,Wbo),e($,$_),e($_,hoe),e(hoe,Qbo),e($_,Hbo),e($_,h$),e(h$,Ubo),e($_,Jbo),e($,Ybo),e($,I_),e(I_,uoe),e(uoe,Kbo),e(I_,Zbo),e(I_,u$),e(u$,e2o),e(I_,o2o),e($,r2o),e($,j_),e(j_,poe),e(poe,t2o),e(j_,a2o),e(j_,p$),e(p$,s2o),e(j_,n2o),e($,l2o),e($,D_),e(D_,_oe),e(_oe,i2o),e(D_,d2o),e(D_,_$),e(_$,c2o),e(D_,m2o),e($,f2o),e($,N_),e(N_,boe),e(boe,g2o),e(N_,h2o),e(N_,b$),e(b$,u2o),e(N_,p2o),e(Ne,_2o),e(Ne,q_),e(q_,b2o),e(q_,voe),e(voe,v2o),e(q_,T2o),e(q_,Toe),e(Toe,F2o),e(Ne,C2o),e(Ne,Foe),e(Foe,M2o),e(Ne,E2o),g(Wy,Ne,null),b(d,Fxe,_),b(d,nd,_),e(nd,O_),e(O_,Coe),g(Qy,Coe,null),e(nd,y2o),e(nd,Moe),e(Moe,w2o),b(d,Cxe,_),b(d,Zo,_),g(Hy,Zo,null),e(Zo,A2o),e(Zo,ld),e(ld,L2o),e(ld,Eoe),e(Eoe,B2o),e(ld,x2o),e(ld,yoe),e(yoe,k2o),e(ld,R2o),e(Zo,S2o),e(Zo,Uy),e(Uy,P2o),e(Uy,woe),e(woe,$2o),e(Uy,I2o),e(Zo,j2o),e(Zo,Qr),g(Jy,Qr,null),e(Qr,D2o),e(Qr,Aoe),e(Aoe,N2o),e(Qr,q2o),e(Qr,id),e(id,O2o),e(id,Loe),e(Loe,G2o),e(id,X2o),e(id,Boe),e(Boe,V2o),e(id,z2o),e(Qr,W2o),e(Qr,xoe),e(xoe,Q2o),e(Qr,H2o),g(Yy,Qr,null),e(Zo,U2o),e(Zo,qe),g(Ky,qe,null),e(qe,J2o),e(qe,koe),e(koe,Y2o),e(qe,K2o),e(qe,Qa),e(Qa,Z2o),e(Qa,Roe),e(Roe,evo),e(Qa,ovo),e(Qa,Soe),e(Soe,rvo),e(Qa,tvo),e(Qa,Poe),e(Poe,avo),e(Qa,svo),e(qe,nvo),e(qe,I),e(I,G_),e(G_,$oe),e($oe,lvo),e(G_,ivo),e(G_,v$),e(v$,dvo),e(G_,cvo),e(I,mvo),e(I,X_),e(X_,Ioe),e(Ioe,fvo),e(X_,gvo),e(X_,T$),e(T$,hvo),e(X_,uvo),e(I,pvo),e(I,V_),e(V_,joe),e(joe,_vo),e(V_,bvo),e(V_,F$),e(F$,vvo),e(V_,Tvo),e(I,Fvo),e(I,z_),e(z_,Doe),e(Doe,Cvo),e(z_,Mvo),e(z_,C$),e(C$,Evo),e(z_,yvo),e(I,wvo),e(I,W_),e(W_,Noe),e(Noe,Avo),e(W_,Lvo),e(W_,M$),e(M$,Bvo),e(W_,xvo),e(I,kvo),e(I,Q_),e(Q_,qoe),e(qoe,Rvo),e(Q_,Svo),e(Q_,E$),e(E$,Pvo),e(Q_,$vo),e(I,Ivo),e(I,H_),e(H_,Ooe),e(Ooe,jvo),e(H_,Dvo),e(H_,y$),e(y$,Nvo),e(H_,qvo),e(I,Ovo),e(I,U_),e(U_,Goe),e(Goe,Gvo),e(U_,Xvo),e(U_,w$),e(w$,Vvo),e(U_,zvo),e(I,Wvo),e(I,J_),e(J_,Xoe),e(Xoe,Qvo),e(J_,Hvo),e(J_,A$),e(A$,Uvo),e(J_,Jvo),e(I,Yvo),e(I,Y_),e(Y_,Voe),e(Voe,Kvo),e(Y_,Zvo),e(Y_,L$),e(L$,eTo),e(Y_,oTo),e(I,rTo),e(I,K_),e(K_,zoe),e(zoe,tTo),e(K_,aTo),e(K_,B$),e(B$,sTo),e(K_,nTo),e(I,lTo),e(I,Z_),e(Z_,Woe),e(Woe,iTo),e(Z_,dTo),e(Z_,x$),e(x$,cTo),e(Z_,mTo),e(I,fTo),e(I,eb),e(eb,Qoe),e(Qoe,gTo),e(eb,hTo),e(eb,k$),e(k$,uTo),e(eb,pTo),e(I,_To),e(I,ob),e(ob,Hoe),e(Hoe,bTo),e(ob,vTo),e(ob,R$),e(R$,TTo),e(ob,FTo),e(I,CTo),e(I,rb),e(rb,Uoe),e(Uoe,MTo),e(rb,ETo),e(rb,S$),e(S$,yTo),e(rb,wTo),e(I,ATo),e(I,tb),e(tb,Joe),e(Joe,LTo),e(tb,BTo),e(tb,P$),e(P$,xTo),e(tb,kTo),e(I,RTo),e(I,ab),e(ab,Yoe),e(Yoe,STo),e(ab,PTo),e(ab,$$),e($$,$To),e(ab,ITo),e(I,jTo),e(I,sb),e(sb,Koe),e(Koe,DTo),e(sb,NTo),e(sb,I$),e(I$,qTo),e(sb,OTo),e(I,GTo),e(I,nb),e(nb,Zoe),e(Zoe,XTo),e(nb,VTo),e(nb,j$),e(j$,zTo),e(nb,WTo),e(I,QTo),e(I,lb),e(lb,ere),e(ere,HTo),e(lb,UTo),e(lb,D$),e(D$,JTo),e(lb,YTo),e(I,KTo),e(I,ib),e(ib,ore),e(ore,ZTo),e(ib,e1o),e(ib,N$),e(N$,o1o),e(ib,r1o),e(I,t1o),e(I,db),e(db,rre),e(rre,a1o),e(db,s1o),e(db,q$),e(q$,n1o),e(db,l1o),e(I,i1o),e(I,cb),e(cb,tre),e(tre,d1o),e(cb,c1o),e(cb,O$),e(O$,m1o),e(cb,f1o),e(I,g1o),e(I,mb),e(mb,are),e(are,h1o),e(mb,u1o),e(mb,G$),e(G$,p1o),e(mb,_1o),e(I,b1o),e(I,fb),e(fb,sre),e(sre,v1o),e(fb,T1o),e(fb,X$),e(X$,F1o),e(fb,C1o),e(I,M1o),e(I,gb),e(gb,nre),e(nre,E1o),e(gb,y1o),e(gb,V$),e(V$,w1o),e(gb,A1o),e(I,L1o),e(I,hb),e(hb,lre),e(lre,B1o),e(hb,x1o),e(hb,z$),e(z$,k1o),e(hb,R1o),e(I,S1o),e(I,ub),e(ub,ire),e(ire,P1o),e(ub,$1o),e(ub,W$),e(W$,I1o),e(ub,j1o),e(I,D1o),e(I,pb),e(pb,dre),e(dre,N1o),e(pb,q1o),e(pb,Q$),e(Q$,O1o),e(pb,G1o),e(I,X1o),e(I,_b),e(_b,cre),e(cre,V1o),e(_b,z1o),e(_b,H$),e(H$,W1o),e(_b,Q1o),e(I,H1o),e(I,bb),e(bb,mre),e(mre,U1o),e(bb,J1o),e(bb,fre),e(fre,Y1o),e(bb,K1o),e(I,Z1o),e(I,vb),e(vb,gre),e(gre,eFo),e(vb,oFo),e(vb,U$),e(U$,rFo),e(vb,tFo),e(I,aFo),e(I,Tb),e(Tb,hre),e(hre,sFo),e(Tb,nFo),e(Tb,J$),e(J$,lFo),e(Tb,iFo),e(I,dFo),e(I,Fb),e(Fb,ure),e(ure,cFo),e(Fb,mFo),e(Fb,Y$),e(Y$,fFo),e(Fb,gFo),e(I,hFo),e(I,Cb),e(Cb,pre),e(pre,uFo),e(Cb,pFo),e(Cb,K$),e(K$,_Fo),e(Cb,bFo),e(qe,vFo),e(qe,Mb),e(Mb,TFo),e(Mb,_re),e(_re,FFo),e(Mb,CFo),e(Mb,bre),e(bre,MFo),e(qe,EFo),e(qe,vre),e(vre,yFo),e(qe,wFo),g(Zy,qe,null),b(d,Mxe,_),b(d,dd,_),e(dd,Eb),e(Eb,Tre),g(ew,Tre,null),e(dd,AFo),e(dd,Fre),e(Fre,LFo),b(d,Exe,_),b(d,er,_),g(ow,er,null),e(er,BFo),e(er,cd),e(cd,xFo),e(cd,Cre),e(Cre,kFo),e(cd,RFo),e(cd,Mre),e(Mre,SFo),e(cd,PFo),e(er,$Fo),e(er,rw),e(rw,IFo),e(rw,Ere),e(Ere,jFo),e(rw,DFo),e(er,NFo),e(er,Hr),g(tw,Hr,null),e(Hr,qFo),e(Hr,yre),e(yre,OFo),e(Hr,GFo),e(Hr,md),e(md,XFo),e(md,wre),e(wre,VFo),e(md,zFo),e(md,Are),e(Are,WFo),e(md,QFo),e(Hr,HFo),e(Hr,Lre),e(Lre,UFo),e(Hr,JFo),g(aw,Hr,null),e(er,YFo),e(er,Oe),g(sw,Oe,null),e(Oe,KFo),e(Oe,Bre),e(Bre,ZFo),e(Oe,eCo),e(Oe,Ha),e(Ha,oCo),e(Ha,xre),e(xre,rCo),e(Ha,tCo),e(Ha,kre),e(kre,aCo),e(Ha,sCo),e(Ha,Rre),e(Rre,nCo),e(Ha,lCo),e(Oe,iCo),e(Oe,se),e(se,yb),e(yb,Sre),e(Sre,dCo),e(yb,cCo),e(yb,Z$),e(Z$,mCo),e(yb,fCo),e(se,gCo),e(se,wb),e(wb,Pre),e(Pre,hCo),e(wb,uCo),e(wb,eI),e(eI,pCo),e(wb,_Co),e(se,bCo),e(se,Ab),e(Ab,$re),e($re,vCo),e(Ab,TCo),e(Ab,oI),e(oI,FCo),e(Ab,CCo),e(se,MCo),e(se,Lb),e(Lb,Ire),e(Ire,ECo),e(Lb,yCo),e(Lb,rI),e(rI,wCo),e(Lb,ACo),e(se,LCo),e(se,Bb),e(Bb,jre),e(jre,BCo),e(Bb,xCo),e(Bb,tI),e(tI,kCo),e(Bb,RCo),e(se,SCo),e(se,xb),e(xb,Dre),e(Dre,PCo),e(xb,$Co),e(xb,aI),e(aI,ICo),e(xb,jCo),e(se,DCo),e(se,kb),e(kb,Nre),e(Nre,NCo),e(kb,qCo),e(kb,sI),e(sI,OCo),e(kb,GCo),e(se,XCo),e(se,Rb),e(Rb,qre),e(qre,VCo),e(Rb,zCo),e(Rb,nI),e(nI,WCo),e(Rb,QCo),e(se,HCo),e(se,Sb),e(Sb,Ore),e(Ore,UCo),e(Sb,JCo),e(Sb,lI),e(lI,YCo),e(Sb,KCo),e(se,ZCo),e(se,Pb),e(Pb,Gre),e(Gre,eMo),e(Pb,oMo),e(Pb,iI),e(iI,rMo),e(Pb,tMo),e(se,aMo),e(se,$b),e($b,Xre),e(Xre,sMo),e($b,nMo),e($b,dI),e(dI,lMo),e($b,iMo),e(se,dMo),e(se,Ib),e(Ib,Vre),e(Vre,cMo),e(Ib,mMo),e(Ib,cI),e(cI,fMo),e(Ib,gMo),e(se,hMo),e(se,jb),e(jb,zre),e(zre,uMo),e(jb,pMo),e(jb,mI),e(mI,_Mo),e(jb,bMo),e(se,vMo),e(se,Db),e(Db,Wre),e(Wre,TMo),e(Db,FMo),e(Db,fI),e(fI,CMo),e(Db,MMo),e(se,EMo),e(se,Nb),e(Nb,Qre),e(Qre,yMo),e(Nb,wMo),e(Nb,gI),e(gI,AMo),e(Nb,LMo),e(se,BMo),e(se,qb),e(qb,Hre),e(Hre,xMo),e(qb,kMo),e(qb,hI),e(hI,RMo),e(qb,SMo),e(Oe,PMo),e(Oe,Ob),e(Ob,$Mo),e(Ob,Ure),e(Ure,IMo),e(Ob,jMo),e(Ob,Jre),e(Jre,DMo),e(Oe,NMo),e(Oe,Yre),e(Yre,qMo),e(Oe,OMo),g(nw,Oe,null),b(d,yxe,_),b(d,fd,_),e(fd,Gb),e(Gb,Kre),g(lw,Kre,null),e(fd,GMo),e(fd,Zre),e(Zre,XMo),b(d,wxe,_),b(d,or,_),g(iw,or,null),e(or,VMo),e(or,gd),e(gd,zMo),e(gd,ete),e(ete,WMo),e(gd,QMo),e(gd,ote),e(ote,HMo),e(gd,UMo),e(or,JMo),e(or,dw),e(dw,YMo),e(dw,rte),e(rte,KMo),e(dw,ZMo),e(or,e4o),e(or,Ur),g(cw,Ur,null),e(Ur,o4o),e(Ur,tte),e(tte,r4o),e(Ur,t4o),e(Ur,hd),e(hd,a4o),e(hd,ate),e(ate,s4o),e(hd,n4o),e(hd,ste),e(ste,l4o),e(hd,i4o),e(Ur,d4o),e(Ur,nte),e(nte,c4o),e(Ur,m4o),g(mw,Ur,null),e(or,f4o),e(or,Ge),g(fw,Ge,null),e(Ge,g4o),e(Ge,lte),e(lte,h4o),e(Ge,u4o),e(Ge,Ua),e(Ua,p4o),e(Ua,ite),e(ite,_4o),e(Ua,b4o),e(Ua,dte),e(dte,v4o),e(Ua,T4o),e(Ua,cte),e(cte,F4o),e(Ua,C4o),e(Ge,M4o),e(Ge,A),e(A,Xb),e(Xb,mte),e(mte,E4o),e(Xb,y4o),e(Xb,uI),e(uI,w4o),e(Xb,A4o),e(A,L4o),e(A,Vb),e(Vb,fte),e(fte,B4o),e(Vb,x4o),e(Vb,pI),e(pI,k4o),e(Vb,R4o),e(A,S4o),e(A,zb),e(zb,gte),e(gte,P4o),e(zb,$4o),e(zb,_I),e(_I,I4o),e(zb,j4o),e(A,D4o),e(A,Wb),e(Wb,hte),e(hte,N4o),e(Wb,q4o),e(Wb,bI),e(bI,O4o),e(Wb,G4o),e(A,X4o),e(A,Qb),e(Qb,ute),e(ute,V4o),e(Qb,z4o),e(Qb,vI),e(vI,W4o),e(Qb,Q4o),e(A,H4o),e(A,Hb),e(Hb,pte),e(pte,U4o),e(Hb,J4o),e(Hb,TI),e(TI,Y4o),e(Hb,K4o),e(A,Z4o),e(A,Ub),e(Ub,_te),e(_te,eEo),e(Ub,oEo),e(Ub,FI),e(FI,rEo),e(Ub,tEo),e(A,aEo),e(A,Jb),e(Jb,bte),e(bte,sEo),e(Jb,nEo),e(Jb,CI),e(CI,lEo),e(Jb,iEo),e(A,dEo),e(A,Yb),e(Yb,vte),e(vte,cEo),e(Yb,mEo),e(Yb,MI),e(MI,fEo),e(Yb,gEo),e(A,hEo),e(A,Kb),e(Kb,Tte),e(Tte,uEo),e(Kb,pEo),e(Kb,EI),e(EI,_Eo),e(Kb,bEo),e(A,vEo),e(A,Zb),e(Zb,Fte),e(Fte,TEo),e(Zb,FEo),e(Zb,yI),e(yI,CEo),e(Zb,MEo),e(A,EEo),e(A,e2),e(e2,Cte),e(Cte,yEo),e(e2,wEo),e(e2,wI),e(wI,AEo),e(e2,LEo),e(A,BEo),e(A,o2),e(o2,Mte),e(Mte,xEo),e(o2,kEo),e(o2,AI),e(AI,REo),e(o2,SEo),e(A,PEo),e(A,r2),e(r2,Ete),e(Ete,$Eo),e(r2,IEo),e(r2,LI),e(LI,jEo),e(r2,DEo),e(A,NEo),e(A,t2),e(t2,yte),e(yte,qEo),e(t2,OEo),e(t2,BI),e(BI,GEo),e(t2,XEo),e(A,VEo),e(A,a2),e(a2,wte),e(wte,zEo),e(a2,WEo),e(a2,xI),e(xI,QEo),e(a2,HEo),e(A,UEo),e(A,s2),e(s2,Ate),e(Ate,JEo),e(s2,YEo),e(s2,kI),e(kI,KEo),e(s2,ZEo),e(A,e3o),e(A,n2),e(n2,Lte),e(Lte,o3o),e(n2,r3o),e(n2,RI),e(RI,t3o),e(n2,a3o),e(A,s3o),e(A,l2),e(l2,Bte),e(Bte,n3o),e(l2,l3o),e(l2,SI),e(SI,i3o),e(l2,d3o),e(A,c3o),e(A,i2),e(i2,xte),e(xte,m3o),e(i2,f3o),e(i2,PI),e(PI,g3o),e(i2,h3o),e(A,u3o),e(A,d2),e(d2,kte),e(kte,p3o),e(d2,_3o),e(d2,$I),e($I,b3o),e(d2,v3o),e(A,T3o),e(A,c2),e(c2,Rte),e(Rte,F3o),e(c2,C3o),e(c2,II),e(II,M3o),e(c2,E3o),e(A,y3o),e(A,m2),e(m2,Ste),e(Ste,w3o),e(m2,A3o),e(m2,jI),e(jI,L3o),e(m2,B3o),e(A,x3o),e(A,f2),e(f2,Pte),e(Pte,k3o),e(f2,R3o),e(f2,DI),e(DI,S3o),e(f2,P3o),e(A,$3o),e(A,g2),e(g2,$te),e($te,I3o),e(g2,j3o),e(g2,NI),e(NI,D3o),e(g2,N3o),e(A,q3o),e(A,h2),e(h2,Ite),e(Ite,O3o),e(h2,G3o),e(h2,qI),e(qI,X3o),e(h2,V3o),e(A,z3o),e(A,u2),e(u2,jte),e(jte,W3o),e(u2,Q3o),e(u2,OI),e(OI,H3o),e(u2,U3o),e(A,J3o),e(A,p2),e(p2,Dte),e(Dte,Y3o),e(p2,K3o),e(p2,GI),e(GI,Z3o),e(p2,e5o),e(A,o5o),e(A,_2),e(_2,Nte),e(Nte,r5o),e(_2,t5o),e(_2,XI),e(XI,a5o),e(_2,s5o),e(A,n5o),e(A,b2),e(b2,qte),e(qte,l5o),e(b2,i5o),e(b2,VI),e(VI,d5o),e(b2,c5o),e(A,m5o),e(A,v2),e(v2,Ote),e(Ote,f5o),e(v2,g5o),e(v2,zI),e(zI,h5o),e(v2,u5o),e(A,p5o),e(A,T2),e(T2,Gte),e(Gte,_5o),e(T2,b5o),e(T2,WI),e(WI,v5o),e(T2,T5o),e(A,F5o),e(A,F2),e(F2,Xte),e(Xte,C5o),e(F2,M5o),e(F2,QI),e(QI,E5o),e(F2,y5o),e(A,w5o),e(A,C2),e(C2,Vte),e(Vte,A5o),e(C2,L5o),e(C2,HI),e(HI,B5o),e(C2,x5o),e(A,k5o),e(A,M2),e(M2,zte),e(zte,R5o),e(M2,S5o),e(M2,UI),e(UI,P5o),e(M2,$5o),e(A,I5o),e(A,E2),e(E2,Wte),e(Wte,j5o),e(E2,D5o),e(E2,JI),e(JI,N5o),e(E2,q5o),e(A,O5o),e(A,y2),e(y2,Qte),e(Qte,G5o),e(y2,X5o),e(y2,YI),e(YI,V5o),e(y2,z5o),e(A,W5o),e(A,w2),e(w2,Hte),e(Hte,Q5o),e(w2,H5o),e(w2,KI),e(KI,U5o),e(w2,J5o),e(A,Y5o),e(A,A2),e(A2,Ute),e(Ute,K5o),e(A2,Z5o),e(A2,ZI),e(ZI,eyo),e(A2,oyo),e(A,ryo),e(A,L2),e(L2,Jte),e(Jte,tyo),e(L2,ayo),e(L2,ej),e(ej,syo),e(L2,nyo),e(A,lyo),e(A,B2),e(B2,Yte),e(Yte,iyo),e(B2,dyo),e(B2,oj),e(oj,cyo),e(B2,myo),e(A,fyo),e(A,x2),e(x2,Kte),e(Kte,gyo),e(x2,hyo),e(x2,rj),e(rj,uyo),e(x2,pyo),e(A,_yo),e(A,k2),e(k2,Zte),e(Zte,byo),e(k2,vyo),e(k2,tj),e(tj,Tyo),e(k2,Fyo),e(A,Cyo),e(A,R2),e(R2,eae),e(eae,Myo),e(R2,Eyo),e(R2,aj),e(aj,yyo),e(R2,wyo),e(A,Ayo),e(A,S2),e(S2,oae),e(oae,Lyo),e(S2,Byo),e(S2,sj),e(sj,xyo),e(S2,kyo),e(A,Ryo),e(A,P2),e(P2,rae),e(rae,Syo),e(P2,Pyo),e(P2,nj),e(nj,$yo),e(P2,Iyo),e(Ge,jyo),e(Ge,$2),e($2,Dyo),e($2,tae),e(tae,Nyo),e($2,qyo),e($2,aae),e(aae,Oyo),e(Ge,Gyo),e(Ge,sae),e(sae,Xyo),e(Ge,Vyo),g(gw,Ge,null),b(d,Axe,_),b(d,ud,_),e(ud,I2),e(I2,nae),g(hw,nae,null),e(ud,zyo),e(ud,lae),e(lae,Wyo),b(d,Lxe,_),b(d,rr,_),g(uw,rr,null),e(rr,Qyo),e(rr,pd),e(pd,Hyo),e(pd,iae),e(iae,Uyo),e(pd,Jyo),e(pd,dae),e(dae,Yyo),e(pd,Kyo),e(rr,Zyo),e(rr,pw),e(pw,ewo),e(pw,cae),e(cae,owo),e(pw,rwo),e(rr,two),e(rr,Jr),g(_w,Jr,null),e(Jr,awo),e(Jr,mae),e(mae,swo),e(Jr,nwo),e(Jr,_d),e(_d,lwo),e(_d,fae),e(fae,iwo),e(_d,dwo),e(_d,gae),e(gae,cwo),e(_d,mwo),e(Jr,fwo),e(Jr,hae),e(hae,gwo),e(Jr,hwo),g(bw,Jr,null),e(rr,uwo),e(rr,Xe),g(vw,Xe,null),e(Xe,pwo),e(Xe,uae),e(uae,_wo),e(Xe,bwo),e(Xe,Ja),e(Ja,vwo),e(Ja,pae),e(pae,Two),e(Ja,Fwo),e(Ja,_ae),e(_ae,Cwo),e(Ja,Mwo),e(Ja,bae),e(bae,Ewo),e(Ja,ywo),e(Xe,wwo),e(Xe,O),e(O,j2),e(j2,vae),e(vae,Awo),e(j2,Lwo),e(j2,lj),e(lj,Bwo),e(j2,xwo),e(O,kwo),e(O,D2),e(D2,Tae),e(Tae,Rwo),e(D2,Swo),e(D2,ij),e(ij,Pwo),e(D2,$wo),e(O,Iwo),e(O,N2),e(N2,Fae),e(Fae,jwo),e(N2,Dwo),e(N2,dj),e(dj,Nwo),e(N2,qwo),e(O,Owo),e(O,q2),e(q2,Cae),e(Cae,Gwo),e(q2,Xwo),e(q2,cj),e(cj,Vwo),e(q2,zwo),e(O,Wwo),e(O,O2),e(O2,Mae),e(Mae,Qwo),e(O2,Hwo),e(O2,mj),e(mj,Uwo),e(O2,Jwo),e(O,Ywo),e(O,G2),e(G2,Eae),e(Eae,Kwo),e(G2,Zwo),e(G2,fj),e(fj,e6o),e(G2,o6o),e(O,r6o),e(O,X2),e(X2,yae),e(yae,t6o),e(X2,a6o),e(X2,gj),e(gj,s6o),e(X2,n6o),e(O,l6o),e(O,V2),e(V2,wae),e(wae,i6o),e(V2,d6o),e(V2,hj),e(hj,c6o),e(V2,m6o),e(O,f6o),e(O,z2),e(z2,Aae),e(Aae,g6o),e(z2,h6o),e(z2,uj),e(uj,u6o),e(z2,p6o),e(O,_6o),e(O,W2),e(W2,Lae),e(Lae,b6o),e(W2,v6o),e(W2,pj),e(pj,T6o),e(W2,F6o),e(O,C6o),e(O,Q2),e(Q2,Bae),e(Bae,M6o),e(Q2,E6o),e(Q2,_j),e(_j,y6o),e(Q2,w6o),e(O,A6o),e(O,H2),e(H2,xae),e(xae,L6o),e(H2,B6o),e(H2,bj),e(bj,x6o),e(H2,k6o),e(O,R6o),e(O,U2),e(U2,kae),e(kae,S6o),e(U2,P6o),e(U2,vj),e(vj,$6o),e(U2,I6o),e(O,j6o),e(O,J2),e(J2,Rae),e(Rae,D6o),e(J2,N6o),e(J2,Tj),e(Tj,q6o),e(J2,O6o),e(O,G6o),e(O,Y2),e(Y2,Sae),e(Sae,X6o),e(Y2,V6o),e(Y2,Fj),e(Fj,z6o),e(Y2,W6o),e(O,Q6o),e(O,K2),e(K2,Pae),e(Pae,H6o),e(K2,U6o),e(K2,Cj),e(Cj,J6o),e(K2,Y6o),e(O,K6o),e(O,Z2),e(Z2,$ae),e($ae,Z6o),e(Z2,eAo),e(Z2,Mj),e(Mj,oAo),e(Z2,rAo),e(O,tAo),e(O,ev),e(ev,Iae),e(Iae,aAo),e(ev,sAo),e(ev,Ej),e(Ej,nAo),e(ev,lAo),e(O,iAo),e(O,ov),e(ov,jae),e(jae,dAo),e(ov,cAo),e(ov,yj),e(yj,mAo),e(ov,fAo),e(O,gAo),e(O,rv),e(rv,Dae),e(Dae,hAo),e(rv,uAo),e(rv,wj),e(wj,pAo),e(rv,_Ao),e(O,bAo),e(O,tv),e(tv,Nae),e(Nae,vAo),e(tv,TAo),e(tv,Aj),e(Aj,FAo),e(tv,CAo),e(O,MAo),e(O,av),e(av,qae),e(qae,EAo),e(av,yAo),e(av,Lj),e(Lj,wAo),e(av,AAo),e(O,LAo),e(O,sv),e(sv,Oae),e(Oae,BAo),e(sv,xAo),e(sv,Bj),e(Bj,kAo),e(sv,RAo),e(O,SAo),e(O,nv),e(nv,Gae),e(Gae,PAo),e(nv,$Ao),e(nv,xj),e(xj,IAo),e(nv,jAo),e(O,DAo),e(O,lv),e(lv,Xae),e(Xae,NAo),e(lv,qAo),e(lv,kj),e(kj,OAo),e(lv,GAo),e(O,XAo),e(O,iv),e(iv,Vae),e(Vae,VAo),e(iv,zAo),e(iv,Rj),e(Rj,WAo),e(iv,QAo),e(O,HAo),e(O,dv),e(dv,zae),e(zae,UAo),e(dv,JAo),e(dv,Sj),e(Sj,YAo),e(dv,KAo),e(O,ZAo),e(O,cv),e(cv,Wae),e(Wae,e0o),e(cv,o0o),e(cv,Pj),e(Pj,r0o),e(cv,t0o),e(Xe,a0o),e(Xe,mv),e(mv,s0o),e(mv,Qae),e(Qae,n0o),e(mv,l0o),e(mv,Hae),e(Hae,i0o),e(Xe,d0o),e(Xe,Uae),e(Uae,c0o),e(Xe,m0o),g(Tw,Xe,null),b(d,Bxe,_),b(d,bd,_),e(bd,fv),e(fv,Jae),g(Fw,Jae,null),e(bd,f0o),e(bd,Yae),e(Yae,g0o),b(d,xxe,_),b(d,tr,_),g(Cw,tr,null),e(tr,h0o),e(tr,vd),e(vd,u0o),e(vd,Kae),e(Kae,p0o),e(vd,_0o),e(vd,Zae),e(Zae,b0o),e(vd,v0o),e(tr,T0o),e(tr,Mw),e(Mw,F0o),e(Mw,ese),e(ese,C0o),e(Mw,M0o),e(tr,E0o),e(tr,Yr),g(Ew,Yr,null),e(Yr,y0o),e(Yr,ose),e(ose,w0o),e(Yr,A0o),e(Yr,Td),e(Td,L0o),e(Td,rse),e(rse,B0o),e(Td,x0o),e(Td,tse),e(tse,k0o),e(Td,R0o),e(Yr,S0o),e(Yr,ase),e(ase,P0o),e(Yr,$0o),g(yw,Yr,null),e(tr,I0o),e(tr,Ve),g(ww,Ve,null),e(Ve,j0o),e(Ve,sse),e(sse,D0o),e(Ve,N0o),e(Ve,Ya),e(Ya,q0o),e(Ya,nse),e(nse,O0o),e(Ya,G0o),e(Ya,lse),e(lse,X0o),e(Ya,V0o),e(Ya,ise),e(ise,z0o),e(Ya,W0o),e(Ve,Q0o),e(Ve,da),e(da,gv),e(gv,dse),e(dse,H0o),e(gv,U0o),e(gv,$j),e($j,J0o),e(gv,Y0o),e(da,K0o),e(da,hv),e(hv,cse),e(cse,Z0o),e(hv,eLo),e(hv,Ij),e(Ij,oLo),e(hv,rLo),e(da,tLo),e(da,uv),e(uv,mse),e(mse,aLo),e(uv,sLo),e(uv,jj),e(jj,nLo),e(uv,lLo),e(da,iLo),e(da,pv),e(pv,fse),e(fse,dLo),e(pv,cLo),e(pv,Dj),e(Dj,mLo),e(pv,fLo),e(da,gLo),e(da,_v),e(_v,gse),e(gse,hLo),e(_v,uLo),e(_v,Nj),e(Nj,pLo),e(_v,_Lo),e(Ve,bLo),e(Ve,bv),e(bv,vLo),e(bv,hse),e(hse,TLo),e(bv,FLo),e(bv,use),e(use,CLo),e(Ve,MLo),e(Ve,pse),e(pse,ELo),e(Ve,yLo),g(Aw,Ve,null),b(d,kxe,_),b(d,Fd,_),e(Fd,vv),e(vv,_se),g(Lw,_se,null),e(Fd,wLo),e(Fd,bse),e(bse,ALo),b(d,Rxe,_),b(d,ar,_),g(Bw,ar,null),e(ar,LLo),e(ar,Cd),e(Cd,BLo),e(Cd,vse),e(vse,xLo),e(Cd,kLo),e(Cd,Tse),e(Tse,RLo),e(Cd,SLo),e(ar,PLo),e(ar,xw),e(xw,$Lo),e(xw,Fse),e(Fse,ILo),e(xw,jLo),e(ar,DLo),e(ar,Kr),g(kw,Kr,null),e(Kr,NLo),e(Kr,Cse),e(Cse,qLo),e(Kr,OLo),e(Kr,Md),e(Md,GLo),e(Md,Mse),e(Mse,XLo),e(Md,VLo),e(Md,Ese),e(Ese,zLo),e(Md,WLo),e(Kr,QLo),e(Kr,yse),e(yse,HLo),e(Kr,ULo),g(Rw,Kr,null),e(ar,JLo),e(ar,ze),g(Sw,ze,null),e(ze,YLo),e(ze,wse),e(wse,KLo),e(ze,ZLo),e(ze,Ka),e(Ka,e8o),e(Ka,Ase),e(Ase,o8o),e(Ka,r8o),e(Ka,Lse),e(Lse,t8o),e(Ka,a8o),e(Ka,Bse),e(Bse,s8o),e(Ka,n8o),e(ze,l8o),e(ze,N),e(N,Tv),e(Tv,xse),e(xse,i8o),e(Tv,d8o),e(Tv,qj),e(qj,c8o),e(Tv,m8o),e(N,f8o),e(N,Fv),e(Fv,kse),e(kse,g8o),e(Fv,h8o),e(Fv,Oj),e(Oj,u8o),e(Fv,p8o),e(N,_8o),e(N,Cv),e(Cv,Rse),e(Rse,b8o),e(Cv,v8o),e(Cv,Gj),e(Gj,T8o),e(Cv,F8o),e(N,C8o),e(N,Mv),e(Mv,Sse),e(Sse,M8o),e(Mv,E8o),e(Mv,Xj),e(Xj,y8o),e(Mv,w8o),e(N,A8o),e(N,Ev),e(Ev,Pse),e(Pse,L8o),e(Ev,B8o),e(Ev,Vj),e(Vj,x8o),e(Ev,k8o),e(N,R8o),e(N,yv),e(yv,$se),e($se,S8o),e(yv,P8o),e(yv,zj),e(zj,$8o),e(yv,I8o),e(N,j8o),e(N,wv),e(wv,Ise),e(Ise,D8o),e(wv,N8o),e(wv,Wj),e(Wj,q8o),e(wv,O8o),e(N,G8o),e(N,Av),e(Av,jse),e(jse,X8o),e(Av,V8o),e(Av,Qj),e(Qj,z8o),e(Av,W8o),e(N,Q8o),e(N,Lv),e(Lv,Dse),e(Dse,H8o),e(Lv,U8o),e(Lv,Hj),e(Hj,J8o),e(Lv,Y8o),e(N,K8o),e(N,Bv),e(Bv,Nse),e(Nse,Z8o),e(Bv,e7o),e(Bv,Uj),e(Uj,o7o),e(Bv,r7o),e(N,t7o),e(N,xv),e(xv,qse),e(qse,a7o),e(xv,s7o),e(xv,Jj),e(Jj,n7o),e(xv,l7o),e(N,i7o),e(N,kv),e(kv,Ose),e(Ose,d7o),e(kv,c7o),e(kv,Yj),e(Yj,m7o),e(kv,f7o),e(N,g7o),e(N,Rv),e(Rv,Gse),e(Gse,h7o),e(Rv,u7o),e(Rv,Kj),e(Kj,p7o),e(Rv,_7o),e(N,b7o),e(N,Sv),e(Sv,Xse),e(Xse,v7o),e(Sv,T7o),e(Sv,Zj),e(Zj,F7o),e(Sv,C7o),e(N,M7o),e(N,Pv),e(Pv,Vse),e(Vse,E7o),e(Pv,y7o),e(Pv,eD),e(eD,w7o),e(Pv,A7o),e(N,L7o),e(N,$v),e($v,zse),e(zse,B7o),e($v,x7o),e($v,oD),e(oD,k7o),e($v,R7o),e(N,S7o),e(N,Iv),e(Iv,Wse),e(Wse,P7o),e(Iv,$7o),e(Iv,rD),e(rD,I7o),e(Iv,j7o),e(N,D7o),e(N,jv),e(jv,Qse),e(Qse,N7o),e(jv,q7o),e(jv,tD),e(tD,O7o),e(jv,G7o),e(N,X7o),e(N,Dv),e(Dv,Hse),e(Hse,V7o),e(Dv,z7o),e(Dv,aD),e(aD,W7o),e(Dv,Q7o),e(N,H7o),e(N,Nv),e(Nv,Use),e(Use,U7o),e(Nv,J7o),e(Nv,sD),e(sD,Y7o),e(Nv,K7o),e(N,Z7o),e(N,qv),e(qv,Jse),e(Jse,e9o),e(qv,o9o),e(qv,nD),e(nD,r9o),e(qv,t9o),e(N,a9o),e(N,Ov),e(Ov,Yse),e(Yse,s9o),e(Ov,n9o),e(Ov,lD),e(lD,l9o),e(Ov,i9o),e(N,d9o),e(N,Gv),e(Gv,Kse),e(Kse,c9o),e(Gv,m9o),e(Gv,iD),e(iD,f9o),e(Gv,g9o),e(N,h9o),e(N,Xv),e(Xv,Zse),e(Zse,u9o),e(Xv,p9o),e(Xv,dD),e(dD,_9o),e(Xv,b9o),e(N,v9o),e(N,Vv),e(Vv,ene),e(ene,T9o),e(Vv,F9o),e(Vv,cD),e(cD,C9o),e(Vv,M9o),e(N,E9o),e(N,zv),e(zv,one),e(one,y9o),e(zv,w9o),e(zv,mD),e(mD,A9o),e(zv,L9o),e(N,B9o),e(N,Wv),e(Wv,rne),e(rne,x9o),e(Wv,k9o),e(Wv,fD),e(fD,R9o),e(Wv,S9o),e(N,P9o),e(N,Qv),e(Qv,tne),e(tne,$9o),e(Qv,I9o),e(Qv,gD),e(gD,j9o),e(Qv,D9o),e(N,N9o),e(N,Hv),e(Hv,ane),e(ane,q9o),e(Hv,O9o),e(Hv,hD),e(hD,G9o),e(Hv,X9o),e(N,V9o),e(N,Uv),e(Uv,sne),e(sne,z9o),e(Uv,W9o),e(Uv,uD),e(uD,Q9o),e(Uv,H9o),e(N,U9o),e(N,Jv),e(Jv,nne),e(nne,J9o),e(Jv,Y9o),e(Jv,pD),e(pD,K9o),e(Jv,Z9o),e(N,eBo),e(N,Yv),e(Yv,lne),e(lne,oBo),e(Yv,rBo),e(Yv,_D),e(_D,tBo),e(Yv,aBo),e(N,sBo),e(N,Kv),e(Kv,ine),e(ine,nBo),e(Kv,lBo),e(Kv,bD),e(bD,iBo),e(Kv,dBo),e(ze,cBo),e(ze,Zv),e(Zv,mBo),e(Zv,dne),e(dne,fBo),e(Zv,gBo),e(Zv,cne),e(cne,hBo),e(ze,uBo),e(ze,mne),e(mne,pBo),e(ze,_Bo),g(Pw,ze,null),b(d,Sxe,_),b(d,Ed,_),e(Ed,eT),e(eT,fne),g($w,fne,null),e(Ed,bBo),e(Ed,gne),e(gne,vBo),b(d,Pxe,_),b(d,sr,_),g(Iw,sr,null),e(sr,TBo),e(sr,yd),e(yd,FBo),e(yd,hne),e(hne,CBo),e(yd,MBo),e(yd,une),e(une,EBo),e(yd,yBo),e(sr,wBo),e(sr,jw),e(jw,ABo),e(jw,pne),e(pne,LBo),e(jw,BBo),e(sr,xBo),e(sr,Zr),g(Dw,Zr,null),e(Zr,kBo),e(Zr,_ne),e(_ne,RBo),e(Zr,SBo),e(Zr,wd),e(wd,PBo),e(wd,bne),e(bne,$Bo),e(wd,IBo),e(wd,vne),e(vne,jBo),e(wd,DBo),e(Zr,NBo),e(Zr,Tne),e(Tne,qBo),e(Zr,OBo),g(Nw,Zr,null),e(sr,GBo),e(sr,We),g(qw,We,null),e(We,XBo),e(We,Fne),e(Fne,VBo),e(We,zBo),e(We,Za),e(Za,WBo),e(Za,Cne),e(Cne,QBo),e(Za,HBo),e(Za,Mne),e(Mne,UBo),e(Za,JBo),e(Za,Ene),e(Ene,YBo),e(Za,KBo),e(We,ZBo),e(We,R),e(R,oT),e(oT,yne),e(yne,exo),e(oT,oxo),e(oT,vD),e(vD,rxo),e(oT,txo),e(R,axo),e(R,rT),e(rT,wne),e(wne,sxo),e(rT,nxo),e(rT,TD),e(TD,lxo),e(rT,ixo),e(R,dxo),e(R,tT),e(tT,Ane),e(Ane,cxo),e(tT,mxo),e(tT,FD),e(FD,fxo),e(tT,gxo),e(R,hxo),e(R,aT),e(aT,Lne),e(Lne,uxo),e(aT,pxo),e(aT,CD),e(CD,_xo),e(aT,bxo),e(R,vxo),e(R,sT),e(sT,Bne),e(Bne,Txo),e(sT,Fxo),e(sT,MD),e(MD,Cxo),e(sT,Mxo),e(R,Exo),e(R,nT),e(nT,xne),e(xne,yxo),e(nT,wxo),e(nT,ED),e(ED,Axo),e(nT,Lxo),e(R,Bxo),e(R,lT),e(lT,kne),e(kne,xxo),e(lT,kxo),e(lT,yD),e(yD,Rxo),e(lT,Sxo),e(R,Pxo),e(R,iT),e(iT,Rne),e(Rne,$xo),e(iT,Ixo),e(iT,wD),e(wD,jxo),e(iT,Dxo),e(R,Nxo),e(R,dT),e(dT,Sne),e(Sne,qxo),e(dT,Oxo),e(dT,AD),e(AD,Gxo),e(dT,Xxo),e(R,Vxo),e(R,cT),e(cT,Pne),e(Pne,zxo),e(cT,Wxo),e(cT,LD),e(LD,Qxo),e(cT,Hxo),e(R,Uxo),e(R,mT),e(mT,$ne),e($ne,Jxo),e(mT,Yxo),e(mT,BD),e(BD,Kxo),e(mT,Zxo),e(R,eko),e(R,fT),e(fT,Ine),e(Ine,oko),e(fT,rko),e(fT,xD),e(xD,tko),e(fT,ako),e(R,sko),e(R,gT),e(gT,jne),e(jne,nko),e(gT,lko),e(gT,kD),e(kD,iko),e(gT,dko),e(R,cko),e(R,hT),e(hT,Dne),e(Dne,mko),e(hT,fko),e(hT,RD),e(RD,gko),e(hT,hko),e(R,uko),e(R,uT),e(uT,Nne),e(Nne,pko),e(uT,_ko),e(uT,SD),e(SD,bko),e(uT,vko),e(R,Tko),e(R,pT),e(pT,qne),e(qne,Fko),e(pT,Cko),e(pT,PD),e(PD,Mko),e(pT,Eko),e(R,yko),e(R,_T),e(_T,One),e(One,wko),e(_T,Ako),e(_T,$D),e($D,Lko),e(_T,Bko),e(R,xko),e(R,bT),e(bT,Gne),e(Gne,kko),e(bT,Rko),e(bT,ID),e(ID,Sko),e(bT,Pko),e(R,$ko),e(R,vT),e(vT,Xne),e(Xne,Iko),e(vT,jko),e(vT,jD),e(jD,Dko),e(vT,Nko),e(R,qko),e(R,TT),e(TT,Vne),e(Vne,Oko),e(TT,Gko),e(TT,DD),e(DD,Xko),e(TT,Vko),e(R,zko),e(R,FT),e(FT,zne),e(zne,Wko),e(FT,Qko),e(FT,ND),e(ND,Hko),e(FT,Uko),e(R,Jko),e(R,CT),e(CT,Wne),e(Wne,Yko),e(CT,Kko),e(CT,qD),e(qD,Zko),e(CT,eRo),e(R,oRo),e(R,MT),e(MT,Qne),e(Qne,rRo),e(MT,tRo),e(MT,OD),e(OD,aRo),e(MT,sRo),e(R,nRo),e(R,ET),e(ET,Hne),e(Hne,lRo),e(ET,iRo),e(ET,GD),e(GD,dRo),e(ET,cRo),e(R,mRo),e(R,yT),e(yT,Une),e(Une,fRo),e(yT,gRo),e(yT,XD),e(XD,hRo),e(yT,uRo),e(R,pRo),e(R,wT),e(wT,Jne),e(Jne,_Ro),e(wT,bRo),e(wT,VD),e(VD,vRo),e(wT,TRo),e(R,FRo),e(R,AT),e(AT,Yne),e(Yne,CRo),e(AT,MRo),e(AT,zD),e(zD,ERo),e(AT,yRo),e(R,wRo),e(R,LT),e(LT,Kne),e(Kne,ARo),e(LT,LRo),e(LT,WD),e(WD,BRo),e(LT,xRo),e(R,kRo),e(R,BT),e(BT,Zne),e(Zne,RRo),e(BT,SRo),e(BT,QD),e(QD,PRo),e(BT,$Ro),e(R,IRo),e(R,xT),e(xT,ele),e(ele,jRo),e(xT,DRo),e(xT,HD),e(HD,NRo),e(xT,qRo),e(R,ORo),e(R,kT),e(kT,ole),e(ole,GRo),e(kT,XRo),e(kT,UD),e(UD,VRo),e(kT,zRo),e(R,WRo),e(R,RT),e(RT,rle),e(rle,QRo),e(RT,HRo),e(RT,JD),e(JD,URo),e(RT,JRo),e(R,YRo),e(R,ST),e(ST,tle),e(tle,KRo),e(ST,ZRo),e(ST,YD),e(YD,eSo),e(ST,oSo),e(R,rSo),e(R,PT),e(PT,ale),e(ale,tSo),e(PT,aSo),e(PT,KD),e(KD,sSo),e(PT,nSo),e(R,lSo),e(R,$T),e($T,sle),e(sle,iSo),e($T,dSo),e($T,ZD),e(ZD,cSo),e($T,mSo),e(R,fSo),e(R,IT),e(IT,nle),e(nle,gSo),e(IT,hSo),e(IT,eN),e(eN,uSo),e(IT,pSo),e(R,_So),e(R,jT),e(jT,lle),e(lle,bSo),e(jT,vSo),e(jT,oN),e(oN,TSo),e(jT,FSo),e(R,CSo),e(R,DT),e(DT,ile),e(ile,MSo),e(DT,ESo),e(DT,rN),e(rN,ySo),e(DT,wSo),e(R,ASo),e(R,NT),e(NT,dle),e(dle,LSo),e(NT,BSo),e(NT,tN),e(tN,xSo),e(NT,kSo),e(We,RSo),e(We,qT),e(qT,SSo),e(qT,cle),e(cle,PSo),e(qT,$So),e(qT,mle),e(mle,ISo),e(We,jSo),e(We,fle),e(fle,DSo),e(We,NSo),g(Ow,We,null),b(d,$xe,_),b(d,Ad,_),e(Ad,OT),e(OT,gle),g(Gw,gle,null),e(Ad,qSo),e(Ad,hle),e(hle,OSo),b(d,Ixe,_),b(d,nr,_),g(Xw,nr,null),e(nr,GSo),e(nr,Ld),e(Ld,XSo),e(Ld,ule),e(ule,VSo),e(Ld,zSo),e(Ld,ple),e(ple,WSo),e(Ld,QSo),e(nr,HSo),e(nr,Vw),e(Vw,USo),e(Vw,_le),e(_le,JSo),e(Vw,YSo),e(nr,KSo),e(nr,et),g(zw,et,null),e(et,ZSo),e(et,ble),e(ble,ePo),e(et,oPo),e(et,Bd),e(Bd,rPo),e(Bd,vle),e(vle,tPo),e(Bd,aPo),e(Bd,Tle),e(Tle,sPo),e(Bd,nPo),e(et,lPo),e(et,Fle),e(Fle,iPo),e(et,dPo),g(Ww,et,null),e(nr,cPo),e(nr,Qe),g(Qw,Qe,null),e(Qe,mPo),e(Qe,Cle),e(Cle,fPo),e(Qe,gPo),e(Qe,es),e(es,hPo),e(es,Mle),e(Mle,uPo),e(es,pPo),e(es,Ele),e(Ele,_Po),e(es,bPo),e(es,yle),e(yle,vPo),e(es,TPo),e(Qe,FPo),e(Qe,wle),e(wle,GT),e(GT,Ale),e(Ale,CPo),e(GT,MPo),e(GT,aN),e(aN,EPo),e(GT,yPo),e(Qe,wPo),e(Qe,XT),e(XT,APo),e(XT,Lle),e(Lle,LPo),e(XT,BPo),e(XT,Ble),e(Ble,xPo),e(Qe,kPo),e(Qe,xle),e(xle,RPo),e(Qe,SPo),g(Hw,Qe,null),b(d,jxe,_),b(d,xd,_),e(xd,VT),e(VT,kle),g(Uw,kle,null),e(xd,PPo),e(xd,Rle),e(Rle,$Po),b(d,Dxe,_),b(d,lr,_),g(Jw,lr,null),e(lr,IPo),e(lr,kd),e(kd,jPo),e(kd,Sle),e(Sle,DPo),e(kd,NPo),e(kd,Ple),e(Ple,qPo),e(kd,OPo),e(lr,GPo),e(lr,Yw),e(Yw,XPo),e(Yw,$le),e($le,VPo),e(Yw,zPo),e(lr,WPo),e(lr,ot),g(Kw,ot,null),e(ot,QPo),e(ot,Ile),e(Ile,HPo),e(ot,UPo),e(ot,Rd),e(Rd,JPo),e(Rd,jle),e(jle,YPo),e(Rd,KPo),e(Rd,Dle),e(Dle,ZPo),e(Rd,e$o),e(ot,o$o),e(ot,Nle),e(Nle,r$o),e(ot,t$o),g(Zw,ot,null),e(lr,a$o),e(lr,He),g(e6,He,null),e(He,s$o),e(He,qle),e(qle,n$o),e(He,l$o),e(He,os),e(os,i$o),e(os,Ole),e(Ole,d$o),e(os,c$o),e(os,Gle),e(Gle,m$o),e(os,f$o),e(os,Xle),e(Xle,g$o),e(os,h$o),e(He,u$o),e(He,Fe),e(Fe,zT),e(zT,Vle),e(Vle,p$o),e(zT,_$o),e(zT,sN),e(sN,b$o),e(zT,v$o),e(Fe,T$o),e(Fe,WT),e(WT,zle),e(zle,F$o),e(WT,C$o),e(WT,nN),e(nN,M$o),e(WT,E$o),e(Fe,y$o),e(Fe,qn),e(qn,Wle),e(Wle,w$o),e(qn,A$o),e(qn,lN),e(lN,L$o),e(qn,B$o),e(qn,iN),e(iN,x$o),e(qn,k$o),e(Fe,R$o),e(Fe,QT),e(QT,Qle),e(Qle,S$o),e(QT,P$o),e(QT,dN),e(dN,$$o),e(QT,I$o),e(Fe,j$o),e(Fe,fa),e(fa,Hle),e(Hle,D$o),e(fa,N$o),e(fa,cN),e(cN,q$o),e(fa,O$o),e(fa,mN),e(mN,G$o),e(fa,X$o),e(fa,fN),e(fN,V$o),e(fa,z$o),e(Fe,W$o),e(Fe,HT),e(HT,Ule),e(Ule,Q$o),e(HT,H$o),e(HT,gN),e(gN,U$o),e(HT,J$o),e(Fe,Y$o),e(Fe,UT),e(UT,Jle),e(Jle,K$o),e(UT,Z$o),e(UT,hN),e(hN,eIo),e(UT,oIo),e(Fe,rIo),e(Fe,JT),e(JT,Yle),e(Yle,tIo),e(JT,aIo),e(JT,uN),e(uN,sIo),e(JT,nIo),e(Fe,lIo),e(Fe,YT),e(YT,Kle),e(Kle,iIo),e(YT,dIo),e(YT,pN),e(pN,cIo),e(YT,mIo),e(He,fIo),e(He,KT),e(KT,gIo),e(KT,Zle),e(Zle,hIo),e(KT,uIo),e(KT,eie),e(eie,pIo),e(He,_Io),e(He,oie),e(oie,bIo),e(He,vIo),g(o6,He,null),b(d,Nxe,_),b(d,Sd,_),e(Sd,ZT),e(ZT,rie),g(r6,rie,null),e(Sd,TIo),e(Sd,tie),e(tie,FIo),b(d,qxe,_),b(d,ir,_),g(t6,ir,null),e(ir,CIo),e(ir,Pd),e(Pd,MIo),e(Pd,aie),e(aie,EIo),e(Pd,yIo),e(Pd,sie),e(sie,wIo),e(Pd,AIo),e(ir,LIo),e(ir,a6),e(a6,BIo),e(a6,nie),e(nie,xIo),e(a6,kIo),e(ir,RIo),e(ir,rt),g(s6,rt,null),e(rt,SIo),e(rt,lie),e(lie,PIo),e(rt,$Io),e(rt,$d),e($d,IIo),e($d,iie),e(iie,jIo),e($d,DIo),e($d,die),e(die,NIo),e($d,qIo),e(rt,OIo),e(rt,cie),e(cie,GIo),e(rt,XIo),g(n6,rt,null),e(ir,VIo),e(ir,Ue),g(l6,Ue,null),e(Ue,zIo),e(Ue,mie),e(mie,WIo),e(Ue,QIo),e(Ue,rs),e(rs,HIo),e(rs,fie),e(fie,UIo),e(rs,JIo),e(rs,gie),e(gie,YIo),e(rs,KIo),e(rs,hie),e(hie,ZIo),e(rs,ejo),e(Ue,ojo),e(Ue,uie),e(uie,e1),e(e1,pie),e(pie,rjo),e(e1,tjo),e(e1,_N),e(_N,ajo),e(e1,sjo),e(Ue,njo),e(Ue,o1),e(o1,ljo),e(o1,_ie),e(_ie,ijo),e(o1,djo),e(o1,bie),e(bie,cjo),e(Ue,mjo),e(Ue,vie),e(vie,fjo),e(Ue,gjo),g(i6,Ue,null),b(d,Oxe,_),b(d,Id,_),e(Id,r1),e(r1,Tie),g(d6,Tie,null),e(Id,hjo),e(Id,Fie),e(Fie,ujo),b(d,Gxe,_),b(d,dr,_),g(c6,dr,null),e(dr,pjo),e(dr,jd),e(jd,_jo),e(jd,Cie),e(Cie,bjo),e(jd,vjo),e(jd,Mie),e(Mie,Tjo),e(jd,Fjo),e(dr,Cjo),e(dr,m6),e(m6,Mjo),e(m6,Eie),e(Eie,Ejo),e(m6,yjo),e(dr,wjo),e(dr,tt),g(f6,tt,null),e(tt,Ajo),e(tt,yie),e(yie,Ljo),e(tt,Bjo),e(tt,Dd),e(Dd,xjo),e(Dd,wie),e(wie,kjo),e(Dd,Rjo),e(Dd,Aie),e(Aie,Sjo),e(Dd,Pjo),e(tt,$jo),e(tt,Lie),e(Lie,Ijo),e(tt,jjo),g(g6,tt,null),e(dr,Djo),e(dr,Je),g(h6,Je,null),e(Je,Njo),e(Je,Bie),e(Bie,qjo),e(Je,Ojo),e(Je,ts),e(ts,Gjo),e(ts,xie),e(xie,Xjo),e(ts,Vjo),e(ts,kie),e(kie,zjo),e(ts,Wjo),e(ts,Rie),e(Rie,Qjo),e(ts,Hjo),e(Je,Ujo),e(Je,xe),e(xe,t1),e(t1,Sie),e(Sie,Jjo),e(t1,Yjo),e(t1,bN),e(bN,Kjo),e(t1,Zjo),e(xe,eDo),e(xe,a1),e(a1,Pie),e(Pie,oDo),e(a1,rDo),e(a1,vN),e(vN,tDo),e(a1,aDo),e(xe,sDo),e(xe,s1),e(s1,$ie),e($ie,nDo),e(s1,lDo),e(s1,TN),e(TN,iDo),e(s1,dDo),e(xe,cDo),e(xe,n1),e(n1,Iie),e(Iie,mDo),e(n1,fDo),e(n1,FN),e(FN,gDo),e(n1,hDo),e(xe,uDo),e(xe,l1),e(l1,jie),e(jie,pDo),e(l1,_Do),e(l1,CN),e(CN,bDo),e(l1,vDo),e(xe,TDo),e(xe,i1),e(i1,Die),e(Die,FDo),e(i1,CDo),e(i1,MN),e(MN,MDo),e(i1,EDo),e(xe,yDo),e(xe,d1),e(d1,Nie),e(Nie,wDo),e(d1,ADo),e(d1,EN),e(EN,LDo),e(d1,BDo),e(xe,xDo),e(xe,c1),e(c1,qie),e(qie,kDo),e(c1,RDo),e(c1,yN),e(yN,SDo),e(c1,PDo),e(Je,$Do),e(Je,m1),e(m1,IDo),e(m1,Oie),e(Oie,jDo),e(m1,DDo),e(m1,Gie),e(Gie,NDo),e(Je,qDo),e(Je,Xie),e(Xie,ODo),e(Je,GDo),g(u6,Je,null),b(d,Xxe,_),b(d,Nd,_),e(Nd,f1),e(f1,Vie),g(p6,Vie,null),e(Nd,XDo),e(Nd,zie),e(zie,VDo),b(d,Vxe,_),b(d,cr,_),g(_6,cr,null),e(cr,zDo),e(cr,qd),e(qd,WDo),e(qd,Wie),e(Wie,QDo),e(qd,HDo),e(qd,Qie),e(Qie,UDo),e(qd,JDo),e(cr,YDo),e(cr,b6),e(b6,KDo),e(b6,Hie),e(Hie,ZDo),e(b6,eNo),e(cr,oNo),e(cr,at),g(v6,at,null),e(at,rNo),e(at,Uie),e(Uie,tNo),e(at,aNo),e(at,Od),e(Od,sNo),e(Od,Jie),e(Jie,nNo),e(Od,lNo),e(Od,Yie),e(Yie,iNo),e(Od,dNo),e(at,cNo),e(at,Kie),e(Kie,mNo),e(at,fNo),g(T6,at,null),e(cr,gNo),e(cr,Ye),g(F6,Ye,null),e(Ye,hNo),e(Ye,Zie),e(Zie,uNo),e(Ye,pNo),e(Ye,as),e(as,_No),e(as,ede),e(ede,bNo),e(as,vNo),e(as,ode),e(ode,TNo),e(as,FNo),e(as,rde),e(rde,CNo),e(as,MNo),e(Ye,ENo),e(Ye,ss),e(ss,g1),e(g1,tde),e(tde,yNo),e(g1,wNo),e(g1,wN),e(wN,ANo),e(g1,LNo),e(ss,BNo),e(ss,h1),e(h1,ade),e(ade,xNo),e(h1,kNo),e(h1,AN),e(AN,RNo),e(h1,SNo),e(ss,PNo),e(ss,u1),e(u1,sde),e(sde,$No),e(u1,INo),e(u1,LN),e(LN,jNo),e(u1,DNo),e(ss,NNo),e(ss,p1),e(p1,nde),e(nde,qNo),e(p1,ONo),e(p1,BN),e(BN,GNo),e(p1,XNo),e(Ye,VNo),e(Ye,_1),e(_1,zNo),e(_1,lde),e(lde,WNo),e(_1,QNo),e(_1,ide),e(ide,HNo),e(Ye,UNo),e(Ye,dde),e(dde,JNo),e(Ye,YNo),g(C6,Ye,null),b(d,zxe,_),b(d,Gd,_),e(Gd,b1),e(b1,cde),g(M6,cde,null),e(Gd,KNo),e(Gd,mde),e(mde,ZNo),b(d,Wxe,_),b(d,mr,_),g(E6,mr,null),e(mr,eqo),e(mr,Xd),e(Xd,oqo),e(Xd,fde),e(fde,rqo),e(Xd,tqo),e(Xd,gde),e(gde,aqo),e(Xd,sqo),e(mr,nqo),e(mr,y6),e(y6,lqo),e(y6,hde),e(hde,iqo),e(y6,dqo),e(mr,cqo),e(mr,st),g(w6,st,null),e(st,mqo),e(st,ude),e(ude,fqo),e(st,gqo),e(st,Vd),e(Vd,hqo),e(Vd,pde),e(pde,uqo),e(Vd,pqo),e(Vd,_de),e(_de,_qo),e(Vd,bqo),e(st,vqo),e(st,bde),e(bde,Tqo),e(st,Fqo),g(A6,st,null),e(mr,Cqo),e(mr,Ke),g(L6,Ke,null),e(Ke,Mqo),e(Ke,vde),e(vde,Eqo),e(Ke,yqo),e(Ke,ns),e(ns,wqo),e(ns,Tde),e(Tde,Aqo),e(ns,Lqo),e(ns,Fde),e(Fde,Bqo),e(ns,xqo),e(ns,Cde),e(Cde,kqo),e(ns,Rqo),e(Ke,Sqo),e(Ke,ke),e(ke,v1),e(v1,Mde),e(Mde,Pqo),e(v1,$qo),e(v1,xN),e(xN,Iqo),e(v1,jqo),e(ke,Dqo),e(ke,T1),e(T1,Ede),e(Ede,Nqo),e(T1,qqo),e(T1,kN),e(kN,Oqo),e(T1,Gqo),e(ke,Xqo),e(ke,F1),e(F1,yde),e(yde,Vqo),e(F1,zqo),e(F1,RN),e(RN,Wqo),e(F1,Qqo),e(ke,Hqo),e(ke,C1),e(C1,wde),e(wde,Uqo),e(C1,Jqo),e(C1,SN),e(SN,Yqo),e(C1,Kqo),e(ke,Zqo),e(ke,M1),e(M1,Ade),e(Ade,eOo),e(M1,oOo),e(M1,PN),e(PN,rOo),e(M1,tOo),e(ke,aOo),e(ke,E1),e(E1,Lde),e(Lde,sOo),e(E1,nOo),e(E1,$N),e($N,lOo),e(E1,iOo),e(ke,dOo),e(ke,y1),e(y1,Bde),e(Bde,cOo),e(y1,mOo),e(y1,IN),e(IN,fOo),e(y1,gOo),e(ke,hOo),e(ke,w1),e(w1,xde),e(xde,uOo),e(w1,pOo),e(w1,jN),e(jN,_Oo),e(w1,bOo),e(Ke,vOo),e(Ke,A1),e(A1,TOo),e(A1,kde),e(kde,FOo),e(A1,COo),e(A1,Rde),e(Rde,MOo),e(Ke,EOo),e(Ke,Sde),e(Sde,yOo),e(Ke,wOo),g(B6,Ke,null),b(d,Qxe,_),b(d,zd,_),e(zd,L1),e(L1,Pde),g(x6,Pde,null),e(zd,AOo),e(zd,$de),e($de,LOo),b(d,Hxe,_),b(d,fr,_),g(k6,fr,null),e(fr,BOo),e(fr,Wd),e(Wd,xOo),e(Wd,Ide),e(Ide,kOo),e(Wd,ROo),e(Wd,jde),e(jde,SOo),e(Wd,POo),e(fr,$Oo),e(fr,R6),e(R6,IOo),e(R6,Dde),e(Dde,jOo),e(R6,DOo),e(fr,NOo),e(fr,nt),g(S6,nt,null),e(nt,qOo),e(nt,Nde),e(Nde,OOo),e(nt,GOo),e(nt,Qd),e(Qd,XOo),e(Qd,qde),e(qde,VOo),e(Qd,zOo),e(Qd,Ode),e(Ode,WOo),e(Qd,QOo),e(nt,HOo),e(nt,Gde),e(Gde,UOo),e(nt,JOo),g(P6,nt,null),e(fr,YOo),e(fr,Ze),g($6,Ze,null),e(Ze,KOo),e(Ze,Xde),e(Xde,ZOo),e(Ze,eGo),e(Ze,ls),e(ls,oGo),e(ls,Vde),e(Vde,rGo),e(ls,tGo),e(ls,zde),e(zde,aGo),e(ls,sGo),e(ls,Wde),e(Wde,nGo),e(ls,lGo),e(Ze,iGo),e(Ze,I6),e(I6,B1),e(B1,Qde),e(Qde,dGo),e(B1,cGo),e(B1,DN),e(DN,mGo),e(B1,fGo),e(I6,gGo),e(I6,x1),e(x1,Hde),e(Hde,hGo),e(x1,uGo),e(x1,NN),e(NN,pGo),e(x1,_Go),e(Ze,bGo),e(Ze,k1),e(k1,vGo),e(k1,Ude),e(Ude,TGo),e(k1,FGo),e(k1,Jde),e(Jde,CGo),e(Ze,MGo),e(Ze,Yde),e(Yde,EGo),e(Ze,yGo),g(j6,Ze,null),b(d,Uxe,_),b(d,Hd,_),e(Hd,R1),e(R1,Kde),g(D6,Kde,null),e(Hd,wGo),e(Hd,Zde),e(Zde,AGo),b(d,Jxe,_),b(d,gr,_),g(N6,gr,null),e(gr,LGo),e(gr,Ud),e(Ud,BGo),e(Ud,ece),e(ece,xGo),e(Ud,kGo),e(Ud,oce),e(oce,RGo),e(Ud,SGo),e(gr,PGo),e(gr,q6),e(q6,$Go),e(q6,rce),e(rce,IGo),e(q6,jGo),e(gr,DGo),e(gr,lt),g(O6,lt,null),e(lt,NGo),e(lt,tce),e(tce,qGo),e(lt,OGo),e(lt,Jd),e(Jd,GGo),e(Jd,ace),e(ace,XGo),e(Jd,VGo),e(Jd,sce),e(sce,zGo),e(Jd,WGo),e(lt,QGo),e(lt,nce),e(nce,HGo),e(lt,UGo),g(G6,lt,null),e(gr,JGo),e(gr,eo),g(X6,eo,null),e(eo,YGo),e(eo,lce),e(lce,KGo),e(eo,ZGo),e(eo,is),e(is,eXo),e(is,ice),e(ice,oXo),e(is,rXo),e(is,dce),e(dce,tXo),e(is,aXo),e(is,cce),e(cce,sXo),e(is,nXo),e(eo,lXo),e(eo,ds),e(ds,S1),e(S1,mce),e(mce,iXo),e(S1,dXo),e(S1,qN),e(qN,cXo),e(S1,mXo),e(ds,fXo),e(ds,P1),e(P1,fce),e(fce,gXo),e(P1,hXo),e(P1,ON),e(ON,uXo),e(P1,pXo),e(ds,_Xo),e(ds,$1),e($1,gce),e(gce,bXo),e($1,vXo),e($1,GN),e(GN,TXo),e($1,FXo),e(ds,CXo),e(ds,I1),e(I1,hce),e(hce,MXo),e(I1,EXo),e(I1,XN),e(XN,yXo),e(I1,wXo),e(eo,AXo),e(eo,j1),e(j1,LXo),e(j1,uce),e(uce,BXo),e(j1,xXo),e(j1,pce),e(pce,kXo),e(eo,RXo),e(eo,_ce),e(_ce,SXo),e(eo,PXo),g(V6,eo,null),b(d,Yxe,_),b(d,Yd,_),e(Yd,D1),e(D1,bce),g(z6,bce,null),e(Yd,$Xo),e(Yd,vce),e(vce,IXo),b(d,Kxe,_),b(d,hr,_),g(W6,hr,null),e(hr,jXo),e(hr,Kd),e(Kd,DXo),e(Kd,Tce),e(Tce,NXo),e(Kd,qXo),e(Kd,Fce),e(Fce,OXo),e(Kd,GXo),e(hr,XXo),e(hr,Q6),e(Q6,VXo),e(Q6,Cce),e(Cce,zXo),e(Q6,WXo),e(hr,QXo),e(hr,it),g(H6,it,null),e(it,HXo),e(it,Mce),e(Mce,UXo),e(it,JXo),e(it,Zd),e(Zd,YXo),e(Zd,Ece),e(Ece,KXo),e(Zd,ZXo),e(Zd,yce),e(yce,eVo),e(Zd,oVo),e(it,rVo),e(it,wce),e(wce,tVo),e(it,aVo),g(U6,it,null),e(hr,sVo),e(hr,oo),g(J6,oo,null),e(oo,nVo),e(oo,Ace),e(Ace,lVo),e(oo,iVo),e(oo,cs),e(cs,dVo),e(cs,Lce),e(Lce,cVo),e(cs,mVo),e(cs,Bce),e(Bce,fVo),e(cs,gVo),e(cs,xce),e(xce,hVo),e(cs,uVo),e(oo,pVo),e(oo,ec),e(ec,N1),e(N1,kce),e(kce,_Vo),e(N1,bVo),e(N1,VN),e(VN,vVo),e(N1,TVo),e(ec,FVo),e(ec,q1),e(q1,Rce),e(Rce,CVo),e(q1,MVo),e(q1,zN),e(zN,EVo),e(q1,yVo),e(ec,wVo),e(ec,O1),e(O1,Sce),e(Sce,AVo),e(O1,LVo),e(O1,WN),e(WN,BVo),e(O1,xVo),e(oo,kVo),e(oo,G1),e(G1,RVo),e(G1,Pce),e(Pce,SVo),e(G1,PVo),e(G1,$ce),e($ce,$Vo),e(oo,IVo),e(oo,Ice),e(Ice,jVo),e(oo,DVo),g(Y6,oo,null),b(d,Zxe,_),b(d,oc,_),e(oc,X1),e(X1,jce),g(K6,jce,null),e(oc,NVo),e(oc,Dce),e(Dce,qVo),b(d,eke,_),b(d,ur,_),g(Z6,ur,null),e(ur,OVo),e(ur,rc),e(rc,GVo),e(rc,Nce),e(Nce,XVo),e(rc,VVo),e(rc,qce),e(qce,zVo),e(rc,WVo),e(ur,QVo),e(ur,eA),e(eA,HVo),e(eA,Oce),e(Oce,UVo),e(eA,JVo),e(ur,YVo),e(ur,dt),g(oA,dt,null),e(dt,KVo),e(dt,Gce),e(Gce,ZVo),e(dt,ezo),e(dt,tc),e(tc,ozo),e(tc,Xce),e(Xce,rzo),e(tc,tzo),e(tc,Vce),e(Vce,azo),e(tc,szo),e(dt,nzo),e(dt,zce),e(zce,lzo),e(dt,izo),g(rA,dt,null),e(ur,dzo),e(ur,ro),g(tA,ro,null),e(ro,czo),e(ro,Wce),e(Wce,mzo),e(ro,fzo),e(ro,ms),e(ms,gzo),e(ms,Qce),e(Qce,hzo),e(ms,uzo),e(ms,Hce),e(Hce,pzo),e(ms,_zo),e(ms,Uce),e(Uce,bzo),e(ms,vzo),e(ro,Tzo),e(ro,Jce),e(Jce,V1),e(V1,Yce),e(Yce,Fzo),e(V1,Czo),e(V1,QN),e(QN,Mzo),e(V1,Ezo),e(ro,yzo),e(ro,z1),e(z1,wzo),e(z1,Kce),e(Kce,Azo),e(z1,Lzo),e(z1,Zce),e(Zce,Bzo),e(ro,xzo),e(ro,eme),e(eme,kzo),e(ro,Rzo),g(aA,ro,null),b(d,oke,_),b(d,ac,_),e(ac,W1),e(W1,ome),g(sA,ome,null),e(ac,Szo),e(ac,rme),e(rme,Pzo),b(d,rke,_),b(d,pr,_),g(nA,pr,null),e(pr,$zo),e(pr,sc),e(sc,Izo),e(sc,tme),e(tme,jzo),e(sc,Dzo),e(sc,ame),e(ame,Nzo),e(sc,qzo),e(pr,Ozo),e(pr,lA),e(lA,Gzo),e(lA,sme),e(sme,Xzo),e(lA,Vzo),e(pr,zzo),e(pr,ct),g(iA,ct,null),e(ct,Wzo),e(ct,nme),e(nme,Qzo),e(ct,Hzo),e(ct,nc),e(nc,Uzo),e(nc,lme),e(lme,Jzo),e(nc,Yzo),e(nc,ime),e(ime,Kzo),e(nc,Zzo),e(ct,eWo),e(ct,dme),e(dme,oWo),e(ct,rWo),g(dA,ct,null),e(pr,tWo),e(pr,to),g(cA,to,null),e(to,aWo),e(to,cme),e(cme,sWo),e(to,nWo),e(to,fs),e(fs,lWo),e(fs,mme),e(mme,iWo),e(fs,dWo),e(fs,fme),e(fme,cWo),e(fs,mWo),e(fs,gme),e(gme,fWo),e(fs,gWo),e(to,hWo),e(to,hme),e(hme,Q1),e(Q1,ume),e(ume,uWo),e(Q1,pWo),e(Q1,HN),e(HN,_Wo),e(Q1,bWo),e(to,vWo),e(to,H1),e(H1,TWo),e(H1,pme),e(pme,FWo),e(H1,CWo),e(H1,_me),e(_me,MWo),e(to,EWo),e(to,bme),e(bme,yWo),e(to,wWo),g(mA,to,null),b(d,tke,_),b(d,lc,_),e(lc,U1),e(U1,vme),g(fA,vme,null),e(lc,AWo),e(lc,Tme),e(Tme,LWo),b(d,ake,_),b(d,_r,_),g(gA,_r,null),e(_r,BWo),e(_r,ic),e(ic,xWo),e(ic,Fme),e(Fme,kWo),e(ic,RWo),e(ic,Cme),e(Cme,SWo),e(ic,PWo),e(_r,$Wo),e(_r,hA),e(hA,IWo),e(hA,Mme),e(Mme,jWo),e(hA,DWo),e(_r,NWo),e(_r,mt),g(uA,mt,null),e(mt,qWo),e(mt,Eme),e(Eme,OWo),e(mt,GWo),e(mt,dc),e(dc,XWo),e(dc,yme),e(yme,VWo),e(dc,zWo),e(dc,wme),e(wme,WWo),e(dc,QWo),e(mt,HWo),e(mt,Ame),e(Ame,UWo),e(mt,JWo),g(pA,mt,null),e(_r,YWo),e(_r,ao),g(_A,ao,null),e(ao,KWo),e(ao,Lme),e(Lme,ZWo),e(ao,eQo),e(ao,gs),e(gs,oQo),e(gs,Bme),e(Bme,rQo),e(gs,tQo),e(gs,xme),e(xme,aQo),e(gs,sQo),e(gs,kme),e(kme,nQo),e(gs,lQo),e(ao,iQo),e(ao,bA),e(bA,J1),e(J1,Rme),e(Rme,dQo),e(J1,cQo),e(J1,UN),e(UN,mQo),e(J1,fQo),e(bA,gQo),e(bA,Y1),e(Y1,Sme),e(Sme,hQo),e(Y1,uQo),e(Y1,JN),e(JN,pQo),e(Y1,_Qo),e(ao,bQo),e(ao,K1),e(K1,vQo),e(K1,Pme),e(Pme,TQo),e(K1,FQo),e(K1,$me),e($me,CQo),e(ao,MQo),e(ao,Ime),e(Ime,EQo),e(ao,yQo),g(vA,ao,null),b(d,ske,_),b(d,cc,_),e(cc,Z1),e(Z1,jme),g(TA,jme,null),e(cc,wQo),e(cc,Dme),e(Dme,AQo),b(d,nke,_),b(d,br,_),g(FA,br,null),e(br,LQo),e(br,mc),e(mc,BQo),e(mc,Nme),e(Nme,xQo),e(mc,kQo),e(mc,qme),e(qme,RQo),e(mc,SQo),e(br,PQo),e(br,CA),e(CA,$Qo),e(CA,Ome),e(Ome,IQo),e(CA,jQo),e(br,DQo),e(br,ft),g(MA,ft,null),e(ft,NQo),e(ft,Gme),e(Gme,qQo),e(ft,OQo),e(ft,fc),e(fc,GQo),e(fc,Xme),e(Xme,XQo),e(fc,VQo),e(fc,Vme),e(Vme,zQo),e(fc,WQo),e(ft,QQo),e(ft,zme),e(zme,HQo),e(ft,UQo),g(EA,ft,null),e(br,JQo),e(br,so),g(yA,so,null),e(so,YQo),e(so,Wme),e(Wme,KQo),e(so,ZQo),e(so,hs),e(hs,eHo),e(hs,Qme),e(Qme,oHo),e(hs,rHo),e(hs,Hme),e(Hme,tHo),e(hs,aHo),e(hs,Ume),e(Ume,sHo),e(hs,nHo),e(so,lHo),e(so,Jme),e(Jme,eF),e(eF,Yme),e(Yme,iHo),e(eF,dHo),e(eF,YN),e(YN,cHo),e(eF,mHo),e(so,fHo),e(so,oF),e(oF,gHo),e(oF,Kme),e(Kme,hHo),e(oF,uHo),e(oF,Zme),e(Zme,pHo),e(so,_Ho),e(so,efe),e(efe,bHo),e(so,vHo),g(wA,so,null),b(d,lke,_),b(d,gc,_),e(gc,rF),e(rF,ofe),g(AA,ofe,null),e(gc,THo),e(gc,rfe),e(rfe,FHo),b(d,ike,_),b(d,vr,_),g(LA,vr,null),e(vr,CHo),e(vr,hc),e(hc,MHo),e(hc,tfe),e(tfe,EHo),e(hc,yHo),e(hc,afe),e(afe,wHo),e(hc,AHo),e(vr,LHo),e(vr,BA),e(BA,BHo),e(BA,sfe),e(sfe,xHo),e(BA,kHo),e(vr,RHo),e(vr,gt),g(xA,gt,null),e(gt,SHo),e(gt,nfe),e(nfe,PHo),e(gt,$Ho),e(gt,uc),e(uc,IHo),e(uc,lfe),e(lfe,jHo),e(uc,DHo),e(uc,ife),e(ife,NHo),e(uc,qHo),e(gt,OHo),e(gt,dfe),e(dfe,GHo),e(gt,XHo),g(kA,gt,null),e(vr,VHo),e(vr,ho),g(RA,ho,null),e(ho,zHo),e(ho,cfe),e(cfe,WHo),e(ho,QHo),e(ho,us),e(us,HHo),e(us,mfe),e(mfe,UHo),e(us,JHo),e(us,ffe),e(ffe,YHo),e(us,KHo),e(us,gfe),e(gfe,ZHo),e(us,eUo),e(ho,oUo),e(ho,B),e(B,tF),e(tF,hfe),e(hfe,rUo),e(tF,tUo),e(tF,KN),e(KN,aUo),e(tF,sUo),e(B,nUo),e(B,aF),e(aF,ufe),e(ufe,lUo),e(aF,iUo),e(aF,ZN),e(ZN,dUo),e(aF,cUo),e(B,mUo),e(B,sF),e(sF,pfe),e(pfe,fUo),e(sF,gUo),e(sF,eq),e(eq,hUo),e(sF,uUo),e(B,pUo),e(B,nF),e(nF,_fe),e(_fe,_Uo),e(nF,bUo),e(nF,oq),e(oq,vUo),e(nF,TUo),e(B,FUo),e(B,lF),e(lF,bfe),e(bfe,CUo),e(lF,MUo),e(lF,rq),e(rq,EUo),e(lF,yUo),e(B,wUo),e(B,iF),e(iF,vfe),e(vfe,AUo),e(iF,LUo),e(iF,tq),e(tq,BUo),e(iF,xUo),e(B,kUo),e(B,dF),e(dF,Tfe),e(Tfe,RUo),e(dF,SUo),e(dF,aq),e(aq,PUo),e(dF,$Uo),e(B,IUo),e(B,cF),e(cF,Ffe),e(Ffe,jUo),e(cF,DUo),e(cF,sq),e(sq,NUo),e(cF,qUo),e(B,OUo),e(B,mF),e(mF,Cfe),e(Cfe,GUo),e(mF,XUo),e(mF,nq),e(nq,VUo),e(mF,zUo),e(B,WUo),e(B,fF),e(fF,Mfe),e(Mfe,QUo),e(fF,HUo),e(fF,lq),e(lq,UUo),e(fF,JUo),e(B,YUo),e(B,gF),e(gF,Efe),e(Efe,KUo),e(gF,ZUo),e(gF,iq),e(iq,eJo),e(gF,oJo),e(B,rJo),e(B,hF),e(hF,yfe),e(yfe,tJo),e(hF,aJo),e(hF,dq),e(dq,sJo),e(hF,nJo),e(B,lJo),e(B,uF),e(uF,wfe),e(wfe,iJo),e(uF,dJo),e(uF,cq),e(cq,cJo),e(uF,mJo),e(B,fJo),e(B,pF),e(pF,Afe),e(Afe,gJo),e(pF,hJo),e(pF,mq),e(mq,uJo),e(pF,pJo),e(B,_Jo),e(B,_F),e(_F,Lfe),e(Lfe,bJo),e(_F,vJo),e(_F,fq),e(fq,TJo),e(_F,FJo),e(B,CJo),e(B,bF),e(bF,Bfe),e(Bfe,MJo),e(bF,EJo),e(bF,gq),e(gq,yJo),e(bF,wJo),e(B,AJo),e(B,On),e(On,xfe),e(xfe,LJo),e(On,BJo),e(On,hq),e(hq,xJo),e(On,kJo),e(On,uq),e(uq,RJo),e(On,SJo),e(B,PJo),e(B,vF),e(vF,kfe),e(kfe,$Jo),e(vF,IJo),e(vF,pq),e(pq,jJo),e(vF,DJo),e(B,NJo),e(B,TF),e(TF,Rfe),e(Rfe,qJo),e(TF,OJo),e(TF,_q),e(_q,GJo),e(TF,XJo),e(B,VJo),e(B,FF),e(FF,Sfe),e(Sfe,zJo),e(FF,WJo),e(FF,bq),e(bq,QJo),e(FF,HJo),e(B,UJo),e(B,CF),e(CF,Pfe),e(Pfe,JJo),e(CF,YJo),e(CF,vq),e(vq,KJo),e(CF,ZJo),e(B,eYo),e(B,MF),e(MF,$fe),e($fe,oYo),e(MF,rYo),e(MF,Tq),e(Tq,tYo),e(MF,aYo),e(B,sYo),e(B,EF),e(EF,Ife),e(Ife,nYo),e(EF,lYo),e(EF,Fq),e(Fq,iYo),e(EF,dYo),e(B,cYo),e(B,yF),e(yF,jfe),e(jfe,mYo),e(yF,fYo),e(yF,Cq),e(Cq,gYo),e(yF,hYo),e(B,uYo),e(B,wF),e(wF,Dfe),e(Dfe,pYo),e(wF,_Yo),e(wF,Mq),e(Mq,bYo),e(wF,vYo),e(B,TYo),e(B,AF),e(AF,Nfe),e(Nfe,FYo),e(AF,CYo),e(AF,Eq),e(Eq,MYo),e(AF,EYo),e(B,yYo),e(B,LF),e(LF,qfe),e(qfe,wYo),e(LF,AYo),e(LF,yq),e(yq,LYo),e(LF,BYo),e(B,xYo),e(B,BF),e(BF,Ofe),e(Ofe,kYo),e(BF,RYo),e(BF,wq),e(wq,SYo),e(BF,PYo),e(B,$Yo),e(B,xF),e(xF,Gfe),e(Gfe,IYo),e(xF,jYo),e(xF,Aq),e(Aq,DYo),e(xF,NYo),e(B,qYo),e(B,kF),e(kF,Xfe),e(Xfe,OYo),e(kF,GYo),e(kF,Lq),e(Lq,XYo),e(kF,VYo),e(B,zYo),e(B,RF),e(RF,Vfe),e(Vfe,WYo),e(RF,QYo),e(RF,Bq),e(Bq,HYo),e(RF,UYo),e(B,JYo),e(B,SF),e(SF,zfe),e(zfe,YYo),e(SF,KYo),e(SF,xq),e(xq,ZYo),e(SF,eKo),e(B,oKo),e(B,PF),e(PF,Wfe),e(Wfe,rKo),e(PF,tKo),e(PF,kq),e(kq,aKo),e(PF,sKo),e(B,nKo),e(B,$F),e($F,Qfe),e(Qfe,lKo),e($F,iKo),e($F,Rq),e(Rq,dKo),e($F,cKo),e(B,mKo),e(B,IF),e(IF,Hfe),e(Hfe,fKo),e(IF,gKo),e(IF,Sq),e(Sq,hKo),e(IF,uKo),e(B,pKo),e(B,jF),e(jF,Ufe),e(Ufe,_Ko),e(jF,bKo),e(jF,Pq),e(Pq,vKo),e(jF,TKo),e(B,FKo),e(B,DF),e(DF,Jfe),e(Jfe,CKo),e(DF,MKo),e(DF,$q),e($q,EKo),e(DF,yKo),e(B,wKo),e(B,NF),e(NF,Yfe),e(Yfe,AKo),e(NF,LKo),e(NF,Iq),e(Iq,BKo),e(NF,xKo),e(B,kKo),e(B,qF),e(qF,Kfe),e(Kfe,RKo),e(qF,SKo),e(qF,jq),e(jq,PKo),e(qF,$Ko),e(B,IKo),e(B,OF),e(OF,Zfe),e(Zfe,jKo),e(OF,DKo),e(OF,Dq),e(Dq,NKo),e(OF,qKo),e(B,OKo),e(B,GF),e(GF,ege),e(ege,GKo),e(GF,XKo),e(GF,Nq),e(Nq,VKo),e(GF,zKo),e(B,WKo),e(B,XF),e(XF,oge),e(oge,QKo),e(XF,HKo),e(XF,qq),e(qq,UKo),e(XF,JKo),e(ho,YKo),e(ho,rge),e(rge,KKo),e(ho,ZKo),g(SA,ho,null),b(d,dke,_),b(d,pc,_),e(pc,VF),e(VF,tge),g(PA,tge,null),e(pc,eZo),e(pc,age),e(age,oZo),b(d,cke,_),b(d,Tr,_),g($A,Tr,null),e(Tr,rZo),e(Tr,_c),e(_c,tZo),e(_c,sge),e(sge,aZo),e(_c,sZo),e(_c,nge),e(nge,nZo),e(_c,lZo),e(Tr,iZo),e(Tr,IA),e(IA,dZo),e(IA,lge),e(lge,cZo),e(IA,mZo),e(Tr,fZo),e(Tr,ht),g(jA,ht,null),e(ht,gZo),e(ht,ige),e(ige,hZo),e(ht,uZo),e(ht,bc),e(bc,pZo),e(bc,dge),e(dge,_Zo),e(bc,bZo),e(bc,cge),e(cge,vZo),e(bc,TZo),e(ht,FZo),e(ht,mge),e(mge,CZo),e(ht,MZo),g(DA,ht,null),e(Tr,EZo),e(Tr,uo),g(NA,uo,null),e(uo,yZo),e(uo,fge),e(fge,wZo),e(uo,AZo),e(uo,ps),e(ps,LZo),e(ps,gge),e(gge,BZo),e(ps,xZo),e(ps,hge),e(hge,kZo),e(ps,RZo),e(ps,uge),e(uge,SZo),e(ps,PZo),e(uo,$Zo),e(uo,H),e(H,zF),e(zF,pge),e(pge,IZo),e(zF,jZo),e(zF,Oq),e(Oq,DZo),e(zF,NZo),e(H,qZo),e(H,WF),e(WF,_ge),e(_ge,OZo),e(WF,GZo),e(WF,Gq),e(Gq,XZo),e(WF,VZo),e(H,zZo),e(H,QF),e(QF,bge),e(bge,WZo),e(QF,QZo),e(QF,Xq),e(Xq,HZo),e(QF,UZo),e(H,JZo),e(H,HF),e(HF,vge),e(vge,YZo),e(HF,KZo),e(HF,Vq),e(Vq,ZZo),e(HF,eer),e(H,oer),e(H,UF),e(UF,Tge),e(Tge,rer),e(UF,ter),e(UF,zq),e(zq,aer),e(UF,ser),e(H,ner),e(H,JF),e(JF,Fge),e(Fge,ler),e(JF,ier),e(JF,Wq),e(Wq,der),e(JF,cer),e(H,mer),e(H,YF),e(YF,Cge),e(Cge,fer),e(YF,ger),e(YF,Qq),e(Qq,her),e(YF,uer),e(H,per),e(H,KF),e(KF,Mge),e(Mge,_er),e(KF,ber),e(KF,Hq),e(Hq,ver),e(KF,Ter),e(H,Fer),e(H,ZF),e(ZF,Ege),e(Ege,Cer),e(ZF,Mer),e(ZF,Uq),e(Uq,Eer),e(ZF,yer),e(H,wer),e(H,eC),e(eC,yge),e(yge,Aer),e(eC,Ler),e(eC,Jq),e(Jq,Ber),e(eC,xer),e(H,ker),e(H,oC),e(oC,wge),e(wge,Rer),e(oC,Ser),e(oC,Yq),e(Yq,Per),e(oC,$er),e(H,Ier),e(H,rC),e(rC,Age),e(Age,jer),e(rC,Der),e(rC,Kq),e(Kq,Ner),e(rC,qer),e(H,Oer),e(H,tC),e(tC,Lge),e(Lge,Ger),e(tC,Xer),e(tC,Zq),e(Zq,Ver),e(tC,zer),e(H,Wer),e(H,aC),e(aC,Bge),e(Bge,Qer),e(aC,Her),e(aC,eO),e(eO,Uer),e(aC,Jer),e(H,Yer),e(H,sC),e(sC,xge),e(xge,Ker),e(sC,Zer),e(sC,oO),e(oO,eor),e(sC,oor),e(H,ror),e(H,nC),e(nC,kge),e(kge,tor),e(nC,aor),e(nC,rO),e(rO,sor),e(nC,nor),e(H,lor),e(H,lC),e(lC,Rge),e(Rge,ior),e(lC,dor),e(lC,tO),e(tO,cor),e(lC,mor),e(H,gor),e(H,iC),e(iC,Sge),e(Sge,hor),e(iC,uor),e(iC,aO),e(aO,por),e(iC,_or),e(H,bor),e(H,dC),e(dC,Pge),e(Pge,vor),e(dC,Tor),e(dC,sO),e(sO,For),e(dC,Cor),e(H,Mor),e(H,cC),e(cC,$ge),e($ge,Eor),e(cC,yor),e(cC,nO),e(nO,wor),e(cC,Aor),e(H,Lor),e(H,mC),e(mC,Ige),e(Ige,Bor),e(mC,xor),e(mC,lO),e(lO,kor),e(mC,Ror),e(H,Sor),e(H,fC),e(fC,jge),e(jge,Por),e(fC,$or),e(fC,iO),e(iO,Ior),e(fC,jor),e(uo,Dor),e(uo,Dge),e(Dge,Nor),e(uo,qor),g(qA,uo,null),b(d,mke,_),b(d,vc,_),e(vc,gC),e(gC,Nge),g(OA,Nge,null),e(vc,Oor),e(vc,qge),e(qge,Gor),b(d,fke,_),b(d,Fr,_),g(GA,Fr,null),e(Fr,Xor),e(Fr,Tc),e(Tc,Vor),e(Tc,Oge),e(Oge,zor),e(Tc,Wor),e(Tc,Gge),e(Gge,Qor),e(Tc,Hor),e(Fr,Uor),e(Fr,XA),e(XA,Jor),e(XA,Xge),e(Xge,Yor),e(XA,Kor),e(Fr,Zor),e(Fr,ut),g(VA,ut,null),e(ut,err),e(ut,Vge),e(Vge,orr),e(ut,rrr),e(ut,Fc),e(Fc,trr),e(Fc,zge),e(zge,arr),e(Fc,srr),e(Fc,Wge),e(Wge,nrr),e(Fc,lrr),e(ut,irr),e(ut,Qge),e(Qge,drr),e(ut,crr),g(zA,ut,null),e(Fr,mrr),e(Fr,po),g(WA,po,null),e(po,frr),e(po,Hge),e(Hge,grr),e(po,hrr),e(po,_s),e(_s,urr),e(_s,Uge),e(Uge,prr),e(_s,_rr),e(_s,Jge),e(Jge,brr),e(_s,vrr),e(_s,Yge),e(Yge,Trr),e(_s,Frr),e(po,Crr),e(po,ue),e(ue,hC),e(hC,Kge),e(Kge,Mrr),e(hC,Err),e(hC,dO),e(dO,yrr),e(hC,wrr),e(ue,Arr),e(ue,uC),e(uC,Zge),e(Zge,Lrr),e(uC,Brr),e(uC,cO),e(cO,xrr),e(uC,krr),e(ue,Rrr),e(ue,pC),e(pC,ehe),e(ehe,Srr),e(pC,Prr),e(pC,mO),e(mO,$rr),e(pC,Irr),e(ue,jrr),e(ue,_C),e(_C,ohe),e(ohe,Drr),e(_C,Nrr),e(_C,fO),e(fO,qrr),e(_C,Orr),e(ue,Grr),e(ue,bC),e(bC,rhe),e(rhe,Xrr),e(bC,Vrr),e(bC,gO),e(gO,zrr),e(bC,Wrr),e(ue,Qrr),e(ue,vC),e(vC,the),e(the,Hrr),e(vC,Urr),e(vC,hO),e(hO,Jrr),e(vC,Yrr),e(ue,Krr),e(ue,TC),e(TC,ahe),e(ahe,Zrr),e(TC,etr),e(TC,uO),e(uO,otr),e(TC,rtr),e(ue,ttr),e(ue,FC),e(FC,she),e(she,atr),e(FC,str),e(FC,pO),e(pO,ntr),e(FC,ltr),e(ue,itr),e(ue,CC),e(CC,nhe),e(nhe,dtr),e(CC,ctr),e(CC,_O),e(_O,mtr),e(CC,ftr),e(ue,gtr),e(ue,MC),e(MC,lhe),e(lhe,htr),e(MC,utr),e(MC,bO),e(bO,ptr),e(MC,_tr),e(po,btr),e(po,ihe),e(ihe,vtr),e(po,Ttr),g(QA,po,null),b(d,gke,_),b(d,Cc,_),e(Cc,EC),e(EC,dhe),g(HA,dhe,null),e(Cc,Ftr),e(Cc,che),e(che,Ctr),b(d,hke,_),b(d,Cr,_),g(UA,Cr,null),e(Cr,Mtr),e(Cr,Mc),e(Mc,Etr),e(Mc,mhe),e(mhe,ytr),e(Mc,wtr),e(Mc,fhe),e(fhe,Atr),e(Mc,Ltr),e(Cr,Btr),e(Cr,JA),e(JA,xtr),e(JA,ghe),e(ghe,ktr),e(JA,Rtr),e(Cr,Str),e(Cr,pt),g(YA,pt,null),e(pt,Ptr),e(pt,hhe),e(hhe,$tr),e(pt,Itr),e(pt,Ec),e(Ec,jtr),e(Ec,uhe),e(uhe,Dtr),e(Ec,Ntr),e(Ec,phe),e(phe,qtr),e(Ec,Otr),e(pt,Gtr),e(pt,_he),e(_he,Xtr),e(pt,Vtr),g(KA,pt,null),e(Cr,ztr),e(Cr,_o),g(ZA,_o,null),e(_o,Wtr),e(_o,bhe),e(bhe,Qtr),e(_o,Htr),e(_o,bs),e(bs,Utr),e(bs,vhe),e(vhe,Jtr),e(bs,Ytr),e(bs,The),e(The,Ktr),e(bs,Ztr),e(bs,Fhe),e(Fhe,ear),e(bs,oar),e(_o,rar),e(_o,e0),e(e0,yC),e(yC,Che),e(Che,tar),e(yC,aar),e(yC,vO),e(vO,sar),e(yC,nar),e(e0,lar),e(e0,wC),e(wC,Mhe),e(Mhe,iar),e(wC,dar),e(wC,TO),e(TO,car),e(wC,mar),e(_o,far),e(_o,Ehe),e(Ehe,gar),e(_o,har),g(o0,_o,null),b(d,uke,_),b(d,yc,_),e(yc,AC),e(AC,yhe),g(r0,yhe,null),e(yc,uar),e(yc,whe),e(whe,par),b(d,pke,_),b(d,Mr,_),g(t0,Mr,null),e(Mr,_ar),e(Mr,wc),e(wc,bar),e(wc,Ahe),e(Ahe,Tar),e(wc,Far),e(wc,Lhe),e(Lhe,Car),e(wc,Mar),e(Mr,Ear),e(Mr,a0),e(a0,yar),e(a0,Bhe),e(Bhe,war),e(a0,Aar),e(Mr,Lar),e(Mr,_t),g(s0,_t,null),e(_t,Bar),e(_t,xhe),e(xhe,xar),e(_t,kar),e(_t,Ac),e(Ac,Rar),e(Ac,khe),e(khe,Sar),e(Ac,Par),e(Ac,Rhe),e(Rhe,$ar),e(Ac,Iar),e(_t,jar),e(_t,She),e(She,Dar),e(_t,Nar),g(n0,_t,null),e(Mr,qar),e(Mr,bo),g(l0,bo,null),e(bo,Oar),e(bo,Phe),e(Phe,Gar),e(bo,Xar),e(bo,vs),e(vs,Var),e(vs,$he),e($he,zar),e(vs,War),e(vs,Ihe),e(Ihe,Qar),e(vs,Har),e(vs,jhe),e(jhe,Uar),e(vs,Jar),e(bo,Yar),e(bo,Y),e(Y,LC),e(LC,Dhe),e(Dhe,Kar),e(LC,Zar),e(LC,FO),e(FO,esr),e(LC,osr),e(Y,rsr),e(Y,BC),e(BC,Nhe),e(Nhe,tsr),e(BC,asr),e(BC,CO),e(CO,ssr),e(BC,nsr),e(Y,lsr),e(Y,xC),e(xC,qhe),e(qhe,isr),e(xC,dsr),e(xC,MO),e(MO,csr),e(xC,msr),e(Y,fsr),e(Y,kC),e(kC,Ohe),e(Ohe,gsr),e(kC,hsr),e(kC,EO),e(EO,usr),e(kC,psr),e(Y,_sr),e(Y,RC),e(RC,Ghe),e(Ghe,bsr),e(RC,vsr),e(RC,yO),e(yO,Tsr),e(RC,Fsr),e(Y,Csr),e(Y,SC),e(SC,Xhe),e(Xhe,Msr),e(SC,Esr),e(SC,wO),e(wO,ysr),e(SC,wsr),e(Y,Asr),e(Y,PC),e(PC,Vhe),e(Vhe,Lsr),e(PC,Bsr),e(PC,AO),e(AO,xsr),e(PC,ksr),e(Y,Rsr),e(Y,$C),e($C,zhe),e(zhe,Ssr),e($C,Psr),e($C,LO),e(LO,$sr),e($C,Isr),e(Y,jsr),e(Y,IC),e(IC,Whe),e(Whe,Dsr),e(IC,Nsr),e(IC,BO),e(BO,qsr),e(IC,Osr),e(Y,Gsr),e(Y,jC),e(jC,Qhe),e(Qhe,Xsr),e(jC,Vsr),e(jC,xO),e(xO,zsr),e(jC,Wsr),e(Y,Qsr),e(Y,DC),e(DC,Hhe),e(Hhe,Hsr),e(DC,Usr),e(DC,kO),e(kO,Jsr),e(DC,Ysr),e(Y,Ksr),e(Y,NC),e(NC,Uhe),e(Uhe,Zsr),e(NC,enr),e(NC,RO),e(RO,onr),e(NC,rnr),e(Y,tnr),e(Y,qC),e(qC,Jhe),e(Jhe,anr),e(qC,snr),e(qC,SO),e(SO,nnr),e(qC,lnr),e(Y,inr),e(Y,OC),e(OC,Yhe),e(Yhe,dnr),e(OC,cnr),e(OC,PO),e(PO,mnr),e(OC,fnr),e(Y,gnr),e(Y,GC),e(GC,Khe),e(Khe,hnr),e(GC,unr),e(GC,$O),e($O,pnr),e(GC,_nr),e(Y,bnr),e(Y,XC),e(XC,Zhe),e(Zhe,vnr),e(XC,Tnr),e(XC,IO),e(IO,Fnr),e(XC,Cnr),e(Y,Mnr),e(Y,VC),e(VC,eue),e(eue,Enr),e(VC,ynr),e(VC,jO),e(jO,wnr),e(VC,Anr),e(Y,Lnr),e(Y,zC),e(zC,oue),e(oue,Bnr),e(zC,xnr),e(zC,DO),e(DO,knr),e(zC,Rnr),e(Y,Snr),e(Y,WC),e(WC,rue),e(rue,Pnr),e(WC,$nr),e(WC,NO),e(NO,Inr),e(WC,jnr),e(Y,Dnr),e(Y,QC),e(QC,tue),e(tue,Nnr),e(QC,qnr),e(QC,qO),e(qO,Onr),e(QC,Gnr),e(bo,Xnr),e(bo,aue),e(aue,Vnr),e(bo,znr),g(i0,bo,null),b(d,_ke,_),b(d,Lc,_),e(Lc,HC),e(HC,sue),g(d0,sue,null),e(Lc,Wnr),e(Lc,nue),e(nue,Qnr),b(d,bke,_),b(d,Er,_),g(c0,Er,null),e(Er,Hnr),e(Er,Bc),e(Bc,Unr),e(Bc,lue),e(lue,Jnr),e(Bc,Ynr),e(Bc,iue),e(iue,Knr),e(Bc,Znr),e(Er,elr),e(Er,m0),e(m0,olr),e(m0,due),e(due,rlr),e(m0,tlr),e(Er,alr),e(Er,bt),g(f0,bt,null),e(bt,slr),e(bt,cue),e(cue,nlr),e(bt,llr),e(bt,xc),e(xc,ilr),e(xc,mue),e(mue,dlr),e(xc,clr),e(xc,fue),e(fue,mlr),e(xc,flr),e(bt,glr),e(bt,gue),e(gue,hlr),e(bt,ulr),g(g0,bt,null),e(Er,plr),e(Er,vo),g(h0,vo,null),e(vo,_lr),e(vo,hue),e(hue,blr),e(vo,vlr),e(vo,Ts),e(Ts,Tlr),e(Ts,uue),e(uue,Flr),e(Ts,Clr),e(Ts,pue),e(pue,Mlr),e(Ts,Elr),e(Ts,_ue),e(_ue,ylr),e(Ts,wlr),e(vo,Alr),e(vo,pe),e(pe,UC),e(UC,bue),e(bue,Llr),e(UC,Blr),e(UC,OO),e(OO,xlr),e(UC,klr),e(pe,Rlr),e(pe,JC),e(JC,vue),e(vue,Slr),e(JC,Plr),e(JC,GO),e(GO,$lr),e(JC,Ilr),e(pe,jlr),e(pe,YC),e(YC,Tue),e(Tue,Dlr),e(YC,Nlr),e(YC,XO),e(XO,qlr),e(YC,Olr),e(pe,Glr),e(pe,KC),e(KC,Fue),e(Fue,Xlr),e(KC,Vlr),e(KC,VO),e(VO,zlr),e(KC,Wlr),e(pe,Qlr),e(pe,ZC),e(ZC,Cue),e(Cue,Hlr),e(ZC,Ulr),e(ZC,zO),e(zO,Jlr),e(ZC,Ylr),e(pe,Klr),e(pe,eM),e(eM,Mue),e(Mue,Zlr),e(eM,eir),e(eM,WO),e(WO,oir),e(eM,rir),e(pe,tir),e(pe,oM),e(oM,Eue),e(Eue,air),e(oM,sir),e(oM,QO),e(QO,nir),e(oM,lir),e(pe,iir),e(pe,rM),e(rM,yue),e(yue,dir),e(rM,cir),e(rM,HO),e(HO,mir),e(rM,fir),e(pe,gir),e(pe,tM),e(tM,wue),e(wue,hir),e(tM,uir),e(tM,UO),e(UO,pir),e(tM,_ir),e(pe,bir),e(pe,aM),e(aM,Aue),e(Aue,vir),e(aM,Tir),e(aM,JO),e(JO,Fir),e(aM,Cir),e(vo,Mir),e(vo,Lue),e(Lue,Eir),e(vo,yir),g(u0,vo,null),b(d,vke,_),b(d,kc,_),e(kc,sM),e(sM,Bue),g(p0,Bue,null),e(kc,wir),e(kc,xue),e(xue,Air),b(d,Tke,_),b(d,yr,_),g(_0,yr,null),e(yr,Lir),e(yr,Rc),e(Rc,Bir),e(Rc,kue),e(kue,xir),e(Rc,kir),e(Rc,Rue),e(Rue,Rir),e(Rc,Sir),e(yr,Pir),e(yr,b0),e(b0,$ir),e(b0,Sue),e(Sue,Iir),e(b0,jir),e(yr,Dir),e(yr,vt),g(v0,vt,null),e(vt,Nir),e(vt,Pue),e(Pue,qir),e(vt,Oir),e(vt,Sc),e(Sc,Gir),e(Sc,$ue),e($ue,Xir),e(Sc,Vir),e(Sc,Iue),e(Iue,zir),e(Sc,Wir),e(vt,Qir),e(vt,jue),e(jue,Hir),e(vt,Uir),g(T0,vt,null),e(yr,Jir),e(yr,To),g(F0,To,null),e(To,Yir),e(To,Due),e(Due,Kir),e(To,Zir),e(To,Fs),e(Fs,edr),e(Fs,Nue),e(Nue,odr),e(Fs,rdr),e(Fs,que),e(que,tdr),e(Fs,adr),e(Fs,Oue),e(Oue,sdr),e(Fs,ndr),e(To,ldr),e(To,V),e(V,nM),e(nM,Gue),e(Gue,idr),e(nM,ddr),e(nM,YO),e(YO,cdr),e(nM,mdr),e(V,fdr),e(V,lM),e(lM,Xue),e(Xue,gdr),e(lM,hdr),e(lM,KO),e(KO,udr),e(lM,pdr),e(V,_dr),e(V,iM),e(iM,Vue),e(Vue,bdr),e(iM,vdr),e(iM,ZO),e(ZO,Tdr),e(iM,Fdr),e(V,Cdr),e(V,dM),e(dM,zue),e(zue,Mdr),e(dM,Edr),e(dM,eG),e(eG,ydr),e(dM,wdr),e(V,Adr),e(V,cM),e(cM,Wue),e(Wue,Ldr),e(cM,Bdr),e(cM,oG),e(oG,xdr),e(cM,kdr),e(V,Rdr),e(V,mM),e(mM,Que),e(Que,Sdr),e(mM,Pdr),e(mM,rG),e(rG,$dr),e(mM,Idr),e(V,jdr),e(V,fM),e(fM,Hue),e(Hue,Ddr),e(fM,Ndr),e(fM,tG),e(tG,qdr),e(fM,Odr),e(V,Gdr),e(V,gM),e(gM,Uue),e(Uue,Xdr),e(gM,Vdr),e(gM,aG),e(aG,zdr),e(gM,Wdr),e(V,Qdr),e(V,hM),e(hM,Jue),e(Jue,Hdr),e(hM,Udr),e(hM,sG),e(sG,Jdr),e(hM,Ydr),e(V,Kdr),e(V,uM),e(uM,Yue),e(Yue,Zdr),e(uM,ecr),e(uM,nG),e(nG,ocr),e(uM,rcr),e(V,tcr),e(V,pM),e(pM,Kue),e(Kue,acr),e(pM,scr),e(pM,lG),e(lG,ncr),e(pM,lcr),e(V,icr),e(V,_M),e(_M,Zue),e(Zue,dcr),e(_M,ccr),e(_M,iG),e(iG,mcr),e(_M,fcr),e(V,gcr),e(V,bM),e(bM,epe),e(epe,hcr),e(bM,ucr),e(bM,dG),e(dG,pcr),e(bM,_cr),e(V,bcr),e(V,vM),e(vM,ope),e(ope,vcr),e(vM,Tcr),e(vM,cG),e(cG,Fcr),e(vM,Ccr),e(V,Mcr),e(V,TM),e(TM,rpe),e(rpe,Ecr),e(TM,ycr),e(TM,mG),e(mG,wcr),e(TM,Acr),e(V,Lcr),e(V,FM),e(FM,tpe),e(tpe,Bcr),e(FM,xcr),e(FM,fG),e(fG,kcr),e(FM,Rcr),e(V,Scr),e(V,CM),e(CM,ape),e(ape,Pcr),e(CM,$cr),e(CM,gG),e(gG,Icr),e(CM,jcr),e(V,Dcr),e(V,MM),e(MM,spe),e(spe,Ncr),e(MM,qcr),e(MM,hG),e(hG,Ocr),e(MM,Gcr),e(V,Xcr),e(V,EM),e(EM,npe),e(npe,Vcr),e(EM,zcr),e(EM,uG),e(uG,Wcr),e(EM,Qcr),e(V,Hcr),e(V,yM),e(yM,lpe),e(lpe,Ucr),e(yM,Jcr),e(yM,pG),e(pG,Ycr),e(yM,Kcr),e(V,Zcr),e(V,wM),e(wM,ipe),e(ipe,emr),e(wM,omr),e(wM,_G),e(_G,rmr),e(wM,tmr),e(V,amr),e(V,AM),e(AM,dpe),e(dpe,smr),e(AM,nmr),e(AM,bG),e(bG,lmr),e(AM,imr),e(V,dmr),e(V,LM),e(LM,cpe),e(cpe,cmr),e(LM,mmr),e(LM,vG),e(vG,fmr),e(LM,gmr),e(V,hmr),e(V,BM),e(BM,mpe),e(mpe,umr),e(BM,pmr),e(BM,TG),e(TG,_mr),e(BM,bmr),e(V,vmr),e(V,xM),e(xM,fpe),e(fpe,Tmr),e(xM,Fmr),e(xM,FG),e(FG,Cmr),e(xM,Mmr),e(To,Emr),e(To,gpe),e(gpe,ymr),e(To,wmr),g(C0,To,null),b(d,Fke,_),b(d,Pc,_),e(Pc,kM),e(kM,hpe),g(M0,hpe,null),e(Pc,Amr),e(Pc,upe),e(upe,Lmr),b(d,Cke,_),b(d,wr,_),g(E0,wr,null),e(wr,Bmr),e(wr,$c),e($c,xmr),e($c,ppe),e(ppe,kmr),e($c,Rmr),e($c,_pe),e(_pe,Smr),e($c,Pmr),e(wr,$mr),e(wr,y0),e(y0,Imr),e(y0,bpe),e(bpe,jmr),e(y0,Dmr),e(wr,Nmr),e(wr,Tt),g(w0,Tt,null),e(Tt,qmr),e(Tt,vpe),e(vpe,Omr),e(Tt,Gmr),e(Tt,Ic),e(Ic,Xmr),e(Ic,Tpe),e(Tpe,Vmr),e(Ic,zmr),e(Ic,Fpe),e(Fpe,Wmr),e(Ic,Qmr),e(Tt,Hmr),e(Tt,Cpe),e(Cpe,Umr),e(Tt,Jmr),g(A0,Tt,null),e(wr,Ymr),e(wr,Fo),g(L0,Fo,null),e(Fo,Kmr),e(Fo,Mpe),e(Mpe,Zmr),e(Fo,efr),e(Fo,Cs),e(Cs,ofr),e(Cs,Epe),e(Epe,rfr),e(Cs,tfr),e(Cs,ype),e(ype,afr),e(Cs,sfr),e(Cs,wpe),e(wpe,nfr),e(Cs,lfr),e(Fo,ifr),e(Fo,te),e(te,RM),e(RM,Ape),e(Ape,dfr),e(RM,cfr),e(RM,CG),e(CG,mfr),e(RM,ffr),e(te,gfr),e(te,SM),e(SM,Lpe),e(Lpe,hfr),e(SM,ufr),e(SM,MG),e(MG,pfr),e(SM,_fr),e(te,bfr),e(te,PM),e(PM,Bpe),e(Bpe,vfr),e(PM,Tfr),e(PM,EG),e(EG,Ffr),e(PM,Cfr),e(te,Mfr),e(te,$M),e($M,xpe),e(xpe,Efr),e($M,yfr),e($M,yG),e(yG,wfr),e($M,Afr),e(te,Lfr),e(te,IM),e(IM,kpe),e(kpe,Bfr),e(IM,xfr),e(IM,wG),e(wG,kfr),e(IM,Rfr),e(te,Sfr),e(te,jM),e(jM,Rpe),e(Rpe,Pfr),e(jM,$fr),e(jM,AG),e(AG,Ifr),e(jM,jfr),e(te,Dfr),e(te,DM),e(DM,Spe),e(Spe,Nfr),e(DM,qfr),e(DM,LG),e(LG,Ofr),e(DM,Gfr),e(te,Xfr),e(te,NM),e(NM,Ppe),e(Ppe,Vfr),e(NM,zfr),e(NM,BG),e(BG,Wfr),e(NM,Qfr),e(te,Hfr),e(te,qM),e(qM,$pe),e($pe,Ufr),e(qM,Jfr),e(qM,xG),e(xG,Yfr),e(qM,Kfr),e(te,Zfr),e(te,OM),e(OM,Ipe),e(Ipe,egr),e(OM,ogr),e(OM,kG),e(kG,rgr),e(OM,tgr),e(te,agr),e(te,GM),e(GM,jpe),e(jpe,sgr),e(GM,ngr),e(GM,RG),e(RG,lgr),e(GM,igr),e(te,dgr),e(te,XM),e(XM,Dpe),e(Dpe,cgr),e(XM,mgr),e(XM,SG),e(SG,fgr),e(XM,ggr),e(te,hgr),e(te,VM),e(VM,Npe),e(Npe,ugr),e(VM,pgr),e(VM,PG),e(PG,_gr),e(VM,bgr),e(te,vgr),e(te,zM),e(zM,qpe),e(qpe,Tgr),e(zM,Fgr),e(zM,$G),e($G,Cgr),e(zM,Mgr),e(te,Egr),e(te,WM),e(WM,Ope),e(Ope,ygr),e(WM,wgr),e(WM,IG),e(IG,Agr),e(WM,Lgr),e(te,Bgr),e(te,QM),e(QM,Gpe),e(Gpe,xgr),e(QM,kgr),e(QM,jG),e(jG,Rgr),e(QM,Sgr),e(te,Pgr),e(te,HM),e(HM,Xpe),e(Xpe,$gr),e(HM,Igr),e(HM,DG),e(DG,jgr),e(HM,Dgr),e(Fo,Ngr),e(Fo,Vpe),e(Vpe,qgr),e(Fo,Ogr),g(B0,Fo,null),b(d,Mke,_),b(d,jc,_),e(jc,UM),e(UM,zpe),g(x0,zpe,null),e(jc,Ggr),e(jc,Wpe),e(Wpe,Xgr),b(d,Eke,_),b(d,Ar,_),g(k0,Ar,null),e(Ar,Vgr),e(Ar,Dc),e(Dc,zgr),e(Dc,Qpe),e(Qpe,Wgr),e(Dc,Qgr),e(Dc,Hpe),e(Hpe,Hgr),e(Dc,Ugr),e(Ar,Jgr),e(Ar,R0),e(R0,Ygr),e(R0,Upe),e(Upe,Kgr),e(R0,Zgr),e(Ar,ehr),e(Ar,Ft),g(S0,Ft,null),e(Ft,ohr),e(Ft,Jpe),e(Jpe,rhr),e(Ft,thr),e(Ft,Nc),e(Nc,ahr),e(Nc,Ype),e(Ype,shr),e(Nc,nhr),e(Nc,Kpe),e(Kpe,lhr),e(Nc,ihr),e(Ft,dhr),e(Ft,Zpe),e(Zpe,chr),e(Ft,mhr),g(P0,Ft,null),e(Ar,fhr),e(Ar,Co),g($0,Co,null),e(Co,ghr),e(Co,e_e),e(e_e,hhr),e(Co,uhr),e(Co,Ms),e(Ms,phr),e(Ms,o_e),e(o_e,_hr),e(Ms,bhr),e(Ms,r_e),e(r_e,vhr),e(Ms,Thr),e(Ms,t_e),e(t_e,Fhr),e(Ms,Chr),e(Co,Mhr),e(Co,a_e),e(a_e,JM),e(JM,s_e),e(s_e,Ehr),e(JM,yhr),e(JM,NG),e(NG,whr),e(JM,Ahr),e(Co,Lhr),e(Co,n_e),e(n_e,Bhr),e(Co,xhr),g(I0,Co,null),b(d,yke,_),b(d,qc,_),e(qc,YM),e(YM,l_e),g(j0,l_e,null),e(qc,khr),e(qc,i_e),e(i_e,Rhr),b(d,wke,_),b(d,Lr,_),g(D0,Lr,null),e(Lr,Shr),e(Lr,Oc),e(Oc,Phr),e(Oc,d_e),e(d_e,$hr),e(Oc,Ihr),e(Oc,c_e),e(c_e,jhr),e(Oc,Dhr),e(Lr,Nhr),e(Lr,N0),e(N0,qhr),e(N0,m_e),e(m_e,Ohr),e(N0,Ghr),e(Lr,Xhr),e(Lr,Ct),g(q0,Ct,null),e(Ct,Vhr),e(Ct,f_e),e(f_e,zhr),e(Ct,Whr),e(Ct,Gc),e(Gc,Qhr),e(Gc,g_e),e(g_e,Hhr),e(Gc,Uhr),e(Gc,h_e),e(h_e,Jhr),e(Gc,Yhr),e(Ct,Khr),e(Ct,u_e),e(u_e,Zhr),e(Ct,eur),g(O0,Ct,null),e(Lr,our),e(Lr,Mo),g(G0,Mo,null),e(Mo,rur),e(Mo,p_e),e(p_e,tur),e(Mo,aur),e(Mo,Es),e(Es,sur),e(Es,__e),e(__e,nur),e(Es,lur),e(Es,b_e),e(b_e,iur),e(Es,dur),e(Es,v_e),e(v_e,cur),e(Es,mur),e(Mo,fur),e(Mo,K),e(K,KM),e(KM,T_e),e(T_e,gur),e(KM,hur),e(KM,qG),e(qG,uur),e(KM,pur),e(K,_ur),e(K,ZM),e(ZM,F_e),e(F_e,bur),e(ZM,vur),e(ZM,OG),e(OG,Tur),e(ZM,Fur),e(K,Cur),e(K,e4),e(e4,C_e),e(C_e,Mur),e(e4,Eur),e(e4,GG),e(GG,yur),e(e4,wur),e(K,Aur),e(K,o4),e(o4,M_e),e(M_e,Lur),e(o4,Bur),e(o4,XG),e(XG,xur),e(o4,kur),e(K,Rur),e(K,r4),e(r4,E_e),e(E_e,Sur),e(r4,Pur),e(r4,VG),e(VG,$ur),e(r4,Iur),e(K,jur),e(K,t4),e(t4,y_e),e(y_e,Dur),e(t4,Nur),e(t4,zG),e(zG,qur),e(t4,Our),e(K,Gur),e(K,a4),e(a4,w_e),e(w_e,Xur),e(a4,Vur),e(a4,WG),e(WG,zur),e(a4,Wur),e(K,Qur),e(K,s4),e(s4,A_e),e(A_e,Hur),e(s4,Uur),e(s4,QG),e(QG,Jur),e(s4,Yur),e(K,Kur),e(K,n4),e(n4,L_e),e(L_e,Zur),e(n4,epr),e(n4,HG),e(HG,opr),e(n4,rpr),e(K,tpr),e(K,l4),e(l4,B_e),e(B_e,apr),e(l4,spr),e(l4,UG),e(UG,npr),e(l4,lpr),e(K,ipr),e(K,i4),e(i4,x_e),e(x_e,dpr),e(i4,cpr),e(i4,JG),e(JG,mpr),e(i4,fpr),e(K,gpr),e(K,d4),e(d4,k_e),e(k_e,hpr),e(d4,upr),e(d4,YG),e(YG,ppr),e(d4,_pr),e(K,bpr),e(K,c4),e(c4,R_e),e(R_e,vpr),e(c4,Tpr),e(c4,KG),e(KG,Fpr),e(c4,Cpr),e(K,Mpr),e(K,m4),e(m4,S_e),e(S_e,Epr),e(m4,ypr),e(m4,ZG),e(ZG,wpr),e(m4,Apr),e(K,Lpr),e(K,f4),e(f4,P_e),e(P_e,Bpr),e(f4,xpr),e(f4,eX),e(eX,kpr),e(f4,Rpr),e(K,Spr),e(K,g4),e(g4,$_e),e($_e,Ppr),e(g4,$pr),e(g4,oX),e(oX,Ipr),e(g4,jpr),e(K,Dpr),e(K,h4),e(h4,I_e),e(I_e,Npr),e(h4,qpr),e(h4,rX),e(rX,Opr),e(h4,Gpr),e(K,Xpr),e(K,u4),e(u4,j_e),e(j_e,Vpr),e(u4,zpr),e(u4,tX),e(tX,Wpr),e(u4,Qpr),e(K,Hpr),e(K,p4),e(p4,D_e),e(D_e,Upr),e(p4,Jpr),e(p4,aX),e(aX,Ypr),e(p4,Kpr),e(K,Zpr),e(K,_4),e(_4,N_e),e(N_e,e_r),e(_4,o_r),e(_4,sX),e(sX,r_r),e(_4,t_r),e(Mo,a_r),e(Mo,q_e),e(q_e,s_r),e(Mo,n_r),g(X0,Mo,null),b(d,Ake,_),b(d,Xc,_),e(Xc,b4),e(b4,O_e),g(V0,O_e,null),e(Xc,l_r),e(Xc,G_e),e(G_e,i_r),b(d,Lke,_),b(d,Br,_),g(z0,Br,null),e(Br,d_r),e(Br,Vc),e(Vc,c_r),e(Vc,X_e),e(X_e,m_r),e(Vc,f_r),e(Vc,V_e),e(V_e,g_r),e(Vc,h_r),e(Br,u_r),e(Br,W0),e(W0,p_r),e(W0,z_e),e(z_e,__r),e(W0,b_r),e(Br,v_r),e(Br,Mt),g(Q0,Mt,null),e(Mt,T_r),e(Mt,W_e),e(W_e,F_r),e(Mt,C_r),e(Mt,zc),e(zc,M_r),e(zc,Q_e),e(Q_e,E_r),e(zc,y_r),e(zc,H_e),e(H_e,w_r),e(zc,A_r),e(Mt,L_r),e(Mt,U_e),e(U_e,B_r),e(Mt,x_r),g(H0,Mt,null),e(Br,k_r),e(Br,Eo),g(U0,Eo,null),e(Eo,R_r),e(Eo,J_e),e(J_e,S_r),e(Eo,P_r),e(Eo,ys),e(ys,$_r),e(ys,Y_e),e(Y_e,I_r),e(ys,j_r),e(ys,K_e),e(K_e,D_r),e(ys,N_r),e(ys,Z_e),e(Z_e,q_r),e(ys,O_r),e(Eo,G_r),e(Eo,Z),e(Z,v4),e(v4,ebe),e(ebe,X_r),e(v4,V_r),e(v4,nX),e(nX,z_r),e(v4,W_r),e(Z,Q_r),e(Z,T4),e(T4,obe),e(obe,H_r),e(T4,U_r),e(T4,lX),e(lX,J_r),e(T4,Y_r),e(Z,K_r),e(Z,F4),e(F4,rbe),e(rbe,Z_r),e(F4,ebr),e(F4,iX),e(iX,obr),e(F4,rbr),e(Z,tbr),e(Z,C4),e(C4,tbe),e(tbe,abr),e(C4,sbr),e(C4,dX),e(dX,nbr),e(C4,lbr),e(Z,ibr),e(Z,M4),e(M4,abe),e(abe,dbr),e(M4,cbr),e(M4,cX),e(cX,mbr),e(M4,fbr),e(Z,gbr),e(Z,E4),e(E4,sbe),e(sbe,hbr),e(E4,ubr),e(E4,mX),e(mX,pbr),e(E4,_br),e(Z,bbr),e(Z,y4),e(y4,nbe),e(nbe,vbr),e(y4,Tbr),e(y4,fX),e(fX,Fbr),e(y4,Cbr),e(Z,Mbr),e(Z,w4),e(w4,lbe),e(lbe,Ebr),e(w4,ybr),e(w4,gX),e(gX,wbr),e(w4,Abr),e(Z,Lbr),e(Z,A4),e(A4,ibe),e(ibe,Bbr),e(A4,xbr),e(A4,hX),e(hX,kbr),e(A4,Rbr),e(Z,Sbr),e(Z,L4),e(L4,dbe),e(dbe,Pbr),e(L4,$br),e(L4,uX),e(uX,Ibr),e(L4,jbr),e(Z,Dbr),e(Z,B4),e(B4,cbe),e(cbe,Nbr),e(B4,qbr),e(B4,pX),e(pX,Obr),e(B4,Gbr),e(Z,Xbr),e(Z,x4),e(x4,mbe),e(mbe,Vbr),e(x4,zbr),e(x4,_X),e(_X,Wbr),e(x4,Qbr),e(Z,Hbr),e(Z,k4),e(k4,fbe),e(fbe,Ubr),e(k4,Jbr),e(k4,bX),e(bX,Ybr),e(k4,Kbr),e(Z,Zbr),e(Z,R4),e(R4,gbe),e(gbe,e2r),e(R4,o2r),e(R4,vX),e(vX,r2r),e(R4,t2r),e(Z,a2r),e(Z,S4),e(S4,hbe),e(hbe,s2r),e(S4,n2r),e(S4,TX),e(TX,l2r),e(S4,i2r),e(Z,d2r),e(Z,P4),e(P4,ube),e(ube,c2r),e(P4,m2r),e(P4,FX),e(FX,f2r),e(P4,g2r),e(Z,h2r),e(Z,$4),e($4,pbe),e(pbe,u2r),e($4,p2r),e($4,CX),e(CX,_2r),e($4,b2r),e(Z,v2r),e(Z,I4),e(I4,_be),e(_be,T2r),e(I4,F2r),e(I4,MX),e(MX,C2r),e(I4,M2r),e(Z,E2r),e(Z,j4),e(j4,bbe),e(bbe,y2r),e(j4,w2r),e(j4,EX),e(EX,A2r),e(j4,L2r),e(Eo,B2r),e(Eo,vbe),e(vbe,x2r),e(Eo,k2r),g(J0,Eo,null),b(d,Bke,_),b(d,Wc,_),e(Wc,D4),e(D4,Tbe),g(Y0,Tbe,null),e(Wc,R2r),e(Wc,Fbe),e(Fbe,S2r),b(d,xke,_),b(d,xr,_),g(K0,xr,null),e(xr,P2r),e(xr,Qc),e(Qc,$2r),e(Qc,Cbe),e(Cbe,I2r),e(Qc,j2r),e(Qc,Mbe),e(Mbe,D2r),e(Qc,N2r),e(xr,q2r),e(xr,Z0),e(Z0,O2r),e(Z0,Ebe),e(Ebe,G2r),e(Z0,X2r),e(xr,V2r),e(xr,Et),g(eL,Et,null),e(Et,z2r),e(Et,ybe),e(ybe,W2r),e(Et,Q2r),e(Et,Hc),e(Hc,H2r),e(Hc,wbe),e(wbe,U2r),e(Hc,J2r),e(Hc,Abe),e(Abe,Y2r),e(Hc,K2r),e(Et,Z2r),e(Et,Lbe),e(Lbe,evr),e(Et,ovr),g(oL,Et,null),e(xr,rvr),e(xr,yo),g(rL,yo,null),e(yo,tvr),e(yo,Bbe),e(Bbe,avr),e(yo,svr),e(yo,ws),e(ws,nvr),e(ws,xbe),e(xbe,lvr),e(ws,ivr),e(ws,kbe),e(kbe,dvr),e(ws,cvr),e(ws,Rbe),e(Rbe,mvr),e(ws,fvr),e(yo,gvr),e(yo,Sbe),e(Sbe,N4),e(N4,Pbe),e(Pbe,hvr),e(N4,uvr),e(N4,yX),e(yX,pvr),e(N4,_vr),e(yo,bvr),e(yo,$be),e($be,vvr),e(yo,Tvr),g(tL,yo,null),b(d,kke,_),b(d,Uc,_),e(Uc,q4),e(q4,Ibe),g(aL,Ibe,null),e(Uc,Fvr),e(Uc,jbe),e(jbe,Cvr),b(d,Rke,_),b(d,kr,_),g(sL,kr,null),e(kr,Mvr),e(kr,Jc),e(Jc,Evr),e(Jc,Dbe),e(Dbe,yvr),e(Jc,wvr),e(Jc,Nbe),e(Nbe,Avr),e(Jc,Lvr),e(kr,Bvr),e(kr,nL),e(nL,xvr),e(nL,qbe),e(qbe,kvr),e(nL,Rvr),e(kr,Svr),e(kr,yt),g(lL,yt,null),e(yt,Pvr),e(yt,Obe),e(Obe,$vr),e(yt,Ivr),e(yt,Yc),e(Yc,jvr),e(Yc,Gbe),e(Gbe,Dvr),e(Yc,Nvr),e(Yc,Xbe),e(Xbe,qvr),e(Yc,Ovr),e(yt,Gvr),e(yt,Vbe),e(Vbe,Xvr),e(yt,Vvr),g(iL,yt,null),e(kr,zvr),e(kr,wo),g(dL,wo,null),e(wo,Wvr),e(wo,zbe),e(zbe,Qvr),e(wo,Hvr),e(wo,As),e(As,Uvr),e(As,Wbe),e(Wbe,Jvr),e(As,Yvr),e(As,Qbe),e(Qbe,Kvr),e(As,Zvr),e(As,Hbe),e(Hbe,eTr),e(As,oTr),e(wo,rTr),e(wo,Ube),e(Ube,O4),e(O4,Jbe),e(Jbe,tTr),e(O4,aTr),e(O4,wX),e(wX,sTr),e(O4,nTr),e(wo,lTr),e(wo,Ybe),e(Ybe,iTr),e(wo,dTr),g(cL,wo,null),b(d,Ske,_),b(d,Kc,_),e(Kc,G4),e(G4,Kbe),g(mL,Kbe,null),e(Kc,cTr),e(Kc,Zbe),e(Zbe,mTr),b(d,Pke,_),b(d,Rr,_),g(fL,Rr,null),e(Rr,fTr),e(Rr,Zc),e(Zc,gTr),e(Zc,e2e),e(e2e,hTr),e(Zc,uTr),e(Zc,o2e),e(o2e,pTr),e(Zc,_Tr),e(Rr,bTr),e(Rr,gL),e(gL,vTr),e(gL,r2e),e(r2e,TTr),e(gL,FTr),e(Rr,CTr),e(Rr,wt),g(hL,wt,null),e(wt,MTr),e(wt,t2e),e(t2e,ETr),e(wt,yTr),e(wt,em),e(em,wTr),e(em,a2e),e(a2e,ATr),e(em,LTr),e(em,s2e),e(s2e,BTr),e(em,xTr),e(wt,kTr),e(wt,n2e),e(n2e,RTr),e(wt,STr),g(uL,wt,null),e(Rr,PTr),e(Rr,Ao),g(pL,Ao,null),e(Ao,$Tr),e(Ao,l2e),e(l2e,ITr),e(Ao,jTr),e(Ao,Ls),e(Ls,DTr),e(Ls,i2e),e(i2e,NTr),e(Ls,qTr),e(Ls,d2e),e(d2e,OTr),e(Ls,GTr),e(Ls,c2e),e(c2e,XTr),e(Ls,VTr),e(Ao,zTr),e(Ao,z),e(z,X4),e(X4,m2e),e(m2e,WTr),e(X4,QTr),e(X4,AX),e(AX,HTr),e(X4,UTr),e(z,JTr),e(z,V4),e(V4,f2e),e(f2e,YTr),e(V4,KTr),e(V4,LX),e(LX,ZTr),e(V4,e1r),e(z,o1r),e(z,z4),e(z4,g2e),e(g2e,r1r),e(z4,t1r),e(z4,BX),e(BX,a1r),e(z4,s1r),e(z,n1r),e(z,W4),e(W4,h2e),e(h2e,l1r),e(W4,i1r),e(W4,xX),e(xX,d1r),e(W4,c1r),e(z,m1r),e(z,Q4),e(Q4,u2e),e(u2e,f1r),e(Q4,g1r),e(Q4,kX),e(kX,h1r),e(Q4,u1r),e(z,p1r),e(z,H4),e(H4,p2e),e(p2e,_1r),e(H4,b1r),e(H4,RX),e(RX,v1r),e(H4,T1r),e(z,F1r),e(z,U4),e(U4,_2e),e(_2e,C1r),e(U4,M1r),e(U4,SX),e(SX,E1r),e(U4,y1r),e(z,w1r),e(z,J4),e(J4,b2e),e(b2e,A1r),e(J4,L1r),e(J4,PX),e(PX,B1r),e(J4,x1r),e(z,k1r),e(z,Y4),e(Y4,v2e),e(v2e,R1r),e(Y4,S1r),e(Y4,$X),e($X,P1r),e(Y4,$1r),e(z,I1r),e(z,K4),e(K4,T2e),e(T2e,j1r),e(K4,D1r),e(K4,IX),e(IX,N1r),e(K4,q1r),e(z,O1r),e(z,Z4),e(Z4,F2e),e(F2e,G1r),e(Z4,X1r),e(Z4,jX),e(jX,V1r),e(Z4,z1r),e(z,W1r),e(z,eE),e(eE,C2e),e(C2e,Q1r),e(eE,H1r),e(eE,DX),e(DX,U1r),e(eE,J1r),e(z,Y1r),e(z,oE),e(oE,M2e),e(M2e,K1r),e(oE,Z1r),e(oE,NX),e(NX,eFr),e(oE,oFr),e(z,rFr),e(z,rE),e(rE,E2e),e(E2e,tFr),e(rE,aFr),e(rE,qX),e(qX,sFr),e(rE,nFr),e(z,lFr),e(z,tE),e(tE,y2e),e(y2e,iFr),e(tE,dFr),e(tE,OX),e(OX,cFr),e(tE,mFr),e(z,fFr),e(z,aE),e(aE,w2e),e(w2e,gFr),e(aE,hFr),e(aE,GX),e(GX,uFr),e(aE,pFr),e(z,_Fr),e(z,sE),e(sE,A2e),e(A2e,bFr),e(sE,vFr),e(sE,XX),e(XX,TFr),e(sE,FFr),e(z,CFr),e(z,nE),e(nE,L2e),e(L2e,MFr),e(nE,EFr),e(nE,VX),e(VX,yFr),e(nE,wFr),e(z,AFr),e(z,lE),e(lE,B2e),e(B2e,LFr),e(lE,BFr),e(lE,zX),e(zX,xFr),e(lE,kFr),e(z,RFr),e(z,iE),e(iE,x2e),e(x2e,SFr),e(iE,PFr),e(iE,WX),e(WX,$Fr),e(iE,IFr),e(z,jFr),e(z,dE),e(dE,k2e),e(k2e,DFr),e(dE,NFr),e(dE,QX),e(QX,qFr),e(dE,OFr),e(z,GFr),e(z,cE),e(cE,R2e),e(R2e,XFr),e(cE,VFr),e(cE,HX),e(HX,zFr),e(cE,WFr),e(z,QFr),e(z,mE),e(mE,S2e),e(S2e,HFr),e(mE,UFr),e(mE,UX),e(UX,JFr),e(mE,YFr),e(z,KFr),e(z,fE),e(fE,P2e),e(P2e,ZFr),e(fE,eCr),e(fE,JX),e(JX,oCr),e(fE,rCr),e(z,tCr),e(z,gE),e(gE,$2e),e($2e,aCr),e(gE,sCr),e(gE,YX),e(YX,nCr),e(gE,lCr),e(Ao,iCr),e(Ao,I2e),e(I2e,dCr),e(Ao,cCr),g(_L,Ao,null),b(d,$ke,_),b(d,om,_),e(om,hE),e(hE,j2e),g(bL,j2e,null),e(om,mCr),e(om,D2e),e(D2e,fCr),b(d,Ike,_),b(d,Sr,_),g(vL,Sr,null),e(Sr,gCr),e(Sr,rm),e(rm,hCr),e(rm,N2e),e(N2e,uCr),e(rm,pCr),e(rm,q2e),e(q2e,_Cr),e(rm,bCr),e(Sr,vCr),e(Sr,TL),e(TL,TCr),e(TL,O2e),e(O2e,FCr),e(TL,CCr),e(Sr,MCr),e(Sr,At),g(FL,At,null),e(At,ECr),e(At,G2e),e(G2e,yCr),e(At,wCr),e(At,tm),e(tm,ACr),e(tm,X2e),e(X2e,LCr),e(tm,BCr),e(tm,V2e),e(V2e,xCr),e(tm,kCr),e(At,RCr),e(At,z2e),e(z2e,SCr),e(At,PCr),g(CL,At,null),e(Sr,$Cr),e(Sr,Lo),g(ML,Lo,null),e(Lo,ICr),e(Lo,W2e),e(W2e,jCr),e(Lo,DCr),e(Lo,Bs),e(Bs,NCr),e(Bs,Q2e),e(Q2e,qCr),e(Bs,OCr),e(Bs,H2e),e(H2e,GCr),e(Bs,XCr),e(Bs,U2e),e(U2e,VCr),e(Bs,zCr),e(Lo,WCr),e(Lo,ca),e(ca,uE),e(uE,J2e),e(J2e,QCr),e(uE,HCr),e(uE,KX),e(KX,UCr),e(uE,JCr),e(ca,YCr),e(ca,pE),e(pE,Y2e),e(Y2e,KCr),e(pE,ZCr),e(pE,ZX),e(ZX,eMr),e(pE,oMr),e(ca,rMr),e(ca,_E),e(_E,K2e),e(K2e,tMr),e(_E,aMr),e(_E,eV),e(eV,sMr),e(_E,nMr),e(ca,lMr),e(ca,bE),e(bE,Z2e),e(Z2e,iMr),e(bE,dMr),e(bE,oV),e(oV,cMr),e(bE,mMr),e(ca,fMr),e(ca,vE),e(vE,eve),e(eve,gMr),e(vE,hMr),e(vE,rV),e(rV,uMr),e(vE,pMr),e(Lo,_Mr),e(Lo,ove),e(ove,bMr),e(Lo,vMr),g(EL,Lo,null),b(d,jke,_),b(d,am,_),e(am,TE),e(TE,rve),g(yL,rve,null),e(am,TMr),e(am,tve),e(tve,FMr),b(d,Dke,_),b(d,Pr,_),g(wL,Pr,null),e(Pr,CMr),e(Pr,sm),e(sm,MMr),e(sm,ave),e(ave,EMr),e(sm,yMr),e(sm,sve),e(sve,wMr),e(sm,AMr),e(Pr,LMr),e(Pr,AL),e(AL,BMr),e(AL,nve),e(nve,xMr),e(AL,kMr),e(Pr,RMr),e(Pr,Lt),g(LL,Lt,null),e(Lt,SMr),e(Lt,lve),e(lve,PMr),e(Lt,$Mr),e(Lt,nm),e(nm,IMr),e(nm,ive),e(ive,jMr),e(nm,DMr),e(nm,dve),e(dve,NMr),e(nm,qMr),e(Lt,OMr),e(Lt,cve),e(cve,GMr),e(Lt,XMr),g(BL,Lt,null),e(Pr,VMr),e(Pr,Bo),g(xL,Bo,null),e(Bo,zMr),e(Bo,mve),e(mve,WMr),e(Bo,QMr),e(Bo,xs),e(xs,HMr),e(xs,fve),e(fve,UMr),e(xs,JMr),e(xs,gve),e(gve,YMr),e(xs,KMr),e(xs,hve),e(hve,ZMr),e(xs,e4r),e(Bo,o4r),e(Bo,ce),e(ce,FE),e(FE,uve),e(uve,r4r),e(FE,t4r),e(FE,tV),e(tV,a4r),e(FE,s4r),e(ce,n4r),e(ce,CE),e(CE,pve),e(pve,l4r),e(CE,i4r),e(CE,aV),e(aV,d4r),e(CE,c4r),e(ce,m4r),e(ce,ME),e(ME,_ve),e(_ve,f4r),e(ME,g4r),e(ME,sV),e(sV,h4r),e(ME,u4r),e(ce,p4r),e(ce,EE),e(EE,bve),e(bve,_4r),e(EE,b4r),e(EE,nV),e(nV,v4r),e(EE,T4r),e(ce,F4r),e(ce,yE),e(yE,vve),e(vve,C4r),e(yE,M4r),e(yE,lV),e(lV,E4r),e(yE,y4r),e(ce,w4r),e(ce,wE),e(wE,Tve),e(Tve,A4r),e(wE,L4r),e(wE,iV),e(iV,B4r),e(wE,x4r),e(ce,k4r),e(ce,AE),e(AE,Fve),e(Fve,R4r),e(AE,S4r),e(AE,dV),e(dV,P4r),e(AE,$4r),e(ce,I4r),e(ce,LE),e(LE,Cve),e(Cve,j4r),e(LE,D4r),e(LE,cV),e(cV,N4r),e(LE,q4r),e(ce,O4r),e(ce,BE),e(BE,Mve),e(Mve,G4r),e(BE,X4r),e(BE,mV),e(mV,V4r),e(BE,z4r),e(ce,W4r),e(ce,xE),e(xE,Eve),e(Eve,Q4r),e(xE,H4r),e(xE,fV),e(fV,U4r),e(xE,J4r),e(ce,Y4r),e(ce,kE),e(kE,yve),e(yve,K4r),e(kE,Z4r),e(kE,gV),e(gV,eEr),e(kE,oEr),e(ce,rEr),e(ce,RE),e(RE,wve),e(wve,tEr),e(RE,aEr),e(RE,hV),e(hV,sEr),e(RE,nEr),e(Bo,lEr),e(Bo,Ave),e(Ave,iEr),e(Bo,dEr),g(kL,Bo,null),b(d,Nke,_),b(d,lm,_),e(lm,SE),e(SE,Lve),g(RL,Lve,null),e(lm,cEr),e(lm,Bve),e(Bve,mEr),b(d,qke,_),b(d,$r,_),g(SL,$r,null),e($r,fEr),e($r,im),e(im,gEr),e(im,xve),e(xve,hEr),e(im,uEr),e(im,kve),e(kve,pEr),e(im,_Er),e($r,bEr),e($r,PL),e(PL,vEr),e(PL,Rve),e(Rve,TEr),e(PL,FEr),e($r,CEr),e($r,Bt),g($L,Bt,null),e(Bt,MEr),e(Bt,Sve),e(Sve,EEr),e(Bt,yEr),e(Bt,dm),e(dm,wEr),e(dm,Pve),e(Pve,AEr),e(dm,LEr),e(dm,$ve),e($ve,BEr),e(dm,xEr),e(Bt,kEr),e(Bt,Ive),e(Ive,REr),e(Bt,SEr),g(IL,Bt,null),e($r,PEr),e($r,xo),g(jL,xo,null),e(xo,$Er),e(xo,jve),e(jve,IEr),e(xo,jEr),e(xo,ks),e(ks,DEr),e(ks,Dve),e(Dve,NEr),e(ks,qEr),e(ks,Nve),e(Nve,OEr),e(ks,GEr),e(ks,qve),e(qve,XEr),e(ks,VEr),e(xo,zEr),e(xo,_e),e(_e,PE),e(PE,Ove),e(Ove,WEr),e(PE,QEr),e(PE,uV),e(uV,HEr),e(PE,UEr),e(_e,JEr),e(_e,$E),e($E,Gve),e(Gve,YEr),e($E,KEr),e($E,pV),e(pV,ZEr),e($E,e3r),e(_e,o3r),e(_e,IE),e(IE,Xve),e(Xve,r3r),e(IE,t3r),e(IE,_V),e(_V,a3r),e(IE,s3r),e(_e,n3r),e(_e,jE),e(jE,Vve),e(Vve,l3r),e(jE,i3r),e(jE,bV),e(bV,d3r),e(jE,c3r),e(_e,m3r),e(_e,DE),e(DE,zve),e(zve,f3r),e(DE,g3r),e(DE,vV),e(vV,h3r),e(DE,u3r),e(_e,p3r),e(_e,NE),e(NE,Wve),e(Wve,_3r),e(NE,b3r),e(NE,TV),e(TV,v3r),e(NE,T3r),e(_e,F3r),e(_e,qE),e(qE,Qve),e(Qve,C3r),e(qE,M3r),e(qE,FV),e(FV,E3r),e(qE,y3r),e(_e,w3r),e(_e,OE),e(OE,Hve),e(Hve,A3r),e(OE,L3r),e(OE,CV),e(CV,B3r),e(OE,x3r),e(_e,k3r),e(_e,GE),e(GE,Uve),e(Uve,R3r),e(GE,S3r),e(GE,MV),e(MV,P3r),e(GE,$3r),e(_e,I3r),e(_e,XE),e(XE,Jve),e(Jve,j3r),e(XE,D3r),e(XE,EV),e(EV,N3r),e(XE,q3r),e(xo,O3r),e(xo,Yve),e(Yve,G3r),e(xo,X3r),g(DL,xo,null),b(d,Oke,_),b(d,cm,_),e(cm,VE),e(VE,Kve),g(NL,Kve,null),e(cm,V3r),e(cm,Zve),e(Zve,z3r),b(d,Gke,_),b(d,Ir,_),g(qL,Ir,null),e(Ir,W3r),e(Ir,mm),e(mm,Q3r),e(mm,eTe),e(eTe,H3r),e(mm,U3r),e(mm,oTe),e(oTe,J3r),e(mm,Y3r),e(Ir,K3r),e(Ir,OL),e(OL,Z3r),e(OL,rTe),e(rTe,e5r),e(OL,o5r),e(Ir,r5r),e(Ir,xt),g(GL,xt,null),e(xt,t5r),e(xt,tTe),e(tTe,a5r),e(xt,s5r),e(xt,fm),e(fm,n5r),e(fm,aTe),e(aTe,l5r),e(fm,i5r),e(fm,sTe),e(sTe,d5r),e(fm,c5r),e(xt,m5r),e(xt,nTe),e(nTe,f5r),e(xt,g5r),g(XL,xt,null),e(Ir,h5r),e(Ir,ko),g(VL,ko,null),e(ko,u5r),e(ko,lTe),e(lTe,p5r),e(ko,_5r),e(ko,Rs),e(Rs,b5r),e(Rs,iTe),e(iTe,v5r),e(Rs,T5r),e(Rs,dTe),e(dTe,F5r),e(Rs,C5r),e(Rs,cTe),e(cTe,M5r),e(Rs,E5r),e(ko,y5r),e(ko,Ce),e(Ce,zE),e(zE,mTe),e(mTe,w5r),e(zE,A5r),e(zE,yV),e(yV,L5r),e(zE,B5r),e(Ce,x5r),e(Ce,WE),e(WE,fTe),e(fTe,k5r),e(WE,R5r),e(WE,wV),e(wV,S5r),e(WE,P5r),e(Ce,$5r),e(Ce,QE),e(QE,gTe),e(gTe,I5r),e(QE,j5r),e(QE,AV),e(AV,D5r),e(QE,N5r),e(Ce,q5r),e(Ce,HE),e(HE,hTe),e(hTe,O5r),e(HE,G5r),e(HE,LV),e(LV,X5r),e(HE,V5r),e(Ce,z5r),e(Ce,UE),e(UE,uTe),e(uTe,W5r),e(UE,Q5r),e(UE,BV),e(BV,H5r),e(UE,U5r),e(Ce,J5r),e(Ce,JE),e(JE,pTe),e(pTe,Y5r),e(JE,K5r),e(JE,xV),e(xV,Z5r),e(JE,eyr),e(Ce,oyr),e(Ce,YE),e(YE,_Te),e(_Te,ryr),e(YE,tyr),e(YE,kV),e(kV,ayr),e(YE,syr),e(Ce,nyr),e(Ce,KE),e(KE,bTe),e(bTe,lyr),e(KE,iyr),e(KE,RV),e(RV,dyr),e(KE,cyr),e(Ce,myr),e(Ce,ZE),e(ZE,vTe),e(vTe,fyr),e(ZE,gyr),e(ZE,SV),e(SV,hyr),e(ZE,uyr),e(ko,pyr),e(ko,TTe),e(TTe,_yr),e(ko,byr),g(zL,ko,null),b(d,Xke,_),b(d,gm,_),e(gm,e3),e(e3,FTe),g(WL,FTe,null),e(gm,vyr),e(gm,CTe),e(CTe,Tyr),b(d,Vke,_),b(d,jr,_),g(QL,jr,null),e(jr,Fyr),e(jr,hm),e(hm,Cyr),e(hm,MTe),e(MTe,Myr),e(hm,Eyr),e(hm,ETe),e(ETe,yyr),e(hm,wyr),e(jr,Ayr),e(jr,HL),e(HL,Lyr),e(HL,yTe),e(yTe,Byr),e(HL,xyr),e(jr,kyr),e(jr,kt),g(UL,kt,null),e(kt,Ryr),e(kt,wTe),e(wTe,Syr),e(kt,Pyr),e(kt,um),e(um,$yr),e(um,ATe),e(ATe,Iyr),e(um,jyr),e(um,LTe),e(LTe,Dyr),e(um,Nyr),e(kt,qyr),e(kt,BTe),e(BTe,Oyr),e(kt,Gyr),g(JL,kt,null),e(jr,Xyr),e(jr,Ro),g(YL,Ro,null),e(Ro,Vyr),e(Ro,xTe),e(xTe,zyr),e(Ro,Wyr),e(Ro,Ss),e(Ss,Qyr),e(Ss,kTe),e(kTe,Hyr),e(Ss,Uyr),e(Ss,RTe),e(RTe,Jyr),e(Ss,Yyr),e(Ss,STe),e(STe,Kyr),e(Ss,Zyr),e(Ro,ewr),e(Ro,be),e(be,o3),e(o3,PTe),e(PTe,owr),e(o3,rwr),e(o3,PV),e(PV,twr),e(o3,awr),e(be,swr),e(be,r3),e(r3,$Te),e($Te,nwr),e(r3,lwr),e(r3,$V),e($V,iwr),e(r3,dwr),e(be,cwr),e(be,t3),e(t3,ITe),e(ITe,mwr),e(t3,fwr),e(t3,IV),e(IV,gwr),e(t3,hwr),e(be,uwr),e(be,a3),e(a3,jTe),e(jTe,pwr),e(a3,_wr),e(a3,jV),e(jV,bwr),e(a3,vwr),e(be,Twr),e(be,s3),e(s3,DTe),e(DTe,Fwr),e(s3,Cwr),e(s3,DV),e(DV,Mwr),e(s3,Ewr),e(be,ywr),e(be,n3),e(n3,NTe),e(NTe,wwr),e(n3,Awr),e(n3,NV),e(NV,Lwr),e(n3,Bwr),e(be,xwr),e(be,l3),e(l3,qTe),e(qTe,kwr),e(l3,Rwr),e(l3,qV),e(qV,Swr),e(l3,Pwr),e(be,$wr),e(be,i3),e(i3,OTe),e(OTe,Iwr),e(i3,jwr),e(i3,OV),e(OV,Dwr),e(i3,Nwr),e(be,qwr),e(be,d3),e(d3,GTe),e(GTe,Owr),e(d3,Gwr),e(d3,GV),e(GV,Xwr),e(d3,Vwr),e(be,zwr),e(be,c3),e(c3,XTe),e(XTe,Wwr),e(c3,Qwr),e(c3,XV),e(XV,Hwr),e(c3,Uwr),e(Ro,Jwr),e(Ro,VTe),e(VTe,Ywr),e(Ro,Kwr),g(KL,Ro,null),b(d,zke,_),b(d,pm,_),e(pm,m3),e(m3,zTe),g(ZL,zTe,null),e(pm,Zwr),e(pm,WTe),e(WTe,e6r),b(d,Wke,_),b(d,Dr,_),g(e8,Dr,null),e(Dr,o6r),e(Dr,_m),e(_m,r6r),e(_m,QTe),e(QTe,t6r),e(_m,a6r),e(_m,HTe),e(HTe,s6r),e(_m,n6r),e(Dr,l6r),e(Dr,o8),e(o8,i6r),e(o8,UTe),e(UTe,d6r),e(o8,c6r),e(Dr,m6r),e(Dr,Rt),g(r8,Rt,null),e(Rt,f6r),e(Rt,JTe),e(JTe,g6r),e(Rt,h6r),e(Rt,bm),e(bm,u6r),e(bm,YTe),e(YTe,p6r),e(bm,_6r),e(bm,KTe),e(KTe,b6r),e(bm,v6r),e(Rt,T6r),e(Rt,ZTe),e(ZTe,F6r),e(Rt,C6r),g(t8,Rt,null),e(Dr,M6r),e(Dr,So),g(a8,So,null),e(So,E6r),e(So,e1e),e(e1e,y6r),e(So,w6r),e(So,Ps),e(Ps,A6r),e(Ps,o1e),e(o1e,L6r),e(Ps,B6r),e(Ps,r1e),e(r1e,x6r),e(Ps,k6r),e(Ps,t1e),e(t1e,R6r),e(Ps,S6r),e(So,P6r),e(So,ve),e(ve,f3),e(f3,a1e),e(a1e,$6r),e(f3,I6r),e(f3,VV),e(VV,j6r),e(f3,D6r),e(ve,N6r),e(ve,g3),e(g3,s1e),e(s1e,q6r),e(g3,O6r),e(g3,zV),e(zV,G6r),e(g3,X6r),e(ve,V6r),e(ve,h3),e(h3,n1e),e(n1e,z6r),e(h3,W6r),e(h3,WV),e(WV,Q6r),e(h3,H6r),e(ve,U6r),e(ve,u3),e(u3,l1e),e(l1e,J6r),e(u3,Y6r),e(u3,QV),e(QV,K6r),e(u3,Z6r),e(ve,eAr),e(ve,p3),e(p3,i1e),e(i1e,oAr),e(p3,rAr),e(p3,HV),e(HV,tAr),e(p3,aAr),e(ve,sAr),e(ve,_3),e(_3,d1e),e(d1e,nAr),e(_3,lAr),e(_3,UV),e(UV,iAr),e(_3,dAr),e(ve,cAr),e(ve,b3),e(b3,c1e),e(c1e,mAr),e(b3,fAr),e(b3,JV),e(JV,gAr),e(b3,hAr),e(ve,uAr),e(ve,v3),e(v3,m1e),e(m1e,pAr),e(v3,_Ar),e(v3,YV),e(YV,bAr),e(v3,vAr),e(ve,TAr),e(ve,T3),e(T3,f1e),e(f1e,FAr),e(T3,CAr),e(T3,KV),e(KV,MAr),e(T3,EAr),e(ve,yAr),e(ve,F3),e(F3,g1e),e(g1e,wAr),e(F3,AAr),e(F3,ZV),e(ZV,LAr),e(F3,BAr),e(So,xAr),e(So,h1e),e(h1e,kAr),e(So,RAr),g(s8,So,null),b(d,Qke,_),b(d,vm,_),e(vm,C3),e(C3,u1e),g(n8,u1e,null),e(vm,SAr),e(vm,p1e),e(p1e,PAr),b(d,Hke,_),b(d,Nr,_),g(l8,Nr,null),e(Nr,$Ar),e(Nr,Tm),e(Tm,IAr),e(Tm,_1e),e(_1e,jAr),e(Tm,DAr),e(Tm,b1e),e(b1e,NAr),e(Tm,qAr),e(Nr,OAr),e(Nr,i8),e(i8,GAr),e(i8,v1e),e(v1e,XAr),e(i8,VAr),e(Nr,zAr),e(Nr,St),g(d8,St,null),e(St,WAr),e(St,T1e),e(T1e,QAr),e(St,HAr),e(St,Fm),e(Fm,UAr),e(Fm,F1e),e(F1e,JAr),e(Fm,YAr),e(Fm,C1e),e(C1e,KAr),e(Fm,ZAr),e(St,e0r),e(St,M1e),e(M1e,o0r),e(St,r0r),g(c8,St,null),e(Nr,t0r),e(Nr,Po),g(m8,Po,null),e(Po,a0r),e(Po,E1e),e(E1e,s0r),e(Po,n0r),e(Po,$s),e($s,l0r),e($s,y1e),e(y1e,i0r),e($s,d0r),e($s,w1e),e(w1e,c0r),e($s,m0r),e($s,A1e),e(A1e,f0r),e($s,g0r),e(Po,h0r),e(Po,Re),e(Re,M3),e(M3,L1e),e(L1e,u0r),e(M3,p0r),e(M3,ez),e(ez,_0r),e(M3,b0r),e(Re,v0r),e(Re,E3),e(E3,B1e),e(B1e,T0r),e(E3,F0r),e(E3,oz),e(oz,C0r),e(E3,M0r),e(Re,E0r),e(Re,y3),e(y3,x1e),e(x1e,y0r),e(y3,w0r),e(y3,rz),e(rz,A0r),e(y3,L0r),e(Re,B0r),e(Re,w3),e(w3,k1e),e(k1e,x0r),e(w3,k0r),e(w3,tz),e(tz,R0r),e(w3,S0r),e(Re,P0r),e(Re,A3),e(A3,R1e),e(R1e,$0r),e(A3,I0r),e(A3,az),e(az,j0r),e(A3,D0r),e(Re,N0r),e(Re,L3),e(L3,S1e),e(S1e,q0r),e(L3,O0r),e(L3,sz),e(sz,G0r),e(L3,X0r),e(Re,V0r),e(Re,B3),e(B3,P1e),e(P1e,z0r),e(B3,W0r),e(B3,nz),e(nz,Q0r),e(B3,H0r),e(Re,U0r),e(Re,x3),e(x3,$1e),e($1e,J0r),e(x3,Y0r),e(x3,lz),e(lz,K0r),e(x3,Z0r),e(Po,eLr),e(Po,I1e),e(I1e,oLr),e(Po,rLr),g(f8,Po,null),b(d,Uke,_),b(d,Cm,_),e(Cm,k3),e(k3,j1e),g(g8,j1e,null),e(Cm,tLr),e(Cm,D1e),e(D1e,aLr),b(d,Jke,_),b(d,qr,_),g(h8,qr,null),e(qr,sLr),e(qr,Mm),e(Mm,nLr),e(Mm,N1e),e(N1e,lLr),e(Mm,iLr),e(Mm,q1e),e(q1e,dLr),e(Mm,cLr),e(qr,mLr),e(qr,u8),e(u8,fLr),e(u8,O1e),e(O1e,gLr),e(u8,hLr),e(qr,uLr),e(qr,Pt),g(p8,Pt,null),e(Pt,pLr),e(Pt,G1e),e(G1e,_Lr),e(Pt,bLr),e(Pt,Em),e(Em,vLr),e(Em,X1e),e(X1e,TLr),e(Em,FLr),e(Em,V1e),e(V1e,CLr),e(Em,MLr),e(Pt,ELr),e(Pt,z1e),e(z1e,yLr),e(Pt,wLr),g(_8,Pt,null),e(qr,ALr),e(qr,$o),g(b8,$o,null),e($o,LLr),e($o,W1e),e(W1e,BLr),e($o,xLr),e($o,Is),e(Is,kLr),e(Is,Q1e),e(Q1e,RLr),e(Is,SLr),e(Is,H1e),e(H1e,PLr),e(Is,$Lr),e(Is,U1e),e(U1e,ILr),e(Is,jLr),e($o,DLr),e($o,Se),e(Se,R3),e(R3,J1e),e(J1e,NLr),e(R3,qLr),e(R3,iz),e(iz,OLr),e(R3,GLr),e(Se,XLr),e(Se,S3),e(S3,Y1e),e(Y1e,VLr),e(S3,zLr),e(S3,dz),e(dz,WLr),e(S3,QLr),e(Se,HLr),e(Se,P3),e(P3,K1e),e(K1e,ULr),e(P3,JLr),e(P3,cz),e(cz,YLr),e(P3,KLr),e(Se,ZLr),e(Se,$3),e($3,Z1e),e(Z1e,e8r),e($3,o8r),e($3,mz),e(mz,r8r),e($3,t8r),e(Se,a8r),e(Se,I3),e(I3,eFe),e(eFe,s8r),e(I3,n8r),e(I3,fz),e(fz,l8r),e(I3,i8r),e(Se,d8r),e(Se,j3),e(j3,oFe),e(oFe,c8r),e(j3,m8r),e(j3,gz),e(gz,f8r),e(j3,g8r),e(Se,h8r),e(Se,D3),e(D3,rFe),e(rFe,u8r),e(D3,p8r),e(D3,hz),e(hz,_8r),e(D3,b8r),e(Se,v8r),e(Se,N3),e(N3,tFe),e(tFe,T8r),e(N3,F8r),e(N3,uz),e(uz,C8r),e(N3,M8r),e($o,E8r),e($o,aFe),e(aFe,y8r),e($o,w8r),g(v8,$o,null),b(d,Yke,_),b(d,ym,_),e(ym,q3),e(q3,sFe),g(T8,sFe,null),e(ym,A8r),e(ym,nFe),e(nFe,L8r),b(d,Kke,_),b(d,Or,_),g(F8,Or,null),e(Or,B8r),e(Or,wm),e(wm,x8r),e(wm,lFe),e(lFe,k8r),e(wm,R8r),e(wm,iFe),e(iFe,S8r),e(wm,P8r),e(Or,$8r),e(Or,C8),e(C8,I8r),e(C8,dFe),e(dFe,j8r),e(C8,D8r),e(Or,N8r),e(Or,$t),g(M8,$t,null),e($t,q8r),e($t,cFe),e(cFe,O8r),e($t,G8r),e($t,Am),e(Am,X8r),e(Am,mFe),e(mFe,V8r),e(Am,z8r),e(Am,fFe),e(fFe,W8r),e(Am,Q8r),e($t,H8r),e($t,gFe),e(gFe,U8r),e($t,J8r),g(E8,$t,null),e(Or,Y8r),e(Or,Io),g(y8,Io,null),e(Io,K8r),e(Io,hFe),e(hFe,Z8r),e(Io,e7r),e(Io,js),e(js,o7r),e(js,uFe),e(uFe,r7r),e(js,t7r),e(js,pFe),e(pFe,a7r),e(js,s7r),e(js,_Fe),e(_Fe,n7r),e(js,l7r),e(Io,i7r),e(Io,bFe),e(bFe,O3),e(O3,vFe),e(vFe,d7r),e(O3,c7r),e(O3,pz),e(pz,m7r),e(O3,f7r),e(Io,g7r),e(Io,TFe),e(TFe,h7r),e(Io,u7r),g(w8,Io,null),b(d,Zke,_),b(d,Lm,_),e(Lm,G3),e(G3,FFe),g(A8,FFe,null),e(Lm,p7r),e(Lm,CFe),e(CFe,_7r),b(d,eRe,_),b(d,Gr,_),g(L8,Gr,null),e(Gr,b7r),e(Gr,Bm),e(Bm,v7r),e(Bm,MFe),e(MFe,T7r),e(Bm,F7r),e(Bm,EFe),e(EFe,C7r),e(Bm,M7r),e(Gr,E7r),e(Gr,B8),e(B8,y7r),e(B8,yFe),e(yFe,w7r),e(B8,A7r),e(Gr,L7r),e(Gr,It),g(x8,It,null),e(It,B7r),e(It,wFe),e(wFe,x7r),e(It,k7r),e(It,xm),e(xm,R7r),e(xm,AFe),e(AFe,S7r),e(xm,P7r),e(xm,LFe),e(LFe,$7r),e(xm,I7r),e(It,j7r),e(It,BFe),e(BFe,D7r),e(It,N7r),g(k8,It,null),e(Gr,q7r),e(Gr,jo),g(R8,jo,null),e(jo,O7r),e(jo,xFe),e(xFe,G7r),e(jo,X7r),e(jo,Ds),e(Ds,V7r),e(Ds,kFe),e(kFe,z7r),e(Ds,W7r),e(Ds,RFe),e(RFe,Q7r),e(Ds,H7r),e(Ds,SFe),e(SFe,U7r),e(Ds,J7r),e(jo,Y7r),e(jo,S8),e(S8,X3),e(X3,PFe),e(PFe,K7r),e(X3,Z7r),e(X3,_z),e(_z,e9r),e(X3,o9r),e(S8,r9r),e(S8,V3),e(V3,$Fe),e($Fe,t9r),e(V3,a9r),e(V3,bz),e(bz,s9r),e(V3,n9r),e(jo,l9r),e(jo,IFe),e(IFe,i9r),e(jo,d9r),g(P8,jo,null),b(d,oRe,_),b(d,km,_),e(km,z3),e(z3,jFe),g($8,jFe,null),e(km,c9r),e(km,DFe),e(DFe,m9r),b(d,rRe,_),b(d,Xr,_),g(I8,Xr,null),e(Xr,f9r),e(Xr,Rm),e(Rm,g9r),e(Rm,NFe),e(NFe,h9r),e(Rm,u9r),e(Rm,qFe),e(qFe,p9r),e(Rm,_9r),e(Xr,b9r),e(Xr,j8),e(j8,v9r),e(j8,OFe),e(OFe,T9r),e(j8,F9r),e(Xr,C9r),e(Xr,jt),g(D8,jt,null),e(jt,M9r),e(jt,GFe),e(GFe,E9r),e(jt,y9r),e(jt,Sm),e(Sm,w9r),e(Sm,XFe),e(XFe,A9r),e(Sm,L9r),e(Sm,VFe),e(VFe,B9r),e(Sm,x9r),e(jt,k9r),e(jt,zFe),e(zFe,R9r),e(jt,S9r),g(N8,jt,null),e(Xr,P9r),e(Xr,Do),g(q8,Do,null),e(Do,$9r),e(Do,WFe),e(WFe,I9r),e(Do,j9r),e(Do,Ns),e(Ns,D9r),e(Ns,QFe),e(QFe,N9r),e(Ns,q9r),e(Ns,HFe),e(HFe,O9r),e(Ns,G9r),e(Ns,UFe),e(UFe,X9r),e(Ns,V9r),e(Do,z9r),e(Do,JFe),e(JFe,W3),e(W3,YFe),e(YFe,W9r),e(W3,Q9r),e(W3,vz),e(vz,H9r),e(W3,U9r),e(Do,J9r),e(Do,KFe),e(KFe,Y9r),e(Do,K9r),g(O8,Do,null),tRe=!0},p(d,[_]){const G8={};_&2&&(G8.$$scope={dirty:_,ctx:d}),qm.$set(G8);const ZFe={};_&2&&(ZFe.$$scope={dirty:_,ctx:d}),Eh.$set(ZFe);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:d}),$h.$set(eCe)},i(d){tRe||(h(me.$$.fragment,d),h(qa.$$.fragment,d),h(J5.$$.fragment,d),h(Y5.$$.fragment,d),h(qm.$$.fragment,d),h(K5.$$.fragment,d),h(Z5.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(sy.$$.fragment,d),h(ny.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(my.$$.fragment,d),h(fy.$$.fragment,d),h(gy.$$.fragment,d),h(py.$$.fragment,d),h(Eh.$$.fragment,d),h(_y.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(My.$$.fragment,d),h($h.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(sw.$$.fragment,d),h(nw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(fw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(uw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(Dw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(s6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(f6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(u6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h($6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(O6.$$.fragment,d),h(G6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(W6.$$.fragment,d),h(H6.$$.fragment,d),h(U6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(Z6.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(sA.$$.fragment,d),h(nA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(mA.$$.fragment,d),h(fA.$$.fragment,d),h(gA.$$.fragment,d),h(uA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(GA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(t0.$$.fragment,d),h(s0.$$.fragment,d),h(n0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(c0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(u0.$$.fragment,d),h(p0.$$.fragment,d),h(_0.$$.fragment,d),h(v0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(E0.$$.fragment,d),h(w0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(k0.$$.fragment,d),h(S0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(D0.$$.fragment,d),h(q0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),h(X0.$$.fragment,d),h(V0.$$.fragment,d),h(z0.$$.fragment,d),h(Q0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(K0.$$.fragment,d),h(eL.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(sL.$$.fragment,d),h(lL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(mL.$$.fragment,d),h(fL.$$.fragment,d),h(hL.$$.fragment,d),h(uL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(FL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(LL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(SL.$$.fragment,d),h($L.$$.fragment,d),h(IL.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),h(GL.$$.fragment,d),h(XL.$$.fragment,d),h(VL.$$.fragment,d),h(zL.$$.fragment,d),h(WL.$$.fragment,d),h(QL.$$.fragment,d),h(UL.$$.fragment,d),h(JL.$$.fragment,d),h(YL.$$.fragment,d),h(KL.$$.fragment,d),h(ZL.$$.fragment,d),h(e8.$$.fragment,d),h(r8.$$.fragment,d),h(t8.$$.fragment,d),h(a8.$$.fragment,d),h(s8.$$.fragment,d),h(n8.$$.fragment,d),h(l8.$$.fragment,d),h(d8.$$.fragment,d),h(c8.$$.fragment,d),h(m8.$$.fragment,d),h(f8.$$.fragment,d),h(g8.$$.fragment,d),h(h8.$$.fragment,d),h(p8.$$.fragment,d),h(_8.$$.fragment,d),h(b8.$$.fragment,d),h(v8.$$.fragment,d),h(T8.$$.fragment,d),h(F8.$$.fragment,d),h(M8.$$.fragment,d),h(E8.$$.fragment,d),h(y8.$$.fragment,d),h(w8.$$.fragment,d),h(A8.$$.fragment,d),h(L8.$$.fragment,d),h(x8.$$.fragment,d),h(k8.$$.fragment,d),h(R8.$$.fragment,d),h(P8.$$.fragment,d),h($8.$$.fragment,d),h(I8.$$.fragment,d),h(D8.$$.fragment,d),h(N8.$$.fragment,d),h(q8.$$.fragment,d),h(O8.$$.fragment,d),tRe=!0)},o(d){u(me.$$.fragment,d),u(qa.$$.fragment,d),u(J5.$$.fragment,d),u(Y5.$$.fragment,d),u(qm.$$.fragment,d),u(K5.$$.fragment,d),u(Z5.$$.fragment,d),u(ry.$$.fragment,d),u(ty.$$.fragment,d),u(ay.$$.fragment,d),u(sy.$$.fragment,d),u(ny.$$.fragment,d),u(dy.$$.fragment,d),u(cy.$$.fragment,d),u(my.$$.fragment,d),u(fy.$$.fragment,d),u(gy.$$.fragment,d),u(py.$$.fragment,d),u(Eh.$$.fragment,d),u(_y.$$.fragment,d),u(by.$$.fragment,d),u(vy.$$.fragment,d),u(Ty.$$.fragment,d),u(My.$$.fragment,d),u($h.$$.fragment,d),u(Ey.$$.fragment,d),u(yy.$$.fragment,d),u(wy.$$.fragment,d),u(Ay.$$.fragment,d),u(By.$$.fragment,d),u(xy.$$.fragment,d),u(ky.$$.fragment,d),u(Ry.$$.fragment,d),u(Sy.$$.fragment,d),u(Py.$$.fragment,d),u(Iy.$$.fragment,d),u(jy.$$.fragment,d),u(Dy.$$.fragment,d),u(Ny.$$.fragment,d),u(qy.$$.fragment,d),u(Oy.$$.fragment,d),u(Xy.$$.fragment,d),u(Vy.$$.fragment,d),u(zy.$$.fragment,d),u(Wy.$$.fragment,d),u(Qy.$$.fragment,d),u(Hy.$$.fragment,d),u(Jy.$$.fragment,d),u(Yy.$$.fragment,d),u(Ky.$$.fragment,d),u(Zy.$$.fragment,d),u(ew.$$.fragment,d),u(ow.$$.fragment,d),u(tw.$$.fragment,d),u(aw.$$.fragment,d),u(sw.$$.fragment,d),u(nw.$$.fragment,d),u(lw.$$.fragment,d),u(iw.$$.fragment,d),u(cw.$$.fragment,d),u(mw.$$.fragment,d),u(fw.$$.fragment,d),u(gw.$$.fragment,d),u(hw.$$.fragment,d),u(uw.$$.fragment,d),u(_w.$$.fragment,d),u(bw.$$.fragment,d),u(vw.$$.fragment,d),u(Tw.$$.fragment,d),u(Fw.$$.fragment,d),u(Cw.$$.fragment,d),u(Ew.$$.fragment,d),u(yw.$$.fragment,d),u(ww.$$.fragment,d),u(Aw.$$.fragment,d),u(Lw.$$.fragment,d),u(Bw.$$.fragment,d),u(kw.$$.fragment,d),u(Rw.$$.fragment,d),u(Sw.$$.fragment,d),u(Pw.$$.fragment,d),u($w.$$.fragment,d),u(Iw.$$.fragment,d),u(Dw.$$.fragment,d),u(Nw.$$.fragment,d),u(qw.$$.fragment,d),u(Ow.$$.fragment,d),u(Gw.$$.fragment,d),u(Xw.$$.fragment,d),u(zw.$$.fragment,d),u(Ww.$$.fragment,d),u(Qw.$$.fragment,d),u(Hw.$$.fragment,d),u(Uw.$$.fragment,d),u(Jw.$$.fragment,d),u(Kw.$$.fragment,d),u(Zw.$$.fragment,d),u(e6.$$.fragment,d),u(o6.$$.fragment,d),u(r6.$$.fragment,d),u(t6.$$.fragment,d),u(s6.$$.fragment,d),u(n6.$$.fragment,d),u(l6.$$.fragment,d),u(i6.$$.fragment,d),u(d6.$$.fragment,d),u(c6.$$.fragment,d),u(f6.$$.fragment,d),u(g6.$$.fragment,d),u(h6.$$.fragment,d),u(u6.$$.fragment,d),u(p6.$$.fragment,d),u(_6.$$.fragment,d),u(v6.$$.fragment,d),u(T6.$$.fragment,d),u(F6.$$.fragment,d),u(C6.$$.fragment,d),u(M6.$$.fragment,d),u(E6.$$.fragment,d),u(w6.$$.fragment,d),u(A6.$$.fragment,d),u(L6.$$.fragment,d),u(B6.$$.fragment,d),u(x6.$$.fragment,d),u(k6.$$.fragment,d),u(S6.$$.fragment,d),u(P6.$$.fragment,d),u($6.$$.fragment,d),u(j6.$$.fragment,d),u(D6.$$.fragment,d),u(N6.$$.fragment,d),u(O6.$$.fragment,d),u(G6.$$.fragment,d),u(X6.$$.fragment,d),u(V6.$$.fragment,d),u(z6.$$.fragment,d),u(W6.$$.fragment,d),u(H6.$$.fragment,d),u(U6.$$.fragment,d),u(J6.$$.fragment,d),u(Y6.$$.fragment,d),u(K6.$$.fragment,d),u(Z6.$$.fragment,d),u(oA.$$.fragment,d),u(rA.$$.fragment,d),u(tA.$$.fragment,d),u(aA.$$.fragment,d),u(sA.$$.fragment,d),u(nA.$$.fragment,d),u(iA.$$.fragment,d),u(dA.$$.fragment,d),u(cA.$$.fragment,d),u(mA.$$.fragment,d),u(fA.$$.fragment,d),u(gA.$$.fragment,d),u(uA.$$.fragment,d),u(pA.$$.fragment,d),u(_A.$$.fragment,d),u(vA.$$.fragment,d),u(TA.$$.fragment,d),u(FA.$$.fragment,d),u(MA.$$.fragment,d),u(EA.$$.fragment,d),u(yA.$$.fragment,d),u(wA.$$.fragment,d),u(AA.$$.fragment,d),u(LA.$$.fragment,d),u(xA.$$.fragment,d),u(kA.$$.fragment,d),u(RA.$$.fragment,d),u(SA.$$.fragment,d),u(PA.$$.fragment,d),u($A.$$.fragment,d),u(jA.$$.fragment,d),u(DA.$$.fragment,d),u(NA.$$.fragment,d),u(qA.$$.fragment,d),u(OA.$$.fragment,d),u(GA.$$.fragment,d),u(VA.$$.fragment,d),u(zA.$$.fragment,d),u(WA.$$.fragment,d),u(QA.$$.fragment,d),u(HA.$$.fragment,d),u(UA.$$.fragment,d),u(YA.$$.fragment,d),u(KA.$$.fragment,d),u(ZA.$$.fragment,d),u(o0.$$.fragment,d),u(r0.$$.fragment,d),u(t0.$$.fragment,d),u(s0.$$.fragment,d),u(n0.$$.fragment,d),u(l0.$$.fragment,d),u(i0.$$.fragment,d),u(d0.$$.fragment,d),u(c0.$$.fragment,d),u(f0.$$.fragment,d),u(g0.$$.fragment,d),u(h0.$$.fragment,d),u(u0.$$.fragment,d),u(p0.$$.fragment,d),u(_0.$$.fragment,d),u(v0.$$.fragment,d),u(T0.$$.fragment,d),u(F0.$$.fragment,d),u(C0.$$.fragment,d),u(M0.$$.fragment,d),u(E0.$$.fragment,d),u(w0.$$.fragment,d),u(A0.$$.fragment,d),u(L0.$$.fragment,d),u(B0.$$.fragment,d),u(x0.$$.fragment,d),u(k0.$$.fragment,d),u(S0.$$.fragment,d),u(P0.$$.fragment,d),u($0.$$.fragment,d),u(I0.$$.fragment,d),u(j0.$$.fragment,d),u(D0.$$.fragment,d),u(q0.$$.fragment,d),u(O0.$$.fragment,d),u(G0.$$.fragment,d),u(X0.$$.fragment,d),u(V0.$$.fragment,d),u(z0.$$.fragment,d),u(Q0.$$.fragment,d),u(H0.$$.fragment,d),u(U0.$$.fragment,d),u(J0.$$.fragment,d),u(Y0.$$.fragment,d),u(K0.$$.fragment,d),u(eL.$$.fragment,d),u(oL.$$.fragment,d),u(rL.$$.fragment,d),u(tL.$$.fragment,d),u(aL.$$.fragment,d),u(sL.$$.fragment,d),u(lL.$$.fragment,d),u(iL.$$.fragment,d),u(dL.$$.fragment,d),u(cL.$$.fragment,d),u(mL.$$.fragment,d),u(fL.$$.fragment,d),u(hL.$$.fragment,d),u(uL.$$.fragment,d),u(pL.$$.fragment,d),u(_L.$$.fragment,d),u(bL.$$.fragment,d),u(vL.$$.fragment,d),u(FL.$$.fragment,d),u(CL.$$.fragment,d),u(ML.$$.fragment,d),u(EL.$$.fragment,d),u(yL.$$.fragment,d),u(wL.$$.fragment,d),u(LL.$$.fragment,d),u(BL.$$.fragment,d),u(xL.$$.fragment,d),u(kL.$$.fragment,d),u(RL.$$.fragment,d),u(SL.$$.fragment,d),u($L.$$.fragment,d),u(IL.$$.fragment,d),u(jL.$$.fragment,d),u(DL.$$.fragment,d),u(NL.$$.fragment,d),u(qL.$$.fragment,d),u(GL.$$.fragment,d),u(XL.$$.fragment,d),u(VL.$$.fragment,d),u(zL.$$.fragment,d),u(WL.$$.fragment,d),u(QL.$$.fragment,d),u(UL.$$.fragment,d),u(JL.$$.fragment,d),u(YL.$$.fragment,d),u(KL.$$.fragment,d),u(ZL.$$.fragment,d),u(e8.$$.fragment,d),u(r8.$$.fragment,d),u(t8.$$.fragment,d),u(a8.$$.fragment,d),u(s8.$$.fragment,d),u(n8.$$.fragment,d),u(l8.$$.fragment,d),u(d8.$$.fragment,d),u(c8.$$.fragment,d),u(m8.$$.fragment,d),u(f8.$$.fragment,d),u(g8.$$.fragment,d),u(h8.$$.fragment,d),u(p8.$$.fragment,d),u(_8.$$.fragment,d),u(b8.$$.fragment,d),u(v8.$$.fragment,d),u(T8.$$.fragment,d),u(F8.$$.fragment,d),u(M8.$$.fragment,d),u(E8.$$.fragment,d),u(y8.$$.fragment,d),u(w8.$$.fragment,d),u(A8.$$.fragment,d),u(L8.$$.fragment,d),u(x8.$$.fragment,d),u(k8.$$.fragment,d),u(R8.$$.fragment,d),u(P8.$$.fragment,d),u($8.$$.fragment,d),u(I8.$$.fragment,d),u(D8.$$.fragment,d),u(N8.$$.fragment,d),u(q8.$$.fragment,d),u(O8.$$.fragment,d),tRe=!1},d(d){t(J),d&&t(Pe),d&&t(de),p(me),d&&t($m),d&&t(ma),d&&t(Le),d&&t(co),d&&t(jm),p(qa,d),d&&t(mo),d&&t(he),d&&t(zo),d&&t(Oa),d&&t(rxe),d&&t(Vi),p(J5),d&&t(txe),d&&t(Vs),d&&t(axe),p(Y5,d),d&&t(sxe),d&&t(V7),d&&t(nxe),p(qm,d),d&&t(lxe),d&&t(zi),p(K5),d&&t(ixe),d&&t(Wo),p(Z5),p(ry),p(ty),p(ay),d&&t(dxe),d&&t(Qi),p(sy),d&&t(cxe),d&&t(Qo),p(ny),p(dy),p(cy),p(my),d&&t(mxe),d&&t(Hi),p(fy),d&&t(fxe),d&&t(Ho),p(gy),p(py),p(Eh),p(_y),p(by),d&&t(gxe),d&&t(Ui),p(vy),d&&t(hxe),d&&t(Uo),p(Ty),p(My),p($h),p(Ey),p(yy),d&&t(uxe),d&&t(Yi),p(wy),d&&t(pxe),d&&t(Jo),p(Ay),p(By),p(xy),p(ky),p(Ry),d&&t(_xe),d&&t(ed),p(Sy),d&&t(bxe),d&&t(Yo),p(Py),p(Iy),p(jy),p(Dy),p(Ny),d&&t(vxe),d&&t(td),p(qy),d&&t(Txe),d&&t(Ko),p(Oy),p(Xy),p(Vy),p(zy),p(Wy),d&&t(Fxe),d&&t(nd),p(Qy),d&&t(Cxe),d&&t(Zo),p(Hy),p(Jy),p(Yy),p(Ky),p(Zy),d&&t(Mxe),d&&t(dd),p(ew),d&&t(Exe),d&&t(er),p(ow),p(tw),p(aw),p(sw),p(nw),d&&t(yxe),d&&t(fd),p(lw),d&&t(wxe),d&&t(or),p(iw),p(cw),p(mw),p(fw),p(gw),d&&t(Axe),d&&t(ud),p(hw),d&&t(Lxe),d&&t(rr),p(uw),p(_w),p(bw),p(vw),p(Tw),d&&t(Bxe),d&&t(bd),p(Fw),d&&t(xxe),d&&t(tr),p(Cw),p(Ew),p(yw),p(ww),p(Aw),d&&t(kxe),d&&t(Fd),p(Lw),d&&t(Rxe),d&&t(ar),p(Bw),p(kw),p(Rw),p(Sw),p(Pw),d&&t(Sxe),d&&t(Ed),p($w),d&&t(Pxe),d&&t(sr),p(Iw),p(Dw),p(Nw),p(qw),p(Ow),d&&t($xe),d&&t(Ad),p(Gw),d&&t(Ixe),d&&t(nr),p(Xw),p(zw),p(Ww),p(Qw),p(Hw),d&&t(jxe),d&&t(xd),p(Uw),d&&t(Dxe),d&&t(lr),p(Jw),p(Kw),p(Zw),p(e6),p(o6),d&&t(Nxe),d&&t(Sd),p(r6),d&&t(qxe),d&&t(ir),p(t6),p(s6),p(n6),p(l6),p(i6),d&&t(Oxe),d&&t(Id),p(d6),d&&t(Gxe),d&&t(dr),p(c6),p(f6),p(g6),p(h6),p(u6),d&&t(Xxe),d&&t(Nd),p(p6),d&&t(Vxe),d&&t(cr),p(_6),p(v6),p(T6),p(F6),p(C6),d&&t(zxe),d&&t(Gd),p(M6),d&&t(Wxe),d&&t(mr),p(E6),p(w6),p(A6),p(L6),p(B6),d&&t(Qxe),d&&t(zd),p(x6),d&&t(Hxe),d&&t(fr),p(k6),p(S6),p(P6),p($6),p(j6),d&&t(Uxe),d&&t(Hd),p(D6),d&&t(Jxe),d&&t(gr),p(N6),p(O6),p(G6),p(X6),p(V6),d&&t(Yxe),d&&t(Yd),p(z6),d&&t(Kxe),d&&t(hr),p(W6),p(H6),p(U6),p(J6),p(Y6),d&&t(Zxe),d&&t(oc),p(K6),d&&t(eke),d&&t(ur),p(Z6),p(oA),p(rA),p(tA),p(aA),d&&t(oke),d&&t(ac),p(sA),d&&t(rke),d&&t(pr),p(nA),p(iA),p(dA),p(cA),p(mA),d&&t(tke),d&&t(lc),p(fA),d&&t(ake),d&&t(_r),p(gA),p(uA),p(pA),p(_A),p(vA),d&&t(ske),d&&t(cc),p(TA),d&&t(nke),d&&t(br),p(FA),p(MA),p(EA),p(yA),p(wA),d&&t(lke),d&&t(gc),p(AA),d&&t(ike),d&&t(vr),p(LA),p(xA),p(kA),p(RA),p(SA),d&&t(dke),d&&t(pc),p(PA),d&&t(cke),d&&t(Tr),p($A),p(jA),p(DA),p(NA),p(qA),d&&t(mke),d&&t(vc),p(OA),d&&t(fke),d&&t(Fr),p(GA),p(VA),p(zA),p(WA),p(QA),d&&t(gke),d&&t(Cc),p(HA),d&&t(hke),d&&t(Cr),p(UA),p(YA),p(KA),p(ZA),p(o0),d&&t(uke),d&&t(yc),p(r0),d&&t(pke),d&&t(Mr),p(t0),p(s0),p(n0),p(l0),p(i0),d&&t(_ke),d&&t(Lc),p(d0),d&&t(bke),d&&t(Er),p(c0),p(f0),p(g0),p(h0),p(u0),d&&t(vke),d&&t(kc),p(p0),d&&t(Tke),d&&t(yr),p(_0),p(v0),p(T0),p(F0),p(C0),d&&t(Fke),d&&t(Pc),p(M0),d&&t(Cke),d&&t(wr),p(E0),p(w0),p(A0),p(L0),p(B0),d&&t(Mke),d&&t(jc),p(x0),d&&t(Eke),d&&t(Ar),p(k0),p(S0),p(P0),p($0),p(I0),d&&t(yke),d&&t(qc),p(j0),d&&t(wke),d&&t(Lr),p(D0),p(q0),p(O0),p(G0),p(X0),d&&t(Ake),d&&t(Xc),p(V0),d&&t(Lke),d&&t(Br),p(z0),p(Q0),p(H0),p(U0),p(J0),d&&t(Bke),d&&t(Wc),p(Y0),d&&t(xke),d&&t(xr),p(K0),p(eL),p(oL),p(rL),p(tL),d&&t(kke),d&&t(Uc),p(aL),d&&t(Rke),d&&t(kr),p(sL),p(lL),p(iL),p(dL),p(cL),d&&t(Ske),d&&t(Kc),p(mL),d&&t(Pke),d&&t(Rr),p(fL),p(hL),p(uL),p(pL),p(_L),d&&t($ke),d&&t(om),p(bL),d&&t(Ike),d&&t(Sr),p(vL),p(FL),p(CL),p(ML),p(EL),d&&t(jke),d&&t(am),p(yL),d&&t(Dke),d&&t(Pr),p(wL),p(LL),p(BL),p(xL),p(kL),d&&t(Nke),d&&t(lm),p(RL),d&&t(qke),d&&t($r),p(SL),p($L),p(IL),p(jL),p(DL),d&&t(Oke),d&&t(cm),p(NL),d&&t(Gke),d&&t(Ir),p(qL),p(GL),p(XL),p(VL),p(zL),d&&t(Xke),d&&t(gm),p(WL),d&&t(Vke),d&&t(jr),p(QL),p(UL),p(JL),p(YL),p(KL),d&&t(zke),d&&t(pm),p(ZL),d&&t(Wke),d&&t(Dr),p(e8),p(r8),p(t8),p(a8),p(s8),d&&t(Qke),d&&t(vm),p(n8),d&&t(Hke),d&&t(Nr),p(l8),p(d8),p(c8),p(m8),p(f8),d&&t(Uke),d&&t(Cm),p(g8),d&&t(Jke),d&&t(qr),p(h8),p(p8),p(_8),p(b8),p(v8),d&&t(Yke),d&&t(ym),p(T8),d&&t(Kke),d&&t(Or),p(F8),p(M8),p(E8),p(y8),p(w8),d&&t(Zke),d&&t(Lm),p(A8),d&&t(eRe),d&&t(Gr),p(L8),p(x8),p(k8),p(R8),p(P8),d&&t(oRe),d&&t(km),p($8),d&&t(rRe),d&&t(Xr),p(I8),p(D8),p(N8),p(q8),p(O8)}}}const RCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SCt(Ii,J,Pe){let{fw:de}=J;return Ii.$$set=ge=>{"fw"in ge&&Pe(0,de=ge.fw)},[de]}class qCt extends ECt{constructor(J){super();yCt(this,J,SCt,kCt,wCt,{fw:0})}}export{qCt as default,RCt as metadata};
